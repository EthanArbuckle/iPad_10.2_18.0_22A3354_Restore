void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void **std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>(uint64_t a1, void **a2)
{
  void **v2;
  _QWORD *v3;
  void **v5;
  char v6;
  _QWORD *v7;

  v2 = (void **)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (void **)(a1 + 8);
  do
  {
    v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6 >= 0)
      v5 = (void **)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::string,MeCab::CharInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::CharInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::CharInfo>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,MeCab::CharInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::CharInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::CharInfo>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,MeCab::CharInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::CharInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::CharInfo>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, void **a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)v4 + 4) & 0x80) == 0)
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3) & 0x80) == 0)
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void std::vector<double>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<char *>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

double marisa::Agent::Agent(marisa::Agent *this)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

void marisa::Agent::~Agent(marisa::Agent *this)
{
  marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr((_QWORD *)this + 5);
}

_QWORD *marisa::Agent::set_query(_QWORD *this, const char *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *exception;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc";
    exception[2] = 0x200000015;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc:21: MARISA_NULL_ERROR: (ptr == NULL)"
                   " && (length != 0)";
  }
  v3 = this[5];
  if (v3)
    *(_DWORD *)(v3 + 108) = 0;
  *this = a2;
  this[1] = a3;
  return this;
}

uint64_t marisa::Agent::set_query(uint64_t this, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 40);
  if (v2)
    *(_DWORD *)(v2 + 108) = 0;
  *(_QWORD *)(this + 16) = a2;
  return this;
}

_QWORD *marisa::Agent::init_state(marisa::Agent *this)
{
  uint64_t *v1;
  _OWORD *v2;
  _QWORD *result;
  _QWORD *exception;
  const char *v5;

  v1 = (uint64_t *)((char *)this + 40);
  if (*((_QWORD *)this + 5))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc";
    exception[2] = 0x100000024;
    v5 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc:36: MARISA_STATE_ERROR: state_.get() != NULL";
    goto LABEL_8;
  }
  v2 = operator new(0x70uLL, MEMORY[0x24BEDB6B8]);
  if (v2)
  {
    *(_OWORD *)((char *)v2 + 25) = 0u;
    *v2 = 0u;
    v2[1] = 0u;
    v2[3] = 0u;
    v2[4] = 0u;
    *(_OWORD *)((char *)v2 + 73) = 0u;
    *((_QWORD *)v2 + 12) = 0;
    *((_QWORD *)v2 + 13) = 0;
  }
  result = marisa::scoped_ptr<marisa::grimoire::trie::State>::reset(v1, (uint64_t)v2);
  if (!*v1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc";
    exception[2] = 0x800000026;
    v5 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/agent.cc:38: MARISA_MEMORY_ERROR: state_.get() == NULL";
LABEL_8:
    exception[3] = v5;
  }
  return result;
}

_QWORD *marisa::scoped_ptr<marisa::grimoire::trie::State>::reset(uint64_t *a1, uint64_t a2)
{
  _QWORD *exception;
  uint64_t v4;

  if (a2 && *a1 == a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/include/marisa/scoped-ptr.h";
    exception[2] = 0x600000013;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/include/marisa/scoped-ptr.h:19: MARISA_RESET_ERROR: (ptr"
                   " != NULL) && (ptr == ptr_)";
  }
  v4 = *a1;
  *a1 = a2;
  return marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr(&v4);
}

void marisa::Exception::~Exception(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x20BD0639CLL);
}

uint64_t marisa::Exception::what(marisa::Exception *this)
{
  return *((_QWORD *)this + 3);
}

_QWORD *marisa::scoped_ptr<marisa::grimoire::trie::State>::~scoped_ptr(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = v2[6];
    if (v3)
      MEMORY[0x20BD06378](v3, 0x1000C8077774924);
    if (*v2)
      MEMORY[0x20BD06378](*v2, 0x1000C8077774924);
    MEMORY[0x20BD0639C](v2, 0x1070C406A3FAA47);
  }
  return a1;
}

uint64_t marisa::grimoire::io::Mapper::Mapper(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = -1;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = -1;
  return this;
}

void marisa::grimoire::io::Mapper::~Mapper(marisa::grimoire::io::Mapper *this)
{
  void *v2;
  int v3;

  v2 = (void *)*((_QWORD *)this + 1);
  if (v2 != (void *)-1)
    munmap(v2, *((_QWORD *)this + 3));
  v3 = *((_DWORD *)this + 8);
  if (v3 != -1)
    close(v3);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t *marisa::grimoire::io::Mapper::swap(uint64_t *this, marisa::grimoire::io::Mapper *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *this;
  *this = *(_QWORD *)a2;
  *(_QWORD *)a2 = v2;
  v4 = this[1];
  v3 = this[2];
  v5 = *((_QWORD *)a2 + 2);
  this[1] = *((_QWORD *)a2 + 1);
  this[2] = v5;
  *((_QWORD *)a2 + 1) = v4;
  *((_QWORD *)a2 + 2) = v3;
  v6 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  LODWORD(v6) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  return this;
}

__n128 marisa::grimoire::io::Mapper::open(marisa::grimoire::io::Mapper *this, const void *a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  int v5;
  __n128 result;
  _QWORD *exception;
  _OWORD v8[2];
  int v9;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x20000003FLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:63: MARISA_NULL_ERROR: "
                   "(ptr == NULL) && (size != 0)";
  }
  v3 = *(_OWORD *)this;
  v4 = *((_OWORD *)this + 1);
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = -1;
  *((_QWORD *)this + 2) = a3;
  *((_QWORD *)this + 3) = 0;
  v8[0] = v3;
  v8[1] = v4;
  v5 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = -1;
  v9 = v5;
  marisa::grimoire::io::Mapper::~Mapper((marisa::grimoire::io::Mapper *)v8);
  return result;
}

uint64_t marisa::grimoire::io::Mapper::seek(marisa::grimoire::io::Mapper *this, unint64_t a2)
{
  _QWORD *exception;
  const char *v4;

  if (!*(_QWORD *)this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x100000047;
    v4 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:71: MARISA_STATE_ERROR: !is_open()";
    goto LABEL_6;
  }
  if (*((_QWORD *)this + 2) < a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x900000048;
    v4 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:72: MARISA_IO_ERROR: size > avail_";
LABEL_6:
    exception[3] = v4;
  }
  return marisa::grimoire::io::Mapper::map_data(this, a2);
}

uint64_t marisa::grimoire::io::Mapper::map_data(marisa::grimoire::io::Mapper *this, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  _QWORD *exception;
  const char *v8;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x100000063;
    v8 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:99: MARISA_STATE_ERROR: !is_open()";
LABEL_6:
    exception[3] = v8;
  }
  v3 = *((_QWORD *)this + 2);
  v4 = v3 >= a2;
  v5 = v3 - a2;
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x900000064;
    v8 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/mapper.cc:100: MARISA_IO_ERROR: size > avail_";
    goto LABEL_6;
  }
  *(_QWORD *)this = v2 + a2;
  *((_QWORD *)this + 2) = v5;
  return v2;
}

uint64_t marisa::grimoire::io::Writer::Writer(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_DWORD *)(this + 8) = -1;
  *(_QWORD *)(this + 16) = 0;
  *(_BYTE *)(this + 24) = 0;
  return this;
}

void marisa::grimoire::io::Writer::~Writer(FILE **this)
{
  if (*((_BYTE *)this + 24))
    fclose(*this);
}

FILE *marisa::grimoire::io::Writer::open(uint64_t a1, uint64_t a2)
{
  FILE *result;
  int v4;

  result = *(FILE **)a1;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_QWORD *)(a1 + 16) = a2;
  v4 = *(unsigned __int8 *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = 0;
  if (v4)
    return (FILE *)fclose(result);
  return result;
}

uint64_t marisa::grimoire::io::Writer::seek(uint64_t this, size_t __nitems)
{
  size_t v2;
  uint64_t v3;
  size_t v4;
  _QWORD *exception;
  _QWORD __buf[129];

  v2 = __nitems;
  v3 = this;
  __buf[128] = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)this && *(_DWORD *)(this + 8) == -1 && !*(_QWORD *)(this + 16))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc";
    exception[2] = 0x100000044;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc:68: MARISA_STATE_ERROR: !is_open()";
  }
  if (__nitems)
  {
    if (__nitems > 0x10)
    {
      bzero(__buf, 0x400uLL);
      do
      {
        if (v2 >= 0x400)
          v4 = 1024;
        else
          v4 = v2;
        this = marisa::grimoire::io::Writer::write_data(v3, (char *)__buf, v4);
        v2 -= v4;
      }
      while (v2);
    }
    else
    {
      __buf[0] = 0;
      __buf[1] = 0;
      return marisa::grimoire::io::Writer::write_data(this, (char *)__buf, __nitems);
    }
  }
  return this;
}

uint64_t marisa::grimoire::io::Writer::write_data(uint64_t this, char *__buf, size_t __nitems)
{
  size_t v3;
  char *v4;
  uint64_t v5;
  FILE *v6;
  size_t v7;
  _QWORD *exception;
  const char *v9;
  _QWORD *v10;

  v3 = __nitems;
  v4 = __buf;
  v5 = this;
  v6 = *(FILE **)this;
  if (!*(_QWORD *)this && *(_DWORD *)(this + 8) == -1 && !*(_QWORD *)(this + 16))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc";
    exception[2] = 0x100000071;
    v9 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc:113: MARISA_STATE_ERROR: !is_open()";
    goto LABEL_20;
  }
  if (__nitems)
  {
    if (*(_DWORD *)(this + 8) != -1)
    {
      while (1)
      {
        v7 = v3 >= 0x7FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v3;
        this = write(*(_DWORD *)(v5 + 8), v4, v7);
        if (this <= 0)
          break;
        v4 += this;
        v3 -= this;
        if (!v3)
          return this;
      }
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_24C09C668;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc";
      exception[2] = 0x900000081;
      v9 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc:129: MARISA_IO_ERROR: size_written <= 0";
LABEL_20:
      exception[3] = v9;
    }
    if (v6)
    {
      if (fwrite(__buf, 1uLL, __nitems, v6) != __nitems)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        *exception = &off_24C09C668;
        exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc";
        exception[2] = 0x900000086;
        v9 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc:134: MARISA_IO_ERROR: ::fwrit"
             "e(data, 1, size, file_) != size";
        goto LABEL_20;
      }
      this = fflush(*(FILE **)v5);
      if ((_DWORD)this)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        *exception = &off_24C09C668;
        exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc";
        exception[2] = 0x900000087;
        v9 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc:135: MARISA_IO_ERROR: ::fflush(file_) != 0";
        goto LABEL_20;
      }
    }
    else
    {
      this = *(_QWORD *)(this + 16);
      if (this)
      {
        this = std::ostream::write();
        if ((*(_BYTE *)(this + *(_QWORD *)(*(_QWORD *)this - 24) + 32) & 5) != 0)
        {
          v10 = __cxa_allocate_exception(0x20uLL);
          *v10 = &off_24C09C668;
          v10[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc";
          v10[2] = 0x90000008BLL;
          v10[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/io/writer.cc:139: MARISA_IO_ERROR: !"
                   "stream_->write(static_cast<const char *>(data), size)";
        }
      }
    }
  }
  return this;
}

void sub_20839A358()
{
  __break(1u);
}

void sub_20839A3BC()
{
  __cxa_end_catch();
  JUMPOUT(0x20839A3C4);
}

marisa::grimoire::trie::LoudsTrie *marisa::grimoire::trie::LoudsTrie::LoudsTrie(marisa::grimoire::trie::LoudsTrie *this)
{
  *(_OWORD *)((char *)this + 25) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 137) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *(_OWORD *)((char *)this + 185) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *(_OWORD *)((char *)this + 89) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *(_OWORD *)((char *)this + 233) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *(_OWORD *)((char *)this + 345) = 0u;
  *(_OWORD *)((char *)this + 393) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 297) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *(_OWORD *)((char *)this + 441) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *(_OWORD *)((char *)this + 553) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *(_OWORD *)((char *)this + 601) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *(_OWORD *)((char *)this + 505) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *(_OWORD *)((char *)this + 649) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 697) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_QWORD *)this + 90) = 0;
  *((_DWORD *)this + 182) = 0;
  *((_QWORD *)this + 92) = 0;
  marisa::grimoire::trie::Tail::Tail((marisa::grimoire::trie::LoudsTrie *)((char *)this + 744));
  *((_BYTE *)this + 1048) = 0;
  *(_OWORD *)((char *)this + 1016) = 0u;
  *(_OWORD *)((char *)this + 1032) = 0u;
  *(_OWORD *)((char *)this + 1000) = 0u;
  *((_OWORD *)this + 66) = 0u;
  *((_QWORD *)this + 134) = 3;
  *((_QWORD *)this + 135) = 0x100000000200;
  *((_DWORD *)this + 272) = 0x20000;
  marisa::grimoire::io::Mapper::Mapper((uint64_t)this + 1096);
  return this;
}

void sub_20839A4F0(_Unwind_Exception *a1)
{
  marisa::grimoire::vector::BitVector *v1;
  marisa::grimoire::vector::BitVector *v2;
  marisa::grimoire::vector::BitVector *v3;
  marisa::grimoire::trie::Tail *v4;
  marisa::grimoire::trie::LoudsTrie **v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;

  v9 = *((_QWORD *)v1 + 126);
  if (v9)
    MEMORY[0x20BD06378](v9, 0x1000C8077774924);
  marisa::scoped_ptr<marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(v5);
  marisa::grimoire::trie::Tail::~Tail(v4);
  if (*v7)
    MEMORY[0x20BD06378](*v7, 0x1000C8077774924);
  if (*v6)
    MEMORY[0x20BD06378](*v6, 0x1000C8077774924);
  marisa::grimoire::vector::BitVector::~BitVector(v3);
  marisa::grimoire::vector::BitVector::~BitVector(v2);
  marisa::grimoire::vector::BitVector::~BitVector(v1);
  _Unwind_Resume(a1);
}

void marisa::grimoire::trie::Tail::~Tail(marisa::grimoire::trie::Tail *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 26);
  if (v2)
    MEMORY[0x20BD06378](v2, 0x1000C8077774924);
  v3 = *((_QWORD *)this + 20);
  if (v3)
    MEMORY[0x20BD06378](v3, 0x1000C8077774924);
  v4 = *((_QWORD *)this + 14);
  if (v4)
    MEMORY[0x20BD06378](v4, 0x1000C8077774924);
  v5 = *((_QWORD *)this + 6);
  if (v5)
    MEMORY[0x20BD06378](v5, 0x1000C8077774924);
  if (*(_QWORD *)this)
    MEMORY[0x20BD06378](*(_QWORD *)this, 0x1000C8077774924);
}

void marisa::grimoire::vector::BitVector::~BitVector(marisa::grimoire::vector::BitVector *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 20);
  if (v2)
    MEMORY[0x20BD06378](v2, 0x1000C8077774924);
  v3 = *((_QWORD *)this + 14);
  if (v3)
    MEMORY[0x20BD06378](v3, 0x1000C8077774924);
  v4 = *((_QWORD *)this + 8);
  if (v4)
    MEMORY[0x20BD06378](v4, 0x1000C8077774924);
  if (*(_QWORD *)this)
    MEMORY[0x20BD06378](*(_QWORD *)this, 0x1000C8077774924);
}

void marisa::grimoire::trie::LoudsTrie::~LoudsTrie(marisa::grimoire::trie::LoudsTrie *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  marisa::grimoire::io::Mapper::~Mapper((marisa::grimoire::trie::LoudsTrie *)((char *)this + 1096));
  v2 = *((_QWORD *)this + 126);
  if (v2)
    MEMORY[0x20BD06378](v2, 0x1000C8077774924);
  marisa::scoped_ptr<marisa::grimoire::trie::LoudsTrie>::~scoped_ptr((char *)this + 1000);
  v3 = *((_QWORD *)this + 119);
  if (v3)
    MEMORY[0x20BD06378](v3, 0x1000C8077774924);
  v4 = *((_QWORD *)this + 113);
  if (v4)
    MEMORY[0x20BD06378](v4, 0x1000C8077774924);
  v5 = *((_QWORD *)this + 107);
  if (v5)
    MEMORY[0x20BD06378](v5, 0x1000C8077774924);
  v6 = *((_QWORD *)this + 99);
  if (v6)
    MEMORY[0x20BD06378](v6, 0x1000C8077774924);
  v7 = *((_QWORD *)this + 93);
  if (v7)
    MEMORY[0x20BD06378](v7, 0x1000C8077774924);
  v8 = *((_QWORD *)this + 84);
  if (v8)
    MEMORY[0x20BD06378](v8, 0x1000C8077774924);
  v9 = *((_QWORD *)this + 78);
  if (v9)
    MEMORY[0x20BD06378](v9, 0x1000C8077774924);
  v10 = *((_QWORD *)this + 72);
  if (v10)
    MEMORY[0x20BD06378](v10, 0x1000C8077774924);
  v11 = *((_QWORD *)this + 66);
  if (v11)
    MEMORY[0x20BD06378](v11, 0x1000C8077774924);
  v12 = *((_QWORD *)this + 60);
  if (v12)
    MEMORY[0x20BD06378](v12, 0x1000C8077774924);
  v13 = *((_QWORD *)this + 52);
  if (v13)
    MEMORY[0x20BD06378](v13, 0x1000C8077774924);
  v14 = *((_QWORD *)this + 46);
  if (v14)
    MEMORY[0x20BD06378](v14, 0x1000C8077774924);
  v15 = *((_QWORD *)this + 40);
  if (v15)
    MEMORY[0x20BD06378](v15, 0x1000C8077774924);
  v16 = *((_QWORD *)this + 34);
  if (v16)
    MEMORY[0x20BD06378](v16, 0x1000C8077774924);
  v17 = *((_QWORD *)this + 26);
  if (v17)
    MEMORY[0x20BD06378](v17, 0x1000C8077774924);
  v18 = *((_QWORD *)this + 20);
  if (v18)
    MEMORY[0x20BD06378](v18, 0x1000C8077774924);
  v19 = *((_QWORD *)this + 14);
  if (v19)
    MEMORY[0x20BD06378](v19, 0x1000C8077774924);
  v20 = *((_QWORD *)this + 8);
  if (v20)
    MEMORY[0x20BD06378](v20, 0x1000C8077774924);
  if (*(_QWORD *)this)
    MEMORY[0x20BD06378](*(_QWORD *)this, 0x1000C8077774924);
}

void marisa::grimoire::trie::LoudsTrie::build(marisa::grimoire::trie::LoudsTrie *this, marisa::Keyset *a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD v8[2];
  int v9;

  v5 = 3;
  v6 = 0x100000000200;
  v7 = 0x20000;
  marisa::grimoire::trie::Config::parse_((marisa::grimoire::trie::Config *)&v5, a3);
  v8[0] = v5;
  v8[1] = v6;
  v9 = v7;
  marisa::grimoire::trie::LoudsTrie::LoudsTrie((marisa::grimoire::trie::LoudsTrie *)&v5);
  marisa::grimoire::trie::LoudsTrie::build_((marisa::grimoire::trie::LoudsTrie *)&v5, a2, (const marisa::grimoire::trie::Config *)v8);
  marisa::grimoire::trie::LoudsTrie::swap(this, (marisa::grimoire::trie::LoudsTrie *)&v5);
  marisa::grimoire::trie::LoudsTrie::~LoudsTrie((marisa::grimoire::trie::LoudsTrie *)&v5);
}

void sub_20839A9BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  marisa::grimoire::trie::LoudsTrie::~LoudsTrie((marisa::grimoire::trie::LoudsTrie *)va);
  _Unwind_Resume(a1);
}

uint64_t marisa::grimoire::trie::LoudsTrie::build_(marisa::grimoire::trie::LoudsTrie *this, marisa::Keyset *a2, const marisa::grimoire::trie::Config *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t i;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t result;
  _OWORD v28[3];
  __int128 v29;
  unint64_t v30[4];
  _OWORD v31[3];
  char v32;

  memset(v31, 0, 41);
  marisa::grimoire::vector::Vector<marisa::grimoire::trie::Key>::resize((uint64_t *)v31, *((_QWORD *)a2 + 11));
  if (*((_QWORD *)a2 + 11))
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = *((_QWORD *)&v31[0] + 1) + v6;
      v9 = *(_QWORD *)(*((_QWORD *)a2 + 6) + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7;
      v10 = *(_DWORD *)(v9 + 8);
      *(_QWORD *)v8 = *(_QWORD *)v9;
      *(_DWORD *)(v8 + 8) = v10;
      *(_DWORD *)(v8 + 12) = *(_DWORD *)(v9 + 12);
      ++v7;
      v6 += 24;
    }
    while (v7 < *((_QWORD *)a2 + 11));
  }
  v29 = 0u;
  memset(v30, 0, 25);
  marisa::grimoire::trie::LoudsTrie::build_trie<marisa::grimoire::trie::Key>((uint64_t)this, (uint64_t *)v31, &v29, (uint64_t)a3, 1);
  memset(v28, 0, 41);
  marisa::grimoire::vector::Vector<std::pair<unsigned int,unsigned int>>::resize((uint64_t *)v28, v30[1]);
  v11 = *((_QWORD *)&v28[1] + 1);
  if (*((_QWORD *)&v28[1] + 1))
  {
    v12 = 0;
    v13 = *((_QWORD *)&v29 + 1);
    v14 = (_DWORD *)(*((_QWORD *)&v28[0] + 1) + 4);
    do
    {
      *(v14 - 1) = *(_DWORD *)(v13 + 4 * v12);
      *v14 = v12++;
      v14 += 2;
    }
    while (v11 != v12);
  }
  v15 = v29;
  v29 = 0u;
  memset(v30, 0, 25);
  if (v15)
  {
    MEMORY[0x20BD06378](v15, 0x1000C8077774924);
    v11 = *((_QWORD *)&v28[1] + 1);
  }
  v16 = 126 - 2 * __clz(v11);
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *,false>(*((uint64_t *)&v28[0] + 1), (unsigned int *)(*((_QWORD *)&v28[0] + 1) + 8 * v11), (uint64_t)&v32, v17, 1);
  if (*((_QWORD *)&v28[1] + 1))
  {
    v18 = 0;
    v19 = 0;
    do
    {
      for (i = *((_QWORD *)&v28[0] + 1); ; i = *((_QWORD *)&v28[0] + 1))
      {
        v21 = *(unsigned int *)(i + 8 * v18);
        if (v19 >= v21)
          break;
        marisa::grimoire::vector::BitVector::push_back((uint64_t *)this + 26, 0);
        ++v19;
      }
      if (v19 == v21)
      {
        marisa::grimoire::vector::BitVector::push_back((uint64_t *)this + 26, 1);
        ++v19;
      }
      ++v18;
    }
    while (v18 < *((_QWORD *)&v28[1] + 1));
  }
  else
  {
    v19 = 0;
  }
  for (; v19 < *((_QWORD *)this + 81); ++v19)
    marisa::grimoire::vector::BitVector::push_back((uint64_t *)this + 26, 0);
  v22 = (uint64_t *)((char *)this + 208);
  marisa::grimoire::vector::BitVector::push_back(v22, 0);
  marisa::grimoire::vector::BitVector::build((marisa::grimoire::vector::BitVector *)v22, 0, 1);
  if (*((_QWORD *)a2 + 11))
  {
    v23 = 0;
    v24 = 0;
    do
    {
      v25 = *(unsigned int *)(*((_QWORD *)&v28[0] + 1) + v23 + 4);
      v26 = *(_QWORD *)(*((_QWORD *)a2 + 6) + ((v25 >> 5) & 0x7FFFFF8));
      *(_DWORD *)(v26 + 16 * v25 + 12) = marisa::grimoire::vector::BitVector::rank1((marisa::grimoire::vector::BitVector *)v22, *(unsigned int *)(*((_QWORD *)&v28[0] + 1) + v23));
      ++v24;
      v23 += 8;
    }
    while (v24 < *((_QWORD *)a2 + 11));
  }
  if (*(_QWORD *)&v28[0])
    MEMORY[0x20BD06378](*(_QWORD *)&v28[0], 0x1000C8077774924);
  if ((_QWORD)v29)
    MEMORY[0x20BD06378](v29, 0x1000C8077774924);
  result = *(_QWORD *)&v31[0];
  if (*(_QWORD *)&v31[0])
    return MEMORY[0x20BD06378](*(_QWORD *)&v31[0], 0x1000C8077774924);
  return result;
}

void sub_20839AC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a15)
    MEMORY[0x20BD06378](a15, 0x1000C8077774924);
  if (a21)
    MEMORY[0x20BD06378](a21, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t *marisa::grimoire::trie::LoudsTrie::swap(marisa::grimoire::trie::LoudsTrie *this, marisa::grimoire::trie::LoudsTrie *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  marisa::grimoire::vector::BitVector::swap(this, a2);
  marisa::grimoire::vector::BitVector::swap((marisa::grimoire::trie::LoudsTrie *)((char *)this + 208), (marisa::grimoire::trie::LoudsTrie *)((char *)a2 + 208));
  marisa::grimoire::vector::BitVector::swap((marisa::grimoire::trie::LoudsTrie *)((char *)this + 416), (marisa::grimoire::trie::LoudsTrie *)((char *)a2 + 416));
  marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this + 78, (uint64_t *)a2 + 78);
  marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this + 84, (uint64_t *)a2 + 84);
  v4 = *((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = *((_QWORD *)a2 + 90);
  *((_QWORD *)a2 + 90) = v4;
  LODWORD(v4) = *((_DWORD *)this + 182);
  *((_DWORD *)this + 182) = *((_DWORD *)a2 + 182);
  *((_DWORD *)a2 + 182) = v4;
  v5 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = *((_QWORD *)a2 + 92);
  *((_QWORD *)a2 + 92) = v5;
  marisa::grimoire::trie::Tail::swap((marisa::grimoire::trie::LoudsTrie *)((char *)this + 744), (marisa::grimoire::trie::LoudsTrie *)((char *)a2 + 744));
  v6 = *((_QWORD *)this + 125);
  *((_QWORD *)this + 125) = *((_QWORD *)a2 + 125);
  *((_QWORD *)a2 + 125) = v6;
  marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this + 126, (uint64_t *)a2 + 126);
  v7 = *((_QWORD *)this + 132);
  *((_QWORD *)this + 132) = *((_QWORD *)a2 + 132);
  *((_QWORD *)a2 + 132) = v7;
  v8 = *((_QWORD *)this + 133);
  *((_QWORD *)this + 133) = *((_QWORD *)a2 + 133);
  *((_QWORD *)a2 + 133) = v8;
  v9 = *((_QWORD *)this + 134);
  *((_QWORD *)this + 134) = *((_QWORD *)a2 + 134);
  *((_QWORD *)a2 + 134) = v9;
  v10 = *((_QWORD *)this + 135);
  *((_QWORD *)this + 135) = *((_QWORD *)a2 + 135);
  *((_QWORD *)a2 + 135) = v10;
  LODWORD(v9) = *((_DWORD *)this + 272);
  *((_DWORD *)this + 272) = *((_DWORD *)a2 + 272);
  *((_DWORD *)a2 + 272) = v9;
  return marisa::grimoire::io::Mapper::swap((uint64_t *)this + 137, (marisa::grimoire::trie::LoudsTrie *)((char *)a2 + 1096));
}

void marisa::grimoire::trie::LoudsTrie::map(marisa::grimoire::trie::LoudsTrie *this, marisa::grimoire::io::Mapper *a2)
{
  _BYTE v4[1096];
  uint64_t v5[5];

  marisa::grimoire::trie::Header::map((marisa::grimoire::trie::Header *)v4, a2);
  marisa::grimoire::trie::LoudsTrie::LoudsTrie((marisa::grimoire::trie::LoudsTrie *)v4);
  marisa::grimoire::trie::LoudsTrie::map_((marisa::grimoire::trie::LoudsTrie *)v4, a2);
  marisa::grimoire::io::Mapper::swap(v5, a2);
  marisa::grimoire::trie::LoudsTrie::swap(this, (marisa::grimoire::trie::LoudsTrie *)v4);
  marisa::grimoire::trie::LoudsTrie::~LoudsTrie((marisa::grimoire::trie::LoudsTrie *)v4);
}

void sub_20839AE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  marisa::grimoire::trie::LoudsTrie::~LoudsTrie((marisa::grimoire::trie::LoudsTrie *)&a9);
  _Unwind_Resume(a1);
}

_BYTE *marisa::grimoire::trie::Header::map(marisa::grimoire::trie::Header *this, marisa::grimoire::io::Mapper *a2)
{
  _BYTE *result;
  uint64_t v3;
  int v4;
  int v5;
  _QWORD *exception;

  result = (_BYTE *)marisa::grimoire::io::Mapper::map_data(a2, 0x10uLL);
  if (*result != 87)
    goto LABEL_7;
  v3 = 1u;
  do
  {
    if (v3 == 16)
      return result;
    v4 = result[v3];
    v5 = marisa::grimoire::trie::Header::get_header(void)::buf[v3++];
  }
  while (v4 == v5);
  if ((unint64_t)(v3 - 2) <= 0xE)
  {
LABEL_7:
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/header.h";
    exception[2] = 0xA00000015;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/header.h:21: MARISA_FORMAT_ERRO"
                   "R: !test_header(ptr)";
  }
  return result;
}

double marisa::grimoire::trie::LoudsTrie::map_(marisa::grimoire::trie::LoudsTrie *this, marisa::grimoire::io::Mapper *a2)
{
  marisa::grimoire::trie::LoudsTrie *v4;
  marisa::grimoire::trie::LoudsTrie *v5;
  marisa::grimoire::trie::LoudsTrie *v6;
  unsigned int v7;
  double result;
  _QWORD *exception;
  uint64_t v10;
  double v11;
  int v12;

  marisa::grimoire::vector::BitVector::map(this, a2);
  marisa::grimoire::vector::BitVector::map((marisa::grimoire::trie::LoudsTrie *)((char *)this + 208), a2);
  marisa::grimoire::vector::BitVector::map((marisa::grimoire::trie::LoudsTrie *)((char *)this + 416), a2);
  marisa::grimoire::vector::Vector<unsigned char>::map((__int128 *)this + 39, a2);
  marisa::grimoire::vector::FlatVector::map((marisa::grimoire::trie::LoudsTrie *)((char *)this + 672), a2);
  marisa::grimoire::trie::Tail::map((marisa::grimoire::trie::LoudsTrie *)((char *)this + 744), a2);
  if (*((_QWORD *)this + 59) && !*((_QWORD *)this + 96))
  {
    v4 = (marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x24BEDB6B8]);
    v5 = v4;
    if (v4)
      marisa::grimoire::trie::LoudsTrie::LoudsTrie(v4);
    marisa::scoped_ptr<marisa::grimoire::trie::LoudsTrie>::reset((marisa::grimoire::trie::LoudsTrie **)this + 125, v5);
    v6 = (marisa::grimoire::trie::LoudsTrie *)*((_QWORD *)this + 125);
    if (!v6)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_24C09C668;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x80000021ELL;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc:542: MARISA_MEM"
                     "ORY_ERROR: next_trie_.get() == NULL";
    }
    marisa::grimoire::trie::LoudsTrie::map_(v6, a2);
  }
  marisa::grimoire::vector::Vector<marisa::grimoire::trie::Cache>::map((__int128 *)this + 63, a2);
  *((_QWORD *)this + 132) = *((_QWORD *)this + 129) - 1;
  *((_QWORD *)this + 133) = *(unsigned int *)marisa::grimoire::io::Mapper::map_data(a2, 4uLL);
  v7 = *(_DWORD *)marisa::grimoire::io::Mapper::map_data(a2, 4uLL);
  v10 = 3;
  *(_QWORD *)&v11 = 0x100000000200;
  v12 = 0x20000;
  marisa::grimoire::trie::Config::parse_((marisa::grimoire::trie::Config *)&v10, v7);
  *((_QWORD *)this + 134) = v10;
  result = v11;
  *((double *)this + 135) = v11;
  *((_DWORD *)this + 272) = v12;
  return result;
}

void sub_20839B0CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD06390](v1, MEMORY[0x24BEDB6B8]);
  _Unwind_Resume(a1);
}

uint64_t marisa::grimoire::trie::LoudsTrie::write(marisa::grimoire::trie::LoudsTrie **this, marisa::grimoire::io::Writer *a2)
{
  marisa::grimoire::io::Writer::write_data((uint64_t)a2, "We love Marisa.", 0x10uLL);
  return marisa::grimoire::trie::LoudsTrie::write_(this, a2);
}

uint64_t marisa::grimoire::trie::LoudsTrie::write_(marisa::grimoire::trie::LoudsTrie **this, marisa::grimoire::io::Writer *a2)
{
  marisa::grimoire::trie::LoudsTrie *v4;
  int v6;
  unsigned int __buf;

  marisa::grimoire::vector::BitVector::write_((marisa::grimoire::vector::BitVector *)this, a2);
  marisa::grimoire::vector::BitVector::write_((marisa::grimoire::vector::BitVector *)(this + 26), a2);
  marisa::grimoire::vector::BitVector::write_((marisa::grimoire::vector::BitVector *)(this + 52), a2);
  marisa::grimoire::vector::Vector<unsigned char>::write_((uint64_t)(this + 78), a2);
  marisa::grimoire::vector::FlatVector::write_((marisa::grimoire::vector::FlatVector *)(this + 84), a2);
  marisa::grimoire::trie::Tail::write((marisa::grimoire::trie::Tail *)(this + 93), a2);
  v4 = this[125];
  if (v4)
    marisa::grimoire::trie::LoudsTrie::write_(v4, a2);
  marisa::grimoire::vector::Vector<marisa::grimoire::vector::RankIndex>::write_((uint64_t)(this + 126), a2);
  __buf = this[133];
  marisa::grimoire::io::Writer::write_data((uint64_t)a2, (char *)&__buf, 4uLL);
  v6 = *((_DWORD *)this + 271) | *((_DWORD *)this + 268) | *((_DWORD *)this + 272);
  return marisa::grimoire::io::Writer::write_data((uint64_t)a2, (char *)&v6, 4uLL);
}

uint64_t marisa::grimoire::trie::LoudsTrie::lookup(marisa::grimoire::trie::LoudsTrie *this, marisa::Agent *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *((_QWORD *)a2 + 5);
  *(_QWORD *)(v4 + 96) = 0;
  *(_DWORD *)(v4 + 108) = 0;
  while (1)
  {
    v5 = *((_QWORD *)a2 + 1);
    if (v5 <= *(unsigned int *)(v4 + 100))
      break;
    if ((marisa::grimoire::trie::LoudsTrie::find_child(this, a2) & 1) == 0)
      return 0;
  }
  v6 = *(unsigned int *)(v4 + 96);
  if (((*(_QWORD *)(*((_QWORD *)this + 28) + ((v6 >> 3) & 0x1FFFFFF8)) >> v6) & 1) != 0)
  {
    *((_QWORD *)a2 + 3) = *(_QWORD *)a2;
    *((_DWORD *)a2 + 8) = v5;
    *((_DWORD *)a2 + 9) = marisa::grimoire::vector::BitVector::rank1((marisa::grimoire::trie::LoudsTrie *)((char *)this + 208), v6);
    return 1;
  }
  return 0;
}

uint64_t marisa::grimoire::trie::LoudsTrie::find_child(marisa::grimoire::trie::LoudsTrie *this, marisa::Agent *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  marisa::grimoire::trie::LoudsTrie *v25;
  uint64_t v26;
  marisa::grimoire::trie::LoudsTrie *v27;

  v4 = *((_QWORD *)a2 + 5);
  v5 = *(unsigned int *)(v4 + 96);
  v6 = *(unsigned int *)(v4 + 100);
  v7 = (*(unsigned __int8 *)(*(_QWORD *)a2 + v6) ^ (32 * v5) ^ v5) & *((_QWORD *)this + 132);
  v8 = *((_QWORD *)this + 128);
  if ((_DWORD)v5 != *(_DWORD *)(v8 + 12 * v7))
  {
    v10 = marisa::grimoire::vector::BitVector::select0(this, v5);
    v11 = *((_QWORD *)this + 2);
    if (((*(_QWORD *)(v11 + (((v10 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v10 + 1)) & 1) != 0)
    {
      v12 = v10 - *(_DWORD *)(v4 + 96);
      *(_DWORD *)(v4 + 96) = v12;
      v13 = v10 + 2;
      v14 = 0xFFFFFFFFLL;
      while (1)
      {
        v15 = v12;
        if (((*(_QWORD *)(*((_QWORD *)this + 54) + (((unint64_t)v12 >> 3) & 0x1FFFFFF8)) >> v12) & 1) != 0)
        {
          if (v14 == 0xFFFFFFFFLL)
          {
            v14 = marisa::grimoire::vector::BitVector::rank1((marisa::grimoire::trie::LoudsTrie *)((char *)this + 416), v12);
            v15 = *(unsigned int *)(v4 + 96);
          }
          else
          {
            ++v14;
          }
          v17 = *(_DWORD *)(v4 + 100);
          v18 = *((_QWORD *)this + 90);
          v19 = (unint64_t)(v18 * v14) >> 6;
          v20 = (v18 * v14) & 0x3F;
          v21 = v20 + v18;
          v22 = *((_QWORD *)this + 86);
          v23 = *(_QWORD *)(v22 + 8 * v19) >> v20;
          if (v21 > 0x40)
            v23 |= (2 * *(_QWORD *)(v22 + 8 * v19 + 8)) << (v20 ^ 0x3Fu);
          v24 = *(unsigned __int8 *)(*((_QWORD *)this + 80) + v15) | ((*((_DWORD *)this + 182) & v23) << 8);
          v25 = (marisa::grimoire::trie::LoudsTrie *)*((_QWORD *)this + 125);
          if (v25)
          {
            if ((marisa::grimoire::trie::LoudsTrie::match_(v25, a2, v24) & 1) != 0)
              return 1;
          }
          else if ((marisa::grimoire::trie::Tail::match((marisa::grimoire::trie::LoudsTrie *)((char *)this + 744), a2, v24) & 1) != 0)
          {
            return 1;
          }
          if (*(_DWORD *)(v4 + 100) != v17)
            return 0;
          v12 = *(_DWORD *)(v4 + 96);
          v11 = *((_QWORD *)this + 2);
        }
        else
        {
          v16 = *(unsigned int *)(v4 + 100);
          if (*(unsigned __int8 *)(*((_QWORD *)this + 80) + v12) == *(unsigned __int8 *)(*(_QWORD *)a2 + v16))
          {
            *(_DWORD *)(v4 + 100) = v16 + 1;
            return 1;
          }
        }
        *(_DWORD *)(v4 + 96) = ++v12;
        v26 = *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13;
        ++v13;
        if ((v26 & 1) == 0)
          return 0;
      }
    }
    return 0;
  }
  v9 = *(unsigned int *)(v8 + 12 * v7 + 8);
  if (v9 > 0xFFFFFEFF)
  {
    *(_DWORD *)(v4 + 100) = v6 + 1;
    goto LABEL_24;
  }
  v27 = (marisa::grimoire::trie::LoudsTrie *)*((_QWORD *)this + 125);
  if (v27)
  {
    if ((marisa::grimoire::trie::LoudsTrie::match_(v27, a2, v9) & 1) != 0)
      goto LABEL_24;
    return 0;
  }
  if ((marisa::grimoire::trie::Tail::match((marisa::grimoire::trie::LoudsTrie *)((char *)this + 744), a2, v9) & 1) == 0)
    return 0;
LABEL_24:
  *(_DWORD *)(v4 + 96) = *(_DWORD *)(*((_QWORD *)this + 128) + 12 * v7 + 4);
  return 1;
}

unint64_t marisa::grimoire::trie::LoudsTrie::reverse_lookup(marisa::grimoire::trie::LoudsTrie *this, marisa::Agent *a2)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  unint64_t result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  marisa::grimoire::trie::LoudsTrie *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  BOOL v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _QWORD *exception;
  char v35;

  v3 = *((_QWORD *)a2 + 2);
  if (v3 >= *((_QWORD *)this + 33))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc";
    exception[2] = 0x300000049;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc:73: MARISA_BOUND_"
                   "ERROR: agent.query().id() >= size()";
  }
  v5 = *((_QWORD *)a2 + 5);
  *(_QWORD *)(v5 + 24) = 0;
  v6 = *(_QWORD *)(v5 + 32);
  if (v6 <= 0x1F)
  {
    if (v6 <= 0x10)
      v7 = 32;
    else
      v7 = 2 * v6;
    marisa::grimoire::vector::Vector<char>::realloc((uint64_t *)v5, v7);
    v3 = *((_QWORD *)a2 + 2);
  }
  *(_DWORD *)(v5 + 108) = 0;
  result = marisa::grimoire::vector::BitVector::select1((marisa::grimoire::trie::LoudsTrie *)((char *)this + 208), v3);
  *(_DWORD *)(v5 + 96) = result;
  if (!(_DWORD)result)
    goto LABEL_30;
  while (1)
  {
    if (((*(_QWORD *)(*((_QWORD *)this + 54) + ((result >> 3) & 0x1FFFFFF8)) >> result) & 1) != 0)
    {
      v9 = *(_QWORD *)(v5 + 24);
      v10 = *(unsigned __int8 *)(*((_QWORD *)this + 80) + result);
      v11 = marisa::grimoire::vector::BitVector::rank1((marisa::grimoire::trie::LoudsTrie *)((char *)this + 416), result);
      v12 = *((_QWORD *)this + 90);
      v13 = (unint64_t)(v12 * v11) >> 6;
      v14 = (v12 * v11) & 0x3F;
      v15 = v14 + v12;
      v16 = *((_QWORD *)this + 86);
      v17 = *(_QWORD *)(v16 + 8 * v13) >> v14;
      if (v15 > 0x40)
        v17 |= (2 * *(_QWORD *)(v16 + 8 * v13 + 8)) << (v14 ^ 0x3Fu);
      v18 = v10 | ((*((_DWORD *)this + 182) & v17) << 8);
      v19 = (marisa::grimoire::trie::LoudsTrie *)*((_QWORD *)this + 125);
      if (v19)
        result = (unint64_t)marisa::grimoire::trie::LoudsTrie::restore_(v19, a2, v18);
      else
        result = (unint64_t)marisa::grimoire::trie::Tail::restore((uint64_t *)this + 93, a2, v18);
      v20 = *(_QWORD *)(v5 + 24);
      if (v9 != v20)
      {
        v21 = *(_QWORD *)(v5 + 8);
        v22 = (_BYTE *)(v21 + v20 - 1);
        if ((unint64_t)v22 > v21 + v9)
        {
          v23 = v21 + v9 + 1;
          do
          {
            v24 = *(_BYTE *)(v23 - 1);
            *(_BYTE *)(v23 - 1) = *v22;
            *v22-- = v24;
            v25 = v23++ >= (unint64_t)v22;
          }
          while (!v25);
        }
      }
    }
    else
    {
      v35 = *(_BYTE *)(*((_QWORD *)this + 80) + result);
      result = (unint64_t)marisa::grimoire::vector::Vector<char>::push_back((uint64_t *)v5, &v35);
    }
    v26 = *(unsigned int *)(v5 + 96);
    if (*((_QWORD *)this + 133) >= v26)
      break;
    result = marisa::grimoire::vector::BitVector::select1(this, v26) + ~(unint64_t)*(unsigned int *)(v5 + 96);
    *(_DWORD *)(v5 + 96) = result;
  }
  v27 = *(_QWORD *)(v5 + 8);
  v28 = *(_QWORD *)(v5 + 24);
  v29 = (_BYTE *)(v27 + v28 - 1);
  if (v28)
    v30 = (unint64_t)v29 > v27;
  else
    v30 = 0;
  if (v30)
  {
    v31 = v27 + 1;
    do
    {
      v32 = *(_BYTE *)(v31 - 1);
      *(_BYTE *)(v31 - 1) = *v29;
      *v29-- = v32;
      v25 = v31++ >= (unint64_t)v29;
    }
    while (!v25);
LABEL_30:
    v27 = *(_QWORD *)(v5 + 8);
    v28 = *(_QWORD *)(v5 + 24);
  }
  *((_QWORD *)a2 + 3) = v27;
  v33 = *((_QWORD *)a2 + 2);
  *((_DWORD *)a2 + 8) = v28;
  *((_DWORD *)a2 + 9) = v33;
  return result;
}

uint64_t *marisa::grimoire::vector::Vector<char>::push_back(uint64_t *result, _BYTE *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  size_t v8;

  v3 = result;
  v4 = result[3];
  v5 = result[4];
  v6 = v4 + 1;
  if (v5 < (unint64_t)(v4 + 1))
  {
    v7 = 2 * v5;
    if (v5 < 0)
      v7 = -1;
    if (v5 <= v6 >> 1)
      v8 = v6;
    else
      v8 = v7;
    result = (uint64_t *)marisa::grimoire::vector::Vector<char>::realloc(result, v8);
    v4 = v3[3];
  }
  *(_BYTE *)(v3[1] + v4) = *a2;
  ++v3[3];
  return result;
}

uint64_t *marisa::grimoire::vector::BitVector::swap(marisa::grimoire::vector::BitVector *this, marisa::grimoire::vector::BitVector *a2)
{
  uint64_t v4;
  uint64_t v5;

  marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this, (uint64_t *)a2);
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v4;
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v5;
  marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this + 8, (uint64_t *)a2 + 8);
  marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this + 14, (uint64_t *)a2 + 14);
  return marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this + 20, (uint64_t *)a2 + 20);
}

uint64_t *marisa::grimoire::vector::Vector<unsigned char>::swap(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  v3 = result[1];
  result[1] = a2[1];
  a2[1] = v3;
  v4 = result[2];
  v5 = result[3];
  v6 = a2[3];
  result[2] = a2[2];
  result[3] = v6;
  a2[2] = v4;
  a2[3] = v5;
  v7 = result[4];
  result[4] = a2[4];
  a2[4] = v7;
  LOBYTE(v7) = *((_BYTE *)result + 40);
  *((_BYTE *)result + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)a2 + 40) = v7;
  return result;
}

uint64_t *marisa::grimoire::vector::Vector<marisa::grimoire::trie::Key>::resize(uint64_t *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a2;
  v3 = result;
  v4 = result[4];
  if (v4 < a2)
  {
    v5 = 2 * v4;
    if (v4 > 0x555555555555555)
      v5 = 0xAAAAAAAAAAAAAAALL;
    if (v4 > a2 >> 1)
      a2 = v5;
    result = (uint64_t *)marisa::grimoire::vector::Vector<marisa::grimoire::trie::Key>::realloc(result, a2);
  }
  v6 = v3[3];
  v7 = v2 - v6;
  if (v2 > v6)
  {
    v8 = 24 * v6;
    do
    {
      v9 = v3[1] + v8;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 16) = 0;
      v8 += 24;
      --v7;
    }
    while (v7);
  }
  v3[3] = v2;
  return result;
}

uint64_t marisa::grimoire::trie::LoudsTrie::build_trie<marisa::grimoire::trie::Key>(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  _DWORD *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  __int128 v17[3];
  uint64_t v18;
  uint64_t v19;
  int v20;

  marisa::grimoire::trie::LoudsTrie::build_current_trie<marisa::grimoire::trie::Key>((uint64_t *)a1, (uint64_t)a2, a3, a4, a5);
  memset(v17, 0, 41);
  if (a2[3])
    marisa::grimoire::trie::LoudsTrie::build_next_trie<marisa::grimoire::trie::Key>(a1, a2, v17, a4, a5);
  v9 = *(_DWORD **)(a1 + 1000);
  if (v9)
  {
    v10 = (v9[268] + 1) | v9[271] | v9[272];
    v18 = 3;
    v19 = 0x100000000200;
    v20 = 0x20000;
    marisa::grimoire::trie::Config::parse_((marisa::grimoire::trie::Config *)&v18, v10);
  }
  else
  {
    if (*(_QWORD *)(a1 + 840))
      v11 = 0x2000;
    else
      v11 = 4096;
    v12 = *(_DWORD *)(a4 + 16) | *(_DWORD *)(a4 + 8) | v11 | 1;
    v18 = 3;
    v19 = 0x100000000200;
    v20 = 0x20000;
    marisa::grimoire::trie::Config::parse_((marisa::grimoire::trie::Config *)&v18, v12);
  }
  *(_QWORD *)(a1 + 1072) = v18;
  *(_QWORD *)(a1 + 1080) = v19;
  *(_DWORD *)(a1 + 1088) = v20;
  marisa::grimoire::vector::BitVector::build((marisa::grimoire::vector::BitVector *)(a1 + 416), 0, 0);
  if (*((_QWORD *)&v17[1] + 1))
  {
    v13 = 0;
    v14 = 0;
    do
    {
      do
      {
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 432) + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14;
        ++v14;
      }
      while ((v15 & 1) == 0);
      *(_BYTE *)(*(_QWORD *)(a1 + 632) + v14 - 1) = *(_DWORD *)(*((_QWORD *)&v17[0] + 1) + 4 * v13);
      *(_DWORD *)(*((_QWORD *)&v17[0] + 1) + 4 * v13++) >>= 8;
    }
    while (v13 < *((_QWORD *)&v17[1] + 1));
  }
  marisa::grimoire::vector::FlatVector::build((__int128 *)(a1 + 672), (uint64_t)v17);
  marisa::grimoire::trie::LoudsTrie::fill_cache(a1);
  result = *(_QWORD *)&v17[0];
  if (*(_QWORD *)&v17[0])
    return MEMORY[0x20BD06378](*(_QWORD *)&v17[0], 0x1000C8077774924);
  return result;
}

void sub_20839BA88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD06378](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

void marisa::grimoire::vector::Vector<std::pair<unsigned int,unsigned int>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = a1[4];
  if (v4 < a2)
  {
    v5 = 2 * v4;
    if (v4 >> 60)
      v5 = 0x1FFFFFFFFFFFFFFFLL;
    if (v4 > a2 >> 1)
      a2 = v5;
    marisa::grimoire::vector::Vector<unsigned long long>::realloc(a1, a2);
  }
  v6 = a1[3];
  if (v2 > v6)
    bzero((void *)(a1[1] + 8 * v6), 8 * (v2 - v6));
  a1[3] = v2;
}

uint64_t *marisa::grimoire::vector::BitVector::push_back(uint64_t *this, int a2)
{
  unint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *exception;
  uint64_t v7;

  v2 = this[6];
  if (v2 == 0xFFFFFFFF)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/bit-vector.h";
    exception[2] = 0x700000034;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/bit-vector.h:52: MARI"
                   "SA_SIZE_ERROR: size_ == MARISA_UINT32_MAX";
  }
  v4 = this;
  v5 = this[3];
  if (v2 == v5 << 6)
  {
    v7 = 0;
    this = marisa::grimoire::vector::Vector<unsigned long long>::resize(this, v5 + 1, &v7);
    v2 = v4[6];
  }
  if (a2)
  {
    *(_QWORD *)(v4[1] + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v2;
    ++v4[7];
  }
  v4[6] = v2 + 1;
  return this;
}

uint64_t marisa::grimoire::vector::BitVector::build(marisa::grimoire::vector::BitVector *this, int a2, int a3)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t result;
  _OWORD v8[4];
  __int128 v9;
  _BYTE v10[25];
  __int128 v11;
  _BYTE v12[25];
  __int128 v13;
  _BYTE v14[25];

  memset(v8, 0, 41);
  v11 = 0u;
  memset(v12, 0, sizeof(v12));
  v13 = 0u;
  memset(v14, 0, sizeof(v14));
  v8[3] = 0u;
  v9 = 0u;
  memset(v10, 0, sizeof(v10));
  marisa::grimoire::vector::BitVector::build_index((marisa::grimoire::vector::BitVector *)v8, this, a2, a3);
  marisa::grimoire::vector::Vector<unsigned long long>::shrink(this);
  v4 = v8[0];
  v8[0] = *(_OWORD *)this;
  *(_OWORD *)this = v4;
  v5 = *(_QWORD *)&v8[1];
  *(_QWORD *)&v8[1] = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v5;
  v6 = *(_OWORD *)((char *)&v8[1] + 8);
  *(_OWORD *)((char *)&v8[1] + 8) = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)((char *)this + 24) = v6;
  LOBYTE(v5) = BYTE8(v8[2]);
  BYTE8(v8[2]) = *((_BYTE *)this + 40);
  *((_BYTE *)this + 40) = v5;
  marisa::grimoire::vector::BitVector::swap(this, (marisa::grimoire::vector::BitVector *)v8);
  if ((_QWORD)v13)
    MEMORY[0x20BD06378](v13, 0x1000C8077774924);
  if ((_QWORD)v11)
    MEMORY[0x20BD06378](v11, 0x1000C8077774924);
  if ((_QWORD)v9)
    MEMORY[0x20BD06378](v9, 0x1000C8077774924);
  result = *(_QWORD *)&v8[0];
  if (*(_QWORD *)&v8[0])
    return MEMORY[0x20BD06378](*(_QWORD *)&v8[0], 0x1000C8077774924);
  return result;
}

void sub_20839BD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  marisa::grimoire::vector::BitVector::~BitVector((marisa::grimoire::vector::BitVector *)&a9);
  _Unwind_Resume(a1);
}

uint64_t marisa::grimoire::trie::LoudsTrie::build_next_trie<marisa::grimoire::trie::Key>(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unsigned int *v10;
  _DWORD *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  marisa::grimoire::trie::LoudsTrie *v21;
  marisa::grimoire::trie::LoudsTrie *v22;
  marisa::grimoire::trie::LoudsTrie **v23;
  uint64_t result;
  _QWORD *exception;
  __int128 v26;
  _BYTE v27[25];

  if (*(_QWORD *)a4 == a5)
  {
    v26 = 0u;
    memset(v27, 0, sizeof(v27));
    marisa::grimoire::vector::Vector<marisa::grimoire::trie::Entry>::resize((uint64_t *)&v26, a2[3]);
    v9 = a2[3];
    if (v9)
    {
      v10 = (unsigned int *)(*((_QWORD *)&v26 + 1) + 8);
      v11 = (_DWORD *)(a2[1] + 8);
      do
      {
        v12 = *((_QWORD *)v11 - 1);
        v13 = *v11;
        v11 += 6;
        *((_QWORD *)v10 - 1) = v12 + v13 - 1;
        *v10 = v13;
        v10 += 4;
        --v9;
      }
      while (v9);
    }
    marisa::grimoire::trie::Tail::build((__int128 *)(a1 + 744), (uint64_t)&v26, a3, *(_DWORD *)(a4 + 12));
  }
  else
  {
    v26 = 0u;
    memset(v27, 0, sizeof(v27));
    marisa::grimoire::vector::Vector<marisa::grimoire::trie::Key>::resize((uint64_t *)&v26, a2[3]);
    if (a2[3])
    {
      v15 = 0;
      v16 = 0;
      do
      {
        v17 = *((_QWORD *)&v26 + 1) + v15;
        v18 = a2[1] + v15;
        v19 = *(unsigned int *)(v18 + 8);
        *(_QWORD *)v17 = *(_QWORD *)v18 + v19;
        *(_DWORD *)(v17 + 8) = v19;
        *(_DWORD *)(v17 + 12) = *(_DWORD *)(v18 + 12);
        ++v16;
        v15 += 24;
      }
      while (v16 < a2[3]);
    }
    v20 = *a2;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
    *(_OWORD *)((char *)a2 + 25) = 0u;
    if (v20)
      MEMORY[0x20BD06378](v20, 0x1000C8077774924);
    v21 = (marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x24BEDB6B8]);
    v22 = v21;
    if (v21)
      marisa::grimoire::trie::LoudsTrie::LoudsTrie(v21);
    v23 = (marisa::grimoire::trie::LoudsTrie **)(a1 + 1000);
    marisa::scoped_ptr<marisa::grimoire::trie::LoudsTrie>::reset(v23, v22);
    if (!*v23)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_24C09C668;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x8000001C3;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc:451: MARISA_MEM"
                     "ORY_ERROR: next_trie_.get() == NULL";
    }
    marisa::grimoire::trie::LoudsTrie::build_trie<marisa::grimoire::trie::ReverseKey>((uint64_t)*v23, (uint64_t)&v26, a3, a4, a5 + 1);
  }
  result = v26;
  if ((_QWORD)v26)
    return MEMORY[0x20BD06378](v26, 0x1000C8077774924);
  return result;
}

void sub_20839BF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  MEMORY[0x20BD06390](v9, MEMORY[0x24BEDB6B8]);
  if (a9)
    MEMORY[0x20BD06378](a9, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t *marisa::grimoire::vector::Vector<marisa::grimoire::trie::Entry>::resize(uint64_t *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = a2;
  v3 = result;
  v4 = result[4];
  if (v4 < a2)
  {
    v5 = 2 * v4;
    if (v4 >> 59)
      v5 = 0xFFFFFFFFFFFFFFFLL;
    if (v4 > a2 >> 1)
      a2 = v5;
    result = (uint64_t *)marisa::grimoire::vector::Vector<marisa::grimoire::trie::Entry>::realloc(result, a2);
  }
  v6 = v3[3];
  v7 = v2 - v6;
  if (v2 > v6)
  {
    v8 = 16 * v6;
    do
    {
      v9 = (_QWORD *)(v3[1] + v8);
      *v9 = 0;
      v9[1] = 0;
      v8 += 16;
      --v7;
    }
    while (v7);
  }
  v3[3] = v2;
  return result;
}

marisa::grimoire::trie::LoudsTrie **marisa::scoped_ptr<marisa::grimoire::trie::LoudsTrie>::reset(marisa::grimoire::trie::LoudsTrie **a1, marisa::grimoire::trie::LoudsTrie *a2)
{
  _QWORD *exception;
  marisa::grimoire::trie::LoudsTrie *v4;

  if (a2 && *a1 == a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/include/marisa/scoped-ptr.h";
    exception[2] = 0x600000013;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/include/marisa/scoped-ptr.h:19: MARISA_RESET_ERROR: (ptr"
                   " != NULL) && (ptr == ptr_)";
  }
  v4 = *a1;
  *a1 = a2;
  return marisa::scoped_ptr<marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(&v4);
}

uint64_t marisa::grimoire::trie::LoudsTrie::build_trie<marisa::grimoire::trie::ReverseKey>(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  _DWORD *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  __int128 v17[3];
  uint64_t v18;
  uint64_t v19;
  int v20;

  marisa::grimoire::trie::LoudsTrie::build_current_trie<marisa::grimoire::trie::ReverseKey>((uint64_t *)a1, a2, a3, a4, a5);
  memset(v17, 0, 41);
  if (*(_QWORD *)(a2 + 24))
    marisa::grimoire::trie::LoudsTrie::build_next_trie<marisa::grimoire::trie::ReverseKey>(a1, a2, v17, a4, a5);
  v9 = *(_DWORD **)(a1 + 1000);
  if (v9)
  {
    v10 = (v9[268] + 1) | v9[271] | v9[272];
    v18 = 3;
    v19 = 0x100000000200;
    v20 = 0x20000;
    marisa::grimoire::trie::Config::parse_((marisa::grimoire::trie::Config *)&v18, v10);
  }
  else
  {
    if (*(_QWORD *)(a1 + 840))
      v11 = 0x2000;
    else
      v11 = 4096;
    v12 = *(_DWORD *)(a4 + 16) | *(_DWORD *)(a4 + 8) | v11 | 1;
    v18 = 3;
    v19 = 0x100000000200;
    v20 = 0x20000;
    marisa::grimoire::trie::Config::parse_((marisa::grimoire::trie::Config *)&v18, v12);
  }
  *(_QWORD *)(a1 + 1072) = v18;
  *(_QWORD *)(a1 + 1080) = v19;
  *(_DWORD *)(a1 + 1088) = v20;
  marisa::grimoire::vector::BitVector::build((marisa::grimoire::vector::BitVector *)(a1 + 416), 0, 0);
  if (*((_QWORD *)&v17[1] + 1))
  {
    v13 = 0;
    v14 = 0;
    do
    {
      do
      {
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 432) + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14;
        ++v14;
      }
      while ((v15 & 1) == 0);
      *(_BYTE *)(*(_QWORD *)(a1 + 632) + v14 - 1) = *(_DWORD *)(*((_QWORD *)&v17[0] + 1) + 4 * v13);
      *(_DWORD *)(*((_QWORD *)&v17[0] + 1) + 4 * v13++) >>= 8;
    }
    while (v13 < *((_QWORD *)&v17[1] + 1));
  }
  marisa::grimoire::vector::FlatVector::build((__int128 *)(a1 + 672), (uint64_t)v17);
  marisa::grimoire::trie::LoudsTrie::fill_cache(a1);
  result = *(_QWORD *)&v17[0];
  if (*(_QWORD *)&v17[0])
    return MEMORY[0x20BD06378](*(_QWORD *)&v17[0], 0x1000C8077774924);
  return result;
}

void sub_20839C22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD06378](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t marisa::grimoire::trie::LoudsTrie::build_next_trie<marisa::grimoire::trie::ReverseKey>(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  marisa::grimoire::trie::LoudsTrie *v16;
  marisa::grimoire::trie::LoudsTrie *v17;
  marisa::grimoire::trie::LoudsTrie **v18;
  _QWORD *exception;
  _OWORD v20[3];

  if (*(_QWORD *)a4 == a5)
  {
    memset(v20, 0, 41);
    marisa::grimoire::vector::Vector<marisa::grimoire::trie::Entry>::resize((uint64_t *)v20, *(_QWORD *)(a2 + 24));
    v9 = *(_QWORD *)(a2 + 24);
    if (v9)
    {
      v10 = (_DWORD *)(*((_QWORD *)&v20[0] + 1) + 8);
      v11 = (_DWORD *)(*(_QWORD *)(a2 + 8) + 8);
      do
      {
        v12 = *((_QWORD *)v11 - 1);
        v13 = *v11;
        v11 += 6;
        *((_QWORD *)v10 - 1) = v12 - 1;
        *v10 = v13;
        v10 += 4;
        --v9;
      }
      while (v9);
    }
    marisa::grimoire::trie::Tail::build((__int128 *)(a1 + 744), (uint64_t)v20, a3, *(_DWORD *)(a4 + 12));
    result = *(_QWORD *)&v20[0];
    if (*(_QWORD *)&v20[0])
      return MEMORY[0x20BD06378](*(_QWORD *)&v20[0], 0x1000C8077774924);
  }
  else
  {
    v16 = (marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x24BEDB6B8]);
    v17 = v16;
    if (v16)
      marisa::grimoire::trie::LoudsTrie::LoudsTrie(v16);
    v18 = (marisa::grimoire::trie::LoudsTrie **)(a1 + 1000);
    marisa::scoped_ptr<marisa::grimoire::trie::LoudsTrie>::reset(v18, v17);
    if (!*v18)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_24C09C668;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x8000001D4;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc:468: MARISA_MEM"
                     "ORY_ERROR: next_trie_.get() == NULL";
    }
    return marisa::grimoire::trie::LoudsTrie::build_trie<marisa::grimoire::trie::ReverseKey>(*v18, a2, a3, a4, a5 + 1);
  }
  return result;
}

void sub_20839C3CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD06390](v1, MEMORY[0x24BEDB6B8]);
  _Unwind_Resume(a1);
}

uint64_t *marisa::grimoire::vector::Vector<marisa::grimoire::trie::Cache>::resize(uint64_t *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a2;
  v3 = result;
  v4 = result[4];
  if (v4 < a2)
  {
    v5 = 2 * v4;
    if (v4 > 0xAAAAAAAAAAAAAAALL)
      v5 = 0x1555555555555555;
    if (v4 > a2 >> 1)
      a2 = v5;
    result = (uint64_t *)marisa::grimoire::vector::Vector<marisa::grimoire::trie::Cache>::realloc(result, a2);
  }
  v6 = v3[3];
  v7 = v2 - v6;
  if (v2 > v6)
  {
    v8 = 12 * v6;
    do
    {
      v9 = v3[1] + v8;
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0x800000;
      v8 += 12;
      --v7;
    }
    while (v7);
  }
  v3[3] = v2;
  return result;
}

uint64_t marisa::grimoire::trie::LoudsTrie::fill_cache(uint64_t this)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  marisa::grimoire::vector::BitVector *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;

  v1 = *(_QWORD *)(this + 1032);
  if (v1)
  {
    v2 = this;
    v3 = 0;
    v4 = 0;
    v5 = (marisa::grimoire::vector::BitVector *)(this + 416);
    do
    {
      v6 = *(_QWORD *)(v2 + 1016);
      v7 = *(unsigned int *)(v6 + v3 + 4);
      if ((_DWORD)v7)
      {
        *(_BYTE *)(v6 + v3 + 8) = *(_BYTE *)(*(_QWORD *)(v2 + 632) + v7);
        v8 = *(_QWORD *)(v2 + 1016);
        if (((*(_QWORD *)(*(_QWORD *)(v2 + 432) + ((v7 >> 3) & 0x1FFFFFF8)) >> v7) & 1) != 0)
        {
          this = marisa::grimoire::vector::BitVector::rank1(v5, v7);
          v9 = *(_QWORD *)(v2 + 720);
          v10 = (unint64_t)(v9 * this) >> 6;
          v11 = (v9 * this) & 0x3F;
          v12 = v11 + v9;
          v13 = *(_QWORD *)(v2 + 688);
          v14 = *(_QWORD *)(v13 + 8 * v10);
          if (v12 > 0x40)
            v15 = ((2 * *(_QWORD *)(v13 + 8 * v10 + 8)) << (v11 ^ 0x3Fu)) | (v14 >> v11);
          else
            v15 = v14 >> v11;
          v16 = *(_DWORD *)(v2 + 728) & v15;
        }
        else
        {
          v16 = 0xFFFFFF;
        }
        *(_DWORD *)(v8 + v3 + 8) = *(unsigned __int8 *)(v8 + v3 + 8) | (v16 << 8);
        v1 = *(_QWORD *)(v2 + 1032);
      }
      else
      {
        *(_QWORD *)(v6 + v3) = -1;
      }
      ++v4;
      v3 += 12;
    }
    while (v4 < v1);
  }
  return this;
}

uint64_t marisa::grimoire::vector::BitVector::map(marisa::grimoire::vector::BitVector *this, marisa::grimoire::io::Mapper *a2)
{
  uint64_t result;
  _OWORD v4[4];
  __int128 v5;
  _BYTE v6[25];
  __int128 v7;
  _BYTE v8[25];
  __int128 v9;
  _BYTE v10[25];

  memset(v4, 0, 41);
  v7 = 0u;
  memset(v8, 0, sizeof(v8));
  v9 = 0u;
  memset(v10, 0, sizeof(v10));
  v4[3] = 0u;
  v5 = 0u;
  memset(v6, 0, sizeof(v6));
  marisa::grimoire::vector::BitVector::map_((marisa::grimoire::vector::BitVector *)v4, a2);
  marisa::grimoire::vector::BitVector::swap(this, (marisa::grimoire::vector::BitVector *)v4);
  if ((_QWORD)v9)
    MEMORY[0x20BD06378](v9, 0x1000C8077774924);
  if ((_QWORD)v7)
    MEMORY[0x20BD06378](v7, 0x1000C8077774924);
  if ((_QWORD)v5)
    MEMORY[0x20BD06378](v5, 0x1000C8077774924);
  result = *(_QWORD *)&v4[0];
  if (*(_QWORD *)&v4[0])
    return MEMORY[0x20BD06378](*(_QWORD *)&v4[0], 0x1000C8077774924);
  return result;
}

void sub_20839C678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  marisa::grimoire::vector::BitVector::~BitVector((marisa::grimoire::vector::BitVector *)&a9);
  _Unwind_Resume(a1);
}

uint64_t marisa::grimoire::vector::Vector<unsigned char>::map(__int128 *a1, marisa::grimoire::io::Mapper *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  marisa::grimoire::vector::Vector<unsigned char>::map_((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x20BD06378](v3, 0x1000C8077774924);
  return result;
}

void sub_20839C720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD06378](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t marisa::grimoire::vector::FlatVector::map(marisa::grimoire::vector::FlatVector *this, marisa::grimoire::io::Mapper *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _OWORD v9[3];
  uint64_t v10;
  int v11;
  uint64_t v12;

  memset(v9, 0, 41);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  marisa::grimoire::vector::FlatVector::map_((marisa::grimoire::vector::FlatVector *)v9, a2);
  v3 = *(_OWORD *)this;
  *(_OWORD *)this = v9[0];
  v9[0] = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *(_QWORD *)&v9[1];
  *(_QWORD *)&v9[1] = v4;
  v5 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)&v9[1] + 8);
  *(_OWORD *)((char *)&v9[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)this + 40);
  *((_BYTE *)this + 40) = BYTE8(v9[2]);
  BYTE8(v9[2]) = v4;
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v10;
  v10 = v6;
  LODWORD(v6) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = v11;
  v11 = v6;
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v12;
  result = v3;
  v12 = v7;
  if ((_QWORD)v3)
    return MEMORY[0x20BD06378](v3, 0x1000C8077774924);
  return result;
}

void sub_20839C818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD06378](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t marisa::grimoire::vector::Vector<marisa::grimoire::trie::Cache>::map(__int128 *a1, marisa::grimoire::io::Mapper *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  marisa::grimoire::vector::Vector<marisa::grimoire::vector::RankIndex>::map_((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x20BD06378](v3, 0x1000C8077774924);
  return result;
}

void sub_20839C8D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD06378](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t *marisa::grimoire::trie::LoudsTrie::restore_(marisa::grimoire::trie::LoudsTrie *this, marisa::Agent *a2, unint64_t a3)
{
  uint64_t *v6;
  marisa::grimoire::vector::BitVector *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  marisa::grimoire::trie::LoudsTrie *v23;
  unint64_t v24;
  marisa::grimoire::trie::LoudsTrie *v25;
  char v26;
  char v27;

  v6 = (uint64_t *)*((_QWORD *)a2 + 5);
  v7 = (marisa::grimoire::trie::LoudsTrie *)((char *)this + 416);
  v8 = (uint64_t *)((char *)this + 744);
  while (1)
  {
    while (1)
    {
      v9 = *((_QWORD *)this + 132) & a3;
      v10 = *((_QWORD *)this + 128);
      if (a3 != *(_DWORD *)(v10 + 12 * v9 + 4))
        break;
      v11 = v10 + 12 * v9;
      v12 = *(unsigned int *)(v11 + 8);
      if (v12 <= 0xFFFFFEFF)
      {
        v23 = (marisa::grimoire::trie::LoudsTrie *)*((_QWORD *)this + 125);
        if (v23)
          result = (uint64_t *)marisa::grimoire::trie::LoudsTrie::restore_(v23, a2, v12);
        else
          result = marisa::grimoire::trie::Tail::restore(v8, a2, v12);
      }
      else
      {
        v27 = *(_DWORD *)(v11 + 8);
        result = marisa::grimoire::vector::Vector<char>::push_back(v6, &v27);
      }
      a3 = *(unsigned int *)(*((_QWORD *)this + 128) + 12 * v9);
      if (!(_DWORD)a3)
        return result;
    }
    if (((*(_QWORD *)(*((_QWORD *)this + 54) + ((a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
    {
      v14 = *(unsigned __int8 *)(*((_QWORD *)this + 80) + a3);
      v15 = marisa::grimoire::vector::BitVector::rank1(v7, a3);
      v16 = *((_QWORD *)this + 90);
      v17 = (unint64_t)(v16 * v15) >> 6;
      v18 = (v16 * v15) & 0x3F;
      v19 = v18 + v16;
      v20 = *((_QWORD *)this + 86);
      v21 = *(_QWORD *)(v20 + 8 * v17);
      v22 = v19 > 0x40
          ? ((2 * *(_QWORD *)(v20 + 8 * v17 + 8)) << (v18 ^ 0x3Fu)) | (v21 >> v18)
          : v21 >> v18;
      v24 = v14 | ((*((_DWORD *)this + 182) & v22) << 8);
      v25 = (marisa::grimoire::trie::LoudsTrie *)*((_QWORD *)this + 125);
      result = v25
             ? (uint64_t *)marisa::grimoire::trie::LoudsTrie::restore_(v25, a2, v24)
             : marisa::grimoire::trie::Tail::restore(v8, a2, v24);
    }
    else
    {
      v26 = *(_BYTE *)(*((_QWORD *)this + 80) + a3);
      result = marisa::grimoire::vector::Vector<char>::push_back(v6, &v26);
    }
    if (a3 <= *((_QWORD *)this + 133))
      break;
    a3 = marisa::grimoire::vector::BitVector::select1(this, a3) + ~a3;
  }
  return result;
}

uint64_t marisa::grimoire::trie::LoudsTrie::match_(marisa::grimoire::trie::LoudsTrie *this, marisa::Agent *a2, unint64_t a3)
{
  uint64_t v6;
  marisa::grimoire::vector::BitVector *v7;
  marisa::grimoire::trie::Tail *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  marisa::grimoire::trie::LoudsTrie *v24;
  marisa::grimoire::trie::LoudsTrie *v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *((_QWORD *)a2 + 5);
  v7 = (marisa::grimoire::trie::LoudsTrie *)((char *)this + 416);
  v8 = (marisa::grimoire::trie::LoudsTrie *)((char *)this + 744);
  while (1)
  {
    while (1)
    {
      v9 = *((_QWORD *)this + 132) & a3;
      v10 = *((_QWORD *)this + 128);
      if (a3 == *(_DWORD *)(v10 + 12 * v9 + 4))
        break;
      if (((*(_QWORD *)(*((_QWORD *)this + 54) + ((a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
      {
        v13 = *((_QWORD *)this + 125);
        v14 = *(unsigned __int8 *)(*((_QWORD *)this + 80) + a3);
        v15 = marisa::grimoire::vector::BitVector::rank1(v7, a3);
        v16 = *((_QWORD *)this + 90);
        v17 = (unint64_t)(v16 * v15) >> 6;
        v18 = (v16 * v15) & 0x3F;
        v19 = v18 + v16;
        v20 = *((_QWORD *)this + 86);
        v21 = *(_QWORD *)(v20 + 8 * v17);
        if (v13)
        {
          v22 = v21 >> v18;
          if (v19 > 0x40)
            v22 |= (2 * *(_QWORD *)(v20 + 8 * v17 + 8)) << (v18 ^ 0x3Fu);
          v23 = v14 | ((*((_DWORD *)this + 182) & v22) << 8);
          v24 = (marisa::grimoire::trie::LoudsTrie *)*((_QWORD *)this + 125);
          if (v24)
          {
            if ((marisa::grimoire::trie::LoudsTrie::match_(v24, a2, v23) & 1) == 0)
              return 0;
            goto LABEL_27;
          }
        }
        else
        {
          if (v19 > 0x40)
            v27 = ((2 * *(_QWORD *)(v20 + 8 * v17 + 8)) << (v18 ^ 0x3Fu)) | (v21 >> v18);
          else
            v27 = v21 >> v18;
          v23 = v14 | ((*((_DWORD *)this + 182) & v27) << 8);
        }
        if ((marisa::grimoire::trie::Tail::match(v8, a2, v23) & 1) == 0)
          return 0;
      }
      else
      {
        v26 = *(unsigned int *)(v6 + 100);
        if (*(unsigned __int8 *)(*((_QWORD *)this + 80) + a3) != *(unsigned __int8 *)(*(_QWORD *)a2 + v26))
          return 0;
        *(_DWORD *)(v6 + 100) = v26 + 1;
      }
LABEL_27:
      if (a3 <= *((_QWORD *)this + 133))
        return 1;
      if (*((_QWORD *)a2 + 1) <= (unint64_t)*(unsigned int *)(v6 + 100))
        return 0;
      a3 = marisa::grimoire::vector::BitVector::select1(this, a3) + ~a3;
    }
    v11 = *(unsigned int *)(v10 + 12 * v9 + 8);
    if (v11 <= 0xFFFFFEFF)
    {
      v25 = (marisa::grimoire::trie::LoudsTrie *)*((_QWORD *)this + 125);
      if (v25)
      {
        if ((marisa::grimoire::trie::LoudsTrie::match_(v25, a2, v11) & 1) == 0)
          return 0;
      }
      else if ((marisa::grimoire::trie::Tail::match(v8, a2, v11) & 1) == 0)
      {
        return 0;
      }
    }
    else
    {
      v12 = *(unsigned int *)(v6 + 100);
      if (*(unsigned __int8 *)(*(_QWORD *)a2 + v12) != v11)
        return 0;
      *(_DWORD *)(v6 + 100) = v12 + 1;
    }
    a3 = *(unsigned int *)(*((_QWORD *)this + 128) + 12 * v9);
    if (!(_DWORD)a3)
      return 1;
    if (*((_QWORD *)a2 + 1) <= (unint64_t)*(unsigned int *)(v6 + 100))
      return 0;
  }
}

uint64_t marisa::grimoire::trie::Config::parse_(marisa::grimoire::trie::Config *this, unsigned int a2)
{
  _QWORD *exception;

  if (a2 >= 0x100000)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h";
    exception[2] = 0x50000003BLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h:59: MARISA_CODE_ERROR:"
                   " (config_flags & ~MARISA_CONFIG_MASK) != 0";
  }
  if ((a2 & 0x7F) != 0)
    *(_QWORD *)this = a2 & 0x7F;
  marisa::grimoire::trie::Config::parse_cache_level((uint64_t)this, a2);
  marisa::grimoire::trie::Config::parse_tail_mode((uint64_t)this, a2);
  return marisa::grimoire::trie::Config::parse_node_order((uint64_t)this, a2);
}

uint64_t marisa::grimoire::trie::Config::parse_cache_level(uint64_t this, __int16 a2)
{
  unsigned int v2;
  int v3;
  _QWORD *exception;

  v2 = a2 & 0xF80;
  v3 = 512;
  if (v2 > 0x1FF)
  {
    if (v2 == 512)
      goto LABEL_11;
    if (v2 != 1024)
    {
      v3 = a2 & 0xF80;
      if (v2 != 2048)
        goto LABEL_9;
      goto LABEL_11;
    }
LABEL_10:
    v3 = a2 & 0xF80;
    goto LABEL_11;
  }
  if ((a2 & 0xF80) == 0)
    goto LABEL_11;
  if (v2 == 128)
    goto LABEL_10;
  v3 = a2 & 0xF80;
  if (v2 != 256)
  {
LABEL_9:
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h";
    exception[2] = 0x500000065;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h:101: MARISA_CODE_ERROR"
                   ": undefined cache level";
  }
LABEL_11:
  *(_DWORD *)(this + 8) = v3;
  return this;
}

uint64_t marisa::grimoire::trie::Config::parse_tail_mode(uint64_t this, __int16 a2)
{
  int v2;
  int v3;
  _QWORD *exception;

  v2 = 4096;
  v3 = a2 & 0xF000;
  if ((a2 & 0xF000) != 0 && v3 != 4096)
  {
    if (v3 != 0x2000)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_24C09C668;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h";
      exception[2] = 0x500000079;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h:121: MARISA_CODE_ERR"
                     "OR: undefined tail mode";
    }
    v2 = 0x2000;
  }
  *(_DWORD *)(this + 12) = v2;
  return this;
}

uint64_t marisa::grimoire::trie::Config::parse_node_order(uint64_t this, int a2)
{
  int v2;
  int v3;
  _QWORD *exception;

  v2 = 0x20000;
  v3 = a2 & 0xF0000;
  if ((a2 & 0xF0000) != 0 && v3 != 0x20000)
  {
    if (v3 != 0x10000)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_24C09C668;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h";
      exception[2] = 0x50000008DLL;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/config.h:141: MARISA_CODE_ERR"
                     "OR: undefined node order";
    }
    v2 = 0x10000;
  }
  *(_DWORD *)(this + 16) = v2;
  return this;
}

_BYTE *marisa::grimoire::vector::Vector<char>::realloc(uint64_t *a1, size_t __sz)
{
  _BYTE *result;
  uint64_t v5;
  char *v6;
  _BYTE *v7;
  char v8;
  uint64_t v9;

  result = operator new[](__sz, MEMORY[0x24BEDB6B8]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (char *)a1[1];
    v7 = result;
    do
    {
      v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = __sz;
  if (v9)
    JUMPOUT(0x20BD06378);
  return result;
}

uint64_t *marisa::grimoire::vector::Vector<unsigned long long>::resize(uint64_t *result, unint64_t a2, _QWORD *a3)
{
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v4 = a2;
  v5 = result;
  v6 = result[4];
  if (v6 < a2)
  {
    v7 = 2 * v6;
    if (v6 >> 60)
      v7 = 0x1FFFFFFFFFFFFFFFLL;
    if (v6 > a2 >> 1)
      a2 = v7;
    result = marisa::grimoire::vector::Vector<unsigned long long>::realloc(result, a2);
  }
  v8 = v5[3];
  v9 = v4 - v8;
  if (v4 > v8)
  {
    v10 = (_QWORD *)(v5[1] + 8 * v8);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
  v5[3] = v4;
  return result;
}

_QWORD *marisa::grimoire::vector::Vector<unsigned long long>::realloc(uint64_t *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  result = operator new[](8 * a2, MEMORY[0x24BEDB6B8]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (uint64_t *)a1[1];
    v7 = result;
    do
    {
      v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
    JUMPOUT(0x20BD06378);
  return result;
}

_QWORD *marisa::grimoire::vector::Vector<unsigned long long>::shrink(_QWORD *result)
{
  uint64_t v1;
  _QWORD *exception;

  if (*((_BYTE *)result + 40))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0x100000064;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:100: MARISA_"
                   "STATE_ERROR: fixed_";
  }
  v1 = result[3];
  if (v1 != result[4])
    return marisa::grimoire::vector::Vector<unsigned long long>::realloc(result, v1);
  return result;
}

uint64_t marisa::grimoire::vector::BitVector::map_(marisa::grimoire::vector::BitVector *this, marisa::grimoire::io::Mapper *a2)
{
  unint64_t v4;
  _QWORD *exception;

  marisa::grimoire::vector::Vector<unsigned long long>::map((__int128 *)this, a2);
  *((_QWORD *)this + 6) = *(unsigned int *)marisa::grimoire::io::Mapper::map_data(a2, 4uLL);
  v4 = *(unsigned int *)marisa::grimoire::io::Mapper::map_data(a2, 4uLL);
  if (*((_QWORD *)this + 6) < v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/bit-vector.h";
    exception[2] = 0xA00000087;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/bit-vector.h:135: MAR"
                   "ISA_FORMAT_ERROR: temp_num_1s > size_";
  }
  *((_QWORD *)this + 7) = v4;
  marisa::grimoire::vector::Vector<marisa::grimoire::vector::RankIndex>::map((__int128 *)this + 4, a2);
  marisa::grimoire::vector::Vector<unsigned int>::map((__int128 *)this + 7, a2);
  return marisa::grimoire::vector::Vector<unsigned int>::map((__int128 *)this + 10, a2);
}

uint64_t marisa::grimoire::vector::Vector<unsigned long long>::map(__int128 *a1, marisa::grimoire::io::Mapper *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  marisa::grimoire::vector::Vector<unsigned long long>::map_((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x20BD06378](v3, 0x1000C8077774924);
  return result;
}

void sub_20839D264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD06378](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t marisa::grimoire::vector::Vector<marisa::grimoire::vector::RankIndex>::map(__int128 *a1, marisa::grimoire::io::Mapper *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  marisa::grimoire::vector::Vector<marisa::grimoire::vector::RankIndex>::map_((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x20BD06378](v3, 0x1000C8077774924);
  return result;
}

void sub_20839D320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD06378](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t marisa::grimoire::vector::Vector<unsigned int>::map(__int128 *a1, marisa::grimoire::io::Mapper *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  marisa::grimoire::vector::Vector<unsigned int>::map_((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x20BD06378](v3, 0x1000C8077774924);
  return result;
}

void sub_20839D3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD06378](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t marisa::grimoire::vector::Vector<unsigned long long>::map_(uint64_t a1, marisa::grimoire::io::Mapper *this)
{
  unint64_t v4;
  _QWORD *exception;

  v4 = *(_QWORD *)marisa::grimoire::io::Mapper::map_data(this, 8uLL);
  if ((v4 & 7) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0xA000000CALL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:202: MARISA_"
                   "FORMAT_ERROR: (total_size % sizeof(T)) != 0";
  }
  marisa::grimoire::io::Mapper::map<unsigned long long>(this, (uint64_t *)(a1 + 16), v4 >> 3);
  marisa::grimoire::io::Mapper::seek(this, -(int)v4 & 7);
  *(_QWORD *)(a1 + 24) = v4 >> 3;
  return marisa::grimoire::vector::Vector<unsigned long long>::fix(a1);
}

uint64_t marisa::grimoire::io::Mapper::map<unsigned long long>(marisa::grimoire::io::Mapper *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t result;
  _QWORD *exception;
  const char *v6;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h";
    exception[2] = 0x20000001CLL;
    v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h:28: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 61)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h";
    exception[2] = 0x70000001ELL;
    v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h:30: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v6;
  }
  result = marisa::grimoire::io::Mapper::map_data(a1, 8 * a3);
  *a2 = result;
  return result;
}

uint64_t marisa::grimoire::vector::Vector<unsigned long long>::fix(uint64_t result)
{
  _QWORD *exception;

  if (*(_BYTE *)(result + 40))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0x10000006BLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:107: MARISA_"
                   "STATE_ERROR: fixed_";
  }
  *(_BYTE *)(result + 40) = 1;
  return result;
}

uint64_t marisa::grimoire::vector::Vector<marisa::grimoire::vector::RankIndex>::map_(uint64_t a1, marisa::grimoire::io::Mapper *this)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD *exception;

  v4 = *(_QWORD *)marisa::grimoire::io::Mapper::map_data(this, 8uLL);
  v5 = v4 / 0xC;
  if (v4 % 0xC)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0xA000000CALL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:202: MARISA_"
                   "FORMAT_ERROR: (total_size % sizeof(T)) != 0";
  }
  marisa::grimoire::io::Mapper::map<marisa::grimoire::vector::RankIndex>(this, (uint64_t *)(a1 + 16), v5);
  marisa::grimoire::io::Mapper::seek(this, -(int)v4 & 7);
  *(_QWORD *)(a1 + 24) = v5;
  return marisa::grimoire::vector::Vector<unsigned long long>::fix(a1);
}

uint64_t marisa::grimoire::io::Mapper::map<marisa::grimoire::vector::RankIndex>(marisa::grimoire::io::Mapper *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t result;
  _QWORD *exception;
  const char *v6;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h";
    exception[2] = 0x20000001CLL;
    v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h:28: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >= 0x1555555555555556)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h";
    exception[2] = 0x70000001ELL;
    v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h:30: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v6;
  }
  result = marisa::grimoire::io::Mapper::map_data(a1, 12 * a3);
  *a2 = result;
  return result;
}

uint64_t marisa::grimoire::vector::Vector<unsigned int>::map_(uint64_t a1, marisa::grimoire::io::Mapper *this)
{
  unint64_t v4;
  _QWORD *exception;

  v4 = *(_QWORD *)marisa::grimoire::io::Mapper::map_data(this, 8uLL);
  if ((v4 & 3) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0xA000000CALL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:202: MARISA_"
                   "FORMAT_ERROR: (total_size % sizeof(T)) != 0";
  }
  marisa::grimoire::io::Mapper::map<unsigned int>(this, (uint64_t *)(a1 + 16), v4 >> 2);
  marisa::grimoire::io::Mapper::seek(this, -(int)v4 & 7);
  *(_QWORD *)(a1 + 24) = v4 >> 2;
  return marisa::grimoire::vector::Vector<unsigned long long>::fix(a1);
}

uint64_t marisa::grimoire::io::Mapper::map<unsigned int>(marisa::grimoire::io::Mapper *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t result;
  _QWORD *exception;
  const char *v6;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h";
    exception[2] = 0x20000001CLL;
    v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h:28: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 62)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h";
    exception[2] = 0x70000001ELL;
    v6 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/mapper.h:30: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v6;
  }
  result = marisa::grimoire::io::Mapper::map_data(a1, 4 * a3);
  *a2 = result;
  return result;
}

_QWORD *marisa::grimoire::vector::FlatVector::map_(marisa::grimoire::vector::FlatVector *this, marisa::grimoire::io::Mapper *a2)
{
  uint64_t v4;
  _QWORD *result;
  _QWORD *exception;

  marisa::grimoire::vector::Vector<unsigned long long>::map((__int128 *)this, a2);
  v4 = *(unsigned int *)marisa::grimoire::io::Mapper::map_data(a2, 4uLL);
  if (v4 >= 0x21)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/flat-vector.h";
    exception[2] = 0xA00000086;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/flat-vector.h:134: MA"
                   "RISA_FORMAT_ERROR: temp_value_size > 32";
  }
  *((_QWORD *)this + 6) = v4;
  *((_DWORD *)this + 14) = *(_DWORD *)marisa::grimoire::io::Mapper::map_data(a2, 4uLL);
  result = (_QWORD *)marisa::grimoire::io::Mapper::map_data(a2, 8uLL);
  *((_QWORD *)this + 8) = *result;
  return result;
}

uint64_t *marisa::grimoire::vector::Vector<unsigned long long>::resize(uint64_t *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v2 = a2;
  v3 = result;
  v4 = result[4];
  if (v4 < a2)
  {
    v5 = 2 * v4;
    if (v4 >> 60)
      v5 = 0x1FFFFFFFFFFFFFFFLL;
    if (v4 > a2 >> 1)
      a2 = v5;
    result = marisa::grimoire::vector::Vector<unsigned long long>::realloc(result, a2);
  }
  v3[3] = v2;
  return result;
}

void marisa::grimoire::vector::Vector<marisa::grimoire::vector::RankIndex>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = a1[4];
  if (v4 < a2)
  {
    v5 = 2 * v4;
    if (v4 > 0xAAAAAAAAAAAAAAALL)
      v5 = 0x1555555555555555;
    if (v4 > a2 >> 1)
      a2 = v5;
    marisa::grimoire::vector::Vector<marisa::grimoire::vector::RankIndex>::realloc(a1, a2);
  }
  v6 = a1[3];
  if (v2 > v6)
    bzero((void *)(a1[1] + 12 * v6), 12 * (v2 - v6));
  a1[3] = v2;
}

_DWORD *marisa::grimoire::vector::Vector<marisa::grimoire::vector::RankIndex>::realloc(uint64_t *a1, uint64_t a2)
{
  _DWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;

  result = operator new[](12 * a2, MEMORY[0x24BEDB6B8]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (uint64_t *)a1[1];
    v7 = result;
    do
    {
      v8 = *v6;
      v7[2] = *((_DWORD *)v6 + 2);
      *(_QWORD *)v7 = v8;
      v7 += 3;
      v6 = (uint64_t *)((char *)v6 + 12);
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
    JUMPOUT(0x20BD06378);
  return result;
}

uint64_t *marisa::grimoire::vector::Vector<unsigned int>::resize(uint64_t *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v2 = a2;
  v3 = result;
  v4 = result[4];
  if (v4 < a2)
  {
    v5 = 2 * v4;
    if (v4 >> 61)
      v5 = 0x3FFFFFFFFFFFFFFFLL;
    if (v4 > a2 >> 1)
      a2 = v5;
    result = (uint64_t *)marisa::grimoire::vector::Vector<unsigned int>::realloc(result, a2);
  }
  v3[3] = v2;
  return result;
}

_DWORD *marisa::grimoire::vector::Vector<unsigned int>::realloc(uint64_t *a1, uint64_t a2)
{
  _DWORD *result;
  uint64_t v5;
  int *v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;

  result = operator new[](4 * a2, MEMORY[0x24BEDB6B8]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (int *)a1[1];
    v7 = result;
    do
    {
      v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
    JUMPOUT(0x20BD06378);
  return result;
}

uint64_t marisa::grimoire::vector::BitVector::write_(marisa::grimoire::vector::BitVector *this, marisa::grimoire::io::Writer *a2)
{
  int v5;
  int __buf;

  marisa::grimoire::vector::Vector<unsigned long long>::write_((uint64_t)this, a2);
  __buf = *((_QWORD *)this + 6);
  marisa::grimoire::io::Writer::write_data((uint64_t)a2, (char *)&__buf, 4uLL);
  v5 = *((_QWORD *)this + 7);
  marisa::grimoire::io::Writer::write_data((uint64_t)a2, (char *)&v5, 4uLL);
  marisa::grimoire::vector::Vector<marisa::grimoire::vector::RankIndex>::write_((uint64_t)this + 64, a2);
  marisa::grimoire::vector::Vector<unsigned int>::write_((uint64_t)this + 112, a2);
  return marisa::grimoire::vector::Vector<unsigned int>::write_((uint64_t)this + 160, a2);
}

uint64_t marisa::grimoire::vector::Vector<unsigned long long>::write_(uint64_t a1, marisa::grimoire::io::Writer *this)
{
  uint64_t __buf;

  __buf = 8 * *(_QWORD *)(a1 + 24);
  marisa::grimoire::io::Writer::write_data((uint64_t)this, (char *)&__buf, 8uLL);
  marisa::grimoire::io::Writer::write<unsigned long long>((uint64_t)this, *(char **)(a1 + 16), *(_QWORD *)(a1 + 24));
  return marisa::grimoire::io::Writer::seek((uint64_t)this, 0);
}

uint64_t marisa::grimoire::io::Writer::write<unsigned long long>(uint64_t a1, char *a2, unint64_t a3)
{
  _QWORD *exception;
  const char *v5;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h";
    exception[2] = 0x20000001ELL;
    v5 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h:30: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 61)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h";
    exception[2] = 0x700000020;
    v5 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h:32: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v5;
  }
  return marisa::grimoire::io::Writer::write_data(a1, a2, 8 * a3);
}

uint64_t marisa::grimoire::vector::Vector<marisa::grimoire::vector::RankIndex>::write_(uint64_t a1, marisa::grimoire::io::Writer *this)
{
  uint64_t __buf;

  __buf = 12 * *(_QWORD *)(a1 + 24);
  marisa::grimoire::io::Writer::write_data((uint64_t)this, (char *)&__buf, 8uLL);
  marisa::grimoire::io::Writer::write<marisa::grimoire::vector::RankIndex>((uint64_t)this, *(char **)(a1 + 16), *(_QWORD *)(a1 + 24));
  return marisa::grimoire::io::Writer::seek((uint64_t)this, 4 * (*(_DWORD *)(a1 + 24) & 1));
}

uint64_t marisa::grimoire::io::Writer::write<marisa::grimoire::vector::RankIndex>(uint64_t a1, char *a2, unint64_t a3)
{
  _QWORD *exception;
  const char *v5;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h";
    exception[2] = 0x20000001ELL;
    v5 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h:30: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >= 0x1555555555555556)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h";
    exception[2] = 0x700000020;
    v5 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h:32: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v5;
  }
  return marisa::grimoire::io::Writer::write_data(a1, a2, 12 * a3);
}

uint64_t marisa::grimoire::vector::Vector<unsigned int>::write_(uint64_t a1, marisa::grimoire::io::Writer *this)
{
  uint64_t __buf;

  __buf = 4 * *(_QWORD *)(a1 + 24);
  marisa::grimoire::io::Writer::write_data((uint64_t)this, (char *)&__buf, 8uLL);
  marisa::grimoire::io::Writer::write<unsigned int>((uint64_t)this, *(char **)(a1 + 16), *(_QWORD *)(a1 + 24));
  return marisa::grimoire::io::Writer::seek((uint64_t)this, 4 * (*(_DWORD *)(a1 + 24) & 1));
}

uint64_t marisa::grimoire::io::Writer::write<unsigned int>(uint64_t a1, char *a2, unint64_t a3)
{
  _QWORD *exception;
  const char *v5;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h";
    exception[2] = 0x20000001ELL;
    v5 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h:30: MARISA_NULL_ERROR: (ob"
         "js == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 62)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h";
    exception[2] = 0x700000020;
    v5 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h:32: MARISA_SIZE_ERROR: num"
         "_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v5;
  }
  return marisa::grimoire::io::Writer::write_data(a1, a2, 4 * a3);
}

uint64_t marisa::grimoire::vector::FlatVector::write_(marisa::grimoire::vector::FlatVector *this, marisa::grimoire::io::Writer *a2)
{
  uint64_t __buf;

  marisa::grimoire::vector::Vector<unsigned long long>::write_((uint64_t)this, a2);
  LODWORD(__buf) = *((_QWORD *)this + 6);
  marisa::grimoire::io::Writer::write_data((uint64_t)a2, (char *)&__buf, 4uLL);
  LODWORD(__buf) = *((_DWORD *)this + 14);
  marisa::grimoire::io::Writer::write_data((uint64_t)a2, (char *)&__buf, 4uLL);
  __buf = *((_QWORD *)this + 8);
  return marisa::grimoire::io::Writer::write_data((uint64_t)a2, (char *)&__buf, 8uLL);
}

marisa::grimoire::trie::LoudsTrie **marisa::scoped_ptr<marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(marisa::grimoire::trie::LoudsTrie **a1)
{
  marisa::grimoire::trie::LoudsTrie *v2;

  v2 = *a1;
  if (v2)
  {
    marisa::grimoire::trie::LoudsTrie::~LoudsTrie(v2);
    MEMORY[0x20BD0639C]();
  }
  return a1;
}

char *marisa::grimoire::vector::Vector<marisa::grimoire::trie::Key>::realloc(uint64_t *a1, uint64_t a2)
{
  char *result;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;

  result = (char *)operator new[](24 * a2, MEMORY[0x24BEDB6B8]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (_DWORD *)(a1[1] + 16);
    v7 = result + 16;
    do
    {
      *((_QWORD *)v7 - 2) = *((_QWORD *)v6 - 2);
      *(v7 - 2) = *(v6 - 2);
      *(v7 - 1) = *(v6 - 1);
      v8 = *v6;
      v6 += 6;
      *v7 = v8;
      v7 += 6;
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
    JUMPOUT(0x20BD06378);
  return result;
}

uint64_t marisa::grimoire::trie::LoudsTrie::build_current_trie<marisa::grimoire::trie::Key>(uint64_t *a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  __n128 v34;
  uint64_t v35;
  __n128 *v36;
  unint64_t v37;
  __n128 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int *v43;
  uint64_t *v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int32 *v57;
  float v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float *v63;
  float v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  uint64_t result;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  __n128 v78;
  int v79;
  __int128 v80;
  uint64_t v81[4];
  _OWORD v82[2];
  __int128 v83;
  _OWORD v84[4];

  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 8);
  if (v9)
  {
    v11 = 0;
    v12 = (_DWORD *)(v10 + 16);
    do
    {
      *v12 = v11;
      v12 += 6;
      ++v11;
    }
    while (v9 != v11);
  }
  v13 = marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::Key *>(v10, v10 + 24 * v9, 0);
  v14 = 256;
  if (a5 != 1)
    v14 = 1;
  do
  {
    v15 = v14;
    v14 *= 2;
  }
  while (v15 < v13 / *(unsigned int *)(a4 + 8));
  marisa::grimoire::vector::Vector<marisa::grimoire::trie::Cache>::resize(a1 + 126, v15);
  a1[132] = v15 - 1;
  marisa::grimoire::vector::BitVector::push_back(a1, 1);
  marisa::grimoire::vector::BitVector::push_back(a1, 0);
  v16 = a1 + 78;
  LOBYTE(v84[0]) = 0;
  marisa::grimoire::vector::Vector<char>::push_back(a1 + 78, v84);
  v77 = a1 + 52;
  marisa::grimoire::vector::BitVector::push_back(a1 + 52, 0);
  v72 = a5;
  memset(v84, 0, 41);
  v83 = 0u;
  memset(v82, 0, sizeof(v82));
  v80 = 0u;
  memset(v81, 0, 25);
  v78.n128_u64[0] = *(_QWORD *)(a2 + 24) << 32;
  v78.n128_u32[2] = 0;
  std::deque<marisa::grimoire::trie::Range>::push_back(v82, (uint64_t *)&v78);
  v17 = *((_QWORD *)&v83 + 1);
  if (*((_QWORD *)&v83 + 1))
  {
    v73 = a1 + 78;
    do
    {
      v18 = a1[58];
      v19 = (unsigned int *)(*(_QWORD *)(*((_QWORD *)&v82[0] + 1) + 8 * ((unint64_t)v83 / 0x155))
                           + 12 * ((unint64_t)v83 % 0x155));
      v20 = *v19;
      v21 = v19[1];
      v22 = v19[2];
      *(_QWORD *)&v83 = v83 + 1;
      *((_QWORD *)&v83 + 1) = v17 - 1;
      if ((unint64_t)v83 >= 0x2AA)
      {
        v23 = v18;
        operator delete(**((void ***)&v82[0] + 1));
        v18 = v23;
        *((_QWORD *)&v82[0] + 1) += 8;
        *(_QWORD *)&v83 = v83 - 341;
      }
      v76 = v17;
      v24 = v18 - v17;
      if (v20 < v21)
      {
        while (1)
        {
          v25 = *(_QWORD *)(a2 + 8);
          if (*(_DWORD *)(v25 + 24 * v20 + 8) != (_DWORD)v22)
            break;
          *(_DWORD *)(v25 + 24 * v20 + 12) = v24;
          v20 = (v20 + 1);
          if ((_DWORD)v21 == (_DWORD)v20)
            goto LABEL_49;
        }
      }
      if ((_DWORD)v20 != (_DWORD)v21)
      {
        v75 = v18;
        v26 = v80;
        v80 = 0u;
        memset(v81, 0, 25);
        if (v26)
          MEMORY[0x20BD06378](v26, 0x1000C8077774924);
        v27 = *(_QWORD *)(a2 + 8);
        v28 = *(float *)(v27 + 24 * v20 + 12);
        v29 = v20 + 1;
        if (v20 + 1 < v21)
        {
          v30 = 24 * v20;
          v31 = (v20 << 32) + 0x100000000;
          do
          {
            if (*(unsigned __int8 *)(*(_QWORD *)(v27 + v30) + v22) != *(unsigned __int8 *)(*(_QWORD *)(v27 + v30 + 24)
                                                                                          + v22))
            {
              *(float *)&v32 = v28;
              v78.n128_u64[0] = v31 + v20;
              v78.n128_u64[1] = v22 | ((unint64_t)v32 << 32);
              marisa::grimoire::vector::Vector<marisa::grimoire::trie::WeightedRange>::push_back((uint64_t *)&v80, &v78);
              v27 = *(_QWORD *)(a2 + 8);
              v28 = 0.0;
              LODWORD(v20) = v29;
            }
            v28 = v28 + *(float *)(v27 + v30 + 36);
            ++v29;
            v30 += 24;
            v31 += 0x100000000;
          }
          while (v21 != v29);
        }
        *(float *)&v33 = v28;
        v78.n128_u32[0] = v20;
        v78.n128_u32[1] = v21;
        v78.n128_u64[1] = v22 | ((unint64_t)v33 << 32);
        v34 = marisa::grimoire::vector::Vector<marisa::grimoire::trie::WeightedRange>::push_back((uint64_t *)&v80, &v78);
        v16 = a1 + 78;
        v35 = v75;
        if (*(_DWORD *)(a4 + 16) == 0x20000)
        {
          v36 = (__n128 *)*((_QWORD *)&v80 + 1);
          v37 = v81[1];
          if (v81[1] < 129)
          {
            v38 = 0;
            v40 = 0;
          }
          else
          {
            v38 = (__n128 *)std::get_temporary_buffer[abi:ne180100]<marisa::grimoire::trie::WeightedRange>(v81[1]);
            v40 = v39;
          }
          std::__stable_sort<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(v36, &v36[v37], (uint64_t)&v78, v37, v38, v40, v34);
          if (v38)
            operator delete(v38);
          v35 = v75;
        }
        v41 = v81[1];
        if (v35 == v76)
          a1[133] = v81[1];
        if (v41)
        {
          v42 = 0;
          do
          {
            v43 = (unsigned int *)(*((_QWORD *)&v80 + 1) + 16 * v42);
            v44 = (uint64_t *)v43;
            v45 = v43[2];
            v46 = *v43;
            v47 = *(_QWORD *)(a2 + 8);
            v48 = *(unsigned int *)(v47 + 24 * *v43 + 8);
            v49 = v45 + 1;
            if (v45 + 1 >= v48)
            {
              v50 = v43[2];
              LODWORD(v48) = v45 + 1;
            }
            else
            {
              v50 = v48 - 1;
              v51 = v43[2];
              do
              {
                v52 = v51;
                v51 = v49;
                v53 = (uint64_t *)(v47 + 24 * v46);
                v54 = *v43;
                while (++v54 < (unint64_t)v43[1])
                {
                  v55 = *v53;
                  v56 = v53[3];
                  v53 += 3;
                  if (*(unsigned __int8 *)(v55 + v51) != *(unsigned __int8 *)(v56 + v51))
                  {
                    v50 = v52;
                    LODWORD(v48) = v51;
                    goto LABEL_43;
                  }
                }
                v49 = v51 + 1;
              }
              while (v51 + 1 != v48);
            }
LABEL_43:
            v58 = *((float *)v43 + 3);
            v57 = v43 + 3;
            v59 = v58;
            v60 = ((32 * v24) ^ v24 ^ *(unsigned __int8 *)(*(_QWORD *)(v47 + 24 * v46) + v45)) & a1[132];
            v61 = a1[127];
            v62 = v61 + 12 * v60;
            v64 = *(float *)(v62 + 8);
            v63 = (float *)(v62 + 8);
            if (v64 < v59)
            {
              v65 = a1[81];
              v66 = (_DWORD *)(v61 + 12 * v60);
              *v66 = v24;
              v66[1] = v65;
              *v63 = v59;
              v45 = *((unsigned int *)v44 + 2);
            }
            if (v50 == v45)
            {
              v78.n128_u8[0] = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24 * *(unsigned int *)v44) + v50);
              marisa::grimoire::vector::Vector<char>::push_back(v73, &v78);
              marisa::grimoire::vector::BitVector::push_back(v77, 0);
            }
            else
            {
              v78.n128_u8[0] = 0;
              marisa::grimoire::vector::Vector<char>::push_back(v73, &v78);
              marisa::grimoire::vector::BitVector::push_back(v77, 1);
              v78 = 0uLL;
              v79 = 0;
              v67 = *((unsigned int *)v44 + 2);
              v78.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24 * *(unsigned int *)v44) + v67;
              v78.n128_u64[1] = (v48 - v67);
              v78.n128_u32[3] = *v57;
              marisa::grimoire::vector::Vector<marisa::grimoire::trie::Key>::push_back((uint64_t *)v84, (uint64_t)&v78);
            }
            *((_DWORD *)v44 + 2) = v48;
            std::deque<marisa::grimoire::trie::Range>::push_back(v82, v44);
            marisa::grimoire::vector::BitVector::push_back(a1, 1);
            ++v42;
          }
          while (v42 < v81[1]);
        }
      }
LABEL_49:
      marisa::grimoire::vector::BitVector::push_back(a1, 0);
      v17 = *((_QWORD *)&v83 + 1);
    }
    while (*((_QWORD *)&v83 + 1));
  }
  marisa::grimoire::vector::BitVector::push_back(a1, 0);
  marisa::grimoire::vector::BitVector::build((marisa::grimoire::vector::BitVector *)a1, v72 == 1, 1);
  marisa::grimoire::vector::Vector<unsigned char>::shrink(v16);
  marisa::grimoire::trie::LoudsTrie::build_terminals<marisa::grimoire::trie::Key>((uint64_t)a1, a2, a3);
  v68 = *(_OWORD *)a2;
  *(_OWORD *)a2 = v84[0];
  v84[0] = v68;
  v69 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)&v84[1];
  *(_QWORD *)&v84[1] = v69;
  v70 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)&v84[1] + 8);
  *(_OWORD *)((char *)&v84[1] + 8) = v70;
  LOBYTE(v69) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a2 + 40) = BYTE8(v84[2]);
  BYTE8(v84[2]) = v69;
  if ((_QWORD)v80)
    MEMORY[0x20BD06378](v80, 0x1000C8077774924);
  std::deque<marisa::grimoire::trie::Range>::~deque[abi:ne180100](v82);
  result = *(_QWORD *)&v84[0];
  if (*(_QWORD *)&v84[0])
    return MEMORY[0x20BD06378](*(_QWORD *)&v84[0], 0x1000C8077774924);
  return result;
}

void sub_20839E6E0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, ...)
{
  uint64_t v18;
  uint64_t v21;
  _QWORD *exception;
  va_list va;

  va_start(va, a18);
  if (a13)
    MEMORY[0x20BD06378](a13, 0x1000C8077774924);
  std::deque<marisa::grimoire::trie::Range>::~deque[abi:ne180100]((uint64_t *)va);
  v21 = *(_QWORD *)(v18 - 144);
  if (v21)
    MEMORY[0x20BD06378](v21, 0x1000C8077774924);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc";
    exception[2] = 0x8000001ACLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc:428: MARISA_MEMOR"
                   "Y_ERROR: std::bad_alloc";
  }
  _Unwind_Resume(a1);
}

uint64_t marisa::grimoire::vector::FlatVector::build(__int128 *a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _OWORD v9[3];
  uint64_t v10;
  int v11;
  uint64_t v12;

  memset(v9, 0, 41);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  marisa::grimoire::vector::FlatVector::build_((uint64_t)v9, a2);
  v3 = *a1;
  *a1 = v9[0];
  v9[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v9[1];
  *(_QWORD *)&v9[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v9[1] + 8);
  *(_OWORD *)((char *)&v9[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v9[2]);
  BYTE8(v9[2]) = v4;
  v6 = *((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 6) = v10;
  v10 = v6;
  LODWORD(v6) = *((_DWORD *)a1 + 14);
  *((_DWORD *)a1 + 14) = v11;
  v11 = v6;
  v7 = *((_QWORD *)a1 + 8);
  *((_QWORD *)a1 + 8) = v12;
  result = v3;
  v12 = v7;
  if ((_QWORD)v3)
    return MEMORY[0x20BD06378](v3, 0x1000C8077774924);
  return result;
}

void sub_20839E8B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD06378](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

__n128 marisa::grimoire::vector::Vector<marisa::grimoire::trie::WeightedRange>::push_back(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;

  v4 = a1[3];
  v5 = a1[4];
  v6 = v4 + 1;
  if (v5 < v4 + 1)
  {
    v7 = 2 * v5;
    if (v5 >> 59)
      v7 = 0xFFFFFFFFFFFFFFFLL;
    if (v5 <= v6 >> 1)
      v8 = v6;
    else
      v8 = v7;
    marisa::grimoire::vector::Vector<marisa::grimoire::trie::WeightedRange>::realloc(a1, v8);
    v4 = a1[3];
  }
  result = *a2;
  *(__n128 *)(a1[1] + 16 * v4) = *a2;
  ++a1[3];
  return result;
}

uint64_t *marisa::grimoire::vector::Vector<marisa::grimoire::trie::Key>::push_back(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  v4 = result[3];
  v5 = result[4];
  v6 = v4 + 1;
  if (v5 < v4 + 1)
  {
    v7 = 2 * v5;
    if (v5 > 0x555555555555555)
      v7 = 0xAAAAAAAAAAAAAAALL;
    if (v5 <= v6 >> 1)
      v8 = v6;
    else
      v8 = v7;
    result = (uint64_t *)marisa::grimoire::vector::Vector<marisa::grimoire::trie::Key>::realloc(result, v8);
    v4 = v3[3];
  }
  v9 = v3[1] + 24 * v4;
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *(_DWORD *)(v9 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v9 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(v9 + 16) = *(_DWORD *)(a2 + 16);
  ++v3[3];
  return result;
}

_BYTE *marisa::grimoire::vector::Vector<unsigned char>::shrink(_BYTE *result)
{
  size_t v1;
  _QWORD *exception;

  if (result[40])
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h";
    exception[2] = 0x100000064;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/vector.h:100: MARISA_"
                   "STATE_ERROR: fixed_";
  }
  v1 = *((_QWORD *)result + 3);
  if (v1 != *((_QWORD *)result + 4))
    return marisa::grimoire::vector::Vector<char>::realloc((uint64_t *)result, v1);
  return result;
}

uint64_t marisa::grimoire::trie::LoudsTrie::build_terminals<marisa::grimoire::trie::Key>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t result;
  _OWORD v13[3];

  memset(v13, 0, 41);
  marisa::grimoire::vector::Vector<unsigned int>::resize((uint64_t *)v13, *(_QWORD *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    v6 = *((_QWORD *)&v13[0] + 1);
    v7 = (unsigned int *)(*(_QWORD *)(a2 + 16) + 16);
    do
    {
      *(_DWORD *)(v6 + 4 * *v7) = *(v7 - 1);
      v7 += 6;
      --v5;
    }
    while (v5);
  }
  else
  {
    v6 = *((_QWORD *)&v13[0] + 1);
  }
  v8 = *a3;
  v9 = *(_QWORD *)&v13[1];
  *(_QWORD *)a3 = *(_QWORD *)&v13[0];
  *((_QWORD *)a3 + 1) = v6;
  v13[0] = v8;
  v10 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 2) = v9;
  *(_QWORD *)&v13[1] = v10;
  v11 = *(__int128 *)((char *)a3 + 24);
  *(__int128 *)((char *)a3 + 24) = *(_OWORD *)((char *)&v13[1] + 8);
  *(_OWORD *)((char *)&v13[1] + 8) = v11;
  LOBYTE(v10) = *((_BYTE *)a3 + 40);
  *((_BYTE *)a3 + 40) = BYTE8(v13[2]);
  result = v8;
  BYTE8(v13[2]) = v10;
  if ((_QWORD)v8)
    return MEMORY[0x20BD06378](v8, 0x1000C8077774924);
  return result;
}

void sub_20839EB28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD06378](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::Key *>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;

  v4 = a2;
  v5 = a1;
  v6 = a2 - a1;
  if ((uint64_t)(a2 - a1) < 241)
  {
    v7 = 0;
    goto LABEL_69;
  }
  v7 = 0;
  do
  {
    v8 = marisa::grimoire::algorithm::details::median<marisa::grimoire::trie::Key>(v5, v5 + 24 * (v6 / 0x30uLL), v4 - 24, a3);
    v9 = v8;
    v10 = v5;
    v11 = v4;
    v12 = v5;
    v13 = v4;
    while (v10 < v11)
    {
      v14 = *(unsigned int *)(v10 + 8);
      v15 = a3 >= v14 ? -1 : *(unsigned __int8 *)(*(_QWORD *)v10 + a3);
      if (v15 > v8)
        break;
      if (v15 == v8)
      {
        v16 = *(_QWORD *)v10;
        *(_QWORD *)v10 = *(_QWORD *)v12;
        *(_DWORD *)(v10 + 8) = *(_DWORD *)(v12 + 8);
        v17 = *(_QWORD *)(v10 + 12);
        *(_DWORD *)(v10 + 12) = *(_DWORD *)(v12 + 12);
        *(_DWORD *)(v10 + 16) = *(_DWORD *)(v12 + 16);
        *(_QWORD *)v12 = v16;
        *(_DWORD *)(v12 + 8) = v14;
        *(_QWORD *)(v12 + 12) = v17;
        v12 += 24;
      }
LABEL_11:
      v10 += 24;
    }
    if (v10 < v11)
    {
      v18 = v11 - 24;
      do
      {
        v11 = v18;
        v19 = *(unsigned int *)(v18 + 8);
        if (a3 >= v19)
          v20 = -1;
        else
          v20 = *(unsigned __int8 *)(*(_QWORD *)v11 + a3);
        if (v20 < v8)
          break;
        if (v20 == v8)
        {
          v21 = *(_QWORD *)(v13 - 24);
          v13 -= 24;
          v22 = *(_QWORD *)v11;
          *(_QWORD *)v11 = v21;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v13 + 8);
          v23 = *(_QWORD *)(v11 + 12);
          *(_DWORD *)(v11 + 12) = *(_DWORD *)(v13 + 12);
          *(_DWORD *)(v11 + 16) = *(_DWORD *)(v13 + 16);
          *(_QWORD *)v13 = v22;
          *(_DWORD *)(v13 + 8) = v19;
          *(_QWORD *)(v13 + 12) = v23;
        }
        v18 = v11 - 24;
      }
      while (v10 < v11);
    }
    if (v10 < v11)
    {
      v24 = *(_QWORD *)v10;
      v25 = *(_DWORD *)(v10 + 16);
      *(_QWORD *)v10 = *(_QWORD *)v11;
      v26 = *(_QWORD *)(v10 + 8);
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v10 + 12) = *(_DWORD *)(v11 + 12);
      *(_DWORD *)(v10 + 16) = *(_DWORD *)(v11 + 16);
      *(_QWORD *)v11 = v24;
      *(_QWORD *)(v11 + 8) = v26;
      *(_DWORD *)(v11 + 16) = v25;
      goto LABEL_11;
    }
    v44 = v7;
    if (v12 > v5)
    {
      v27 = 0;
      do
      {
        v28 = v12 + v27;
        v29 = v10 + v27;
        v30 = *(_QWORD *)(v12 + v27 - 24);
        v31 = *(_DWORD *)(v12 + v27 - 8);
        *(_QWORD *)(v28 - 24) = *(_QWORD *)(v10 + v27 - 24);
        v32 = *(_QWORD *)(v12 + v27 - 16);
        *(_DWORD *)(v28 - 16) = *(_DWORD *)(v10 + v27 - 16);
        *(_DWORD *)(v28 - 12) = *(_DWORD *)(v10 + v27 - 12);
        *(_DWORD *)(v28 - 8) = *(_DWORD *)(v10 + v27 - 8);
        *(_QWORD *)(v29 - 24) = v30;
        *(_QWORD *)(v29 - 16) = v32;
        *(_DWORD *)(v29 - 8) = v31;
        v27 -= 24;
      }
      while (v12 + v27 > v5);
      v10 += v27;
    }
    while (v13 < v4)
    {
      v33 = *(_QWORD *)v13;
      v34 = *(_DWORD *)(v13 + 16);
      *(_QWORD *)v13 = *(_QWORD *)v11;
      v35 = *(_QWORD *)(v13 + 8);
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v13 + 12) = *(_DWORD *)(v11 + 12);
      *(_DWORD *)(v13 + 16) = *(_DWORD *)(v11 + 16);
      *(_QWORD *)v11 = v33;
      *(_QWORD *)(v11 + 8) = v35;
      *(_DWORD *)(v11 + 16) = v34;
      v11 += 24;
      v13 += 24;
    }
    v36 = v10 - v5;
    v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v5) >> 3);
    v38 = v11 - v10;
    v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v10) >> 3);
    if (v37 <= v39)
    {
      v40 = v4 - v11;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v11) >> 3)) <= v39)
      {
        if (v36 == 24)
        {
          v41 = v44 + 1;
        }
        else
        {
          if (v36 < 25)
            goto LABEL_53;
          v41 = marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::Key *>(v5, v10, a3) + v44;
        }
        v44 = v41;
LABEL_53:
        if (v40 == 24)
        {
          v7 = v44 + 1;
        }
        else if (v40 < 25)
        {
          v7 = v44;
        }
        else
        {
          v7 = marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::Key *>(v11, v4, a3) + v44;
        }
        if (v38 == 24)
        {
          ++v7;
        }
        else if (v38 >= 25)
        {
          if (v9 == -1)
          {
            ++v7;
            v5 = v11;
            goto LABEL_64;
          }
          ++a3;
        }
        v5 = v10;
LABEL_64:
        v4 = v11;
        goto LABEL_65;
      }
    }
    if (v38 == 24)
      goto LABEL_32;
    if (v38 < 25)
    {
      v7 = v44;
    }
    else if (v8 == -1)
    {
LABEL_32:
      v7 = v44 + 1;
    }
    else
    {
      v7 = marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::Key *>(v10, v11, a3 + 1) + v44;
    }
    v42 = v4 - v11;
    if (v37 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v11) >> 3)))
    {
      if (v42 == 24)
      {
        ++v7;
      }
      else if (v42 >= 25)
      {
        v7 += marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::Key *>(v11, v4, a3);
      }
      v4 = v10;
    }
    else
    {
      if (v36 == 24)
      {
        ++v7;
      }
      else if (v36 >= 25)
      {
        v7 += marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::Key *>(v5, v10, a3);
      }
      v5 = v11;
    }
LABEL_65:
    v6 = v4 - v5;
  }
  while ((uint64_t)(v4 - v5) > 240);
LABEL_69:
  if (v6 >= 25)
    v7 += marisa::grimoire::algorithm::details::insertion_sort<marisa::grimoire::trie::Key *>(v5, v4, a3);
  return v7;
}

uint64_t marisa::grimoire::algorithm::details::median<marisa::grimoire::trie::Key>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v4;
  int v5;
  int v6;
  int v7;

  if (*(unsigned int *)(a1 + 8) <= a4)
    v4 = -1;
  else
    v4 = *(unsigned __int8 *)(*(_QWORD *)a1 + a4);
  if (*(unsigned int *)(a2 + 8) <= a4)
    v5 = -1;
  else
    v5 = *(unsigned __int8 *)(*(_QWORD *)a2 + a4);
  if (*(unsigned int *)(a3 + 8) <= a4)
    v6 = -1;
  else
    v6 = *(unsigned __int8 *)(*(_QWORD *)a3 + a4);
  if (v4 <= v5)
    v7 = v5;
  else
    v7 = v4;
  if (v4 >= v5)
    v4 = v5;
  if (v4 <= v6)
    v4 = v6;
  if (v7 >= v6)
    return v4;
  else
    return v7;
}

uint64_t marisa::grimoire::algorithm::details::insertion_sort<marisa::grimoire::trie::Key *>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a1 + 24;
  if (a1 + 24 >= a2)
    return 1;
  v7 = 1;
  do
  {
    v8 = v3;
    if (v3 <= a1)
    {
      v10 = 0;
    }
    else
    {
      while (1)
      {
        v9 = v8 - 24;
        v10 = marisa::grimoire::algorithm::details::compare<marisa::grimoire::trie::Key>(v8 - 24, v8, a3);
        if (v10 < 1)
          break;
        v11 = *(_QWORD *)(v8 - 24);
        v12 = *(_DWORD *)(v8 - 8);
        *(_QWORD *)(v8 - 24) = *(_QWORD *)v8;
        v13 = *(_QWORD *)(v8 + 8);
        *(_DWORD *)(v8 - 8) = *(_DWORD *)(v8 + 16);
        *(_QWORD *)v8 = v11;
        v14 = *(_QWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 + 8) = v14;
        *(_DWORD *)(v8 + 16) = v12;
        v8 -= 24;
        if (v9 <= a1)
        {
          v10 = 1;
          break;
        }
      }
    }
    if (v10)
      ++v7;
    v3 += 24;
  }
  while (v3 < a2);
  return v7;
}

uint64_t marisa::grimoire::algorithm::details::compare<marisa::grimoire::trie::Key>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  uint64_t result;
  unsigned int v12;

  v3 = *(unsigned int *)(a1 + 8);
  v4 = *(unsigned int *)(a2 + 8);
  v5 = v3 - a3;
  if (v3 <= a3)
  {
LABEL_6:
    if (v3 < v4)
      v12 = -1;
    else
      v12 = 1;
    if ((_DWORD)v3 == (_DWORD)v4)
      return 0;
    else
      return v12;
  }
  else
  {
    v6 = v4 - a3;
    v7 = (unsigned __int8 *)(*(_QWORD *)a1 + a3);
    v8 = (unsigned __int8 *)(*(_QWORD *)a2 + a3);
    while (v6)
    {
      v9 = *v7;
      v10 = *v8;
      result = (v9 - v10);
      if (v9 != v10)
        return result;
      --v6;
      ++v7;
      ++v8;
      if (!--v5)
        goto LABEL_6;
    }
    return 1;
  }
}

void std::deque<marisa::grimoire::trie::Range>::push_back(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 341 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<marisa::grimoire::trie::Range>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x155)) + 12 * (v7 % 0x155);
  v9 = *a2;
  *(_DWORD *)(v8 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v8 = v9;
  ++a1[5];
}

void std::deque<marisa::grimoire::trie::Range>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x155;
  v4 = v2 - 341;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFFCuLL);
      std::__split_buffer<marisa::grimoire::trie::Range *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFFCuLL);
    std::__split_buffer<marisa::grimoire::trie::Range *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFFCuLL);
  std::__split_buffer<marisa::grimoire::trie::Range *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<marisa::grimoire::trie::Range *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_20839F508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<marisa::grimoire::trie::Range *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<marisa::grimoire::trie::Range *>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

_OWORD *marisa::grimoire::vector::Vector<marisa::grimoire::trie::WeightedRange>::realloc(uint64_t *a1, uint64_t a2)
{
  _OWORD *result;
  uint64_t v5;
  __int128 *v6;
  _OWORD *v7;
  __int128 v8;
  uint64_t v9;

  result = operator new[](16 * a2, MEMORY[0x24BEDB6B8]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (__int128 *)a1[1];
    v7 = result;
    do
    {
      v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
    JUMPOUT(0x20BD06378);
  return result;
}

void *std::get_temporary_buffer[abi:ne180100]<marisa::grimoire::trie::WeightedRange>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x7FFFFFFFFFFFFFFLL)
    v1 = 0x7FFFFFFFFFFFFFFLL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  while (1)
  {
    result = operator new(16 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

double std::__stable_sort<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, uint64_t a6, __n128 a7)
{
  unint64_t v13;
  __n128 *v14;
  unint64_t v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;

  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      a7.n128_u32[0] = a2[-1].n128_u32[3];
      if (a7.n128_f32[0] > a1->n128_f32[3])
      {
        a7 = *a1;
        *a1 = a2[-1];
        a2[-1] = a7;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v13 = a4 >> 1;
      v14 = &a1[a4 >> 1];
      v15 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        v17.n128_f64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(a1, v14, a3, v15, a5, a7);
        v18.n128_f64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v13], v17);
        a7.n128_u64[0] = std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*,marisa::grimoire::trie::WeightedRange*,marisa::grimoire::trie::WeightedRange*>(a5, &a5[v13], &a5[v13], &a5[a4], a1, v18).n128_u64[0];
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(a1, v14, a3, v15, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        a7.n128_u64[0] = std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>((__int128 *)a1, (__int128 *)&a1[a4 >> 1], (__int128 *)a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6, v16).n128_u64[0];
      }
    }
    else
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>((uint64_t)a1, (uint64_t)a2);
    }
  }
  return a7.n128_f64[0];
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  if (result != a2)
  {
    v2 = result + 16;
    if (result + 16 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = *(float *)(v4 + 28);
        v6 = *(float *)(v4 + 12);
        v4 = v2;
        if (v5 > v6)
        {
          v10 = *(_QWORD *)v2;
          v11 = *(_DWORD *)(v2 + 8);
          v7 = v3;
          while (1)
          {
            *(_OWORD *)(result + v7 + 16) = *(_OWORD *)(result + v7);
            if (!v7)
              break;
            v8 = *(float *)(result + v7 - 4);
            v7 -= 16;
            if (v5 <= v8)
            {
              v9 = result + v7 + 16;
              goto LABEL_10;
            }
          }
          v9 = result;
LABEL_10:
          *(_QWORD *)v9 = v10;
          *(_DWORD *)(v9 + 8) = v11;
          *(float *)(v9 + 12) = v5;
        }
        v2 = v4 + 16;
        v3 += 16;
      }
      while (v4 + 16 != a2);
    }
  }
  return result;
}

double std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, __n128 a6)
{
  __n128 *v10;
  __n128 v12;

  if (a4)
  {
    if (a4 == 2)
    {
      v10 = a2 - 1;
      if (a2[-1].n128_f32[3] <= a1->n128_f32[3])
      {
        *a5 = *a1;
        a6 = *v10;
      }
      else
      {
        *a5 = *v10;
        a6 = *a1;
      }
      a5[1] = a6;
    }
    else if (a4 == 1)
    {
      a6 = *a1;
      *a5 = *a1;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(a1, &a1[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      a6.n128_u64[0] = std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*,marisa::grimoire::trie::WeightedRange*,marisa::grimoire::trie::WeightedRange*>(a1, &a1[a4 >> 1], &a1[a4 >> 1], a2, a5, v12).n128_u64[0];
    }
    else
    {
      a6.n128_u64[0] = std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(a1, a2, a5).n128_u64[0];
    }
  }
  return a6.n128_f64[0];
}

__n128 std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*,marisa::grimoire::trie::WeightedRange*,marisa::grimoire::trie::WeightedRange*>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, __n128 result)
{
  __n128 v6;
  __n128 v7;
  __n128 v8;
  uint64_t v9;

  while (1)
  {
    if (a1 == a2)
    {
      while (a3 != a4)
      {
        v8 = *a3++;
        result.n128_u64[0] = v8.n128_u64[0];
        *a5++ = v8;
      }
      return result;
    }
    if (a3 == a4)
      break;
    if (a3->n128_f32[3] <= a1->n128_f32[3])
    {
      v7 = *a1++;
      result = v7;
    }
    else
    {
      v6 = *a3++;
      result = v6;
    }
    *a5++ = result;
  }
  if (a1 != a2)
  {
    v9 = 0;
    do
    {
      result = a1[v9];
      a5[v9++] = result;
    }
    while (&a1[v9] != a2);
  }
  return result;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, __n128 result)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  unint64_t v21;
  unint64_t v22;
  __int128 *v23;
  float v24;
  __int128 *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 *v29;
  float v30;
  __int128 *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  uint64_t v40;
  __n128 v43;

  if (a6)
  {
    v10 = a6;
    do
    {
      if (v10 <= a8 || a5 <= a8)
      {
        std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(a1, a2, a3, a4, a5, v10, a7);
        return result;
      }
      if (!a5)
        return result;
      v12 = 0;
      result.n128_u32[0] = *((_DWORD *)a2 + 3);
      v13 = -a5;
      while (1)
      {
        v14 = &a1[v12];
        if (result.n128_f32[0] > *((float *)&a1[v12] + 3))
          break;
        ++v12;
        if (__CFADD__(v13++, 1))
          return result;
      }
      v16 = -v13;
      v39 = a3;
      v40 = a8;
      if (-v13 >= v10)
      {
        if (v13 == -1)
        {
          v43 = (__n128)a1[v12];
          a1[v12] = *a2;
          result = v43;
          *a2 = (__int128)v43;
          return result;
        }
        if (v13 > 0)
          v16 = 1 - v13;
        v26 = v16 >> 1;
        v20 = &a1[(v16 >> 1) + v12];
        v19 = a3;
        if (a3 != a2)
        {
          v27 = a3 - a2;
          v19 = a2;
          do
          {
            v28 = v27 >> 1;
            v29 = &v19[v27 >> 1];
            v30 = *((float *)v29 + 3);
            v31 = v29 + 1;
            v27 += ~(v27 >> 1);
            if (v30 > *((float *)v20 + 3))
              v19 = v31;
            else
              v27 = v28;
          }
          while (v27);
        }
        v18 = v19 - a2;
      }
      else
      {
        if (v10 >= 0)
          v17 = v10;
        else
          v17 = v10 + 1;
        v18 = v17 >> 1;
        v19 = &a2[v17 >> 1];
        v20 = a2;
        if (v14 != a2)
        {
          v21 = ((char *)a2 - (char *)a1 - v12 * 16) >> 4;
          v20 = &a1[v12];
          do
          {
            v22 = v21 >> 1;
            v23 = &v20[v21 >> 1];
            v24 = *((float *)v23 + 3);
            v25 = v23 + 1;
            v21 += ~(v21 >> 1);
            if (*((float *)v19 + 3) > v24)
              v21 = v22;
            else
              v20 = v25;
          }
          while (v21);
        }
        v26 = ((char *)v20 - (char *)a1 - v12 * 16) >> 4;
      }
      a5 = -(v26 + v13);
      v32 = v10 - v18;
      v33 = v18;
      v34 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,marisa::grimoire::trie::WeightedRange *,marisa::grimoire::trie::WeightedRange *>((char *)v20, (char *)a2, (char *)v19);
      v35 = v33;
      v36 = (__int128 *)v34;
      if (v26 + v35 >= v10 - (v26 + v35) - v13)
      {
        v38 = v35;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(v34, v19, v39, a4, a5, v32, a7, v40);
        v19 = v20;
        v32 = v38;
        a5 = v26;
        a8 = v40;
        a3 = v36;
      }
      else
      {
        v37 = v26;
        a8 = v40;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(v14, v20, v34, a4, v37, v35, a7, v40);
        v14 = v36;
        a3 = v39;
      }
      v10 = v32;
      a1 = v14;
      a2 = v19;
    }
    while (v32);
  }
  return result;
}

__n128 std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(__n128 *a1, __n128 *a2, __n128 *a3)
{
  __n128 result;
  __n128 *v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 *v8;
  __n128 *v9;
  uint64_t v10;

  if (a1 != a2)
  {
    result = *a1;
    *a3 = *a1;
    v4 = a1 + 1;
    if (&a1[1] != a2)
    {
      v5 = 0;
      v6 = a3;
      do
      {
        v7 = a1;
        v8 = v6;
        a1 = v4;
        v9 = ++v6;
        if (v7[1].n128_f32[3] > v8->n128_f32[3])
        {
          *v6 = *v8;
          v9 = a3;
          if (v8 != a3)
          {
            v10 = v5;
            while (1)
            {
              v9 = (__n128 *)((char *)a3 + v10);
              if (v7[1].n128_f32[3] <= *(float *)((char *)&a3->n128_f32[-1] + v10))
                break;
              *v9 = v9[-1];
              v10 -= 16;
              if (!v10)
              {
                v9 = a3;
                break;
              }
            }
          }
        }
        result = *a1;
        *v9 = *a1;
        v4 = a1 + 1;
        v5 += 16;
      }
      while (&a1[1] != a2);
    }
  }
  return result;
}

__int128 *std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(__int128 *result, __int128 *a2, __int128 *a3, int a4, uint64_t a5, uint64_t a6, char *__src)
{
  uint64_t v7;
  float *v8;
  __int128 *v9;
  float v10;
  float v11;
  char *v12;
  unint64_t v13;
  float *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;

  if (a5 <= a6)
  {
    if (result != a2)
    {
      v13 = 0;
      do
      {
        *(_OWORD *)&__src[v13] = result[v13 / 0x10];
        v13 += 16;
      }
      while (&result[v13 / 0x10] != a2);
      if (v13)
      {
        v14 = (float *)__src;
        while (a2 != a3)
        {
          if (*((float *)a2 + 3) <= v14[3])
          {
            v17 = *(_OWORD *)v14;
            v14 += 4;
            v16 = v17;
          }
          else
          {
            v15 = *a2++;
            v16 = v15;
          }
          *result++ = v16;
          if (&__src[v13] == (char *)v14)
            return result;
        }
        return (__int128 *)memmove(result, v14, __src - (char *)v14 + v13);
      }
    }
  }
  else if (a2 != a3)
  {
    v7 = 0;
    do
    {
      *(_OWORD *)&__src[v7 * 16] = a2[v7];
      ++v7;
    }
    while (&a2[v7] != a3);
    if (v7 * 16)
    {
      v8 = (float *)&__src[v7 * 16];
      v9 = a3 - 1;
      while (a2 != result)
      {
        v10 = *(v8 - 1);
        v11 = *((float *)a2 - 1);
        if (v10 <= v11)
          v12 = (char *)(v8 - 4);
        else
          v12 = (char *)(a2 - 1);
        if (v10 <= v11)
          v8 -= 4;
        else
          --a2;
        *v9-- = *(_OWORD *)v12;
        if (v8 == (float *)__src)
          return result;
      }
      v18 = 0;
      do
      {
        v9[v18 / 4] = *(_OWORD *)&v8[v18 - 4];
        v18 -= 4;
      }
      while (&v8[v18] != (float *)__src);
    }
  }
  return result;
}

char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,marisa::grimoire::trie::WeightedRange *,marisa::grimoire::trie::WeightedRange *>(char *__src, char *a2, char *a3)
{
  char *v4;
  int64_t v6;
  size_t v7;
  __int128 v9;
  __int128 v10;

  v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 16 == a2)
    {
      v9 = *(_OWORD *)__src;
      v6 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      v4 = &__src[v6];
      *(_OWORD *)v4 = v9;
    }
    else if (a2 + 16 == a3)
    {
      v4 = __src + 16;
      v10 = *((_OWORD *)a3 - 1);
      v7 = a3 - 16 - __src;
      if (a3 - 16 != __src)
        memmove(__src + 16, __src, v7);
      *(_OWORD *)__src = v10;
    }
    else
    {
      return (char *)std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,marisa::grimoire::trie::WeightedRange *>(__src, a2, a3);
    }
  }
  return v4;
}

_OWORD *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,marisa::grimoire::trie::WeightedRange *>(_OWORD *a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  _OWORD *v14;
  _OWORD *v15;
  _OWORD *v16;
  BOOL v17;
  char v18;
  uint64_t v19;

  v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      v4 = 0;
      do
      {
        v5 = a1[v4];
        a1[v4] = a2[v4];
        v6 = (uint64_t)&a1[v4 + 1];
        a2[v4] = v5;
        v7 = (uint64_t)&a2[++v4];
      }
      while ((_OWORD *)v6 != a2 && v7 != (_QWORD)a3);
    }
  }
  else
  {
    v9 = a3 - a2;
    v10 = a2 - a1;
    do
    {
      v11 = v10;
      v10 = v9;
      v9 = v11 % v9;
    }
    while (v9);
    if (v10)
    {
      v12 = &a1[v10];
      do
      {
        v13 = *--v12;
        v14 = &v12[v3];
        v15 = v12;
        do
        {
          v16 = v15;
          v15 = v14;
          *v16 = *v14;
          v17 = __OFSUB__(v3, a3 - v14);
          v19 = v3 - (a3 - v14);
          v18 = (v19 < 0) ^ v17;
          v14 = &a1[v19];
          if (v18)
            v14 = &v15[v3];
        }
        while (v14 != v12);
        *v15 = v13;
      }
      while (v12 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

uint64_t std::deque<marisa::grimoire::trie::Range>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 170;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 341;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<marisa::grimoire::trie::Range *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<marisa::grimoire::trie::Range *>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t marisa::grimoire::vector::FlatVector::build_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  _BOOL8 v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;

  v4 = *(_QWORD *)(a2 + 24);
  if (!v4)
    goto LABEL_10;
  v5 = 0;
  v6 = *(unsigned int **)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  do
  {
    v9 = *v6++;
    v8 = v9;
    if (v9 > v5)
      v5 = v8;
    --v7;
  }
  while (v7);
  if (v5)
  {
    v10 = 0;
    do
    {
      ++v10;
      v11 = v5 > 1;
      v5 >>= 1;
    }
    while (v11);
  }
  else
  {
LABEL_10:
    v10 = 0;
  }
  v12 = v4 != 0;
  v13 = (unint64_t)(v10 * v4 + 63) >> 6;
  if (v10)
    v14 = v13;
  else
    v14 = v12;
  result = (uint64_t)marisa::grimoire::vector::Vector<unsigned long long>::resize((uint64_t *)a1, v14);
  if (v14)
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * *(_QWORD *)(a1 + 24) - 8) = 0;
  *(_QWORD *)(a1 + 48) = v10;
  if (v10)
    *(_DWORD *)(a1 + 56) = 0xFFFFFFFF >> -(char)v10;
  v16 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 64) = v16;
  if (v16)
  {
    v17 = 0;
    do
    {
      result = marisa::grimoire::vector::FlatVector::set(a1, v17, *(_DWORD *)(*(_QWORD *)(a2 + 16) + 4 * v17));
      ++v17;
    }
    while (v17 < *(_QWORD *)(a2 + 24));
  }
  return result;
}

uint64_t marisa::grimoire::vector::FlatVector::set(uint64_t this, uint64_t a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)(this + 48);
  v4 = (unint64_t)(v3 * a2) >> 6;
  v5 = (v3 * a2) & 0x3F;
  v6 = *(unsigned int *)(this + 56);
  v7 = *(_QWORD *)(this + 8);
  v8 = v6 & a3;
  *(_QWORD *)(v7 + 8 * v4) = *(_QWORD *)(v7 + 8 * v4) & ~(v6 << (v3 * a2)) | (v8 << (v3 * a2));
  if ((unint64_t)(v5 + v3) >= 0x41)
    *(_QWORD *)(v7 + 8 * v4 + 8) = *(_QWORD *)(v7 + 8 * v4 + 8) & ~(v6 >> -(char)v5) | (v8 >> -(char)v5);
  return this;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  char v19;
  BOOL v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;

  v8 = (unsigned int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v21 = *(a2 - 2);
        v22 = *v9;
        if (v21 < *v9 || v22 >= v21 && *(a2 - 1) < v9[1])
        {
          *v9 = v21;
          *(a2 - 2) = v22;
          v23 = v9[1];
          v9[1] = *(a2 - 1);
          *(a2 - 1) = v23;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v9, v9 + 2, a2 - 2);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v9, v9 + 2, v9 + 4, a2 - 2);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v9, a2);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v9, &v9[2 * (v13 >> 1)], a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v9 + 2, v15 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v9 + 4, &v9[2 * v14 + 2], a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v15 - 2, v15, &v9[2 * v14 + 2]);
            v16 = *(_QWORD *)v9;
            *(_QWORD *)v9 = *(_QWORD *)v15;
            *(_QWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v17 = *(v9 - 2);
          if (v17 >= *v9 && (*v9 < v17 || *(v9 - 1) >= v9[1]))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned int> *,std::__less<void,void> &>(v9, a2);
            v9 = (unsigned int *)result;
            goto LABEL_19;
          }
LABEL_14:
          v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned int> *,std::__less<void,void> &>(v9, a2);
          if ((v19 & 1) == 0)
            goto LABEL_17;
          v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v9, v18);
          v9 = v18 + 2;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v18 + 2, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v20)
              continue;
LABEL_17:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *,false>(v8, v18, a3, -v11, a5 & 1);
            v9 = v18 + 2;
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *,std::pair<unsigned int,unsigned int> *>(v9, a2, a2, a3);
        return result;
    }
  }
}

unsigned int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *result, unsigned int *a2)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v4;
        v4 = v2;
        v6 = v5[2];
        v7 = *v5;
        if (v6 < *v5 || v7 >= v6 && v5[3] < v5[1])
        {
          v9 = v5[2];
          v8 = v5[3];
          v10 = v5[1];
          v5[2] = v7;
          v4[1] = v10;
          v11 = result;
          if (v5 != result)
          {
            v12 = v3;
            do
            {
              v13 = *(unsigned int *)((char *)result + v12 - 8);
              if (v13 <= v9)
              {
                if (v13 < v9)
                {
                  v11 = v5;
                  goto LABEL_17;
                }
                v11 = (unsigned int *)((char *)result + v12);
                v14 = *(unsigned int *)((char *)result + v12 - 4);
                if (v14 <= v8)
                  goto LABEL_17;
              }
              else
              {
                v14 = *(unsigned int *)((char *)result + v12 - 4);
              }
              v5 -= 2;
              v15 = (unsigned int *)((char *)result + v12);
              *v15 = v13;
              v15[1] = v14;
              v12 -= 8;
            }
            while (v12);
            v11 = result;
          }
LABEL_17:
          *v11 = v9;
          v11[1] = v8;
        }
        v2 = v4 + 2;
        v3 += 8;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

unsigned int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *result, unsigned int *a2)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *i;
  unsigned int v10;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = result + 1;
      do
      {
        v4 = result;
        result = v2;
        v5 = v4[2];
        v6 = *v4;
        if (v5 < *v4 || v6 >= v5 && v4[3] < v4[1])
        {
          v7 = *result;
          v8 = result[1];
          for (i = v3; ; i -= 2)
          {
            v10 = *i;
            i[1] = v6;
            i[2] = v10;
            v6 = *(i - 3);
            if (v6 <= v7 && (v6 < v7 || *(i - 2) <= v8))
              break;
          }
          *(i - 1) = v7;
          *i = v8;
        }
        v2 = result + 2;
        v3 += 2;
      }
      while (result + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int *v6;
  int *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v3 = *a2;
  v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || a2[1] >= a1[1]))
  {
    v9 = *a3;
    if (*a3 >= v3 && (v3 < v9 || a3[1] >= a2[1]))
      return 0;
    *a2 = v9;
    *a3 = v3;
    v11 = (int *)(a2 + 1);
    v10 = a2[1];
    a2[1] = a3[1];
    a3[1] = v10;
    v12 = *a2;
    v13 = *a1;
    if (*a2 >= *a1 && (v13 < v12 || *v11 >= a1[1]))
      return 1;
    *a1 = v12;
    v6 = (int *)(a1 + 1);
    *a2 = v13;
    v8 = 2;
  }
  else
  {
    v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *a1 = v5;
      v6 = (int *)(a1 + 1);
      *a3 = v4;
      v7 = (int *)(a3 + 1);
      v8 = 1;
    }
    else
    {
      *a1 = v3;
      *a2 = v4;
      v14 = a1[1];
      a1[1] = a2[1];
      a2[1] = v14;
      v15 = *a3;
      v16 = *a2;
      if (*a3 >= *a2 && (v16 < v15 || a3[1] >= v14))
        return 1;
      *a2 = v15;
      *a3 = v16;
      v7 = (int *)(a3 + 1);
      v8 = 2;
      v6 = (int *)(a2 + 1);
    }
    v11 = v7;
  }
  v17 = *v6;
  *v6 = *v11;
  *v11 = v17;
  return v8;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned int> *,std::__less<void,void> &>(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *i;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;

  v3 = *a1;
  v2 = a1[1];
  v4 = *(a2 - 2);
  if (v4 <= *a1 && (v4 < v3 || *(a2 - 1) <= v2))
  {
    for (i = a1 + 2; i < a2 && *i <= v3 && (*i < v3 || i[1] <= v2); i += 2)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v7 = i[2];
      i += 2;
      v6 = v7;
    }
    while (v7 <= v3 && (v6 < v3 || i[1] <= v2));
  }
  if (i < a2)
  {
    for (a2 -= 2; v4 > v3 || v4 >= v3 && a2[1] > v2; a2 -= 2)
    {
      v8 = *(a2 - 2);
      v4 = v8;
    }
  }
  if (i < a2)
  {
    v9 = *i;
    v10 = *a2;
    do
    {
      *i = v10;
      *a2 = v9;
      v11 = i[1];
      i[1] = a2[1];
      a2[1] = v11;
      do
      {
        v12 = i[2];
        i += 2;
        v9 = v12;
      }
      while (v12 <= v3 && (v9 < v3 || i[1] <= v2));
      do
      {
        do
        {
          v13 = *(a2 - 2);
          a2 -= 2;
          v10 = v13;
          v14 = v13 >= v3;
        }
        while (v13 > v3);
      }
      while (v14 && a2[1] > v2);
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    a1[1] = *(i - 1);
  }
  *(i - 2) = v3;
  *(i - 1) = v2;
  return i;
}

unsigned int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned int> *,std::__less<void,void> &>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  while (1)
  {
    v5 = a1[v2 + 2];
    if (v5 >= v3 && (v5 > v3 || a1[v2 + 3] >= v4))
      break;
    v2 += 2;
  }
  v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 4)
  {
    do
    {
      v8 = *(a2 - 2);
      a2 -= 2;
      v7 = v8;
    }
    while (v8 >= v3 && (v7 > v3 || a2[1] >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < (unint64_t)a2)
    {
      do
      {
        v10 = *(a2 - 2);
        a2 -= 2;
        v9 = v10;
        if (v10 < v3)
          break;
        if (v9 > v3)
          goto LABEL_19;
      }
      while (a2[1] >= v4 && v6 < (unint64_t)a2);
    }
  }
  if (v6 >= (unint64_t)a2)
  {
    v13 = (unsigned int *)v6;
  }
  else
  {
    v12 = *a2;
    v13 = (unsigned int *)v6;
    v14 = a2;
    do
    {
      *v13 = v12;
      *v14 = v5;
      v15 = v13[1];
      v13[1] = v14[1];
      v14[1] = v15;
      do
      {
        do
        {
          v16 = v13[2];
          v13 += 2;
          v5 = v16;
          v17 = v16 > v3;
        }
        while (v16 < v3);
      }
      while (!v17 && v13[1] < v4);
      do
      {
        v18 = *(v14 - 2);
        v14 -= 2;
        v12 = v18;
      }
      while (v18 >= v3 && (v12 > v3 || v14[1] >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 2 != a1)
  {
    *a1 = *(v13 - 2);
    a1[1] = *(v13 - 1);
  }
  *(v13 - 2) = v3;
  *(v13 - 1) = v4;
  return v13 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  unsigned int v20;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 < *a1 || v7 >= v6 && *(a2 - 1) < a1[1])
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  do
  {
    v13 = *v9;
    if (*v10 >= *v9 && (v13 < *v10 || v10[1] >= v9[1]))
      goto LABEL_22;
    v14 = *v10;
    v15 = v10[1];
    *v10 = v13;
    v10[1] = v9[1];
    v16 = a1;
    if (v9 == a1)
      goto LABEL_21;
    v17 = v11;
    while (1)
    {
      v18 = (char *)a1 + v17;
      v19 = *(unsigned int *)((char *)a1 + v17 + 8);
      if (v19 <= v14)
        break;
      v20 = *((_DWORD *)v18 + 3);
LABEL_18:
      v9 -= 2;
      *((_DWORD *)v18 + 4) = v19;
      *(unsigned int *)((char *)a1 + v17 + 20) = v20;
      v17 -= 8;
      if (v17 == -16)
      {
        v16 = a1;
        goto LABEL_21;
      }
    }
    if (v19 < v14)
    {
      v16 = v9;
      goto LABEL_21;
    }
    v20 = *(unsigned int *)((char *)a1 + v17 + 12);
    if (v20 > v15)
      goto LABEL_18;
    v16 = (unsigned int *)((char *)a1 + v17 + 16);
LABEL_21:
    *v16 = v14;
    v16[1] = v15;
    if (++v12 == 8)
      return v10 + 2 == a2;
LABEL_22:
    v9 = v10;
    v11 += 8;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  if (*a4 < *a3 || v10 >= v9 && a4[1] < a3[1])
  {
    *a3 = v9;
    *a4 = v10;
    v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    v12 = *a3;
    v13 = *a2;
    if (*a3 < *a2 || v13 >= v12 && a3[1] < a2[1])
    {
      *a2 = v12;
      *a3 = v13;
      v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      v15 = *a2;
      v16 = *a1;
      if (*a2 < *a1 || v16 >= v15 && a2[1] < a1[1])
      {
        *a1 = v15;
        *a2 = v16;
        v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  if (*a5 < *a4 || v12 >= v11 && a5[1] < a4[1])
  {
    *a4 = v11;
    *a5 = v12;
    v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    v14 = *a4;
    v15 = *a3;
    if (*a4 < *a3 || v15 >= v14 && a4[1] < a3[1])
    {
      *a3 = v14;
      *a4 = v15;
      v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      v17 = *a3;
      v18 = *a2;
      if (*a3 < *a2 || v18 >= v17 && a3[1] < a2[1])
      {
        *a2 = v17;
        *a3 = v18;
        v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        v20 = *a2;
        v21 = *a1;
        if (*a2 < *a1 || v21 >= v20 && a2[1] < a1[1])
        {
          *a1 = v20;
          *a2 = v21;
          v22 = a1[1];
          a1[1] = a2[1];
          a2[1] = v22;
        }
      }
    }
  }
  return result;
}

unsigned int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *,std::pair<unsigned int,unsigned int> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *v14;
        v16 = *a1;
        if (*v14 < *a1 || v16 >= v15 && v14[1] < a1[1])
        {
          *v14 = v16;
          *a1 = v15;
          v17 = v14[1];
          v14[1] = a1[1];
          a1[1] = v17;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v18 = (unint64_t)v8 >> 3;
      v19 = a2 - 2;
      do
      {
        v21 = *a1;
        v20 = a1[1];
        v22 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a4, v18);
        if (v19 == v22)
        {
          *v22 = v21;
          v22[1] = v20;
        }
        else
        {
          *v22 = *v19;
          v22[1] = v19[1];
          *v19 = v21;
          v19[1] = v20;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>((uint64_t)a1, (uint64_t)(v22 + 2), a4, ((char *)(v22 + 2) - (char *)a1) >> 3);
        }
        v19 -= 2;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (unsigned int *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(_DWORD *)(result + 8 * v7 + 4) < v8[3])
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v11 = *v8;
      if (*v8 >= *a4 && (*a4 < v11 || v8[1] >= a4[1]))
      {
        v12 = *a4;
        v13 = a4[1];
        *a4 = v11;
        a4[1] = v8[1];
        if (v5 >= v7)
        {
          while (1)
          {
            v15 = 2 * v7;
            v7 = (2 * v7) | 1;
            v14 = (unsigned int *)(result + 8 * v7);
            v16 = v15 + 2;
            if (v16 < a3)
            {
              v17 = v14[2];
              if (*v14 < v17 || v17 >= *v14 && *(_DWORD *)(result + 8 * v7 + 4) < v14[3])
              {
                v14 += 2;
                v7 = v16;
              }
            }
            v18 = *v14;
            if (*v14 < v12 || v18 <= v12 && v14[1] < v13)
              break;
            *v8 = v18;
            v8[1] = v14[1];
            v8 = v14;
            if (v5 < v7)
              goto LABEL_22;
          }
        }
        v14 = v8;
LABEL_22:
        *v14 = v12;
        v14[1] = v13;
      }
    }
  }
  return result;
}

unsigned int *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = result;
    v7 = v3 + 1;
    result += 2 * v3 + 2;
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3)
    {
      v10 = result[2];
      if (*result < v10 || v10 >= *result && v6[2 * v7 + 1] < result[3])
      {
        result += 2;
        v3 = v9;
      }
    }
    *v6 = *result;
    v6[1] = result[1];
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (unsigned int *)(result + 8 * (v4 >> 1));
    v7 = *v6;
    v8 = *(_DWORD *)(a2 - 8);
    if (*v6 < v8 || v8 >= v7 && *(_DWORD *)(result + 8 * v5 + 4) < *(_DWORD *)(a2 - 4))
    {
      v9 = *(_DWORD *)(a2 - 8);
      v10 = *(_DWORD *)(a2 - 4);
      *(_DWORD *)(a2 - 8) = v7;
      *(_DWORD *)(a2 - 4) = v6[1];
      if (v4 >= 2)
      {
        while (1)
        {
          v12 = v5 - 1;
          v5 = (v5 - 1) >> 1;
          v11 = (unsigned int *)(result + 8 * v5);
          v13 = *v11;
          if (*v11 >= v9)
          {
            if (v13 > v9)
              break;
            v14 = *(_DWORD *)(result + 8 * v5 + 4);
            if (v14 >= v10)
              break;
          }
          else
          {
            v14 = v11[1];
          }
          *v6 = v13;
          v6[1] = v14;
          v6 = (unsigned int *)(result + 8 * v5);
          if (v12 <= 1)
            goto LABEL_12;
        }
      }
      v11 = v6;
LABEL_12:
      *v11 = v9;
      v11[1] = v10;
    }
  }
  return result;
}

char *marisa::grimoire::vector::Vector<marisa::grimoire::trie::Entry>::realloc(uint64_t *a1, uint64_t a2)
{
  char *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  result = (char *)operator new[](16 * a2, MEMORY[0x24BEDB6B8]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (uint64_t *)(a1[1] + 8);
    v7 = result + 8;
    do
    {
      *(v7 - 1) = *(v6 - 1);
      v8 = *v6;
      v6 += 2;
      *v7 = v8;
      v7 += 2;
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
    JUMPOUT(0x20BD06378);
  return result;
}

uint64_t marisa::grimoire::trie::LoudsTrie::build_current_trie<marisa::grimoire::trie::ReverseKey>(uint64_t *a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  __n128 v33;
  uint64_t v34;
  __n128 *v35;
  unint64_t v36;
  __n128 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int32 *v57;
  float v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float *v63;
  float v64;
  _DWORD *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  uint64_t result;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v75;
  uint64_t v76;
  int v77;
  __n128 v78;
  int v79;
  __int128 v80;
  uint64_t v81[4];
  _OWORD v82[2];
  __int128 v83;
  _OWORD v84[4];

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 8);
  if (v8)
  {
    v10 = 0;
    v11 = (_DWORD *)(v9 + 16);
    do
    {
      *v11 = v10;
      v11 += 6;
      ++v10;
    }
    while (v8 != v10);
  }
  v12 = marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::ReverseKey *>(v9, v9 + 24 * v8, 0);
  v13 = 256;
  if (a5 != 1)
    v13 = 1;
  do
  {
    v14 = v13;
    v13 *= 2;
  }
  while (v14 < v12 / *(unsigned int *)(a4 + 8));
  marisa::grimoire::vector::Vector<marisa::grimoire::trie::Cache>::resize(a1 + 126, v14);
  a1[132] = v14 - 1;
  marisa::grimoire::vector::BitVector::push_back(a1, 1);
  marisa::grimoire::vector::BitVector::push_back(a1, 0);
  v15 = a1 + 78;
  LOBYTE(v84[0]) = 0;
  marisa::grimoire::vector::Vector<char>::push_back(a1 + 78, v84);
  marisa::grimoire::vector::BitVector::push_back(a1 + 52, 0);
  memset(v84, 0, 41);
  v83 = 0u;
  memset(v82, 0, sizeof(v82));
  v80 = 0u;
  memset(v81, 0, 25);
  v78.n128_u64[0] = *(_QWORD *)(a2 + 24) << 32;
  v78.n128_u32[2] = 0;
  std::deque<marisa::grimoire::trie::Range>::push_back(v82, (uint64_t *)&v78);
  v16 = *((_QWORD *)&v83 + 1);
  if (*((_QWORD *)&v83 + 1))
  {
    v72 = a1 + 52;
    v73 = a1 + 78;
    do
    {
      v17 = a1[58];
      v18 = (unsigned int *)(*(_QWORD *)(*((_QWORD *)&v82[0] + 1) + 8 * ((unint64_t)v83 / 0x155))
                           + 12 * ((unint64_t)v83 % 0x155));
      v19 = *v18;
      v20 = v18[1];
      v21 = v18[2];
      *(_QWORD *)&v83 = v83 + 1;
      *((_QWORD *)&v83 + 1) = v16 - 1;
      if ((unint64_t)v83 >= 0x2AA)
      {
        v22 = v17;
        v23 = v16;
        operator delete(**((void ***)&v82[0] + 1));
        v16 = v23;
        v17 = v22;
        *((_QWORD *)&v82[0] + 1) += 8;
        *(_QWORD *)&v83 = v83 - 341;
      }
      if (v19 < v20)
      {
        while (1)
        {
          v24 = *(_QWORD *)(a2 + 8);
          if (*(_DWORD *)(v24 + 24 * v19 + 8) != (_DWORD)v21)
            break;
          *(_DWORD *)(v24 + 24 * v19 + 12) = v17 - v16;
          v19 = (v19 + 1);
          if ((_DWORD)v20 == (_DWORD)v19)
            goto LABEL_49;
        }
      }
      if ((_DWORD)v19 != (_DWORD)v20)
      {
        v76 = v16;
        v77 = v17 - v16;
        v25 = v80;
        v80 = 0u;
        memset(v81, 0, 25);
        if (v25)
          MEMORY[0x20BD06378](v25, 0x1000C8077774924);
        v75 = v17;
        v26 = *(_QWORD *)(a2 + 8);
        v27 = *(float *)(v26 + 24 * v19 + 12);
        v28 = v19 + 1;
        if (v19 + 1 < v20)
        {
          v29 = 24 * v19;
          v30 = (v19 << 32) + 0x100000000;
          do
          {
            if (*(unsigned __int8 *)(*(_QWORD *)(v26 + v29) - v21 - 1) != *(unsigned __int8 *)(*(_QWORD *)(v26 + v29 + 24)
                                                                                              - v21
                                                                                              - 1))
            {
              *(float *)&v31 = v27;
              v78.n128_u64[0] = v30 + v19;
              v78.n128_u64[1] = v21 | ((unint64_t)v31 << 32);
              marisa::grimoire::vector::Vector<marisa::grimoire::trie::WeightedRange>::push_back((uint64_t *)&v80, &v78);
              v26 = *(_QWORD *)(a2 + 8);
              v27 = 0.0;
              LODWORD(v19) = v28;
            }
            v27 = v27 + *(float *)(v26 + v29 + 36);
            ++v28;
            v29 += 24;
            v30 += 0x100000000;
          }
          while (v20 != v28);
        }
        *(float *)&v32 = v27;
        v78.n128_u32[0] = v19;
        v78.n128_u32[1] = v20;
        v78.n128_u64[1] = v21 | ((unint64_t)v32 << 32);
        v33 = marisa::grimoire::vector::Vector<marisa::grimoire::trie::WeightedRange>::push_back((uint64_t *)&v80, &v78);
        v15 = a1 + 78;
        v34 = v76;
        if (*(_DWORD *)(a4 + 16) == 0x20000)
        {
          v35 = (__n128 *)*((_QWORD *)&v80 + 1);
          v36 = v81[1];
          if (v81[1] < 129)
          {
            v37 = 0;
            v39 = 0;
          }
          else
          {
            v37 = (__n128 *)std::get_temporary_buffer[abi:ne180100]<marisa::grimoire::trie::WeightedRange>(v81[1]);
            v39 = v38;
          }
          std::__stable_sort<std::_ClassicAlgPolicy,std::greater<marisa::grimoire::trie::WeightedRange> &,marisa::grimoire::trie::WeightedRange*>(v35, &v35[v36], (uint64_t)&v78, v36, v37, v39, v33);
          if (v37)
            operator delete(v37);
          v34 = v76;
        }
        v40 = v81[1];
        if (v75 == v34)
          a1[133] = v81[1];
        if (v40)
        {
          v41 = 0;
          do
          {
            v42 = (unsigned int *)(*((_QWORD *)&v80 + 1) + 16 * v41);
            v43 = (uint64_t *)v42;
            v44 = v42[2];
            v45 = *(_QWORD *)(a2 + 8);
            v46 = *(unsigned int *)(v45 + 24 * *v42 + 8);
            v47 = v44 + 1;
            if (v44 + 1 >= v46)
            {
              v48 = v42[2];
              LODWORD(v46) = v44 + 1;
            }
            else
            {
              v48 = v46 - 1;
              v49 = (uint64_t *)(v45 + 24 * *v42);
              v50 = v42[2];
              do
              {
                v51 = v50;
                v50 = v47;
                v52 = v49;
                v53 = *v42;
                while (++v53 < (unint64_t)v42[1])
                {
                  v54 = *v52;
                  v55 = v52[3];
                  v52 += 3;
                  if (*(unsigned __int8 *)(v54 + ~v51 - 1) != *(unsigned __int8 *)(v55 + ~v51 - 1))
                  {
                    v48 = v51;
                    LODWORD(v46) = v47;
                    goto LABEL_43;
                  }
                }
                ++v47;
              }
              while (v50 + 1 != v46);
            }
LABEL_43:
            v56 = a1[81];
            v58 = *((float *)v42 + 3);
            v57 = v42 + 3;
            v59 = v58;
            v60 = a1[132] & v56;
            v61 = a1[127];
            v62 = v61 + 12 * v60;
            v64 = *(float *)(v62 + 8);
            v63 = (float *)(v62 + 8);
            if (v64 < v59)
            {
              v65 = (_DWORD *)(v61 + 12 * v60);
              *v65 = v77;
              v65[1] = v56;
              *v63 = v59;
              v44 = *((unsigned int *)v43 + 2);
            }
            if (v48 == v44)
            {
              v78.n128_u8[0] = *(_BYTE *)(~v48 + *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24 * *(unsigned int *)v43));
              marisa::grimoire::vector::Vector<char>::push_back(v73, &v78);
              marisa::grimoire::vector::BitVector::push_back(v72, 0);
            }
            else
            {
              v78.n128_u8[0] = 0;
              marisa::grimoire::vector::Vector<char>::push_back(v73, &v78);
              marisa::grimoire::vector::BitVector::push_back(v72, 1);
              v78 = 0uLL;
              v79 = 0;
              v66 = *((unsigned int *)v43 + 2);
              v78.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24 * *(unsigned int *)v43) - v66;
              v78.n128_u64[1] = (v46 - v66);
              v78.n128_u32[3] = *v57;
              marisa::grimoire::vector::Vector<marisa::grimoire::trie::Key>::push_back((uint64_t *)v84, (uint64_t)&v78);
            }
            *((_DWORD *)v43 + 2) = v46;
            std::deque<marisa::grimoire::trie::Range>::push_back(v82, v43);
            marisa::grimoire::vector::BitVector::push_back(a1, 1);
            ++v41;
          }
          while (v41 < v81[1]);
        }
      }
LABEL_49:
      marisa::grimoire::vector::BitVector::push_back(a1, 0);
      v16 = *((_QWORD *)&v83 + 1);
    }
    while (*((_QWORD *)&v83 + 1));
  }
  marisa::grimoire::vector::BitVector::push_back(a1, 0);
  marisa::grimoire::vector::BitVector::build((marisa::grimoire::vector::BitVector *)a1, a5 == 1, 1);
  marisa::grimoire::vector::Vector<unsigned char>::shrink(v15);
  marisa::grimoire::trie::LoudsTrie::build_terminals<marisa::grimoire::trie::ReverseKey>((uint64_t)a1, a2, a3);
  v67 = *(_OWORD *)a2;
  *(_OWORD *)a2 = v84[0];
  v84[0] = v67;
  v68 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)&v84[1];
  *(_QWORD *)&v84[1] = v68;
  v69 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)&v84[1] + 8);
  *(_OWORD *)((char *)&v84[1] + 8) = v69;
  LOBYTE(v68) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a2 + 40) = BYTE8(v84[2]);
  BYTE8(v84[2]) = v68;
  if ((_QWORD)v80)
    MEMORY[0x20BD06378](v80, 0x1000C8077774924);
  std::deque<marisa::grimoire::trie::Range>::~deque[abi:ne180100](v82);
  result = *(_QWORD *)&v84[0];
  if (*(_QWORD *)&v84[0])
    return MEMORY[0x20BD06378](*(_QWORD *)&v84[0], 0x1000C8077774924);
  return result;
}

void sub_2083A1EBC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v30;
  _QWORD *exception;

  if (a21)
    MEMORY[0x20BD06378](a21, 0x1000C8077774924);
  std::deque<marisa::grimoire::trie::Range>::~deque[abi:ne180100](&a27);
  v30 = *(_QWORD *)(v27 - 144);
  if (v30)
    MEMORY[0x20BD06378](v30, 0x1000C8077774924);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc";
    exception[2] = 0x8000001ACLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/louds-trie.cc:428: MARISA_MEMOR"
                   "Y_ERROR: std::bad_alloc";
  }
  _Unwind_Resume(a1);
}

uint64_t marisa::grimoire::trie::LoudsTrie::build_terminals<marisa::grimoire::trie::ReverseKey>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t result;
  _OWORD v13[3];

  memset(v13, 0, 41);
  marisa::grimoire::vector::Vector<unsigned int>::resize((uint64_t *)v13, *(_QWORD *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    v6 = *((_QWORD *)&v13[0] + 1);
    v7 = (unsigned int *)(*(_QWORD *)(a2 + 16) + 16);
    do
    {
      *(_DWORD *)(v6 + 4 * *v7) = *(v7 - 1);
      v7 += 6;
      --v5;
    }
    while (v5);
  }
  else
  {
    v6 = *((_QWORD *)&v13[0] + 1);
  }
  v8 = *a3;
  v9 = *(_QWORD *)&v13[1];
  *(_QWORD *)a3 = *(_QWORD *)&v13[0];
  *((_QWORD *)a3 + 1) = v6;
  v13[0] = v8;
  v10 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 2) = v9;
  *(_QWORD *)&v13[1] = v10;
  v11 = *(__int128 *)((char *)a3 + 24);
  *(__int128 *)((char *)a3 + 24) = *(_OWORD *)((char *)&v13[1] + 8);
  *(_OWORD *)((char *)&v13[1] + 8) = v11;
  LOBYTE(v10) = *((_BYTE *)a3 + 40);
  *((_BYTE *)a3 + 40) = BYTE8(v13[2]);
  result = v8;
  BYTE8(v13[2]) = v10;
  if ((_QWORD)v8)
    return MEMORY[0x20BD06378](v8, 0x1000C8077774924);
  return result;
}

void sub_2083A2090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD06378](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::ReverseKey *>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;

  v4 = a2;
  v5 = a1;
  v6 = a2 - a1;
  if ((uint64_t)(a2 - a1) < 241)
  {
    v7 = 0;
    goto LABEL_69;
  }
  v7 = 0;
  do
  {
    v8 = marisa::grimoire::algorithm::details::median<marisa::grimoire::trie::ReverseKey>(v5, v5 + 24 * (v6 / 0x30uLL), v4 - 24, a3);
    v9 = v8;
    v10 = v5;
    v11 = v4;
    v12 = v5;
    v13 = v4;
    while (v10 < v11)
    {
      v14 = *(unsigned int *)(v10 + 8);
      v15 = a3 >= v14 ? -1 : *(unsigned __int8 *)(*(_QWORD *)v10 - a3 - 1);
      if (v15 > v8)
        break;
      if (v15 == v8)
      {
        v16 = *(_QWORD *)v10;
        *(_QWORD *)v10 = *(_QWORD *)v12;
        *(_DWORD *)(v10 + 8) = *(_DWORD *)(v12 + 8);
        v17 = *(_QWORD *)(v10 + 12);
        *(_DWORD *)(v10 + 12) = *(_DWORD *)(v12 + 12);
        *(_DWORD *)(v10 + 16) = *(_DWORD *)(v12 + 16);
        *(_QWORD *)v12 = v16;
        *(_DWORD *)(v12 + 8) = v14;
        *(_QWORD *)(v12 + 12) = v17;
        v12 += 24;
      }
LABEL_11:
      v10 += 24;
    }
    if (v10 < v11)
    {
      v18 = v11 - 24;
      do
      {
        v11 = v18;
        v19 = *(unsigned int *)(v18 + 8);
        if (a3 >= v19)
          v20 = -1;
        else
          v20 = *(unsigned __int8 *)(*(_QWORD *)v11 - a3 - 1);
        if (v20 < v8)
          break;
        if (v20 == v8)
        {
          v21 = *(_QWORD *)(v13 - 24);
          v13 -= 24;
          v22 = *(_QWORD *)v11;
          *(_QWORD *)v11 = v21;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v13 + 8);
          v23 = *(_QWORD *)(v11 + 12);
          *(_DWORD *)(v11 + 12) = *(_DWORD *)(v13 + 12);
          *(_DWORD *)(v11 + 16) = *(_DWORD *)(v13 + 16);
          *(_QWORD *)v13 = v22;
          *(_DWORD *)(v13 + 8) = v19;
          *(_QWORD *)(v13 + 12) = v23;
        }
        v18 = v11 - 24;
      }
      while (v10 < v11);
    }
    if (v10 < v11)
    {
      v24 = *(_QWORD *)v10;
      v25 = *(_DWORD *)(v10 + 16);
      *(_QWORD *)v10 = *(_QWORD *)v11;
      v26 = *(_QWORD *)(v10 + 8);
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v10 + 12) = *(_DWORD *)(v11 + 12);
      *(_DWORD *)(v10 + 16) = *(_DWORD *)(v11 + 16);
      *(_QWORD *)v11 = v24;
      *(_QWORD *)(v11 + 8) = v26;
      *(_DWORD *)(v11 + 16) = v25;
      goto LABEL_11;
    }
    v44 = v7;
    if (v12 > v5)
    {
      v27 = 0;
      do
      {
        v28 = v12 + v27;
        v29 = v10 + v27;
        v30 = *(_QWORD *)(v12 + v27 - 24);
        v31 = *(_DWORD *)(v12 + v27 - 8);
        *(_QWORD *)(v28 - 24) = *(_QWORD *)(v10 + v27 - 24);
        v32 = *(_QWORD *)(v12 + v27 - 16);
        *(_DWORD *)(v28 - 16) = *(_DWORD *)(v10 + v27 - 16);
        *(_DWORD *)(v28 - 12) = *(_DWORD *)(v10 + v27 - 12);
        *(_DWORD *)(v28 - 8) = *(_DWORD *)(v10 + v27 - 8);
        *(_QWORD *)(v29 - 24) = v30;
        *(_QWORD *)(v29 - 16) = v32;
        *(_DWORD *)(v29 - 8) = v31;
        v27 -= 24;
      }
      while (v12 + v27 > v5);
      v10 += v27;
    }
    while (v13 < v4)
    {
      v33 = *(_QWORD *)v13;
      v34 = *(_DWORD *)(v13 + 16);
      *(_QWORD *)v13 = *(_QWORD *)v11;
      v35 = *(_QWORD *)(v13 + 8);
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v13 + 12) = *(_DWORD *)(v11 + 12);
      *(_DWORD *)(v13 + 16) = *(_DWORD *)(v11 + 16);
      *(_QWORD *)v11 = v33;
      *(_QWORD *)(v11 + 8) = v35;
      *(_DWORD *)(v11 + 16) = v34;
      v11 += 24;
      v13 += 24;
    }
    v36 = v10 - v5;
    v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v5) >> 3);
    v38 = v11 - v10;
    v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v10) >> 3);
    if (v37 <= v39)
    {
      v40 = v4 - v11;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v11) >> 3)) <= v39)
      {
        if (v36 == 24)
        {
          v41 = v44 + 1;
        }
        else
        {
          if (v36 < 25)
            goto LABEL_53;
          v41 = marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::ReverseKey *>(v5, v10, a3) + v44;
        }
        v44 = v41;
LABEL_53:
        if (v40 == 24)
        {
          v7 = v44 + 1;
        }
        else if (v40 < 25)
        {
          v7 = v44;
        }
        else
        {
          v7 = marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::ReverseKey *>(v11, v4, a3) + v44;
        }
        if (v38 == 24)
        {
          ++v7;
        }
        else if (v38 >= 25)
        {
          if (v9 == -1)
          {
            ++v7;
            v5 = v11;
            goto LABEL_64;
          }
          ++a3;
        }
        v5 = v10;
LABEL_64:
        v4 = v11;
        goto LABEL_65;
      }
    }
    if (v38 == 24)
      goto LABEL_32;
    if (v38 < 25)
    {
      v7 = v44;
    }
    else if (v8 == -1)
    {
LABEL_32:
      v7 = v44 + 1;
    }
    else
    {
      v7 = marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::ReverseKey *>(v10, v11, a3 + 1) + v44;
    }
    v42 = v4 - v11;
    if (v37 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v11) >> 3)))
    {
      if (v42 == 24)
      {
        ++v7;
      }
      else if (v42 >= 25)
      {
        v7 += marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::ReverseKey *>(v11, v4, a3);
      }
      v4 = v10;
    }
    else
    {
      if (v36 == 24)
      {
        ++v7;
      }
      else if (v36 >= 25)
      {
        v7 += marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::ReverseKey *>(v5, v10, a3);
      }
      v5 = v11;
    }
LABEL_65:
    v6 = v4 - v5;
  }
  while ((uint64_t)(v4 - v5) > 240);
LABEL_69:
  if (v6 >= 25)
    v7 += marisa::grimoire::algorithm::details::insertion_sort<marisa::grimoire::trie::ReverseKey *>(v5, v4, a3);
  return v7;
}

uint64_t marisa::grimoire::algorithm::details::median<marisa::grimoire::trie::ReverseKey>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v4;
  int v5;
  int v6;
  int v7;

  if (*(unsigned int *)(a1 + 8) <= a4)
    v4 = -1;
  else
    v4 = *(unsigned __int8 *)(~a4 + *(_QWORD *)a1);
  if (*(unsigned int *)(a2 + 8) <= a4)
    v5 = -1;
  else
    v5 = *(unsigned __int8 *)(~a4 + *(_QWORD *)a2);
  if (*(unsigned int *)(a3 + 8) <= a4)
    v6 = -1;
  else
    v6 = *(unsigned __int8 *)(~a4 + *(_QWORD *)a3);
  if (v4 <= v5)
    v7 = v5;
  else
    v7 = v4;
  if (v4 >= v5)
    v4 = v5;
  if (v4 <= v6)
    v4 = v6;
  if (v7 >= v6)
    return v4;
  else
    return v7;
}

uint64_t marisa::grimoire::algorithm::details::insertion_sort<marisa::grimoire::trie::ReverseKey *>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a1 + 24;
  if (a1 + 24 >= a2)
    return 1;
  v7 = 1;
  do
  {
    v8 = v3;
    if (v3 <= a1)
    {
      v10 = 0;
    }
    else
    {
      while (1)
      {
        v9 = v8 - 24;
        v10 = marisa::grimoire::algorithm::details::compare<marisa::grimoire::trie::ReverseKey>(v8 - 24, v8, a3);
        if (v10 < 1)
          break;
        v11 = *(_QWORD *)(v8 - 24);
        v12 = *(_DWORD *)(v8 - 8);
        *(_QWORD *)(v8 - 24) = *(_QWORD *)v8;
        v13 = *(_QWORD *)(v8 + 8);
        *(_DWORD *)(v8 - 8) = *(_DWORD *)(v8 + 16);
        *(_QWORD *)v8 = v11;
        v14 = *(_QWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 + 8) = v14;
        *(_DWORD *)(v8 + 16) = v12;
        v8 -= 24;
        if (v9 <= a1)
        {
          v10 = 1;
          break;
        }
      }
    }
    if (v10)
      ++v7;
    v3 += 24;
  }
  while (v3 < a2);
  return v7;
}

uint64_t marisa::grimoire::algorithm::details::compare<marisa::grimoire::trie::ReverseKey>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  uint64_t result;
  unsigned int v12;

  v3 = *(unsigned int *)(a1 + 8);
  v4 = *(unsigned int *)(a2 + 8);
  v5 = v3 - a3;
  if (v3 <= a3)
  {
LABEL_6:
    if (v3 < v4)
      v12 = -1;
    else
      v12 = 1;
    if ((_DWORD)v3 == (_DWORD)v4)
      return 0;
    else
      return v12;
  }
  else
  {
    v6 = v4 - a3;
    v7 = (unsigned __int8 *)(*(_QWORD *)a2 + ~a3);
    v8 = (unsigned __int8 *)(*(_QWORD *)a1 + ~a3);
    while (v6)
    {
      v9 = *v8;
      v10 = *v7;
      result = (v9 - v10);
      if (v9 != v10)
        return result;
      --v6;
      --v7;
      --v8;
      if (!--v5)
        goto LABEL_6;
    }
    return 1;
  }
}

char *marisa::grimoire::vector::Vector<marisa::grimoire::trie::Cache>::realloc(uint64_t *a1, uint64_t a2)
{
  char *result;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;

  result = (char *)operator new[](12 * a2, MEMORY[0x24BEDB6B8]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (_DWORD *)(a1[1] + 8);
    v7 = result + 8;
    do
    {
      *((_QWORD *)v7 - 1) = *((_QWORD *)v6 - 1);
      v8 = *v6;
      v6 += 3;
      *v7 = v8;
      v7 += 3;
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
    JUMPOUT(0x20BD06378);
  return result;
}

uint64_t marisa::grimoire::vector::Vector<unsigned char>::map_(uint64_t a1, marisa::grimoire::io::Mapper *this)
{
  unint64_t v4;

  v4 = *(_QWORD *)marisa::grimoire::io::Mapper::map_data(this, 8uLL);
  *(_QWORD *)(a1 + 16) = marisa::grimoire::io::Mapper::map_data(this, v4);
  marisa::grimoire::io::Mapper::seek(this, -(int)v4 & 7);
  *(_QWORD *)(a1 + 24) = v4;
  return marisa::grimoire::vector::Vector<unsigned long long>::fix(a1);
}

uint64_t marisa::grimoire::vector::Vector<unsigned char>::write_(uint64_t a1, marisa::grimoire::io::Writer *this)
{
  uint64_t __buf;

  __buf = *(_QWORD *)(a1 + 24);
  marisa::grimoire::io::Writer::write_data((uint64_t)this, (char *)&__buf, 8uLL);
  marisa::grimoire::io::Writer::write<unsigned char>((uint64_t)this, *(char **)(a1 + 16), *(_QWORD *)(a1 + 24));
  return marisa::grimoire::io::Writer::seek((uint64_t)this, -*(_DWORD *)(a1 + 24) & 7);
}

uint64_t marisa::grimoire::io::Writer::write<unsigned char>(uint64_t a1, char *a2, size_t a3)
{
  _QWORD *exception;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h";
    exception[2] = 0x20000001ELL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../io/writer.h:30: MARISA_NULL_"
                   "ERROR: (objs == NULL) && (num_objs != 0)";
  }
  return marisa::grimoire::io::Writer::write_data(a1, a2, a3);
}

double marisa::grimoire::trie::Tail::Tail(marisa::grimoire::trie::Tail *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 25) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 73) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *(_OWORD *)((char *)this + 185) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *(_OWORD *)((char *)this + 233) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 137) = 0u;
  return result;
}

uint64_t marisa::grimoire::trie::Tail::build(__int128 *a1, uint64_t a2, __int128 *a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t result;
  _QWORD *exception;
  const char *v17;
  _OWORD v18[3];
  _OWORD v19[4];
  __int128 v20;
  _BYTE v21[25];
  __int128 v22;
  _BYTE v23[25];
  __int128 v24;
  _BYTE v25[25];

  if (!a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc";
    exception[2] = 0x20000000DLL;
    v17 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc:13: MARISA_NULL_ERROR: offsets == NULL";
    goto LABEL_28;
  }
  if (a4 == 0x2000)
    goto LABEL_15;
  if (a4 != 4096)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc";
    exception[2] = 0x500000024;
    v17 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc:36: MARISA_CODE_ERROR: undefined tail mode";
LABEL_28:
    exception[3] = v17;
  }
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    v6 = 0;
    a4 = 4096;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + 8) + 16 * v6;
      v8 = *(unsigned int *)(v7 + 8);
      if ((_DWORD)v8)
        break;
LABEL_11:
      if (++v6 == v5)
        goto LABEL_15;
    }
    v9 = -v8;
    v10 = *(_QWORD *)v7 + 1;
    while (*(_BYTE *)(v10 + v9))
    {
      if (__CFADD__(v9++, 1))
        goto LABEL_11;
    }
    a4 = 0x2000;
  }
  else
  {
    a4 = 4096;
  }
LABEL_15:
  memset(v18, 0, 41);
  memset(v19, 0, 41);
  v22 = 0u;
  memset(v23, 0, sizeof(v23));
  v24 = 0u;
  memset(v25, 0, sizeof(v25));
  v19[3] = 0u;
  v20 = 0u;
  memset(v21, 0, sizeof(v21));
  marisa::grimoire::trie::Tail::build_((uint64_t)v18, a2, a3, a4);
  v12 = *a1;
  *a1 = v18[0];
  v18[0] = v12;
  v13 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v18[1];
  *(_QWORD *)&v18[1] = v13;
  v14 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v18[1] + 8);
  *(_OWORD *)((char *)&v18[1] + 8) = v14;
  LOBYTE(v13) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v18[2]);
  BYTE8(v18[2]) = v13;
  marisa::grimoire::vector::BitVector::swap((marisa::grimoire::vector::BitVector *)(a1 + 3), (marisa::grimoire::vector::BitVector *)v19);
  if ((_QWORD)v24)
    MEMORY[0x20BD06378](v24, 0x1000C8077774924);
  if ((_QWORD)v22)
    MEMORY[0x20BD06378](v22, 0x1000C8077774924);
  if ((_QWORD)v20)
    MEMORY[0x20BD06378](v20, 0x1000C8077774924);
  if (*(_QWORD *)&v19[0])
    MEMORY[0x20BD06378](*(_QWORD *)&v19[0], 0x1000C8077774924);
  result = *(_QWORD *)&v18[0];
  if (*(_QWORD *)&v18[0])
    return MEMORY[0x20BD06378](*(_QWORD *)&v18[0], 0x1000C8077774924);
  return result;
}

void sub_2083A2B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  marisa::grimoire::trie::Tail::~Tail((marisa::grimoire::trie::Tail *)&a9);
  _Unwind_Resume(a1);
}

uint64_t marisa::grimoire::trie::Tail::build_(uint64_t a1, uint64_t a2, __int128 *a3, int a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t i;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t result;
  _QWORD *exception;
  _QWORD *v31;
  char v32;
  _QWORD v33[2];
  _OWORD v34[3];

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 8);
  if (v8)
  {
    v10 = 0;
    v11 = (_DWORD *)(v9 + 12);
    do
    {
      *v11 = v10;
      v11 += 4;
      ++v10;
    }
    while (v8 != v10);
  }
  marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::Entry *>(v9, v9 + 16 * v8, 0);
  memset(v34, 0, 41);
  v12 = *(_QWORD *)(a2 + 24);
  LODWORD(v33[0]) = 0;
  marisa::grimoire::vector::Vector<unsigned int>::resize((uint64_t *)v34, v12, v33);
  v33[0] = 0;
  v33[1] = 0;
  v13 = *(_QWORD *)(a2 + 24);
  if (v13)
  {
    v14 = v33;
    do
    {
      --v13;
      v15 = *(_QWORD *)(a2 + 8);
      v16 = v15 + 16 * v13;
      v18 = (unsigned int *)(v16 + 8);
      v17 = *(unsigned int *)(v16 + 8);
      if (!*(_DWORD *)(v16 + 8))
      {
        exception = __cxa_allocate_exception(0x20uLL);
        *exception = &off_24C09C668;
        exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc";
        exception[2] = 0x4000000AALL;
        exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc:170: MARISA_RANGE_E"
                       "RROR: current.length() == 0";
      }
      v19 = 0;
      v20 = 0;
      v21 = *((unsigned int *)v14 + 2);
      while (v21 != v20)
      {
        if (*(unsigned __int8 *)(*v14 + v19) != *(unsigned __int8 *)(*(_QWORD *)v16 + v19))
          goto LABEL_13;
        ++v20;
        --v19;
        if (v17 == v20)
          goto LABEL_14;
      }
      v20 = *((unsigned int *)v14 + 2);
LABEL_13:
      if (v20 != v17)
      {
        v22 = *((_QWORD *)&v34[0] + 1);
        goto LABEL_17;
      }
LABEL_14:
      v22 = *((_QWORD *)&v34[0] + 1);
      if ((_DWORD)v21)
      {
        *(_DWORD *)(*((_QWORD *)&v34[0] + 1) + 4 * *(unsigned int *)(v15 + 16 * v13 + 12)) = v21
                                                                                             - v17
                                                                                             + *(_DWORD *)(*((_QWORD *)&v34[0] + 1) + 4 * *((unsigned int *)v14 + 3));
        goto LABEL_29;
      }
LABEL_17:
      *(_DWORD *)(v22 + 4 * *(unsigned int *)(v15 + 16 * v13 + 12)) = *(_QWORD *)(a1 + 24);
      v23 = *v18;
      if ((_DWORD)v23)
      {
        for (i = 0; i < v23; ++i)
        {
          v32 = *(_BYTE *)(*(_QWORD *)v16 - v23 + i + 1);
          marisa::grimoire::vector::Vector<char>::push_back((uint64_t *)a1, &v32);
          v23 = *v18;
        }
        if (a4 != 4096)
        {
          if (v23 >= 2)
          {
            v25 = 1;
            do
            {
              marisa::grimoire::vector::BitVector::push_back((uint64_t *)(a1 + 48), 0);
              ++v25;
            }
            while (v25 < *v18);
          }
LABEL_27:
          marisa::grimoire::vector::BitVector::push_back((uint64_t *)(a1 + 48), 1);
          goto LABEL_28;
        }
      }
      else if (a4 != 4096)
      {
        goto LABEL_27;
      }
      v32 = 0;
      marisa::grimoire::vector::Vector<char>::push_back((uint64_t *)a1, &v32);
LABEL_28:
      if (*(_DWORD *)(a1 + 28))
      {
        v31 = __cxa_allocate_exception(0x20uLL);
        *v31 = &off_24C09C668;
        v31[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc";
        v31[2] = 0x7000000C0;
        v31[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/tail.cc:192: MARISA_SIZE_ERROR: b"
                 "uf_.size() > MARISA_UINT32_MAX";
      }
LABEL_29:
      v14 = (_QWORD *)v16;
    }
    while (v13);
  }
  marisa::grimoire::vector::Vector<unsigned char>::shrink((_BYTE *)a1);
  v26 = *a3;
  *a3 = v34[0];
  v34[0] = v26;
  v27 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 2) = *(_QWORD *)&v34[1];
  *(_QWORD *)&v34[1] = v27;
  v28 = *(__int128 *)((char *)a3 + 24);
  *(__int128 *)((char *)a3 + 24) = *(_OWORD *)((char *)&v34[1] + 8);
  *(_OWORD *)((char *)&v34[1] + 8) = v28;
  LOBYTE(v27) = *((_BYTE *)a3 + 40);
  *((_BYTE *)a3 + 40) = BYTE8(v34[2]);
  result = v26;
  BYTE8(v34[2]) = v27;
  if ((_QWORD)v26)
    return MEMORY[0x20BD06378](v26, 0x1000C8077774924);
  return result;
}

void sub_2083A2E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    MEMORY[0x20BD06378](a13, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t *marisa::grimoire::trie::Tail::swap(marisa::grimoire::trie::Tail *this, marisa::grimoire::trie::Tail *a2)
{
  marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this, (uint64_t *)a2);
  return marisa::grimoire::vector::BitVector::swap((marisa::grimoire::trie::Tail *)((char *)this + 48), (marisa::grimoire::trie::Tail *)((char *)a2 + 48));
}

uint64_t marisa::grimoire::trie::Tail::map(marisa::grimoire::trie::Tail *this, marisa::grimoire::io::Mapper *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t result;
  __int128 v8[3];
  _OWORD v9[4];
  __int128 v10;
  _BYTE v11[25];
  __int128 v12;
  _BYTE v13[25];
  __int128 v14;
  _BYTE v15[25];

  memset(v8, 0, 41);
  memset(v9, 0, 41);
  v12 = 0u;
  memset(v13, 0, sizeof(v13));
  v14 = 0u;
  memset(v15, 0, sizeof(v15));
  v9[3] = 0u;
  v10 = 0u;
  memset(v11, 0, sizeof(v11));
  marisa::grimoire::vector::Vector<char>::map(v8, a2);
  marisa::grimoire::vector::BitVector::map((marisa::grimoire::vector::BitVector *)v9, a2);
  v4 = *(_OWORD *)this;
  *(_OWORD *)this = v8[0];
  v8[0] = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *(_QWORD *)&v8[1];
  *(_QWORD *)&v8[1] = v5;
  v6 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)((char *)this + 24) = *(__int128 *)((char *)&v8[1] + 8);
  *(__int128 *)((char *)&v8[1] + 8) = v6;
  LOBYTE(v5) = *((_BYTE *)this + 40);
  *((_BYTE *)this + 40) = BYTE8(v8[2]);
  BYTE8(v8[2]) = v5;
  marisa::grimoire::vector::BitVector::swap((marisa::grimoire::trie::Tail *)((char *)this + 48), (marisa::grimoire::vector::BitVector *)v9);
  if ((_QWORD)v14)
    MEMORY[0x20BD06378](v14, 0x1000C8077774924);
  if ((_QWORD)v12)
    MEMORY[0x20BD06378](v12, 0x1000C8077774924);
  if ((_QWORD)v10)
    MEMORY[0x20BD06378](v10, 0x1000C8077774924);
  if (*(_QWORD *)&v9[0])
    MEMORY[0x20BD06378](*(_QWORD *)&v9[0], 0x1000C8077774924);
  result = *(_QWORD *)&v8[0];
  if (*(_QWORD *)&v8[0])
    return MEMORY[0x20BD06378](*(_QWORD *)&v8[0], 0x1000C8077774924);
  return result;
}

void sub_2083A2FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  marisa::grimoire::trie::Tail::~Tail((marisa::grimoire::trie::Tail *)&a9);
  _Unwind_Resume(a1);
}

uint64_t marisa::grimoire::trie::Tail::write(marisa::grimoire::trie::Tail *this, marisa::grimoire::io::Writer *a2)
{
  marisa::grimoire::vector::Vector<char>::write_((uint64_t)this, a2);
  return marisa::grimoire::vector::BitVector::write_((marisa::grimoire::trie::Tail *)((char *)this + 48), a2);
}

uint64_t *marisa::grimoire::trie::Tail::restore(uint64_t *this, marisa::Agent *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  _BYTE *v7;

  v3 = a3;
  v4 = this;
  v5 = (uint64_t *)*((_QWORD *)a2 + 5);
  if (this[12])
  {
    do
    {
      this = marisa::grimoire::vector::Vector<char>::push_back(v5, (_BYTE *)(v4[2] + v3));
      v6 = *(_QWORD *)(v4[8] + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3;
      ++v3;
    }
    while ((v6 & 1) == 0);
  }
  else
  {
    v7 = (_BYTE *)(this[2] + a3);
    if (*v7)
    {
      do
        this = marisa::grimoire::vector::Vector<char>::push_back(v5, v7);
      while (*++v7);
    }
  }
  return this;
}

uint64_t marisa::grimoire::trie::Tail::match(marisa::grimoire::trie::Tail *this, marisa::Agent *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;

  v3 = *((_QWORD *)a2 + 5);
  v4 = *((_QWORD *)this + 2);
  if (*((_QWORD *)this + 12))
  {
    v5 = *(_DWORD *)(v3 + 100);
    v6 = *(_QWORD *)a2;
    v7 = *((_QWORD *)a2 + 1);
    do
    {
      if (*(unsigned __int8 *)(v4 + a3) != *(unsigned __int8 *)(v6 + v5))
        break;
      *(_DWORD *)(v3 + 100) = ++v5;
      if (((*(_QWORD *)(*((_QWORD *)this + 8) + ((a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
        return 1;
      ++a3;
    }
    while (v7 > v5);
  }
  else
  {
    v12 = v4 + a3;
    v8 = v4 + a3 - *(unsigned int *)(v3 + 100);
    v9 = *(_QWORD *)a2;
    v10 = *((_QWORD *)a2 + 1);
    v11 = *(unsigned __int8 *)v12;
    LODWORD(v12) = *(_DWORD *)(v3 + 100);
    while (v11 == *(unsigned __int8 *)(v9 + v12))
    {
      v12 = (v12 + 1);
      *(_DWORD *)(v3 + 100) = v12;
      v11 = *(unsigned __int8 *)(v8 + v12);
      if (!*(_BYTE *)(v8 + v12))
        return 1;
      if (v10 <= v12)
        return 0;
    }
  }
  return 0;
}

uint64_t *marisa::grimoire::vector::Vector<unsigned int>::resize(uint64_t *result, unint64_t a2, _DWORD *a3)
{
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;

  v4 = a2;
  v5 = result;
  v6 = result[4];
  if (v6 < a2)
  {
    v7 = 2 * v6;
    if (v6 >> 61)
      v7 = 0x3FFFFFFFFFFFFFFFLL;
    if (v6 > a2 >> 1)
      a2 = v7;
    result = (uint64_t *)marisa::grimoire::vector::Vector<unsigned int>::realloc(result, a2);
  }
  v8 = v5[3];
  v9 = v4 - v8;
  if (v4 > v8)
  {
    v10 = (_DWORD *)(v5[1] + 4 * v8);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
  v5[3] = v4;
  return result;
}

uint64_t marisa::grimoire::vector::Vector<char>::map(__int128 *a1, marisa::grimoire::io::Mapper *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  marisa::grimoire::vector::Vector<unsigned char>::map_((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x20BD06378](v3, 0x1000C8077774924);
  return result;
}

void sub_2083A326C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x20BD06378](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::Entry *>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;

  v4 = a2;
  v5 = a1;
  v6 = a2 - a1;
  if ((uint64_t)(a2 - a1) < 161)
  {
    v7 = 0;
    goto LABEL_68;
  }
  v7 = 0;
  do
  {
    v8 = marisa::grimoire::algorithm::details::median<marisa::grimoire::trie::Entry>(v5, v5 + 16 * ((unint64_t)v6 >> 5), v4 - 16, a3);
    v9 = v8;
    v10 = v5;
    v11 = v4;
    v12 = v5;
    v13 = v4;
    while (v10 < v11)
    {
      v14 = *(unsigned int *)(v10 + 8);
      v15 = a3 >= v14 ? -1 : *(unsigned __int8 *)(*(_QWORD *)v10 - a3);
      if (v15 > v8)
        break;
      if (v15 == v8)
      {
        v16 = *(_QWORD *)v10;
        v17 = *(_DWORD *)(v10 + 12);
        *(_QWORD *)v10 = *(_QWORD *)v12;
        *(_QWORD *)(v10 + 8) = *(_QWORD *)(v12 + 8);
        *(_QWORD *)v12 = v16;
        *(_DWORD *)(v12 + 8) = v14;
        *(_DWORD *)(v12 + 12) = v17;
        v12 += 16;
      }
LABEL_11:
      v10 += 16;
    }
    if (v10 < v11)
    {
      v18 = v11 - 16;
      do
      {
        v11 = v18;
        v19 = *(unsigned int *)(v18 + 8);
        if (a3 >= v19)
          v20 = -1;
        else
          v20 = *(unsigned __int8 *)(*(_QWORD *)v11 - a3);
        if (v20 < v8)
          break;
        if (v20 == v8)
        {
          v21 = *(_QWORD *)(v13 - 16);
          v13 -= 16;
          v22 = *(_QWORD *)v11;
          v23 = *(_DWORD *)(v11 + 12);
          *(_QWORD *)v11 = v21;
          *(_QWORD *)(v11 + 8) = *(_QWORD *)(v13 + 8);
          *(_QWORD *)v13 = v22;
          *(_DWORD *)(v13 + 8) = v19;
          *(_DWORD *)(v13 + 12) = v23;
        }
        v18 = v11 - 16;
      }
      while (v10 < v11);
    }
    if (v10 < v11)
    {
      v24 = *(_QWORD *)v10;
      *(_QWORD *)v10 = *(_QWORD *)v11;
      v25 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)v11 = v24;
      v26 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)(v10 + 8) = v25;
      *(_QWORD *)(v11 + 8) = v26;
      goto LABEL_11;
    }
    v42 = v7;
    while (v12 > v5)
    {
      v28 = *(_QWORD *)(v12 - 16);
      v12 -= 16;
      v27 = v28;
      v29 = *(_QWORD *)(v10 - 16);
      v10 -= 16;
      *(_QWORD *)v12 = v29;
      v30 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)v10 = v27;
      v31 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = v30;
      *(_QWORD *)(v10 + 8) = v31;
    }
    while (v13 < v4)
    {
      v32 = *(_QWORD *)v13;
      *(_QWORD *)v13 = *(_QWORD *)v11;
      v33 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)v11 = v32;
      v34 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)(v13 + 8) = v33;
      *(_QWORD *)(v11 + 8) = v34;
      v11 += 16;
      v13 += 16;
    }
    v35 = v10 - v5;
    v36 = (uint64_t)(v10 - v5) >> 4;
    v37 = v11 - v10;
    if (v36 <= (uint64_t)(v11 - v10) >> 4)
    {
      v38 = v4 - v11;
      if (v37 >> 4 >= (uint64_t)(v4 - v11) >> 4)
      {
        if (v35 == 16)
        {
          v39 = v42 + 1;
        }
        else
        {
          if (v35 < 17)
            goto LABEL_52;
          v39 = marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::Entry *>(v5, v10, a3) + v42;
        }
        v42 = v39;
LABEL_52:
        if (v38 == 16)
        {
          v7 = v42 + 1;
        }
        else if (v38 < 17)
        {
          v7 = v42;
        }
        else
        {
          v7 = marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::Entry *>(v11, v4, a3) + v42;
        }
        if (v37 == 16)
        {
          ++v7;
        }
        else if (v37 >= 17)
        {
          if (v9 == -1)
          {
            ++v7;
            v5 = v11;
            goto LABEL_63;
          }
          ++a3;
        }
        v5 = v10;
LABEL_63:
        v4 = v11;
        goto LABEL_64;
      }
    }
    if (v37 == 16)
      goto LABEL_31;
    if (v37 < 17)
    {
      v7 = v42;
    }
    else if (v8 == -1)
    {
LABEL_31:
      v7 = v42 + 1;
    }
    else
    {
      v7 = marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::Entry *>(v10, v11, a3 + 1) + v42;
    }
    v40 = v4 - v11;
    if (v36 >= (uint64_t)(v4 - v11) >> 4)
    {
      if (v40 == 16)
      {
        ++v7;
      }
      else if (v40 >= 17)
      {
        v7 += marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::Entry *>(v11, v4, a3);
      }
      v4 = v10;
    }
    else
    {
      if (v35 == 16)
      {
        ++v7;
      }
      else if (v35 >= 17)
      {
        v7 += marisa::grimoire::algorithm::details::sort<marisa::grimoire::trie::Entry *>(v5, v10, a3);
      }
      v5 = v11;
    }
LABEL_64:
    v6 = v4 - v5;
  }
  while ((uint64_t)(v4 - v5) > 160);
LABEL_68:
  if (v6 >= 17)
    v7 += marisa::grimoire::algorithm::details::insertion_sort<marisa::grimoire::trie::Entry *>(v5, v4, a3);
  return v7;
}

uint64_t marisa::grimoire::algorithm::details::median<marisa::grimoire::trie::Entry>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v4;
  int v5;
  int v6;
  int v7;

  if (*(unsigned int *)(a1 + 8) <= a4)
    v4 = -1;
  else
    v4 = *(unsigned __int8 *)(*(_QWORD *)a1 - a4);
  if (*(unsigned int *)(a2 + 8) <= a4)
    v5 = -1;
  else
    v5 = *(unsigned __int8 *)(*(_QWORD *)a2 - a4);
  if (*(unsigned int *)(a3 + 8) <= a4)
    v6 = -1;
  else
    v6 = *(unsigned __int8 *)(*(_QWORD *)a3 - a4);
  if (v4 <= v5)
    v7 = v5;
  else
    v7 = v4;
  if (v4 >= v5)
    v4 = v5;
  if (v4 <= v6)
    v4 = v6;
  if (v7 >= v6)
    return v4;
  else
    return v7;
}

uint64_t marisa::grimoire::algorithm::details::insertion_sort<marisa::grimoire::trie::Entry *>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = (_QWORD *)(a1 + 16);
  if (a1 + 16 >= a2)
    return 1;
  v7 = 1;
  do
  {
    v8 = v3;
    if ((unint64_t)v3 <= a1)
    {
      v10 = 0;
    }
    else
    {
      while (1)
      {
        v9 = v8 - 2;
        v10 = marisa::grimoire::algorithm::details::compare<marisa::grimoire::trie::Entry>((uint64_t)(v8 - 2), (uint64_t)v8, a3);
        if (v10 < 1)
          break;
        v11 = *(v8 - 2);
        *(v8 - 2) = *v8;
        v12 = v8[1];
        *v8 = v11;
        v13 = *(v8 - 1);
        *(v8 - 1) = v12;
        v8[1] = v13;
        v8 -= 2;
        if ((unint64_t)v9 <= a1)
        {
          v10 = 1;
          break;
        }
      }
    }
    if (v10)
      ++v7;
    v3 += 2;
  }
  while ((unint64_t)v3 < a2);
  return v7;
}

uint64_t marisa::grimoire::algorithm::details::compare<marisa::grimoire::trie::Entry>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  uint64_t result;
  unsigned int v12;

  v3 = *(unsigned int *)(a1 + 8);
  v4 = *(unsigned int *)(a2 + 8);
  v5 = v3 - a3;
  if (v3 <= a3)
  {
LABEL_6:
    if (v3 < v4)
      v12 = -1;
    else
      v12 = 1;
    if ((_DWORD)v3 == (_DWORD)v4)
      return 0;
    else
      return v12;
  }
  else
  {
    v6 = v4 - a3;
    v7 = (unsigned __int8 *)(*(_QWORD *)a2 - a3);
    v8 = (unsigned __int8 *)(*(_QWORD *)a1 - a3);
    while (v6)
    {
      v9 = *v8;
      v10 = *v7;
      result = (v9 - v10);
      if (v9 != v10)
        return result;
      --v6;
      --v7;
      --v8;
      if (!--v5)
        goto LABEL_6;
    }
    return 1;
  }
}

uint64_t marisa::grimoire::vector::Vector<char>::write_(uint64_t a1, marisa::grimoire::io::Writer *this)
{
  uint64_t __buf;

  __buf = *(_QWORD *)(a1 + 24);
  marisa::grimoire::io::Writer::write_data((uint64_t)this, (char *)&__buf, 8uLL);
  marisa::grimoire::io::Writer::write<char>((uint64_t)this, *(char **)(a1 + 16), *(_QWORD *)(a1 + 24));
  return marisa::grimoire::io::Writer::seek((uint64_t)this, -*(_DWORD *)(a1 + 24) & 7);
}

uint64_t marisa::grimoire::io::Writer::write<char>(uint64_t a1, char *a2, size_t a3)
{
  _QWORD *exception;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/../io/writer.h";
    exception[2] = 0x20000001ELL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/trie/../vector/../io/writer.h:30: MA"
                   "RISA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
  }
  return marisa::grimoire::io::Writer::write_data(a1, a2, a3);
}

uint64_t marisa::grimoire::vector::BitVector::rank1(marisa::grimoire::vector::BitVector *this, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2 >> 9;
  v3 = *((_QWORD *)this + 10);
  v4 = *(unsigned int *)(v3 + 12 * (a2 >> 9));
  switch((a2 >> 6) & 7)
  {
    case 1uLL:
      v5 = *(_DWORD *)(v3 + 12 * v2 + 4) & 0x7F;
      goto LABEL_10;
    case 2uLL:
      v6 = (unint64_t)*(unsigned int *)(v3 + 12 * v2 + 4) >> 7;
      goto LABEL_5;
    case 3uLL:
      v6 = (unint64_t)*(unsigned int *)(v3 + 12 * v2 + 4) >> 15;
LABEL_5:
      v4 += v6;
      break;
    case 4uLL:
      v4 += (unint64_t)*(unsigned int *)(v3 + 12 * v2 + 4) >> 23;
      break;
    case 5uLL:
      v5 = *(_DWORD *)(v3 + 12 * v2 + 8) & 0x1FF;
      goto LABEL_10;
    case 6uLL:
      v5 = ((unint64_t)*(unsigned int *)(v3 + 12 * v2 + 8) >> 9) & 0x1FF;
      goto LABEL_10;
    case 7uLL:
      v5 = ((unint64_t)*(unsigned int *)(v3 + 12 * v2 + 8) >> 18) & 0x1FF;
LABEL_10:
      v4 += v5;
      break;
    default:
      break;
  }
  v7 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * (a2 >> 6)) & ~(-1 << a2);
  v8 = (((((v7 >> 1) & 0x5555555555555555) + (v7 & 0x5555555555555555)) >> 2) & 0x3333333333333333)
     + ((((v7 >> 1) & 0x5555555555555555) + (v7 & 0x5555555555555555)) & 0x3333333333333333);
  return v4 + ((0x101010101010101 * (((v8 >> 4) & 0x707070707070707) + (v8 & 0x707070707070707))) >> 56);
}

unint64_t marisa::grimoire::vector::BitVector::select0(marisa::grimoire::vector::BitVector *this, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unint64_t v12;
  marisa::grimoire::vector::_anonymous_namespace_ *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *((_QWORD *)this + 16);
  if ((a2 & 0x1FF) == 0)
    return *(unsigned int *)(v2 + 4 * (a2 >> 9));
  v3 = *(_DWORD *)(v2 + 4 * (a2 >> 9)) >> 9;
  v4 = (*(_DWORD *)(v2 + 4 * (a2 >> 9) + 4) + 511) >> 9;
  v5 = *((_QWORD *)this + 10);
  if (v3 + 10 >= v4)
  {
    v7 = v5 + 12 * v3;
    v8 = v3-- << 9;
    v9 = (unsigned int *)(v7 + 12);
    do
    {
      v10 = *v9;
      v9 += 3;
      ++v3;
      v8 += 512;
    }
    while (v8 - v10 <= a2);
  }
  else
  {
    do
    {
      if (((v4 + v3) >> 1 << 9) - *(unsigned int *)(v5 + 12 * ((v4 + v3) >> 1)) > a2)
        v4 = (v4 + v3) >> 1;
      else
        v3 = (v4 + v3) >> 1;
    }
    while (v3 + 1 < v4);
  }
  v11 = (unsigned int *)(v5 + 12 * v3);
  v12 = v11[1];
  v13 = (marisa::grimoire::vector::_anonymous_namespace_ *)(a2 - (v3 << 9) + *v11);
  v14 = 8 * v3;
  if ((unint64_t)v13 >= 256 - (v12 >> 23))
  {
    v15 = *(unsigned int *)(v5 + 12 * v3 + 8);
    v16 = (v15 >> 9) & 0x1FF;
    if ((unint64_t)v13 >= 384 - v16)
    {
      v18 = (v15 >> 18) & 0x1FF;
      if ((unint64_t)v13 >= 448 - v18)
      {
        v14 |= 7uLL;
        v13 = (marisa::grimoire::vector::_anonymous_namespace_ *)((char *)v13 + v18 - 448);
      }
      else
      {
        v14 |= 6uLL;
        v13 = (marisa::grimoire::vector::_anonymous_namespace_ *)((char *)v13 + v16 - 384);
      }
    }
    else if ((unint64_t)v13 >= 320 - (v15 & 0x1FF))
    {
      v14 |= 5uLL;
      v13 = (marisa::grimoire::vector::_anonymous_namespace_ *)((char *)v13 + (v15 & 0x1FF) - 320);
    }
    else
    {
      v14 |= 4uLL;
      v13 = (marisa::grimoire::vector::_anonymous_namespace_ *)((char *)v13 + (v12 >> 23) - 256);
    }
  }
  else if ((unint64_t)v13 >= 128 - (unint64_t)(v12 >> 7))
  {
    v17 = (v12 >> 15);
    if ((unint64_t)v13 >= 192 - v17)
    {
      v14 |= 3uLL;
      v13 = (marisa::grimoire::vector::_anonymous_namespace_ *)((char *)v13 + v17 - 192);
    }
    else
    {
      v14 |= 2uLL;
      v13 = (marisa::grimoire::vector::_anonymous_namespace_ *)((char *)v13 + (v12 >> 7) - 128);
    }
  }
  else if ((unint64_t)v13 >= 64 - (v12 & 0x7F))
  {
    v14 |= 1uLL;
    v13 = (marisa::grimoire::vector::_anonymous_namespace_ *)((char *)v13 + (v12 & 0x7F) - 64);
  }
}

unint64_t marisa::grimoire::vector::`anonymous namespace'::select_bit(marisa::grimoire::vector::_anonymous_namespace_ *this, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = (((a3 - ((a3 >> 1) & 0x5555555555555555)) >> 2) & 0x3333333333333333)
     + ((a3 - ((a3 >> 1) & 0x5555555555555555)) & 0x3333333333333333);
  v4 = (v3 + (v3 >> 4)) & 0xF0F0F0F0F0F0F0FLL;
  v5 = __clz(__rbit64(((((0x101010101010101 * v4) | 0x8080808080808080)
                      - 0x101010101010101 * (_QWORD)this
                      - 0x101010101010101) >> 7) & 0x101010101010101));
  return v5
       + a2
                                                                     * ((_QWORD)this
                                                                      - ((unint64_t)(0x101010101010100 * v4) >> v5))
                                                                     + (a3 >> v5)];
}

unint64_t marisa::grimoire::vector::BitVector::select1(marisa::grimoire::vector::BitVector *this, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  marisa::grimoire::vector::_anonymous_namespace_ *v16;
  uint64_t v17;
  unint64_t v18;
  marisa::grimoire::vector::_anonymous_namespace_ *v19;
  BOOL v20;
  marisa::grimoire::vector::_anonymous_namespace_ *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  marisa::grimoire::vector::_anonymous_namespace_ *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  marisa::grimoire::vector::_anonymous_namespace_ *v33;
  BOOL v34;

  v2 = *((_QWORD *)this + 22);
  if ((a2 & 0x1FF) == 0)
    return *(unsigned int *)(v2 + 4 * (a2 >> 9));
  v3 = *(_DWORD *)(v2 + 4 * (a2 >> 9)) >> 9;
  v4 = (*(_DWORD *)(v2 + 4 * (a2 >> 9) + 4) + 511) >> 9;
  v5 = *((_QWORD *)this + 10);
  if (v3 + 10 >= v4)
  {
    v7 = v5 + 12 * v3--;
    v8 = (unsigned int *)(v7 + 12);
    do
    {
      v9 = *v8;
      v8 += 3;
      ++v3;
    }
    while (v9 <= a2);
  }
  else
  {
    do
    {
      if (*(unsigned int *)(v5 + 12 * ((v4 + v3) >> 1)) > a2)
        v4 = (v4 + v3) >> 1;
      else
        v3 = (v4 + v3) >> 1;
    }
    while (v3 + 1 < v4);
  }
  v10 = (unsigned int *)(v5 + 12 * v3);
  v11 = v10[1];
  v12 = a2 - *v10;
  v13 = 8 * v3;
  if (v12 >= v11 >> 23)
  {
    v23 = v11 >> 23;
    v24 = *(unsigned int *)(v5 + 12 * v3 + 8);
    v25 = (v24 >> 9) & 0x1FF;
    v26 = (v24 >> 18) & 0x1FF;
    v27 = v13 | 7;
    v28 = v12 >= v26;
    if (v12 < v26)
      v29 = (marisa::grimoire::vector::_anonymous_namespace_ *)(v12 - v25);
    else
      v29 = (marisa::grimoire::vector::_anonymous_namespace_ *)(v12 - v26);
    if (!v28)
      v27 = v13 | 6;
    v30 = v24 & 0x1FF;
    v31 = v13 | 5;
    v32 = v13 | 4;
    v33 = (marisa::grimoire::vector::_anonymous_namespace_ *)(v12 - v23);
    v34 = v12 >= v30;
    if (v12 < v30)
      v21 = v33;
    else
      v21 = (marisa::grimoire::vector::_anonymous_namespace_ *)(v12 - v30);
    if (v34)
      v32 = v31;
    if (v12 < v25)
    {
      v22 = v32;
    }
    else
    {
      v21 = v29;
      v22 = v27;
    }
  }
  else
  {
    v14 = v11 >> 7;
    v15 = (v11 >> 15);
    v16 = (marisa::grimoire::vector::_anonymous_namespace_ *)(v12 - (v11 >> 7));
    if (v12 < v15)
    {
      v17 = v13 | 2;
    }
    else
    {
      v16 = (marisa::grimoire::vector::_anonymous_namespace_ *)(v12 - v15);
      v17 = v13 | 3;
    }
    v18 = v11 & 0x7F;
    v20 = v12 >= v18;
    v19 = (marisa::grimoire::vector::_anonymous_namespace_ *)(v12 - v18);
    if (v20)
      v13 |= 1uLL;
    else
      v19 = (marisa::grimoire::vector::_anonymous_namespace_ *)v12;
    v20 = v12 >= v14;
    if (v12 < v14)
      v21 = v19;
    else
      v21 = v16;
    if (v20)
      v22 = v17;
    else
      v22 = v13;
  }
}

void marisa::grimoire::vector::BitVector::build_index(marisa::grimoire::vector::BitVector *this, const marisa::grimoire::vector::BitVector *a2, int a3, int a4)
{
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  __int16 v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  unsigned int v19;
  _DWORD *v20;
  unsigned int v21;
  _DWORD *v22;
  unsigned int v23;
  _DWORD *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t *v28;
  _DWORD *v29;
  _DWORD *v30;
  int v31;

  v8 = (uint64_t *)((char *)this + 64);
  v9 = *((_QWORD *)a2 + 6);
  if ((v9 & 0x1FF) != 0)
    v10 = (v9 >> 9) + 1;
  else
    v10 = v9 >> 9;
  marisa::grimoire::vector::Vector<marisa::grimoire::vector::RankIndex>::resize(v8, v10 + 1);
  v11 = *((_QWORD *)a2 + 6);
  if (v11)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    do
    {
      if ((v12 & 0x3F) == 0)
        __asm { BR              X12 }
      if (((*(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * (v12 >> 6)) >> (v12 & 0x3F)) & 1) != 0)
      {
        if (a4 && (v13 & 0x1FF) == 0)
        {
          v31 = v12;
          marisa::grimoire::vector::Vector<unsigned int>::push_back((uint64_t *)this + 20, &v31);
        }
        ++v13;
      }
      else
      {
        if (a3 && (v14 & 0x1FF) == 0)
        {
          v31 = v12;
          marisa::grimoire::vector::Vector<unsigned int>::push_back((uint64_t *)this + 14, &v31);
        }
        ++v14;
      }
      ++v12;
      v11 = *((_QWORD *)a2 + 6);
    }
    while (v12 < v11);
    if ((v11 & 0x1FF) != 0)
    {
      v15 = (v11 - 1) >> 9;
      switch(((unint64_t)(v11 - 1) >> 6) & 7)
      {
        case 0uLL:
          v16 = *((_QWORD *)this + 9);
          v17 = (_DWORD *)(v16 + 12 * v15);
          v18 = v13 - *v17;
          v19 = v17[1] & 0xFFFFFF80 | v18 & 0x7F;
          v17[1] = v19;
          goto LABEL_23;
        case 1uLL:
          v16 = *((_QWORD *)this + 9);
          v20 = (_DWORD *)(v16 + 12 * v15);
          v19 = v20[1];
          v18 = v13 - *v20;
LABEL_23:
          v21 = v19 & 0xFFFF807F | (v18 << 7);
          *(_DWORD *)(v16 + 12 * v15 + 4) = v21;
          goto LABEL_25;
        case 2uLL:
          v16 = *((_QWORD *)this + 9);
          v22 = (_DWORD *)(v16 + 12 * v15);
          v21 = v22[1];
          v18 = v13 - *v22;
LABEL_25:
          v23 = v21 & 0xFF807FFF | (v18 << 15);
          *(_DWORD *)(v16 + 12 * v15 + 4) = v23;
          goto LABEL_27;
        case 3uLL:
          v16 = *((_QWORD *)this + 9);
          v24 = (_DWORD *)(v16 + 12 * v15);
          v23 = v24[1];
          v18 = v13 - *v24;
LABEL_27:
          *(_DWORD *)(v16 + 12 * v15 + 4) = v23 & 0x7FFFFF | ((unsigned __int16)v18 << 23);
          goto LABEL_29;
        case 4uLL:
          v16 = *((_QWORD *)this + 9);
          v18 = v13 - *(_DWORD *)(v16 + 12 * v15);
LABEL_29:
          v25 = v16 + 12 * v15;
          v26 = *(_DWORD *)(v25 + 8) & 0xFFFFFE00 | v18 & 0x1FF;
          *(_DWORD *)(v25 + 8) = v26;
          goto LABEL_30;
        case 5uLL:
          v16 = *((_QWORD *)this + 9);
          v29 = (_DWORD *)(v16 + 12 * v15);
          v26 = v29[2];
          v18 = v13 - *v29;
LABEL_30:
          v27 = v26 & 0xFFFC01FF | ((v18 & 0x1FF) << 9);
          *(_DWORD *)(v16 + 12 * v15 + 8) = v27;
          goto LABEL_31;
        case 6uLL:
          v16 = *((_QWORD *)this + 9);
          v30 = (_DWORD *)(v16 + 12 * v15);
          v27 = v30[2];
          v18 = v13 - *v30;
LABEL_31:
          *(_DWORD *)(v16 + 12 * v15 + 8) = v27 & 0xF803FFFF | ((v18 & 0x1FF) << 18);
          break;
        default:
          break;
      }
    }
  }
  else
  {
    v13 = 0;
  }
  *((_QWORD *)this + 6) = v11;
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *(_DWORD *)(*((_QWORD *)this + 9) + 12 * *((_QWORD *)this + 11) - 12) = v13;
  if (a3)
  {
    v31 = *((_QWORD *)a2 + 6);
    marisa::grimoire::vector::Vector<unsigned int>::push_back((uint64_t *)this + 14, &v31);
    marisa::grimoire::vector::Vector<unsigned int>::shrink((_DWORD *)this + 28);
  }
  if (a4)
  {
    v28 = (uint64_t *)((char *)this + 160);
    v31 = *((_QWORD *)a2 + 6);
    marisa::grimoire::vector::Vector<unsigned int>::push_back(v28, &v31);
    marisa::grimoire::vector::Vector<unsigned int>::shrink(v28);
  }
}

uint64_t *marisa::grimoire::vector::Vector<unsigned int>::push_back(uint64_t *result, _DWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = result;
  v4 = result[3];
  v5 = result[4];
  v6 = v4 + 1;
  if (v5 < v4 + 1)
  {
    v7 = 2 * v5;
    if (v5 >> 61)
      v7 = 0x3FFFFFFFFFFFFFFFLL;
    if (v5 <= v6 >> 1)
      v8 = v6;
    else
      v8 = v7;
    result = (uint64_t *)marisa::grimoire::vector::Vector<unsigned int>::realloc(result, v8);
    v4 = v3[3];
    v6 = v4 + 1;
  }
  *(_DWORD *)(v3[1] + 4 * v4) = *a2;
  v3[3] = v6;
  return result;
}

_DWORD *marisa::grimoire::vector::Vector<unsigned int>::shrink(_DWORD *result)
{
  uint64_t v1;
  _QWORD *exception;

  if (*((_BYTE *)result + 40))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0x100000064;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/grimoire/vector/vector.h:100: MARISA_STATE_ERROR: fixed_";
  }
  v1 = *((_QWORD *)result + 3);
  if (v1 != *((_QWORD *)result + 4))
    return marisa::grimoire::vector::Vector<unsigned int>::realloc((uint64_t *)result, v1);
  return result;
}

double marisa::Keyset::Keyset(marisa::Keyset *this)
{
  double result;

  *((_QWORD *)this + 12) = 0;
  result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

size_t marisa::Keyset::reserve(size_t *this, size_t __sz)
{
  size_t result;
  size_t v5;

  if (this[7] == this[11] >> 8)
    marisa::Keyset::append_key_block((marisa::Keyset *)this);
  if (__sz < 0x401)
  {
    v5 = this[10];
    if (v5 < __sz)
    {
      marisa::Keyset::append_base_block((uint64_t *)this);
      v5 = this[10];
    }
    result = this[9];
    this[9] = result + __sz;
    this[10] = v5 - __sz;
  }
  else
  {
    marisa::Keyset::append_extra_block((marisa::Keyset *)this, __sz);
    return *(_QWORD *)(this[3] + 8 * this[4] - 8);
  }
  return result;
}

uint64_t marisa::Keyset::append_key_block(marisa::Keyset *this)
{
  uint64_t v2;
  unint64_t v3;
  _BOOL4 v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  _QWORD *v18;
  _QWORD *exception;
  uint64_t v20;

  v2 = *((_QWORD *)this + 7);
  if (v2 == *((_QWORD *)this + 8))
  {
    if (v2)
      v3 = 2 * v2;
    else
      v3 = 1;
    v4 = v3 >> 61 != 0;
    if (8 * v3 >= 0xFFFFFFFFFFFFFFF0)
      v4 = 1;
    if (v4)
      v5 = -1;
    else
      v5 = 8 * v3 + 16;
    v6 = operator new[](v5, MEMORY[0x24BEDB6B8]);
    if (!v6)
    {
      v20 = 0;
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_24C09C668;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
      exception[2] = 0x8000000A9;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:169: MARISA_MEMORY_ERROR: new_blo"
                     "cks.get() == NULL";
    }
    *v6 = 8;
    v6[1] = v3;
    v7 = (uint64_t)(v6 + 2);
    if (v3)
      bzero(v6 + 2, 8 * v3);
    v20 = v7;
    if (v2)
    {
      for (i = 0; i != v2; ++i)
      {
        v9 = *((_QWORD *)this + 6);
        v10 = v20;
        v11 = *(_QWORD *)(v9 + 8 * i);
        *(_QWORD *)(v9 + 8 * i) = *(_QWORD *)(v20 + 8 * i);
        *(_QWORD *)(v10 + 8 * i) = v11;
      }
      v7 = v20;
    }
    v12 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v7;
    v20 = v12;
    *((_QWORD *)this + 8) = v3;
    marisa::scoped_array<marisa::scoped_array<marisa::Key>>::~scoped_array(&v20);
  }
  v13 = operator new[](0x1000uLL, MEMORY[0x24BEDB6B8]);
  if (!v13)
  {
    v18 = __cxa_allocate_exception(0x20uLL);
    *v18 = &off_24C09C668;
    v18[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
    v18[2] = 0x8000000B1;
    v18[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:177: MARISA_MEMORY_ERROR: new_block.get() == NULL";
  }
  v14 = v13;
  bzero(v13, 0x1000uLL);
  v16 = *((_QWORD *)this + 6);
  v15 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v15 + 1;
  result = *(_QWORD *)(v16 + 8 * v15);
  *(_QWORD *)(v16 + 8 * v15) = v14;
  if (result)
    return MEMORY[0x20BD06378](result, 0x1050C80717B85FCLL);
  return result;
}

void sub_2083A44A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  marisa::scoped_array<marisa::scoped_array<marisa::Key>>::~scoped_array((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t marisa::Keyset::push_back(size_t *this, const char *a2, size_t __sz, float a4)
{
  const char *v6;
  size_t result;
  _BYTE *v9;
  size_t v10;
  char v11;
  uint64_t v12;
  size_t v13;
  _QWORD *exception;
  const char *v15;

  v6 = a2;
  if (!a2 && __sz)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
    exception[2] = 0x20000003DLL;
    v15 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:61: MARISA_NULL_ERROR: (ptr == NULL) && (length != 0)";
    goto LABEL_10;
  }
  if (HIDWORD(__sz))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
    exception[2] = 0x70000003ELL;
    v15 = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:62: MARISA_SIZE_ERROR: length > MARISA_UINT32_MAX";
LABEL_10:
    exception[3] = v15;
  }
  result = marisa::Keyset::reserve(this, __sz);
  if (__sz)
  {
    v9 = (_BYTE *)result;
    v10 = __sz;
    do
    {
      v11 = *v6++;
      *v9++ = v11;
      --v10;
    }
    while (v10);
  }
  v12 = *(_QWORD *)(this[6] + ((this[11] >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * this[11];
  *(_QWORD *)v12 = result;
  *(_DWORD *)(v12 + 8) = __sz;
  *(float *)(v12 + 12) = a4;
  v13 = this[12] + __sz;
  ++this[11];
  this[12] = v13;
  return result;
}

void *marisa::Keyset::append_extra_block(marisa::Keyset *this, size_t __sz)
{
  uint64_t v4;
  unint64_t v5;
  _BOOL4 v6;
  size_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *exception;
  uint64_t v21;

  v4 = *((_QWORD *)this + 4);
  if (v4 == *((_QWORD *)this + 5))
  {
    if (v4)
      v5 = 2 * v4;
    else
      v5 = 1;
    v6 = v5 >> 61 != 0;
    if (8 * v5 >= 0xFFFFFFFFFFFFFFF0)
      v6 = 1;
    if (v6)
      v7 = -1;
    else
      v7 = 8 * v5 + 16;
    v8 = operator new[](v7, MEMORY[0x24BEDB6B8]);
    if (!v8)
    {
      v21 = 0;
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_24C09C668;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
      exception[2] = 0x800000097;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:151: MARISA_MEMORY_ERROR: new_blo"
                     "cks.get() == NULL";
    }
    *v8 = 8;
    v8[1] = v5;
    v9 = (uint64_t)(v8 + 2);
    if (v5)
      bzero(v8 + 2, 8 * v5);
    v21 = v9;
    if (v4)
    {
      for (i = 0; i != v4; ++i)
      {
        v11 = *((_QWORD *)this + 3);
        v12 = v21;
        v13 = *(_QWORD *)(v11 + 8 * i);
        *(_QWORD *)(v11 + 8 * i) = *(_QWORD *)(v21 + 8 * i);
        *(_QWORD *)(v12 + 8 * i) = v13;
      }
      v9 = v21;
    }
    v14 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v9;
    v21 = v14;
    *((_QWORD *)this + 5) = v5;
    marisa::scoped_array<marisa::scoped_array<char>>::~scoped_array(&v21);
  }
  result = operator new[](__sz, MEMORY[0x24BEDB6B8]);
  if (!result)
  {
    v19 = __cxa_allocate_exception(0x20uLL);
    *v19 = &off_24C09C668;
    v19[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
    v19[2] = 0x80000009FLL;
    v19[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:159: MARISA_MEMORY_ERROR: new_block.get() == NULL";
  }
  v17 = *((_QWORD *)this + 3);
  v16 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v16 + 1;
  v18 = *(_QWORD *)(v17 + 8 * v16);
  *(_QWORD *)(v17 + 8 * v16) = result;
  if (v18)
    return (void *)MEMORY[0x20BD06378](v18, 0x1000C8077774924);
  return result;
}

void sub_2083A479C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  marisa::scoped_array<marisa::scoped_array<char>>::~scoped_array((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *marisa::Keyset::append_base_block(uint64_t *this)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  _BOOL4 v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *exception;
  _QWORD *v15;
  uint64_t v16;

  v1 = this;
  v2 = this[1];
  if (v2 == this[2])
  {
    if (v2)
      v3 = 2 * v2;
    else
      v3 = 1;
    v4 = v3 >> 61 != 0;
    if (8 * v3 >= 0xFFFFFFFFFFFFFFF0)
      v4 = 1;
    if (v4)
      v5 = -1;
    else
      v5 = 8 * v3 + 16;
    v6 = operator new[](v5, MEMORY[0x24BEDB6B8]);
    if (!v6)
    {
      v16 = 0;
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_24C09C668;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
      exception[2] = 0x800000081;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:129: MARISA_MEMORY_ERROR: new_blo"
                     "cks.get() == NULL";
    }
    *v6 = 8;
    v6[1] = v3;
    v7 = (uint64_t)(v6 + 2);
    if (v3)
      bzero(v6 + 2, 8 * v3);
    v16 = v7;
    if (v2)
    {
      for (i = 0; i != v2; ++i)
      {
        v9 = v16;
        v10 = *(_QWORD *)(*v1 + 8 * i);
        *(_QWORD *)(*v1 + 8 * i) = *(_QWORD *)(v16 + 8 * i);
        *(_QWORD *)(v9 + 8 * i) = v10;
      }
      v7 = v16;
    }
    v11 = *v1;
    *v1 = v7;
    v16 = v11;
    v1[2] = v3;
    this = marisa::scoped_array<marisa::scoped_array<char>>::~scoped_array(&v16);
    v2 = v1[1];
  }
  v12 = *v1;
  v13 = *(_QWORD *)(*v1 + 8 * v2);
  if (!v13)
  {
    this = (uint64_t *)operator new[](0x1000uLL, MEMORY[0x24BEDB6B8]);
    if (!this)
    {
      v15 = __cxa_allocate_exception(0x20uLL);
      *v15 = &off_24C09C668;
      v15[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc";
      v15[2] = 0x80000008ALL;
      v15[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/keyset.cc:138: MARISA_MEMORY_ERROR: new_block.get() == NULL";
    }
    *(_QWORD *)(v12 + 8 * v2) = this;
    v13 = *(_QWORD *)(*v1 + 8 * v2);
  }
  v1[1] = v2 + 1;
  v1[9] = v13;
  v1[10] = 4096;
  return this;
}

void sub_2083A496C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  marisa::scoped_array<marisa::scoped_array<char>>::~scoped_array((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *marisa::scoped_array<marisa::scoped_array<char>>::~scoped_array(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  if (*a1)
  {
    v5 = *(_QWORD *)(v2 - 8);
    v4 = v2 - 8;
    v3 = v5;
    if (v5)
    {
      v6 = 8 * v3;
      do
      {
        v7 = *(_QWORD *)(v4 + v6);
        if (v7)
          MEMORY[0x20BD06378](v7, 0x1000C8077774924);
        v6 -= 8;
      }
      while (v6);
    }
    MEMORY[0x20BD06378](v4 - 8, 0x10C80436913F5);
  }
  return a1;
}

uint64_t *marisa::scoped_array<marisa::scoped_array<marisa::Key>>::~scoped_array(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  if (*a1)
  {
    v5 = *(_QWORD *)(v2 - 8);
    v4 = v2 - 8;
    v3 = v5;
    if (v5)
    {
      v6 = 8 * v3;
      do
      {
        v7 = *(_QWORD *)(v4 + v6);
        if (v7)
          MEMORY[0x20BD06378](v7, 0x1050C80717B85FCLL);
        v6 -= 8;
      }
      while (v6);
    }
    MEMORY[0x20BD06378](v4 - 8, 0x20C8093837F09);
  }
  return a1;
}

_QWORD *marisa::Trie::Trie(_QWORD *this)
{
  *this = 0;
  return this;
}

marisa::grimoire::trie::LoudsTrie **marisa::Trie::build(marisa::grimoire::trie::LoudsTrie **this, marisa::Keyset *a2, unsigned int a3)
{
  marisa::grimoire::trie::LoudsTrie *v6;
  marisa::grimoire::trie::LoudsTrie *v7;
  marisa::grimoire::trie::LoudsTrie *v8;
  _QWORD *exception;
  marisa::grimoire::trie::LoudsTrie *v11;

  v6 = (marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x24BEDB6B8]);
  if (!v6)
  {
    v11 = 0;
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    exception[2] = 0x80000000ELL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:14: MARISA_MEMORY_ERROR: temp.get() == NULL";
  }
  v7 = v6;
  marisa::grimoire::trie::LoudsTrie::LoudsTrie(v6);
  v11 = v7;
  marisa::grimoire::trie::LoudsTrie::build(v7, a2, a3);
  v8 = *this;
  *this = v7;
  v11 = v8;
  return marisa::scoped_ptr<marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(&v11);
}

void sub_2083A4B50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD06390](v1, MEMORY[0x24BEDB6B8]);
  _Unwind_Resume(a1);
}

marisa::grimoire::trie::LoudsTrie **marisa::Trie::map(marisa::grimoire::trie::LoudsTrie **this, const void *a2, uint64_t a3)
{
  marisa::grimoire::trie::LoudsTrie *v6;
  marisa::grimoire::trie::LoudsTrie *v7;
  marisa::grimoire::trie::LoudsTrie *v8;
  _QWORD *exception;
  _QWORD *v11;
  _BYTE v12[40];
  marisa::grimoire::trie::LoudsTrie *v13;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    exception[2] = 0x200000021;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:33: MARISA_NULL_ERROR: (ptr == NULL) && (size != 0)";
  }
  v6 = (marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x24BEDB6B8]);
  if (!v6)
  {
    v13 = 0;
    v11 = __cxa_allocate_exception(0x20uLL);
    *v11 = &off_24C09C668;
    v11[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    v11[2] = 0x800000024;
    v11[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:36: MARISA_MEMORY_ERROR: temp.get() == NULL";
  }
  v7 = v6;
  marisa::grimoire::trie::LoudsTrie::LoudsTrie(v6);
  v13 = v7;
  marisa::grimoire::io::Mapper::Mapper((uint64_t)v12);
  marisa::grimoire::io::Mapper::open((marisa::grimoire::io::Mapper *)v12, a2, a3);
  marisa::grimoire::trie::LoudsTrie::map(v13, (marisa::grimoire::io::Mapper *)v12);
  v8 = *this;
  *this = v13;
  v13 = v8;
  marisa::grimoire::io::Mapper::~Mapper((marisa::grimoire::io::Mapper *)v12);
  return marisa::scoped_ptr<marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(&v13);
}

void sub_2083A4CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  marisa::scoped_ptr<marisa::grimoire::trie::LoudsTrie>::~scoped_ptr((marisa::grimoire::trie::LoudsTrie **)va);
  _Unwind_Resume(a1);
}

marisa::grimoire::trie::LoudsTrie *marisa::Trie::lookup(marisa::grimoire::trie::LoudsTrie **this, marisa::Agent *a2)
{
  marisa::grimoire::trie::LoudsTrie *result;

  result = *this;
  if (result)
  {
    if (!*((_QWORD *)a2 + 5))
    {
      marisa::Agent::init_state(a2);
      result = *this;
    }
    return (marisa::grimoire::trie::LoudsTrie *)marisa::grimoire::trie::LoudsTrie::lookup(result, a2);
  }
  return result;
}

marisa::grimoire::trie::LoudsTrie *marisa::Trie::reverse_lookup(marisa::grimoire::trie::LoudsTrie **this, marisa::Agent *a2)
{
  marisa::grimoire::trie::LoudsTrie *result;

  result = *this;
  if (result)
  {
    if (!*((_QWORD *)a2 + 5))
    {
      marisa::Agent::init_state(a2);
      result = *this;
    }
    return (marisa::grimoire::trie::LoudsTrie *)marisa::grimoire::trie::LoudsTrie::reverse_lookup(result, a2);
  }
  return result;
}

uint64_t marisa::TrieIO::write(uint64_t a1, marisa::grimoire::trie::LoudsTrie ***a2)
{
  _QWORD *exception;
  FILE *v6[4];

  if (!*a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_24C09C668;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc";
    exception[2] = 0x1000000D5;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/Marisa/lib/marisa/trie.cc:213: MARISA_STATE_ERROR: trie.trie_.get() == NULL";
  }
  marisa::grimoire::io::Writer::Writer((uint64_t)v6);
  marisa::grimoire::io::Writer::open((uint64_t)v6, a1);
  marisa::grimoire::trie::LoudsTrie::write(*a2, (marisa::grimoire::io::Writer *)v6);
  marisa::grimoire::io::Writer::~Writer(v6);
  return a1;
}

void sub_2083A4E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, FILE *a9)
{
  marisa::grimoire::io::Writer::~Writer(&a9);
  _Unwind_Resume(a1);
}

void MeCab::ContextID::add(uint64_t **this, char *a2, char *a3)
{
  void *v5[2];
  uint64_t v6;
  void *__p[2];
  uint64_t v8;
  int v9;

  std::string::basic_string[abi:ne180100]<0>(v5, a2);
  *(_OWORD *)__p = *(_OWORD *)v5;
  v8 = v6;
  v5[1] = 0;
  v6 = 0;
  v5[0] = 0;
  v9 = 1;
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string,int>>(this, __p, (uint64_t)__p);
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v6) < 0)
    operator delete(v5[0]);
  std::string::basic_string[abi:ne180100]<0>(v5, a3);
  *(_OWORD *)__p = *(_OWORD *)v5;
  v8 = v6;
  v5[1] = 0;
  v6 = 0;
  v5[0] = 0;
  v9 = 1;
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string,int>>(this + 3, __p, (uint64_t)__p);
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v6) < 0)
    operator delete(v5[0]);
}

void sub_2083A4F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t save(const char *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  std::locale::id *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  std::locale v26;
  uint64_t v27;
  _BYTE v28[408];
  _QWORD v29[20];

  v29[19] = *MEMORY[0x24BDAC8D0];
  std::ofstream::basic_ofstream(&v27);
  if ((v28[*(_QWORD *)(v27 - 24) + 24] & 5) != 0)
  {
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/context_id.cpp", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"(", 1);
    v5 = (_QWORD *)std::ostream::operator<<();
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") [", 3);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ofs", 3);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"] ", 2);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"permission denied: ", 19);
    v10 = strlen(a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)a1, v10);
    MeCab::die::~die((MeCab::die *)&v26);
  }
  v13 = (_QWORD *)*a2;
  v11 = a2 + 1;
  v12 = v13;
  if (v13 != v11)
  {
    v14 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v15 = (_QWORD *)std::ostream::operator<<();
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" ", 1);
      v17 = *((char *)v12 + 55);
      if (v17 >= 0)
        v18 = (uint64_t)(v12 + 4);
      else
        v18 = v12[4];
      if (v17 >= 0)
        v19 = *((unsigned __int8 *)v12 + 55);
      else
        v19 = v12[5];
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
      std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
      v21 = std::locale::use_facet(&v26, v14);
      ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
      std::locale::~locale(&v26);
      std::ostream::put();
      std::ostream::flush();
      v22 = (_QWORD *)v12[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v12[2];
          v24 = *v23 == (_QWORD)v12;
          v12 = v23;
        }
        while (!v24);
      }
      v12 = v23;
    }
    while (v23 != v11);
  }
  v27 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)&v28[*(_QWORD *)(v27 - 24) - 8] = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x20BD061F8](v28);
  std::ostream::~ostream();
  return MEMORY[0x20BD06354](v29);
}

void sub_2083A51A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, char a11)
{
  _Unwind_Resume(exception_object);
}

uint64_t open(const char *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  size_t v12;
  std::locale::id *v13;
  const std::locale::facet *v14;
  unsigned __int8 v15;
  _QWORD *v16;
  std::locale::__imp *v17;
  unint64_t v18;
  std::locale::__imp *v19;
  std::locale::__imp *v20;
  uint64_t i;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  std::string *v28;
  std::string::size_type size;
  int v30;
  void *__p[2];
  uint64_t v33;
  std::locale v34[2];
  uint64_t v35;
  int v36;
  std::string v37;
  void *v38;
  void *v39;
  uint64_t v40;
  _QWORD v41[2];
  _BYTE v42[408];
  _QWORD v43[21];

  v43[19] = *MEMORY[0x24BDAC8D0];
  std::ifstream::basic_ifstream(v41);
  if ((v42[*(_QWORD *)(v41[0] - 24) + 16] & 5) != 0)
  {
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/context_id.cpp", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") [", 3);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"ifs", 3);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"] ", 2);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"no such file or directory: ", 27);
    v12 = strlen(a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)a1, v12);
    MeCab::die::~die((MeCab::die *)v34);
  }
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(a2, *(char **)(a2 + 8));
  *(_QWORD *)a2 = a2 + 8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  memset(&v37, 0, sizeof(v37));
  v13 = (std::locale::id *)MEMORY[0x24BEDB350];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(_QWORD *)(v41[0] - 24)));
    v14 = std::locale::use_facet(v34, v13);
    v15 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale(v34);
    v16 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v41, (uint64_t)&v37, v15);
    if ((*((_BYTE *)v16 + *(_QWORD *)(*v16 - 24) + 32) & 5) != 0)
      break;
    v39 = v38;
    if (a3)
      MeCab::Iconv::convert(a3, &v37);
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = (std::locale::__imp *)&v37;
    else
      v17 = (std::locale::__imp *)v37.__r_.__value_.__r.__words[0];
    v34[0].__locale_ = v17;
    v18 = 0;
    v19 = (std::locale::__imp *)((char *)v17 + strlen((const char *)v17));
    do
    {
      v20 = v19;
      if (v17 != v19)
      {
        while (2)
        {
          for (i = 0; i != 2; ++i)
          {
            if (*(unsigned __int8 *)v17 == asc_2083DFEE5[i])
            {
              v20 = v17;
              goto LABEL_18;
            }
          }
          v17 = (std::locale::__imp *)((char *)v17 + 1);
          if (v17 != v19)
            continue;
          break;
        }
        v20 = v19;
      }
LABEL_18:
      *(_BYTE *)v20 = 0;
      if (*(_BYTE *)v34[0].__locale_)
      {
        __p[0] = &v38;
        std::back_insert_iterator<std::vector<char *>>::operator=[abi:ne180100]((void ***)__p, v34);
        ++v18;
      }
      if (v20 == v19)
        break;
      v17 = (std::locale::__imp *)((char *)v20 + 1);
      v34[0].__locale_ = (std::locale::__imp *)((char *)v20 + 1);
    }
    while (v18 < 2);
    if (v18 != 2)
    {
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/context_id.cpp", 64);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"(", 1);
      v23 = (_QWORD *)std::ostream::operator<<();
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)") [", 3);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"2 == tokenize2(const_cast<char *>(line.c_str()), \" \\t\", std::back_inserter(col), 2)", 83);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"] ", 2);
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"format error: ", 14);
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = &v37;
      else
        v28 = (std::string *)v37.__r_.__value_.__r.__words[0];
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      else
        size = v37.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, size);
      MeCab::die::~die((MeCab::die *)v34);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, *((char **)v38 + 1));
    v30 = atoi(*(const char **)v38);
    *(_OWORD *)&v34[0].__locale_ = *(_OWORD *)__p;
    v35 = v33;
    __p[0] = 0;
    __p[1] = 0;
    v33 = 0;
    v36 = v30;
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string,int>>((uint64_t **)a2, (void **)&v34[0].__locale_, (uint64_t)v34);
    if (SHIBYTE(v35) < 0)
      operator delete(v34[0].__locale_);
    if (SHIBYTE(v33) < 0)
      operator delete(__p[0]);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  v41[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v41 + *(_QWORD *)(v41[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x20BD061F8](v42);
  std::istream::~istream();
  return MEMORY[0x20BD06354](v43);
}

void sub_2083A55EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,char a32)
{
  _Unwind_Resume(exception_object);
}

void build(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  int v4;
  uint64_t *v5;
  uint64_t **v6;
  BOOL v7;
  std::string __p;
  int v9;

  v3 = *a1;
  if (*a1 != (uint64_t *)(a1 + 1))
  {
    v4 = 1;
    do
    {
      *((_DWORD *)v3 + 14) = v4;
      v5 = (uint64_t *)v3[1];
      if (v5)
      {
        do
        {
          v6 = (uint64_t **)v5;
          v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (uint64_t **)v3[2];
          v7 = *v6 == v3;
          v3 = (uint64_t *)v6;
        }
        while (!v7);
      }
      ++v4;
      v3 = (uint64_t *)v6;
    }
    while (v6 != a1 + 1);
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v9 = 0;
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string,int>>(a1, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2083A5750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::ContextID::lid(MeCab::ContextID *this, char *a2)
{
  unsigned int *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  size_t v11;
  void *__p[2];
  char v14;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v4 = (unsigned int *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>((uint64_t)this, __p);
  if (v14 < 0)
    operator delete(__p[0]);
  if ((unsigned int *)((char *)this + 8) == v4)
  {
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/context_id.cpp", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(", 1);
    v6 = (_QWORD *)std::ostream::operator<<();
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)") [", 3);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"it != left_.end()", 17);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"] ", 2);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"cannot find LEFT-ID  for ", 25);
    v11 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)a2, v11);
    MeCab::die::~die((MeCab::die *)__p);
  }
  return v4[14];
}

void sub_2083A5868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::ContextID::rid(MeCab::ContextID *this, char *a2)
{
  char *v4;
  unsigned int *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  size_t v12;
  void *__p[2];
  char v15;

  v4 = (char *)this + 24;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v5 = (unsigned int *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>((uint64_t)v4, __p);
  if (v15 < 0)
    operator delete(__p[0]);
  if ((unsigned int *)((char *)this + 32) == v5)
  {
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/context_id.cpp", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") [", 3);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"it != right_.end()", 18);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"] ", 2);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"cannot find RIGHT-ID  for ", 26);
    v12 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)a2, v12);
    MeCab::die::~die((MeCab::die *)__p);
  }
  return v5[14];
}

void sub_2083A5994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24C09B9F0, MEMORY[0x24BEDAAF0]);
}

void sub_2083A5AC0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  unint64_t v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = __n;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  std::string::size_type v4;

  v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

_QWORD *std::ofstream::basic_ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB840];
  v3 = MEMORY[0x24BEDB840] + 64;
  a1[52] = MEMORY[0x24BEDB840] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x20BD061EC](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_2083A5CB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x20BD06354](v1 + 416);
  _Unwind_Resume(a1);
}

_QWORD *std::ofstream::~ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E8];
  v3 = *MEMORY[0x24BEDB7E8];
  *a1 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x20BD061F8](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x20BD06354](a1 + 52);
  return a1;
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x20BD0627C](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x20BD06288](v13);
  return a1;
}

void sub_2083A5E50(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x20BD06288](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x2083A5E30);
}

void sub_2083A5E98(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_2083A5FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

_QWORD *std::ifstream::basic_ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB838];
  v3 = MEMORY[0x24BEDB838] + 64;
  a1[53] = MEMORY[0x24BEDB838] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x20BD061EC](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_2083A6164(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x20BD06354](v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::~ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E0];
  v3 = *MEMORY[0x24BEDB7E0];
  *a1 = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x20BD061F8](a1 + 2);
  std::istream::~istream();
  MEMORY[0x20BD06354](a1 + 53);
  return a1;
}

_QWORD *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x20BD06204](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_2083A6320(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x2083A62ECLL);
  }
  __cxa_rethrow();
}

void sub_2083A6364(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void ***std::back_insert_iterator<std::vector<char *>>::operator=[abi:ne180100](void ***a1, _QWORD *a2)
{
  void **v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v4 = *a1;
  v5 = (*a1)[1];
  v6 = *a1;
  v9 = (unint64_t)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    v11 = ((char *)v5 - (_BYTE *)*v4) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<char *>::__throw_length_error[abi:ne180100]();
    v12 = v8 - (_QWORD)*v4;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>(v7, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = *a2;
    v10 = v16 + 8;
    v19 = (char *)*v4;
    v18 = (char *)v4[1];
    if (v18 != *v4)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*v4;
    }
    *v4 = v16;
    v4[1] = v10;
    v4[2] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v5 = *a2;
    v10 = v5 + 1;
  }
  v4[1] = v10;
  return a1;
}

void std::vector<char *>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void MeCab::die::~die(MeCab::die *this)
{
  const std::locale::facet *v1;
  std::locale v2;

  std::ios_base::getloc((const std::ios_base *)(MEMORY[0x24BEDB310] + *(_QWORD *)(*MEMORY[0x24BEDB310] - 24)));
  v1 = std::locale::use_facet(&v2, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v1->__vftable[2].~facet_0)(v1, 10);
  std::locale::~locale(&v2);
  std::ostream::put();
  std::ostream::flush();
  exit(-1);
}

void sub_2083A64F4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  __clang_call_terminate(a1);
}

void std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

_OWORD *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string,int>>(uint64_t **a1, void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x40uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *((_DWORD *)v6 + 14) = *(_DWORD *)(a3 + 24);
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, void **a2)
{
  size_t v2;
  size_t v3;
  int v4;
  void *v5;
  size_t v6;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (_QWORD *)*a1;
    v2 = v3;
  }
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  size_t v7;
  int v8;

  if (a4 >= a2)
    v7 = a2;
  else
    v7 = a4;
  v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0)
      return 1;
  }
  else
  {
    if (a2 == a4)
      return 0;
    if (a2 >= a4)
      return 1;
  }
  return 255;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t mecab_dict_gen(MeCab::DictionaryGenerator *a1, char **a2)
{
  char **v4;
  uint64_t v5;
  char v7;

  MEMORY[0x20BD06324](&v7);
  v5 = MeCab::DictionaryGenerator::run(a1, a2, v4);
  std::ios_base::Init::~Init((std::ios_base::Init *)&v7);
  return v5;
}

void sub_2083A6870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  std::ios_base::Init::~Init((std::ios_base::Init *)&a13);
  _Unwind_Resume(a1);
}

uint64_t MeCab::DictionaryGenerator::run(MeCab::DictionaryGenerator *this, char **a2, char **a3)
{
  int v4;
  std::string *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  std::string *p_p;
  size_t v13;
  std::string *p_str;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  std::string::size_type size;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  std::string::size_type v24;
  _BOOL4 v25;
  std::string::size_type v26;
  std::string::size_type v27;
  std::string::size_type v28;
  std::string *v29;
  int v30;
  std::string::size_type v31;
  std::string *v32;
  int data_low;
  int v34;
  BOOL v35;
  int v36;
  const char *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  std::string *v42;
  int v43;
  std::string *p_s1;
  uint64_t v45;
  std::string::size_type v46;
  std::string::size_type v47;
  char v48;
  std::string::size_type v49;
  std::string::size_type v50;
  std::string *v51;
  std::string *v52;
  char *v53;
  void **v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  const std::locale::facet *v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  std::string::size_type v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  std::string::size_type v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  char *v94;
  std::string *v95;
  std::string::size_type v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  std::string::size_type v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  std::string *v114;
  std::string::size_type v115;
  std::string *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  int v121;
  std::string::size_type v122;
  std::string *v123;
  std::string *v124;
  MeCab::ContextID *v125;
  std::string *v126;
  MeCab::ContextID *v127;
  char *i;
  MeCab::DictionaryGenerator *v129;
  _QWORD *v130;
  std::string *v131;
  size_t v132;
  _QWORD *v133;
  _QWORD *v134;
  std::string *v135;
  size_t v136;
  _QWORD *v137;
  const std::locale::facet *v138;
  std::string *v139;
  int v140;
  std::string::size_type v141;
  std::string *v142;
  std::string *v143;
  std::string *v144;
  char *j;
  __int128 v146;
  std::string::value_type *v147;
  std::string *v148;
  std::string *v149;
  std::string *v150;
  _QWORD *v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  _QWORD *v155;
  _QWORD *v156;
  size_t v157;
  _QWORD *v158;
  _QWORD *v159;
  _QWORD *v160;
  _QWORD *v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  const std::locale::facet *v170;
  uint64_t *v171;
  uint64_t v172;
  std::locale::id *v173;
  uint64_t *v174;
  uint64_t v175;
  _QWORD *v176;
  double v177;
  _QWORD *v178;
  _QWORD *v179;
  _QWORD *v180;
  const std::locale::facet *v181;
  char *v182;
  char **v183;
  char *v184;
  char **v185;
  std::string *v186;
  const char *v187;
  std::string *v188;
  std::string *v189;
  const char *v190;
  std::string *v191;
  std::string *v192;
  const char *v193;
  std::string *v194;
  std::string::size_type v195;
  std::string *v196;
  int v197;
  int v198;
  std::string *v200;
  const char *v201;
  std::string *v202;
  int v204;
  int v205;
  void *v206[2];
  char v207;
  std::string v208;
  char *v209;
  char *v210;
  uint64_t v211;
  std::string v212;
  std::string v213;
  std::string v214[15];
  std::string::value_type *__s;
  int v216;
  std::string v217;
  std::string v218;
  std::string v219;
  std::string __s1;
  char v221[48];
  __int128 v222;
  uint64_t v223;
  _QWORD **v224;
  _QWORD *v225[3];
  void *v226[2];
  unsigned __int8 v227;
  uint64_t v228;
  _BYTE v229[89];
  _BYTE v230[84];
  int v231;
  char **v232;
  char *v233;
  uint64_t v234;
  char **v235;
  char *v236;
  unint64_t v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  void *v241[16];
  uint64_t v242;
  std::string v243;
  void **v244;
  char v245;
  std::string __p;
  void **v247;
  char v248;
  void *v249[2];
  std::string *v250;
  std::locale v251;
  std::string __str;
  _QWORD v253[22];

  v4 = (int)this;
  v253[19] = *MEMORY[0x24BDAC8D0];
  MeCab::Param::Param((MeCab::Param *)v241);
  if ((MeCab::Param::open((uint64_t)v241, v4, a2, (uint64_t)&MeCab::DictionaryGenerator::run(int,char **)::long_options) & 1) != 0)
  {
    if (!MeCab::Param::help_version((MeCab::Param *)v241))
    {
LABEL_335:
      v61 = 0;
      goto LABEL_336;
    }
    v233 = 0;
    v232 = &v233;
    v237 = 0;
    v236 = 0;
    v234 = 0;
    v235 = &v236;
    v238 = 0u;
    v239 = 0u;
    v240 = 0u;
    MeCab::FeatureIndex::FeatureIndex((MeCab::FeatureIndex *)v226);
    v226[0] = &off_24C09C3D0;
    MeCab::Mmap<char>::Mmap((uint64_t)v229);
    v230[80] = 0;
    v231 = 0;
    memset(v230, 0, 32);
    v225[1] = 0;
    v225[0] = 0;
    memset(v221, 0, sizeof(v221));
    v222 = 0u;
    v223 = 0;
    v224 = v225;
    MeCab::Param::get<std::string>((uint64_t)v241, "dicdir", &__s1);
    MeCab::Param::get<std::string>((uint64_t)v241, "outdir", &v219);
    MeCab::Param::get<std::string>((uint64_t)v241, "model", &v218);
    std::string::basic_string[abi:ne180100]<0>(&__str, "dicrc");
    MeCab::create_filename((uint64_t)&__s1, (uint64_t)&__str, v214);
    if ((v214[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = v214;
    else
      v5 = (std::string *)v214[0].__r_.__value_.__r.__words[0];
    if (!MeCab::Param::load((MeCab::Param *)v241, (const char *)v5))
    {
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
      v7 = (_QWORD *)std::ostream::operator<<();
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") [", 3);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"param.load(DCONF(DICRC))", 24);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"] ", 2);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"no such file or directory: ", 27);
      std::string::basic_string[abi:ne180100]<0>(&v243, "dicrc");
      p_p = &__p;
      MeCab::create_filename((uint64_t)&__s1, (uint64_t)&v243, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v13 = strlen((const char *)p_p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)p_p, v13);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v243.__r_.__value_.__l.__data_);
      MeCab::die::~die((MeCab::die *)v249);
    }
    if (SHIBYTE(v214[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v214[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    memset(&v217, 0, sizeof(v217));
    MeCab::Dictionary::Dictionary((MeCab::Dictionary *)v214);
    std::string::basic_string[abi:ne180100]<0>(&__p, "sys.dic");
    MeCab::create_filename((uint64_t)&__s1, (uint64_t)&__p, &__str);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((MeCab::Dictionary::open((MeCab::Dictionary *)v214, (std::string::value_type *)p_str, "r") & 1) == 0)
    {
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"(", 1);
      v16 = (_QWORD *)std::ostream::operator<<();
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") [", 3);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"dic.open(DCONF(SYS_DIC_FILE), \"r\")", 34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"] ", 2);
      MeCab::die::~die((MeCab::die *)&v243);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::__assign_external(&v217, __s);
    size = HIBYTE(v217.__r_.__value_.__r.__words[2]);
    if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v217.__r_.__value_.__l.__size_;
    if (!size)
    {
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"(", 1);
      v21 = (_QWORD *)std::ostream::operator<<();
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)") [", 3);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"!charset.empty()", 16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"] ", 2);
      MeCab::die::~die((MeCab::die *)&__str);
    }
    MeCab::Dictionary::~Dictionary((MeCab::Dictionary *)v214);
    MeCab::Param::get<std::string>((uint64_t)v241, "training-algorithm", &v213);
    v24 = HIBYTE(v213.__r_.__value_.__r.__words[2]);
    v25 = (v213.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
    v26 = v213.__r_.__value_.__l.__size_;
    if ((v213.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = HIBYTE(v213.__r_.__value_.__r.__words[2]);
    else
      v27 = v213.__r_.__value_.__l.__size_;
    if (v27)
    {
      v28 = 0;
      do
      {
        if (v25)
          v29 = (std::string *)v213.__r_.__value_.__r.__words[0];
        else
          v29 = &v213;
        v30 = v29->__r_.__value_.__s.__data_[v28];
        if ((v30 - 65) <= 0x19)
        {
          v29->__r_.__value_.__s.__data_[v28] = v30 + 32;
          v24 = HIBYTE(v213.__r_.__value_.__r.__words[2]);
          v26 = v213.__r_.__value_.__l.__size_;
        }
        ++v28;
        v25 = (v24 & 0x80u) != 0;
        if ((v24 & 0x80u) == 0)
          v31 = v24;
        else
          v31 = v26;
      }
      while (v28 < v31);
    }
    if (v25)
      v24 = v26;
    if (v24 != 3)
      goto LABEL_54;
    v32 = (std::string *)v213.__r_.__value_.__r.__words[0];
    if (!v25)
      v32 = &v213;
    data_low = LOWORD(v32->__r_.__value_.__l.__data_);
    v34 = v32->__r_.__value_.__s.__data_[2];
    v35 = data_low == 28008 && v34 == 109;
    if (v35)
    {
      v36 = MeCab::Param::get<int>((uint64_t)v241, "default-emission-cost");
      if ((int)MeCab::Param::get<int>((uint64_t)v241, "default-transition-cost") <= 0)
      {
        v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"(", 1);
        v63 = (_QWORD *)std::ostream::operator<<();
        v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)") [", 3);
        v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"default_transition_cost > 0", 27);
        v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"default transition cost must be > 0", 35);
        MeCab::die::~die((MeCab::die *)v214);
      }
      if (v36 <= 0)
      {
        v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"(", 1);
        v68 = (_QWORD *)std::ostream::operator<<();
        v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)") [", 3);
        v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"default_emission_cost > 0", 25);
        v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"default transition cost must be > 0", 35);
        MeCab::die::~die((MeCab::die *)v214);
      }
      LODWORD(v214[0].__r_.__value_.__l.__data_) = 1;
      MeCab::Param::set<int>((uint64_t)v241, "identity-template", (uint64_t)v214, 1);
    }
    else
    {
LABEL_54:
      v36 = 0;
    }
    MeCab::CharProperty::CharProperty((MeCab::CharProperty *)v214);
    if (!MeCab::CharProperty::open((MeCab::CharProperty *)v214, (const MeCab::Param *)v241))
    {
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"(", 1);
      v39 = (_QWORD *)std::ostream::operator<<();
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)") [", 3);
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"property.open(param)", 20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"] ", 2);
      MeCab::die::~die((MeCab::die *)&__str);
    }
    if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = &v217;
    else
      v42 = (std::string *)v217.__r_.__value_.__r.__words[0];
    v216 = MeCab::decode_charset((MeCab *)v42, v37);
    MeCab::Param::get<std::string>((uint64_t)v241, "bos-feature", &v212);
    v43 = MeCab::Param::get<int>((uint64_t)v241, "cost-factor");
    v209 = 0;
    v210 = 0;
    v211 = 0;
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_s1 = &__s1;
    else
      p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    MeCab::enum_csv_dictionaries((char *)p_s1, (uint64_t)&v209);
    v45 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v46 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    else
      v46 = __s1.__r_.__value_.__l.__size_;
    v47 = HIBYTE(v219.__r_.__value_.__r.__words[2]);
    v48 = HIBYTE(v219.__r_.__value_.__r.__words[2]);
    v49 = v219.__r_.__value_.__l.__size_;
    if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v50 = HIBYTE(v219.__r_.__value_.__r.__words[2]);
    else
      v50 = v219.__r_.__value_.__l.__size_;
    if (v46 == v50)
    {
      if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = &v219;
      else
        v51 = (std::string *)v219.__r_.__value_.__r.__words[0];
      if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
        {
          v52 = &__s1;
          while (v52->__r_.__value_.__s.__data_[0] == v51->__r_.__value_.__s.__data_[0])
          {
            v52 = (std::string *)((char *)v52 + 1);
            v51 = (std::string *)((char *)v51 + 1);
            if (!--v45)
              goto LABEL_94;
          }
          goto LABEL_95;
        }
LABEL_94:
        v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"(", 1);
        v73 = (_QWORD *)std::ostream::operator<<();
        v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)") [", 3);
        v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"dicdir != outdir", 16);
        v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"output directory = dictionary directory! Please specify different directory.", 76);
        MeCab::die::~die((MeCab::die *)&__str);
      }
      if (!memcmp(__s1.__r_.__value_.__l.__data_, v51, __s1.__r_.__value_.__l.__size_))
        goto LABEL_94;
    }
LABEL_95:
    if (v48 >= 0)
      v77 = v47;
    else
      v77 = v49;
    if (!v77)
    {
      v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"(", 1);
      v79 = (_QWORD *)std::ostream::operator<<();
      v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)") [", 3);
      v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"!outdir.empty()", 15);
      v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"output directory is empty", 25);
      MeCab::die::~die((MeCab::die *)&__str);
    }
    v83 = HIBYTE(v218.__r_.__value_.__r.__words[2]);
    if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v83 = v218.__r_.__value_.__l.__size_;
    if (!v83)
    {
      v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"(", 1);
      v85 = (_QWORD *)std::ostream::operator<<();
      v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)") [", 3);
      v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"!model.empty()", 14);
      v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"model file is empty", 19);
      MeCab::die::~die((MeCab::die *)&__str);
    }
    if ((MeCab::DecoderFeatureIndex::open((MeCab::DecoderFeatureIndex *)v226, (const MeCab::Param *)v241) & 1) == 0)
    {
      v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"(", 1);
      v90 = (_QWORD *)std::ostream::operator<<();
      v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)") [", 3);
      v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"fi.open(param)", 14);
      v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"] ", 2);
      v94 = (char *)MeCab::whatlog::str((MeCab::whatlog *)&v228);
      std::string::basic_string[abi:ne180100]<0>(&__str, v94);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v95 = &__str;
      else
        v95 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v96 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v96 = __str.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)v95, v96);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      MeCab::die::~die((MeCab::die *)&__p);
    }
    if (v43 <= 0)
    {
      v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"(", 1);
      v98 = (_QWORD *)std::ostream::operator<<();
      v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)") [", 3);
      v100 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"factor > 0", 10);
      v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"cost factor needs to be positive value", 38);
      MeCab::die::~die((MeCab::die *)&__str);
    }
    v102 = HIBYTE(v212.__r_.__value_.__r.__words[2]);
    if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v102 = v212.__r_.__value_.__l.__size_;
    if (!v102)
    {
      v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"(", 1);
      v104 = (_QWORD *)std::ostream::operator<<();
      v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)") [", 3);
      v106 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)"!bos.empty()", 12);
      v107 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"bos-feature is empty", 20);
      MeCab::die::~die((MeCab::die *)&__str);
    }
    if (v210 == v209)
    {
      v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"(", 1);
      v109 = (_QWORD *)std::ostream::operator<<();
      v110 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)") [", 3);
      v111 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"dic.size()", 10);
      v112 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)"] ", 2);
      v113 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)"no dictionary is found in ", 26);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v114 = &__s1;
      else
        v114 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v115 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      else
        v115 = __s1.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)v114, v115);
      MeCab::die::~die((MeCab::die *)&__str);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "rewrite.def");
    MeCab::create_filename((uint64_t)&__s1, (uint64_t)&__p, &__str);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v116 = &__str;
    else
      v116 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((MeCab::DictionaryRewriter::open((MeCab::DictionaryRewriter *)v221, (const char *)v116, 0) & 1) == 0)
    {
      v117 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)"(", 1);
      v118 = (_QWORD *)std::ostream::operator<<();
      v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)") [", 3);
      v120 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)"rewrite.open(DCONF(REWRITE_FILE))", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)"] ", 2);
      MeCab::die::~die((MeCab::die *)&v243);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    memset(&__str, 0, sizeof(__str));
    memset(&__p, 0, sizeof(__p));
    memset(&v243, 0, sizeof(v243));
    MeCab::DictionaryRewriter::rewrite2((uint64_t)v221, (void **)&v212.__r_.__value_.__l.__data_, &__str, &__p, &v243);
    v121 = SHIBYTE(v243.__r_.__value_.__r.__words[2]);
    v122 = v243.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v123 = &__p;
    else
      v123 = (std::string *)__p.__r_.__value_.__r.__words[0];
    std::string::__assign_external((std::string *)&v238, (const std::string::value_type *)v123);
    if (v121 >= 0)
      v124 = &v243;
    else
      v124 = (std::string *)v122;
    std::string::__assign_external((std::string *)((char *)&v239 + 8), (const std::string::value_type *)v124);
    if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v243.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "unk.def");
    MeCab::create_filename((uint64_t)&__s1, (uint64_t)&__p, &__str);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v126 = &__str;
    else
      v126 = (std::string *)__str.__r_.__value_.__r.__words[0];
    MeCab::DictionaryGenerator::gencid((MeCab::DictionaryGenerator *)v126, v221, (MeCab::DictionaryRewriter *)&v232, v125);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    for (i = v209; i != v210; i += 24)
    {
      v129 = (MeCab::DictionaryGenerator *)i;
      if (i[23] < 0)
        v129 = *(MeCab::DictionaryGenerator **)i;
      MeCab::DictionaryGenerator::gencid(v129, v221, (MeCab::DictionaryRewriter *)&v232, v127);
    }
    v130 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"emitting ", 9);
    std::string::basic_string[abi:ne180100]<0>(&__p, "left-id.def");
    v131 = &__str;
    MeCab::create_filename((uint64_t)&v219, (uint64_t)&__p, &__str);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v131 = (std::string *)__str.__r_.__value_.__r.__words[0];
    v132 = strlen((const char *)v131);
    v133 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v130, (uint64_t)v131, v132);
    v134 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)"/ ", 2);
    std::string::basic_string[abi:ne180100]<0>(v249, "right-id.def");
    v135 = &v243;
    MeCab::create_filename((uint64_t)&v219, (uint64_t)v249, &v243);
    if ((v243.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v135 = (std::string *)v243.__r_.__value_.__r.__words[0];
    v136 = strlen((const char *)v135);
    v137 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, (uint64_t)v135, v136);
    std::ios_base::getloc((const std::ios_base *)((char *)v137 + *(_QWORD *)(*v137 - 24)));
    v138 = std::locale::use_facet((const std::locale *)&v208, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v138->__vftable[2].~facet_0)(v138, 10);
    std::locale::~locale((std::locale *)&v208);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v243.__r_.__value_.__l.__data_);
    if (SHIBYTE(v250) < 0)
      operator delete(v249[0]);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    build((uint64_t **)&v232, (uint64_t)&v238);
    build((uint64_t **)&v235, (uint64_t)&v239 + 8);
    std::string::basic_string[abi:ne180100]<0>(&__p, "left-id.def");
    MeCab::create_filename((uint64_t)&v219, (uint64_t)&__p, &__str);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v139 = &__str;
    else
      v139 = (std::string *)__str.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(v249, "right-id.def");
    MeCab::create_filename((uint64_t)&v219, (uint64_t)v249, &v243);
    v140 = SHIBYTE(v243.__r_.__value_.__r.__words[2]);
    v141 = v243.__r_.__value_.__r.__words[0];
    save((const char *)v139, &v232);
    if (v140 >= 0)
      v142 = &v243;
    else
      v142 = (std::string *)v141;
    save((const char *)v142, &v235);
    if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v243.__r_.__value_.__l.__data_);
    if (SHIBYTE(v250) < 0)
      operator delete(v249[0]);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "unk.def");
    MeCab::create_filename((uint64_t)&__s1, (uint64_t)&__p, &__str);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v143 = &__str;
    else
      v143 = (std::string *)__str.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(v249, "unk.def");
    MeCab::create_filename((uint64_t)&v219, (uint64_t)v249, &v243);
    if ((v243.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v144 = &v243;
    else
      v144 = (std::string *)v243.__r_.__value_.__r.__words[0];
    MeCab::DictionaryGenerator::gendic((MeCab::DictionaryGenerator *)v143, (const char *)v144, (const char *)v214, (const MeCab::CharProperty *)v221, (MeCab::DictionaryRewriter *)&v232, (const MeCab::ContextID *)v226, (MeCab::DecoderFeatureIndex *)1, v43, v36, v204);
    if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v243.__r_.__value_.__l.__data_);
    if (SHIBYTE(v250) < 0)
      operator delete(v249[0]);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    for (j = v209; j != v210; j += 24)
    {
      if (j[23] < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)j, *((_QWORD *)j + 1));
      }
      else
      {
        v146 = *(_OWORD *)j;
        __str.__r_.__value_.__r.__words[2] = *((_QWORD *)j + 2);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v146;
      }
      MeCab::remove_pathname(&__str);
      v147 = j;
      if (j[23] < 0)
        v147 = *(std::string::value_type **)j;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v148 = &__str;
      else
        v148 = (std::string *)__str.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(&v243, (char *)v148);
      MeCab::create_filename((uint64_t)&v219, (uint64_t)&v243, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v149 = &__p;
      else
        v149 = (std::string *)__p.__r_.__value_.__r.__words[0];
      MeCab::DictionaryGenerator::gendic((MeCab::DictionaryGenerator *)v147, (const char *)v149, (const char *)v214, (const MeCab::CharProperty *)v221, (MeCab::DictionaryRewriter *)&v232, (const MeCab::ContextID *)v226, 0, v43, v36, v205);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v243.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(v206, "matrix.def");
    MeCab::create_filename((uint64_t)&v219, (uint64_t)v206, &v208);
    if ((v208.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v150 = &v208;
    else
      v150 = (std::string *)v208.__r_.__value_.__r.__words[0];
    std::ofstream::basic_ofstream(&__str);
    if ((*((_BYTE *)&__str + *(_QWORD *)(__str.__r_.__value_.__r.__words[0] - 24) + 32) & 5) != 0)
    {
      v151 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v151, (uint64_t)"(", 1);
      v152 = (_QWORD *)std::ostream::operator<<();
      v153 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v152, (uint64_t)") [", 3);
      v154 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v153, (uint64_t)"ofs", 3);
      v155 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)"] ", 2);
      v156 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v155, (uint64_t)"permission denied: ", 19);
      v157 = strlen((const char *)v150);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)v150, v157);
      MeCab::die::~die((MeCab::die *)&__p);
    }
    v245 = 0;
    v248 = 0;
    v247 = v249;
    v244 = v249;
    v250 = &v243;
    v249[0] = &__p;
    if (!v234)
    {
      v158 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)"(", 1);
      v159 = (_QWORD *)std::ostream::operator<<();
      v160 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)") [", 3);
      v161 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)"left.size()", 11);
      v162 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v161, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v162, (uint64_t)"left id size is empty", 21);
      MeCab::die::~die((MeCab::die *)&v251);
    }
    if (!v237)
    {
      v163 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"(", 1);
      v164 = (_QWORD *)std::ostream::operator<<();
      v165 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)") [", 3);
      v166 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v165, (uint64_t)"right.size()", 12);
      v167 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v166, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v167, (uint64_t)"right id size is empty", 22);
      MeCab::die::~die((MeCab::die *)&v251);
    }
    v168 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v251.__locale_) = 32;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v168, (uint64_t)&v251, 1);
    v169 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v169 + *(_QWORD *)(*v169 - 24)));
    v170 = std::locale::use_facet(&v251, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v170->__vftable[2].~facet_0)(v170, 10);
    std::locale::~locale(&v251);
    std::ostream::put();
    std::ostream::flush();
    v171 = (uint64_t *)v235;
    if (v235 != &v236)
    {
      v172 = 0;
      v173 = (std::locale::id *)MEMORY[0x24BEDB350];
      do
      {
        MeCab::progress_bar((MeCab *)"emitting matrix      ", (const char *)(v172 + 2), v237);
        v174 = (uint64_t *)v232;
        if (v232 != &v233)
        {
          do
          {
            *((_QWORD *)v249[0] + 14) = 0;
            v175 = (uint64_t)(v171 + 4);
            if (*((char *)v171 + 55) < 0)
              v175 = v171[4];
            v176 = v174 + 4;
            if (*((char *)v174 + 55) < 0)
              v176 = (_QWORD *)*v176;
            MeCab::FeatureIndex::buildBigramFeature((uint64_t)v226, (uint64_t)v249, v175, (uint64_t)v176);
            MeCab::FeatureIndex::calcCost((uint64_t)v226, (double *)v249, v177);
            v178 = (_QWORD *)std::ostream::operator<<();
            LOBYTE(v251.__locale_) = 32;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v178, (uint64_t)&v251, 1);
            v179 = (_QWORD *)std::ostream::operator<<();
            LOBYTE(v251.__locale_) = 32;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v179, (uint64_t)&v251, 1);
            v180 = (_QWORD *)std::ostream::operator<<();
            std::ios_base::getloc((const std::ios_base *)((char *)v180 + *(_QWORD *)(*v180 - 24)));
            v181 = std::locale::use_facet(&v251, v173);
            ((void (*)(const std::locale::facet *, uint64_t))v181->__vftable[2].~facet_0)(v181, 10);
            std::locale::~locale(&v251);
            std::ostream::put();
            std::ostream::flush();
            v182 = (char *)v174[1];
            if (v182)
            {
              do
              {
                v183 = (char **)v182;
                v182 = *(char **)v182;
              }
              while (v182);
            }
            else
            {
              do
              {
                v183 = (char **)v174[2];
                v35 = *v183 == (char *)v174;
                v174 = (uint64_t *)v183;
              }
              while (!v35);
            }
            v174 = (uint64_t *)v183;
          }
          while (v183 != &v233);
        }
        v184 = (char *)v171[1];
        if (v184)
        {
          do
          {
            v185 = (char **)v184;
            v184 = *(char **)v184;
          }
          while (v184);
        }
        else
        {
          do
          {
            v185 = (char **)v171[2];
            v35 = *v185 == (char *)v171;
            v171 = (uint64_t *)v185;
          }
          while (!v35);
        }
        ++v172;
        v171 = (uint64_t *)v185;
      }
      while (v185 != &v236);
    }
    __str.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7E8];
    *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words
                              + *(_QWORD *)(__str.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E8]
                                                                                                  + 24);
    MEMORY[0x20BD061F8](&__str.__r_.__value_.__r.__words[1]);
    std::ostream::~ostream();
    MEMORY[0x20BD06354](v253);
    if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v208.__r_.__value_.__l.__data_);
    if (v207 < 0)
      operator delete(v206[0]);
    std::string::basic_string[abi:ne180100]<0>(&__p, "char.def");
    MeCab::create_filename((uint64_t)&__s1, (uint64_t)&__p, &__str);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v186 = &__str;
    else
      v186 = (std::string *)__str.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(v249, "char.def");
    MeCab::create_filename((uint64_t)&v219, (uint64_t)v249, &v243);
    if ((v243.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v188 = &v243;
    else
      v188 = (std::string *)v243.__r_.__value_.__r.__words[0];
    MeCab::copy((MeCab *)v186, (const char *)v188, v187);
    if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v243.__r_.__value_.__l.__data_);
    if (SHIBYTE(v250) < 0)
      operator delete(v249[0]);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "rewrite.def");
    MeCab::create_filename((uint64_t)&__s1, (uint64_t)&__p, &__str);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v189 = &__str;
    else
      v189 = (std::string *)__str.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(v249, "rewrite.def");
    MeCab::create_filename((uint64_t)&v219, (uint64_t)v249, &v243);
    if ((v243.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v191 = &v243;
    else
      v191 = (std::string *)v243.__r_.__value_.__r.__words[0];
    MeCab::copy((MeCab *)v189, (const char *)v191, v190);
    if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v243.__r_.__value_.__l.__data_);
    if (SHIBYTE(v250) < 0)
      operator delete(v249[0]);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__p, "dicrc");
    MeCab::create_filename((uint64_t)&__s1, (uint64_t)&__p, &__str);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v192 = &__str;
    else
      v192 = (std::string *)__str.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(v249, "dicrc");
    MeCab::create_filename((uint64_t)&v219, (uint64_t)v249, &v243);
    if ((v243.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v194 = &v243;
    else
      v194 = (std::string *)v243.__r_.__value_.__r.__words[0];
    MeCab::copy((MeCab *)v192, (const char *)v194, v193);
    if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v243.__r_.__value_.__l.__data_);
    if (SHIBYTE(v250) < 0)
      operator delete(v249[0]);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v195 = HIBYTE(v213.__r_.__value_.__r.__words[2]);
    if ((v213.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v195 = v213.__r_.__value_.__l.__size_;
    if (v195 == 3)
    {
      v196 = &v213;
      if ((v213.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v196 = (std::string *)v213.__r_.__value_.__r.__words[0];
      v197 = LOWORD(v196->__r_.__value_.__l.__data_);
      v198 = v196->__r_.__value_.__s.__data_[2];
      if (v197 == 29283 && v198 == 102)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "feature.def");
        MeCab::create_filename((uint64_t)&__s1, (uint64_t)&__p, &__str);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v200 = &__str;
        else
          v200 = (std::string *)__str.__r_.__value_.__r.__words[0];
        std::string::basic_string[abi:ne180100]<0>(v249, "feature.def");
        MeCab::create_filename((uint64_t)&v219, (uint64_t)v249, &v243);
        if ((v243.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v202 = &v243;
        else
          v202 = (std::string *)v243.__r_.__value_.__r.__words[0];
        MeCab::copy((MeCab *)v200, (const char *)v202, v201);
        if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v243.__r_.__value_.__l.__data_);
        if (SHIBYTE(v250) < 0)
          operator delete(v249[0]);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"\ndone!\n", 7);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v209;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v212.__r_.__value_.__l.__data_);
    MeCab::CharProperty::~CharProperty((void **)&v214[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v213.__r_.__value_.__l.__data_);
    if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v217.__r_.__value_.__l.__data_);
    if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v218.__r_.__value_.__l.__data_);
    if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v219.__r_.__value_.__l.__data_);
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s1.__r_.__value_.__l.__data_);
    std::__tree<std::__value_type<std::string,MeCab::FeatureSet>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::FeatureSet>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::FeatureSet>>>::destroy((uint64_t)&v224, v225[0]);
    v214[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v222;
    std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100]((void ***)v214);
    v214[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v221[24];
    std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100]((void ***)v214);
    v214[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v221;
    std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100]((void ***)v214);
    v226[0] = &off_24C09C3D0;
    Darts::DoubleArrayImpl<char,unsigned char,int,unsigned int,Darts::Length<char>>::clear((uint64_t)v230);
    MeCab::Mmap<char>::~Mmap((uint64_t)v229);
    MeCab::FeatureIndex::~FeatureIndex(v226);
    if (SHIBYTE(v240) < 0)
      operator delete(*((void **)&v239 + 1));
    if (SBYTE7(v239) < 0)
      operator delete((void *)v238);
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&v235, v236);
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&v232, v233);
    goto LABEL_335;
  }
  v53 = (char *)MeCab::whatlog::str((MeCab::whatlog *)&v242);
  std::string::basic_string[abi:ne180100]<0>(v226, v53);
  if ((v227 & 0x80u) == 0)
    v54 = v226;
  else
    v54 = (void **)v226[0];
  if ((v227 & 0x80u) == 0)
    v55 = v227;
  else
    v55 = (uint64_t)v226[1];
  v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)v54, v55);
  v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"\n\n", 2);
  v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"MeCab: Yet Another Part-of-Speech and Morphological Analyzer\n\nCopyright(C) 2001-2012 Taku Kudo \nCopyright(C) 2004-2008 Nippon Telegraph and Telephone Corporation\n", 162);
  v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"\ntry '--help' for more information.", 35);
  std::ios_base::getloc((const std::ios_base *)((char *)v59 + *(_QWORD *)(*v59 - 24)));
  v60 = std::locale::use_facet((const std::locale *)v214, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10);
  std::locale::~locale((std::locale *)v214);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v227 < 0)
    operator delete(v226[0]);
  v61 = 0xFFFFFFFFLL;
LABEL_336:
  MeCab::Param::~Param(v241);
  return v61;
}

void sub_2083A8480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::locale a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,std::locale a35)
{
  if (SLOBYTE(STACK[0xA8F]) < 0)
    operator delete((void *)STACK[0xA78]);
  if (SLOBYTE(STACK[0xBAF]) < 0)
    operator delete((void *)STACK[0xB98]);
  if (SLOBYTE(STACK[0xBE7]) < 0)
    operator delete((void *)STACK[0xBD0]);
  if (SLOBYTE(STACK[0xB1F]) < 0)
    operator delete((void *)STACK[0xB08]);
  STACK[0xB08] = (unint64_t)&a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xB08]);
  if (a28 < 0)
    operator delete(a23);
  MeCab::CharProperty::~CharProperty((void **)&a35.__locale_);
  if (a34 < 0)
    operator delete(a29);
  if (SLOBYTE(STACK[0x397]) < 0)
    operator delete((void *)STACK[0x380]);
  if (SLOBYTE(STACK[0x3AF]) < 0)
    operator delete((void *)STACK[0x398]);
  if (SLOBYTE(STACK[0x3C7]) < 0)
    operator delete((void *)STACK[0x3B0]);
  if (SLOBYTE(STACK[0x3DF]) < 0)
    operator delete((void *)STACK[0x3C8]);
  MeCab::DictionaryRewriter::~DictionaryRewriter((MeCab::DictionaryRewriter *)&STACK[0x3E0]);
  MeCab::DecoderFeatureIndex::~DecoderFeatureIndex((void **)&STACK[0x448]);
  MeCab::ContextID::~ContextID((MeCab::ContextID *)&STACK[0x878]);
  MeCab::Param::~Param((void **)&STACK[0x8D8]);
  _Unwind_Resume(a1);
}

double MeCab::Param::get<std::string>@<D0>(uint64_t a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  void **v6;
  _QWORD *v7;
  double result;
  std::string v9;
  void *__p[2];
  char v11;

  v5 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v6 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>(v5, __p);
  if (v11 < 0)
    operator delete(__p[0]);
  if ((void **)(a1 + 16) == v6)
  {
    v7 = (_QWORD *)operator new();
    v7[1] = 0;
    v7[2] = 0;
    *v7 = 0;
    __p[0] = &off_24C09C158;
    __p[1] = v7;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
    a3->__r_.__value_.__r.__words[0] = 0;
    MeCab::scoped_ptr<std::string>::~scoped_ptr(__p);
  }
  else
  {
    if (*((char *)v6 + 79) < 0)
      std::string::__init_copy_ctor_external(&v9, (const std::string::value_type *)v6[7], (std::string::size_type)v6[8]);
    else
      v9 = *(std::string *)(v6 + 7);
    result = *(double *)&v9.__r_.__value_.__l.__data_;
    *a3 = v9;
  }
  return result;
}

void sub_2083A89F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::Param::get<int>(uint64_t a1, char *a2)
{
  uint64_t v3;
  void **v4;
  uint64_t v5;
  std::string v7;
  void *__p[2];
  char v9;

  v3 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v4 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>(v3, __p);
  if (v9 < 0)
    operator delete(__p[0]);
  if ((void **)(a1 + 16) == v4)
  {
    *(_DWORD *)operator new() = 0;
    MEMORY[0x20BD0639C]();
    return 0;
  }
  else
  {
    if (*((char *)v4 + 79) < 0)
      std::string::__init_copy_ctor_external(&v7, (const std::string::value_type *)v4[7], (std::string::size_type)v4[8]);
    else
      v7 = *(std::string *)(v4 + 7);
    v5 = MeCab_internal::lexical_cast<int,std::string>((uint64_t)&v7);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_2083A8AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MeCab::Param::set<int>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t *v6;
  uint64_t *v7;
  __int128 v8;
  uint64_t v9;
  void *__p[2];
  char v11;
  void **v12;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  if ((a4 & 1) != 0
    || (void **)(a1 + 16) == std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>(a1 + 8, __p))
  {
    MeCab_internal::lexical_cast<std::string,int>(&v8);
    v12 = __p;
    v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 8), __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v12);
    v7 = v6 + 7;
    if (*((char *)v6 + 79) < 0)
      operator delete((void *)*v7);
    *(_OWORD *)v7 = v8;
    v7[2] = v9;
  }
  if (v11 < 0)
    operator delete(__p[0]);
}

void sub_2083A8BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::DictionaryGenerator::gencid(MeCab::DictionaryGenerator *this, const char *a2, MeCab::DictionaryRewriter *a3, MeCab::ContextID *a4)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  size_t v16;
  _QWORD *v17;
  size_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::locale::id *v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  size_t v31;
  std::string *v32;
  std::string *p_p;
  _QWORD *v34;
  const std::locale::facet *v35;
  const std::string::value_type **v37;
  const std::string::value_type **v38;
  uint64_t v39;
  std::string __p;
  std::string v41;
  std::string v42;
  std::string v43;
  std::locale v44;
  char __s[8192];
  _QWORD v46[2];
  _BYTE v47[408];
  _QWORD v48[21];

  v4 = MEMORY[0x24BDAC7A8](this, a2, a3, a4);
  v6 = v5;
  v8 = v7;
  v9 = (const char *)v4;
  v48[19] = *MEMORY[0x24BDAC8D0];
  std::ifstream::basic_ifstream(v46);
  if ((v47[*(_QWORD *)(v46[0] - 24) + 16] & 5) != 0)
  {
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
    v11 = (_QWORD *)std::ostream::operator<<();
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)") [", 3);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ifs", 3);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"] ", 2);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"no such file or directory: ", 27);
    v16 = strlen(v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v9, v16);
    MeCab::die::~die((MeCab::die *)__s);
  }
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"reading ", 8);
  v18 = strlen(v9);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v9, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" ... ", 5);
  std::ostream::flush();
  v20 = 0;
  memset(&v43, 0, sizeof(v43));
  memset(&v42, 0, sizeof(v42));
  memset(&v41, 0, sizeof(v41));
  memset(&__p, 0, sizeof(__p));
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v21 = (std::locale::id *)MEMORY[0x24BEDB350];
  v22 = (_QWORD *)MEMORY[0x24BEDB310];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(_QWORD *)(v46[0] - 24)));
    v23 = std::locale::use_facet(&v44, v21);
    ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
    std::locale::~locale(&v44);
    v24 = (_QWORD *)std::istream::getline();
    if ((*((_BYTE *)v24 + *(_QWORD *)(*v24 - 24) + 32) & 5) != 0)
      break;
    v38 = v37;
    if (MeCab::tokenizeCSV<std::back_insert_iterator<std::vector<char *>>>(__s, (void **)&v37, 5uLL) != 5)
    {
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(", 1);
      v26 = (_QWORD *)std::ostream::operator<<();
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)") [", 3);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"n == 5", 6);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"] ", 2);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"format error: ", 14);
      v31 = strlen(__s);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)__s, v31);
      MeCab::die::~die((MeCab::die *)&v44);
    }
    std::string::__assign_external(&v43, v37[4]);
    MeCab::DictionaryRewriter::rewrite2(v8, (void **)&v43.__r_.__value_.__l.__data_, &v42, &v41, &__p);
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = &v41;
    else
      v32 = (std::string *)v41.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    MeCab::ContextID::add(v6, (char *)v32, (char *)p_p);
    ++v20;
  }
  v34 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(_QWORD *)(*v34 - 24)));
  v35 = std::locale::use_facet(&v44, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
  std::locale::~locale(&v44);
  std::ostream::put();
  std::ostream::flush();
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)v46 + *(_QWORD *)(v46[0] - 24)), *(_DWORD *)&v47[*(_QWORD *)(v46[0] - 24) + 16] | 4);
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  v46[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v46 + *(_QWORD *)(v46[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x20BD061F8](v47);
  std::istream::~istream();
  return MEMORY[0x20BD06354](v48);
}

void sub_2083A90B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,std::locale a36,char a37)
{
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::DictionaryGenerator::gendic(MeCab::DictionaryGenerator *this, const char *a2, const char *a3, const MeCab::CharProperty *a4, MeCab::DictionaryRewriter *a5, const MeCab::ContextID *a6, MeCab::DecoderFeatureIndex *a7, BOOL a8, int a9, int a10)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  MeCab::ContextID *v14;
  MeCab::ContextID *v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  const char *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  size_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  size_t v33;
  _QWORD *v34;
  size_t v35;
  _QWORD *v36;
  uint64_t v37;
  const std::locale::facet *v38;
  _QWORD *v39;
  int64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char **v44;
  uint64_t v45;
  unint64_t v46;
  char *i;
  int v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  size_t v63;
  std::string *v64;
  int v65;
  std::string *v66;
  int v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  std::string *v74;
  std::string::size_type size;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  std::string *v82;
  std::string::size_type v83;
  std::string *v84;
  std::string *p_p;
  int v86;
  int v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  std::string *v94;
  std::string::size_type v95;
  _QWORD *v96;
  std::string::size_type v97;
  std::string::size_type v98;
  __int16 v99;
  std::string *v100;
  int v101;
  uint64_t v102;
  int *v103;
  double v104;
  int v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  std::string *v112;
  std::string::size_type v113;
  std::string *v114;
  std::string::size_type v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  void **v121;
  uint64_t v122;
  _QWORD *v123;
  const std::locale::facet *v124;
  _QWORD *v125;
  const std::locale::facet *v126;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  std::locale v132[2];
  std::string::size_type v133;
  char v134;
  _QWORD *v135;
  char v136;
  char v137;
  _QWORD *v138;
  char v139;
  double v140;
  int *v141;
  _QWORD v142[6];
  std::string v143;
  std::string v144;
  std::string v145;
  void *v146[2];
  int64_t v147;
  std::string __p;
  char *v149[2];
  __int128 v150;
  char *v151[2];
  __int128 v152;
  char __s[8192];
  uint64_t v154;
  _BYTE v155[408];
  uint64_t v156;
  _QWORD v157[2];
  _BYTE v158[408];
  _QWORD v159[21];

  v10 = MEMORY[0x24BDAC7A8](this, a2, a3, a4);
  v130 = v11;
  v128 = v12;
  v129 = v13;
  v15 = v14;
  v131 = v16;
  v18 = v17;
  v19 = (const char *)v10;
  v159[19] = *MEMORY[0x24BDAC8D0];
  std::ifstream::basic_ifstream(v157);
  if ((v158[*(_QWORD *)(v157[0] - 24) + 16] & 5) != 0)
  {
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"(", 1);
    v21 = (_QWORD *)std::ostream::operator<<();
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)") [", 3);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"ifs", 3);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"] ", 2);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"no such file or directory: ", 27);
    v26 = strlen(v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v19, v26);
    MeCab::die::~die((MeCab::die *)__s);
  }
  std::ofstream::basic_ofstream(&v154);
  if ((v155[*(_QWORD *)(v154 - 24) + 24] & 5) != 0)
  {
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"(", 1);
    v28 = (_QWORD *)std::ostream::operator<<();
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)") [", 3);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"ofs", 3);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"] ", 2);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"permission denied: ", 19);
    v33 = strlen(v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v18, v33);
    MeCab::die::~die((MeCab::die *)__s);
  }
  memset(&__p, 0, sizeof(__p));
  v146[0] = 0;
  v146[1] = 0;
  v147 = 0;
  memset(&v145, 0, sizeof(v145));
  memset(&v144, 0, sizeof(v144));
  memset(&v143, 0, sizeof(v143));
  v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"emitting ", 9);
  v35 = strlen(v18);
  v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v18, v35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" ... ", 5);
  std::ostream::flush();
  v37 = 0;
  v136 = 0;
  v139 = 0;
  v138 = v142;
  v135 = v142;
  v142[2] = &v134;
  v142[0] = &v137;
  *(_OWORD *)v151 = 0u;
  v152 = 0u;
  *(_OWORD *)v149 = 0u;
  v150 = 0u;
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v157 + *(_QWORD *)(v157[0] - 24)));
    v38 = std::locale::use_facet(v132, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
    std::locale::~locale(v132);
    v39 = (_QWORD *)std::istream::getline();
    if ((*((_BYTE *)v39 + *(_QWORD *)(*v39 - 24) + 32) & 5) != 0)
      break;
    v40 = strlen(__s);
    if (v40 < 1)
      goto LABEL_31;
    v41 = 0;
    v42 = &__s[v40];
    v43 = __s;
    v44 = v149;
    v45 = 5;
    do
    {
      v46 = v45;
      for (i = v43; ; ++i)
      {
        v48 = *i;
        if (v48 != 9 && v48 != 32)
          break;
        ++v43;
      }
      if (v48 == 34)
      {
        v49 = (unsigned __int8 *)++i;
        v50 = (unsigned __int8 *)i;
        if (i < v42)
        {
          v49 = (unsigned __int8 *)i;
          v50 = (unsigned __int8 *)i;
          do
          {
            v51 = *v50;
            if (v51 == 34)
            {
              v52 = *++v50;
              if (v52 != 34)
                break;
            }
            *v49++ = v51;
            ++v50;
          }
          while (v50 < (unsigned __int8 *)v42);
        }
        v53 = (char *)memchr(v50, 44, v42 - (char *)v50);
        if (v53)
          v54 = v53;
        else
          v54 = v42;
      }
      else
      {
        v55 = (char *)memchr(i, 44, v42 - v43);
        if (v55)
          v56 = v55;
        else
          v56 = v42;
        v54 = &i[v56 - v43];
        v49 = (unsigned __int8 *)v54;
      }
      v45 = v46 - 1;
      if (v46 < 2)
      {
        *v44 = i;
        ++v41;
        if (v46 == 1)
          break;
      }
      else
      {
        *v49 = 0;
        *v44 = i;
        ++v41;
      }
      ++v44;
      v43 = v54 + 1;
    }
    while (v54 + 1 < v42);
    if (v41 != 5)
    {
LABEL_31:
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"(", 1);
      v58 = (_QWORD *)std::ostream::operator<<();
      v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)") [", 3);
      v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"n == 5", 6);
      v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"] ", 2);
      v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"format error: ", 14);
      v63 = strlen(__s);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)__s, v63);
      MeCab::die::~die((MeCab::die *)v132);
    }
    std::string::basic_string[abi:ne180100]<0>(v132, v149[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v132[0].__locale_;
    __p.__r_.__value_.__r.__words[2] = v133;
    std::string::basic_string[abi:ne180100]<0>(v132, v151[0]);
    if (SHIBYTE(v147) < 0)
      operator delete(v146[0]);
    *(_OWORD *)v146 = *(_OWORD *)&v132[0].__locale_;
    v147 = v133;
    MeCab::DictionaryRewriter::rewrite2(v131, v146, &v145, &v144, &v143);
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v64 = &v144;
    else
      v64 = (std::string *)v144.__r_.__value_.__r.__words[0];
    v65 = MeCab::ContextID::lid(v15, (char *)v64);
    if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v66 = &v143;
    else
      v66 = (std::string *)v143.__r_.__value_.__r.__words[0];
    v67 = MeCab::ContextID::rid(v15, (char *)v66);
    if (v65 <= 0)
    {
      v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"(", 1);
      v69 = (_QWORD *)std::ostream::operator<<();
      v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)") [", 3);
      v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"lid > 0", 7);
      v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"] ", 2);
      v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"CID is not found for ", 21);
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v74 = &v144;
      else
        v74 = (std::string *)v144.__r_.__value_.__r.__words[0];
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v144.__r_.__value_.__r.__words[2]);
      else
        size = v144.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)v74, size);
      MeCab::die::~die((MeCab::die *)v132);
    }
    if (v67 <= 0)
    {
      v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"(", 1);
      v77 = (_QWORD *)std::ostream::operator<<();
      v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)") [", 3);
      v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"rid > 0", 7);
      v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"] ", 2);
      v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"CID is not found for ", 21);
      if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v82 = &v143;
      else
        v82 = (std::string *)v143.__r_.__value_.__r.__words[0];
      if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v83 = HIBYTE(v143.__r_.__value_.__r.__words[2]);
      else
        v83 = v143.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)v82, v83);
      MeCab::die::~die((MeCab::die *)v132);
    }
    v84 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v130)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v86 = MeCab::CharProperty::id((MeCab::CharProperty *)v128, (const char *)p_p);
      LOBYTE(v87) = v86;
      if (v86 < 0)
      {
        v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"(", 1);
        v89 = (_QWORD *)std::ostream::operator<<();
        v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)") [", 3);
        v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"c >= 0", 6);
        v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"] ", 2);
        v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"unknown property [", 18);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v94 = &__p;
        else
          v94 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v95 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v95 = __p.__r_.__value_.__l.__size_;
        v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)v94, v95);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)"]", 1);
        MeCab::die::~die((MeCab::die *)v132);
      }
    }
    else
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v97 = (std::string::size_type)&__p;
      else
        v97 = __p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v98 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v98 = __p.__r_.__value_.__l.__size_;
      if ((*(_DWORD *)(v128 + 384) - 3) > 2)
      {
        LODWORD(v97) = *(char *)v97;
        v99 = v97;
        if ((v97 & 0x80000000) != 0)
        {
          if (v98 >= 2 && (v97 & 0xE0) == 0xC0)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v84 = &__p;
            LOWORD(v97) = v84->__r_.__value_.__s.__data_[1] & 0x3F | ((v97 & 0x1F) << 6);
          }
          else
          {
            LOWORD(v97) = 0;
            if (v98 >= 3 && (v99 & 0xF0) == 0xE0)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v84 = &__p;
              LOWORD(v97) = (v99 << 12) | ((v84->__r_.__value_.__s.__data_[1] & 0x3F) << 6) | v84->__r_.__value_.__s.__data_[2] & 0x3F;
            }
          }
        }
        else
        {
          LOWORD(v97) = v97;
        }
      }
      else if (v98 < 2)
      {
        LOWORD(v97) = 0;
      }
      else
      {
        LOWORD(v97) = *(_WORD *)v97;
      }
      v87 = *(_DWORD *)(*(_QWORD *)(v128 + 376) + 4 * (unsigned __int16)v97) >> 18;
    }
    *(_BYTE *)(v142[0] + 86) = v87;
    if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v100 = &v145;
    else
      v100 = (std::string *)v145.__r_.__value_.__r.__words[0];
    MeCab::FeatureIndex::buildUnigramFeature(v129, (uint64_t)v142, (char *)v100);
    v140 = 0.0;
    if (v139 != 3)
    {
      v101 = *v141;
      if (*v141 != -1)
      {
        v102 = *(_QWORD *)(v129 + 336);
        v103 = v141 + 1;
        v104 = 0.0;
        do
        {
          v104 = v104 + *(double *)(v102 + 8 * v101);
          v140 = v104;
          v105 = *v103++;
          v101 = v105;
        }
        while (v105 != -1);
      }
    }
    if ((MeCab::escape_csv_element(&__p) & 1) == 0)
    {
      v106 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)"(", 1);
      v107 = (_QWORD *)std::ostream::operator<<();
      v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)") [", 3);
      v109 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"escape_csv_element(&w)", 22);
      v110 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)"] ", 2);
      v111 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"invalid character found: ", 25);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v112 = &__p;
      else
        v112 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v113 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v113 = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)v112, v113);
      MeCab::die::~die((MeCab::die *)v132);
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v114 = &__p;
    else
      v114 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v115 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v115 = __p.__r_.__value_.__l.__size_;
    v116 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v154, (uint64_t)v114, v115);
    LOBYTE(v132[0].__locale_) = 44;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)v132, 1);
    v117 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v132[0].__locale_) = 44;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)v132, 1);
    v118 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v132[0].__locale_) = 44;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)v132, 1);
    v119 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v132[0].__locale_) = 44;
    v120 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)v132, 1);
    if (v147 >= 0)
      v121 = v146;
    else
      v121 = (void **)v146[0];
    if (v147 >= 0)
      v122 = HIBYTE(v147);
    else
      v122 = (uint64_t)v146[1];
    v123 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)v121, v122);
    std::ios_base::getloc((const std::ios_base *)((char *)v123 + *(_QWORD *)(*v123 - 24)));
    v124 = std::locale::use_facet(v132, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v124->__vftable[2].~facet_0)(v124, 10);
    std::locale::~locale(v132);
    std::ostream::put();
    std::ostream::flush();
    ++v37;
  }
  v125 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v125 + *(_QWORD *)(*v125 - 24)));
  v126 = std::locale::use_facet(v132, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v126->__vftable[2].~facet_0)(v126, 10);
  std::locale::~locale(v132);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v144.__r_.__value_.__l.__data_);
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v145.__r_.__value_.__l.__data_);
  if (SHIBYTE(v147) < 0)
    operator delete(v146[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v154 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)&v155[*(_QWORD *)(v154 - 24) - 8] = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x20BD061F8](v155);
  std::ostream::~ostream();
  MEMORY[0x20BD06354](&v156);
  v157[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v157 + *(_QWORD *)(v157[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x20BD061F8](v158);
  std::istream::~istream();
  return MEMORY[0x20BD06354](v159);
}

void sub_2083A9DA4(_Unwind_Exception *a1)
{
  std::ifstream::~ifstream(&STACK[0x2490]);
  _Unwind_Resume(a1);
}

uint64_t MeCab::copy(MeCab *this, const char *a2, const char *a3)
{
  _QWORD *v5;
  size_t v6;
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  void *locale;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  size_t v26;
  char v28;
  _BYTE v29[8];
  uint64_t v30;
  std::locale v31;
  uint64_t v32;
  unsigned __int8 v33;
  _BYTE v34[384];
  _QWORD v35[20];

  v35[19] = *MEMORY[0x24BDAC8D0];
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"copying ", 8);
  v6 = strlen((const char *)this);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)this, v6);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" to ", 4);
  v9 = strlen(a2);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)a2, v9);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
  v11 = std::locale::use_facet(&v31, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v31);
  std::ostream::put();
  std::ostream::flush();
  MeCab::Mmap<char>::Mmap((uint64_t)v29);
  if ((MeCab::Mmap<char>::open((uint64_t)v29, (char *)this, "r") & 1) == 0)
  {
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"(", 1);
    v13 = (_QWORD *)std::ostream::operator<<();
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)") [", 3);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"mmap.open(src)", 14);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"] ", 2);
    v17 = (char *)MeCab::whatlog::str((MeCab::whatlog *)&v30);
    std::string::basic_string[abi:ne180100]<0>(&v31, v17);
    if ((v33 & 0x80u) == 0)
      locale = &v31;
    else
      locale = v31.__locale_;
    if ((v33 & 0x80u) == 0)
      v19 = v33;
    else
      v19 = v32;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)locale, v19);
    if ((char)v33 < 0)
      operator delete(v31.__locale_);
    MeCab::die::~die((MeCab::die *)&v28);
  }
  std::ofstream::basic_ofstream(&v31);
  if ((v34[*((_QWORD *)v31.__locale_ - 3)] & 5) != 0)
  {
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_generator.cpp", 74);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"(", 1);
    v21 = (_QWORD *)std::ostream::operator<<();
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)") [", 3);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"ofs", 3);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"] ", 2);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"permission denied: ", 19);
    v26 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)a2, v26);
    MeCab::die::~die((MeCab::die *)&v28);
  }
  std::ostream::write();
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)&v31 + *((_QWORD *)v31.__locale_ - 3)), *(_DWORD *)&v34[*((_QWORD *)v31.__locale_ - 3)] | 4);
  v31.__locale_ = (std::locale::__imp *)*MEMORY[0x24BEDB7E8];
  *(std::locale *)((char *)&v31 + *((_QWORD *)v31.__locale_ - 3)) = *(std::locale *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x20BD061F8](&v32);
  std::ostream::~ostream();
  MEMORY[0x20BD06354](v35);
  return MeCab::Mmap<char>::~Mmap((uint64_t)v29);
}

void sub_2083AA1D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,std::locale a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  void **v61;

  if (a61 < 0)
    operator delete(*v61);
  MeCab::die::~die((MeCab::die *)&a12);
}

void sub_2083AA220()
{
  JUMPOUT(0x2083AA244);
}

void sub_2083AA228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  MeCab::die::~die((MeCab::die *)&a12);
}

void MeCab::DictionaryRewriter::~DictionaryRewriter(MeCab::DictionaryRewriter *this)
{
  void **v2;

  std::__tree<std::__value_type<std::string,MeCab::FeatureSet>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::FeatureSet>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::FeatureSet>>>::destroy((uint64_t)this + 72, *((_QWORD **)this + 10));
  v2 = (void **)((char *)this + 48);
  std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 24);
  std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)this;
  std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void MeCab::DecoderFeatureIndex::~DecoderFeatureIndex(void **this)
{
  *this = &off_24C09C3D0;
  Darts::DoubleArrayImpl<char,unsigned char,int,unsigned int,Darts::Length<char>>::clear((uint64_t)(this + 122));
  MeCab::Mmap<char>::~Mmap((uint64_t)(this + 79));
  MeCab::FeatureIndex::~FeatureIndex(this);
}

{
  *this = &off_24C09C3D0;
  Darts::DoubleArrayImpl<char,unsigned char,int,unsigned int,Darts::Length<char>>::clear((uint64_t)(this + 122));
  MeCab::Mmap<char>::~Mmap((uint64_t)(this + 79));
  MeCab::FeatureIndex::~FeatureIndex(this);
  JUMPOUT(0x20BD0639CLL);
}

void MeCab::ContextID::~ContextID(MeCab::ContextID *this)
{
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)this + 24, *((char **)this + 4));
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)this, *((char **)this + 1));
}

MeCab::Param *MeCab::Param::Param(MeCab::Param *this)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = (char *)this + 16;
  *(_QWORD *)this = &off_24C09C500;
  *((_QWORD *)this + 3) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this + 128);
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  return this;
}

void sub_2083AA3C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v3 + 127) < 0)
    operator delete(*(void **)(v3 + 104));
  if (*(char *)(v3 + 103) < 0)
    operator delete(*(void **)(v3 + 80));
  if (*(char *)(v3 + 79) < 0)
    operator delete(*(void **)(v3 + 56));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v2, *v4);
  _Unwind_Resume(a1);
}

void MeCab::Param::~Param(void **this)
{
  MeCab::Param::~Param(this);
  JUMPOUT(0x20BD0639CLL);
}

{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;

  *this = &off_24C09C500;
  v2 = (char *)(this + 16);
  if (*((char *)this + 415) < 0)
    operator delete(this[49]);
  v3 = MEMORY[0x24BEDB800];
  v4 = *MEMORY[0x24BEDB800];
  this[16] = (void *)*MEMORY[0x24BEDB800];
  *(_QWORD *)&v2[*(_QWORD *)(v4 - 24)] = *(_QWORD *)(v3 + 24);
  this[17] = (void *)(MEMORY[0x24BEDB848] + 16);
  if (*((char *)this + 223) < 0)
    operator delete(this[25]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD06354](this + 30);
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  v5 = this + 4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 1), this[2]);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x24BEDB870] + 64;
  v4 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_2083AA504(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x20BD06354](v1);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void **MeCab::whatlog::str(MeCab::whatlog *this)
{
  void **v2;
  __int128 v4;
  uint64_t v5;

  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)this + 8, &v4);
  v2 = (void **)((char *)this + 264);
  if (*((char *)this + 287) < 0)
    operator delete(*v2);
  *(_OWORD *)v2 = v4;
  *((_QWORD *)this + 35) = v5;
  if (*((char *)this + 287) < 0)
    return (void **)*v2;
  return v2;
}

uint64_t std::stringbuf::str[abi:ne180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  unint64_t v4;
  const void *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  result = std::stringbuf::view[abi:ne180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (const void *)result;
  v6 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v4;
    if (!v4)
      goto LABEL_9;
  }
  result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((_BYTE *)a2 + v6) = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:ne180100](uint64_t a1)
{
  int v1;
  unint64_t v3;

  v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    v3 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 88) < v3)
      *(_QWORD *)(a1 + 88) = v3;
    return *(_QWORD *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(_QWORD *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

MeCab::FeatureIndex *MeCab::FeatureIndex::FeatureIndex(MeCab::FeatureIndex *this)
{
  *(_QWORD *)this = &unk_24C09C198;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 4) = &off_24C09C260;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0x40000;
  *((_QWORD *)this + 11) = &off_24C09C240;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0x40000;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = (char *)this + 272;
  *((_QWORD *)this + 36) = &off_24C09C1E0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_WORD *)this + 160) = 1;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this + 344);
  *((_QWORD *)this + 77) = 0;
  *((_QWORD *)this + 76) = 0;
  *((_QWORD *)this + 78) = 0;
  return this;
}

void sub_2083AA7A0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  MeCab::StringBuffer *v4;
  void **v5;
  void **v6;
  MeCab::StringBuffer *v7;
  void *v9;
  void *v10;
  void *v11;

  v7 = v4;
  MeCab::StringBuffer::~StringBuffer(v7);
  MeCab::DictionaryRewriter::~DictionaryRewriter((MeCab::DictionaryRewriter *)(v1 + 24));
  v9 = (void *)v1[21];
  if (v9)
  {
    v1[22] = v9;
    operator delete(v9);
  }
  v10 = *v6;
  if (*v6)
  {
    v1[19] = v10;
    operator delete(v10);
  }
  MeCab::ChunkFreeList<char>::~ChunkFreeList(v3);
  MeCab::ChunkFreeList<int>::~ChunkFreeList(v2);
  v11 = *v5;
  if (*v5)
  {
    v1[2] = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void MeCab::FeatureIndex::~FeatureIndex(void **this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void **v9;

  *this = &unk_24C09C198;
  v2 = (char *)(this + 43);
  if (*((char *)this + 631) < 0)
    operator delete(this[76]);
  v3 = MEMORY[0x24BEDB800];
  v4 = *MEMORY[0x24BEDB800];
  this[43] = (void *)*MEMORY[0x24BEDB800];
  *(_QWORD *)&v2[*(_QWORD *)(v4 - 24)] = *(_QWORD *)(v3 + 24);
  this[44] = (void *)(MEMORY[0x24BEDB848] + 16);
  if (*((char *)this + 439) < 0)
    operator delete(this[52]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD06354](this + 57);
  this[36] = &off_24C09C1E0;
  if (*((_BYTE *)this + 320))
  {
    v5 = this[39];
    if (v5)
      MEMORY[0x20BD06378](v5, 0x1000C8077774924);
    this[39] = 0;
  }
  std::__tree<std::__value_type<std::string,MeCab::FeatureSet>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::FeatureSet>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::FeatureSet>>>::destroy((uint64_t)(this + 33), this[34]);
  v9 = this + 30;
  std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = this + 27;
  std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = this + 24;
  std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100](&v9);
  v6 = this[21];
  if (v6)
  {
    this[22] = v6;
    operator delete(v6);
  }
  v7 = this[18];
  if (v7)
  {
    this[19] = v7;
    operator delete(v7);
  }
  MeCab::ChunkFreeList<char>::~ChunkFreeList(this + 11);
  MeCab::ChunkFreeList<int>::~ChunkFreeList(this + 4);
  v8 = this[1];
  if (v8)
  {
    this[2] = v8;
    operator delete(v8);
  }
}

void MeCab::ChunkFreeList<int>::~ChunkFreeList(_QWORD *a1)
{
  MeCab::ChunkFreeList<int>::~ChunkFreeList(a1);
  JUMPOUT(0x20BD0639CLL);
}

void MeCab::ChunkFreeList<char>::~ChunkFreeList(_QWORD *a1)
{
  MeCab::ChunkFreeList<char>::~ChunkFreeList(a1);
  JUMPOUT(0x20BD0639CLL);
}

_QWORD *MeCab::ChunkFreeList<char>::~ChunkFreeList(_QWORD *a1)
{
  char *v2;
  char *v3;
  _QWORD *v4;
  unint64_t v5;

  *a1 = &off_24C09C240;
  a1[5] = 0;
  v4 = a1 + 1;
  v2 = (char *)a1[1];
  v3 = (char *)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
    if (!v3)
      return a1;
    goto LABEL_7;
  }
  v5 = 0;
  do
  {
    if (*(_QWORD *)&v2[16 * v5 + 8])
    {
      MEMORY[0x20BD06378](*(_QWORD *)&v2[16 * v5 + 8], 0x1000C8077774924);
      v5 = a1[5];
      v2 = (char *)a1[1];
      v3 = (char *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < (v3 - v2) >> 4);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *MeCab::ChunkFreeList<int>::~ChunkFreeList(_QWORD *a1)
{
  char *v2;
  char *v3;
  _QWORD *v4;
  unint64_t v5;

  *a1 = &off_24C09C260;
  a1[5] = 0;
  v4 = a1 + 1;
  v2 = (char *)a1[1];
  v3 = (char *)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
    if (!v3)
      return a1;
    goto LABEL_7;
  }
  v5 = 0;
  do
  {
    if (*(_QWORD *)&v2[16 * v5 + 8])
    {
      MEMORY[0x20BD06378](*(_QWORD *)&v2[16 * v5 + 8], 0x1000C8052888210);
      v5 = a1[5];
      v2 = (char *)a1[1];
      v3 = (char *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < (v3 - v2) >> 4);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t MeCab::Mmap<char>::Mmap(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C09C480;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 48);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = -1;
  return a1;
}

void sub_2083AAB44(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void MeCab::Mmap<char>::~Mmap(uint64_t a1)
{
  MeCab::Mmap<char>::~Mmap(a1);
  JUMPOUT(0x20BD0639CLL);
}

uint64_t MeCab::Mmap<char>::~Mmap(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24C09C480;
  MeCab::Mmap<char>::close(a1);
  if (*(char *)(a1 + 335) < 0)
    operator delete(*(void **)(a1 + 312));
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 48) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 48 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 56) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD06354](a1 + 160);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void *MeCab::Mmap<char>::close(uint64_t a1)
{
  int v2;
  void *result;

  v2 = *(_DWORD *)(a1 + 336);
  if ((v2 & 0x80000000) == 0)
  {
    close(v2);
    *(_DWORD *)(a1 + 336) = -1;
  }
  result = *(void **)(a1 + 8);
  if (result)
    result = (void *)munmap(result, *(_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void MeCab::scoped_ptr<std::string>::~scoped_ptr(_QWORD *a1)
{
  MeCab::scoped_ptr<std::string>::~scoped_ptr(a1);
  JUMPOUT(0x20BD0639CLL);
}

_QWORD *MeCab::scoped_ptr<std::string>::~scoped_ptr(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C09C158;
  v2 = a1[1];
  if (v2)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x20BD0639C](v2, 0x1012C40EC159624);
  }
  return a1;
}

uint64_t MeCab_internal::lexical_cast<int,std::string>(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v11;
  _QWORD v12[2];
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  v11 = 0;
  v2 = *(char *)(a1 + 23);
  if (v2 >= 0)
    v3 = a1;
  else
    v3 = *(_QWORD *)a1;
  if (v2 >= 0)
    v4 = *(unsigned __int8 *)(a1 + 23);
  else
    v4 = *(_QWORD *)(a1 + 8);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v3, v4);
  if ((*((_BYTE *)v5 + *(_QWORD *)(*v5 - 24) + 32) & 5) != 0
    || (v6 = (_QWORD *)MEMORY[0x20BD06240](v12, &v11), (*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0)
    || (v7 = std::ws[abi:ne180100]<char,std::char_traits<char>>(v12),
        (*((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 32) & 2) == 0))
  {
    *(_DWORD *)operator new() = 0;
    MEMORY[0x20BD0639C]();
    v8 = 0;
  }
  else
  {
    v8 = v11;
  }
  v12[0] = *MEMORY[0x24BEDB7F0];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v13[0] = v9;
  v13[1] = MEMORY[0x24BEDB848] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD06354](&v15);
  return v8;
}

void sub_2083AAE6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_2083AAF88(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x20BD06354](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::ws[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1)
{
  const std::locale::facet *v2;
  _QWORD *v3;
  _QWORD *v4;
  _BYTE *v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  std::locale v11;
  char v12;

  MEMORY[0x20BD06204](&v12, a1, 1);
  if (!v12)
    return a1;
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v11, MEMORY[0x24BEDB350]);
  std::locale::~locale(&v11);
  v3 = a1 + 5;
  while (1)
  {
    v4 = *(_QWORD **)((char *)v3 + *(_QWORD *)(*a1 - 24));
    v5 = (_BYTE *)v4[3];
    if (v5 == (_BYTE *)v4[4])
      break;
    LOBYTE(v6) = *v5;
LABEL_6:
    if ((v6 & 0x80) != 0 || (*((_DWORD *)&v2[1].~facet + v6) & 0x4000) == 0)
    {
      v9 = 0;
      goto LABEL_12;
    }
    v7 = *(_QWORD **)((char *)v3 + *(_QWORD *)(*a1 - 24));
    v8 = v7[3];
    if (v8 == v7[4])
      (*(void (**)(_QWORD *))(*v7 + 80))(v7);
    else
      v7[3] = v8 + 1;
  }
  v6 = (*(uint64_t (**)(_QWORD *))(*v4 + 72))(v4);
  if (v6 != -1)
    goto LABEL_6;
  v9 = 2;
LABEL_12:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_2083AB0CC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  _QWORD *v9;
  uint64_t v11;

  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  v11 = *v9;
  *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v9 + *(_QWORD *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x2083AB094);
  }
  __cxa_rethrow();
}

void sub_2083AB128(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD06354](a1 + 128);
  return a1;
}

uint64_t MeCab_internal::lexical_cast<std::string,int>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[2];
  void *__p[2];
  uint64_t v10;
  uint64_t v11[13];
  char v12;
  uint64_t v13;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v11);
  __p[0] = 0;
  __p[1] = 0;
  v10 = 0;
  v2 = (_QWORD *)std::ostream::operator<<();
  if ((*((_BYTE *)v2 + *(_QWORD *)(*v2 - 24) + 32) & 5) != 0
    || (v3 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, (uint64_t)__p),
        (*((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 32) & 5) != 0)
    || (v4 = std::ws[abi:ne180100]<char,std::char_traits<char>>(v11),
        (*((_BYTE *)v4 + *(_QWORD *)(*v4 - 24) + 32) & 2) == 0))
  {
    v5 = (_QWORD *)operator new();
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    v8[0] = &off_24C09C158;
    v8[1] = v5;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    MeCab::scoped_ptr<std::string>::~scoped_ptr(v8);
    if (SHIBYTE(v10) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)__p;
    a1[2] = v10;
  }
  v11[0] = *MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v11[2] = v6;
  v11[3] = MEMORY[0x24BEDB848] + 16;
  if (v12 < 0)
    operator delete((void *)v11[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD06354](&v13);
}

void sub_2083AB334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t *std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const std::locale::facet *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BYTE *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::locale v19;
  char v20;

  MEMORY[0x20BD06204](&v20, a1, 0);
  if (!v20)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v4 = *(_QWORD *)(*a1 - 24);
  v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  v7 = std::locale::use_facet(&v19, MEMORY[0x24BEDB350]);
  std::locale::~locale(&v19);
  v8 = 0;
  v9 = a1 + 5;
  if (v5 >= 1)
    v10 = v6;
  else
    v10 = 0x7FFFFFFFFFFFFFF7;
  while (1)
  {
    v11 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v12 = (_BYTE *)v11[3];
    if (v12 == (_BYTE *)v11[4])
      break;
    LOBYTE(v13) = *v12;
LABEL_14:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    v14 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v15 = v14[3];
    if (v15 == v14[4])
      (*(void (**)(_QWORD *))(*v14 + 80))(v14);
    else
      v14[3] = v15 + 1;
    if (v10 == ++v8)
    {
      v16 = 0;
      v17 = *a1;
      *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
      goto LABEL_25;
    }
  }
  v13 = (*(uint64_t (**)(_QWORD *))(*v11 + 72))(v11);
  if (v13 != -1)
    goto LABEL_14;
  v16 = 2;
LABEL_23:
  v17 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  if (!v8)
    v16 |= 4u;
LABEL_25:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_2083AB510(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  _QWORD *v9;
  uint64_t v11;

  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  v11 = *v9;
  *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v9 + *(_QWORD *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x2083AB4DCLL);
  }
  __cxa_rethrow();
}

void sub_2083AB574(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_2083AB604(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

MeCab::CharProperty *MeCab::CharProperty::CharProperty(MeCab::CharProperty *this)
{
  *(_QWORD *)this = &off_24C09C178;
  MeCab::Mmap<char>::Mmap((uint64_t)this + 8);
  *((_DWORD *)this + 96) = 0;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this + 392);
  *((_QWORD *)this + 83) = 0;
  *((_QWORD *)this + 82) = 0;
  *((_QWORD *)this + 84) = 0;
  return this;
}

void sub_2083AB6C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void *v6;

  v4 = v3;
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 360) = v6;
    operator delete(v6);
  }
  MeCab::Mmap<char>::~Mmap(v2);
  _Unwind_Resume(a1);
}

void MeCab::CharProperty::~CharProperty(void **this)
{
  MeCab::CharProperty::~CharProperty(this);
  JUMPOUT(0x20BD0639CLL);
}

{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *this = &off_24C09C178;
  v2 = (char *)(this + 1);
  MeCab::Mmap<char>::close((uint64_t)(this + 1));
  if (*((char *)this + 679) < 0)
    operator delete(this[82]);
  v3 = MEMORY[0x24BEDB800];
  v4 = *MEMORY[0x24BEDB800];
  this[49] = (void *)*MEMORY[0x24BEDB800];
  *(void **)((char *)this + *(_QWORD *)(v4 - 24) + 392) = *(void **)(v3 + 24);
  this[50] = (void *)(MEMORY[0x24BEDB848] + 16);
  if (*((char *)this + 487) < 0)
    operator delete(this[58]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD06354](this + 63);
  v5 = this[44];
  if (v5)
  {
    this[45] = v5;
    operator delete(v5);
  }
  MeCab::Mmap<char>::~Mmap((uint64_t)v2);
}

unint64_t MeCab::tokenizeCSV<std::back_insert_iterator<std::vector<char *>>>(const char *a1, void **a2, unint64_t a3)
{
  const char *v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *i;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *j;
  int v15;
  int v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  _BYTE *v19;
  _BYTE *v20;
  void **v22;
  unsigned __int8 *v23;

  v5 = a1;
  v6 = strlen(a1);
  v23 = 0;
  if (v6 >= 1)
  {
    v7 = 0;
    v8 = (unint64_t)&v5[v6];
    v9 = a3;
    while (1)
    {
      v10 = v9;
      for (i = (unsigned __int8 *)v5; ; ++i)
      {
        v12 = *i;
        if (v12 != 9 && v12 != 32)
          break;
        ++v5;
      }
      if (v12 == 34)
      {
        v13 = i + 1;
        v23 = i + 1;
        for (j = i + 1; (unint64_t)j < v8; ++j)
        {
          v15 = *j;
          if (v15 == 34)
          {
            v16 = *++j;
            if (v16 != 34)
              break;
          }
          *v13++ = v15;
        }
        v17 = (unsigned __int8 *)memchr(j, 44, v8 - (_QWORD)j);
        if (v17)
          v18 = v17;
        else
          v18 = (unsigned __int8 *)v8;
      }
      else
      {
        v23 = i;
        v19 = memchr(i, 44, v8 - (_QWORD)v5);
        if (v19)
          v20 = v19;
        else
          v20 = (_BYTE *)v8;
        v18 = &i[v20 - v5];
        v13 = v18;
      }
      v9 = v10 - 1;
      if (v10 < 2)
      {
        v22 = a2;
        std::back_insert_iterator<std::vector<char *>>::operator=[abi:ne180100](&v22, &v23);
        if (v10 == 1)
          return a3;
      }
      else
      {
        *v13 = 0;
        v22 = a2;
        std::back_insert_iterator<std::vector<char *>>::operator=[abi:ne180100](&v22, &v23);
      }
      ++v7;
      v5 = (const char *)(v18 + 1);
      if ((unint64_t)(v18 + 1) >= v8)
        return v7;
    }
  }
  return 0;
}

uint64_t MeCab::Mmap<char>::open(uint64_t a1, char *a2, const char *a3)
{
  void **v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  const char *v14;
  uint64_t v15;
  int v16;
  int v17;
  size_t st_size;
  int v19;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  size_t v42;
  stat v44;

  MeCab::Mmap<char>::close(a1);
  std::string::basic_string[abi:ne180100]<0>(&v44, a2);
  v6 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)&v44.st_dev;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)&v44.st_uid;
  if (!strcmp(a3, "r"))
  {
    v16 = 0;
  }
  else
  {
    if (strcmp(a3, "r+"))
    {
      v8 = *(_QWORD *)(a1 + 48);
      v7 = (_QWORD *)(a1 + 48);
      std::ios_base::clear((std::ios_base *)((char *)v7 + *(_QWORD *)(v8 - 24)), 0);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/mmap.h", 56);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"(", 1);
      v10 = (_QWORD *)std::ostream::operator<<();
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"false", 5);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"] ", 2);
      v14 = "unknown open mode: ";
      v15 = 19;
LABEL_18:
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
      v42 = strlen(a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)a2, v42);
      return 0;
    }
    v16 = 2;
  }
  *(_DWORD *)(a1 + 340) = v16;
  v17 = open(a2, v16);
  *(_DWORD *)(a1 + 336) = v17;
  if (v17 < 0)
  {
    v24 = *(_QWORD *)(a1 + 48);
    v23 = (_QWORD *)(a1 + 48);
    std::ios_base::clear((std::ios_base *)((char *)v23 + *(_QWORD *)(v24 - 24)), 0);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/mmap.h", 56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(", 1);
    v26 = (_QWORD *)std::ostream::operator<<();
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)") [", 3);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"(fd = ::open(filename, flag | O_BINARY)) >= 0", 45);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"] ", 2);
    v14 = "open failed: ";
    v15 = 13;
    goto LABEL_18;
  }
  if (fstat(v17, &v44) < 0)
  {
    v30 = *(_QWORD *)(a1 + 48);
    v29 = (_QWORD *)(a1 + 48);
    std::ios_base::clear((std::ios_base *)((char *)v29 + *(_QWORD *)(v30 - 24)), 0);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/mmap.h", 56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
    v32 = (_QWORD *)std::ostream::operator<<();
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)") [", 3);
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"::fstat(fd, &st) >= 0", 21);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"] ", 2);
    v14 = "failed to get file size: ";
    v15 = 25;
    goto LABEL_18;
  }
  st_size = v44.st_size;
  *(_QWORD *)(a1 + 16) = v44.st_size;
  if (*(_DWORD *)(a1 + 340) == 2)
    v19 = 3;
  else
    v19 = 1;
  v20 = mmap(0, st_size, v19, 1, *(_DWORD *)(a1 + 336), 0);
  if (v20 == (void *)-1)
  {
    v36 = *(_QWORD *)(a1 + 48);
    v35 = (_QWORD *)(a1 + 48);
    std::ios_base::clear((std::ios_base *)((char *)v35 + *(_QWORD *)(v36 - 24)), 0);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/mmap.h", 56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"(", 1);
    v38 = (_QWORD *)std::ostream::operator<<();
    v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)") [", 3);
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"(p = reinterpret_cast<char *> (::mmap(0, length, prot, MAP_SHARED, fd, 0))) != MAP_FAILED", 89);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"] ", 2);
    v14 = "mmap() failed: ";
    v15 = 15;
    goto LABEL_18;
  }
  v21 = v20;
  v22 = 1;
  madvise(v20, *(_QWORD *)(a1 + 16), 1);
  *(_QWORD *)(a1 + 8) = v21;
  close(*(_DWORD *)(a1 + 336));
  *(_DWORD *)(a1 + 336) = -1;
  return v22;
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void std::__tree<std::__value_type<std::string,MeCab::FeatureSet>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::FeatureSet>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::FeatureSet>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,MeCab::FeatureSet>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::FeatureSet>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::FeatureSet>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,MeCab::FeatureSet>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::FeatureSet>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::FeatureSet>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,MeCab::FeatureSet>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,MeCab::FeatureSet>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<MeCab::RewritePattern>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (void **)*v2);
    operator delete(**a1);
  }
}

void std::vector<MeCab::RewritePattern>::__base_destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v4;
  void **v5;
  void **v6;

  v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = v4 - 6;
      v6 = v4 - 3;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      v6 = v5;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

double Darts::DoubleArrayImpl<char,unsigned char,int,unsigned int,Darts::Length<char>>::clear(uint64_t a1)
{
  uint64_t v2;
  double result;

  if (!*(_BYTE *)(a1 + 80) && *(_QWORD *)a1)
    MEMORY[0x20BD06378]();
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    MEMORY[0x20BD06378](v2, 0x1000C8077774924);
  *(_BYTE *)(a1 + 80) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void MeCab::RewritePattern::set_pattern(MeCab::RewritePattern *this, const char *a2, const char *a3, uint64_t a4)
{
  uint64_t *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  char __dst[8192];
  uint64_t v11;

  v4 = (uint64_t *)MEMORY[0x24BDAC7A8](this, a2, a3, a4);
  v6 = v5;
  v8 = v7;
  v9 = (uint64_t)v4;
  v11 = *MEMORY[0x24BDAC8D0];
  std::vector<std::string>::__clear[abi:ne180100](v4);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(v9 + 24));
  strncpy(__dst, v8, 0x2000uLL);
  MeCab::tokenizeCSV<std::back_insert_iterator<std::vector<std::string>>>(__dst, v9);
  strncpy(__dst, v6, 0x2000uLL);
  MeCab::tokenizeCSV<std::back_insert_iterator<std::vector<std::string>>>(__dst, v9 + 24);
}

void MeCab::tokenizeCSV<std::back_insert_iterator<std::vector<std::string>>>(const char *a1, uint64_t a2)
{
  const char *v3;
  int64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned __int8 *i;
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  _BYTE *v15;
  _BYTE *v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  std::string *v24;
  std::string *v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  void *__p[2];
  std::string::size_type v30;
  std::__split_buffer<std::string> __v;

  v3 = a1;
  v4 = strlen(a1);
  if (v4 >= 1)
  {
    v5 = (unint64_t)&v3[v4];
    v6 = 512;
    do
    {
      for (i = (unsigned __int8 *)v3; ; ++i)
      {
        v8 = *i;
        if (v8 != 9 && v8 != 32)
          break;
        ++v3;
      }
      if (v8 == 34)
      {
        v9 = ++i;
        v10 = i;
        if ((unint64_t)i < v5)
        {
          v10 = i;
          v9 = i;
          do
          {
            v11 = *v10;
            if (v11 == 34)
            {
              v12 = *++v10;
              if (v12 != 34)
                break;
            }
            *v9++ = v11;
            ++v10;
          }
          while ((unint64_t)v10 < v5);
        }
        v13 = (unsigned __int8 *)memchr(v10, 44, v5 - (_QWORD)v10);
        if (v13)
          v14 = v13;
        else
          v14 = (unsigned __int8 *)v5;
      }
      else
      {
        v15 = memchr(i, 44, v5 - (_QWORD)v3);
        if (v15)
          v16 = v15;
        else
          v16 = (_BYTE *)v5;
        v9 = &i[v16 - v3];
        v14 = v9;
      }
      if (v6 >= 2)
        *v9 = 0;
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)i);
      v18 = *(_QWORD *)(a2 + 8);
      v17 = *(_QWORD *)(a2 + 16);
      if (v18 >= v17)
      {
        v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *(_QWORD *)a2) >> 3);
        v21 = v20 + 1;
        if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<char *>::__throw_length_error[abi:ne180100]();
        v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *(_QWORD *)a2) >> 3);
        if (2 * v22 > v21)
          v21 = 2 * v22;
        if (v22 >= 0x555555555555555)
          v23 = 0xAAAAAAAAAAAAAAALL;
        else
          v23 = v21;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
        if (v23)
          v24 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v23);
        else
          v24 = 0;
        v25 = v24 + v20;
        __v.__first_ = v24;
        __v.__begin_ = v25;
        __v.__end_cap_.__value_ = &v24[v23];
        v26 = *(_OWORD *)__p;
        v25->__r_.__value_.__r.__words[2] = v30;
        *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v26;
        __p[1] = 0;
        v30 = 0;
        __p[0] = 0;
        __v.__end_ = v25 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
        v27 = *(_QWORD *)(a2 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v28 = SHIBYTE(v30);
        *(_QWORD *)(a2 + 8) = v27;
        if (v28 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v19 = *(_OWORD *)__p;
        *(_QWORD *)(v18 + 16) = v30;
        *(_OWORD *)v18 = v19;
        *(_QWORD *)(a2 + 8) = v18 + 24;
      }
      if (!--v6)
        break;
      v3 = (const char *)(v14 + 1);
    }
    while ((unint64_t)(v14 + 1) < v5);
  }
}

void sub_2083AC2CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::__split_buffer<std::string> *a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::RewriteRules::rewrite()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  const char *v10;
  int v11;
  const char *v12;
  size_t v13;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  const char *v21;
  char *v22;
  size_t v23;
  unint64_t v24;
  char *v25;
  char **v26;
  char *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  std::string::value_type *v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  std::string::value_type *v45;
  uint64_t v46;
  signed __int8 v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  std::string::size_type v60;
  unint64_t v61;
  BOOL v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  const std::string::value_type *v67;
  std::string::size_type v68;
  _QWORD *v69;
  uint64_t v70;
  std::string::value_type *v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char v76;
  _BYTE v77[32];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  char v108[8192];
  uint64_t v109;

  v0 = (uint64_t *)MEMORY[0x24BDAC7A8]();
  v74 = v2;
  v75 = v3;
  v109 = *MEMORY[0x24BDAC8D0];
  v4 = *v0;
  v72 = v0;
  if (v0[1] == *v0)
    return 0;
  v70 = v1;
  v5 = 0;
  while (1)
  {
    v6 = (uint64_t *)(v4 + 48 * v5);
    v8 = *v6;
    v7 = v6[1];
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - *v6) >> 3) <= v74)
      break;
LABEL_4:
    ++v5;
    v4 = *v72;
    if (v5 >= 0xAAAAAAAAAAAAAAABLL * ((v72[1] - *v72) >> 4))
      return 0;
  }
  if (v7 != v8)
  {
    for (i = 0; i < 0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 3); ++i)
    {
      v10 = (const char *)(v8 + 24 * i);
      if (v10[23] < 0)
        v10 = *(const char **)v10;
      v11 = *(unsigned __int8 *)v10;
      if (v11 != 42)
      {
        v12 = *(const char **)(v75 + 8 * i);
        if (strcmp(v10, v12))
        {
          v13 = strlen(v10);
          if (v11 != 40 || v13 < 3)
            goto LABEL_4;
          v15 = v13;
          if (v10[v13 - 1] != 41)
            goto LABEL_4;
          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v102 = 0u;
          v103 = 0u;
          v100 = 0u;
          v101 = 0u;
          v98 = 0u;
          v99 = 0u;
          v96 = 0u;
          v97 = 0u;
          v94 = 0u;
          v95 = 0u;
          v92 = 0u;
          v93 = 0u;
          v90 = 0u;
          v91 = 0u;
          v88 = 0u;
          v89 = 0u;
          v86 = 0u;
          v87 = 0u;
          v84 = 0u;
          v85 = 0u;
          v82 = 0u;
          v83 = 0u;
          v80 = 0u;
          v81 = 0u;
          v78 = 0u;
          v79 = 0u;
          memset(v77, 0, sizeof(v77));
          if (v13 >= 0x1FFD)
          {
            v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_rewriter.cpp", 73);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"(", 1);
            v17 = (_QWORD *)std::ostream::operator<<();
            v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)") [", 3);
            v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"len < sizeof(buf) - 3", 21);
            v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"] ", 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"too long parameter", 18);
            MeCab::die::~die((MeCab::die *)&v76);
          }
          v21 = v10 + 1;
          v22 = v108;
          strncpy(v108, v21, 0x2000uLL);
          v108[v15 - 2] = 0;
          v23 = strlen(v108);
          v24 = 0;
          v25 = &v108[v23];
          v26 = (char **)v77;
          while (v22 != v25)
          {
            v27 = v22;
            while (*v27 != 124)
            {
              if (++v27 == v25)
                goto LABEL_29;
            }
            *v27 = 0;
            *v26++ = v22;
            ++v24;
            v22 = v27 + 1;
            if (v24 == 0x10000)
              goto LABEL_30;
          }
          v22 = &v108[v23];
LABEL_29:
          *v25 = 0;
          *v26 = v22;
          if (v24 >= 0xFFFF)
          {
LABEL_30:
            v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_rewriter.cpp", 73);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"(", 1);
            v29 = (_QWORD *)std::ostream::operator<<();
            v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)") [", 3);
            v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"n < sizeof(col)", 15);
            v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"] ", 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"too long OR nodes", 17);
            MeCab::die::~die((MeCab::die *)&v76);
          }
          v33 = 0;
          v34 = 8 * (v24 + 1);
          while (strcmp(v12, *(const char **)&v77[v33]))
          {
            v33 += 8;
            if (v34 == v33)
              goto LABEL_4;
          }
          v8 = *v6;
          v7 = v6[1];
        }
      }
    }
  }
  if (*(char *)(v70 + 23) < 0)
  {
    **(_BYTE **)v70 = 0;
    *(_QWORD *)(v70 + 8) = 0;
  }
  else
  {
    *(_BYTE *)v70 = 0;
    *(_BYTE *)(v70 + 23) = 0;
  }
  v36 = v4 + 48 * v5;
  v39 = *(_QWORD *)(v36 + 24);
  v38 = (uint64_t *)(v36 + 24);
  v37 = v39;
  if (v38[1] != v39)
  {
    v40 = 0;
    v69 = v38 + 1;
    do
    {
      memset(v77, 0, 24);
      v41 = (std::string::value_type *)(v37 + 24 * v40);
      if (v41[23] < 0)
      {
        v41 = *(std::string::value_type **)v41;
        v42 = *(_QWORD *)(v37 + 24 * v40 + 8);
      }
      else
      {
        v42 = v41[23];
      }
      if (v42 >= 1)
      {
        v43 = (unint64_t)&v41[v42];
        v71 = &v41[v42];
        v73 = (uint64_t)&v41[v42 - 2];
        do
        {
          v44 = *v41;
          if (v44 == 36)
          {
            v45 = v41 + 1;
            if ((unint64_t)(v41 + 1) >= v43 || (v41[1] - 48) > 9)
              goto LABEL_56;
            v46 = 0;
            v47 = v41[1];
            v48 = v73 - (_QWORD)v41;
            while (1)
            {
              v46 = 10 * v46 + v47 - 48;
              if (!v48)
                break;
              v47 = *++v45;
              --v48;
              if ((*v45 - 48) > 9)
                goto LABEL_68;
            }
            v45 = v71;
LABEL_68:
            v61 = v46 - 1;
            v62 = !v46 || v61 >= v74;
            v41 = v45;
            if (v62)
            {
LABEL_56:
              v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_rewriter.cpp", 73);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"(", 1);
              v50 = (_QWORD *)std::ostream::operator<<();
              v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)") [", 3);
              v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"n > 0 && (n - 1) < size", 23);
              v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"] ", 2);
              v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" out of range: [", 16);
              v55 = *v38 + 24 * v40;
              v56 = *(char *)(v55 + 23);
              if (v56 >= 0)
                v57 = *v38 + 24 * v40;
              else
                v57 = *(_QWORD *)v55;
              if (v56 >= 0)
                v58 = *(unsigned __int8 *)(v55 + 23);
              else
                v58 = *(_QWORD *)(v55 + 8);
              v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, v57, v58);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"] ", 2);
              std::ostream::operator<<();
              MeCab::die::~die((MeCab::die *)v108);
            }
            v60 = strlen(*(const char **)(v75 + 8 * v61));
            std::string::append((std::string *)v77, *(const std::string::value_type **)(v75 + 8 * v61), v60);
            if ((unint64_t)v45 < v43)
              std::string::push_back((std::string *)v77, *v45);
          }
          else
          {
            std::string::push_back((std::string *)v77, v44);
          }
          ++v41;
        }
        while ((unint64_t)v41 < v43);
      }
      if ((MeCab::escape_csv_element((std::string *)v77) & 1) == 0)
      {
        v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_rewriter.cpp", 73);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"(", 1);
        v64 = (_QWORD *)std::ostream::operator<<();
        v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)") [", 3);
        v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"escape_csv_element(&elm)", 24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"] ", 2);
        MeCab::die::~die((MeCab::die *)v108);
      }
      if (v77[23] >= 0)
        v67 = v77;
      else
        v67 = *(const std::string::value_type **)v77;
      if (v77[23] >= 0)
        v68 = v77[23];
      else
        v68 = *(_QWORD *)&v77[8];
      std::string::append((std::string *)v70, v67, v68);
      if (++v40 != 0xAAAAAAAAAAAAAAABLL * ((*v69 - *v38) >> 3))
        std::string::append((std::string *)v70, ",", 1uLL);
      if ((v77[23] & 0x80000000) != 0)
        operator delete(*(void **)v77);
      v37 = *v38;
    }
    while (v40 < 0xAAAAAAAAAAAAAAABLL * ((*v69 - *v38) >> 3));
  }
  return 1;
}

void sub_2083AC9E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  MeCab::die::~die((MeCab::die *)&a19);
}

void sub_2083AC9F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Exception *v22;

  _Unwind_Resume(v22);
}

uint64_t MeCab::DictionaryRewriter::open(MeCab::DictionaryRewriter *this, const char *a2, MeCab::Iconv *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  size_t v12;
  uint64_t v13;
  std::locale::id *v14;
  uint64_t v15;
  const std::locale::facet *v16;
  unsigned __int8 v17;
  _QWORD *v18;
  std::string *p_p;
  std::string::size_type size;
  std::string *v21;
  std::string::size_type v22;
  std::string::size_type v23;
  int v24;
  BOOL v25;
  BOOL v26;
  std::string *v27;
  std::string::size_type v28;
  uint64_t v29;
  BOOL v30;
  std::string *v31;
  std::string::size_type v32;
  uint64_t v33;
  BOOL v34;
  std::string *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  std::string __p;
  std::locale v43;
  _QWORD v44[2];
  _BYTE v45[408];
  _QWORD v46[21];

  v46[19] = *MEMORY[0x24BDAC8D0];
  std::ifstream::basic_ifstream(v44);
  if ((v45[*(_QWORD *)(v44[0] - 24) + 16] & 5) != 0)
  {
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_rewriter.cpp", 73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") [", 3);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"ifs", 3);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"] ", 2);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"no such file or directory: ", 27);
    v12 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)a2, v12);
    MeCab::die::~die((MeCab::die *)&__p);
  }
  v13 = 0;
  v14 = (std::locale::id *)MEMORY[0x24BEDB350];
  memset(&__p, 0, sizeof(__p));
LABEL_4:
  v15 = v13;
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(_QWORD *)(v44[0] - 24)));
    v16 = std::locale::use_facet(&v43, v14);
    v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v43);
    v18 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v44, (uint64_t)&__p, v17);
    if ((*((_BYTE *)v18 + *(_QWORD *)(*v18 - 24) + 32) & 5) != 0)
      break;
    if (a3)
      MeCab::Iconv::convert((uint64_t)a3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_)
      {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        goto LABEL_13;
      }
    }
    else if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
    {
      p_p = &__p;
LABEL_13:
      if (p_p->__r_.__value_.__s.__data_[0] != 35)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        switch(size)
        {
          case 0xEuLL:
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v27 = &__p;
            else
              v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
            v28 = v27->__r_.__value_.__r.__words[0];
            v29 = *(std::string::size_type *)((char *)v27->__r_.__value_.__r.__words + 6);
            v30 = v28 == 0x6572207466656C5BLL && v29 == 0x5D65746972776572;
            v13 = 2;
            if (v30)
              goto LABEL_4;
            break;
          case 0xFuLL:
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v31 = &__p;
            else
              v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
            v32 = v31->__r_.__value_.__r.__words[0];
            v33 = *(std::string::size_type *)((char *)v31->__r_.__value_.__r.__words + 7);
            v34 = v32 == 0x722074686769725BLL && v33 == 0x5D65746972776572;
            v13 = 3;
            if (v34)
              goto LABEL_4;
            break;
          case 0x11uLL:
            v21 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &__p
                : (std::string *)__p.__r_.__value_.__r.__words[0];
            v22 = v21->__r_.__value_.__r.__words[0];
            v23 = v21->__r_.__value_.__l.__size_;
            v24 = v21->__r_.__value_.__s.__data_[16];
            v25 = v22 == 0x6D617267696E755BLL && v23 == 0x6574697277657220;
            v26 = v25 && v24 == 93;
            v13 = 1;
            if (v26)
              goto LABEL_4;
            break;
        }
        if (!(_DWORD)v15)
        {
          v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_rewriter.cpp", 73);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"(", 1);
          v37 = (_QWORD *)std::ostream::operator<<();
          v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)") [", 3);
          v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"append_to != 0", 14);
          v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"] ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"no sections found", 17);
          MeCab::die::~die((MeCab::die *)&v43);
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v35 = &__p;
        else
          v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((_DWORD)v15 == 1)
        {
          v13 = 1;
        }
        else if ((_DWORD)v15 == 2)
        {
          v13 = 2;
        }
        else
        {
          v13 = v15;
        }
        goto LABEL_4;
      }
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v44[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v44 + *(_QWORD *)(v44[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x20BD061F8](v45);
  std::istream::~istream();
  MEMORY[0x20BD06354](v46);
  return 1;
}

void sub_2083ACE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16)
{
  if (a14 < 0)
    operator delete(__p);
  std::ifstream::~ifstream(&a16);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::append_rewrite_rule(_QWORD *a1, char *__s)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t i;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  size_t v15;
  uint64_t v16;
  const char **v17;
  std::string *v18;
  std::string::size_type v19;
  std::string v20;
  void *__p;
  void *v22;
  uint64_t v23;
  void **p_p;

  __p = 0;
  v22 = 0;
  v23 = 0;
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)__s;
  v4 = 0;
  v5 = &__s[strlen(__s)];
  v6 = __s;
  while (1)
  {
    v7 = v5;
    if (v6 != v5)
    {
      while (2)
      {
        for (i = 0; i != 2; ++i)
        {
          if (*v6 == asc_2083DFEE5[i])
          {
            v7 = v6;
            goto LABEL_9;
          }
        }
        if (++v6 != v5)
          continue;
        break;
      }
      v7 = v5;
    }
LABEL_9:
    *v7 = 0;
    if (*v20.__r_.__value_.__l.__data_)
    {
      p_p = &__p;
      std::back_insert_iterator<std::vector<char *>>::operator=[abi:ne180100](&p_p, &v20);
      ++v4;
    }
    if (v7 == v5)
      break;
    v6 = v7 + 1;
    v20.__r_.__value_.__r.__words[0] = (std::string::size_type)(v7 + 1);
    if (v4 >= 3)
      goto LABEL_16;
  }
  if (v4 <= 1)
  {
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_rewriter.cpp", 73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"(", 1);
    v10 = (_QWORD *)std::ostream::operator<<();
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"n >= 2", 6);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"] ", 2);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"format error: ", 14);
    v15 = strlen(__s);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)__s, v15);
    MeCab::die::~die((MeCab::die *)&v20);
  }
LABEL_16:
  std::vector<MeCab::RewritePattern>::resize((uint64_t)a1, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 4) + 1);
  memset(&v20, 0, sizeof(v20));
  v17 = (const char **)__p;
  v18 = (std::string *)*((_QWORD *)__p + 1);
  if (v4 >= 3)
  {
    std::string::__assign_external(&v20, *((const std::string::value_type **)__p + 1));
    std::string::push_back(&v20, 32);
    v19 = strlen(*((const char **)__p + 2));
    std::string::append(&v20, *((const std::string::value_type **)__p + 2), v19);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v20;
    else
      v18 = (std::string *)v20.__r_.__value_.__r.__words[0];
    v17 = (const char **)__p;
    *((_QWORD *)__p + 1) = v18;
  }
  MeCab::RewritePattern::set_pattern((MeCab::RewritePattern *)(a1[1] - 48), *v17, (const char *)v18, v16);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
}

void sub_2083AD120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::DictionaryRewriter::rewrite()
{
  uint64_t v0;
  const char *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  int64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char **v11;
  uint64_t v12;
  unint64_t v13;
  char *i;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t result;
  char v30;
  _OWORD v31[4096];
  char v32[8192];
  uint64_t v33;

  MEMORY[0x24BDAC7A8]();
  v1 = (const char *)v0;
  v33 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(v0 + 23) < 0)
  {
    if (*(_QWORD *)(v0 + 8) >= 0x1FFFuLL)
    {
      v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_rewriter.cpp", 73);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"(", 1);
      v3 = (_QWORD *)std::ostream::operator<<();
      v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") [", 3);
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"feature.size() < sizeof(buf) - 1", 32);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"too long feature", 16);
      MeCab::die::~die((MeCab::die *)&v30);
    }
    v1 = *(const char **)v0;
  }
  memset(v31, 0, 512);
  strncpy(v32, v1, 0x1FFFuLL);
  v7 = strlen(v32);
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = &v32[v7];
    v10 = v32;
    v11 = (char **)v31;
    v12 = 0x10000;
    do
    {
      v13 = v12;
      for (i = v10; ; ++i)
      {
        v15 = *i;
        if (v15 != 9 && v15 != 32)
          break;
        ++v10;
      }
      if (v15 == 34)
      {
        v16 = (unsigned __int8 *)++i;
        v17 = (unsigned __int8 *)i;
        if (i < v9)
        {
          v16 = (unsigned __int8 *)i;
          v17 = (unsigned __int8 *)i;
          do
          {
            v18 = *v17;
            if (v18 == 34)
            {
              v19 = *++v17;
              if (v19 != 34)
                break;
            }
            *v16++ = v18;
            ++v17;
          }
          while (v17 < (unsigned __int8 *)v9);
        }
        v20 = (char *)memchr(v17, 44, v9 - (char *)v17);
        if (v20)
          v21 = v20;
        else
          v21 = v9;
      }
      else
      {
        v22 = (char *)memchr(i, 44, v9 - v10);
        if (v22)
          v23 = v22;
        else
          v23 = v9;
        v21 = &i[v23 - v10];
        v16 = (unsigned __int8 *)v21;
      }
      v12 = v13 - 1;
      if (v13 < 2)
      {
        *v11 = i;
        ++v8;
        if (v13 == 1)
          break;
      }
      else
      {
        *v16 = 0;
        *v11 = i;
        ++v8;
      }
      ++v11;
      v10 = v21 + 1;
    }
    while (v21 + 1 < v9);
    if (v8 >= 0x10000)
    {
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_rewriter.cpp", 73);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
      v25 = (_QWORD *)std::ostream::operator<<();
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)") [", 3);
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"n < sizeof(col)", 15);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"too long CSV entities", 21);
      MeCab::die::~die((MeCab::die *)&v30);
    }
  }
  result = MeCab::RewriteRules::rewrite();
  if ((_DWORD)result)
  {
    result = MeCab::RewriteRules::rewrite();
    if ((_DWORD)result)
      return MeCab::RewriteRules::rewrite();
  }
  return result;
}

void sub_2083AD4E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  MeCab::die::~die((MeCab::die *)&a13);
}

uint64_t MeCab::DictionaryRewriter::rewrite2(uint64_t a1, void **a2, std::string *a3, std::string *a4, std::string *a5)
{
  uint64_t **v10;
  void **v11;
  void **v12;
  uint64_t result;
  std::string v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *__p;
  char v20;
  _BYTE v21[32];
  __int128 v22;
  std::string v23;

  v10 = (uint64_t **)(a1 + 72);
  v11 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>(a1 + 72, a2);
  if ((void **)(a1 + 80) != v11)
  {
    v12 = v11;
    std::string::operator=(a3, (const std::string *)(v11 + 7));
    std::string::operator=(a4, (const std::string *)(v12 + 10));
    std::string::operator=(a5, (const std::string *)(v12 + 13));
    return 1;
  }
  result = MeCab::DictionaryRewriter::rewrite();
  if ((_DWORD)result)
  {
    v22 = 0u;
    memset(&v23, 0, sizeof(v23));
    memset(v21, 0, sizeof(v21));
    std::string::operator=((std::string *)v21, a3);
    std::string::operator=((std::string *)&v21[24], a4);
    std::string::operator=(&v23, a5);
    std::pair<std::string,MeCab::FeatureSet>::pair[abi:ne180100]<std::string const&,MeCab::FeatureSet&,0>(&v14, (__int128 *)a2, (__int128 *)v21);
    std::__tree<std::__value_type<std::string,MeCab::FeatureSet>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::FeatureSet>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::FeatureSet>>>::__emplace_unique_key_args<std::string,std::pair<std::string,MeCab::FeatureSet>>(v10, (void **)&v14.__r_.__value_.__l.__data_, (uint64_t)&v14);
    if (v20 < 0)
      operator delete(__p);
    if (v18 < 0)
      operator delete(v17);
    if (v16 < 0)
      operator delete(v15);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    if (SHIBYTE(v22) < 0)
      operator delete(*(void **)&v21[24]);
    if ((v21[23] & 0x80000000) != 0)
      operator delete(*(void **)v21);
    return 1;
  }
  return result;
}

void sub_2083AD680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  std::pair<std::string,MeCab::FeatureSet>::~pair((uint64_t)&a9);
  MeCab::FeatureSet::~FeatureSet(&a21);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,MeCab::FeatureSet>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void MeCab::FeatureSet::~FeatureSet(void **this)
{
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t MeCab::POSIDGenerator::open(MeCab::POSIDGenerator *this, const char *a2, MeCab::Iconv *a3, unint64_t *a4)
{
  size_t v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  uint64_t v11;
  const std::locale::facet *v12;
  unsigned __int8 v13;
  _QWORD *v14;
  MeCab::POSIDGenerator *v15;
  std::string *v16;
  unint64_t v17;
  std::string *v18;
  std::string *v19;
  uint64_t i;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  std::string *v27;
  std::string::size_type size;
  _BYTE *v29;
  int v30;
  unsigned __int8 *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  size_t v38;
  int v39;
  uint64_t v40;
  unint64_t *v42;
  void *__p;
  void *v45;
  uint64_t v46;
  std::string v47;
  void **p_p;
  std::locale v49;
  _QWORD v50[2];
  _BYTE v51[408];
  _QWORD v52[21];

  v52[19] = *MEMORY[0x24BDAC8D0];
  std::ifstream::basic_ifstream(v50);
  if ((v51[*(_QWORD *)(v50[0] - 24) + 16] & 5) != 0)
  {
    v7 = strlen(a2);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)a2, v7);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" is not found. minimum setting is used", 38);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
    v10 = std::locale::use_facet((const std::locale *)&v47, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale((std::locale *)&v47);
    std::ostream::put();
    std::ostream::flush();
    std::vector<MeCab::RewritePattern>::resize((uint64_t)this, 1uLL);
    MeCab::RewritePattern::set_pattern((MeCab::RewritePattern *)(*((_QWORD *)this + 1) - 48), "*", "1", v11);
  }
  else
  {
    memset(&v47, 0, sizeof(v47));
    __p = 0;
    v45 = 0;
    v46 = 0;
    v42 = a4;
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v50 + *(_QWORD *)(v50[0] - 24)));
      v12 = std::locale::use_facet(&v49, MEMORY[0x24BEDB350]);
      v13 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
      std::locale::~locale(&v49);
      v14 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v50, (uint64_t)&v47, v13);
      if ((*((_BYTE *)v14 + *(_QWORD *)(*v14 - 24) + 32) & 5) != 0)
        break;
      v45 = __p;
      if (a3)
        MeCab::Iconv::convert((uint64_t)a3, &v47);
      v15 = this;
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = &v47;
      else
        v16 = (std::string *)v47.__r_.__value_.__r.__words[0];
      v49.__locale_ = (std::locale::__imp *)v16;
      v17 = 0;
      v18 = (std::string *)((char *)v16 + strlen((const char *)v16));
      do
      {
        v19 = v18;
        if (v16 != v18)
        {
          while (2)
          {
            for (i = 0; i != 2; ++i)
            {
              if (v16->__r_.__value_.__s.__data_[0] == asc_2083DFEE5[i])
              {
                v19 = v16;
                goto LABEL_18;
              }
            }
            v16 = (std::string *)((char *)v16 + 1);
            if (v16 != v18)
              continue;
            break;
          }
          v19 = v18;
        }
LABEL_18:
        v19->__r_.__value_.__s.__data_[0] = 0;
        if (*(_BYTE *)v49.__locale_)
        {
          p_p = &__p;
          std::back_insert_iterator<std::vector<char *>>::operator=[abi:ne180100](&p_p, &v49);
          ++v17;
        }
        if (v19 == v18)
          break;
        v16 = (std::string *)((char *)&v19->__r_.__value_.__l.__data_ + 1);
        v49.__locale_ = (std::locale::__imp *)((char *)&v19->__r_.__value_.__l.__data_ + 1);
      }
      while (v17 < 2);
      this = v15;
      if (v17 != 2)
      {
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_rewriter.cpp", 73);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"(", 1);
        v22 = (_QWORD *)std::ostream::operator<<();
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)") [", 3);
        v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"n == 2", 6);
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
        v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"format error: ", 14);
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v27 = &v47;
        else
          v27 = (std::string *)v47.__r_.__value_.__r.__words[0];
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
        else
          size = v47.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, size);
        MeCab::die::~die((MeCab::die *)&v49);
      }
      v29 = (_BYTE *)*((_QWORD *)__p + 1);
      v30 = *v29;
      if (*v29)
      {
        v31 = v29 + 1;
        do
        {
          if ((v30 - 48) >= 0xA)
          {
            v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_rewriter.cpp", 73);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"(", 1);
            v33 = (_QWORD *)std::ostream::operator<<();
            v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)") [", 3);
            v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"*p >= '0' && *p <= '9'", 22);
            v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"] ", 2);
            v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"not a number: ", 14);
            v38 = strlen(*((const char **)__p + 1));
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, *((_QWORD *)__p + 1), v38);
            MeCab::die::~die((MeCab::die *)&v49);
          }
          v39 = *v31++;
          v30 = v39;
        }
        while (v39);
      }
      std::vector<MeCab::RewritePattern>::resize((uint64_t)v15, 1 - 0x5555555555555555 * ((uint64_t)(*((_QWORD *)v15 + 1) - *(_QWORD *)v15) >> 4));
      MeCab::RewritePattern::set_pattern((MeCab::RewritePattern *)(*((_QWORD *)v15 + 1) - 48), *(const char **)__p, *((const char **)__p + 1), v40);
    }
    if (v42)
      *v42 = 0xAAAAAAAAAAAAAAABLL
           * ((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 1) - 40) - *(_QWORD *)(*((_QWORD *)this + 1) - 48)) >> 3);
    if (__p)
    {
      v45 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
  }
  v50[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v50 + *(_QWORD *)(v50[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x20BD061F8](v51);
  std::istream::~istream();
  MEMORY[0x20BD06354](v52);
  return 1;
}

void sub_2083ADC38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::locale a23,char a24)
{
  _Unwind_Resume(exception_object);
}

void std::vector<MeCab::RewritePattern>::resize(uint64_t a1, unint64_t a2)
{
  void **v3;
  void **v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void **v19;
  void **v20;
  void **v21;
  void **v22;

  v4 = *(void ***)a1;
  v3 = *(void ***)(a1 + 8);
  v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(_QWORD *)a1) >> 4);
  v6 = a2 - v5;
  if (a2 > v5)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v3) >> 4) >= v6)
    {
      bzero(*(void **)(a1 + 8), 48 * ((48 * v6 - 48) / 0x30) + 48);
      *(_QWORD *)(a1 + 8) = &v3[6 * ((48 * v6 - 48) / 0x30) + 6];
      return;
    }
    if (a2 > 0x555555555555555)
      std::vector<char *>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v4) >> 4);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    if (v8 >= 0x2AAAAAAAAAAAAAALL)
      v10 = 0x555555555555555;
    else
      v10 = v9;
    if (v10 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v11 = 3 * v10;
    v12 = (char *)operator new(48 * v10);
    v13 = &v12[48 * v5];
    v14 = &v12[16 * v11];
    v15 = 48 * ((48 * v6 - 48) / 0x30) + 48;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v3 == v4)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (!v3)
        return;
    }
    else
    {
      v17 = 0;
      do
      {
        v18 = &v13[v17 * 8];
        v19 = &v3[v17];
        *((_OWORD *)v18 - 3) = *(_OWORD *)&v3[v17 - 6];
        *((_QWORD *)v18 - 4) = v3[v17 - 4];
        *(v19 - 6) = 0;
        *(v19 - 5) = 0;
        *(v19 - 4) = 0;
        *(_OWORD *)(v18 - 24) = *(_OWORD *)&v3[v17 - 3];
        *((_QWORD *)v18 - 1) = v3[v17 - 1];
        *(v19 - 3) = 0;
        *(v19 - 2) = 0;
        *(v19 - 1) = 0;
        v17 -= 6;
      }
      while (&v3[v17] != v4);
      v3 = *(void ***)a1;
      v20 = *(void ***)(a1 + 8);
      *(_QWORD *)a1 = &v13[v17 * 8];
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v20 != v3)
      {
        do
        {
          v21 = v20 - 6;
          v22 = v20 - 3;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v22);
          v22 = v21;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v22);
          v20 = v21;
        }
        while (v21 != v3);
      }
      if (!v3)
        return;
    }
    operator delete(v3);
    return;
  }
  if (a2 < v5)
    std::vector<MeCab::RewritePattern>::__base_destruct_at_end[abi:ne180100](a1, &v4[6 * a2]);
}

uint64_t MeCab::POSIDGenerator::id(MeCab::POSIDGenerator *this, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v4;
  const char *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char **v15;
  uint64_t v16;
  unint64_t v17;
  char *i;
  int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *__p[3];
  _BYTE v36[65536];
  char v37[8192];
  uint64_t v38;

  MEMORY[0x24BDAC7A8](this, a2, a3, a4);
  v5 = v4;
  v38 = *MEMORY[0x24BDAC8D0];
  bzero(v36, 0x10000uLL);
  if (strlen(v5) >= 0x1FFF)
  {
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_rewriter.cpp", 73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") [", 3);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"std::strlen(feature) < sizeof(buf) - 1", 38);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"too long feature", 16);
    MeCab::die::~die((MeCab::die *)__p);
  }
  strncpy(v37, v5, 0x1FFFuLL);
  v11 = strlen(v37);
  if (v11 >= 1)
  {
    v12 = 0;
    v13 = &v37[v11];
    v14 = v37;
    v15 = (char **)v36;
    v16 = 0x10000;
    do
    {
      v17 = v16;
      for (i = v14; ; ++i)
      {
        v19 = *i;
        if (v19 != 9 && v19 != 32)
          break;
        ++v14;
      }
      if (v19 == 34)
      {
        v20 = (unsigned __int8 *)++i;
        v21 = (unsigned __int8 *)i;
        if (i < v13)
        {
          v20 = (unsigned __int8 *)i;
          v21 = (unsigned __int8 *)i;
          do
          {
            v22 = *v21;
            if (v22 == 34)
            {
              v23 = *++v21;
              if (v23 != 34)
                break;
            }
            *v20++ = v22;
            ++v21;
          }
          while (v21 < (unsigned __int8 *)v13);
        }
        v24 = (char *)memchr(v21, 44, v13 - (char *)v21);
        if (v24)
          v25 = v24;
        else
          v25 = v13;
      }
      else
      {
        v26 = (char *)memchr(i, 44, v13 - v14);
        if (v26)
          v27 = v26;
        else
          v27 = v13;
        v25 = &i[v27 - v14];
        v20 = (unsigned __int8 *)v25;
      }
      v16 = v17 - 1;
      if (v17 < 2)
      {
        *v15 = i;
        ++v12;
        if (v17 == 1)
          break;
      }
      else
      {
        *v20 = 0;
        *v15 = i;
        ++v12;
      }
      ++v15;
      v14 = v25 + 1;
    }
    while (v25 + 1 < v13);
    if (v12 >= 0x10000)
    {
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_rewriter.cpp", 73);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"(", 1);
      v29 = (_QWORD *)std::ostream::operator<<();
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)") [", 3);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"n < sizeof(col)", 15);
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"too long CSV entities", 21);
      MeCab::die::~die((MeCab::die *)__p);
    }
  }
  memset(__p, 0, sizeof(__p));
  if ((MeCab::RewriteRules::rewrite() & 1) != 0)
    return atoi((const char *)__p);
  else
    return 0xFFFFFFFFLL;
}

void sub_2083AE208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string,MeCab::FeatureSet>::pair[abi:ne180100]<std::string const&,MeCab::FeatureSet&,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v7 = *(__int128 *)((char *)a3 + 24);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 5);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  }
  v8 = this + 3;
  if (*((char *)a3 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a3 + 6), *((_QWORD *)a3 + 7));
  }
  else
  {
    v9 = a3[3];
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 8);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return this;
}

void sub_2083AE318(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

_OWORD *std::__tree<std::__value_type<std::string,MeCab::FeatureSet>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::FeatureSet>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::FeatureSet>>>::__emplace_unique_key_args<std::string,std::pair<std::string,MeCab::FeatureSet>>(uint64_t **a1, void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  __int128 v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;

  v5 = (void **)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x80uLL);
    v10[1] = a1 + 1;
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *((_QWORD *)v6 + 9) = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    *((_QWORD *)v6 + 12) = *(_QWORD *)(a3 + 64);
    v6[5] = *(_OWORD *)(a3 + 48);
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    v8 = *(_OWORD *)(a3 + 72);
    *((_QWORD *)v6 + 15) = *(_QWORD *)(a3 + 88);
    *(_OWORD *)((char *)v6 + 104) = v8;
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    *(_QWORD *)(a3 + 80) = 0;
    *(_QWORD *)(a3 + 88) = 0;
    v11 = 1;
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__insert_node_at(a1, v12, v7, (uint64_t *)v6);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,MeCab::FeatureSet>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MeCab::FeatureSet>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,MeCab::FeatureSet>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MeCab::FeatureSet>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,MeCab::FeatureSet>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

unint64_t `anonymous namespace'::__btrie_insert_fat(unint64_t result, int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  int v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unsigned int *v14;
  _DWORD *v15;
  unsigned int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  size_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char *v26;

  v6 = *(_QWORD *)(result + 56);
  v7 = (4 * a2);
  v8 = (unsigned int *)(v6 + v7);
  if (!(_DWORD)a4)
  {
LABEL_20:
    *v8 = a5;
    return result;
  }
  v9 = a4;
  v10 = (unsigned __int8 *)a3;
  v11 = result;
  v12 = (unint64_t *)(result + 64);
  while (1)
  {
    v13 = *v10;
    v14 = &v8[v13];
    v16 = v14[1];
    v15 = v14 + 1;
    v17 = v16 & 3;
    v18 = (unint64_t)v16 >> 2;
    if (v17 != 3)
      break;
    result = v18 | 0x300000000;
    ++v10;
    LODWORD(v20) = v9 - 1;
LABEL_19:
    v7 = (4 * result);
    v8 = (unsigned int *)(v6 + v7);
    v9 = v20;
    if (!(_DWORD)v20)
      goto LABEL_20;
  }
  if (v17 == 1)
  {
    v19 = 0x100000000;
  }
  else
  {
    if (v17)
      return result;
    if (*(_QWORD *)(v11 + 80) != *(_QWORD *)(v11 + 72))
      *(_QWORD *)(v11 + 72) = (*(_QWORD *)(v11 + 80) & 0xFFFFFFFCLL)
                            + *(unsigned int *)(*(_QWORD *)(v11 + 120) + (*(_QWORD *)(v11 + 80) & 0xFFFFFFFCLL))
                            + 4;
    if (result == -1)
      v18 = 0;
    else
      v18 = (result >> 2) | 0x100000000;
    *v15 = HIDWORD(v18) | (4 * v18);
    v19 = v18 & 0x100000000;
    v18 = v18;
  }
  v21 = (int *)(*(_QWORD *)(v11 + 120) + (4 * v18));
  v20 = (v9 - 1);
  if (v9 == 1)
  {
    v21[1] = a5;
    v25 = 4;
    goto LABEL_23;
  }
  v22 = *v21;
  if (!(_DWORD)v22)
  {
    *(_QWORD *)v21 = 4;
    v22 = 4;
  }
  ++v10;
  v23 = (v9 + 4);
  v24 = v22 + 4;
  if (v24 + v23 >= (unint64_t)*(unsigned int *)(v11 + 200))
  {
    v6 = *(_QWORD *)(v11 + 56);
    *(_DWORD *)(v6 + v7 + 4 * v13 + 4) = HIDWORD(result) | (4 * result);
    goto LABEL_19;
  }
  *((_BYTE *)v21 + v24) = v20;
  v26 = (char *)v21 + v24 + 1;
  result = (unint64_t)memcpy(v26, v10, v20);
  *(_DWORD *)&v26[v20] = a5;
  v25 = *v21 + v23;
LABEL_23:
  *v21 = v25;
  return result;
}

uint64_t btrie_build(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  void *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  void *v34;
  size_t v35;
  size_t __n;
  uint64_t v37;
  int v38;
  void *__src;
  size_t v40;
  size_t size;
  uint64_t v42;
  int v43;
  uint64_t v44;
  __int128 v45;
  void *ptr;
  uint64_t v47;
  unsigned int v48;

  v5 = 1;
  if (a1)
  {
    v6 = a2;
    if (a2)
    {
      v7 = a3;
      if (a3)
      {
        v8 = a4;
        if (a4)
        {
          v48 = 1024;
          v31 = 0;
          v32 = 0;
          v30 = 0x10000;
          v34 = malloc_type_malloc(0x10000uLL, 0xC3836601uLL);
          v33 = 0;
          bzero(v34, 0x10000uLL);
          __n = 0;
          v37 = 0;
          v35 = 0x10000;
          __src = malloc_type_malloc(0x10000uLL, 0xC3836601uLL);
          v38 = 0;
          bzero(__src, 0x10000uLL);
          size = 0;
          v42 = 0;
          v40 = *(_QWORD *)(a1 + 40);
          v11 = *(void **)(a1 + 8);
          v45 = *(_OWORD *)(a1 + 56);
          v44 = a1 + 48;
          ptr = v11;
          v43 = 1;
          bzero(v11, v40);
          v13 = (v12 >> 2) | 0x300000000;
          if (v12 == -1)
            v13 = 0;
          v47 = v13;
          while (1)
          {
            v15 = *v8++;
            v14 = v15;
            if ((unint64_t)(v15 - 257) <= 0xFFFFFFFFFFFFFEFFLL)
              break;
            v17 = *v7++;
            v16 = v17;
            LODWORD(v17) = *a5++;
            if (!--v6)
            {
              v30 = v31;
              v35 = (v37 & 0xFFFFFFFC)
                  + (unint64_t)*(unsigned int *)((char *)__src + (v37 & 0xFFFFFFFC))
                  + 4;
              __n = v35;
              v20 = size;
              if (v21 == -1)
              {
                v5 = 0xFFFFFFFFLL;
              }
              else
              {
                v22 = v21;
                memcpy((char *)ptr + v21, __src, __n);
                v23 = HIDWORD(v19) + 4 * v19;
                v24 = ptr;
                v25 = (char *)ptr + v18;
                *v25 = 1;
                v25[1] = v23;
                v25[2] = v20;
                v25[3] = v22;
                v26 = __n;
                v25[4] = __n;
                v27 = v48;
                v25[5] = v48;
                *(_DWORD *)a1 = v23;
                *(_QWORD *)(a1 + 24) = v26;
                *(_QWORD *)(a1 + 32) = v27;
                v40 = size;
                if ((_QWORD)v45)
                  v28 = (char *)((uint64_t (*)(void))v45)();
                else
                  v28 = (char *)malloc_type_realloc(v24, size, 0x21AF457BuLL);
                v5 = 0;
                ptr = v28;
                *(_QWORD *)(a1 + 8) = v28;
                *(_QWORD *)(a1 + 16) = &v28[v22];
              }
              if (v34)
                free(v34);
              if (__src)
                free(__src);
              return v5;
            }
          }
          if (v34)
            free(v34);
          if (__src)
            free(__src);
          return 0xFFFFFFFFLL;
        }
      }
    }
  }
  return v5;
}

uint64_t `anonymous namespace'::__btrie_storage_alloc_aligned(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t (*v8)(void *, _QWORD, unint64_t);
  void *v9;
  char *v10;

  v4 = *a1;
  v5 = (a3 + a1[1] - 1) & -a3;
  v6 = v5 + a2;
  if (v5 + a2 <= *a1)
  {
LABEL_13:
    a1[1] = v6;
    a1[2] = v5;
    return v5;
  }
  while (1)
  {
    v7 = 2 * (int)v4 ? 2 * v4 : 0x10000;
    if (!*((_DWORD *)a1 + 6))
      break;
    v8 = (uint64_t (*)(void *, _QWORD, unint64_t))a1[5];
    v9 = (void *)a1[7];
    v4 = v7;
    if (!v8)
    {
      v10 = (char *)malloc_type_realloc(v9, v7, 0x64A7BD1uLL);
      a1[7] = (unint64_t)v10;
      *(_DWORD *)a1[4] = 1;
      goto LABEL_11;
    }
    a1[7] = v8(v9, v7, a1[6]);
LABEL_12:
    *a1 = v4;
    if (v6 <= v4)
      goto LABEL_13;
  }
  v4 = v7;
  v10 = (char *)malloc_type_realloc((void *)a1[7], v7, 0x2715C904uLL);
  a1[7] = (unint64_t)v10;
  if (v10)
  {
LABEL_11:
    bzero(&v10[*a1], v4 - *a1);
    goto LABEL_12;
  }
  return -1;
}

uint64_t `anonymous namespace'::__btrie_burst_flat(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x24BDAC8D0];
  v5 = MEMORY[0x24BDAC7A8](a1, a2, a3, a4);
  v7 = (_DWORD *)((char *)v18 - ((v6 + 19) & 0x1FFFFFFF0));
  v9 = (4 * v8);
  v10 = (unsigned int *)(*(_QWORD *)(v5 + 120) + v9);
  v11 = *v10;
  *v7 = v11;
  memcpy(v7 + 1, v10 + 1, v11);
  if (a1[10] == v9)
  {
    bzero(v10, a1[9] - v9);
    a1[9] = a1[10];
  }
  if (v12 == -1)
    v13 = 0;
  else
    v13 = (v12 >> 2) | 0x300000000;
  *(_DWORD *)(a1[7] + (4 * v13)) = v7[1];
  v14 = (unsigned __int8 *)(v7 + 2);
  v15 = (unint64_t)v7 + v11 + 4;
  if ((unint64_t)(v7 + 2) < v15)
  {
    do
    {
      v16 = (unint64_t)&v14[*v14 + 5];
      v14 = (unsigned __int8 *)v16;
    }
    while (v16 < v15);
  }
  return v13;
}

unint64_t `anonymous namespace'::__btrie_build_compact_trie(uint64_t a1, unint64_t a2, unint64_t *a3, int a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x4_t v11;
  int32x4_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  _DWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  LODWORD(v4) = a2;
  v5 = HIDWORD(a2);
  if (HIDWORD(a2) == 3)
  {
    v8 = 0;
    v9 = *(_QWORD *)(a1 + 56);
    v10 = (4 * a2);
    v11 = 0uLL;
    v12.i64[0] = 0x300000003;
    v12.i64[1] = 0x300000003;
    do
    {
      v11 = vsubq_s32(v11, vtstq_s32(*(int32x4_t *)(v10 + v9 + 4 + v8), v12));
      v8 += 16;
    }
    while (v8 != 1024);
    if (a4 || (v13 = vaddvq_s32(v11), v13 >= 0x21))
    {
      v25 = 0;
      if (v24 == -1)
        v4 = 0;
      else
        v4 = (v24 >> 2) | 0x300000000;
      v26 = (4 * v4);
      v27 = (int *)(v9 + v10);
      v29 = *v27;
      v28 = v27 + 1;
      *(_DWORD *)(a3[7] + v26) = v29;
      v30 = v26 + 4;
      do
      {
        *(_DWORD *)(a3[7] + v30 + v25 * 4) = HIDWORD(v31) + 4 * v31;
        ++v25;
      }
      while (v25 != 256);
    }
    else
    {
      v15 = 0;
      if (v14 == -1)
        v4 = 0;
      else
        v4 = (v14 >> 2) | 0x200000000;
      v16 = (4 * v4);
      v17 = (int *)(v9 + v10);
      v19 = *v17;
      v18 = v17 + 1;
      v20 = a3[7] + v16;
      *(_DWORD *)v20 = v19;
      *(_BYTE *)(v20 + 37) = v13;
      do
      {
        if (HIDWORD(v21))
        {
          v22 = a3[7] + v16;
          v23 = *(unsigned __int8 *)(v22 + 36);
          *(_BYTE *)(v22 + 36) = v23 + 1;
          *(_DWORD *)(v22 + 4 * v23 + 40) = HIDWORD(v21) + 4 * v21;
          *(_DWORD *)(v22 + 4 * (v15 >> 5) + 4) |= 1 << v15;
        }
        ++v15;
      }
      while (v15 != 256);
    }
    v5 = HIDWORD(v4);
  }
  return v4 | ((unint64_t)v5 << 32);
}

uint64_t mecab_system_eval(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  char **v5;
  char **v6;
  int v7;
  std::string::size_type size;
  char v9;
  std::string *v10;
  char *v11;
  std::locale::__imp *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  _QWORD *v19;
  const char *v20;
  size_t v21;
  _QWORD *v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  uint64_t v25;
  std::string *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  std::string *v33;
  std::string::size_type v34;
  __int128 *v35;
  __int128 v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  const char *v43;
  size_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  const char *v51;
  size_t v52;
  std::string::size_type v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  std::string *v59;
  std::locale *v60;
  size_t v61;
  unint64_t v62;
  std::locale *v63;
  std::locale *v64;
  std::locale *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  int v70;
  int v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  int *v78;
  int v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  std::string *v86;
  std::string::size_type v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  std::locale::__imp *locale;
  int64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int8 *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  unsigned __int8 *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  const std::locale::facet *v120;
  unint64_t v121;
  _QWORD *v122;
  const char *v123;
  uint64_t v124;
  unint64_t v125;
  double v126;
  double v127;
  double v128;
  _QWORD *v129;
  size_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v134;
  std::locale::__imp *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *__p;
  char *v147;
  char *v148;
  std::string v149;
  std::string v150;
  std::string v151;
  void (**v152)(MeCab::ostream_wrapper *__hidden);
  _QWORD *v153;
  std::string v154;
  void *v155[4];
  __int128 *v156;
  uint64_t v157;
  const char *v158;
  char v159;
  uint64_t v160;
  _QWORD v161[2];
  _BYTE v162[408];
  uint64_t v163;
  _QWORD v164[2];
  _BYTE v165[408];
  uint64_t v166;
  std::locale v167[2];
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  std::locale v199[2];
  unsigned __int8 v200;
  uint64_t v201;

  v4 = MEMORY[0x24BDAC7A8](a1, a2, a3, a4);
  v6 = v5;
  v7 = v4;
  v201 = *MEMORY[0x24BDAC8D0];
  MEMORY[0x20BD06324](&v139);
  MeCab::Param::Param((MeCab::Param *)v155);
  MeCab::Param::open((uint64_t)v155, v7, v6, (uint64_t)&MeCab::Eval::eval(int,char **)::long_options);
  if ((MeCab::Param::open((uint64_t)v155, v7, v6, (uint64_t)&MeCab::Eval::eval(int,char **)::long_options) & 1) != 0)
  {
    if (!MeCab::Param::help_version((MeCab::Param *)v155))
    {
LABEL_180:
      v25 = 1;
      goto LABEL_181;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((v157 - (uint64_t)v156) >> 3) > 1)
    {
      MeCab::Param::get<std::string>((uint64_t)v155, "output", &v154);
      size = HIBYTE(v154.__r_.__value_.__r.__words[2]);
      v9 = HIBYTE(v154.__r_.__value_.__r.__words[2]);
      if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v154.__r_.__value_.__l.__size_;
      if (!size)
      {
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
        {
          v154.__r_.__value_.__l.__size_ = 1;
          v10 = (std::string *)v154.__r_.__value_.__r.__words[0];
        }
        else
        {
          *((_BYTE *)&v154.__r_.__value_.__s + 23) = 1;
          v10 = &v154;
        }
        LOWORD(v10->__r_.__value_.__l.__data_) = 45;
        v9 = HIBYTE(v154.__r_.__value_.__r.__words[2]);
      }
      if (v9 >= 0)
        v26 = &v154;
      else
        v26 = (std::string *)v154.__r_.__value_.__r.__words[0];
      MeCab::ostream_wrapper::ostream_wrapper((MeCab::ostream_wrapper *)&v152, (const char *)v26);
      if ((*((_BYTE *)v153 + *(_QWORD *)(*v153 - 24) + 32) & 5) != 0)
      {
        v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/eval.cpp", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"(", 1);
        v28 = (_QWORD *)std::ostream::operator<<();
        v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)") [", 3);
        v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"*ofs", 4);
        v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"] ", 2);
        v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"no such file or directory: ", 27);
        if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v33 = &v154;
        else
          v33 = (std::string *)v154.__r_.__value_.__r.__words[0];
        if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v34 = HIBYTE(v154.__r_.__value_.__r.__words[2]);
        else
          v34 = v154.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v33, v34);
        MeCab::die::~die((MeCab::die *)v199);
      }
      v35 = v156;
      if (*((char *)v156 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v151, *(const std::string::value_type **)v156, *((_QWORD *)v156 + 1));
        v35 = v156;
      }
      else
      {
        v36 = *v156;
        v151.__r_.__value_.__r.__words[2] = *((_QWORD *)v156 + 2);
        *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v36;
      }
      if (*((char *)v35 + 47) < 0)
        std::string::__init_copy_ctor_external(&v150, *((const std::string::value_type **)v35 + 3), *((_QWORD *)v35 + 4));
      else
        v150 = *(std::string *)((_BYTE *)v35 + 1);
      MeCab::Param::get<std::string>((uint64_t)v155, "level", &v149);
      std::ifstream::basic_ifstream(v164);
      std::ifstream::basic_ifstream(v161);
      if ((v165[*(_QWORD *)(v164[0] - 24) + 16] & 5) != 0)
      {
        v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/eval.cpp", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"(", 1);
        v38 = (_QWORD *)std::ostream::operator<<();
        v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)") [", 3);
        v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"ifs1", 4);
        v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"] ", 2);
        v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"no such file or directory: ", 27);
        v43 = (const char *)v156;
        if (*((char *)v156 + 23) < 0)
          v43 = *(const char **)v156;
        v44 = strlen(v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v43, v44);
        MeCab::die::~die((MeCab::die *)v199);
      }
      if ((v162[*(_QWORD *)(v161[0] - 24) + 16] & 5) != 0)
      {
        v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/eval.cpp", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"(", 1);
        v46 = (_QWORD *)std::ostream::operator<<();
        v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)") [", 3);
        v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"ifs2", 4);
        v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"] ", 2);
        v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"no such file or directory: ", 27);
        v51 = (const char *)v156;
        if (*((char *)v156 + 23) < 0)
          v51 = *(const char **)v156;
        v52 = strlen(v51);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v51, v52);
        MeCab::die::~die((MeCab::die *)v199);
      }
      v53 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
      if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v53 = v149.__r_.__value_.__l.__size_;
      if (!v53)
      {
        v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/eval.cpp", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"(", 1);
        v55 = (_QWORD *)std::ostream::operator<<();
        v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)") [", 3);
        v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"!level_str.empty()", 18);
        v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"level_str is NULL", 17);
        MeCab::die::~die((MeCab::die *)v199);
      }
      __p = 0;
      v147 = 0;
      v148 = 0;
      if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v59 = &v149;
      else
        v59 = (std::string *)v149.__r_.__value_.__r.__words[0];
      v198 = 0u;
      v197 = 0u;
      v196 = 0u;
      v195 = 0u;
      v194 = 0u;
      v193 = 0u;
      v192 = 0u;
      v191 = 0u;
      v190 = 0u;
      v189 = 0u;
      v188 = 0u;
      v187 = 0u;
      v186 = 0u;
      v185 = 0u;
      v184 = 0u;
      v183 = 0u;
      v182 = 0u;
      v181 = 0u;
      v180 = 0u;
      v179 = 0u;
      v178 = 0u;
      v177 = 0u;
      v176 = 0u;
      v175 = 0u;
      v174 = 0u;
      v173 = 0u;
      v172 = 0u;
      v171 = 0u;
      v170 = 0u;
      v169 = 0u;
      v168 = 0u;
      *(_OWORD *)&v167[0].__locale_ = 0u;
      v60 = v199;
      strncpy((char *)v199, (const char *)v59, 0x2000uLL);
      v147 = 0;
      v61 = strlen((const char *)v199);
      v62 = 0;
      v63 = (std::locale *)((char *)v199 + v61);
      v64 = v167;
      do
      {
        if (v62 > 0xFFF)
        {
          v67 = v147;
          goto LABEL_71;
        }
        v65 = (std::locale *)((char *)v199 + v61);
        if (v60 != v63)
        {
          v65 = v60;
LABEL_60:
          v66 = 0;
          while (LOBYTE(v65->__locale_) != asc_2083E09B2[v66])
          {
            if (++v66 == 2)
            {
              v65 = (std::locale *)((char *)v65 + 1);
              if (v65 != v63)
                goto LABEL_60;
              v65 = (std::locale *)((char *)v199 + v61);
              break;
            }
          }
        }
        LOBYTE(v65->__locale_) = 0;
        if (LOBYTE(v60->__locale_))
        {
          v64->__locale_ = (std::locale::__imp *)v60;
          ++v64;
          ++v62;
        }
        v60 = (std::locale *)((char *)&v65->__locale_ + 1);
      }
      while (v65 != v63);
      v67 = v147;
      if (!v62)
        goto LABEL_89;
LABEL_71:
      v68 = 0;
      v69 = v67;
      do
      {
        v70 = atoi((const char *)v167[v68].__locale_);
        v71 = v70;
        if (v69 >= v148)
        {
          v72 = (char *)__p;
          v73 = (v69 - (_BYTE *)__p) >> 2;
          v74 = v73 + 1;
          if ((unint64_t)(v73 + 1) >> 62)
            std::vector<char *>::__throw_length_error[abi:ne180100]();
          v75 = v148 - (_BYTE *)__p;
          if ((v148 - (_BYTE *)__p) >> 1 > v74)
            v74 = v75 >> 1;
          if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL)
            v76 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v76 = v74;
          if (v76)
          {
            v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v148, v76);
            v72 = (char *)__p;
            v69 = v147;
          }
          else
          {
            v77 = 0;
          }
          v78 = (int *)&v77[4 * v73];
          *v78 = v71;
          v67 = (char *)(v78 + 1);
          while (v69 != v72)
          {
            v79 = *((_DWORD *)v69 - 1);
            v69 -= 4;
            *--v78 = v79;
          }
          __p = v78;
          v147 = v67;
          v148 = &v77[4 * v76];
          if (v72)
            operator delete(v72);
        }
        else
        {
          *(_DWORD *)v69 = v70;
          v67 = v69 + 4;
        }
        v147 = v67;
        ++v68;
        v69 = v67;
      }
      while (v68 != v62);
LABEL_89:
      if (v67 == __p)
      {
        v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/eval.cpp", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"(", 1);
        v81 = (_QWORD *)std::ostream::operator<<();
        v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)") [", 3);
        v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"level.size()", 12);
        v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"] ", 2);
        v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"level_str is empty: ", 20);
        if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v86 = &v149;
        else
          v86 = (std::string *)v149.__r_.__value_.__r.__words[0];
        if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v87 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
        else
          v87 = v149.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)v86, v87);
        MeCab::die::~die((MeCab::die *)v199);
      }
      std::vector<unsigned long>::vector(v167, (v67 - (_BYTE *)__p) >> 2);
      if (v167[1].__locale_ - v167[0].__locale_ >= 1)
        bzero(v167[0].__locale_, 8* (((unint64_t)(v167[1].__locale_ - v167[0].__locale_) >> 3)- ((std::locale::__imp *)(v167[1].__locale_ - v167[0].__locale_) > (std::locale::__imp *)7))+ 8);
      v89 = 0;
      v90 = 0;
      v143 = 0;
      v144 = 0;
      v145 = 0;
      v140 = 0;
      v141 = 0;
      v142 = 0;
      while (MeCab::Eval::read((uint64_t)v164, (uint64_t)&v143, (uint64_t)&__p, v88)
           && MeCab::Eval::read((uint64_t)v161, (uint64_t)&v140, (uint64_t)&__p, v91))
      {
        v137 = v143;
        v138 = v140;
        v92 = 0xAAAAAAAAAAAAAAABLL * ((v141 - v140) >> 3);
        v93 = (v144 - v143) / 24;
        if (v144 != v143)
        {
          v94 = 0;
          v95 = 0;
          v96 = 0;
          v97 = 0;
          locale = v167[0].__locale_;
          v135 = v167[1].__locale_;
          v136 = 0xAAAAAAAAAAAAAAABLL * ((v141 - v140) >> 3);
          if ((unint64_t)((v167[1].__locale_ - v167[0].__locale_) >> 3) <= 1)
            v99 = 1;
          else
            v99 = (v167[1].__locale_ - v167[0].__locale_) >> 3;
          v134 = (v144 - v143) / 24;
          while (1)
          {
            if (v96 >= v92)
              goto LABEL_148;
            if (v95 == v94)
            {
              v100 = v90;
              v101 = v89;
              v102 = *(_QWORD *)(v137 + 24 * v97);
              if (v135 != locale)
              {
                v103 = 0;
                v104 = *(_QWORD *)(v138 + 24 * v96);
                while (1)
                {
                  v105 = (unsigned __int8 *)(v102 + 24 * v103);
                  v106 = v104 + 24 * v103;
                  v107 = v105[23];
                  if ((v107 & 0x80u) == 0)
                    v108 = v105[23];
                  else
                    v108 = *((_QWORD *)v105 + 1);
                  v109 = *(unsigned __int8 *)(v106 + 23);
                  v110 = (char)v109;
                  if ((v109 & 0x80u) != 0)
                    v109 = *(_QWORD *)(v106 + 8);
                  if (v108 != v109)
                    goto LABEL_127;
                  v111 = v110 >= 0 ? (unsigned __int8 *)(v104 + 24 * v103) : *(unsigned __int8 **)v106;
                  if ((v107 & 0x80) == 0)
                    break;
                  if (!memcmp(*(const void **)v105, v111, *((_QWORD *)v105 + 1)))
                    goto LABEL_126;
LABEL_127:
                  if (++v103 == v99)
                    goto LABEL_128;
                }
                if (v105[23])
                {
                  while (*v105 == *v111)
                  {
                    ++v105;
                    ++v111;
                    if (!--v107)
                      goto LABEL_126;
                  }
                  goto LABEL_127;
                }
LABEL_126:
                ++*((_QWORD *)locale + v103);
                goto LABEL_127;
              }
LABEL_128:
              if (*(char *)(v102 + 23) < 0)
                v112 = *(_QWORD *)(v102 + 8);
              else
                v112 = *(unsigned __int8 *)(v102 + 23);
              v90 = v100;
              v93 = v134;
              v117 = *(_QWORD *)(v138 + 24 * v96);
              v92 = v136;
              if (*(char *)(v117 + 23) < 0)
                v118 = *(_QWORD *)(v117 + 8);
              else
                v118 = *(unsigned __int8 *)(v117 + 23);
              v95 = v112 + v94;
              v94 += v118;
              ++v97;
              ++v96;
              v89 = v101 + 1;
            }
            else
            {
              if (v95 < v94)
              {
                v113 = *(_QWORD *)(v137 + 24 * v97);
                if (*(char *)(v113 + 23) < 0)
                  v114 = *(_QWORD *)(v113 + 8);
                else
                  v114 = *(unsigned __int8 *)(v113 + 23);
                v95 += v114;
                ++v97;
                ++v89;
                goto LABEL_145;
              }
              v115 = *(_QWORD *)(v138 + 24 * v96);
              if (*(char *)(v115 + 23) < 0)
                v116 = *(_QWORD *)(v115 + 8);
              else
                v116 = *(unsigned __int8 *)(v115 + 23);
              v94 += v116;
              ++v96;
            }
            ++v90;
LABEL_145:
            if (v97 >= v93)
              goto LABEL_148;
          }
        }
        v97 = 0;
        v96 = 0;
LABEL_148:
        if (v97 < v93)
          v89 = v89 + v93 - v97;
        if (v96 < v92)
          v90 = v90 + v92 - v96;
      }
      v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v153, (uint64_t)"              precision          recall         F", 49);
      std::ios_base::getloc((const std::ios_base *)((char *)v119 + *(_QWORD *)(*v119 - 24)));
      v120 = std::locale::use_facet(v199, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v120->__vftable[2].~facet_0)(v120, 10);
      std::locale::~locale(v199);
      std::ostream::put();
      std::ostream::flush();
      if (v167[1].__locale_ != v167[0].__locale_)
      {
        v121 = 0;
        do
        {
          v122 = v153;
          if (*((_DWORD *)__p + v121) == -1)
          {
            v123 = "LEVEL ALL: ";
            v124 = 11;
          }
          else
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v153, (uint64_t)"LEVEL ", 6);
            v122 = (_QWORD *)std::ostream::operator<<();
            v123 = ":    ";
            v124 = 5;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)v123, v124);
          v125 = *((_QWORD *)v167[0].__locale_ + v121);
          v126 = 0.0;
          v127 = 0.0;
          if (v89)
            v127 = (double)v125 * 100.0 / (double)v89;
          if (v90)
            v126 = (double)v125 * 100.0 / (double)v90;
          v128 = 0.0;
          if (v127 + v126 != 0.0)
            v128 = (v127 + v127) * v126 / (v127 + v126);
          v129 = v153;
          snprintf((char *)v199, 0x2000uLL, "%4.4f(%d/%d) %4.4f(%d/%d) %4.4f\n", v127, v125, v89, v126, v125, v90, v128);
          v130 = strlen((const char *)v199);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)v199, v130);
          ++v121;
        }
        while (v121 < (v167[1].__locale_ - v167[0].__locale_) >> 3);
      }
      v199[0].__locale_ = (std::locale::__imp *)&v140;
      std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v199);
      v199[0].__locale_ = (std::locale::__imp *)&v143;
      std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v199);
      if (v167[0].__locale_)
      {
        v167[1] = v167[0];
        operator delete(v167[0].__locale_);
      }
      if (__p)
      {
        v147 = (char *)__p;
        operator delete(__p);
      }
      v161[0] = *MEMORY[0x24BEDB7E0];
      v131 = v161[0];
      v132 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
      *(_QWORD *)((char *)v161 + *(_QWORD *)(v161[0] - 24)) = v132;
      MEMORY[0x20BD061F8](v162);
      std::istream::~istream();
      MEMORY[0x20BD06354](&v163);
      v164[0] = v131;
      *(_QWORD *)((char *)v164 + *(_QWORD *)(v131 - 24)) = v132;
      MEMORY[0x20BD061F8](v165);
      std::istream::~istream();
      MEMORY[0x20BD06354](&v166);
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v149.__r_.__value_.__l.__data_);
      if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v150.__r_.__value_.__l.__data_);
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v151.__r_.__value_.__l.__data_);
      v152 = &off_24C09C368;
      if (v153 != (_QWORD *)MEMORY[0x24BEDB318] && v153)
        (*(void (**)(void))(*v153 + 8))();
      if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v154.__r_.__value_.__l.__data_);
      goto LABEL_180;
    }
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"Usage: ", 7);
    if (v159 >= 0)
      v20 = (const char *)&v158;
    else
      v20 = v158;
    v21 = strlen(v20);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" output answer", 14);
    std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
    v24 = std::locale::use_facet(v199, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
    std::locale::~locale(v199);
    std::ostream::put();
    std::ostream::flush();
  }
  else
  {
    v11 = (char *)MeCab::whatlog::str((MeCab::whatlog *)&v160);
    std::string::basic_string[abi:ne180100]<0>(v199, v11);
    if ((v200 & 0x80u) == 0)
      v12 = (std::locale::__imp *)v199;
    else
      v12 = v199[0].__locale_;
    if ((v200 & 0x80u) == 0)
      v13 = v200;
    else
      v13 = (uint64_t)v199[1].__locale_;
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)v12, v13);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n\n", 2);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"MeCab: Yet Another Part-of-Speech and Morphological Analyzer\n\nCopyright(C) 2001-2012 Taku Kudo \nCopyright(C) 2004-2008 Nippon Telegraph and Telephone Corporation\n", 162);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\ntry '--help' for more information.", 35);
    std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
    v18 = std::locale::use_facet(v167, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
    std::locale::~locale(v167);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v200 < 0)
      operator delete(v199[0].__locale_);
  }
  v25 = 0;
LABEL_181:
  MeCab::Param::~Param(v155);
  std::ios_base::Init::~Init((std::ios_base::Init *)&v139);
  return v25;
}

void sub_2083AFE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void (**a49)(MeCab::ostream_wrapper *__hidden this),uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57)
{
  if (a47 < 0)
    operator delete(a42);
  a49 = &off_24C09C368;
  if (a50 != MEMORY[0x24BEDB318] && a50)
    (*(void (**)(void))(*(_QWORD *)a50 + 8))();
  if (a56 < 0)
    operator delete(a51);
  MeCab::Param::~Param(&a57);
  std::ios_base::Init::~Init((std::ios_base::Init *)&a25);
  _Unwind_Resume(a1);
}

uint64_t mecab_test_gen(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  char **v5;
  char **v6;
  int v7;
  _OWORD *size;
  __int128 v9;
  char *v10;
  void *first;
  uint64_t end_high;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  std::string *v22;
  std::string *v23;
  __int128 v24;
  std::string::size_type v25;
  std::string::size_type v26;
  char v27;
  std::string *p_p;
  std::string *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  std::string *v36;
  std::string::size_type v37;
  std::string::size_type v38;
  unint64_t v39;
  std::locale::id *v40;
  std::string::size_type v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  std::string::size_type v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  std::__split_buffer<std::string> *p_v;
  size_t v53;
  uint64_t v54;
  std::__split_buffer<std::string> *v55;
  const char **v56;
  std::__split_buffer<std::string> *v57;
  uint64_t v58;
  const char *v59;
  std::string::size_type v60;
  std::string::size_type v61;
  std::string *v62;
  _QWORD *v63;
  const std::locale::facet *v64;
  const std::locale::facet *v65;
  _QWORD *v66;
  char v68;
  void (**v69)(MeCab::istream_wrapper *__hidden);
  uint64_t v70;
  std::string v71;
  void (**v72)(MeCab::ostream_wrapper *__hidden);
  _QWORD *v73;
  std::string __p;
  std::string v75;
  void *v76[4];
  __int128 *v77;
  __int128 *v78;
  uint64_t v79;
  std::locale v80;
  const char *v81[2];
  std::__split_buffer<std::string> __v;
  uint64_t v83;

  v4 = MEMORY[0x24BDAC7A8](a1, a2, a3, a4);
  v6 = v5;
  v7 = v4;
  v83 = *MEMORY[0x24BDAC8D0];
  MEMORY[0x20BD06324](&v68);
  MeCab::Param::Param((MeCab::Param *)v76);
  MeCab::Param::open((uint64_t)v76, v7, v6, (uint64_t)&MeCab::TestSentenceGenerator::run(int,char **)::long_options);
  if ((MeCab::Param::open((uint64_t)v76, v7, v6, (uint64_t)&MeCab::TestSentenceGenerator::run(int,char **)::long_options) & 1) != 0)
  {
    if (MeCab::Param::help_version((MeCab::Param *)v76))
    {
      memset(&v75, 0, sizeof(v75));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v75, v77, v78, 0xAAAAAAAAAAAAAAABLL * (((char *)v78 - (char *)v77) >> 3));
      if (v75.__r_.__value_.__r.__words[0] == v75.__r_.__value_.__l.__size_)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "-");
        size = (_OWORD *)v75.__r_.__value_.__l.__size_;
        if (v75.__r_.__value_.__l.__size_ >= v75.__r_.__value_.__r.__words[2])
        {
          v19 = 0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(v75.__r_.__value_.__l.__size_ - v75.__r_.__value_.__r.__words[0]) >> 3);
          v20 = v19 + 1;
          if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<char *>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556
             * ((uint64_t)(v75.__r_.__value_.__r.__words[2] - v75.__r_.__value_.__r.__words[0]) >> 3) > v20)
            v20 = 0x5555555555555556
                * ((uint64_t)(v75.__r_.__value_.__r.__words[2] - v75.__r_.__value_.__r.__words[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v75.__r_.__value_.__r.__words[2] - v75.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
            v21 = 0xAAAAAAAAAAAAAAALL;
          else
            v21 = v20;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v75.__r_.__value_.__r.__words[2];
          if (v21)
            v22 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v75.__r_.__value_.__r.__words[2], v21);
          else
            v22 = 0;
          v23 = v22 + v19;
          __v.__first_ = v22;
          __v.__begin_ = v23;
          __v.__end_cap_.__value_ = &v22[v21];
          v24 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v23->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
          memset(&__p, 0, sizeof(__p));
          __v.__end_ = v23 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v75, &__v);
          v25 = v75.__r_.__value_.__l.__size_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v75.__r_.__value_.__l.__size_ = v25;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        else
        {
          v9 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(v75.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *size = v9;
          v75.__r_.__value_.__l.__size_ = (std::string::size_type)size + 24;
        }
      }
      MeCab::Param::get<std::string>((uint64_t)v76, "output", &__p);
      v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v26 = __p.__r_.__value_.__l.__size_;
      if (!v26)
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          __p.__r_.__value_.__l.__size_ = 1;
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        else
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 1;
          p_p = &__p;
        }
        LOWORD(p_p->__r_.__value_.__l.__data_) = 45;
        v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      if (v27 >= 0)
        v29 = &__p;
      else
        v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
      MeCab::ostream_wrapper::ostream_wrapper((MeCab::ostream_wrapper *)&v72, (const char *)v29);
      if ((*((_BYTE *)v73 + *(_QWORD *)(*v73 - 24) + 32) & 5) != 0)
      {
        v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/eval.cpp", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"(", 1);
        v31 = (_QWORD *)std::ostream::operator<<();
        v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)") [", 3);
        v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"*ofs", 4);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"] ", 2);
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"permission denied: ", 19);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v36 = &__p;
        else
          v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v37 = __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, v37);
        MeCab::die::~die((MeCab::die *)&__v);
      }
      v81[0] = 0;
      v81[1] = 0;
      memset(&v71, 0, sizeof(v71));
      v38 = v75.__r_.__value_.__r.__words[0];
      if (v75.__r_.__value_.__l.__size_ != v75.__r_.__value_.__r.__words[0])
      {
        v39 = 0;
        v40 = (std::locale::id *)MEMORY[0x24BEDB350];
        do
        {
          v41 = v38 + 24 * v39;
          if (*(char *)(v41 + 23) < 0)
            v41 = *(_QWORD *)v41;
          MeCab::istream_wrapper::istream_wrapper((MeCab::istream_wrapper *)&v69, (const char *)v41);
          if ((*(_BYTE *)(v70 + *(_QWORD *)(*(_QWORD *)v70 - 24) + 32) & 5) != 0)
          {
            v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/eval.cpp", 58);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"(", 1);
            v43 = (_QWORD *)std::ostream::operator<<();
            v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
            v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"*ifs", 4);
            v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"] ", 2);
            v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"no such file or directory: ", 27);
            v48 = v75.__r_.__value_.__r.__words[0] + 24 * v39;
            v49 = *(char *)(v48 + 23);
            if (v49 >= 0)
              v50 = v75.__r_.__value_.__r.__words[0] + 24 * v39;
            else
              v50 = *(_QWORD *)v48;
            if (v49 >= 0)
              v51 = *(unsigned __int8 *)(v48 + 23);
            else
              v51 = *(_QWORD *)(v48 + 8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, v50, v51);
            MeCab::die::~die((MeCab::die *)&v80);
          }
          while (1)
          {
            std::ios_base::getloc((const std::ios_base *)(v70 + *(_QWORD *)(*(_QWORD *)v70 - 24)));
            v65 = std::locale::use_facet(&v80, v40);
            ((void (*)(const std::locale::facet *, uint64_t))v65->__vftable[2].~facet_0)(v65, 10);
            std::locale::~locale(&v80);
            v66 = (_QWORD *)std::istream::getline();
            if ((*((_BYTE *)v66 + *(_QWORD *)(*v66 - 24) + 32) & 5) != 0)
              break;
            p_v = &__v;
            v53 = strlen((const char *)&__v);
            v54 = 0;
            v55 = (std::__split_buffer<std::string> *)((char *)&__v + v53);
            v56 = v81;
            while (2)
            {
              if (p_v == v55)
              {
                p_v = (std::__split_buffer<std::string> *)((char *)&__v + v53);
LABEL_67:
                LOBYTE(v55->__first_) = 0;
                *v56 = (const char *)p_v;
              }
              else
              {
                v57 = p_v;
LABEL_59:
                v58 = 0;
                while (LOBYTE(v57->__first_) != asc_2083E09B2[v58])
                {
                  if (++v58 == 2)
                  {
                    v57 = (std::__split_buffer<std::string> *)((char *)v57 + 1);
                    if (v57 != v55)
                      goto LABEL_59;
                    goto LABEL_67;
                  }
                }
                LOBYTE(v57->__first_) = 0;
                *v56++ = (const char *)p_v;
                ++v54;
                p_v = (std::__split_buffer<std::string> *)((char *)&v57->__first_ + 1);
                if (v54 != 2)
                  continue;
              }
              break;
            }
            v59 = v81[0];
            if (!strcmp(v81[0], "EOS")
              && ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? (v61 = HIBYTE(v71.__r_.__value_.__r.__words[2]))
                : (v61 = v71.__r_.__value_.__l.__size_),
                  v61))
            {
              if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v62 = &v71;
              else
                v62 = (std::string *)v71.__r_.__value_.__r.__words[0];
              v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)v62, v61);
              std::ios_base::getloc((const std::ios_base *)((char *)v63 + *(_QWORD *)(*v63 - 24)));
              v64 = std::locale::use_facet(&v80, v40);
              ((void (*)(const std::locale::facet *, uint64_t))v64->__vftable[2].~facet_0)(v64, 10);
              std::locale::~locale(&v80);
              std::ostream::put();
              std::ostream::flush();
              if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
              {
                *v71.__r_.__value_.__l.__data_ = 0;
                v71.__r_.__value_.__l.__size_ = 0;
              }
              else
              {
                v71.__r_.__value_.__s.__data_[0] = 0;
                *((_BYTE *)&v71.__r_.__value_.__s + 23) = 0;
              }
            }
            else
            {
              v60 = strlen(v59);
              std::string::append(&v71, v59, v60);
            }
          }
          v69 = &off_24C09C348;
          if (v70 != MEMORY[0x24BEDB1D0] && v70)
            (*(void (**)(void))(*(_QWORD *)v70 + 8))();
          ++v39;
          v38 = v75.__r_.__value_.__r.__words[0];
        }
        while (v39 < 0xAAAAAAAAAAAAAAABLL
                    * ((uint64_t)(v75.__r_.__value_.__l.__size_ - v75.__r_.__value_.__r.__words[0]) >> 3));
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
      }
      v72 = &off_24C09C368;
      if (v73 != (_QWORD *)MEMORY[0x24BEDB318] && v73)
        (*(void (**)(void))(*v73 + 8))();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __v.__first_ = &v75;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    }
    v18 = 0;
  }
  else
  {
    v10 = (char *)MeCab::whatlog::str((MeCab::whatlog *)&v79);
    std::string::basic_string[abi:ne180100]<0>(&__v, v10);
    if (SHIBYTE(__v.__end_) >= 0)
      first = &__v;
    else
      first = __v.__first_;
    if (SHIBYTE(__v.__end_) >= 0)
      end_high = HIBYTE(__v.__end_);
    else
      end_high = (uint64_t)__v.__begin_;
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)first, end_high);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n\n", 2);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"MeCab: Yet Another Part-of-Speech and Morphological Analyzer\n\nCopyright(C) 2001-2012 Taku Kudo \nCopyright(C) 2004-2008 Nippon Telegraph and Telephone Corporation\n", 162);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\ntry '--help' for more information.", 35);
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
    v17 = std::locale::use_facet((const std::locale *)&v75, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale((std::locale *)&v75);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    v18 = 0xFFFFFFFFLL;
  }
  MeCab::Param::~Param(v76);
  std::ios_base::Init::~Init((std::ios_base::Init *)&v68);
  return v18;
}

void sub_2083B07F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,std::locale a27,uint64_t a28,uint64_t a29,void *a30)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&STACK[0x230]);
  if (a26 < 0)
    operator delete(__p);
  __p = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  MeCab::Param::~Param(&a30);
  std::ios_base::Init::~Init((std::ios_base::Init *)&a13);
  _Unwind_Resume(a1);
}

BOOL MeCab::Eval::read(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  std::locale::__imp *v11;
  std::locale::__imp *v12;
  const std::locale::facet *v13;
  _QWORD *v14;
  char *v15;
  size_t v16;
  char v17;
  char *v18;
  char v19;
  char *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  __int128 *v52;
  std::string *v53;
  uint64_t v54;
  std::string v56;
  std::locale v57;
  std::string *v58;
  unint64_t v59;
  void *__p;
  char *v61;
  char *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  char __s[8192];
  uint64_t v67;

  v4 = (_QWORD *)MEMORY[0x24BDAC7A8](a1, a2, a3, a4);
  v67 = *MEMORY[0x24BDAC8D0];
  v7 = *(_DWORD *)((_BYTE *)v4 + *(_QWORD *)(*v4 - 24) + 32) & 5;
  if (!v7)
  {
    v8 = v6;
    v9 = v5;
    v10 = v4;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    __p = 0;
    v61 = 0;
    v62 = 0;
    v11 = (std::locale::__imp *)*v5;
    v12 = (std::locale::__imp *)v5[1];
    while (v12 != v11)
    {
      v12 = (std::locale::__imp *)((char *)v12 - 24);
      v57.__locale_ = v12;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
    }
    v9[1] = (uint64_t)v11;
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
      v13 = std::locale::use_facet(&v57, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
      std::locale::~locale(&v57);
      v14 = (_QWORD *)std::istream::getline();
      if ((*((_BYTE *)v14 + *(_QWORD *)(*v14 - 24) + 32) & 5) != 0 || *(_DWORD *)__s == 5459781)
        break;
      v64 = v63;
      v61 = (char *)__p;
      v15 = __s;
      v57.__locale_ = (std::locale::__imp *)__s;
      v16 = strlen(__s);
      v17 = 0;
      v18 = &__s[v16];
      while (1)
      {
        v19 = v17;
        v20 = v18;
        if (v15 != v18)
        {
          while (*v15 != 9)
          {
            if (++v15 == v18)
            {
              v20 = v18;
              goto LABEL_14;
            }
          }
          v20 = v15;
        }
LABEL_14:
        *v20 = 0;
        v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
        std::back_insert_iterator<std::vector<char *>>::operator=[abi:ne180100]((void ***)&v56, &v57);
        if (v20 == v18)
          break;
        v15 = v20 + 1;
        v57.__locale_ = (std::locale::__imp *)(v20 + 1);
        v17 = 1;
        if ((v19 & 1) != 0)
          goto LABEL_19;
      }
      if ((v19 & 1) == 0)
      {
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/eval.cpp", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"(", 1);
        v22 = (_QWORD *)std::ostream::operator<<();
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)") [", 3);
        v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"tokenize(buf, \"\\t\", std::back_inserter(col), 2) == 2", 52);
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"format error", 12);
        MeCab::die::~die((MeCab::die *)&v57);
      }
LABEL_19:
      v26 = v63;
      v27 = v61;
      if (v61 >= v62)
      {
        v29 = (v61 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v29 + 1) >> 61)
          std::vector<char *>::__throw_length_error[abi:ne180100]();
        v30 = (v62 - (_BYTE *)__p) >> 2;
        if (v30 <= v29 + 1)
          v30 = v29 + 1;
        if ((unint64_t)(v62 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v30;
        if (v31)
          v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>((uint64_t)&v62, v31);
        else
          v32 = 0;
        v33 = &v32[8 * v29];
        *(_QWORD *)v33 = *v26;
        v28 = v33 + 8;
        v35 = (char *)__p;
        v34 = v61;
        if (v61 != __p)
        {
          do
          {
            v36 = *((_QWORD *)v34 - 1);
            v34 -= 8;
            *((_QWORD *)v33 - 1) = v36;
            v33 -= 8;
          }
          while (v34 != v35);
          v34 = (char *)__p;
        }
        __p = v33;
        v61 = v28;
        v62 = &v32[8 * v31];
        if (v34)
          operator delete(v34);
      }
      else
      {
        *(_QWORD *)v61 = *(_QWORD *)v63;
        v28 = v27 + 8;
      }
      v61 = v28;
      v37 = MeCab::tokenizeCSV<std::back_insert_iterator<std::vector<char *>>>(*((const char **)v63 + 1), &__p, 0x1FFFuLL);
      v57.__locale_ = 0;
      v58 = 0;
      v59 = 0;
      v38 = *v8;
      if (v8[1] != *v8)
      {
        v39 = v37;
        v40 = 0;
        do
        {
          v41 = *(unsigned int *)(v38 + 4 * v40);
          v42 = v39;
          if ((v41 & 0x80000000) == 0)
          {
            if (v39 < v41)
            {
              v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/eval.cpp", 58);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
              v44 = (_QWORD *)std::ostream::operator<<();
              v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)") [", 3);
              v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"m <= n", 6);
              v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"] ", 2);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" out of range ", 14);
              std::ostream::operator<<();
              MeCab::die::~die((MeCab::die *)&v56);
            }
            v42 = *(unsigned int *)(v38 + 4 * v40);
          }
          v48 = 0;
          memset(&v56, 0, sizeof(v56));
          do
          {
            v49 = strlen(*((const char **)__p + v48));
            std::string::append(&v56, *((const std::string::value_type **)__p + v48), v49);
            if (v48)
              std::string::append(&v56, "\t", 1uLL);
            ++v48;
          }
          while (v48 <= v42);
          v50 = v58;
          if ((unint64_t)v58 >= v59)
          {
            v52 = (__int128 *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v57, (__int128 *)&v56);
          }
          else
          {
            if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v58, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
            }
            else
            {
              v51 = *(_OWORD *)&v56.__r_.__value_.__l.__data_;
              v58->__r_.__value_.__r.__words[2] = v56.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v50->__r_.__value_.__l.__data_ = v51;
            }
            v52 = (__int128 *)&v50[1];
          }
          v58 = (std::string *)v52;
          if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v56.__r_.__value_.__l.__data_);
          ++v40;
          v38 = *v8;
        }
        while (v40 < (v8[1] - *v8) >> 2);
      }
      v53 = (std::string *)v9[1];
      if ((unint64_t)v53 >= v9[2])
      {
        v54 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(v9, (__int128 **)&v57);
      }
      else
      {
        v53->__r_.__value_.__r.__words[0] = 0;
        v53->__r_.__value_.__l.__size_ = 0;
        v53->__r_.__value_.__r.__words[2] = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v53, (__int128 *)v57.__locale_, (__int128 *)v58, 0xAAAAAAAAAAAAAAABLL * (((char *)v58 - (char *)v57.__locale_) >> 3));
        v54 = (uint64_t)&v53[1];
        v9[1] = (uint64_t)&v53[1];
      }
      v9[1] = v54;
      v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
    }
    if (__p)
    {
      v61 = (char *)__p;
      operator delete(__p);
    }
    if (v63)
    {
      v64 = v63;
      operator delete(v63);
    }
    v7 = 0;
  }
  return v7 == 0;
}

void sub_2083B0EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::locale a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)(v24 + 8) = v25;
  a11 = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a23)
  {
    a24 = (uint64_t)a23;
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

void MeCab::ostream_wrapper::~ostream_wrapper(MeCab::ostream_wrapper *this)
{
  uint64_t v1;

  *(_QWORD *)this = &off_24C09C368;
  v1 = *((_QWORD *)this + 1);
  if (v1 != MEMORY[0x24BEDB318] && v1 != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

{
  uint64_t v1;

  *(_QWORD *)this = &off_24C09C368;
  v1 = *((_QWORD *)this + 1);
  if (v1 != MEMORY[0x24BEDB318] && v1 != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD0639CLL);
}

MeCab::ostream_wrapper *MeCab::ostream_wrapper::ostream_wrapper(MeCab::ostream_wrapper *this, const char *__s1)
{
  _QWORD *v3;

  *(_QWORD *)this = &off_24C09C368;
  *((_QWORD *)this + 1) = 0;
  if (!strcmp(__s1, "-"))
  {
    v3 = (_QWORD *)MEMORY[0x24BEDB318];
  }
  else
  {
    v3 = (_QWORD *)operator new();
    std::ofstream::basic_ofstream(v3);
  }
  *((_QWORD *)this + 1) = v3;
  return this;
}

void sub_2083B1034(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD0639C](v1, 0x10F1C4067547207);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2083B1144(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<char *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<char *>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_2083B12AC(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(uint64_t *a1, __int128 **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::string *v11;
  uint64_t v12;
  void *v14[2];
  std::string *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<char *>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::string *)&v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  ++v15;
  std::vector<std::vector<std::string>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<std::string>>::~__split_buffer(v14);
  return v12;
}

void sub_2083B13CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_2083B1444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<char *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_2083B155C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

uint64_t std::vector<std::vector<std::string>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::string>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::string>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::string>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void MeCab::istream_wrapper::~istream_wrapper(MeCab::istream_wrapper *this)
{
  uint64_t v1;

  *(_QWORD *)this = &off_24C09C348;
  v1 = *((_QWORD *)this + 1);
  if (v1 != MEMORY[0x24BEDB1D0] && v1 != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

{
  uint64_t v1;

  *(_QWORD *)this = &off_24C09C348;
  v1 = *((_QWORD *)this + 1);
  if (v1 != MEMORY[0x24BEDB1D0] && v1 != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD0639CLL);
}

MeCab::istream_wrapper *MeCab::istream_wrapper::istream_wrapper(MeCab::istream_wrapper *this, const char *__s1)
{
  _QWORD *v3;

  *(_QWORD *)this = &off_24C09C348;
  *((_QWORD *)this + 1) = 0;
  if (!strcmp(__s1, "-"))
  {
    v3 = (_QWORD *)MEMORY[0x24BEDB1D0];
  }
  else
  {
    v3 = (_QWORD *)operator new();
    std::ifstream::basic_ifstream(v3);
  }
  *((_QWORD *)this + 1) = v3;
  return this;
}

void sub_2083B193C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD0639C](v1, 0x10F1C40A09425BCLL);
  _Unwind_Resume(a1);
}

unsigned __int16 *Thai::seekToSyllableEnd(unsigned __int16 *a1, unint64_t a2)
{
  unsigned __int16 *v2;
  int v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  char v8;
  int v9;
  unsigned int v10;
  unsigned __int16 *result;
  int v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  int v18;

  v2 = a1;
  if ((unint64_t)a1 < a2)
  {
    if ((v4 = *a1, v4 == 46)
      || v4 == 3654
      || ((v5 = v4 - 3585, v6 = v4 - 3648, v5 >= 0x2E) ? (v7 = v6 > 4) : (v7 = 0), !v7))
    {
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = v9 - 3632;
        if ((v9 - 3648) >= 0xE
          && (unsigned __int16)(v9 - 3585) >= 0x2Eu
          && (unsigned __int16)(v9 - 3632) > 0xAu)
        {
          return v2;
        }
        if ((v8 & 1) != 0)
        {
          v15 = Thai::isEndingChar(*v2) == 0;
          result = v2 + 1;
          if (!v15 && (unint64_t)result < a2)
          {
            v14 = *result;
            if (v14 == 46 || v14 == 3654 || (v14 - 3585) < 0x2E || (v14 - 3648) < 5)
              return result;
          }
        }
        v15 = v10 > 3 || v10 == 1;
        if (!v15)
          return v2 + 1;
        if ((unsigned __int16)(v9 - 3648) <= 4u)
          break;
        if (v9 == 3633)
        {
LABEL_37:
          if (Thai::isEndingChar(v9))
          {
            result = v2 + 1;
            if ((unint64_t)(v2 + 1) < a2)
            {
              v18 = *result;
              if (v18 == 46 || v18 == 3654 || (v18 - 3585) < 0x2E || (v18 - 3648) < 5)
                return result;
            }
          }
          goto LABEL_43;
        }
        if (v9 == 3631)
          return v2 + 1;
        v16 = 1;
        while (v16 != 13)
        {
          v17 = __const__ZN4Thai13isVowelSymbolEDs_kThaiVowels[v16++];
          if (v17 == v9)
          {
            if ((unint64_t)(v16 - 2) > 0xB)
              break;
            goto LABEL_37;
          }
        }
LABEL_44:
        result = ++v2;
        if ((unint64_t)v2 >= a2)
          return result;
      }
      if ((v8 & 1) != 0)
        return v2;
LABEL_43:
      v8 = 1;
      goto LABEL_44;
    }
  }
  return v2;
}

uint64_t Thai::isEndingChar(int a1)
{
  uint64_t v1;
  _BOOL4 v2;

  if ((a1 - 3597) < 0xF)
    return 1;
  if ((a1 - 3585) >= 0xB)
  {
    if ((a1 - 3614) < 0xD)
      return 1;
  }
  else
  {
    v1 = 1;
    if (((0x6FFu >> (a1 - 1)) & 1) != 0 || (unsigned __int16)(a1 - 3614) <= 0xCu)
      return v1;
  }
  v1 = 1;
  if ((a1 - 3628) > 0x1A || ((1 << (a1 - 44)) & 0x4000013) == 0)
  {
    v2 = (a1 - 3634) < 9 || (a1 - 3653) < 0xA;
    return a1 == 46 || v2;
  }
  return v1;
}

const char *MeCab::FeatureIndex::getIndex(MeCab::FeatureIndex *this, char **a2, char **a3)
{
  uint64_t v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  const char *v19;
  int v21;
  char v22;
  char v23;

  v3 = (*(_QWORD *)this)++;
  v4 = *(unsigned __int8 *)(v3 + 1);
  v21 = v4;
  if (v4 == 63)
  {
    *(_QWORD *)this = v3 + 2;
    v4 = *(unsigned __int8 *)(v3 + 2);
  }
  if (v4 != 91)
  {
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(", 1);
    v6 = (_QWORD *)std::ostream::operator<<();
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)") [", 3);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"**p == '['", 10);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"getIndex(): unmatched '['", 25);
    MeCab::die::~die((MeCab::die *)&v23);
  }
  v10 = 0;
  v11 = (_QWORD *)MEMORY[0x24BEDB310];
  while (1)
  {
    v12 = (char *)(*(_QWORD *)this + 1);
    *(_QWORD *)this = v12;
    v13 = *v12;
    if ((v13 - 48) >= 0xA)
      break;
    v10 = *v12 + 10 * v10 - 48;
  }
  if (v13 != 93)
  {
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"(", 1);
    v15 = (_QWORD *)std::ostream::operator<<();
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)") [", 3);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"false", 5);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"unmatched '['", 13);
    MeCab::die::~die((MeCab::die *)&v22);
  }
  if (v10 >= (unint64_t)a3)
    return 0;
  v19 = a2[v10];
  if (v21 == 63 && (!strcmp("*", v19) || !*v19))
    return 0;
  return v19;
}

void sub_2083B1E1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MeCab::die::~die((MeCab::die *)&a15);
}

void sub_2083B1E34()
{
  _Unwind_Exception *v0;

  _Unwind_Resume(v0);
}

BOOL MeCab::FeatureIndex::openTemplate(MeCab::FeatureIndex *this, const MeCab::Param *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  char *v8;
  char **v9;
  char *v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  std::string *v20;
  std::string::size_type size;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  std::locale::id *v42;
  const std::locale::facet *v43;
  _QWORD *v44;
  std::string *v45;
  unint64_t v46;
  std::string *v47;
  std::string *v48;
  uint64_t i;
  const char **v50;
  const char *v51;
  char *v52;
  char *v53;
  unint64_t v54;
  char **v55;
  char *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  char **v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char **v72;
  char *v73;
  char *v74;
  char *v75;
  char **v76;
  char *v77;
  char *v78;
  char *v79;
  std::string *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  std::string *v93;
  std::string::size_type v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  char **v101;
  char **v102;
  void *v103[2];
  char v104;
  std::string v105;
  std::string v106;
  void *v107;
  void *v108;
  uint64_t v109;
  std::string v110;
  std::string v111[341];
  void *__p[2];
  _BYTE v113[408];
  _QWORD v114[22];

  v4 = MEMORY[0x24BDAC7A8](this, a2, a3, a4);
  v6 = v5;
  v7 = (char **)v4;
  v114[19] = *MEMORY[0x24BDAC8D0];
  if (MeCab::Param::get<BOOL>(v5, "identity-template"))
  {
    v9 = v7 + 21;
    v8 = v7[21];
    v10 = v7[18];
    v7[19] = v10;
    v7[22] = v8;
    v11 = (unint64_t)v7[20];
    if ((unint64_t)v10 >= v11)
    {
      v23 = v11 - (_QWORD)v10;
      v24 = v23 >> 2;
      if ((unint64_t)(v23 >> 2) <= 1)
        v24 = 1;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
        v25 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>((uint64_t)(v7 + 20), v25);
      v28 = &v26[8 * v27];
      *(_QWORD *)v26 = "U:%u";
      v12 = v26 + 8;
      v30 = v7[18];
      v29 = v7[19];
      if (v29 != v30)
      {
        do
        {
          v31 = *((_QWORD *)v29 - 1);
          v29 -= 8;
          *((_QWORD *)v26 - 1) = v31;
          v26 -= 8;
        }
        while (v29 != v30);
        v29 = v7[18];
      }
      v7[18] = v26;
      v7[19] = v12;
      v7[20] = v28;
      if (v29)
        operator delete(v29);
    }
    else
    {
      *(_QWORD *)v10 = "U:%u";
      v12 = v10 + 8;
    }
    v32 = (unint64_t)v7[23];
    v7[19] = v12;
    v33 = v7[22];
    if ((unint64_t)v33 >= v32)
    {
      v35 = (v33 - *v9) >> 3;
      if ((unint64_t)(v35 + 1) >> 61)
        std::vector<char *>::__throw_length_error[abi:ne180100]();
      v36 = v32 - (_QWORD)*v9;
      v37 = v36 >> 2;
      if (v36 >> 2 <= (unint64_t)(v35 + 1))
        v37 = v35 + 1;
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
        v38 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v38 = v37;
      if (v38)
        v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>((uint64_t)(v7 + 23), v38);
      else
        v39 = 0;
      v81 = &v39[8 * v35];
      v82 = &v39[8 * v38];
      *(_QWORD *)v81 = "B:%r/%l";
      v34 = v81 + 8;
      v84 = v7[21];
      v83 = v7[22];
      if (v83 != v84)
      {
        do
        {
          v85 = *((_QWORD *)v83 - 1);
          v83 -= 8;
          *((_QWORD *)v81 - 1) = v85;
          v81 -= 8;
        }
        while (v83 != v84);
        v83 = *v9;
      }
      v7[21] = v81;
      v7[22] = v34;
      v7[23] = v82;
      if (v83)
        operator delete(v83);
    }
    else
    {
      *(_QWORD *)v33 = "B:%r/%l";
      v34 = v33 + 8;
    }
    v7[22] = v34;
    return 1;
  }
  else
  {
    MeCab::Param::get<std::string>(v6, "dicdir", v111);
    std::string::basic_string[abi:ne180100]<0>(__p, "feature.def");
    MeCab::create_filename((uint64_t)v111, (uint64_t)__p, &v110);
    if ((v113[7] & 0x80000000) != 0)
      operator delete(__p[0]);
    if (SHIBYTE(v111[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v111[0].__r_.__value_.__l.__data_);
    std::ifstream::basic_ifstream(__p);
    v13 = __p[0];
    if ((v113[*((_QWORD *)__p[0] - 3) + 16] & 5) != 0)
    {
      std::ios_base::clear((std::ios_base *)((char *)v7 + *((_QWORD *)v7[43] - 3) + 344), 0);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 43, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"(", 1);
      v15 = (_QWORD *)std::ostream::operator<<();
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)") [", 3);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"ifs", 3);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"] ", 2);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"no such file or directory: ", 27);
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &v110;
      else
        v20 = (std::string *)v110.__r_.__value_.__r.__words[0];
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v110.__r_.__value_.__r.__words[2]);
      else
        size = v110.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, size);
      v22 = 0;
    }
    else
    {
      v107 = 0;
      v108 = 0;
      v40 = v7[18];
      v41 = v7[21];
      v102 = v7 + 21;
      v100 = v6;
      v42 = (std::locale::id *)MEMORY[0x24BEDB350];
      v109 = 0;
      v7[19] = v40;
      v101 = v7 + 18;
      v7[22] = v41;
      while (1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)__p + *(v13 - 3)));
        v43 = std::locale::use_facet((const std::locale *)&v106, v42);
        ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
        std::locale::~locale((std::locale *)&v106);
        v44 = (_QWORD *)std::istream::getline();
        v22 = (*(_DWORD *)((_BYTE *)v44 + *(_QWORD *)(*v44 - 24) + 32) & 5) != 0;
        if ((*(_DWORD *)((_BYTE *)v44 + *(_QWORD *)(*v44 - 24) + 32) & 5) != 0)
          break;
        if (v111[0].__r_.__value_.__s.__data_[0] > 0x23u
          || ((1 << v111[0].__r_.__value_.__s.__data_[0]) & 0x900000001) == 0)
        {
          v108 = v107;
          v45 = v111;
          v106.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
          v46 = 0;
          v47 = (std::string *)((char *)v111 + strlen((const char *)v111));
          do
          {
            v48 = v47;
            if (v45 != v47)
            {
              while (2)
              {
                for (i = 0; i != 2; ++i)
                {
                  if (v45->__r_.__value_.__s.__data_[0] == asc_2083E09B2[i])
                  {
                    v48 = v45;
                    goto LABEL_48;
                  }
                }
                v45 = (std::string *)((char *)v45 + 1);
                if (v45 != v47)
                  continue;
                break;
              }
              v48 = v47;
            }
LABEL_48:
            v48->__r_.__value_.__s.__data_[0] = 0;
            if (*v106.__r_.__value_.__l.__data_)
            {
              v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v107;
              std::back_insert_iterator<std::vector<char *>>::operator=[abi:ne180100]((void ***)&v105, &v106);
              ++v46;
            }
            if (v48 == v47)
              break;
            v45 = (std::string *)((char *)&v48->__r_.__value_.__l.__data_ + 1);
            v106.__r_.__value_.__r.__words[0] = (std::string::size_type)v48->__r_.__value_.__r.__words + 1;
          }
          while (v46 < 2);
          if (v46 != 2)
          {
            std::ios_base::clear((std::ios_base *)((char *)v7 + *((_QWORD *)v7[43] - 3) + 344), 0);
            v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 43, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"(", 1);
            v88 = (_QWORD *)std::ostream::operator<<();
            v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)") [", 3);
            v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"tokenize2(buf, \"\\t \", std::back_inserter(column), 2) == 2", 57);
            v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"] ", 2);
            v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"format error: ", 14);
            if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v93 = &v110;
            else
              v93 = (std::string *)v110.__r_.__value_.__r.__words[0];
            if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v94 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
            else
              v94 = v110.__r_.__value_.__l.__size_;
            goto LABEL_118;
          }
          v50 = (const char **)v107;
          v51 = *(const char **)v107;
          if (!strcmp(*(const char **)v107, "UNIGRAM"))
          {
            v57 = MeCab::FeatureIndex::strdup((MeCab::FeatureIndex *)v7, v50[1]);
            v58 = v57;
            v60 = (char **)v7[19];
            v59 = (unint64_t)v7[20];
            if ((unint64_t)v60 >= v59)
            {
              v67 = ((char *)v60 - *v101) >> 3;
              if ((unint64_t)(v67 + 1) >> 61)
                std::vector<char *>::__throw_length_error[abi:ne180100]();
              v68 = v59 - (_QWORD)*v101;
              v69 = v68 >> 2;
              if (v68 >> 2 <= (unint64_t)(v67 + 1))
                v69 = v67 + 1;
              if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
                v70 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v70 = v69;
              if (v70)
                v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>((uint64_t)(v7 + 20), v70);
              else
                v71 = 0;
              v76 = (char **)&v71[8 * v67];
              *v76 = v58;
              v61 = (char *)(v76 + 1);
              v78 = v7[18];
              v77 = v7[19];
              if (v77 != v78)
              {
                do
                {
                  v79 = (char *)*((_QWORD *)v77 - 1);
                  v77 -= 8;
                  *--v76 = v79;
                }
                while (v77 != v78);
                v77 = *v101;
              }
              v7[18] = (char *)v76;
              v7[19] = v61;
              v7[20] = &v71[8 * v70];
              if (v77)
                operator delete(v77);
            }
            else
            {
              *v60 = v57;
              v61 = (char *)(v60 + 1);
            }
            v7[19] = v61;
          }
          else
          {
            if (strcmp(v51, "BIGRAM"))
            {
              std::ios_base::clear((std::ios_base *)((char *)v7 + *((_QWORD *)v7[43] - 3) + 344), 0);
              v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 43, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"(", 1);
              v96 = (_QWORD *)std::ostream::operator<<();
              v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)") [", 3);
              v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"false", 5);
              v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"] ", 2);
              v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"format error: ", 14);
              if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v93 = &v110;
              else
                v93 = (std::string *)v110.__r_.__value_.__r.__words[0];
              if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v94 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
              else
                v94 = v110.__r_.__value_.__l.__size_;
LABEL_118:
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v93, v94);
              goto LABEL_100;
            }
            v52 = MeCab::FeatureIndex::strdup((MeCab::FeatureIndex *)v7, v50[1]);
            v53 = v52;
            v55 = (char **)v7[22];
            v54 = (unint64_t)v7[23];
            if ((unint64_t)v55 >= v54)
            {
              v62 = ((char *)v55 - *v102) >> 3;
              if ((unint64_t)(v62 + 1) >> 61)
                std::vector<char *>::__throw_length_error[abi:ne180100]();
              v63 = v54 - (_QWORD)*v102;
              v64 = v63 >> 2;
              if (v63 >> 2 <= (unint64_t)(v62 + 1))
                v64 = v62 + 1;
              if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
                v65 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v65 = v64;
              if (v65)
                v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>((uint64_t)(v7 + 23), v65);
              else
                v66 = 0;
              v72 = (char **)&v66[8 * v62];
              *v72 = v53;
              v56 = (char *)(v72 + 1);
              v74 = v7[21];
              v73 = v7[22];
              if (v73 != v74)
              {
                do
                {
                  v75 = (char *)*((_QWORD *)v73 - 1);
                  v73 -= 8;
                  *--v72 = v75;
                }
                while (v73 != v74);
                v73 = *v102;
              }
              v7[21] = (char *)v72;
              v7[22] = v56;
              v7[23] = &v66[8 * v65];
              if (v73)
                operator delete(v73);
            }
            else
            {
              *v55 = v52;
              v56 = (char *)(v55 + 1);
            }
            v7[22] = v56;
          }
        }
        v13 = __p[0];
      }
      MeCab::Param::get<std::string>(v100, "dicdir", &v105);
      std::string::basic_string[abi:ne180100]<0>(v103, "rewrite.def");
      MeCab::create_filename((uint64_t)&v105, (uint64_t)v103, &v106);
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v110.__r_.__value_.__l.__data_);
      v110 = v106;
      *((_BYTE *)&v106.__r_.__value_.__s + 23) = 0;
      v106.__r_.__value_.__s.__data_[0] = 0;
      if (v104 < 0)
        operator delete(v103[0]);
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v105.__r_.__value_.__l.__data_);
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v80 = &v110;
      else
        v80 = (std::string *)v110.__r_.__value_.__r.__words[0];
      MeCab::DictionaryRewriter::open((MeCab::DictionaryRewriter *)(v7 + 24), (const char *)v80, 0);
LABEL_100:
      if (v107)
      {
        v108 = v107;
        operator delete(v107);
      }
    }
    __p[0] = *(void **)MEMORY[0x24BEDB7E0];
    *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB7E0] + 24);
    MEMORY[0x20BD061F8](v113);
    std::istream::~istream();
    MEMORY[0x20BD06354](v114);
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v110.__r_.__value_.__l.__data_);
  }
  return v22;
}

void sub_2083B2770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,std::locale a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (__p)
    operator delete(__p);
  std::ifstream::~ifstream(&STACK[0x20A8]);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(a1);
}

BOOL MeCab::Param::get<BOOL>(uint64_t a1, char *a2)
{
  uint64_t v3;
  void **v4;
  _BOOL8 v5;
  std::string v7;
  void *__p[2];
  char v9;

  v3 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v4 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>(v3, __p);
  if (v9 < 0)
    operator delete(__p[0]);
  if ((void **)(a1 + 16) == v4)
  {
    *(_BYTE *)operator new() = 0;
    MEMORY[0x20BD0639C]();
    return 0;
  }
  else
  {
    if (*((char *)v4 + 79) < 0)
      std::string::__init_copy_ctor_external(&v7, (const std::string::value_type *)v4[7], (std::string::size_type)v4[8]);
    else
      v7 = *(std::string *)(v4 + 7);
    v5 = MeCab_internal::lexical_cast<BOOL,std::string>((uint64_t)&v7);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_2083B2930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *MeCab::FeatureIndex::strdup(MeCab::FeatureIndex *this, const char *__s)
{
  size_t v4;
  char *v5;

  v4 = strlen(__s);
  v5 = (char *)MeCab::ChunkFreeList<char>::alloc((_QWORD *)this + 11, v4 + 1);
  return strncpy(v5, __s, v4);
}

uint64_t MeCab::DecoderFeatureIndex::open(MeCab::DecoderFeatureIndex *this, const MeCab::Param *a2)
{
  std::string *v4;
  unsigned int *v5;
  _DWORD *v6;
  unsigned int v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  void **v18;
  uint64_t v19;
  void *__p[2];
  unsigned __int8 v22;
  std::string v23;

  MeCab::Param::get<std::string>((uint64_t)a2, "model", &v23);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v23;
  else
    v4 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((MeCab::Mmap<char>::open((uint64_t)this + 632, (char *)v4, "r") & 1) != 0)
  {
    v5 = (unsigned int *)*((_QWORD *)this + 80);
    if (v5)
    {
      v7 = *v5;
      v6 = v5 + 1;
      *((_QWORD *)this + 41) = v7;
      *((_QWORD *)this + 42) = v6;
      v8 = &v6[2 * v7];
      Darts::DoubleArrayImpl<char,unsigned char,int,unsigned int,Darts::Length<char>>::clear((uint64_t)this + 976);
      *((_QWORD *)this + 122) = v8;
      *((_BYTE *)this + 1056) = 1;
      *((_QWORD *)this + 124) = 0;
      if (MeCab::FeatureIndex::openTemplate(this, a2, v9, v10))
      {
        v11 = 1;
        goto LABEL_18;
      }
      (*(void (**)(MeCab::DecoderFeatureIndex *))(*(_QWORD *)this + 16))(this);
    }
  }
  else
  {
    std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 43) - 24) + 344), 0);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 43, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"(", 1);
    v13 = (_QWORD *)std::ostream::operator<<();
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)") [", 3);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"mmap_.open(modelfile.c_str())", 29);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"] ", 2);
    v17 = (char *)MeCab::whatlog::str((MeCab::DecoderFeatureIndex *)((char *)this + 680));
    std::string::basic_string[abi:ne180100]<0>(__p, v17);
    if ((v22 & 0x80u) == 0)
      v18 = __p;
    else
      v18 = (void **)__p[0];
    if ((v22 & 0x80u) == 0)
      v19 = v22;
    else
      v19 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v18, v19);
    if ((char)v22 < 0)
      operator delete(__p[0]);
  }
  v11 = 0;
LABEL_18:
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  return v11;
}

void sub_2083B2B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::DecoderFeatureIndex::clear(uint64_t this)
{
  *(_QWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 72) = 0;
  return this;
}

void MeCab::EncoderFeatureIndex::clearcache(char **this)
{
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)(this + 82), this[83]);
  this[82] = (char *)(this + 83);
  this[84] = 0;
  this[83] = 0;
  std::__tree<std::__value_type<std::string,MeCab::FeatureSet>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::FeatureSet>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::FeatureSet>>>::destroy((uint64_t)(this + 33), this[34]);
  this[34] = 0;
  this[35] = 0;
  this[33] = (char *)(this + 34);
}

void MeCab::EncoderFeatureIndex::close(char **this)
{
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)(this + 79), this[80]);
  this[79] = (char *)(this + 80);
  this[81] = 0;
  this[80] = 0;
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)(this + 82), this[83]);
  this[82] = (char *)(this + 83);
  this[84] = 0;
  this[83] = 0;
  this[41] = 0;
}

void *MeCab::DecoderFeatureIndex::close(MeCab::DecoderFeatureIndex *this)
{
  void *result;

  Darts::DoubleArrayImpl<char,unsigned char,int,unsigned int,Darts::Length<char>>::clear((uint64_t)this + 976);
  result = MeCab::Mmap<char>::close((uint64_t)this + 632);
  *((_QWORD *)this + 41) = 0;
  return result;
}

double MeCab::FeatureIndex::calcCost(uint64_t a1, double *a2, double result)
{
  double v3;
  uint64_t v4;
  int *v5;
  int v6;
  uint64_t v7;
  int *v8;
  int v9;

  v3 = *a2;
  if (*(_QWORD *)(*(_QWORD *)a2 + 32) || *(_BYTE *)(*(_QWORD *)&v3 + 87) == 3)
  {
    v4 = *((_QWORD *)a2 + 2);
    if (*(_QWORD *)(v4 + 40) || *(_BYTE *)(v4 + 87) == 2)
    {
      result = *(double *)(*(_QWORD *)&v3 + 112);
      a2[4] = result;
      v5 = (int *)*((_QWORD *)a2 + 5);
      v6 = *v5;
      if (*v5 != -1)
      {
        v7 = *(_QWORD *)(a1 + 336);
        v8 = v5 + 1;
        do
        {
          result = result + *(double *)(v7 + 8 * v6);
          a2[4] = result;
          v9 = *v8++;
          v6 = v9;
        }
        while (v9 != -1);
      }
    }
  }
  return result;
}

uint64_t MeCab::ChunkFreeList<char>::alloc(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t result;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a1[1];
  v5 = a1[2] - v4;
  v6 = a1[5];
  if (v6 >= v5 >> 4)
  {
LABEL_5:
    if (a1[6] <= a2)
      v10 = a2;
    else
      v10 = a1[6];
    v11 = operator new[]();
    v12 = v11;
    v14 = (char *)a1[2];
    v13 = a1[3];
    if ((unint64_t)v14 >= v13)
    {
      v16 = (char *)a1[1];
      v17 = (v14 - v16) >> 4;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 60)
        std::vector<char *>::__throw_length_error[abi:ne180100]();
      v19 = v13 - (_QWORD)v16;
      if (v19 >> 3 > v18)
        v18 = v19 >> 3;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
        v20 = 0xFFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
      {
        if (v20 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v21 = (char *)operator new(16 * v20);
      }
      else
      {
        v21 = 0;
      }
      v23 = &v21[16 * v17];
      *(_QWORD *)v23 = v10;
      *((_QWORD *)v23 + 1) = v12;
      v15 = v23 + 16;
      if (v14 != v16)
      {
        do
        {
          *((_OWORD *)v23 - 1) = *((_OWORD *)v14 - 1);
          v23 -= 16;
          v14 -= 16;
        }
        while (v14 != v16);
        v14 = (char *)a1[1];
      }
      a1[1] = v23;
      a1[2] = v15;
      a1[3] = &v21[16 * v20];
      if (v14)
        operator delete(v14);
    }
    else
    {
      *(_QWORD *)v14 = v10;
      *((_QWORD *)v14 + 1) = v11;
      v15 = v14 + 16;
    }
    a1[2] = v15;
    v24 = a1[1];
    v25 = (((uint64_t)v15 - v24) >> 4) - 1;
    a1[4] += a2;
    a1[5] = v25;
    return *(_QWORD *)(v24 + 16 * v25 + 8);
  }
  else
  {
    v7 = v5 >> 4;
    v8 = a1[4];
    v9 = (_QWORD *)(v4 + 16 * v6 + 8);
    while (v8 + a2 >= *(v9 - 1))
    {
      v8 = 0;
      ++v6;
      a1[4] = 0;
      a1[5] = v6;
      v9 += 2;
      if (v7 == v6)
        goto LABEL_5;
    }
    result = *v9 + v8;
    a1[4] = v8 + a2;
  }
  return result;
}

uint64_t MeCab::DecoderFeatureIndex::buildFeature(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  size_t v17;
  std::string *v18;
  std::string *v19;
  std::string *v20;
  uint64_t v21;
  char v23;
  void *__p[2];
  char v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;

  a2[4] = 0;
  *(_QWORD *)(*a2 + 112) = 0;
  memset(&v31, 0, sizeof(v31));
  memset(&v30, 0, sizeof(v30));
  memset(&v29, 0, sizeof(v29));
  memset(&v28, 0, sizeof(v28));
  memset(&v27, 0, sizeof(v27));
  memset(&v26, 0, sizeof(v26));
  std::string::basic_string[abi:ne180100]<0>(__p, *(char **)(a2[2] + 64));
  if ((MeCab::DictionaryRewriter::rewrite2(a1 + 192, __p, &v31, &v30, &v29) & 1) == 0)
  {
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"(", 1);
    v5 = (_QWORD *)std::ostream::operator<<();
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") [", 3);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"rewrite_.rewrite2(path->lnode->feature, &ufeature1, &lfeature1, &rfeature1)", 75);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"] ", 2);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" cannot rewrite pattern: ", 25);
    v10 = strlen(*(const char **)(a2[2] + 64));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, *(_QWORD *)(a2[2] + 64), v10);
    MeCab::die::~die((MeCab::die *)&v23);
  }
  if (v25 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, *(char **)(*a2 + 64));
  if ((MeCab::DictionaryRewriter::rewrite2(a1 + 192, __p, &v28, &v27, &v26) & 1) == 0)
  {
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"(", 1);
    v12 = (_QWORD *)std::ostream::operator<<();
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)") [", 3);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"rewrite_.rewrite2(path->rnode->feature, &ufeature2, &lfeature2, &rfeature2)", 75);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"] ", 2);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" cannot rewrite pattern: ", 25);
    v17 = strlen(*(const char **)(*a2 + 64));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, *(_QWORD *)(*a2 + 64), v17);
    MeCab::die::~die((MeCab::die *)&v23);
  }
  if (v25 < 0)
    operator delete(__p[0]);
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &v28;
  else
    v18 = (std::string *)v28.__r_.__value_.__r.__words[0];
  if ((MeCab::FeatureIndex::buildUnigramFeature(a1, (uint64_t)a2, (char *)v18) & 1) != 0)
  {
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v29;
    else
      v19 = (std::string *)v29.__r_.__value_.__r.__words[0];
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v27;
    else
      v20 = (std::string *)v27.__r_.__value_.__r.__words[0];
    v21 = MeCab::FeatureIndex::buildBigramFeature(a1, (uint64_t)a2, (uint64_t)v19, (uint64_t)v20);
  }
  else
  {
    v21 = 0;
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  return v21;
}

void sub_2083B3170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;
  uint64_t v43;

  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  if (a30 < 0)
    operator delete(a25);
  if (a36 < 0)
    operator delete(a31);
  if (a42 < 0)
    operator delete(a37);
  if (*(char *)(v43 - 73) < 0)
    operator delete(*(void **)(v43 - 96));
  if (*(char *)(v43 - 49) < 0)
    operator delete(*(void **)(v42 + 24));
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::FeatureIndex::buildUnigramFeature(uint64_t a1, uint64_t a2, char *__src)
{
  int64_t v5;
  char **v6;
  char *v7;
  char *v8;
  char **v9;
  uint64_t v10;
  unint64_t v11;
  char *i;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  _BYTE **v22;
  _BYTE *v23;
  int v24;
  _BYTE *v25;
  int v26;
  char v27;
  int v28;
  const char *Index;
  char v30;
  uint64_t v31;
  int v32;
  int v33;
  unint64_t v34;
  char *v35;
  _DWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  int v44;
  unint64_t v45;
  char *v46;
  _DWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  int v63;
  void *v64;
  void *v65;
  void **v66;
  _BYTE *v68;
  char v69;
  char *v70[2];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  char __dst[2048];
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  v100 = 0u;
  v101 = 0u;
  v98 = 0u;
  v99 = 0u;
  v96 = 0u;
  v97 = 0u;
  v94 = 0u;
  v95 = 0u;
  v92 = 0u;
  v93 = 0u;
  v90 = 0u;
  v91 = 0u;
  v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  v82 = 0u;
  v83 = 0u;
  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  *(_OWORD *)v70 = 0u;
  v71 = 0u;
  v66 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
  strncpy(__dst, __src, 0x800uLL);
  v5 = strlen(__dst);
  if (v5 < 1)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = &__dst[v5];
    v8 = __dst;
    v9 = v70;
    v10 = 64;
    do
    {
      v11 = v10;
      for (i = v8; ; ++i)
      {
        v13 = *i;
        if (v13 != 9 && v13 != 32)
          break;
        ++v8;
      }
      if (v13 == 34)
      {
        v14 = (unsigned __int8 *)++i;
        v15 = (unsigned __int8 *)i;
        if (i < v7)
        {
          v14 = (unsigned __int8 *)i;
          v15 = (unsigned __int8 *)i;
          do
          {
            v16 = *v15;
            if (v16 == 34)
            {
              v17 = *++v15;
              if (v17 != 34)
                break;
            }
            *v14++ = v16;
            ++v15;
          }
          while (v15 < (unsigned __int8 *)v7);
        }
        v18 = (char *)memchr(v15, 44, v7 - (char *)v15);
        if (v18)
          v19 = v18;
        else
          v19 = v7;
      }
      else
      {
        v20 = (char *)memchr(i, 44, v7 - v8);
        if (v20)
          v21 = v20;
        else
          v21 = v7;
        v19 = &i[v21 - v8];
        v14 = (unsigned __int8 *)v19;
      }
      v10 = v11 - 1;
      if (v11 < 2)
      {
        *v9 = i;
        v6 = (char **)((char *)v6 + 1);
        if (v11 == 1)
          break;
      }
      else
      {
        *v14 = 0;
        *v9 = i;
        v6 = (char **)((char *)v6 + 1);
      }
      ++v9;
      v8 = v19 + 1;
    }
    while (v19 + 1 < v7);
  }
  v22 = *(_BYTE ***)(a1 + 144);
  if (v22 != *(_BYTE ***)(a1 + 152))
  {
    while (1)
    {
      v23 = *v22;
      *(_QWORD *)(a1 + 296) = 0;
      LOBYTE(v24) = *v23;
      if (*v23)
        break;
LABEL_62:
      if (MeCab::StringBuffer::reserve((MeCab::StringBuffer *)(a1 + 288), 1))
        *(_BYTE *)(*(_QWORD *)(a1 + 312) + (*(_QWORD *)(a1 + 296))++) = 0;
      if (*(_BYTE *)(a1 + 321))
        v31 = 0;
      else
        v31 = *(_QWORD *)(a1 + 312);
      v32 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v31);
      v33 = v32;
      if (v32 != -1)
      {
        v35 = *(char **)(a1 + 16);
        v34 = *(_QWORD *)(a1 + 24);
        if ((unint64_t)v35 >= v34)
        {
          v37 = (char *)*v66;
          v38 = (v35 - (_BYTE *)*v66) >> 2;
          v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 62)
            std::vector<char *>::__throw_length_error[abi:ne180100]();
          v40 = v34 - (_QWORD)v37;
          if (v40 >> 1 > v39)
            v39 = v40 >> 1;
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
            v41 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v41 = v39;
          if (v41)
          {
            v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 24, v41);
            v37 = *(char **)(a1 + 8);
            v35 = *(char **)(a1 + 16);
          }
          else
          {
            v42 = 0;
          }
          v43 = &v42[4 * v38];
          *(_DWORD *)v43 = v33;
          v36 = v43 + 4;
          while (v35 != v37)
          {
            v44 = *((_DWORD *)v35 - 1);
            v35 -= 4;
            *((_DWORD *)v43 - 1) = v44;
            v43 -= 4;
          }
          *(_QWORD *)(a1 + 8) = v43;
          *(_QWORD *)(a1 + 16) = v36;
          *(_QWORD *)(a1 + 24) = &v42[4 * v41];
          if (v37)
            operator delete(v37);
        }
        else
        {
          *(_DWORD *)v35 = v32;
          v36 = v35 + 4;
        }
        *(_QWORD *)(a1 + 16) = v36;
      }
LABEL_85:
      if (++v22 == *(_BYTE ***)(a1 + 152))
        goto LABEL_86;
    }
    while (1)
    {
      if (v24 != 37)
      {
        if ((char)v24 != 92)
        {
          if (MeCab::StringBuffer::reserve((MeCab::StringBuffer *)(a1 + 288), 1))
            *(_BYTE *)(*(_QWORD *)(a1 + 312) + (*(_QWORD *)(a1 + 296))++) = v24;
          goto LABEL_53;
        }
        v25 = v23 + 1;
        v68 = v23 + 1;
        v26 = (char)v23[1];
        if (v26 <= 101)
        {
          if (v26 == 98)
            v30 = 8;
          else
            v30 = 0;
          if (v26 == 97)
            v30 = 7;
          if (v26 == 92)
            v27 = 92;
          else
            v27 = v30;
        }
        else
        {
          v27 = 0;
          switch(v26)
          {
            case 'n':
              v27 = 10;
              break;
            case 'o':
            case 'p':
            case 'q':
            case 'u':
              break;
            case 'r':
              v27 = 13;
              break;
            case 's':
              v27 = 32;
              break;
            case 't':
              v27 = 9;
              break;
            case 'v':
              v27 = 11;
              break;
            default:
              if (v26 == 102)
                v27 = 12;
              else
                v27 = 0;
              break;
          }
        }
        if (MeCab::StringBuffer::reserve((MeCab::StringBuffer *)(a1 + 288), 1))
          *(_BYTE *)(*(_QWORD *)(a1 + 312) + (*(_QWORD *)(a1 + 296))++) = v27;
        goto LABEL_52;
      }
      v25 = v23 + 1;
      v68 = v23 + 1;
      v28 = (char)v23[1];
      if (v28 == 117)
        break;
      if (v28 == 116)
      {
        MeCab::StringBuffer::operator<<((MeCab::StringBuffer *)(a1 + 288), *(unsigned __int8 *)(*(_QWORD *)a2 + 86));
LABEL_52:
        v23 = v25;
        goto LABEL_53;
      }
      if (v28 != 70)
      {
        std::ios_base::clear((std::ios_base *)(a1 + 344 + *(_QWORD *)(*(_QWORD *)(a1 + 344) - 24)), 0);
        v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 344), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"(", 1);
        v49 = (_QWORD *)std::ostream::operator<<();
        v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)") [", 3);
        v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"false", 5);
        v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"] ", 2);
        v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"unkonwn meta char: ", 19);
        v69 = *v25;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)&v69, 1);
        return 0;
      }
      Index = MeCab::FeatureIndex::getIndex((MeCab::FeatureIndex *)&v68, v70, v6);
      if (!Index)
        goto LABEL_85;
      MeCab::StringBuffer::write((MeCab::StringBuffer *)(a1 + 288), Index);
      v23 = v68;
LABEL_53:
      v68 = v23 + 1;
      v24 = *++v23;
      if (!v24)
        goto LABEL_62;
    }
    MeCab::StringBuffer::write((MeCab::StringBuffer *)(a1 + 288), __src);
    goto LABEL_52;
  }
LABEL_86:
  v45 = *(_QWORD *)(a1 + 24);
  v46 = *(char **)(a1 + 16);
  if ((unint64_t)v46 >= v45)
  {
    v55 = (char *)*v66;
    v56 = (v46 - (_BYTE *)*v66) >> 2;
    v57 = v56 + 1;
    if ((unint64_t)(v56 + 1) >> 62)
      std::vector<char *>::__throw_length_error[abi:ne180100]();
    v58 = v45 - (_QWORD)v55;
    if (v58 >> 1 > v57)
      v57 = v58 >> 1;
    if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
      v59 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v59 = v57;
    if (v59)
    {
      v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 24, v59);
      v55 = *(char **)(a1 + 8);
      v46 = *(char **)(a1 + 16);
    }
    else
    {
      v60 = 0;
    }
    v61 = &v60[4 * v56];
    v62 = &v60[4 * v59];
    *(_DWORD *)v61 = -1;
    v47 = v61 + 4;
    while (v46 != v55)
    {
      v63 = *((_DWORD *)v46 - 1);
      v46 -= 4;
      *((_DWORD *)v61 - 1) = v63;
      v61 -= 4;
    }
    *(_QWORD *)(a1 + 8) = v61;
    *(_QWORD *)(a1 + 16) = v47;
    *(_QWORD *)(a1 + 24) = v62;
    if (v55)
      operator delete(v55);
  }
  else
  {
    *(_DWORD *)v46 = -1;
    v47 = v46 + 4;
  }
  *(_QWORD *)(a1 + 16) = v47;
  v64 = (void *)MeCab::ChunkFreeList<int>::alloc((_QWORD *)(a1 + 32), ((uint64_t)v47 - *(_QWORD *)(a1 + 8)) >> 2);
  *(_QWORD *)(*(_QWORD *)a2 + 128) = v64;
  v65 = *(void **)(a1 + 8);
  if (*(void **)(a1 + 16) != v65)
  {
    memmove(v64, v65, *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8));
    v65 = *v66;
  }
  *(_QWORD *)(a1 + 16) = v65;
  return 1;
}

uint64_t MeCab::FeatureIndex::buildBigramFeature(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  char **v12;
  char *v13;
  char *v14;
  char **v15;
  uint64_t v16;
  unint64_t v17;
  char *i;
  int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  int64_t v28;
  char **v29;
  char *v30;
  char *v31;
  char **v32;
  uint64_t v33;
  unint64_t v34;
  char *j;
  int v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  int v39;
  int v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  _QWORD *k;
  _BYTE *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  const char *Index;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  char *v56;
  _DWORD *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  int v65;
  unint64_t v66;
  char *v67;
  _DWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  int v84;
  void *v85;
  void *v86;
  uint64_t v87;
  void **v88;
  _BYTE *v89;
  char v90;
  char *v91[2];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  char *v123[2];
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  char __dst[2048];
  char __s[2048];
  uint64_t v157;

  v4 = MEMORY[0x24BDAC7A8](a1, a2, a3, a4);
  v6 = v5;
  v8 = v7;
  v87 = v9;
  v10 = v4;
  v157 = *MEMORY[0x24BDAC8D0];
  v154 = 0u;
  v153 = 0u;
  v151 = 0u;
  v152 = 0u;
  v149 = 0u;
  v150 = 0u;
  v147 = 0u;
  v148 = 0u;
  v145 = 0u;
  v146 = 0u;
  v143 = 0u;
  v144 = 0u;
  v141 = 0u;
  v142 = 0u;
  v139 = 0u;
  v140 = 0u;
  v137 = 0u;
  v138 = 0u;
  v135 = 0u;
  v136 = 0u;
  v133 = 0u;
  v134 = 0u;
  v131 = 0u;
  v132 = 0u;
  v129 = 0u;
  v130 = 0u;
  v127 = 0u;
  v128 = 0u;
  v125 = 0u;
  v126 = 0u;
  *(_OWORD *)v123 = 0u;
  v124 = 0u;
  v121 = 0u;
  v122 = 0u;
  v119 = 0u;
  v120 = 0u;
  v117 = 0u;
  v118 = 0u;
  v115 = 0u;
  v116 = 0u;
  v113 = 0u;
  v114 = 0u;
  v111 = 0u;
  v112 = 0u;
  v109 = 0u;
  v110 = 0u;
  v107 = 0u;
  v108 = 0u;
  v105 = 0u;
  v106 = 0u;
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  v99 = 0u;
  v100 = 0u;
  v97 = 0u;
  v98 = 0u;
  v95 = 0u;
  v96 = 0u;
  v93 = 0u;
  v94 = 0u;
  *(_OWORD *)v91 = 0u;
  v92 = 0u;
  v88 = (void **)(v4 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v4 + 8);
  strncpy(__dst, v7, 0x800uLL);
  strncpy(__s, v6, 0x800uLL);
  v11 = strlen(__dst);
  if (v11 < 1)
  {
    v12 = 0;
  }
  else
  {
    v12 = 0;
    v13 = &__dst[v11];
    v14 = __dst;
    v15 = v91;
    v16 = 64;
    do
    {
      v17 = v16;
      for (i = v14; ; ++i)
      {
        v19 = *i;
        if (v19 != 9 && v19 != 32)
          break;
        ++v14;
      }
      if (v19 == 34)
      {
        v20 = (unsigned __int8 *)++i;
        v21 = (unsigned __int8 *)i;
        if (i < v13)
        {
          v20 = (unsigned __int8 *)i;
          v21 = (unsigned __int8 *)i;
          do
          {
            v22 = *v21;
            if (v22 == 34)
            {
              v23 = *++v21;
              if (v23 != 34)
                break;
            }
            *v20++ = v22;
            ++v21;
          }
          while (v21 < (unsigned __int8 *)v13);
        }
        v24 = (char *)memchr(v21, 44, v13 - (char *)v21);
        if (v24)
          v25 = v24;
        else
          v25 = v13;
      }
      else
      {
        v26 = (char *)memchr(i, 44, v13 - v14);
        if (v26)
          v27 = v26;
        else
          v27 = v13;
        v25 = &i[v27 - v14];
        v20 = (unsigned __int8 *)v25;
      }
      v16 = v17 - 1;
      if (v17 < 2)
      {
        *v15 = i;
        v12 = (char **)((char *)v12 + 1);
        if (v17 == 1)
          break;
      }
      else
      {
        *v20 = 0;
        *v15 = i;
        v12 = (char **)((char *)v12 + 1);
      }
      ++v15;
      v14 = v25 + 1;
    }
    while (v25 + 1 < v13);
  }
  v28 = strlen(__s);
  if (v28 < 1)
  {
    v29 = 0;
  }
  else
  {
    v29 = 0;
    v30 = &__s[v28];
    v31 = __s;
    v32 = v123;
    v33 = 64;
    do
    {
      v34 = v33;
      for (j = v31; ; ++j)
      {
        v36 = *j;
        if (v36 != 9 && v36 != 32)
          break;
        ++v31;
      }
      if (v36 == 34)
      {
        v37 = (unsigned __int8 *)++j;
        v38 = (unsigned __int8 *)j;
        if (j < v30)
        {
          v37 = (unsigned __int8 *)j;
          v38 = (unsigned __int8 *)j;
          do
          {
            v39 = *v38;
            if (v39 == 34)
            {
              v40 = *++v38;
              if (v40 != 34)
                break;
            }
            *v37++ = v39;
            ++v38;
          }
          while (v38 < (unsigned __int8 *)v30);
        }
        v41 = (char *)memchr(v38, 44, v30 - (char *)v38);
        if (v41)
          v42 = v41;
        else
          v42 = v30;
      }
      else
      {
        v43 = (char *)memchr(j, 44, v30 - v31);
        if (v43)
          v44 = v43;
        else
          v44 = v30;
        v42 = &j[v44 - v31];
        v37 = (unsigned __int8 *)v42;
      }
      v33 = v34 - 1;
      if (v34 < 2)
      {
        *v32 = j;
        v29 = (char **)((char *)v29 + 1);
        if (v34 == 1)
          break;
      }
      else
      {
        *v37 = 0;
        *v32 = j;
        v29 = (char **)((char *)v29 + 1);
      }
      ++v32;
      v31 = v42 + 1;
    }
    while (v42 + 1 < v30);
  }
  for (k = *(_QWORD **)(v10 + 168); k != *(_QWORD **)(v10 + 176); ++k)
  {
    v89 = (_BYTE *)*k;
    v46 = v89;
    *(_QWORD *)(v10 + 296) = 0;
    LOBYTE(v47) = *v46;
    if (*v46)
    {
      do
      {
        if (v47 == 37)
        {
          v50 = (char)v46[1];
          v89 = v46 + 1;
          if (v50 > 107)
          {
            if (v50 == 108)
            {
              MeCab::StringBuffer::write((MeCab::StringBuffer *)(v10 + 288), v6);
            }
            else
            {
              if (v50 != 114)
              {
LABEL_112:
                std::ios_base::clear((std::ios_base *)(v10 + 344 + *(_QWORD *)(*(_QWORD *)(v10 + 344) - 24)), 0);
                v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(v10 + 344), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"(", 1);
                v70 = (_QWORD *)std::ostream::operator<<();
                v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)") [", 3);
                v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"false", 5);
                v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"] ", 2);
                v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"unknown meta char: ", 19);
                v90 = v46[1];
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)&v90, 1);
                return 0;
              }
              MeCab::StringBuffer::write((MeCab::StringBuffer *)(v10 + 288), v8);
            }
          }
          else
          {
            if (v50 == 76)
            {
              Index = MeCab::FeatureIndex::getIndex((MeCab::FeatureIndex *)&v89, v91, v12);
              if (!Index)
                goto LABEL_109;
            }
            else
            {
              if (v50 != 82)
                goto LABEL_112;
              Index = MeCab::FeatureIndex::getIndex((MeCab::FeatureIndex *)&v89, v123, v29);
              if (!Index)
                goto LABEL_109;
            }
            MeCab::StringBuffer::write((MeCab::StringBuffer *)(v10 + 288), Index);
          }
        }
        else
        {
          if ((char)v47 == 92)
          {
            LOBYTE(v47) = 0;
            v49 = (char)v46[1];
            v48 = v49;
            v89 = v46 + 1;
            if (v49 <= 101)
            {
              switch(v48)
              {
                case '\\':
                  LOBYTE(v47) = 92;
                  break;
                case 'a':
                  LOBYTE(v47) = 7;
                  break;
                case 'b':
                  LOBYTE(v47) = 8;
                  break;
              }
            }
            else
            {
              switch(v48)
              {
                case 'n':
                  LOBYTE(v47) = 10;
                  break;
                case 'o':
                case 'p':
                case 'q':
                case 'u':
                  break;
                case 'r':
                  LOBYTE(v47) = 13;
                  break;
                case 's':
                  LOBYTE(v47) = 32;
                  break;
                case 't':
                  LOBYTE(v47) = 9;
                  break;
                case 'v':
                  LOBYTE(v47) = 11;
                  break;
                default:
                  if (v48 == 102)
                    LOBYTE(v47) = 12;
                  else
                    LOBYTE(v47) = 0;
                  break;
              }
            }
          }
          if (MeCab::StringBuffer::reserve((MeCab::StringBuffer *)(v10 + 288), 1))
            *(_BYTE *)(*(_QWORD *)(v10 + 312) + (*(_QWORD *)(v10 + 296))++) = v47;
        }
        v46 = v89 + 1;
        v47 = *++v89;
      }
      while (v47);
    }
    if (MeCab::StringBuffer::reserve((MeCab::StringBuffer *)(v10 + 288), 1))
      *(_BYTE *)(*(_QWORD *)(v10 + 312) + (*(_QWORD *)(v10 + 296))++) = 0;
    if (*(_BYTE *)(v10 + 321))
      v52 = 0;
    else
      v52 = *(_QWORD *)(v10 + 312);
    v53 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 48))(v10, v52);
    v54 = v53;
    if (v53 != -1)
    {
      v56 = *(char **)(v10 + 16);
      v55 = *(_QWORD *)(v10 + 24);
      if ((unint64_t)v56 >= v55)
      {
        v58 = (char *)*v88;
        v59 = (v56 - (_BYTE *)*v88) >> 2;
        v60 = v59 + 1;
        if ((unint64_t)(v59 + 1) >> 62)
          std::vector<char *>::__throw_length_error[abi:ne180100]();
        v61 = v55 - (_QWORD)v58;
        if (v61 >> 1 > v60)
          v60 = v61 >> 1;
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
          v62 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v62 = v60;
        if (v62)
        {
          v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v10 + 24, v62);
          v58 = *(char **)(v10 + 8);
          v56 = *(char **)(v10 + 16);
        }
        else
        {
          v63 = 0;
        }
        v64 = &v63[4 * v59];
        *(_DWORD *)v64 = v54;
        v57 = v64 + 4;
        while (v56 != v58)
        {
          v65 = *((_DWORD *)v56 - 1);
          v56 -= 4;
          *((_DWORD *)v64 - 1) = v65;
          v64 -= 4;
        }
        *(_QWORD *)(v10 + 8) = v64;
        *(_QWORD *)(v10 + 16) = v57;
        *(_QWORD *)(v10 + 24) = &v63[4 * v62];
        if (v58)
          operator delete(v58);
      }
      else
      {
        *(_DWORD *)v56 = v53;
        v57 = v56 + 4;
      }
      *(_QWORD *)(v10 + 16) = v57;
    }
LABEL_109:
    ;
  }
  v66 = *(_QWORD *)(v10 + 24);
  v67 = *(char **)(v10 + 16);
  if ((unint64_t)v67 >= v66)
  {
    v76 = (char *)*v88;
    v77 = (v67 - (_BYTE *)*v88) >> 2;
    v78 = v77 + 1;
    if ((unint64_t)(v77 + 1) >> 62)
      std::vector<char *>::__throw_length_error[abi:ne180100]();
    v79 = v66 - (_QWORD)v76;
    if (v79 >> 1 > v78)
      v78 = v79 >> 1;
    if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL)
      v80 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v80 = v78;
    if (v80)
    {
      v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v10 + 24, v80);
      v76 = *(char **)(v10 + 8);
      v67 = *(char **)(v10 + 16);
    }
    else
    {
      v81 = 0;
    }
    v82 = &v81[4 * v77];
    v83 = &v81[4 * v80];
    *(_DWORD *)v82 = -1;
    v68 = v82 + 4;
    while (v67 != v76)
    {
      v84 = *((_DWORD *)v67 - 1);
      v67 -= 4;
      *((_DWORD *)v82 - 1) = v84;
      v82 -= 4;
    }
    *(_QWORD *)(v10 + 8) = v82;
    *(_QWORD *)(v10 + 16) = v68;
    *(_QWORD *)(v10 + 24) = v83;
    if (v76)
      operator delete(v76);
  }
  else
  {
    *(_DWORD *)v67 = -1;
    v68 = v67 + 4;
  }
  *(_QWORD *)(v10 + 16) = v68;
  v85 = (void *)MeCab::ChunkFreeList<int>::alloc((_QWORD *)(v10 + 32), ((uint64_t)v68 - *(_QWORD *)(v10 + 8)) >> 2);
  *(_QWORD *)(v87 + 40) = v85;
  v86 = *(void **)(v10 + 8);
  if (*(void **)(v10 + 16) != v86)
  {
    memmove(v85, v86, *(_QWORD *)(v10 + 16) - *(_QWORD *)(v10 + 8));
    v86 = *v88;
  }
  *(_QWORD *)(v10 + 16) = v86;
  return 1;
}

uint64_t MeCab::EncoderFeatureIndex::buildFeature(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  size_t v17;
  std::string *v18;
  char v19;
  char *v20;
  uint64_t **v21;
  void **v22;
  std::string *v23;
  std::string *v24;
  char *v25;
  std::string *v26;
  uint64_t v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t *v30;
  std::string *v31;
  void **v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  std::string *v44;
  std::string *v45;
  uint64_t v46;
  uint64_t **v47;
  uint64_t **v48;
  uint64_t *v49;
  std::string *v50;
  void *__p[2];
  uint64_t v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  uint64_t v60;

  a2[4] = 0;
  *(_QWORD *)(*a2 + 112) = 0;
  memset(&v59, 0, sizeof(v59));
  memset(&v58, 0, sizeof(v58));
  memset(&v57, 0, sizeof(v57));
  memset(&v56, 0, sizeof(v56));
  memset(&v55, 0, sizeof(v55));
  memset(&v54, 0, sizeof(v54));
  std::string::basic_string[abi:ne180100]<0>(__p, *(char **)(a2[2] + 64));
  if ((MeCab::DictionaryRewriter::rewrite2(a1 + 192, __p, &v59, &v58, &v57) & 1) == 0)
  {
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"(", 1);
    v5 = (_QWORD *)std::ostream::operator<<();
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") [", 3);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"rewrite_.rewrite2(path->lnode->feature, &ufeature1, &lfeature1, &rfeature1)", 75);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"] ", 2);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" cannot rewrite pattern: ", 25);
    v10 = strlen(*(const char **)(a2[2] + 64));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, *(_QWORD *)(a2[2] + 64), v10);
    MeCab::die::~die((MeCab::die *)&v60);
  }
  if (SHIBYTE(v53) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, *(char **)(*a2 + 64));
  if ((MeCab::DictionaryRewriter::rewrite2(a1 + 192, __p, &v56, &v55, &v54) & 1) == 0)
  {
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"(", 1);
    v12 = (_QWORD *)std::ostream::operator<<();
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)") [", 3);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"rewrite_.rewrite2(path->rnode->feature, &ufeature2, &lfeature2, &rfeature2)", 75);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"] ", 2);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" cannot rewrite pattern: ", 25);
    v17 = strlen(*(const char **)(*a2 + 64));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, *(_QWORD *)(*a2 + 64), v17);
    MeCab::die::~die((MeCab::die *)&v60);
  }
  if (SHIBYTE(v53) < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 296) = 0;
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &v56;
  else
    v18 = (std::string *)v56.__r_.__value_.__r.__words[0];
  MeCab::StringBuffer::write((MeCab::StringBuffer *)(a1 + 288), (const char *)v18);
  if (MeCab::StringBuffer::reserve((MeCab::StringBuffer *)(a1 + 288), 1))
    *(_BYTE *)(*(_QWORD *)(a1 + 312) + (*(_QWORD *)(a1 + 296))++) = 32;
  v19 = *(_BYTE *)(*a2 + 86);
  if (MeCab::StringBuffer::reserve((MeCab::StringBuffer *)(a1 + 288), 1))
    *(_BYTE *)(*(_QWORD *)(a1 + 312) + (*(_QWORD *)(a1 + 296))++) = v19;
  if (MeCab::StringBuffer::reserve((MeCab::StringBuffer *)(a1 + 288), 1))
    *(_BYTE *)(*(_QWORD *)(a1 + 312) + (*(_QWORD *)(a1 + 296))++) = 0;
  if (*(_BYTE *)(a1 + 321))
    v20 = 0;
  else
    v20 = *(char **)(a1 + 312);
  std::string::basic_string[abi:ne180100]<0>(__p, v20);
  v21 = (uint64_t **)(a1 + 656);
  v22 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>(a1 + 656, __p);
  if ((void **)(a1 + 664) == v22)
  {
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v56;
    else
      v26 = (std::string *)v56.__r_.__value_.__r.__words[0];
    if (!MeCab::FeatureIndex::buildUnigramFeature(a1, (uint64_t)a2, (char *)v26))
      goto LABEL_64;
    v27 = *(_QWORD *)(*a2 + 128);
    v28 = (uint64_t **)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__find_equal<std::string>(a1 + 656, &v60, __p);
    if (!*v28)
    {
      v29 = v28;
      v30 = (uint64_t *)operator new(0x48uLL);
      v31 = (std::string *)(v30 + 4);
      if (SHIBYTE(v53) < 0)
      {
        std::string::__init_copy_ctor_external(v31, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)&v31->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v30[6] = v53;
      }
      v30[7] = v27;
      v30[8] = 1;
      std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__insert_node_at((uint64_t **)(a1 + 656), v60, v29, v30);
    }
  }
  else
  {
    *(_QWORD *)(*a2 + 128) = v22[7];
    v22[8] = (char *)v22[8] + 1;
  }
  if (SHIBYTE(v53) < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 296) = 0;
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = &v57;
  else
    v23 = (std::string *)v57.__r_.__value_.__r.__words[0];
  MeCab::StringBuffer::write((MeCab::StringBuffer *)(a1 + 288), (const char *)v23);
  if (MeCab::StringBuffer::reserve((MeCab::StringBuffer *)(a1 + 288), 1))
    *(_BYTE *)(*(_QWORD *)(a1 + 312) + (*(_QWORD *)(a1 + 296))++) = 32;
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &v55;
  else
    v24 = (std::string *)v55.__r_.__value_.__r.__words[0];
  MeCab::StringBuffer::write((MeCab::StringBuffer *)(a1 + 288), (const char *)v24);
  if (MeCab::StringBuffer::reserve((MeCab::StringBuffer *)(a1 + 288), 1))
    *(_BYTE *)(*(_QWORD *)(a1 + 312) + (*(_QWORD *)(a1 + 296))++) = 0;
  if (*(_BYTE *)(a1 + 321))
    v25 = 0;
  else
    v25 = *(char **)(a1 + 312);
  std::string::basic_string[abi:ne180100]<0>(__p, v25);
  v32 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>(a1 + 656, __p);
  if ((void **)(a1 + 664) != v32)
  {
    a2[5] = v32[7];
    v32[8] = (char *)v32[8] + 1;
LABEL_47:
    if (SHIBYTE(v53) < 0)
      operator delete(__p[0]);
    if (!a2[5])
    {
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"(", 1);
      v34 = (_QWORD *)std::ostream::operator<<();
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)") [", 3);
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"path->fvector", 13);
      v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" fvector is NULL", 16);
      MeCab::die::~die((MeCab::die *)__p);
    }
    if (!*(_QWORD *)(*a2 + 128))
    {
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"(", 1);
      v39 = (_QWORD *)std::ostream::operator<<();
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)") [", 3);
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"path->rnode->fvector", 20);
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"fevector is NULL", 16);
      MeCab::die::~die((MeCab::die *)__p);
    }
    v43 = 1;
    goto LABEL_67;
  }
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v44 = &v57;
  else
    v44 = (std::string *)v57.__r_.__value_.__r.__words[0];
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v45 = &v55;
  else
    v45 = (std::string *)v55.__r_.__value_.__r.__words[0];
  if (MeCab::FeatureIndex::buildBigramFeature(a1, (uint64_t)a2, (uint64_t)v44, (uint64_t)v45))
  {
    v46 = a2[5];
    v47 = (uint64_t **)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__find_equal<std::string>(a1 + 656, &v60, __p);
    if (!*v47)
    {
      v48 = v47;
      v49 = (uint64_t *)operator new(0x48uLL);
      v50 = (std::string *)(v49 + 4);
      if (SHIBYTE(v53) < 0)
      {
        std::string::__init_copy_ctor_external(v50, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)&v50->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v49[6] = v53;
      }
      v49[7] = v46;
      v49[8] = 1;
      std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__insert_node_at(v21, v60, v48, v49);
    }
    goto LABEL_47;
  }
LABEL_64:
  if (SHIBYTE(v53) < 0)
    operator delete(__p[0]);
  v43 = 0;
LABEL_67:
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  return v43;
}

void sub_2083B4794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  void *v44;
  uint64_t v45;

  operator delete(v44);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  if (a38 < 0)
    operator delete(a33);
  if (a44 < 0)
    operator delete(a39);
  if (*(char *)(v45 - 89) < 0)
    operator delete(*(void **)(v45 - 112));
  _Unwind_Resume(a1);
}

MeCab::StringBuffer *MeCab::StringBuffer::operator<<(MeCab::StringBuffer *a1, unint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  char *v4;
  char *v5;
  char *v6;
  char v7;
  char __s;
  _BYTE v11[71];

  *(_QWORD *)&v11[63] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    goto LABEL_6;
  v2 = 0;
  do
  {
    v11[v2++ - 1] = (a2 % 0xA) | 0x30;
    v3 = a2 > 9;
    a2 /= 0xAuLL;
  }
  while (v3);
  if (v2)
  {
    v4 = &v11[v2 - 1];
  }
  else
  {
LABEL_6:
    v4 = v11;
    __s = 48;
  }
  *v4 = 0;
  v5 = v4 - 1;
  if (v4 != &__s && v4 - 1 > &__s)
  {
    v6 = v11;
    do
    {
      v7 = *(v6 - 1);
      *(v6 - 1) = *v5;
      *v5-- = v7;
    }
    while (v6++ < v5);
  }
  return MeCab::StringBuffer::write(a1, &__s);
}

uint64_t MeCab::ChunkFreeList<int>::alloc(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t result;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a1[1];
  v5 = a1[2] - v4;
  v6 = a1[5];
  if (v6 >= v5 >> 4)
  {
LABEL_5:
    if (a1[6] <= a2)
      v10 = a2;
    else
      v10 = a1[6];
    v11 = operator new[]();
    v12 = v11;
    v14 = (char *)a1[2];
    v13 = a1[3];
    if ((unint64_t)v14 >= v13)
    {
      v16 = (char *)a1[1];
      v17 = (v14 - v16) >> 4;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 60)
        std::vector<char *>::__throw_length_error[abi:ne180100]();
      v19 = v13 - (_QWORD)v16;
      if (v19 >> 3 > v18)
        v18 = v19 >> 3;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
        v20 = 0xFFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
      {
        if (v20 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v21 = (char *)operator new(16 * v20);
      }
      else
      {
        v21 = 0;
      }
      v23 = &v21[16 * v17];
      *(_QWORD *)v23 = v10;
      *((_QWORD *)v23 + 1) = v12;
      v15 = v23 + 16;
      if (v14 != v16)
      {
        do
        {
          *((_OWORD *)v23 - 1) = *((_OWORD *)v14 - 1);
          v23 -= 16;
          v14 -= 16;
        }
        while (v14 != v16);
        v14 = (char *)a1[1];
      }
      a1[1] = v23;
      a1[2] = v15;
      a1[3] = &v21[16 * v20];
      if (v14)
        operator delete(v14);
    }
    else
    {
      *(_QWORD *)v14 = v10;
      *((_QWORD *)v14 + 1) = v11;
      v15 = v14 + 16;
    }
    a1[2] = v15;
    v24 = a1[1];
    v25 = (((uint64_t)v15 - v24) >> 4) - 1;
    a1[4] += a2;
    a1[5] = v25;
    return *(_QWORD *)(v24 + 16 * v25 + 8);
  }
  else
  {
    v7 = v5 >> 4;
    v8 = a1[4];
    v9 = (_QWORD *)(v4 + 16 * v6 + 8);
    while (v8 + a2 >= *(v9 - 1))
    {
      v8 = 0;
      ++v6;
      a1[4] = 0;
      a1[5] = v6;
      v9 += 2;
      if (v7 == v6)
        goto LABEL_5;
    }
    result = *v9 + 4 * v8;
    a1[4] = v8 + a2;
  }
  return result;
}

uint64_t MeCab::DecoderFeatureIndex::id(MeCab::DecoderFeatureIndex *this, const char *__s)
{
  const char *v2;
  size_t v4;
  int *v5;
  int v6;
  int v7;
  uint64_t v8;
  int *v9;
  int v10;
  int v11;

  v2 = __s;
  v4 = strlen(__s);
  v5 = (int *)*((_QWORD *)this + 122);
  v6 = *v5;
  if (v4)
  {
    while (1)
    {
      v7 = *(unsigned __int8 *)v2++;
      v8 = (v6 + v7 + 1);
      if (v6 != v5[2 * v8 + 1])
        return 0xFFFFFFFFLL;
      v6 = v5[2 * v8];
      if (!--v4)
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    v9 = &v5[2 * v6];
    v11 = *v9;
    v10 = v9[1];
    if (v11 < 0 && v6 == v10)
      return ~v11;
    else
      return 0xFFFFFFFFLL;
  }
}

uint64_t MeCab::EncoderFeatureIndex::id(MeCab::EncoderFeatureIndex *this, char *a2)
{
  void **v4;
  _QWORD *v5;
  void **v6;
  char v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  void *v11[2];
  uint64_t v12;
  void *__p[2];
  uint64_t v14;
  int v15;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v4 = (void **)((char *)this + 640);
  v5 = (_QWORD *)*((_QWORD *)this + 80);
  if (!v5)
    goto LABEL_11;
  v6 = (void **)((char *)this + 640);
  do
  {
    v7 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5 + 4, __p);
    if (v7 >= 0)
      v8 = v5;
    else
      v8 = v5 + 1;
    if (v7 >= 0)
      v6 = (void **)v5;
    v5 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v4
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, v6 + 4) & 0x80) != 0)
  {
LABEL_11:
    v6 = (void **)((char *)this + 640);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  if (v4 != v6)
    return *((unsigned int *)v6 + 14);
  std::string::basic_string[abi:ne180100]<0>(v11, a2);
  v10 = *((_QWORD *)this + 41);
  *(_OWORD *)__p = *(_OWORD *)v11;
  v14 = v12;
  v11[0] = 0;
  v11[1] = 0;
  v12 = 0;
  v15 = v10;
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string,int>>((uint64_t **)this + 79, __p, (uint64_t)__p);
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
  result = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = result + 1;
  return result;
}

void sub_2083B4CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void MeCab::EncoderFeatureIndex::shrink(unint64_t *a1, unint64_t a2, void **a3)
{
  _QWORD *v6;
  _BYTE *v7;
  unint64_t *v8;
  int *v9;
  int v10;
  int *v11;
  int v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t **v17;
  uint64_t **v18;
  uint64_t *v19;
  int v20;
  _DWORD *v21;
  unint64_t *v22;
  uint64_t *v23;
  int v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t **v27;
  int v28;
  uint64_t **v29;
  uint64_t *v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t *v40;
  int v41;
  _DWORD *v42;
  unint64_t *v43;
  unint64_t *v44;
  unint64_t *v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t *v54;
  unint64_t *v55;
  unint64_t v56;
  _BYTE *v57;
  unint64_t *v58;
  BOOL v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  uint64_t *v67;
  _DWORD *v68;
  int v69;
  _DWORD *v70;
  uint64_t **v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t **v74;
  int v75;
  uint64_t **v76;
  uint64_t **v77;
  int v78;
  unint64_t *v79;
  unint64_t *v80;
  unint64_t v81;
  char *v82;
  char *v83;
  _BYTE *v84;
  _QWORD *v85;
  int64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t **v90;
  uint64_t *v91;
  uint64_t **v92;
  uint64_t **v93;
  int v94;
  uint64_t **v95;
  size_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _BYTE *v101;
  void *v102;
  const void *v103;
  unint64_t *v104;
  void **v105;
  void *__src;
  void *v107;
  uint64_t v108;
  uint64_t **v109;
  uint64_t *v110;
  uint64_t v111;
  void *__p;
  _BYTE *v113;

  if (a2 < 2)
    return;
  std::vector<unsigned long>::vector(&__p, a1[41]);
  v6 = __p;
  v7 = v113;
  if (v113 - (_BYTE *)__p >= 1)
    bzero(__p, 8 * (((unint64_t)(v113 - (_BYTE *)__p) >> 3) - ((unint64_t)(v113 - (_BYTE *)__p) > 7)) + 8);
  v8 = (unint64_t *)a1[82];
  if (v8 != a1 + 83)
  {
    do
    {
      v9 = (int *)v8[7];
      v10 = *v9;
      if (*v9 != -1)
      {
        v11 = v9 + 1;
        do
        {
          v6[v10] += v8[8];
          v12 = *v11++;
          v10 = v12;
        }
        while (v12 != -1);
      }
      v13 = (unint64_t *)v8[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (unint64_t *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (unint64_t *)v8[2];
          v59 = *v14 == (_QWORD)v8;
          v8 = v14;
        }
        while (!v59);
      }
      v8 = v14;
    }
    while (v14 != a1 + 83);
  }
  v104 = a1 + 83;
  v105 = a3;
  a1[41] = 0;
  v110 = 0;
  v111 = 0;
  v109 = &v110;
  if (v7 != (_BYTE *)v6)
  {
    v15 = 0;
    do
    {
      if (v6[v15] >= a2)
      {
        v16 = a1[41];
        a1[41] = v16 + 1;
        v17 = &v110;
        v18 = &v110;
        if (v110)
        {
          v19 = v110;
          while (1)
          {
            while (1)
            {
              v18 = (uint64_t **)v19;
              v20 = *((_DWORD *)v19 + 7);
              if (v20 <= (int)v15)
                break;
              v19 = *v18;
              v17 = v18;
              if (!*v18)
                goto LABEL_25;
            }
            if (v20 >= (int)v15)
              break;
            v19 = v18[1];
            if (!v19)
            {
              v17 = v18 + 1;
              goto LABEL_25;
            }
          }
        }
        else
        {
LABEL_25:
          v21 = operator new(0x28uLL);
          v21[7] = v15;
          v21[8] = v16;
          *(_QWORD *)v21 = 0;
          *((_QWORD *)v21 + 1) = 0;
          *((_QWORD *)v21 + 2) = v18;
          *v17 = (uint64_t *)v21;
          if (*v109)
          {
            v109 = (uint64_t **)*v109;
            v21 = *v17;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v110, (uint64_t *)v21);
          v6 = __p;
          ++v111;
          v7 = v113;
        }
      }
      ++v15;
    }
    while (v15 < (v7 - (_BYTE *)v6) >> 3);
  }
  v22 = (unint64_t *)a1[79];
  if (v22 == a1 + 80)
    goto LABEL_136;
  do
  {
    v23 = v110;
    if (v110)
    {
      v24 = *((_DWORD *)v22 + 14);
      v25 = &v110;
      do
      {
        v26 = v23;
        v27 = v25;
        v28 = *((_DWORD *)v23 + 7);
        v29 = (uint64_t **)(v23 + 1);
        if (v28 >= v24)
        {
          v29 = (uint64_t **)v26;
          v25 = (uint64_t **)v26;
        }
        v23 = *v29;
      }
      while (v23);
      if (v25 != &v110)
      {
        v30 = v28 >= v24 ? v26 : (uint64_t *)v27;
        if (v24 >= *((_DWORD *)v30 + 7))
        {
          if (v28 >= v24)
            v42 = v26;
          else
            v42 = v27;
          *((_DWORD *)v22 + 14) = v42[8];
          v43 = (unint64_t *)v22[1];
          if (v43)
          {
            do
            {
              v34 = v43;
              v43 = (unint64_t *)*v43;
            }
            while (v43);
          }
          else
          {
            do
            {
              v34 = (unint64_t *)v22[2];
              v59 = *v34 == (_QWORD)v22;
              v22 = v34;
            }
            while (!v59);
          }
          goto LABEL_135;
        }
      }
    }
    v31 = (unint64_t *)v22[1];
    v32 = v31;
    v33 = v22;
    if (v31)
    {
      do
      {
        v34 = v32;
        v32 = (unint64_t *)*v32;
      }
      while (v32);
    }
    else
    {
      do
      {
        v34 = (unint64_t *)v33[2];
        v59 = *v34 == (_QWORD)v33;
        v33 = v34;
      }
      while (!v59);
    }
    v35 = v22;
    if (v31)
    {
      do
      {
        v36 = v31;
        v31 = (unint64_t *)*v31;
      }
      while (v31);
    }
    else
    {
      do
      {
        v36 = (unint64_t *)v35[2];
        v59 = *v36 == (_QWORD)v35;
        v35 = v36;
      }
      while (!v59);
    }
    if ((unint64_t *)a1[79] == v22)
      a1[79] = (unint64_t)v36;
    --a1[81];
    v37 = (unint64_t *)a1[80];
    v38 = *v22;
    v39 = v22;
    if (*v22)
    {
      v40 = (unint64_t *)v22[1];
      if (!v40)
      {
        v39 = v22;
LABEL_67:
        v41 = 0;
        *(_QWORD *)(v38 + 16) = v39[2];
        goto LABEL_68;
      }
      do
      {
        v39 = v40;
        v40 = (unint64_t *)*v40;
      }
      while (v40);
    }
    v38 = v39[1];
    if (v38)
      goto LABEL_67;
    v41 = 1;
LABEL_68:
    v44 = (unint64_t *)v39[2];
    v45 = (unint64_t *)*v44;
    if ((unint64_t *)*v44 == v39)
    {
      *v44 = v38;
      if (v39 == v37)
      {
        v45 = 0;
        v37 = (unint64_t *)v38;
      }
      else
      {
        v45 = (unint64_t *)v44[1];
      }
    }
    else
    {
      v44[1] = v38;
    }
    v46 = *((unsigned __int8 *)v39 + 24);
    if (v39 != v22)
    {
      v47 = v22[2];
      v39[2] = v47;
      *(_QWORD *)(v47 + 8 * (*(_QWORD *)v22[2] != (_QWORD)v22)) = v39;
      v48 = *v22;
      *v39 = *v22;
      *(_QWORD *)(v48 + 16) = v39;
      v49 = v22[1];
      v39[1] = v49;
      if (v49)
        *(_QWORD *)(v49 + 16) = v39;
      *((_BYTE *)v39 + 24) = *((_BYTE *)v22 + 24);
      if (v37 == v22)
        v37 = v39;
    }
    if (!v46 || !v37)
      goto LABEL_132;
    if (!v41)
    {
      *(_BYTE *)(v38 + 24) = 1;
      goto LABEL_132;
    }
    while (1)
    {
      v50 = v45[2];
      if (*(unint64_t **)v50 != v45)
        break;
      if (!*((_BYTE *)v45 + 24))
      {
        *((_BYTE *)v45 + 24) = 1;
        *(_BYTE *)(v50 + 24) = 0;
        v56 = v45[1];
        *(_QWORD *)v50 = v56;
        if (v56)
          *(_QWORD *)(v56 + 16) = v50;
        v45[2] = *(_QWORD *)(v50 + 16);
        *(_QWORD *)(*(_QWORD *)(v50 + 16) + 8 * (**(_QWORD **)(v50 + 16) != v50)) = v45;
        v45[1] = v50;
        *(_QWORD *)(v50 + 16) = v45;
        if (v37 == (unint64_t *)v50)
          v37 = v45;
        v45 = *(unint64_t **)v50;
      }
      v57 = (_BYTE *)*v45;
      if (*v45 && !v57[24])
        goto LABEL_127;
      v58 = (unint64_t *)v45[1];
      if (v58 && !*((_BYTE *)v58 + 24))
      {
        if (v57 && !v57[24])
        {
LABEL_127:
          v58 = v45;
        }
        else
        {
          *((_BYTE *)v58 + 24) = 1;
          *((_BYTE *)v45 + 24) = 0;
          v64 = *v58;
          v45[1] = *v58;
          if (v64)
            *(_QWORD *)(v64 + 16) = v45;
          v58[2] = v45[2];
          *(_QWORD *)(v45[2] + 8 * (*(_QWORD *)v45[2] != (_QWORD)v45)) = v58;
          *v58 = (unint64_t)v45;
          v45[2] = (unint64_t)v58;
          v57 = v45;
        }
        v61 = v58[2];
        *((_BYTE *)v58 + 24) = *(_BYTE *)(v61 + 24);
        *(_BYTE *)(v61 + 24) = 1;
        v57[24] = 1;
        v62 = *(uint64_t **)v61;
        v65 = *(_QWORD *)(*(_QWORD *)v61 + 8);
        *(_QWORD *)v61 = v65;
        if (v65)
          *(_QWORD *)(v65 + 16) = v61;
        v62[2] = *(_QWORD *)(v61 + 16);
        *(_QWORD *)(*(_QWORD *)(v61 + 16) + 8 * (**(_QWORD **)(v61 + 16) != v61)) = v62;
        v62[1] = v61;
        goto LABEL_131;
      }
      *((_BYTE *)v45 + 24) = 0;
      v55 = (unint64_t *)v45[2];
      if (*((_BYTE *)v55 + 24))
        v59 = v55 == v37;
      else
        v59 = 1;
      if (v59)
        goto LABEL_112;
LABEL_109:
      v45 = *(unint64_t **)(v55[2] + 8 * (*(_QWORD *)v55[2] == (_QWORD)v55));
    }
    if (!*((_BYTE *)v45 + 24))
    {
      *((_BYTE *)v45 + 24) = 1;
      *(_BYTE *)(v50 + 24) = 0;
      v51 = *(uint64_t **)(v50 + 8);
      v52 = *v51;
      *(_QWORD *)(v50 + 8) = *v51;
      if (v52)
        *(_QWORD *)(v52 + 16) = v50;
      v51[2] = *(_QWORD *)(v50 + 16);
      *(_QWORD *)(*(_QWORD *)(v50 + 16) + 8 * (**(_QWORD **)(v50 + 16) != v50)) = v51;
      *v51 = v50;
      *(_QWORD *)(v50 + 16) = v51;
      if (v37 == (unint64_t *)*v45)
        v37 = v45;
      v45 = *(unint64_t **)(*v45 + 8);
    }
    v53 = (unint64_t *)*v45;
    if (!*v45 || *((_BYTE *)v53 + 24))
    {
      v54 = (unint64_t *)v45[1];
      if (v54 && !*((_BYTE *)v54 + 24))
        goto LABEL_118;
      *((_BYTE *)v45 + 24) = 0;
      v55 = (unint64_t *)v45[2];
      if (v55 == v37)
      {
        v55 = v37;
LABEL_112:
        *((_BYTE *)v55 + 24) = 1;
        goto LABEL_132;
      }
      if (!*((_BYTE *)v55 + 24))
        goto LABEL_112;
      goto LABEL_109;
    }
    v54 = (unint64_t *)v45[1];
    if (v54 && !*((_BYTE *)v54 + 24))
    {
LABEL_118:
      v53 = v45;
    }
    else
    {
      *((_BYTE *)v53 + 24) = 1;
      *((_BYTE *)v45 + 24) = 0;
      v60 = v53[1];
      *v45 = v60;
      if (v60)
        *(_QWORD *)(v60 + 16) = v45;
      v53[2] = v45[2];
      *(_QWORD *)(v45[2] + 8 * (*(_QWORD *)v45[2] != (_QWORD)v45)) = v53;
      v53[1] = (unint64_t)v45;
      v45[2] = (unint64_t)v53;
      v54 = v45;
    }
    v61 = v53[2];
    *((_BYTE *)v53 + 24) = *(_BYTE *)(v61 + 24);
    *(_BYTE *)(v61 + 24) = 1;
    *((_BYTE *)v54 + 24) = 1;
    v62 = *(uint64_t **)(v61 + 8);
    v63 = *v62;
    *(_QWORD *)(v61 + 8) = *v62;
    if (v63)
      *(_QWORD *)(v63 + 16) = v61;
    v62[2] = *(_QWORD *)(v61 + 16);
    *(_QWORD *)(*(_QWORD *)(v61 + 16) + 8 * (**(_QWORD **)(v61 + 16) != v61)) = v62;
    *v62 = v61;
LABEL_131:
    *(_QWORD *)(v61 + 16) = v62;
LABEL_132:
    if (*((char *)v22 + 55) < 0)
      operator delete((void *)v22[4]);
    operator delete(v22);
LABEL_135:
    v22 = v34;
  }
  while (v34 != a1 + 80);
LABEL_136:
  v66 = (unint64_t *)a1[82];
  if (v66 != v104)
  {
    v67 = v110;
    do
    {
      v68 = (_DWORD *)v66[7];
      v69 = *v68;
      v70 = v68;
      while (v69 != -1)
      {
        if (v67)
        {
          v71 = &v110;
          v72 = v67;
          do
          {
            v73 = v72;
            v74 = v71;
            v75 = *((_DWORD *)v72 + 7);
            if (v75 >= v69)
              v71 = (uint64_t **)v72;
            else
              ++v72;
            v72 = (uint64_t *)*v72;
          }
          while (v72);
          if (v71 != &v110)
          {
            v76 = v75 >= v69 ? (uint64_t **)v73 : v74;
            if (v69 >= *((_DWORD *)v76 + 7))
            {
              if (v75 >= v69)
                v77 = (uint64_t **)v73;
              else
                v77 = v74;
              *v68++ = *((_DWORD *)v77 + 8);
            }
          }
        }
        v78 = v70[1];
        ++v70;
        v69 = v78;
      }
      *v68 = -1;
      v79 = (unint64_t *)v66[1];
      if (v79)
      {
        do
        {
          v80 = v79;
          v79 = (unint64_t *)*v79;
        }
        while (v79);
      }
      else
      {
        do
        {
          v80 = (unint64_t *)v66[2];
          v59 = *v80 == (_QWORD)v66;
          v66 = v80;
        }
        while (!v59);
      }
      v66 = v80;
    }
    while (v80 != v104);
  }
  v81 = a1[41];
  v107 = 0;
  v108 = 0;
  __src = 0;
  if (v81)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](&__src, v81);
    v82 = (char *)v107;
    bzero(v107, 8 * v81);
    v83 = &v82[8 * v81];
    v107 = v83;
    v81 = (unint64_t)__src;
  }
  else
  {
    v83 = 0;
  }
  v85 = *v105;
  v84 = v105[1];
  v86 = v84 - (_BYTE *)*v105;
  if (v84 != *v105)
  {
    v87 = 0;
    v88 = v86 >> 3;
    v89 = v110;
    if ((unint64_t)(v86 >> 3) <= 1)
      v88 = 1;
    do
    {
      if (v89)
      {
        v90 = &v110;
        v91 = v89;
        do
        {
          v92 = (uint64_t **)v91;
          v93 = v90;
          v94 = *((_DWORD *)v91 + 7);
          if (v94 >= (int)v87)
            v90 = (uint64_t **)v91;
          else
            ++v91;
          v91 = (uint64_t *)*v91;
        }
        while (v91);
        if (v90 != &v110)
        {
          v95 = v94 >= (int)v87 ? v92 : v93;
          if (*((_DWORD *)v95 + 7) <= (int)v87)
          {
            if (v94 < (int)v87)
              v92 = v93;
            *(_QWORD *)(v81 + 8 * *((int *)v92 + 8)) = v85[v87];
          }
        }
      }
      ++v87;
    }
    while (v87 != v88);
  }
  if (&__src != v105)
  {
    v96 = (size_t)&v83[-v81];
    v97 = (uint64_t)&v83[-v81] >> 3;
    v98 = (uint64_t)v105[2];
    if (v97 <= (v98 - (uint64_t)v85) >> 3)
    {
      if (v86 >> 3 >= v97)
        goto LABEL_197;
      v101 = (_BYTE *)(v81 + 8 * (v86 >> 3));
      if (v84 == (_BYTE *)v85)
      {
        v85 = v84;
      }
      else
      {
        memmove(v85, (const void *)v81, v86);
        v85 = v105[1];
      }
      v96 = v83 - v101;
      if (v83 != v101)
      {
        v102 = v85;
        v103 = v101;
LABEL_202:
        memmove(v102, v103, v96);
      }
    }
    else
    {
      if (v85)
      {
        v105[1] = v85;
        operator delete(v85);
        v98 = 0;
        *v105 = 0;
        v105[1] = 0;
        v105[2] = 0;
      }
      if ((v96 & 0x8000000000000000) != 0)
        std::vector<char *>::__throw_length_error[abi:ne180100]();
      v99 = v98 >> 2;
      if (v98 >> 2 <= v97)
        v99 = (uint64_t)&v83[-v81] >> 3;
      if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF8)
        v100 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v100 = v99;
      std::vector<unsigned long>::__vallocate[abi:ne180100](v105, v100);
      v85 = v105[1];
LABEL_197:
      if (v83 != (char *)v81)
      {
        v102 = v85;
        v103 = (const void *)v81;
        goto LABEL_202;
      }
    }
    v105[1] = (char *)v85 + v96;
    v81 = (unint64_t)__src;
  }
  if (v81)
  {
    v107 = (void *)v81;
    operator delete((void *)v81);
  }
  std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::destroy(v110);
  if (__p)
  {
    v113 = __p;
    operator delete(__p);
  }
}

void sub_2083B5628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::destroy(a16);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t MeCab::EncoderFeatureIndex::convert(MeCab::EncoderFeatureIndex *this, const char *a2, const char *a3, uint64_t a4)
{
  uint64_t v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v18;
  std::locale::id *v19;
  const std::locale::facet *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  double v26;
  _QWORD *v27;
  _OWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  size_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  size_t v43;
  uint64_t **v44;
  _QWORD *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t **v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  size_t v69;
  const char *v71;
  void *__p[2];
  __int128 v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  int v81;
  uint64_t v82;
  int v83;
  void *v84;
  char *v85;
  char *v86;
  uint64_t **v87;
  uint64_t *v88;
  uint64_t v89;
  void *v90;
  void *v91;
  uint64_t v92;
  void *v93[3];
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  std::locale v97[2];
  uint64_t v98;
  double v99;
  _BYTE v100[384];
  uint64_t v101;
  char __s[8192];
  _QWORD v103[2];
  _BYTE v104[408];
  _QWORD v105[22];

  v4 = MEMORY[0x24BDAC7A8](this, a2, a3, a4);
  v6 = v5;
  v8 = v7;
  v9 = v4;
  v105[19] = *MEMORY[0x24BDAC8D0];
  std::ifstream::basic_ifstream(v103);
  v10 = *(_QWORD *)(v103[0] - 24);
  if ((v104[v10 + 16] & 5) != 0)
  {
    std::ios_base::clear((std::ios_base *)(v9 + 344 + *(_QWORD *)(*(_QWORD *)(v9 + 344) - 24)), 0);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(v9 + 344), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"(", 1);
    v12 = (_QWORD *)std::ostream::operator<<();
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)") [", 3);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"ifs", 3);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"] ", 2);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"no such file or directory: ", 27);
    v17 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v8, v17);
    v18 = 0;
  }
  else
  {
    v71 = v6;
    v90 = 0;
    v91 = 0;
    v92 = 0;
    v88 = 0;
    v89 = 0;
    v87 = &v88;
    v19 = (std::locale::id *)MEMORY[0x24BEDB350];
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v103 + v10));
      v20 = std::locale::use_facet(v97, v19);
      ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
      std::locale::~locale(v97);
      v21 = (_QWORD *)std::istream::getline();
      if ((*((_BYTE *)v21 + *(_QWORD *)(*v21 - 24) + 32) & 5) != 0)
        break;
      v91 = v90;
      v22 = __s;
      v97[0].__locale_ = (std::locale::__imp *)__s;
      v23 = 0;
      v24 = &__s[strlen(__s)];
      do
      {
        v25 = v24;
        if (v22 != v24)
        {
          while (*v22 != 9)
          {
            if (++v22 == v24)
            {
              v25 = v24;
              goto LABEL_11;
            }
          }
          v25 = v22;
        }
LABEL_11:
        *v25 = 0;
        if (*(_BYTE *)v97[0].__locale_)
        {
          __p[0] = &v90;
          std::back_insert_iterator<std::vector<char *>>::operator=[abi:ne180100]((void ***)__p, v97);
          ++v23;
        }
        if (v25 == v24)
          break;
        v22 = v25 + 1;
        v97[0].__locale_ = (std::locale::__imp *)(v25 + 1);
      }
      while (v23 < 2);
      if (v23 != 2)
      {
        std::ios_base::clear((std::ios_base *)(v9 + 344 + *(_QWORD *)(*(_QWORD *)(v9 + 344) - 24)), 0);
        v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(v9 + 344), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"(", 1);
        v38 = (_QWORD *)std::ostream::operator<<();
        v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)") [", 3);
        v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"tokenize2(buf, \"\\t\", std::back_inserter(column), 2) == 2", 56);
        v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"] ", 2);
        v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"format error: ", 14);
        v43 = strlen(__s);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)__s, v43);
        v18 = 0;
        goto LABEL_71;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, *((char **)v90 + 1));
      v26 = atof(*(const char **)v90);
      *(_OWORD *)&v97[0].__locale_ = *(_OWORD *)__p;
      v98 = v73;
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)&v73 = 0;
      v99 = v26;
      v27 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__find_equal<std::string>((uint64_t)&v87, &v94, (void **)&v97[0].__locale_);
      if (!*v27)
      {
        v28 = operator new(0x40uLL);
        v28[2] = *(_OWORD *)&v97[0].__locale_;
        *((_QWORD *)v28 + 6) = v98;
        v97[1].__locale_ = 0;
        v98 = 0;
        v97[0].__locale_ = 0;
        *((double *)v28 + 7) = v99;
        v29 = v94;
        *(_QWORD *)v28 = 0;
        *((_QWORD *)v28 + 1) = 0;
        *((_QWORD *)v28 + 2) = v29;
        *v27 = v28;
        if (*v87)
        {
          v87 = (uint64_t **)*v87;
          v28 = (_OWORD *)*v27;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v88, (uint64_t *)v28);
        ++v89;
      }
      if (SHIBYTE(v98) < 0)
        operator delete(v97[0].__locale_);
      if (SBYTE7(v73) < 0)
        operator delete(__p[0]);
      v10 = *(_QWORD *)(v103[0] - 24);
    }
    std::ofstream::basic_ofstream(v97);
    if ((v100[*((_QWORD *)v97[0].__locale_ - 3)] & 5) != 0)
    {
      std::ios_base::clear((std::ios_base *)(v9 + 344 + *(_QWORD *)(*(_QWORD *)(v9 + 344) - 24)), 0);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(v9 + 344), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"(", 1);
      v31 = (_QWORD *)std::ostream::operator<<();
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)") [", 3);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"ofs", 3);
      v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"] ", 2);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"permission denied: ", 19);
      v36 = strlen(v71);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v71, v36);
      v18 = 0;
    }
    else
    {
      v84 = 0;
      v85 = 0;
      v86 = 0;
      v83 = v89;
      std::ostream::write();
      v44 = v87;
      if (v87 != &v88)
      {
        do
        {
          v45 = v44 + 4;
          if (*((char *)v44 + 55) < 0)
            v45 = (_QWORD *)*v45;
          v46 = v85;
          if (v85 >= v86)
          {
            v48 = (v85 - (_BYTE *)v84) >> 3;
            if ((unint64_t)(v48 + 1) >> 61)
              std::vector<char *>::__throw_length_error[abi:ne180100]();
            v49 = (v86 - (_BYTE *)v84) >> 2;
            if (v49 <= v48 + 1)
              v49 = v48 + 1;
            if ((unint64_t)(v86 - (_BYTE *)v84) >= 0x7FFFFFFFFFFFFFF8)
              v50 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v50 = v49;
            if (v50)
              v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>((uint64_t)&v86, v50);
            else
              v51 = 0;
            v52 = &v51[8 * v48];
            *(_QWORD *)v52 = v45;
            v47 = v52 + 8;
            v54 = (char *)v84;
            v53 = v85;
            if (v85 != v84)
            {
              do
              {
                v55 = *((_QWORD *)v53 - 1);
                v53 -= 8;
                *((_QWORD *)v52 - 1) = v55;
                v52 -= 8;
              }
              while (v53 != v54);
              v53 = (char *)v84;
            }
            v84 = v52;
            v85 = v47;
            v86 = &v51[8 * v50];
            if (v53)
              operator delete(v53);
          }
          else
          {
            *(_QWORD *)v85 = v45;
            v47 = v46 + 8;
          }
          v85 = v47;
          std::ostream::write();
          v56 = v44[1];
          if (v56)
          {
            do
            {
              v57 = (uint64_t **)v56;
              v56 = (uint64_t *)*v56;
            }
            while (v56);
          }
          else
          {
            do
            {
              v57 = (uint64_t **)v44[2];
              v59 = *v57 == (uint64_t *)v44;
              v44 = v57;
            }
            while (!v59);
          }
          v44 = v57;
        }
        while (v57 != &v88);
      }
      v80 = 0;
      v81 = 0;
      *(_OWORD *)__p = 0u;
      v73 = 0u;
      v58 = v85 - (_BYTE *)v84;
      v59 = v85 == v84 || v84 == 0;
      if (v59)
        goto LABEL_67;
      v60 = v58 >> 3;
      v74 = v84;
      v75 = v58 >> 3;
      v82 = 0;
      v77 = 0;
      v78 = 0;
      v76 = 0;
      Darts::DoubleArrayImpl<char,unsigned char,int,unsigned int,Darts::Length<char>>::resize((uint64_t)__p, 0x2000uLL);
      *(_DWORD *)__p[0] = 1;
      v79 = 0;
      v96 = v60;
      v95 = 0u;
      memset(v93, 0, sizeof(v93));
      Darts::DoubleArrayImpl<char,unsigned char,int,unsigned int,Darts::Length<char>>::fetch((uint64_t)__p, &v94, (uint64_t)v93);
      Darts::DoubleArrayImpl<char,unsigned char,int,unsigned int,Darts::Length<char>>::insert((uint64_t)__p, (unsigned int **)v93);
      v61 = v73 + 257;
      *(_QWORD *)&v73 = v61;
      if (v61 >= *((_QWORD *)&v73 + 1))
        Darts::DoubleArrayImpl<char,unsigned char,int,unsigned int,Darts::Length<char>>::resize((uint64_t)__p, v61);
      if (__p[1])
        MEMORY[0x20BD06378](__p[1], 0x1000C8077774924);
      __p[1] = 0;
      v62 = v81;
      if (v93[0])
        operator delete(v93[0]);
      if (!v62)
      {
LABEL_67:
        std::ostream::write();
        v18 = 1;
      }
      else
      {
        std::ios_base::clear((std::ios_base *)(v9 + 344 + *(_QWORD *)(*(_QWORD *)(v9 + 344) - 24)), 0);
        v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(v9 + 344), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"(", 1);
        v64 = (_QWORD *)std::ostream::operator<<();
        v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)") [", 3);
        v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"da.build(key.size(), &key[0], 0, 0, 0) == 0", 43);
        v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"] ", 2);
        v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"unknown error in building double array: ", 40);
        v69 = strlen(v71);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)v71, v69);
        v18 = 0;
      }
      Darts::DoubleArrayImpl<char,unsigned char,int,unsigned int,Darts::Length<char>>::clear((uint64_t)__p);
      if (v84)
      {
        v85 = (char *)v84;
        operator delete(v84);
      }
    }
    v97[0] = *(std::locale *)MEMORY[0x24BEDB7E8];
    *(std::locale *)((char *)v97 + *((_QWORD *)v97[0].__locale_ - 3)) = *(std::locale *)(MEMORY[0x24BEDB7E8] + 24);
    MEMORY[0x20BD061F8](&v97[1]);
    std::ostream::~ostream();
    MEMORY[0x20BD06354](&v101);
LABEL_71:
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&v87, (char *)v88);
    if (v90)
    {
      v91 = v90;
      operator delete(v90);
    }
  }
  v103[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v103 + *(_QWORD *)(v103[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x20BD061F8](v104);
  std::istream::~istream();
  MEMORY[0x20BD06354](v105);
  return v18;
}

void sub_2083B5F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int16 a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,char a32,char *a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::locale a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (__p)
    operator delete(__p);
  std::ofstream::~ofstream(&a45);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&a32, a33);
  if (a35)
  {
    a36 = (uint64_t)a35;
    operator delete(a35);
  }
  std::ifstream::~ifstream(&STACK[0x2338]);
  _Unwind_Resume(a1);
}

BOOL MeCab::EncoderFeatureIndex::save(MeCab::EncoderFeatureIndex *this, const char *a2)
{
  uint64_t v4;
  _BYTE *v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  size_t v13;
  MeCab::EncoderFeatureIndex *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  MeCab::EncoderFeatureIndex *v21;
  MeCab::EncoderFeatureIndex *v22;
  BOOL v23;
  char v25;
  uint64_t v26;
  _BYTE v27[408];
  _QWORD v28[20];

  v28[19] = *MEMORY[0x24BDAC8D0];
  std::ofstream::basic_ofstream(&v26);
  v4 = v26;
  v5 = &v27[*(_QWORD *)(v26 - 24) - 8];
  v6 = *((_DWORD *)v5 + 8) & 5;
  if (v6)
  {
    std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 43) - 24) + 344), 0);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 43, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/feature_index.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"(", 1);
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") [", 3);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ofs", 3);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"permission denied: ", 19);
    v13 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)a2, v13);
  }
  else
  {
    *((_DWORD *)v5 + 2) = *((_DWORD *)v5 + 2) & 0xFFFFFEFB | 4;
    *(_QWORD *)&v27[*(_QWORD *)(v4 - 24) + 8] = 24;
    v14 = (MeCab::EncoderFeatureIndex *)*((_QWORD *)this + 79);
    if (v14 != (MeCab::EncoderFeatureIndex *)((char *)this + 640))
    {
      do
      {
        v15 = (_QWORD *)std::ostream::operator<<();
        v25 = 9;
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v25, 1);
        v17 = *((char *)v14 + 55);
        if (v17 >= 0)
          v18 = (uint64_t)v14 + 32;
        else
          v18 = *((_QWORD *)v14 + 4);
        if (v17 >= 0)
          v19 = *((unsigned __int8 *)v14 + 55);
        else
          v19 = *((_QWORD *)v14 + 5);
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
        v25 = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v25, 1);
        v21 = (MeCab::EncoderFeatureIndex *)*((_QWORD *)v14 + 1);
        if (v21)
        {
          do
          {
            v22 = v21;
            v21 = *(MeCab::EncoderFeatureIndex **)v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            v22 = (MeCab::EncoderFeatureIndex *)*((_QWORD *)v14 + 2);
            v23 = *(_QWORD *)v22 == (_QWORD)v14;
            v14 = v22;
          }
          while (!v23);
        }
        v14 = v22;
      }
      while (v22 != (MeCab::EncoderFeatureIndex *)((char *)this + 640));
    }
  }
  v26 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)&v27[*(_QWORD *)(v26 - 24) - 8] = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x20BD061F8](v27);
  std::ostream::~ostream();
  MEMORY[0x20BD06354](v28);
  return v6 == 0;
}

void sub_2083B6238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void MeCab::EncoderFeatureIndex::~EncoderFeatureIndex(char **this)
{
  *this = (char *)&off_24C09C418;
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)(this + 82), this[83]);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)(this + 79), this[80]);
  MeCab::FeatureIndex::~FeatureIndex((void **)this);
}

{
  *this = (char *)&off_24C09C418;
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)(this + 82), this[83]);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)(this + 79), this[80]);
  MeCab::FeatureIndex::~FeatureIndex((void **)this);
  JUMPOUT(0x20BD0639CLL);
}

BOOL MeCab_internal::lexical_cast<BOOL,std::string>(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  unsigned __int8 v11;
  _QWORD v12[2];
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  v11 = 0;
  v2 = *(char *)(a1 + 23);
  if (v2 >= 0)
    v3 = a1;
  else
    v3 = *(_QWORD *)a1;
  if (v2 >= 0)
    v4 = *(unsigned __int8 *)(a1 + 23);
  else
    v4 = *(_QWORD *)(a1 + 8);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v3, v4);
  if ((*((_BYTE *)v5 + *(_QWORD *)(*v5 - 24) + 32) & 5) != 0
    || (v6 = (_QWORD *)MEMORY[0x20BD06228](v12, &v11), (*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0)
    || (v7 = std::ws[abi:ne180100]<char,std::char_traits<char>>(v12),
        (*((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 32) & 2) == 0))
  {
    *(_BYTE *)operator new() = 0;
    MEMORY[0x20BD0639C]();
    v8 = 0;
  }
  else
  {
    v8 = v11;
  }
  v12[0] = *MEMORY[0x24BEDB7F0];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v13[0] = v9;
  v13[1] = MEMORY[0x24BEDB848] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD06354](&v15);
  return v8 != 0;
}

void sub_2083B64B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::destroy(*a1);
    std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

unint64_t Darts::DoubleArrayImpl<char,unsigned char,int,unsigned int,Darts::Length<char>>::resize(uint64_t a1, unint64_t a2)
{
  const void *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  const void *v9;
  size_t v10;
  char *v11;
  char *v12;

  v4 = *(const void **)a1;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = 8 * a2;
  v7 = (char *)operator new[]();
  v8 = v7;
  if (v5)
    memcpy(v7, v4, 8 * v5);
  if (v5 < a2)
    bzero(&v8[8 * v5], v6 - 8 * v5);
  if (v4)
    MEMORY[0x20BD06378](v4, 0x1000C8000313F17);
  *(_QWORD *)a1 = v8;
  v9 = *(const void **)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = (char *)operator new[]();
  v12 = v11;
  if (v10)
    memcpy(v11, v9, v10);
  if (a2 > v10)
    bzero(&v12[v10], a2 - v10);
  if (v9)
    MEMORY[0x20BD06378](v9, 0x1000C8077774924);
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 24) = a2;
  return a2;
}

uint64_t Darts::DoubleArrayImpl<char,unsigned char,int,unsigned int,Darts::Length<char>>::fetch(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unsigned int v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  const char *v12;
  unsigned int v13;
  char *v14;
  char *v15;
  size_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t result;

  if ((*(_DWORD *)(a1 + 84) & 0x80000000) != 0)
    return 0;
  v5 = a2[2];
  v6 = a2[3];
  if (v5 < v6)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(a1 + 48);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8 * v5);
        v11 = a2[1];
        if (v10 < v11)
          goto LABEL_34;
        v12 = *(const char **)(*(_QWORD *)(a1 + 32) + 8 * v5);
      }
      else
      {
        v12 = *(const char **)(*(_QWORD *)(a1 + 32) + 8 * v5);
        v10 = strlen(v12);
        v11 = a2[1];
        if (v10 < v11)
          goto LABEL_34;
      }
      if (v10 == v11)
        v13 = 0;
      else
        v13 = v12[v11] + 1;
      if (v8 > v13)
      {
        result = 0;
        *(_DWORD *)(a1 + 84) = -3;
        return result;
      }
      v14 = *(char **)a3;
      v15 = *(char **)(a3 + 8);
      if (v13 != v8 || v14 == v15)
      {
        if (v14 != v15)
          *((_QWORD *)v15 - 1) = v5;
        v16 = v11 + 1;
        v17 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v15 >= v17)
        {
          v19 = (v15 - v14) >> 5;
          v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 59)
            std::vector<char *>::__throw_length_error[abi:ne180100]();
          v21 = v17 - (_QWORD)v14;
          if (v21 >> 4 > v20)
            v20 = v21 >> 4;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFE0)
            v22 = 0x7FFFFFFFFFFFFFFLL;
          else
            v22 = v20;
          if (v22)
          {
            if (v22 >> 59)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v23 = (char *)operator new(32 * v22);
          }
          else
          {
            v23 = 0;
          }
          v24 = &v23[32 * v19];
          *(_DWORD *)v24 = v13;
          *((_QWORD *)v24 + 1) = v16;
          *((_QWORD *)v24 + 2) = v5;
          v25 = v24;
          if (v14 != v15)
          {
            do
            {
              v26 = *((_OWORD *)v15 - 1);
              *((_OWORD *)v25 - 2) = *((_OWORD *)v15 - 2);
              *((_OWORD *)v25 - 1) = v26;
              v25 -= 32;
              v15 -= 32;
            }
            while (v15 != v14);
            v14 = *(char **)a3;
          }
          v18 = v24 + 32;
          *(_QWORD *)a3 = v25;
          *(_QWORD *)(a3 + 8) = v24 + 32;
          *(_QWORD *)(a3 + 16) = &v23[32 * v22];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_DWORD *)v15 = v13;
          v18 = v15 + 32;
          *((_QWORD *)v15 + 1) = v16;
          *((_QWORD *)v15 + 2) = v5;
        }
        *(_QWORD *)(a3 + 8) = v18;
        v6 = a2[3];
        v8 = v13;
      }
LABEL_34:
      ++v5;
    }
    while (v5 < v6);
  }
  v27 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  result = v27 >> 5;
  if (v27)
    *(_QWORD *)(*(_QWORD *)a3 + 32 * result - 8) = v6;
  return result;
}

unint64_t Darts::DoubleArrayImpl<char,unsigned char,int,unsigned int,Darts::Length<char>>::insert(uint64_t a1, unsigned int **a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int i;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(void);
  void *__p[3];

  if ((*(_DWORD *)(a1 + 84) & 0x80000000) != 0)
    return 0;
  v4 = **a2;
  if ((unint64_t)(v4 + 1) > *(_QWORD *)(a1 + 72))
    v5 = v4 + 1;
  else
    v5 = *(_QWORD *)(a1 + 72);
  v6 = v5 - 1;
  if (*(_QWORD *)(a1 + 24) <= v5 - 1)
    Darts::DoubleArrayImpl<char,unsigned char,int,unsigned int,Darts::Length<char>>::resize(a1, v5);
  v7 = 0;
  for (i = 0; ; i = 1)
  {
    do
    {
      while (1)
      {
        v9 = v6++;
        if (*(_QWORD *)(a1 + 24) <= v6)
          Darts::DoubleArrayImpl<char,unsigned char,int,unsigned int,Darts::Length<char>>::resize(a1, v9 + 2);
        if (!*(_DWORD *)(*(_QWORD *)a1 + 8 * v6 + 4))
          break;
        ++v7;
      }
      if (!i)
        *(_QWORD *)(a1 + 72) = v6;
      v10 = v6 - **a2;
      v11 = *(_QWORD *)(a1 + 24);
      if (v11 <= v10 + *(a2[1] - 8))
      {
        v12 = (double)*(unint64_t *)(a1 + 40) / (double)*(unint64_t *)(a1 + 64);
        if (v12 < 1.05)
          v12 = 1.05;
        Darts::DoubleArrayImpl<char,unsigned char,int,unsigned int,Darts::Length<char>>::resize(a1, (unint64_t)(v12 * (double)v11));
      }
      v13 = *(_QWORD *)(a1 + 8);
      i = 1;
    }
    while (*(_BYTE *)(v13 + v10));
    v14 = (char *)a2[1] - (char *)*a2;
    if ((unint64_t)v14 < 0x21)
      break;
    v15 = v14 >> 5;
    if ((unint64_t)(v14 >> 5) <= 2)
      v15 = 2;
    v16 = *a2 + 8;
    v17 = v15 - 1;
    while (1)
    {
      v18 = *v16;
      v16 += 8;
      if (*(_DWORD *)(*(_QWORD *)a1 + 8 * (v10 + v18) + 4))
        break;
      if (!--v17)
        goto LABEL_27;
    }
  }
LABEL_27:
  if ((double)v7 / (double)(v9 - *(_QWORD *)(a1 + 72) + 2) >= 0.95)
    *(_QWORD *)(a1 + 72) = v6;
  *(_BYTE *)(v13 + v10) = 1;
  v19 = *(_QWORD *)(a1 + 16);
  v20 = *a2;
  v21 = a2[1];
  if (v19 <= v10 + *(v21 - 8) + 1)
    v19 = v10 + *(v21 - 8) + 1;
  *(_QWORD *)(a1 + 16) = v19;
  if (v21 == v20)
    return v10;
  v22 = ((char *)v21 - (char *)v20) >> 5;
  v23 = *(_QWORD *)a1;
  if (v22 <= 1)
    v22 = 1;
  v24 = v20;
  do
  {
    v25 = *v24;
    v24 += 8;
    *(_DWORD *)(v23 + 8 * (v10 + v25) + 4) = v10;
    --v22;
  }
  while (v22);
  v26 = 0;
  v27 = 0;
  while (1)
  {
    memset(__p, 0, sizeof(__p));
    if (!Darts::DoubleArrayImpl<char,unsigned char,int,unsigned int,Darts::Length<char>>::fetch(a1, &v20[v26], (uint64_t)__p))break;
    *(_DWORD *)(*(_QWORD *)a1 + 8 * (v10 + (*a2)[v26])) = Darts::DoubleArrayImpl<char,unsigned char,int,unsigned int,Darts::Length<char>>::insert(a1, __p);
LABEL_46:
    if (__p[0])
      operator delete(__p[0]);
    ++v27;
    v20 = *a2;
    v26 += 8;
    if (v27 >= ((char *)a2[1] - (char *)*a2) >> 5)
      return v10;
  }
  v28 = *(_QWORD *)(a1 + 56);
  v29 = *(_QWORD *)&(*a2)[v26 + 4];
  if (v28)
    LODWORD(v30) = *(_DWORD *)(v28 + 4 * v29);
  else
    v30 = *(_QWORD *)&(*a2)[v26 + 4];
  *(_DWORD *)(*(_QWORD *)a1 + 8 * (v10 + (*a2)[v26])) = ~(_DWORD)v30;
  if (!v28 || (*(_DWORD *)(v28 + 4 * v29) & 0x80000000) == 0)
  {
    ++*(_QWORD *)(a1 + 64);
    v31 = *(void (**)(void))(a1 + 88);
    if (v31)
      v31();
    goto LABEL_46;
  }
  *(_DWORD *)(a1 + 84) = -2;
  if (__p[0])
    operator delete(__p[0]);
  return 0;
}

void sub_2083B6B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const char *mecab_version()
{
  return "0.97";
}

void *mecab_strerror(uint64_t a1)
{
  if (a1)
    return (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
  else
}

uint64_t mecab_destroy(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 224))(result);
  return result;
}

uint64_t mecab_get_lattice_level(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
}

uint64_t mecab_set_lattice_level(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
}

uint64_t mecab_sparse_tostr(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t mecab_sparse_tostr2(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mecab_sparse_tostr3(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mecab_sparse_tonode(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t mecab_sparse_tonode2(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
}

uint64_t mecab_nbest_sparse_tostr(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mecab_nbest_sparse_tostr2(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
}

uint64_t mecab_nbest_sparse_tostr3(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
}

uint64_t mecab_nbest_init(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t mecab_nbest_init2(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
}

uint64_t mecab_nbest_next_tostr(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t mecab_nbest_next_tostr2(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
}

uint64_t mecab_nbest_next_tonode(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

uint64_t mecab_format_node(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mecab_dictionary_info(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
}

uint64_t mecab_get_lastname_length(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
}

uint64_t mecab_get_feature(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
}

BOOL MeCab::CharProperty::open(MeCab::CharProperty *this, const MeCab::Param *a2)
{
  std::string *v3;
  _BOOL8 v4;
  void *__p[2];
  char v7;
  std::string v8;
  std::string v9;

  MeCab::Param::get<std::string>((uint64_t)a2, "dicdir", &v9);
  std::string::basic_string[abi:ne180100]<0>(__p, "char.bin");
  MeCab::create_filename((uint64_t)&v9, (uint64_t)__p, &v8);
  if (v7 < 0)
    operator delete(__p[0]);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = &v8;
  else
    v3 = (std::string *)v8.__r_.__value_.__r.__words[0];
  v4 = MeCab::CharProperty::open(this, (char *)v3);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  return v4;
}

void sub_2083B6D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

BOOL MeCab::CharProperty::open(MeCab::CharProperty *this, char *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  if ((MeCab::Mmap<char>::open((uint64_t)this + 8, a2, "r") & 1) != 0)
    return MeCab::CharProperty::open(this, *((const char **)this + 2), *((_QWORD *)this + 3));
  std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 49) - 24) + 392), 0);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 49, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/char_property.cpp", 67);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"(", 1);
  v5 = (_QWORD *)std::ostream::operator<<();
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") [", 3);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"cmmap_.open(filename, \"r\")", 26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"] ", 2);
  return 0;
}

BOOL MeCab::CharProperty::open(MeCab::CharProperty *this, const char *a2, uint64_t a3)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  const char *v7;
  const char **v8;
  int v9;
  char **v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  const char **v17;
  char *v18;
  char *v19;
  const char *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;

  v3 = a3;
  v5 = *(_DWORD *)a2;
  v6 = ((32 * *(_DWORD *)a2) | 4u) + 262140;
  if (v6 == a3)
  {
    v7 = a2 + 4;
    v8 = (const char **)*((_QWORD *)this + 44);
    *((_QWORD *)this + 45) = v8;
    if (v5)
    {
      v9 = 0;
      v10 = (char **)((char *)this + 352);
      v11 = (_QWORD *)((char *)this + 368);
      do
      {
        if ((unint64_t)v8 >= *v11)
        {
          v12 = ((char *)v8 - *v10) >> 3;
          if ((unint64_t)(v12 + 1) >> 61)
            std::vector<char *>::__throw_length_error[abi:ne180100]();
          v13 = *v11 - (_QWORD)*v10;
          v14 = v13 >> 2;
          if (v13 >> 2 <= (unint64_t)(v12 + 1))
            v14 = v12 + 1;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v15 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v15 = v14;
          if (v15)
            v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>((uint64_t)this + 368, v15);
          else
            v16 = 0;
          v17 = (const char **)&v16[8 * v12];
          *v17 = v7;
          v8 = v17 + 1;
          v19 = (char *)*((_QWORD *)this + 44);
          v18 = (char *)*((_QWORD *)this + 45);
          if (v18 != v19)
          {
            do
            {
              v20 = (const char *)*((_QWORD *)v18 - 1);
              v18 -= 8;
              *--v17 = v20;
            }
            while (v18 != v19);
            v18 = *v10;
          }
          *((_QWORD *)this + 44) = v17;
          *((_QWORD *)this + 45) = v8;
          *((_QWORD *)this + 46) = &v16[8 * v15];
          if (v18)
            operator delete(v18);
        }
        else
        {
          *v8++ = v7;
        }
        v7 += 32;
        *((_QWORD *)this + 45) = v8;
        ++v9;
      }
      while (v9 != v5);
    }
    *((_QWORD *)this + 47) = v7;
    v3 = a3;
  }
  else
  {
    std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 49) - 24) + 392), 0);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 49, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/char_property.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"(", 1);
    v22 = (_QWORD *)std::ostream::operator<<();
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)") [", 3);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"fsize == size", 13);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"invalid file size", 17);
  }
  return v6 == v3;
}

uint64_t MeCab::CharProperty::id(MeCab::CharProperty *this, const char *__s1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 44);
  v3 = *((_QWORD *)this + 45) - v2;
  if (v3 < 1)
    return 0xFFFFFFFFLL;
  v5 = 0;
  v6 = (unint64_t)v3 >> 3;
  if (v6 <= 1)
    v7 = 1;
  else
    v7 = v6;
  while (strcmp(__s1, *(const char **)(v2 + 8 * v5)))
  {
    if (v7 == ++v5)
      return 0xFFFFFFFFLL;
  }
  return v5;
}

uint64_t MeCab::CharProperty::compile(MeCab::CharProperty *this, const char *a2, const char *a3, const char *a4)
{
  uint64_t v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  _QWORD *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  size_t v26;
  const std::locale::facet *v27;
  _QWORD *v28;
  void **v29;
  size_t v30;
  unint64_t v31;
  void **v32;
  __int128 *p_s1;
  void **v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  size_t v42;
  char *v43;
  int64_t size;
  std::string *p_str;
  char *v46;
  int64_t v47;
  std::string *v48;
  char *v49;
  std::string::size_type v50;
  const char *v51;
  std::string *v52;
  const char *v53;
  std::string *v54;
  int v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t v62;
  char **v63;
  char *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  size_t v71;
  _QWORD *v72;
  __int128 *v73;
  __int128 v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  std::string *v78;
  std::string *v79;
  __int128 v80;
  __int128 *v81;
  uint64_t v82;
  std::__split_buffer<std::string>::pointer end;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  std::string *v87;
  char *v88;
  __int128 *v89;
  std::__split_buffer<std::string>::pointer begin;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  int64x2_t v96;
  std::string *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  size_t v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t p_s;
  uint64_t v112;
  _QWORD *v113;
  int v114;
  char v115;
  char v116;
  uint64_t *v117;
  uint64_t **v118;
  uint64_t **v119;
  _QWORD *v120;
  _OWORD *v121;
  std::string *v122;
  __int128 v123;
  std::string *v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  std::locale::id *v141;
  const std::locale::facet *v142;
  _QWORD *v143;
  int64_t v144;
  uint64_t v145;
  unsigned __int8 *v146;
  void **v147;
  __int128 *v148;
  uint64_t v149;
  unint64_t v150;
  void **i;
  int v152;
  unsigned __int8 *v153;
  unsigned __int8 *v154;
  int v155;
  int v156;
  unsigned __int8 *v157;
  unsigned __int8 *v158;
  unsigned __int8 *v159;
  unsigned __int8 *v160;
  _QWORD *v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  size_t v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  _QWORD *v172;
  _QWORD *v173;
  void *first;
  uint64_t end_high;
  _QWORD *v176;
  uint64_t *v177;
  uint64_t **v178;
  uint64_t **v179;
  _QWORD *v180;
  uint64_t *v181;
  std::string *v182;
  uint64_t **v183;
  _QWORD *v184;
  __int128 *v185;
  __int128 *v186;
  void **v187;
  int v188;
  _QWORD *v189;
  void **v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  _QWORD *v195;
  _QWORD *v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t *v201;
  uint64_t **v202;
  BOOL v203;
  void *v204;
  _OWORD *v205;
  __int128 v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  std::string *v210;
  std::string *v211;
  __int128 v212;
  std::string::size_type v213;
  int v214;
  unint64_t v215;
  _DWORD *v216;
  void ****j;
  int v218;
  uint64_t v219;
  std::string *v221;
  std::string *v222;
  int v223;
  char *v224;
  int v225;
  uint64_t k;
  unsigned int char_category;
  int v228;
  unsigned int v229;
  uint64_t m;
  const char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unsigned __int8 v238;
  _QWORD *v239;
  _QWORD v240[12];
  char v241;
  uint64_t v242;
  _QWORD v243[12];
  char v244;
  uint64_t v245;
  __int128 v246;
  std::string::size_type v247;
  __int128 __s;
  __int128 *v249;
  unint64_t v250;
  std::string __str;
  uint64_t v252;
  std::string *v253;
  unint64_t v254;
  uint64_t **v255;
  uint64_t *v256;
  unint64_t v257;
  int64x2_t v258;
  std::string *value;
  std::string *v260;
  std::string *v261;
  uint64_t v262;
  _BYTE v263[408];
  uint64_t v264;
  _QWORD v265[2];
  _BYTE v266[408];
  uint64_t v267;
  _QWORD v268[2];
  _BYTE v269[408];
  uint64_t v270;
  std::string v271;
  __int128 __s1;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  void *__p[2];
  char v305;
  std::__split_buffer<std::string> v306;
  uint64_t v307;

  v4 = MEMORY[0x24BDAC7A8](this, a2, a3, a4);
  v6 = v5;
  v8 = v7;
  v9 = (const char *)v4;
  v307 = *MEMORY[0x24BDAC8D0];
  std::ifstream::basic_ifstream(v268);
  std::string::basic_string[abi:ne180100]<0>(__p, "DEFAULT 1 0 0\nSPACE   0 1 0\n0x0020 SPACE\n");
  std::istringstream::basic_istringstream[abi:ne180100](v243, (__int128 *)__p, 8);
  if (v305 < 0)
    operator delete(__p[0]);
  v10 = v268;
  if ((v269[*(_QWORD *)(v268[0] - 24) + 16] & 5) != 0)
  {
    v11 = strlen(v9);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)v9, v11);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" is not found. minimum setting is used", 38);
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
    v14 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale((std::locale *)__p);
    std::ostream::put();
    std::ostream::flush();
    v10 = v243;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "DEFAULT,0,0,0,*\nSPACE,0,0,0,*\n");
  std::istringstream::basic_istringstream[abi:ne180100](v240, (__int128 *)__p, 8);
  if (v305 < 0)
    operator delete(__p[0]);
  v15 = v265;
  std::ifstream::basic_ifstream(v265);
  if ((v266[*(_QWORD *)(v265[0] - 24) + 16] & 5) != 0)
  {
    v16 = strlen(v8);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)v8, v16);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" is not found. minimum setting is used.", 39);
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
    v19 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    std::locale::~locale((std::locale *)__p);
    std::ostream::put();
    std::ostream::flush();
    v15 = v240;
  }
  std::ofstream::basic_ofstream(&v262);
  if ((v263[*(_QWORD *)(v262 - 24) + 24] & 5) != 0)
  {
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/char_property.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"(", 1);
    v21 = (_QWORD *)std::ostream::operator<<();
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)") [", 3);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"ofs", 3);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"] ", 2);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"permission denied: ", 19);
    v26 = strlen(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v6, v26);
    MeCab::die::~die((MeCab::die *)__p);
  }
  v239 = v15;
  v238 = 0;
  v303 = 0u;
  v302 = 0u;
  v301 = 0u;
  v300 = 0u;
  v299 = 0u;
  v298 = 0u;
  v297 = 0u;
  v296 = 0u;
  v295 = 0u;
  v294 = 0u;
  v293 = 0u;
  v292 = 0u;
  v291 = 0u;
  v290 = 0u;
  v289 = 0u;
  v288 = 0u;
  v287 = 0u;
  v286 = 0u;
  v285 = 0u;
  v284 = 0u;
  v283 = 0u;
  v282 = 0u;
  v281 = 0u;
  v280 = 0u;
  v279 = 0u;
  v278 = 0u;
  v277 = 0u;
  v276 = 0u;
  v275 = 0u;
  v274 = 0u;
  v273 = 0u;
  __s1 = 0u;
  v258 = 0uLL;
  value = 0;
  v257 = 0;
  v256 = 0;
  v255 = &v256;
  v253 = 0;
  v252 = 0;
  v254 = 0;
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
    v27 = std::locale::use_facet((const std::locale *)&v306, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
    std::locale::~locale((std::locale *)&v306);
    v28 = (_QWORD *)std::istream::getline();
    if ((*((_BYTE *)v28 + *(_QWORD *)(*v28 - 24) + 32) & 5) != 0)
      break;
    if (LOBYTE(__p[0]) && LOBYTE(__p[0]) != 35)
    {
      v29 = __p;
      v30 = strlen((const char *)__p);
      v31 = 0;
      v32 = (void **)((char *)__p + v30);
      p_s1 = &__s1;
      while (v31 <= 0xFFF)
      {
        v34 = (void **)((char *)__p + v30);
        if (v29 != v32)
        {
          v34 = v29;
LABEL_19:
          v35 = 0;
          while (*(unsigned __int8 *)v34 != asc_2083E09B2[v35])
          {
            if (++v35 == 2)
            {
              v34 = (void **)((char *)v34 + 1);
              if (v34 != v32)
                goto LABEL_19;
              v34 = (void **)((char *)__p + v30);
              break;
            }
          }
        }
        *(_BYTE *)v34 = 0;
        if (*(_BYTE *)v29)
        {
          *(_QWORD *)p_s1 = v29;
          p_s1 = (__int128 *)((char *)p_s1 + 8);
          ++v31;
        }
        v29 = (void **)((char *)v34 + 1);
        if (v34 == v32)
        {
          if (v31 <= 1)
          {
            v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/char_property.cpp", 67);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"(", 1);
            v37 = (_QWORD *)std::ostream::operator<<();
            v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)") [", 3);
            v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"size >= 2", 9);
            v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"] ", 2);
            v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"format error: ", 14);
            v42 = strlen((const char *)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)__p, v42);
            MeCab::die::~die((MeCab::die *)&v306);
          }
          break;
        }
      }
      v43 = (char *)__s1;
      if (!strncmp((const char *)__s1, "0x", 2uLL))
      {
        std::string::basic_string[abi:ne180100]<0>(&__str, v43);
        memset(&v271, 0, sizeof(v271));
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          size = __str.__r_.__value_.__l.__size_;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if (size >= 2)
        {
          v46 = (char *)p_str + size;
          v47 = size;
          v48 = p_str;
          do
          {
            v49 = (char *)memchr(v48, 46, v47 - 1);
            if (!v49)
              break;
            if (*(_WORD *)v49 == 11822)
            {
              if (v49 == v46)
                break;
              v50 = v49 - (char *)p_str;
              if (v50 == -1)
                break;
              std::string::basic_string((std::string *)&v306, &__str, v50 + 2, size - v50 - 2, (std::allocator<char> *)&v246);
              if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v271.__r_.__value_.__l.__data_);
              *(_OWORD *)&v271.__r_.__value_.__l.__data_ = *(_OWORD *)&v306.__first_;
              v271.__r_.__value_.__r.__words[2] = (std::string::size_type)v306.__end_;
              std::string::basic_string((std::string *)&v306, &__str, 0, v50, (std::allocator<char> *)&v246);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v306.__first_;
              __str.__r_.__value_.__r.__words[2] = (std::string::size_type)v306.__end_;
              goto LABEL_50;
            }
            v48 = (std::string *)(v49 + 1);
            v47 = v46 - (char *)v48;
          }
          while (v46 - (char *)v48 >= 2);
        }
        std::string::operator=(&v271, &__str);
LABEL_50:
        *((_QWORD *)&__s + 1) = 0;
        v249 = 0;
        v250 = 0;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v52 = &__str;
        else
          v52 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((v271.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v54 = &v271;
        else
          v54 = (std::string *)v271.__r_.__value_.__r.__words[0];
        DWORD1(__s) = v55;
        if (__s > 0xFFFE || v55 < 0 || v55 > 65534 || (int)__s > v55)
        {
          v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/char_property.cpp", 67);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"(", 1);
          v57 = (_QWORD *)std::ostream::operator<<();
          v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)") [", 3);
          v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"r.low >= 0 && r.low < 0xffff && r.high >= 0 && r.high < 0xffff && r.low <= r.high", 81);
          v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"] ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"range error: low=", 17);
          v61 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)" high=", 6);
          std::ostream::operator<<();
          MeCab::die::~die((MeCab::die *)&v306);
        }
        v62 = v31 - 1;
        v63 = (char **)&__s1 + 1;
        do
        {
          v64 = *v63;
          if (**v63 == 35)
            break;
          std::string::basic_string[abi:ne180100]<0>(&v306, *v63);
          if (&v256 == (uint64_t **)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>((uint64_t)&v255, (void **)&v306.__first_))
          {
            v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/char_property.cpp", 67);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"(", 1);
            v66 = (_QWORD *)std::ostream::operator<<();
            v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)") [", 3);
            v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"category.find(std::string(col[i])) != category.end()", 52);
            v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"] ", 2);
            v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"category [", 10);
            v71 = strlen(v64);
            v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)v64, v71);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"] is undefined", 14);
            MeCab::die::~die((MeCab::die *)&v246);
          }
          if (SHIBYTE(v306.__end_) < 0)
            operator delete(v306.__first_);
          std::string::basic_string[abi:ne180100]<0>(&v246, v64);
          v73 = v249;
          if ((unint64_t)v249 >= v250)
          {
            v75 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v249 - *((_QWORD *)&__s + 1)) >> 3);
            v76 = v75 + 1;
            if (v75 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<char *>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((uint64_t)(v250 - *((_QWORD *)&__s + 1)) >> 3) > v76)
              v76 = 0x5555555555555556 * ((uint64_t)(v250 - *((_QWORD *)&__s + 1)) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v250 - *((_QWORD *)&__s + 1)) >> 3) >= 0x555555555555555)
              v77 = 0xAAAAAAAAAAAAAAALL;
            else
              v77 = v76;
            v306.__end_cap_.__value_ = (std::allocator<std::string> *)&v250;
            if (v77)
              v78 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v250, v77);
            else
              v78 = 0;
            v79 = v78 + v75;
            v306.__first_ = v78;
            v306.__begin_ = v79;
            v306.__end_cap_.__value_ = &v78[v77];
            v80 = v246;
            v79->__r_.__value_.__r.__words[2] = v247;
            *(_OWORD *)&v79->__r_.__value_.__l.__data_ = v80;
            v247 = 0;
            v246 = 0uLL;
            v306.__end_ = v79 + 1;
            std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)((char *)&__s + 8), &v306);
            v81 = v249;
            std::__split_buffer<std::string>::~__split_buffer(&v306);
            v249 = v81;
            if (SHIBYTE(v247) < 0)
              operator delete((void *)v246);
          }
          else
          {
            v74 = v246;
            *((_QWORD *)v249 + 2) = v247;
            *v73 = v74;
            v249 = (__int128 *)((char *)v73 + 24);
          }
          ++v63;
          --v62;
        }
        while (v62);
        v82 = v258.i64[1];
        if (v258.i64[1] >= (unint64_t)value)
        {
          v84 = (v258.i64[1] - v258.i64[0]) >> 5;
          if ((unint64_t)(v84 + 1) >> 59)
            std::vector<char *>::__throw_length_error[abi:ne180100]();
          v85 = ((uint64_t)value - v258.i64[0]) >> 4;
          if (v85 <= v84 + 1)
            v85 = v84 + 1;
          if ((unint64_t)value - v258.i64[0] >= 0x7FFFFFFFFFFFFFE0)
            v86 = 0x7FFFFFFFFFFFFFFLL;
          else
            v86 = v85;
          v306.__end_cap_.__value_ = (std::allocator<std::string> *)&value;
          if (v86)
          {
            if (v86 >> 59)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v87 = (std::string *)operator new(32 * v86);
          }
          else
          {
            v87 = 0;
          }
          v88 = (char *)v87 + 32 * v84;
          v306.__first_ = v87;
          v306.__begin_ = (std::__split_buffer<std::string>::pointer)v88;
          v306.__end_ = (std::__split_buffer<std::string>::pointer)v88;
          v306.__end_cap_.__value_ = (std::string *)((char *)v87 + 32 * v86);
          v89 = (__int128 *)*((_QWORD *)&__s + 1);
          *(_QWORD *)v88 = __s;
          *((_QWORD *)v88 + 2) = 0;
          *((_QWORD *)v88 + 3) = 0;
          *((_QWORD *)v88 + 1) = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v88 + 8), v89, v249, 0xAAAAAAAAAAAAAAABLL * (((char *)v249 - (char *)v89) >> 3));
          begin = v306.__begin_;
          end = (std::__split_buffer<std::string>::pointer)((char *)v306.__end_ + 32);
          v306.__end_ = (std::__split_buffer<std::string>::pointer)((char *)v306.__end_ + 32);
          v91 = v258.i64[1];
          v92 = v258.i64[0];
          if (v258.i64[1] == v258.i64[0])
          {
            v96 = vdupq_n_s64(v258.u64[1]);
          }
          else
          {
            v93 = 0;
            do
            {
              v94 = (char *)begin + v93;
              v95 = v91 + v93;
              *((_QWORD *)v94 - 4) = *(_QWORD *)(v91 + v93 - 32);
              *((_QWORD *)v94 - 3) = 0;
              *((_QWORD *)v94 - 2) = 0;
              *((_QWORD *)v94 - 1) = 0;
              *(_OWORD *)(v94 - 24) = *(_OWORD *)(v91 + v93 - 24);
              *((_QWORD *)v94 - 1) = *(_QWORD *)(v91 + v93 - 8);
              *(_QWORD *)(v95 - 24) = 0;
              *(_QWORD *)(v95 - 16) = 0;
              *(_QWORD *)(v95 - 8) = 0;
              v93 -= 32;
            }
            while (v91 + v93 != v92);
            v96 = v258;
            end = v306.__end_;
            begin = (std::__split_buffer<std::string>::pointer)((char *)begin + v93);
          }
          v258.i64[0] = (uint64_t)begin;
          v258.i64[1] = (uint64_t)end;
          *(int64x2_t *)&v306.__begin_ = v96;
          v97 = value;
          value = v306.__end_cap_.__value_;
          v306.__end_cap_.__value_ = v97;
          v306.__first_ = (std::__split_buffer<std::string>::pointer)v96.i64[0];
        }
        else
        {
          *(_QWORD *)v258.i64[1] = __s;
          *(_QWORD *)(v82 + 8) = 0;
          *(_QWORD *)(v82 + 16) = 0;
          *(_QWORD *)(v82 + 24) = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v82 + 8), *((__int128 **)&__s + 1), v249, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v249 - *((_QWORD *)&__s + 1)) >> 3));
          end = (std::__split_buffer<std::string>::pointer)(v82 + 32);
        }
        v258.i64[1] = (uint64_t)end;
        v306.__first_ = (std::__split_buffer<std::string>::pointer)((char *)&__s + 8);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v306);
        if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v271.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
      else
      {
        if (v31 <= 3)
        {
          v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/char_property.cpp", 67);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"(", 1);
          v99 = (_QWORD *)std::ostream::operator<<();
          v100 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)") [", 3);
          v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"size >= 4", 9);
          v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"] ", 2);
          v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)"format error: ", 14);
          v104 = strlen((const char *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)__p, v104);
          MeCab::die::~die((MeCab::die *)&v306);
        }
        std::string::basic_string[abi:ne180100]<0>(&__s, v43);
        if (&v256 != (uint64_t **)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>((uint64_t)&v255, (void **)&__s))
        {
          v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/char_property.cpp", 67);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)"(", 1);
          v106 = (_QWORD *)std::ostream::operator<<();
          v107 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)") [", 3);
          v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"category.find(key) == category.end()", 36);
          v109 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"] ", 2);
          v110 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)"category ", 9);
          if (SHIBYTE(v249) >= 0)
            p_s = (uint64_t)&__s;
          else
            p_s = __s;
          if (SHIBYTE(v249) >= 0)
            v112 = HIBYTE(v249);
          else
            v112 = *((_QWORD *)&__s + 1);
          v113 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, p_s, v112);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)" is already defined", 19);
          MeCab::die::~die((MeCab::die *)&v306);
        }
        v114 = atoi(*((const char **)&__s1 + 1));
        v115 = atoi((const char *)v273);
        v116 = atoi(*((const char **)&v273 + 1));
        if (SHIBYTE(v249) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v306, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
        }
        else
        {
          *(_OWORD *)&v306.__first_ = __s;
          v306.__end_ = (std::__split_buffer<std::string>::pointer)v249;
        }
        LODWORD(v306.__end_cap_.__value_) = ((v116 & 0xF) << 26) | (v238 << 18) | (v114 << 31) | ((v115 & 1) << 30);
        v117 = v256;
        v118 = &v256;
        v119 = &v256;
        if (!v256)
          goto LABEL_125;
        v118 = &v256;
        while (1)
        {
          while (1)
          {
            v119 = (uint64_t **)v117;
            v120 = v117 + 4;
            if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v306, (void **)v117 + 4) & 0x80) == 0)break;
            v117 = *v119;
            v118 = v119;
            if (!*v119)
              goto LABEL_125;
          }
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v120, (void **)&v306.__first_) & 0x80) == 0)break;
          v118 = v119 + 1;
          v117 = v119[1];
          if (!v117)
            goto LABEL_125;
        }
        if (!*v118)
        {
LABEL_125:
          v121 = operator new(0x40uLL);
          v121[2] = *(_OWORD *)&v306.__first_;
          *((_QWORD *)v121 + 6) = v306.__end_;
          memset(&v306, 0, 24);
          *((_DWORD *)v121 + 14) = v306.__end_cap_.__value_;
          *(_QWORD *)v121 = 0;
          *((_QWORD *)v121 + 1) = 0;
          *((_QWORD *)v121 + 2) = v119;
          *v118 = (uint64_t *)v121;
          if (*v255)
          {
            v255 = (uint64_t **)*v255;
            v121 = *v118;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v256, (uint64_t *)v121);
          ++v257;
        }
        if (SHIBYTE(v306.__end_) < 0)
          operator delete(v306.__first_);
        v122 = v253;
        if ((unint64_t)v253 >= v254)
        {
          v124 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v252, &__s);
        }
        else
        {
          if (SHIBYTE(v249) < 0)
          {
            std::string::__init_copy_ctor_external(v253, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
          }
          else
          {
            v123 = __s;
            v253->__r_.__value_.__r.__words[2] = (std::string::size_type)v249;
            *(_OWORD *)&v122->__r_.__value_.__l.__data_ = v123;
          }
          v124 = v122 + 1;
        }
        v253 = v124;
        if (SHIBYTE(v249) < 0)
          operator delete((void *)__s);
        ++v238;
      }
    }
  }
  v125 = v239;
  if (v257 >= 0x12)
  {
    v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/char_property.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)"(", 1);
    v127 = (_QWORD *)std::ostream::operator<<();
    v128 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)") [", 3);
    v129 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)"category.size() < 18", 20);
    v130 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v130, (uint64_t)"too many categories(>= 18)", 26);
    MeCab::die::~die((MeCab::die *)&v306);
  }
  std::string::basic_string[abi:ne180100]<0>(&v306, "DEFAULT");
  if (&v256 == (uint64_t **)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>((uint64_t)&v255, (void **)&v306.__first_))
  {
    v131 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/char_property.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)"(", 1);
    v132 = (_QWORD *)std::ostream::operator<<();
    v133 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)") [", 3);
    v134 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)"category.find(\"DEFAULT\") != category.end()", 42);
    v135 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)"category [DEFAULT] is undefined", 31);
    MeCab::die::~die((MeCab::die *)&__s);
  }
  if (SHIBYTE(v306.__end_) < 0)
    operator delete(v306.__first_);
  std::string::basic_string[abi:ne180100]<0>(&v306, "SPACE");
  if (&v256 == (uint64_t **)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>((uint64_t)&v255, (void **)&v306.__first_))
  {
    v136 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/char_property.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)"(", 1);
    v137 = (_QWORD *)std::ostream::operator<<();
    v138 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)") [", 3);
    v139 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)"category.find(\"SPACE\") != category.end()", 40);
    v140 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v140, (uint64_t)"category [SPACE] is undefined", 29);
    MeCab::die::~die((MeCab::die *)&__s);
  }
  if (SHIBYTE(v306.__end_) < 0)
    operator delete(v306.__first_);
  v141 = (std::locale::id *)MEMORY[0x24BEDB350];
  v249 = 0;
  *((_QWORD *)&__s + 1) = 0;
  *(_QWORD *)&__s = (char *)&__s + 8;
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v125 + *(_QWORD *)(*v125 - 24)));
    v142 = std::locale::use_facet((const std::locale *)&v306, v141);
    ((void (*)(const std::locale::facet *, uint64_t))v142->__vftable[2].~facet_0)(v142, 10);
    std::locale::~locale((std::locale *)&v306);
    v143 = (_QWORD *)std::istream::getline();
    if ((*((_BYTE *)v143 + *(_QWORD *)(*v143 - 24) + 32) & 5) != 0)
      break;
    v144 = strlen((const char *)__p);
    if (v144 < 1)
      goto LABEL_175;
    v145 = 0;
    v146 = (unsigned __int8 *)__p + v144;
    v147 = __p;
    v148 = &__s1;
    v149 = 2;
    do
    {
      v150 = v149;
      for (i = v147; ; i = (void **)((char *)i + 1))
      {
        v152 = *(unsigned __int8 *)i;
        if (v152 != 9 && v152 != 32)
          break;
        v147 = (void **)((char *)v147 + 1);
      }
      if (v152 == 34)
      {
        i = (void **)((char *)i + 1);
        v153 = (unsigned __int8 *)i;
        v154 = (unsigned __int8 *)i;
        if (i < (void **)v146)
        {
          v153 = (unsigned __int8 *)i;
          v154 = (unsigned __int8 *)i;
          do
          {
            v155 = *v154;
            if (v155 == 34)
            {
              v156 = *++v154;
              if (v156 != 34)
                break;
            }
            *v153++ = v155;
            ++v154;
          }
          while (v154 < v146);
        }
        v157 = (unsigned __int8 *)memchr(v154, 44, v146 - v154);
        if (v157)
          v158 = v157;
        else
          v158 = v146;
      }
      else
      {
        v159 = (unsigned __int8 *)memchr(i, 44, v146 - (unsigned __int8 *)v147);
        if (v159)
          v160 = v159;
        else
          v160 = v146;
        v158 = (unsigned __int8 *)i + v160 - (unsigned __int8 *)v147;
        v153 = v158;
      }
      v149 = v150 - 1;
      if (v150 < 2)
      {
        *(_QWORD *)v148 = i;
        ++v145;
        if (v150 == 1)
          break;
      }
      else
      {
        *v153 = 0;
        *(_QWORD *)v148 = i;
        ++v145;
      }
      v148 = (__int128 *)((char *)v148 + 8);
      v147 = (void **)(v158 + 1);
    }
    while (v158 + 1 < v146);
    v125 = v239;
    if (!v145)
    {
LABEL_175:
      v161 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/char_property.cpp", 67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v161, (uint64_t)"(", 1);
      v162 = (_QWORD *)std::ostream::operator<<();
      v163 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v162, (uint64_t)") [", 3);
      v164 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"n >= 1", 6);
      v165 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)"] ", 2);
      v166 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v165, (uint64_t)"format error: ", 14);
      v167 = strlen((const char *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v166, (uint64_t)__p, v167);
      MeCab::die::~die((MeCab::die *)&v306);
    }
    std::string::basic_string[abi:ne180100]<0>(&v306, (char *)__s1);
    if (&v256 == (uint64_t **)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>((uint64_t)&v255, (void **)&v306.__first_))
    {
      v168 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/char_property.cpp", 67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v168, (uint64_t)"(", 1);
      v169 = (_QWORD *)std::ostream::operator<<();
      v170 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v169, (uint64_t)") [", 3);
      v171 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v170, (uint64_t)"category.find(key) != category.end()", 36);
      v172 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v171, (uint64_t)"] ", 2);
      v173 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v172, (uint64_t)"category [", 10);
      if (SHIBYTE(v306.__end_) >= 0)
        first = &v306;
      else
        first = v306.__first_;
      if (SHIBYTE(v306.__end_) >= 0)
        end_high = HIBYTE(v306.__end_);
      else
        end_high = (uint64_t)v306.__begin_;
      v176 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v173, (uint64_t)first, end_high);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v176, (uint64_t)"] is undefined in char.def", 26);
      MeCab::die::~die((MeCab::die *)&__str);
    }
    v177 = (uint64_t *)*((_QWORD *)&__s + 1);
    v178 = (uint64_t **)&__s + 1;
    v179 = (uint64_t **)&__s + 1;
    if (!*((_QWORD *)&__s + 1))
      goto LABEL_193;
    v178 = (uint64_t **)&__s + 1;
    while (1)
    {
      while (1)
      {
        v179 = (uint64_t **)v177;
        v180 = v177 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v306, (void **)v177 + 4) & 0x80) == 0)
          break;
        v177 = *v179;
        v178 = v179;
        if (!*v179)
          goto LABEL_193;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v180, (void **)&v306.__first_) & 0x80) == 0)break;
      v178 = v179 + 1;
      v177 = v179[1];
      if (!v177)
        goto LABEL_193;
    }
    if (!*v178)
    {
LABEL_193:
      v181 = (uint64_t *)operator new(0x38uLL);
      v182 = (std::string *)(v181 + 4);
      if (SHIBYTE(v306.__end_) < 0)
      {
        std::string::__init_copy_ctor_external(v182, (const std::string::value_type *)v306.__first_, (std::string::size_type)v306.__begin_);
      }
      else
      {
        *(_OWORD *)&v182->__r_.__value_.__l.__data_ = *(_OWORD *)&v306.__first_;
        v181[6] = (uint64_t)v306.__end_;
      }
      *v181 = 0;
      v181[1] = 0;
      v181[2] = (uint64_t)v179;
      *v178 = v181;
      if (*(_QWORD *)__s)
      {
        *(_QWORD *)&__s = *(_QWORD *)__s;
        v181 = *v178;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&__s + 1), v181);
      v249 = (__int128 *)((char *)v249 + 1);
    }
    if (SHIBYTE(v306.__end_) < 0)
      operator delete(v306.__first_);
  }
  v183 = v255;
  if (v255 != &v256)
  {
    do
    {
      v184 = (_QWORD *)*((_QWORD *)&__s + 1);
      if (!*((_QWORD *)&__s + 1))
        goto LABEL_216;
      v185 = (__int128 *)((char *)&__s + 8);
      do
      {
        v186 = v185;
        v187 = (void **)(v184 + 4);
        v188 = (char)std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v184 + 4, (void **)v183 + 4);
        if (v188 >= 0)
          v189 = v184;
        else
          v189 = v184 + 1;
        if (v188 >= 0)
          v185 = (__int128 *)v184;
        else
          v185 = v186;
        v184 = (_QWORD *)*v189;
      }
      while (*v189);
      if (v185 == (__int128 *)((char *)&__s + 8)
        || (v188 >= 0 ? (v190 = v187) : (v190 = (void **)(v186 + 2)),
            (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v183 + 4, v190) & 0x80) != 0))
      {
LABEL_216:
        v191 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/char_property.cpp", 67);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v191, (uint64_t)"(", 1);
        v192 = (_QWORD *)std::ostream::operator<<();
        v193 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v192, (uint64_t)") [", 3);
        v194 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v193, (uint64_t)"unk.find(it->first) != unk.end()", 32);
        v195 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v194, (uint64_t)"] ", 2);
        v196 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v195, (uint64_t)"category [", 10);
        v197 = *((char *)v183 + 55);
        if (v197 >= 0)
          v198 = (uint64_t)(v183 + 4);
        else
          v198 = (uint64_t)v183[4];
        if (v197 >= 0)
          v199 = *((unsigned __int8 *)v183 + 55);
        else
          v199 = (uint64_t)v183[5];
        v200 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v196, v198, v199);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"] is undefined in unk.def", 25);
        MeCab::die::~die((MeCab::die *)&v306);
      }
      v201 = v183[1];
      if (v201)
      {
        do
        {
          v202 = (uint64_t **)v201;
          v201 = (uint64_t *)*v201;
        }
        while (v201);
      }
      else
      {
        do
        {
          v202 = (uint64_t **)v183[2];
          v203 = *v202 == (uint64_t *)v183;
          v183 = v202;
        }
        while (!v203);
      }
      v183 = v202;
    }
    while (v202 != &v256);
  }
  v204 = operator new(0x3FFFCuLL);
  bzero(v204, 0x3FFFCuLL);
  memset(&__str, 0, sizeof(__str));
  std::string::basic_string[abi:ne180100]<0>(&v271, "DEFAULT");
  v205 = (_OWORD *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_ >= __str.__r_.__value_.__r.__words[2])
  {
    v207 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3);
    v208 = v207 + 1;
    if (v207 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<char *>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556
       * ((uint64_t)(__str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0]) >> 3) > v208)
      v208 = 0x5555555555555556
           * ((uint64_t)(__str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0]) >> 3);
    if (0xAAAAAAAAAAAAAAABLL
       * ((uint64_t)(__str.__r_.__value_.__r.__words[2] - __str.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
      v209 = 0xAAAAAAAAAAAAAAALL;
    else
      v209 = v208;
    v306.__end_cap_.__value_ = (std::allocator<std::string> *)&__str.__r_.__value_.__r.__words[2];
    if (v209)
      v210 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__str.__r_.__value_.__r.__words[2], v209);
    else
      v210 = 0;
    v211 = v210 + v207;
    v306.__first_ = v210;
    v306.__begin_ = v211;
    v306.__end_cap_.__value_ = &v210[v209];
    v212 = *(_OWORD *)&v271.__r_.__value_.__l.__data_;
    v211->__r_.__value_.__r.__words[2] = v271.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v211->__r_.__value_.__l.__data_ = v212;
    memset(&v271, 0, sizeof(v271));
    v306.__end_ = v211 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&__str, &v306);
    v213 = __str.__r_.__value_.__l.__size_;
    std::__split_buffer<std::string>::~__split_buffer(&v306);
    __str.__r_.__value_.__l.__size_ = v213;
    if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v271.__r_.__value_.__l.__data_);
  }
  else
  {
    v206 = *(_OWORD *)&v271.__r_.__value_.__l.__data_;
    *(_QWORD *)(__str.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v271.__r_.__value_.__l + 2);
    *v205 = v206;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v205 + 24;
  }
  v215 = 0x10000;
  v216 = v204;
  do
  {
    *v216++ = v214;
    --v215;
  }
  while (v215 > 1);
  v306.__first_ = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v306);
  for (j = (void ****)v258.i64[0]; j != (void ****)v258.i64[1]; j += 4)
  {
    v219 = *(int *)j;
    if ((int)v219 <= *((_DWORD *)j + 1))
    {
      do
        *((_DWORD *)v204 + v219) = v218;
      while (v219++ < *((int *)j + 1));
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v271, "SYMBOL");
  memset(&__str, 0, sizeof(__str));
  *(_QWORD *)&v246 = &__str;
  BYTE8(v246) = 0;
  v221 = (std::string *)operator new(0x18uLL);
  v222 = v221;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v221;
  __str.__r_.__value_.__l.__size_ = (std::string::size_type)v221;
  __str.__r_.__value_.__r.__words[2] = (std::string::size_type)&v221[1];
  v261 = v221;
  v260 = v221;
  v306.__first_ = (std::__split_buffer<std::string>::pointer)&__str.__r_.__value_.__r.__words[2];
  v306.__begin_ = (std::__split_buffer<std::string>::pointer)&v260;
  v306.__end_ = (std::__split_buffer<std::string>::pointer)&v261;
  LOBYTE(v306.__end_cap_.__value_) = 0;
  if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v221, v271.__r_.__value_.__l.__data_, v271.__r_.__value_.__l.__size_);
    v222 = v261;
  }
  else
  {
    *v221 = v271;
  }
  v261 = v222 + 1;
  LOBYTE(v306.__end_cap_.__value_) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v306);
  __str.__r_.__value_.__l.__size_ = (std::string::size_type)&v222[1];
  if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v271.__r_.__value_.__l.__data_);
  v224 = (char *)__str.__r_.__value_.__r.__words[0];
  if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 8) = 7;
    v224 = *(char **)v224;
  }
  else
  {
    *(_BYTE *)(__str.__r_.__value_.__r.__words[0] + 23) = 7;
  }
  strcpy(v224, "NUMERIC");
  for (k = 0; k != 0xFFFF; ++k)
  {
    char_category = MeCab::get_char_category(k);
    v228 = v223;
    if (char_category != 2)
    {
      v229 = MeCab::get_char_category(k);
      v228 = v225;
      if (v229 != 1)
        continue;
    }
    *((_DWORD *)v204 + k) = v228;
  }
  v306.__first_ = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v306);
  LODWORD(__str.__r_.__value_.__l.__data_) = v257;
  std::ostream::write();
  for (m = v252; (std::string *)m != v253; m += 24)
  {
    memset(&v306, 0, 32);
    v231 = (const char *)m;
    if (*(char *)(m + 23) < 0)
      v231 = *(const char **)m;
    strncpy((char *)&v306, v231, 0x1FuLL);
    std::ostream::write();
  }
  std::ostream::write();
  operator delete(v204);
  std::__tree<std::__value_type<std::string,MeCab::CharInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::CharInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::CharInfo>>>::destroy(*((char **)&__s + 1));
  v306.__first_ = (std::__split_buffer<std::string>::pointer)&v252;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v306);
  std::__tree<std::__value_type<std::string,MeCab::CharInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::CharInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::CharInfo>>>::destroy((char *)v256);
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)&v263[*(_QWORD *)(v262 - 24) - 8], *(_DWORD *)&v263[*(_QWORD *)(v262 - 24) + 24] | 4);
  v262 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)&v263[*(_QWORD *)(v262 - 24) - 8] = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x20BD061F8](v263);
  std::ostream::~ostream();
  MEMORY[0x20BD06354](&v264);
  v232 = *MEMORY[0x24BEDB7E0];
  v265[0] = v232;
  v233 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  *(_QWORD *)((char *)v265 + *(_QWORD *)(v232 - 24)) = v233;
  MEMORY[0x20BD061F8](v266);
  std::istream::~istream();
  MEMORY[0x20BD06354](&v267);
  v234 = *MEMORY[0x24BEDB7F8];
  v240[0] = v234;
  v235 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  *(_QWORD *)((char *)v240 + *(_QWORD *)(v234 - 24)) = v235;
  v236 = MEMORY[0x24BEDB848] + 16;
  v240[2] = MEMORY[0x24BEDB848] + 16;
  if (v241 < 0)
    operator delete((void *)v240[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x20BD06354](&v242);
  v243[0] = v234;
  *(_QWORD *)((char *)v243 + *(_QWORD *)(v234 - 24)) = v235;
  v243[2] = v236;
  if (v244 < 0)
    operator delete((void *)v243[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x20BD06354](&v245);
  v268[0] = v232;
  *(_QWORD *)((char *)v268 + *(_QWORD *)(v232 - 24)) = v233;
  MEMORY[0x20BD061F8](v269);
  std::istream::~istream();
  MEMORY[0x20BD06354](&v270);
  return 1;
}

void sub_2083B8C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  unint64_t v48;

  STACK[0x2A8] = v48;
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  STACK[0x260] = (unint64_t)&STACK[0x2A0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
  std::__tree<std::__value_type<std::string,MeCab::CharInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::CharInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::CharInfo>>>::destroy((char *)STACK[0x2C0]);
  std::ofstream::~ofstream(&STACK[0x2F8]);
  std::ifstream::~ifstream(&STACK[0x530]);
  std::istringstream::~istringstream((uint64_t)&a14);
  std::istringstream::~istringstream((uint64_t)&a48);
  std::ifstream::~ifstream(&STACK[0x770]);
  _Unwind_Resume(a1);
}

_QWORD *std::istringstream::basic_istringstream[abi:ne180100](_QWORD *a1, __int128 *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;

  v6 = MEMORY[0x24BEDB868];
  v7 = MEMORY[0x24BEDB868] + 64;
  a1[15] = MEMORY[0x24BEDB868] + 64;
  v8 = (uint64_t)(a1 + 2);
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 8);
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 16);
  *a1 = v9;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v9 - 24)) = v10;
  a1[1] = 0;
  v11 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v11, a1 + 2);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  *a1 = v6 + 24;
  a1[15] = v7;
  std::stringbuf::basic_stringbuf[abi:ne180100](v8, a2, a3 | 8);
  return a1;
}

void sub_2083B9094(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x20BD06354](v1);
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7F8];
  v3 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x20BD06354](a1 + 120);
  return a1;
}

uint64_t MeCab::`anonymous namespace'::atohex(MeCab::_anonymous_namespace_ *this, const char *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  size_t v20;
  char v22;
  char v23;

  if (strlen((const char *)this) < 3 || *(_BYTE *)this != 48 || (*((unsigned __int8 *)this + 1) | 0x20) != 0x78)
  {
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/char_property.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") [", 3);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"std::strlen(s) >= 3 && s[0] == '0' && (s[1] == 'x' || s[1] == 'X')", 66);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"] ", 2);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"no hex value: ", 14);
    v9 = strlen((const char *)this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)this, v9);
    MeCab::die::~die((MeCab::die *)&v23);
  }
  LOBYTE(v10) = *((_BYTE *)this + 2);
  if (!(_BYTE)v10)
    return 0;
  LODWORD(v11) = 0;
  v12 = 3;
  do
  {
    if ((v10 - 48) > 9u)
    {
      if (((char)v10 - 65) > 5)
      {
        if (((char)v10 - 97) > 5)
        {
          v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/char_property.cpp", 67);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"(", 1);
          v15 = (_QWORD *)std::ostream::operator<<();
          v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)") [", 3);
          v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"false", 5);
          v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"] ", 2);
          v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"no hex value: ", 14);
          v20 = strlen((const char *)this);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)this, v20);
          MeCab::die::~die((MeCab::die *)&v22);
        }
        v13 = (char)v10 - 87;
      }
      else
      {
        v13 = (char)v10 - 55;
      }
    }
    else
    {
      v13 = (char)v10 - 48;
    }
    v10 = *((unsigned __int8 *)this + v12++);
    v11 = (v13 + 16 * v11);
  }
  while (v10);
  return v11;
}

void sub_2083B9360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  MeCab::die::~die((MeCab::die *)&a13);
}

void sub_2083B9378()
{
  _Unwind_Exception *v0;

  _Unwind_Resume(v0);
}

uint64_t MeCab::`anonymous namespace'::encode(void ****a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  void **v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  unint64_t v23;
  void **v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  void ***v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char v37;
  char v38;
  char v39;

  if (a1[1] == *a1)
  {
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/char_property.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"(", 1);
    v5 = (_QWORD *)std::ostream::operator<<();
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") [", 3);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"c.size()", 8);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"category size is empty", 22);
    MeCab::die::~die((MeCab::die *)&v39);
  }
  v9 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>(a2, (void **)*a1);
  if ((void **)(a2 + 8) == v9)
  {
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/char_property.cpp", 67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
    v11 = (_QWORD *)std::ostream::operator<<();
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)") [", 3);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"it != category->end()", 21);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"] ", 2);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"category [", 10);
    v16 = *((char *)*a1 + 23);
    if (v16 >= 0)
      v17 = (void **)*a1;
    else
      v17 = **a1;
    if (v16 >= 0)
      v18 = *((unsigned __int8 *)*a1 + 23);
    else
      v18 = (uint64_t)(*a1)[1];
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"] is undefined", 14);
    MeCab::die::~die((MeCab::die *)&v38);
  }
  v20 = *((unsigned int *)v9 + 14);
  v21 = (void **)*a1;
  if (a1[1] != *a1)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>(a2, &v21[v22]);
      if ((void **)(a2 + 8) == v24)
      {
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/char_property.cpp", 67);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(", 1);
        v26 = (_QWORD *)std::ostream::operator<<();
        v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)") [", 3);
        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"it != category->end()", 21);
        v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"] ", 2);
        v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"category [", 10);
        v31 = &(*a1)[v22];
        v32 = *((char *)v31 + 23);
        if (v32 >= 0)
          v33 = (uint64_t)&(*a1)[v22];
        else
          v33 = (uint64_t)*v31;
        if (v32 >= 0)
          v34 = *((unsigned __int8 *)v31 + 23);
        else
          v34 = (uint64_t)v31[1];
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v33, v34);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"] is undefined", 14);
        MeCab::die::~die((MeCab::die *)&v37);
      }
      v20 = v20 & 0xFFFC0000 | ((1 << (*((_DWORD *)v24 + 14) >> 18)) + (_DWORD)v20) & 0x3FFFF;
      ++v23;
      v21 = (void **)*a1;
      v22 += 3;
    }
    while (v23 < 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1));
  }
  return v20;
}

void sub_2083B9634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  MeCab::die::~die((MeCab::die *)&a13);
}

void sub_2083B9658()
{
  _Unwind_Exception *v0;

  _Unwind_Resume(v0);
}

void **std::vector<MeCab::`anonymous namespace'::Range>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void **v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 32;
        v7 = (void **)(v3 - 24);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__split_buffer<MeCab::`anonymous namespace'::Range>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v5;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    v5 = (void **)(i - 24);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, __int128 *a2, int a3)
{
  uint64_t v6;
  __int128 v7;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x24BEDB848] + 16;
  v7 = *a2;
  *(_QWORD *)(v6 + 80) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v6 + 64) = v7;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(v6 + 88) = 0;
  *(_DWORD *)(v6 + 96) = a3;
  std::stringbuf::__init_buf_ptrs[abi:ne180100](v6);
  return a1;
}

void sub_2083B97A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

BOOL MeCab::Iconv::open(MeCab::Iconv *this, _anonymous_namespace_ *a2, _anonymous_namespace_ *a3)
{
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  _BOOL8 result;

  *((_QWORD *)this + 1) = 0;
  if (!strcmp(v5, v7))
    return 1;
  v8 = MEMORY[0x20BD06534](v7, v5);
  result = v8 != -1;
  if (v8 == -1)
    v8 = 0;
  *((_QWORD *)this + 1) = v8;
  return result;
}

const char *`anonymous namespace'::decode_charset_iconv(_anonymous_namespace_ *this, const char *a2)
{
  unsigned int v3;
  _QWORD *v5;
  size_t v6;
  _QWORD *v7;

  v3 = MeCab::decode_charset(this, a2);
  if (v3 < 6)
    return off_24C09C950[v3];
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"charset ", 8);
  v6 = strlen((const char *)this);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)this, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" is not defined, use EUC-JP", 27);
  return "EUC-JP";
}

uint64_t MeCab::Iconv::convert(uint64_t a1, std::string *a2)
{
  std::string::size_type size;
  _BOOL8 v5;
  int64_t v6;
  std::string *v7;
  std::string *v8;
  std::string *v10;
  std::string *v11;
  std::string v12;
  uint64_t v13;
  std::string::size_type v14;

  if (!*(_QWORD *)(a1 + 8))
    return 1;
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    size = a2->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v6 = 4 * size;
  v13 = 4 * size;
  v14 = size;
  memset(&v12, 0, sizeof(v12));
  std::string::reserve(&v12, 4 * size);
  v7 = a2;
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
  v11 = v7;
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v12;
  else
    v8 = (std::string *)v12.__r_.__value_.__r.__words[0];
  v10 = v8;
  if (v6 >= 1)
    bzero(v8, v6);
  MEMORY[0x20BD0651C](*(_QWORD *)(a1 + 8), 0, &v14, 0, &v13);
  while (1)
  {
    v5 = v14 == 0;
    if (!v14)
      break;
    if (MEMORY[0x20BD0651C](*(_QWORD *)(a1 + 8), &v11, &v14, &v10, &v13) == -1)
      goto LABEL_18;
  }
  std::string::__assign_external(a2, (const std::string::value_type *)v8, v6 - v13);
LABEL_18:
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  return v5;
}

void sub_2083B9B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MeCab::Iconv::~Iconv(MeCab::Iconv *this)
{
  *(_QWORD *)this = &off_24C09C4C0;
  if (*((_QWORD *)this + 1))
    MEMORY[0x20BD06528]();
}

{
  MeCab::Iconv::~Iconv(this);
  JUMPOUT(0x20BD0639CLL);
}

uint64_t *MeCab::get_char_category(unsigned int a1)
{
  unsigned __int8 v1;
  uint64_t *result;
  MeCab *v3;
  unsigned int v4;

  v4 = a1;
  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v3)
    {
      MeCab::new_char_category_map(v3);
      MeCab::get_char_category(char32_t)::category_map = (uint64_t)&MeCab::new_char_category_map(void)::m;
    }
  }
  result = std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::find<char32_t>((_QWORD *)MeCab::get_char_category(char32_t)::category_map, &v4);
  if (result)
    return (uint64_t *)*((unsigned int *)result + 5);
  return result;
}

void sub_2083B9C04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *MeCab::new_char_category_map(MeCab *this)
{
  unsigned __int8 v1;
  unsigned int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  int v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  int v97;
  unsigned int v98;
  int v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  int v107;
  unsigned int v108;
  int v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  int v113;
  unsigned int v114;
  int v115;
  unsigned int v116;
  int v117;
  unsigned int v118;
  int v119;
  unsigned int v120;
  int v121;
  unsigned int v122;
  int v123;
  unsigned int v124;
  int v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  int v129;
  unsigned int v130;
  int v131;
  unsigned int v132;
  int v133;
  int i;
  unsigned int v135;
  int v136;
  unsigned int v137;
  int v138;
  unsigned int v139;
  int v140;
  unsigned int v141;
  int v142;
  unsigned int v143;
  int v144;
  unsigned int v145;
  int v146;
  unsigned int v147;
  int v148;
  unsigned int v149;
  int v150;
  unsigned int v151;
  int v152;
  unsigned int v153;
  int v154;
  unsigned int v155;
  int v156;
  unsigned int v157;
  int v158;
  unsigned int v159;
  int v160;
  unsigned int v161;
  int v162;
  unsigned int v163;
  int v164;
  unsigned int v165;
  int v166;
  unsigned int v167;
  int v168;
  unsigned int v169;
  int v170;
  unsigned int v171;
  int v172;
  unsigned int v173;
  int v174;
  unsigned int v175;
  int v176;
  unsigned int v177;
  int v178;
  unsigned int v179;
  int v180;
  unsigned int v181;
  int v182;
  unsigned int v183;
  int v184;
  unsigned int v185;
  int v186;
  unsigned int v187;
  int v188;
  unsigned int v189;
  int v190;
  unsigned int v191;
  int v192;
  unsigned int v193;
  int v194;
  unsigned int v195;
  int v196;
  unsigned int v197;
  int v198;
  unsigned int v199;
  int v200;
  unsigned int v201;
  int v202;
  unsigned int v203;
  int v204;
  unsigned int v205;
  int v206;
  unsigned int v207;
  unsigned int v208;
  int v209;
  unsigned int v210;
  int v211;
  unsigned int v212;
  int v213;
  unsigned int v214;
  int v215;
  unsigned int v216;
  int v217;
  unsigned int v218;
  int v219;
  unsigned int v220;
  int v221;
  unsigned int v222;
  int v223;
  unsigned int v224;
  int v225;
  unsigned int v226;
  int v227;
  unsigned int v228;
  int v229;
  unsigned int v230;
  int v231;
  unsigned int v232;
  int v233;
  unsigned int v234;
  int v235;
  unsigned int v236;
  int v237;
  unsigned int v238;
  int v239;
  unsigned int v240;
  int v241;
  unsigned int v242;
  int v243;
  unsigned int v244;
  int v245;
  unsigned int v246;
  int v247;
  unsigned int v248;
  int v249;
  unsigned int v250;
  int v251;
  unsigned int v252;
  int v253;
  unsigned int v254;
  int v255;
  unsigned int v256;
  int v257;
  unsigned int v258;
  int v259;
  unsigned int v260;
  int v261;
  unsigned int v262;
  int v263;
  unsigned int v264;
  int v265;
  unsigned int v266;
  int v267;
  unsigned int v268;
  int v269;
  unsigned int v270;
  int v271;
  unsigned int v272;
  int v273;
  unsigned int v274;
  int v275;
  unsigned int v276;
  int v277;
  unsigned int v278;
  int v279;
  unsigned int v280;
  int v281;
  unsigned int v282;
  int v283;
  unsigned int v284;
  int v285;
  unsigned int v286;
  int v287;
  unsigned int v288;
  int v289;
  unsigned int v290;
  int v291;
  unsigned int v292;
  int v293;
  unsigned int v294;
  int v295;
  unsigned int v296;
  int v297;
  unsigned int v298;
  int v299;
  unsigned int v300;
  int v301;
  unsigned int v302;
  int v303;
  unsigned int v304;
  int v305;
  unsigned int v306;
  int v307;
  unsigned int v308;
  int v309;
  unsigned int v310;
  int v311;
  unsigned int v312;
  int v313;
  unsigned int v314;
  int v315;
  unsigned int v316;
  int v317;
  unsigned int v318;
  int v319;
  unsigned int v320;
  int v321;
  unsigned int v322;
  int v323;
  unsigned int v324;
  int v325;
  unsigned int v326;
  int v327;
  unsigned int v328;
  int v329;
  unsigned int v330;
  int v331;
  unsigned int v332;
  int v333;
  unsigned int v334;
  int v335;
  unsigned int v336;
  int v337;
  unsigned int v338;
  int v339;
  unsigned int v340;
  int v341;
  unsigned int v342;
  int v343;
  unsigned int v344;
  int v345;
  unsigned int v346;
  int v347;
  unsigned int v348;
  int v349;
  unsigned int v350;
  int v351;
  _QWORD *result;
  int v353;

  {
    MeCab::new_char_category_map(void)::m = 0u;
    *(_OWORD *)&qword_25453B1A0 = 0u;
    dword_25453B1B0 = 1065353216;
    __cxa_atexit((void (*)(void *))std::unordered_map<char32_t,MeCab::UnicodeCharCategory>::~unordered_map[abi:ne180100], &MeCab::new_char_category_map(void)::m, &dword_208398000);
  }
  v2 = 33;
  v353 = 33;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v2++, &v353)+ 5) = 2;
    v353 = v2;
  }
  while (v2 != 45);
  v3 = 46;
  v353 = 46;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v3++, &v353)+ 5) = 2;
    v353 = v3;
  }
  while (v3 != 48);
  v353 = 48;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v3++, &v353)+ 5) = 1;
    v353 = v3;
  }
  while (v3 != 58);
  v353 = 58;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v3++, &v353)+ 5) = 2;
    v353 = v3;
  }
  while (v3 != 65);
  v4 = 91;
  v353 = 91;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v4++, &v353)+ 5) = 2;
    v353 = v4;
  }
  while (v4 != 95);
  v353 = 96;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x60u, &v353)+ 5) = 2;
  v5 = 123;
  v353 = 123;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v5++, &v353)+ 5) = 2;
    v353 = v5;
  }
  while (v5 != 127);
  v6 = 161;
  v353 = 161;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v6++, &v353)+ 5) = 2;
    v353 = v6;
  }
  while (v6 != 170);
  v7 = 171;
  v353 = 171;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v7++, &v353)+ 5) = 2;
    v353 = v7;
  }
  while (v7 != 173);
  v8 = 174;
  v353 = 174;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v8++, &v353)+ 5) = 2;
    v353 = v8;
  }
  while (v8 != 178);
  v353 = 178;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v8++, &v353)+ 5) = 1;
    v353 = v8;
  }
  while (v8 != 180);
  v353 = 180;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xB4u, &v353)+ 5) = 2;
  v9 = 182;
  v353 = 182;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v9++, &v353)+ 5) = 2;
    v353 = v9;
  }
  while (v9 != 185);
  v353 = 185;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xB9u, &v353)+ 5) = 1;
  v353 = 187;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xBBu, &v353)+ 5) = 2;
  v10 = 188;
  v353 = 188;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v10++, &v353)+ 5) = 1;
    v353 = v10;
  }
  while (v10 != 191);
  v353 = 191;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xBFu, &v353)+ 5) = 2;
  v353 = 215;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xD7u, &v353)+ 5) = 2;
  v353 = 247;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xF7u, &v353)+ 5) = 2;
  v11 = 706;
  v353 = 706;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v11++, &v353)+ 5) = 2;
    v353 = v11;
  }
  while (v11 != 710);
  v12 = 722;
  v353 = 722;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v12++, &v353)+ 5) = 2;
    v353 = v12;
  }
  while (v12 != 736);
  v13 = 741;
  v353 = 741;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v13++, &v353)+ 5) = 2;
    v353 = v13;
  }
  while (v13 != 748);
  v353 = 749;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x2EDu, &v353)+ 5) = 2;
  v14 = 751;
  v353 = 751;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v14++, &v353)+ 5) = 2;
    v353 = v14;
  }
  while (v14 != 768);
  v353 = 885;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x375u, &v353)+ 5) = 2;
  v353 = 894;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x37Eu, &v353)+ 5) = 2;
  v15 = 900;
  v353 = 900;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v15++, &v353)+ 5) = 2;
    v353 = v15;
  }
  while (v15 != 902);
  v353 = 903;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x387u, &v353)+ 5) = 2;
  v353 = 1014;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x3F6u, &v353)+ 5) = 2;
  v353 = 1154;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x482u, &v353)+ 5) = 2;
  v16 = 1370;
  v353 = 1370;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v16++, &v353)+ 5) = 2;
    v353 = v16;
  }
  while (v16 != 1376);
  v17 = 1417;
  v353 = 1417;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v17++, &v353)+ 5) = 2;
    v353 = v17;
  }
  while (v17 != 1419);
  v18 = 1421;
  v353 = 1421;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v18++, &v353)+ 5) = 2;
    v353 = v18;
  }
  while (v18 != 1424);
  v353 = 1470;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x5BEu, &v353)+ 5) = 2;
  v353 = 1472;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x5C0u, &v353)+ 5) = 2;
  v353 = 1475;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x5C3u, &v353)+ 5) = 2;
  v353 = 1478;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x5C6u, &v353)+ 5) = 2;
  v19 = 1523;
  v353 = 1523;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v19++, &v353)+ 5) = 2;
    v353 = v19;
  }
  while (v19 != 1525);
  v20 = 1542;
  v353 = 1542;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v20++, &v353)+ 5) = 2;
    v353 = v20;
  }
  while (v20 != 1552);
  v353 = 1563;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x61Bu, &v353)+ 5) = 2;
  v21 = 1565;
  v353 = 1565;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v21++, &v353)+ 5) = 2;
    v353 = v21;
  }
  while (v21 != 1568);
  v22 = 1632;
  v353 = 1632;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v22++, &v353)+ 5) = 1;
    v353 = v22;
  }
  while (v22 != 1642);
  v353 = 1642;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v22++, &v353)+ 5) = 2;
    v353 = v22;
  }
  while (v22 != 1646);
  v353 = 1748;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x6D4u, &v353)+ 5) = 2;
  v353 = 1758;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x6DEu, &v353)+ 5) = 2;
  v353 = 1769;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x6E9u, &v353)+ 5) = 2;
  v23 = 1776;
  v353 = 1776;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v23++, &v353)+ 5) = 1;
    v353 = v23;
  }
  while (v23 != 1786);
  v24 = 1789;
  v353 = 1789;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v24++, &v353)+ 5) = 2;
    v353 = v24;
  }
  while (v24 != 1791);
  v25 = 1792;
  v353 = 1792;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v25++, &v353)+ 5) = 2;
    v353 = v25;
  }
  while (v25 != 1806);
  v26 = 1984;
  v353 = 1984;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v26++, &v353)+ 5) = 1;
    v353 = v26;
  }
  while (v26 != 1994);
  v27 = 2038;
  v353 = 2038;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v27++, &v353)+ 5) = 2;
    v353 = v27;
  }
  while (v27 != 2042);
  v28 = 2046;
  v353 = 2046;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v28++, &v353)+ 5) = 2;
    v353 = v28;
  }
  while (v28 != 2048);
  v29 = 2096;
  v353 = 2096;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v29++, &v353)+ 5) = 2;
    v353 = v29;
  }
  while (v29 != 2111);
  v353 = 2142;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x85Eu, &v353)+ 5) = 2;
  v353 = 2184;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x888u, &v353)+ 5) = 2;
  v30 = 2404;
  v353 = 2404;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v30++, &v353)+ 5) = 2;
    v353 = v30;
  }
  while (v30 != 2406);
  v353 = 2406;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v30++, &v353)+ 5) = 1;
    v353 = v30;
  }
  while (v30 != 2416);
  v353 = 2416;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x970u, &v353)+ 5) = 2;
  v31 = 2534;
  v353 = 2534;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v31++, &v353)+ 5) = 1;
    v353 = v31;
  }
  while (v31 != 2544);
  v32 = 2546;
  v353 = 2546;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v32++, &v353)+ 5) = 2;
    v353 = v32;
  }
  while (v32 != 2548);
  v353 = 2548;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v32++, &v353)+ 5) = 1;
    v353 = v32;
  }
  while (v32 != 2554);
  v353 = 2554;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v32++, &v353)+ 5) = 2;
    v353 = v32;
  }
  while (v32 != 2556);
  v353 = 2557;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x9FDu, &v353)+ 5) = 2;
  v33 = 2662;
  v353 = 2662;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v33++, &v353)+ 5) = 1;
    v353 = v33;
  }
  while (v33 != 2672);
  v353 = 2678;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xA76u, &v353)+ 5) = 2;
  v34 = 2790;
  v353 = 2790;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v34++, &v353)+ 5) = 1;
    v353 = v34;
  }
  while (v34 != 2800);
  v353 = 2800;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v34++, &v353)+ 5) = 2;
    v353 = v34;
  }
  while (v34 != 2802);
  v35 = 2918;
  v353 = 2918;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v35++, &v353)+ 5) = 1;
    v353 = v35;
  }
  while (v35 != 2928);
  v353 = 2928;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xB70u, &v353)+ 5) = 2;
  v36 = 2930;
  v353 = 2930;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v36++, &v353)+ 5) = 1;
    v353 = v36;
  }
  while (v36 != 2936);
  v37 = 3046;
  v353 = 3046;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v37++, &v353)+ 5) = 1;
    v353 = v37;
  }
  while (v37 != 3059);
  v353 = 3059;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v37++, &v353)+ 5) = 2;
    v353 = v37;
  }
  while (v37 != 3067);
  v38 = 3174;
  v353 = 3174;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v38++, &v353)+ 5) = 1;
    v353 = v38;
  }
  while (v38 != 3184);
  v353 = 3191;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xC77u, &v353)+ 5) = 2;
  v39 = 3192;
  v353 = 3192;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v39++, &v353)+ 5) = 1;
    v353 = v39;
  }
  while (v39 != 3199);
  v353 = 3199;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xC7Fu, &v353)+ 5) = 2;
  v353 = 3204;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xC84u, &v353)+ 5) = 2;
  v40 = 3302;
  v353 = 3302;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v40++, &v353)+ 5) = 1;
    v353 = v40;
  }
  while (v40 != 3312);
  v353 = 3407;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xD4Fu, &v353)+ 5) = 2;
  v41 = 3416;
  v353 = 3416;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v41++, &v353)+ 5) = 1;
    v353 = v41;
  }
  while (v41 != 3423);
  v42 = 3430;
  v353 = 3430;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v42++, &v353)+ 5) = 1;
    v353 = v42;
  }
  while (v42 != 3449);
  v353 = 3449;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xD79u, &v353)+ 5) = 2;
  v43 = 3558;
  v353 = 3558;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v43++, &v353)+ 5) = 1;
    v353 = v43;
  }
  while (v43 != 3568);
  v353 = 3572;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xDF4u, &v353)+ 5) = 2;
  v353 = 3647;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xE3Fu, &v353)+ 5) = 2;
  v353 = 3663;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xE4Fu, &v353)+ 5) = 2;
  v44 = 3664;
  v353 = 3664;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v44++, &v353)+ 5) = 1;
    v353 = v44;
  }
  while (v44 != 3674);
  v353 = 3674;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v44++, &v353)+ 5) = 2;
    v353 = v44;
  }
  while (v44 != 3676);
  v45 = 3792;
  v353 = 3792;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v45++, &v353)+ 5) = 1;
    v353 = v45;
  }
  while (v45 != 3802);
  v46 = 3841;
  v353 = 3841;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v46++, &v353)+ 5) = 2;
    v353 = v46;
  }
  while (v46 != 3864);
  v47 = 3866;
  v353 = 3866;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v47++, &v353)+ 5) = 2;
    v353 = v47;
  }
  while (v47 != 3872);
  v353 = 3872;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v47++, &v353)+ 5) = 1;
    v353 = v47;
  }
  while (v47 != 3892);
  v353 = 3892;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xF34u, &v353)+ 5) = 2;
  v353 = 3894;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xF36u, &v353)+ 5) = 2;
  v353 = 3896;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xF38u, &v353)+ 5) = 2;
  v48 = 3898;
  v353 = 3898;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v48++, &v353)+ 5) = 2;
    v353 = v48;
  }
  while (v48 != 3902);
  v353 = 3973;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xF85u, &v353)+ 5) = 2;
  v49 = 4030;
  v353 = 4030;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v49++, &v353)+ 5) = 2;
    v353 = v49;
  }
  while (v49 != 4038);
  v50 = 4039;
  v353 = 4039;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v50++, &v353)+ 5) = 2;
    v353 = v50;
  }
  while (v50 != 4045);
  v51 = 4046;
  v353 = 4046;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v51++, &v353)+ 5) = 2;
    v353 = v51;
  }
  while (v51 != 4059);
  v52 = 4160;
  v353 = 4160;
  v53 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v52++, &v353)+ 5) = 1;
    v353 = v52;
    --v53;
  }
  while (v53);
  v54 = 4170;
  v353 = 4170;
  v55 = 6;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v54++, &v353)+ 5) = 2;
    v353 = v54;
    --v55;
  }
  while (v55);
  v56 = 4240;
  v353 = 4240;
  v57 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v56++, &v353)+ 5) = 1;
    v353 = v56;
    --v57;
  }
  while (v57);
  v58 = 4254;
  v353 = 4254;
  v59 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v58++, &v353)+ 5) = 2;
    v353 = v58;
    --v59;
  }
  while (v59);
  v353 = 4347;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x10FBu, &v353)+ 5) = 2;
  v60 = 4960;
  v353 = 4960;
  v61 = 9;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v60++, &v353)+ 5) = 2;
    v353 = v60;
    --v61;
  }
  while (v61);
  v62 = 4969;
  v353 = 4969;
  v63 = 20;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v62++, &v353)+ 5) = 1;
    v353 = v62;
    --v63;
  }
  while (v63);
  v64 = 5008;
  v353 = 5008;
  v65 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v64++, &v353)+ 5) = 2;
    v353 = v64;
    --v65;
  }
  while (v65);
  v353 = 5120;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x1400u, &v353)+ 5) = 2;
  v66 = 5741;
  v353 = 5741;
  v67 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v66++, &v353)+ 5) = 2;
    v353 = v66;
    --v67;
  }
  while (v67);
  v68 = 5787;
  v353 = 5787;
  v69 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v68++, &v353)+ 5) = 2;
    v353 = v68;
    --v69;
  }
  while (v69);
  v70 = 5867;
  v353 = 5867;
  v71 = 3;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v70++, &v353)+ 5) = 2;
    v353 = v70;
    --v71;
  }
  while (v71);
  v72 = 5870;
  v353 = 5870;
  v73 = 3;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v72++, &v353)+ 5) = 1;
    v353 = v72;
    --v73;
  }
  while (v73);
  v74 = 5941;
  v353 = 5941;
  v75 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v74++, &v353)+ 5) = 2;
    v353 = v74;
    --v75;
  }
  while (v75);
  v76 = 6100;
  v353 = 6100;
  v77 = 3;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v76++, &v353)+ 5) = 2;
    v353 = v76;
    --v77;
  }
  while (v77);
  v78 = 6104;
  v353 = 6104;
  v79 = 4;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v78++, &v353)+ 5) = 2;
    v353 = v78;
    --v79;
  }
  while (v79);
  v80 = 6112;
  v353 = 6112;
  v81 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v80++, &v353)+ 5) = 1;
    v353 = v80;
    --v81;
  }
  while (v81);
  v82 = 6128;
  v353 = 6128;
  v83 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v82++, &v353)+ 5) = 1;
    v353 = v82;
    --v83;
  }
  while (v83);
  v84 = 6144;
  v353 = 6144;
  v85 = 11;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v84++, &v353)+ 5) = 2;
    v353 = v84;
    --v85;
  }
  while (v85);
  v86 = 6160;
  v353 = 6160;
  v87 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v86++, &v353)+ 5) = 1;
    v353 = v86;
    --v87;
  }
  while (v87);
  v353 = 6464;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x1940u, &v353)+ 5) = 2;
  v88 = 6468;
  v353 = 6468;
  v89 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v88++, &v353)+ 5) = 2;
    v353 = v88;
    --v89;
  }
  while (v89);
  v90 = 6470;
  v353 = 6470;
  v91 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v90++, &v353)+ 5) = 1;
    v353 = v90;
    --v91;
  }
  while (v91);
  v92 = 6608;
  v353 = 6608;
  v93 = 11;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v92++, &v353)+ 5) = 1;
    v353 = v92;
    --v93;
  }
  while (v93);
  v94 = 6622;
  v353 = 6622;
  v95 = 34;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v94++, &v353)+ 5) = 2;
    v353 = v94;
    --v95;
  }
  while (v95);
  v96 = 6686;
  v353 = 6686;
  v97 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v96++, &v353)+ 5) = 2;
    v353 = v96;
    --v97;
  }
  while (v97);
  v98 = 6784;
  v353 = 6784;
  v99 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v98++, &v353)+ 5) = 1;
    v353 = v98;
    --v99;
  }
  while (v99);
  v100 = 6800;
  v353 = 6800;
  v101 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v100++, &v353)+ 5) = 1;
    v353 = v100;
    --v101;
  }
  while (v101);
  v102 = 6816;
  v353 = 6816;
  v103 = 7;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v102++, &v353)+ 5) = 2;
    v353 = v102;
    --v103;
  }
  while (v103);
  v104 = 6824;
  v353 = 6824;
  v105 = 6;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v104++, &v353)+ 5) = 2;
    v353 = v104;
    --v105;
  }
  while (v105);
  v106 = 6992;
  v353 = 6992;
  v107 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v106++, &v353)+ 5) = 1;
    v353 = v106;
    --v107;
  }
  while (v107);
  v108 = 7002;
  v353 = 7002;
  v109 = 17;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v108++, &v353)+ 5) = 2;
    v353 = v108;
    --v109;
  }
  while (v109);
  v110 = 7028;
  v353 = 7028;
  v111 = 11;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v110++, &v353)+ 5) = 2;
    v353 = v110;
    --v111;
  }
  while (v111);
  v112 = 7088;
  v353 = 7088;
  v113 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v112++, &v353)+ 5) = 1;
    v353 = v112;
    --v113;
  }
  while (v113);
  v114 = 7164;
  v353 = 7164;
  v115 = 4;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v114++, &v353)+ 5) = 2;
    v353 = v114;
    --v115;
  }
  while (v115);
  v116 = 7227;
  v353 = 7227;
  v117 = 5;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v116++, &v353)+ 5) = 2;
    v353 = v116;
    --v117;
  }
  while (v117);
  v118 = 7232;
  v353 = 7232;
  v119 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v118++, &v353)+ 5) = 1;
    v353 = v118;
    --v119;
  }
  while (v119);
  v120 = 7248;
  v353 = 7248;
  v121 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v120++, &v353)+ 5) = 1;
    v353 = v120;
    --v121;
  }
  while (v121);
  v122 = 7294;
  v353 = 7294;
  v123 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v122++, &v353)+ 5) = 2;
    v353 = v122;
    --v123;
  }
  while (v123);
  v124 = 7360;
  v353 = 7360;
  v125 = 8;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v124++, &v353)+ 5) = 2;
    v353 = v124;
    --v125;
  }
  while (v125);
  v353 = 7379;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x1CD3u, &v353)+ 5) = 2;
  v353 = 8125;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x1FBDu, &v353)+ 5) = 2;
  v126 = 8127;
  v353 = 8127;
  v127 = 3;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v126++, &v353)+ 5) = 2;
    v353 = v126;
    --v127;
  }
  while (v127);
  v128 = 8141;
  v353 = 8141;
  v129 = 3;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v128++, &v353)+ 5) = 2;
    v353 = v128;
    --v129;
  }
  while (v129);
  v130 = 8157;
  v353 = 8157;
  v131 = 3;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v130++, &v353)+ 5) = 2;
    v353 = v130;
    --v131;
  }
  while (v131);
  v132 = 8173;
  v353 = 8173;
  v133 = 3;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v132++, &v353)+ 5) = 2;
    v353 = v132;
    --v133;
  }
  while (v133);
  v353 = 8189;
  for (i = 8190; i != 0x2000; ++i)
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(i - 1, &v353)+ 5) = 2;
    v353 = i;
  }
  v135 = 8208;
  v353 = 8208;
  v136 = 24;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v135++, &v353)+ 5) = 2;
    v353 = v135;
    --v136;
  }
  while (v136);
  v137 = 8240;
  v353 = 8240;
  v138 = 47;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v137++, &v353)+ 5) = 2;
    v353 = v137;
    --v138;
  }
  while (v138);
  v353 = 8304;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x2070u, &v353)+ 5) = 1;
  v139 = 8308;
  v353 = 8308;
  v140 = 6;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v139++, &v353)+ 5) = 1;
    v353 = v139;
    --v140;
  }
  while (v140);
  v141 = 8314;
  v353 = 8314;
  v142 = 5;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v141++, &v353)+ 5) = 2;
    v353 = v141;
    --v142;
  }
  while (v142);
  v143 = 8320;
  v353 = 8320;
  v144 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v143++, &v353)+ 5) = 1;
    v353 = v143;
    --v144;
  }
  while (v144);
  v145 = 8330;
  v353 = 8330;
  v146 = 5;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v145++, &v353)+ 5) = 2;
    v353 = v145;
    --v146;
  }
  while (v146);
  v147 = 8352;
  v353 = 8352;
  v148 = 33;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v147++, &v353)+ 5) = 2;
    v353 = v147;
    --v148;
  }
  while (v148);
  v149 = 8448;
  v353 = 8448;
  v150 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v149++, &v353)+ 5) = 2;
    v353 = v149;
    --v150;
  }
  while (v150);
  v151 = 8451;
  v353 = 8451;
  v152 = 4;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v151++, &v353)+ 5) = 2;
    v353 = v151;
    --v152;
  }
  while (v152);
  v153 = 8456;
  v353 = 8456;
  v154 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v153++, &v353)+ 5) = 2;
    v353 = v153;
    --v154;
  }
  while (v154);
  v353 = 8468;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x2114u, &v353)+ 5) = 2;
  v155 = 8470;
  v353 = 8470;
  v156 = 3;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v155++, &v353)+ 5) = 2;
    v353 = v155;
    --v156;
  }
  while (v156);
  v157 = 8478;
  v353 = 8478;
  v158 = 6;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v157++, &v353)+ 5) = 2;
    v353 = v157;
    --v158;
  }
  while (v158);
  v353 = 8485;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x2125u, &v353)+ 5) = 2;
  v353 = 8487;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x2127u, &v353)+ 5) = 2;
  v353 = 8489;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x2129u, &v353)+ 5) = 2;
  v353 = 8494;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x212Eu, &v353)+ 5) = 2;
  v159 = 8506;
  v353 = 8506;
  v160 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v159++, &v353)+ 5) = 2;
    v353 = v159;
    --v160;
  }
  while (v160);
  v161 = 8512;
  v353 = 8512;
  v162 = 5;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v161++, &v353)+ 5) = 2;
    v353 = v161;
    --v162;
  }
  while (v162);
  v163 = 8522;
  v353 = 8522;
  v164 = 4;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v163++, &v353)+ 5) = 2;
    v353 = v163;
    --v164;
  }
  while (v164);
  v353 = 8527;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x214Fu, &v353)+ 5) = 2;
  v165 = 8528;
  v353 = 8528;
  v166 = 51;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v165++, &v353)+ 5) = 1;
    v353 = v165;
    --v166;
  }
  while (v166);
  v167 = 8581;
  v353 = 8581;
  v168 = 5;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v167++, &v353)+ 5) = 1;
    v353 = v167;
    --v168;
  }
  while (v168);
  v169 = 8586;
  v353 = 8586;
  v170 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v169++, &v353)+ 5) = 2;
    v353 = v169;
    --v170;
  }
  while (v170);
  v171 = 8592;
  v353 = 8592;
  v172 = 663;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v171++, &v353)+ 5) = 2;
    v353 = v171;
    --v172;
  }
  while (v172);
  v173 = 9280;
  v353 = 9280;
  v174 = 11;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v173++, &v353)+ 5) = 2;
    v353 = v173;
    --v174;
  }
  while (v174);
  v175 = 9312;
  v353 = 9312;
  v176 = 60;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v175++, &v353)+ 5) = 1;
    v353 = v175;
    --v176;
  }
  while (v176);
  v177 = 9372;
  v353 = 9372;
  v178 = 78;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v177++, &v353)+ 5) = 2;
    v353 = v177;
    --v178;
  }
  while (v178);
  v179 = 9450;
  v353 = 9450;
  v180 = 22;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v179++, &v353)+ 5) = 1;
    v353 = v179;
    --v180;
  }
  while (v180);
  v181 = 9472;
  v353 = 9472;
  v182 = 630;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v181++, &v353)+ 5) = 2;
    v353 = v181;
    --v182;
  }
  while (v182);
  v183 = 10102;
  v353 = 10102;
  v184 = 30;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v183++, &v353)+ 5) = 1;
    v353 = v183;
    --v184;
  }
  while (v184);
  v185 = 10132;
  v353 = 10132;
  v186 = 992;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v185++, &v353)+ 5) = 2;
    v353 = v185;
    --v186;
  }
  while (v186);
  v187 = 11126;
  v353 = 11126;
  v188 = 32;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v187++, &v353)+ 5) = 2;
    v353 = v187;
    --v188;
  }
  while (v188);
  v189 = 11159;
  v353 = 11159;
  v190 = 105;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v189++, &v353)+ 5) = 2;
    v353 = v189;
    --v190;
  }
  while (v190);
  v191 = 11493;
  v353 = 11493;
  v192 = 6;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v191++, &v353)+ 5) = 2;
    v353 = v191;
    --v192;
  }
  while (v192);
  v193 = 11513;
  v353 = 11513;
  v194 = 4;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v193++, &v353)+ 5) = 2;
    v353 = v193;
    --v194;
  }
  while (v194);
  v353 = 11517;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x2CFDu, &v353)+ 5) = 1;
  v195 = 11518;
  v353 = 11518;
  v196 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v195++, &v353)+ 5) = 2;
    v353 = v195;
    --v196;
  }
  while (v196);
  v353 = 11632;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x2D70u, &v353)+ 5) = 2;
  v197 = 11776;
  v353 = 11776;
  v198 = 47;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v197++, &v353)+ 5) = 2;
    v353 = v197;
    --v198;
  }
  while (v198);
  v199 = 11824;
  v353 = 11824;
  v200 = 46;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v199++, &v353)+ 5) = 2;
    v353 = v199;
    --v200;
  }
  while (v200);
  v201 = 11904;
  v353 = 11904;
  v202 = 26;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v201++, &v353)+ 5) = 2;
    v353 = v201;
    --v202;
  }
  while (v202);
  v203 = 11931;
  v353 = 11931;
  v204 = 89;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v203++, &v353)+ 5) = 2;
    v353 = v203;
    --v204;
  }
  while (v204);
  v205 = 12032;
  v353 = 12032;
  v206 = 214;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v205++, &v353)+ 5) = 2;
    v353 = v205;
    --v206;
  }
  while (v206);
  v207 = 12272;
  v353 = 12272;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v207++, &v353)+ 5) = 2;
    v353 = v207;
  }
  while (v207 != 12288);
  v208 = 12289;
  v353 = 12289;
  v209 = 4;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v208++, &v353)+ 5) = 2;
    v353 = v208;
    --v209;
  }
  while (v209);
  v353 = 12295;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x3007u, &v353)+ 5) = 1;
  v210 = 12296;
  v353 = 12296;
  v211 = 25;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v210++, &v353)+ 5) = 2;
    v353 = v210;
    --v211;
  }
  while (v211);
  v212 = 12321;
  v353 = 12321;
  v213 = 9;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v212++, &v353)+ 5) = 1;
    v353 = v212;
    --v213;
  }
  while (v213);
  v353 = 12336;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x3030u, &v353)+ 5) = 2;
  v214 = 12342;
  v353 = 12342;
  v215 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v214++, &v353)+ 5) = 2;
    v353 = v214;
    --v215;
  }
  while (v215);
  v216 = 12344;
  v353 = 12344;
  v217 = 3;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v216++, &v353)+ 5) = 1;
    v353 = v216;
    --v217;
  }
  while (v217);
  v218 = 12349;
  v353 = 12349;
  v219 = 3;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v218++, &v353)+ 5) = 2;
    v353 = v218;
    --v219;
  }
  while (v219);
  v220 = 12443;
  v353 = 12443;
  v221 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v220++, &v353)+ 5) = 2;
    v353 = v220;
    --v221;
  }
  while (v221);
  v353 = 12448;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x30A0u, &v353)+ 5) = 2;
  v353 = 12539;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x30FBu, &v353)+ 5) = 2;
  v222 = 12688;
  v353 = 12688;
  v223 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v222++, &v353)+ 5) = 2;
    v353 = v222;
    --v223;
  }
  while (v223);
  v224 = 12690;
  v353 = 12690;
  v225 = 4;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v224++, &v353)+ 5) = 1;
    v353 = v224;
    --v225;
  }
  while (v225);
  v226 = 12694;
  v353 = 12694;
  v227 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v226++, &v353)+ 5) = 2;
    v353 = v226;
    --v227;
  }
  while (v227);
  v228 = 12736;
  v353 = 12736;
  v229 = 36;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v228++, &v353)+ 5) = 2;
    v353 = v228;
    --v229;
  }
  while (v229);
  v353 = 12783;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x31EFu, &v353)+ 5) = 2;
  v230 = 12800;
  v353 = 12800;
  v231 = 31;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v230++, &v353)+ 5) = 2;
    v353 = v230;
    --v231;
  }
  while (v231);
  v232 = 12832;
  v353 = 12832;
  v233 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v232++, &v353)+ 5) = 1;
    v353 = v232;
    --v233;
  }
  while (v233);
  v234 = 12842;
  v353 = 12842;
  v235 = 30;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v234++, &v353)+ 5) = 2;
    v353 = v234;
    --v235;
  }
  while (v235);
  v236 = 12872;
  v353 = 12872;
  v237 = 8;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v236++, &v353)+ 5) = 1;
    v353 = v236;
    --v237;
  }
  while (v237);
  v353 = 12880;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0x3250u, &v353)+ 5) = 2;
  v238 = 12881;
  v353 = 12881;
  v239 = 15;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v238++, &v353)+ 5) = 1;
    v353 = v238;
    --v239;
  }
  while (v239);
  v240 = 12896;
  v353 = 12896;
  v241 = 32;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v240++, &v353)+ 5) = 2;
    v353 = v240;
    --v241;
  }
  while (v241);
  v242 = 12928;
  v353 = 12928;
  v243 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v242++, &v353)+ 5) = 1;
    v353 = v242;
    --v243;
  }
  while (v243);
  v244 = 12938;
  v353 = 12938;
  v245 = 39;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v244++, &v353)+ 5) = 2;
    v353 = v244;
    --v245;
  }
  while (v245);
  v246 = 12977;
  v353 = 12977;
  v247 = 15;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v246++, &v353)+ 5) = 1;
    v353 = v246;
    --v247;
  }
  while (v247);
  v248 = 12992;
  v353 = 12992;
  v249 = 320;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v248++, &v353)+ 5) = 2;
    v353 = v248;
    --v249;
  }
  while (v249);
  v250 = 19904;
  v353 = 19904;
  v251 = 64;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v250++, &v353)+ 5) = 2;
    v353 = v250;
    --v251;
  }
  while (v251);
  v252 = 42128;
  v353 = 42128;
  v253 = 55;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v252++, &v353)+ 5) = 2;
    v353 = v252;
    --v253;
  }
  while (v253);
  v254 = 42238;
  v353 = 42238;
  v255 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v254++, &v353)+ 5) = 2;
    v353 = v254;
    --v255;
  }
  while (v255);
  v256 = 42509;
  v353 = 42509;
  v257 = 3;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v256++, &v353)+ 5) = 2;
    v353 = v256;
    --v257;
  }
  while (v257);
  v258 = 42528;
  v353 = 42528;
  v259 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v258++, &v353)+ 5) = 1;
    v353 = v258;
    --v259;
  }
  while (v259);
  v353 = 42611;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xA673u, &v353)+ 5) = 2;
  v353 = 42622;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xA67Eu, &v353)+ 5) = 2;
  v260 = 42726;
  v353 = 42726;
  v261 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v260++, &v353)+ 5) = 1;
    v353 = v260;
    --v261;
  }
  while (v261);
  v262 = 42738;
  v353 = 42738;
  v263 = 6;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v262++, &v353)+ 5) = 2;
    v353 = v262;
    --v263;
  }
  while (v263);
  v264 = 42752;
  v353 = 42752;
  v265 = 23;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v264++, &v353)+ 5) = 2;
    v353 = v264;
    --v265;
  }
  while (v265);
  v266 = 42784;
  v353 = 42784;
  v267 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v266++, &v353)+ 5) = 2;
    v353 = v266;
    --v267;
  }
  while (v267);
  v268 = 42889;
  v353 = 42889;
  v269 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v268++, &v353)+ 5) = 2;
    v353 = v268;
    --v269;
  }
  while (v269);
  v270 = 43048;
  v353 = 43048;
  v271 = 4;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v270++, &v353)+ 5) = 2;
    v353 = v270;
    --v271;
  }
  while (v271);
  v272 = 43056;
  v353 = 43056;
  v273 = 6;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v272++, &v353)+ 5) = 1;
    v353 = v272;
    --v273;
  }
  while (v273);
  v274 = 43062;
  v353 = 43062;
  v275 = 4;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v274++, &v353)+ 5) = 2;
    v353 = v274;
    --v275;
  }
  while (v275);
  v276 = 43124;
  v353 = 43124;
  v277 = 4;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v276++, &v353)+ 5) = 2;
    v353 = v276;
    --v277;
  }
  while (v277);
  v278 = 43214;
  v353 = 43214;
  v279 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v278++, &v353)+ 5) = 2;
    v353 = v278;
    --v279;
  }
  while (v279);
  v280 = 43216;
  v353 = 43216;
  v281 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v280++, &v353)+ 5) = 1;
    v353 = v280;
    --v281;
  }
  while (v281);
  v282 = 43256;
  v353 = 43256;
  v283 = 3;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v282++, &v353)+ 5) = 2;
    v353 = v282;
    --v283;
  }
  while (v283);
  v353 = 43260;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xA8FCu, &v353)+ 5) = 2;
  v284 = 43264;
  v353 = 43264;
  v285 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v284++, &v353)+ 5) = 1;
    v353 = v284;
    --v285;
  }
  while (v285);
  v286 = 43310;
  v353 = 43310;
  v287 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v286++, &v353)+ 5) = 2;
    v353 = v286;
    --v287;
  }
  while (v287);
  v353 = 43359;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xA95Fu, &v353)+ 5) = 2;
  v288 = 43457;
  v353 = 43457;
  v289 = 13;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v288++, &v353)+ 5) = 2;
    v353 = v288;
    --v289;
  }
  while (v289);
  v290 = 43472;
  v353 = 43472;
  v291 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v290++, &v353)+ 5) = 1;
    v353 = v290;
    --v291;
  }
  while (v291);
  v292 = 43486;
  v353 = 43486;
  v293 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v292++, &v353)+ 5) = 2;
    v353 = v292;
    --v293;
  }
  while (v293);
  v294 = 43504;
  v353 = 43504;
  v295 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v294++, &v353)+ 5) = 1;
    v353 = v294;
    --v295;
  }
  while (v295);
  v296 = 43600;
  v353 = 43600;
  v297 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v296++, &v353)+ 5) = 1;
    v353 = v296;
    --v297;
  }
  while (v297);
  v298 = 43612;
  v353 = 43612;
  v299 = 4;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v298++, &v353)+ 5) = 2;
    v353 = v298;
    --v299;
  }
  while (v299);
  v300 = 43639;
  v353 = 43639;
  v301 = 3;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v300++, &v353)+ 5) = 2;
    v353 = v300;
    --v301;
  }
  while (v301);
  v302 = 43742;
  v353 = 43742;
  v303 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v302++, &v353)+ 5) = 2;
    v353 = v302;
    --v303;
  }
  while (v303);
  v304 = 43760;
  v353 = 43760;
  v305 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v304++, &v353)+ 5) = 2;
    v353 = v304;
    --v305;
  }
  while (v305);
  v353 = 43867;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xAB5Bu, &v353)+ 5) = 2;
  v306 = 43882;
  v353 = 43882;
  v307 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v306++, &v353)+ 5) = 2;
    v353 = v306;
    --v307;
  }
  while (v307);
  v353 = 44011;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xABEBu, &v353)+ 5) = 2;
  v308 = 44016;
  v353 = 44016;
  v309 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v308++, &v353)+ 5) = 1;
    v353 = v308;
    --v309;
  }
  while (v309);
  v310 = 63475;
  v353 = 63475;
  v311 = 125;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v310++, &v353)+ 5) = 2;
    v353 = v310;
    --v311;
  }
  while (v311);
  v312 = 63616;
  v353 = 63616;
  v313 = 2;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v312++, &v353)+ 5) = 2;
    v353 = v312;
    --v313;
  }
  while (v313);
  v353 = 63619;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xF883u, &v353)+ 5) = 2;
  v353 = 63648;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xF8A0u, &v353)+ 5) = 2;
  v314 = 63649;
  v353 = 63649;
  v315 = 7;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v314++, &v353)+ 5) = 1;
    v353 = v314;
    --v315;
  }
  while (v315);
  v316 = 63656;
  v353 = 63656;
  v317 = 16;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v316++, &v353)+ 5) = 2;
    v353 = v316;
    --v317;
  }
  while (v317);
  v318 = 63673;
  v353 = 63673;
  v319 = 8;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v318++, &v353)+ 5) = 2;
    v353 = v318;
    --v319;
  }
  while (v319);
  v320 = 63703;
  v353 = 63703;
  v321 = 41;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v320++, &v353)+ 5) = 2;
    v353 = v320;
    --v321;
  }
  while (v321);
  v353 = 64297;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xFB29u, &v353)+ 5) = 2;
  v322 = 64434;
  v353 = 64434;
  v323 = 17;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v322++, &v353)+ 5) = 2;
    v353 = v322;
    --v323;
  }
  while (v323);
  v324 = 64830;
  v353 = 64830;
  v325 = 18;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v324++, &v353)+ 5) = 2;
    v353 = v324;
    --v325;
  }
  while (v325);
  v353 = 64975;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(0xFDCFu, &v353)+ 5) = 2;
  v326 = 65020;
  v353 = 65020;
  v327 = 4;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v326++, &v353)+ 5) = 2;
    v353 = v326;
    --v327;
  }
  while (v327);
  v328 = 65040;
  v353 = 65040;
  v329 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v328++, &v353)+ 5) = 2;
    v353 = v328;
    --v329;
  }
  while (v329);
  v330 = 65072;
  v353 = 65072;
  v331 = 35;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v330++, &v353)+ 5) = 2;
    v353 = v330;
    --v331;
  }
  while (v331);
  v332 = 65108;
  v353 = 65108;
  v333 = 19;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v332++, &v353)+ 5) = 2;
    v353 = v332;
    --v333;
  }
  while (v333);
  v334 = 65128;
  v353 = 65128;
  v335 = 4;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v334++, &v353)+ 5) = 2;
    v353 = v334;
    --v335;
  }
  while (v335);
  v336 = 65281;
  v353 = 65281;
  v337 = 15;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v336++, &v353)+ 5) = 2;
    v353 = v336;
    --v337;
  }
  while (v337);
  v338 = 65296;
  v353 = 65296;
  v339 = 10;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v338++, &v353)+ 5) = 1;
    v353 = v338;
    --v339;
  }
  while (v339);
  v340 = 65306;
  v353 = 65306;
  v341 = 7;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v340++, &v353)+ 5) = 2;
    v353 = v340;
    --v341;
  }
  while (v341);
  v342 = 65339;
  v353 = 65339;
  v343 = 6;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v342++, &v353)+ 5) = 2;
    v353 = v342;
    --v343;
  }
  while (v343);
  v344 = 65371;
  v353 = 65371;
  v345 = 11;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v344++, &v353)+ 5) = 2;
    v353 = v344;
    --v345;
  }
  while (v345);
  v346 = 65504;
  v353 = 65504;
  v347 = 7;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v346++, &v353)+ 5) = 2;
    v353 = v346;
    --v347;
  }
  while (v347);
  v348 = 65512;
  v353 = 65512;
  v349 = 7;
  do
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v348++, &v353)+ 5) = 2;
    v353 = v348;
    --v349;
  }
  while (v349);
  v350 = 65532;
  v353 = 65532;
  v351 = 2;
  do
  {
    result = std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(v350, &v353);
    *((_DWORD *)result + 5) = 2;
    v353 = ++v350;
    --v351;
  }
  while (v351);
  return result;
}

uint64_t std::unordered_map<char32_t,MeCab::UnicodeCharCategory>::~unordered_map[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t const&>,std::tuple<>>(unsigned int a1, _DWORD *a2)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  void **v7;
  _QWORD *v8;
  unint64_t v9;
  float v10;
  _BOOL8 v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;

  v4 = a1;
  v5 = *((_QWORD *)&MeCab::new_char_category_map(void)::m + 1);
  if (*((_QWORD *)&MeCab::new_char_category_map(void)::m + 1))
  {
    v6 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&MeCab::new_char_category_map(void)::m + 8));
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v2 = a1;
      if (*((_QWORD *)&MeCab::new_char_category_map(void)::m + 1) <= (unint64_t)a1)
        v2 = (unint64_t)a1 % *((_QWORD *)&MeCab::new_char_category_map(void)::m + 1);
    }
    else
    {
      v2 = (DWORD2(MeCab::new_char_category_map(void)::m) - 1) & a1;
    }
    v7 = *(void ***)(MeCab::new_char_category_map(void)::m + 8 * v2);
    if (v7)
    {
      v8 = *v7;
      if (*v7)
      {
        do
        {
          v9 = v8[1];
          if (v9 == a1)
          {
            if (*((_DWORD *)v8 + 4) == a1)
              return v8;
          }
          else
          {
            if (v6.u32[0] > 1uLL)
            {
              if (v9 >= *((_QWORD *)&MeCab::new_char_category_map(void)::m + 1))
                v9 %= *((_QWORD *)&MeCab::new_char_category_map(void)::m + 1);
            }
            else
            {
              v9 &= *((_QWORD *)&MeCab::new_char_category_map(void)::m + 1) - 1;
            }
            if (v9 != v2)
              break;
          }
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
    }
  }
  v8 = operator new(0x18uLL);
  *v8 = 0;
  v8[1] = v4;
  *((_DWORD *)v8 + 4) = *a2;
  *((_DWORD *)v8 + 5) = 0;
  v10 = (float)(unint64_t)(qword_25453B1A8 + 1);
  if (!v5 || (float)(*(float *)&dword_25453B1B0 * (float)v5) < v10)
  {
    v11 = 1;
    if (v5 >= 3)
      v11 = (v5 & (v5 - 1)) != 0;
    v12 = v11 | (2 * v5);
    v13 = vcvtps_u32_f32(v10 / *(float *)&dword_25453B1B0);
    if (v12 <= v13)
      v14 = v13;
    else
      v14 = v12;
    std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__rehash<true>(v14);
    v5 = *((_QWORD *)&MeCab::new_char_category_map(void)::m + 1);
    if ((v5 & (v5 - 1)) != 0)
    {
      if (*((_QWORD *)&MeCab::new_char_category_map(void)::m + 1) <= v4)
        v2 = v4 % *((_QWORD *)&MeCab::new_char_category_map(void)::m + 1);
      else
        v2 = v4;
    }
    else
    {
      v2 = (DWORD2(MeCab::new_char_category_map(void)::m) - 1) & v4;
    }
  }
  v15 = MeCab::new_char_category_map(void)::m;
  v16 = *(_QWORD **)(MeCab::new_char_category_map(void)::m + 8 * v2);
  if (v16)
  {
    *v8 = *v16;
LABEL_38:
    *v16 = v8;
    goto LABEL_39;
  }
  *v8 = qword_25453B1A0;
  qword_25453B1A0 = (uint64_t)v8;
  *(_QWORD *)(v15 + 8 * v2) = &qword_25453B1A0;
  if (*v8)
  {
    v17 = *(_QWORD *)(*v8 + 8);
    if ((v5 & (v5 - 1)) != 0)
    {
      if (v17 >= v5)
        v17 %= v5;
    }
    else
    {
      v17 &= v5 - 1;
    }
    v16 = (_QWORD *)(MeCab::new_char_category_map(void)::m + 8 * v17);
    goto LABEL_38;
  }
LABEL_39:
  ++qword_25453B1A8;
  return v8;
}

void sub_2083BCC5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__rehash<true>(size_t __n)
{
  size_t prime;
  size_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD **v6;
  size_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t v11;
  _QWORD *i;
  size_t v13;
  void *v14;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v2 = *((_QWORD *)&MeCab::new_char_category_map(void)::m + 1);
  if (prime <= *((_QWORD *)&MeCab::new_char_category_map(void)::m + 1))
  {
    if (prime >= *((_QWORD *)&MeCab::new_char_category_map(void)::m + 1))
      return;
    v9 = vcvtps_u32_f32((float)(unint64_t)qword_25453B1A8 / *(float *)&dword_25453B1B0);
    if (*((_QWORD *)&MeCab::new_char_category_map(void)::m + 1) < 3uLL
      || (v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&MeCab::new_char_category_map(void)::m + 8)),
          v10.i16[0] = vaddlv_u8(v10),
          v10.u32[0] > 1uLL))
    {
      v9 = std::__next_prime(v9);
    }
    else
    {
      v11 = 1 << -(char)__clz(v9 - 1);
      if (v9 >= 2)
        v9 = v11;
    }
    if (prime <= v9)
      prime = v9;
    if (prime >= v2)
      return;
    if (!prime)
    {
      v14 = (void *)MeCab::new_char_category_map(void)::m;
      *(_QWORD *)&MeCab::new_char_category_map(void)::m = 0;
      if (v14)
        operator delete(v14);
      *((_QWORD *)&MeCab::new_char_category_map(void)::m + 1) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v3 = operator new(8 * prime);
  v4 = (void *)MeCab::new_char_category_map(void)::m;
  *(_QWORD *)&MeCab::new_char_category_map(void)::m = v3;
  if (v4)
    operator delete(v4);
  v5 = 0;
  *((_QWORD *)&MeCab::new_char_category_map(void)::m + 1) = prime;
  do
    *(_QWORD *)(MeCab::new_char_category_map(void)::m + 8 * v5++) = 0;
  while (prime != v5);
  v6 = (_QWORD **)qword_25453B1A0;
  if (qword_25453B1A0)
  {
    v7 = *(_QWORD *)(qword_25453B1A0 + 8);
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      if (v7 >= prime)
        v7 %= prime;
    }
    else
    {
      v7 &= prime - 1;
    }
    *(_QWORD *)(MeCab::new_char_category_map(void)::m + 8 * v7) = &qword_25453B1A0;
    for (i = *v6; i; v7 = v13)
    {
      v13 = i[1];
      if (v8.u32[0] > 1uLL)
      {
        if (v13 >= prime)
          v13 %= prime;
      }
      else
      {
        v13 &= prime - 1;
      }
      if (v13 != v7)
      {
        if (!*(_QWORD *)(MeCab::new_char_category_map(void)::m + 8 * v13))
        {
          *(_QWORD *)(MeCab::new_char_category_map(void)::m + 8 * v13) = v6;
          goto LABEL_31;
        }
        *v6 = (_QWORD *)*i;
        *i = **(_QWORD **)(MeCab::new_char_category_map(void)::m + 8 * v13);
        **(_QWORD **)(MeCab::new_char_category_map(void)::m + 8 * v13) = i;
        i = v6;
      }
      v13 = v7;
LABEL_31:
      v6 = (_QWORD **)i;
      i = (_QWORD *)*i;
    }
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__emplace_unique_key_args<char32_t,std::piecewise_construct_t const&,std::tuple<char32_t &&>,std::tuple<>>(unsigned int a1, _DWORD *a2)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  void **v7;
  _QWORD *v8;
  unint64_t v9;
  float v10;
  _BOOL8 v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;

  v4 = a1;
  v5 = *((_QWORD *)&MeCab::new_char_category_map(void)::m + 1);
  if (*((_QWORD *)&MeCab::new_char_category_map(void)::m + 1))
  {
    v6 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&MeCab::new_char_category_map(void)::m + 8));
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v2 = a1;
      if (*((_QWORD *)&MeCab::new_char_category_map(void)::m + 1) <= (unint64_t)a1)
        v2 = (unint64_t)a1 % *((_QWORD *)&MeCab::new_char_category_map(void)::m + 1);
    }
    else
    {
      v2 = (DWORD2(MeCab::new_char_category_map(void)::m) - 1) & a1;
    }
    v7 = *(void ***)(MeCab::new_char_category_map(void)::m + 8 * v2);
    if (v7)
    {
      v8 = *v7;
      if (*v7)
      {
        do
        {
          v9 = v8[1];
          if (v9 == a1)
          {
            if (*((_DWORD *)v8 + 4) == a1)
              return v8;
          }
          else
          {
            if (v6.u32[0] > 1uLL)
            {
              if (v9 >= *((_QWORD *)&MeCab::new_char_category_map(void)::m + 1))
                v9 %= *((_QWORD *)&MeCab::new_char_category_map(void)::m + 1);
            }
            else
            {
              v9 &= *((_QWORD *)&MeCab::new_char_category_map(void)::m + 1) - 1;
            }
            if (v9 != v2)
              break;
          }
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
    }
  }
  v8 = operator new(0x18uLL);
  *v8 = 0;
  v8[1] = v4;
  *((_DWORD *)v8 + 4) = *a2;
  *((_DWORD *)v8 + 5) = 0;
  v10 = (float)(unint64_t)(qword_25453B1A8 + 1);
  if (!v5 || (float)(*(float *)&dword_25453B1B0 * (float)v5) < v10)
  {
    v11 = 1;
    if (v5 >= 3)
      v11 = (v5 & (v5 - 1)) != 0;
    v12 = v11 | (2 * v5);
    v13 = vcvtps_u32_f32(v10 / *(float *)&dword_25453B1B0);
    if (v12 <= v13)
      v14 = v13;
    else
      v14 = v12;
    std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::__rehash<true>(v14);
    v5 = *((_QWORD *)&MeCab::new_char_category_map(void)::m + 1);
    if ((v5 & (v5 - 1)) != 0)
    {
      if (*((_QWORD *)&MeCab::new_char_category_map(void)::m + 1) <= v4)
        v2 = v4 % *((_QWORD *)&MeCab::new_char_category_map(void)::m + 1);
      else
        v2 = v4;
    }
    else
    {
      v2 = (DWORD2(MeCab::new_char_category_map(void)::m) - 1) & v4;
    }
  }
  v15 = MeCab::new_char_category_map(void)::m;
  v16 = *(_QWORD **)(MeCab::new_char_category_map(void)::m + 8 * v2);
  if (v16)
  {
    *v8 = *v16;
LABEL_38:
    *v16 = v8;
    goto LABEL_39;
  }
  *v8 = qword_25453B1A0;
  qword_25453B1A0 = (uint64_t)v8;
  *(_QWORD *)(v15 + 8 * v2) = &qword_25453B1A0;
  if (*v8)
  {
    v17 = *(_QWORD *)(*v8 + 8);
    if ((v5 & (v5 - 1)) != 0)
    {
      if (v17 >= v5)
        v17 %= v5;
    }
    else
    {
      v17 &= v5 - 1;
    }
    v16 = (_QWORD *)(MeCab::new_char_category_map(void)::m + 8 * v17);
    goto LABEL_38;
  }
LABEL_39:
  ++qword_25453B1A8;
  return v8;
}

void sub_2083BD094(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::__unordered_map_hasher<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::hash<char32_t>,std::equal_to<char32_t>,true>,std::__unordered_map_equal<char32_t,std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>,std::equal_to<char32_t>,std::hash<char32_t>,true>,std::allocator<std::__hash_value_type<char32_t,MeCab::UnicodeCharCategory>>>::find<char32_t>(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

BOOL MeCab::NBestGenerator::set(uint64_t *a1, uint64_t a2)
{
  void *v4;
  char **v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char v24;

  v5 = (char **)(a1 + 1);
  v4 = (void *)a1[1];
  v5[8] = 0;
  v5[9] = 0;
  if (v4)
  {
    a1[2] = (uint64_t)v4;
    operator delete(v4);
  }
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  if (a2)
  {
    v6 = a2;
    do
    {
      v7 = v6;
      v6 = *(_QWORD *)(v6 + 8);
    }
    while (v6);
    MeCab::FreeList<MeCab::NBestGenerator::QueueElement>::alloc(v5 + 4);
    v9 = v8;
    *v8 = v7;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = 0;
    v11 = (char *)a1[2];
    v10 = a1[3];
    if ((unint64_t)v11 >= v10)
    {
      v13 = (v11 - *v5) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<MeCab::NBestGenerator::QueueElement *>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)*v5;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>((uint64_t)(a1 + 3), v16);
      else
        v17 = 0;
      v18 = &v17[8 * v13];
      v19 = &v17[8 * v16];
      *(_QWORD *)v18 = v9;
      v12 = (uint64_t)(v18 + 8);
      v21 = (char *)a1[1];
      v20 = (char *)a1[2];
      if (v20 != v21)
      {
        do
        {
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 8;
          *((_QWORD *)v18 - 1) = v22;
          v18 -= 8;
        }
        while (v20 != v21);
        v20 = *v5;
      }
      a1[1] = (uint64_t)v18;
      a1[2] = v12;
      a1[3] = (uint64_t)v19;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *(_QWORD *)v11 = v8;
      v12 = (uint64_t)(v11 + 8);
    }
    a1[2] = v12;
    std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MeCab::NBestGenerator::QueueElementComp &,std::__wrap_iter<MeCab::NBestGenerator::QueueElement **>>(a1[1], v12, (uint64_t)&v24, (v12 - a1[1]) >> 3);
  }
  return a2 != 0;
}

double MeCab::FreeList<MeCab::NBestGenerator::QueueElement>::alloc(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  double result;

  v2 = a1[5];
  v3 = a1[4];
  if (v3 == a1[6])
  {
    v3 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  v4 = a1[1];
  v5 = (char **)(a1 + 1);
  if (v2 == (a1[2] - v4) >> 3)
  {
    v6 = operator new[]();
    v7 = a1[3];
    v8 = (uint64_t *)a1[2];
    if ((unint64_t)v8 >= v7)
    {
      v10 = ((char *)v8 - *v5) >> 3;
      if ((unint64_t)(v10 + 1) >> 61)
        std::vector<MeCab::NBestGenerator::QueueElement *>::__throw_length_error[abi:ne180100]();
      v11 = v7 - (_QWORD)*v5;
      v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1))
        v12 = v10 + 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>((uint64_t)(a1 + 3), v13);
      else
        v14 = 0;
      v15 = (uint64_t *)&v14[8 * v10];
      v16 = &v14[8 * v13];
      *v15 = v6;
      v9 = v15 + 1;
      v18 = (char *)a1[1];
      v17 = (char *)a1[2];
      if (v17 != v18)
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *--v15 = v19;
        }
        while (v17 != v18);
        v17 = *v5;
      }
      a1[1] = v15;
      a1[2] = v9;
      a1[3] = v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *v8 = v6;
      v9 = v8 + 1;
    }
    a1[2] = v9;
    v4 = a1[1];
    v3 = a1[4];
    v2 = a1[5];
  }
  v20 = *(_QWORD *)(v4 + 8 * v2);
  a1[4] = v3 + 1;
  v21 = (_OWORD *)(v20 + 32 * v3);
  result = 0.0;
  *v21 = 0u;
  v21[1] = 0u;
  return result;
}

uint64_t MeCab::NBestGenerator::next(MeCab::NBestGenerator *this)
{
  char **v2;
  _QWORD *v3;
  char *v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t i;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v44;
  char v45;
  char v46;

  v2 = (char **)((char *)this + 8);
  v3 = (_QWORD *)((char *)this + 40);
  v4 = (char *)this + 24;
  while (1)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    v6 = (char *)*((_QWORD *)this + 2);
    if (v5 == v6)
      return 0;
    v7 = *(_QWORD **)v5;
    if (v6 - v5 >= 9)
    {
      v8 = 0;
      v9 = (unint64_t)(v6 - v5) >> 3;
      v10 = v9 - 2;
      if (v9 < 2)
        v10 = v9 - 1;
      v11 = v10 >> 1;
      v12 = (char *)*((_QWORD *)this + 1);
      do
      {
        v13 = &v12[8 * v8];
        v16 = *((_QWORD *)v13 + 1);
        v14 = v13 + 8;
        v15 = v16;
        v17 = (2 * v8) | 1;
        v18 = 2 * v8 + 2;
        if (v18 < (uint64_t)v9 && *(_QWORD *)(v15 + 16) > *(_QWORD *)(*((_QWORD *)v14 + 1) + 16))
        {
          v15 = *((_QWORD *)v14 + 1);
          v14 += 8;
          v17 = v18;
        }
        *(_QWORD *)v12 = v15;
        v12 = v14;
        v8 = v17;
      }
      while (v17 <= v11);
      v19 = v6 - 8;
      if (v19 == v14)
      {
        *(_QWORD *)v14 = v7;
      }
      else
      {
        *(_QWORD *)v14 = *(_QWORD *)v19;
        *(_QWORD *)v19 = v7;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MeCab::NBestGenerator::QueueElementComp &,std::__wrap_iter<MeCab::NBestGenerator::QueueElement **>>((uint64_t)v5, (uint64_t)(v14 + 8), (uint64_t)&v45, (v14 + 8 - v5) >> 3);
      }
    }
    *((_QWORD *)this + 2) -= 8;
    v20 = *v7;
    v21 = *(unsigned __int8 *)(*v7 + 91);
    if (v21 != 2)
    {
      for (i = *(_QWORD *)(v20 + 40); i; i = *(_QWORD *)(i + 16))
      {
        MeCab::FreeList<MeCab::NBestGenerator::QueueElement>::alloc(v3);
        v27 = v26;
        v28 = *(_QWORD *)(i + 8);
        v29 = *(int *)(i + 24);
        v26[3] = v7[3] + v29;
        v30 = *(_QWORD *)(v28 + 96) + v29 + v7[3];
        v26[1] = v7;
        v26[2] = v30;
        *v26 = v28;
        v32 = (char *)*((_QWORD *)this + 2);
        v31 = *((_QWORD *)this + 3);
        if ((unint64_t)v32 >= v31)
        {
          v34 = (v32 - *v2) >> 3;
          if ((unint64_t)(v34 + 1) >> 61)
            std::vector<MeCab::NBestGenerator::QueueElement *>::__throw_length_error[abi:ne180100]();
          v35 = v31 - (_QWORD)*v2;
          v36 = v35 >> 2;
          if (v35 >> 2 <= (unint64_t)(v34 + 1))
            v36 = v34 + 1;
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
            v37 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v37 = v36;
          if (v37)
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>((uint64_t)v4, v37);
          else
            v38 = 0;
          v39 = &v38[8 * v34];
          *(_QWORD *)v39 = v27;
          v33 = (uint64_t)(v39 + 8);
          v41 = (char *)*((_QWORD *)this + 1);
          v40 = (char *)*((_QWORD *)this + 2);
          if (v40 != v41)
          {
            do
            {
              v42 = *((_QWORD *)v40 - 1);
              v40 -= 8;
              *((_QWORD *)v39 - 1) = v42;
              v39 -= 8;
            }
            while (v40 != v41);
            v40 = *v2;
          }
          *((_QWORD *)this + 1) = v39;
          *((_QWORD *)this + 2) = v33;
          *((_QWORD *)this + 3) = &v38[8 * v37];
          if (v40)
            operator delete(v40);
        }
        else
        {
          *(_QWORD *)v32 = v26;
          v33 = (uint64_t)(v32 + 8);
        }
        *((_QWORD *)this + 2) = v33;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MeCab::NBestGenerator::QueueElementComp &,std::__wrap_iter<MeCab::NBestGenerator::QueueElement **>>(*((_QWORD *)this + 1), v33, (uint64_t)&v46, (v33 - *((_QWORD *)this + 1)) >> 3);
      }
      goto LABEL_37;
    }
    v22 = v7[1];
    if (!v22)
      return *v7;
    v23 = (_QWORD *)*v7;
    do
    {
      v24 = *(_QWORD **)v22;
      v23[1] = *(_QWORD *)v22;
      *v24 = v23;
      v22 = *(_QWORD *)(v22 + 8);
      v23 = v24;
    }
    while (v22);
    v44 = v20;
LABEL_37:
    if (v21 == 2)
      return v44;
  }
}

void std::vector<MeCab::NBestGenerator::QueueElement *>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MeCab::NBestGenerator::QueueElementComp &,std::__wrap_iter<MeCab::NBestGenerator::QueueElement **>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (_QWORD *)(result + 8 * v4);
    v6 = *v5;
    v9 = *(_QWORD *)(a2 - 8);
    v7 = (_QWORD *)(a2 - 8);
    v8 = v9;
    v10 = *(_QWORD *)(v9 + 16);
    if (*(_QWORD *)(*v5 + 16) > v10)
    {
      do
      {
        v11 = v5;
        *v7 = v6;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (_QWORD *)(result + 8 * v4);
        v6 = *v5;
        v7 = v11;
      }
      while (*(_QWORD *)(*v5 + 16) > v10);
      *v11 = v8;
    }
  }
  return result;
}

uint64_t MeCab::LBFGS::clear(MeCab::LBFGS *this)
{
  uint64_t result;

  *(_OWORD *)((char *)this + 36) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 10) = *((_QWORD *)this + 9);
  *((_QWORD *)this + 13) = *((_QWORD *)this + 12);
  result = *((_QWORD *)this + 15);
  if (result)
    result = MEMORY[0x20BD0639C](result, 0x1000C40DF44A08DLL);
  *((_QWORD *)this + 15) = 0;
  return result;
}

void MeCab::LBFGS::lbfgs_optimize(MeCab::LBFGS *this, int a2, int a3, double *a4, double a5, double *a6, double *__b, double *a8, char a9, double a10, int *a11)
{
  int *v18;
  double *v19;
  uint64_t v20;
  int v21;
  double v22;
  int v23;
  uint64_t v24;
  double *v25;
  const double *v26;
  double *v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  double *v33;
  double v34;
  int v35;
  int v36;
  int v37;
  double *v38;
  double *v39;
  uint64_t v40;
  uint64_t v41;
  double *v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  double *v49;
  double v50;
  int v51;
  int v52;
  uint64_t v53;
  double *v54;
  double *v55;
  double v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  double v65;
  uint64_t v66;
  double *v67;
  double v68;
  double v69;
  int v70;
  double v71;
  double v72;
  double *v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  double *v77;
  double *v78;
  double v79;
  int v80;
  int v81;
  int v82;
  int v83;
  double v84;
  uint64_t v85;
  double *v86;
  double v87;
  double v88;
  int v89;
  double v90;
  double *v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  double *v96;
  double v97;
  uint64_t v98;
  const double *v99;
  double *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  double *v104;
  double *v105;
  uint64_t v106;
  double v107;
  double *v108;
  const double *v109;
  double v110;
  double v111;
  double v112;
  uint64_t v113;
  double *v114;
  double *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  double v120;
  int v121;
  double v122;
  uint64_t v123;
  double *v124;
  const double *v125;
  double v126;
  double v127;
  double v128;
  _DWORD *v129;
  double v130;
  double v131;
  double v132;
  BOOL v133;
  int v135;
  int v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  uint64_t v146;
  char v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  uint64_t v153;
  double *v154;
  const double *v155;
  double *v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  BOOL v169;
  double v170;
  BOOL v171;
  double v172;
  double v173;
  double v174;
  double v175;
  BOOL v176;
  double v177;
  uint64_t v178;
  double *v179;
  double *v180;
  double v181;
  double v182;
  double v183;
  int v184;
  int v185;
  uint64_t v186;
  int v187;
  int v188;
  const double *v189;
  double *v190;
  double v191;
  double v192;
  double v193;
  int v194;
  double v195;
  double v196;
  uint64_t v197;
  uint64_t v198;
  double *v199;
  double v200;
  double *v201;
  double v202;
  int v203;
  _QWORD *v204;
  const std::locale::facet *v205;
  int *v206;
  int *v207;
  double *v208;
  double *v209;
  double v211;
  double v212;
  double v213;
  std::locale v214;

  v18 = a11;
  v19 = a8 - 1;
  v208 = __b;
  v209 = a4;
  if (!*((_QWORD *)this + 15))
  {
    v20 = operator new();
    __b = v208;
    a4 = v209;
    v18 = a11;
    *(_QWORD *)v20 = 0;
    *(_DWORD *)(v20 + 8) = 0;
    *(_OWORD *)(v20 + 16) = 0u;
    *(_OWORD *)(v20 + 32) = 0u;
    *(_OWORD *)(v20 + 48) = 0u;
    *(_OWORD *)(v20 + 64) = 0u;
    *(_OWORD *)(v20 + 80) = 0u;
    *(_OWORD *)(v20 + 96) = 0u;
    *(_QWORD *)(v20 + 112) = 0;
    *((_QWORD *)this + 15) = v20;
  }
  v207 = v18;
  v21 = *v18;
  v22 = 0.0;
  if (*v18 == 2)
    goto LABEL_24;
  if (v21 == 1)
    goto LABEL_77;
  if (!v21)
  {
    *((_DWORD *)this + 6) = 0;
    if (a2 <= 0)
    {
      v35 = a2 + 2 * a3;
      *((_DWORD *)this + 10) = v35;
      *((_DWORD *)this + 12) = v35 + a3 * a2;
      if (!a2)
      {
        v32 = 0.0;
        a4 = v209;
LABEL_14:
        *((double *)this + 8) = 1.0 / sqrt(v32);
        goto LABEL_15;
      }
    }
    else
    {
      memset_pattern16(__b, &unk_2083DD800, 8 * a2);
      __b = v208;
      v23 = a2 + 2 * a3;
      *((_DWORD *)this + 10) = v23;
      *((_DWORD *)this + 12) = v23 + a3 * a2;
      v24 = (a2 + 1) - 1;
      v25 = &a8[v23];
      v26 = a6;
      v27 = v208;
      do
      {
        v28 = *v26++;
        v29 = v28;
        v30 = *v27++;
        *v25++ = -(v29 * v30);
        --v24;
      }
      while (v24);
    }
    v31 = 8 * a2;
    v32 = 0.0;
    v33 = a6;
    a4 = v209;
    do
    {
      v34 = *v33++;
      v32 = v32 + v34 * v34;
      v31 -= 8;
    }
    while (v31);
    goto LABEL_14;
  }
  while (1)
  {
LABEL_15:
    v36 = *((_DWORD *)this + 8);
    *((_QWORD *)this + 4) = (v36 + 1);
    if (v36)
    {
      v22 = 0.0;
      if (a2)
      {
        v37 = *((_DWORD *)this + 7) + 1;
        v38 = &v19[v37 + *((_DWORD *)this + 12)];
        v39 = &v19[*((_DWORD *)this + 10) + v37];
        v40 = 8 * a2;
        v41 = v40;
        v42 = v38;
        do
        {
          v43 = *v42++;
          v44 = v43;
          v45 = *v39++;
          v22 = v22 + v44 * v45;
          v41 -= 8;
        }
        while (v41);
        v46 = 0.0;
        do
        {
          v47 = *v38++;
          v46 = v46 + v47 * v47;
          v40 -= 8;
        }
        while (v40);
        if (a2 >= 1)
        {
          v48 = (a2 + 1) - 1;
          v49 = __b;
          v50 = v22 / v46;
          do
          {
            *v49++ = v50;
            --v48;
          }
          while (v48);
        }
      }
LABEL_24:
      v51 = *((_DWORD *)this + 6);
      if (v51)
        v52 = *((_DWORD *)this + 6);
      else
        v52 = a3;
      v19[v52 + a2] = 1.0 / v22;
      if (a2 >= 1)
      {
        v53 = (a2 + 1) - 1;
        v54 = a6;
        v55 = a8;
        do
        {
          v56 = *v54++;
          *v55++ = -v56;
          --v53;
        }
        while (v53);
      }
      v57 = *((_DWORD *)this + 8);
      v58 = v57 - 1;
      if (v57 - 1 >= a3)
        v58 = a3;
      if (v58 < 1)
      {
        v62 = v51;
      }
      else
      {
        v59 = *((_DWORD *)this + 12);
        v60 = *((_DWORD *)this + 10) + 1;
        v61 = 1;
        v62 = v51;
        do
        {
          if (v62)
            v63 = v62;
          else
            v63 = a3;
          v62 = v63 - 1;
          v64 = (v63 - 1) * a2;
          if (a2)
          {
            v65 = 0.0;
            v66 = 8 * a2;
            v67 = a8;
            do
            {
              v68 = v67[v60 - 1 + v64];
              v69 = *v67++;
              v65 = v65 + v68 * v69;
              v66 -= 8;
            }
            while (v66);
          }
          else
          {
            v65 = 0.0;
          }
          v70 = v64 + v59;
          v71 = v19[v63 + a2];
          v19[a3 + a2 + v63] = v65 * v71;
          if (a2 >= 1)
          {
            v72 = -(v65 * v71);
            v73 = a8;
            v74 = a2;
            do
            {
              *v73 = *v73 + v72 * v73[v70];
              ++v73;
              --v74;
            }
            while (v74);
          }
          v75 = v61++ == v58;
        }
        while (!v75);
        *((_DWORD *)this + 5) = v70;
      }
      if (a2 >= 1)
      {
        v76 = (a2 + 1) - 1;
        v77 = __b;
        v78 = a8;
        do
        {
          v79 = *v77++;
          *v78 = v79 * *v78;
          ++v78;
          --v76;
        }
        while (v76);
      }
      if (v58 >= 1)
      {
        v80 = *((_DWORD *)this + 10);
        v81 = *((_DWORD *)this + 12) + 1;
        v82 = 1;
        do
        {
          v83 = v62 * a2;
          if (a2)
          {
            v84 = 0.0;
            v85 = 8 * a2;
            v86 = a8;
            do
            {
              v87 = v86[v81 - 1 + v83];
              v88 = *v86++;
              v84 = v84 + v87 * v88;
              v85 -= 8;
            }
            while (v85);
          }
          else
          {
            v84 = 0.0;
          }
          v89 = v83 + v80;
          if (a2 >= 1)
          {
            v90 = v19[a2 + 1 + a3 + v62] - v84 * v19[v62 + 1 + a2];
            v91 = a8;
            v92 = a2;
            do
            {
              *v91 = *v91 + v90 * v91[v89];
              ++v91;
              --v92;
            }
            while (v92);
          }
          if (v62 + 1 == a3)
            v62 = 0;
          else
            ++v62;
          v75 = v82++ == v58;
        }
        while (!v75);
        *((_DWORD *)this + 3) = v89;
      }
      if (a2 >= 1)
      {
        v93 = *((_DWORD *)this + 10) + v51 * a2;
        v94 = (a2 + 1) - 1;
        v95 = v93 + 1;
        v96 = a8;
        do
        {
          v97 = *v96++;
          v19[v95++] = v97;
          --v94;
        }
        while (v94);
      }
      *((_DWORD *)this + 4) = 0;
      *((_QWORD *)this + 7) = 0x3FF0000000000000;
      if (v57 != 1)
        goto LABEL_74;
    }
    else
    {
      *((_DWORD *)this + 4) = 0;
      *((_QWORD *)this + 7) = 0x3FF0000000000000;
    }
    *((_QWORD *)this + 7) = *((_QWORD *)this + 8);
LABEL_74:
    if (a2 >= 1)
    {
      v98 = (a2 + 1) - 1;
      v99 = a6;
      v100 = a8;
      do
      {
        v101 = *(_QWORD *)v99++;
        *(_QWORD *)v100++ = v101;
        --v98;
      }
      while (v98);
    }
LABEL_77:
    v102 = *((_QWORD *)this + 15);
    v103 = *((_DWORD *)this + 9);
    v104 = &v19[*((_DWORD *)this + 10) + 1 + *((_DWORD *)this + 6) * a2];
    v105 = (double *)((char *)this + 56);
    if (v103 != -1)
    {
      *(_DWORD *)v102 = 1;
      if (a2 < 1)
        goto LABEL_199;
      if (*v105 <= 0.0)
        goto LABEL_119;
      v106 = 8 * a2;
      v107 = 0.0;
      v108 = v104;
      v109 = a6;
      do
      {
        v110 = *v109++;
        v111 = v110;
        v112 = *v108++;
        v107 = v107 + v111 * v112;
        v106 -= 8;
      }
      while (v106);
      *(double *)(v102 + 24) = v107;
      if (v107 >= 0.0)
      {
LABEL_119:
        v103 = *((_DWORD *)this + 9);
        goto LABEL_199;
      }
      *(_QWORD *)(v102 + 4) = 1;
      *((_DWORD *)this + 4) = 0;
      *(double *)(v102 + 16) = a5;
      *(double *)(v102 + 32) = v107 * 0.0001;
      *(_OWORD *)(v102 + 40) = xmmword_2083DD7F0;
      v113 = (a2 + 1) - 1;
      v114 = a4;
      v115 = __b;
      do
      {
        v116 = *(_QWORD *)v114++;
        *(_QWORD *)v115++ = v116;
        --v113;
      }
      while (v113);
      v118 = *(_QWORD *)(v102 + 16);
      v117 = *(_QWORD *)(v102 + 24);
      *(_QWORD *)(v102 + 56) = 0;
      *(_QWORD *)(v102 + 64) = v118;
      *(_QWORD *)(v102 + 72) = v117;
      *(_QWORD *)(v102 + 80) = 0;
      *(_QWORD *)(v102 + 88) = v118;
      *(_QWORD *)(v102 + 96) = v117;
      v119 = 0.0;
      v120 = 0.0;
      if (!*(_DWORD *)(v102 + 8))
        goto LABEL_136;
      goto LABEL_129;
    }
    *((_DWORD *)this + 9) = 0;
    v121 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = v121 + 1;
    v122 = 0.0;
    if (a2)
    {
      v123 = 8 * a2;
      v124 = v104;
      v125 = a6;
      do
      {
        v126 = *v125++;
        v127 = v126;
        v128 = *v124++;
        v122 = v122 + v127 * v128;
        v123 -= 8;
      }
      while (v123);
    }
    v103 = 0;
    v129 = (_DWORD *)(v102 + 8);
    v130 = *v105;
    v131 = *(double *)(v102 + 32);
    v132 = *(double *)(v102 + 16) + *v105 * v131;
    if (*(_DWORD *)(v102 + 8))
    {
      if (v130 <= *(double *)(v102 + 104) || v130 >= *(double *)(v102 + 112) || (v103 = 0, !*(_DWORD *)v102))
      {
        v103 = 6;
        *((_DWORD *)this + 9) = 6;
      }
    }
    v133 = v130 != 1.0e20 || v132 < a5;
    if (!v133 && v122 <= v131)
    {
      v103 = 5;
      *((_DWORD *)this + 9) = 5;
    }
    if (v130 == 1.0e-20 && (v132 < a5 || v122 >= v131))
    {
      v103 = 4;
      *((_DWORD *)this + 9) = 4;
    }
    if (v121 >= 19)
    {
      v103 = 3;
      *((_DWORD *)this + 9) = 3;
    }
    if (*v129 && *(double *)(v102 + 112) - *(double *)(v102 + 104) <= *(double *)(v102 + 112) * 1.0e-16)
    {
      v103 = 2;
      *((_DWORD *)this + 9) = 2;
    }
    if (v132 >= a5)
    {
      v135 = 1;
      if (fabs(v122) <= *(double *)(v102 + 24) * -0.9)
        goto LABEL_198;
    }
    if (v103)
      goto LABEL_199;
    v136 = *(_DWORD *)(v102 + 4);
    if (v132 >= a5 && v136)
    {
      if (v122 >= *(double *)(v102 + 24) * 0.0001)
      {
        *(_DWORD *)(v102 + 4) = 0;
LABEL_124:
        goto LABEL_125;
      }
    }
    else if (!v136)
    {
      goto LABEL_124;
    }
    v137 = *(double *)(v102 + 64);
    if (v137 < a5 || v132 >= a5)
      goto LABEL_124;
    v138 = v137 - *(double *)(v102 + 56) * v131;
    v139 = *(double *)(v102 + 96);
    v213 = *(double *)(v102 + 88) - *(double *)(v102 + 80) * v131;
    *(double *)&v214.__locale_ = v138;
    v140 = *(double *)(v102 + 72) - v131;
    v211 = v139 - v131;
    v212 = v140;
    v141 = *(double *)(v102 + 32);
    v142 = v213 + *(double *)(v102 + 80) * v141;
    v143 = v141 + v212;
    *(double *)(v102 + 64) = *(double *)&v214.__locale_ + *(double *)(v102 + 56) * v141;
    *(double *)(v102 + 72) = v143;
    v144 = v141 + v211;
    *(double *)(v102 + 88) = v142;
    *(double *)(v102 + 96) = v144;
LABEL_125:
    __b = v208;
    a4 = v209;
    if (!*v129)
    {
      v119 = *(double *)(v102 + 56);
LABEL_136:
      *(double *)(v102 + 104) = v119;
      v119 = *v105 + (*v105 - v119) * 4.0;
      v147 = 1;
      goto LABEL_137;
    }
    v120 = *(double *)(v102 + 80);
    v119 = *(double *)(v102 + 56);
    v145 = vabdd_f64(v120, v119);
    if (v145 >= *(double *)(v102 + 48) * 0.66)
    {
      *v105 = v119 + (v120 - v119) * 0.5;
      v120 = *(double *)(v102 + 80);
      v119 = *(double *)(v102 + 56);
      v145 = vabdd_f64(v120, v119);
    }
    v146 = *(_QWORD *)(v102 + 40);
    *(double *)(v102 + 40) = v145;
    *(_QWORD *)(v102 + 48) = v146;
LABEL_129:
    v147 = 0;
    if (v120 >= v119)
      v148 = v119;
    else
      v148 = v120;
    *(double *)(v102 + 104) = v148;
    if (v119 < v120)
      v119 = v120;
LABEL_137:
    *(double *)(v102 + 112) = v119;
    v149 = *v105;
    if (*v105 < 1.0e-20)
      v149 = 1.0e-20;
    if (v149 <= 1.0e20)
      v150 = v149;
    else
      v150 = 1.0e20;
    *v105 = v150;
    if ((v147 & 1) == 0)
    {
      v151 = *(double *)(v102 + 104);
      if (v150 <= v151
        || (v152 = *(double *)(v102 + 112), v150 >= v152)
        || *((int *)this + 4) > 18
        || !*(_DWORD *)v102
        || v152 - v151 <= v152 * 1.0e-16)
      {
        *v105 = *(double *)(v102 + 56);
      }
    }
    if ((a9 & 1) != 0)
    {
      v135 = -1;
      if (a2 >= 1)
      {
        v153 = (a2 + 1) - 1;
        v154 = __b;
        v155 = a6;
        v156 = a4;
        v157 = 1.0 / a10;
        do
        {
          v158 = *v154++;
          v159 = v158;
          v160 = *v155++;
          v161 = v160;
          if (v159 >= 0.0)
            v162 = 0.0;
          else
            v162 = -1.0;
          if (v159 > 0.0)
            v162 = 1.0;
          v163 = v161 - v157;
          v164 = v161 + v162 / a10;
          v165 = v157 + v161;
          if (v159 != 0.0)
          {
            v163 = v164;
            v165 = v164;
          }
          v166 = fmin(v165, 0.0);
          if (v163 > 0.0)
            v166 = v163;
          v167 = *v104++;
          v168 = v167;
          v169 = v167 <= 0.0;
          if (v167 >= 0.0)
            v170 = 0.0;
          else
            v170 = -1.0;
          if (!v169)
            v170 = 1.0;
          v171 = v166 < 0.0;
          if (v166 <= 0.0)
            v172 = 0.0;
          else
            v172 = -1.0;
          if (v171)
            v172 = 1.0;
          if (v170 != v172)
            v168 = 0.0;
          if (v159 >= 0.0)
            v173 = 0.0;
          else
            v173 = -1.0;
          if (v159 > 0.0)
            v173 = 1.0;
          if (v159 != 0.0)
            v172 = v173;
          v174 = v159 + *v105 * v168;
          if (v174 >= 0.0)
            v175 = 0.0;
          else
            v175 = -1.0;
          if (v174 > 0.0)
            v175 = 1.0;
          v176 = v172 <= 0.0;
          if (v172 >= 0.0)
            v177 = 0.0;
          else
            v177 = -1.0;
          if (!v176)
            v177 = 1.0;
          if (v175 != v177)
            v174 = 0.0;
          *v156++ = v174;
          --v153;
        }
        while (v153);
        goto LABEL_197;
      }
    }
    else
    {
      v135 = -1;
      if (a2 >= 1)
      {
        v178 = (a2 + 1) - 1;
        v179 = __b;
        v180 = a4;
        do
        {
          v181 = *v179++;
          v182 = v181;
          v183 = *v104++;
          *v180++ = v182 + *v105 * v183;
          --v178;
        }
        while (v178);
LABEL_197:
        v135 = -1;
      }
    }
LABEL_198:
    *((_DWORD *)this + 9) = v135;
    v103 = v135;
LABEL_199:
    if (v103 != 1)
      break;
    v184 = *((_DWORD *)this + 6);
    v185 = v184 * a2;
    *((_DWORD *)this + 7) = v184 * a2;
    if (a2 >= 1)
    {
      v186 = (a2 + 1) - 1;
      v187 = *((_DWORD *)this + 12) + v185 + 1;
      v188 = *((_DWORD *)this + 10) + v185 + 1;
      v189 = a6;
      v190 = a8;
      do
      {
        v19[v188] = *v105 * v19[v188];
        v191 = *v189++;
        v192 = v191;
        v193 = *v190++;
        v19[v187++] = v192 - v193;
        ++v188;
        --v186;
      }
      while (v186);
    }
    if (v184 + 1 == a3)
      v194 = 0;
    else
      v194 = v184 + 1;
    *((_DWORD *)this + 6) = v194;
    v195 = 0.0;
    v196 = 0.0;
    if (a2)
    {
      v197 = 8 * a2;
      v198 = v197;
      v199 = a6;
      do
      {
        v200 = *v199++;
        v195 = v195 + v200 * v200;
        v198 -= 8;
      }
      while (v198);
      v196 = 0.0;
      v201 = a4;
      do
      {
        v202 = *v201++;
        v196 = v196 + v202 * v202;
        v197 -= 8;
      }
      while (v197);
      v195 = sqrt(v195);
    }
    if (v195 / fmax(sqrt(v196), 1.0) <= 0.0000001)
    {
      v203 = 0;
      goto LABEL_217;
    }
  }
  if (v103 == -1)
  {
    v203 = 1;
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"The line search routine mcsrch failed: error code:", 50);
    v204 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v204 + *(_QWORD *)(*v204 - 24)));
    v205 = std::locale::use_facet(&v214, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v205->__vftable[2].~facet_0)(v205, 10);
    std::locale::~locale(&v214);
    std::ostream::put();
    std::ostream::flush();
    v203 = -1;
  }
LABEL_217:
  *v207 = v203;
}

void sub_2083BE35C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::locale a20)
{
  std::locale::~locale(&a20);
  _Unwind_Resume(a1);
}

double *`anonymous namespace'::mcstep(double *this, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double a9, double a10, double a11, double a12, int *a13, int *a14)
{
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  int v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  int v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  _BOOL4 v68;

  *a13 = 0;
  if (!*(_DWORD *)a8)
  {
    v18 = *a3;
    goto LABEL_13;
  }
  v14 = *a7;
  v15 = *a4;
  v16 = *this;
  if (*a4 >= *this)
    v17 = *this;
  else
    v17 = *a4;
  if (v14 > v17)
  {
    if (v16 >= v15)
      v15 = *this;
    if (v14 < v15 && a12 >= a11)
    {
      v18 = *a3;
      if ((v14 - v16) * *a3 < 0.0)
      {
LABEL_13:
        v19 = fabs(v18);
        v20 = *a2;
        if (*a2 < a9)
        {
          v21 = 1;
          *a13 = 1;
          v22 = v20 - a9;
          v23 = *a7;
          v24 = *this;
          v25 = *a7 - *this;
          v26 = v18 + v22 * 3.0 / v25 + a10;
          v27 = fabs(v26);
          if (v27 >= v19)
            v19 = v27;
          v28 = fabs(a10);
          if (v19 < v28)
            v19 = v28;
          v29 = v19 * sqrt(-v18 / v19 * (a10 / v19) + v26 / v19 * (v26 / v19));
          v30 = -v29;
          if (v23 >= v24)
            v30 = v29;
          v31 = v24 + (v26 + v30 - v18) / (v30 + v30 - v18 + a10) * v25;
          v32 = v24 + v18 / (v18 + v22 / v25) * 0.5 * v25;
          v33 = vabdd_f64(v31, v24);
          v34 = vabdd_f64(v32, v24);
          v35 = (v32 - v31) * 0.5;
          if (v33 < v34)
            v35 = -0.0;
          v36 = v31 + v35;
          *(_DWORD *)a8 = 1;
          *a4 = v23;
          a2 = a5;
          a3 = a6;
          v37 = 1;
          goto LABEL_65;
        }
        if (v18 / v19 * a10 < 0.0)
        {
          v37 = 0;
          *a13 = 2;
          v38 = *a7;
          v39 = *this;
          v40 = v18 + (v20 - a9) * 3.0 / (*a7 - *this) + a10;
          v41 = fabs(v40);
          if (v41 >= v19)
            v19 = v41;
          v42 = fabs(a10);
          if (v19 < v42)
            v19 = v42;
          v43 = v19 * sqrt(-v18 / v19 * (a10 / v19) + v40 / v19 * (v40 / v19));
          v44 = -v43;
          if (v38 <= v39)
            v44 = v43;
          v45 = v38 + (v40 + v44 - a10) / (v18 + v44 + v44 - a10) * (v39 - v38);
          v46 = v38 + a10 / (a10 - v18) * (v39 - v38);
          if (vabdd_f64(v45, v38) <= vabdd_f64(v46, v38))
            v36 = v46;
          else
            v36 = v45;
          v21 = 1;
          *(_DWORD *)a8 = 1;
          *a4 = v39;
          *a5 = *a2;
          *a6 = *a3;
          v47 = *a7;
          goto LABEL_64;
        }
        v48 = fabs(a10);
        if (v48 >= v19)
        {
          *a13 = 4;
          v21 = *(_DWORD *)a8;
          if (*(_DWORD *)a8)
          {
            v37 = 0;
            v47 = *a7;
            v56 = *a4 - *a7;
            v57 = *a6;
            v58 = *a6 + (a9 - *a5) * 3.0 / v56 + a10;
            v59 = fabs(v58);
            v60 = fabs(*a6);
            if (v59 < v60)
              v59 = v60;
            if (v59 >= v48)
              v48 = v59;
            v61 = v48 * sqrt(-v57 / v48 * (a10 / v48) + v58 / v48 * (v58 / v48));
            if (v47 <= *a4)
              v62 = v61;
            else
              v62 = -v61;
            v36 = v47 + (v58 + v62 - a10) / (v57 + v62 + v62 - a10) * v56;
          }
          else
          {
            v47 = *a7;
            v37 = 0;
            if (*a7 <= *this)
              v36 = a11;
            else
              v36 = a12;
            v21 = 0;
          }
          goto LABEL_64;
        }
        *a13 = 3;
        v49 = (v20 - a9) * 3.0;
        v47 = *a7;
        v50 = *this;
        v51 = v18 + v49 / (*a7 - *this) + a10;
        v52 = fabs(v51);
        if (v52 >= v19)
          v19 = v52;
        if (v19 < v48)
          v19 = v48;
        v53 = v19 * sqrt(fmax(-v18 / v19 * (a10 / v19) + v51 / v19 * (v51 / v19), 0.0));
        v54 = -v53;
        if (v47 <= v50)
          v54 = v53;
        if (v54 == 0.0 || (v55 = (v51 + v54 - a10) / (v54 + v18 - a10 + v54), v55 >= 0.0))
        {
          v36 = a12;
          if (v47 <= v50)
            v36 = a11;
        }
        else
        {
          v36 = v47 + v55 * (v50 - v47);
        }
        v63 = v47 + a10 / (a10 - v18) * (v50 - v47);
        v21 = *(_DWORD *)a8;
        v64 = vabdd_f64(v47, v36);
        v65 = vabdd_f64(v47, v63);
        if (*(_DWORD *)a8)
        {
          if (v64 < v65)
          {
LABEL_57:
            v37 = 1;
LABEL_64:
            *this = v47;
LABEL_65:
            *a2 = a9;
            *a3 = a10;
            if (v36 >= a12)
              v66 = a12;
            else
              v66 = v36;
            if (v66 <= a11)
              v66 = a11;
            *a7 = v66;
            if (v37 && v21)
            {
              v67 = *this + (*a4 - *this) * 0.66;
              v68 = v67 < v66;
              if (*a4 > *this)
                v68 = v66 < v67;
              if (!v68)
                v66 = *this + (*a4 - *this) * 0.66;
              *a7 = v66;
            }
            return this;
          }
        }
        else
        {
          v21 = 0;
          if (v64 > v65)
            goto LABEL_57;
        }
        v37 = 1;
        v36 = v63;
        goto LABEL_64;
      }
    }
  }
  return this;
}

BOOL mecab_cost_train(int a1, char **a2)
{
  std::string::size_type v4;
  _BOOL8 v5;
  _QWORD *v6;
  const char *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  char *v12;
  std::string *v13;
  std::string::size_type v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  MeCab::Param *v20;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type v23;
  _BOOL4 v24;
  std::string::size_type size;
  std::string::size_type v26;
  std::string::size_type v27;
  std::string *v28;
  int v29;
  std::string::size_type v30;
  std::string *v31;
  int data_low;
  int v34;
  _QWORD *v36;
  std::string *v37;
  std::string::size_type v38;
  _QWORD *v39;
  const std::locale::facet *v40;
  __int128 v41;
  int v42;
  uint64_t v43;
  std::string *v44;
  std::string *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  char *v51;
  void **v52;
  uint64_t v53;
  char v55;
  void *__p[2];
  unsigned __int8 v57;
  char v58;
  std::string v59[14];
  uint64_t v60;
  char **v61;
  char *v62[2];
  char **v63;
  char *v64[2];
  std::string v65;
  std::string v66;
  std::string v67;
  void *v68[4];
  __int128 *v69;
  __int128 *v70;
  const char *v71;
  char v72;
  uint64_t v73;

  MEMORY[0x20BD06324](&v55);
  MeCab::Param::Param((MeCab::Param *)v68);
  if ((MeCab::Param::open((uint64_t)v68, a1, a2, (uint64_t)&MeCab::Learner::run(int,char **)::long_options) & 1) != 0)
  {
    if (!MeCab::Param::help_version((MeCab::Param *)v68))
    {
      v5 = 0;
      goto LABEL_85;
    }
    if (MeCab::Param::get<BOOL>((uint64_t)v68, "build"))
    {
      memset(&v67, 0, sizeof(v67));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v67, v69, v70, 0xAAAAAAAAAAAAAAABLL * (((char *)v70 - (char *)v69) >> 3));
      v4 = v67.__r_.__value_.__r.__words[0];
      v5 = v67.__r_.__value_.__l.__size_ - v67.__r_.__value_.__r.__words[0] != 48;
      if (v67.__r_.__value_.__l.__size_ - v67.__r_.__value_.__r.__words[0] == 48)
      {
        if (*(char *)(v67.__r_.__value_.__r.__words[0] + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)v67.__r_.__value_.__l.__data_, *(_QWORD *)(v67.__r_.__value_.__r.__words[0] + 8));
          v4 = v67.__r_.__value_.__r.__words[0];
        }
        else
        {
          v41 = *(_OWORD *)v67.__r_.__value_.__l.__data_;
          v66.__r_.__value_.__r.__words[2] = *(_QWORD *)(v67.__r_.__value_.__r.__words[0] + 16);
          *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v41;
        }
        if (*(char *)(v4 + 47) < 0)
          std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)(v4 + 24), *(_QWORD *)(v4 + 32));
        else
          v65 = *(std::string *)(v4 + 24);
        MeCab::FeatureIndex::FeatureIndex((MeCab::FeatureIndex *)v59);
        v59[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C09C418;
        v62[1] = 0;
        v62[0] = 0;
        v61 = v62;
        v64[1] = 0;
        v64[0] = 0;
        v63 = v64;
        if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v44 = &v66;
        else
          v44 = (std::string *)v66.__r_.__value_.__r.__words[0];
        if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v45 = &v65;
        else
          v45 = (std::string *)v65.__r_.__value_.__r.__words[0];
        if ((MeCab::EncoderFeatureIndex::convert((MeCab::EncoderFeatureIndex *)v59, (const char *)v44, (const char *)v45, v43) & 1) == 0)
        {
          v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"(", 1);
          v47 = (_QWORD *)std::ostream::operator<<();
          v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)") [", 3);
          v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"feature_index.convert(ifile.c_str(), model.c_str())", 51);
          v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"] ", 2);
          v51 = (char *)MeCab::whatlog::str((MeCab::whatlog *)&v60);
          std::string::basic_string[abi:ne180100]<0>(__p, v51);
          if ((v57 & 0x80u) == 0)
            v52 = __p;
          else
            v52 = (void **)__p[0];
          if ((v57 & 0x80u) == 0)
            v53 = v57;
          else
            v53 = (uint64_t)__p[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v52, v53);
          if ((char)v57 < 0)
            operator delete(__p[0]);
          MeCab::die::~die((MeCab::die *)&v58);
        }
        v59[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C09C418;
        std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&v63, v64[0]);
        std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&v61, v62[0]);
        MeCab::FeatureIndex::~FeatureIndex((void **)&v59[0].__r_.__value_.__l.__data_);
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v65.__r_.__value_.__l.__data_);
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v66.__r_.__value_.__l.__data_);
      }
      else
      {
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"Usage: ", 7);
        if (v72 >= 0)
          v7 = (const char *)&v71;
        else
          v7 = v71;
        v8 = strlen(v7);
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" corpus model", 13);
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
        v11 = std::locale::use_facet((const std::locale *)v59, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale((std::locale *)v59);
        std::ostream::put();
        std::ostream::flush();
      }
      v59[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v59);
      goto LABEL_85;
    }
    MeCab::Param::get<std::string>((uint64_t)v68, "training-algorithm", v59);
    v23 = HIBYTE(v59[0].__r_.__value_.__r.__words[2]);
    v24 = (v59[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
    size = v59[0].__r_.__value_.__l.__size_;
    if ((v59[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = HIBYTE(v59[0].__r_.__value_.__r.__words[2]);
    else
      v26 = v59[0].__r_.__value_.__l.__size_;
    if (v26)
    {
      v27 = 0;
      do
      {
        if (v24)
          v28 = (std::string *)v59[0].__r_.__value_.__r.__words[0];
        else
          v28 = v59;
        v29 = v28->__r_.__value_.__s.__data_[v27];
        if ((v29 - 65) <= 0x19)
        {
          v28->__r_.__value_.__s.__data_[v27] = v29 + 32;
          v23 = HIBYTE(v59[0].__r_.__value_.__r.__words[2]);
          size = v59[0].__r_.__value_.__l.__size_;
        }
        ++v27;
        v24 = (v23 & 0x80u) != 0;
        if ((v23 & 0x80u) == 0)
          v30 = v23;
        else
          v30 = size;
      }
      while (v27 < v30);
    }
    if (v24)
      v23 = size;
    if (v23 != 3)
      goto LABEL_46;
    v31 = (std::string *)v59[0].__r_.__value_.__r.__words[0];
    if (!v24)
      v31 = v59;
    if (LOWORD(v31->__r_.__value_.__l.__data_) == 29283 && v31->__r_.__value_.__s.__data_[2] == 102)
    {
      v42 = MeCab::CRFLearner::run((MeCab::CRFLearner *)v68, v20);
    }
    else
    {
      data_low = LOWORD(v31->__r_.__value_.__l.__data_);
      v34 = v31->__r_.__value_.__s.__data_[2];
      if (data_low != 28008 || v34 != 109)
      {
LABEL_46:
        v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"unknown type: ", 14);
        if ((v59[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = v59;
        else
          v37 = (std::string *)v59[0].__r_.__value_.__r.__words[0];
        if ((v59[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = HIBYTE(v59[0].__r_.__value_.__r.__words[2]);
        else
          v38 = v59[0].__r_.__value_.__l.__size_;
        v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
        std::ios_base::getloc((const std::ios_base *)((char *)v39 + *(_QWORD *)(*v39 - 24)));
        v40 = std::locale::use_facet((const std::locale *)&v67, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10);
        std::locale::~locale((std::locale *)&v67);
        std::ostream::put();
        std::ostream::flush();
        v5 = 1;
LABEL_83:
        if (SHIBYTE(v59[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v59[0].__r_.__value_.__l.__data_);
        goto LABEL_85;
      }
      v42 = MeCab::HMMLearner::run((MeCab::HMMLearner *)v68, v20, v21, v22);
    }
    v5 = v42 != 0;
    goto LABEL_83;
  }
  v12 = (char *)MeCab::whatlog::str((MeCab::whatlog *)&v73);
  std::string::basic_string[abi:ne180100]<0>(v59, v12);
  if ((v59[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = v59;
  else
    v13 = (std::string *)v59[0].__r_.__value_.__r.__words[0];
  if ((v59[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = HIBYTE(v59[0].__r_.__value_.__r.__words[2]);
  else
    v14 = v59[0].__r_.__value_.__l.__size_;
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)v13, v14);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n\n", 2);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"MeCab: Yet Another Part-of-Speech and Morphological Analyzer\n\nCopyright(C) 2001-2012 Taku Kudo \nCopyright(C) 2004-2008 Nippon Telegraph and Telephone Corporation\n", 162);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\ntry '--help' for more information.", 35);
  std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
  v19 = std::locale::use_facet((const std::locale *)&v67, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
  std::locale::~locale((std::locale *)&v67);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v59[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59[0].__r_.__value_.__l.__data_);
  v5 = 1;
LABEL_85:
  MeCab::Param::~Param(v68);
  std::ios_base::Init::~Init((std::ios_base::Init *)&v55);
  return v5;
}

void sub_2083BEDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  uint64_t v12;

  if (SLOBYTE(STACK[0x307]) < 0)
    operator delete(*(void **)(v12 + 32));
  *(_QWORD *)(v12 + 32) = &STACK[0x308];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F0]);
  MeCab::Param::~Param((void **)&STACK[0x320]);
  std::ios_base::Init::~Init((std::ios_base::Init *)&a12);
  _Unwind_Resume(a1);
}

uint64_t MeCab::CRFLearner::run(MeCab::CRFLearner *this, MeCab::Param *a2)
{
  std::string *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  std::string *v10;
  size_t v11;
  __int128 *v12;
  __int128 v13;
  _QWORD *v14;
  const char *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  char *v63;
  void *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  char *v71;
  void *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  std::string *v80;
  std::string::size_type size;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  char *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  _QWORD *v102;
  unint64_t v103;
  double *v104;
  const std::locale::facet *v105;
  unint64_t v106;
  _QWORD *v107;
  const std::locale::facet *v108;
  _QWORD *v109;
  const std::locale::facet *v110;
  _QWORD *v111;
  const std::locale::facet *v112;
  _QWORD *v113;
  const std::locale::facet *v114;
  _QWORD *v115;
  const std::locale::facet *v116;
  _QWORD *v117;
  const std::locale::facet *v118;
  const std::locale::facet *v119;
  double v120;
  std::locale::__imp *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  int v127;
  uint64_t v128;
  double i;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  std::locale::__imp *locale;
  unint64_t v137;
  char *v138;
  unint64_t v139;
  double v140;
  double *v141;
  double *v142;
  double v143;
  uint64_t v144;
  double *v145;
  double *v146;
  unint64_t v147;
  double v148;
  MeCab::EncoderLearnerTagger **v149;
  uint64_t v150;
  uint64_t v151;
  double *v152;
  double *v153;
  unint64_t v154;
  double *v155;
  double v156;
  double v157;
  double v158;
  double v159;
  _QWORD *v160;
  _QWORD *v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  const std::locale::facet *v165;
  double *v166;
  double *v167;
  double *v168;
  double *v169;
  _QWORD *v170;
  const std::locale::facet *v171;
  _QWORD *v172;
  const std::locale::facet *v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  const std::locale::facet *v180;
  std::string *v181;
  uint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  _QWORD *v186;
  _QWORD *v187;
  char *v188;
  void *v189;
  uint64_t v190;
  std::string *v191;
  std::string *v192;
  _QWORD *v193;
  _QWORD *v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  char *v198;
  void *v199;
  uint64_t v200;
  BOOL v202;
  uint64_t v203;
  unint64_t v204;
  int *v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  void *v209;
  uint64_t v210;
  unsigned __int8 v211;
  std::string v212;
  unint64_t v213;
  unint64_t v214;
  std::locale v215;
  char *v216;
  char *v217;
  void *v218;
  __int128 v219;
  _BYTE v220[28];
  __int128 v221;
  __int128 __b;
  __int128 v223;
  __int128 v224;
  uint64_t v225;
  double *v226;
  double *v227;
  uint64_t v228;
  void *v229;
  void *v230;
  uint64_t v231;
  double *v232;
  double *v233;
  uint64_t v234;
  uint64_t (**v235)();
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  std::string v240[40];
  uint64_t v241;
  void *v242[2];
  char v243;
  unint64_t v244;
  double *v245;
  _BYTE v246[288];
  char **v247;
  char *v248[2];
  char **v249;
  char *v250[2];
  std::string v251;
  std::string v252;
  std::string v253;
  std::string __p[17];
  _QWORD v255[22];

  v255[19] = *MEMORY[0x24BDAC8D0];
  MeCab::Param::get<std::string>((uint64_t)this, "dicdir", &v253);
  std::string::basic_string[abi:ne180100]<0>(v242, "dicrc");
  MeCab::create_filename((uint64_t)&v253, (uint64_t)v242, v240);
  if ((v240[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = v240;
  else
    v3 = (std::string *)v240[0].__r_.__value_.__r.__words[0];
  if (!MeCab::Param::load(this, (const char *)v3))
  {
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"(", 1);
    v5 = (_QWORD *)std::ostream::operator<<();
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") [", 3);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"param->load(DCONF(DICRC))", 25);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"] ", 2);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"no such file or directory: ", 27);
    std::string::basic_string[abi:ne180100]<0>(&v218, "dicrc");
    v10 = __p;
    MeCab::create_filename((uint64_t)&v253, (uint64_t)&v218, __p);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v10 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    v11 = strlen((const char *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v219) < 0)
      operator delete(v218);
    MeCab::die::~die((MeCab::die *)&v235);
  }
  if (SHIBYTE(v240[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v240[0].__r_.__value_.__l.__data_);
  if (v243 < 0)
    operator delete(v242[0]);
  v12 = (__int128 *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 5) - (_QWORD)v12 == 48)
  {
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v252, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
      v12 = (__int128 *)*((_QWORD *)this + 4);
    }
    else
    {
      v13 = *v12;
      v252.__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
      *(_OWORD *)&v252.__r_.__value_.__l.__data_ = v13;
    }
    if (*((char *)v12 + 47) < 0)
      std::string::__init_copy_ctor_external(&v251, *((const std::string::value_type **)v12 + 3), *((_QWORD *)v12 + 4));
    else
      v251 = *(std::string *)((_BYTE *)v12 + 1);
    MeCab::FeatureIndex::FeatureIndex((MeCab::FeatureIndex *)v242);
    v248[1] = 0;
    v248[0] = 0;
    v242[0] = &off_24C09C418;
    v247 = v248;
    v250[1] = 0;
    v250[0] = 0;
    v249 = v250;
    MeCab::TokenizerImpl<mecab_learner_node_t,mecab_learner_path_t>::TokenizerImpl((uint64_t)v240);
    v236 = 0u;
    v237 = 0u;
    v234 = 0;
    v235 = &off_24C09C5C0;
    v238 = 0;
    v239 = 2048;
    v232 = 0;
    v233 = 0;
    v229 = 0;
    v230 = 0;
    v231 = 0;
    v226 = 0;
    v227 = 0;
    v228 = 0;
    v21 = MeCab::Param::get<double>((uint64_t)this, "cost");
    v22 = MeCab::Param::get<double>((uint64_t)this, "eta");
    v202 = MeCab::Param::get<BOOL>((uint64_t)this, "text-only");
    v205 = (int *)MeCab::Param::get<unsigned long>((uint64_t)this, "eval-size");
    v207 = MeCab::Param::get<unsigned long>((uint64_t)this, "unk-eval-size");
    v23 = MeCab::Param::get<unsigned long>((uint64_t)this, "freq");
    v24 = MeCab::Param::get<unsigned long>((uint64_t)this, "thread");
    v25 = MEMORY[0x24BEDB318];
    v26 = *MEMORY[0x24BEDB318];
    *(_DWORD *)(MEMORY[0x24BEDB318] + *(_QWORD *)(*MEMORY[0x24BEDB318] - 24) + 8) = *(_DWORD *)(MEMORY[0x24BEDB318]
                                                                                                  + *(_QWORD *)(*MEMORY[0x24BEDB318] - 24)
                                                                                                  + 8) & 0xFFFFFEFB | 4;
    *(_QWORD *)(v25 + *(_QWORD *)(v26 - 24) + 16) = 5;
    std::ifstream::basic_ifstream(__p);
    if (v21 <= 0.0)
    {
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"(", 1);
      v28 = (_QWORD *)std::ostream::operator<<();
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)") [", 3);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"C > 0", 5);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"cost parameter is out of range: ", 32);
      std::ostream::operator<<();
      MeCab::die::~die((MeCab::die *)&v218);
    }
    if (v22 <= 0.0)
    {
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"(", 1);
      v33 = (_QWORD *)std::ostream::operator<<();
      v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)") [", 3);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"eta > 0", 7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"] eta is out of range: ", 23);
      std::ostream::operator<<();
      MeCab::die::~die((MeCab::die *)&v218);
    }
    if (!v205)
    {
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"(", 1);
      v37 = (_QWORD *)std::ostream::operator<<();
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)") [", 3);
      v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"eval_size > 0", 13);
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"eval-size is out of range: ", 27);
      std::ostream::operator<<();
      MeCab::die::~die((MeCab::die *)&v218);
    }
    if (!v207)
    {
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"(", 1);
      v42 = (_QWORD *)std::ostream::operator<<();
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)") [", 3);
      v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"unk_eval_size > 0", 17);
      v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"unk-eval-size is out of range: ", 31);
      std::ostream::operator<<();
      MeCab::die::~die((MeCab::die *)&v218);
    }
    if (!v23)
    {
      v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"(", 1);
      v47 = (_QWORD *)std::ostream::operator<<();
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)") [", 3);
      v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"freq > 0", 8);
      v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"freq is out of range: ", 22);
      std::ostream::operator<<();
      MeCab::die::~die((MeCab::die *)&v218);
    }
    if (v24 - 513 <= 0xFFFFFFFFFFFFFDFFLL)
    {
      v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"(", 1);
      v52 = (_QWORD *)std::ostream::operator<<();
      v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)") [", 3);
      v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"thread_num > 0 && thread_num <= 512", 35);
      v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"# thread is invalid: ", 21);
      std::ostream::operator<<();
      MeCab::die::~die((MeCab::die *)&v218);
    }
    if (!MeCab::TokenizerImpl<mecab_learner_node_t,mecab_learner_path_t>::open((uint64_t)v240, this))
    {
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"(", 1);
      v59 = (_QWORD *)std::ostream::operator<<();
      v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)") [", 3);
      v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"tokenizer.open(*param)", 22);
      v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"] ", 2);
      v63 = (char *)MeCab::whatlog::str((MeCab::whatlog *)&v241);
      std::string::basic_string[abi:ne180100]<0>(&v218, v63);
      if (v219 >= 0)
        v64 = &v218;
      else
        v64 = v218;
      if (v219 >= 0)
        v65 = HIBYTE(v219);
      else
        v65 = v219;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)v64, v65);
      if (SHIBYTE(v219) < 0)
        operator delete(v218);
      MeCab::die::~die((MeCab::die *)&v215);
    }
    if (!MeCab::FeatureIndex::openTemplate((MeCab::FeatureIndex *)v242, this, v56, v57))
    {
      v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"(", 1);
      v67 = (_QWORD *)std::ostream::operator<<();
      v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)") [", 3);
      v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"feature_index.open(*param)", 26);
      v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"] ", 2);
      v71 = (char *)MeCab::whatlog::str((MeCab::whatlog *)v246);
      std::string::basic_string[abi:ne180100]<0>(&v218, v71);
      if (v219 >= 0)
        v72 = &v218;
      else
        v72 = v218;
      if (v219 >= 0)
        v73 = HIBYTE(v219);
      else
        v73 = v219;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)v72, v73);
      if (SHIBYTE(v219) < 0)
        operator delete(v218);
      MeCab::die::~die((MeCab::die *)&v215);
    }
    if ((__p[1].__r_.__value_.__s.__data_[*(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24) + 8] & 5) != 0)
    {
      v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"(", 1);
      v75 = (_QWORD *)std::ostream::operator<<();
      v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)") [", 3);
      v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"ifs", 3);
      v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"] ", 2);
      v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"no such file or directory: ", 27);
      if ((v252.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v80 = &v252;
      else
        v80 = (std::string *)v252.__r_.__value_.__r.__words[0];
      if ((v252.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v252.__r_.__value_.__r.__words[2]);
      else
        size = v252.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v80, size);
      MeCab::die::~die((MeCab::die *)&v218);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"reading corpus ...", 18);
    std::ostream::flush();
    v204 = v23;
    if ((*((_BYTE *)&__p[1].__r_.__value_.__r.__words[1] + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)) & 5) != 0)
    {
      v206 = 0;
      v82 = 0;
    }
    else
    {
      v206 = 0;
      v82 = 0;
      v83 = 0;
      do
      {
        v84 = operator new();
        *(_QWORD *)v84 = &off_24C09C280;
        *(_QWORD *)(v84 + 8) = 0;
        *(_QWORD *)(v84 + 16) = 0;
        *(_QWORD *)(v84 + 24) = 0;
        MeCab::scoped_string::scoped_string((MeCab::scoped_string *)(v84 + 32));
        *(_QWORD *)(v84 + 112) = 0;
        *(_OWORD *)(v84 + 80) = 0u;
        *(_OWORD *)(v84 + 96) = 0u;
        *(_OWORD *)(v84 + 48) = 0u;
        *(_OWORD *)(v84 + 64) = 0u;
        std::ostringstream::basic_ostringstream[abi:ne180100](v84 + 120);
        *(_QWORD *)(v84 + 384) = 0;
        *(_QWORD *)(v84 + 392) = 0;
        *(_QWORD *)(v84 + 432) = 0;
        *(_QWORD *)(v84 + 440) = 0;
        *(_QWORD *)v84 = &off_24C09C460;
        *(_QWORD *)(v84 + 8) = v240;
        *(_QWORD *)(v84 + 16) = &v235;
        *(_QWORD *)(v84 + 24) = v242;
        *(_QWORD *)(v84 + 400) = 0;
        *(_QWORD *)(v84 + 408) = v205;
        *(_QWORD *)(v84 + 416) = v207;
        *(_QWORD *)(v84 + 424) = 0;
        if ((MeCab::EncoderLearnerTagger::read(v84, (uint64_t)__p, (uint64_t)&v229, v85) & 1) == 0)
        {
          v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"(", 1);
          v87 = (_QWORD *)std::ostream::operator<<();
          v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)") [", 3);
          v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"tagger->read(&ifs, &observed)", 29);
          v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"] ", 2);
          v91 = (char *)MeCab::whatlog::str((MeCab::whatlog *)(v84 + 120));
          std::string::basic_string[abi:ne180100]<0>(&v218, v91);
          if (v219 >= 0)
            v92 = &v218;
          else
            v92 = v218;
          if (v219 >= 0)
            v93 = HIBYTE(v219);
          else
            v93 = v219;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)v92, v93);
          if (SHIBYTE(v219) < 0)
            operator delete(v218);
          MeCab::die::~die((MeCab::die *)&v215);
        }
        if (*(_QWORD *)(v84 + 64))
        {
          if (v82 >= v83)
          {
            v94 = v82 - v206;
            v95 = v94 + 1;
            if ((unint64_t)(v94 + 1) >> 61)
              std::vector<char *>::__throw_length_error[abi:ne180100]();
            if (((char *)v83 - (char *)v206) >> 2 > v95)
              v95 = ((char *)v83 - (char *)v206) >> 2;
            if ((unint64_t)((char *)v83 - (char *)v206) >= 0x7FFFFFFFFFFFFFF8)
              v96 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v96 = v95;
            if (v96)
            {
              if (v96 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v97 = (char *)operator new(8 * v96);
            }
            else
            {
              v97 = 0;
            }
            v98 = (uint64_t *)&v97[8 * v94];
            *v98 = v84;
            v99 = v98 + 1;
            if (v82 == v206)
            {
              v100 = v206;
            }
            else
            {
              v100 = v206;
              do
              {
                v101 = *--v82;
                *--v98 = v101;
              }
              while (v82 != v206);
            }
            v83 = (uint64_t *)&v97[8 * v96];
            if (v100)
              operator delete(v100);
            v206 = v98;
            v82 = v99;
          }
          else
          {
            *v82++ = v84;
          }
        }
        else
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
        }
        if (__ROR8__(0x8F5C28F5C28F5C29 * (v82 - v206), 2) <= 0x28F5C28F5C28F5CuLL)
        {
          v102 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)"... ", 4);
          std::ostream::flush();
        }
      }
      while ((*((_BYTE *)&__p[1].__r_.__value_.__r.__words[1] + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)) & 5) == 0);
    }
    MeCab::EncoderFeatureIndex::shrink((unint64_t *)v242, v204, &v229);
    MeCab::EncoderFeatureIndex::clearcache((char **)v242);
    v103 = v244;
    std::vector<double>::resize((uint64_t)&v229, v244);
    v218 = &off_24C09C4E0;
    v219 = 0u;
    memset(v220, 0, sizeof(v220));
    v221 = 0u;
    __b = 0u;
    v223 = 0u;
    v224 = 0u;
    v225 = 0;
    std::vector<double>::resize((uint64_t)&v226, v103);
    std::vector<double>::resize((uint64_t)&v232, v103);
    v104 = v226;
    if ((char *)v227 - (char *)v226 >= 1)
      bzero(v226, 8* (((unint64_t)((char *)v227 - (char *)v226) >> 3) - ((unint64_t)((char *)v227 - (char *)v226) > 7))+ 8);
    v245 = v104;
    std::ios_base::getloc((const std::ios_base *)(MEMORY[0x24BEDB318] + *(_QWORD *)(*MEMORY[0x24BEDB318] - 24)));
    v105 = std::locale::use_facet(&v215, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v105->__vftable[2].~facet_0)(v105, 10);
    std::locale::~locale(&v215);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"Number of sentences: ", 21);
    v106 = v82 - v206;
    v107 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v107 + *(_QWORD *)(*v107 - 24)));
    v108 = std::locale::use_facet(&v215, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v108->__vftable[2].~facet_0)(v108, 10);
    std::locale::~locale(&v215);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"Number of features:  ", 21);
    v109 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v109 + *(_QWORD *)(*v109 - 24)));
    v110 = std::locale::use_facet(&v215, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v110->__vftable[2].~facet_0)(v110, 10);
    std::locale::~locale(&v215);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"eta:                 ", 21);
    v111 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v111 + *(_QWORD *)(*v111 - 24)));
    v112 = std::locale::use_facet(&v215, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v112->__vftable[2].~facet_0)(v112, 10);
    std::locale::~locale(&v215);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"freq:                ", 21);
    v113 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v113 + *(_QWORD *)(*v113 - 24)));
    v114 = std::locale::use_facet(&v215, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v114->__vftable[2].~facet_0)(v114, 10);
    std::locale::~locale(&v215);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"threads:             ", 21);
    v115 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v115 + *(_QWORD *)(*v115 - 24)));
    v116 = std::locale::use_facet(&v215, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v116->__vftable[2].~facet_0)(v116, 10);
    std::locale::~locale(&v215);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"C(sigma^2):          ", 21);
    v117 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v117 + *(_QWORD *)(*v117 - 24)));
    v118 = std::locale::use_facet(&v215, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v118->__vftable[2].~facet_0)(v118, 10);
    std::locale::~locale(&v215);
    std::ostream::put();
    std::ostream::flush();
    std::ios_base::getloc((const std::ios_base *)((char *)v117 + *(_QWORD *)(*v117 - 24)));
    v119 = std::locale::use_facet(&v215, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v119->__vftable[2].~facet_0)(v119, 10);
    std::locale::~locale(&v215);
    std::ostream::put();
    std::ostream::flush();
    v215.__locale_ = 0;
    v216 = 0;
    v217 = 0;
    if (v24 >= 2)
    {
      if (v24 >= 0x276276276276277)
        std::vector<char *>::__throw_length_error[abi:ne180100]();
      v121 = (std::locale::__imp *)operator new(104 * v24);
      v122 = 0;
      do
      {
        v123 = (char *)v121 + v122;
        *((_QWORD *)v123 + 9) = 0;
        *((_QWORD *)v123 + 10) = 0;
        *(_OWORD *)(v123 + 56) = 0uLL;
        *(_OWORD *)(v123 + 40) = 0uLL;
        *(_OWORD *)(v123 + 24) = 0uLL;
        *(_OWORD *)(v123 + 8) = 0uLL;
        *(_QWORD *)v123 = &off_24C09C320;
        v122 += 104;
        *((_QWORD *)v123 + 11) = 0;
        *((_QWORD *)v123 + 12) = 0;
      }
      while (104 * v24 != v122);
      v124 = 0;
      v125 = 0;
      v215.__locale_ = v121;
      v216 = (char *)v121 + 104 * v24;
      v217 = v216;
      do
      {
        v126 = (char *)v215.__locale_ + v124;
        *((_WORD *)v126 + 8) = v125;
        *((_QWORD *)v126 + 3) = v106;
        *((_WORD *)v126 + 9) = v24;
        *((_QWORD *)v126 + 9) = v206;
        std::vector<double>::resize((uint64_t)(v126 + 80), v233 - v232);
        ++v125;
        v124 += 104;
      }
      while (v24 != v125);
    }
    v127 = 0;
    v208 = 0;
    if (v106 <= 1)
      v128 = 1;
    else
      v128 = v82 - v206;
    v203 = v128;
    for (i = 0.0; ; i = v140)
    {
      if ((char *)v233 - (char *)v232 >= 1)
        bzero(v232, 8* (((unint64_t)((char *)v233 - (char *)v232) >> 3) - ((unint64_t)((char *)v233 - (char *)v232) > 7))+ 8);
      v209 = 0;
      v213 = 0;
      v214 = 0;
      if (v24 < 2)
      {
        v149 = (MeCab::EncoderLearnerTagger **)v206;
        if (v82 != v206)
        {
          v150 = 0;
          v140 = 0.0;
          v151 = v203;
          do
          {
            v140 = v140 + MeCab::EncoderLearnerTagger::gradient(*v149, v232, v120);
            v150 += (int)MeCab::EncoderLearnerTagger::eval(*v149++, &v213, (unint64_t *)&v209, &v214);
            --v151;
          }
          while (v151);
          if (!v103)
            goto LABEL_138;
LABEL_136:
          v152 = v226;
          v153 = v232;
          v154 = v103;
          v155 = (double *)v229;
          do
          {
            v156 = *v152++;
            v157 = v156;
            v140 = v140 + v157 * v157 / (v21 + v21);
            v158 = *v155++;
            *v153 = v157 / v21 + *v153 - v158;
            ++v153;
            --v154;
          }
          while (v154);
          goto LABEL_138;
        }
        v140 = 0.0;
        if (v103)
          goto LABEL_136;
      }
      else
      {
        v130 = 0;
        v131 = v24;
        do
        {
          pthread_create((pthread_t *)((char *)v215.__locale_ + v130 + 8), 0, (void *(__cdecl *)(void *))MeCab::thread::wrapper, (char *)v215.__locale_ + v130);
          v130 += 104;
          --v131;
        }
        while (v131);
        v132 = 8;
        v133 = v24;
        do
        {
          pthread_join(*(pthread_t *)((char *)v215.__locale_ + v132), 0);
          v132 += 104;
          --v133;
        }
        while (v133);
        v134 = 0;
        v135 = 0;
        v137 = v214;
        locale = v215.__locale_;
        v138 = (char *)v209;
        v139 = v213;
        v140 = 0.0;
        v141 = v232;
        do
        {
          v142 = (double *)((char *)locale + 104 * v134);
          v143 = v142[8];
          v144 = *((_QWORD *)v142 + 7);
          v137 += *((_QWORD *)v142 + 5);
          v214 = v137;
          v138 += *((_QWORD *)v142 + 4);
          v209 = v138;
          v139 += *((_QWORD *)v142 + 6);
          v213 = v139;
          if (v103)
          {
            v145 = (double *)*((_QWORD *)locale + 13 * v134 + 10);
            v146 = v141;
            v147 = v103;
            do
            {
              v148 = *v145++;
              *v146 = v148 + *v146;
              ++v146;
              --v147;
            }
            while (v147);
          }
          v140 = v140 + v143;
          v135 += v144;
          ++v134;
        }
        while (v134 != v24);
        if (v103)
          goto LABEL_136;
      }
LABEL_138:
      if (v208)
        v159 = vabdd_f64(i, v140) / i;
      else
        v159 = 1.0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"iter=", 5);
      v160 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)" err=", 5);
      v161 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v161, (uint64_t)" F=", 3);
      v162 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v162, (uint64_t)" target=", 8);
      v163 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)" diff=", 6);
      v164 = (_QWORD *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v164 + *(_QWORD *)(*v164 - 24)));
      v165 = std::locale::use_facet((const std::locale *)&v212, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v165->__vftable[2].~facet_0)(v165, 10);
      std::locale::~locale((std::locale *)&v212);
      std::ostream::put();
      std::ostream::flush();
      if (v159 < v22)
        ++v127;
      else
        v127 = 0;
      if (v127 == 3)
      {
        v179 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"\nDone! writing model file ... ", 30);
        std::ios_base::getloc((const std::ios_base *)((char *)v179 + *(_QWORD *)(*v179 - 24)));
        v180 = std::locale::use_facet((const std::locale *)&v212, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v180->__vftable[2].~facet_0)(v180, 10);
        std::locale::~locale((std::locale *)&v212);
        std::ostream::put();
        std::ostream::flush();
        if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v212, v251.__r_.__value_.__l.__data_, v251.__r_.__value_.__l.__size_);
        else
          v212 = v251;
        std::string::append(&v212, ".txt", 4uLL);
        if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v181 = &v212;
        else
          v181 = (std::string *)v212.__r_.__value_.__r.__words[0];
        if (!MeCab::EncoderFeatureIndex::save((MeCab::EncoderFeatureIndex *)v242, (const char *)v181))
        {
          v183 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v183, (uint64_t)"(", 1);
          v184 = (_QWORD *)std::ostream::operator<<();
          v185 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v184, (uint64_t)") [", 3);
          v186 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v185, (uint64_t)"feature_index.save(txtfile.c_str())", 35);
          v187 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v186, (uint64_t)"] ", 2);
          v188 = (char *)MeCab::whatlog::str((MeCab::whatlog *)v246);
          std::string::basic_string[abi:ne180100]<0>(&v209, v188);
          if ((v211 & 0x80u) == 0)
            v189 = &v209;
          else
            v189 = v209;
          if ((v211 & 0x80u) == 0)
            v190 = v211;
          else
            v190 = v210;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v187, (uint64_t)v189, v190);
          if ((char)v211 < 0)
            operator delete(v209);
          MeCab::die::~die((MeCab::die *)&v214);
        }
        if (!v202)
        {
          v191 = (v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? &v212
               : (std::string *)v212.__r_.__value_.__r.__words[0];
          v192 = (v251.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? &v251
               : (std::string *)v251.__r_.__value_.__r.__words[0];
          if ((MeCab::EncoderFeatureIndex::convert((MeCab::EncoderFeatureIndex *)v242, (const char *)v191, (const char *)v192, v182) & 1) == 0)
          {
            v193 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v193, (uint64_t)"(", 1);
            v194 = (_QWORD *)std::ostream::operator<<();
            v195 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v194, (uint64_t)") [", 3);
            v196 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v195, (uint64_t)"feature_index.convert(txtfile.c_str(), model.c_str())", 53);
            v197 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v196, (uint64_t)"] ", 2);
            v198 = (char *)MeCab::whatlog::str((MeCab::whatlog *)v246);
            std::string::basic_string[abi:ne180100]<0>(&v209, v198);
            if ((v211 & 0x80u) == 0)
              v199 = &v209;
            else
              v199 = v209;
            if ((v211 & 0x80u) == 0)
              v200 = v211;
            else
              v200 = v210;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)v199, v200);
            if ((char)v211 < 0)
              operator delete(v209);
            MeCab::die::~die((MeCab::die *)&v214);
          }
        }
        if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v212.__r_.__value_.__l.__data_);
        v212.__r_.__value_.__r.__words[0] = (std::string::size_type)&v215;
        std::vector<MeCab::learner_thread>::__destroy_vector::operator()[abi:ne180100]((void ***)&v212);
        MeCab::LBFGS::~LBFGS((MeCab::LBFGS *)&v218);
        __p[0].__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7E0];
        *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                                  + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
        MEMORY[0x20BD061F8](&__p[0].__r_.__value_.__r.__words[2]);
        std::istream::~istream();
        MEMORY[0x20BD06354](v255);
        if (v206)
          operator delete(v206);
        if (v226)
        {
          v227 = v226;
          operator delete(v226);
        }
        if (v229)
        {
          v230 = v229;
          operator delete(v229);
        }
        if (v232)
        {
          v233 = v232;
          operator delete(v232);
        }
        MeCab::FreeList<mecab_learner_path_t>::~FreeList(&v235);
        MeCab::TokenizerImpl<mecab_learner_node_t,mecab_learner_path_t>::~TokenizerImpl((uint64_t)v240);
        v242[0] = &off_24C09C418;
        std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&v249, v250[0]);
        std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&v247, v248[0]);
        MeCab::FeatureIndex::~FeatureIndex(v242);
        if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v251.__r_.__value_.__l.__data_);
        if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v252.__r_.__value_.__l.__data_);
        v20 = 0;
        goto LABEL_206;
      }
      v166 = v226;
      v167 = v232;
      v168 = (double *)*((_QWORD *)&v223 + 1);
      if (*((_QWORD *)&v223 + 1) == (_QWORD)v224)
      {
        LODWORD(v219) = 0;
        std::vector<double>::resize((uint64_t)&v223 + 8, 11 * v103 + 10);
        std::vector<double>::resize((uint64_t)&__b, v103);
        v169 = (double *)__b;
        v168 = (double *)*((_QWORD *)&v223 + 1);
      }
      else
      {
        v169 = (double *)__b;
        if (v103 != (uint64_t)(*((_QWORD *)&__b + 1) - __b) >> 3)
        {
          v170 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"size of array is different", 26);
          std::ios_base::getloc((const std::ios_base *)((char *)v170 + *(_QWORD *)(*v170 - 24)));
          v171 = std::locale::use_facet((const std::locale *)&v212, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v171->__vftable[2].~facet_0)(v171, 10);
          std::locale::~locale((std::locale *)&v212);
          std::ostream::put();
LABEL_155:
          std::ostream::flush();
          goto LABEL_156;
        }
      }
      MeCab::LBFGS::lbfgs_optimize((MeCab::LBFGS *)&v218, v103, 5, v166, v140, v167, v169, v168, 0, v21, (int *)&v219);
      if ((v219 & 0x80000000) != 0)
      {
        v172 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"routine stops with unexpected error", 35);
        std::ios_base::getloc((const std::ios_base *)((char *)v172 + *(_QWORD *)(*v172 - 24)));
        v173 = std::locale::use_facet((const std::locale *)&v212, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v173->__vftable[2].~facet_0)(v173, 10);
        std::locale::~locale((std::locale *)&v212);
        std::ostream::put();
        goto LABEL_155;
      }
      if (!(_DWORD)v219)
      {
        v219 = 0u;
        memset(v220, 0, sizeof(v220));
        v221 = 0uLL;
        *((_QWORD *)&__b + 1) = __b;
        *(_QWORD *)&v224 = *((_QWORD *)&v223 + 1);
        if (v225)
          MEMORY[0x20BD0639C](v225, 0x1000C40DF44A08DLL);
        v225 = 0;
LABEL_156:
        v174 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v174, (uint64_t)"(", 1);
        v175 = (_QWORD *)std::ostream::operator<<();
        v176 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v175, (uint64_t)") [", 3);
        v177 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v176, (uint64_t)"ret > 0", 7);
        v178 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v177, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v178, (uint64_t)"unexpected error in LBFGS routin", 32);
        MeCab::die::~die((MeCab::die *)&v212);
      }
      ++v208;
    }
  }
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"Usage: ", 7);
  v15 = (char *)this + 56;
  if (*((char *)this + 79) < 0)
    v15 = *(const char **)v15;
  v16 = strlen(v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" corpus model", 13);
  std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
  v19 = std::locale::use_facet((const std::locale *)v240, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
  std::locale::~locale((std::locale *)v240);
  std::ostream::put();
  std::ostream::flush();
  v20 = 0xFFFFFFFFLL;
LABEL_206:
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v253.__r_.__value_.__l.__data_);
  return v20;
}

void sub_2083C09C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::locale a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a27 < 0)
    operator delete(__p);
  MeCab::die::~die((MeCab::die *)&a33);
}

void sub_2083C0B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  MeCab::die::~die((MeCab::die *)&a31);
}

void sub_2083C0B20()
{
  JUMPOUT(0x2083C0B48);
}

void sub_2083C0B4C()
{
  std::ifstream::~ifstream(&STACK[0x9C8]);
  JUMPOUT(0x2083C0CA8);
}

void sub_2083C0B58(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0)
    operator delete(__p);
  MeCab::die::~die((MeCab::die *)&a31);
}

void sub_2083C0BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a66;
  uint64_t v66;

  MEMORY[0x20BD0639C](v66, 0x10F3C40E0082040);
  std::ifstream::~ifstream(&STACK[0x9C8]);
  if (a20)
    operator delete(a20);
  if (a50)
    operator delete(a50);
  if (a53)
    operator delete(a53);
  if (a56)
    operator delete(a56);
  MeCab::FreeList<mecab_learner_path_t>::~FreeList(&a59);
  MeCab::TokenizerImpl<mecab_learner_node_t,mecab_learner_path_t>::~TokenizerImpl((uint64_t)&a66);
  MeCab::EncoderFeatureIndex::~EncoderFeatureIndex((char **)&STACK[0x6C8]);
  if (SLOBYTE(STACK[0x987]) < 0)
    operator delete((void *)STACK[0x970]);
  if (SLOBYTE(STACK[0x9A7]) < 0)
    operator delete((void *)STACK[0x990]);
  if (SLOBYTE(STACK[0x9C7]) < 0)
    operator delete((void *)STACK[0x9B0]);
  _Unwind_Resume(a1);
}

void sub_2083C0C18()
{
  JUMPOUT(0x2083C0C2CLL);
}

void sub_2083C0C38()
{
  JUMPOUT(0x2083C0C8CLL);
}

void sub_2083C0C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;

  std::ifstream::~ifstream(&STACK[0x9C8]);
  if (__p)
    operator delete(__p);
  if (a50)
    operator delete(a50);
  if (a53)
    operator delete(a53);
  if (a56)
    operator delete(a56);
  MeCab::FreeList<mecab_learner_path_t>::~FreeList(&a59);
  MeCab::TokenizerImpl<mecab_learner_node_t,mecab_learner_path_t>::~TokenizerImpl((uint64_t)&a66);
  MeCab::EncoderFeatureIndex::~EncoderFeatureIndex((char **)&STACK[0x6C8]);
  if (SLOBYTE(STACK[0x987]) < 0)
    operator delete((void *)STACK[0x970]);
  if (SLOBYTE(STACK[0x9A7]) < 0)
    operator delete((void *)STACK[0x990]);
  if (SLOBYTE(STACK[0x9C7]) < 0)
    operator delete((void *)STACK[0x9B0]);
  _Unwind_Resume(a1);
}

void sub_2083C0C5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  MeCab::die::~die((MeCab::die *)va);
}

void sub_2083C0C78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34)
{
  a22 = (void **)&a31;
  std::vector<MeCab::learner_thread>::__destroy_vector::operator()[abi:ne180100](&a22);
  MeCab::LBFGS::~LBFGS((MeCab::LBFGS *)&a34);
  JUMPOUT(0x2083C0C94);
}

uint64_t MeCab::HMMLearner::run(MeCab::HMMLearner *this, MeCab::Param *a2, uint64_t a3, uint64_t a4)
{
  __int128 **v4;
  std::string *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  size_t v13;
  std::string *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  std::string *v21;
  size_t v22;
  std::string::size_type v23;
  __int128 v24;
  _QWORD *v25;
  const char *v26;
  size_t v27;
  _QWORD *v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  uint64_t v31;
  BOOL v32;
  _BOOL4 v33;
  std::string::size_type size;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  std::string *v46;
  std::string::size_type v47;
  uint64_t v48;
  const std::locale::facet *v49;
  _QWORD *v50;
  std::string *v51;
  uint64_t v52;
  std::string *v53;
  std::string *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  const std::string::value_type **v61;
  const char *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  double v78;
  uint64_t *v79;
  uint64_t *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  std::string *v86;
  std::string *v87;
  unint64_t v88;
  std::string *v89;
  std::string *v90;
  uint64_t i;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  std::string *v98;
  std::string::size_type v99;
  uint64_t *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  std::string *v107;
  std::string::size_type v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  const std::locale::facet *v115;
  _QWORD *v116;
  std::string *v117;
  size_t v118;
  char v119;
  std::string *v120;
  char v121;
  std::string *v122;
  _QWORD *v123;
  _QWORD *v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  std::string *v134;
  std::string *v135;
  unint64_t v136;
  std::string *v137;
  std::string *v138;
  uint64_t j;
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  std::string *v146;
  std::string::size_type v147;
  uint64_t *v148;
  uint64_t *v149;
  uint64_t *v150;
  uint64_t *v151;
  std::string *v152;
  double v153;
  _QWORD *v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  _QWORD *v180;
  _QWORD *v181;
  _QWORD *v182;
  std::string *v183;
  std::string *v184;
  unint64_t v185;
  std::string *v186;
  std::string *v187;
  uint64_t m;
  _QWORD *v189;
  _QWORD *v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  std::string *v195;
  std::string::size_type v196;
  uint64_t *v197;
  uint64_t *v198;
  const std::locale::facet *v199;
  _QWORD *v200;
  const std::locale::facet *v201;
  const std::locale::facet *v202;
  std::string::size_type v203;
  uint64_t v204;
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  _QWORD *v210;
  std::string *v211;
  std::string::size_type v212;
  uint64_t *v213;
  std::locale::id *v214;
  double *v215;
  uint64_t *v216;
  double v217;
  uint64_t *v218;
  uint64_t *v219;
  uint64_t *v220;
  uint64_t *v221;
  BOOL v222;
  _QWORD *v223;
  _QWORD *v224;
  _QWORD *v225;
  _QWORD *v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  _QWORD *v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  const std::locale::facet *v236;
  uint64_t *v237;
  uint64_t *v238;
  uint64_t *v239;
  uint64_t *v240;
  uint64_t *v241;
  std::locale::id *v242;
  uint64_t *v243;
  uint64_t *v244;
  double v245;
  uint64_t *v246;
  uint64_t *v247;
  uint64_t *v248;
  uint64_t *v249;
  _QWORD *v250;
  _QWORD *v251;
  _QWORD *v252;
  _QWORD *v253;
  _QWORD *v254;
  _QWORD *v255;
  _QWORD *v256;
  _QWORD *v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  _QWORD *v262;
  std::string *v263;
  std::string::size_type v264;
  _QWORD *v265;
  const std::locale::facet *v266;
  uint64_t *v267;
  uint64_t *v268;
  uint64_t *v269;
  uint64_t *v270;
  uint64_t v271;
  std::string *v272;
  std::string *v273;
  _QWORD *v274;
  _QWORD *v275;
  _QWORD *v276;
  _QWORD *v277;
  _QWORD *v278;
  _QWORD *v279;
  const std::locale::facet *v280;
  BOOL v282;
  std::string::size_type v283;
  std::string::size_type v284;
  uint64_t v285;
  std::string::size_type k;
  std::string v287;
  uint64_t *v288;
  _QWORD *v289[2];
  uint64_t *v290;
  _QWORD *v291[2];
  std::string v292;
  std::string v293;
  std::string __str;
  std::string v295;
  std::string v296;
  std::string v297;
  std::string v298;
  void *v299;
  void *v300;
  uint64_t v301;
  std::string v302;
  std::string v303;
  std::string v304;
  std::string v305;
  std::string v306;
  _OWORD v307[3];
  __int128 v308;
  uint64_t v309;
  _QWORD **v310;
  _QWORD *v311[3];
  std::locale v312;
  std::string v313[17];
  _BYTE v314[208];
  char **v315;
  char *v316[2];
  char **v317;
  char *v318[2];
  std::string __p[17];
  uint64_t v320;
  std::string v321[341];
  uint64_t v322;

  v4 = (__int128 **)MEMORY[0x24BDAC7A8](this, a2, a3, a4);
  v322 = *MEMORY[0x24BDAC8D0];
  v311[1] = 0;
  v311[0] = 0;
  memset(v307, 0, sizeof(v307));
  v308 = 0u;
  v309 = 0;
  v310 = v311;
  MeCab::Param::get<std::string>((uint64_t)v4, "dicdir", &v306);
  std::string::basic_string[abi:ne180100]<0>(v313, "dicrc");
  MeCab::create_filename((uint64_t)&v306, (uint64_t)v313, v321);
  if ((v321[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = v321;
  else
    v5 = (std::string *)v321[0].__r_.__value_.__r.__words[0];
  if (!MeCab::Param::load((MeCab::Param *)v4, (const char *)v5))
  {
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") [", 3);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"param->load(DCONF(DICRC))", 25);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"] ", 2);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"no such file or directory: ", 27);
    std::string::basic_string[abi:ne180100]<0>(&v305, "dicrc");
    v12 = __p;
    MeCab::create_filename((uint64_t)&v306, (uint64_t)&v305, __p);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v12 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    v13 = strlen((const char *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v305.__r_.__value_.__l.__data_);
    MeCab::die::~die((MeCab::die *)&v304);
  }
  if (SHIBYTE(v321[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v321[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v313[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v313[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v313, "rewrite.def");
  MeCab::create_filename((uint64_t)&v306, (uint64_t)v313, v321);
  if ((v321[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = v321;
  else
    v14 = (std::string *)v321[0].__r_.__value_.__r.__words[0];
  if ((MeCab::DictionaryRewriter::open((MeCab::DictionaryRewriter *)v307, (const char *)v14, 0) & 1) == 0)
  {
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"(", 1);
    v16 = (_QWORD *)std::ostream::operator<<();
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") [", 3);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"rewrite.open(DCONF(REWRITE_FILE))", 33);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"] ", 2);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"no such file or directory: ", 27);
    std::string::basic_string[abi:ne180100]<0>(&v305, "rewrite.def");
    v21 = __p;
    MeCab::create_filename((uint64_t)&v306, (uint64_t)&v305, __p);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v21 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    v22 = strlen((const char *)v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v305.__r_.__value_.__l.__data_);
    MeCab::die::~die((MeCab::die *)&v304);
  }
  if (SHIBYTE(v321[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v321[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v313[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v313[0].__r_.__value_.__l.__data_);
  memset(&v305, 0, sizeof(v305));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v305, v4[4], v4[5], 0xAAAAAAAAAAAAAAABLL * (((char *)v4[5] - (char *)v4[4]) >> 3));
  v23 = v305.__r_.__value_.__r.__words[0];
  if (v305.__r_.__value_.__l.__size_ - v305.__r_.__value_.__r.__words[0] == 48)
  {
    if (*(char *)(v305.__r_.__value_.__r.__words[0] + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v304, *(const std::string::value_type **)v305.__r_.__value_.__l.__data_, *(_QWORD *)(v305.__r_.__value_.__r.__words[0] + 8));
      v23 = v305.__r_.__value_.__r.__words[0];
    }
    else
    {
      v24 = *(_OWORD *)v305.__r_.__value_.__l.__data_;
      v304.__r_.__value_.__r.__words[2] = *(_QWORD *)(v305.__r_.__value_.__r.__words[0] + 16);
      *(_OWORD *)&v304.__r_.__value_.__l.__data_ = v24;
    }
    if (*(char *)(v23 + 47) < 0)
      std::string::__init_copy_ctor_external(&v303, *(const std::string::value_type **)(v23 + 24), *(_QWORD *)(v23 + 32));
    else
      v303 = *(std::string *)(v23 + 24);
    v32 = MeCab::Param::get<BOOL>((uint64_t)v4, "text-only");
    v33 = MeCab::Param::get<BOOL>((uint64_t)v4, "em-hmm");
    MeCab::Param::get<std::string>((uint64_t)v4, "bos-feature", &v302);
    size = HIBYTE(v302.__r_.__value_.__r.__words[2]);
    if ((v302.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v302.__r_.__value_.__l.__size_;
    if (!size)
    {
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(", 1);
      v36 = (_QWORD *)std::ostream::operator<<();
      v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)") [", 3);
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"!bos_feature.empty()", 20);
      v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"bos-feature is empty", 20);
      MeCab::die::~die((MeCab::die *)v321);
    }
    v299 = 0;
    v300 = 0;
    v301 = 0;
    memset(&v298, 0, sizeof(v298));
    memset(&v297, 0, sizeof(v297));
    memset(&v296, 0, sizeof(v296));
    memset(&v295, 0, sizeof(v295));
    memset(&__str, 0, sizeof(__str));
    memset(&v293, 0, sizeof(v293));
    memset(&v292, 0, sizeof(v292));
    v291[0] = 0;
    v291[1] = 0;
    v289[1] = 0;
    v290 = (uint64_t *)v291;
    v288 = (uint64_t *)v289;
    v289[0] = 0;
    v285 = (uint64_t)v4;
    v282 = v32;
    if (v33)
    {
      std::ifstream::basic_ifstream(v313);
      if ((v313[1].__r_.__value_.__s.__data_[*(_QWORD *)(v313[0].__r_.__value_.__r.__words[0] - 24) + 8] & 5) != 0)
      {
        v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"(", 1);
        v41 = (_QWORD *)std::ostream::operator<<();
        v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)") [", 3);
        v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"ifs", 3);
        v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
        v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"no such file or directory: ", 27);
        if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v304;
        else
          v46 = (std::string *)v304.__r_.__value_.__r.__words[0];
        if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v47 = HIBYTE(v304.__r_.__value_.__r.__words[2]);
        else
          v47 = v304.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v46, v47);
        MeCab::die::~die((MeCab::die *)__p);
      }
      v48 = 0;
      while (1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v313
                                                    + *(_QWORD *)(v313[0].__r_.__value_.__r.__words[0] - 24)));
        v49 = std::locale::use_facet((const std::locale *)&v287, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10);
        std::locale::~locale((std::locale *)&v287);
        v50 = (_QWORD *)std::istream::getline();
        if ((*((_BYTE *)v50 + *(_QWORD *)(*v50 - 24) + 32) & 5) != 0)
          break;
        if (LODWORD(v321[0].__r_.__value_.__l.__data_) == 5459781)
        {
          ++v48;
          if (__ROR8__(0x8F5C28F5C28F5C29 * v48, 2) <= 0x28F5C28F5C28F5CuLL)
          {
            v55 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"... ", 4);
            std::ostream::flush();
          }
        }
        else
        {
          v300 = v299;
          v51 = v321;
          v287.__r_.__value_.__r.__words[0] = (std::string::size_type)v321;
          v52 = 0;
          v53 = (std::string *)((char *)v321 + strlen((const char *)v321));
          while (1)
          {
            v54 = v53;
            if (v51 != v53)
            {
              while (v51->__r_.__value_.__s.__data_[0] != 9)
              {
                v51 = (std::string *)((char *)v51 + 1);
                if (v51 == v53)
                {
                  v54 = v53;
                  goto LABEL_63;
                }
              }
              v54 = v51;
            }
LABEL_63:
            v54->__r_.__value_.__s.__data_[0] = 0;
            v312.__locale_ = (std::locale::__imp *)&v299;
            std::back_insert_iterator<std::vector<char *>>::operator=[abi:ne180100]((void ***)&v312, &v287);
            ++v52;
            if (v54 == v53)
              break;
            v51 = (std::string *)((char *)&v54->__r_.__value_.__l.__data_ + 1);
            v287.__r_.__value_.__r.__words[0] = (std::string::size_type)v54->__r_.__value_.__r.__words + 1;
            if (v52 == 4)
              goto LABEL_70;
          }
          if (v52 != 4)
          {
            v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"(", 1);
            v57 = (_QWORD *)std::ostream::operator<<();
            v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)") [", 3);
            v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"tokenize(line, \"\\t\", std::back_inserter(col), 4) == 4", 53);
            v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"] ", 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"format error\n", 13);
            MeCab::die::~die((MeCab::die *)__p);
          }
LABEL_70:
          v61 = (const std::string::value_type **)v299;
          v62 = *(const char **)v299;
          if (strcmp("B", *(const char **)v299) || strcmp("U", v62))
          {
            v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"(", 1);
            v64 = (_QWORD *)std::ostream::operator<<();
            v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)") [", 3);
            v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"std::strcmp(\"B\", col[0]) == 0 && std::strcmp(\"U\", col[0]) == 0", 62);
            v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"] ", 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"format error\n", 13);
            MeCab::die::~die((MeCab::die *)__p);
          }
          if (*v62 == 66)
          {
            std::string::__assign_external(&v297, v61[1]);
            if ((MeCab::DictionaryRewriter::rewrite() & 1) == 0)
            {
              v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"(", 1);
              v69 = (_QWORD *)std::ostream::operator<<();
              v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)") [", 3);
              v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"rewrite.rewrite(feature, &ufeature, &lfeature, &rfeature)", 57);
              v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"] ", 2);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"rewrite failed", 14);
              MeCab::die::~die((MeCab::die *)__p);
            }
            std::string::operator=(&v292, &__str);
            std::string::__assign_external(&v297, *((const std::string::value_type **)v299 + 2));
            if ((MeCab::DictionaryRewriter::rewrite() & 1) == 0)
            {
              v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"(", 1);
              v74 = (_QWORD *)std::ostream::operator<<();
              v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)") [", 3);
              v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"rewrite.rewrite(feature, &ufeature, &lfeature, &rfeature)", 57);
              v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"] ", 2);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"rewrite failed", 14);
              MeCab::die::~die((MeCab::die *)__p);
            }
            std::string::operator=(&v293, &v295);
            v78 = atof(*((const char **)v299 + 3));
            v287.__r_.__value_.__r.__words[0] = (std::string::size_type)&v292;
            v79 = std::__tree<std::__value_type<std::string,std::map<std::string,double>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,double>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,double>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v288, (void **)&v292.__r_.__value_.__l.__data_, (__int128 **)&v287);
            v287.__r_.__value_.__r.__words[0] = (std::string::size_type)&v293;
            v80 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v79 + 7, (void **)&v293.__r_.__value_.__l.__data_, (__int128 **)&v287);
          }
          else
          {
            std::string::__assign_external(&v297, v61[2]);
            if ((MeCab::DictionaryRewriter::rewrite() & 1) == 0)
            {
              v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"(", 1);
              v82 = (_QWORD *)std::ostream::operator<<();
              v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)") [", 3);
              v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"rewrite.rewrite(feature, &ufeature, &lfeature, &rfeature)", 57);
              v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"] ", 2);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"rewrite failed", 14);
              MeCab::die::~die((MeCab::die *)__p);
            }
            if ((v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v86 = &v296;
            else
              v86 = (std::string *)v296.__r_.__value_.__r.__words[0];
            v87 = v321;
            strncpy((char *)v321, (const char *)v86, 0x2000uLL);
            v300 = v299;
            v287.__r_.__value_.__r.__words[0] = (std::string::size_type)v321;
            v88 = 0;
            v89 = (std::string *)((char *)v321 + strlen((const char *)v321));
            do
            {
              v90 = v89;
              if (v87 != v89)
              {
                while (2)
                {
                  for (i = 0; i != 2; ++i)
                  {
                    if (v87->__r_.__value_.__s.__data_[0] == asc_2083E09B2[i])
                    {
                      v90 = v87;
                      goto LABEL_92;
                    }
                  }
                  v87 = (std::string *)((char *)v87 + 1);
                  if (v87 != v89)
                    continue;
                  break;
                }
                v90 = v89;
              }
LABEL_92:
              v90->__r_.__value_.__s.__data_[0] = 0;
              if (*v287.__r_.__value_.__l.__data_)
              {
                v312.__locale_ = (std::locale::__imp *)&v299;
                std::back_insert_iterator<std::vector<char *>>::operator=[abi:ne180100]((void ***)&v312, &v287);
                ++v88;
              }
              if (v90 == v89)
                break;
              v87 = (std::string *)((char *)&v90->__r_.__value_.__l.__data_ + 1);
              v287.__r_.__value_.__r.__words[0] = (std::string::size_type)v90->__r_.__value_.__r.__words + 1;
            }
            while (v88 < 2);
            if (v88 != 2)
            {
              v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"(", 1);
              v93 = (_QWORD *)std::ostream::operator<<();
              v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)") [", 3);
              v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"n == 2", 6);
              v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"] ", 2);
              v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)"format error in rewrite.def: ", 29);
              if ((v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v98 = &v296;
              else
                v98 = (std::string *)v296.__r_.__value_.__r.__words[0];
              if ((v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v99 = HIBYTE(v296.__r_.__value_.__r.__words[2]);
              else
                v99 = v296.__r_.__value_.__l.__size_;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)v98, v99);
              MeCab::die::~die((MeCab::die *)__p);
            }
            std::string::__assign_external(&v296, *(const std::string::value_type **)v299);
            std::string::__assign_external(&v298, *((const std::string::value_type **)v299 + 1));
            v78 = atof(*((const char **)v299 + 3));
            v287.__r_.__value_.__r.__words[0] = (std::string::size_type)&v296;
            v100 = std::__tree<std::__value_type<std::string,std::map<std::string,double>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,double>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,double>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v290, (void **)&v296.__r_.__value_.__l.__data_, (__int128 **)&v287);
            v287.__r_.__value_.__r.__words[0] = (std::string::size_type)&v298;
            v80 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v100 + 7, (void **)&v298.__r_.__value_.__l.__data_, (__int128 **)&v287);
          }
          *((double *)v80 + 7) = v78 + *((double *)v80 + 7);
          ++v48;
        }
      }
    }
    else
    {
      std::ifstream::basic_ifstream(v313);
      if ((v313[1].__r_.__value_.__s.__data_[*(_QWORD *)(v313[0].__r_.__value_.__r.__words[0] - 24) + 8] & 5) != 0)
      {
        v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"(", 1);
        v102 = (_QWORD *)std::ostream::operator<<();
        v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)") [", 3);
        v104 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"ifs", 3);
        v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"] ", 2);
        v106 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)"no such file or directory: ", 27);
        if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v107 = &v304;
        else
          v107 = (std::string *)v304.__r_.__value_.__r.__words[0];
        if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v108 = HIBYTE(v304.__r_.__value_.__r.__words[2]);
        else
          v108 = v304.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)v107, v108);
        MeCab::die::~die((MeCab::die *)__p);
      }
      if ((MeCab::DictionaryRewriter::rewrite() & 1) == 0)
      {
        v109 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)"(", 1);
        v110 = (_QWORD *)std::ostream::operator<<();
        v111 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)") [", 3);
        v112 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)"rewrite.rewrite(bos_feature, &ufeature, &plfeature, &prfeature)", 63);
        v113 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)"rewrite failed", 14);
        MeCab::die::~die((MeCab::die *)__p);
      }
      v114 = 0;
      while (1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v313
                                                    + *(_QWORD *)(v313[0].__r_.__value_.__r.__words[0] - 24)));
        v115 = std::locale::use_facet((const std::locale *)&v287, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v115->__vftable[2].~facet_0)(v115, 10);
        std::locale::~locale((std::locale *)&v287);
        v116 = (_QWORD *)std::istream::getline();
        if ((*((_BYTE *)v116 + *(_QWORD *)(*v116 - 24) + 32) & 5) != 0)
          break;
        if (LODWORD(v321[0].__r_.__value_.__l.__data_) == 5459781)
        {
          ++v114;
          if (__ROR8__(0x8F5C28F5C28F5C29 * v114, 2) <= 0x28F5C28F5C28F5CuLL)
          {
            v123 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)"... ", 4);
            std::ostream::flush();
          }
          std::string::operator=(&v297, &v302);
        }
        else
        {
          v300 = v299;
          v117 = v321;
          v287.__r_.__value_.__r.__words[0] = (std::string::size_type)v321;
          v118 = strlen((const char *)v321);
          v119 = 0;
          v120 = (std::string *)((char *)v321 + v118);
          while (1)
          {
            v121 = v119;
            v122 = v120;
            if (v117 != v120)
            {
              while (v117->__r_.__value_.__s.__data_[0] != 9)
              {
                v117 = (std::string *)((char *)v117 + 1);
                if (v117 == v120)
                {
                  v122 = v120;
                  goto LABEL_125;
                }
              }
              v122 = v117;
            }
LABEL_125:
            v122->__r_.__value_.__s.__data_[0] = 0;
            v312.__locale_ = (std::locale::__imp *)&v299;
            std::back_insert_iterator<std::vector<char *>>::operator=[abi:ne180100]((void ***)&v312, &v287);
            if (v122 == v120)
              break;
            v117 = (std::string *)((char *)&v122->__r_.__value_.__l.__data_ + 1);
            v287.__r_.__value_.__r.__words[0] = (std::string::size_type)v122->__r_.__value_.__r.__words + 1;
            v119 = 1;
            if ((v121 & 1) != 0)
              goto LABEL_133;
          }
          if ((v121 & 1) == 0)
          {
            v124 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)"(", 1);
            v125 = (_QWORD *)std::ostream::operator<<();
            v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)") [", 3);
            v127 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)"tokenize(line, \"\\t\", std::back_inserter(col), 2) == 2", 53);
            v128 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)"] ", 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)"format error\n", 13);
            MeCab::die::~die((MeCab::die *)__p);
          }
LABEL_133:
          std::string::__assign_external(&v297, *((const std::string::value_type **)v299 + 1));
        }
        if ((MeCab::DictionaryRewriter::rewrite() & 1) == 0)
        {
          v129 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)"(", 1);
          v130 = (_QWORD *)std::ostream::operator<<();
          v131 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v130, (uint64_t)") [", 3);
          v132 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)"rewrite.rewrite(feature, &ufeature, &lfeature, &rfeature)", 57);
          v133 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)"] ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)"rewrite failed", 14);
          MeCab::die::~die((MeCab::die *)__p);
        }
        if ((v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v134 = &v296;
        else
          v134 = (std::string *)v296.__r_.__value_.__r.__words[0];
        v135 = v321;
        strncpy((char *)v321, (const char *)v134, 0x2000uLL);
        v300 = v299;
        v287.__r_.__value_.__r.__words[0] = (std::string::size_type)v321;
        v136 = 0;
        v137 = (std::string *)((char *)v321 + strlen((const char *)v321));
        do
        {
          v138 = v137;
          if (v135 != v137)
          {
            while (2)
            {
              for (j = 0; j != 2; ++j)
              {
                if (v135->__r_.__value_.__s.__data_[0] == asc_2083E09B2[j])
                {
                  v138 = v135;
                  goto LABEL_147;
                }
              }
              v135 = (std::string *)((char *)v135 + 1);
              if (v135 != v137)
                continue;
              break;
            }
            v138 = v137;
          }
LABEL_147:
          v138->__r_.__value_.__s.__data_[0] = 0;
          if (*v287.__r_.__value_.__l.__data_)
          {
            v312.__locale_ = (std::locale::__imp *)&v299;
            std::back_insert_iterator<std::vector<char *>>::operator=[abi:ne180100]((void ***)&v312, &v287);
            ++v136;
          }
          if (v138 == v137)
            break;
          v135 = (std::string *)((char *)&v138->__r_.__value_.__l.__data_ + 1);
          v287.__r_.__value_.__r.__words[0] = (std::string::size_type)v138->__r_.__value_.__r.__words + 1;
        }
        while (v136 < 2);
        if (v136 != 2)
        {
          v140 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v140, (uint64_t)"(", 1);
          v141 = (_QWORD *)std::ostream::operator<<();
          v142 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)") [", 3);
          v143 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, (uint64_t)"n == 2", 6);
          v144 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v143, (uint64_t)"] ", 2);
          v145 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v144, (uint64_t)"format error in rewrite.def: ", 29);
          if ((v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v146 = &v296;
          else
            v146 = (std::string *)v296.__r_.__value_.__r.__words[0];
          if ((v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v147 = HIBYTE(v296.__r_.__value_.__r.__words[2]);
          else
            v147 = v296.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v145, (uint64_t)v146, v147);
          MeCab::die::~die((MeCab::die *)__p);
        }
        std::string::__assign_external(&v296, *(const std::string::value_type **)v299);
        std::string::__assign_external(&v298, *((const std::string::value_type **)v299 + 1));
        v287.__r_.__value_.__r.__words[0] = (std::string::size_type)&v292;
        v148 = std::__tree<std::__value_type<std::string,std::map<std::string,double>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,double>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,double>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v288, (void **)&v292.__r_.__value_.__l.__data_, (__int128 **)&v287);
        v287.__r_.__value_.__r.__words[0] = (std::string::size_type)&v295;
        v149 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v148 + 7, (void **)&v295.__r_.__value_.__l.__data_, (__int128 **)&v287);
        *((double *)v149 + 7) = *((double *)v149 + 7) + 1.0;
        v287.__r_.__value_.__r.__words[0] = (std::string::size_type)&v296;
        v150 = std::__tree<std::__value_type<std::string,std::map<std::string,double>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,double>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,double>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v290, (void **)&v296.__r_.__value_.__l.__data_, (__int128 **)&v287);
        v287.__r_.__value_.__r.__words[0] = (std::string::size_type)&v298;
        v151 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v150 + 7, (void **)&v298.__r_.__value_.__l.__data_, (__int128 **)&v287);
        *((double *)v151 + 7) = *((double *)v151 + 7) + 1.0;
        std::string::operator=(&v293, &v295);
        std::string::operator=(&v292, &__str);
      }
    }
    v313[0].__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7E0];
    v283 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
    v284 = v313[0].__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)v313[0].__r_.__value_.__r.__words
                              + *(_QWORD *)(v313[0].__r_.__value_.__r.__words[0] - 24)) = v283;
    MEMORY[0x20BD061F8](&v313[0].__r_.__value_.__r.__words[2]);
    std::istream::~istream();
    MEMORY[0x20BD06354](v314);
    memset(__p, 0, 24);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v152 = &v306;
    else
      v152 = (std::string *)v306.__r_.__value_.__r.__words[0];
    MeCab::enum_csv_dictionaries((char *)v152, (uint64_t)__p);
    v153 = MeCab::Param::get<double>(v285, "default-emission-freq");
    if (v153 < 0.0)
    {
      v154 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)"(", 1);
      v155 = (_QWORD *)std::ostream::operator<<();
      v156 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v155, (uint64_t)") [", 3);
      v157 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)"freq >= 0.0", 11);
      v158 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v157, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)" default-emission-freq must be >= 0 ", 36);
      std::ostream::operator<<();
      MeCab::die::~die((MeCab::die *)v313);
    }
    for (k = __p[0].__r_.__value_.__r.__words[0]; k != __p[0].__r_.__value_.__l.__size_; k += 24)
    {
      v159 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"reading ", 8);
      v160 = *(char *)(k + 23);
      if (v160 >= 0)
        v161 = k;
      else
        v161 = *(_QWORD *)k;
      if (v160 >= 0)
        v162 = *(unsigned __int8 *)(k + 23);
      else
        v162 = *(_QWORD *)(k + 8);
      v163 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, v161, v162);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)" ... ", 5);
      std::ostream::flush();
      std::ifstream::basic_ifstream(v313);
      if ((*((_BYTE *)&v313[1].__r_.__value_.__r.__words[1] + *(_QWORD *)(v313[0].__r_.__value_.__r.__words[0] - 24)) & 5) != 0)
      {
        v164 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)"(", 1);
        v165 = (_QWORD *)std::ostream::operator<<();
        v166 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v165, (uint64_t)") [", 3);
        v167 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v166, (uint64_t)"ifs", 3);
        v168 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v167, (uint64_t)"] ", 2);
        v169 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v168, (uint64_t)"no such file or directory: ", 27);
        v170 = *(char *)(k + 23);
        if (v170 >= 0)
          v171 = k;
        else
          v171 = *(_QWORD *)k;
        if (v170 >= 0)
          v172 = *(unsigned __int8 *)(k + 23);
        else
          v172 = *(_QWORD *)(k + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v169, v171, v172);
        MeCab::die::~die((MeCab::die *)&v287);
      }
      while (1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v313
                                                    + *(_QWORD *)(v313[0].__r_.__value_.__r.__words[0] - 24)));
        v199 = std::locale::use_facet((const std::locale *)&v287, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v199->__vftable[2].~facet_0)(v199, 10);
        std::locale::~locale((std::locale *)&v287);
        v200 = (_QWORD *)std::istream::getline();
        if ((*((_BYTE *)v200 + *(_QWORD *)(*v200 - 24) + 32) & 5) != 0)
          break;
        v300 = v299;
        if (MeCab::tokenizeCSV<std::back_insert_iterator<std::vector<char *>>>((const char *)v321, &v299, 5uLL) != 5)
        {
          v173 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v173, (uint64_t)"(", 1);
          v174 = (_QWORD *)std::ostream::operator<<();
          v175 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v174, (uint64_t)") [", 3);
          v176 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v175, (uint64_t)"tokenizeCSV(line, std::back_inserter(col), 5) == 5", 50);
          v177 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v176, (uint64_t)"] ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v177, (uint64_t)"format error", 12);
          MeCab::die::~die((MeCab::die *)&v287);
        }
        std::string::__assign_external(&v297, *((const std::string::value_type **)v299 + 4));
        if ((MeCab::DictionaryRewriter::rewrite() & 1) == 0)
        {
          v178 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v178, (uint64_t)"(", 1);
          v179 = (_QWORD *)std::ostream::operator<<();
          v180 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v179, (uint64_t)") [", 3);
          v181 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v180, (uint64_t)"rewrite.rewrite(feature, &ufeature, &lfeature, &rfeature)", 57);
          v182 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v181, (uint64_t)"] ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v182, (uint64_t)"rewrite failed", 14);
          MeCab::die::~die((MeCab::die *)&v287);
        }
        if ((v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v183 = &v296;
        else
          v183 = (std::string *)v296.__r_.__value_.__r.__words[0];
        v184 = v321;
        strncpy((char *)v321, (const char *)v183, 0x2000uLL);
        v300 = v299;
        v287.__r_.__value_.__r.__words[0] = (std::string::size_type)v321;
        v185 = 0;
        v186 = (std::string *)((char *)v321 + strlen((const char *)v321));
        do
        {
          v187 = v186;
          if (v184 != v186)
          {
            while (2)
            {
              for (m = 0; m != 2; ++m)
              {
                if (v184->__r_.__value_.__s.__data_[0] == asc_2083E09B2[m])
                {
                  v187 = v184;
                  goto LABEL_195;
                }
              }
              v184 = (std::string *)((char *)v184 + 1);
              if (v184 != v186)
                continue;
              break;
            }
            v187 = v186;
          }
LABEL_195:
          v187->__r_.__value_.__s.__data_[0] = 0;
          if (*v287.__r_.__value_.__l.__data_)
          {
            v312.__locale_ = (std::locale::__imp *)&v299;
            std::back_insert_iterator<std::vector<char *>>::operator=[abi:ne180100]((void ***)&v312, &v287);
            ++v185;
          }
          if (v187 == v186)
            break;
          v184 = (std::string *)((char *)&v187->__r_.__value_.__l.__data_ + 1);
          v287.__r_.__value_.__r.__words[0] = (std::string::size_type)v187->__r_.__value_.__r.__words + 1;
        }
        while (v185 < 2);
        if (v185 != 2)
        {
          v189 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v189, (uint64_t)"(", 1);
          v190 = (_QWORD *)std::ostream::operator<<();
          v191 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v190, (uint64_t)") [", 3);
          v192 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v191, (uint64_t)"n == 2", 6);
          v193 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v192, (uint64_t)"] ", 2);
          v194 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v193, (uint64_t)"format error: ", 14);
          if ((v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v195 = &v296;
          else
            v195 = (std::string *)v296.__r_.__value_.__r.__words[0];
          if ((v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v196 = HIBYTE(v296.__r_.__value_.__r.__words[2]);
          else
            v196 = v296.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v194, (uint64_t)v195, v196);
          MeCab::die::~die((MeCab::die *)&v287);
        }
        std::string::__assign_external(&v296, *(const std::string::value_type **)v299);
        std::string::__assign_external(&v298, *((const std::string::value_type **)v299 + 1));
        v287.__r_.__value_.__r.__words[0] = (std::string::size_type)&v296;
        v197 = std::__tree<std::__value_type<std::string,std::map<std::string,double>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,double>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,double>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v290, (void **)&v296.__r_.__value_.__l.__data_, (__int128 **)&v287);
        v287.__r_.__value_.__r.__words[0] = (std::string::size_type)&v298;
        v198 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v197 + 7, (void **)&v298.__r_.__value_.__l.__data_, (__int128 **)&v287);
        *((double *)v198 + 7) = v153 + *((double *)v198 + 7);
      }
      std::ios_base::getloc((const std::ios_base *)(MEMORY[0x24BEDB318] + *(_QWORD *)(*MEMORY[0x24BEDB318] - 24)));
      v201 = std::locale::use_facet((const std::locale *)&v287, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v201->__vftable[2].~facet_0)(v201, 10);
      std::locale::~locale((std::locale *)&v287);
      std::ostream::put();
      std::ostream::flush();
      v313[0].__r_.__value_.__r.__words[0] = v284;
      *(std::string::size_type *)((char *)v313[0].__r_.__value_.__r.__words + *(_QWORD *)(v284 - 24)) = v283;
      MEMORY[0x20BD061F8](&v313[0].__r_.__value_.__r.__words[2]);
      std::istream::~istream();
      MEMORY[0x20BD06354](v314);
    }
    v313[0].__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v313);
    std::ios_base::getloc((const std::ios_base *)(MEMORY[0x24BEDB318] + *(_QWORD *)(*MEMORY[0x24BEDB318] - 24)));
    v202 = std::locale::use_facet((const std::locale *)v313, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v202->__vftable[2].~facet_0)(v202, 10);
    std::locale::~locale((std::locale *)v313);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v287, v303.__r_.__value_.__l.__data_, v303.__r_.__value_.__l.__size_);
    else
      v287 = v303;
    std::string::append(&v287, ".txt", 4uLL);
    std::ofstream::basic_ofstream(__p);
    v203 = __p[0].__r_.__value_.__r.__words[0];
    v204 = *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24);
    if ((__p[1].__r_.__value_.__s.__data_[v204 + 8] & 5) != 0)
    {
      v205 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v205, (uint64_t)"(", 1);
      v206 = (_QWORD *)std::ostream::operator<<();
      v207 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v206, (uint64_t)") [", 3);
      v208 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v207, (uint64_t)"ofs", 3);
      v209 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v208, (uint64_t)"] ", 2);
      v210 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v209, (uint64_t)"permission denied: ", 19);
      if ((v303.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v211 = &v303;
      else
        v211 = (std::string *)v303.__r_.__value_.__r.__words[0];
      if ((v303.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v212 = HIBYTE(v303.__r_.__value_.__r.__words[2]);
      else
        v212 = v303.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v210, (uint64_t)v211, v212);
      MeCab::die::~die((MeCab::die *)v313);
    }
    *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + v204) = *(_DWORD *)((_BYTE *)&__p[0].__r_.__value_.__r.__words[1]
                                                                                 + v204) & 0xFFFFFEFB | 4;
    *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[2] + *(_QWORD *)(v203 - 24)) = 24;
    v213 = v288;
    if (v288 != (uint64_t *)v289)
    {
      v214 = (std::locale::id *)MEMORY[0x24BEDB350];
      do
      {
        v215 = (double *)v213[7];
        v216 = v213 + 8;
        if (v215 != (double *)(v213 + 8))
        {
          v217 = 0.0;
          v218 = (uint64_t *)v213[7];
          do
          {
            v219 = (uint64_t *)v218[1];
            v220 = v218;
            if (v219)
            {
              do
              {
                v221 = v219;
                v219 = (uint64_t *)*v219;
              }
              while (v219);
            }
            else
            {
              do
              {
                v221 = (uint64_t *)v220[2];
                v222 = *v221 == (_QWORD)v220;
                v220 = v221;
              }
              while (!v222);
            }
            v217 = v217 + *((double *)v218 + 7);
            v218 = v221;
          }
          while (v221 != v216);
          do
          {
            log(v215[7] / v217);
            v223 = (_QWORD *)std::ostream::operator<<();
            v313[0].__r_.__value_.__s.__data_[0] = 9;
            v224 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)v313, 1);
            v313[0].__r_.__value_.__s.__data_[0] = 66;
            v225 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v224, (uint64_t)v313, 1);
            v313[0].__r_.__value_.__s.__data_[0] = 58;
            v226 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v225, (uint64_t)v313, 1);
            v227 = *((char *)v213 + 55);
            if (v227 >= 0)
              v228 = (uint64_t)(v213 + 4);
            else
              v228 = v213[4];
            if (v227 >= 0)
              v229 = *((unsigned __int8 *)v213 + 55);
            else
              v229 = v213[5];
            v230 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v226, v228, v229);
            v313[0].__r_.__value_.__s.__data_[0] = 47;
            v231 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v230, (uint64_t)v313, 1);
            v232 = *((char *)v215 + 55);
            if (v232 >= 0)
              v233 = (uint64_t)(v215 + 4);
            else
              v233 = *((_QWORD *)v215 + 4);
            if (v232 >= 0)
              v234 = *((unsigned __int8 *)v215 + 55);
            else
              v234 = *((_QWORD *)v215 + 5);
            v235 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v231, v233, v234);
            std::ios_base::getloc((const std::ios_base *)((char *)v235 + *(_QWORD *)(*v235 - 24)));
            v236 = std::locale::use_facet((const std::locale *)v313, v214);
            ((void (*)(const std::locale::facet *, uint64_t))v236->__vftable[2].~facet_0)(v236, 10);
            std::locale::~locale((std::locale *)v313);
            std::ostream::put();
            std::ostream::flush();
            v237 = (uint64_t *)*((_QWORD *)v215 + 1);
            if (v237)
            {
              do
              {
                v238 = v237;
                v237 = (uint64_t *)*v237;
              }
              while (v237);
            }
            else
            {
              do
              {
                v238 = (uint64_t *)*((_QWORD *)v215 + 2);
                v222 = *v238 == (_QWORD)v215;
                v215 = (double *)v238;
              }
              while (!v222);
            }
            v215 = (double *)v238;
          }
          while (v238 != v216);
        }
        v239 = (uint64_t *)v213[1];
        if (v239)
        {
          do
          {
            v240 = v239;
            v239 = (uint64_t *)*v239;
          }
          while (v239);
        }
        else
        {
          do
          {
            v240 = (uint64_t *)v213[2];
            v222 = *v240 == (_QWORD)v213;
            v213 = v240;
          }
          while (!v222);
        }
        v213 = v240;
      }
      while (v240 != (uint64_t *)v289);
    }
    v241 = v290;
    if (v290 != (uint64_t *)v291)
    {
      v242 = (std::locale::id *)MEMORY[0x24BEDB350];
      do
      {
        v243 = (uint64_t *)v241[7];
        v244 = v241 + 8;
        if (v243 != v241 + 8)
        {
          v245 = 0.0;
          v246 = (uint64_t *)v241[7];
          do
          {
            v247 = (uint64_t *)v246[1];
            v248 = v246;
            if (v247)
            {
              do
              {
                v249 = v247;
                v247 = (uint64_t *)*v247;
              }
              while (v247);
            }
            else
            {
              do
              {
                v249 = (uint64_t *)v248[2];
                v222 = *v249 == (_QWORD)v248;
                v248 = v249;
              }
              while (!v222);
            }
            v245 = v245 + *((double *)v246 + 7);
            v246 = v249;
          }
          while (v249 != v244);
          do
          {
            if (*((char *)v243 + 55) < 0)
              std::string::__init_copy_ctor_external(v313, (const std::string::value_type *)v243[4], v243[5]);
            else
              v313[0] = *(std::string *)(v243 + 4);
            if ((MeCab::escape_csv_element(v313) & 1) == 0)
            {
              v250 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v250, (uint64_t)"(", 1);
              v251 = (_QWORD *)std::ostream::operator<<();
              v252 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v251, (uint64_t)") [", 3);
              v253 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v252, (uint64_t)"escape_csv_element(&w)", 22);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v253, (uint64_t)"] ", 2);
              MeCab::die::~die((MeCab::die *)&v312);
            }
            log(*((double *)v243 + 7) / v245);
            v254 = (_QWORD *)std::ostream::operator<<();
            LOBYTE(v312.__locale_) = 9;
            v255 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v254, (uint64_t)&v312, 1);
            LOBYTE(v312.__locale_) = 85;
            v256 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v255, (uint64_t)&v312, 1);
            LOBYTE(v312.__locale_) = 58;
            v257 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v256, (uint64_t)&v312, 1);
            v258 = *((char *)v241 + 55);
            if (v258 >= 0)
              v259 = (uint64_t)(v241 + 4);
            else
              v259 = v241[4];
            if (v258 >= 0)
              v260 = *((unsigned __int8 *)v241 + 55);
            else
              v260 = v241[5];
            v261 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v257, v259, v260);
            LOBYTE(v312.__locale_) = 32;
            v262 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v261, (uint64_t)&v312, 1);
            if ((v313[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v263 = v313;
            else
              v263 = (std::string *)v313[0].__r_.__value_.__r.__words[0];
            if ((v313[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v264 = HIBYTE(v313[0].__r_.__value_.__r.__words[2]);
            else
              v264 = v313[0].__r_.__value_.__l.__size_;
            v265 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v262, (uint64_t)v263, v264);
            std::ios_base::getloc((const std::ios_base *)((char *)v265 + *(_QWORD *)(*v265 - 24)));
            v266 = std::locale::use_facet(&v312, v242);
            ((void (*)(const std::locale::facet *, uint64_t))v266->__vftable[2].~facet_0)(v266, 10);
            std::locale::~locale(&v312);
            std::ostream::put();
            std::ostream::flush();
            if (SHIBYTE(v313[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v313[0].__r_.__value_.__l.__data_);
            v267 = (uint64_t *)v243[1];
            if (v267)
            {
              do
              {
                v268 = v267;
                v267 = (uint64_t *)*v267;
              }
              while (v267);
            }
            else
            {
              do
              {
                v268 = (uint64_t *)v243[2];
                v222 = *v268 == (_QWORD)v243;
                v243 = v268;
              }
              while (!v222);
            }
            v243 = v268;
          }
          while (v268 != v244);
        }
        v269 = (uint64_t *)v241[1];
        if (v269)
        {
          do
          {
            v270 = v269;
            v269 = (uint64_t *)*v269;
          }
          while (v269);
        }
        else
        {
          do
          {
            v270 = (uint64_t *)v241[2];
            v222 = *v270 == (_QWORD)v241;
            v241 = v270;
          }
          while (!v222);
        }
        v241 = v270;
      }
      while (v270 != (uint64_t *)v291);
    }
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)__p + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&__p[1].__r_.__value_.__r.__words[1] + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)) | 4);
    if (!v282)
    {
      MeCab::FeatureIndex::FeatureIndex((MeCab::FeatureIndex *)v313);
      v316[1] = 0;
      v316[0] = 0;
      v313[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C09C418;
      v315 = v316;
      v318[1] = 0;
      v318[0] = 0;
      v317 = v318;
      if ((v287.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v272 = &v287;
      else
        v272 = (std::string *)v287.__r_.__value_.__r.__words[0];
      if ((v303.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v273 = &v303;
      else
        v273 = (std::string *)v303.__r_.__value_.__r.__words[0];
      if ((MeCab::EncoderFeatureIndex::convert((MeCab::EncoderFeatureIndex *)v313, (const char *)v272, (const char *)v273, v271) & 1) == 0)
      {
        v274 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner.cpp", 61);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v274, (uint64_t)"(", 1);
        v275 = (_QWORD *)std::ostream::operator<<();
        v276 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v275, (uint64_t)") [", 3);
        v277 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v276, (uint64_t)"feature_index.convert(txtfile.c_str(), model.c_str())", 53);
        v278 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v277, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v278, (uint64_t)"unexpected error in LBFGS routin", 32);
        MeCab::die::~die((MeCab::die *)&v312);
      }
      v313[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C09C418;
      std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&v317, v318[0]);
      std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)&v315, v316[0]);
      MeCab::FeatureIndex::~FeatureIndex((void **)&v313[0].__r_.__value_.__l.__data_);
    }
    v279 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"Done!", 5);
    std::ios_base::getloc((const std::ios_base *)((char *)v279 + *(_QWORD *)(*v279 - 24)));
    v280 = std::locale::use_facet((const std::locale *)v313, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v280->__vftable[2].~facet_0)(v280, 10);
    std::locale::~locale((std::locale *)v313);
    std::ostream::put();
    std::ostream::flush();
    __p[0].__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7E8];
    *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                              + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
    MEMORY[0x20BD061F8](&__p[0].__r_.__value_.__r.__words[1]);
    std::ostream::~ostream();
    MEMORY[0x20BD06354](&v320);
    if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v287.__r_.__value_.__l.__data_);
    std::__tree<std::__value_type<std::string,std::map<std::string,double>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,double>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,double>>>>::destroy(v289[0]);
    std::__tree<std::__value_type<std::string,std::map<std::string,double>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,double>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,double>>>>::destroy(v291[0]);
    if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v292.__r_.__value_.__l.__data_);
    if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v293.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v295.__r_.__value_.__l.__data_);
    if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v296.__r_.__value_.__l.__data_);
    if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v297.__r_.__value_.__l.__data_);
    if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v298.__r_.__value_.__l.__data_);
    if (v299)
    {
      v300 = v299;
      operator delete(v299);
    }
    if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v302.__r_.__value_.__l.__data_);
    if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v303.__r_.__value_.__l.__data_);
    if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v304.__r_.__value_.__l.__data_);
    v31 = 0;
  }
  else
  {
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"Usage: ", 7);
    v26 = (const char *)(v4 + 7);
    if (*((char *)v4 + 79) < 0)
      v26 = *(const char **)v26;
    v27 = strlen(v26);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" corpus model", 13);
    std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(_QWORD *)(*v29 - 24)));
    v30 = std::locale::use_facet((const std::locale *)v321, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale((std::locale *)v321);
    std::ostream::put();
    std::ostream::flush();
    v31 = 0xFFFFFFFFLL;
  }
  v321[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v305;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v321);
  if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v306.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,MeCab::FeatureSet>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::FeatureSet>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::FeatureSet>>>::destroy((uint64_t)&v310, v311[0]);
  v321[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v308;
  std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100]((void ***)v321);
  v321[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v307[1] + 8;
  std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100]((void ***)v321);
  v321[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v307;
  std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100]((void ***)v321);
  return v31;
}

void sub_2083C303C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21,uint64_t a22,uint64_t a23,uint64_t a24,_QWORD *a25,uint64_t a26,uint64_t a27,_QWORD *a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void *a66;
  char a71;
  void *a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *a79;
  void *a80;
  char a81;
  char a82;

  std::__tree<std::__value_type<std::string,std::map<std::string,double>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,double>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,double>>>>::destroy(a25);
  std::__tree<std::__value_type<std::string,std::map<std::string,double>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,double>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,double>>>>::destroy(a28);
  if (a35 < 0)
    operator delete(__p);
  if (a41 < 0)
    operator delete(a36);
  if (a47 < 0)
    operator delete(a42);
  if (a53 < 0)
    operator delete(a48);
  if (a59 < 0)
    operator delete(a54);
  if (a65 < 0)
    operator delete(a60);
  if (a71 < 0)
    operator delete(a66);
  if (a72)
    operator delete(a72);
  if (a74 < 0)
    operator delete(a73);
  if (a76 < 0)
    operator delete(a75);
  if (a78 < 0)
    operator delete(a77);
  STACK[0x508] = (unint64_t)&a79;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x508]);
  if (a81 < 0)
    operator delete(a80);
  std::__tree<std::__value_type<std::string,MeCab::FeatureSet>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::FeatureSet>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::FeatureSet>>>::destroy(a11, (_QWORD *)STACK[0x240]);
  STACK[0x508] = (unint64_t)&STACK[0x220];
  std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x508]);
  STACK[0x508] = (unint64_t)&STACK[0x208];
  std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x508]);
  STACK[0x508] = (unint64_t)&a82;
  std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x508]);
  _Unwind_Resume(a1);
}

double MeCab::Param::get<double>(uint64_t a1, char *a2)
{
  uint64_t v3;
  void **v4;
  double v5;
  std::string v7;
  void *__p[2];
  char v9;

  v3 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v4 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>(v3, __p);
  if (v9 < 0)
    operator delete(__p[0]);
  if ((void **)(a1 + 16) == v4)
  {
    *(_QWORD *)operator new() = 0;
    MEMORY[0x20BD0639C]();
    return 0.0;
  }
  else
  {
    if (*((char *)v4 + 79) < 0)
      std::string::__init_copy_ctor_external(&v7, (const std::string::value_type *)v4[7], (std::string::size_type)v4[8]);
    else
      v7 = *(std::string *)(v4 + 7);
    v5 = MeCab_internal::lexical_cast<double,std::string>((uint64_t)&v7);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_2083C3504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::Param::get<unsigned long>(uint64_t a1, char *a2)
{
  uint64_t v3;
  void **v4;
  uint64_t v5;
  std::string v7;
  void *__p[2];
  char v9;

  v3 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v4 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>(v3, __p);
  if (v9 < 0)
    operator delete(__p[0]);
  if ((void **)(a1 + 16) == v4)
  {
    *(_QWORD *)operator new() = 0;
    MEMORY[0x20BD0639C]();
    return 0;
  }
  else
  {
    if (*((char *)v4 + 79) < 0)
      std::string::__init_copy_ctor_external(&v7, (const std::string::value_type *)v4[7], (std::string::size_type)v4[8]);
    else
      v7 = *(std::string *)(v4 + 7);
    v5 = MeCab_internal::lexical_cast<unsigned long,std::string>((uint64_t)&v7);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_2083C3614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<double>::__append((char **)a1, a2 - v2);
  }
}

void MeCab::FreeList<mecab_learner_path_t>::~FreeList(_QWORD *a1)
{
  MeCab::FreeList<mecab_learner_path_t>::~FreeList(a1);
  JUMPOUT(0x20BD0639CLL);
}

double MeCab_internal::lexical_cast<double,std::string>(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  double v8;
  uint64_t v9;
  double v11;
  _QWORD v12[2];
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  v11 = 0.0;
  v2 = *(char *)(a1 + 23);
  if (v2 >= 0)
    v3 = a1;
  else
    v3 = *(_QWORD *)a1;
  if (v2 >= 0)
    v4 = *(unsigned __int8 *)(a1 + 23);
  else
    v4 = *(_QWORD *)(a1 + 8);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v3, v4);
  if ((*((_BYTE *)v5 + *(_QWORD *)(*v5 - 24) + 32) & 5) != 0
    || (v6 = (_QWORD *)MEMORY[0x20BD06234](v12, &v11), (*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0)
    || (v7 = std::ws[abi:ne180100]<char,std::char_traits<char>>(v12),
        (*((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 32) & 2) == 0))
  {
    *(_QWORD *)operator new() = 0;
    MEMORY[0x20BD0639C]();
    v8 = 0.0;
  }
  else
  {
    v8 = v11;
  }
  v12[0] = *MEMORY[0x24BEDB7F0];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v13[0] = v9;
  v13[1] = MEMORY[0x24BEDB848] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD06354](&v15);
  return v8;
}

void sub_2083C3808(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MeCab_internal::lexical_cast<unsigned long,std::string>(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD v12[2];
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  v11 = 0;
  v2 = *(char *)(a1 + 23);
  if (v2 >= 0)
    v3 = a1;
  else
    v3 = *(_QWORD *)a1;
  if (v2 >= 0)
    v4 = *(unsigned __int8 *)(a1 + 23);
  else
    v4 = *(_QWORD *)(a1 + 8);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v3, v4);
  if ((*((_BYTE *)v5 + *(_QWORD *)(*v5 - 24) + 32) & 5) != 0
    || (v6 = (_QWORD *)MEMORY[0x20BD0624C](v12, &v11), (*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0)
    || (v7 = std::ws[abi:ne180100]<char,std::char_traits<char>>(v12),
        (*((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 32) & 2) == 0))
  {
    *(_QWORD *)operator new() = 0;
    MEMORY[0x20BD0639C]();
    v8 = 0;
  }
  else
  {
    v8 = v11;
  }
  v12[0] = *MEMORY[0x24BEDB7F0];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v13[0] = v9;
  v13[1] = MEMORY[0x24BEDB848] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD06354](&v15);
  return v8;
}

void sub_2083C3984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void MeCab::EncoderLearnerTagger::~EncoderLearnerTagger(MeCab::EncoderLearnerTagger *this)
{
  MeCab::EncoderLearnerTagger::~EncoderLearnerTagger(this);
  JUMPOUT(0x20BD0639CLL);
}

{
  void *v2;

  *(_QWORD *)this = &off_24C09C460;
  v2 = (void *)*((_QWORD *)this + 53);
  if (v2)
  {
    *((_QWORD *)this + 54) = v2;
    operator delete(v2);
  }
  MeCab::LearnerTagger::~LearnerTagger((void **)this);
}

void MeCab::scoped_string::~scoped_string(MeCab::scoped_string *this)
{
  uint64_t v1;

  *(_QWORD *)this = &off_24C09C220;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    MEMORY[0x20BD06378](v1, 0x1000C8077774924);
}

{
  uint64_t v1;

  *(_QWORD *)this = &off_24C09C220;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    MEMORY[0x20BD06378](v1, 0x1000C8077774924);
  JUMPOUT(0x20BD0639CLL);
}

void MeCab::LearnerTagger::~LearnerTagger(void **this)
{
  MeCab::LearnerTagger::~LearnerTagger(this);
  JUMPOUT(0x20BD0639CLL);
}

{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  *this = &off_24C09C280;
  v2 = (char *)(this + 15);
  if (*((char *)this + 407) < 0)
    operator delete(this[48]);
  v3 = MEMORY[0x24BEDB800];
  v4 = *MEMORY[0x24BEDB800];
  this[15] = (void *)*MEMORY[0x24BEDB800];
  *(_QWORD *)&v2[*(_QWORD *)(v4 - 24)] = *(_QWORD *)(v3 + 24);
  this[16] = (void *)(MEMORY[0x24BEDB848] + 16);
  if (*((char *)this + 215) < 0)
    operator delete(this[24]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD06354](this + 29);
  v5 = this[12];
  if (v5)
  {
    this[13] = v5;
    operator delete(v5);
  }
  v6 = this[9];
  if (v6)
  {
    this[10] = v6;
    operator delete(v6);
  }
  this[4] = &off_24C09C220;
  v7 = this[5];
  if (v7)
    MEMORY[0x20BD06378](v7, 0x1000C8077774924);
}

MeCab::scoped_string *MeCab::scoped_string::scoped_string(MeCab::scoped_string *this)
{
  *(_QWORD *)this = &off_24C09C2E0;
  *((_QWORD *)this + 1) = 0;
  MeCab::scoped_string::reset_string(this, (const char *)&unk_2083E16CE);
  return this;
}

void sub_2083C3A6C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = &off_24C09C220;
  v3 = v1[1];
  if (v3)
    MEMORY[0x20BD06378](v3, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::scoped_string::reset_string(MeCab::scoped_string *this, const char *__s)
{
  char *v4;
  uint64_t result;

  strlen(__s);
  v4 = (char *)operator new[]();
  strcpy(v4, __s);
  result = *((_QWORD *)this + 1);
  if (result)
    result = MEMORY[0x20BD06378](result, 0x1000C8077774924);
  *((_QWORD *)this + 1) = v4;
  return result;
}

_QWORD *MeCab::scoped_array<char>::~scoped_array(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C09C220;
  v2 = a1[1];
  if (v2)
    MEMORY[0x20BD06378](v2, 0x1000C8077774924);
  return a1;
}

void MeCab::scoped_array<char>::~scoped_array(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C09C220;
  v1 = a1[1];
  if (v1)
    MEMORY[0x20BD06378](v1, 0x1000C8077774924);
  JUMPOUT(0x20BD0639CLL);
}

void MeCab::LBFGS::~LBFGS(MeCab::LBFGS *this)
{
  MeCab::LBFGS::~LBFGS(this);
  JUMPOUT(0x20BD0639CLL);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24C09C4E0;
  MeCab::LBFGS::clear(this);
  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 10) = v3;
    operator delete(v3);
  }
}

void MeCab::learner_thread::run(MeCab::learner_thread *this)
{
  double v2;
  unint64_t *v3;
  unint64_t *v4;
  void *v5;
  uint64_t v6;
  unint64_t i;

  v2 = 0.0;
  *((_OWORD *)this + 3) = 0u;
  v3 = (unint64_t *)((char *)this + 48);
  *((_OWORD *)this + 2) = 0u;
  v4 = (unint64_t *)((char *)this + 32);
  *((_QWORD *)this + 8) = 0;
  v5 = (void *)*((_QWORD *)this + 10);
  v6 = v3[5] - (_QWORD)v5;
  if (v6 >= 1)
    bzero(v5, 8 * (((unint64_t)v6 >> 3) - ((unint64_t)v6 > 7)) + 8);
  for (i = *((unsigned __int16 *)this + 8); i < *((_QWORD *)this + 3); i += *((unsigned __int16 *)this + 9))
  {
    *((double *)this + 8) = MeCab::EncoderLearnerTagger::gradient(*(MeCab::EncoderLearnerTagger **)(*((_QWORD *)this + 9) + 8 * i), *((double **)this + 10), v2)+ *((double *)this + 8);
    *((_QWORD *)this + 7) += (int)MeCab::EncoderLearnerTagger::eval(*(MeCab::EncoderLearnerTagger **)(*((_QWORD *)this + 9) + 8 * i), v3, v4, v3 - 1);
  }
}

void MeCab::learner_thread::~learner_thread(MeCab::learner_thread *this)
{
  void *v2;

  *(_QWORD *)this = &off_24C09C320;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24C09C320;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0639CLL);
}

uint64_t MeCab::thread::wrapper(MeCab::thread *this, void *a2)
{
  (**(void (***)(MeCab::thread *, void *))this)(this, a2);
  return 0;
}

void std::vector<MeCab::learner_thread>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 104;
      v7 = v4 - 104;
      do
      {
        v8 = *(_QWORD *)v7;
        v7 -= 104;
        (*(void (**)(char *))(v8 + 8))(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *MeCab::FreeList<mecab_learner_path_t>::~FreeList(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;

  *a1 = &off_24C09C5C0;
  a1[5] = 0;
  v4 = a1 + 1;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
    if (!v3)
      return a1;
    goto LABEL_7;
  }
  v5 = 0;
  do
  {
    if (v2[v5])
    {
      MEMORY[0x20BD06378](v2[v5], 0x1070C805CA89F8DLL);
      v5 = a1[5];
      v2 = (_QWORD *)a1[1];
      v3 = (_QWORD *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t MeCab::TokenizerImpl<mecab_learner_node_t,mecab_learner_path_t>::~TokenizerImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  *(_QWORD *)a1 = &off_24C09C2C0;
  MeCab::TokenizerImpl<mecab_node_t,mecab_path_t>::close((_QWORD *)a1);
  if (*(char *)(a1 + 1263) < 0)
    operator delete(*(void **)(a1 + 1240));
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 976) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 976 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 984) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 1071) < 0)
    operator delete(*(void **)(a1 + 1048));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD06354](a1 + 1088);
  MeCab::CharProperty::~CharProperty((void **)(a1 + 280));
  *(_QWORD *)(a1 + 248) = &off_24C09C200;
  v4 = *(_QWORD *)(a1 + 256);
  if (v4)
    MEMORY[0x20BD06378](v4, 0x1000C8094CA146DLL);
  v5 = *(void **)(a1 + 224);
  if (v5)
  {
    *(_QWORD *)(a1 + 232) = v5;
    operator delete(v5);
  }
  MeCab::FreeList<mecab_dictionary_info_t>::~FreeList((_QWORD *)(a1 + 168));
  MeCab::FreeList<mecab_learner_node_t>::~FreeList((_QWORD *)(a1 + 112));
  *(_QWORD *)(a1 + 96) = &off_24C09C220;
  v6 = *(_QWORD *)(a1 + 104);
  if (v6)
    MEMORY[0x20BD06378](v6, 0x1000C8077774924);
  *(_QWORD *)(a1 + 80) = &off_24C09C220;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
    MEMORY[0x20BD06378](v7, 0x1000C8077774924);
  v8 = *(void **)(a1 + 32);
  if (v8)
  {
    *(_QWORD *)(a1 + 40) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 8);
  if (v9)
  {
    *(_QWORD *)(a1 + 16) = v9;
    operator delete(v9);
  }
  return a1;
}

_QWORD *MeCab::scoped_array<trie_search_result_type_t>::~scoped_array(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C09C200;
  v2 = a1[1];
  if (v2)
    MEMORY[0x20BD06378](v2, 0x1000C8094CA146DLL);
  return a1;
}

void MeCab::TokenizerImpl<mecab_learner_node_t,mecab_learner_path_t>::~TokenizerImpl(uint64_t a1)
{
  MeCab::TokenizerImpl<mecab_learner_node_t,mecab_learner_path_t>::~TokenizerImpl(a1);
  JUMPOUT(0x20BD0639CLL);
}

void MeCab::scoped_array<trie_search_result_type_t>::~scoped_array(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C09C200;
  v1 = a1[1];
  if (v1)
    MEMORY[0x20BD06378](v1, 0x1000C8094CA146DLL);
  JUMPOUT(0x20BD0639CLL);
}

_QWORD *MeCab::FreeList<mecab_dictionary_info_t>::~FreeList(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;

  *a1 = &off_24C09C5E0;
  a1[5] = 0;
  v4 = a1 + 1;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
    if (!v3)
      return a1;
    goto LABEL_7;
  }
  v5 = 0;
  do
  {
    if (v2[v5])
    {
      MEMORY[0x20BD06378](v2[v5], 0x1070C802D7A0B02);
      v5 = a1[5];
      v2 = (_QWORD *)a1[1];
      v3 = (_QWORD *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void MeCab::FreeList<mecab_dictionary_info_t>::~FreeList(_QWORD *a1)
{
  MeCab::FreeList<mecab_dictionary_info_t>::~FreeList(a1);
  JUMPOUT(0x20BD0639CLL);
}

_QWORD *MeCab::FreeList<mecab_learner_node_t>::~FreeList(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;

  *a1 = &off_24C09C5A0;
  a1[5] = 0;
  v4 = a1 + 1;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
    if (!v3)
      return a1;
    goto LABEL_7;
  }
  v5 = 0;
  do
  {
    if (v2[v5])
    {
      MEMORY[0x20BD06378](v2[v5], 0x1070C80728FD4AFLL);
      v5 = a1[5];
      v2 = (_QWORD *)a1[1];
      v3 = (_QWORD *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void MeCab::FreeList<mecab_learner_node_t>::~FreeList(_QWORD *a1)
{
  MeCab::FreeList<mecab_learner_node_t>::~FreeList(a1);
  JUMPOUT(0x20BD0639CLL);
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<std::string,double>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,double>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,double>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, __int128 **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  _QWORD *v10;
  uint64_t *v11;
  __int128 *v12;
  uint64_t *v13;
  std::string *v14;
  __int128 v15;
  uint64_t *v16;
  _QWORD v18[2];
  char v19;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (!v5)
    goto LABEL_10;
  v7 = a1 + 1;
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v10 = v5 + 4;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v5 + 4) & 0x80) == 0)
        break;
      v5 = *v8;
      v7 = v8;
      if (!*v8)
        goto LABEL_10;
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2) & 0x80) == 0)
      break;
    v7 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_10;
  }
  v11 = *v7;
  if (!*v7)
  {
LABEL_10:
    v12 = *a3;
    v13 = (uint64_t *)operator new(0x50uLL);
    v18[0] = v13;
    v18[1] = v6;
    v19 = 0;
    v14 = (std::string *)(v13 + 4);
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
    }
    else
    {
      v15 = *v12;
      v13[6] = *((_QWORD *)v12 + 2);
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
    }
    v13[9] = 0;
    v13[8] = 0;
    v13[7] = (uint64_t)(v13 + 8);
    v19 = 1;
    *v13 = 0;
    v13[1] = 0;
    v13[2] = (uint64_t)v8;
    *v7 = v13;
    v16 = (uint64_t *)**a1;
    if (v16)
    {
      *a1 = v16;
      v13 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v11 = (uint64_t *)v18[0];
    v18[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,double>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,double>>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
  }
  return v11;
}

void sub_2083C4534(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,double>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,double>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,double>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,double>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,double>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,double>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(a1 + 24, *(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, __int128 **a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  __int128 *v8;
  std::string *v9;
  __int128 v10;
  uint64_t v12;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v8 = *a3;
    v6 = (uint64_t *)operator new(0x40uLL);
    v9 = (std::string *)(v6 + 4);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v10 = *v8;
      v6[6] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__insert_node_at(a1, v12, v7, v6);
  }
  return v6;
}

void sub_2083C4674(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::map<std::string,double>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,double>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,double>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,double>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,double>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,double>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::map<std::string,double>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,double>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,double>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,double>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t MeCab::EncoderLearnerTagger::read(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::locale::id *v9;
  const std::locale::facet *v10;
  _QWORD *v11;
  BOOL v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  char v18;
  char *v19;
  char v20;
  char *v21;
  const char *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  size_t v29;
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t *v37;
  char *v38;
  uint64_t v39;
  std::string::size_type v40;
  uint64_t v41;
  char *v42;
  std::string::size_type size;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  const char *v49;
  size_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  size_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  size_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  size_t v79;
  char *v80;
  size_t v81;
  int v82;
  _QWORD *v83;
  _DWORD *v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  int v88;
  _DWORD *v89;
  uint64_t v90;
  uint64_t v91;
  int *v92;
  int v93;
  unint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  _QWORD *v107;
  char *v108;
  uint64_t v109;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  size_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  size_t v122;
  char *v123;
  size_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int16 v129;
  uint64_t v130;
  _QWORD *v131;
  const char *v132;
  size_t v133;
  _QWORD *v134;
  const std::locale::facet *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  size_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  char *__p;
  char *v151;
  char *v152;
  std::string v153;
  void *v154;
  void *v155;
  uint64_t v156;
  void **v157;
  std::locale v158;
  char __s[8192];
  uint64_t v160;

  v4 = MEMORY[0x24BDAC7A8](a1, a2, a3, a4);
  v144 = v5;
  v7 = v6;
  v8 = (_QWORD *)v4;
  v160 = *MEMORY[0x24BDAC8D0];
  v154 = 0;
  v155 = 0;
  v156 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v153, (char *)&unk_2083E16CE);
  v9 = (std::locale::id *)MEMORY[0x24BEDB350];
  __p = 0;
  v151 = 0;
  v152 = 0;
  v149 = v8;
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(*v7 - 24)));
    v10 = std::locale::use_facet(&v158, v9);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale(&v158);
    v11 = (_QWORD *)std::istream::getline();
    if ((*((_BYTE *)v11 + *(_QWORD *)(*v11 - 24) + 32) & 5) != 0)
    {
      std::ios_base::clear((std::ios_base *)((char *)v7 + *(_QWORD *)(*v7 - 24)), 3u);
      v41 = 1;
      v42 = __p;
      if (!__p)
        goto LABEL_113;
      goto LABEL_112;
    }
    v12 = *(_DWORD *)__s == 5459781 || __s[0] == 0;
    v13 = !v12;
    v14 = operator new();
    v15 = v14;
    *(_OWORD *)(v14 + 112) = 0u;
    *(_OWORD *)(v14 + 128) = 0u;
    *(_OWORD *)(v14 + 80) = 0u;
    *(_OWORD *)(v14 + 96) = 0u;
    *(_OWORD *)(v14 + 48) = 0u;
    *(_OWORD *)(v14 + 64) = 0u;
    *(_OWORD *)(v14 + 16) = 0u;
    *(_OWORD *)(v14 + 32) = 0u;
    *(_OWORD *)v14 = 0u;
    if (v13)
    {
      v155 = v154;
      v16 = __s;
      v158.__locale_ = (std::locale::__imp *)__s;
      v17 = strlen(__s);
      v18 = 0;
      v19 = &__s[v17];
      while (1)
      {
        v20 = v18;
        v21 = v19;
        if (v16 != v19)
        {
          while (*v16 != 9)
          {
            if (++v16 == v19)
            {
              v21 = v19;
              goto LABEL_16;
            }
          }
          v21 = v16;
        }
LABEL_16:
        *v21 = 0;
        v157 = &v154;
        std::back_insert_iterator<std::vector<char *>>::operator=[abi:ne180100](&v157, &v158);
        if (v21 == v19)
          break;
        v16 = v21 + 1;
        v158.__locale_ = (std::locale::__imp *)(v21 + 1);
        v18 = 1;
        if ((v20 & 1) != 0)
        {
          v8 = v149;
          goto LABEL_22;
        }
      }
      v8 = v149;
      if ((v20 & 1) == 0)
      {
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner_tagger.cpp", 68);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"(", 1);
        v24 = (_QWORD *)std::ostream::operator<<();
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
        v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"size == 2", 9);
        v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"] ", 2);
        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"format error: ", 14);
        v29 = strlen(__s);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)__s, v29);
        MeCab::die::~die((MeCab::die *)&v158);
      }
LABEL_22:
      *(_BYTE *)(v15 + 87) = 0;
      v31 = strlen(*(const char **)v154);
      *(_WORD *)(v15 + 78) = v31;
      *(_WORD *)(v15 + 76) = v31;
    }
    else
    {
      *(_BYTE *)(v14 + 87) = 3;
    }
    if (v151 >= v152)
    {
      v33 = (v151 - __p) >> 3;
      if ((unint64_t)(v33 + 1) >> 61)
        std::vector<char *>::__throw_length_error[abi:ne180100]();
      v34 = (v152 - __p) >> 2;
      if (v34 <= v33 + 1)
        v34 = v33 + 1;
      if ((unint64_t)(v152 - __p) >= 0x7FFFFFFFFFFFFFF8)
        v35 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v35 = v34;
      if (v35)
        v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>((uint64_t)&v152, v35);
      else
        v36 = 0;
      v37 = (uint64_t *)&v36[8 * v33];
      *v37 = v15;
      v32 = (char *)(v37 + 1);
      v38 = v151;
      if (v151 != __p)
      {
        do
        {
          v39 = *((_QWORD *)v38 - 1);
          v38 -= 8;
          *--v37 = v39;
        }
        while (v38 != __p);
        v38 = __p;
      }
      __p = (char *)v37;
      v152 = &v36[8 * v35];
      if (v38)
        operator delete(v38);
    }
    else
    {
      *(_QWORD *)v151 = v15;
      v32 = v151 + 8;
    }
    v151 = v32;
    if (!v13)
      break;
    v40 = strlen(*(const char **)v154);
    std::string::append(&v153, *(const std::string::value_type **)v154, v40);
  }
  size = HIBYTE(v153.__r_.__value_.__r.__words[2]);
  if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v153.__r_.__value_.__l.__size_;
  if (!size)
  {
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner_tagger.cpp", 68);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"(", 1);
    v45 = (_QWORD *)std::ostream::operator<<();
    v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)") [", 3);
    v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"!sentence.empty()", 17);
    v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"empty sentence", 14);
    MeCab::die::~die((MeCab::die *)&v158);
  }
  MeCab::scoped_string::reset_string((uint64_t)(v8 + 4), (uint64_t)&v153);
  v49 = (const char *)v8[5];
  v8[6] = v49;
  if (v49)
  {
    v50 = strlen(v49);
    v8[7] = &v49[v50];
    v8[8] = v50;
    std::vector<mecab_learner_node_t *>::resize(v8 + 12, v50 + 2);
    v51 = (void *)v8[12];
    v52 = v8[13] - (_QWORD)v51;
    if (v52 >= 1)
      bzero(v51, 8 * (((unint64_t)v52 >> 3) - ((unint64_t)v52 > 7)) + 8);
    std::vector<mecab_learner_node_t *>::resize(v8 + 9, v8[8] + 2);
    v53 = (void *)v8[9];
    v54 = v8[10] - (_QWORD)v53;
    if (v54 >= 1)
      bzero(v53, 8 * (((unint64_t)v54 >> 3) - ((unint64_t)v54 > 7)) + 8);
    v55 = v8[1];
    MeCab::FreeList<mecab_learner_node_t>::alloc((_QWORD *)(v55 + 112));
    *(_QWORD *)(v56 + 56) = "BOS/EOS";
    *(_QWORD *)(v56 + 64) = *(_QWORD *)(v55 + 88);
    *(_BYTE *)(v56 + 87) = 2;
    *(_QWORD *)v8[12] = v56;
    *(_QWORD *)(*(_QWORD *)v8[12] + 56) = v8[6];
    v57 = v8[1];
    MeCab::FreeList<mecab_learner_node_t>::alloc((_QWORD *)(v57 + 112));
    *(_QWORD *)(v58 + 56) = "BOS/EOS";
    *(_QWORD *)(v58 + 64) = *(_QWORD *)(v57 + 88);
    *(_BYTE *)(v58 + 87) = 3;
    *(_QWORD *)(v8[9] + 8 * v8[8]) = v58;
  }
  v59 = __p;
  v60 = *(_QWORD *)__p;
  if (*(_BYTE *)(*(_QWORD *)__p + 87) != 3)
  {
    v111 = 0;
    v112 = 0;
    do
    {
      v148 = v111;
      v113 = v8[9];
      v114 = *(_QWORD *)(v113 + 8 * v112);
      if (v114)
      {
        v146 = v59;
        v115 = v8;
        v116 = v8[51];
        v117 = v115[52];
        v118 = *(unsigned __int16 *)(v60 + 76);
        while (1)
        {
          if ((_DWORD)v118 == *(unsigned __int16 *)(v114 + 76)
            && !strncmp(*(const char **)(v60 + 56), *(const char **)(v114 + 56), v118))
          {
            v119 = *(char **)(v60 + 64);
            v120 = *(char **)(v114 + 64);
            v121 = *(_BYTE *)(v114 + 87) == 1 ? v117 : v116;
            v122 = strlen(*(const char **)(v60 + 64));
            v123 = MeCab::repeat_find_if<char const*,char>(v119, &v119[v122], 44, v121);
            v124 = strlen(v120);
            if (v123 - v119 == MeCab::repeat_find_if<char const*,char>(v120, &v120[v124], 44, v121) - v120
              && !strncmp(v119, v120, v123 - v119))
            {
              break;
            }
          }
          v114 = *(_QWORD *)(v114 + 24);
          if (!v114)
            goto LABEL_131;
        }
        v125 = v148;
        v8 = v149;
        v59 = v146;
      }
      else
      {
        *(_QWORD *)(v113 + 8 * v112) = 0;
LABEL_131:
        v8 = v149;
        MeCab::FreeList<mecab_learner_node_t>::alloc((_QWORD *)(v149[1] + 112));
        v125 = v148;
        v127 = v126;
        *(_QWORD *)(v126 + 56) = v149[6] + v112;
        v128 = *(_QWORD *)&__p[8 * v148];
        v129 = strlen(*(const char **)(v128 + 56));
        *(_WORD *)(v127 + 78) = v129;
        *(_WORD *)(v127 + 76) = v129;
        *(_QWORD *)(v127 + 64) = MeCab::FeatureIndex::strdup((MeCab::FeatureIndex *)v149[3], *(const char **)(v128 + 64));
        *(_BYTE *)(v127 + 87) = 0;
        *(_QWORD *)(v127 + 128) = 0;
        *(_QWORD *)(v127 + 112) = 0;
        v130 = v149[9];
        *(_QWORD *)(v127 + 24) = *(_QWORD *)(v130 + 8 * v112);
        *(_QWORD *)(v130 + 8 * v112) = v127;
        v131 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"adding virtual node: ", 21);
        v132 = *(const char **)(v127 + 64);
        v133 = strlen(v132);
        v134 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)v132, v133);
        std::ios_base::getloc((const std::ios_base *)((char *)v134 + *(_QWORD *)(*v134 - 24)));
        v135 = std::locale::use_facet(&v158, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v135->__vftable[2].~facet_0)(v135, 10);
        std::locale::~locale(&v158);
        std::ostream::put();
        std::ostream::flush();
        v59 = __p;
        v118 = *(unsigned __int16 *)(*(_QWORD *)&__p[8 * v148] + 76);
      }
      v112 += v118;
      v111 = v125 + 1;
      v60 = *(_QWORD *)&v59[8 * v111];
    }
    while (*(_BYTE *)(v60 + 87) != 3);
  }
  v61 = v8[8];
  if ((v61 & 0x8000000000000000) == 0)
  {
    v62 = 0;
    do
    {
      if (*(_QWORD *)(v8[12] + 8 * v62))
      {
        v63 = v8[9];
        v64 = *(_QWORD *)(v63 + 8 * v62);
        if (!v64)
          *(_QWORD *)(v63 + 8 * v62) = 0;
        MeCab::LearnerTagger::connect((uint64_t)v8, v62, v64);
        v61 = v8[8];
      }
      ++v62;
    }
    while (v61 >= v62);
  }
  v65 = (uint64_t *)v8[12];
  if (!v65[v61])
  {
    v136 = v8[9];
    v137 = *(_QWORD *)(v136 + 8 * v61);
    if (!v137)
    {
      *(_QWORD *)(v136 + 8 * v61) = 0;
      v136 = v8[9];
    }
    *(_QWORD *)(v136 + 8 * v61) = v137;
    v65 = (uint64_t *)v8[12];
    if ((v61 & 0x8000000000000000) == 0)
    {
      v138 = v61;
      while (!v65[v138])
      {
        if (v138-- <= 0)
          goto LABEL_62;
      }
      MeCab::LearnerTagger::connect((uint64_t)v8, v138, *(_QWORD *)(v8[9] + 8 * v61));
      v65 = (uint64_t *)v8[12];
    }
  }
LABEL_62:
  v66 = *v65;
  *(_QWORD *)(*v65 + 48) = 0;
  v42 = v151;
  if (v151 == __p)
  {
    v108 = v151;
LABEL_144:
    v140 = v149[8];
    v141 = v149[9];
    *(_QWORD *)(v66 + 48) = *(_QWORD *)(v141 + 8 * v140);
    *(_QWORD *)(*(_QWORD *)(v141 + 8 * v140) + 48) = 0;
    if (v108 != v42)
    {
      v142 = 0;
      do
      {
        v143 = *(_QWORD *)&v42[8 * v142];
        if (*(_QWORD *)(v143 + 56))
        {
          MEMORY[0x20BD06378](*(_QWORD *)(v143 + 56), 0x1000C8077774924);
          v143 = *(_QWORD *)&__p[8 * v142];
        }
        if (!*(_QWORD *)(v143 + 64)
          || (MEMORY[0x20BD06378](*(_QWORD *)(v143 + 64), 0x1000C8077774924), v42 = __p, *(_QWORD *)&__p[8 * v142]))
        {
          MEMORY[0x20BD0639C]();
          v42 = __p;
        }
        ++v142;
      }
      while (v142 < (v151 - v42) >> 3);
    }
    v41 = 1;
    if (v42)
      goto LABEL_112;
  }
  else
  {
    v67 = 0;
    v68 = 0;
    v42 = __p;
    v69 = v66;
    while (1)
    {
      v70 = *(_QWORD *)(v149[9] + 8 * v68);
      if (!v70)
        break;
      v145 = v68;
      v147 = v67;
      v66 = 0;
      v71 = *(_QWORD *)&v42[8 * v67];
      v72 = *(unsigned __int8 *)(v71 + 87);
      do
      {
        v73 = v66;
        v66 = v70;
        if (v72 != 3)
        {
          v74 = *(unsigned __int16 *)(v71 + 76);
          if ((_DWORD)v74 != *(unsigned __int16 *)(v70 + 76))
            goto LABEL_73;
          v75 = v149[51];
          v76 = v149[52];
          if (strncmp(*(const char **)(v71 + 56), *(const char **)(v70 + 56), v74))
            goto LABEL_73;
          v77 = *(char **)(v71 + 64);
          v78 = *(char **)(v70 + 64);
          if (*(_BYTE *)(v70 + 87) == 1)
            v75 = v76;
          v79 = strlen(*(const char **)(v71 + 64));
          v80 = MeCab::repeat_find_if<char const*,char>(v77, &v77[v79], 44, v75);
          v81 = strlen(v78);
          if (v80 - v77 != MeCab::repeat_find_if<char const*,char>(v78, &v78[v81], 44, v75) - v78
            || (v82 = strncmp(v77, v78, v80 - v77), v66 = v70, v82))
          {
LABEL_73:
            v66 = v73;
          }
        }
        v70 = *(_QWORD *)(v70 + 24);
      }
      while (v70);
      if (!v66)
        break;
      v83 = *(_QWORD **)(v66 + 40);
      if (!v83)
        break;
      while (v69 != v83[2])
      {
        v83 = (_QWORD *)v83[3];
        if (!v83)
          goto LABEL_111;
      }
      v84 = (_DWORD *)v83[5];
      LODWORD(v85) = *v84;
      if (*v84 != -1)
      {
        v86 = *v144;
        v87 = v84 + 1;
        do
        {
          v85 = (int)v85;
          if ((int)v85 >= (v144[1] - v86) >> 3)
          {
            std::vector<double>::resize((uint64_t)v144, (int)v85 + 1);
            v85 = *(v87 - 1);
            v86 = *v144;
          }
          *(double *)(v86 + 8 * v85) = *(double *)(v86 + 8 * v85) + 1.0;
          v88 = *v87++;
          LODWORD(v85) = v88;
        }
        while (v88 != -1);
      }
      if (*(_BYTE *)(*v83 + 87) != 3)
      {
        v89 = *(_DWORD **)(*v83 + 128);
        LODWORD(v90) = *v89;
        if (*v89 != -1)
        {
          v91 = *v144;
          v92 = v89 + 1;
          do
          {
            v90 = (int)v90;
            if ((int)v90 >= (v144[1] - v91) >> 3)
            {
              std::vector<double>::resize((uint64_t)v144, (int)v90 + 1);
              v90 = *(v92 - 1);
              v91 = *v144;
            }
            *(double *)(v91 + 8 * v90) = *(double *)(v91 + 8 * v90) + 1.0;
            v93 = *v92++;
            LODWORD(v90) = v93;
          }
          while (v93 != -1);
        }
      }
      v95 = (_QWORD *)v149[54];
      v94 = v149[55];
      if ((unint64_t)v95 >= v94)
      {
        v97 = v149[53];
        v98 = ((uint64_t)v95 - v97) >> 3;
        if ((unint64_t)(v98 + 1) >> 61)
          std::vector<char *>::__throw_length_error[abi:ne180100]();
        v99 = v94 - v97;
        v100 = v99 >> 2;
        if (v99 >> 2 <= (unint64_t)(v98 + 1))
          v100 = v98 + 1;
        if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8)
          v101 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v101 = v100;
        if (v101)
          v101 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mecab_learner_path_t *>>(v101);
        else
          v102 = 0;
        v103 = (_QWORD *)(v101 + 8 * v98);
        *v103 = v83;
        v96 = v103 + 1;
        v105 = (char *)v149[53];
        v104 = (char *)v149[54];
        if (v104 == v105)
        {
          v107 = v149;
        }
        else
        {
          do
          {
            v106 = *((_QWORD *)v104 - 1);
            v104 -= 8;
            *--v103 = v106;
          }
          while (v104 != v105);
          v107 = v149;
          v104 = (char *)v149[53];
        }
        v107[53] = v103;
        v107[54] = v96;
        v107[55] = v101 + 8 * v102;
        if (v104)
          operator delete(v104);
      }
      else
      {
        *v95 = v83;
        v96 = v95 + 1;
      }
      v42 = __p;
      v149[54] = v96;
      *(_QWORD *)(v69 + 48) = v66;
      v108 = v151;
      v109 = *(_QWORD *)&__p[8 * v147];
      if (*(_BYTE *)(v109 + 87) != 3)
      {
        v68 = strlen(*(const char **)(v109 + 56)) + v145;
        v67 = v147 + 1;
        v69 = v66;
        if (v147 + 1 < (unint64_t)((v151 - __p) >> 3))
          continue;
      }
      goto LABEL_144;
    }
LABEL_111:
    v41 = 0;
    if (v42)
LABEL_112:
      operator delete(v42);
  }
LABEL_113:
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v153.__r_.__value_.__l.__data_);
  if (v154)
  {
    v155 = v154;
    operator delete(v154);
  }
  return v41;
}

void sub_2083C5300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,std::locale a27)
{
  if (__p)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a23)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

char *MeCab::`anonymous namespace'::mystrdup(MeCab::_anonymous_namespace_ *this, const char *a2)
{
  size_t v3;
  char *v4;

  v3 = strlen((const char *)this) + 1;
  v4 = (char *)operator new[]();
  return strncpy(v4, (const char *)this, v3);
}

uint64_t MeCab::scoped_string::reset_string(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  const char *v6;
  uint64_t result;

  v4 = (char *)operator new[]();
  v5 = v4;
  if (*(char *)(a2 + 23) >= 0)
    v6 = (const char *)a2;
  else
    v6 = *(const char **)a2;
  strcpy(v4, v6);
  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = MEMORY[0x20BD06378](result, 0x1000C8077774924);
  *(_QWORD *)(a1 + 8) = v5;
  return result;
}

uint64_t MeCab::EncoderLearnerTagger::eval(MeCab::EncoderLearnerTagger *this, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  size_t v20;
  char *v21;
  size_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v28;

  v5 = **((_QWORD **)this + 12);
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(_QWORD *)(v5 + 48);
  v8 = *(_QWORD *)(v7 + 48);
  if (v8)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = v6;
    while (1)
    {
      v6 = *(_QWORD *)(v13 + 8);
      if (!v6)
        break;
      if (v11 == v10)
      {
        v14 = *(unsigned __int16 *)(v7 + 76);
        if ((_DWORD)v14 != *(unsigned __int16 *)(v13 + 76))
          goto LABEL_12;
        v16 = *((_QWORD *)this + 51);
        v15 = *((_QWORD *)this + 52);
        if (strncmp(*(const char **)(v7 + 56), *(const char **)(v13 + 56), v14))
          goto LABEL_12;
        v28 = v12;
        v17 = *(char **)(v7 + 64);
        v18 = *(char **)(v13 + 64);
        v19 = *(_BYTE *)(v13 + 87) == 1 ? v15 : v16;
        v20 = strlen(v17);
        v21 = MeCab::repeat_find_if<char const*,char>(v17, &v17[v20], 44, v19);
        v22 = strlen(v18);
        if (v21 - v17 == MeCab::repeat_find_if<char const*,char>(v18, &v18[v22], 44, v19) - v18
          && !strncmp(v17, v18, v21 - v17))
        {
          ++*a2;
          v12 = v28;
        }
        else
        {
LABEL_12:
          v12 = 1;
        }
        ++*a3;
        ++*a4;
        v11 = v10 + *(unsigned __int16 *)(v6 + 78);
        v10 += *(unsigned __int16 *)(v8 + 78);
      }
      else if (v11 >= v10)
      {
        v10 += *(unsigned __int16 *)(v8 + 78);
        ++*a3;
        v12 = 1;
        v6 = v13;
      }
      else
      {
        v11 += *(unsigned __int16 *)(v6 + 78);
        ++*a4;
        v12 = 1;
        v8 = v7;
      }
      v7 = v8;
      v8 = *(_QWORD *)(v8 + 48);
      v13 = v6;
      if (!v8)
        goto LABEL_24;
    }
    v23 = *a3;
    do
    {
      ++v23;
      v8 = *(_QWORD *)(v8 + 48);
    }
    while (v8);
    *a3 = v23;
    v6 = v13;
  }
  else
  {
    v12 = 0;
  }
LABEL_24:
  v24 = *(_QWORD *)(v6 + 8);
  if (v24)
  {
    v25 = *a4;
    do
    {
      ++v25;
      v24 = *(_QWORD *)(v24 + 8);
    }
    while (v24);
    *a4 = v25;
  }
  return v12;
}

uint64_t MeCab::LearnerTagger::connect(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;

  if (a3)
  {
    v3 = a3;
    v4 = result;
    v39 = a2;
    do
    {
      v5 = *(_QWORD *)(v4 + 96);
      v6 = *(_QWORD *)(v5 + 8 * a2);
      if (v6)
      {
        do
        {
          v7 = *(_QWORD **)(v4 + 16);
          v8 = v7[5];
          v9 = v7[6];
          v10 = v7[4];
          if (v10 == v9)
          {
            v10 = 0;
            ++v8;
            v7[4] = 0;
            v7[5] = v8;
          }
          v11 = v7[1];
          if (v8 == (v7[2] - v11) >> 3)
          {
            is_mul_ok(v9, 0x30uLL);
            v12 = operator new[]();
            v13 = v12;
            v15 = (uint64_t *)v7[2];
            v14 = v7[3];
            if ((unint64_t)v15 >= v14)
            {
              v17 = v7[1];
              v18 = ((uint64_t)v15 - v17) >> 3;
              if ((unint64_t)(v18 + 1) >> 61)
                std::vector<char *>::__throw_length_error[abi:ne180100]();
              v19 = v14 - v17;
              v20 = v19 >> 2;
              if (v19 >> 2 <= (unint64_t)(v18 + 1))
                v20 = v18 + 1;
              if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
                v21 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v21 = v20;
              if (v21)
                v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mecab_learner_path_t *>>(v21);
              else
                v22 = 0;
              v23 = (uint64_t *)(v21 + 8 * v18);
              *v23 = v13;
              v16 = v23 + 1;
              v25 = (char *)v7[1];
              v24 = (char *)v7[2];
              if (v24 != v25)
              {
                do
                {
                  v26 = *((_QWORD *)v24 - 1);
                  v24 -= 8;
                  *--v23 = v26;
                }
                while (v24 != v25);
                v24 = (char *)v7[1];
              }
              v7[1] = v23;
              v7[2] = v16;
              v7[3] = v21 + 8 * v22;
              if (v24)
                operator delete(v24);
            }
            else
            {
              *v15 = v12;
              v16 = v15 + 1;
            }
            v7[2] = v16;
            v11 = v7[1];
            v10 = v7[4];
            v8 = v7[5];
          }
          v27 = *(_QWORD *)(v11 + 8 * v8);
          v7[4] = v10 + 1;
          v28 = v27 + 48 * v10;
          *(_QWORD *)(v28 + 40) = 0;
          v29 = (_QWORD *)(v28 + 40);
          *(_OWORD *)(v28 + 8) = 0u;
          *(_OWORD *)(v28 + 24) = 0u;
          *(_QWORD *)v28 = v3;
          *(_QWORD *)(v28 + 24) = *(_QWORD *)(v3 + 40);
          *(_QWORD *)(v3 + 40) = v28;
          *(_QWORD *)(v28 + 8) = *(_QWORD *)(v6 + 32);
          *(_QWORD *)(v28 + 16) = v6;
          *(_QWORD *)(v6 + 32) = v28;
          result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 24) + 24))(*(_QWORD *)(v4 + 24));
          if ((result & 1) == 0)
          {
            v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner_tagger.cpp", 68);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"(", 1);
            v31 = (_QWORD *)std::ostream::operator<<();
            v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)") [", 3);
            v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"feature_index_->buildFeature(path)", 34);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"] ", 2);
            MeCab::die::~die((MeCab::die *)&v41);
          }
          if (!*v29)
          {
            v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner_tagger.cpp", 68);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"(", 1);
            v35 = (_QWORD *)std::ostream::operator<<();
            v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)") [", 3);
            v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"path->fvector", 13);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"] ", 2);
            MeCab::die::~die((MeCab::die *)&v40);
          }
          v6 = *(_QWORD *)(v6 + 16);
        }
        while (v6);
        v5 = *(_QWORD *)(v4 + 96);
      }
      a2 = v39;
      v38 = *(unsigned __int16 *)(v3 + 78) + v39;
      *(_QWORD *)(v3 + 16) = *(_QWORD *)(v5 + 8 * v38);
      *(_QWORD *)(v5 + 8 * v38) = v3;
      v3 = *(_QWORD *)(v3 + 24);
    }
    while (v3);
  }
  return result;
}

void sub_2083C5930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  MeCab::die::~die((MeCab::die *)&a12);
}

void sub_2083C5948()
{
  _Unwind_Exception *v0;

  _Unwind_Resume(v0);
}

void std::vector<mecab_learner_node_t *>::resize(_QWORD *a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;

  v3 = (char *)*a1;
  v4 = (char *)a1[1];
  v5 = (uint64_t)&v4[-*a1] >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v20 = &v3[8 * a2];
    goto LABEL_17;
  }
  v6 = a2 - v5;
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  if (a2 - v5 <= (v8 - (uint64_t)v4) >> 3)
  {
    bzero(v4, 8 * v6);
    v20 = &v4[8 * v6];
LABEL_17:
    a1[1] = v20;
    return;
  }
  if (a2 >> 61)
    std::vector<char *>::__throw_length_error[abi:ne180100]();
  v9 = v8 - (_QWORD)v3;
  v10 = v9 >> 2;
  if (v9 >> 2 <= a2)
    v10 = a2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v11 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v11 = v10;
  v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>(v7, v11);
  v13 = &v12[8 * v5];
  v15 = &v12[8 * v14];
  bzero(v13, 8 * v6);
  v16 = &v13[8 * v6];
  v18 = (char *)*a1;
  v17 = (char *)a1[1];
  if (v17 != (char *)*a1)
  {
    do
    {
      v19 = *((_QWORD *)v17 - 1);
      v17 -= 8;
      *((_QWORD *)v13 - 1) = v19;
      v13 -= 8;
    }
    while (v17 != v18);
    v17 = (char *)*a1;
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v15;
  if (v17)
    operator delete(v17);
}

double MeCab::EncoderLearnerTagger::gradient(MeCab::EncoderLearnerTagger *this, double *a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  double *i;
  uint64_t v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  long double v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  double *j;
  uint64_t v36;
  double v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  long double v43;
  uint64_t v45;
  double v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t k;
  double *m;
  double v55;
  uint64_t v56;
  double v57;
  int *v58;
  int v59;
  int *v60;
  int v61;
  int *v62;
  int v63;
  int *v64;
  int v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char v71;

  v5 = *((_QWORD *)this + 8);
  if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v6);
      if (v7)
      {
        do
        {
          v8 = *((_QWORD *)this + 3);
          *(_QWORD *)(v7 + 112) = 0;
          if (*(_BYTE *)(v7 + 87) != 3)
          {
            v9 = *(int **)(v7 + 128);
            v10 = *v9;
            if (*v9 != -1)
            {
              v11 = *(_QWORD *)(v8 + 336);
              v12 = v9 + 1;
              a3 = 0.0;
              do
              {
                a3 = a3 + *(double *)(v11 + 8 * v10);
                *(double *)(v7 + 112) = a3;
                v13 = *v12++;
                v10 = v13;
              }
              while (v13 != -1);
            }
          }
          v14 = *(_QWORD *)(v7 + 40);
          if (v14)
          {
            v15 = 0;
            v16 = -1.0e37;
            do
            {
              MeCab::FeatureIndex::calcCost(*((_QWORD *)this + 3), (double *)v14, a3);
              v17 = *(double *)(v14 + 32);
              v18 = *(_QWORD *)(v14 + 16);
              v14 = *(_QWORD *)(v14 + 24);
              a3 = v17 + *(double *)(v18 + 120);
              if (a3 > v16)
              {
                v16 = a3;
                v15 = v18;
              }
            }
            while (v14);
          }
          else
          {
            v15 = 0;
            v16 = -1.0e37;
          }
          *(_QWORD *)v7 = v15;
          *(double *)(v7 + 120) = v16;
          v7 = *(_QWORD *)(v7 + 24);
        }
        while (v7);
        v5 = *((_QWORD *)this + 8);
      }
      ++v6;
    }
    while (v5 >= v6);
  }
  v19 = *((_QWORD *)this + 9);
  v20 = *(_QWORD **)(v19 + 8 * v5);
  if (v20)
  {
    v21 = (_QWORD *)*v20;
    if (*v20)
    {
      do
      {
        v21[1] = v20;
        v20 = v21;
        v21 = (_QWORD *)*v21;
      }
      while (v21);
    }
  }
  if ((v5 & 0x8000000000000000) == 0)
  {
    v22 = 0;
    do
    {
      for (i = *(double **)(v19 + 8 * v22); i; i = (double *)*((_QWORD *)i + 3))
      {
        i[12] = 0.0;
        v24 = *((_QWORD *)i + 5);
        if (v24)
        {
          v25 = 0.0;
          v26 = *((_QWORD *)i + 5);
          do
          {
            v27 = *(double *)(v26 + 32);
            v28 = *(double *)(*(_QWORD *)(v26 + 16) + 96);
            v29 = v27 + v28;
            if (v26 != v24)
            {
              if (v29 >= v25)
                v30 = v25;
              else
                v30 = v27 + v28;
              if (v25 >= v29)
                v29 = v25;
              if (v29 <= v30 + 50.0)
              {
                v31 = exp(v30 - v29);
                v29 = v29 + log(v31 + 1.0);
              }
            }
            i[12] = v29;
            v26 = *(_QWORD *)(v26 + 24);
            v25 = v29;
          }
          while (v26);
        }
      }
      v32 = v22++ == v5;
    }
    while (!v32);
  }
  if ((v5 & 0x80000000) == 0)
  {
    v33 = *((_QWORD *)this + 12);
    v34 = v5;
    do
    {
      for (j = *(double **)(v33 + 8 * v34); j; j = (double *)*((_QWORD *)j + 2))
      {
        j[13] = 0.0;
        v36 = *((_QWORD *)j + 4);
        if (v36)
        {
          v37 = 0.0;
          v38 = *((_QWORD *)j + 4);
          do
          {
            v39 = *(double *)(v38 + 32);
            v40 = *(double *)(*(_QWORD *)v38 + 104);
            v41 = v39 + v40;
            if (v38 != v36)
            {
              if (v41 >= v37)
                v42 = v37;
              else
                v42 = v39 + v40;
              if (v37 >= v41)
                v41 = v37;
              if (v41 <= v42 + 50.0)
              {
                v43 = exp(v42 - v41);
                v41 = v41 + log(v43 + 1.0);
              }
            }
            j[13] = v41;
            v38 = *(_QWORD *)(v38 + 8);
            v37 = v41;
          }
          while (v38);
        }
      }
    }
    while (v34-- > 0);
  }
  v45 = *(_QWORD *)(v19 + 8 * v5);
  if (!v45)
  {
    v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/learner_tagger.cpp", 68);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"(", 1);
    v48 = (_QWORD *)std::ostream::operator<<();
    v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)") [", 3);
    v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"node != NULL", 12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"] ", 2);
    MeCab::die::~die((MeCab::die *)&v71);
  }
  v46 = *(double *)(v45 + 96);
  if ((v5 & 0x8000000000000000) == 0)
  {
    v51 = 0;
    v52 = *((_QWORD *)this + 9);
    do
    {
      for (k = *(_QWORD *)(v52 + 8 * v51); k; k = *(_QWORD *)(k + 24))
      {
        for (m = *(double **)(k + 40); m; m = (double *)*((_QWORD *)m + 3))
        {
          v55 = *m;
          if (*(_QWORD *)(*(_QWORD *)m + 32) || *(_BYTE *)(*(_QWORD *)&v55 + 87) == 3)
          {
            v56 = *((_QWORD *)m + 2);
            if (*(_QWORD *)(v56 + 40) || *(_BYTE *)(v56 + 87) == 2)
            {
              v57 = exp(*(double *)(v56 + 96) + m[4] + *(double *)(*(_QWORD *)&v55 + 104) - v46);
              v58 = (int *)*((_QWORD *)m + 5);
              v59 = *v58;
              if (*v58 != -1)
              {
                v60 = v58 + 1;
                do
                {
                  a2[v59] = v57 + a2[v59];
                  v61 = *v60++;
                  v59 = v61;
                }
                while (v61 != -1);
              }
              if (*(_BYTE *)(*(_QWORD *)&v55 + 87) != 3)
              {
                v62 = *(int **)(*(_QWORD *)&v55 + 128);
                v63 = *v62;
                if (*v62 != -1)
                {
                  v64 = v62 + 1;
                  do
                  {
                    a2[v63] = v57 + a2[v63];
                    v65 = *v64++;
                    v63 = v65;
                  }
                  while (v65 != -1);
                }
              }
            }
          }
        }
      }
      v32 = v51++ == v5;
    }
    while (!v32);
  }
  v66 = (uint64_t *)*((_QWORD *)this + 53);
  v67 = *((_QWORD *)this + 54) - (_QWORD)v66;
  if (v67)
  {
    v68 = v67 >> 3;
    if (v68 <= 1)
      v68 = 1;
    do
    {
      v69 = *v66++;
      v46 = v46 - *(double *)(v69 + 32);
      --v68;
    }
    while (v68);
  }
  return v46;
}

void sub_2083C5E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  MeCab::die::~die((MeCab::die *)&a13);
}

void sub_2083C5E84()
{
  _Unwind_Exception *v0;

  _Unwind_Resume(v0);
}

char *MeCab::repeat_find_if<char const*,char>(char *result, char *a2, char a3, uint64_t a4)
{
  uint64_t v4;
  int v6;
  char *v7;
  char *v8;

  if (a4)
  {
    v4 = a4;
    v6 = a3;
    while (1)
    {
      v7 = (char *)memchr(result, v6, a2 - result);
      v8 = v7 ? v7 : a2;
      if (v8 == a2)
        break;
      result = v8 + 1;
      if (!--v4)
        return v8;
    }
    return a2;
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<mecab_learner_path_t *>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

double MeCab::FreeList<mecab_learner_node_t>::alloc(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  double result;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[4];
  if (v4 == v3)
  {
    v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  v5 = a1[1];
  v6 = (char **)(a1 + 1);
  if (v2 == (a1[2] - v5) >> 3)
  {
    is_mul_ok(v3, 0x90uLL);
    v7 = operator new[]();
    v8 = a1[3];
    v9 = (uint64_t *)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v6) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<char *>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*v6;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>((uint64_t)(a1 + 3), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v7;
      v10 = v16 + 1;
      v19 = (char *)a1[1];
      v18 = (char *)a1[2];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = *v6;
      }
      a1[1] = v16;
      a1[2] = v10;
      a1[3] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    a1[2] = v10;
    v5 = a1[1];
    v4 = a1[4];
    v2 = a1[5];
  }
  v21 = *(_QWORD *)(v5 + 8 * v2);
  a1[4] = v4 + 1;
  v22 = (_OWORD *)(v21 + 144 * v4);
  result = 0.0;
  v22[7] = 0u;
  v22[8] = 0u;
  v22[5] = 0u;
  v22[6] = 0u;
  v22[3] = 0u;
  v22[4] = 0u;
  v22[1] = 0u;
  v22[2] = 0u;
  *v22 = 0u;
  return result;
}

BOOL MeCab::compressReading(std::string *a1)
{
  std::string::size_type size;
  std::string *v3;
  std::string::size_type v4;
  std::string *v5;
  uint64_t v6;
  std::string *v7;
  int data_low;
  std::string v10;

  if (a1)
  {
    if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
      size = a1->__r_.__value_.__l.__size_;
    else
      size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    memset(&v10, 0, sizeof(v10));
    std::string::reserve(&v10, size);
    v3 = a1;
    if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
      v3 = (std::string *)a1->__r_.__value_.__r.__words[0];
    v4 = size >> 1;
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = &v10;
    else
      v5 = (std::string *)v10.__r_.__value_.__r.__words[0];
    if ((uint64_t)size >= 1)
      bzero(v5, size);
    if (size >= 2)
    {
      if (v4 <= 1)
        v6 = 1;
      else
        v6 = size >> 1;
      v7 = v5;
      do
      {
        data_low = LOWORD(v3->__r_.__value_.__l.__data_);
        v3 = (std::string *)((char *)v3 + 2);
        v7->__r_.__value_.__s.__data_[0] = MeCab::internal::encodeChar(data_low);
        v7 = (std::string *)((char *)v7 + 1);
        --v6;
      }
      while (v6);
    }
    std::string::__assign_external(a1, (const std::string::value_type *)v5, v4);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
  }
  return a1 != 0;
}

void sub_2083C6178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::internal::encodeChar(int a1)
{
  unsigned __int8 v1;

  if (a1 > 251)
  {
    switch(a1)
    {
      case 252:
        return 66;
      case 12539:
        return -103;
      case 12540:
        return -102;
      default:
LABEL_15:
        v1 = a1 + 2;
        if ((a1 - 12353) >= 0x56)
          return 0;
        break;
    }
  }
  else
  {
    v1 = 1;
    switch(a1)
    {
      case '*':
        return v1;
      case '+':
        v1 = 2;
        break;
      case ',':
        v1 = 3;
        break;
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        v1 = a1 - 44;
        break;
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
        v1 = a1 - 51;
        break;
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
      case 's':
      case 't':
      case 'u':
      case 'v':
      case 'w':
      case 'x':
      case 'y':
      case 'z':
        v1 = a1 - 57;
        break;
      default:
        goto LABEL_15;
    }
  }
  return v1;
}

uint64_t mecab_dict_index(int a1, char **a2)
{
  BOOL v4;
  int v5;
  _BOOL4 v6;
  _BOOL4 v7;
  _BOOL4 v8;
  int v9;
  const char *p_v;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  std::string *p_p;
  size_t v18;
  std::string::size_type size;
  __int128 *v20;
  __int128 *v21;
  unint64_t v22;
  char *v23;
  void *v24;
  uint64_t end_high;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  uint64_t v31;
  std::string *v32;
  std::string::size_type v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  std::string *v39;
  int v41;
  MeCab::CharProperty *v42;
  std::string *v43;
  const char *v44;
  std::string *v45;
  std::string *v46;
  _OWORD *v47;
  __int128 v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  std::string *v52;
  std::string *v53;
  __int128 v54;
  std::string::size_type v55;
  void *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  void *v62;
  MeCab::QuantizedConnector *first;
  const char *v64;
  uint64_t v65;
  std::string *v66;
  MeCab::Connector *v67;
  const char *v68;
  uint64_t v69;
  std::string *v70;
  char v71;
  void *v72[2];
  char v73;
  std::string v74;
  std::string v75;
  std::string v76;
  std::string __p;
  void *v78;
  std::string *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  std::string v84;
  std::string v85;
  std::string v86;
  std::string v87;
  void *v88[4];
  __int128 *v89;
  __int128 *v90;
  uint64_t v91;
  std::__split_buffer<std::string> __v;

  MEMORY[0x20BD06324](&v71);
  MeCab::Param::Param((MeCab::Param *)v88);
  if ((MeCab::Param::open((uint64_t)v88, a1, a2, (uint64_t)&MeCab::DictionaryComplier::run(int,char **)::long_options) & 1) != 0)
  {
    if (!MeCab::Param::help_version((MeCab::Param *)v88))
    {
LABEL_58:
      v31 = 0;
      goto LABEL_59;
    }
    MeCab::Param::get<std::string>((uint64_t)v88, "dicdir", &v87);
    MeCab::Param::get<std::string>((uint64_t)v88, "outdir", &v86);
    v4 = MeCab::Param::get<BOOL>((uint64_t)v88, "unknown");
    v5 = MeCab::Param::get<BOOL>((uint64_t)v88, "matrix");
    v6 = MeCab::Param::get<BOOL>((uint64_t)v88, "quantize");
    v7 = MeCab::Param::get<BOOL>((uint64_t)v88, "compress-feature");
    MeCab::Param::get<std::string>((uint64_t)v88, "language", &v85);
    v8 = MeCab::Param::get<BOOL>((uint64_t)v88, "charcategory");
    v9 = MeCab::Param::get<BOOL>((uint64_t)v88, "sysdic");
    MeCab::Param::get<std::string>((uint64_t)v88, "userdic", &v84);
    v83 = 0;
    WORD2(v83) = 0;
    BYTE6(v83) = 0;
    if (v6)
      BYTE4(v83) = 1;
    if (v7)
      *(_WORD *)((char *)&v83 + 5) = 257;
    v82 = 0;
    v81 = v82;
    std::string::basic_string[abi:ne180100]<0>(&v78, "dicrc");
    MeCab::create_filename((uint64_t)&v87, (uint64_t)&v78, (std::string *)&__v);
    if (SHIBYTE(__v.__end_) >= 0)
      p_v = (const char *)&__v;
    else
      p_v = (const char *)__v.__first_;
    if (!MeCab::Param::load((MeCab::Param *)v88, p_v))
    {
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_compiler.cpp", 73);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"(", 1);
      v12 = (_QWORD *)std::ostream::operator<<();
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)") [", 3);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"param.load(DCONF(DICRC))", 24);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"] ", 2);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"no such file or directory: ", 27);
      std::string::basic_string[abi:ne180100]<0>(&v76, "dicrc");
      p_p = &__p;
      MeCab::create_filename((uint64_t)&v87, (uint64_t)&v76, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v18 = strlen((const char *)p_p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)p_p, v18);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v76.__r_.__value_.__l.__data_);
      MeCab::die::~die((MeCab::die *)&v75);
    }
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    if (SHIBYTE(v80) < 0)
      operator delete(v78);
    v78 = 0;
    v79 = 0;
    v80 = 0;
    size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
    if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v84.__r_.__value_.__l.__size_;
    if (size)
    {
      v20 = v89;
      v21 = v90;
      if (v90 != v89)
      {
        v22 = 0xAAAAAAAAAAAAAAABLL * (((char *)v90 - (char *)v89) >> 3);
        if (v22 > 0xAAAAAAAAAAAAAAALL)
          std::vector<char *>::__throw_length_error[abi:ne180100]();
        std::vector<std::string>::__vallocate[abi:ne180100](&v78, v22);
        v79 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v80, v20, v21, v79);
      }
    }
    else
    {
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = &v87;
      else
        v32 = (std::string *)v87.__r_.__value_.__r.__words[0];
      MeCab::enum_csv_dictionaries((char *)v32, (uint64_t)&v78);
    }
    v33 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
    if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v33 = v84.__r_.__value_.__l.__size_;
    if (v33)
    {
      if (v79 == v78)
      {
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_compiler.cpp", 73);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"(", 1);
        v35 = (_QWORD *)std::ostream::operator<<();
        v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)") [", 3);
        v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"dic.size()", 10);
        v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"no dictionaries are specified", 29);
        MeCab::die::~die((MeCab::die *)&__v);
      }
      LODWORD(__v.__first_) = 1;
      MeCab::Param::set<int>((uint64_t)v88, "type", (uint64_t)&__v, 1);
      if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v39 = &v84;
      else
        v39 = (std::string *)v84.__r_.__value_.__r.__words[0];
      MeCab::Dictionary::compile((uint64_t)v88, (uint64_t)&v78, (uint64_t)v39, (uint64_t)&v82);
      goto LABEL_50;
    }
    if (v4)
    {
      v41 = 1;
    }
    else if ((v5 & 1) != 0)
    {
      if (!v8)
      {
        if ((v9 & 1) != 0)
        {
          LOBYTE(v5) = 1;
          goto LABEL_120;
        }
LABEL_132:
        if (v6)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "matrix.def");
          first = (MeCab::QuantizedConnector *)&__v;
          MeCab::create_filename((uint64_t)&v87, (uint64_t)&__p, (std::string *)&__v);
          if (SHIBYTE(__v.__end_) < 0)
            first = (MeCab::QuantizedConnector *)__v.__first_;
          std::string::basic_string[abi:ne180100]<0>(&v75, "matrix.bin");
          MeCab::create_filename((uint64_t)&v86, (uint64_t)&v75, &v76);
          if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v66 = &v76;
          else
            v66 = (std::string *)v76.__r_.__value_.__r.__words[0];
          MeCab::QuantizedConnector::compile(first, (const char *)v66, v64, v65);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "matrix.def");
          v67 = (MeCab::Connector *)&__v;
          MeCab::create_filename((uint64_t)&v87, (uint64_t)&__p, (std::string *)&__v);
          if (SHIBYTE(__v.__end_) < 0)
            v67 = (MeCab::Connector *)__v.__first_;
          std::string::basic_string[abi:ne180100]<0>(&v75, "matrix.bin");
          MeCab::create_filename((uint64_t)&v86, (uint64_t)&v75, &v76);
          if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v70 = &v76;
          else
            v70 = (std::string *)v76.__r_.__value_.__r.__words[0];
          MeCab::Connector::compile(v67, (const char *)v70, v68, v69);
        }
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v76.__r_.__value_.__l.__data_);
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v75.__r_.__value_.__l.__data_);
        if (SHIBYTE(__v.__end_) < 0)
          operator delete(__v.__first_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_50;
      }
      v41 = 0;
      v5 = 1;
    }
    else
    {
      if (((v8 | v9 ^ 1) & 1) == 0)
      {
        LOBYTE(v5) = 0;
        goto LABEL_120;
      }
      v5 = !v8;
      v9 |= !v8;
      v41 = !v8;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "char.def");
    v42 = (MeCab::CharProperty *)&__v;
    MeCab::create_filename((uint64_t)&v87, (uint64_t)&__p, (std::string *)&__v);
    if (SHIBYTE(__v.__end_) < 0)
      v42 = (MeCab::CharProperty *)__v.__first_;
    std::string::basic_string[abi:ne180100]<0>(&v75, "unk.def");
    v43 = &v76;
    MeCab::create_filename((uint64_t)&v87, (uint64_t)&v75, &v76);
    if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v43 = (std::string *)v76.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(v72, "char.bin");
    MeCab::create_filename((uint64_t)&v86, (uint64_t)v72, &v74);
    if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = &v74;
    else
      v45 = (std::string *)v74.__r_.__value_.__r.__words[0];
    MeCab::CharProperty::compile(v42, (const char *)v43, (const char *)v45, v44);
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v74.__r_.__value_.__l.__data_);
    if (v73 < 0)
      operator delete(v72[0]);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v41)
      {
LABEL_81:
        memset(&__p, 0, sizeof(__p));
        std::string::basic_string[abi:ne180100]<0>(&v74, "unk.def");
        MeCab::create_filename((uint64_t)&v87, (uint64_t)&v74, &v75);
        if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v75;
        else
          v46 = (std::string *)v75.__r_.__value_.__r.__words[0];
        std::string::basic_string[abi:ne180100]<0>(&v76, (char *)v46);
        v47 = (_OWORD *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
        {
          v49 = 0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3);
          v50 = v49 + 1;
          if (v49 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<char *>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556
             * ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 3) > v50)
            v50 = 0x5555555555555556
                * ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
            v51 = 0xAAAAAAAAAAAAAAALL;
          else
            v51 = v50;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__r_.__value_.__r.__words[2];
          if (v51)
            v52 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v51);
          else
            v52 = 0;
          __v.__first_ = v52;
          v53 = v52 + v49;
          __v.__begin_ = v53;
          __v.__end_cap_.__value_ = &v52[v51];
          v54 = *(_OWORD *)&v76.__r_.__value_.__l.__data_;
          v53->__r_.__value_.__r.__words[2] = v76.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v53->__r_.__value_.__l.__data_ = v54;
          memset(&v76, 0, sizeof(v76));
          __v.__end_ = v53 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&__p, &__v);
          v55 = __p.__r_.__value_.__l.__size_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          __p.__r_.__value_.__l.__size_ = v55;
          if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v76.__r_.__value_.__l.__data_);
        }
        else
        {
          v48 = *(_OWORD *)&v76.__r_.__value_.__l.__data_;
          *(_QWORD *)(__p.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v76.__r_.__value_.__l + 2);
          *v47 = v48;
          memset(&v76, 0, sizeof(v76));
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v47 + 24;
        }
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v75.__r_.__value_.__l.__data_);
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v74.__r_.__value_.__l.__data_);
        LODWORD(__v.__first_) = 2;
        MeCab::Param::set<int>((uint64_t)v88, "type", (uint64_t)&__v, 1);
        std::string::basic_string[abi:ne180100]<0>(&v76, "unk.dic");
        MeCab::create_filename((uint64_t)&v86, (uint64_t)&v76, (std::string *)&__v);
        if (SHIBYTE(__v.__end_) >= 0)
          v56 = &__v;
        else
          v56 = __v.__first_;
        MeCab::Dictionary::compile((uint64_t)v88, (uint64_t)&__p, (uint64_t)v56, (uint64_t)&v81);
        if (SHIBYTE(__v.__end_) < 0)
          operator delete(__v.__first_);
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v76.__r_.__value_.__l.__data_);
        __v.__first_ = &__p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
        if ((v9 & 1) != 0)
        {
LABEL_120:
          if (v79 == v78)
          {
            v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary_compiler.cpp", 73);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"(", 1);
            v58 = (_QWORD *)std::ostream::operator<<();
            v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)") [", 3);
            v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"dic.size()", 10);
            v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"] ", 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"no dictionaries are specified", 29);
            MeCab::die::~die((MeCab::die *)&__v);
          }
          LODWORD(__v.__first_) = 0;
          MeCab::Param::set<int>((uint64_t)v88, "type", (uint64_t)&__v, 1);
          std::string::basic_string[abi:ne180100]<0>(&__p, "sys.dic");
          MeCab::create_filename((uint64_t)&v86, (uint64_t)&__p, (std::string *)&__v);
          if (SHIBYTE(__v.__end_) >= 0)
            v62 = &__v;
          else
            v62 = __v.__first_;
          MeCab::Dictionary::compile((uint64_t)v88, (uint64_t)&v78, (uint64_t)v62, (uint64_t)&v83);
          if (SHIBYTE(__v.__end_) < 0)
            operator delete(__v.__first_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if ((v5 & 1) == 0)
            goto LABEL_50;
          goto LABEL_132;
        }
        goto LABEL_131;
      }
    }
    else if (v41)
    {
      goto LABEL_81;
    }
    if (v9)
      goto LABEL_120;
LABEL_131:
    if (!v5)
    {
LABEL_50:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"\ndone!\n", 7);
      __v.__first_ = (std::__split_buffer<std::string>::pointer)&v78;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v84.__r_.__value_.__l.__data_);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v85.__r_.__value_.__l.__data_);
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v86.__r_.__value_.__l.__data_);
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v87.__r_.__value_.__l.__data_);
      goto LABEL_58;
    }
    goto LABEL_132;
  }
  v23 = (char *)MeCab::whatlog::str((MeCab::whatlog *)&v91);
  std::string::basic_string[abi:ne180100]<0>(&__v, v23);
  if (SHIBYTE(__v.__end_) >= 0)
    v24 = &__v;
  else
    v24 = __v.__first_;
  if (SHIBYTE(__v.__end_) >= 0)
    end_high = HIBYTE(__v.__end_);
  else
    end_high = (uint64_t)__v.__begin_;
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)v24, end_high);
  v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\n\n", 2);
  v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"MeCab: Yet Another Part-of-Speech and Morphological Analyzer\n\nCopyright(C) 2001-2012 Taku Kudo \nCopyright(C) 2004-2008 Nippon Telegraph and Telephone Corporation\n", 162);
  v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"\ntry '--help' for more information.", 35);
  std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(_QWORD *)(*v29 - 24)));
  v30 = std::locale::use_facet((const std::locale *)&v87, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
  std::locale::~locale((std::locale *)&v87);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__v.__end_) < 0)
    operator delete(__v.__first_);
  v31 = 0xFFFFFFFFLL;
LABEL_59:
  MeCab::Param::~Param(v88);
  std::ios_base::Init::~Init((std::ios_base::Init *)&v71);
  return v31;
}

void sub_2083C6DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,std::locale a62,uint64_t a63)
{
  char a67;
  void *a68;
  void **v68;
  uint64_t v69;

  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)(v69 - 120));
  if (a34 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
    operator delete(a17);
  __p = &a35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a35 = &a38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  if (a49 < 0)
    operator delete(v68[6]);
  if (a55 < 0)
    operator delete(v68[9]);
  if (a61 < 0)
    operator delete(v68[12]);
  if (a67 < 0)
    operator delete(v68[15]);
  MeCab::Param::~Param(&a68);
  std::ios_base::Init::~Init((std::ios_base::Init *)&a13);
  _Unwind_Resume(a1);
}

uint64_t MeCab::`anonymous namespace'::toLanguage(void **a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t **v9;
  uint64_t i;
  __int128 v11;
  int v12;
  _QWORD v13[3];
  int v14;
  _QWORD v15[3];
  int v16;
  _QWORD v17[3];
  int v18;
  _QWORD v19[3];
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25453B1C8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25453B1C8))
  {
    v9 = (uint64_t **)operator new();
    std::string::basic_string[abi:ne180100]<0>(&v11, "ja");
    v12 = 1;
    std::string::basic_string[abi:ne180100]<0>(v13, "zh-Hans");
    v14 = 2;
    std::string::basic_string[abi:ne180100]<0>(v15, "zh-Hant");
    v16 = 3;
    std::string::basic_string[abi:ne180100]<0>(v17, "zh-yue-Hant");
    v18 = 4;
    std::string::basic_string[abi:ne180100]<0>(v19, "ko");
    v20 = 5;
    std::map<std::string,MeCab::Language>::map[abi:ne180100](v9, &v11, 5);
    for (i = 0; i != -20; i -= 4)
    {
      if (SHIBYTE(v19[i + 2]) < 0)
        operator delete((void *)v19[i]);
    }
    _MergedGlobals = (uint64_t)v9;
    __cxa_guard_release(&qword_25453B1C8);
  }
  v3 = _MergedGlobals + 8;
  v4 = *(_QWORD **)(_MergedGlobals + 8);
  if (!v4)
    goto LABEL_12;
  v5 = _MergedGlobals + 8;
  do
  {
    v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4 + 4, a1);
    if (v6 >= 0)
      v7 = v4;
    else
      v7 = v4 + 1;
    if (v6 >= 0)
      v5 = (uint64_t)v4;
    v4 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v3
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (void **)(v5 + 32)) & 0x80) != 0)
  {
LABEL_12:
    v5 = v3;
  }
  if (_MergedGlobals + 8 == v5)
    return 0;
  else
    return *(unsigned int *)(v5 + 56);
}

void sub_2083C7298(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  while (1)
  {
    if (*(char *)(v2 + v4 + 151) < 0)
      operator delete(*(void **)(v2 + v4 + 128));
    v4 -= 32;
    if (v4 == -160)
    {
      MEMORY[0x20BD0639C](v1, 0x1020C4062D53EE8);
      __cxa_guard_abort(&qword_25453B1C8);
      _Unwind_Resume(a1);
    }
  }
}

void sub_2083C7328()
{
  JUMPOUT(0x2083C7314);
}

uint64_t **std::map<std::string,MeCab::Language>::map[abi:ne180100](uint64_t **a1, __int128 *a2, uint64_t a3)
{
  uint64_t *v4;
  __int128 *v5;
  __int128 *v6;
  char *v7;
  char *v8;
  char *v9;
  BOOL v10;
  char v11;
  char **v12;
  char **v13;
  _QWORD *v14;
  char *v15;
  std::string *v16;
  __int128 v17;
  uint64_t *v18;

  a1[1] = 0;
  v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    v5 = a2;
    v6 = &a2[2 * a3];
    while (1)
    {
      v7 = (char *)a1[1];
      if (*a1 == v4)
        break;
      v8 = (char *)v4;
      if (v7)
      {
        do
        {
          v9 = v7;
          v7 = (char *)*((_QWORD *)v7 + 1);
        }
        while (v7);
      }
      else
      {
        do
        {
          v9 = (char *)*((_QWORD *)v8 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v8;
          v8 = v9;
        }
        while (v10);
      }
      v11 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v9 + 4, (void **)v5);
      v7 = (char *)*v4;
      if (v11 < 0)
        goto LABEL_18;
      v12 = (char **)v4;
      v13 = (char **)v4;
      if (v7)
      {
        v13 = (char **)v4;
        do
        {
          while (1)
          {
            v12 = (char **)v7;
            v14 = v7 + 32;
            if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, (void **)v7 + 4) & 0x80) == 0)
              break;
            v7 = *v12;
            v13 = v12;
            if (!*v12)
              goto LABEL_21;
          }
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v14, (void **)v5) & 0x80) == 0)
            goto LABEL_20;
          v13 = v12 + 1;
          v7 = v12[1];
        }
        while (v7);
      }
LABEL_21:
      v15 = (char *)operator new(0x40uLL);
      v16 = (std::string *)(v15 + 32);
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
      }
      else
      {
        v17 = *v5;
        *((_QWORD *)v15 + 6) = *((_QWORD *)v5 + 2);
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
      }
      *((_DWORD *)v15 + 14) = *((_DWORD *)v5 + 6);
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
      *((_QWORD *)v15 + 2) = v12;
      *v13 = v15;
      v18 = (uint64_t *)**a1;
      if (v18)
      {
        *a1 = v18;
        v15 = *v13;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v15);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
LABEL_27:
      v5 += 2;
      if (v5 == v6)
        return a1;
    }
    v9 = (char *)v4;
LABEL_18:
    v12 = (char **)v4;
    v13 = (char **)v4;
    if (v7)
    {
      v13 = (char **)(v9 + 8);
      v12 = (char **)v9;
LABEL_20:
      if (*v13)
        goto LABEL_27;
    }
    goto LABEL_21;
  }
  return a1;
}

void sub_2083C74C8(_Unwind_Exception *a1)
{
  void *v1;
  char **v2;

  operator delete(v1);
  std::__tree<std::__value_type<std::string,MeCab::CharInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::CharInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::CharInfo>>>::destroy(*v2);
  _Unwind_Resume(a1);
}

MeCab::Dictionary *MeCab::Dictionary::Dictionary(MeCab::Dictionary *this)
{
  *(_QWORD *)this = &off_24C09BFA0;
  MeCab::Mmap<char>::Mmap((uint64_t)this + 8);
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this + 432);
  *((_QWORD *)this + 88) = 0;
  *((_QWORD *)this + 87) = 0;
  *((_QWORD *)this + 89) = 0;
  marisa::Trie::Trie((_QWORD *)this + 91);
  return this;
}

void sub_2083C755C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  MeCab::whatlog::~whatlog(v3);
  if (*(char *)(v2 + 431) < 0)
    operator delete(*(void **)(v2 + 408));
  MeCab::Mmap<char>::~Mmap(v1);
  _Unwind_Resume(a1);
}

void MeCab::whatlog::~whatlog(void **this)
{
  uint64_t v2;
  uint64_t v3;

  if (*((char *)this + 287) < 0)
    operator delete(this[33]);
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *this = (void *)*MEMORY[0x24BEDB800];
  *(void **)((char *)this + *(_QWORD *)(v3 - 24)) = *(void **)(v2 + 24);
  this[1] = (void *)(MEMORY[0x24BEDB848] + 16);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD06354](this + 14);
}

void MeCab::Dictionary::~Dictionary(MeCab::Dictionary *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C09BFA0;
  btrie_close(*((void ***)this + 45));
  *((_QWORD *)this + 45) = 0;
  MeCab::Mmap<char>::close((uint64_t)this + 8);
  marisa::Trie::~Trie((MeCab::Dictionary *)((char *)this + 728));
  if (*((char *)this + 719) < 0)
    operator delete(*((void **)this + 87));
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *((_QWORD *)this + 54) = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24) + 432) = *(_QWORD *)(v2 + 24);
  *((_QWORD *)this + 55) = MEMORY[0x24BEDB848] + 16;
  if (*((char *)this + 527) < 0)
    operator delete(*((void **)this + 63));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD06354]((char *)this + 544);
  if (*((char *)this + 431) < 0)
    operator delete(*((void **)this + 51));
  MeCab::Mmap<char>::~Mmap((uint64_t)this + 8);
}

{
  MeCab::Dictionary::~Dictionary(this);
  JUMPOUT(0x20BD0639CLL);
}

int *MeCab::Dictionary::commonPrefixSearch(uint64_t a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4, unint64_t a5)
{
  int *result;
  unint64_t v6;

  result = *(int **)(a1 + 360);
  if (result)
  {
    v6 = 0;
    return (int *)v6;
  }
  return result;
}

uint64_t MeCab::Dictionary::exactMatchSearch(MeCab::Dictionary *this, char *__s)
{
  uint64_t v2;
  unsigned int v4;
  uint8x8_t v5;

  v2 = *((_QWORD *)this + 45);
  if (v2)
  {
    v4 = strlen(__s);
    btrie_exact_match_search(v2, (unsigned __int8 *)__s, v4, v5);
  }
  return 0;
}

uint64_t MeCab::Dictionary::open(MeCab::Dictionary *this, std::string::value_type *a2, const char *a3)
{
  uint64_t *v6;
  unint64_t v7;
  unsigned int *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const char *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  const char *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v39;
  uint64_t v40;
  char *v41;
  char *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  size_t v47;

  btrie_close(*((void ***)this + 45));
  *((_QWORD *)this + 45) = 0;
  MeCab::Mmap<char>::close((uint64_t)this + 8);
  v6 = (uint64_t *)((char *)this + 408);
  std::string::__assign_external((std::string *)this + 17, a2);
  if ((MeCab::Mmap<char>::open((uint64_t)this + 8, a2, a3) & 1) == 0)
  {
    std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 54) - 24) + 432), 0);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 54, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"(", 1);
    v14 = (_QWORD *)std::ostream::operator<<();
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)") [", 3);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"dmmap_.open(file, mode)", 23);
    v17 = "no such file or directory: ";
LABEL_61:
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"] ", 2);
    v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v17, 27);
    v47 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)a2, v47);
    return 0;
  }
  v7 = *((_QWORD *)this + 3);
  if (v7 <= 0x63)
  {
    std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 54) - 24) + 432), 0);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 54, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"(", 1);
    v19 = (_QWORD *)std::ostream::operator<<();
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)") [", 3);
    v21 = "dmmap_.size() >= 100";
    v22 = 20;
LABEL_60:
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
    v17 = "dictionary file is broken: ";
    goto LABEL_61;
  }
  v8 = (unsigned int *)*((_QWORD *)this + 2);
  if (v7 != (*v8 ^ 0xEF718F77))
  {
    std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 54) - 24) + 432), 0);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 54, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"(", 1);
    v24 = (_QWORD *)std::ostream::operator<<();
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
    v21 = "(magic ^ DictionaryMagicID) == dmmap_.size()";
    v22 = 44;
    goto LABEL_60;
  }
  *((_DWORD *)this + 96) = v8[1];
  *((_DWORD *)this + 97) = v8[2];
  *((_DWORD *)this + 98) = v8[3];
  *((_DWORD *)this + 99) = v8[4];
  *((_DWORD *)this + 100) = v8[5];
  v9 = v8[6];
  v10 = v8[7];
  v12 = v8[8];
  v11 = v8[9];
  if ((v11 & 0x3FFFFF) != 0)
  {
    if (*((_DWORD *)this + 180))
      goto LABEL_53;
  }
  else
  {
    *((_DWORD *)this + 180) = v11 >> 28;
    *((_BYTE *)this + 724) = (v11 >> 26) & 3;
    *((_BYTE *)this + 725) = HIBYTE(v11) & 3;
    *((_BYTE *)this + 726) = (v11 >> 22) & 3;
    if (v11 >> 28)
      goto LABEL_53;
  }
  v25 = *((_BYTE *)this + 431);
  if (v25 < 0)
    v26 = *((_QWORD *)this + 52);
  else
    v26 = *((unsigned __int8 *)this + 431);
  if (v26)
  {
    if (v25 >= 0)
      v27 = *((unsigned __int8 *)this + 431);
    else
      v27 = *((_QWORD *)this + 52);
    if (v27 == 36)
    {
      if (v25 < 0)
        v6 = (uint64_t *)*v6;
      if (!memcmp(v6, "/usr/share/tokenizer/zh/Hans/sys.dic", 0x24uLL))
      {
        v39 = 2;
      }
      else
      {
        if (memcmp(v6, "/usr/share/tokenizer/zh/Hant/sys.dic", 0x24uLL))
          goto LABEL_53;
        v39 = 3;
      }
    }
    else
    {
      if (v27 != 31)
        goto LABEL_53;
      if (v25 >= 0)
        v28 = (uint64_t *)((char *)this + 408);
      else
        v28 = (uint64_t *)*v6;
      if (*v28 == 0x6168732F7273752FLL
        && v28[1] == 0x6E656B6F742F6572
        && v28[2] == 0x2F616A2F72657A69
        && *(uint64_t *)((char *)v28 + 23) == 0x6369642E7379732FLL)
      {
        v39 = 1;
      }
      else
      {
        v32 = *v28;
        v33 = v28[1];
        v34 = v28[2];
        v35 = *(uint64_t *)((char *)v28 + 23);
        if (v32 != 0x6168732F7273752FLL
          || v33 != 0x6E656B6F742F6572
          || v34 != 0x2F6F6B2F72657A69
          || v35 != 0x6369642E7379732FLL)
        {
          goto LABEL_53;
        }
        v39 = 5;
      }
    }
    *((_DWORD *)this + 180) = v39;
  }
LABEL_53:
  *((_QWORD *)this + 47) = v8 + 10;
  btrie_open(0, 0, v8 + 18, v9);
  *((_QWORD *)this + 44) = (char *)v8 + v9 + 72;
  *((_QWORD *)this + 45) = v40;
  v41 = (char *)v8 + v9 + v10 + 72;
  if ((_DWORD)v12)
    *((_QWORD *)this + 46) = v41;
  v42 = &v41[v12];
  if (*((_BYTE *)this + 725) == 1 && *((_BYTE *)this + 726) == 1)
    marisa::Trie::map((marisa::grimoire::trie::LoudsTrie **)this + 91, *((const void **)this + 46), v12);
  if (v42 != (char *)(*((_QWORD *)this + 2) + *((_QWORD *)this + 3)))
  {
    std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 54) - 24) + 432), 0);
    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 54, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
    v44 = (_QWORD *)std::ostream::operator<<();
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)") [", 3);
    v21 = "ptr == dmmap_.end()";
    v22 = 19;
    goto LABEL_60;
  }
  return 1;
}

uint64_t MeCab::Dictionary::compile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int *v5;
  int *v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  std::string::size_type size;
  std::string::size_type v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  std::string::size_type v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  _BOOL4 v25;
  std::string *p_str;
  _anonymous_namespace_ *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  std::string *v34;
  std::string::size_type v35;
  _QWORD *v36;
  _QWORD *v37;
  std::string *v38;
  std::string::size_type v39;
  std::string *v40;
  std::string *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  std::string *v50;
  std::string::size_type v51;
  _QWORD *v52;
  _QWORD *v53;
  std::string *v54;
  std::string::size_type v55;
  std::string::size_type v56;
  MeCab::Writer *v57;
  uint64_t v58;
  MeCab::StringBuffer *v59;
  MeCab::Writer *v60;
  std::string *v61;
  std::string *v62;
  MeCab::POSIDGenerator *v63;
  MeCab::POSIDGenerator *v64;
  std::string *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  const std::locale::facet *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  const std::locale::facet *v92;
  _QWORD *v93;
  int64_t v94;
  uint64_t v95;
  unsigned __int8 *v96;
  __int128 *v97;
  unsigned __int8 **v98;
  uint64_t v99;
  unint64_t v100;
  unsigned __int8 *i;
  int v102;
  unsigned __int8 *v103;
  unsigned __int8 *v104;
  int v105;
  int v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  unsigned __int8 *v109;
  unsigned __int8 *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  size_t v117;
  _BYTE *v118;
  size_t v119;
  uint64_t v120;
  _BYTE *v121;
  __int128 *v122;
  _BYTE *v123;
  _QWORD *v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  size_t v130;
  char **v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  size_t v140;
  std::string *v141;
  __int128 v142;
  __int128 *v143;
  unsigned int v144;
  unsigned int v145;
  __int16 v146;
  const char *v147;
  uint64_t v148;
  uint64_t v149;
  std::string *v150;
  uint64_t v151;
  uint64_t v152;
  std::string *v153;
  _QWORD *v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  std::string *v160;
  std::string::size_type v161;
  MeCab::ContextID *v162;
  uint64_t v163;
  MeCab::ContextID *v164;
  std::string *v165;
  int v166;
  std::string::size_type v167;
  std::string *v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  _QWORD *v172;
  _QWORD *v173;
  _QWORD *v174;
  std::string *v175;
  std::string::size_type v176;
  _QWORD *v177;
  _QWORD *v178;
  std::string *v179;
  std::string::size_type v180;
  _QWORD *v181;
  char *v182;
  char *v183;
  _QWORD *v184;
  _QWORD *v185;
  _QWORD *v186;
  _QWORD *v187;
  _QWORD *v188;
  _QWORD *v189;
  std::string::size_type v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  _QWORD *v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  _QWORD *v198;
  size_t v199;
  int64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  _BYTE *v204;
  unint64_t v205;
  char *j;
  int v207;
  unsigned __int8 *v208;
  char *v209;
  int v210;
  int v211;
  unsigned __int8 *v212;
  unsigned __int8 *v213;
  _BYTE *v214;
  _BYTE *v215;
  _QWORD *v216;
  const std::locale::facet *v217;
  std::string::size_type v218;
  std::vector<std::string>::pointer end;
  __int128 v220;
  _QWORD *v221;
  const std::locale::facet *v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  char *v226;
  std::string *v227;
  std::string *v228;
  __int128 v229;
  std::string::size_type v230;
  __int16 v231;
  std::string *v232;
  std::string *v233;
  _QWORD *v234;
  _QWORD *v235;
  _QWORD *v236;
  _QWORD *v237;
  _QWORD *v238;
  _QWORD *v239;
  _QWORD *v240;
  _QWORD *v241;
  std::string *v242;
  std::string *v243;
  _QWORD *v244;
  _QWORD *v245;
  _QWORD *v246;
  _QWORD *v247;
  _QWORD *v248;
  _QWORD *v249;
  std::string *v250;
  std::string::size_type v251;
  _QWORD *v252;
  _QWORD *v253;
  std::string *v254;
  std::string::size_type v255;
  int v256;
  std::string::size_type v257;
  char v258;
  unint64_t v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  std::string *v263;
  _BYTE *v264;
  char v265;
  uint64_t v266;
  std::string *v267;
  uint64_t v268;
  unint64_t v269;
  char *v270;
  __int128 v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  char *v276;
  char *v277;
  char *v278;
  std::string::size_type v279;
  char *v280;
  __int128 v281;
  int64x2_t v282;
  int v283;
  char v284;
  std::string::size_type v285;
  const std::string::value_type *v286;
  char v287;
  _QWORD *v288;
  const std::locale::facet *v289;
  int64x2_t v290;
  const std::nothrow_t *v291;
  unint64_t v292;
  __n128 *v293;
  BOOL v294;
  __n128 *v295;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer v297;
  size_t v298;
  const char *v299;
  uint64_t k;
  uint64_t v301;
  std::string *v302;
  const char *v303;
  uint64_t v304;
  _QWORD *v305;
  _QWORD *v306;
  _QWORD *v307;
  _QWORD *v308;
  _QWORD *v309;
  uint64_t v310;
  char *v311;
  char *v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  uint64_t v316;
  unsigned __int8 **v317;
  uint64_t v318;
  unsigned __int8 *v319;
  unsigned __int8 *v320;
  int v321;
  unsigned __int8 *v322;
  unsigned __int8 *v323;
  uint64_t **v324;
  unint64_t v325;
  _QWORD *v326;
  _QWORD *v327;
  _QWORD *v328;
  _QWORD *v329;
  _QWORD *v330;
  _QWORD *v331;
  __int128 *v332;
  uint64_t v333;
  _QWORD *v334;
  std::string::size_type v335;
  std::string::size_type v336;
  uint64_t v337;
  unint64_t v338;
  unint64_t v339;
  char *v340;
  char *v341;
  char *v342;
  std::string::size_type v343;
  uint64_t v344;
  unint64_t v345;
  std::string::size_type v346;
  std::string *v347;
  __int128 *v348;
  std::string *v349;
  int64_t v350;
  unint64_t v351;
  uint64_t v352;
  unint64_t v353;
  char *v354;
  std::string::size_type *v355;
  std::string::size_type v356;
  int v357;
  uint64_t v358;
  unint64_t v359;
  unint64_t v360;
  uint64_t v361;
  char *v362;
  char *v363;
  int v364;
  uint64_t **v365;
  std::string::size_type v366;
  std::string::size_type v367;
  uint64_t v368;
  unint64_t v369;
  unint64_t v370;
  char *v371;
  char *v372;
  std::string::size_type v373;
  char *v374;
  std::string::size_type v375;
  uint64_t v376;
  unint64_t v377;
  std::string::size_type v378;
  std::string *v379;
  __int128 *v380;
  std::string *v381;
  int64_t v382;
  unint64_t v383;
  uint64_t v384;
  unint64_t v385;
  char *v386;
  std::string::size_type *v387;
  char *v388;
  std::string::size_type v389;
  int v390;
  uint64_t v391;
  unint64_t v392;
  unint64_t v393;
  char *v394;
  int v395;
  void **v396;
  void **v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  std::string::value_type v403;
  size_t v404;
  unsigned int v405;
  uint64_t v406;
  unsigned int v407;
  std::string *v408;
  FILE **v409;
  _QWORD *v410;
  _QWORD *v411;
  _QWORD *v412;
  _QWORD *v413;
  _QWORD *v414;
  _QWORD *v415;
  size_t v416;
  _BYTE *v417;
  _BYTE *v418;
  uint64_t v419;
  _QWORD *v421;
  size_t v422;
  _QWORD *v423;
  int v424;
  int v425;
  int v426;
  int v427;
  char *__s;
  uint64_t v429;
  uint64_t v430;
  _QWORD *v431;
  uint64_t v432;
  _BOOL4 v433;
  MeCab::StringBuffer *v434;
  char v435;
  uint64_t v436;
  BOOL v437;
  unint64_t v438;
  uint64_t v439;
  __int16 v440;
  int v441;
  __int16 v442;
  _QWORD *v443;
  unsigned int v444;
  void *v445;
  char v446;
  unsigned int v447;
  size_t v448;
  int v449;
  int v450;
  int v451;
  void *__p;
  std::string *v453;
  unint64_t v454;
  _QWORD v455[12];
  char v456;
  uint64_t v457;
  unint64_t v458;
  _QWORD v459[2];
  _QWORD v460[2];
  std::vector<std::string> v461;
  marisa::grimoire::trie::LoudsTrie *v462;
  _QWORD v463[4];
  int v464;
  std::string v465;
  std::string v466;
  int v467;
  std::string v468;
  std::string __str;
  std::string v470;
  _BYTE *v471;
  __int128 v472;
  std::string v473;
  void *v474[2];
  uint64_t v475;
  void *v476[2];
  uint64_t v477;
  void *v478;
  uint64_t v479;
  uint64_t v480;
  std::string v481;
  std::string v482;
  int v483;
  uint64_t v484;
  std::string *v485;
  unint64_t v486;
  int64x2_t v487;
  char *v488;
  std::string v489;
  std::string v490;
  std::string v491;
  std::string v492;
  std::string v493;
  std::string v494;
  std::string v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  uint64_t v502;
  uint64_t (**v503)();
  void **v504;
  uint64_t (**v505)();
  MeCab::POSIDGenerator *v506;
  uint64_t (**v507)();
  uint64_t v508;
  void *v509[45];
  int v510;
  _BYTE v511[16];
  std::string v512;
  uint64_t v513;
  _BYTE __dst[32];
  __int128 v515;
  uint64_t v516[4];
  __int128 v517;
  __int128 v518;
  __int128 v519;
  _BYTE v520[288];
  _BYTE v521[65120];
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  uint64_t v538;
  _QWORD v539[2];
  _QWORD v540[51];
  _QWORD v541[22];

  v4 = MEMORY[0x24BDAC7A8](a1, a2, a3, a4);
  v6 = v5;
  __s = v7;
  v431 = v8;
  v9 = v4;
  v541[19] = *MEMORY[0x24BDAC8D0];
  MeCab::Connector::Connector((MeCab::Connector *)v509);
  v507 = &off_24C09C0F8;
  v508 = 0;
  v505 = &off_24C09C0D8;
  v506 = 0;
  v503 = &off_24C09C138;
  v504 = 0;
  MeCab::Param::get<std::string>(v9, "dicdir", &v495);
  std::string::basic_string[abi:ne180100]<0>(__dst, "matrix.def");
  MeCab::create_filename((uint64_t)&v495, (uint64_t)__dst, &v494);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  std::string::basic_string[abi:ne180100]<0>(__dst, "matrix.bin");
  MeCab::create_filename((uint64_t)&v495, (uint64_t)__dst, &v493);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  std::string::basic_string[abi:ne180100]<0>(__dst, "left-id.def");
  MeCab::create_filename((uint64_t)&v495, (uint64_t)__dst, &v492);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  std::string::basic_string[abi:ne180100]<0>(__dst, "right-id.def");
  MeCab::create_filename((uint64_t)&v495, (uint64_t)__dst, &v491);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  std::string::basic_string[abi:ne180100]<0>(__dst, "rewrite.def");
  MeCab::create_filename((uint64_t)&v495, (uint64_t)__dst, &v490);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  std::string::basic_string[abi:ne180100]<0>(__dst, "pos-id.def");
  MeCab::create_filename((uint64_t)&v495, (uint64_t)__dst, &v489);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  v488 = 0;
  v484 = 0;
  v485 = 0;
  v486 = 0;
  v487 = 0uLL;
  v483 = 0;
  memset(&v482, 0, sizeof(v482));
  memset(&v481, 0, sizeof(v481));
  v479 = 0;
  v478 = 0;
  v480 = 0;
  v476[1] = 0;
  v476[0] = 0;
  v477 = 0;
  v474[1] = 0;
  v474[0] = 0;
  v475 = 0;
  memset(&v473, 0, sizeof(v473));
  v472 = 0uLL;
  v471 = 0;
  memset(&v470, 0, sizeof(v470));
  MeCab::Param::get<std::string>(v9, "dictionary-charset", &__str);
  MeCab::Param::get<std::string>(v9, "charset", &v468);
  v437 = MeCab::Param::get<BOOL>(v9, "wakati");
  v467 = MeCab::Param::get<int>(v9, "type");
  MeCab::Param::get<std::string>(v9, "node-format", &v466);
  MeCab::Param::get<std::string>(v9, "config-charset", &v465);
  size = HIBYTE(v465.__r_.__value_.__r.__words[2]);
  if ((v465.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v465.__r_.__value_.__l.__size_;
  if (!size)
    std::string::operator=(&v465, &__str);
  v11 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = __str.__r_.__value_.__l.__size_;
  if (!v11)
  {
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"(", 1);
    v13 = (_QWORD *)std::ostream::operator<<();
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)") [", 3);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"!from.empty()", 13);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"input dictionary charset is empty", 33);
    MeCab::die::~die((MeCab::die *)__dst);
  }
  v17 = HIBYTE(v468.__r_.__value_.__r.__words[2]);
  if ((v468.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v17 = v468.__r_.__value_.__l.__size_;
  if (!v17)
  {
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"(", 1);
    v19 = (_QWORD *)std::ostream::operator<<();
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)") [", 3);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"!to.empty()", 11);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"output dictionary charset is empty", 34);
    MeCab::die::~die((MeCab::die *)__dst);
  }
  v23 = *v6;
  v426 = *((unsigned __int8 *)v6 + 4);
  v427 = *((unsigned __int8 *)v6 + 5);
  v425 = *((unsigned __int8 *)v6 + 6);
  v25 = v427 == 1 && *((_BYTE *)v6 + 6) == 1;
  v433 = v25;
  marisa::Trie::Trie(&v462);
  marisa::Agent::Agent((marisa::Agent *)v463);
  memset(&v461, 0, sizeof(v461));
  v460[0] = &off_24C09C4C0;
  v460[1] = 0;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((v468.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = (_anonymous_namespace_ *)&v468;
  else
    v27 = (_anonymous_namespace_ *)v468.__r_.__value_.__r.__words[0];
  if (!MeCab::Iconv::open((MeCab::Iconv *)v460, (_anonymous_namespace_ *)p_str, v27))
  {
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"(", 1);
    v29 = (_QWORD *)std::ostream::operator<<();
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)") [", 3);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"iconv.open(from.c_str(), to.c_str())", 36);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"] ", 2);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"iconv_open() failed with from=", 30);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = &__str;
    else
      v34 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      v35 = __str.__r_.__value_.__l.__size_;
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" to=", 4);
    if ((v468.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v38 = &v468;
    else
      v38 = (std::string *)v468.__r_.__value_.__r.__words[0];
    if ((v468.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v39 = HIBYTE(v468.__r_.__value_.__r.__words[2]);
    else
      v39 = v468.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v38, v39);
    MeCab::die::~die((MeCab::die *)__dst);
  }
  v436 = v9;
  v459[0] = &off_24C09C4C0;
  v459[1] = 0;
  if ((v465.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = &v465;
  else
    v40 = (std::string *)v465.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = &__str;
  else
    v41 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (!MeCab::Iconv::open((MeCab::Iconv *)v459, (_anonymous_namespace_ *)v40, (_anonymous_namespace_ *)v41))
  {
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"(", 1);
    v45 = (_QWORD *)std::ostream::operator<<();
    v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)") [", 3);
    v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"config_iconv.open(config_charset.c_str(), from.c_str())", 55);
    v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"] ", 2);
    v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"iconv_open() failed with from=", 30);
    if ((v465.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v50 = &v465;
    else
      v50 = (std::string *)v465.__r_.__value_.__r.__words[0];
    if ((v465.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v51 = HIBYTE(v465.__r_.__value_.__r.__words[2]);
    else
      v51 = v465.__r_.__value_.__l.__size_;
    v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
    v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" to=", 4);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v54 = &__str;
    else
      v54 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v55 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      v55 = __str.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v54, v55);
    MeCab::die::~die((MeCab::die *)__dst);
  }
  v56 = HIBYTE(v466.__r_.__value_.__r.__words[2]);
  if ((v466.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v56 = v466.__r_.__value_.__l.__size_;
  if (v56)
  {
    v57 = (MeCab::Writer *)operator new();
    MeCab::Writer::Writer(v57);
    v58 = operator new();
    *(_QWORD *)v58 = &off_24C09C1E0;
    *(_QWORD *)(v58 + 8) = 0;
    *(_QWORD *)(v58 + 16) = 0;
    *(_QWORD *)(v58 + 24) = 0;
    *(_WORD *)(v58 + 32) = 1;
    v496 = 0u;
    v497 = 0u;
    v498 = 0u;
    v499 = 0u;
    v500 = 0u;
    v501 = 0u;
    v59 = (MeCab::StringBuffer *)v58;
    v60 = v57;
    v502 = 0;
  }
  else
  {
    v59 = 0;
    v60 = 0;
  }
  if ((v494.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v61 = &v494;
  else
    v61 = (std::string *)v494.__r_.__value_.__r.__words[0];
  if (!MeCab::Connector::openText((MeCab::Connector *)v509, (const char *)v61, v42, v43))
  {
    v62 = (v493.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v493
        : (std::string *)v493.__r_.__value_.__r.__words[0];
    if ((MeCab::Connector::open((MeCab::Connector *)v509, (char *)v62, "r") & 1) == 0)
      v510 = 65537;
  }
  v63 = (MeCab::POSIDGenerator *)operator new();
  v424 = v23;
  *(_QWORD *)v63 = 0;
  *((_QWORD *)v63 + 1) = 0;
  *((_QWORD *)v63 + 2) = 0;
  v64 = v506;
  if (v506)
  {
    *(_QWORD *)__dst = v506;
    std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100]((void ***)__dst);
    MEMORY[0x20BD0639C](v64, 0x20C40960023A9);
  }
  v506 = v63;
  v458 = 0;
  if ((v489.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v65 = &v489;
  else
    v65 = (std::string *)v489.__r_.__value_.__r.__words[0];
  MeCab::POSIDGenerator::open(v63, (const char *)v65, (MeCab::Iconv *)v459, &v458);
  v434 = v59;
  v432 = (uint64_t)v60;
  std::string::basic_string[abi:ne180100]<0>(__dst, "DEFAULT,0,0,0,*\nSPACE,0,0,0,*\n");
  std::istringstream::basic_istringstream[abi:ne180100](v455, (__int128 *)__dst, 8);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  if (v431[1] != *v431)
  {
    v441 = 0;
    v66 = 0;
    v429 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
    v430 = *MEMORY[0x24BEDB7E0];
    v67 = 1;
    v435 = 1;
    do
    {
      std::ifstream::basic_ifstream(v539);
      if ((*((_BYTE *)&v540[2] + *(_QWORD *)(v539[0] - 24)) & 5) != 0)
      {
        if (v467 != 2)
        {
          v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"(", 1);
          v77 = (_QWORD *)std::ostream::operator<<();
          v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)") [", 3);
          v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"ifs", 3);
          v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"] ", 2);
          v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"no such file or directory: ", 27);
          v82 = *v431 + 24 * v66;
          v83 = *(char *)(v82 + 23);
          if (v83 >= 0)
            v84 = *v431 + 24 * v66;
          else
            v84 = *(_QWORD *)v82;
          if (v83 >= 0)
            v85 = *(unsigned __int8 *)(v82 + 23);
          else
            v85 = *(_QWORD *)(v82 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, v84, v85);
          MeCab::die::~die((MeCab::die *)__dst);
        }
        v68 = *v431 + 24 * v66;
        v69 = *(char *)(v68 + 23);
        if (v69 >= 0)
          v70 = *v431 + 24 * v66;
        else
          v70 = *(_QWORD *)v68;
        if (v69 >= 0)
          v71 = *(unsigned __int8 *)(v68 + 23);
        else
          v71 = *(_QWORD *)(v68 + 8);
        v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], v70, v71);
        v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)" is not found. minimum setting is used.", 39);
        std::ios_base::getloc((const std::ios_base *)((char *)v73 + *(_QWORD *)(*v73 - 24)));
        v74 = std::locale::use_facet((const std::locale *)__dst, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v74->__vftable[2].~facet_0)(v74, 10);
        std::locale::~locale((std::locale *)__dst);
        std::ostream::put();
        std::ostream::flush();
        v75 = v455;
      }
      else
      {
        v75 = v539;
      }
      v443 = v75;
      v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"reading ", 8);
      v87 = *v431 + 24 * v66;
      v88 = *(char *)(v87 + 23);
      if (v88 >= 0)
        v89 = *v431 + 24 * v66;
      else
        v89 = *(_QWORD *)v87;
      if (v88 >= 0)
        v90 = *(unsigned __int8 *)(v87 + 23);
      else
        v90 = *(_QWORD *)(v87 + 8);
      v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, v89, v90);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)" ... ", 5);
      v438 = v66;
      v439 = 0;
      while (1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v443 + *(_QWORD *)(*v443 - 24)));
        v92 = std::locale::use_facet((const std::locale *)__dst, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v92->__vftable[2].~facet_0)(v92, 10);
        std::locale::~locale((std::locale *)__dst);
        v93 = (_QWORD *)std::istream::getline();
        if ((*((_BYTE *)v93 + *(_QWORD *)(*v93 - 24) + 32) & 5) != 0)
          break;
        v528 = 0u;
        v529 = 0u;
        v526 = 0u;
        v527 = 0u;
        v524 = 0u;
        v525 = 0u;
        v522 = 0u;
        v523 = 0u;
        __p = 0;
        v453 = 0;
        v454 = 0;
        v94 = strlen((const char *)&v530);
        if (v94 < 1)
          goto LABEL_143;
        v95 = 0;
        v96 = (unsigned __int8 *)&v530 + v94;
        v97 = &v530;
        v98 = (unsigned __int8 **)&v526;
        v99 = 5;
        do
        {
          v100 = v99;
          for (i = (unsigned __int8 *)v97; ; ++i)
          {
            v102 = *i;
            if (v102 != 9 && v102 != 32)
              break;
            v97 = (__int128 *)((char *)v97 + 1);
          }
          if (v102 == 34)
          {
            v103 = ++i;
            v104 = i;
            if (i < v96)
            {
              v103 = i;
              v104 = i;
              do
              {
                v105 = *v104;
                if (v105 == 34)
                {
                  v106 = *++v104;
                  if (v106 != 34)
                    break;
                }
                *v103++ = v105;
                ++v104;
              }
              while (v104 < v96);
            }
            v107 = (unsigned __int8 *)memchr(v104, 44, v96 - v104);
            if (v107)
              v108 = v107;
            else
              v108 = v96;
          }
          else
          {
            v109 = (unsigned __int8 *)memchr(i, 44, v96 - (unsigned __int8 *)v97);
            if (v109)
              v110 = v109;
            else
              v110 = v96;
            v108 = &i[v110 - (unsigned __int8 *)v97];
            v103 = v108;
          }
          v99 = v100 - 1;
          if (v100 < 2)
          {
            *v98 = i;
            ++v95;
            if (v100 == 1)
              break;
          }
          else
          {
            *v103 = 0;
            *v98 = i;
            ++v95;
          }
          ++v98;
          v97 = (__int128 *)(v108 + 1);
        }
        while (v108 + 1 < v96);
        if (v95 != 5)
        {
LABEL_143:
          v111 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)"(", 1);
          v112 = (_QWORD *)std::ostream::operator<<();
          v113 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)") [", 3);
          v114 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)"n == 5", 6);
          v115 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)"] ", 2);
          v116 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"format error: ", 14);
          v117 = strlen((const char *)&v530);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)&v530, v117);
          MeCab::die::~die((MeCab::die *)__dst);
        }
        if (v467 != 2)
        {
          v118 = (_BYTE *)v526;
          v119 = strlen((const char *)v526);
          v120 = 0;
          v121 = (_BYTE *)(v526 + v119);
          v122 = &v522;
          while (v118 != v121)
          {
            v123 = v118;
            while (*v123 != 9)
            {
              if (++v123 == v121)
                goto LABEL_154;
            }
            *v123 = 0;
            *(_QWORD *)v122 = v118;
            v122 = (__int128 *)((char *)v122 + 8);
            ++v120;
            v118 = v123 + 1;
            if (v120 == 8)
              goto LABEL_155;
          }
          v118 = v121;
LABEL_154:
          *v121 = 0;
          *(_QWORD *)v122 = v118;
          ++v120;
LABEL_155:
          if ((v435 & 1) != 0)
            v67 = v120;
          if (v120 != v67)
          {
            v124 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)"(", 1);
            v125 = (_QWORD *)std::ostream::operator<<();
            v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)") [", 3);
            v127 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)"index_n == index_count", 22);
            v128 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)"] ", 2);
            v129 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)"format error: ", 14);
            v130 = strlen((const char *)&v530);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)&v530, v130);
            MeCab::die::~die((MeCab::die *)__dst);
          }
          v435 = 0;
          v67 = v120;
        }
        if (v67 == 1)
        {
          std::string::__assign_external(&v482, (const std::string::value_type *)v526);
        }
        else if (v67)
        {
          v131 = (char **)&v522;
          v132 = v67;
          do
          {
            std::string::basic_string[abi:ne180100]<0>(__dst, *v131);
            v133 = __dst[23];
            if (__dst[23] < 0)
              v133 = *(_QWORD *)&__dst[8];
            if (!v133)
            {
              v134 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, (uint64_t)"(", 1);
              v135 = (_QWORD *)std::ostream::operator<<();
              v136 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)") [", 3);
              v137 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)"!word.empty()", 13);
              v138 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)"] ", 2);
              v139 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)"empty word error: ", 18);
              v140 = strlen((const char *)&v530);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)&v530, v140);
              MeCab::die::~die((MeCab::die *)&v512);
            }
            v141 = v453;
            if ((unint64_t)v453 >= v454)
            {
              v143 = (__int128 *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__p, (__int128 *)__dst);
            }
            else
            {
              if ((__dst[23] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external(v453, *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
              }
              else
              {
                v142 = *(_OWORD *)__dst;
                v453->__r_.__value_.__r.__words[2] = *(_QWORD *)&__dst[16];
                *(_OWORD *)&v141->__r_.__value_.__l.__data_ = v142;
              }
              v143 = (__int128 *)&v141[1];
            }
            v453 = (std::string *)v143;
            if ((__dst[23] & 0x80000000) != 0)
              operator delete(*(void **)__dst);
            ++v131;
            --v132;
          }
          while (v132);
        }
        v144 = atoi(*((const char **)&v526 + 1));
        v145 = atoi((const char *)v527);
        v146 = atoi(*((const char **)&v527 + 1));
        v147 = (const char *)v528;
        std::string::__assign_external(&v481, (const std::string::value_type *)v528);
        v440 = v146;
        if ((v481.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v150 = &v481;
        else
          v150 = (std::string *)v481.__r_.__value_.__r.__words[0];
        v442 = MeCab::POSIDGenerator::id(v506, (const char *)v150, v148, v149);
        if ((v144 & 0x80000000) != 0 || (v145 & 0x80000000) != 0)
        {
          if (!v508)
          {
            v151 = operator new();
            *(_QWORD *)(v151 + 88) = 0;
            *(_QWORD *)(v151 + 80) = 0;
            *(_OWORD *)v151 = 0u;
            *(_OWORD *)(v151 + 16) = 0u;
            *(_OWORD *)(v151 + 32) = 0u;
            *(_OWORD *)(v151 + 48) = 0u;
            *(_QWORD *)(v151 + 64) = 0;
            *(_QWORD *)(v151 + 72) = v151 + 80;
            v152 = v508;
            if (v508)
            {
              std::__tree<std::__value_type<std::string,MeCab::FeatureSet>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::FeatureSet>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::FeatureSet>>>::destroy(v508 + 72, *(_QWORD **)(v508 + 80));
              *(_QWORD *)__dst = v152 + 48;
              std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100]((void ***)__dst);
              *(_QWORD *)__dst = v152 + 24;
              std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100]((void ***)__dst);
              *(_QWORD *)__dst = v152;
              std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100]((void ***)__dst);
              MEMORY[0x20BD0639C](v152, 0x1020C401749051DLL);
            }
            v508 = v151;
            if ((v490.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v153 = &v490;
            else
              v153 = (std::string *)v490.__r_.__value_.__r.__words[0];
            MeCab::DictionaryRewriter::open((MeCab::DictionaryRewriter *)v151, (const char *)v153, (MeCab::Iconv *)v459);
          }
          if ((MeCab::DictionaryRewriter::rewrite() & 1) == 0)
          {
            v154 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)"(", 1);
            v155 = (_QWORD *)std::ostream::operator<<();
            v156 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v155, (uint64_t)") [", 3);
            v157 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)"rewrite->rewrite(feature, &ufeature, &lfeature, &rfeature)", 58);
            v158 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v157, (uint64_t)"] ", 2);
            v159 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)"rewrite failed: ", 16);
            if ((v481.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v160 = &v481;
            else
              v160 = (std::string *)v481.__r_.__value_.__r.__words[0];
            if ((v481.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v161 = HIBYTE(v481.__r_.__value_.__r.__words[2]);
            else
              v161 = v481.__r_.__value_.__l.__size_;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)v160, v161);
            MeCab::die::~die((MeCab::die *)__dst);
          }
          v162 = (MeCab::ContextID *)v504;
          if (!v504)
          {
            v163 = operator new();
            *(_QWORD *)(v163 + 16) = 0;
            *(_QWORD *)(v163 + 8) = 0;
            *(_QWORD *)(v163 + 32) = 0;
            *(_QWORD *)(v163 + 24) = v163 + 32;
            *(_QWORD *)v163 = v163 + 8;
            *(_QWORD *)(v163 + 40) = 0;
            *(_OWORD *)(v163 + 48) = 0u;
            *(_OWORD *)(v163 + 64) = 0u;
            *(_OWORD *)(v163 + 80) = 0u;
            v164 = (MeCab::ContextID *)v504;
            if (v504)
            {
              if (*((char *)v504 + 95) < 0)
                operator delete(v504[9]);
              if (*((char *)v164 + 71) < 0)
                operator delete(*((void **)v164 + 6));
              std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)v164 + 24, *((char **)v164 + 4));
              std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy((uint64_t)v164, *((char **)v164 + 1));
              MEMORY[0x20BD0639C](v164, 0x1032C40D2D3B4A1);
            }
            v504 = (void **)v163;
            if ((v492.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v165 = &v492;
            else
              v165 = (std::string *)v492.__r_.__value_.__r.__words[0];
            v166 = SHIBYTE(v491.__r_.__value_.__r.__words[2]);
            v167 = v491.__r_.__value_.__r.__words[0];
            open((const char *)v165, v163, (uint64_t)v459);
            if (v166 >= 0)
              v168 = &v491;
            else
              v168 = (std::string *)v167;
            open((const char *)v168, v163 + 24, (uint64_t)v459);
            v162 = (MeCab::ContextID *)v504;
            if (v504[2] != (void *)(unsigned __int16)v510 || v504[5] != (void *)HIWORD(v510))
            {
              v169 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v169, (uint64_t)"(", 1);
              v170 = (_QWORD *)std::ostream::operator<<();
              v171 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v170, (uint64_t)") [", 3);
              v172 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v171, (uint64_t)"cid->left_size() == matrix.left_size() && cid->right_size() == matrix.right_size()", 82);
              v173 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v172, (uint64_t)"] ", 2);
              v174 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v173, (uint64_t)"Context ID files(", 17);
              if ((v492.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v175 = &v492;
              else
                v175 = (std::string *)v492.__r_.__value_.__r.__words[0];
              if ((v492.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v176 = HIBYTE(v492.__r_.__value_.__r.__words[2]);
              else
                v176 = v492.__r_.__value_.__l.__size_;
              v177 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v174, (uint64_t)v175, v176);
              v178 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v177, (uint64_t)" or ", 4);
              if ((v491.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v179 = &v491;
              else
                v179 = (std::string *)v491.__r_.__value_.__r.__words[0];
              if ((v491.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v180 = HIBYTE(v491.__r_.__value_.__r.__words[2]);
              else
                v180 = v491.__r_.__value_.__l.__size_;
              v181 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v178, (uint64_t)v179, v180);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v181, (uint64_t)" may be broken", 14);
              MeCab::die::~die((MeCab::die *)__dst);
            }
          }
          if (v477 >= 0)
            v182 = (char *)v476;
          else
            v182 = (char *)v476[0];
          v144 = MeCab::ContextID::lid(v162, v182);
          if (v475 >= 0)
            v183 = (char *)v474;
          else
            v183 = (char *)v474[0];
          v145 = MeCab::ContextID::rid((MeCab::ContextID *)v504, v183);
        }
        if (!MeCab::Param::get<BOOL>(v436, "no-posid-checking")
          && ((v144 & 0x80000000) != 0
           || (v145 & 0x80000000) != 0
           || v144 >= HIWORD(v510)
           || v145 >= (unsigned __int16)v510))
        {
          v184 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v184, (uint64_t)"(", 1);
          v185 = (_QWORD *)std::ostream::operator<<();
          v186 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v185, (uint64_t)") [", 3);
          v187 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v186, (uint64_t)"lid >= 0 && rid >= 0 && matrix.is_valid(lid, rid)", 49);
          v188 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v187, (uint64_t)"] ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v188, (uint64_t)"invalid ids are found lid=", 26);
          v189 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v189, (uint64_t)" rid=", 5);
          std::ostream::operator<<();
          MeCab::die::~die((MeCab::die *)__dst);
        }
        if (v67 == 1)
        {
          v190 = HIBYTE(v482.__r_.__value_.__r.__words[2]);
          if ((v482.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v190 = v482.__r_.__value_.__l.__size_;
          if (!v190)
          {
            v216 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"empty word is found, discard this line", 38);
            std::ios_base::getloc((const std::ios_base *)((char *)v216 + *(_QWORD *)(*v216 - 24)));
            v217 = std::locale::use_facet((const std::locale *)__dst, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v217->__vftable[2].~facet_0)(v217, 10);
            std::locale::~locale((std::locale *)__dst);
            std::ostream::put();
LABEL_291:
            std::ostream::flush();
            goto LABEL_402;
          }
          if (v467 != 2 && (MeCab::Iconv::convert((uint64_t)v460, &v482) & 1) == 0)
            goto LABEL_290;
        }
        else if (v67 && v467 != 2)
        {
          v191 = 0;
          v192 = v67;
          do
          {
            if ((MeCab::Iconv::convert((uint64_t)v460, (std::string *)((char *)__p + v191)) & 1) == 0)
            {
              v193 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v193, (uint64_t)"(", 1);
              v194 = (_QWORD *)std::ostream::operator<<();
              v195 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v194, (uint64_t)") [", 3);
              v196 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v195, (uint64_t)"iconv.convert(&word_ary[i])", 27);
              v197 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v196, (uint64_t)"] ", 2);
              v198 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)"convert error: ", 15);
              v199 = strlen((const char *)&v530);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v198, (uint64_t)&v530, v199);
              MeCab::die::~die((MeCab::die *)__dst);
            }
            v191 += 24;
            --v192;
          }
          while (v192);
        }
        if (v458)
        {
          memset(v521, 0, 96);
          memset(v520, 0, sizeof(v520));
          v518 = 0u;
          v519 = 0u;
          v517 = 0u;
          v515 = 0u;
          memset(v516, 0, sizeof(v516));
          memset(__dst, 0, sizeof(__dst));
          v200 = strlen(v147);
          if (v200 < 1)
            goto LABEL_277;
          v201 = 0;
          v202 = (unint64_t)&v147[v200];
          v203 = v458 + 1;
          v204 = __dst;
          do
          {
            v205 = v203;
            for (j = (char *)v147; ; ++j)
            {
              v207 = *j;
              if (v207 != 9 && v207 != 32)
                break;
              ++v147;
            }
            if (v207 == 34)
            {
              v208 = (unsigned __int8 *)++j;
              v209 = j;
              if ((unint64_t)j < v202)
              {
                v208 = (unsigned __int8 *)j;
                v209 = j;
                do
                {
                  v210 = *v209;
                  if (v210 == 34)
                  {
                    v211 = *++v209;
                    if (v211 != 34)
                      break;
                  }
                  *v208++ = v210;
                  ++v209;
                }
                while ((unint64_t)v209 < v202);
              }
              v212 = (unsigned __int8 *)memchr(v209, 44, v202 - (_QWORD)v209);
              if (v212)
                v213 = v212;
              else
                v213 = (unsigned __int8 *)v202;
            }
            else
            {
              v214 = memchr(j, 44, v202 - (_QWORD)v147);
              if (v214)
                v215 = v214;
              else
                v215 = (_BYTE *)v202;
              v213 = (unsigned __int8 *)&j[v215 - v147];
              v208 = v213;
            }
            v203 = v205 - 1;
            if (v205 < 2)
            {
              *(_QWORD *)v204 = j;
              ++v201;
              if (v205 == 1)
                break;
            }
            else
            {
              *v208 = 0;
              *(_QWORD *)v204 = j;
              ++v201;
            }
            v204 += 8;
            v147 = (const char *)(v213 + 1);
          }
          while ((unint64_t)(v213 + 1) < v202);
          if (v201 <= v458)
          {
LABEL_277:
            if (SHIBYTE(v481.__r_.__value_.__r.__words[2]) < 0)
            {
              *v481.__r_.__value_.__l.__data_ = 0;
              v481.__r_.__value_.__l.__size_ = 0;
            }
            else
            {
              v481.__r_.__value_.__s.__data_[0] = 0;
              *((_BYTE *)&v481.__r_.__value_.__s + 23) = 0;
            }
          }
          else
          {
            std::string::__assign_external(&v481, *(const std::string::value_type **)&__dst[8 * v458]);
          }
        }
        v218 = HIBYTE(v481.__r_.__value_.__r.__words[2]);
        if ((v481.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v218 = v481.__r_.__value_.__l.__size_;
        if (v218 && (MeCab::Iconv::convert((uint64_t)v460, &v481) & 1) == 0)
        {
LABEL_290:
          v221 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"iconv conversion failed. skip this entry", 40);
          std::ios_base::getloc((const std::ios_base *)((char *)v221 + *(_QWORD *)(*v221 - 24)));
          v222 = std::locale::use_facet((const std::locale *)__dst, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v222->__vftable[2].~facet_0)(v222, 10);
          std::locale::~locale((std::locale *)__dst);
          std::ostream::put();
          goto LABEL_291;
        }
        if (v433)
        {
          if (!MeCab::compressReading(&v481))
          {
            v421 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Fatal: feature compression failed at: ", 38);
            v422 = strlen((const char *)v528);
            v423 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v421, v528, v422);
            std::endl[abi:ne180100]<char,std::char_traits<char>>(v423);
            exit(1);
          }
          end = v461.__end_;
          if (v461.__end_ >= v461.__end_cap_.__value_)
          {
            v223 = 0xAAAAAAAAAAAAAAABLL * (((char *)v461.__end_ - (char *)v461.__begin_) >> 3);
            v224 = v223 + 1;
            if (v223 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<char *>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)v461.__end_cap_.__value_ - (char *)v461.__begin_) >> 3) > v224)
              v224 = 0x5555555555555556 * (((char *)v461.__end_cap_.__value_ - (char *)v461.__begin_) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v461.__end_cap_.__value_ - (char *)v461.__begin_) >> 3) >= 0x555555555555555)
              v225 = 0xAAAAAAAAAAAAAAALL;
            else
              v225 = v224;
            *(_QWORD *)&v515 = &v461.__end_cap_;
            if (v225)
              v226 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v461.__end_cap_, v225);
            else
              v226 = 0;
            v228 = (std::string *)&v226[24 * v223];
            *(_QWORD *)__dst = v226;
            *(_QWORD *)&__dst[8] = v228;
            *(_QWORD *)&__dst[16] = v228;
            *(_QWORD *)&__dst[24] = &v226[24 * v225];
            if (SHIBYTE(v481.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v228, v481.__r_.__value_.__l.__data_, v481.__r_.__value_.__l.__size_);
              v228 = *(std::string **)&__dst[16];
            }
            else
            {
              v229 = *(_OWORD *)&v481.__r_.__value_.__l.__data_;
              v228->__r_.__value_.__r.__words[2] = v481.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v228->__r_.__value_.__l.__data_ = v229;
            }
            *(_QWORD *)&__dst[16] = v228 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v461, (std::__split_buffer<std::string> *)__dst);
            v227 = v461.__end_;
            std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)__dst);
          }
          else
          {
            if (SHIBYTE(v481.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v461.__end_, v481.__r_.__value_.__l.__data_, v481.__r_.__value_.__l.__size_);
            }
            else
            {
              v220 = *(_OWORD *)&v481.__r_.__value_.__l.__data_;
              v461.__end_->__r_.__value_.__r.__words[2] = v481.__r_.__value_.__r.__words[2];
              *(_OWORD *)&end->__r_.__value_.__l.__data_ = v220;
            }
            v227 = end + 1;
          }
          v461.__end_ = v227;
        }
        v230 = HIBYTE(v466.__r_.__value_.__r.__words[2]);
        if ((v466.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v230 = v466.__r_.__value_.__l.__size_;
        if (v230)
        {
          v231 = HIBYTE(v482.__r_.__value_.__r.__words[2]);
          v232 = &v481;
          if ((v481.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v232 = (std::string *)v481.__r_.__value_.__r.__words[0];
          v233 = &v482;
          if ((v482.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v233 = (std::string *)v482.__r_.__value_.__r.__words[0];
          *(_QWORD *)&v500 = v233;
          *((_QWORD *)&v500 + 1) = v232;
          if ((v482.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v231 = v482.__r_.__value_.__r.__words[1];
          LOWORD(v501) = v231;
          WORD1(v501) = v231;
          WORD4(v501) = v442;
          BYTE11(v501) = 0;
          if (!v434)
          {
            v234 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v234, (uint64_t)"(", 1);
            v235 = (_QWORD *)std::ostream::operator<<();
            v236 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v235, (uint64_t)") [", 3);
            v237 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v236, (uint64_t)"os.get()", 8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v237, (uint64_t)"] ", 2);
            MeCab::die::~die((MeCab::die *)__dst);
          }
          if (!v432)
          {
            v238 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v238, (uint64_t)"(", 1);
            v239 = (_QWORD *)std::ostream::operator<<();
            v240 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v239, (uint64_t)") [", 3);
            v241 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v240, (uint64_t)"writer.get()", 12);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v241, (uint64_t)"] ", 2);
            MeCab::die::~die((MeCab::die *)__dst);
          }
          *((_QWORD *)v434 + 1) = 0;
          if ((v466.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v242 = &v466;
          else
            v242 = (std::string *)v466.__r_.__value_.__r.__words[0];
          if ((v482.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v243 = &v482;
          else
            v243 = (std::string *)v482.__r_.__value_.__r.__words[0];
          if ((MeCab::Writer::writeNode(v432, (uint64_t)v434, (uint64_t)v242, (uint64_t)v243) & 1) == 0)
          {
            v244 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v244, (uint64_t)"(", 1);
            v245 = (_QWORD *)std::ostream::operator<<();
            v246 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v245, (uint64_t)") [", 3);
            v247 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v246, (uint64_t)"writer->writeNode(&*os, node_format.c_str(), w.c_str(), &node)", 62);
            v248 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v247, (uint64_t)"] ", 2);
            v249 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v248, (uint64_t)"conversion error: ", 18);
            if ((v481.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v250 = &v481;
            else
              v250 = (std::string *)v481.__r_.__value_.__r.__words[0];
            if ((v481.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v251 = HIBYTE(v481.__r_.__value_.__r.__words[2]);
            else
              v251 = v481.__r_.__value_.__l.__size_;
            v252 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v249, (uint64_t)v250, v251);
            v253 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v252, (uint64_t)" with ", 6);
            if ((v466.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v254 = &v466;
            else
              v254 = (std::string *)v466.__r_.__value_.__r.__words[0];
            if ((v466.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v255 = HIBYTE(v466.__r_.__value_.__r.__words[2]);
            else
              v255 = v466.__r_.__value_.__l.__size_;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v253, (uint64_t)v254, v255);
            MeCab::die::~die((MeCab::die *)__dst);
          }
          if (MeCab::StringBuffer::reserve(v434, 1))
            *(_BYTE *)(*((_QWORD *)v434 + 3) + (*((_QWORD *)v434 + 1))++) = 0;
          std::string::__assign_external(&v481, *((const std::string::value_type **)v434 + 3));
        }
        if (SHIBYTE(v472) < 0)
        {
          *v471 = 0;
          *(_QWORD *)&v472 = 0;
        }
        else
        {
          LOBYTE(v471) = 0;
          HIBYTE(v472) = 0;
        }
        v256 = SHIBYTE(v481.__r_.__value_.__r.__words[2]);
        if ((v481.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v257 = HIBYTE(v481.__r_.__value_.__r.__words[2]);
        else
          v257 = v481.__r_.__value_.__l.__size_;
        v258 = v437;
        if (!v257)
          v258 = 1;
        if ((v258 & 1) == 0)
        {
          v259 = v257 + 1;
          if (v257 + 1 >= 0x7FFFFFFFFFFFFFF8)
            std::string::__throw_length_error[abi:ne180100]();
          if (v259 >= 0x17)
          {
            v261 = (v259 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v259 | 7) != 0x17)
              v261 = v259 | 7;
            v262 = v261 + 1;
            v260 = (char *)operator new(v261 + 1);
            *(_QWORD *)&__dst[8] = v257 + 1;
            *(_QWORD *)&__dst[16] = v262 | 0x8000000000000000;
            *(_QWORD *)__dst = v260;
          }
          else
          {
            memset(__dst, 0, 24);
            v260 = __dst;
            __dst[23] = v257 + 1;
          }
          if (v256 >= 0)
            v263 = &v481;
          else
            v263 = (std::string *)v481.__r_.__value_.__r.__words[0];
          memmove(v260, v263, v257);
          *(_WORD *)&v260[v257] = 0;
          std::string::push_back((std::string *)__dst, 0);
          v264 = *(_BYTE **)__dst;
          v512.__r_.__value_.__r.__words[0] = *(_QWORD *)&__dst[8];
          *(std::string::size_type *)((char *)v512.__r_.__value_.__r.__words + 7) = *(_QWORD *)&__dst[15];
          v265 = __dst[23];
          memset(__dst, 0, 24);
          if (SHIBYTE(v472) < 0)
          {
            operator delete(v471);
            v471 = v264;
            *(_QWORD *)&v472 = v512.__r_.__value_.__r.__words[0];
            *(_QWORD *)((char *)&v472 + 7) = *(std::string::size_type *)((char *)v512.__r_.__value_.__r.__words + 7);
            HIBYTE(v472) = v265;
            if ((__dst[23] & 0x80000000) != 0)
              operator delete(*(void **)__dst);
          }
          else
          {
            v471 = v264;
            *(_QWORD *)&v472 = v512.__r_.__value_.__r.__words[0];
            *(_QWORD *)((char *)&v472 + 7) = *(std::string::size_type *)((char *)v512.__r_.__value_.__r.__words + 7);
            HIBYTE(v472) = v265;
          }
        }
        v266 = operator new();
        *(_WORD *)(v266 + 4) = v442;
        *(_WORD *)v266 = v144;
        *(_WORD *)(v266 + 2) = v145;
        *(_WORD *)(v266 + 6) = v440;
        *(_DWORD *)(v266 + 8) = v441;
        if (v67 == 1)
        {
          if (SHIBYTE(v482.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v512, v482.__r_.__value_.__l.__data_, v482.__r_.__value_.__l.__size_);
          else
            v512 = v482;
          v513 = v266;
          v269 = v487.u64[1];
          v270 = v488;
          if (v487.i64[1] >= (unint64_t)v488)
          {
            v272 = v487.i64[0];
            v273 = (v487.i64[1] - v487.i64[0]) >> 5;
            v274 = v273 + 1;
            if ((unint64_t)(v273 + 1) >> 59)
              std::vector<char *>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)&v488[-v487.i64[0]] >> 4 > v274)
              v274 = (uint64_t)&v488[-v487.i64[0]] >> 4;
            if ((unint64_t)&v488[-v487.i64[0]] >= 0x7FFFFFFFFFFFFFE0)
              v275 = 0x7FFFFFFFFFFFFFFLL;
            else
              v275 = v274;
            *(_QWORD *)&v515 = &v488;
            if (v275 >> 59)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v276 = (char *)operator new(32 * v275);
            v277 = &v276[32 * v273];
            *(_QWORD *)__dst = v276;
            *(_QWORD *)&__dst[8] = v277;
            v278 = &v276[32 * v275];
            *(_OWORD *)v277 = *(_OWORD *)&v512.__r_.__value_.__l.__data_;
            v279 = v512.__r_.__value_.__r.__words[2];
            memset(&v512, 0, sizeof(v512));
            *((_QWORD *)v277 + 2) = v279;
            *((_QWORD *)v277 + 3) = v266;
            v280 = v277 + 32;
            *(_QWORD *)&__dst[16] = v277 + 32;
            *(_QWORD *)&__dst[24] = v278;
            if (v269 == v272)
            {
              v282 = vdupq_n_s64(v269);
            }
            else
            {
              do
              {
                v281 = *(_OWORD *)(v269 - 32);
                *((_QWORD *)v277 - 2) = *(_QWORD *)(v269 - 16);
                *((_OWORD *)v277 - 2) = v281;
                *(_QWORD *)(v269 - 24) = 0;
                *(_QWORD *)(v269 - 16) = 0;
                *(_QWORD *)(v269 - 32) = 0;
                *((_QWORD *)v277 - 1) = *(_QWORD *)(v269 - 8);
                v277 -= 32;
                v269 -= 32;
              }
              while (v269 != v272);
              v282 = v487;
              v270 = v488;
              v280 = *(char **)&__dst[16];
              v278 = *(char **)&__dst[24];
            }
            v487.i64[0] = (uint64_t)v277;
            v487.i64[1] = (uint64_t)v280;
            *(int64x2_t *)&__dst[8] = v282;
            v488 = v278;
            *(_QWORD *)&__dst[24] = v270;
            *(_QWORD *)__dst = v282.i64[0];
            std::__split_buffer<std::pair<std::string,mecab_token_t *>>::~__split_buffer((uint64_t)__dst);
            v487.i64[1] = (uint64_t)v280;
            if (SHIBYTE(v512.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v512.__r_.__value_.__l.__data_);
          }
          else
          {
            v271 = *(_OWORD *)&v512.__r_.__value_.__l.__data_;
            *(_QWORD *)(v487.i64[1] + 16) = *((_QWORD *)&v512.__r_.__value_.__l + 2);
            *(_OWORD *)v269 = v271;
            memset(&v512, 0, sizeof(v512));
            *(_QWORD *)(v269 + 24) = v513;
            v487.i64[1] = v269 + 32;
          }
        }
        else
        {
          v267 = v485;
          if ((unint64_t)v485 >= v486)
          {
            v268 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(&v484, (__int128 **)&__p);
          }
          else
          {
            v485->__r_.__value_.__r.__words[0] = 0;
            v267->__r_.__value_.__l.__size_ = 0;
            v267->__r_.__value_.__r.__words[2] = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v267, (__int128 *)__p, (__int128 *)v453, 0xAAAAAAAAAAAAAAABLL * (((char *)v453 - (_BYTE *)__p) >> 3));
            v268 = (uint64_t)&v267[1];
          }
          v485 = (std::string *)v268;
          std::string::append(&v470, (const std::string::value_type *)v266, 0xCuLL);
          MEMORY[0x20BD0639C](v266, 0x1000C403E1C8BA9);
        }
        LOBYTE(v283) = HIBYTE(v472);
        if (SHIBYTE(v472) < 0)
        {
          v285 = v472;
          v287 = v437;
          if (!(_QWORD)v472)
            v287 = 1;
          if ((v287 & 1) != 0)
            goto LABEL_399;
          v286 = v471;
        }
        else
        {
          v284 = v437;
          if (!HIBYTE(v472))
            v284 = 1;
          if ((v284 & 1) != 0)
            goto LABEL_399;
          v285 = HIBYTE(v472);
          v286 = (const std::string::value_type *)&v471;
        }
        std::string::append(&v473, v286, v285);
        LOBYTE(v283) = HIBYTE(v472);
LABEL_399:
        v283 = v283;
        if ((v283 & 0x80u) != 0)
          v283 = v472;
        v441 += v283;
        ++v439;
        ++v483;
LABEL_402:
        *(_QWORD *)__dst = &__p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__dst);
        v66 = v438;
      }
      v288 = (_QWORD *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v288 + *(_QWORD *)(*v288 - 24)));
      v289 = std::locale::use_facet((const std::locale *)__dst, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v289->__vftable[2].~facet_0)(v289, 10);
      std::locale::~locale((std::locale *)__dst);
      std::ostream::put();
      std::ostream::flush();
      v539[0] = v430;
      *(_QWORD *)((char *)v539 + *(_QWORD *)(v430 - 24)) = v429;
      MEMORY[0x20BD061F8](v540);
      std::istream::~istream();
      MEMORY[0x20BD06354](v541);
      ++v66;
    }
    while (v66 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v431[1] - *v431) >> 3));
  }
  if (v437)
    std::string::append(&v473, byte_2083DDB50, 1uLL);
  v290 = v487;
  if (v487.i64[1] - v487.i64[0] < 1)
  {
LABEL_410:
    v295 = 0;
    v292 = 0;
  }
  else
  {
    v291 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v292 = (v487.i64[1] - v487.i64[0]) >> 5;
    while (1)
    {
      v293 = (__n128 *)operator new(32 * v292, v291);
      if (v293)
        break;
      v294 = v292 > 1;
      v292 >>= 1;
      if (!v294)
        goto LABEL_410;
    }
    v295 = v293;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,MeCab::Dictionary::compile(MeCab::Param const&,std::vector<std::string> const&,char const*,MeCab::CompileOptions const&)::$_0 &,std::__wrap_iter<std::pair<std::string,mecab_token_t *> *>>((void **)v290.i64[0], (__n128 *)v290.i64[1], (v290.i64[1] - v290.i64[0]) >> 5, v295, v292);
  if (v295)
    operator delete(v295);
  if (v433)
  {
    if (v461.__begin_ == v461.__end_)
    {
      fwrite("failed to build reading trie\n", 0x1DuLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
    }
    else
    {
      marisa::Keyset::Keyset((marisa::Keyset *)__dst);
      begin = v461.__begin_;
      v297 = v461.__end_;
      while (begin != v297)
      {
        if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
        {
          v299 = (const char *)begin->__r_.__value_.__r.__words[0];
          v298 = begin->__r_.__value_.__l.__size_;
        }
        else
        {
          v298 = HIBYTE(begin->__r_.__value_.__r.__words[2]);
          v299 = (const char *)begin;
        }
        marisa::Keyset::push_back((size_t *)__dst, v299, v298, 1.0);
        ++begin;
      }
      marisa::Trie::build(&v462, (marisa::Keyset *)__dst, 0);
      marisa::scoped_array<marisa::scoped_array<marisa::Key>>::~scoped_array(v516);
      marisa::scoped_array<marisa::scoped_array<char>>::~scoped_array((uint64_t *)&__dst[24]);
      marisa::scoped_array<marisa::scoped_array<char>>::~scoped_array((uint64_t *)__dst);
    }
    v301 = v487.i64[1];
    for (k = v487.i64[0]; k != v301; k += 32)
    {
      if ((v473.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v302 = &v473;
      else
        v302 = (std::string *)v473.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(__dst, (char *)v302 + *(unsigned int *)(*(_QWORD *)(k + 24) + 8));
      if (__dst[23] >= 0)
        v303 = __dst;
      else
        v303 = *(const char **)__dst;
      if (__dst[23] >= 0)
        v304 = __dst[23];
      else
        v304 = *(_QWORD *)&__dst[8];
      marisa::Agent::set_query(v463, v303, v304);
      if ((marisa::Trie::lookup(&v462, (marisa::Agent *)v463) & 1) == 0)
      {
        v305 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v305, (uint64_t)"(", 1);
        v306 = (_QWORD *)std::ostream::operator<<();
        v307 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v306, (uint64_t)") [", 3);
        v308 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v307, (uint64_t)"m_trie.lookup(m_agent)", 22);
        v309 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v308, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v309, (uint64_t)"cannot find entry in trie.\n", 27);
        MeCab::die::~die((MeCab::die *)&v530);
      }
      *(_DWORD *)(*(_QWORD *)(k + 24) + 8) = v464;
      if ((__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
    }
  }
  v522 = 0uLL;
  *(_QWORD *)&v523 = 0;
  memset(&v512, 0, sizeof(v512));
  __p = 0;
  v453 = 0;
  v454 = 0;
  v310 = v487.i64[1];
  if (v487.i64[1] != v487.i64[0])
  {
    v311 = 0;
    v312 = 0;
    v313 = 0;
    v314 = 0;
    v315 = 0;
    v316 = 0;
    v310 = v487.i64[0];
    while (1)
    {
      if (v314)
      {
        v317 = (unsigned __int8 **)(v310 + 32 * v314);
        v318 = BYTE7(v523);
        if ((SBYTE7(v523) & 0x80u) == 0)
          v319 = (unsigned __int8 *)BYTE7(v523);
        else
          v319 = (unsigned __int8 *)*((_QWORD *)&v522 + 1);
        v320 = (unsigned __int8 *)*((unsigned __int8 *)v317 + 23);
        v321 = (char)v320;
        if ((char)v320 < 0)
          v320 = v317[1];
        if (v319 != v320)
          goto LABEL_458;
        if (v321 >= 0)
          v322 = (unsigned __int8 *)(v310 + 32 * v314);
        else
          v322 = *v317;
        if ((BYTE7(v523) & 0x80) != 0)
        {
          if (memcmp((const void *)v522, v322, *((size_t *)&v522 + 1)))
            goto LABEL_458;
        }
        else if (BYTE7(v523))
        {
          v323 = (unsigned __int8 *)&v522;
          while (*v323 == *v322)
          {
            ++v323;
            ++v322;
            if (!--v318)
              goto LABEL_460;
          }
LABEL_458:
          v324 = (uint64_t **)(v310 + 32 * v315);
          v325 = v313;
          if (*((char *)v324 + 23) < 0)
            v324 = (uint64_t **)*v324;
          v335 = v512.__r_.__value_.__l.__size_;
          if (v512.__r_.__value_.__l.__size_ >= v512.__r_.__value_.__r.__words[2])
          {
            v337 = (uint64_t)(v512.__r_.__value_.__l.__size_ - v512.__r_.__value_.__r.__words[0]) >> 3;
            if ((unint64_t)(v337 + 1) >> 61)
              std::vector<char *>::__throw_length_error[abi:ne180100]();
            v338 = (uint64_t)(v512.__r_.__value_.__r.__words[2] - v512.__r_.__value_.__r.__words[0]) >> 2;
            if (v338 <= v337 + 1)
              v338 = v337 + 1;
            if (v512.__r_.__value_.__r.__words[2] - v512.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
              v339 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v339 = v338;
            if (v339)
              v340 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>((uint64_t)&v512.__r_.__value_.__r.__words[2], v339);
            else
              v340 = 0;
            v341 = &v340[8 * v337];
            *(_QWORD *)v341 = v324;
            v336 = (std::string::size_type)(v341 + 8);
            v342 = (char *)v512.__r_.__value_.__l.__size_;
            v343 = v512.__r_.__value_.__r.__words[0];
            if (v512.__r_.__value_.__l.__size_ != v512.__r_.__value_.__r.__words[0])
            {
              do
              {
                v344 = *((_QWORD *)v342 - 1);
                v342 -= 8;
                *((_QWORD *)v341 - 1) = v344;
                v341 -= 8;
              }
              while (v342 != (char *)v343);
              v342 = (char *)v512.__r_.__value_.__r.__words[0];
            }
            v512.__r_.__value_.__r.__words[0] = (std::string::size_type)v341;
            v512.__r_.__value_.__l.__size_ = v336;
            v512.__r_.__value_.__r.__words[2] = (std::string::size_type)&v340[8 * v339];
            if (v342)
              operator delete(v342);
          }
          else
          {
            *(_QWORD *)v512.__r_.__value_.__l.__size_ = v324;
            v336 = v335 + 8;
          }
          v512.__r_.__value_.__l.__size_ = v336;
          v345 = v487.i64[0] + 32 * v315;
          if (*(char *)(v345 + 23) < 0)
            v346 = *(_QWORD *)(v345 + 8);
          else
            v346 = *(unsigned __int8 *)(v345 + 23);
          v347 = v453;
          if ((unint64_t)v453 >= v454)
          {
            v349 = (std::string *)__p;
            v350 = ((char *)v453 - (_BYTE *)__p) >> 3;
            v351 = v350 + 1;
            if ((unint64_t)(v350 + 1) >> 61)
              std::vector<char *>::__throw_length_error[abi:ne180100]();
            v352 = v454 - (_QWORD)__p;
            if ((uint64_t)(v454 - (_QWORD)__p) >> 2 > v351)
              v351 = v352 >> 2;
            if ((unint64_t)v352 >= 0x7FFFFFFFFFFFFFF8)
              v353 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v353 = v351;
            if (v353)
            {
              v354 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>((uint64_t)&v454, v353);
              v349 = (std::string *)__p;
              v347 = v453;
            }
            else
            {
              v354 = 0;
            }
            v355 = (std::string::size_type *)&v354[8 * v350];
            *v355 = v346;
            v348 = (__int128 *)(v355 + 1);
            while (v347 != v349)
            {
              v356 = v347[-1].__r_.__value_.__r.__words[2];
              v347 = (std::string *)((char *)v347 - 8);
              *--v355 = v356;
            }
            __p = v355;
            v453 = (std::string *)v348;
            v454 = (unint64_t)&v354[8 * v353];
            if (v349)
              operator delete(v349);
          }
          else
          {
            v453->__r_.__value_.__r.__words[0] = v346;
            v348 = (__int128 *)&v347->__r_.__value_.__r.__words[1];
          }
          v453 = (std::string *)v348;
          v357 = v316 + ((_DWORD)v315 << 8);
          v313 = v325;
          if ((unint64_t)v312 >= v325)
          {
            v358 = (v312 - v311) >> 2;
            v359 = v358 + 1;
            if ((unint64_t)(v358 + 1) >> 62)
              std::vector<char *>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v325 - (_QWORD)v311) >> 1 > v359)
              v359 = (uint64_t)(v325 - (_QWORD)v311) >> 1;
            if (v325 - (unint64_t)v311 >= 0x7FFFFFFFFFFFFFFCLL)
              v360 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v360 = v359;
            if (v360)
              v360 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v360);
            else
              v361 = 0;
            v362 = (char *)(v360 + 4 * v358);
            *(_DWORD *)v362 = v357;
            v363 = v362 + 4;
            while (v312 != v311)
            {
              v364 = *((_DWORD *)v312 - 1);
              v312 -= 4;
              *((_DWORD *)v362 - 1) = v364;
              v362 -= 4;
            }
            v313 = v360 + 4 * v361;
            if (v311)
              operator delete(v311);
            v311 = v362;
            v312 = v363;
          }
          else
          {
            *(_DWORD *)v312 = v357;
            v312 += 4;
          }
          v316 = 1;
          v315 = v314;
          goto LABEL_522;
        }
      }
LABEL_460:
      if ((unint64_t)++v316 >= 0x100)
      {
        v326 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v326, (uint64_t)"(", 1);
        v327 = (_QWORD *)std::ostream::operator<<();
        v328 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v327, (uint64_t)") [", 3);
        v329 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v328, (uint64_t)"bsize <= 0xff", 13);
        v330 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v329, (uint64_t)"] ", 2);
        v331 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v330, (uint64_t)"count of homograph words is greater than 255. string =", 54);
        if ((SBYTE7(v523) & 0x80u) == 0)
          v332 = &v522;
        else
          v332 = (__int128 *)v522;
        if ((SBYTE7(v523) & 0x80u) == 0)
          v333 = BYTE7(v523);
        else
          v333 = *((_QWORD *)&v522 + 1);
        v334 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v331, (uint64_t)v332, v333);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v334, (uint64_t)" count=", 7);
        std::ostream::operator<<();
        MeCab::die::~die((MeCab::die *)__dst);
      }
LABEL_522:
      std::string::operator=((std::string *)&v522, (const std::string *)(v487.i64[0] + 32 * v314++));
      v310 = v487.i64[0];
      if (v314 >= (v487.i64[1] - v487.i64[0]) >> 5)
        goto LABEL_525;
    }
  }
  v311 = 0;
  v312 = 0;
  v313 = 0;
  LODWORD(v316) = 0;
  v315 = 0;
LABEL_525:
  v365 = (uint64_t **)(v310 + 32 * v315);
  if (*((char *)v365 + 23) < 0)
    v365 = (uint64_t **)*v365;
  v366 = v512.__r_.__value_.__l.__size_;
  if (v512.__r_.__value_.__l.__size_ >= v512.__r_.__value_.__r.__words[2])
  {
    v368 = (uint64_t)(v512.__r_.__value_.__l.__size_ - v512.__r_.__value_.__r.__words[0]) >> 3;
    if ((unint64_t)(v368 + 1) >> 61)
      std::vector<char *>::__throw_length_error[abi:ne180100]();
    v369 = (uint64_t)(v512.__r_.__value_.__r.__words[2] - v512.__r_.__value_.__r.__words[0]) >> 2;
    if (v369 <= v368 + 1)
      v369 = v368 + 1;
    if (v512.__r_.__value_.__r.__words[2] - v512.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
      v370 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v370 = v369;
    if (v370)
      v371 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>((uint64_t)&v512.__r_.__value_.__r.__words[2], v370);
    else
      v371 = 0;
    v372 = &v371[8 * v368];
    v373 = (std::string::size_type)&v371[8 * v370];
    *(_QWORD *)v372 = v365;
    v367 = (std::string::size_type)(v372 + 8);
    v374 = (char *)v512.__r_.__value_.__l.__size_;
    v375 = v512.__r_.__value_.__r.__words[0];
    if (v512.__r_.__value_.__l.__size_ != v512.__r_.__value_.__r.__words[0])
    {
      do
      {
        v376 = *((_QWORD *)v374 - 1);
        v374 -= 8;
        *((_QWORD *)v372 - 1) = v376;
        v372 -= 8;
      }
      while (v374 != (char *)v375);
      v374 = (char *)v512.__r_.__value_.__r.__words[0];
    }
    v512.__r_.__value_.__r.__words[0] = (std::string::size_type)v372;
    v512.__r_.__value_.__l.__size_ = v367;
    v512.__r_.__value_.__r.__words[2] = v373;
    if (v374)
      operator delete(v374);
  }
  else
  {
    *(_QWORD *)v512.__r_.__value_.__l.__size_ = v365;
    v367 = v366 + 8;
  }
  v512.__r_.__value_.__l.__size_ = v367;
  v377 = v487.i64[0] + 32 * v315;
  if (*(char *)(v377 + 23) < 0)
    v378 = *(_QWORD *)(v377 + 8);
  else
    v378 = *(unsigned __int8 *)(v377 + 23);
  v379 = v453;
  if ((unint64_t)v453 >= v454)
  {
    v381 = (std::string *)__p;
    v382 = ((char *)v453 - (_BYTE *)__p) >> 3;
    v383 = v382 + 1;
    if ((unint64_t)(v382 + 1) >> 61)
      std::vector<char *>::__throw_length_error[abi:ne180100]();
    v384 = v454 - (_QWORD)__p;
    if ((uint64_t)(v454 - (_QWORD)__p) >> 2 > v383)
      v383 = v384 >> 2;
    if ((unint64_t)v384 >= 0x7FFFFFFFFFFFFFF8)
      v385 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v385 = v383;
    if (v385)
    {
      v386 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>((uint64_t)&v454, v385);
      v381 = (std::string *)__p;
      v379 = v453;
    }
    else
    {
      v386 = 0;
    }
    v387 = (std::string::size_type *)&v386[8 * v382];
    v388 = &v386[8 * v385];
    *v387 = v378;
    v380 = (__int128 *)(v387 + 1);
    while (v379 != v381)
    {
      v389 = v379[-1].__r_.__value_.__r.__words[2];
      v379 = (std::string *)((char *)v379 - 8);
      *--v387 = v389;
    }
    __p = v387;
    v453 = (std::string *)v380;
    v454 = (unint64_t)v388;
    if (v381)
      operator delete(v381);
  }
  else
  {
    v453->__r_.__value_.__r.__words[0] = v378;
    v380 = (__int128 *)&v379->__r_.__value_.__r.__words[1];
  }
  v453 = (std::string *)v380;
  v390 = v316 + ((_DWORD)v315 << 8);
  if ((unint64_t)v312 >= v313)
  {
    v391 = (v312 - v311) >> 2;
    v392 = v391 + 1;
    if ((unint64_t)(v391 + 1) >> 62)
      std::vector<char *>::__throw_length_error[abi:ne180100]();
    if ((uint64_t)(v313 - (_QWORD)v311) >> 1 > v392)
      v392 = (uint64_t)(v313 - (_QWORD)v311) >> 1;
    if (v313 - (unint64_t)v311 >= 0x7FFFFFFFFFFFFFFCLL)
      v393 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v393 = v392;
    if (v393)
      v393 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v393);
    v394 = (char *)(v393 + 4 * v391);
    *(_DWORD *)v394 = v390;
    while (v312 != v311)
    {
      v395 = *((_DWORD *)v312 - 1);
      v312 -= 4;
      *((_DWORD *)v394 - 1) = v395;
      v394 -= 4;
    }
    if (v311)
      operator delete(v311);
    v311 = v394;
  }
  else
  {
    *(_DWORD *)v312 = v390;
  }
  v396 = (void **)malloc_type_malloc(0x48uLL, 0x108004094C1867FuLL);
  v397 = v396;
  if (v396)
  {
    v396[8] = 0;
    *((_OWORD *)v396 + 2) = 0u;
    *((_OWORD *)v396 + 3) = 0u;
    *(_OWORD *)v396 = 0u;
    *((_OWORD *)v396 + 1) = 0u;
  }
  btrie_build((uint64_t)v396, (uint64_t)(v512.__r_.__value_.__l.__size_ - v512.__r_.__value_.__r.__words[0]) >> 3, (uint64_t *)v512.__r_.__value_.__l.__data_, (uint64_t *)__p, v311);
  v398 = v487.i64[1];
  if (v487.i64[1] != v487.i64[0])
  {
    v399 = 0;
    v400 = 24;
    v398 = v487.i64[0];
    do
    {
      std::string::append(&v470, *(const std::string::value_type **)(v398 + v400), 0xCuLL);
      v398 = v487.i64[0];
      v401 = *(_QWORD *)(v487.i64[0] + v400);
      if (v401)
      {
        MEMORY[0x20BD0639C](v401, 0x1000C403E1C8BA9);
        v398 = v487.i64[0];
      }
      ++v399;
      v402 = v487.i64[1];
      v400 += 32;
    }
    while (v399 < (v487.i64[1] - v398) >> 5);
    while (v402 != v398)
    {
      if (*(char *)(v402 - 9) < 0)
        operator delete(*(void **)(v402 - 32));
      v402 -= 32;
    }
  }
  v487.i64[1] = v398;
  while (1)
  {
    v403 = HIBYTE(v470.__r_.__value_.__r.__words[2]);
    if ((v470.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v403 = v470.__r_.__value_.__s.__data_[8];
    if ((v403 & 7) == 0)
      break;
    *(_DWORD *)&__dst[8] = 0;
    *(_QWORD *)__dst = 0;
    std::string::append(&v470, __dst, 0xCuLL);
  }
  v451 = (v426 << 26) | (v424 << 28) | (v427 << 24) | (v425 << 22);
  v450 = (unsigned __int16)v510;
  v449 = HIWORD(v510);
  if (v397)
    v404 = (size_t)v397[3] + (_BYTE *)v397[2] - (_BYTE *)v397[1];
  else
    v404 = 0;
  v448 = v404;
  if ((v470.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v405 = HIBYTE(v470.__r_.__value_.__r.__words[2]);
  else
    v405 = v470.__r_.__value_.__r.__words[1];
  v447 = v405;
  v445 = 0;
  v446 = 0;
  if (v433)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__dst);
    marisa::write(&__dst[16], &v462);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__dst[24], &v530);
    *(_QWORD *)__dst = *MEMORY[0x24BEDB7F0];
    v406 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(_QWORD *)&__dst[*(_QWORD *)(*(_QWORD *)__dst - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    *(_QWORD *)&__dst[16] = v406;
    *(_QWORD *)&__dst[24] = MEMORY[0x24BEDB848] + 16;
    if (SHIBYTE(v518) < 0)
      operator delete(*((void **)&v517 + 1));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD06354](v520);
    v446 = BYTE7(v531);
    v445 = (void *)v530;
    LOBYTE(v407) = BYTE7(v531);
    if (SBYTE7(v531) < 0)
    {
      v407 = DWORD2(v530);
      goto LABEL_609;
    }
    goto LABEL_607;
  }
  LOBYTE(v407) = *((_BYTE *)&v473.__r_.__value_.__s + 23);
  if ((SHIBYTE(v473.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_607:
    v407 = v407;
    goto LABEL_609;
  }
  v407 = v473.__r_.__value_.__r.__words[1];
LABEL_609:
  v444 = v407;
  v526 = 0u;
  v527 = 0u;
  if ((v468.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v408 = &v468;
  else
    v408 = (std::string *)v468.__r_.__value_.__r.__words[0];
  strncpy((char *)&v526, (const char *)v408, 0x1FuLL);
  v409 = (FILE **)MEMORY[0x24BDAC8D8];
  fprintf((FILE *)*MEMORY[0x24BDAC8D8], "INFO: trie size = %zu bytes (%.3f KB)\n", v448, (double)v448 / 1000.0);
  fprintf(*v409, "INFO: token array size = %d bytes (%.3f KB)\n", v447, (double)v447 / 1000.0);
  fprintf(*v409, "INFO: fbuf size = %d (%.3f KB)\n", v444, (double)v444 / 1000.0);
  std::ofstream::basic_ofstream(__dst);
  if ((__dst[*(_QWORD *)(*(_QWORD *)__dst - 24) + 32] & 5) != 0)
  {
    v410 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/dictionary.cpp", 64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v410, (uint64_t)"(", 1);
    v411 = (_QWORD *)std::ostream::operator<<();
    v412 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v411, (uint64_t)") [", 3);
    v413 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v412, (uint64_t)"bofs", 4);
    v414 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v413, (uint64_t)"] ", 2);
    v415 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v414, (uint64_t)"permission denied: ", 19);
    v416 = strlen(__s);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v415, (uint64_t)__s, v416);
    MeCab::die::~die((MeCab::die *)&v530);
  }
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  if (!v433)
  {
    if (SHIBYTE(v473.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v473.__r_.__value_.__l.__size_)
        goto LABEL_620;
    }
    else if (!*((_BYTE *)&v473.__r_.__value_.__s + 23))
    {
      goto LABEL_620;
    }
  }
  std::ostream::write();
LABEL_620:
  v417 = &__dst[*(_QWORD *)(*(_QWORD *)__dst - 24)];
  if ((v417[32] & 5) == 0)
    (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v417 + 5) + 32))(&v530, *((_QWORD *)v417 + 5), 0, 1, 16);
  MEMORY[0x20BD0627C](v511, __dst);
  v418 = &__dst[*(_QWORD *)(*(_QWORD *)__dst - 24)];
  if ((v418[32] & 5) == 0)
  {
    v419 = *((_QWORD *)v418 + 5);
    v538 = 0;
    v536 = 0u;
    v537 = 0u;
    v534 = 0u;
    v535 = 0u;
    v532 = 0u;
    v533 = 0u;
    v530 = 0u;
    v531 = 0u;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v419 + 40))(v539, v419, &v530, 16);
    if (v540[14] == -1)
      std::ios_base::clear((std::ios_base *)&__dst[*(_QWORD *)(*(_QWORD *)__dst - 24)], *(_DWORD *)&__dst[*(_QWORD *)(*(_QWORD *)__dst - 24) + 32] | 4);
  }
  MEMORY[0x20BD06288](v511);
  std::ostream::write();
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)&__dst[*(_QWORD *)(*(_QWORD *)__dst - 24)], *(_DWORD *)&__dst[*(_QWORD *)(*(_QWORD *)__dst - 24) + 32] | 4);
  btrie_close(v397);
  *(_QWORD *)__dst = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)&__dst[*(_QWORD *)(*(_QWORD *)__dst - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x20BD061F8](&__dst[8]);
  std::ostream::~ostream();
  MEMORY[0x20BD06354](v521);
  if (v446 < 0)
    operator delete(v445);
  if (v311)
    operator delete(v311);
  if (__p)
  {
    v453 = (std::string *)__p;
    operator delete(__p);
  }
  if (v512.__r_.__value_.__r.__words[0])
  {
    v512.__r_.__value_.__l.__size_ = v512.__r_.__value_.__r.__words[0];
    operator delete(v512.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v523) < 0)
    operator delete((void *)v522);
  v455[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v455 + *(_QWORD *)(v455[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v455[2] = MEMORY[0x24BEDB848] + 16;
  if (v456 < 0)
    operator delete((void *)v455[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x20BD06354](&v457);
  MeCab::Iconv::~Iconv((MeCab::Iconv *)v459);
  MeCab::Iconv::~Iconv((MeCab::Iconv *)v460);
  *(_QWORD *)__dst = &v461;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__dst);
  marisa::Agent::~Agent((marisa::Agent *)v463);
  marisa::Trie::~Trie((marisa::Trie *)&v462);
  if (SHIBYTE(v465.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v465.__r_.__value_.__l.__data_);
  if (SHIBYTE(v466.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v466.__r_.__value_.__l.__data_);
  if (SHIBYTE(v468.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v468.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v470.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v470.__r_.__value_.__l.__data_);
  if (SHIBYTE(v472) < 0)
    operator delete(v471);
  if (SHIBYTE(v473.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v473.__r_.__value_.__l.__data_);
  if (SHIBYTE(v475) < 0)
    operator delete(v474[0]);
  if (SHIBYTE(v477) < 0)
    operator delete(v476[0]);
  if (SHIBYTE(v480) < 0)
    operator delete(v478);
  if (SHIBYTE(v481.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v481.__r_.__value_.__l.__data_);
  if (SHIBYTE(v482.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v482.__r_.__value_.__l.__data_);
  *(_QWORD *)__dst = &v484;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__dst);
  *(_QWORD *)__dst = &v487;
  std::vector<std::pair<std::string,mecab_token_t *>>::__destroy_vector::operator()[abi:ne180100]((void ***)__dst);
  if (SHIBYTE(v489.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v489.__r_.__value_.__l.__data_);
  if (SHIBYTE(v490.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v490.__r_.__value_.__l.__data_);
  if (SHIBYTE(v491.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v491.__r_.__value_.__l.__data_);
  if (SHIBYTE(v492.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v492.__r_.__value_.__l.__data_);
  if (SHIBYTE(v493.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v493.__r_.__value_.__l.__data_);
  if (SHIBYTE(v494.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v494.__r_.__value_.__l.__data_);
  if (SHIBYTE(v495.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v495.__r_.__value_.__l.__data_);
  if (v434)
    (*(void (**)(MeCab::StringBuffer *))(*(_QWORD *)v434 + 8))(v434);
  if (v432)
    (*(void (**)(uint64_t))(*(_QWORD *)v432 + 8))(v432);
  MeCab::scoped_ptr<MeCab::ContextID>::~scoped_ptr(&v503);
  MeCab::scoped_ptr<MeCab::POSIDGenerator>::~scoped_ptr(&v505);
  MeCab::scoped_ptr<MeCab::DictionaryRewriter>::~scoped_ptr(&v507);
  MeCab::Connector::~Connector(v509);
  return 1;
}

void sub_2083CB158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, marisa::Agent *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a67;
  uint64_t a70;
  void *v70;
  uint64_t v71;
  void *v73;

  MEMORY[0x20BD06288](&STACK[0x800]);
  std::ofstream::~ofstream(&STACK[0x830]);
  if (a44 < 0)
    operator delete(__p);
  if (v70)
    operator delete(v70);
  if (a49)
    operator delete(a49);
  v73 = *(void **)v71;
  if (*(_QWORD *)v71)
  {
    *(_QWORD *)(v71 + 8) = v73;
    operator delete(v73);
  }
  if (SLOBYTE(STACK[0x10847]) < 0)
    operator delete((void *)STACK[0x10830]);
  a52 = *MEMORY[0x24BEDB7F8];
  *(uint64_t *)((char *)&a52 + *(_QWORD *)(a52 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  a54 = MEMORY[0x24BEDB848] + 16;
  if (a67 < 0)
    operator delete(a62);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x20BD06354](&a70);
  MeCab::Iconv::~Iconv((MeCab::Iconv *)&STACK[0x258]);
  MeCab::Iconv::~Iconv((MeCab::Iconv *)&STACK[0x268]);
  STACK[0x128B8] = (unint64_t)&STACK[0x278];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x128B8]);
  marisa::Agent::~Agent(a14);
  marisa::Trie::~Trie((marisa::Trie *)&STACK[0x290]);
  if (SLOBYTE(STACK[0x2DF]) < 0)
    operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2F7]) < 0)
    operator delete((void *)STACK[0x2E0]);
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete((void *)STACK[0x300]);
  if (SLOBYTE(STACK[0x32F]) < 0)
    operator delete((void *)STACK[0x318]);
  if (SLOBYTE(STACK[0x347]) < 0)
    operator delete((void *)STACK[0x330]);
  if (SLOBYTE(STACK[0x35F]) < 0)
    operator delete((void *)STACK[0x348]);
  if (SLOBYTE(STACK[0x377]) < 0)
    operator delete((void *)STACK[0x360]);
  if (SLOBYTE(STACK[0x38F]) < 0)
    operator delete((void *)STACK[0x378]);
  if (SLOBYTE(STACK[0x3A7]) < 0)
    operator delete((void *)STACK[0x390]);
  if (SLOBYTE(STACK[0x3BF]) < 0)
    operator delete((void *)STACK[0x3A8]);
  if (SLOBYTE(STACK[0x3D7]) < 0)
    operator delete((void *)STACK[0x3C0]);
  if (SLOBYTE(STACK[0x3EF]) < 0)
    operator delete((void *)STACK[0x3D8]);
  STACK[0x128B8] = (unint64_t)&STACK[0x3F8];
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x128B8]);
  STACK[0x128B8] = (unint64_t)&STACK[0x410];
  std::vector<std::pair<std::string,mecab_token_t *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x128B8]);
  if (SLOBYTE(STACK[0x43F]) < 0)
    operator delete((void *)STACK[0x428]);
  if (SLOBYTE(STACK[0x457]) < 0)
    operator delete((void *)STACK[0x440]);
  if (SLOBYTE(STACK[0x46F]) < 0)
    operator delete((void *)STACK[0x458]);
  if (SLOBYTE(STACK[0x487]) < 0)
    operator delete((void *)STACK[0x470]);
  if (SLOBYTE(STACK[0x49F]) < 0)
    operator delete((void *)STACK[0x488]);
  if (SLOBYTE(STACK[0x4B7]) < 0)
    operator delete((void *)STACK[0x4A0]);
  if (SLOBYTE(STACK[0x4CF]) < 0)
  {
    operator delete((void *)STACK[0x4B8]);
    if (a27)
      goto LABEL_51;
  }
  else if (a27)
  {
LABEL_51:
    (*(void (**)(uint64_t))(*(_QWORD *)a27 + 8))(a27);
    if (!a25)
    {
LABEL_56:
      MeCab::scoped_ptr<MeCab::ContextID>::~scoped_ptr(&STACK[0x540]);
      MeCab::scoped_ptr<MeCab::POSIDGenerator>::~scoped_ptr(&STACK[0x550]);
      MeCab::scoped_ptr<MeCab::DictionaryRewriter>::~scoped_ptr(&STACK[0x560]);
      MeCab::Connector::~Connector((void **)&STACK[0x570]);
      _Unwind_Resume(a1);
    }
LABEL_55:
    (*(void (**)(uint64_t))(*(_QWORD *)a25 + 8))(a25);
    goto LABEL_56;
  }
  if (!a25)
    goto LABEL_56;
  goto LABEL_55;
}

_QWORD *std::endl[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_2083CB974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

MeCab::Writer *MeCab::Writer::Writer(MeCab::Writer *this)
{
  MeCab::scoped_string *v2;

  *(_QWORD *)this = &off_24C09C520;
  v2 = (MeCab::Writer *)((char *)this + 24);
  MeCab::scoped_string::scoped_string((MeCab::Writer *)((char *)this + 8));
  MeCab::scoped_string::scoped_string(v2);
  MeCab::scoped_string::scoped_string((MeCab::Writer *)((char *)this + 40));
  MeCab::scoped_string::scoped_string((MeCab::Writer *)((char *)this + 56));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this + 72);
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  return this;
}

void sub_2083CB9F4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[7] = &off_24C09C220;
  v3 = v1[8];
  if (v3)
    MEMORY[0x20BD06378](v3, 0x1000C8077774924);
  v1[5] = &off_24C09C220;
  v4 = v1[6];
  if (v4)
    MEMORY[0x20BD06378](v4, 0x1000C8077774924);
  v1[3] = &off_24C09C220;
  v5 = v1[4];
  if (v5)
    MEMORY[0x20BD06378](v5, 0x1000C8077774924);
  v1[1] = &off_24C09C220;
  v6 = v1[2];
  if (v6)
    MEMORY[0x20BD06378](v6, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

void MeCab::Writer::~Writer(void **this)
{
  MeCab::Writer::~Writer(this);
  JUMPOUT(0x20BD0639CLL);
}

{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *this = &off_24C09C520;
  v2 = (char *)(this + 9);
  if (*((char *)this + 359) < 0)
    operator delete(this[42]);
  v3 = MEMORY[0x24BEDB800];
  v4 = *MEMORY[0x24BEDB800];
  this[9] = (void *)*MEMORY[0x24BEDB800];
  *(_QWORD *)&v2[*(_QWORD *)(v4 - 24)] = *(_QWORD *)(v3 + 24);
  this[10] = (void *)(MEMORY[0x24BEDB848] + 16);
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD06354](this + 23);
  this[7] = &off_24C09C220;
  v5 = this[8];
  if (v5)
    MEMORY[0x20BD06378](v5, 0x1000C8077774924);
  this[5] = &off_24C09C220;
  v6 = this[6];
  if (v6)
    MEMORY[0x20BD06378](v6, 0x1000C8077774924);
  this[3] = &off_24C09C220;
  v7 = this[4];
  if (v7)
    MEMORY[0x20BD06378](v7, 0x1000C8077774924);
  this[1] = &off_24C09C220;
  v8 = this[2];
  if (v8)
    MEMORY[0x20BD06378](v8, 0x1000C8077774924);
}

uint64_t std::__split_buffer<std::pair<std::string,mecab_token_t *>>::~__split_buffer(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void marisa::Keyset::~Keyset(marisa::Keyset *this)
{
  marisa::scoped_array<marisa::scoped_array<marisa::Key>>::~scoped_array((uint64_t *)this + 6);
  marisa::scoped_array<marisa::scoped_array<char>>::~scoped_array((uint64_t *)this + 3);
  marisa::scoped_array<marisa::scoped_array<char>>::~scoped_array((uint64_t *)this);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(unint64_t a1)
{
  if (a1 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a1);
}

void std::vector<std::pair<std::string,mecab_token_t *>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 9) < 0)
          operator delete(*(v4 - 4));
        v4 -= 4;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void MeCab::scoped_ptr<MeCab::DictionaryRewriter>::~scoped_ptr(_QWORD *a1)
{
  MeCab::scoped_ptr<MeCab::DictionaryRewriter>::~scoped_ptr(a1);
  JUMPOUT(0x20BD0639CLL);
}

_QWORD *MeCab::scoped_ptr<MeCab::DictionaryRewriter>::~scoped_ptr(_QWORD *a1)
{
  uint64_t v2;
  void **v4;

  *a1 = &off_24C09C0F8;
  v2 = a1[1];
  if (v2)
  {
    std::__tree<std::__value_type<std::string,MeCab::FeatureSet>,std::__map_value_compare<std::string,std::__value_type<std::string,MeCab::FeatureSet>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MeCab::FeatureSet>>>::destroy(v2 + 72, *(_QWORD **)(v2 + 80));
    v4 = (void **)(v2 + 48);
    std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100](&v4);
    v4 = (void **)(v2 + 24);
    std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100](&v4);
    v4 = (void **)v2;
    std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100](&v4);
    MEMORY[0x20BD0639C](v2, 0x1020C401749051DLL);
  }
  return a1;
}

void MeCab::scoped_ptr<MeCab::POSIDGenerator>::~scoped_ptr(_QWORD *a1)
{
  MeCab::scoped_ptr<MeCab::POSIDGenerator>::~scoped_ptr(a1);
  JUMPOUT(0x20BD0639CLL);
}

_QWORD *MeCab::scoped_ptr<MeCab::POSIDGenerator>::~scoped_ptr(_QWORD *a1)
{
  uint64_t v2;
  void **v4;

  *a1 = &off_24C09C0D8;
  v2 = a1[1];
  if (v2)
  {
    v4 = (void **)a1[1];
    std::vector<MeCab::RewritePattern>::__destroy_vector::operator()[abi:ne180100](&v4);
    MEMORY[0x20BD0639C](v2, 0x20C40960023A9);
  }
  return a1;
}

void MeCab::scoped_ptr<MeCab::ContextID>::~scoped_ptr(_QWORD *a1)
{
  MeCab::scoped_ptr<MeCab::ContextID>::~scoped_ptr(a1);
  JUMPOUT(0x20BD0639CLL);
}

_QWORD *MeCab::scoped_ptr<MeCab::ContextID>::~scoped_ptr(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C09C138;
  v2 = a1[1];
  if (v2)
  {
    if (*(char *)(v2 + 95) < 0)
      operator delete(*(void **)(v2 + 72));
    if (*(char *)(v2 + 71) < 0)
      operator delete(*(void **)(v2 + 48));
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(v2 + 24, *(char **)(v2 + 32));
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(v2, *(char **)(v2 + 8));
    MEMORY[0x20BD0639C](v2, 0x1032C40D2D3B4A1);
  }
  return a1;
}

void std::__stable_sort<std::_ClassicAlgPolicy,MeCab::Dictionary::compile(MeCab::Param const&,std::vector<std::string> const&,char const*,MeCab::CompileOptions const&)::$_0 &,std::__wrap_iter<std::pair<std::string,mecab_token_t *> *>>(void **a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5)
{
  uint64_t v6;
  __n128 *v7;
  unint64_t v8;
  __n128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void **v20;
  _QWORD *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  __int128 v27;
  __n128 *v28;
  __n128 *v29;
  __n128 *v30;
  uint64_t v31;
  char v32;
  int v33;
  __int128 v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  __n128 *v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  __int128 v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  void *v47;

  if (a3 >= 2)
  {
    v6 = (uint64_t)a1;
    if (a3 == 2)
    {
      v7 = a2 - 2;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((__n128 *)a2[-2].n128_u64, a1) & 0x80) != 0)
      {
        v8 = *(_QWORD *)(v6 + 16);
        v9 = *(__n128 *)v6;
        v10 = a2[-1].n128_u64[0];
        *(__n128 *)v6 = *v7;
        *(_QWORD *)(v6 + 16) = v10;
        *v7 = v9;
        a2[-1].n128_u64[0] = v8;
        v11 = *(_QWORD *)(v6 + 24);
        *(_QWORD *)(v6 + 24) = a2[-1].n128_u64[1];
        a2[-1].n128_u64[1] = v11;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (a1 != (void **)a2)
      {
        v18 = a1 + 4;
        if (a1 + 4 != (void **)a2)
        {
          v19 = 0;
          v20 = a1;
          do
          {
            v21 = v18;
            if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v18, v20) & 0x80) != 0)
            {
              v22 = *(_OWORD *)v21;
              v46 = v21[2];
              v45 = v22;
              v21[1] = 0;
              v21[2] = 0;
              *v21 = 0;
              v47 = v20[7];
              v23 = v19;
              while (1)
              {
                v24 = v6 + v23;
                v25 = (void **)(v6 + v23 + 32);
                if (*(char *)(v6 + v23 + 55) < 0)
                  operator delete(*v25);
                *(_OWORD *)v25 = *(_OWORD *)v24;
                *(_QWORD *)(v6 + v23 + 48) = *(_QWORD *)(v24 + 16);
                *(_BYTE *)(v24 + 23) = 0;
                *(_BYTE *)v24 = 0;
                *(_QWORD *)(v24 + 56) = *(_QWORD *)(v24 + 24);
                if (!v23)
                  break;
                v23 -= 32;
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v45, (void **)(v23 + v6)) & 0x80) == 0)
                {
                  v26 = v6 + v23 + 32;
                  goto LABEL_19;
                }
              }
              v26 = v6;
LABEL_19:
              if (*(char *)(v26 + 23) < 0)
                operator delete(*(void **)v26);
              v27 = v45;
              *(_QWORD *)(v26 + 16) = v46;
              *(_OWORD *)v26 = v27;
              *(_QWORD *)(v26 + 24) = v47;
            }
            v18 = v21 + 4;
            v19 += 32;
            v20 = (void **)v21;
          }
          while (v21 + 4 != (_QWORD *)a2);
        }
      }
    }
    else
    {
      v14 = (uint64_t)a4;
      v15 = a3 >> 1;
      v16 = (__n128 *)&a1[4 * (a3 >> 1)];
      v17 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,MeCab::Dictionary::compile(MeCab::Param const&,std::vector<std::string> const&,char const*,MeCab::CompileOptions const&)::$_0 &,std::__wrap_iter<std::pair<std::string,mecab_token_t *> *>>((__n128 *)a1, v16, v17, a4);
        v28 = (__n128 *)(v14 + 32 * v15);
        std::__stable_sort_move<std::_ClassicAlgPolicy,MeCab::Dictionary::compile(MeCab::Param const&,std::vector<std::string> const&,char const*,MeCab::CompileOptions const&)::$_0 &,std::__wrap_iter<std::pair<std::string,mecab_token_t *> *>>((__n128 *)(v6 + 32 * (a3 >> 1)), a2, a3 - (a3 >> 1), v28);
        v29 = (__n128 *)(v14 + 32 * a3);
        v30 = v28;
        v31 = v14;
        while (v30 != v29)
        {
          v32 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v30, (void **)v31);
          v33 = *(char *)(v6 + 23);
          if (v32 < 0)
          {
            if (v33 < 0)
              operator delete(*(void **)v6);
            v35 = *v30;
            *(_QWORD *)(v6 + 16) = v30[1].n128_u64[0];
            *(__n128 *)v6 = v35;
            v30[1].n128_u8[7] = 0;
            v30->n128_u8[0] = 0;
            *(_QWORD *)(v6 + 24) = v30[1].n128_u64[1];
            v30 += 2;
          }
          else
          {
            if (v33 < 0)
              operator delete(*(void **)v6);
            v34 = *(_OWORD *)v31;
            *(_QWORD *)(v6 + 16) = *(_QWORD *)(v31 + 16);
            *(_OWORD *)v6 = v34;
            *(_BYTE *)(v31 + 23) = 0;
            *(_BYTE *)v31 = 0;
            *(_QWORD *)(v6 + 24) = *(_QWORD *)(v31 + 24);
            v31 += 32;
          }
          v6 += 32;
          if ((__n128 *)v31 == v28)
          {
            if (v30 != v29)
            {
              v36 = 0;
              do
              {
                v37 = v6 + v36 * 16;
                if (*(char *)(v6 + v36 * 16 + 23) < 0)
                  operator delete(*(void **)(v6 + v36 * 16));
                v38 = &v30[v36];
                v39 = v30[v36];
                *(_QWORD *)(v37 + 16) = v30[v36 + 1].n128_u64[0];
                *(__n128 *)v37 = v39;
                v38[1].n128_u8[7] = 0;
                v38->n128_u8[0] = 0;
                *(_QWORD *)(v37 + 24) = v30[v36 + 1].n128_u64[1];
                v36 += 2;
              }
              while (&v38[2] != v29);
            }
            goto LABEL_45;
          }
        }
        if ((__n128 *)v31 != v28)
        {
          v40 = 0;
          do
          {
            v41 = v6 + v40;
            if (*(char *)(v6 + v40 + 23) < 0)
              operator delete(*(void **)v41);
            v42 = (_BYTE *)(v31 + v40);
            v43 = *(_OWORD *)(v31 + v40);
            *(_QWORD *)(v41 + 16) = *(_QWORD *)(v31 + v40 + 16);
            *(_OWORD *)v41 = v43;
            v42[23] = 0;
            *v42 = 0;
            *(_QWORD *)(v41 + 24) = *(_QWORD *)(v31 + v40 + 24);
            v40 += 32;
          }
          while (v42 + 32 != (_BYTE *)v28);
        }
LABEL_45:
        if (v14)
        {
          v44 = a3;
          do
          {
            if (*(char *)(v14 + 23) < 0)
              operator delete(*(void **)v14);
            v14 += 32;
            --v44;
          }
          while (v44);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,MeCab::Dictionary::compile(MeCab::Param const&,std::vector<std::string> const&,char const*,MeCab::CompileOptions const&)::$_0 &,std::__wrap_iter<std::pair<std::string,mecab_token_t *> *>>(a1, v16, v17, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,MeCab::Dictionary::compile(MeCab::Param const&,std::vector<std::string> const&,char const*,MeCab::CompileOptions const&)::$_0 &,std::__wrap_iter<std::pair<std::string,mecab_token_t *> *>>(v6 + 32 * (a3 >> 1), a2, a3 - (a3 >> 1), v14, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,MeCab::Dictionary::compile(MeCab::Param const&,std::vector<std::string> const&,char const*,MeCab::CompileOptions const&)::$_0 &,std::__wrap_iter<std::pair<std::string,mecab_token_t *> *>>(v6, (void **)(v6 + 32 * (a3 >> 1)), (uint64_t)a2, a3 >> 1, a3 - (a3 >> 1), v14, a5);
      }
    }
  }
}

void sub_2083CC2C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v4;

  if (v1)
  {
    v4 = 0;
    do
    {
      if (*(char *)(v1 + 23) < 0)
        operator delete(*(void **)v1);
      ++v4;
      v1 += 32;
    }
    while (v4 < v2);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,MeCab::Dictionary::compile(MeCab::Param const&,std::vector<std::string> const&,char const*,MeCab::CompileOptions const&)::$_0 &,std::__wrap_iter<std::pair<std::string,mecab_token_t *> *>>(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4)
{
  __n128 *v4;
  __n128 *v7;
  __n128 result;
  __n128 *v9;
  char v10;
  __n128 *v11;
  __n128 v12;
  unint64_t *v13;
  __n128 *v14;
  uint64_t v15;
  __n128 *v16;
  __n128 *v17;
  __n128 *v18;
  unint64_t v19;
  __n128 *v20;
  uint64_t v21;
  void **v22;
  char *v23;
  __n128 *v24;
  __n128 *v25;
  __n128 *v26;
  uint64_t v27;
  __n128 *v28;
  __n128 *v29;
  __n128 v30;
  uint64_t v31;
  __n128 *v32;
  __n128 *v33;

  if (a3)
  {
    v4 = a4;
    v7 = a1;
    if (a3 == 2)
    {
      v9 = a2 - 2;
      v10 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((__n128 *)a2[-2].n128_u64, (void **)a1);
      v11 = v4 + 2;
      if (v10 < 0)
      {
        v30 = *v9;
        v4[1].n128_u64[0] = a2[-1].n128_u64[0];
        *v4 = v30;
        a2[-2].n128_u64[1] = 0;
        a2[-1].n128_u64[0] = 0;
        v9->n128_u64[0] = 0;
        v4[1].n128_u64[1] = a2[-1].n128_u64[1];
        result = *v7;
        v4[3].n128_u64[0] = v7[1].n128_u64[0];
        *v11 = result;
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        v13 = &v7[1].n128_u64[1];
      }
      else
      {
        v12 = *v7;
        v4[1].n128_u64[0] = v7[1].n128_u64[0];
        *v4 = v12;
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        v4[1].n128_u64[1] = v7[1].n128_u64[1];
        result = *v9;
        v4[3].n128_u64[0] = a2[-1].n128_u64[0];
        *v11 = result;
        a2[-2].n128_u64[1] = 0;
        a2[-1].n128_u64[0] = 0;
        v9->n128_u64[0] = 0;
        v13 = &a2[-1].n128_u64[1];
      }
      v4[3].n128_u64[1] = *v13;
    }
    else if (a3 == 1)
    {
      result = *a1;
      a4[1].n128_u64[0] = a1[1].n128_u64[0];
      *a4 = result;
      a1->n128_u64[1] = 0;
      a1[1].n128_u64[0] = 0;
      a1->n128_u64[0] = 0;
      a4[1].n128_u64[1] = a1[1].n128_u64[1];
    }
    else if ((uint64_t)a3 > 8)
    {
      v24 = &a1[2 * (a3 >> 1)];
      std::__stable_sort<std::_ClassicAlgPolicy,MeCab::Dictionary::compile(MeCab::Param const&,std::vector<std::string> const&,char const*,MeCab::CompileOptions const&)::$_0 &,std::__wrap_iter<std::pair<std::string,mecab_token_t *> *>>(a1, v24, a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,MeCab::Dictionary::compile(MeCab::Param const&,std::vector<std::string> const&,char const*,MeCab::CompileOptions const&)::$_0 &,std::__wrap_iter<std::pair<std::string,mecab_token_t *> *>>(&v7[2 * (a3 >> 1)], a2, a3 - (a3 >> 1), &v4[2 * (a3 >> 1)], a3 - (a3 >> 1));
      v25 = &v7[2 * (a3 >> 1)];
      while (v25 != a2)
      {
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v25, (void **)v7) & 0x80) != 0)
        {
          result = *v25;
          v4[1].n128_u64[0] = v25[1].n128_u64[0];
          *v4 = result;
          v25->n128_u64[1] = 0;
          v25[1].n128_u64[0] = 0;
          v25->n128_u64[0] = 0;
          v26 = v25;
          v25 += 2;
        }
        else
        {
          result = *v7;
          v4[1].n128_u64[0] = v7[1].n128_u64[0];
          *v4 = result;
          v7->n128_u64[1] = 0;
          v7[1].n128_u64[0] = 0;
          v7->n128_u64[0] = 0;
          v26 = v7;
          v7 += 2;
        }
        v4[1].n128_u64[1] = v26[1].n128_u64[1];
        v4 += 2;
        if (v7 == v24)
        {
          if (v25 != a2)
          {
            v27 = 0;
            do
            {
              v28 = &v25[v27];
              v29 = &v4[v27];
              result = v25[v27];
              v29[1].n128_u64[0] = v25[v27 + 1].n128_u64[0];
              *v29 = result;
              v28->n128_u64[1] = 0;
              v28[1].n128_u64[0] = 0;
              v28->n128_u64[0] = 0;
              v29[1].n128_u64[1] = v25[v27 + 1].n128_u64[1];
              v27 += 2;
            }
            while (&v28[2] != a2);
          }
          return result;
        }
      }
      if (v7 != v24)
      {
        v31 = 0;
        do
        {
          v32 = &v4[v31];
          v33 = &v7[v31];
          result = v7[v31];
          v32[1].n128_u64[0] = v7[v31 + 1].n128_u64[0];
          *v32 = result;
          v33->n128_u64[1] = 0;
          v33[1].n128_u64[0] = 0;
          v33->n128_u64[0] = 0;
          v32[1].n128_u64[1] = v7[v31 + 1].n128_u64[1];
          v31 += 2;
        }
        while (&v33[2] != v24);
      }
    }
    else if (a1 != a2)
    {
      result = *a1;
      a4[1].n128_u64[0] = a1[1].n128_u64[0];
      *a4 = result;
      a1->n128_u64[1] = 0;
      a1[1].n128_u64[0] = 0;
      a1->n128_u64[0] = 0;
      a4[1].n128_u64[1] = a1[1].n128_u64[1];
      v14 = a1 + 2;
      if (&a1[2] != a2)
      {
        v15 = 0;
        v16 = a4;
        do
        {
          v17 = v14;
          v18 = v16 + 2;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v14, (void **)v16) & 0x80) != 0)
          {
            *v18 = *v16;
            v19 = v16[1].n128_u64[1];
            v16[3].n128_u64[0] = v16[1].n128_u64[0];
            v16->n128_u64[1] = 0;
            v16[1].n128_u64[0] = 0;
            v16->n128_u64[0] = 0;
            v16[3].n128_u64[1] = v19;
            v20 = v4;
            if (v16 != v4)
            {
              v21 = v15;
              while (1)
              {
                v20 = (__n128 *)((char *)v4 + v21);
                v22 = (void **)((char *)&v4[-2] + v21);
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v17, v22) & 0x80) == 0)
                  break;
                if (v20[1].n128_i8[7] < 0)
                  operator delete((void *)v20->n128_u64[0]);
                v23 = (char *)v4 + v21;
                *v20 = *(__n128 *)v22;
                v20[1].n128_u64[0] = *(unint64_t *)((char *)v4[-1].n128_u64 + v21);
                *(v23 - 9) = 0;
                *(_BYTE *)v22 = 0;
                *((_QWORD *)v23 + 3) = *(unint64_t *)((char *)&v4->n128_u64[-1] + v21);
                v21 -= 32;
                if (!v21)
                {
                  v20 = v4;
                  break;
                }
              }
            }
            if (v20[1].n128_i8[7] < 0)
              operator delete((void *)v20->n128_u64[0]);
            result = *v17;
            v20[1].n128_u64[0] = v17[1].n128_u64[0];
            *v20 = result;
            v7[3].n128_u8[7] = 0;
            v17->n128_u8[0] = 0;
            v20[1].n128_u64[1] = v7[3].n128_u64[1];
          }
          else
          {
            result = *v17;
            v16[3].n128_u64[0] = v17[1].n128_u64[0];
            *v18 = result;
            v17->n128_u64[1] = 0;
            v17[1].n128_u64[0] = 0;
            v17->n128_u64[0] = 0;
            v16[3].n128_u64[1] = v7[3].n128_u64[1];
          }
          v14 = v17 + 2;
          v15 += 32;
          v16 = v18;
          v7 = v17;
        }
        while (&v17[2] != a2);
      }
    }
  }
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,MeCab::Dictionary::compile(MeCab::Param const&,std::vector<std::string> const&,char const*,MeCab::CompileOptions const&)::$_0 &,std::__wrap_iter<std::pair<std::string,mecab_token_t *> *>>(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  void **v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void **v26;
  int v27;
  void **v28;
  void **v29;
  void **v30;
  __int128 v31;
  void *v32;
  void **v33;
  __int128 v34;
  void *v35;
  uint64_t v36;
  void **v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void **v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  __int128 v56;
  __n128 *v57;
  uint64_t v58;
  char v59;
  int v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  void *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  void *v77;
  void *v78;
  void *v79;

  if (a5)
  {
    v8 = a5;
    v70 = a7;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4)
        return;
      v13 = 0;
      v14 = -a4;
      while (1)
      {
        v15 = (uint64_t)v13 + a1;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)((char *)v13 + a1)) & 0x80) != 0)break;
        v13 += 4;
        if (__CFADD__(v14++, 1))
          return;
      }
      v17 = -v14;
      v69 = v8;
      v71 = a6;
      v73 = a3;
      if (-v14 >= v8)
      {
        if (v14 == -1)
        {
          v63 = (uint64_t)v13 + a1;
          v79 = *(void **)((char *)v13 + a1 + 16);
          v76 = *(_OWORD *)((char *)v13 + a1);
          v64 = *(_OWORD *)a2;
          *(_QWORD *)(v63 + 16) = a2[2];
          *(_OWORD *)v63 = v64;
          *(_OWORD *)a2 = v76;
          a2[2] = v79;
          v65 = *(void **)((char *)v13 + a1 + 24);
          *(_QWORD *)(v63 + 24) = a2[3];
          a2[3] = v65;
          return;
        }
        if (v14 > 0)
          v17 = 1 - v14;
        v23 = v17 >> 1;
        v21 = (void **)((char *)&v13[4 * (v17 >> 1)] + a1);
        v24 = a3;
        v20 = a2;
        if (a2 != (void **)v24)
        {
          v68 = v23;
          v25 = (v73 - (uint64_t)a2) >> 5;
          v20 = a2;
          do
          {
            v26 = &v20[4 * (v25 >> 1)];
            v27 = (char)std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v26, v21);
            if (v27 >= 0)
              v25 >>= 1;
            else
              v25 += ~(v25 >> 1);
            if (v27 < 0)
              v20 = v26 + 4;
          }
          while (v25);
          v23 = v68;
        }
        v19 = ((char *)v20 - (char *)a2) >> 5;
      }
      else
      {
        if (v8 >= 0)
          v18 = v8;
        else
          v18 = v8 + 1;
        v19 = v18 >> 1;
        v20 = &a2[4 * (v18 >> 1)];
        v21 = a2;
        if ((void **)((char *)a2 - a1) != v13)
        {
          v67 = v18 >> 1;
          v22 = ((char *)a2 - a1 - (char *)v13) >> 5;
          v21 = (void **)((char *)v13 + a1);
          do
          {
            if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20, &v21[4 * (v22 >> 1)]) & 0x80u) != 0)
            {
              v22 >>= 1;
            }
            else
            {
              v21 += 4 * (v22 >> 1) + 4;
              v22 += ~(v22 >> 1);
            }
          }
          while (v22);
          v19 = v67;
        }
        v23 = ((char *)v21 - a1 - (char *)v13) >> 5;
      }
      if (v21 == a2)
      {
        v28 = v20;
      }
      else if (v20 == a2)
      {
        v28 = v21;
      }
      else
      {
        v28 = v21 + 4;
        v29 = v21 + 4;
        v30 = a2;
        while (1)
        {
          v77 = *(v29 - 2);
          v74 = *((_OWORD *)v29 - 2);
          v31 = *(_OWORD *)v30;
          *(v29 - 2) = v30[2];
          *((_OWORD *)v29 - 2) = v31;
          *(_OWORD *)v30 = v74;
          v30[2] = v77;
          v32 = *(v29 - 1);
          *(v29 - 1) = v30[3];
          v30[3] = v32;
          v30 += 4;
          if (v30 == v20)
            break;
          if (v29 == a2)
            a2 = v30;
          v29 += 4;
          v28 += 4;
        }
        if (v29 != a2)
        {
          v33 = a2;
          do
          {
            while (1)
            {
              v78 = v29[2];
              v75 = *(_OWORD *)v29;
              v34 = *(_OWORD *)v33;
              v29[2] = v33[2];
              *(_OWORD *)v29 = v34;
              v33[2] = v78;
              *(_OWORD *)v33 = v75;
              v35 = v29[3];
              v29[3] = v33[3];
              v33[3] = v35;
              v29 += 4;
              v33 += 4;
              if (v33 == v20)
                break;
              if (v29 == a2)
                a2 = v33;
            }
            v33 = a2;
          }
          while (v29 != a2);
        }
      }
      a4 = -v23 - v14;
      v36 = v69 - v19;
      if (v23 + v19 >= v69 - (v23 + v19) - v14)
      {
        v38 = v20;
        v39 = v23;
        v40 = v19;
        std::__inplace_merge<std::_ClassicAlgPolicy,MeCab::Dictionary::compile(MeCab::Param const&,std::vector<std::string> const&,char const*,MeCab::CompileOptions const&)::$_0 &,std::__wrap_iter<std::pair<std::string,mecab_token_t *> *>>(v28, v38, v73, a4, v69 - v19, v71, v70);
        a2 = v21;
        a6 = v71;
        v36 = v40;
        a4 = v39;
        a3 = (uint64_t)v28;
        a7 = v70;
      }
      else
      {
        v37 = v21;
        a6 = v71;
        std::__inplace_merge<std::_ClassicAlgPolicy,MeCab::Dictionary::compile(MeCab::Param const&,std::vector<std::string> const&,char const*,MeCab::CompileOptions const&)::$_0 &,std::__wrap_iter<std::pair<std::string,mecab_token_t *> *>>((char *)v13 + a1, v37, v28, v23, v19, v71, v70);
        v15 = (uint64_t)v28;
        a7 = v70;
        a2 = v20;
        a3 = v73;
      }
      v8 = v36;
      a1 = v15;
      if (!v36)
        return;
    }
    if (a4 <= v8)
    {
      if ((void **)a1 == a2)
        return;
      v53 = 0;
      v42 = 0;
      do
      {
        v54 = a6 + v53;
        v55 = (_QWORD *)(a1 + v53);
        v56 = *(_OWORD *)(a1 + v53);
        *(_QWORD *)(v54 + 16) = *(_QWORD *)(a1 + v53 + 16);
        *(_OWORD *)v54 = v56;
        v55[1] = 0;
        v55[2] = 0;
        *v55 = 0;
        *(_QWORD *)(v54 + 24) = *(_QWORD *)(a1 + v53 + 24);
        ++v42;
        v53 += 32;
      }
      while (v55 + 4 != a2);
      if (v53)
      {
        v57 = (__n128 *)(a6 + v53);
        v58 = a6;
        while (a2 != (void **)a3)
        {
          v59 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v58);
          v60 = *(char *)(a1 + 23);
          if (v59 < 0)
          {
            if (v60 < 0)
              operator delete(*(void **)a1);
            v62 = *(_OWORD *)a2;
            *(_QWORD *)(a1 + 16) = a2[2];
            *(_OWORD *)a1 = v62;
            *((_BYTE *)a2 + 23) = 0;
            *(_BYTE *)a2 = 0;
            *(_QWORD *)(a1 + 24) = a2[3];
            a2 += 4;
          }
          else
          {
            if (v60 < 0)
              operator delete(*(void **)a1);
            v61 = *(_OWORD *)v58;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v58 + 16);
            *(_OWORD *)a1 = v61;
            *(_BYTE *)(v58 + 23) = 0;
            *(_BYTE *)v58 = 0;
            *(_QWORD *)(a1 + 24) = *(_QWORD *)(v58 + 24);
            v58 += 32;
          }
          a1 += 32;
          if (v57 == (__n128 *)v58)
            goto LABEL_96;
        }
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,mecab_token_t *> *,std::pair<std::string,mecab_token_t *> *,std::pair<std::string,mecab_token_t *> *>((__n128 *)v58, v57, a1);
      }
    }
    else
    {
      if ((void **)a3 == a2)
        return;
      v41 = 0;
      v42 = 0;
      do
      {
        v43 = a6 + v41 * 8;
        v44 = &a2[v41];
        v45 = *(_OWORD *)&a2[v41];
        *(_QWORD *)(v43 + 16) = a2[v41 + 2];
        *(_OWORD *)v43 = v45;
        v44[1] = 0;
        v44[2] = 0;
        *v44 = 0;
        *(_QWORD *)(v43 + 24) = a2[v41 + 3];
        ++v42;
        v41 += 4;
      }
      while (v44 + 4 != (void **)a3);
      if (v41 * 8)
      {
        v46 = a6 + v41 * 8;
        v47 = a3 - 32;
        v72 = a6;
        while (a2 != (void **)a1)
        {
          v48 = a3;
          v49 = (char)std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v46 - 32), a2 - 4);
          if (v49 >= 0)
            v50 = v46;
          else
            v50 = (uint64_t)a2;
          if (v49 >= 0)
            v51 = v46 - 32;
          else
            v51 = (uint64_t)(a2 - 4);
          if (v49 >= 0)
            v46 -= 32;
          else
            a2 -= 4;
          if (*(char *)(v47 + 23) < 0)
            operator delete(*(void **)v47);
          v52 = *(_OWORD *)v51;
          *(_QWORD *)(v47 + 16) = *(_QWORD *)(v51 + 16);
          *(_OWORD *)v47 = v52;
          *(_BYTE *)(v50 - 9) = 0;
          *(_BYTE *)v51 = 0;
          *(_QWORD *)(v47 + 24) = *(_QWORD *)(v50 - 8);
          a3 = v48 - 32;
          v47 -= 32;
          a6 = v72;
          if (v46 == v72)
            goto LABEL_96;
        }
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__unconstrained_reverse_iterator<std::pair<std::string,mecab_token_t *> *>,std::__unconstrained_reverse_iterator<std::pair<std::string,mecab_token_t *> *>,std::__unconstrained_reverse_iterator<std::__wrap_iter<std::pair<std::string,mecab_token_t *> *>>>(v46, a6, a3);
      }
    }
LABEL_96:
    if (a6)
    {
      v66 = 0;
      do
      {
        if (*(char *)(a6 + 23) < 0)
          operator delete(*(void **)a6);
        ++v66;
        a6 += 32;
      }
      while (v66 < v42);
    }
  }
}

__n128 std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,mecab_token_t *> *,std::pair<std::string,mecab_token_t *> *,std::pair<std::string,mecab_token_t *> *>(__n128 *a1, __n128 *a2, uint64_t a3)
{
  __n128 *v5;
  __n128 result;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      result = *v5;
      *(_QWORD *)(a3 + 16) = v5[1].n128_u64[0];
      *(__n128 *)a3 = result;
      v5[1].n128_u8[7] = 0;
      v5->n128_u8[0] = 0;
      *(_QWORD *)(a3 + 24) = v5[1].n128_u64[1];
      a3 += 32;
      v5 += 2;
    }
    while (v5 != a2);
  }
  return result;
}

__n128 std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__unconstrained_reverse_iterator<std::pair<std::string,mecab_token_t *> *>,std::__unconstrained_reverse_iterator<std::pair<std::string,mecab_token_t *> *>,std::__unconstrained_reverse_iterator<std::__wrap_iter<std::pair<std::string,mecab_token_t *> *>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  if (a1 != a2)
  {
    v4 = a1;
    v5 = a3 - 32;
    do
    {
      if (*(char *)(v5 + 23) < 0)
        operator delete(*(void **)v5);
      result = *(__n128 *)(v4 - 32);
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(v4 - 16);
      *(__n128 *)v5 = result;
      *(_BYTE *)(v4 - 9) = 0;
      *(_BYTE *)(v4 - 32) = 0;
      *(_QWORD *)(v5 + 24) = *(_QWORD *)(v4 - 8);
      v5 -= 32;
      v4 -= 32;
    }
    while (v4 != a2);
  }
  return result;
}

uint64_t MeCab::Param::dump_config(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  std::locale::id *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  std::locale v19;

  v2 = *(_QWORD **)(result + 8);
  v3 = (_QWORD *)(result + 16);
  if (v2 != (_QWORD *)(result + 16))
  {
    v5 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v6 = *((char *)v2 + 55);
      if (v6 >= 0)
        v7 = (uint64_t)(v2 + 4);
      else
        v7 = v2[4];
      if (v6 >= 0)
        v8 = *((unsigned __int8 *)v2 + 55);
      else
        v8 = v2[5];
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, v7, v8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": ", 2);
      v11 = *((char *)v2 + 79);
      if (v11 >= 0)
        v12 = (uint64_t)(v2 + 7);
      else
        v12 = v2[7];
      if (v11 >= 0)
        v13 = *((unsigned __int8 *)v2 + 79);
      else
        v13 = v2[8];
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
      std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(*v14 - 24)));
      v15 = std::locale::use_facet(&v19, v5);
      ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
      std::locale::~locale(&v19);
      std::ostream::put();
      result = std::ostream::flush();
      v16 = (_QWORD *)v2[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v2[2];
          v18 = *v17 == (_QWORD)v2;
          v2 = v17;
        }
        while (!v18);
      }
      v2 = v17;
    }
    while (v17 != v3);
  }
  return result;
}

void sub_2083CCE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

BOOL MeCab::Param::load(MeCab::Param *this, const char *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  size_t v13;
  _BOOL8 v14;
  std::locale::id *v15;
  uint64_t v16;
  const std::locale::facet *v17;
  unsigned __int8 v18;
  _QWORD *v19;
  int v20;
  std::string::size_type size;
  std::string::size_type v22;
  char *v23;
  char *v24;
  unint64_t v25;
  std::string::size_type v26;
  std::string::size_type v27;
  std::string *v28;
  unsigned int v29;
  int v30;
  char *v31;
  char *v32;
  std::string::size_type v33;
  std::string *v34;
  unsigned int v35;
  int v36;
  std::string *p_p;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  std::string *p_str;
  std::string::size_type v47;
  std::string __p;
  std::string v50;
  std::string __str;
  char v52;
  _QWORD v53[2];
  _BYTE v54[408];
  _QWORD v55[21];

  v55[19] = *MEMORY[0x24BDAC8D0];
  std::ifstream::basic_ifstream(v53);
  v4 = *(_QWORD *)(v53[0] - 24);
  if ((v54[v4 + 16] & 5) != 0)
  {
    v6 = *((_QWORD *)this + 16);
    v5 = (_QWORD *)((char *)this + 128);
    std::ios_base::clear((std::ios_base *)((char *)v5 + *(_QWORD *)(v6 - 24)), 0);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/param.cpp", 59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"(", 1);
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") [", 3);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ifs", 3);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"no such file or directory: ", 27);
    v13 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)a2, v13);
    v14 = 0;
    goto LABEL_61;
  }
  memset(&__str, 0, sizeof(__str));
  v15 = (std::locale::id *)MEMORY[0x24BEDB350];
  v16 = MEMORY[0x24BDAC740];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v53 + v4));
    v17 = std::locale::use_facet((const std::locale *)&v50, v15);
    v18 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale((std::locale *)&v50);
    v19 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v53, (uint64_t)&__str, v18);
    v14 = (*(_DWORD *)((_BYTE *)v19 + *(_QWORD *)(*v19 - 24) + 32) & 5) != 0;
    if ((*(_DWORD *)((_BYTE *)v19 + *(_QWORD *)(*v19 - 24) + 32) & 5) != 0)
      break;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!__str.__r_.__value_.__l.__size_)
        goto LABEL_51;
      v20 = *__str.__r_.__value_.__l.__data_;
    }
    else
    {
      if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
        goto LABEL_51;
      v20 = __str.__r_.__value_.__s.__data_[0];
    }
    if (v20 != 59 && v20 != 35)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        size = __str.__r_.__value_.__l.__size_;
      if (!size
        || ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? (v22 = (std::string::size_type)&__str)
          : (v22 = __str.__r_.__value_.__r.__words[0]),
            (v23 = (char *)memchr((void *)v22, 61, size)) == 0 || (v24 = v23, &v23[-v22] == (char *)-1)))
      {
        v39 = *((_QWORD *)this + 16);
        v38 = (_QWORD *)((char *)this + 128);
        std::ios_base::clear((std::ios_base *)((char *)v38 + *(_QWORD *)(v39 - 24)), 0);
        v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/param.cpp", 59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"(", 1);
        v41 = (_QWORD *)std::ostream::operator<<();
        v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)") [", 3);
        v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"pos != std::string::npos", 24);
        v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
        v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"format error: ", 14);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v47 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v47 = __str.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)p_str, v47);
        break;
      }
      v25 = (unint64_t)&v23[-v22 + 1];
      do
      {
        v26 = v25;
        v27 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v27 = __str.__r_.__value_.__l.__size_;
        if (v25 >= v27)
          break;
        v28 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__str
            : (std::string *)__str.__r_.__value_.__r.__words[0];
        v29 = v28->__r_.__value_.__s.__data_[v26];
        v30 = (v29 & 0x80000000) != 0 ? __maskrune(v29, 0x4000uLL) : *(_DWORD *)(v16 + 4 * v29 + 60) & 0x4000;
        v25 = v26 + 1;
      }
      while (v30);
      v31 = &v24[~v22];
      while (1)
      {
        v32 = v31;
        v33 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if (((unint64_t)v32 & 0x8000000000000000) != 0)
          break;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v34 = &__str;
        else
          v34 = (std::string *)__str.__r_.__value_.__r.__words[0];
        v35 = v32[(_QWORD)v34];
        if ((v35 & 0x80000000) != 0)
          v36 = __maskrune(v35, 0x4000uLL);
        else
          v36 = *(_DWORD *)(v16 + 4 * v35 + 60) & 0x4000;
        v31 = v32 - 1;
        if (!v36)
        {
          v33 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          break;
        }
      }
      if ((v33 & 0x80u) != 0)
        v33 = __str.__r_.__value_.__l.__size_;
      std::string::basic_string(&v50, &__str, v26, v33 - v26, (std::allocator<char> *)&__p);
      std::string::basic_string(&__p, &__str, 0, (std::string::size_type)(v32 + 1), (std::allocator<char> *)&v52);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      MeCab::Param::set<std::string>((uint64_t)this, (char *)p_p, (uint64_t)&v50, 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v50.__r_.__value_.__l.__data_);
    }
LABEL_51:
    v4 = *(_QWORD *)(v53[0] - 24);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_61:
  v53[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v53 + *(_QWORD *)(v53[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x20BD061F8](v54);
  std::istream::~istream();
  MEMORY[0x20BD06354](v55);
  return v14;
}

void sub_2083CD300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28)
{
  if (a26 < 0)
    operator delete(__p);
  std::ifstream::~ifstream(&a28);
  _Unwind_Resume(a1);
}

void MeCab::Param::set<std::string>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  std::string::size_type v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  std::string __p;
  void *v13[2];
  char v14;
  void **v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(v13, a2);
  if ((a4 & 1) != 0
    || (void **)(a1 + 16) == std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::find<std::string>(a1 + 8, v13))
  {
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      __p = *(std::string *)a3;
    v16[0] = __p.__r_.__value_.__l.__size_;
    v7 = __p.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v16 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
    v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    memset(&__p, 0, sizeof(__p));
    v15 = v13;
    v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 8), v13, (uint64_t)&std::piecewise_construct, (__int128 **)&v15);
    v10 = v9;
    if (*((char *)v9 + 79) < 0)
      operator delete((void *)v9[7]);
    v11 = v16[0];
    v10[7] = v7;
    v10[8] = v11;
    *(uint64_t *)((char *)v10 + 71) = *(_QWORD *)((char *)v16 + 7);
    *((_BYTE *)v10 + 79) = v8;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v14 < 0)
    operator delete(v13[0]);
}

void sub_2083CD4B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::Param::open(uint64_t a1, int a2, char **a3, uint64_t a4)
{
  void **v5;
  std::string *v6;
  __int128 v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  std::string *v14;
  std::string::size_type v15;
  char v16;
  uint64_t v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::__split_buffer<std::string>::pointer first;
  char end_high;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  const char *v28;
  size_t v29;
  const char **v30;
  const char *v31;
  size_t v32;
  const char *v33;
  size_t v34;
  const char *v35;
  uint64_t v36;
  const char **v37;
  size_t v38;
  uint64_t v39;
  const char *v40;
  const char **v41;
  const char *v42;
  const char *v43;
  std::string::size_type v44;
  std::string::size_type v45;
  std::string::size_type v46;
  char *v47;
  uint64_t v48;
  char **v49;
  char *v50;
  char *v51;
  uint64_t result;
  std::vector<std::string> *v53;
  std::allocator<std::string> *v54;
  uint64_t v55;
  char **v56;
  char *v57;
  int v58;
  uint64_t v59;
  size_t i;
  int v61;
  unint64_t v62;
  unint64_t v63;
  __int128 v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  std::string *v69;
  char *v70;
  std::vector<std::string> *v71;
  char **v72;
  char *v73;
  char *v74;
  uint64_t v75;
  std::string *v76;
  __int128 v77;
  uint64_t v78;
  int v79;
  unsigned __int8 *v80;
  int v81;
  int v82;
  char *v83;
  int v84;
  _QWORD *v85;
  size_t v86;
  _QWORD *v87;
  _QWORD *v88;
  size_t v89;
  _QWORD *v90;
  _QWORD *v91;
  size_t v92;
  _QWORD *v93;
  std::allocator<std::string> *v94;
  std::string v98;
  std::string v99;
  std::__split_buffer<std::string> v100;
  _QWORD v101[4];

  v101[2] = *MEMORY[0x24BDAC8D0];
  if (a2 <= 0)
  {
    if (*(char *)(a1 + 79) < 0)
    {
      *(_QWORD *)(a1 + 64) = 7;
      v25 = *(char **)(a1 + 56);
    }
    else
    {
      v25 = (char *)(a1 + 56);
      *(_BYTE *)(a1 + 79) = 7;
    }
    strcpy(v25, "unknown");
    return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(&v100, *a3);
  v5 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = *(_OWORD *)&v100.__first_;
  *(_QWORD *)(a1 + 72) = v100.__end_;
  std::string::basic_string[abi:ne180100]<0>(&v98, "MeCab: Yet Another Part-of-Speech and Morphological Analyzer\n\nCopyright(C) 2001-2012 Taku Kudo \nCopyright(C) 2004-2008 Nippon Telegraph and Telephone Corporation\n");
  v6 = std::string::append(&v98, "\nUsage: ", 8uLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v99.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = *(char *)(a1 + 79);
  if (v8 >= 0)
    v9 = (const std::string::value_type *)(a1 + 56);
  else
    v9 = *(const std::string::value_type **)(a1 + 56);
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a1 + 79);
  else
    v10 = *(_QWORD *)(a1 + 64);
  v11 = std::string::append(&v99, v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v100.__end_ = (std::__split_buffer<std::string>::pointer)v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v100.__first_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append((std::string *)&v100, " [options] files\n", 0x11uLL);
  v14 = (std::string *)(a1 + 80);
  v15 = v13->__r_.__value_.__r.__words[0];
  v101[0] = v13->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v101 + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
  v16 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 103) < 0)
    operator delete(v14->__r_.__value_.__l.__data_);
  v17 = v101[0];
  *(_QWORD *)(a1 + 80) = v15;
  *(_QWORD *)(a1 + 88) = v17;
  *(_QWORD *)(a1 + 95) = *(_QWORD *)((char *)v101 + 7);
  *(_BYTE *)(a1 + 103) = v16;
  if (SHIBYTE(v100.__end_) < 0)
    operator delete(v100.__first_);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v98, "mecab");
  v18 = std::string::append(&v98, " of ", 4uLL);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v99.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v99, "0.97", 4uLL);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v100.__end_ = (std::__split_buffer<std::string>::pointer)v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v100.__first_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back((std::string *)&v100, 10);
  v101[0] = v100.__begin_;
  first = v100.__first_;
  *(_QWORD *)((char *)v101 + 7) = *(std::__split_buffer<std::string>::pointer *)((char *)&v100.__begin_ + 7);
  end_high = HIBYTE(v100.__end_);
  memset(&v100, 0, 24);
  if (*(char *)(a1 + 127) < 0)
  {
    operator delete(*(void **)(a1 + 104));
    v26 = SHIBYTE(v100.__end_);
    v27 = v101[0];
    *(_QWORD *)(a1 + 104) = first;
    *(_QWORD *)(a1 + 112) = v27;
    *(_QWORD *)(a1 + 119) = *(_QWORD *)((char *)v101 + 7);
    *(_BYTE *)(a1 + 127) = end_high;
    if (v26 < 0)
      operator delete(v100.__first_);
  }
  else
  {
    v24 = v101[0];
    *(_QWORD *)(a1 + 104) = first;
    *(_QWORD *)(a1 + 112) = v24;
    *(_QWORD *)(a1 + 119) = *(_QWORD *)((char *)v101 + 7);
    *(_BYTE *)(a1 + 127) = end_high;
  }
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  v28 = *(const char **)a4;
  if (*(_QWORD *)a4)
  {
    v29 = 0;
    v30 = (const char **)(a4 + 40);
    v31 = *(const char **)a4;
    do
    {
      v32 = strlen(v31);
      v33 = *(v30 - 2);
      if (v33)
        v34 = v32 + strlen(v33) + 2;
      else
        v34 = v32 + 1;
      if (v34 > v29)
        v29 = v34;
      v35 = *v30;
      v30 += 5;
      v31 = v35;
    }
    while (v35);
    v36 = 0;
    v37 = (const char **)a4;
    do
    {
      v38 = strlen(v28);
      v39 = a4 + 40 * v36;
      v42 = *(const char **)(v39 + 24);
      v41 = (const char **)(v39 + 24);
      v40 = v42;
      if (v42)
        v38 += strlen(v40) + 1;
      std::string::append(v14, " -", 2uLL);
      std::string::push_back(v14, *(_BYTE *)(a4 + 40 * v36 + 8));
      std::string::append(v14, ", --", 4uLL);
      v43 = *v37;
      v44 = strlen(v43);
      std::string::append(v14, v43, v44);
      if (*v41)
      {
        std::string::push_back(v14, 61);
        v45 = strlen(*v41);
        std::string::append(v14, *v41, v45);
      }
      while (v38 <= v29)
      {
        std::string::push_back(v14, 32);
        ++v38;
      }
      v46 = strlen(*(const char **)(a4 + 40 * v36 + 32));
      std::string::append(v14, *(const std::string::value_type **)(a4 + 40 * v36 + 32), v46);
      std::string::push_back(v14, 10);
      ++v36;
      v37 = (const char **)(a4 + 40 * v36);
      v28 = *v37;
    }
    while (*v37);
  }
  std::string::push_back(v14, 10);
  v47 = *(char **)a4;
  v48 = a1;
  if (*(_QWORD *)a4)
  {
    v49 = (char **)(a4 + 40);
    do
    {
      v50 = *(v49 - 3);
      if (v50)
      {
        std::string::basic_string[abi:ne180100]<0>(&v100, v50);
        v48 = a1;
        MeCab::Param::set<std::string>(a1, v47, (uint64_t)&v100, 1);
        if (SHIBYTE(v100.__end_) < 0)
          operator delete(v100.__first_);
      }
      v51 = *v49;
      v49 += 5;
      v47 = v51;
    }
    while (v51);
  }
  result = 1;
  if (a2 < 2)
    return result;
  v53 = (std::vector<std::string> *)(v48 + 32);
  v54 = (std::allocator<std::string> *)(v48 + 48);
  LODWORD(v55) = 1;
  v56 = a3;
  v94 = (std::allocator<std::string> *)(v48 + 48);
  while (1)
  {
    v57 = v56[(int)v55];
    if (*v57 != 45)
    {
      std::string::basic_string[abi:ne180100]<0>(&v99, v56[(int)v55]);
      v63 = *(_QWORD *)(a1 + 40);
      v62 = *(_QWORD *)(a1 + 48);
      if (v63 >= v62)
      {
        v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - (unint64_t)v53->__begin_) >> 3);
        v66 = v65 + 1;
        if (v65 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<char *>::__throw_length_error[abi:ne180100]();
        v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v62 - (unint64_t)v53->__begin_) >> 3);
        if (2 * v67 > v66)
          v66 = 2 * v67;
        if (v67 >= 0x555555555555555)
          v68 = 0xAAAAAAAAAAAAAAALL;
        else
          v68 = v66;
        v100.__end_cap_.__value_ = v54;
        if (v68)
          v69 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v54, v68);
        else
          v69 = 0;
        v76 = v69 + v65;
        v100.__first_ = v69;
        v100.__begin_ = v76;
        v100.__end_cap_.__value_ = &v69[v68];
        v77 = *(_OWORD *)&v99.__r_.__value_.__l.__data_;
        v76->__r_.__value_.__r.__words[2] = v99.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v76->__r_.__value_.__l.__data_ = v77;
        memset(&v99, 0, sizeof(v99));
        v100.__end_ = v76 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(v53, &v100);
        v78 = *(_QWORD *)(a1 + 40);
        std::__split_buffer<std::string>::~__split_buffer(&v100);
        v79 = SHIBYTE(v99.__r_.__value_.__r.__words[2]);
        *(_QWORD *)(a1 + 40) = v78;
        if (v79 < 0)
          operator delete(v99.__r_.__value_.__l.__data_);
      }
      else
      {
        v64 = *(_OWORD *)&v99.__r_.__value_.__l.__data_;
        *(_QWORD *)(v63 + 16) = *((_QWORD *)&v99.__r_.__value_.__l + 2);
        *(_OWORD *)v63 = v64;
        *(_QWORD *)(a1 + 40) = v63 + 24;
      }
LABEL_99:
      v56 = a3;
      goto LABEL_100;
    }
    v58 = v57[1];
    if (v57[1])
      break;
LABEL_100:
    LODWORD(v55) = v55 + 1;
    if ((int)v55 >= a2)
      return 1;
  }
  v59 = (int)v55;
  if (v58 != 45)
  {
    v74 = *(char **)a4;
    if (!*(_QWORD *)a4)
      goto LABEL_106;
    if (*(unsigned __int8 *)(a4 + 8) != v58)
    {
      v75 = 0;
      v80 = (unsigned __int8 *)(a4 + 48);
      while (1)
      {
        v74 = (char *)*((_QWORD *)v80 - 1);
        if (!v74)
          break;
        v81 = *v80;
        v80 += 40;
        ++v75;
        if (v81 == v58)
          goto LABEL_85;
      }
LABEL_106:
      v86 = strlen(a3[(int)v55]);
      v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)a3[(int)v55], v86);
      return 0;
    }
    v75 = 0;
LABEL_85:
    v84 = v57[2];
    v83 = v57 + 2;
    v82 = v84;
    v54 = v94;
    if (!*(_QWORD *)(a4 + 40 * v75 + 24))
    {
      if (v82)
        goto LABEL_112;
      LODWORD(v100.__first_) = 1;
      MeCab::Param::set<int>(a1, v74, (uint64_t)&v100, 1);
      goto LABEL_99;
    }
    if (v82)
    {
      std::string::basic_string[abi:ne180100]<0>(&v100, v83);
      MeCab::Param::set<std::string>(a1, v74, (uint64_t)&v100, 1);
      goto LABEL_104;
    }
    v55 = (int)v55 + 1;
    if ((_DWORD)v59 + 1 == a2)
      goto LABEL_113;
    std::string::basic_string[abi:ne180100]<0>(&v100, a3[v55]);
    MeCab::Param::set<std::string>(a1, v74, (uint64_t)&v100, 1);
    v56 = a3;
    if (SHIBYTE(v100.__end_) < 0)
      operator delete(v100.__first_);
    goto LABEL_100;
  }
  for (i = 0; ; ++i)
  {
    v61 = v57[i + 2];
    if (!v57[i + 2] || v61 == 61)
      break;
  }
  if (!i)
    return 1;
  v70 = *(char **)a4;
  if (!*(_QWORD *)a4)
    goto LABEL_106;
  v71 = v53;
  v72 = (char **)(a4 + 40);
  while (strlen(v70) != i || strncmp(v57 + 2, v70, i))
  {
    v73 = *v72;
    v72 += 5;
    v70 = v73;
    if (!v73)
      goto LABEL_106;
  }
  if (!*(v72 - 2))
  {
    v54 = v94;
    if (v61 == 61)
    {
LABEL_112:
      v89 = strlen(a3[(int)v55]);
      v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)a3[(int)v55], v89);
      return 0;
    }
    v53 = v71;
    LODWORD(v100.__first_) = 1;
    MeCab::Param::set<int>(a1, v70, (uint64_t)&v100, 1);
    goto LABEL_99;
  }
  v53 = v71;
  if (v61 == 61)
  {
    std::string::basic_string[abi:ne180100]<0>(&v100, &v57[i + 3]);
    v54 = v94;
    MeCab::Param::set<std::string>(a1, v70, (uint64_t)&v100, 1);
    goto LABEL_104;
  }
  v55 = (int)v55 + 1;
  v54 = v94;
  if ((_DWORD)v59 + 1 != a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v100, a3[v55]);
    MeCab::Param::set<std::string>(a1, v70, (uint64_t)&v100, 1);
LABEL_104:
    v56 = a3;
    if (SHIBYTE(v100.__end_) < 0)
      operator delete(v100.__first_);
    goto LABEL_100;
  }
LABEL_113:
  v92 = strlen(a3[v59]);
  v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)a3[v59], v92);
  return 0;
}

void sub_2083CDE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::Param::open(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  char v16;
  char v17;
  int v18;
  int v20;
  uint64_t v21;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v6 = operator new[]();
  v7 = v6;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v40 = 0u;
  v55 = 0;
  v39 = 0u;
  v38 = 0u;
  v37 = 0u;
  v36 = 0u;
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  v29 = 0u;
  v28 = 0u;
  v27 = 0u;
  v26 = 0u;
  v25 = 0u;
  v24 = 0u;
  v23 = "mecab";
  LOBYTE(v8) = *a2;
  if (*a2)
  {
    v9 = 0;
    v10 = 1;
    v11 = MEMORY[0x24BDAC740];
    v12 = (char *)v6;
    while (1)
    {
      v13 = v10;
      while (1)
      {
        v14 = (v8 & 0x80) != 0
            ? __maskrune((char)v8, 0x4000uLL)
            : *(_DWORD *)(v11 + 4 * (char)v8 + 60) & 0x4000;
        if (!v14 || v9 != 0)
          break;
        *v12++ = 0;
        v16 = *++a2;
        LOBYTE(v8) = v16;
      }
      *v12 = *a2;
      if (!*a2)
        break;
      ++v10;
      (&v23)[v13] = v12;
      if (v13 == 511)
      {
        LODWORD(v13) = 512;
        break;
      }
      v17 = *a2;
      if (*a2)
      {
        while (1)
        {
          v18 = v17 < 0 ? __maskrune(v17, 0x4000uLL) : *(_DWORD *)(v11 + 4 * v17 + 60) & 0x4000;
          v8 = *a2;
          if (v18 && v9 == 0)
            break;
          if (v8 == 92)
          {
            v9 = 1;
          }
          else
          {
            v9 = 0;
            *v12++ = v8;
          }
          v20 = *++a2;
          v17 = v20;
          if (!v20)
            goto LABEL_29;
        }
        v9 = 0;
        if (*a2)
          continue;
      }
LABEL_29:
      *v12 = 0;
      LOBYTE(v8) = *a2;
      if (!*a2)
      {
        LODWORD(v13) = v13 + 1;
        break;
      }
    }
  }
  else
  {
    LODWORD(v13) = 1;
  }
  v21 = MeCab::Param::open(a1, v13, &v23, a3);
  MEMORY[0x20BD06378](v7, 0x1000C8077774924);
  return v21;
}

void sub_2083CE18C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD06378](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t MeCab::Param::help_version(MeCab::Param *this)
{
  const char *v2;
  size_t v3;

  if (MeCab::Param::get<BOOL>((uint64_t)this, "help"))
  {
    v2 = (char *)this + 80;
    if ((*((char *)this + 103) & 0x80000000) == 0)
    {
LABEL_4:
      v3 = strlen(v2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)v2, v3);
      return 0;
    }
LABEL_3:
    v2 = *(const char **)v2;
    goto LABEL_4;
  }
  if (MeCab::Param::get<BOOL>((uint64_t)this, "version"))
  {
    v2 = (char *)this + 104;
    if ((*((char *)this + 127) & 0x80000000) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  return 1;
}

MeCab::TaggerImpl *MeCab::TaggerImpl::TaggerImpl(MeCab::TaggerImpl *this)
{
  *(_QWORD *)this = off_24C09BFC0;
  MeCab::TokenizerImpl<mecab_node_t,mecab_path_t>::TokenizerImpl((uint64_t)this + 8);
  MeCab::Viterbi::Viterbi((MeCab::TaggerImpl *)((char *)this + 1288));
  *((_QWORD *)this + 227) = 0;
  *((_QWORD *)this + 228) = &off_24C09C1E0;
  *((_QWORD *)this + 229) = 0;
  *((_QWORD *)this + 231) = 0;
  *((_QWORD *)this + 230) = 0;
  *((_WORD *)this + 928) = 1;
  MeCab::Writer::Writer((MeCab::TaggerImpl *)((char *)this + 1864));
  *((_QWORD *)this + 280) = &off_24C09C0B8;
  *((_QWORD *)this + 281) = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this + 2264);
  *((_OWORD *)this + 159) = 0u;
  *((_OWORD *)this + 158) = 0u;
  return this;
}

void sub_2083CE2E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v8;

  v6 = v4;
  v2[280] = v6;
  v8 = v2[281];
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  MeCab::Writer::~Writer(v5);
  MeCab::StringBuffer::~StringBuffer((MeCab::StringBuffer *)(v2 + 228));
  MeCab::Viterbi::~Viterbi(v3);
  MeCab::TokenizerImpl<mecab_node_t,mecab_path_t>::~TokenizerImpl(v1);
  _Unwind_Resume(a1);
}

_QWORD *MeCab::scoped_ptr<MeCab::NBestGenerator>::~scoped_ptr(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C09C0B8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void MeCab::TaggerImpl::~TaggerImpl(MeCab::TaggerImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_24C09BFC0;
  v2 = *((_QWORD *)this + 227);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  if (*((char *)this + 2551) < 0)
    operator delete(*((void **)this + 316));
  v3 = MEMORY[0x24BEDB800];
  v4 = *MEMORY[0x24BEDB800];
  *((_QWORD *)this + 283) = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24) + 2264) = *(_QWORD *)(v3 + 24);
  *((_QWORD *)this + 284) = MEMORY[0x24BEDB848] + 16;
  if (*((char *)this + 2359) < 0)
    operator delete(*((void **)this + 292));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD06354]((char *)this + 2376);
  *((_QWORD *)this + 280) = &off_24C09C0B8;
  v5 = *((_QWORD *)this + 281);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  MeCab::Writer::~Writer((void **)this + 233);
  *((_QWORD *)this + 228) = &off_24C09C1E0;
  if (*((_BYTE *)this + 1856))
  {
    v6 = *((_QWORD *)this + 231);
    if (v6)
      MEMORY[0x20BD06378](v6, 0x1000C8077774924);
    *((_QWORD *)this + 231) = 0;
  }
  MeCab::Viterbi::~Viterbi((void **)this + 161);
  MeCab::TokenizerImpl<mecab_node_t,mecab_path_t>::~TokenizerImpl((uint64_t)this + 8);
}

{
  MeCab::TaggerImpl::~TaggerImpl(this);
  JUMPOUT(0x20BD0639CLL);
}

void **MeCab::TaggerImpl::what(MeCab::TaggerImpl *this)
{
  return MeCab::whatlog::str((MeCab::TaggerImpl *)((char *)this + 2264));
}

uint64_t MeCab::TaggerImpl::open(MeCab::TaggerImpl *this, int a2, char **a3)
{
  uint64_t v6;
  char *v7;
  int v8;
  void *v9;
  const char *v10;
  _QWORD v12[2];
  char v13;
  void *v14[16];
  uint64_t v15;

  MeCab::Param::Param((MeCab::Param *)v14);
  {
    v6 = MeCab::TaggerImpl::open(this, (MeCab::Param *)v14);
  }
  else
  {
    v7 = (char *)MeCab::whatlog::str((MeCab::whatlog *)&v15);
    std::string::basic_string[abi:ne180100]<0>(v12, v7);
    v8 = v13;
    v9 = (void *)v12[0];
    if (v13 >= 0)
      v10 = (const char *)v12;
    else
      v10 = (const char *)v12[0];
    if (v8 < 0)
      operator delete(v9);
    v6 = 0;
  }
  MeCab::Param::~Param(v14);
  return v6;
}

void sub_2083CE5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  MeCab::Param::~Param((void **)va);
  _Unwind_Resume(a1);
}

uint64_t MeCab::TaggerImpl::open(MeCab::TaggerImpl *this, MeCab::Param *a2)
{
  _QWORD *v4;
  const char *v5;
  size_t v6;
  uint64_t v7;
  MeCab::Param *v9;
  MeCab::QuantizedConnector *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  std::string *v25;
  std::string::size_type v26;
  _BOOL4 v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  char *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  char *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  std::string __p;

  if (MeCab::Param::get<BOOL>((uint64_t)a2, "help"))
  {
    v4 = (_QWORD *)((char *)this + 2264);
    v5 = (char *)a2 + 80;
    if ((*((char *)a2 + 103) & 0x80000000) == 0)
    {
LABEL_4:
      v6 = strlen(v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
      return 0;
    }
LABEL_3:
    v5 = *(const char **)v5;
    goto LABEL_4;
  }
  if (MeCab::Param::get<BOOL>((uint64_t)a2, "version"))
  {
    v4 = (_QWORD *)((char *)this + 2264);
    v5 = (char *)a2 + 104;
    if ((*((char *)a2 + 127) & 0x80000000) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (!MeCab::load_dictionary_resource(a2, v9))
  {
    std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 283) - 24) + 2264), 0);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 283, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/tagger.cpp", 60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"(", 1);
    v12 = (_QWORD *)std::ostream::operator<<();
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)") [", 3);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"load_dictionary_resource(param)", 31);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"] ", 2);
    v16 = (char *)MeCab::whatlog::str((MeCab::Param *)((char *)a2 + 128));
    std::string::basic_string[abi:ne180100]<0>(&__p, v16);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)p_p, size);
LABEL_54:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 0;
  }
  if (!MeCab::TokenizerImpl<mecab_node_t,mecab_path_t>::open((uint64_t)this + 8, a2))
  {
    std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 283) - 24) + 2264), 0);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 283, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/tagger.cpp", 60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"(", 1);
    v20 = (_QWORD *)std::ostream::operator<<();
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)") [", 3);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"tokenizer_.open(*param)", 23);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"] ", 2);
    v24 = (char *)MeCab::whatlog::str((MeCab::TaggerImpl *)((char *)this + 984));
    std::string::basic_string[abi:ne180100]<0>(&__p, v24);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &__p;
    else
      v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v26 = __p.__r_.__value_.__l.__size_;
    goto LABEL_53;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 9) + 724) == 1)
  {
    v10 = (MeCab::QuantizedConnector *)operator new();
    MeCab::QuantizedConnector::QuantizedConnector(v10);
  }
  else
  {
    v10 = (MeCab::QuantizedConnector *)operator new();
    MeCab::Connector::Connector(v10);
  }
  *((_QWORD *)this + 227) = v10;
  if ((MeCab::Connector::open(v10, a2) & 1) == 0)
  {
    std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 283) - 24) + 2264), 0);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 283, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/tagger.cpp", 60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"(", 1);
    v29 = (_QWORD *)std::ostream::operator<<();
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)") [", 3);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"connector_->open(*param)", 24);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"] ", 2);
    v32 = (char *)MeCab::whatlog::str((MeCab::whatlog *)(*((_QWORD *)this + 227) + 368));
    std::string::basic_string[abi:ne180100]<0>(&__p, v32);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &__p;
    else
      v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v26 = __p.__r_.__value_.__l.__size_;
    goto LABEL_53;
  }
  if (!MeCab::Viterbi::open((uint64_t)this + 1288, (uint64_t)a2, (uint64_t)this + 8, *((_QWORD *)this + 227)))
  {
    std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 283) - 24) + 2264), 0);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 283, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/tagger.cpp", 60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"(", 1);
    v34 = (_QWORD *)std::ostream::operator<<();
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)") [", 3);
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"viterbi_.open(*param, &tokenizer_, connector_)", 46);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"] ", 2);
    v37 = (char *)MeCab::whatlog::str((MeCab::TaggerImpl *)((char *)this + 1528));
    std::string::basic_string[abi:ne180100]<0>(&__p, v37);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &__p;
    else
      v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v26 = __p.__r_.__value_.__l.__size_;
    goto LABEL_53;
  }
  if ((MeCab::Writer::open((MeCab::TaggerImpl *)((char *)this + 1864), a2) & 1) == 0)
  {
    std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 283) - 24) + 2264), 0);
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 283, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/tagger.cpp", 60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"(", 1);
    v39 = (_QWORD *)std::ostream::operator<<();
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)") [", 3);
    v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"writer_.open(*param)", 20);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"] ", 2);
    v42 = (char *)MeCab::whatlog::str((MeCab::TaggerImpl *)((char *)this + 1936));
    std::string::basic_string[abi:ne180100]<0>(&__p, v42);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &__p;
    else
      v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v26 = __p.__r_.__value_.__l.__size_;
LABEL_53:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v25, v26);
    goto LABEL_54;
  }
  MeCab::Param::get<std::string>((uint64_t)a2, "output-format-type", &__p);
  v27 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p.__r_.__value_.__l.__data_, "dump");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!v27)
    return 1;
  (*(void (**)(MeCab::TaggerImpl *, uint64_t))(*(_QWORD *)this + 160))(this, 3);
  v7 = 1;
  (*(void (**)(MeCab::TaggerImpl *, uint64_t))(*(_QWORD *)this + 176))(this, 1);
  return v7;
}

void sub_2083CEB14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::TaggerImpl::open(MeCab::TaggerImpl *this, char *a2)
{
  uint64_t v4;
  char *v5;
  int v6;
  void *v7;
  const char *v8;
  _QWORD v10[2];
  char v11;
  void *v12[16];
  uint64_t v13;

  MeCab::Param::Param((MeCab::Param *)v12);
  {
    v4 = MeCab::TaggerImpl::open(this, (MeCab::Param *)v12);
  }
  else
  {
    v5 = (char *)MeCab::whatlog::str((MeCab::whatlog *)&v13);
    std::string::basic_string[abi:ne180100]<0>(v10, v5);
    v6 = v11;
    v7 = (void *)v10[0];
    if (v11 >= 0)
      v8 = (const char *)v10;
    else
      v8 = (const char *)v10[0];
    if (v6 < 0)
      operator delete(v7);
    v4 = 0;
  }
  MeCab::Param::~Param(v12);
  return v4;
}

void sub_2083CEC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  MeCab::Param::~Param((void **)va);
  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, char *__s)
{
  int v4;
  size_t v5;
  const void *v6;

  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (v5 != strlen(__s))
    return 0;
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = *a1;
  return memcmp(v6, __s, v5) == 0;
}

uint64_t MeCab::TaggerImpl::set_partial(uint64_t this, char a2)
{
  *(_BYTE *)(this + 1377) = a2;
  return this;
}

uint64_t MeCab::TaggerImpl::partial(MeCab::TaggerImpl *this)
{
  return *((unsigned __int8 *)this + 1377);
}

double MeCab::TaggerImpl::set_theta(MeCab::TaggerImpl *this, float a2)
{
  double result;

  result = (float)(a2 / (float)*((int *)this + 340));
  *((double *)this + 169) = result;
  return result;
}

float MeCab::TaggerImpl::theta(MeCab::TaggerImpl *this)
{
  return *((double *)this + 169) * (double)*((int *)this + 340);
}

uint64_t MeCab::TaggerImpl::set_lattice_level(MeCab::TaggerImpl *this, int a2)
{
  return MeCab::Viterbi::set_lattice_level((uint64_t)this + 1288, a2);
}

uint64_t MeCab::TaggerImpl::lattice_level(MeCab::TaggerImpl *this)
{
  return *((unsigned int *)this + 336);
}

uint64_t MeCab::TaggerImpl::set_all_morphs(uint64_t this, int a2)
{
  uint64_t (*v2)(MeCab::Viterbi *);

  v2 = MeCab::Viterbi::buildBestLattice;
  if (a2)
    v2 = MeCab::Viterbi::buildAllLattice;
  *(_QWORD *)(this + 1512) = v2;
  *(_QWORD *)(this + 1520) = 0;
  return this;
}

BOOL MeCab::TaggerImpl::all_morphs(MeCab::TaggerImpl *this)
{
  unint64_t v1;
  BOOL v2;

  v1 = *((_QWORD *)this + 189);
  if (*((_QWORD *)this + 190))
    v2 = (*((_QWORD *)this + 190) & 1 | v1) == 0;
  else
    v2 = 1;
  return v2 && v1 == (_QWORD)MeCab::Viterbi::buildAllLattice;
}

uint64_t MeCab::TaggerImpl::parse(MeCab::TaggerImpl *this, const char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return (*(uint64_t (**)(MeCab::TaggerImpl *, const char *, size_t))(*(_QWORD *)this + 64))(this, __s, v4);
}

uint64_t MeCab::TaggerImpl::parse(MeCab::TaggerImpl *this, const char *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *, char *, const char *, uint64_t);
  _QWORD *v8;
  char *v9;
  void **v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v13;

  result = (*(uint64_t (**)(MeCab::TaggerImpl *))(*(_QWORD *)this + 72))(this);
  if (result)
  {
    v5 = result;
    *((_QWORD *)this + 229) = 0;
    v6 = *((_QWORD *)this + 279);
    v7 = (uint64_t (*)(_QWORD *, char *, const char *, uint64_t))*((_QWORD *)this + 278);
    v8 = (_QWORD *)((char *)this + (v6 >> 1) + 1864);
    if ((v6 & 1) != 0)
      v7 = *(uint64_t (**)(_QWORD *, char *, const char *, uint64_t))(*v8 + v7);
    if ((v7(v8, (char *)this + 1824, a2, v5) & 1) != 0)
    {
      if (MeCab::StringBuffer::reserve((MeCab::TaggerImpl *)((char *)this + 1824), 1))
        *(_BYTE *)(*((_QWORD *)this + 231) + (*((_QWORD *)this + 229))++) = 0;
      if (!*((_BYTE *)this + 1857))
        return *((_QWORD *)this + 231);
    }
    else
    {
      v9 = (char *)MeCab::whatlog::str((MeCab::TaggerImpl *)((char *)this + 1936));
      std::string::basic_string[abi:ne180100]<0>(__p, v9);
      if ((v13 & 0x80u) == 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      if ((v13 & 0x80u) == 0)
        v11 = v13;
      else
        v11 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 283, (uint64_t)v10, v11);
      if ((char)v13 < 0)
        operator delete(__p[0]);
    }
    return 0;
  }
  return result;
}

void sub_2083CEE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *MeCab::TaggerImpl::parse(MeCab::TaggerImpl *this, const char *a2, unint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD *, void (***)(MeCab::StringBuffer *__hidden), const char *, uint64_t);
  _QWORD *v13;
  char *v14;
  char *v15;
  void **v16;
  uint64_t v17;
  void *__p[2];
  unsigned __int8 v20;
  void (**v21)(MeCab::StringBuffer *__hidden);
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __int16 v25;

  v9 = (*(uint64_t (**)(MeCab::TaggerImpl *))(*(_QWORD *)this + 72))(this);
  if (!v9)
    return 0;
  v10 = v9;
  v21 = &off_24C09C1E0;
  v22 = 0;
  v23 = a5;
  v24 = a4;
  v25 = 0;
  v11 = *((_QWORD *)this + 279);
  v12 = (uint64_t (*)(_QWORD *, void (***)(MeCab::StringBuffer *__hidden), const char *, uint64_t))*((_QWORD *)this + 278);
  v13 = (_QWORD *)((char *)this + (v11 >> 1) + 1864);
  if ((v11 & 1) != 0)
    v12 = *(uint64_t (**)(_QWORD *, void (***)(MeCab::StringBuffer *__hidden), const char *, uint64_t))(*v13 + v12);
  if ((v12(v13, &v21, a2, v10) & 1) != 0)
  {
    if (MeCab::StringBuffer::reserve((MeCab::StringBuffer *)&v21, 1))
      v24[v22++] = 0;
    if (HIBYTE(v25) || (v14 = v24) == 0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 283, (uint64_t)"output buffer overflow", 22);
      if (HIBYTE(v25))
        v14 = 0;
      else
        v14 = v24;
    }
  }
  else
  {
    v15 = (char *)MeCab::whatlog::str((MeCab::TaggerImpl *)((char *)this + 1936));
    std::string::basic_string[abi:ne180100]<0>(__p, v15);
    if ((v20 & 0x80u) == 0)
      v16 = __p;
    else
      v16 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v17 = v20;
    else
      v17 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 283, (uint64_t)v16, v17);
    if ((char)v20 < 0)
      operator delete(__p[0]);
    v14 = 0;
  }
  v21 = &off_24C09C1E0;
  if ((_BYTE)v25 && v24)
    MEMORY[0x20BD06378](v24, 0x1000C8077774924);
  return v14;
}

void sub_2083CF028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a14 < 0)
    operator delete(__p);
  if (a19)
  {
    if (a18)
      MEMORY[0x20BD06378](a18, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::TaggerImpl::formatNode(uint64_t a1, uint64_t a2)
{
  MeCab::StringBuffer *v3;
  char *v5;
  void **v6;
  uint64_t v7;
  void *__p[2];
  unsigned __int8 v9;

  v3 = (MeCab::StringBuffer *)(a1 + 1824);
  *(_QWORD *)(a1 + 1832) = 0;
  if ((MeCab::Writer::writeNode(a1 + 1864, a1 + 1824, *(_QWORD *)(a1 + 2256), a2) & 1) != 0)
  {
    if (MeCab::StringBuffer::reserve(v3, 1))
      *(_BYTE *)(*(_QWORD *)(a1 + 1848) + (*(_QWORD *)(a1 + 1832))++) = 0;
    if (!*(_BYTE *)(a1 + 1857))
      return *(_QWORD *)(a1 + 1848);
  }
  else
  {
    v5 = (char *)MeCab::whatlog::str((MeCab::whatlog *)(a1 + 1936));
    std::string::basic_string[abi:ne180100]<0>(__p, v5);
    if ((v9 & 0x80u) == 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    if ((v9 & 0x80u) == 0)
      v7 = v9;
    else
      v7 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 2264), (uint64_t)v6, v7);
    if ((char)v9 < 0)
      operator delete(__p[0]);
  }
  return 0;
}

void sub_2083CF140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::TaggerImpl::formatNode(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  char *v6;
  void **v7;
  uint64_t v8;
  void *__p[2];
  unsigned __int8 v11;
  void (**v12)(MeCab::StringBuffer *__hidden);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;

  v12 = &off_24C09C1E0;
  v13 = 0;
  v14 = a4;
  v15 = a3;
  v16 = 0;
  if ((MeCab::Writer::writeNode((uint64_t)(a1 + 233), (uint64_t)&v12, a1[282], a2) & 1) != 0)
  {
    if (MeCab::StringBuffer::reserve((MeCab::StringBuffer *)&v12, 1))
      *(_BYTE *)(v15 + v13++) = 0;
    if (HIBYTE(v16) || (v5 = v15) == 0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1 + 283, (uint64_t)"output buffer overflow", 22);
      if (HIBYTE(v16))
        v5 = 0;
      else
        v5 = v15;
    }
  }
  else
  {
    v6 = (char *)MeCab::whatlog::str((MeCab::whatlog *)(a1 + 242));
    std::string::basic_string[abi:ne180100]<0>(__p, v6);
    if ((v11 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v11 & 0x80u) == 0)
      v8 = v11;
    else
      v8 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1 + 283, (uint64_t)v7, v8);
    if ((char)v11 < 0)
      operator delete(__p[0]);
    v5 = 0;
  }
  v12 = &off_24C09C1E0;
  if ((_BYTE)v16 && v15)
    MEMORY[0x20BD06378](v15, 0x1000C8077774924);
  return v5;
}

void sub_2083CF290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a14 < 0)
    operator delete(__p);
  if (a19)
  {
    if (a18)
      MEMORY[0x20BD06378](a18, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::TaggerImpl::parseToNode(MeCab::TaggerImpl *this, const char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return (*(uint64_t (**)(MeCab::TaggerImpl *, const char *, size_t))(*(_QWORD *)this + 72))(this, __s, v4);
}

uint64_t MeCab::TaggerImpl::parseToNode(MeCab::TaggerImpl *this, char *a2, unint64_t a3)
{
  uint64_t v4;
  char *v5;
  void **v6;
  uint64_t v7;
  void *__p[2];
  unsigned __int8 v10;

  v4 = MeCab::Viterbi::analyze((MeCab::TaggerImpl *)((char *)this + 1288), a2, a3);
  if (!v4)
  {
    v5 = (char *)MeCab::whatlog::str((MeCab::TaggerImpl *)((char *)this + 1528));
    std::string::basic_string[abi:ne180100]<0>(__p, v5);
    if ((v10 & 0x80u) == 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    if ((v10 & 0x80u) == 0)
      v7 = v10;
    else
      v7 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 283, (uint64_t)v6, v7);
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  return v4;
}

void sub_2083CF3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::TaggerImpl::parseNBestInit(MeCab::TaggerImpl *this, const char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return (*(uint64_t (**)(MeCab::TaggerImpl *, const char *, size_t))(*(_QWORD *)this + 88))(this, __s, v4);
}

uint64_t MeCab::TaggerImpl::getLastnameLength(MeCab::TaggerImpl *this, char *a2, uint64_t a3, int a4)
{
  return MeCab::TokenizerImpl<mecab_node_t,mecab_path_t>::get_lastname_length((uint64_t)this + 8, (unsigned __int8 *)a2, a3, a4);
}

unint64_t MeCab::TaggerImpl::getFeature(uint64_t a1, uint64_t a2, _WORD *a3, unint64_t a4)
{
  return MeCab::TokenizerImpl<mecab_node_t,mecab_path_t>::getFeature(a1 + 8, a2, a3, a4);
}

uint64_t MeCab::TaggerImpl::parseNBestInit(MeCab::TaggerImpl *this, const char *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  if (*((int *)this + 336) <= 0)
  {
    std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 283) - 24) + 2264), 0);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 283, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/tagger.cpp", 60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"(", 1);
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") [", 3);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"viterbi_.lattice_level() >= 1", 29);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"use -l option to obtain N-Best results. e.g., mecab -N10 -l1", 60);
    return 0;
  }
  else
  {
    result = (*(uint64_t (**)(MeCab::TaggerImpl *))(*(_QWORD *)this + 72))(this);
    *((_QWORD *)this + 319) = result;
    *((_QWORD *)this + 282) = a2;
    if (result)
    {
      v5 = *((_QWORD *)this + 281);
      if (v5)
      {
        v6 = result;
      }
      else
      {
        v5 = operator new();
        *(_QWORD *)v5 = &off_24C09C300;
        *(_QWORD *)(v5 + 8) = 0;
        *(_QWORD *)(v5 + 16) = 0;
        *(_QWORD *)(v5 + 24) = 0;
        *(_QWORD *)(v5 + 40) = &off_24C09C600;
        *(_OWORD *)(v5 + 48) = 0u;
        *(_OWORD *)(v5 + 64) = 0u;
        *(_QWORD *)(v5 + 80) = 0;
        *(_QWORD *)(v5 + 88) = 512;
        v12 = *((_QWORD *)this + 281);
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        *((_QWORD *)this + 281) = v5;
        v6 = *((_QWORD *)this + 319);
      }
      MeCab::NBestGenerator::set((uint64_t *)v5, v6);
      return 1;
    }
  }
  return result;
}

uint64_t MeCab::TaggerImpl::nextNode(MeCab::TaggerImpl *this)
{
  uint64_t v2;
  uint64_t v3;

  if (!*((_QWORD *)this + 319))
    return 0;
  v2 = *((_QWORD *)this + 281);
  if (!v2)
  {
    v2 = operator new();
    *(_QWORD *)v2 = &off_24C09C300;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 40) = &off_24C09C600;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_QWORD *)(v2 + 80) = 0;
    *(_QWORD *)(v2 + 88) = 512;
    v3 = *((_QWORD *)this + 281);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    *((_QWORD *)this + 281) = v2;
  }
  return MeCab::NBestGenerator::next((MeCab::NBestGenerator *)v2);
}

uint64_t MeCab::TaggerImpl::next(MeCab::TaggerImpl *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD *, char *, _QWORD, uint64_t);
  _QWORD *v6;
  char *v7;
  void **v8;
  uint64_t v9;
  void *__p[2];
  unsigned __int8 v11;

  result = (*(uint64_t (**)(MeCab::TaggerImpl *))(*(_QWORD *)this + 32))(this);
  if (result)
  {
    v3 = result;
    *((_QWORD *)this + 229) = 0;
    v4 = *((_QWORD *)this + 279);
    v5 = (uint64_t (*)(_QWORD *, char *, _QWORD, uint64_t))*((_QWORD *)this + 278);
    v6 = (_QWORD *)((char *)this + (v4 >> 1) + 1864);
    if ((v4 & 1) != 0)
      v5 = *(uint64_t (**)(_QWORD *, char *, _QWORD, uint64_t))(*v6 + v5);
    if ((v5(v6, (char *)this + 1824, *((_QWORD *)this + 282), v3) & 1) != 0)
    {
      if (MeCab::StringBuffer::reserve((MeCab::TaggerImpl *)((char *)this + 1824), 1))
        *(_BYTE *)(*((_QWORD *)this + 231) + (*((_QWORD *)this + 229))++) = 0;
      if (!*((_BYTE *)this + 1857))
        return *((_QWORD *)this + 231);
    }
    else
    {
      v7 = (char *)MeCab::whatlog::str((MeCab::TaggerImpl *)((char *)this + 1936));
      std::string::basic_string[abi:ne180100]<0>(__p, v7);
      if ((v11 & 0x80u) == 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      if ((v11 & 0x80u) == 0)
        v9 = v11;
      else
        v9 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 283, (uint64_t)v8, v9);
      if ((char)v11 < 0)
        operator delete(__p[0]);
    }
    return 0;
  }
  return result;
}

void sub_2083CF6F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *MeCab::TaggerImpl::next(MeCab::TaggerImpl *this, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, void (***)(MeCab::StringBuffer *__hidden), _QWORD, uint64_t);
  _QWORD *v10;
  char *v11;
  char *v12;
  void **v13;
  uint64_t v14;
  void *__p[2];
  unsigned __int8 v17;
  void (**v18)(MeCab::StringBuffer *__hidden);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int16 v22;

  v6 = (*(uint64_t (**)(MeCab::TaggerImpl *))(*(_QWORD *)this + 32))(this);
  if (!v6)
    return 0;
  v7 = v6;
  v18 = &off_24C09C1E0;
  v19 = 0;
  v20 = a3;
  v21 = a2;
  v22 = 0;
  v8 = *((_QWORD *)this + 279);
  v9 = (uint64_t (*)(_QWORD *, void (***)(MeCab::StringBuffer *__hidden), _QWORD, uint64_t))*((_QWORD *)this + 278);
  v10 = (_QWORD *)((char *)this + (v8 >> 1) + 1864);
  if ((v8 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *, void (***)(MeCab::StringBuffer *__hidden), _QWORD, uint64_t))(*v10 + v9);
  if ((v9(v10, &v18, *((_QWORD *)this + 282), v7) & 1) != 0)
  {
    if (MeCab::StringBuffer::reserve((MeCab::StringBuffer *)&v18, 1))
      v21[v19++] = 0;
    if (HIBYTE(v22) || (v11 = v21) == 0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 283, (uint64_t)"output buffer overflow", 22);
      if (HIBYTE(v22))
        v11 = 0;
      else
        v11 = v21;
    }
  }
  else
  {
    v12 = (char *)MeCab::whatlog::str((MeCab::TaggerImpl *)((char *)this + 1936));
    std::string::basic_string[abi:ne180100]<0>(__p, v12);
    if ((v17 & 0x80u) == 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if ((v17 & 0x80u) == 0)
      v14 = v17;
    else
      v14 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 283, (uint64_t)v13, v14);
    if ((char)v17 < 0)
      operator delete(__p[0]);
    v11 = 0;
  }
  v18 = &off_24C09C1E0;
  if ((_BYTE)v22 && v21)
    MEMORY[0x20BD06378](v21, 0x1000C8077774924);
  return v11;
}

void sub_2083CF874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a14 < 0)
    operator delete(__p);
  if (a19)
  {
    if (a18)
      MEMORY[0x20BD06378](a18, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::TaggerImpl::parseNBest(MeCab::TaggerImpl *this, uint64_t a2, const char *__s)
{
  size_t v6;

  v6 = strlen(__s);
  return (*(uint64_t (**)(MeCab::TaggerImpl *, uint64_t, const char *, size_t))(*(_QWORD *)this + 80))(this, a2, __s, v6);
}

uint64_t MeCab::TaggerImpl::parseNBest(MeCab::TaggerImpl *this, uint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD *, char *, const char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;

  v6 = *(_QWORD *)this;
  if (a2 == 1)
    return (*(uint64_t (**)(MeCab::TaggerImpl *, const char *, uint64_t))(v6 + 64))(this, a3, a4);
  v8 = a2;
  if (!(*(unsigned int (**)(MeCab::TaggerImpl *, const char *, uint64_t))(v6 + 88))(this, a3, a4))
    return 0;
  *((_QWORD *)this + 229) = 0;
  if (v8)
  {
    do
    {
      v9 = (*(uint64_t (**)(MeCab::TaggerImpl *))(*(_QWORD *)this + 32))(this);
      if (!v9)
        break;
      v10 = v9;
      v11 = (uint64_t (*)(_QWORD *, char *, const char *, uint64_t))*((_QWORD *)this + 278);
      v12 = *((_QWORD *)this + 279);
      v13 = (_QWORD *)((char *)this + (v12 >> 1) + 1864);
      if ((v12 & 1) != 0)
        v11 = *(uint64_t (**)(_QWORD *, char *, const char *, uint64_t))(*v13 + v11);
      if ((v11(v13, (char *)this + 1824, a3, v10) & 1) == 0)
      {
        v14 = (char *)MeCab::whatlog::str((MeCab::TaggerImpl *)((char *)this + 1936));
        std::string::basic_string[abi:ne180100]<0>(__p, v14);
        if ((v18 & 0x80u) == 0)
          v15 = __p;
        else
          v15 = (void **)__p[0];
        if ((v18 & 0x80u) == 0)
          v16 = v18;
        else
          v16 = (uint64_t)__p[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 283, (uint64_t)v15, v16);
        if ((char)v18 < 0)
          operator delete(__p[0]);
        return 0;
      }
    }
    while (--v8);
  }
  if (MeCab::StringBuffer::reserve((MeCab::TaggerImpl *)((char *)this + 1824), 1))
    *(_BYTE *)(*((_QWORD *)this + 231) + (*((_QWORD *)this + 229))++) = 0;
  if (*((_BYTE *)this + 1857))
    return 0;
  else
    return *((_QWORD *)this + 231);
}

void sub_2083CFA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::TaggerImpl::dictionary_info(MeCab::TaggerImpl *this)
{
  return *((_QWORD *)this + 34);
}

char *MeCab::TaggerImpl::parseNBest(MeCab::TaggerImpl *this, uint64_t a2, const char *a3, uint64_t a4, char *a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD *, void (***)(MeCab::StringBuffer *__hidden), const char *, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  void **v19;
  uint64_t v20;
  void *__p[2];
  unsigned __int8 v22;
  void (**v23)(MeCab::StringBuffer *__hidden);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int16 i;

  v10 = *(_QWORD *)this;
  if (a2 == 1)
    return (char *)(*(uint64_t (**)(MeCab::TaggerImpl *, const char *, uint64_t, char *, uint64_t))(v10 + 56))(this, a3, a4, a5, a6);
  v12 = a2;
  if (!(*(unsigned int (**)(MeCab::TaggerImpl *, const char *, uint64_t))(v10 + 88))(this, a3, a4))
    return 0;
  v23 = &off_24C09C1E0;
  v24 = 0;
  v25 = a6;
  v26 = a5;
  for (i = 0; v12; --v12)
  {
    v13 = (*(uint64_t (**)(MeCab::TaggerImpl *))(*(_QWORD *)this + 32))(this);
    if (!v13)
      break;
    v14 = (uint64_t (*)(_QWORD *, void (***)(MeCab::StringBuffer *__hidden), const char *, uint64_t))*((_QWORD *)this + 278);
    v15 = *((_QWORD *)this + 279);
    v16 = (_QWORD *)((char *)this + (v15 >> 1) + 1864);
    if ((v15 & 1) != 0)
      v14 = *(uint64_t (**)(_QWORD *, void (***)(MeCab::StringBuffer *__hidden), const char *, uint64_t))(*v16 + v14);
    if ((v14(v16, &v23, a3, v13) & 1) == 0)
    {
      v18 = (char *)MeCab::whatlog::str((MeCab::TaggerImpl *)((char *)this + 1936));
      std::string::basic_string[abi:ne180100]<0>(__p, v18);
      if ((v22 & 0x80u) == 0)
        v19 = __p;
      else
        v19 = (void **)__p[0];
      if ((v22 & 0x80u) == 0)
        v20 = v22;
      else
        v20 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 283, (uint64_t)v19, v20);
      if ((char)v22 < 0)
        operator delete(__p[0]);
      goto LABEL_24;
    }
  }
  if (MeCab::StringBuffer::reserve((MeCab::StringBuffer *)&v23, 1))
    v26[v24++] = 0;
  if (HIBYTE(i) || (v17 = v26) == 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 283, (uint64_t)"output buffer overflow", 22);
LABEL_24:
    v17 = 0;
  }
  v23 = &off_24C09C1E0;
  if ((_BYTE)i)
  {
    if (v26)
      MEMORY[0x20BD06378](v26, 0x1000C8077774924);
  }
  return v17;
}

void sub_2083CFC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a14 < 0)
    operator delete(__p);
  if (a19)
  {
    if (a18)
      MEMORY[0x20BD06378](a18, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

MeCab::TaggerImpl *MeCab::createTagger(MeCab *this, char **a2, char **a3)
{
  int v4;
  MeCab::TaggerImpl *v5;
  const char *v6;
  char v8;

  v4 = (int)this;
  MEMORY[0x20BD06324](&v8, a2, a3);
  v5 = (MeCab::TaggerImpl *)operator new();
  MeCab::TaggerImpl::TaggerImpl(v5);
  if ((MeCab::TaggerImpl::open(v5, v4, a2) & 1) == 0)
  {
    v6 = (const char *)(*(uint64_t (**)(MeCab::TaggerImpl *))(*(_QWORD *)v5 + 208))(v5);
    (*(void (**)(MeCab::TaggerImpl *))(*(_QWORD *)v5 + 224))(v5);
    v5 = 0;
  }
  std::ios_base::Init::~Init((std::ios_base::Init *)&v8);
  return v5;
}

void sub_2083CFD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;

  MEMORY[0x20BD0639C](v13, 0x10F3C403D3F017FLL);
  std::ios_base::Init::~Init((std::ios_base::Init *)&a13);
  _Unwind_Resume(a1);
}

MeCab::TaggerImpl *MeCab::createTagger(MeCab *this, const char *a2)
{
  MeCab::TaggerImpl *v3;
  const char *v4;
  void *v6[52];
  char v7;

  MEMORY[0x20BD06324](&v7, a2);
  v3 = (MeCab::TaggerImpl *)operator new();
  MeCab::TaggerImpl::TaggerImpl(v3);
  MeCab::Param::Param((MeCab::Param *)v6);
  if ((MeCab::TaggerImpl::open(v3, (char *)this) & 1) == 0)
  {
    v4 = (const char *)(*(uint64_t (**)(MeCab::TaggerImpl *))(*(_QWORD *)v3 + 208))(v3);
    (*(void (**)(MeCab::TaggerImpl *))(*(_QWORD *)v3 + 224))(v3);
    v3 = 0;
  }
  MeCab::Param::~Param(v6);
  std::ios_base::Init::~Init((std::ios_base::Init *)&v7);
  return v3;
}

void sub_2083CFE70(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ios_base::Init::~Init((std::ios_base::Init *)(v1 - 33));
  _Unwind_Resume(a1);
}

uint64_t mecab_do(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  char **v5;
  char **v6;
  int v7;
  std::string::size_type size;
  std::string *v9;
  char *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  std::string *v20;
  _QWORD *v21;
  std::string *v22;
  std::string::size_type v23;
  _QWORD *v24;
  const std::locale::facet *v25;
  uint64_t v26;
  std::locale::id *v27;
  _QWORD *v28;
  size_t v29;
  _QWORD *v30;
  const std::locale::facet *v31;
  _QWORD *v32;
  const std::locale::facet *v33;
  _QWORD *v34;
  size_t v35;
  _QWORD *v36;
  const std::locale::facet *v37;
  _QWORD *v38;
  const std::locale::facet *v39;
  _QWORD *v40;
  const std::locale::facet *v41;
  _QWORD *v42;
  const std::locale::facet *v43;
  _QWORD *v44;
  const std::locale::facet *v45;
  const std::locale::facet *v46;
  int v48;
  unsigned int v49;
  uint64_t v50;
  _BOOL4 v51;
  BOOL v52;
  size_t v53;
  char *v54;
  const char *v55;
  _QWORD *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  std::locale::id *v61;
  const std::locale::facet *v62;
  _QWORD *v63;
  std::string::size_type v64;
  const std::locale::facet *v65;
  void *v66;
  int v67;
  _QWORD *v68;
  _QWORD *v69;
  const std::locale::facet *v70;
  size_t v71;
  const char *v72;
  uint64_t v73;
  size_t v74;
  void **v75;
  size_t v76;
  _QWORD *v77;
  const std::locale::facet *v78;
  void **v79;
  size_t v80;
  _QWORD *v81;
  std::string v82;
  void (**v83)(MeCab::istream_wrapper *__hidden);
  uint64_t v84;
  std::string v85;
  void (**v86)(MeCab::ostream_wrapper *__hidden);
  _QWORD *v87;
  std::string v88;
  void *v89[4];
  __int128 *v90;
  __int128 *v91;
  uint64_t v92;
  _QWORD v93[34];
  uint64_t v94;
  _BYTE v95[303];
  char v96;
  std::locale v97;
  void *__p[2];
  unsigned __int8 v99;
  uint64_t v100;

  v4 = MEMORY[0x24BDAC7A8](a1, a2, a3, a4);
  v6 = v5;
  v7 = v4;
  v100 = *MEMORY[0x24BDAC8D0];
  MEMORY[0x20BD06324](&v96);
  MeCab::TaggerImpl::TaggerImpl((MeCab::TaggerImpl *)v93);
  MeCab::Param::Param((MeCab::Param *)v89);
  {
    MeCab::Param::get<std::string>((uint64_t)v89, "output", &v88);
    size = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v88.__r_.__value_.__l.__size_;
    if (!size)
    {
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
      {
        v88.__r_.__value_.__l.__size_ = 1;
        v9 = (std::string *)v88.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&v88.__r_.__value_.__s + 23) = 1;
        v9 = &v88;
      }
      LOWORD(v9->__r_.__value_.__l.__data_) = 45;
    }
    v16 = MeCab::Param::get<int>((uint64_t)v89, "nbest");
    v17 = v16;
    if (v16 - 513 <= 0xFFFFFDFF)
    {
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"invalid N value", 15);
      std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
      v19 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put();
      std::ostream::flush();
      v15 = 1;
LABEL_44:
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v88.__r_.__value_.__l.__data_);
      goto LABEL_46;
    }
    if (v16 >= 2)
    {
      LODWORD(__p[0]) = 1;
      MeCab::Param::set<int>((uint64_t)v89, "lattice-level", (uint64_t)__p, 1);
    }
    if ((MeCab::TaggerImpl::open((MeCab::TaggerImpl *)v93, (MeCab::Param *)v89) & 1) == 0)
    {
      v79 = MeCab::whatlog::str((MeCab::whatlog *)v95);
      v80 = strlen((const char *)v79);
      v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)v79, v80);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v81);
      exit(1);
    }
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v88;
    else
      v20 = (std::string *)v88.__r_.__value_.__r.__words[0];
    MeCab::ostream_wrapper::ostream_wrapper((MeCab::ostream_wrapper *)&v86, (const char *)v20);
    if ((*((_BYTE *)v87 + *(_QWORD *)(*v87 - 24) + 32) & 5) != 0)
    {
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"no such file or directory: ", 27);
      if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v88;
      else
        v22 = (std::string *)v88.__r_.__value_.__r.__words[0];
      if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
      else
        v23 = v88.__r_.__value_.__l.__size_;
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
      std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(_QWORD *)(*v24 - 24)));
      v25 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put();
      std::ostream::flush();
    }
    else if (MeCab::Param::get<BOOL>((uint64_t)v89, "dump-config"))
    {
      MeCab::Param::dump_config((uint64_t)v89, v87);
    }
    else
    {
      if (!MeCab::Param::get<BOOL>((uint64_t)v89, "dictionary-info"))
      {
        memset(&v85, 0, sizeof(v85));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v85, v90, v91, 0xAAAAAAAAAAAAAAABLL * (((char *)v91 - (char *)v90) >> 3));
        if (v85.__r_.__value_.__r.__words[0] == v85.__r_.__value_.__l.__size_)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "-");
          std::vector<std::string>::push_back[abi:ne180100]((std::vector<std::string> *)&v85, (__int128 *)__p);
          if ((char)v99 < 0)
            operator delete(__p[0]);
        }
        v48 = MeCab::Param::get<int>((uint64_t)v89, "input-buffer-size");
        if (v48 <= 0x2000)
          v49 = 0x2000;
        else
          v49 = v48;
        if (v49 >= 0x500000)
          v50 = 5242880;
        else
          v50 = v49;
        v51 = MeCab::Param::get<BOOL>((uint64_t)v89, "partial");
        v52 = v51;
        if (v51)
          v53 = 8 * v50;
        else
          v53 = v50;
        v54 = (char *)operator new[]();
        v55 = (const char *)v85.__r_.__value_.__r.__words[0];
        if (v85.__r_.__value_.__l.__size_ == v85.__r_.__value_.__r.__words[0])
        {
          v15 = 0;
        }
        else
        {
          if (*(char *)(v85.__r_.__value_.__r.__words[0] + 23) < 0)
            v55 = *(const char **)v85.__r_.__value_.__l.__data_;
          MeCab::istream_wrapper::istream_wrapper((MeCab::istream_wrapper *)&v83, v55);
          if ((*(_BYTE *)(v84 + *(_QWORD *)(*(_QWORD *)v84 - 24) + 32) & 5) != 0)
          {
            v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"no such file or directory: ", 27);
            v57 = *(char *)(v85.__r_.__value_.__r.__words[0] + 23);
            if (v57 >= 0)
              v58 = v85.__r_.__value_.__r.__words[0];
            else
              v58 = *(_QWORD *)v85.__r_.__value_.__l.__data_;
            if (v57 >= 0)
              v59 = *(unsigned __int8 *)(v85.__r_.__value_.__r.__words[0] + 23);
            else
              v59 = *(_QWORD *)(v85.__r_.__value_.__r.__words[0] + 8);
            v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, v58, v59);
            std::endl[abi:ne180100]<char,std::char_traits<char>>(v60);
LABEL_93:
            v15 = 1;
          }
          else
          {
            v61 = (std::locale::id *)MEMORY[0x24BEDB350];
            while (1)
            {
              if (v52)
              {
                memset(&v82, 0, sizeof(v82));
                while (1)
                {
                  std::ios_base::getloc((const std::ios_base *)(v84 + *(_QWORD *)(*(_QWORD *)v84 - 24)));
                  v62 = std::locale::use_facet(&v97, v61);
                  ((void (*)(const std::locale::facet *, uint64_t))v62->__vftable[2].~facet_0)(v62, 10);
                  std::locale::~locale(&v97);
                  v63 = (_QWORD *)std::istream::getline();
                  if ((*((_BYTE *)v63 + *(_QWORD *)(*v63 - 24) + 32) & 5) != 0)
                    break;
                  v64 = strlen((const char *)__p);
                  std::string::append(&v82, (const std::string::value_type *)__p, v64);
                  std::string::push_back(&v82, 10);
                  if (LODWORD(__p[0]) == 5459781 || !LOBYTE(__p[0]))
                    goto LABEL_80;
                }
                std::ios_base::clear((std::ios_base *)(v84 + *(_QWORD *)(*(_QWORD *)v84 - 24)), 3u);
LABEL_80:
                if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
                {
                  v66 = (void *)v82.__r_.__value_.__r.__words[0];
                  strncpy(v54, v82.__r_.__value_.__l.__data_, v53);
                  operator delete(v66);
                }
                else
                {
                  strncpy(v54, (const char *)&v82, v53);
                }
              }
              else
              {
                std::ios_base::getloc((const std::ios_base *)(v84 + *(_QWORD *)(*(_QWORD *)v84 - 24)));
                v65 = std::locale::use_facet((const std::locale *)__p, v61);
                ((void (*)(const std::locale::facet *, uint64_t))v65->__vftable[2].~facet_0)(v65, 10);
                std::locale::~locale((std::locale *)__p);
                std::istream::getline();
              }
              v67 = *(_DWORD *)(v84 + *(_QWORD *)(*(_QWORD *)v84 - 24) + 32);
              if ((v67 & 2) != 0 && !*v54)
                break;
              if ((v67 & 5) != 0)
              {
                v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"input-buffer overflow. ", 23);
                v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"The line is split. use -b #SIZE option.", 39);
                std::ios_base::getloc((const std::ios_base *)((char *)v69 + *(_QWORD *)(*v69 - 24)));
                v70 = std::locale::use_facet((const std::locale *)__p, v61);
                ((void (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10);
                std::locale::~locale((std::locale *)__p);
                std::ostream::put();
                std::ostream::flush();
                std::ios_base::clear((std::ios_base *)(v84 + *(_QWORD *)(*(_QWORD *)v84 - 24)), 0);
              }
              v71 = strlen(v54);
              if (v17 < 2)
                v72 = (const char *)(*(uint64_t (**)(_QWORD *, char *, size_t))(v93[0] + 64))(v93, v54, v71);
              else
                v72 = (const char *)(*(uint64_t (**)(_QWORD *, _QWORD, char *, size_t))(v93[0] + 80))(v93, v17, v54, v71);
              v73 = (uint64_t)v72;
              if (!v72)
              {
                v75 = MeCab::whatlog::str((MeCab::whatlog *)v95);
                v76 = strlen((const char *)v75);
                v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)v75, v76);
                std::ios_base::getloc((const std::ios_base *)((char *)v77 + *(_QWORD *)(*v77 - 24)));
                v78 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
                ((void (*)(const std::locale::facet *, uint64_t))v78->__vftable[2].~facet_0)(v78, 10);
                std::locale::~locale((std::locale *)__p);
                std::ostream::put();
                std::ostream::flush();
                goto LABEL_93;
              }
              v74 = strlen(v72);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, v73, v74);
              std::ostream::flush();
            }
            v15 = 0;
          }
          v83 = &off_24C09C348;
          if (v84 != MEMORY[0x24BEDB1D0] && v84)
            (*(void (**)(void))(*(_QWORD *)v84 + 8))();
        }
        MEMORY[0x20BD06378](v54, 0x1000C8077774924);
        __p[0] = &v85;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        goto LABEL_41;
      }
      v26 = v94;
      if (v94)
      {
        v27 = (std::locale::id *)MEMORY[0x24BEDB350];
        do
        {
          v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"filename:\t", 10);
          v29 = strlen(*(const char **)v26);
          v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, *(_QWORD *)v26, v29);
          std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(_QWORD *)(*v30 - 24)));
          v31 = std::locale::use_facet((const std::locale *)__p, v27);
          ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"version:\t", 9);
          v32 = (_QWORD *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(_QWORD *)(*v32 - 24)));
          v33 = std::locale::use_facet((const std::locale *)__p, v27);
          ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"charset:\t", 9);
          v35 = strlen(*(const char **)(v26 + 8));
          v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, *(_QWORD *)(v26 + 8), v35);
          std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(_QWORD *)(*v36 - 24)));
          v37 = std::locale::use_facet((const std::locale *)__p, v27);
          ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"type:\t", 6);
          v38 = (_QWORD *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(_QWORD *)(*v38 - 24)));
          v39 = std::locale::use_facet((const std::locale *)__p, v27);
          ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"size:\t", 6);
          v40 = (_QWORD *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(_QWORD *)(*v40 - 24)));
          v41 = std::locale::use_facet((const std::locale *)__p, v27);
          ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"left size:\t", 11);
          v42 = (_QWORD *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(_QWORD *)(*v42 - 24)));
          v43 = std::locale::use_facet((const std::locale *)__p, v27);
          ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"right size:\t", 12);
          v44 = (_QWORD *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(_QWORD *)(*v44 - 24)));
          v45 = std::locale::use_facet((const std::locale *)__p, v27);
          ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          std::ios_base::getloc((const std::ios_base *)((char *)v87 + *(_QWORD *)(*v87 - 24)));
          v46 = std::locale::use_facet((const std::locale *)__p, v27);
          ((void (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          v26 = *(_QWORD *)(v26 + 40);
        }
        while (v26);
      }
    }
    v15 = 1;
LABEL_41:
    v86 = &off_24C09C368;
    if (v87 != (_QWORD *)MEMORY[0x24BEDB318] && v87)
      (*(void (**)(void))(*v87 + 8))();
    goto LABEL_44;
  }
  v10 = (char *)MeCab::whatlog::str((MeCab::whatlog *)&v92);
  std::string::basic_string[abi:ne180100]<0>(__p, v10);
  if ((v99 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v99 & 0x80u) == 0)
    v12 = v99;
  else
    v12 = (uint64_t)__p[1];
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)v11, v12);
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
  v14 = std::locale::use_facet((const std::locale *)&v88, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale((std::locale *)&v88);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v99 < 0)
    operator delete(__p[0]);
  v15 = 0;
LABEL_46:
  MeCab::Param::~Param(v89);
  MeCab::TaggerImpl::~TaggerImpl((MeCab::TaggerImpl *)v93);
  std::ios_base::Init::~Init((std::ios_base::Init *)&v96);
  return v15;
}

void sub_2083D0B88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  void (**v10)(MeCab::istream_wrapper *__hidden);
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  void (**v16)(MeCab::ostream_wrapper *__hidden);
  uint64_t v17;
  void *__p;
  uint64_t v19;
  uint64_t v20;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, void *);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, void (**)(MeCab::istream_wrapper *__hidden this));
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, void (**)(MeCab::ostream_wrapper *__hidden this));
  v17 = va_arg(va2, _QWORD);
  __p = va_arg(va2, void *);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  std::locale::~locale((std::locale *)&STACK[0xC20]);
  v10 = &off_24C09C348;
  if (v11 != MEMORY[0x24BEDB1D0] && v11 != 0)
    (*(void (**)(void))(*(_QWORD *)v11 + 8))();
  MEMORY[0x20BD06378](v2, 0x1000C8077774924);
  va_copy((va_list)v6, va1);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v16 = &off_24C09C368;
  if (v17 != MEMORY[0x24BEDB318] && v17 != 0)
    (*(void (**)(void))(*(_QWORD *)v17 + 8))();
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  MeCab::Param::~Param((void **)va2);
  MeCab::TaggerImpl::~TaggerImpl((MeCab::TaggerImpl *)&STACK[0x210]);
  std::ios_base::Init::~Init((std::ios_base::Init *)&STACK[0xC17]);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::push_back[abi:ne180100](std::vector<std::string> *a1, __int128 *a2)
{
  std::allocator<std::string> *p_end_cap;
  std::string *v5;
  std::string *value;
  unint64_t v7;
  __int128 v8;
  std::string *end;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::string *v14;
  std::string *v15;
  __int128 v16;
  std::__split_buffer<std::string> __v;

  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
  v5 = value;
  v7 = *((_QWORD *)p_end_cap - 1);
  if (v7 >= (unint64_t)value)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (unint64_t)a1->__begin_) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<char *>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)a1->__begin_) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v13)
      v14 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v13);
    else
      v14 = 0;
    v15 = v14 + v10;
    __v.__first_ = v14;
    __v.__begin_ = v15;
    __v.__end_cap_.__value_ = &v14[v13];
    v16 = *a2;
    v15->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    __v.__end_ = v15 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(a1, &__v);
    end = a1->__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    end = (std::string *)(v7 + 24);
    a1->__end_ = (std::vector<std::string>::pointer)(v7 + 24);
  }
  a1->__end_ = end;
}

void sub_2083D0E98(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void MeCab::NBestGenerator::~NBestGenerator(MeCab::NBestGenerator *this)
{
  MeCab::NBestGenerator::~NBestGenerator(this);
  JUMPOUT(0x20BD0639CLL);
}

{
  void *v2;

  *(_QWORD *)this = &off_24C09C300;
  MeCab::FreeList<MeCab::NBestGenerator::QueueElement>::~FreeList((_QWORD *)this + 5);
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

void MeCab::FreeList<MeCab::NBestGenerator::QueueElement>::~FreeList(_QWORD *a1)
{
  MeCab::FreeList<MeCab::NBestGenerator::QueueElement>::~FreeList(a1);
  JUMPOUT(0x20BD0639CLL);
}

_QWORD *MeCab::FreeList<MeCab::NBestGenerator::QueueElement>::~FreeList(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;

  *a1 = &off_24C09C600;
  a1[5] = 0;
  v4 = a1 + 1;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
    if (!v3)
      return a1;
    goto LABEL_7;
  }
  v5 = 0;
  do
  {
    if (v2[v5])
    {
      MEMORY[0x20BD06378](v2[v5], 0x1020C806C4767B9);
      v5 = a1[5];
      v2 = (_QWORD *)a1[1];
      v3 = (_QWORD *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void MeCab::scoped_ptr<MeCab::NBestGenerator>::~scoped_ptr(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C09C0B8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD0639CLL);
}

uint64_t MeCab::TokenizerImpl<mecab_node_t,mecab_path_t>::~TokenizerImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  *(_QWORD *)a1 = &off_24C09C2A0;
  MeCab::TokenizerImpl<mecab_node_t,mecab_path_t>::close((_QWORD *)a1);
  if (*(char *)(a1 + 1263) < 0)
    operator delete(*(void **)(a1 + 1240));
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 976) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 976 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 984) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 1071) < 0)
    operator delete(*(void **)(a1 + 1048));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD06354](a1 + 1088);
  MeCab::CharProperty::~CharProperty((void **)(a1 + 280));
  *(_QWORD *)(a1 + 248) = &off_24C09C200;
  v4 = *(_QWORD *)(a1 + 256);
  if (v4)
    MEMORY[0x20BD06378](v4, 0x1000C8094CA146DLL);
  v5 = *(void **)(a1 + 224);
  if (v5)
  {
    *(_QWORD *)(a1 + 232) = v5;
    operator delete(v5);
  }
  MeCab::FreeList<mecab_dictionary_info_t>::~FreeList((_QWORD *)(a1 + 168));
  MeCab::FreeList<mecab_node_t>::~FreeList((_QWORD *)(a1 + 112));
  *(_QWORD *)(a1 + 96) = &off_24C09C220;
  v6 = *(_QWORD *)(a1 + 104);
  if (v6)
    MEMORY[0x20BD06378](v6, 0x1000C8077774924);
  *(_QWORD *)(a1 + 80) = &off_24C09C220;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
    MEMORY[0x20BD06378](v7, 0x1000C8077774924);
  v8 = *(void **)(a1 + 32);
  if (v8)
  {
    *(_QWORD *)(a1 + 40) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 8);
  if (v9)
  {
    *(_QWORD *)(a1 + 16) = v9;
    operator delete(v9);
  }
  return a1;
}

void MeCab::TokenizerImpl<mecab_node_t,mecab_path_t>::~TokenizerImpl(uint64_t a1)
{
  MeCab::TokenizerImpl<mecab_node_t,mecab_path_t>::~TokenizerImpl(a1);
  JUMPOUT(0x20BD0639CLL);
}

_QWORD *MeCab::FreeList<mecab_node_t>::~FreeList(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;

  *a1 = &off_24C09C560;
  a1[5] = 0;
  v4 = a1 + 1;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
    if (!v3)
      return a1;
    goto LABEL_7;
  }
  v5 = 0;
  do
  {
    if (v2[v5])
    {
      MEMORY[0x20BD06378](v2[v5], 0x10F0C80D97060F7);
      v5 = a1[5];
      v2 = (_QWORD *)a1[1];
      v3 = (_QWORD *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void MeCab::FreeList<mecab_node_t>::~FreeList(_QWORD *a1)
{
  MeCab::FreeList<mecab_node_t>::~FreeList(a1);
  JUMPOUT(0x20BD0639CLL);
}

BOOL MeCab::StringBuffer::reserve(MeCab::StringBuffer *this, uint64_t a2)
{
  int v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v8;
  void *v9;
  const void *v10;
  _BOOL8 result;
  char v12;

  v3 = *((unsigned __int8 *)this + 32);
  v5 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  v6 = v5 + a2;
  if (v3)
  {
    if (v6 >= v4)
    {
      if (!v4)
      {
        *((_QWORD *)this + 2) = 0x2000;
        *((_QWORD *)this + 3) = operator new[]();
        v4 = *((_QWORD *)this + 2);
        v6 = *((_QWORD *)this + 1) + a2;
      }
      do
      {
        v8 = v6 >= 2 * v4;
        v4 *= 2;
      }
      while (v8);
      *((_QWORD *)this + 2) = v4;
      v9 = (void *)operator new[]();
      v10 = (const void *)*((_QWORD *)this + 3);
      memcpy(v9, v10, *((_QWORD *)this + 1));
      if (v10)
        MEMORY[0x20BD06378](v10, 0x1000C8077774924);
      *((_QWORD *)this + 3) = v9;
    }
    return 1;
  }
  else
  {
    v8 = v6 >= v4;
    result = v6 < v4;
    v12 = v8;
    *((_BYTE *)this + 33) = v12;
  }
  return result;
}

void MeCab::StringBuffer::~StringBuffer(MeCab::StringBuffer *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C09C1E0;
  if (*((_BYTE *)this + 32))
  {
    v2 = *((_QWORD *)this + 3);
    if (v2)
      MEMORY[0x20BD06378](v2, 0x1000C8077774924);
    *((_QWORD *)this + 3) = 0;
  }
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24C09C1E0;
  if (*((_BYTE *)this + 32))
  {
    v2 = *((_QWORD *)this + 3);
    if (v2)
      MEMORY[0x20BD06378](v2, 0x1000C8077774924);
    *((_QWORD *)this + 3) = 0;
  }
  JUMPOUT(0x20BD0639CLL);
}

MeCab::StringBuffer *MeCab::StringBuffer::write(MeCab::StringBuffer *this, const char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (MeCab::StringBuffer::reserve(this, v4))
  {
    memcpy((void *)(*((_QWORD *)this + 3) + *((_QWORD *)this + 1)), __s, v4);
    *((_QWORD *)this + 1) += v4;
  }
  return this;
}

MeCab::Viterbi *MeCab::Viterbi::Viterbi(MeCab::Viterbi *this)
{
  *(_QWORD *)this = &off_24C09C540;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_QWORD *)this + 12) = &off_24C09C118;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_QWORD *)this + 25) = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this + 240);
  *((_QWORD *)this + 63) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_QWORD *)this + 65) = 0;
  return this;
}

void sub_2083D14E4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v4 = (void *)v1[23];
  if (v4)
  {
    v1[24] = v4;
    operator delete(v4);
  }
  v5 = (void *)v1[20];
  if (v5)
  {
    v1[21] = v5;
    operator delete(v5);
  }
  v6 = (void *)v1[17];
  if (v6)
  {
    v1[18] = v6;
    operator delete(v6);
  }
  v7 = (void *)v1[14];
  if (v7)
  {
    v1[15] = v7;
    operator delete(v7);
  }
  v1[12] = v2;
  v8 = v1[13];
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  _Unwind_Resume(exception_object);
}

_QWORD *MeCab::scoped_ptr<MeCab::FreeList<mecab_path_t>>::~scoped_ptr(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24C09C118;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void MeCab::Viterbi::~Viterbi(void **this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  *this = &off_24C09C540;
  v2 = (char *)(this + 30);
  if (*((char *)this + 527) < 0)
    operator delete(this[63]);
  v3 = MEMORY[0x24BEDB800];
  v4 = *MEMORY[0x24BEDB800];
  this[30] = (void *)*MEMORY[0x24BEDB800];
  *(_QWORD *)&v2[*(_QWORD *)(v4 - 24)] = *(_QWORD *)(v3 + 24);
  this[31] = (void *)(MEMORY[0x24BEDB848] + 16);
  if (*((char *)this + 335) < 0)
    operator delete(this[39]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD06354](this + 44);
  v5 = this[23];
  if (v5)
  {
    this[24] = v5;
    operator delete(v5);
  }
  v6 = this[20];
  if (v6)
  {
    this[21] = v6;
    operator delete(v6);
  }
  v7 = this[17];
  if (v7)
  {
    this[18] = v7;
    operator delete(v7);
  }
  v8 = this[14];
  if (v8)
  {
    this[15] = v8;
    operator delete(v8);
  }
  this[12] = &off_24C09C118;
  v9 = this[13];
  if (v9)
    (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
}

{
  MeCab::Viterbi::~Viterbi(this);
  JUMPOUT(0x20BD0639CLL);
}

BOOL MeCab::Viterbi::open(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  float v8;
  int v9;
  _BOOL4 v10;
  uint64_t (*v11)(MeCab::Viterbi *);
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  std::vector<mecab_node_t *>::reserve((void **)(a1 + 136), 0x400uLL);
  std::vector<mecab_node_t *>::reserve((void **)(a1 + 112), 0x400uLL);
  v6 = *(_QWORD *)(a1 + 104);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 88) = MeCab::Param::get<BOOL>(a2, "allocate-sentence");
  v7 = MeCab::Param::get<int>(a2, "cost-factor");
  *(_DWORD *)(a1 + 72) = v7;
  if (v7 <= 0)
  {
    v13 = *(_QWORD *)(a1 + 240);
    v12 = (_QWORD *)(a1 + 240);
    std::ios_base::clear((std::ios_base *)((char *)v12 + *(_QWORD *)(v13 - 24)), 0);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/viterbi.cpp", 61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"(", 1);
    v15 = (_QWORD *)std::ostream::operator<<();
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)") [", 3);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"cost_factor_ > 0", 16);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"cost-factor is empty", 20);
  }
  else
  {
    v8 = MeCab::Param::get<double>(a2, "theta");
    *(double *)(a1 + 64) = (float)(v8 / (float)*(int *)(a1 + 72));
    v9 = MeCab::Param::get<int>(a2, "lattice-level");
    MeCab::Viterbi::set_lattice_level(a1, v9);
    *(_BYTE *)(a1 + 89) = MeCab::Param::get<BOOL>(a2, "partial");
    v10 = MeCab::Param::get<BOOL>(a2, "all-morphs");
    v11 = MeCab::Viterbi::buildBestLattice;
    if (v10)
      v11 = MeCab::Viterbi::buildAllLattice;
    *(_QWORD *)(a1 + 224) = v11;
    *(_QWORD *)(a1 + 232) = 0;
  }
  return v7 > 0;
}

void std::vector<mecab_node_t *>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<mecab_node_t *>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t MeCab::Viterbi::set_lattice_level(uint64_t this, int a2)
{
  _QWORD *v2;
  uint64_t v3;

  *(_DWORD *)(this + 56) = a2;
  *(_QWORD *)(this + 208) = MeCab::Viterbi::connectNormal;
  *(_QWORD *)(this + 216) = 0;
  if (a2 >= 1)
  {
    v2 = (_QWORD *)this;
    if (!*(_QWORD *)(this + 104))
    {
      v3 = operator new();
      *(_QWORD *)v3 = &off_24C09C580;
      *(_OWORD *)(v3 + 8) = 0u;
      *(_OWORD *)(v3 + 24) = 0u;
      *(_QWORD *)(v3 + 40) = 0;
      *(_QWORD *)(v3 + 48) = 2048;
      this = v2[13];
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      v2[13] = v3;
    }
    v2[26] = MeCab::Viterbi::connectWithAllPath;
    v2[27] = 0;
  }
  return this;
}

uint64_t MeCab::Viterbi::connectNormal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;

  if (!a3)
    return 1;
  v3 = a3;
  while (1)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * a2);
    if (!v6)
      break;
    v7 = 0;
    v8 = 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      v9 = *(_QWORD *)(v6 + 96);
      v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), v6, v3);
      if (v9 + v10 < v8)
      {
        v8 = v9 + v10;
        v7 = v6;
      }
      v6 = *(_QWORD *)(v6 + 16);
    }
    while (v6);
    if (!v7)
      break;
    *(_QWORD *)v3 = v7;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 96) = v8;
    v11 = *(unsigned __int16 *)(v3 + 82) + a2;
    v12 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(v3 + 16) = *(_QWORD *)(v12 + 8 * v11);
    *(_QWORD *)(v12 + 8 * v11) = v3;
    v3 = *(_QWORD *)(v3 + 24);
    if (!v3)
      return 1;
  }
  v15 = *(_QWORD *)(a1 + 240);
  v14 = (_QWORD *)(a1 + 240);
  std::ios_base::clear((std::ios_base *)((char *)v14 + *(_QWORD *)(v15 - 24)), 0);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/viterbisub.h", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"(", 1);
  v17 = (_QWORD *)std::ostream::operator<<();
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)") [", 3);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"bestNode", 8);
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"] ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"too long sentence.", 18);
  return 0;
}

uint64_t MeCab::Viterbi::connectWithAllPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v41;

  if (!a3)
    return 1;
  v3 = a3;
  v4 = a1;
  v39 = a2;
  while (1)
  {
    v5 = *(_QWORD **)(*(_QWORD *)(v4 + 112) + 8 * a2);
    if (!v5)
      break;
    v6 = 0;
    v7 = 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      v8 = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v4 + 16) + 24))(*(_QWORD *)(v4 + 16), v5, v3);
      v9 = v8;
      if (v5[12] + v8 < v7)
      {
        v7 = v5[12] + v8;
        v6 = v5;
      }
      v10 = *(_QWORD **)(v4 + 104);
      v11 = v10[5];
      v12 = v10[4];
      if (v12 == v10[6])
      {
        v12 = 0;
        ++v11;
        v10[4] = 0;
        v10[5] = v11;
      }
      v13 = v10[1];
      if (v11 == (v10[2] - v13) >> 3)
      {
        v14 = operator new[]();
        v15 = v14;
        v17 = (uint64_t *)v10[2];
        v16 = v10[3];
        if ((unint64_t)v17 >= v16)
        {
          v41 = v6;
          v19 = (_QWORD *)v10[1];
          v20 = v17 - v19;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 61)
            std::vector<mecab_node_t *>::__throw_length_error[abi:ne180100]();
          v22 = v16 - (_QWORD)v19;
          if (v22 >> 2 > v21)
            v21 = v22 >> 2;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
            v23 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          if (v23)
          {
            if (v23 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v24 = (char *)operator new(8 * v23);
          }
          else
          {
            v24 = 0;
          }
          v25 = (uint64_t *)&v24[8 * v20];
          *v25 = v15;
          v18 = v25 + 1;
          if (v17 != v19)
          {
            do
            {
              v26 = *--v17;
              *--v25 = v26;
            }
            while (v17 != v19);
            v17 = (uint64_t *)v10[1];
          }
          v10[1] = v25;
          v10[2] = v18;
          v10[3] = &v24[8 * v23];
          v6 = v41;
          if (v17)
            operator delete(v17);
          v4 = a1;
        }
        else
        {
          *v17 = v14;
          v18 = v17 + 1;
        }
        v10[2] = v18;
        v13 = v10[1];
        v12 = v10[4];
        v11 = v10[5];
      }
      v27 = *(_QWORD *)(v13 + 8 * v11);
      v10[4] = v12 + 1;
      v28 = (_QWORD *)(v27 + 32 * v12);
      v28[2] = 0;
      v28[3] = 0;
      *((_DWORD *)v28 + 6) = v9;
      *v28 = v3;
      v28[1] = 0;
      v28[1] = v5;
      v28[2] = *(_QWORD *)(v3 + 40);
      *(_QWORD *)(v3 + 40) = v28;
      v5[4] = v28;
      v5 = (_QWORD *)v5[2];
    }
    while (v5);
    a2 = v39;
    if (!v6)
      break;
    *(_QWORD *)v3 = v6;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 96) = v7;
    v29 = *(unsigned __int16 *)(v3 + 82) + v39;
    v30 = *(_QWORD *)(v4 + 112);
    *(_QWORD *)(v3 + 16) = *(_QWORD *)(v30 + 8 * v29);
    *(_QWORD *)(v30 + 8 * v29) = v3;
    v3 = *(_QWORD *)(v3 + 24);
    if (!v3)
      return 1;
  }
  v33 = *(_QWORD *)(v4 + 240);
  v32 = (_QWORD *)(v4 + 240);
  std::ios_base::clear((std::ios_base *)((char *)v32 + *(_QWORD *)(v33 - 24)), 0);
  v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/viterbisub.h", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"(", 1);
  v35 = (_QWORD *)std::ostream::operator<<();
  v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)") [", 3);
  v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"bestNode", 8);
  v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"] ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"too long sentence.", 18);
  return 0;
}

uint64_t MeCab::Viterbi::buildAllLattice(MeCab::Viterbi *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *i;

  v2 = (_QWORD *)*((_QWORD *)this + 3);
  v3 = (_QWORD *)*v2;
  if (*v2)
  {
    do
    {
      v3[1] = v2;
      v2 = v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  result = *((_QWORD *)this + 4);
  if (result)
  {
    v5 = *((_QWORD *)this + 6) - *((_QWORD *)this + 5);
    if (v5 >= 0)
    {
      v6 = 0;
      v7 = *((_QWORD *)this + 17);
      v8 = v5 + 1;
      v9 = result;
      do
      {
        for (i = *(uint64_t **)(v7 + 8 * v6); i; i = (uint64_t *)i[3])
        {
          *(_QWORD *)(v9 + 8) = i;
          *i = v9;
          v9 = (uint64_t)i;
        }
        ++v6;
      }
      while (v6 != v8);
    }
  }
  return result;
}

uint64_t MeCab::Viterbi::buildBestLattice(MeCab::Viterbi *this)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)*((_QWORD *)this + 3);
  v2 = (_QWORD *)*v1;
  if (*v1)
  {
    do
    {
      v2[1] = v1;
      v1 = v2;
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return *((_QWORD *)this + 4);
}

uint64_t MeCab::Viterbi::analyze(MeCab::Viterbi *this, char *a2, unint64_t a3)
{
  unint64_t v3;
  char *v4;
  char *v6;
  char **v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD *);
  uint64_t v12;
  _QWORD *v13;
  unint64_t v15;
  char *v16;

  v3 = a3;
  v4 = a2;
  v15 = a3;
  v16 = a2;
  if (!*((_BYTE *)this + 89) && *((_BYTE *)this + 88))
  {
    v6 = (char *)*((_QWORD *)this + 20);
    v7 = (char **)((char *)this + 160);
    v8 = *((_QWORD *)this + 21) - (_QWORD)v6;
    if (a3 + 1 <= v8)
    {
      if (a3 + 1 < v8)
        *((_QWORD *)this + 21) = &v6[a3 + 1];
    }
    else
    {
      std::vector<char>::__append((std::vector<char> *)((char *)this + 160), a3 + 1 - v8);
      v6 = *v7;
    }
    strncpy(v6, v4, v3);
    v4 = *v7;
    v16 = *v7;
  }
  std::vector<mecab_node_t *>::resize((uint64_t)this + 112, v3 + 4);
  std::vector<mecab_node_t *>::resize((uint64_t)this + 136, v3 + 4);
  bzero(*((void **)this + 14), 8 * v3 + 32);
  bzero(*((void **)this + 17), 8 * v3 + 32);
  v9 = *((_QWORD *)this + 1);
  *(_QWORD *)(v9 + 144) = 0;
  *(_QWORD *)(v9 + 152) = 0;
  *(_DWORD *)(v9 + 968) = 0;
  *((_QWORD *)this + 10) = 0;
  v10 = *((_QWORD *)this + 13);
  if (v10)
  {
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = 0;
  }
  if (*((_BYTE *)this + 89))
  {
    if (!MeCab::Viterbi::initConstraints(this, (const char **)&v16, &v15))
      return 0;
    v3 = v15;
    v4 = v16;
  }
  if (!MeCab::Viterbi::viterbi(this, v4, v3))
    return 0;
  v11 = (uint64_t (*)(_QWORD *))*((_QWORD *)this + 28);
  v12 = *((_QWORD *)this + 29);
  v13 = (_QWORD *)((char *)this + (v12 >> 1));
  if ((v12 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *))(*v13 + v11);
  return v11(v13);
}

void std::vector<mecab_node_t *>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<mecab_node_t *>::__append((void **)a1, a2 - v2);
  }
}

uint64_t MeCab::Viterbi::initConstraints(MeCab::Viterbi *this, const char **a2, unint64_t *a3)
{
  char *v6;
  char **v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  const char *v27;
  const char *v28;
  void (**v30)(MeCab::StringBuffer *__hidden);
  uint64_t v31;
  unint64_t v32;
  const char *v33;
  __int16 v34;
  void *__p;
  void *v36;
  uint64_t v37;
  void **p_p;

  v6 = (char *)*((_QWORD *)this + 23);
  v7 = (char **)((char *)this + 184);
  v8 = *a3;
  v9 = *((_QWORD *)this + 24) - (_QWORD)v6;
  if (v8 + 1 <= v9)
  {
    if (v8 + 1 < v9)
      *((_QWORD *)this + 24) = &v6[v8 + 1];
  }
  else
  {
    std::vector<char>::__append((std::vector<char> *)((char *)this + 184), v8 + 1 - v9);
    v6 = *v7;
    v8 = *a3;
  }
  v10 = strncpy(v6, *a2, v8);
  __p = 0;
  v36 = 0;
  v37 = 0;
  v30 = (void (**)(MeCab::StringBuffer *__hidden))v6;
  v11 = 0;
  v12 = &v6[strlen(v10)];
  while (1)
  {
    v13 = v12;
    if (v6 != v12)
    {
      while (*v6 != 10)
      {
        if (++v6 == v12)
        {
          v13 = v12;
          goto LABEL_11;
        }
      }
      v13 = v6;
    }
LABEL_11:
    *v13 = 0;
    p_p = &__p;
    std::back_insert_iterator<std::vector<char *>>::operator=[abi:ne180100](&p_p, &v30);
    ++v11;
    if (v13 == v12)
      break;
    v6 = v13 + 1;
    v30 = (void (**)(MeCab::StringBuffer *__hidden))(v13 + 1);
    if (v11 == 0xFFFF)
      goto LABEL_15;
  }
  if (v11 == 0xFFFF)
  {
LABEL_15:
    v15 = *((_QWORD *)this + 30);
    v14 = (_QWORD *)((char *)this + 240);
    std::ios_base::clear((std::ios_base *)((char *)v14 + *(_QWORD *)(v15 - 24)), 0);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/viterbi.cpp", 61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"(", 1);
    v17 = (_QWORD *)std::ostream::operator<<();
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)") [", 3);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"0xffff != lsize", 15);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"too long lines", 14);
    v21 = 0;
    goto LABEL_31;
  }
  v22 = (const char *)*((_QWORD *)this + 20);
  v23 = *a3 + 1;
  v24 = *((_QWORD *)this + 21) - (_QWORD)v22;
  if (v23 <= v24)
  {
    if (v23 < v24)
      *((_QWORD *)this + 21) = &v22[v23];
  }
  else
  {
    std::vector<char>::__append((std::vector<char> *)((char *)this + 160), v23 - v24);
    v22 = (const char *)*((_QWORD *)this + 20);
    v23 = *a3 + 1;
  }
  v30 = &off_24C09C1E0;
  v31 = 0;
  v32 = v23;
  v33 = v22;
  v34 = 0;
  if (MeCab::StringBuffer::reserve((MeCab::StringBuffer *)&v30, 1))
  {
    v25 = v31;
    v33[v31] = 32;
    v31 = v25 + 1;
  }
  v26 = MeCab::StringBuffer::reserve((MeCab::StringBuffer *)&v30, 1);
  v27 = v33;
  if (v26)
    v33[v31] = 0;
  if (HIBYTE(v34))
    v28 = 0;
  else
    v28 = v27;
  *a2 = v28;
  *a3 = 0;
  if ((_BYTE)v34 && v27)
    MEMORY[0x20BD06378](v27, 0x1000C8077774924);
  v21 = 1;
LABEL_31:
  if (__p)
  {
    v36 = __p;
    operator delete(__p);
  }
  return v21;
}

void sub_2083D221C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::Viterbi::viterbi(MeCab::Viterbi *this, const char *a2, uint64_t a3)
{
  MeCab::Viterbi *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  char *v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 **v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unsigned __int8 *i;
  int v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  _BYTE *v34;
  _BYTE *v35;
  int64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int8 **v39;
  uint64_t v40;
  unint64_t v41;
  unsigned __int8 *j;
  int v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  int v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  _BYTE *v50;
  _BYTE *v51;
  unint64_t v52;
  BOOL v53;
  unint64_t k;
  const char *v55;
  uint64_t (*v56)(_QWORD *, uint64_t, uint64_t);
  uint64_t v57;
  _QWORD *v58;
  uint64_t result;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  uint64_t (*v64)(_QWORD *, uint64_t, _QWORD, __n128);
  uint64_t v65;
  _QWORD *v66;
  MeCab::Viterbi *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *__dst;
  _OWORD v73[32];
  _OWORD v74[32];
  uint64_t v75;

  v5 = this;
  v75 = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)this + 1);
  MeCab::FreeList<mecab_node_t>::alloc((_QWORD *)(v6 + 112));
  *(_QWORD *)(v7 + 72) = *(_QWORD *)(v6 + 88);
  *(_BYTE *)(v7 + 91) = 2;
  *((_QWORD *)v5 + 4) = v7;
  *((_QWORD *)v5 + 5) = a2;
  *((_QWORD *)v5 + 6) = &a2[a3];
  *(_QWORD *)(v7 + 64) = a2;
  **((_QWORD **)v5 + 14) = v7;
  if (!a3)
    goto LABEL_85;
  v8 = 0;
  v67 = v5;
  v68 = a3;
  while (2)
  {
    if (!*(_QWORD *)(*((_QWORD *)v5 + 14) + 8 * v8))
      goto LABEL_84;
    v9 = MeCab::TokenizerImpl<mecab_node_t,mecab_path_t>::lookup(*((_QWORD *)v5 + 1), (unsigned __int8 *)(*((_QWORD *)v5 + 5) + v8), *((_QWORD *)v5 + 6));
    v10 = *((_QWORD *)v5 + 17);
    if (!*((_BYTE *)v5 + 89))
      goto LABEL_81;
    v11 = *(_QWORD *)(v10 + 8 * v8);
    if (!v11)
      goto LABEL_81;
    __dst = (char *)operator new[]();
    v71 = (char *)operator new[]();
    if (!v9)
      goto LABEL_80;
    v69 = v8;
    v70 = v11;
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = v13;
      v15 = v12;
      if (*(unsigned __int16 *)(v11 + 80) != *(unsigned __int16 *)(v9 + 80))
      {
LABEL_69:
        v13 = v14;
        goto LABEL_73;
      }
      v16 = *(const char **)(v11 + 72);
      if (strcmp(v16, "*"))
      {
        v17 = *(const char **)(v9 + 72);
        memset(v74, 0, sizeof(v74));
        memset(v73, 0, sizeof(v73));
        strncpy(__dst, v16, 0x2000uLL);
        v18 = v71;
        strncpy(v71, v17, 0x2000uLL);
        v19 = strlen(__dst);
        if (v19 < 1)
        {
          v20 = 0;
        }
        else
        {
          v20 = 0;
          v21 = (unint64_t)&__dst[v19];
          v22 = (unsigned __int8 **)v74;
          v23 = 512;
          v24 = __dst;
          do
          {
            v25 = v23;
            for (i = (unsigned __int8 *)v24; ; ++i)
            {
              v27 = *i;
              if (v27 != 9 && v27 != 32)
                break;
              ++v24;
            }
            if (v27 == 34)
            {
              v28 = ++i;
              v29 = i;
              if ((unint64_t)i < v21)
              {
                v28 = i;
                v29 = i;
                do
                {
                  v30 = *v29;
                  if (v30 == 34)
                  {
                    v31 = *++v29;
                    if (v31 != 34)
                      break;
                  }
                  *v28++ = v30;
                  ++v29;
                }
                while ((unint64_t)v29 < v21);
              }
              v32 = (unsigned __int8 *)memchr(v29, 44, v21 - (_QWORD)v29);
              if (v32)
                v33 = v32;
              else
                v33 = (unsigned __int8 *)v21;
            }
            else
            {
              v34 = memchr(i, 44, v21 - (_QWORD)v24);
              if (v34)
                v35 = v34;
              else
                v35 = (_BYTE *)v21;
              v33 = &i[v35 - v24];
              v28 = v33;
            }
            v23 = v25 - 1;
            if (v25 < 2)
            {
              *v22 = i;
              ++v20;
              if (v25 == 1)
                break;
            }
            else
            {
              *v28 = 0;
              *v22 = i;
              ++v20;
            }
            ++v22;
            v24 = (char *)(v33 + 1);
          }
          while ((unint64_t)(v33 + 1) < v21);
        }
        v36 = strlen(v71);
        if (v36 < 1)
        {
          v37 = 0;
        }
        else
        {
          v37 = 0;
          v38 = (unint64_t)&v71[v36];
          v39 = (unsigned __int8 **)v73;
          v40 = 512;
          do
          {
            v41 = v40;
            for (j = (unsigned __int8 *)v18; ; ++j)
            {
              v43 = *j;
              if (v43 != 9 && v43 != 32)
                break;
              ++v18;
            }
            if (v43 == 34)
            {
              v44 = ++j;
              v45 = j;
              if ((unint64_t)j < v38)
              {
                v44 = j;
                v45 = j;
                do
                {
                  v46 = *v45;
                  if (v46 == 34)
                  {
                    v47 = *++v45;
                    if (v47 != 34)
                      break;
                  }
                  *v44++ = v46;
                  ++v45;
                }
                while ((unint64_t)v45 < v38);
              }
              v48 = (unsigned __int8 *)memchr(v45, 44, v38 - (_QWORD)v45);
              if (v48)
                v49 = v48;
              else
                v49 = (unsigned __int8 *)v38;
            }
            else
            {
              v50 = memchr(j, 44, v38 - (_QWORD)v18);
              if (v50)
                v51 = v50;
              else
                v51 = (_BYTE *)v38;
              v49 = &j[v51 - v18];
              v44 = v49;
            }
            v40 = v41 - 1;
            if (v41 < 2)
            {
              *v39 = j;
              ++v37;
              if (v41 == 1)
                break;
            }
            else
            {
              *v44 = 0;
              *v39 = j;
              ++v37;
            }
            ++v39;
            v18 = (char *)(v49 + 1);
          }
          while ((unint64_t)(v49 + 1) < v38);
        }
        if (v37 >= v20)
          v52 = v20;
        else
          v52 = v37;
        if (v52)
        {
          v53 = 0;
          for (k = 0; k != v52; v53 = k >= v52)
          {
            v55 = (const char *)*((_QWORD *)v74 + k);
            if (strcmp(v55, "*") && strcmp(v55, *((const char **)v73 + k)))
              break;
            ++k;
          }
          v11 = v70;
          if (!v53)
            goto LABEL_69;
        }
        else
        {
          v11 = v70;
        }
      }
      v13 = v9;
      v12 = v9;
      if (!v14)
        goto LABEL_74;
      *(_QWORD *)(v14 + 24) = v9;
      v13 = v9;
LABEL_73:
      v12 = v15;
LABEL_74:
      v9 = *(_QWORD *)(v9 + 24);
    }
    while (v9);
    if (v12)
      v11 = v12;
    if (v13)
      *(_QWORD *)(v13 + 24) = 0;
    v5 = v67;
    a3 = v68;
    v8 = v69;
LABEL_80:
    MEMORY[0x20BD06378](v71, 0x1000C8077774924);
    MEMORY[0x20BD06378](__dst, 0x1000C8077774924);
    v10 = *((_QWORD *)v5 + 17);
    v9 = v11;
LABEL_81:
    *(_QWORD *)(v10 + 8 * v8) = v9;
    v56 = (uint64_t (*)(_QWORD *, uint64_t, uint64_t))*((_QWORD *)v5 + 26);
    v57 = *((_QWORD *)v5 + 27);
    v58 = (_QWORD *)((char *)v5 + (v57 >> 1));
    if ((v57 & 1) != 0)
      v56 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v58 + v56);
    result = v56(v58, v8, v9);
    if ((_DWORD)result)
    {
LABEL_84:
      if (++v8 == a3)
      {
LABEL_85:
        v60 = *((_QWORD *)v5 + 1);
        v61.n128_f64[0] = MeCab::FreeList<mecab_node_t>::alloc((_QWORD *)(v60 + 112));
        *(_QWORD *)(v62 + 72) = *(_QWORD *)(v60 + 88);
        *(_BYTE *)(v62 + 91) = 3;
        *((_QWORD *)v5 + 3) = v62;
        *(_QWORD *)(v62 + 64) = *((_QWORD *)v5 + 6);
        *(_QWORD *)(*((_QWORD *)v5 + 17) + 8 * a3) = v62;
        if (a3 < 0)
          return 1;
        while (!*(_QWORD *)(*((_QWORD *)v5 + 14) + 8 * a3))
        {
          if (a3-- <= 0)
            return 1;
        }
        v64 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, __n128))*((_QWORD *)v5 + 26);
        v65 = *((_QWORD *)v5 + 27);
        v66 = (_QWORD *)((char *)v5 + (v65 >> 1));
        if ((v65 & 1) != 0)
          v64 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, __n128))(*v66 + v64);
        return v64(v66, a3, *((_QWORD *)v5 + 3), v61);
      }
      continue;
    }
    return result;
  }
}

void sub_2083D2870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  MEMORY[0x20BD06378](a14, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void std::vector<mecab_node_t *>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::vector<char>::__append(std::vector<char> *this, std::vector<char>::size_type __n)
{
  char *value;
  char *end;
  std::vector<char>::pointer begin;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      bzero(this->__end_, __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v7 = end - this->__begin_;
    v8 = v7 + __n;
    if ((uint64_t)(v7 + __n) < 0)
      std::vector<mecab_node_t *>::__throw_length_error[abi:ne180100]();
    v9 = value - begin;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (char *)operator new(v10);
    else
      v11 = 0;
    v12 = &v11[v7];
    v13 = &v11[v10];
    bzero(v12, __n);
    if (end == begin)
    {
      v11 = v12;
    }
    else
    {
      v14 = &end[~(unint64_t)begin];
      do
      {
        v15 = *--end;
        (v14--)[(_QWORD)v11] = v15;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v11;
    this->__end_ = &v12[__n];
    this->__end_cap_.__value_ = v13;
    if (end)
      operator delete(end);
  }
}

void std::vector<mecab_node_t *>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<mecab_node_t *>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void MeCab::scoped_ptr<MeCab::FreeList<mecab_path_t>>::~scoped_ptr(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24C09C118;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD0639CLL);
}

void MeCab::FreeList<mecab_path_t>::~FreeList(_QWORD *a1)
{
  MeCab::FreeList<mecab_path_t>::~FreeList(a1);
  JUMPOUT(0x20BD0639CLL);
}

_QWORD *MeCab::FreeList<mecab_path_t>::~FreeList(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;

  *a1 = &off_24C09C580;
  a1[5] = 0;
  v4 = a1 + 1;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
    if (!v3)
      return a1;
    goto LABEL_7;
  }
  v5 = 0;
  do
  {
    if (v2[v5])
    {
      MEMORY[0x20BD06378](v2[v5], 0x1020C8055CCDE27);
      v5 = a1[5];
      v2 = (_QWORD *)a1[1];
      v3 = (_QWORD *)a1[2];
    }
    a1[5] = ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

double MeCab::FreeList<mecab_node_t>::alloc(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double result;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[4];
  if (v4 == v3)
  {
    v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  v5 = a1[1];
  v6 = (char **)(a1 + 1);
  if (v2 == (a1[2] - v5) >> 3)
  {
    is_mul_ok(v3, 0x68uLL);
    v7 = operator new[]();
    v8 = a1[3];
    v9 = (uint64_t *)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v6) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<mecab_node_t *>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*v6;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<marisa::grimoire::trie::Range *>>((uint64_t)(a1 + 3), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v7;
      v10 = v16 + 1;
      v19 = (char *)a1[1];
      v18 = (char *)a1[2];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = *v6;
      }
      a1[1] = v16;
      a1[2] = v10;
      a1[3] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    a1[2] = v10;
    v5 = a1[1];
    v4 = a1[4];
    v2 = a1[5];
  }
  v21 = *(_QWORD *)(v5 + 8 * v2);
  a1[4] = v4 + 1;
  v22 = v21 + 104 * v4;
  *(_QWORD *)(v22 + 96) = 0;
  result = 0.0;
  *(_OWORD *)(v22 + 64) = 0u;
  *(_OWORD *)(v22 + 80) = 0u;
  *(_OWORD *)(v22 + 32) = 0u;
  *(_OWORD *)(v22 + 48) = 0u;
  *(_OWORD *)v22 = 0u;
  *(_OWORD *)(v22 + 16) = 0u;
  return result;
}

MeCab::Connector *MeCab::Connector::Connector(MeCab::Connector *this)
{
  *(_QWORD *)this = &off_24C09C620;
  MeCab::Mmap<short>::Mmap((uint64_t)this + 8);
  *((_QWORD *)this + 44) = 0;
  *((_DWORD *)this + 90) = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this + 368);
  *((_QWORD *)this + 80) = 0;
  *((_QWORD *)this + 79) = 0;
  *((_QWORD *)this + 81) = 0;
  return this;
}

void sub_2083D2D90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MeCab::Mmap<short>::~Mmap(v1);
  _Unwind_Resume(a1);
}

void MeCab::Connector::~Connector(void **this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  *this = &off_24C09C620;
  v2 = (char *)(this + 1);
  MeCab::Mmap<char>::close((uint64_t)(this + 1));
  if (*((char *)this + 655) < 0)
    operator delete(this[79]);
  v3 = MEMORY[0x24BEDB800];
  v4 = *MEMORY[0x24BEDB800];
  this[46] = (void *)*MEMORY[0x24BEDB800];
  *(void **)((char *)this + *(_QWORD *)(v4 - 24) + 368) = *(void **)(v3 + 24);
  this[47] = (void *)(MEMORY[0x24BEDB848] + 16);
  if (*((char *)this + 463) < 0)
    operator delete(this[55]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD06354](this + 60);
  MeCab::Mmap<short>::~Mmap((uint64_t)v2);
}

{
  MeCab::Connector::~Connector(this);
  JUMPOUT(0x20BD0639CLL);
}

uint64_t MeCab::Connector::open(MeCab::Connector *this, const MeCab::Param *a2)
{
  std::string *v3;
  uint64_t v4;
  void *__p[2];
  char v7;
  std::string v8;
  std::string v9;

  MeCab::Param::get<std::string>((uint64_t)a2, "dicdir", &v8);
  std::string::basic_string[abi:ne180100]<0>(__p, "matrix.bin");
  MeCab::create_filename((uint64_t)&v8, (uint64_t)__p, &v9);
  if (v7 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = &v9;
  else
    v3 = (std::string *)v9.__r_.__value_.__r.__words[0];
  v4 = (**(uint64_t (***)(MeCab::Connector *, std::string *, const char *))this)(this, v3, "r");
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  return v4;
}

void sub_2083D2F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::Connector::open(MeCab::Connector *this, char *a2, const char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  const char *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  if ((MeCab::Mmap<short>::open((uint64_t)this + 8, a2, a3) & 1) != 0)
  {
    if (((*(uint64_t (**)(MeCab::Connector *, _QWORD, _QWORD))(*(_QWORD *)this + 8))(this, *((_QWORD *)this + 2), *((_QWORD *)this + 3)) & 1) != 0)return 1;
    std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 46) - 24) + 368), 0);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 46, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/connector.cpp", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"(", 1);
    v16 = (_QWORD *)std::ostream::operator<<();
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") [", 3);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"open(ptr, cmmap_.file_size())", 29);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"] ", 2);
    v14 = "open failed";
    v12 = 11;
  }
  else
  {
    std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 46) - 24) + 368), 0);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 46, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/connector.cpp", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") [", 3);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"cmmap_.open(filename, mode)", 27);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"] ", 2);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"cannot open: ", 13);
    v12 = strlen(a2);
    v13 = v11;
    v14 = a2;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v12);
  return 0;
}

uint64_t MeCab::Mmap<short>::open(uint64_t a1, char *a2, const char *a3)
{
  void **v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  const char *v14;
  uint64_t v15;
  int v16;
  int v17;
  size_t st_size;
  int v19;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  size_t v42;
  stat v44;

  MeCab::Mmap<char>::close(a1);
  std::string::basic_string[abi:ne180100]<0>(&v44, a2);
  v6 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)&v44.st_dev;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)&v44.st_uid;
  if (!strcmp(a3, "r"))
  {
    v16 = 0;
  }
  else
  {
    if (strcmp(a3, "r+"))
    {
      v8 = *(_QWORD *)(a1 + 48);
      v7 = (_QWORD *)(a1 + 48);
      std::ios_base::clear((std::ios_base *)((char *)v7 + *(_QWORD *)(v8 - 24)), 0);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/mmap.h", 56);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"(", 1);
      v10 = (_QWORD *)std::ostream::operator<<();
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"false", 5);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"] ", 2);
      v14 = "unknown open mode: ";
      v15 = 19;
LABEL_18:
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
      v42 = strlen(a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)a2, v42);
      return 0;
    }
    v16 = 2;
  }
  *(_DWORD *)(a1 + 340) = v16;
  v17 = open(a2, v16);
  *(_DWORD *)(a1 + 336) = v17;
  if (v17 < 0)
  {
    v24 = *(_QWORD *)(a1 + 48);
    v23 = (_QWORD *)(a1 + 48);
    std::ios_base::clear((std::ios_base *)((char *)v23 + *(_QWORD *)(v24 - 24)), 0);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/mmap.h", 56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(", 1);
    v26 = (_QWORD *)std::ostream::operator<<();
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)") [", 3);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"(fd = ::open(filename, flag | O_BINARY)) >= 0", 45);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"] ", 2);
    v14 = "open failed: ";
    v15 = 13;
    goto LABEL_18;
  }
  if (fstat(v17, &v44) < 0)
  {
    v30 = *(_QWORD *)(a1 + 48);
    v29 = (_QWORD *)(a1 + 48);
    std::ios_base::clear((std::ios_base *)((char *)v29 + *(_QWORD *)(v30 - 24)), 0);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/mmap.h", 56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
    v32 = (_QWORD *)std::ostream::operator<<();
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)") [", 3);
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"::fstat(fd, &st) >= 0", 21);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"] ", 2);
    v14 = "failed to get file size: ";
    v15 = 25;
    goto LABEL_18;
  }
  st_size = v44.st_size;
  *(_QWORD *)(a1 + 16) = v44.st_size;
  if (*(_DWORD *)(a1 + 340) == 2)
    v19 = 3;
  else
    v19 = 1;
  v20 = mmap(0, st_size, v19, 1, *(_DWORD *)(a1 + 336), 0);
  if (v20 == (void *)-1)
  {
    v36 = *(_QWORD *)(a1 + 48);
    v35 = (_QWORD *)(a1 + 48);
    std::ios_base::clear((std::ios_base *)((char *)v35 + *(_QWORD *)(v36 - 24)), 0);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/mmap.h", 56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"(", 1);
    v38 = (_QWORD *)std::ostream::operator<<();
    v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)") [", 3);
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"(p = reinterpret_cast<char *> (::mmap(0, length, prot, MAP_SHARED, fd, 0))) != MAP_FAILED", 89);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"] ", 2);
    v14 = "mmap() failed: ";
    v15 = 15;
    goto LABEL_18;
  }
  v21 = v20;
  v22 = 1;
  madvise(v20, *(_QWORD *)(a1 + 16), 1);
  *(_QWORD *)(a1 + 8) = v21;
  close(*(_DWORD *)(a1 + 336));
  *(_DWORD *)(a1 + 336) = -1;
  return v22;
}

uint64_t MeCab::Connector::open(MeCab::Connector *this, const char *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  if (a2)
  {
    v3 = *(unsigned __int16 *)a2;
    *((_WORD *)this + 180) = v3;
    v4 = *((unsigned __int16 *)a2 + 1);
    *((_WORD *)this + 181) = v4;
    if (2 * v3 * (unint64_t)v4 + 4 == a3)
    {
      *((_QWORD *)this + 44) = a2 + 4;
      return 1;
    }
    v14 = (_QWORD *)((char *)this + 368);
    std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 46) - 24) + 368), 0);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/connector.cpp", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"(", 1);
    v16 = (_QWORD *)std::ostream::operator<<();
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") [", 3);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"length == offset + lsize_ * rsize_ * sizeof(short)", 50);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"] ", 2);
    v12 = "invalid binary image size";
    v13 = 25;
  }
  else
  {
    v6 = (_QWORD *)((char *)this + 368);
    std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 46) - 24) + 368), 0);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/connector.cpp", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"(", 1);
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") [", 3);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ptr", 3);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
    v12 = "image is null";
    v13 = 13;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
  return 0;
}

void *MeCab::Connector::close(MeCab::Connector *this)
{
  return MeCab::Mmap<char>::close((uint64_t)this + 8);
}

BOOL MeCab::Connector::openText(MeCab::Connector *this, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  const std::ios_base *v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  size_t v16;
  const std::locale::facet *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t i;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  size_t v29;
  const char **v30;
  const char **v32;
  const char **v33;
  uint64_t v34;
  const char ***v35;
  std::locale v36;
  char __s[8192];
  _QWORD v38[2];
  uint64_t v39;
  _QWORD v40[20];

  v4 = MEMORY[0x24BDAC7A8](this, a2, a3, a4);
  v6 = v5;
  v7 = v4;
  v40[19] = *MEMORY[0x24BDAC8D0];
  std::ifstream::basic_ifstream(v38);
  v8 = (const std::ios_base *)((char *)v38 + *(_QWORD *)(v38[0] - 24));
  v9 = v8->__rdstate_ & 5;
  if (v9)
  {
    std::ios_base::clear((std::ios_base *)(v7 + 368 + *(_QWORD *)(*(_QWORD *)(v7 + 368) - 24)), 0);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(v7 + 368), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/connector.cpp", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
    v11 = (_QWORD *)std::ostream::operator<<();
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)") [", 3);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ifs", 3);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"] ", 2);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"no such file or directory: ", 27);
    v16 = strlen(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v6, v16);
  }
  else
  {
    v32 = 0;
    v33 = 0;
    v34 = 0;
    std::ios_base::getloc(v8);
    v17 = std::locale::use_facet(&v36, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(&v36);
    v18 = __s;
    std::istream::getline();
    v36.__locale_ = (std::locale::__imp *)__s;
    v19 = 0;
    v20 = &__s[strlen(__s)];
    do
    {
      v21 = v20;
      if (v18 != v20)
      {
        while (2)
        {
          for (i = 0; i != 2; ++i)
          {
            if (*v18 == asc_2083E09B2[i])
            {
              v21 = v18;
              goto LABEL_11;
            }
          }
          if (++v18 != v20)
            continue;
          break;
        }
        v21 = v20;
      }
LABEL_11:
      *v21 = 0;
      if (*(_BYTE *)v36.__locale_)
      {
        v35 = &v32;
        std::back_insert_iterator<std::vector<char *>>::operator=[abi:ne180100]((void ***)&v35, &v36);
        ++v19;
      }
      if (v21 == v20)
        break;
      v18 = v21 + 1;
      v36.__locale_ = (std::locale::__imp *)(v21 + 1);
    }
    while (v19 < 2);
    if (v19 != 2)
    {
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/connector.cpp", 63);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"(", 1);
      v24 = (_QWORD *)std::ostream::operator<<();
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"tokenize2(buf, \"\\t \", std::back_inserter(column), 2) == 2", 57);
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"] ", 2);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"format error: ", 14);
      v29 = strlen(__s);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)__s, v29);
      MeCab::die::~die((MeCab::die *)&v36);
    }
    v30 = v32;
    *(_WORD *)(v7 + 360) = atoi(*v32);
    *(_WORD *)(v7 + 362) = atoi(v30[1]);
    v33 = v30;
    operator delete(v30);
  }
  v38[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v38 + *(_QWORD *)(v38[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x20BD061F8](&v39);
  std::istream::~istream();
  MEMORY[0x20BD06354](v40);
  return v9 == 0;
}

void sub_2083D3928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13)
{
  if (__p)
    operator delete(__p);
  std::ifstream::~ifstream(&STACK[0x2028]);
  _Unwind_Resume(a1);
}

uint64_t MeCab::Connector::compile(MeCab::Connector *this, const char *a2, const char *a3, uint64_t a4)
{
  uint64_t v4;
  const char *v5;
  const char *v6;
  const char *v7;
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  size_t v22;
  const std::locale::facet *v23;
  void **v24;
  unint64_t v25;
  void **v26;
  void **v27;
  uint64_t i;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  size_t v35;
  uint64_t v36;
  unsigned __int16 v37;
  int v38;
  size_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  const std::locale::facet *v48;
  const std::locale::facet *v49;
  _QWORD *v50;
  void **v51;
  unint64_t v52;
  void **v53;
  void **v54;
  uint64_t j;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  size_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  __int16 v66;
  int v67;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD v75[12];
  char v76;
  uint64_t v77;
  unsigned __int16 v78;
  _WORD v79[5];
  uint64_t v80;
  uint64_t v81;
  void **v82;
  std::locale v83;
  uint64_t v84;
  _BYTE v85[408];
  uint64_t v86;
  _QWORD v87[2];
  _BYTE v88[408];
  uint64_t v89;
  void *__p[2];
  char v91;
  uint64_t v92;

  v4 = MEMORY[0x24BDAC7A8](this, a2, a3, a4);
  v6 = v5;
  v7 = (const char *)v4;
  v92 = *MEMORY[0x24BDAC8D0];
  std::ifstream::basic_ifstream(v87);
  std::string::basic_string[abi:ne180100]<0>(__p, "1 1\n0 0 0\n");
  std::istringstream::basic_istringstream[abi:ne180100](v75, (__int128 *)__p, 8);
  if (v91 < 0)
    operator delete(__p[0]);
  v8 = v87;
  if ((v88[*(_QWORD *)(v87[0] - 24) + 16] & 5) != 0)
  {
    v9 = strlen(v7);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)v7, v9);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" is not found. minimum setting is used.", 39);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
    v12 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale((std::locale *)__p);
    std::ostream::put();
    std::ostream::flush();
    v8 = v75;
  }
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"reading ", 8);
  v14 = strlen(v7);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v7, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" ... ", 5);
  std::ofstream::basic_ofstream(&v84);
  if ((v85[*(_QWORD *)(v84 - 24) + 24] & 5) != 0)
  {
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/connector.cpp", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"(", 1);
    v17 = (_QWORD *)std::ostream::operator<<();
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)") [", 3);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"ofs", 3);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"] ", 2);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"permission denied: ", 19);
    v22 = strlen(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v6, v22);
    MeCab::die::~die((MeCab::die *)__p);
  }
  *(_QWORD *)&v79[1] = 0;
  v80 = 0;
  v81 = 0;
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
  v23 = std::locale::use_facet(&v83, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
  std::locale::~locale(&v83);
  v24 = __p;
  std::istream::getline();
  v83.__locale_ = (std::locale::__imp *)__p;
  v25 = 0;
  v26 = (void **)((char *)__p + strlen((const char *)__p));
  do
  {
    v27 = v26;
    if (v24 != v26)
    {
      while (2)
      {
        for (i = 0; i != 2; ++i)
        {
          if (*(unsigned __int8 *)v24 == asc_2083E09B2[i])
          {
            v27 = v24;
            goto LABEL_15;
          }
        }
        v24 = (void **)((char *)v24 + 1);
        if (v24 != v26)
          continue;
        break;
      }
      v27 = v26;
    }
LABEL_15:
    *(_BYTE *)v27 = 0;
    if (*(_BYTE *)v83.__locale_)
    {
      v82 = (void **)&v79[1];
      std::back_insert_iterator<std::vector<char *>>::operator=[abi:ne180100](&v82, &v83);
      ++v25;
    }
    if (v27 == v26)
      break;
    v24 = (void **)((char *)v27 + 1);
    v83.__locale_ = (std::locale::__imp *)((char *)v27 + 1);
  }
  while (v25 < 2);
  if (v25 != 2)
  {
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/connector.cpp", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"(", 1);
    v30 = (_QWORD *)std::ostream::operator<<();
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)") [", 3);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"tokenize2(buf, \"\\t \", std::back_inserter(column), 2) == 2", 57);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"] ", 2);
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"format error: ", 14);
    v35 = strlen((const char *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)__p, v35);
    MeCab::die::~die((MeCab::die *)&v83);
  }
  v36 = *(_QWORD *)&v79[1];
  v37 = atoi(**(const char ***)&v79[1]);
  v79[0] = v37;
  v78 = atoi(*(const char **)(v36 + 8));
  v38 = v78 * v37;
  if (v38)
  {
    v39 = (2 * v38);
    v40 = (char *)operator new(v39);
    bzero(v40, v39);
    v41 = &v40[v39];
  }
  else
  {
    v40 = 0;
    v41 = 0;
  }
  v42 = v41 - v40;
  v43 = v42 == 1;
  if (v42 >= 1)
  {
    v44 = (unint64_t)v42 >> 1;
    v45 = !v43;
    bzero(v40, 2 * (v44 - v45) + 2);
  }
  v46 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"x", 1);
  v47 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v47 + *(_QWORD *)(*v47 - 24)));
  v48 = std::locale::use_facet(&v83, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v48->__vftable[2].~facet_0)(v48, 10);
  std::locale::~locale(&v83);
  std::ostream::put();
  std::ostream::flush();
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
    v49 = std::locale::use_facet(&v83, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10);
    std::locale::~locale(&v83);
    v50 = (_QWORD *)std::istream::getline();
    if ((*((_BYTE *)v50 + *(_QWORD *)(*v50 - 24) + 32) & 5) != 0)
      break;
    v80 = *(_QWORD *)&v79[1];
    v51 = __p;
    v83.__locale_ = (std::locale::__imp *)__p;
    v52 = 0;
    v53 = (void **)((char *)__p + strlen((const char *)__p));
    do
    {
      v54 = v53;
      if (v51 != v53)
      {
        while (2)
        {
          for (j = 0; j != 2; ++j)
          {
            if (*(unsigned __int8 *)v51 == asc_2083E09B2[j])
            {
              v54 = v51;
              goto LABEL_39;
            }
          }
          v51 = (void **)((char *)v51 + 1);
          if (v51 != v53)
            continue;
          break;
        }
        v54 = v53;
      }
LABEL_39:
      *(_BYTE *)v54 = 0;
      if (*(_BYTE *)v83.__locale_)
      {
        v82 = (void **)&v79[1];
        std::back_insert_iterator<std::vector<char *>>::operator=[abi:ne180100](&v82, &v83);
        ++v52;
      }
      if (v54 == v53)
        break;
      v51 = (void **)((char *)v54 + 1);
      v83.__locale_ = (std::locale::__imp *)((char *)v54 + 1);
    }
    while (v52 < 3);
    if (v52 != 3)
    {
      v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/connector.cpp", 63);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"(", 1);
      v57 = (_QWORD *)std::ostream::operator<<();
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)") [", 3);
      v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"tokenize2(buf, \"\\t \", std::back_inserter(column), 3) == 3", 57);
      v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"] ", 2);
      v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"format error: ", 14);
      v62 = strlen((const char *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)__p, v62);
      MeCab::die::~die((MeCab::die *)&v83);
    }
    v63 = *(_QWORD *)&v79[1];
    v64 = atoi(**(const char ***)&v79[1]);
    v65 = atoi(*(const char **)(v63 + 8));
    v66 = atoi(*(const char **)(v63 + 16));
    v67 = v79[0];
    if (v64 >= v79[0] || v65 >= v78)
    {
      v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/connector.cpp", 63);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"(", 1);
      v70 = (_QWORD *)std::ostream::operator<<();
      v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)") [", 3);
      v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"l < lsize && r < rsize", 22);
      v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"index values are out of range", 29);
      MeCab::die::~die((MeCab::die *)&v83);
    }
    MeCab::progress_bar((MeCab *)"emitting matrix      ", (const char *)(v64 + 1), v79[0]);
    *(_WORD *)&v40[2 * v64 + 2 * v67 * (uint64_t)(int)v65] = v66;
  }
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  if (v40)
    operator delete(v40);
  if (*(_QWORD *)&v79[1])
  {
    v80 = *(_QWORD *)&v79[1];
    operator delete(*(void **)&v79[1]);
  }
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)&v85[*(_QWORD *)(v84 - 24) - 8], *(_DWORD *)&v85[*(_QWORD *)(v84 - 24) + 24] | 4);
  v84 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)&v85[*(_QWORD *)(v84 - 24) - 8] = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x20BD061F8](v85);
  std::ostream::~ostream();
  MEMORY[0x20BD06354](&v86);
  v75[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v75 + *(_QWORD *)(v75[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v75[2] = MEMORY[0x24BEDB848] + 16;
  if (v76 < 0)
    operator delete((void *)v75[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x20BD06354](&v77);
  v87[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v87 + *(_QWORD *)(v87[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x20BD061F8](v88);
  std::istream::~istream();
  MEMORY[0x20BD06354](&v89);
  return 1;
}

void sub_2083D428C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,uint64_t a48,std::locale a49,uint64_t a50)
{
  if (__p)
  {
    a46 = (uint64_t)__p;
    operator delete(__p);
  }
  std::ofstream::~ofstream(&a50);
  std::istringstream::~istringstream((uint64_t)&a10);
  std::ifstream::~ifstream(&STACK[0x380]);
  _Unwind_Resume(a1);
}

uint64_t MeCab::Connector::cost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(__int16 *)(a3 + 92)
                      + *(__int16 *)(*(_QWORD *)(a1 + 352)
                                   + 2
                                   * (*(unsigned __int16 *)(a2 + 84)
                                    + *(unsigned __int16 *)(a3 + 86) * (unint64_t)*(unsigned __int16 *)(a1 + 360))));
}

uint64_t MeCab::Connector::get_connect_cost(MeCab::Connector *this, int a2, int a3)
{
  return *(__int16 *)(*((_QWORD *)this + 44) + 2 * (a2 + *((unsigned __int16 *)this + 180) * a3));
}

uint64_t MeCab::Mmap<short>::Mmap(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C09C4A0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 48);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = -1;
  return a1;
}

void sub_2083D4418(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void MeCab::Mmap<short>::~Mmap(uint64_t a1)
{
  MeCab::Mmap<short>::~Mmap(a1);
  JUMPOUT(0x20BD0639CLL);
}

uint64_t MeCab::Mmap<short>::~Mmap(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24C09C4A0;
  MeCab::Mmap<char>::close(a1);
  if (*(char *)(a1 + 335) < 0)
    operator delete(*(void **)(a1 + 312));
  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 48) = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + 48 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 56) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x20BD06354](a1 + 160);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t MeCab::decode_charset(MeCab *this, const char *a2)
{
  unint64_t v2;
  _BOOL4 v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *p_p;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int16 *v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  _DWORD *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  unsigned __int16 *v22;
  int v23;
  unsigned __int8 *v25;
  uint64_t v27;
  unint64_t v29;
  _WORD *v30;
  uint64_t v32;
  const void *v33;
  _BYTE *v34;
  void *__p;
  unint64_t v39;
  unsigned __int8 v40;

  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)this);
  v2 = v40;
  v3 = (v40 & 0x80u) != 0;
  v4 = v39;
  if ((v40 & 0x80u) == 0)
    v5 = v40;
  else
    v5 = v39;
  if (v5)
  {
    v6 = 0;
    do
    {
      if (v3)
        p_p = __p;
      else
        p_p = &__p;
      v8 = p_p[v6];
      if ((v8 - 65) <= 0x19)
      {
        p_p[v6] = v8 + 32;
        v2 = v40;
        v4 = v39;
      }
      ++v6;
      v3 = (v2 & 0x80u) != 0;
      if ((v2 & 0x80u) == 0)
        v9 = v2;
      else
        v9 = v4;
    }
    while (v6 < v9);
  }
  if (v3)
    v10 = v4;
  else
    v10 = v2;
  switch(v10)
  {
    case 3uLL:
      v14 = !v3;
      v11 = (unsigned __int16 *)&__p;
      if (!v14)
        v11 = (unsigned __int16 *)__p;
      v12 = *v11;
      v13 = *((unsigned __int8 *)v11 + 2);
      v14 = v12 == 30053;
      v15 = 99;
      goto LABEL_32;
    case 4uLL:
      v14 = !v3;
      v16 = &__p;
      if (!v14)
        v16 = __p;
      if (*v16 == 1936288371)
        goto LABEL_64;
      goto LABEL_49;
    case 5uLL:
      v14 = !v3;
      v17 = (unsigned __int8 *)&__p;
      if (!v14)
        v17 = (unsigned __int8 *)__p;
      v18 = *(_DWORD *)v17;
      v19 = v17[4];
      v20 = v18 == 859402339;
      v21 = 50;
      goto LABEL_45;
    case 6uLL:
      v14 = !v3;
      v22 = (unsigned __int16 *)&__p;
      if (!v14)
        v22 = (unsigned __int16 *)__p;
      v23 = *(_DWORD *)v22;
      v13 = v22[2];
      v14 = v23 == 1600353637;
      v15 = 28778;
LABEL_32:
      if (!v14 || v13 != v15)
        goto LABEL_49;
      goto LABEL_65;
    case 9uLL:
      v14 = !v3;
      v25 = (unsigned __int8 *)&__p;
      if (!v14)
        v25 = (unsigned __int8 *)__p;
      v21 = 115;
      if (*(_QWORD *)v25 == 0x696A2D7466696873 && v25[8] == 115)
        goto LABEL_64;
      v27 = *(_QWORD *)v25;
      v19 = v25[8];
      v20 = v27 == 0x696A5F7466696873;
LABEL_45:
      if (v20 && v19 == v21)
      {
LABEL_64:
        v32 = 1;
        goto LABEL_90;
      }
LABEL_49:
      if ((v2 & 0x80u) == 0)
        v29 = v2;
      else
        v29 = v4;
      if (v29 != 4)
      {
        if (v29 != 5)
        {
          if (v29 == 6)
          {
            if ((v2 & 0x80u) == 0)
              v30 = &__p;
            else
              v30 = __p;
            if (*(_DWORD *)v30 == 761492837 && v30[2] == 28778)
            {
LABEL_65:
              v32 = 0;
              goto LABEL_90;
            }
            if (!memcmp(v30, "utf_16", 6uLL))
              goto LABEL_84;
          }
          goto LABEL_83;
        }
        if ((v2 & 0x80u) == 0)
          v34 = &__p;
        else
          v34 = __p;
        if (memcmp(v34, "utf_8", 5uLL))
        {
          if (*(_DWORD *)v34 != 761689205 || v34[4] != 56)
          {
            if (*(_DWORD *)v34 == 828798069 && v34[4] == 54)
              goto LABEL_84;
            goto LABEL_83;
          }
        }
LABEL_89:
        v32 = 2;
        goto LABEL_90;
      }
      if ((v2 & 0x80u) == 0)
        v33 = &__p;
      else
        v33 = __p;
      if (!memcmp(v33, "utf8", 4uLL))
        goto LABEL_89;
LABEL_83:
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p, "utf-16"))
      {
LABEL_84:
        v32 = 3;
        goto LABEL_90;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p, "utf16be")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p, "utf_16be")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p, "utf-16be"))
      {
        v32 = 5;
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p, "utf16le")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p, "utf_16le")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p, "utf-16le"))
      {
        v32 = 4;
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p, "ascii"))
      {
        v32 = 6;
      }
      else
      {
        v32 = 2;
      }
LABEL_90:
      if ((char)v40 < 0)
        operator delete(__p);
      return v32;
    default:
      goto LABEL_49;
  }
}

std::string *MeCab::create_filename@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type size;
  std::string *v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;

  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
  {
    size = a3->__r_.__value_.__l.__size_;
    if (!size)
      goto LABEL_13;
  }
  else
  {
    if (!*((_BYTE *)&a3->__r_.__value_.__s + 23))
      goto LABEL_13;
    size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  }
  if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = a3;
  else
    v6 = (std::string *)a3->__r_.__value_.__r.__words[0];
  if (v6->__r_.__value_.__s.__data_[size - 1] != 47)
    std::string::push_back(a3, 47);
LABEL_13:
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = (const std::string::value_type *)a2;
  else
    v8 = *(const std::string::value_type **)a2;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  return std::string::append(a3, v8, v9);
}

void sub_2083D4978(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

double MeCab::remove_pathname(std::string *__str)
{
  std::string *v1;
  std::string::size_type size;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  std::string v7;
  char v8;

  v1 = __str;
  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    v3 = LODWORD(__str->__r_.__value_.__r.__words[1]);
  else
    v3 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((int)v3 < 1)
  {
LABEL_10:
    if ((size & 0x80) != 0)
    {
      __str->__r_.__value_.__l.__size_ = 1;
      v1 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    else
    {
      *((_BYTE *)&__str->__r_.__value_.__s + 23) = 1;
    }
    LOWORD(v1->__r_.__value_.__l.__data_) = 46;
    return result;
  }
  while (1)
  {
    v4 = v3 - 1;
    v5 = (v3 - 1);
    if ((size & 0x80) != 0)
      break;
    if (__str->__r_.__value_.__s.__data_[v5] == 47)
      goto LABEL_15;
LABEL_9:
    --v3;
    if ((unint64_t)(v4 + 1) <= 1)
      goto LABEL_10;
  }
  if (*(_BYTE *)(__str->__r_.__value_.__r.__words[0] + v5) != 47)
    goto LABEL_9;
  size = __str->__r_.__value_.__l.__size_;
LABEL_15:
  std::string::basic_string(&v7, __str, v3, size - v5, (std::allocator<char> *)&v8);
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1->__r_.__value_.__l.__data_);
  result = *(double *)&v7.__r_.__value_.__l.__data_;
  *v1 = v7;
  return result;
}

void MeCab::enum_csv_dictionaries(char *a1, uint64_t a2)
{
  DIR *v4;
  DIR *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  size_t v12;
  dirent *v13;
  std::string::size_type size;
  std::string::size_type v15;
  _BOOL4 v16;
  std::string::size_type v17;
  std::string::size_type v18;
  std::string::size_type v19;
  std::string *v20;
  int v21;
  std::string::size_type v22;
  std::string *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  std::string *v31;
  std::string *v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  __n128 *v36;
  void **v37;
  const std::nothrow_t *v38;
  unint64_t v39;
  __n128 *v40;
  BOOL v41;
  __n128 *v42;
  void *v43[2];
  char v44;
  std::string __p;
  std::string v46;
  std::string __str;
  std::__split_buffer<std::string> __v;

  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)a2);
  v4 = opendir(a1);
  v5 = v4;
  if (!v4)
  {
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/utils.cpp", 59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") [", 3);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"dir", 3);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"] ", 2);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"no such directory: ", 19);
    v12 = strlen(a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)a1, v12);
    MeCab::die::~die((MeCab::die *)&__v);
  }
  v13 = readdir(v4);
  if (v13)
  {
    while (1)
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, v13->d_name);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        size = __str.__r_.__value_.__l.__size_;
        if (__str.__r_.__value_.__l.__size_ <= 4)
          goto LABEL_31;
      }
      else
      {
        size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if (HIBYTE(__str.__r_.__value_.__r.__words[2]) <= 4u)
          goto LABEL_32;
      }
      std::string::basic_string(&v46, &__str, size - 4, 4uLL, (std::allocator<char> *)&__v);
      v15 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      v16 = (v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      v17 = v46.__r_.__value_.__l.__size_;
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      else
        v18 = v46.__r_.__value_.__l.__size_;
      if (v18)
      {
        v19 = 0;
        do
        {
          if (v16)
            v20 = (std::string *)v46.__r_.__value_.__r.__words[0];
          else
            v20 = &v46;
          v21 = v20->__r_.__value_.__s.__data_[v19];
          if ((v21 - 65) <= 0x19)
          {
            v20->__r_.__value_.__s.__data_[v19] = v21 + 32;
            v15 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
            v17 = v46.__r_.__value_.__l.__size_;
          }
          ++v19;
          v16 = (v15 & 0x80u) != 0;
          if ((v15 & 0x80u) == 0)
            v22 = v15;
          else
            v22 = v17;
        }
        while (v19 < v22);
      }
      if (!v16)
        v17 = v15;
      if (v17 != 4)
        break;
      v23 = (std::string *)v46.__r_.__value_.__r.__words[0];
      if (!v16)
        v23 = &v46;
      if (LODWORD(v23->__r_.__value_.__l.__data_) != 1987273518)
        break;
      std::string::basic_string[abi:ne180100]<0>(v43, a1);
      MeCab::create_filename((uint64_t)v43, (uint64_t)&__str, &__p);
      v24 = *(_QWORD *)(a2 + 8);
      v25 = *(_QWORD *)(a2 + 16);
      if (v24 >= v25)
      {
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - *(_QWORD *)a2) >> 3);
        v28 = v27 + 1;
        if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<char *>::__throw_length_error[abi:ne180100]();
        v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *(_QWORD *)a2) >> 3);
        if (2 * v29 > v28)
          v28 = 2 * v29;
        if (v29 >= 0x555555555555555)
          v30 = 0xAAAAAAAAAAAAAAALL;
        else
          v30 = v28;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
        if (v30)
          v31 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v30);
        else
          v31 = 0;
        v32 = v31 + v27;
        __v.__first_ = v31;
        __v.__begin_ = v32;
        __v.__end_cap_.__value_ = &v31[v30];
        v33 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v32->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v32 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
        v34 = *(_QWORD *)(a2 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v35 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(_QWORD *)(a2 + 8) = v34;
        if (v35 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v26 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v24 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v24 = v26;
        memset(&__p, 0, sizeof(__p));
        *(_QWORD *)(a2 + 8) = v24 + 24;
      }
      if (v44 < 0)
        operator delete(v43[0]);
      if ((*((_BYTE *)&v46.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_29;
LABEL_30:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
LABEL_31:
        operator delete(__str.__r_.__value_.__l.__data_);
LABEL_32:
      v13 = readdir(v5);
      if (!v13)
        goto LABEL_51;
    }
    if ((v15 & 0x80) == 0)
      goto LABEL_30;
LABEL_29:
    operator delete(v46.__r_.__value_.__l.__data_);
    goto LABEL_30;
  }
LABEL_51:
  closedir(v5);
  v37 = *(void ***)a2;
  v36 = *(__n128 **)(a2 + 8);
  if ((char *)v36 - (char *)v37 < 1)
  {
LABEL_55:
    v42 = 0;
    v39 = 0;
  }
  else
  {
    v38 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v39 = 0xAAAAAAAAAAAAAAABLL * (((char *)v36 - (char *)v37) >> 3);
    while (1)
    {
      v40 = (__n128 *)operator new(24 * v39, v38);
      if (v40)
        break;
      v41 = v39 > 1;
      v39 >>= 1;
      if (!v41)
        goto LABEL_55;
    }
    v42 = v40;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::string *>>(v37, v36, 0xAAAAAAAAAAAAAAABLL * (((char *)v36 - (char *)v37) >> 3), v42, v39);
  if (v42)
    operator delete(v42);
}

void sub_2083D4E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,std::__split_buffer<std::string> *a34)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::escape_csv_element(std::string *a1)
{
  unint64_t i;
  unint64_t v3;
  std::string *v4;
  std::string *v5;
  std::string __str;

  if (std::string::find(a1, 44, 0) != -1 || std::string::find(a1, 34, 0) != -1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "\"");
    for (i = 0; ; ++i)
    {
      v3 = SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0
         ? a1->__r_.__value_.__l.__size_
         : HIBYTE(a1->__r_.__value_.__r.__words[2]);
      if (i >= v3)
        break;
      v4 = a1;
      if ((*((_BYTE *)&a1->__r_.__value_.__s + 23) & 0x80) != 0)
        v4 = (std::string *)a1->__r_.__value_.__r.__words[0];
      if (v4->__r_.__value_.__s.__data_[i] == 34)
        std::string::push_back(&__str, 34);
      v5 = a1;
      if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
        v5 = (std::string *)a1->__r_.__value_.__r.__words[0];
      std::string::push_back(&__str, v5->__r_.__value_.__s.__data_[i]);
    }
    std::string::push_back(&__str, 34);
    std::string::operator=(a1, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_2083D4FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::progress_bar(MeCab *this, const char *a2, unint64_t a3)
{
  int v3;
  int v4;

  v3 = (int)((double)(unint64_t)a2 * 100.0 / (double)a3);
  if (MeCab::progress_bar(char const*,unsigned long,unsigned long)::prev != v3)
  {
    printf("%s: %3d%% |%.*s%*s| ", (const char *)this, (int)((double)(unint64_t)a2 * 100.0 / (double)a3), (int)((double)(unint64_t)a2 * 43.0 / (double)a3), MeCab::progress_bar(char const*,unsigned long,unsigned long)::bar, 43 - (int)((double)(unint64_t)a2 * 43.0 / (double)a3), (const char *)&str_30);
    if (v3 == 100)
      v4 = 10;
    else
      v4 = 13;
    putchar(v4);
    fflush((FILE *)*MEMORY[0x24BDAC8E8]);
  }
  MeCab::progress_bar(char const*,unsigned long,unsigned long)::prev = v3;
  return 1;
}

BOOL MeCab::load_dictionary_resource(MeCab *this, MeCab::Param *a2)
{
  std::string::size_type v3;
  char v4;
  std::string::size_type size;
  std::string::size_type v6;
  char *v7;
  std::string::size_type v8;
  char *v9;
  std::string::size_type v10;
  std::string *p_str;
  uint64_t v12;
  std::string *v13;
  std::string *v14;
  char *v15;
  unsigned int v16;
  int v17;
  int64_t v18;
  std::string *v19;
  char v20;
  std::string *v21;
  int64_t v22;
  char *v23;
  int v24;
  std::string *v25;
  int64_t v26;
  char *v27;
  char *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  std::string *v32;
  _BOOL8 v33;
  void *__p[2];
  char v36;
  std::string __str;
  std::string v38;
  std::string v39;
  _QWORD v40[20];

  v40[19] = *MEMORY[0x24BDAC8D0];
  MeCab::Param::get<std::string>((uint64_t)this, "rcfile", &v38);
  v3 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  v4 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  size = v38.__r_.__value_.__l.__size_;
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  else
    v6 = v38.__r_.__value_.__l.__size_;
  if (!v6)
  {
    v7 = getenv("HOME");
    if (v7)
    {
      std::string::basic_string[abi:ne180100]<0>(&v39, v7);
      std::string::basic_string[abi:ne180100]<0>(__p, ".mecabrc");
      MeCab::create_filename((uint64_t)&v39, (uint64_t)__p, &__str);
      if (v36 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      std::ifstream::basic_ifstream(&v39);
      if ((*((_BYTE *)&v39 + *(_QWORD *)(v39.__r_.__value_.__r.__words[0] - 24) + 32) & 5) == 0)
        std::string::operator=(&v38, &__str);
      v39.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7E0];
      *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words
                                + *(_QWORD *)(v39.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0]
                                                                                                  + 24);
      MEMORY[0x20BD061F8](&v39.__r_.__value_.__r.__words[2]);
      std::istream::~istream();
      MEMORY[0x20BD06354](v40);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v3 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      size = v38.__r_.__value_.__l.__size_;
      v4 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    }
  }
  if (v4 >= 0)
    v8 = v3;
  else
    v8 = size;
  if (!v8)
  {
    v9 = getenv("MECABRC");
    if (v9)
      std::string::__assign_external(&v38, v9);
  }
  MeCab::Param::get<std::string>((uint64_t)this, "dicdir", &__str);
  v10 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = __str.__r_.__value_.__l.__size_;
  if (!v10)
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      __str.__r_.__value_.__l.__size_ = 1;
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    else
    {
      *((_BYTE *)&__str.__r_.__value_.__s + 23) = 1;
      p_str = &__str;
    }
    LOWORD(p_str->__r_.__value_.__l.__data_) = 46;
  }
  LODWORD(v12) = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  v13 = (std::string *)v38.__r_.__value_.__r.__words[0];
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    LODWORD(v12) = v38.__r_.__value_.__r.__words[1];
  v12 = v12;
  v14 = &v38;
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v38.__r_.__value_.__r.__words[0];
  v15 = (char *)&v14[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if ((int)v12 < 1)
    {
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      {
        v38.__r_.__value_.__l.__size_ = 1;
      }
      else
      {
        *((_BYTE *)&v38.__r_.__value_.__s + 23) = 1;
        v13 = &v38;
      }
      LOWORD(v13->__r_.__value_.__l.__data_) = 46;
      goto LABEL_42;
    }
    v16 = v12 - 1;
    v17 = v15[v12--];
  }
  while (v17 != 47);
  std::string::basic_string(&v39, &v38, 0, v16, (std::allocator<char> *)__p);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  v38 = v39;
LABEL_42:
  std::string::basic_string[abi:ne180100]<0>(&v39, "$(rcpath)");
  v18 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &__str;
  else
    v19 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v18 = __str.__r_.__value_.__l.__size_;
  v20 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &v39;
  else
    v21 = (std::string *)v39.__r_.__value_.__r.__words[0];
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  else
    v22 = v39.__r_.__value_.__l.__size_;
  if (v22)
  {
    if (v18 >= v22)
    {
      v23 = (char *)v19 + v18;
      v24 = v21->__r_.__value_.__s.__data_[0];
      v25 = v19;
      do
      {
        v26 = v18 - v22;
        if (v26 == -1)
          break;
        v27 = (char *)memchr(v25, v24, v26 + 1);
        if (!v27)
          break;
        v28 = v27;
        if (!memcmp(v27, v21, v22))
        {
          if (v28 != v23)
          {
            v29 = v28 - (char *)v19;
            if (v28 - (char *)v19 != -1)
              goto LABEL_62;
          }
          break;
        }
        v25 = (std::string *)(v28 + 1);
        v18 = v23 - (v28 + 1);
      }
      while (v18 >= v22);
    }
  }
  else
  {
    v29 = 0;
LABEL_62:
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = &v38;
    else
      v30 = (std::string *)v38.__r_.__value_.__r.__words[0];
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    else
      v31 = v38.__r_.__value_.__l.__size_;
    std::string::replace(&__str, v29, v22, (const std::string::value_type *)v30, v31);
    v20 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  }
  if (v20 < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  MeCab::Param::set<std::string>((uint64_t)this, "dicdir", (uint64_t)&__str, 1);
  std::string::basic_string[abi:ne180100]<0>(__p, "dicrc");
  MeCab::create_filename((uint64_t)&__str, (uint64_t)__p, &v39);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  __str = v39;
  *((_BYTE *)&v39.__r_.__value_.__s + 23) = 0;
  v39.__r_.__value_.__s.__data_[0] = 0;
  if (v36 < 0)
    operator delete(__p[0]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32 = &__str;
  else
    v32 = (std::string *)__str.__r_.__value_.__r.__words[0];
  v33 = MeCab::Param::load(this, (const char *)v32);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  return v33;
}

void sub_2083D551C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  std::ifstream::~ifstream(&a29);
  if (a21 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(a1);
}

void std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::string *>>(void **a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5)
{
  void **v6;
  __int8 *v7;
  unint64_t v8;
  __int128 v9;
  unint64_t v10;
  __n128 *v13;
  unint64_t v14;
  __n128 *v15;
  unint64_t v16;
  void **v17;
  uint64_t v18;
  void **v19;
  void **v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  void **v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  __n128 *v28;
  __n128 *v29;
  __n128 *v30;
  __n128 *v31;
  char v32;
  int v33;
  __n128 v34;
  __n128 v35;
  uint64_t v36;
  void **v37;
  _BYTE *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  _BYTE *v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  __int128 v47;
  void *v48;

  if (a3 >= 2)
  {
    v6 = a1;
    if (a3 == 2)
    {
      v7 = &a2[-2].n128_i8[8];
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a2[-2].n128_u64[1], a1) & 0x80) != 0)
      {
        v8 = (unint64_t)v6[2];
        v9 = *(_OWORD *)v6;
        v10 = a2[-1].n128_u64[1];
        *(_OWORD *)v6 = *(_OWORD *)v7;
        v6[2] = (void *)v10;
        *(_OWORD *)v7 = v9;
        a2[-1].n128_u64[1] = v8;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (a1 != (void **)a2)
      {
        v17 = a1 + 3;
        if (a1 + 3 != (void **)a2)
        {
          v18 = 0;
          v19 = a1;
          do
          {
            v20 = v19;
            v19 = v17;
            if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v17, v20) & 0x80) != 0)
            {
              v21 = *(_OWORD *)v19;
              v48 = v19[2];
              v47 = v21;
              v19[1] = 0;
              v19[2] = 0;
              *v19 = 0;
              v22 = v18;
              do
              {
                v23 = (char *)v6 + v22;
                v24 = (void **)((char *)v6 + v22 + 24);
                if (*((char *)v6 + v22 + 47) < 0)
                  operator delete(*v24);
                *(_OWORD *)v24 = *(_OWORD *)v23;
                *(void **)((char *)v6 + v22 + 40) = (void *)*((_QWORD *)v23 + 2);
                v23[23] = 0;
                *v23 = 0;
                if (!v22)
                {
                  v26 = (uint64_t)v6;
                  goto LABEL_20;
                }
                v22 -= 24;
              }
              while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v47, (void **)((char *)v6 + v22)) & 0x80) != 0);
              v25 = *((char *)v6 + v22 + 47);
              v26 = (uint64_t)v6 + v22 + 24;
              if (v25 < 0)
                operator delete(*(void **)v26);
LABEL_20:
              v27 = v47;
              *(_QWORD *)(v26 + 16) = v48;
              *(_OWORD *)v26 = v27;
            }
            v17 = v19 + 3;
            v18 += 24;
          }
          while (v19 + 3 != (void **)a2);
        }
      }
    }
    else
    {
      v13 = a4;
      v14 = a3 >> 1;
      v15 = (__n128 *)&a1[3 * (a3 >> 1)];
      v16 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::string *>>((__n128 *)a1, v15, v16, a4);
        v28 = (__n128 *)((char *)v13 + 24 * v14);
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::string *>>((__n128 *)&v6[3 * (a3 >> 1)], a2, a3 - (a3 >> 1), v28);
        v29 = (__n128 *)((char *)v13 + 24 * a3);
        v30 = v28;
        v31 = v13;
        while (v30 != v29)
        {
          v32 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v30, (void **)v31);
          v33 = *((char *)v6 + 23);
          if (v32 < 0)
          {
            if (v33 < 0)
              operator delete(*v6);
            v35 = *v30;
            v6[2] = (void *)v30[1].n128_u64[0];
            *(__n128 *)v6 = v35;
            v30[1].n128_u8[7] = 0;
            v30->n128_u8[0] = 0;
            v30 = (__n128 *)((char *)v30 + 24);
          }
          else
          {
            if (v33 < 0)
              operator delete(*v6);
            v34 = *v31;
            v6[2] = (void *)v31[1].n128_u64[0];
            *(__n128 *)v6 = v34;
            v31[1].n128_u8[7] = 0;
            v31->n128_u8[0] = 0;
            v31 = (__n128 *)((char *)v31 + 24);
          }
          v6 += 3;
          if (v31 == v28)
          {
            if (v30 != v29)
            {
              v36 = 0;
              do
              {
                v37 = &v6[v36];
                if (SHIBYTE(v6[v36 + 2]) < 0)
                  operator delete(*v37);
                v38 = (char *)v30 + v36 * 8;
                v39 = *(__int128 *)((char *)v30 + v36 * 8);
                v37[2] = (void *)v30[1].n128_u64[v36];
                *(_OWORD *)v37 = v39;
                v38[23] = 0;
                *v38 = 0;
                v40 = (uint64_t)&v30[1].n128_i64[v36 + 1];
                v36 += 3;
              }
              while ((__n128 *)v40 != v29);
            }
            goto LABEL_44;
          }
        }
        if (v31 != v28)
        {
          v41 = 0;
          do
          {
            v42 = &v6[v41];
            if (SHIBYTE(v6[v41 + 2]) < 0)
              operator delete(*v42);
            v43 = (char *)v31 + v41 * 8;
            v44 = *(__int128 *)((char *)v31 + v41 * 8);
            v42[2] = (void *)v31[1].n128_u64[v41];
            *(_OWORD *)v42 = v44;
            v43[23] = 0;
            *v43 = 0;
            v45 = (uint64_t)&v31[1].n128_i64[v41 + 1];
            v41 += 3;
          }
          while ((__n128 *)v45 != v28);
        }
LABEL_44:
        if (v13)
        {
          v46 = a3;
          do
          {
            if (v13[1].n128_i8[7] < 0)
              operator delete((void *)v13->n128_u64[0]);
            v13 = (__n128 *)((char *)v13 + 24);
            --v46;
          }
          while (v46);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::string *>>(a1, v15, v16, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::string *>>(&v6[3 * (a3 >> 1)], a2, a3 - (a3 >> 1), v13, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::string *>>((char *)v6, (char *)&v6[3 * (a3 >> 1)], (char *)a2, a3 >> 1, a3 - (a3 >> 1), (__int128 *)v13, a5);
      }
    }
  }
}

void sub_2083D5920(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v4;

  if (v1)
  {
    v4 = 0;
    do
    {
      if (*(char *)(v1 + 23) < 0)
        operator delete(*(void **)v1);
      ++v4;
      v1 += 24;
    }
    while (v4 < v2);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::string *>>(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4)
{
  __n128 *v4;
  __n128 *v7;
  __n128 result;
  __n128 *v9;
  char v10;
  __n128 *v11;
  __n128 v12;
  __n128 *v13;
  uint64_t v14;
  __n128 *v15;
  __n128 *v16;
  __n128 *v17;
  __n128 *v18;
  uint64_t v19;
  __n128 *v20;
  __n128 *v21;
  uint64_t v22;
  unint64_t *v23;
  __n128 *v24;
  __n128 v25;
  uint64_t v26;
  __n128 *v27;
  unint64_t *v28;

  if (a3)
  {
    v4 = a4;
    v7 = a1;
    if (a3 == 2)
    {
      v9 = (__n128 *)((char *)a2 - 24);
      v10 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a2[-2].n128_u64[1], (void **)a1);
      v11 = (__n128 *)((char *)v4 + 24);
      if ((v10 & 0x80) == 0)
      {
        v12 = *v7;
        v4[1].n128_u64[0] = v7[1].n128_u64[0];
        *v4 = v12;
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        result = *v9;
        v4[2].n128_u64[1] = v9[1].n128_u64[0];
        *v11 = result;
LABEL_37:
        v9->n128_u64[0] = 0;
        v9->n128_u64[1] = 0;
        v9[1].n128_u64[0] = 0;
        return result;
      }
      v25 = *v9;
      v4[1].n128_u64[0] = v9[1].n128_u64[0];
      *v4 = v25;
      v9->n128_u64[1] = 0;
      v9[1].n128_u64[0] = 0;
      v9->n128_u64[0] = 0;
      result = *v7;
      v4[2].n128_u64[1] = v7[1].n128_u64[0];
      *v11 = result;
LABEL_36:
      v9 = v7;
      goto LABEL_37;
    }
    if (a3 == 1)
    {
      result = *a1;
      a4[1].n128_u64[0] = a1[1].n128_u64[0];
      *a4 = result;
      goto LABEL_36;
    }
    if ((uint64_t)a3 > 8)
    {
      v20 = (__n128 *)((char *)a1 + 24 * (a3 >> 1));
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::string *>>(a1, v20, a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::string *>>((char *)v7 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), (char *)v4 + 24 * (a3 >> 1), a3 - (a3 >> 1));
      v21 = (__n128 *)((char *)v7 + 24 * (a3 >> 1));
      while (v21 != a2)
      {
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v21, (void **)v7) & 0x80) != 0)
        {
          result = *v21;
          v4[1].n128_u64[0] = v21[1].n128_u64[0];
          *v4 = result;
          v21->n128_u64[1] = 0;
          v21[1].n128_u64[0] = 0;
          v21->n128_u64[0] = 0;
          v21 = (__n128 *)((char *)v21 + 24);
        }
        else
        {
          result = *v7;
          v4[1].n128_u64[0] = v7[1].n128_u64[0];
          *v4 = result;
          v7->n128_u64[1] = 0;
          v7[1].n128_u64[0] = 0;
          v7->n128_u64[0] = 0;
          v7 = (__n128 *)((char *)v7 + 24);
        }
        v4 = (__n128 *)((char *)v4 + 24);
        if (v7 == v20)
        {
          if (v21 != a2)
          {
            v22 = 0;
            do
            {
              v23 = &v21->n128_u64[v22];
              v24 = (__n128 *)((char *)v4 + v22 * 8);
              result = *(__n128 *)((char *)v21 + v22 * 8);
              v24[1].n128_u64[0] = v21[1].n128_u64[v22];
              *v24 = result;
              v23[1] = 0;
              v23[2] = 0;
              *v23 = 0;
              v22 += 3;
            }
            while ((__n128 *)((char *)v21 + v22 * 8) != a2);
          }
          return result;
        }
      }
      if (v7 != v20)
      {
        v26 = 0;
        do
        {
          v27 = (__n128 *)((char *)v4 + v26 * 8);
          v28 = &v7->n128_u64[v26];
          result = *(__n128 *)((char *)v7 + v26 * 8);
          v27[1].n128_u64[0] = v7[1].n128_u64[v26];
          *v27 = result;
          v28[1] = 0;
          v28[2] = 0;
          *v28 = 0;
          v26 += 3;
        }
        while ((__n128 *)((char *)v7 + v26 * 8) != v20);
      }
    }
    else if (a1 != a2)
    {
      result = *a1;
      a4[1].n128_u64[0] = a1[1].n128_u64[0];
      *a4 = result;
      a1->n128_u64[1] = 0;
      a1[1].n128_u64[0] = 0;
      a1->n128_u64[0] = 0;
      v13 = (__n128 *)((char *)a1 + 24);
      if (&a1[1].n128_i8[8] != (__int8 *)a2)
      {
        v14 = 0;
        v15 = a4;
        do
        {
          v16 = v13;
          v17 = (__n128 *)((char *)v15 + 24);
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v13, (void **)v15) & 0x80) != 0)
          {
            *v17 = *v15;
            v15[2].n128_u64[1] = v15[1].n128_u64[0];
            v15->n128_u64[1] = 0;
            v15[1].n128_u64[0] = 0;
            v15->n128_u64[0] = 0;
            v18 = v4;
            if (v15 != v4)
            {
              v19 = v14;
              while (1)
              {
                v18 = (__n128 *)((char *)v4 + v19);
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v16, (void **)((char *)&v4[-1] + v19 - 8)) & 0x80) == 0)break;
                if (v18[1].n128_i8[7] < 0)
                  operator delete((void *)v18->n128_u64[0]);
                *v18 = *(__n128 *)((char *)v4 + v19 - 24);
                v18[1].n128_u64[0] = *(unint64_t *)((char *)&v4->n128_u64[-1] + v19);
                v4->n128_u8[v19 - 1] = 0;
                v18[-2].n128_u8[8] = 0;
                v19 -= 24;
                if (!v19)
                {
                  v18 = v4;
                  break;
                }
              }
            }
            if (v18[1].n128_i8[7] < 0)
              operator delete((void *)v18->n128_u64[0]);
            result = *v16;
            v18[1].n128_u64[0] = v16[1].n128_u64[0];
            *v18 = result;
            v7[2].n128_u8[15] = 0;
            v16->n128_u8[0] = 0;
          }
          else
          {
            result = *v16;
            v15[2].n128_u64[1] = v16[1].n128_u64[0];
            *v17 = result;
            v16->n128_u64[1] = 0;
            v16[1].n128_u64[0] = 0;
            v16->n128_u64[0] = 0;
          }
          v13 = (__n128 *)((char *)v16 + 24);
          v14 += 24;
          v15 = (__n128 *)((char *)v15 + 24);
          v7 = v16;
        }
        while (&v16[1].n128_i8[8] != (__int8 *)a2);
      }
    }
  }
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::string *>>(char *a1, char *a2, char *a3, int64_t a4, uint64_t a5, __int128 *a6, uint64_t a7)
{
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  int v27;
  char *v28;
  __int128 v29;
  char *v30;
  char *i;
  __int128 v32;
  char *v33;
  char *v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  __int128 v44;
  __int128 *v45;
  void **v46;
  char *v47;
  int v48;
  char *v49;
  char *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  __int128 v55;
  char *v56;
  __int128 *v57;
  uint64_t v58;
  __int128 *v59;
  char v60;
  int v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  __int128 v65;
  unint64_t v66;
  void **v67;
  _QWORD *v68;
  __int128 v69;
  uint64_t v70;
  void **v71;
  _BYTE *v72;
  __int128 v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  __int128 *v79;
  char *v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v81 = a5;
  if (a5)
  {
    while (a4 > a7 && v81 > a7)
    {
      if (!a4)
        return;
      v13 = 0;
      v14 = -a4;
      while (1)
      {
        v15 = &v13[(_QWORD)a1];
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)&v13[(_QWORD)a1]) & 0x80) != 0)break;
        v13 += 24;
        if (__CFADD__(v14++, 1))
          return;
      }
      v17 = -v14;
      v18 = v81;
      v79 = a6;
      v80 = a3;
      v78 = a7;
      if (-v14 >= v81)
      {
        if (v14 == -1)
        {
          v64 = &v13[(_QWORD)a1];
          v89 = *(_QWORD *)&v13[(_QWORD)a1 + 16];
          v85 = *(_OWORD *)&v13[(_QWORD)a1];
          v65 = *(_OWORD *)a2;
          *((_QWORD *)v64 + 2) = *((_QWORD *)a2 + 2);
          *(_OWORD *)v64 = v65;
          *(_OWORD *)a2 = v85;
          *((_QWORD *)a2 + 2) = v89;
          return;
        }
        if (v14 > 0)
          v17 = 1 - v14;
        v76 = v17 >> 1;
        v22 = &a1[24 * (v17 >> 1) + (_QWORD)v13];
        v21 = a2;
        if (a2 != a3)
        {
          v25 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3);
          v21 = a2;
          do
          {
            v26 = &v21[24 * (v25 >> 1)];
            v27 = (char)std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v26, (void **)v22);
            if (v27 >= 0)
              v25 >>= 1;
            else
              v25 += ~(v25 >> 1);
            if (v27 < 0)
              v21 = v26 + 24;
          }
          while (v25);
          v18 = v81;
        }
        v20 = 0xAAAAAAAAAAAAAAABLL * ((v21 - a2) >> 3);
        v24 = v76;
      }
      else
      {
        if (v81 >= 0)
          v19 = v81;
        else
          v19 = v81 + 1;
        v20 = v19 >> 1;
        v21 = &a2[24 * (v19 >> 1)];
        v22 = a2;
        if ((char *)(a2 - a1) != v13)
        {
          v75 = v19 >> 1;
          v77 = a1;
          v23 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1 - (uint64_t)v13) >> 3);
          v22 = v15;
          do
          {
            if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v21, (void **)&v22[24 * (v23 >> 1)]) & 0x80u) != 0)
            {
              v23 >>= 1;
            }
            else
            {
              v22 += 24 * (v23 >> 1) + 24;
              v23 += ~(v23 >> 1);
            }
          }
          while (v23);
          v20 = v75;
          a1 = v77;
          v18 = v81;
        }
        v24 = 0xAAAAAAAAAAAAAAABLL * ((v22 - a1 - (uint64_t)v13) >> 3);
      }
      v28 = a1;
      if (v22 == a2)
      {
        v30 = v21;
      }
      else if (v21 == a2)
      {
        v30 = v22;
      }
      else
      {
        v86 = *((_QWORD *)v22 + 2);
        v82 = *(_OWORD *)v22;
        v29 = *(_OWORD *)a2;
        *((_QWORD *)v22 + 2) = *((_QWORD *)a2 + 2);
        *(_OWORD *)v22 = v29;
        *(_OWORD *)a2 = v82;
        *((_QWORD *)a2 + 2) = v86;
        v30 = v22 + 24;
        for (i = a2 + 24; i != v21; i += 24)
        {
          if (v30 == a2)
            a2 = i;
          v87 = *((_QWORD *)v30 + 2);
          v83 = *(_OWORD *)v30;
          v32 = *(_OWORD *)i;
          *((_QWORD *)v30 + 2) = *((_QWORD *)i + 2);
          *(_OWORD *)v30 = v32;
          v30 += 24;
          *(_OWORD *)i = v83;
          *((_QWORD *)i + 2) = v87;
        }
        if (v30 != a2)
        {
          v33 = v30;
          v34 = a2;
          do
          {
            while (1)
            {
              v88 = *((_QWORD *)v33 + 2);
              v84 = *(_OWORD *)v33;
              v35 = *(_OWORD *)v34;
              *((_QWORD *)v33 + 2) = *((_QWORD *)v34 + 2);
              *(_OWORD *)v33 = v35;
              v33 += 24;
              *((_QWORD *)v34 + 2) = v88;
              *(_OWORD *)v34 = v84;
              v34 += 24;
              if (v34 == v21)
                break;
              if (v33 == a2)
                a2 = v34;
            }
            v34 = a2;
          }
          while (v33 != a2);
        }
      }
      a4 = -(uint64_t)v24 - v14;
      v36 = v18 - v20;
      if ((uint64_t)(v24 + v20) >= (uint64_t)(v18 - (v24 + v20) - v14))
      {
        v38 = v21;
        a6 = v79;
        v39 = v20;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::string *>>(v30, v38, v80, -(uint64_t)v24 - v14, v18 - v20, v79, v78);
        a2 = v22;
        a7 = v78;
        v36 = v39;
        a4 = v24;
        a3 = v30;
      }
      else
      {
        v37 = v22;
        a7 = v78;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::string *>>(&v13[(_QWORD)v28], v37, v30, v24, v20, v79, v78);
        v15 = v30;
        a2 = v21;
        a6 = v79;
        a3 = v80;
      }
      v81 = v36;
      a1 = v15;
      if (!v36)
        return;
    }
    if (a4 <= v81)
    {
      if (a1 == a2)
        return;
      v52 = 0;
      v41 = 0;
      do
      {
        v53 = (uint64_t)a6 + v52;
        v54 = &a1[v52];
        v55 = *(_OWORD *)&a1[v52];
        *(_QWORD *)(v53 + 16) = *(_QWORD *)&a1[v52 + 16];
        *(_OWORD *)v53 = v55;
        *((_QWORD *)v54 + 1) = 0;
        *((_QWORD *)v54 + 2) = 0;
        *(_QWORD *)v54 = 0;
        ++v41;
        v52 += 24;
      }
      while (&a1[v52] != a2);
      if (v52)
      {
        v56 = a3;
        v57 = (__int128 *)((char *)a6 + v52);
        v58 = (uint64_t)a6 + v52 - 24;
        v59 = a6;
        while (a2 != v56)
        {
          v60 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v59);
          v61 = a1[23];
          if (v60 < 0)
          {
            if (v61 < 0)
              operator delete(*(void **)a1);
            v63 = *(_OWORD *)a2;
            *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
            *(_OWORD *)a1 = v63;
            a2[23] = 0;
            *a2 = 0;
            a2 += 24;
          }
          else
          {
            if (v61 < 0)
              operator delete(*(void **)a1);
            v62 = *v59;
            *((_QWORD *)a1 + 2) = *((_QWORD *)v59 + 2);
            *(_OWORD *)a1 = v62;
            *((_BYTE *)v59 + 23) = 0;
            *(_BYTE *)v59 = 0;
            v59 = (__int128 *)((char *)v59 + 24);
          }
          a1 += 24;
          if (v57 == v59)
            goto LABEL_104;
        }
        if (v57 != v59)
        {
          v70 = 0;
          do
          {
            v71 = (void **)&a1[v70];
            if (a1[v70 + 23] < 0)
              operator delete(*v71);
            v72 = (char *)v59 + v70;
            v73 = *(__int128 *)((char *)v59 + v70);
            v71[2] = *(void **)((char *)v59 + v70 + 16);
            *(_OWORD *)v71 = v73;
            v72[23] = 0;
            *v72 = 0;
            v70 += 24;
          }
          while ((_BYTE *)v58 != v72);
        }
      }
    }
    else
    {
      if (a3 == a2)
        return;
      v40 = 0;
      v41 = 0;
      do
      {
        v42 = (uint64_t)a6 + v40;
        v43 = &a2[v40];
        v44 = *(_OWORD *)&a2[v40];
        *(_QWORD *)(v42 + 16) = *(_QWORD *)&a2[v40 + 16];
        *(_OWORD *)v42 = v44;
        *((_QWORD *)v43 + 1) = 0;
        *((_QWORD *)v43 + 2) = 0;
        *(_QWORD *)v43 = 0;
        ++v41;
        v40 += 24;
      }
      while (&a2[v40] != a3);
      if (v40)
      {
        v45 = (__int128 *)((char *)a6 + v40);
        v46 = (void **)(a3 - 24);
        while (a2 != a1)
        {
          v47 = a1;
          v48 = (char)std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v45 - 3, (void **)a2 - 3);
          if (v48 >= 0)
            v49 = (char *)v45;
          else
            v49 = a2;
          if (v48 >= 0)
            v50 = (char *)v45 - 24;
          else
            v50 = a2 - 24;
          if (v48 >= 0)
            v45 = (__int128 *)((char *)v45 - 24);
          else
            a2 -= 24;
          if (*((char *)v46 + 23) < 0)
            operator delete(*v46);
          v51 = *(_OWORD *)v50;
          v46[2] = (void *)*((_QWORD *)v50 + 2);
          *(_OWORD *)v46 = v51;
          v46 -= 3;
          *(v49 - 1) = 0;
          *v50 = 0;
          a1 = v47;
          if (v45 == a6)
            goto LABEL_104;
        }
        if (v45 != a6)
        {
          v66 = 0;
          do
          {
            v67 = &v46[v66 / 8];
            if (SHIBYTE(v46[v66 / 8 + 2]) < 0)
              operator delete(*v67);
            v68 = (_QWORD *)((char *)v45 + v66);
            v66 -= 24;
            v69 = *(__int128 *)((char *)v45 + v66);
            v67[2] = *(void **)((char *)v45 + v66 + 16);
            *(_OWORD *)v67 = v69;
            *((_BYTE *)v68 - 1) = 0;
            *((_BYTE *)v45 + v66) = 0;
          }
          while ((__int128 *)((char *)v45 + v66) != a6);
        }
      }
    }
LABEL_104:
    if (a6)
    {
      v74 = 0;
      do
      {
        if (*((char *)a6 + 23) < 0)
          operator delete(*(void **)a6);
        ++v74;
        a6 = (__int128 *)((char *)a6 + 24);
      }
      while (v74 < v41);
    }
  }
}

uint64_t MeCab::TokenizerImpl<mecab_node_t,mecab_path_t>::close(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)a1[1];
  v2 = (_QWORD *)a1[2];
  if (v3 != v2)
  {
    do
    {
      if (*v3)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
        v2 = (_QWORD *)a1[2];
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = (_QWORD *)a1[1];
  }
  a1[2] = v3;
  a1[5] = a1[4];
  a1[29] = a1[28];
  MeCab::Mmap<char>::close((uint64_t)(a1 + 36));
  result = a1[7];
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    a1[7] = 0;
  }
  return result;
}

uint64_t MeCab::TokenizerImpl<mecab_node_t,mecab_path_t>::TokenizerImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &off_24C09C2A0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  MeCab::scoped_string::scoped_string((MeCab::scoped_string *)(a1 + 80));
  MeCab::scoped_string::scoped_string((MeCab::scoped_string *)(a1 + 96));
  *(_QWORD *)(a1 + 112) = &off_24C09C560;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 512;
  *(_QWORD *)(a1 + 168) = &off_24C09C5E0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 4;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  v2 = operator new[]();
  for (i = 0; i != 0x2000; i += 16)
  {
    v4 = v2 + i;
    *(_WORD *)v4 = 0;
    *(_QWORD *)(v4 + 4) = 0;
    *(_DWORD *)(v4 + 12) = 0;
  }
  *(_QWORD *)(a1 + 248) = &off_24C09C200;
  *(_QWORD *)(a1 + 256) = v2;
  *(_QWORD *)(a1 + 264) = 0;
  MeCab::CharProperty::CharProperty((MeCab::CharProperty *)(a1 + 280));
  *(_QWORD *)(a1 + 960) = 0;
  *(_DWORD *)(a1 + 968) = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 976);
  *(_BYTE *)(a1 + 1272) = 0;
  *(_QWORD *)(a1 + 1240) = 0;
  *(_QWORD *)(a1 + 1256) = 0;
  *(_QWORD *)(a1 + 1248) = 0;
  *(_BYTE *)(a1 + 1264) = 0;
  return a1;
}

void sub_2083D6470(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  void **v5;
  void **v6;
  uint64_t v7;
  void **v8;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;

  v8 = v4;
  MeCab::CharProperty::~CharProperty(v8);
  v1[31] = v7;
  v10 = v1[32];
  if (v10)
    MEMORY[0x20BD06378](v10, 0x1000C8094CA146DLL);
  v11 = *v6;
  if (*v6)
  {
    v1[29] = v11;
    operator delete(v11);
  }
  MeCab::FreeList<mecab_dictionary_info_t>::~FreeList(v3);
  MeCab::FreeList<mecab_node_t>::~FreeList(v2);
  v1[12] = &off_24C09C220;
  v12 = v1[13];
  if (v12)
    MEMORY[0x20BD06378](v12, 0x1000C8077774924);
  v1[10] = &off_24C09C220;
  v13 = v1[11];
  if (v13)
    MEMORY[0x20BD06378](v13, 0x1000C8077774924);
  v14 = (void *)v1[4];
  if (v14)
  {
    v1[5] = v14;
    operator delete(v14);
  }
  v15 = *v5;
  if (*v5)
  {
    v1[2] = v15;
    operator delete(v15);
  }
  _Unwind_Resume(a1);
}

uint64_t MeCab::TokenizerImpl<mecab_node_t,mecab_path_t>::get_lastname_length(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4)
{
  unsigned __int8 *v5;
  unsigned __int8 *v7;
  int v8;
  unint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned int v15;
  int *v16;
  int *i;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  int v23;

  v5 = a2;
  v7 = &a2[a3];
  if (a3 >= 1)
  {
    v8 = *(_DWORD *)(a1 + 272);
    while (1)
    {
      v9 = v7 - v5;
      if ((*(_DWORD *)(a1 + 664) - 3) > 2)
      {
        v10 = *v5;
        if (((char)*v5 & 0x80000000) == 0)
          goto LABEL_7;
        if (v9 >= 2 && (v10 & 0xE0) == 0xC0)
        {
          v11 = 2;
          v10 = v5[1] & 0x3F | ((v10 & 0x1F) << 6);
        }
        else
        {
          if (v9 < 3)
            goto LABEL_26;
          if ((v10 & 0xF0) == 0xE0)
          {
            v10 = (v10 << 12) | ((v5[1] & 0x3F) << 6) | v5[2] & 0x3F;
            v11 = 3;
          }
          else
          {
            if (v9 < 4)
              goto LABEL_26;
            if ((v10 & 0xF8) == 0xF0)
            {
              v10 = 0;
              v11 = 4;
            }
            else
            {
              if (v9 < 5)
                goto LABEL_26;
              if ((v10 & 0xFC) == 0xF8)
              {
                v10 = 0;
                v11 = 5;
              }
              else
              {
                if (v9 < 6 || (v10 & 0xFE) != 0xFC)
                {
LABEL_26:
                  v10 = 0;
LABEL_7:
                  v11 = 1;
                  goto LABEL_23;
                }
                v10 = 0;
                v11 = 6;
              }
            }
          }
        }
      }
      else
      {
        if (v9 < 2)
        {
          if ((v8 & **(_DWORD **)(a1 + 656) & 0x3FFFF) == 0)
            break;
          return 0;
        }
        v10 = *(_WORD *)v5;
        v11 = 2;
      }
LABEL_23:
      v12 = *(_DWORD *)(*(_QWORD *)(a1 + 656) + 4 * v10);
      if ((v8 & v12 & 0x3FFFF) != 0)
      {
        v5 += v11;
        v8 = v12;
        if (v5 < v7)
          continue;
      }
      break;
    }
  }
  v13 = 0;
  if (v5 && v5 != v7)
  {
    v14 = *(uint64_t **)(a1 + 8);
    if (v14 == *(uint64_t **)(a1 + 16))
      return 0;
    v13 = 0;
    v15 = (_DWORD)v7 - (_DWORD)v5;
    do
    {
      if (!*(_DWORD *)(*v14 + 388))
      {
        v16 = MeCab::Dictionary::commonPrefixSearch(*v14, v5, v15, *(_QWORD *)(a1 + 256), 0x200uLL);
        if (v16)
        {
          for (i = 0; i != v16; i = (int *)((char *)i + 1))
          {
            v18 = *(_QWORD *)(a1 + 256) + 16 * (_QWORD)i;
            v19 = *(unsigned int *)(v18 + 8);
            v20 = *(_DWORD *)(v18 + 8);
            if (*(_DWORD *)(v18 + 8))
            {
              v21 = (unsigned __int16 *)(v18 + 12);
              v22 = (unsigned __int16 *)(*(_QWORD *)(*v14 + 352) + 12 * (v19 >> 8) + 4);
              do
              {
                v23 = *v22;
                v22 += 6;
                if (v23 == a4)
                {
                  if ((int)v13 <= *v21)
                    v13 = *v21;
                  else
                    v13 = v13;
                }
                --v20;
              }
              while (v20);
            }
          }
        }
      }
      ++v14;
    }
    while (v14 != *(uint64_t **)(a1 + 16));
  }
  return v13;
}

unint64_t MeCab::TokenizerImpl<mecab_node_t,mecab_path_t>::getFeature(uint64_t a1, uint64_t a2, _WORD *a3, unint64_t a4)
{
  unint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = 0xFFFFFFFFLL;
  if (a2 && a3)
  {
    if (!*(_WORD *)(a2 + 80) || (*(_BYTE *)(a2 + 91) & 0xFE) == 2)
      return 0xFFFFFFFFLL;
    v6 = *(_QWORD *)(a1 + 64);
    if (*(_BYTE *)(v6 + 725) == 1 && *(_BYTE *)(v6 + 726) == 1)
    {
      v7 = *(_QWORD *)(a2 + 72);
      if (!v7)
        return 0xFFFFFFFFLL;
      if (*(_DWORD *)(v7 + 8) == 42)
      {
        *a3 = 42;
        return 1;
      }
      else
      {
        return MeCab::Dictionary::compressedFeature(v6, v7, (uint64_t)&MeCab::internal::kDecodeArray, (uint64_t)a3, a4);
      }
    }
    else
    {
      return MeCab::Dictionary::copyFeature(v6, a2, (uint64_t)a3, a4);
    }
  }
  return result;
}

unint64_t MeCab::Dictionary::compressedFeature(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v14[4];
  unsigned int v15;

  marisa::Agent::Agent((marisa::Agent *)v14);
  marisa::Agent::set_query((uint64_t)v14, *(unsigned int *)(a2 + 8));
  marisa::Trie::reverse_lookup((marisa::grimoire::trie::LoudsTrie **)(a1 + 728), (marisa::Agent *)v14);
  v10 = v15;
  if (v15)
  {
    v11 = 0;
    v12 = v14[3];
    while (*(_BYTE *)(v12 + v11))
    {
      *(_WORD *)(a4 + 2 * v11) = *(_WORD *)(a3 + 2 * *(unsigned __int8 *)(v12 + v11));
      if (v11 > a5)
      {
        v11 = 0xFFFFFFFFLL;
        break;
      }
      if (v10 == ++v11)
      {
        v11 = v10;
        break;
      }
    }
  }
  else
  {
    v11 = 0;
  }
  marisa::Agent::~Agent((marisa::Agent *)v14);
  return v11;
}

void sub_2083D68FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  marisa::Agent::~Agent((marisa::Agent *)&a9);
  _Unwind_Resume(a1);
}

uint64_t MeCab::Dictionary::copyFeature(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _WORD *v4;
  int v5;
  uint64_t v6;
  _WORD *v7;
  _WORD *v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_WORD **)(a2 + 72);
  v5 = (unsigned __int16)*v4;
  if (*(_DWORD *)(a1 + 720) != 1)
  {
    if (*v4)
    {
      v11 = 0;
      do
      {
        if (a4 <= (v11 * 2) >> 1)
          break;
        *(_WORD *)(a3 + v11 * 2) = v5;
        v5 = (unsigned __int16)v4[++v11];
      }
      while (v5);
      v7 = &v4[v11];
      return v7 - v4;
    }
LABEL_17:
    v7 = *(_WORD **)(a2 + 72);
    return v7 - v4;
  }
  if (!*v4)
    goto LABEL_17;
  v6 = 0;
  v7 = *(_WORD **)(a2 + 72);
  do
  {
    if (a4 <= (v6 * 2) >> 1)
      break;
    v8 = &v4[++v6];
    if (v5 == 44)
      v7 = &v4[v6];
    v5 = (unsigned __int16)*v8;
  }
  while (*v8);
  v9 = &v4[v6];
  if (v7 == &v4[v6])
  {
    v4 = v7;
  }
  else
  {
    v10 = 0;
    do
    {
      *(_WORD *)(a3 + v10 * 2) = v7[v10];
      ++v10;
    }
    while (&v7[v10] != v9);
    v4 = v7;
    v7 = v9;
  }
  return v7 - v4;
}

uint64_t MeCab::TokenizerImpl<mecab_node_t,mecab_path_t>::lookup(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  unsigned int v3;
  __int16 v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned __int8 *v17;
  _QWORD *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  BOOL v29;
  uint64_t v30;
  __int16 v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned __int16 *v35;
  char *v36;
  unint64_t v37;
  unsigned __int8 *v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t v41;
  unsigned __int16 v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unsigned __int8 *v46;
  unint64_t v47;
  unsigned __int16 v48;
  uint64_t v49;
  BOOL v51;
  uint64_t v53;
  unint64_t v54;
  __int16 v55;
  unsigned int v56;
  unsigned int v57;
  unsigned __int8 *v58;
  uint64_t *v59;
  int *v60;
  __int16 v61;
  uint64_t v63;
  unsigned int v64;

  v4 = (__int16)a2;
  v5 = a1;
  v63 = 0;
  if (a3 - (unint64_t)a2 <= 0xFFFE)
    v6 = a3;
  else
    v6 = (unint64_t)(a2 + 0xFFFF);
  if (v6 <= (unint64_t)a2)
  {
    v12 = 0;
    v9 = a2;
    goto LABEL_32;
  }
  v7 = *(_DWORD *)(a1 + 272);
  v8 = *(unsigned int **)(a1 + 656);
  v9 = a2;
  while (1)
  {
    v10 = v6 - (_QWORD)v9;
    if ((*(_DWORD *)(a1 + 664) - 3) <= 2)
      break;
    v11 = *v9;
    if (((char)*v9 & 0x80000000) == 0)
      goto LABEL_10;
    if (v10 >= 2 && (v11 & 0xE0) == 0xC0)
    {
      v12 = 2;
      v11 = v9[1] & 0x3F | ((v11 & 0x1F) << 6);
    }
    else
    {
      if (v10 < 3)
        goto LABEL_29;
      if ((v11 & 0xF0) == 0xE0)
      {
        v11 = (v11 << 12) | ((v9[1] & 0x3F) << 6) | v9[2] & 0x3F;
        v12 = 3;
      }
      else
      {
        if (v10 < 4)
          goto LABEL_29;
        if ((v11 & 0xF8) == 0xF0)
        {
          v11 = 0;
          v12 = 4;
        }
        else
        {
          if (v10 < 5)
            goto LABEL_29;
          if ((v11 & 0xFC) == 0xF8)
          {
            v11 = 0;
            v12 = 5;
          }
          else
          {
            if (v10 < 6 || (v11 & 0xFE) != 0xFC)
            {
LABEL_29:
              v11 = 0;
LABEL_10:
              v12 = 1;
              goto LABEL_14;
            }
            v11 = 0;
            v12 = 6;
          }
        }
      }
    }
LABEL_14:
    v3 = v8[v11];
    if ((v7 & v3 & 0x3FFFF) != 0)
    {
      v9 += v12;
      v7 = v3;
      if ((unint64_t)v9 < v6)
        continue;
    }
    v64 = v3;
    goto LABEL_32;
  }
  if (v10 >= 2)
  {
    v11 = *(_WORD *)v9;
    v12 = 2;
    goto LABEL_14;
  }
  v13 = 0;
  v64 = *v8;
  v3 = v64;
  if ((v7 & v64 & 0x3FFFF) != 0)
    return v13;
  v12 = 0;
LABEL_32:
  v13 = 0;
  if (!v9)
    return v13;
  v57 = v3;
  if (v9 == (unsigned __int8 *)v6)
    return v13;
  v14 = *(uint64_t **)(a1 + 8);
  if (v14 != *(uint64_t **)(a1 + 16))
  {
    v53 = v12;
    v54 = v6;
    v15 = 0;
    v13 = 0;
    v55 = (__int16)a2;
    v56 = v6 - (_DWORD)v9;
    v16 = (_QWORD *)(a1 + 112);
    v58 = v9;
    v61 = (_WORD)v9 - (_WORD)a2;
    v17 = v9;
    do
    {
      v18 = v16;
      v59 = v14;
      v19 = v5;
      v60 = MeCab::Dictionary::commonPrefixSearch(*v14, v58, v56, *(_QWORD *)(v5 + 256), 0x200uLL);
      if (v60)
      {
        v20 = 0;
        v21 = *(_QWORD *)(v19 + 256);
        v5 = v19;
        v16 = v18;
        do
        {
          if (*(_BYTE *)(v21 + 16 * (_QWORD)v20 + 8))
          {
            v22 = 0;
            v23 = 12 * *(unsigned __int8 *)(v21 + 16 * (_QWORD)v20 + 8);
            do
            {
              v24 = v13;
              MeCab::FreeList<mecab_node_t>::alloc(v18);
              v5 = a1;
              v13 = v25;
              v26 = *v59;
              v27 = *(_QWORD *)(*v59 + 352)
                  + 12 * (*(_DWORD *)(*(_QWORD *)(a1 + 256) + 16 * (_QWORD)v20 + 8) >> 8)
                  + v22;
              *(_WORD *)(v25 + 86) = *(_WORD *)v27;
              v28 = *(_WORD *)(v27 + 4);
              *(_WORD *)(v25 + 84) = *(_WORD *)(v27 + 2);
              *(_WORD *)(v25 + 88) = v28;
              *(_WORD *)(v25 + 92) = *(_WORD *)(v27 + 6);
              v29 = *(_BYTE *)(v26 + 726) == 1 && *(_BYTE *)(v26 + 725) == 1;
              v30 = *(_QWORD *)(v26 + 368) + *(unsigned int *)(v27 + 8);
              if (v29)
                v30 = v27;
              *(_QWORD *)(v25 + 72) = v30;
              v21 = *(_QWORD *)(a1 + 256);
              v31 = *(_WORD *)(v21 + 16 * (_QWORD)v20 + 12);
              *(_WORD *)(v25 + 80) = v31;
              *(_WORD *)(v25 + 82) = v31 + v61;
              *(_QWORD *)(v25 + 64) = v17;
              *(_BYTE *)(v25 + 91) = 0;
              *(_BYTE *)(v25 + 90) = v57 >> 18;
              *(_QWORD *)(v25 + 24) = v24;
              v22 += 12;
            }
            while (v23 != v22);
            v16 = v18;
            v15 = v25;
          }
          v20 = (int *)((char *)v20 + 1);
        }
        while (v20 != v60);
      }
      else
      {
        v5 = v19;
        v16 = v18;
      }
      v14 = v59 + 1;
    }
    while (v59 + 1 != *(uint64_t **)(v5 + 16));
    v63 = v15;
    v6 = v54;
    v4 = v55;
    v9 = v58;
    v12 = v53;
    if ((v57 & 0x80000000) == 0)
    {
      if (v13)
        return v13;
    }
  }
  v32 = &v9[v12];
  if ((unint64_t)&v9[v12] > v6)
  {
    MeCab::TokenizerImpl<mecab_node_t,mecab_path_t>::addUnknownNodes((_QWORD *)v5, &v64, v4, (uint64_t)v9, (_WORD)v9 + v12, &v63);
    return v33;
  }
  if (*(_BYTE *)(v5 + 1272))
  {
    v34 = v57;
    if (*(_QWORD *)(v5 + 1264) == (v57 >> 18))
    {
      v35 = Thai::seekToSyllableEnd((unsigned __int16 *)v9, v6);
      v5 = a1;
      if (v9 < (unsigned __int8 *)v35)
      {
        MeCab::TokenizerImpl<mecab_node_t,mecab_path_t>::addUnknownNodes((_QWORD *)a1, &v64, v4, (uint64_t)v9, (__int16)v35, &v63);
        v5 = a1;
        v34 = v64;
      }
    }
    if ((v34 & 0x40000000) == 0)
      goto LABEL_60;
  }
  else
  {
    v34 = v57;
    if ((v57 & 0x40000000) == 0)
    {
LABEL_60:
      v36 = 0;
      goto LABEL_96;
    }
  }
  v37 = *(_QWORD *)(v5 + 960);
  v38 = &v32[2 * v37];
  if (v6 - (unint64_t)v32 < 2 * v37)
    v38 = (unsigned __int8 *)v6;
  if (v32 >= v38)
  {
    v39 = 0;
    v36 = (char *)v32;
    goto LABEL_93;
  }
  v39 = 0;
  v36 = (char *)v32;
  v40 = v34;
  while (2)
  {
    v41 = v38 - (unsigned __int8 *)v36;
    if ((*(_DWORD *)(v5 + 664) - 3) > 2)
    {
      v42 = *v36;
      if (*v36 < 0)
      {
        if (v41 >= 2 && (v42 & 0xE0) == 0xC0)
        {
          v43 = 2;
          v42 = v36[1] & 0x3F | ((v42 & 0x1F) << 6);
          goto LABEL_88;
        }
        if (v41 >= 3)
        {
          if ((v42 & 0xF0) == 0xE0)
          {
            v42 = (v42 << 12) | ((v36[1] & 0x3F) << 6) | v36[2] & 0x3F;
            v43 = 3;
            goto LABEL_88;
          }
          if (v41 >= 4)
          {
            if ((v42 & 0xF8) == 0xF0)
            {
              v42 = 0;
              v43 = 4;
              goto LABEL_88;
            }
            if (v41 >= 5)
            {
              if ((v42 & 0xFC) == 0xF8)
              {
                v42 = 0;
                v43 = 5;
                goto LABEL_88;
              }
              if (v41 >= 6 && (v42 & 0xFE) == 0xFC)
              {
                v42 = 0;
                v43 = 6;
                goto LABEL_88;
              }
            }
          }
        }
        v42 = 0;
      }
      v43 = 1;
LABEL_88:
      v44 = *(_DWORD *)(*(_QWORD *)(v5 + 656) + 4 * v42);
      if ((v40 & v44 & 0x3FFFF) == 0)
        goto LABEL_94;
      v36 += v43;
      ++v39;
      v40 = v44;
      if (v36 >= (char *)v38)
        goto LABEL_94;
      continue;
    }
    break;
  }
  if (v41 >= 2)
  {
    v42 = *(_WORD *)v36;
    v43 = 2;
    goto LABEL_88;
  }
  if ((v40 & **(_DWORD **)(v5 + 656) & 0x3FFFF) != 0)
    return v63;
LABEL_93:
  if (!v36)
    return v63;
LABEL_94:
  if (v39 <= v37)
  {
    MeCab::TokenizerImpl<mecab_node_t,mecab_path_t>::addUnknownNodes((_QWORD *)v5, &v64, v4, (uint64_t)v9, (__int16)v36, &v63);
    v5 = a1;
    v34 = v64;
  }
LABEL_96:
  if ((v34 & 0x3C000000) != 0)
  {
    v45 = 1;
    while (1)
    {
      v46 = (unsigned __int8 *)v36;
      if (v32 != (unsigned __int8 *)v36)
        break;
LABEL_110:
      v51 = v45++ >= ((v34 >> 26) & 0xF) || (unint64_t)v46 > v6;
      v32 = v46;
      if (v51)
        goto LABEL_130;
    }
    MeCab::TokenizerImpl<mecab_node_t,mecab_path_t>::addUnknownNodes((_QWORD *)v5, &v64, v4, (uint64_t)v9, (__int16)v32, &v63);
    v5 = a1;
    v47 = v6 - (_QWORD)v32;
    if ((*(_DWORD *)(a1 + 664) - 3) <= 2)
    {
      if (v47 < 2)
      {
        v49 = 0;
        v48 = 0;
      }
      else
      {
        v48 = *(_WORD *)v32;
        v49 = 2;
      }
      goto LABEL_108;
    }
    v48 = *v32;
    if ((char)*v32 < 0)
    {
      if (v47 < 2 || (v48 & 0xE0) != 0xC0)
      {
        if (v47 >= 3)
        {
          if ((v48 & 0xF0) == 0xE0)
          {
            v48 = (v48 << 12) | ((v32[1] & 0x3F) << 6) | v32[2] & 0x3F;
            v49 = 3;
            goto LABEL_108;
          }
          if (v47 >= 4)
          {
            if ((v48 & 0xF8) == 0xF0)
            {
              v48 = 0;
              v49 = 4;
              goto LABEL_108;
            }
            if (v47 >= 5)
            {
              if ((v48 & 0xFC) == 0xF8)
              {
                v48 = 0;
                v49 = 5;
                goto LABEL_108;
              }
              if (v47 >= 6 && (v48 & 0xFE) == 0xFC)
              {
                v48 = 0;
                v49 = 6;
                goto LABEL_108;
              }
            }
          }
        }
        v48 = 0;
        goto LABEL_103;
      }
      v49 = 2;
      v48 = v32[1] & 0x3F | ((v48 & 0x1F) << 6);
    }
    else
    {
LABEL_103:
      v49 = 1;
    }
LABEL_108:
    v34 = v64;
    if ((*(_DWORD *)(*(_QWORD *)(a1 + 656) + 4 * v48) & v64 & 0x3FFFF) == 0)
      goto LABEL_129;
    v46 = &v32[v49];
    goto LABEL_110;
  }
LABEL_129:
  LOWORD(v46) = (_WORD)v32;
LABEL_130:
  v13 = v63;
  if (!v63)
  {
    MeCab::TokenizerImpl<mecab_node_t,mecab_path_t>::addUnknownNodes((_QWORD *)v5, &v64, v4, (uint64_t)v9, (__int16)v46, &v63);
    return v63;
  }
  return v13;
}

void MeCab::TokenizerImpl<mecab_node_t,mecab_path_t>::addUnknownNodes(_QWORD *a1, _DWORD *a2, __int16 a3, uint64_t a4, __int16 a5, _QWORD *a6)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v12;
  _QWORD *v13;
  __int16 v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  v7 = (uint64_t *)(a1[28] + 16 * ((unint64_t)*a2 >> 18));
  v8 = v7[1];
  if (v8)
  {
    v12 = *v7;
    v13 = a1 + 14;
    v14 = a5 - a4;
    v15 = a5 - a3;
    do
    {
      MeCab::FreeList<mecab_node_t>::alloc(v13);
      v17 = a1[7];
      *(_WORD *)(v16 + 86) = *(_WORD *)v12;
      *(_WORD *)(v16 + 84) = *(_WORD *)(v12 + 2);
      *(_WORD *)(v16 + 88) = *(_WORD *)(v12 + 4);
      *(_WORD *)(v16 + 92) = *(_WORD *)(v12 + 6);
      v18 = *(_BYTE *)(v17 + 726) == 1 && *(_BYTE *)(v17 + 725) == 1;
      v19 = *(_QWORD *)(v17 + 368) + *(unsigned int *)(v12 + 8);
      if (v18)
        v19 = v12;
      *(_QWORD *)(v16 + 64) = a4;
      *(_QWORD *)(v16 + 72) = v19;
      *(_WORD *)(v16 + 80) = v14;
      *(_WORD *)(v16 + 82) = v15;
      *(_QWORD *)(v16 + 24) = *a6;
      *(_BYTE *)(v16 + 91) = 1;
      *(_BYTE *)(v16 + 90) = *a2 >> 18;
      v20 = a1[13];
      if (v20)
        *(_QWORD *)(v16 + 72) = v20;
      v12 += 12;
      *a6 = v16;
      --v8;
    }
    while (v8);
  }
}

BOOL MeCab::TokenizerImpl<mecab_node_t,mecab_path_t>::open(uint64_t a1, const MeCab::Param *a2)
{
  const char *v4;
  MeCab::Dictionary *v5;
  std::string *v6;
  char v7;
  uint64_t v8;
  std::string *v9;
  const char *v10;
  char v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  std::string *v18;
  std::string::size_type v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  char *v33;
  std::string *v34;
  std::string::size_type v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  char *v41;
  std::string *v42;
  std::string::size_type v43;
  _BOOL8 v44;
  unint64_t v46;
  uint64_t *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  std::string::size_type v74;
  char *v75;
  uint64_t v76;
  std::string *v77;
  char *v78;
  int64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  char *i;
  int v86;
  unsigned __int8 *v87;
  char *v88;
  int v89;
  int v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  _BYTE *v93;
  _BYTE *v94;
  uint64_t v95;
  BOOL v96;
  _DWORD *v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  int v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  char *v130;
  void **v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  size_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t *v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  char *v156;
  char *v157;
  uint64_t *v158;
  double v159;
  uint64_t v160;
  std::string::size_type v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  size_t v170;
  _QWORD *v171;
  _QWORD *v172;
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v175;
  char *v176;
  void *v177[2];
  unsigned __int8 v178;
  std::string __p;
  std::string v180;

  MeCab::TokenizerImpl<mecab_node_t,mecab_path_t>::close((_QWORD *)a1);
  MeCab::Param::get<std::string>((uint64_t)a2, "dicdir", &v180);
  if (!MeCab::CharProperty::open((MeCab::CharProperty *)(a1 + 280), a2))
  {
    std::ios_base::clear((std::ios_base *)(a1 + 976 + *(_QWORD *)(*(_QWORD *)(a1 + 976) - 24)), 0);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 976), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/tokenizer.cpp", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"(", 1);
    v21 = (_QWORD *)std::ostream::operator<<();
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)") [", 3);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"property_.open(param)", 21);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"] ", 2);
    v25 = (char *)MeCab::whatlog::str((MeCab::whatlog *)(a1 + 672));
    std::string::basic_string[abi:ne180100]<0>(&__p, v25);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)p_p, size);
LABEL_50:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_52;
  }
  if (MeCab::Param::get<BOOL>((uint64_t)a2, "open-mutable-dictionary"))
    v4 = "r+";
  else
    v4 = "r";
  v5 = (MeCab::Dictionary *)operator new();
  MeCab::Dictionary::Dictionary(v5);
  *(_QWORD *)(a1 + 56) = v5;
  std::string::basic_string[abi:ne180100]<0>(v177, "unk.dic");
  MeCab::create_filename((uint64_t)&v180, (uint64_t)v177, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &__p;
  else
    v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v7 = MeCab::Dictionary::open(v5, (std::string::value_type *)v6, v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (((char)v178 & 0x80000000) == 0)
  {
    if ((v7 & 1) != 0)
      goto LABEL_12;
    goto LABEL_35;
  }
  operator delete(v177[0]);
  if ((v7 & 1) == 0)
  {
LABEL_35:
    std::ios_base::clear((std::ios_base *)(a1 + 976 + *(_QWORD *)(*(_QWORD *)(a1 + 976) - 24)), 0);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 976), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/tokenizer.cpp", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"(", 1);
    v29 = (_QWORD *)std::ostream::operator<<();
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)") [", 3);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"unkdic_->open(create_filename(prefix, UNK_DIC_FILE).c_str(), mode)", 66);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"] ", 2);
    v33 = (char *)MeCab::whatlog::str((MeCab::whatlog *)(*(_QWORD *)(a1 + 56) + 432));
    std::string::basic_string[abi:ne180100]<0>(&__p, v33);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = &__p;
    else
      v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v35 = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v34, v35);
    goto LABEL_50;
  }
LABEL_12:
  v8 = operator new();
  MeCab::Dictionary::Dictionary((MeCab::Dictionary *)v8);
  std::string::basic_string[abi:ne180100]<0>(v177, "sys.dic");
  MeCab::create_filename((uint64_t)&v180, (uint64_t)v177, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &__p;
  else
    v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v11 = MeCab::Dictionary::open((MeCab::Dictionary *)v8, (std::string::value_type *)v9, v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (((char)v178 & 0x80000000) == 0)
  {
    if ((v11 & 1) != 0)
      goto LABEL_19;
    goto LABEL_43;
  }
  operator delete(v177[0]);
  if ((v11 & 1) == 0)
  {
LABEL_43:
    std::ios_base::clear((std::ios_base *)(a1 + 976 + *(_QWORD *)(*(_QWORD *)(a1 + 976) - 24)), 0);
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 976), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/tokenizer.cpp", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"(", 1);
    v37 = (_QWORD *)std::ostream::operator<<();
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)") [", 3);
    v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"sysdic->open(create_filename(prefix, SYS_DIC_FILE).c_str(), mode)", 65);
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"] ", 2);
    v41 = (char *)MeCab::whatlog::str((MeCab::whatlog *)(v8 + 432));
    std::string::basic_string[abi:ne180100]<0>(&__p, v41);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = &__p;
    else
      v42 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v43 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v43 = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v42, v43);
    goto LABEL_50;
  }
LABEL_19:
  if (*(_DWORD *)(v8 + 388))
  {
    std::ios_base::clear((std::ios_base *)(a1 + 976 + *(_QWORD *)(*(_QWORD *)(a1 + 976) - 24)), 0);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 976), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/tokenizer.cpp", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"(", 1);
    v13 = (_QWORD *)std::ostream::operator<<();
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)") [", 3);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"sysdic->type() == 0", 19);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"] ", 2);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"not a system dictionary: ", 25);
    if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v180;
    else
      v18 = (std::string *)v180.__r_.__value_.__r.__words[0];
    if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = HIBYTE(v180.__r_.__value_.__r.__words[2]);
    else
      v19 = v180.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
LABEL_52:
    v44 = 0;
    goto LABEL_53;
  }
  *(_QWORD *)(a1 + 64) = v8;
  *(_DWORD *)(a1 + 664) = MeCab::decode_charset(*(MeCab **)(v8 + 376), v10);
  v47 = *(uint64_t **)(a1 + 16);
  v46 = *(_QWORD *)(a1 + 24);
  if ((unint64_t)v47 >= v46)
  {
    v49 = *(_QWORD *)(a1 + 8);
    v50 = ((uint64_t)v47 - v49) >> 3;
    if ((unint64_t)(v50 + 1) >> 61)
      goto LABEL_210;
    v51 = v46 - v49;
    v52 = v51 >> 2;
    if (v51 >> 2 <= (unint64_t)(v50 + 1))
      v52 = v50 + 1;
    if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
      v53 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v53 = v52;
    if (v53)
      v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mecab_learner_path_t *>>(v53);
    else
      v54 = 0;
    v55 = (uint64_t *)(v53 + 8 * v50);
    v56 = v53 + 8 * v54;
    *v55 = v8;
    v48 = v55 + 1;
    v58 = *(char **)(a1 + 8);
    v57 = *(char **)(a1 + 16);
    if (v57 != v58)
    {
      do
      {
        v59 = *((_QWORD *)v57 - 1);
        v57 -= 8;
        *--v55 = v59;
      }
      while (v57 != v58);
      v57 = *(char **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 8) = v55;
    *(_QWORD *)(a1 + 16) = v48;
    *(_QWORD *)(a1 + 24) = v56;
    if (v57)
      operator delete(v57);
  }
  else
  {
    *v47 = v8;
    v48 = v47 + 1;
  }
  *(_QWORD *)(a1 + 16) = v48;
  v61 = *(uint64_t **)(a1 + 40);
  v60 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)v61 >= v60)
  {
    v63 = *(_QWORD *)(a1 + 32);
    v64 = ((uint64_t)v61 - v63) >> 3;
    if (!((unint64_t)(v64 + 1) >> 61))
    {
      v65 = v60 - v63;
      v66 = v65 >> 2;
      if (v65 >> 2 <= (unint64_t)(v64 + 1))
        v66 = v64 + 1;
      if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
        v67 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v67 = v66;
      if (v67)
        v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mecab_learner_path_t *>>(v67);
      else
        v68 = 0;
      v69 = (uint64_t *)(v67 + 8 * v64);
      v70 = v67 + 8 * v68;
      *v69 = v8;
      v62 = v69 + 1;
      v72 = *(char **)(a1 + 32);
      v71 = *(char **)(a1 + 40);
      if (v71 != v72)
      {
        do
        {
          v73 = *((_QWORD *)v71 - 1);
          v71 -= 8;
          *--v69 = v73;
        }
        while (v71 != v72);
        v71 = *(char **)(a1 + 32);
      }
      *(_QWORD *)(a1 + 32) = v69;
      *(_QWORD *)(a1 + 40) = v62;
      *(_QWORD *)(a1 + 48) = v70;
      if (v71)
        operator delete(v71);
      goto LABEL_88;
    }
LABEL_210:
    std::vector<char *>::__throw_length_error[abi:ne180100]();
  }
  *v61 = v8;
  v62 = v61 + 1;
LABEL_88:
  *(_QWORD *)(a1 + 40) = v62;
  MeCab::Param::get<std::string>((uint64_t)a2, "userdic", &__p);
  v74 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v74 = __p.__r_.__value_.__l.__size_;
  if (!v74)
    goto LABEL_166;
  v75 = (char *)operator new[]();
  v176 = v75;
  v76 = operator new[]();
  v77 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? &__p
      : (std::string *)__p.__r_.__value_.__r.__words[0];
  v78 = strncpy(v75, (const char *)v77, 8uLL);
  v79 = strlen(v78);
  if (v79 < 1)
    goto LABEL_154;
  v80 = 0;
  v81 = (unint64_t)&v75[v79];
  v82 = 8;
  v83 = (_QWORD *)v76;
  do
  {
    v84 = v82;
    for (i = v75; ; ++i)
    {
      v86 = *i;
      if (v86 != 9 && v86 != 32)
        break;
      ++v75;
    }
    if (v86 == 34)
    {
      v87 = (unsigned __int8 *)++i;
      v88 = i;
      if ((unint64_t)i < v81)
      {
        v87 = (unsigned __int8 *)i;
        v88 = i;
        do
        {
          v89 = *v88;
          if (v89 == 34)
          {
            v90 = *++v88;
            if (v90 != 34)
              break;
          }
          *v87++ = v89;
          ++v88;
        }
        while ((unint64_t)v88 < v81);
      }
      v91 = (unsigned __int8 *)memchr(v88, 44, v81 - (_QWORD)v88);
      if (v91)
        v92 = v91;
      else
        v92 = (unsigned __int8 *)v81;
    }
    else
    {
      v93 = memchr(i, 44, v81 - (_QWORD)v75);
      if (v93)
        v94 = v93;
      else
        v94 = (_BYTE *)v81;
      v92 = (unsigned __int8 *)&i[v94 - v75];
      v87 = v92;
    }
    v82 = v84 - 1;
    if (v84 < 2)
    {
      *v83 = i;
      ++v80;
      if (v84 == 1)
        break;
    }
    else
    {
      *v87 = 0;
      *v83 = i;
      ++v80;
    }
    ++v83;
    v75 = (char *)(v92 + 1);
  }
  while ((unint64_t)(v92 + 1) < v81);
  if (v80)
  {
    v95 = 0;
    v96 = 1;
    while (1)
    {
      v97 = (_DWORD *)operator new();
      MeCab::Dictionary::Dictionary((MeCab::Dictionary *)v97);
      if ((MeCab::Dictionary::open((MeCab::Dictionary *)v97, *(std::string::value_type **)(v76 + 8 * v95), v4) & 1) == 0)
        break;
      if (v97[97] != 1)
      {
        std::ios_base::clear((std::ios_base *)(a1 + 976 + *(_QWORD *)(*(_QWORD *)(a1 + 976) - 24)), 0);
        v133 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 976), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/tokenizer.cpp", 63);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)"(", 1);
        v134 = (_QWORD *)std::ostream::operator<<();
        v135 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, (uint64_t)") [", 3);
        v136 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)"d->type() == MECAB_USR_DIC", 26);
        v137 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)"] ", 2);
        v138 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)"not a user dictionary: ", 23);
        v139 = strlen(*(const char **)(v76 + 8 * v95));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, *(_QWORD *)(v76 + 8 * v95), v139);
        goto LABEL_164;
      }
      v99 = *(_QWORD **)(a1 + 16);
      v98 = *(_QWORD *)(a1 + 24);
      if ((unint64_t)v99 >= v98)
      {
        v101 = *(_QWORD *)(a1 + 8);
        v102 = ((uint64_t)v99 - v101) >> 3;
        if ((unint64_t)(v102 + 1) >> 61)
          goto LABEL_208;
        v103 = v98 - v101;
        v104 = v103 >> 2;
        if (v103 >> 2 <= (unint64_t)(v102 + 1))
          v104 = v102 + 1;
        if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF8)
          v105 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v105 = v104;
        if (v105)
          v105 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mecab_learner_path_t *>>(v105);
        else
          v106 = 0;
        v107 = (_QWORD *)(v105 + 8 * v102);
        *v107 = v97;
        v100 = v107 + 1;
        v109 = *(char **)(a1 + 8);
        v108 = *(char **)(a1 + 16);
        if (v108 != v109)
        {
          do
          {
            v110 = *((_QWORD *)v108 - 1);
            v108 -= 8;
            *--v107 = v110;
          }
          while (v108 != v109);
          v108 = *(char **)(a1 + 8);
        }
        *(_QWORD *)(a1 + 8) = v107;
        *(_QWORD *)(a1 + 16) = v100;
        *(_QWORD *)(a1 + 24) = v105 + 8 * v106;
        if (v108)
          operator delete(v108);
      }
      else
      {
        *v99 = v97;
        v100 = v99 + 1;
      }
      *(_QWORD *)(a1 + 16) = v100;
      v112 = *(_QWORD **)(a1 + 40);
      v111 = *(_QWORD *)(a1 + 48);
      if ((unint64_t)v112 >= v111)
      {
        v114 = *(_QWORD *)(a1 + 32);
        v115 = ((uint64_t)v112 - v114) >> 3;
        if ((unint64_t)(v115 + 1) >> 61)
LABEL_208:
          std::vector<char *>::__throw_length_error[abi:ne180100]();
        v116 = v111 - v114;
        v117 = v116 >> 2;
        if (v116 >> 2 <= (unint64_t)(v115 + 1))
          v117 = v115 + 1;
        if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8)
          v118 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v118 = v117;
        if (v118)
          v118 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mecab_learner_path_t *>>(v118);
        else
          v119 = 0;
        v120 = (_QWORD *)(v118 + 8 * v115);
        *v120 = v97;
        v113 = v120 + 1;
        v122 = *(char **)(a1 + 32);
        v121 = *(char **)(a1 + 40);
        if (v121 != v122)
        {
          do
          {
            v123 = *((_QWORD *)v121 - 1);
            v121 -= 8;
            *--v120 = v123;
          }
          while (v121 != v122);
          v121 = *(char **)(a1 + 32);
        }
        *(_QWORD *)(a1 + 32) = v120;
        *(_QWORD *)(a1 + 40) = v113;
        *(_QWORD *)(a1 + 48) = v118 + 8 * v119;
        if (v121)
          operator delete(v121);
      }
      else
      {
        *v112 = v97;
        v113 = v112 + 1;
      }
      *(_QWORD *)(a1 + 40) = v113;
      v96 = ++v95 < v80;
      if (v95 == v80)
        goto LABEL_154;
    }
    std::ios_base::clear((std::ios_base *)(a1 + 976 + *(_QWORD *)(*(_QWORD *)(a1 + 976) - 24)), 0);
    v125 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 976), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/tokenizer.cpp", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)"(", 1);
    v126 = (_QWORD *)std::ostream::operator<<();
    v127 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)") [", 3);
    v128 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)"d->open(_dic[i], mode)", 22);
    v129 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)"] ", 2);
    v130 = (char *)MeCab::whatlog::str((MeCab::whatlog *)(v97 + 108));
    std::string::basic_string[abi:ne180100]<0>(v177, v130);
    if ((v178 & 0x80u) == 0)
      v131 = v177;
    else
      v131 = (void **)v177[0];
    if ((v178 & 0x80u) == 0)
      v132 = v178;
    else
      v132 = (uint64_t)v177[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)v131, v132);
    if ((char)v178 < 0)
      operator delete(v177[0]);
LABEL_164:
    v124 = 1;
  }
  else
  {
LABEL_154:
    v96 = 0;
    v124 = 0;
  }
  MEMORY[0x20BD06378](v76, 0x10C80436913F5);
  MEMORY[0x20BD06378](v176, 0x1000C8077774924);
  if (!v96)
LABEL_166:
    v124 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v124)
    goto LABEL_52;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a1 + 224);
  v140 = *(_QWORD *)(a1 + 632);
  if (*(_QWORD *)(a1 + 640) != v140)
  {
    v141 = 0;
    while (1)
    {
      v142 = *(char **)(v140 + 8 * v141);
      MeCab::Dictionary::exactMatchSearch(*(MeCab::Dictionary **)(a1 + 56), v142);
      if (!v143)
        break;
      v144 = v143;
      v145 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 352) + 12 * (v143 >> 8);
      v147 = *(uint64_t **)(a1 + 232);
      v146 = *(_QWORD *)(a1 + 240);
      if ((unint64_t)v147 >= v146)
      {
        v149 = *(_QWORD *)(a1 + 224);
        v150 = ((uint64_t)v147 - v149) >> 4;
        v151 = v150 + 1;
        if ((unint64_t)(v150 + 1) >> 60)
          std::vector<char *>::__throw_length_error[abi:ne180100]();
        v152 = v146 - v149;
        if (v152 >> 3 > v151)
          v151 = v152 >> 3;
        if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFF0)
          v153 = 0xFFFFFFFFFFFFFFFLL;
        else
          v153 = v151;
        if (v153)
          v153 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<mecab_token_t const*,unsigned long>>>(v153);
        else
          v154 = 0;
        v155 = (uint64_t *)(v153 + 16 * v150);
        *v155 = v145;
        v155[1] = v144;
        v157 = *(char **)(a1 + 224);
        v156 = *(char **)(a1 + 232);
        v158 = v155;
        if (v156 != v157)
        {
          do
          {
            *((_OWORD *)v158 - 1) = *((_OWORD *)v156 - 1);
            v158 -= 2;
            v156 -= 16;
          }
          while (v156 != v157);
          v156 = *(char **)(a1 + 224);
        }
        v148 = v155 + 2;
        *(_QWORD *)(a1 + 224) = v158;
        *(_QWORD *)(a1 + 232) = v155 + 2;
        *(_QWORD *)(a1 + 240) = v153 + 16 * v154;
        if (v156)
          operator delete(v156);
      }
      else
      {
        *v147 = v145;
        v147[1] = v143;
        v148 = v147 + 2;
      }
      *(_QWORD *)(a1 + 232) = v148;
      if (!strcmp("THAI", v142))
      {
        *(_QWORD *)(a1 + 1264) = v141;
        *(_BYTE *)(a1 + 1272) = 1;
      }
      ++v141;
      v140 = *(_QWORD *)(a1 + 632);
      if (v141 >= (*(_QWORD *)(a1 + 640) - v140) >> 3)
        goto LABEL_192;
    }
    std::ios_base::clear((std::ios_base *)(a1 + 976 + *(_QWORD *)(*(_QWORD *)(a1 + 976) - 24)), 0);
    v164 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 976), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/tokenizer.cpp", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)"(", 1);
    v165 = (_QWORD *)std::ostream::operator<<();
    v166 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v165, (uint64_t)") [", 3);
    v167 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v166, (uint64_t)"n.value != 0", 12);
    v168 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v167, (uint64_t)"] ", 2);
    v169 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v168, (uint64_t)"cannot find UNK category: ", 26);
    v170 = strlen(v142);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v169, (uint64_t)v142, v170);
    goto LABEL_52;
  }
LABEL_192:
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(*(_QWORD *)(a1 + 656) + 128);
  MeCab::Param::get<std::string>((uint64_t)a2, "bos-feature", &__p);
  MeCab::scoped_string::reset_string(a1 + 80, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v159 = MeCab::Param::get<std::string>((uint64_t)a2, "unk-feature", &__p);
  v160 = *(_QWORD *)(a1 + 104);
  if (v160)
    MEMORY[0x20BD06378](v160, 0x1000C8077774924, v159);
  *(_QWORD *)(a1 + 104) = 0;
  v161 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v161 = __p.__r_.__value_.__l.__size_;
  if (v161)
    MeCab::scoped_string::reset_string(a1 + 96, (uint64_t)&__p);
  v44 = **(_BYTE **)(a1 + 88) != 0;
  if (**(_BYTE **)(a1 + 88))
  {
    v162 = MeCab::Param::get<unsigned long>((uint64_t)a2, "max-grouping-size");
    v163 = 24;
    if (v162)
      v163 = v162;
    *(_QWORD *)(a1 + 960) = v163;
  }
  else
  {
    std::ios_base::clear((std::ios_base *)(a1 + 976 + *(_QWORD *)(*(_QWORD *)(a1 + 976) - 24)), 0);
    v171 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 976), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/tokenizer.cpp", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v171, (uint64_t)"(", 1);
    v172 = (_QWORD *)std::ostream::operator<<();
    v173 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v172, (uint64_t)") [", 3);
    v174 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v173, (uint64_t)"*bos_feature_ != '\\0'", 21);
    v175 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v174, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v175, (uint64_t)"bos-feature is undefined in dicrc", 33);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_53:
  if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v180.__r_.__value_.__l.__data_);
  return v44;
}

void sub_2083D807C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x20BD06378](v27, 0x10C80436913F5);
  MEMORY[0x20BD06378](a9, 0x1000C8077774924);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(a1);
}

uint64_t MeCab::TokenizerImpl<mecab_learner_node_t,mecab_learner_path_t>::TokenizerImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &off_24C09C2C0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  MeCab::scoped_string::scoped_string((MeCab::scoped_string *)(a1 + 80));
  MeCab::scoped_string::scoped_string((MeCab::scoped_string *)(a1 + 96));
  *(_QWORD *)(a1 + 112) = &off_24C09C5A0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 512;
  *(_QWORD *)(a1 + 168) = &off_24C09C5E0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 4;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  v2 = operator new[]();
  for (i = 0; i != 0x2000; i += 16)
  {
    v4 = v2 + i;
    *(_WORD *)v4 = 0;
    *(_QWORD *)(v4 + 4) = 0;
    *(_DWORD *)(v4 + 12) = 0;
  }
  *(_QWORD *)(a1 + 248) = &off_24C09C200;
  *(_QWORD *)(a1 + 256) = v2;
  *(_QWORD *)(a1 + 264) = 0;
  MeCab::CharProperty::CharProperty((MeCab::CharProperty *)(a1 + 280));
  *(_QWORD *)(a1 + 960) = 0;
  *(_DWORD *)(a1 + 968) = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 976);
  *(_BYTE *)(a1 + 1272) = 0;
  *(_QWORD *)(a1 + 1240) = 0;
  *(_QWORD *)(a1 + 1256) = 0;
  *(_QWORD *)(a1 + 1248) = 0;
  *(_BYTE *)(a1 + 1264) = 0;
  return a1;
}

void sub_2083D8324(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  void **v5;
  void **v6;
  uint64_t v7;
  void **v8;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;

  v8 = v4;
  MeCab::CharProperty::~CharProperty(v8);
  v1[31] = v7;
  v10 = v1[32];
  if (v10)
    MEMORY[0x20BD06378](v10, 0x1000C8094CA146DLL);
  v11 = *v6;
  if (*v6)
  {
    v1[29] = v11;
    operator delete(v11);
  }
  MeCab::FreeList<mecab_dictionary_info_t>::~FreeList(v3);
  MeCab::FreeList<mecab_learner_node_t>::~FreeList(v2);
  v1[12] = &off_24C09C220;
  v12 = v1[13];
  if (v12)
    MEMORY[0x20BD06378](v12, 0x1000C8077774924);
  v1[10] = &off_24C09C220;
  v13 = v1[11];
  if (v13)
    MEMORY[0x20BD06378](v13, 0x1000C8077774924);
  v14 = (void *)v1[4];
  if (v14)
  {
    v1[5] = v14;
    operator delete(v14);
  }
  v15 = *v5;
  if (*v5)
  {
    v1[2] = v15;
    operator delete(v15);
  }
  _Unwind_Resume(a1);
}

BOOL MeCab::TokenizerImpl<mecab_learner_node_t,mecab_learner_path_t>::open(uint64_t a1, const MeCab::Param *a2)
{
  const char *v4;
  MeCab::Dictionary *v5;
  std::string *v6;
  char v7;
  uint64_t v8;
  std::string *v9;
  const char *v10;
  char v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  std::string *v18;
  std::string::size_type v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  char *v33;
  std::string *v34;
  std::string::size_type v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  char *v41;
  std::string *v42;
  std::string::size_type v43;
  _BOOL8 v44;
  unint64_t v46;
  uint64_t *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  std::string::size_type v74;
  char *v75;
  uint64_t v76;
  std::string *v77;
  char *v78;
  int64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  char *i;
  int v86;
  unsigned __int8 *v87;
  char *v88;
  int v89;
  int v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  _BYTE *v93;
  _BYTE *v94;
  uint64_t v95;
  BOOL v96;
  _DWORD *v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  int v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  char *v130;
  void **v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  size_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t *v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  char *v156;
  char *v157;
  uint64_t *v158;
  double v159;
  uint64_t v160;
  std::string::size_type v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  size_t v170;
  _QWORD *v171;
  _QWORD *v172;
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v175;
  char *v176;
  void *v177[2];
  unsigned __int8 v178;
  std::string __p;
  std::string v180;

  MeCab::TokenizerImpl<mecab_node_t,mecab_path_t>::close((_QWORD *)a1);
  MeCab::Param::get<std::string>((uint64_t)a2, "dicdir", &v180);
  if (!MeCab::CharProperty::open((MeCab::CharProperty *)(a1 + 280), a2))
  {
    std::ios_base::clear((std::ios_base *)(a1 + 976 + *(_QWORD *)(*(_QWORD *)(a1 + 976) - 24)), 0);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 976), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/tokenizer.cpp", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"(", 1);
    v21 = (_QWORD *)std::ostream::operator<<();
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)") [", 3);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"property_.open(param)", 21);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"] ", 2);
    v25 = (char *)MeCab::whatlog::str((MeCab::whatlog *)(a1 + 672));
    std::string::basic_string[abi:ne180100]<0>(&__p, v25);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)p_p, size);
LABEL_50:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_52;
  }
  if (MeCab::Param::get<BOOL>((uint64_t)a2, "open-mutable-dictionary"))
    v4 = "r+";
  else
    v4 = "r";
  v5 = (MeCab::Dictionary *)operator new();
  MeCab::Dictionary::Dictionary(v5);
  *(_QWORD *)(a1 + 56) = v5;
  std::string::basic_string[abi:ne180100]<0>(v177, "unk.dic");
  MeCab::create_filename((uint64_t)&v180, (uint64_t)v177, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &__p;
  else
    v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v7 = MeCab::Dictionary::open(v5, (std::string::value_type *)v6, v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (((char)v178 & 0x80000000) == 0)
  {
    if ((v7 & 1) != 0)
      goto LABEL_12;
    goto LABEL_35;
  }
  operator delete(v177[0]);
  if ((v7 & 1) == 0)
  {
LABEL_35:
    std::ios_base::clear((std::ios_base *)(a1 + 976 + *(_QWORD *)(*(_QWORD *)(a1 + 976) - 24)), 0);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 976), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/tokenizer.cpp", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"(", 1);
    v29 = (_QWORD *)std::ostream::operator<<();
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)") [", 3);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"unkdic_->open(create_filename(prefix, UNK_DIC_FILE).c_str(), mode)", 66);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"] ", 2);
    v33 = (char *)MeCab::whatlog::str((MeCab::whatlog *)(*(_QWORD *)(a1 + 56) + 432));
    std::string::basic_string[abi:ne180100]<0>(&__p, v33);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = &__p;
    else
      v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v35 = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v34, v35);
    goto LABEL_50;
  }
LABEL_12:
  v8 = operator new();
  MeCab::Dictionary::Dictionary((MeCab::Dictionary *)v8);
  std::string::basic_string[abi:ne180100]<0>(v177, "sys.dic");
  MeCab::create_filename((uint64_t)&v180, (uint64_t)v177, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &__p;
  else
    v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v11 = MeCab::Dictionary::open((MeCab::Dictionary *)v8, (std::string::value_type *)v9, v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (((char)v178 & 0x80000000) == 0)
  {
    if ((v11 & 1) != 0)
      goto LABEL_19;
    goto LABEL_43;
  }
  operator delete(v177[0]);
  if ((v11 & 1) == 0)
  {
LABEL_43:
    std::ios_base::clear((std::ios_base *)(a1 + 976 + *(_QWORD *)(*(_QWORD *)(a1 + 976) - 24)), 0);
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 976), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/tokenizer.cpp", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"(", 1);
    v37 = (_QWORD *)std::ostream::operator<<();
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)") [", 3);
    v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"sysdic->open(create_filename(prefix, SYS_DIC_FILE).c_str(), mode)", 65);
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"] ", 2);
    v41 = (char *)MeCab::whatlog::str((MeCab::whatlog *)(v8 + 432));
    std::string::basic_string[abi:ne180100]<0>(&__p, v41);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = &__p;
    else
      v42 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v43 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v43 = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v42, v43);
    goto LABEL_50;
  }
LABEL_19:
  if (*(_DWORD *)(v8 + 388))
  {
    std::ios_base::clear((std::ios_base *)(a1 + 976 + *(_QWORD *)(*(_QWORD *)(a1 + 976) - 24)), 0);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 976), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/tokenizer.cpp", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"(", 1);
    v13 = (_QWORD *)std::ostream::operator<<();
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)") [", 3);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"sysdic->type() == 0", 19);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"] ", 2);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"not a system dictionary: ", 25);
    if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v180;
    else
      v18 = (std::string *)v180.__r_.__value_.__r.__words[0];
    if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = HIBYTE(v180.__r_.__value_.__r.__words[2]);
    else
      v19 = v180.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
LABEL_52:
    v44 = 0;
    goto LABEL_53;
  }
  *(_QWORD *)(a1 + 64) = v8;
  *(_DWORD *)(a1 + 664) = MeCab::decode_charset(*(MeCab **)(v8 + 376), v10);
  v47 = *(uint64_t **)(a1 + 16);
  v46 = *(_QWORD *)(a1 + 24);
  if ((unint64_t)v47 >= v46)
  {
    v49 = *(_QWORD *)(a1 + 8);
    v50 = ((uint64_t)v47 - v49) >> 3;
    if ((unint64_t)(v50 + 1) >> 61)
      goto LABEL_210;
    v51 = v46 - v49;
    v52 = v51 >> 2;
    if (v51 >> 2 <= (unint64_t)(v50 + 1))
      v52 = v50 + 1;
    if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
      v53 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v53 = v52;
    if (v53)
      v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mecab_learner_path_t *>>(v53);
    else
      v54 = 0;
    v55 = (uint64_t *)(v53 + 8 * v50);
    v56 = v53 + 8 * v54;
    *v55 = v8;
    v48 = v55 + 1;
    v58 = *(char **)(a1 + 8);
    v57 = *(char **)(a1 + 16);
    if (v57 != v58)
    {
      do
      {
        v59 = *((_QWORD *)v57 - 1);
        v57 -= 8;
        *--v55 = v59;
      }
      while (v57 != v58);
      v57 = *(char **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 8) = v55;
    *(_QWORD *)(a1 + 16) = v48;
    *(_QWORD *)(a1 + 24) = v56;
    if (v57)
      operator delete(v57);
  }
  else
  {
    *v47 = v8;
    v48 = v47 + 1;
  }
  *(_QWORD *)(a1 + 16) = v48;
  v61 = *(uint64_t **)(a1 + 40);
  v60 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)v61 >= v60)
  {
    v63 = *(_QWORD *)(a1 + 32);
    v64 = ((uint64_t)v61 - v63) >> 3;
    if (!((unint64_t)(v64 + 1) >> 61))
    {
      v65 = v60 - v63;
      v66 = v65 >> 2;
      if (v65 >> 2 <= (unint64_t)(v64 + 1))
        v66 = v64 + 1;
      if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
        v67 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v67 = v66;
      if (v67)
        v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mecab_learner_path_t *>>(v67);
      else
        v68 = 0;
      v69 = (uint64_t *)(v67 + 8 * v64);
      v70 = v67 + 8 * v68;
      *v69 = v8;
      v62 = v69 + 1;
      v72 = *(char **)(a1 + 32);
      v71 = *(char **)(a1 + 40);
      if (v71 != v72)
      {
        do
        {
          v73 = *((_QWORD *)v71 - 1);
          v71 -= 8;
          *--v69 = v73;
        }
        while (v71 != v72);
        v71 = *(char **)(a1 + 32);
      }
      *(_QWORD *)(a1 + 32) = v69;
      *(_QWORD *)(a1 + 40) = v62;
      *(_QWORD *)(a1 + 48) = v70;
      if (v71)
        operator delete(v71);
      goto LABEL_88;
    }
LABEL_210:
    std::vector<char *>::__throw_length_error[abi:ne180100]();
  }
  *v61 = v8;
  v62 = v61 + 1;
LABEL_88:
  *(_QWORD *)(a1 + 40) = v62;
  MeCab::Param::get<std::string>((uint64_t)a2, "userdic", &__p);
  v74 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v74 = __p.__r_.__value_.__l.__size_;
  if (!v74)
    goto LABEL_166;
  v75 = (char *)operator new[]();
  v176 = v75;
  v76 = operator new[]();
  v77 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? &__p
      : (std::string *)__p.__r_.__value_.__r.__words[0];
  v78 = strncpy(v75, (const char *)v77, 8uLL);
  v79 = strlen(v78);
  if (v79 < 1)
    goto LABEL_154;
  v80 = 0;
  v81 = (unint64_t)&v75[v79];
  v82 = 8;
  v83 = (_QWORD *)v76;
  do
  {
    v84 = v82;
    for (i = v75; ; ++i)
    {
      v86 = *i;
      if (v86 != 9 && v86 != 32)
        break;
      ++v75;
    }
    if (v86 == 34)
    {
      v87 = (unsigned __int8 *)++i;
      v88 = i;
      if ((unint64_t)i < v81)
      {
        v87 = (unsigned __int8 *)i;
        v88 = i;
        do
        {
          v89 = *v88;
          if (v89 == 34)
          {
            v90 = *++v88;
            if (v90 != 34)
              break;
          }
          *v87++ = v89;
          ++v88;
        }
        while ((unint64_t)v88 < v81);
      }
      v91 = (unsigned __int8 *)memchr(v88, 44, v81 - (_QWORD)v88);
      if (v91)
        v92 = v91;
      else
        v92 = (unsigned __int8 *)v81;
    }
    else
    {
      v93 = memchr(i, 44, v81 - (_QWORD)v75);
      if (v93)
        v94 = v93;
      else
        v94 = (_BYTE *)v81;
      v92 = (unsigned __int8 *)&i[v94 - v75];
      v87 = v92;
    }
    v82 = v84 - 1;
    if (v84 < 2)
    {
      *v83 = i;
      ++v80;
      if (v84 == 1)
        break;
    }
    else
    {
      *v87 = 0;
      *v83 = i;
      ++v80;
    }
    ++v83;
    v75 = (char *)(v92 + 1);
  }
  while ((unint64_t)(v92 + 1) < v81);
  if (v80)
  {
    v95 = 0;
    v96 = 1;
    while (1)
    {
      v97 = (_DWORD *)operator new();
      MeCab::Dictionary::Dictionary((MeCab::Dictionary *)v97);
      if ((MeCab::Dictionary::open((MeCab::Dictionary *)v97, *(std::string::value_type **)(v76 + 8 * v95), v4) & 1) == 0)
        break;
      if (v97[97] != 1)
      {
        std::ios_base::clear((std::ios_base *)(a1 + 976 + *(_QWORD *)(*(_QWORD *)(a1 + 976) - 24)), 0);
        v133 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 976), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/tokenizer.cpp", 63);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)"(", 1);
        v134 = (_QWORD *)std::ostream::operator<<();
        v135 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, (uint64_t)") [", 3);
        v136 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)"d->type() == MECAB_USR_DIC", 26);
        v137 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)"] ", 2);
        v138 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)"not a user dictionary: ", 23);
        v139 = strlen(*(const char **)(v76 + 8 * v95));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, *(_QWORD *)(v76 + 8 * v95), v139);
        goto LABEL_164;
      }
      v99 = *(_QWORD **)(a1 + 16);
      v98 = *(_QWORD *)(a1 + 24);
      if ((unint64_t)v99 >= v98)
      {
        v101 = *(_QWORD *)(a1 + 8);
        v102 = ((uint64_t)v99 - v101) >> 3;
        if ((unint64_t)(v102 + 1) >> 61)
          goto LABEL_208;
        v103 = v98 - v101;
        v104 = v103 >> 2;
        if (v103 >> 2 <= (unint64_t)(v102 + 1))
          v104 = v102 + 1;
        if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF8)
          v105 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v105 = v104;
        if (v105)
          v105 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mecab_learner_path_t *>>(v105);
        else
          v106 = 0;
        v107 = (_QWORD *)(v105 + 8 * v102);
        *v107 = v97;
        v100 = v107 + 1;
        v109 = *(char **)(a1 + 8);
        v108 = *(char **)(a1 + 16);
        if (v108 != v109)
        {
          do
          {
            v110 = *((_QWORD *)v108 - 1);
            v108 -= 8;
            *--v107 = v110;
          }
          while (v108 != v109);
          v108 = *(char **)(a1 + 8);
        }
        *(_QWORD *)(a1 + 8) = v107;
        *(_QWORD *)(a1 + 16) = v100;
        *(_QWORD *)(a1 + 24) = v105 + 8 * v106;
        if (v108)
          operator delete(v108);
      }
      else
      {
        *v99 = v97;
        v100 = v99 + 1;
      }
      *(_QWORD *)(a1 + 16) = v100;
      v112 = *(_QWORD **)(a1 + 40);
      v111 = *(_QWORD *)(a1 + 48);
      if ((unint64_t)v112 >= v111)
      {
        v114 = *(_QWORD *)(a1 + 32);
        v115 = ((uint64_t)v112 - v114) >> 3;
        if ((unint64_t)(v115 + 1) >> 61)
LABEL_208:
          std::vector<char *>::__throw_length_error[abi:ne180100]();
        v116 = v111 - v114;
        v117 = v116 >> 2;
        if (v116 >> 2 <= (unint64_t)(v115 + 1))
          v117 = v115 + 1;
        if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8)
          v118 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v118 = v117;
        if (v118)
          v118 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<mecab_learner_path_t *>>(v118);
        else
          v119 = 0;
        v120 = (_QWORD *)(v118 + 8 * v115);
        *v120 = v97;
        v113 = v120 + 1;
        v122 = *(char **)(a1 + 32);
        v121 = *(char **)(a1 + 40);
        if (v121 != v122)
        {
          do
          {
            v123 = *((_QWORD *)v121 - 1);
            v121 -= 8;
            *--v120 = v123;
          }
          while (v121 != v122);
          v121 = *(char **)(a1 + 32);
        }
        *(_QWORD *)(a1 + 32) = v120;
        *(_QWORD *)(a1 + 40) = v113;
        *(_QWORD *)(a1 + 48) = v118 + 8 * v119;
        if (v121)
          operator delete(v121);
      }
      else
      {
        *v112 = v97;
        v113 = v112 + 1;
      }
      *(_QWORD *)(a1 + 40) = v113;
      v96 = ++v95 < v80;
      if (v95 == v80)
        goto LABEL_154;
    }
    std::ios_base::clear((std::ios_base *)(a1 + 976 + *(_QWORD *)(*(_QWORD *)(a1 + 976) - 24)), 0);
    v125 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 976), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/tokenizer.cpp", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)"(", 1);
    v126 = (_QWORD *)std::ostream::operator<<();
    v127 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)") [", 3);
    v128 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)"d->open(_dic[i], mode)", 22);
    v129 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)"] ", 2);
    v130 = (char *)MeCab::whatlog::str((MeCab::whatlog *)(v97 + 108));
    std::string::basic_string[abi:ne180100]<0>(v177, v130);
    if ((v178 & 0x80u) == 0)
      v131 = v177;
    else
      v131 = (void **)v177[0];
    if ((v178 & 0x80u) == 0)
      v132 = v178;
    else
      v132 = (uint64_t)v177[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)v131, v132);
    if ((char)v178 < 0)
      operator delete(v177[0]);
LABEL_164:
    v124 = 1;
  }
  else
  {
LABEL_154:
    v96 = 0;
    v124 = 0;
  }
  MEMORY[0x20BD06378](v76, 0x10C80436913F5);
  MEMORY[0x20BD06378](v176, 0x1000C8077774924);
  if (!v96)
LABEL_166:
    v124 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v124)
    goto LABEL_52;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a1 + 224);
  v140 = *(_QWORD *)(a1 + 632);
  if (*(_QWORD *)(a1 + 640) != v140)
  {
    v141 = 0;
    while (1)
    {
      v142 = *(char **)(v140 + 8 * v141);
      MeCab::Dictionary::exactMatchSearch(*(MeCab::Dictionary **)(a1 + 56), v142);
      if (!v143)
        break;
      v144 = v143;
      v145 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 352) + 12 * (v143 >> 8);
      v147 = *(uint64_t **)(a1 + 232);
      v146 = *(_QWORD *)(a1 + 240);
      if ((unint64_t)v147 >= v146)
      {
        v149 = *(_QWORD *)(a1 + 224);
        v150 = ((uint64_t)v147 - v149) >> 4;
        v151 = v150 + 1;
        if ((unint64_t)(v150 + 1) >> 60)
          std::vector<char *>::__throw_length_error[abi:ne180100]();
        v152 = v146 - v149;
        if (v152 >> 3 > v151)
          v151 = v152 >> 3;
        if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFF0)
          v153 = 0xFFFFFFFFFFFFFFFLL;
        else
          v153 = v151;
        if (v153)
          v153 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<mecab_token_t const*,unsigned long>>>(v153);
        else
          v154 = 0;
        v155 = (uint64_t *)(v153 + 16 * v150);
        *v155 = v145;
        v155[1] = v144;
        v157 = *(char **)(a1 + 224);
        v156 = *(char **)(a1 + 232);
        v158 = v155;
        if (v156 != v157)
        {
          do
          {
            *((_OWORD *)v158 - 1) = *((_OWORD *)v156 - 1);
            v158 -= 2;
            v156 -= 16;
          }
          while (v156 != v157);
          v156 = *(char **)(a1 + 224);
        }
        v148 = v155 + 2;
        *(_QWORD *)(a1 + 224) = v158;
        *(_QWORD *)(a1 + 232) = v155 + 2;
        *(_QWORD *)(a1 + 240) = v153 + 16 * v154;
        if (v156)
          operator delete(v156);
      }
      else
      {
        *v147 = v145;
        v147[1] = v143;
        v148 = v147 + 2;
      }
      *(_QWORD *)(a1 + 232) = v148;
      if (!strcmp("THAI", v142))
      {
        *(_QWORD *)(a1 + 1264) = v141;
        *(_BYTE *)(a1 + 1272) = 1;
      }
      ++v141;
      v140 = *(_QWORD *)(a1 + 632);
      if (v141 >= (*(_QWORD *)(a1 + 640) - v140) >> 3)
        goto LABEL_192;
    }
    std::ios_base::clear((std::ios_base *)(a1 + 976 + *(_QWORD *)(*(_QWORD *)(a1 + 976) - 24)), 0);
    v164 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 976), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/tokenizer.cpp", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)"(", 1);
    v165 = (_QWORD *)std::ostream::operator<<();
    v166 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v165, (uint64_t)") [", 3);
    v167 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v166, (uint64_t)"n.value != 0", 12);
    v168 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v167, (uint64_t)"] ", 2);
    v169 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v168, (uint64_t)"cannot find UNK category: ", 26);
    v170 = strlen(v142);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v169, (uint64_t)v142, v170);
    goto LABEL_52;
  }
LABEL_192:
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(*(_QWORD *)(a1 + 656) + 128);
  MeCab::Param::get<std::string>((uint64_t)a2, "bos-feature", &__p);
  MeCab::scoped_string::reset_string(a1 + 80, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v159 = MeCab::Param::get<std::string>((uint64_t)a2, "unk-feature", &__p);
  v160 = *(_QWORD *)(a1 + 104);
  if (v160)
    MEMORY[0x20BD06378](v160, 0x1000C8077774924, v159);
  *(_QWORD *)(a1 + 104) = 0;
  v161 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v161 = __p.__r_.__value_.__l.__size_;
  if (v161)
    MeCab::scoped_string::reset_string(a1 + 96, (uint64_t)&__p);
  v44 = **(_BYTE **)(a1 + 88) != 0;
  if (**(_BYTE **)(a1 + 88))
  {
    v162 = MeCab::Param::get<unsigned long>((uint64_t)a2, "max-grouping-size");
    v163 = 24;
    if (v162)
      v163 = v162;
    *(_QWORD *)(a1 + 960) = v163;
  }
  else
  {
    std::ios_base::clear((std::ios_base *)(a1 + 976 + *(_QWORD *)(*(_QWORD *)(a1 + 976) - 24)), 0);
    v171 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 976), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/tokenizer.cpp", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v171, (uint64_t)"(", 1);
    v172 = (_QWORD *)std::ostream::operator<<();
    v173 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v172, (uint64_t)") [", 3);
    v174 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v173, (uint64_t)"*bos_feature_ != '\\0'", 21);
    v175 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v174, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v175, (uint64_t)"bos-feature is undefined in dicrc", 33);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_53:
  if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v180.__r_.__value_.__l.__data_);
  return v44;
}

void sub_2083D924C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x20BD06378](v27, 0x10C80436913F5);
  MEMORY[0x20BD06378](a9, 0x1000C8077774924);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<mecab_token_t const*,unsigned long>>>(unint64_t a1)
{
  if (a1 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a1);
}

uint64_t MeCab::Writer::writeLattice(int a1, MeCab::StringBuffer *this, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t *v6;
  const void *v7;
  size_t v8;
  MeCab::StringBuffer *v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a4 + 8);
  v6 = (uint64_t *)(v5 + 8);
  if (*(_QWORD *)(v5 + 8))
  {
    do
    {
      v7 = *(const void **)(v5 + 64);
      v8 = *(unsigned __int16 *)(v5 + 80);
      if (MeCab::StringBuffer::reserve(this, v8))
      {
        memcpy((void *)(*((_QWORD *)this + 3) + *((_QWORD *)this + 1)), v7, v8);
        *((_QWORD *)this + 1) += v8;
      }
      if (MeCab::StringBuffer::reserve(this, 1))
        *(_BYTE *)(*((_QWORD *)this + 3) + (*((_QWORD *)this + 1))++) = 9;
      v9 = MeCab::StringBuffer::write(this, *(const char **)(v5 + 72));
      if (MeCab::StringBuffer::reserve(v9, 1))
        *(_BYTE *)(*((_QWORD *)this + 3) + (*((_QWORD *)this + 1))++) = 10;
      v5 = *v6;
      v10 = *v6;
      v11 = *(_QWORD *)(v10 + 8);
      v6 = (uint64_t *)(v10 + 8);
    }
    while (v11);
  }
  MeCab::StringBuffer::write(this, "EOS\n");
  return 1;
}

uint64_t MeCab::Writer::open(MeCab::Writer *this, const MeCab::Param *a2)
{
  std::string::size_type size;
  std::string *v5;
  int data;
  int v7;
  void *v9;
  std::string *v10;
  std::string *v11;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string *v24;
  std::string *v25;
  std::string *v26;
  uint64_t v27;
  std::string::size_type v28;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string *v31;
  std::string *v32;
  std::string *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  std::string *v41;
  std::string::size_type v42;
  _QWORD *v43;
  char v44;
  const void *v45;
  uint64_t v46;
  std::string::size_type v47;
  std::string::size_type v48;
  std::string *v49;
  std::string *v50;
  uint64_t v51;
  std::string::size_type v52;
  std::string::size_type v53;
  std::string *v54;
  std::string *v55;
  uint64_t v56;
  std::string::size_type v57;
  std::string::size_type v58;
  char v59;
  std::string *v60;
  std::string *v61;
  std::string *v62;
  uint64_t v63;
  std::string::size_type v64;
  std::string::size_type v65;
  std::string *p_str;
  std::string *v67;
  uint64_t v68;
  std::string::size_type v69;
  std::string::size_type v70;
  std::string *v71;
  std::string *v72;
  uint64_t v73;
  std::string::size_type v74;
  std::string::size_type v75;
  std::string *p_p;
  std::string *v77;
  uint64_t v78;
  std::string::size_type v79;
  std::string::size_type v80;
  std::string *v81;
  std::string *v82;
  std::string *v83;
  std::string *v84;
  std::string *v85;
  uint64_t v86;
  std::string v88;
  std::string v89;
  std::string __str;
  std::string __p;
  std::string v92;
  std::string v93;
  std::string v94;
  std::string v95;
  std::string v96;
  std::string v97;
  std::string v98;
  std::string v99;
  std::string v100;

  MeCab::Param::get<std::string>((uint64_t)a2, "output-format-type", &v100);
  *((_QWORD *)this + 45) = MeCab::Writer::writeLattice;
  *((_QWORD *)this + 46) = 0;
  size = HIBYTE(v100.__r_.__value_.__r.__words[2]);
  if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v100.__r_.__value_.__l.__size_;
  switch(size)
  {
    case 2uLL:
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &v100;
      else
        v10 = (std::string *)v100.__r_.__value_.__r.__words[0];
      if (LOWORD(v10->__r_.__value_.__l.__data_) != 28005)
        break;
      v9 = MeCab::Writer::writeEM;
LABEL_115:
      *((_QWORD *)this + 45) = v9;
      *((_QWORD *)this + 46) = 0;
LABEL_263:
      v86 = 1;
      goto LABEL_266;
    case 4uLL:
      v11 = &v100;
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v11 = (std::string *)v100.__r_.__value_.__r.__words[0];
      if (LODWORD(v11->__r_.__value_.__l.__data_) == 1701736302)
      {
        v9 = MeCab::Writer::writeNone;
      }
      else
      {
        if (LODWORD(v11->__r_.__value_.__l.__data_) != 1886221668)
          break;
        v9 = MeCab::Writer::writeDump;
      }
      goto LABEL_115;
    case 6uLL:
      v5 = &v100;
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v5 = (std::string *)v100.__r_.__value_.__r.__words[0];
      data = (int)v5->__r_.__value_.__l.__data_;
      v7 = WORD2(v5->__r_.__value_.__r.__words[0]);
      if (data == 1634427255 && v7 == 26996)
      {
        v9 = MeCab::Writer::writeWakati;
        goto LABEL_115;
      }
      break;
  }
  std::string::basic_string[abi:ne180100]<0>(&v99, "%m\\t%H\\n");
  std::string::basic_string[abi:ne180100]<0>(&v98, "%m\\t%H\\n");
  std::string::basic_string[abi:ne180100]<0>(&v97, (char *)&unk_2083E16CE);
  std::string::basic_string[abi:ne180100]<0>(&v96, "EOS\\n");
  std::string::basic_string[abi:ne180100]<0>(&v95, "node-format");
  std::string::basic_string[abi:ne180100]<0>(&v94, "bos-format");
  std::string::basic_string[abi:ne180100]<0>(&v93, "eos-format");
  std::string::basic_string[abi:ne180100]<0>(&v92, "unk-format");
  v12 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
  if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v12 = v100.__r_.__value_.__l.__size_;
  if (v12)
  {
    std::string::append(&v95, "-", 1uLL);
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v100;
    else
      v13 = (std::string *)v100.__r_.__value_.__r.__words[0];
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    else
      v14 = v100.__r_.__value_.__l.__size_;
    std::string::append(&v95, (const std::string::value_type *)v13, v14);
    std::string::append(&v94, "-", 1uLL);
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v100;
    else
      v15 = (std::string *)v100.__r_.__value_.__r.__words[0];
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    else
      v16 = v100.__r_.__value_.__l.__size_;
    std::string::append(&v94, (const std::string::value_type *)v15, v16);
    std::string::append(&v93, "-", 1uLL);
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &v100;
    else
      v17 = (std::string *)v100.__r_.__value_.__r.__words[0];
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    else
      v18 = v100.__r_.__value_.__l.__size_;
    std::string::append(&v93, (const std::string::value_type *)v17, v18);
    std::string::append(&v92, "-", 1uLL);
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v100;
    else
      v19 = (std::string *)v100.__r_.__value_.__r.__words[0];
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    else
      v20 = v100.__r_.__value_.__l.__size_;
    std::string::append(&v92, (const std::string::value_type *)v19, v20);
    if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = &v95;
    else
      v21 = (std::string *)v95.__r_.__value_.__r.__words[0];
    MeCab::Param::get<std::string>((uint64_t)a2, (char *)v21, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v22 = __p.__r_.__value_.__l.__size_;
    if (v22)
    {
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_58;
    }
    else
    {
      std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 9) - 24) + 72), 0);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/writer.cpp", 60);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(", 1);
      v36 = (_QWORD *)std::ostream::operator<<();
      v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)") [", 3);
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"!tmp.empty()", 12);
      v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"] ", 2);
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"unknown format type [", 21);
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = &v100;
      else
        v41 = (std::string *)v100.__r_.__value_.__r.__words[0];
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
      else
        v42 = v100.__r_.__value_.__l.__size_;
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, v42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"]", 1);
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_58:
        if (v22)
          goto LABEL_59;
LABEL_95:
        v44 = 0;
        goto LABEL_247;
      }
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v22)
      goto LABEL_95;
  }
LABEL_59:
  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = &v95;
  else
    v23 = (std::string *)v95.__r_.__value_.__r.__words[0];
  MeCab::Param::get<std::string>((uint64_t)a2, (char *)v23, &__p);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &v94;
  else
    v24 = (std::string *)v94.__r_.__value_.__r.__words[0];
  MeCab::Param::get<std::string>((uint64_t)a2, (char *)v24, &__str);
  if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = &v93;
  else
    v25 = (std::string *)v93.__r_.__value_.__r.__words[0];
  MeCab::Param::get<std::string>((uint64_t)a2, (char *)v25, &v89);
  if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = &v92;
  else
    v26 = (std::string *)v92.__r_.__value_.__r.__words[0];
  MeCab::Param::get<std::string>((uint64_t)a2, (char *)v26, &v88);
  v27 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
  v28 = v99.__r_.__value_.__l.__size_;
  if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
  else
    v29 = v99.__r_.__value_.__l.__size_;
  v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v30 = __p.__r_.__value_.__l.__size_;
  if (v29 != v30)
  {
    *((_QWORD *)this + 45) = MeCab::Writer::writeUser;
    *((_QWORD *)this + 46) = 0;
LABEL_157:
    std::string::operator=(&v99, &__p);
LABEL_158:
    v63 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
    if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v64 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
    else
      v64 = v97.__r_.__value_.__l.__size_;
    v65 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v65 = __str.__r_.__value_.__l.__size_;
    if (v64 == v65)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((*((_BYTE *)&v97.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (!memcmp(v97.__r_.__value_.__l.__data_, p_str, v97.__r_.__value_.__l.__size_))
          goto LABEL_175;
      }
      else
      {
        if (!*((_BYTE *)&v97.__r_.__value_.__s + 23))
          goto LABEL_175;
        v67 = &v97;
        while (v67->__r_.__value_.__s.__data_[0] == p_str->__r_.__value_.__s.__data_[0])
        {
          v67 = (std::string *)((char *)v67 + 1);
          p_str = (std::string *)((char *)p_str + 1);
          if (!--v63)
            goto LABEL_175;
        }
      }
    }
    std::string::operator=(&v97, &__str);
LABEL_175:
    v68 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
    if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v69 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
    else
      v69 = v96.__r_.__value_.__l.__size_;
    v70 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v70 = v89.__r_.__value_.__l.__size_;
    if (v69 == v70)
    {
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v71 = &v89;
      else
        v71 = (std::string *)v89.__r_.__value_.__r.__words[0];
      if ((*((_BYTE *)&v96.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (!memcmp(v96.__r_.__value_.__l.__data_, v71, v96.__r_.__value_.__l.__size_))
          goto LABEL_192;
      }
      else
      {
        if (!*((_BYTE *)&v96.__r_.__value_.__s + 23))
          goto LABEL_192;
        v72 = &v96;
        while (v72->__r_.__value_.__s.__data_[0] == v71->__r_.__value_.__s.__data_[0])
        {
          v72 = (std::string *)((char *)v72 + 1);
          v71 = (std::string *)((char *)v71 + 1);
          if (!--v68)
            goto LABEL_192;
        }
      }
    }
    std::string::operator=(&v96, &v89);
LABEL_192:
    v73 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
    if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v74 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
    else
      v74 = v98.__r_.__value_.__l.__size_;
    v75 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v75 = v88.__r_.__value_.__l.__size_;
    p_p = &v88;
    if (v74 != v75)
      goto LABEL_225;
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)v88.__r_.__value_.__r.__words[0];
    if ((*((_BYTE *)&v98.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v98.__r_.__value_.__l.__data_, p_p, v98.__r_.__value_.__l.__size_))
      {
LABEL_207:
        p_p = &v88;
LABEL_225:
        std::string::operator=(&v98, p_p);
        if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v82 = &v99;
        else
          v82 = (std::string *)v99.__r_.__value_.__r.__words[0];
        MeCab::scoped_string::reset_string((MeCab::Writer *)((char *)this + 8), (const char *)v82);
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v83 = &v97;
        else
          v83 = (std::string *)v97.__r_.__value_.__r.__words[0];
        MeCab::scoped_string::reset_string((MeCab::Writer *)((char *)this + 24), (const char *)v83);
        if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v84 = &v96;
        else
          v84 = (std::string *)v96.__r_.__value_.__r.__words[0];
        MeCab::scoped_string::reset_string((MeCab::Writer *)((char *)this + 40), (const char *)v84);
        if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v85 = &v98;
        else
          v85 = (std::string *)v98.__r_.__value_.__r.__words[0];
        MeCab::scoped_string::reset_string((MeCab::Writer *)((char *)this + 56), (const char *)v85);
        v59 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
        goto LABEL_238;
      }
    }
    else if (*((_BYTE *)&v98.__r_.__value_.__s + 23))
    {
      v77 = &v98;
      while (v77->__r_.__value_.__s.__data_[0] == p_p->__r_.__value_.__s.__data_[0])
      {
        v77 = (std::string *)((char *)v77 + 1);
        p_p = (std::string *)((char *)p_p + 1);
        if (!--v73)
          goto LABEL_208;
      }
      goto LABEL_207;
    }
LABEL_208:
    v78 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v79 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
    else
      v79 = v99.__r_.__value_.__l.__size_;
    v80 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v80 = __p.__r_.__value_.__l.__size_;
    p_p = &__p;
    if (v79 != v80)
      goto LABEL_225;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((*((_BYTE *)&v99.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v99.__r_.__value_.__l.__data_, p_p, v99.__r_.__value_.__l.__size_))
      {
LABEL_223:
        p_p = &__p;
        goto LABEL_225;
      }
    }
    else if (*((_BYTE *)&v99.__r_.__value_.__s + 23))
    {
      v81 = &v99;
      while (v81->__r_.__value_.__s.__data_[0] == p_p->__r_.__value_.__s.__data_[0])
      {
        v81 = (std::string *)((char *)v81 + 1);
        p_p = (std::string *)((char *)p_p + 1);
        if (!--v78)
          goto LABEL_224;
      }
      goto LABEL_223;
    }
LABEL_224:
    p_p = &v99;
    goto LABEL_225;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = &__p;
  else
    v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((*((_BYTE *)&v99.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v45 = (const void *)v99.__r_.__value_.__r.__words[0];
    if (memcmp(v99.__r_.__value_.__l.__data_, v31, v99.__r_.__value_.__l.__size_))
    {
      *((_QWORD *)this + 45) = MeCab::Writer::writeUser;
      *((_QWORD *)this + 46) = 0;
      goto LABEL_156;
    }
  }
  else if (*((_BYTE *)&v99.__r_.__value_.__s + 23))
  {
    v32 = &v99;
    v33 = v31;
    v34 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
    while (v32->__r_.__value_.__s.__data_[0] == v33->__r_.__value_.__s.__data_[0])
    {
      v32 = (std::string *)((char *)v32 + 1);
      v33 = (std::string *)((char *)v33 + 1);
      if (!--v34)
        goto LABEL_98;
    }
    goto LABEL_149;
  }
LABEL_98:
  v46 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
  if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v47 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
  else
    v47 = v97.__r_.__value_.__l.__size_;
  v48 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v48 = __str.__r_.__value_.__l.__size_;
  if (v47 != v48)
    goto LABEL_149;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v49 = &__str;
  else
    v49 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((*((_BYTE *)&v97.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v97.__r_.__value_.__l.__data_, v49, v97.__r_.__value_.__l.__size_))
      goto LABEL_149;
  }
  else if (*((_BYTE *)&v97.__r_.__value_.__s + 23))
  {
    v50 = &v97;
    while (v50->__r_.__value_.__s.__data_[0] == v49->__r_.__value_.__s.__data_[0])
    {
      v50 = (std::string *)((char *)v50 + 1);
      v49 = (std::string *)((char *)v49 + 1);
      if (!--v46)
        goto LABEL_117;
    }
    goto LABEL_149;
  }
LABEL_117:
  v51 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  else
    v52 = v96.__r_.__value_.__l.__size_;
  v53 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v53 = v89.__r_.__value_.__l.__size_;
  if (v52 != v53)
    goto LABEL_149;
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v54 = &v89;
  else
    v54 = (std::string *)v89.__r_.__value_.__r.__words[0];
  if ((*((_BYTE *)&v96.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v96.__r_.__value_.__l.__data_, v54, v96.__r_.__value_.__l.__size_))
      goto LABEL_149;
  }
  else if (*((_BYTE *)&v96.__r_.__value_.__s + 23))
  {
    v55 = &v96;
    while (v55->__r_.__value_.__s.__data_[0] == v54->__r_.__value_.__s.__data_[0])
    {
      v55 = (std::string *)((char *)v55 + 1);
      v54 = (std::string *)((char *)v54 + 1);
      if (!--v51)
        goto LABEL_133;
    }
    goto LABEL_149;
  }
LABEL_133:
  v56 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
  if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v57 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
  else
    v57 = v98.__r_.__value_.__l.__size_;
  v58 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
  v59 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
  if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v58 = v88.__r_.__value_.__l.__size_;
  if (v57 != v58)
    goto LABEL_149;
  if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v60 = &v88;
  else
    v60 = (std::string *)v88.__r_.__value_.__r.__words[0];
  if ((*((_BYTE *)&v98.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (!memcmp(v98.__r_.__value_.__l.__data_, v60, v98.__r_.__value_.__l.__size_))
      goto LABEL_238;
LABEL_149:
    *((_QWORD *)this + 45) = MeCab::Writer::writeUser;
    *((_QWORD *)this + 46) = 0;
    if ((v27 & 0x80) == 0)
    {
      if (!(_DWORD)v27)
        goto LABEL_158;
      v62 = &v99;
      while (v62->__r_.__value_.__s.__data_[0] == v31->__r_.__value_.__s.__data_[0])
      {
        v62 = (std::string *)((char *)v62 + 1);
        v31 = (std::string *)((char *)v31 + 1);
        if (!--v27)
          goto LABEL_158;
      }
      goto LABEL_157;
    }
    v45 = (const void *)v99.__r_.__value_.__r.__words[0];
LABEL_156:
    if (!memcmp(v45, v31, v28))
      goto LABEL_158;
    goto LABEL_157;
  }
  if (*((_BYTE *)&v98.__r_.__value_.__s + 23))
  {
    v61 = &v98;
    while (v61->__r_.__value_.__s.__data_[0] == v60->__r_.__value_.__s.__data_[0])
    {
      v61 = (std::string *)((char *)v61 + 1);
      v60 = (std::string *)((char *)v60 + 1);
      if (!--v56)
        goto LABEL_238;
    }
    goto LABEL_149;
  }
LABEL_238:
  if (v59 < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v44 = 1;
LABEL_247:
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v96.__r_.__value_.__l.__data_);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v99.__r_.__value_.__l.__data_);
    if ((v44 & 1) != 0)
      goto LABEL_263;
  }
  else if ((v44 & 1) != 0)
  {
    goto LABEL_263;
  }
  v86 = 0;
LABEL_266:
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
  return v86;
}

void sub_2083D9F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v57;

  if (a39 < 0)
    operator delete(__p);
  if (a45 < 0)
    operator delete(a40);
  if (a51 < 0)
    operator delete(a46);
  if (a57 < 0)
    operator delete(a52);
  if (*(char *)(v57 - 145) < 0)
    operator delete(*(void **)(v57 - 168));
  if (*(char *)(v57 - 121) < 0)
    operator delete(*(void **)(v57 - 144));
  if (*(char *)(v57 - 97) < 0)
    operator delete(*(void **)(v57 - 120));
  if (*(char *)(v57 - 73) < 0)
    operator delete(*(void **)(v57 - 96));
  if (*(char *)(v57 - 49) < 0)
    operator delete(*(void **)(v57 - 72));
  _Unwind_Resume(exception_object);
}

uint64_t MeCab::Writer::writeWakati(int a1, MeCab::StringBuffer *this, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t *v6;
  const void *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a4 + 8);
  v6 = (uint64_t *)(v5 + 8);
  if (*(_QWORD *)(v5 + 8))
  {
    do
    {
      v7 = *(const void **)(v5 + 64);
      v8 = *(unsigned __int16 *)(v5 + 80);
      if (MeCab::StringBuffer::reserve(this, v8))
      {
        memcpy((void *)(*((_QWORD *)this + 3) + *((_QWORD *)this + 1)), v7, v8);
        *((_QWORD *)this + 1) += v8;
      }
      if (MeCab::StringBuffer::reserve(this, 1))
        *(_BYTE *)(*((_QWORD *)this + 3) + (*((_QWORD *)this + 1))++) = 32;
      v5 = *v6;
      v9 = *v6;
      v10 = *(_QWORD *)(v9 + 8);
      v6 = (uint64_t *)(v9 + 8);
    }
    while (v10);
  }
  if (MeCab::StringBuffer::reserve(this, 1))
    *(_BYTE *)(*((_QWORD *)this + 3) + (*((_QWORD *)this + 1))++) = 10;
  return 1;
}

uint64_t MeCab::Writer::writeNone()
{
  return 1;
}

uint64_t MeCab::Writer::writeDump()
{
  return 1;
}

uint64_t MeCab::Writer::writeEM()
{
  return 1;
}

uint64_t MeCab::Writer::writeUser(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!MeCab::Writer::writeNode(a1, a2, *(_QWORD *)(a1 + 32), a3))
    return 0;
  v8 = (uint64_t *)(a4 + 8);
  while (1)
  {
    v9 = *v8;
    v10 = *v8;
    v11 = *(_QWORD *)(v10 + 8);
    v8 = (uint64_t *)(v10 + 8);
    if (!v11)
      break;
    if (*(_BYTE *)(v9 + 91) == 1)
      v12 = 64;
    else
      v12 = 16;
    if ((MeCab::Writer::writeNode(a1, a2, *(_QWORD *)(a1 + v12), a3) & 1) == 0)
      return 0;
  }
  return MeCab::Writer::writeNode(a1, a2, *(_QWORD *)(a1 + 48), a3);
}

uint64_t MeCab::Writer::writeNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  MeCab::StringBuffer *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  char *v11;
  MeCab::StringBuffer *v12;
  unint64_t v13;
  int v14;
  int v15;
  char v16;
  int v17;
  char *v18;
  _BYTE *v19;
  const char *v20;
  int v21;
  char v22;
  char *v23;
  size_t v24;
  size_t v25;
  int v26;
  int v27;
  unsigned __int16 *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  BOOL v32;
  char *v33;
  char *v34;
  char *v35;
  char v36;
  BOOL v37;
  void *v38;
  char *v39;
  uint64_t v40;
  int v41;
  int v42;
  unint64_t v43;
  BOOL v44;
  int v45;
  const char *v46;
  int v47;
  BOOL v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  char *v54;
  uint64_t v55;
  int v56;
  char *v57;
  int v58;
  unsigned __int16 *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  BOOL v69;
  char *v70;
  char *v71;
  char v72;
  uint64_t v73;
  unsigned int v74;
  char *v75;
  char *v76;
  char *v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  uint64_t v128;
  unsigned __int16 *v129;
  unsigned __int16 *v130;
  unsigned __int16 *v131;
  unsigned __int16 *v132;
  _BYTE *v133;
  uint64_t v134;
  char *__s;
  _BYTE *v136;
  void *__p;
  void *v138;
  uint64_t v139;
  char __dst[8192];
  char v141;
  _BYTE v142[79];

  v4 = MEMORY[0x24BDAC7A8](a1, a2, a3, a4);
  __s = v8;
  *(_QWORD *)&v142[63] = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v138 = 0;
  v139 = 0;
  v9 = *v6;
  if (!*v6)
    return 1;
  v10 = v7;
  v11 = v6;
  v12 = v5;
  v13 = 0;
  v129 = (unsigned __int16 *)(v7 + 84);
  v130 = (unsigned __int16 *)(v7 + 82);
  v131 = (unsigned __int16 *)(v7 + 86);
  v132 = (unsigned __int16 *)(v7 + 80);
  v133 = (_BYTE *)(v7 + 91);
  v134 = v4;
  v136 = (_BYTE *)(v7 + 90);
  while (v9 != 37)
  {
    if (v9 == 92)
    {
      v15 = *++v11;
      v14 = v15;
      if (v15 <= 101)
      {
        if (v14 == 98)
          v22 = 8;
        else
          v22 = 0;
        if (v14 == 97)
          v22 = 7;
        if (v14 == 92)
          v16 = 92;
        else
          v16 = v22;
      }
      else
      {
        v16 = 0;
        switch(v14)
        {
          case 'n':
            v16 = 10;
            break;
          case 'o':
          case 'p':
          case 'q':
          case 'u':
            break;
          case 'r':
            v16 = 13;
            break;
          case 's':
            v16 = 32;
            break;
          case 't':
            v16 = 9;
            break;
          case 'v':
            v16 = 11;
            break;
          default:
            if (v14 == 102)
              v16 = 12;
            else
              v16 = 0;
            break;
        }
      }
      if (!MeCab::StringBuffer::reserve(v12, 1))
        goto LABEL_28;
      *(_BYTE *)(*((_QWORD *)v12 + 3) + *((_QWORD *)v12 + 1)) = v16;
      goto LABEL_27;
    }
    if (MeCab::StringBuffer::reserve(v12, 1))
    {
      *(_BYTE *)(*((_QWORD *)v12 + 3) + *((_QWORD *)v12 + 1)) = v9;
LABEL_27:
      ++*((_QWORD *)v12 + 1);
    }
LABEL_28:
    v18 = v11;
LABEL_29:
    v9 = v18[1];
    v11 = v18 + 1;
    if (!v9)
    {
      v80 = 1;
      goto LABEL_182;
    }
  }
  v18 = v11 + 1;
  v17 = v11[1];
  if (v17 <= 98)
  {
    switch(v11[1])
    {
      case 'F':
LABEL_14:
        v20 = *(const char **)(v10 + 72);
        if (*v20)
        {
          if (v13)
          {
            v21 = v11[1];
          }
          else
          {
            strncpy(__dst, v20, 0x2000uLL);
            v138 = __p;
            v13 = MeCab::tokenizeCSV<std::back_insert_iterator<std::vector<char *>>>(__dst, &__p, 0x40uLL);
            v21 = *v18;
          }
          if (v21 == 70)
          {
            v18 = v11 + 2;
            v41 = v11[2];
            if (v41 == 92)
            {
              v42 = v11[3];
              v18 = v11 + 3;
              if (v42 <= 101)
              {
                if (v42 == 98)
                  v52 = 8;
                else
                  v52 = 0;
                if (v42 == 97)
                  v52 = 7;
                if (v42 == 92)
                  LOBYTE(v41) = 92;
                else
                  LOBYTE(v41) = v52;
              }
              else
              {
                LOBYTE(v41) = 0;
                switch(v11[3])
                {
                  case 'n':
                    LOBYTE(v41) = 10;
                    break;
                  case 'o':
                  case 'p':
                  case 'q':
                  case 'u':
                    break;
                  case 'r':
                    LOBYTE(v41) = 13;
                    break;
                  case 's':
                    LOBYTE(v41) = 32;
                    break;
                  case 't':
                    goto LABEL_75;
                  case 'v':
                    LOBYTE(v41) = 11;
                    break;
                  default:
                    if (v42 == 102)
                      LOBYTE(v41) = 12;
                    else
                      LOBYTE(v41) = 0;
                    break;
                }
              }
            }
          }
          else
          {
LABEL_75:
            LOBYTE(v41) = 9;
          }
          if (v18[1] == 91)
          {
            v43 = 0;
            v44 = 0;
            for (v18 += 2; ; ++v18)
            {
              v45 = *v18;
              if ((v45 - 48) >= 0xA)
              {
                if (v45 != 44 && v45 != 93)
                {
                  std::ios_base::clear((std::ios_base *)(v134 + 72 + *(_QWORD *)(*(_QWORD *)(v134 + 72) - 24)), 0);
                  v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(v134 + 72), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/writer.cpp", 60);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"(", 1);
                  v87 = (_QWORD *)std::ostream::operator<<();
                  v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)") [", 3);
                  v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"false", 5);
                  v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"] ", 2);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"cannot find ']'", 15);
                  goto LABEL_181;
                }
                if (v43 >= v13)
                {
                  std::ios_base::clear((std::ios_base *)(v134 + 72 + *(_QWORD *)(*(_QWORD *)(v134 + 72) - 24)), 0);
                  v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(v134 + 72), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/writer.cpp", 60);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"(", 1);
                  v82 = (_QWORD *)std::ostream::operator<<();
                  v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)") [", 3);
                  v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"n < psize", 9);
                  v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"] ", 2);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"given index is out of range", 27);
                  goto LABEL_181;
                }
                v46 = (const char *)*((_QWORD *)__p + v43);
                v47 = *(unsigned __int8 *)v46;
                v48 = v47 != 42;
                if (v47 == 42)
                {
                  v49 = *v18;
                }
                else
                {
                  if (v44)
                  {
                    if (MeCab::StringBuffer::reserve(v12, 1))
                      *(_BYTE *)(*((_QWORD *)v12 + 3) + (*((_QWORD *)v12 + 1))++) = v41;
                    v46 = (const char *)*((_QWORD *)__p + v43);
                  }
                  MeCab::StringBuffer::write(v12, v46);
                  v49 = *v18;
                }
                if (v49 == 93)
                  goto LABEL_29;
                v43 = 0;
                v44 = v48;
              }
              else
              {
                v43 = *v18 + 10 * v43 - 48;
              }
            }
          }
          std::ios_base::clear((std::ios_base *)(v134 + 72 + *(_QWORD *)(*(_QWORD *)(v134 + 72) - 24)), 0);
          v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(v134 + 72), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/writer.cpp", 60);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"(", 1);
          v98 = (_QWORD *)std::ostream::operator<<();
          v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)") [", 3);
          v100 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"*++p =='['", 10);
          v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"] ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"cannot find '['", 15);
        }
        else
        {
          std::ios_base::clear((std::ios_base *)(v134 + 72 + *(_QWORD *)(*(_QWORD *)(v134 + 72) - 24)), 0);
          v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(v134 + 72), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/writer.cpp", 60);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"(", 1);
          v93 = (_QWORD *)std::ostream::operator<<();
          v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)") [", 3);
          v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"node->feature[0] != '\\0'", 24);
          v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)"] ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)"no feature information available", 32);
        }
        goto LABEL_181;
      case 'G':
      case 'I':
      case 'J':
      case 'K':
        goto LABEL_188;
      case 'H':
        MeCab::StringBuffer::write(v12, *(const char **)(v10 + 72));
        goto LABEL_29;
      case 'L':
        v25 = strlen(__s);
        MeCab::StringBuffer::operator<<(v12, v25);
        goto LABEL_29;
      case 'M':
        v24 = *(unsigned __int16 *)(v10 + 82);
        v23 = (char *)(*(_QWORD *)(v10 + 64) - v24 + *(unsigned __int16 *)(v10 + 80));
        goto LABEL_63;
      default:
        if (v17 != 37)
        {
          if (v17 != 83)
          {
LABEL_188:
            std::ios_base::clear((std::ios_base *)(v134 + 72 + *(_QWORD *)(*(_QWORD *)(v134 + 72) - 24)), 0);
            v107 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(v134 + 72), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/writer.cpp", 60);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"(", 1);
            v108 = (_QWORD *)std::ostream::operator<<();
            v109 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)") [", 3);
            v110 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)"false", 5);
            v111 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"] ", 2);
            v112 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)"unkonwn meta char ", 18);
            v141 = *v18;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)&v141, 1);
            goto LABEL_181;
          }
          v23 = __s;
          v24 = strlen(__s);
LABEL_63:
          if (MeCab::StringBuffer::reserve(v12, v24))
          {
            v38 = (void *)(*((_QWORD *)v12 + 3) + *((_QWORD *)v12 + 1));
            v39 = v23;
            goto LABEL_65;
          }
          goto LABEL_29;
        }
        if (!MeCab::StringBuffer::reserve(v12, 1))
          goto LABEL_29;
        *(_BYTE *)(*((_QWORD *)v12 + 3) + *((_QWORD *)v12 + 1)) = 37;
        v40 = *((_QWORD *)v12 + 1) + 1;
        break;
    }
LABEL_68:
    *((_QWORD *)v12 + 1) = v40;
    goto LABEL_29;
  }
  v19 = v136;
  switch(v11[1])
  {
    case 'f':
      goto LABEL_14;
    case 'g':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'n':
    case 'o':
    case 'q':
    case 'r':
      goto LABEL_188;
    case 'h':
      MeCab::StringBuffer::operator<<(v12, *(unsigned __int16 *)(v10 + 88));
      goto LABEL_29;
    case 'm':
      v23 = *(char **)(v10 + 64);
      v24 = *(unsigned __int16 *)(v10 + 80);
      goto LABEL_63;
    case 'p':
      v18 = v11 + 2;
      v26 = v11[2];
      if (v26 <= 98)
      {
        if (v26 == 67)
        {
          v60 = *(_QWORD *)(v10 + 96);
          v61 = *(_QWORD *)(*(_QWORD *)v10 + 96) + *(__int16 *)(v10 + 92);
LABEL_123:
          v29 = v60 - v61;
LABEL_124:
          if (v29 < 0)
          {
            v141 = 45;
            v29 = -v29;
            v65 = v142;
          }
          else
          {
            v65 = &v141;
            if (!v29)
              goto LABEL_132;
          }
          v66 = 0;
          do
          {
            v65[v66] = (char)v29 % 10 + 48;
            v67 = v29 + 9;
            ++v66;
            v29 /= 10;
          }
          while (v67 > 0x12);
          if (v66)
          {
            v68 = &v65[v66];
          }
          else
          {
LABEL_132:
            *v65 = 48;
            v68 = v65 + 1;
          }
          v69 = v65 == v68;
          *v68 = 0;
          v70 = v68 - 1;
          if (!v69 && v70 > v65)
          {
            v71 = v65 + 1;
            do
            {
              v72 = *(v71 - 1);
              *(v71 - 1) = *v70;
              *v70-- = v72;
              v37 = v71++ >= v70;
            }
            while (!v37);
          }
LABEL_158:
          MeCab::StringBuffer::write(v12, &v141);
          goto LABEL_29;
        }
        if (v26 == 76)
        {
          v28 = v130;
LABEL_140:
          MeCab::StringBuffer::operator<<(v12, *v28);
          goto LABEL_29;
        }
        if (v26 != 83)
        {
LABEL_189:
          std::ios_base::clear((std::ios_base *)(v134 + 72 + *(_QWORD *)(*(_QWORD *)(v134 + 72) - 24)), 0);
          v113 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(v134 + 72), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/writer.cpp", 60);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)"(", 1);
          v114 = (_QWORD *)std::ostream::operator<<();
          v115 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)") [", 3);
          v116 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"false", 5);
          v117 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)"] ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)"[iseSCwcnblLh] is required after %p", 35);
          goto LABEL_181;
        }
        v128 = *(_QWORD *)(v10 + 64);
        v50 = *(unsigned __int16 *)(v10 + 82);
        v51 = *(unsigned __int16 *)(v10 + 80);
        v24 = v50 - v51;
        if (!MeCab::StringBuffer::reserve(v12, v50 - v51))
          goto LABEL_29;
        v39 = (char *)(v128 - v50 + v51);
        v38 = (void *)(*((_QWORD *)v12 + 3) + *((_QWORD *)v12 + 1));
LABEL_65:
        memcpy(v38, v39, v24);
        v40 = *((_QWORD *)v12 + 1) + v24;
        goto LABEL_68;
      }
      v27 = v26 - 99;
      v28 = v132;
      switch(v27)
      {
        case 0:
          v29 = *(_QWORD *)(v10 + 96);
          goto LABEL_124;
        case 1:
        case 3:
        case 4:
        case 6:
        case 7:
        case 8:
        case 10:
        case 12:
        case 14:
        case 15:
          goto LABEL_189;
        case 2:
          v55 = *(_QWORD *)(v10 + 64) - (_QWORD)__s + *(unsigned __int16 *)(v10 + 80);
          goto LABEL_121;
        case 5:
          v58 = v11[3];
          v57 = v11 + 3;
          v56 = v58;
          v59 = v131;
          if (v58 == 108)
            goto LABEL_114;
          if (v56 == 114)
          {
            v59 = v129;
LABEL_114:
            MeCab::StringBuffer::operator<<(v12, *v59);
            v18 = v57;
            goto LABEL_29;
          }
          std::ios_base::clear((std::ios_base *)(v134 + 72 + *(_QWORD *)(*(_QWORD *)(v134 + 72) - 24)), 0);
          v123 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(v134 + 72), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/writer.cpp", 60);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)"(", 1);
          v124 = (_QWORD *)std::ostream::operator<<();
          v125 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)") [", 3);
          v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)"false", 5);
          v127 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)"] ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)"lr is required after %ph", 24);
LABEL_181:
          v80 = 0;
LABEL_182:
          if (__p)
          {
            v138 = __p;
            operator delete(__p);
          }
          return v80;
        case 9:
          goto LABEL_140;
        case 11:
          v60 = *(_QWORD *)(v10 + 96);
          v61 = *(_QWORD *)(*(_QWORD *)v10 + 96);
          goto LABEL_123;
        case 13:
          v18 = v11 + 4;
          v62 = v11[4];
          v63 = v11[3];
          if (v62 == 92)
          {
            LOBYTE(v62) = 0;
            v64 = v11[5];
            v18 = v11 + 5;
            if (v64 <= 101)
            {
              switch(v64)
              {
                case '\\':
                  LOBYTE(v62) = 92;
                  break;
                case 'a':
                  LOBYTE(v62) = 7;
                  break;
                case 'b':
                  LOBYTE(v62) = 8;
                  break;
              }
            }
            else
            {
              switch(v11[5])
              {
                case 'n':
                  LOBYTE(v62) = 10;
                  break;
                case 'o':
                case 'p':
                case 'q':
                case 'u':
                  break;
                case 'r':
                  LOBYTE(v62) = 13;
                  break;
                case 's':
                  LOBYTE(v62) = 32;
                  break;
                case 't':
                  LOBYTE(v62) = 9;
                  break;
                case 'v':
                  LOBYTE(v62) = 11;
                  break;
                default:
                  if (v64 == 102)
                    LOBYTE(v62) = 12;
                  break;
              }
            }
          }
          v79 = *(_QWORD *)(v10 + 40);
          if (v79)
          {
            while (1)
            {
              if (v79 != *(_QWORD *)(v10 + 40) && MeCab::StringBuffer::reserve(v12, 1))
                *(_BYTE *)(*((_QWORD *)v12 + 3) + (*((_QWORD *)v12 + 1))++) = v62;
              if (v63 != 99)
                break;
              MeCab::StringBuffer::operator<<(v12, *(_DWORD *)(v79 + 24));
              v79 = *(_QWORD *)(v79 + 16);
              if (!v79)
                goto LABEL_29;
            }
            std::ios_base::clear((std::ios_base *)(v134 + 72 + *(_QWORD *)(*(_QWORD *)(v134 + 72) - 24)), 0);
            v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(v134 + 72), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/writer.cpp", 60);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)"(", 1);
            v103 = (_QWORD *)std::ostream::operator<<();
            v104 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)") [", 3);
            v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"false", 5);
            v106 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)"] ", 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)"[icP] is required after %pp", 27);
          }
          else
          {
            std::ios_base::clear((std::ios_base *)(v134 + 72 + *(_QWORD *)(*(_QWORD *)(v134 + 72) - 24)), 0);
            v118 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(v134 + 72), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/writer.cpp", 60);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)"(", 1);
            v119 = (_QWORD *)std::ostream::operator<<();
            v120 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)") [", 3);
            v121 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)"node->lpath", 11);
            v122 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)"] ", 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)"no path information, use -l option", 34);
          }
          goto LABEL_181;
        case 16:
          v55 = *(_QWORD *)(v10 + 64) - (_QWORD)__s;
LABEL_121:
          MeCab::StringBuffer::operator<<(v12, v55);
          goto LABEL_29;
        default:
          if ((_DWORD)v132 != 119)
            goto LABEL_189;
          v53 = *(__int16 *)(v10 + 92);
          if ((v53 & 0x80000000) != 0)
          {
            v141 = 45;
            v53 = -v53;
            v54 = v142;
          }
          else
          {
            v54 = &v141;
            if (!*(_WORD *)(v10 + 92))
              goto LABEL_152;
          }
          v73 = 0;
          do
          {
            v54[v73] = v53 - 10 * (((26215 * (__int16)v53) >> 18) + (26215 * (__int16)v53 < 0)) + 48;
            v74 = (unsigned __int16)(v53 + 9);
            ++v73;
            v53 = ((26215 * (__int16)v53) >> 18) + ((26215 * (__int16)v53) >> 31);
          }
          while (v74 > 0x12);
          if (v73)
          {
            v75 = &v54[v73];
            goto LABEL_153;
          }
LABEL_152:
          *v54 = 48;
          v75 = v54 + 1;
LABEL_153:
          v69 = v54 == v75;
          *v75 = 0;
          v76 = v75 - 1;
          if (!v69 && v76 > v54)
          {
            v77 = v54 + 1;
            do
            {
              v78 = *(v77 - 1);
              *(v77 - 1) = *v76;
              *v76-- = v78;
              v37 = v77++ >= v76;
            }
            while (!v37);
          }
          goto LABEL_158;
      }
    case 's':
      v19 = v133;
      goto LABEL_50;
    case 't':
LABEL_50:
      v30 = *v19;
      if (!*v19)
        goto LABEL_55;
      v31 = 0;
      do
      {
        v142[v31++ - 1] = (v30 % 0xA) | 0x30;
        v32 = v30 > 9;
        v30 /= 0xAu;
      }
      while (v32);
      if (v31)
      {
        v33 = &v142[v31 - 1];
      }
      else
      {
LABEL_55:
        v141 = 48;
        v33 = v142;
      }
      *v33 = 0;
      v34 = v33 - 1;
      if (v33 != &v141 && v33 - 1 > &v141)
      {
        v35 = v142;
        do
        {
          v36 = *(v35 - 1);
          *(v35 - 1) = *v34;
          *v34-- = v36;
          v37 = v35++ >= v34;
        }
        while (!v37);
      }
      goto LABEL_158;
    default:
      if (v17 != 99)
        goto LABEL_188;
      MeCab::StringBuffer::operator<<(v12, *(__int16 *)(v10 + 92));
      goto LABEL_29;
  }
}

{
  uint64_t *v4;
  uint64_t result;

  switch(*(_BYTE *)(a4 + 91))
  {
    case 0:
    case 4:
      v4 = (uint64_t *)(a1 + 16);
      goto LABEL_7;
    case 1:
      v4 = (uint64_t *)(a1 + 64);
      goto LABEL_7;
    case 2:
      v4 = (uint64_t *)(a1 + 32);
      goto LABEL_7;
    case 3:
      v4 = (uint64_t *)(a1 + 48);
LABEL_7:
      result = MeCab::Writer::writeNode(a1, a2, *v4, a3);
      break;
    default:
      result = 1;
      break;
  }
  return result;
}

void sub_2083DB094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

MeCab::StringBuffer *MeCab::StringBuffer::operator<<(MeCab::StringBuffer *a1, int a2)
{
  uint64_t v2;
  unsigned int v3;
  char *v4;
  char *v5;
  char *v6;
  char v7;
  char __s;
  _BYTE v11[71];

  *(_QWORD *)&v11[63] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    goto LABEL_6;
  v2 = 0;
  do
  {
    v3 = (unsigned __int16)a2;
    v11[v2++ - 1] = ((unsigned __int16)a2 % 0xAu) | 0x30;
    LOWORD(a2) = (unsigned __int16)a2 / 0xAu;
  }
  while (v3 > 9);
  if (v2)
  {
    v4 = &v11[v2 - 1];
  }
  else
  {
LABEL_6:
    v4 = v11;
    __s = 48;
  }
  *v4 = 0;
  v5 = v4 - 1;
  if (v4 != &__s && v4 - 1 > &__s)
  {
    v6 = v11;
    do
    {
      v7 = *(v6 - 1);
      *(v6 - 1) = *v5;
      *v5-- = v7;
    }
    while (v6++ < v5);
  }
  return MeCab::StringBuffer::write(a1, &__s);
}

{
  char *p_s;
  uint64_t v3;
  unsigned int v4;
  char *v5;
  BOOL v6;
  char *v7;
  char *v8;
  char v9;
  char __s;
  _BYTE v13[71];

  *(_QWORD *)&v13[63] = *MEMORY[0x24BDAC8D0];
  p_s = &__s;
  if (a2 < 0)
  {
    p_s = v13;
    __s = 45;
    a2 = -a2;
  }
  else if (!a2)
  {
LABEL_9:
    *p_s = 48;
    v5 = p_s + 1;
    goto LABEL_10;
  }
  v3 = 0;
  do
  {
    p_s[v3] = (char)a2 % 10 + 48;
    v4 = a2 + 9;
    ++v3;
    a2 /= 10;
  }
  while (v4 > 0x12);
  if (!v3)
    goto LABEL_9;
  v5 = &p_s[v3];
LABEL_10:
  v6 = p_s == v5;
  *v5 = 0;
  v7 = v5 - 1;
  if (!v6 && v7 > p_s)
  {
    v8 = p_s + 1;
    do
    {
      v9 = *(v8 - 1);
      *(v8 - 1) = *v7;
      *v7-- = v9;
    }
    while (v8++ < v7);
  }
  return MeCab::StringBuffer::write(a1, &__s);
}

float btrie_open(void *(*a1)(void *, unint64_t, void *), void *a2, _DWORD *a3, unint64_t a4)
{
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;

  v8 = malloc_type_malloc(0x48uLL, 0x108004094C1867FuLL);
  if (v8)
  {
    LODWORD(v9) = 0;
    v8[1] = 0u;
    v8[2] = 0u;
    *v8 = 0u;
    *((_QWORD *)v8 + 7) = a1;
    *((_QWORD *)v8 + 8) = a2;
    *((_QWORD *)v8 + 1) = a3;
    *((_QWORD *)v8 + 5) = a4;
    *((_QWORD *)v8 + 6) = 0;
    if (a3)
    {
      if (a4 >= 0x18)
      {
        *(_DWORD *)v8 = a3[1];
        *((_QWORD *)v8 + 2) = (char *)a3 + a3[3];
        v9 = *((_QWORD *)a3 + 2);
        *(_QWORD *)&v10 = v9;
        *((_QWORD *)&v10 + 1) = HIDWORD(v9);
        *(_OWORD *)((char *)v8 + 24) = v10;
      }
    }
  }
  return *(float *)&v9;
}

void btrie_close(void **a1)
{
  if (a1)
  {
    if (*((_DWORD *)a1 + 12))
      free(a1[1]);
    free(a1);
  }
}

uint64_t btrie_exact_match_search(uint64_t a1, unsigned __int8 *__s2, unsigned int a3, uint8x8_t a4)
{
  unsigned int *v6;
  unsigned int v7;
  int v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int *v16;
  unsigned int v17;
  _DWORD *v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 *v21;
  char *v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  size_t v26;
  int v27;
  int v28;

  v6 = (unsigned int *)a1;
  while (1)
  {
    v7 = *v6;
    v8 = v7 & 3;
    if (v8 != 2)
      break;
    v10 = *(_QWORD *)(a1 + 8);
    v11 = v7 - 2;
    v9 = (char *)(v10 + v11);
    if (!a3)
      return *(unsigned int *)v9;
    v12 = *__s2;
    v13 = v12 >> 5;
    v14 = *(_DWORD *)&v9[4 * (v12 >> 5) + 4];
    if (((v14 >> v12) & 1) == 0)
      return 0;
    if (v12 >= 0x20)
    {
      v15 = 0;
      if (v13 <= 1)
        v13 = 1;
      else
        v13 = v13;
      v16 = (unsigned int *)(v10 + v11 + 4);
      do
      {
        v17 = *v16++;
        a4 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
        a4.i16[0] = vaddlv_u8(a4);
        v15 += a4.i32[0];
        --v13;
      }
      while (v13);
    }
    else
    {
      v15 = 0;
    }
    a4.i32[0] = v14 & ~(-1 << (v12 & 0x1F));
    a4 = (uint8x8_t)vcnt_s8((int8x8_t)a4);
    a4.i16[0] = vaddlv_u8(a4);
    v6 = (unsigned int *)&v9[4 * (v15 + a4.i32[0]) + 40];
LABEL_16:
    --a3;
    ++__s2;
  }
  if (v8 == 3)
  {
    v9 = (char *)(*(_QWORD *)(a1 + 8) + v7 - 3);
    if (!a3)
      return *(unsigned int *)v9;
    v6 = (unsigned int *)&v9[4 * *__s2 + 4];
    goto LABEL_16;
  }
  if (v8 != 1)
    return 0;
  v18 = (_DWORD *)(*(_QWORD *)(a1 + 16) + v7 - 1);
  v9 = (char *)(v18 + 1);
  if (a3)
  {
    v20 = *v18;
    v19 = (unsigned __int8 *)(v18 + 2);
    v21 = (unsigned __int8 *)&v9[v20];
    while (v19 < v21)
    {
      v24 = *v19;
      v22 = (char *)(v19 + 1);
      v23 = v24;
      v25 = v24 - a3;
      if (v24 >= a3)
        v26 = a3;
      else
        v26 = v23;
      v27 = memcmp(v22, __s2, v26);
      if (v27)
        v28 = v27;
      else
        v28 = v25;
      if ((v28 & 0x80000000) == 0)
      {
        if (v28)
          return 0;
        v9 = &v22[v23];
        return *(unsigned int *)v9;
      }
      v19 = (unsigned __int8 *)&v22[v23 + 4];
    }
    return 0;
  }
  return *(unsigned int *)v9;
}

uint64_t `anonymous namespace'::__btrie_find_common_prefix(uint64_t a1, int a2, unsigned __int8 *a3, unsigned int a4, unint64_t a5, unint64_t *a6, uint64_t a7, __int16 a8)
{
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unsigned int v23;
  unint64_t v24;
  __int16 v25;
  char *v26;
  size_t v27;
  unsigned int v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t result;
  int v41;
  unsigned int *v42;
  unsigned int v43;
  uint8x8_t v44;

  v13 = a2 & 3;
  if (v13 == 1)
  {
    v17 = (_DWORD *)(*(_QWORD *)(a1 + 16) + (a2 - 1));
    v18 = v17 + 1;
    v19 = v17[1];
    if (v19)
    {
      if (!a5)
      {
        ++*a6;
        if (!a4)
          return 0;
        goto LABEL_13;
      }
      v20 = *a6;
      v21 = a7 + 16 * *a6;
      *(_WORD *)(v21 + 12) = (_WORD)a3 - a8;
      *a6 = v20 + 1;
      *(_DWORD *)(v21 + 8) = v19;
      if (v20 + 1 >= a5)
        return 1;
    }
    if (!a4)
      return 0;
LABEL_13:
    v23 = *v17;
    v22 = (char *)(v17 + 2);
    v24 = (unint64_t)v18 + v23;
    if ((unint64_t)v22 < v24)
    {
      v25 = (_WORD)a3 - a8;
      do
      {
        v28 = *v22;
        v26 = v22 + 1;
        v27 = v28;
        if (v28 <= a4)
        {
          v29 = memcmp(v26, a3, v27);
          if (v29 > 0)
            return 0;
          if (!v29)
          {
            if (a5)
            {
              v30 = *a6;
              v31 = a7 + 16 * *a6;
              *(_WORD *)(v31 + 12) = v25 + v27;
              v32 = *(_DWORD *)&v26[v27];
              *a6 = ++v30;
              *(_DWORD *)(v31 + 8) = v32;
              if (v30 >= a5)
                return 1;
            }
            else
            {
              ++*a6;
            }
          }
        }
        v22 = &v26[v27 + 4];
      }
      while ((unint64_t)v22 < v24);
    }
    return 0;
  }
  if (v13 == 2)
  {
    v33 = *(_QWORD *)(a1 + 8);
    v34 = (a2 - 2);
    v35 = *(_DWORD *)(v33 + v34);
    if (v35)
    {
      if (!a5)
      {
        ++*a6;
        if (!a4)
          return 0;
LABEL_28:
        v38 = *a3;
        v39 = v38 >> 5;
        if (((*(_DWORD *)(v33 + v34 + 4 * (v38 >> 5) + 4) >> v38) & 1) == 0)
          return 0;
        if (v38 >= 0x20)
        {
          v41 = 0;
          if (v39 <= 1)
            v39 = 1;
          else
            v39 = v39;
          v42 = (unsigned int *)(v34 + v33 + 4);
          do
          {
            v43 = *v42++;
            v44 = (uint8x8_t)vcnt_s8((int8x8_t)v43);
            v44.i16[0] = vaddlv_u8(v44);
            v41 += v44.i32[0];
            --v39;
          }
          while (v39);
        }
LABEL_42:
        if (!(_DWORD)result)
          return result;
        return 1;
      }
      v36 = *a6;
      v37 = a7 + 16 * *a6;
      *(_WORD *)(v37 + 12) = (_WORD)a3 - a8;
      *a6 = v36 + 1;
      *(_DWORD *)(v37 + 8) = v35;
      if (v36 + 1 >= a5)
        return 1;
    }
    if (!a4)
      return 0;
    goto LABEL_28;
  }
  if (v13 != 3)
    return 0;
  v14 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + (a2 - 3));
  if (!v14)
  {
LABEL_7:
    if (a4)
      goto LABEL_42;
    return 0;
  }
  if (!a5)
  {
    ++*a6;
    if (!a4)
      return 0;
    goto LABEL_42;
  }
  v15 = *a6;
  v16 = a7 + 16 * *a6;
  *(_WORD *)(v16 + 12) = (_WORD)a3 - a8;
  *a6 = v15 + 1;
  *(_DWORD *)(v16 + 8) = v14;
  if (v15 + 1 < a5)
    goto LABEL_7;
  return 1;
}

MeCab::QuantizedConnector *MeCab::QuantizedConnector::QuantizedConnector(MeCab::QuantizedConnector *this)
{
  MeCab::Connector *v2;

  v2 = MeCab::Connector::Connector(this);
  *(_QWORD *)v2 = &off_24C09C388;
  MeCab::Mmap<char>::Mmap((uint64_t)v2 + 656);
  *((_QWORD *)this + 125) = 0;
  return this;
}

void sub_2083DB85C(_Unwind_Exception *a1)
{
  void **v1;

  MeCab::Connector::~Connector(v1);
  _Unwind_Resume(a1);
}

void MeCab::QuantizedConnector::~QuantizedConnector(void **this)
{
  char *v2;

  *this = &off_24C09C388;
  v2 = (char *)(this + 82);
  MeCab::Mmap<char>::close((uint64_t)(this + 82));
  MeCab::Mmap<char>::~Mmap((uint64_t)v2);
  MeCab::Connector::~Connector(this);
}

{
  MeCab::QuantizedConnector::~QuantizedConnector(this);
  JUMPOUT(0x20BD0639CLL);
}

uint64_t MeCab::QuantizedConnector::open(MeCab::QuantizedConnector *this, char *a2, const char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  const char *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  if ((MeCab::Mmap<char>::open((uint64_t)this + 656, a2, a3) & 1) != 0)
  {
    if (((*(uint64_t (**)(MeCab::QuantizedConnector *, _QWORD, _QWORD))(*(_QWORD *)this + 8))(this, *((_QWORD *)this + 83), *((_QWORD *)this + 84)) & 1) != 0)return 1;
    std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 46) - 24) + 368), 0);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 46, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/quantized_connector.cpp", 73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"(", 1);
    v16 = (_QWORD *)std::ostream::operator<<();
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") [", 3);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"open(ptr, quantized_cmmap_.file_size())", 39);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"] ", 2);
    v14 = "QuantizedConnector::open failed";
    v12 = 31;
  }
  else
  {
    std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 46) - 24) + 368), 0);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 46, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/quantized_connector.cpp", 73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") [", 3);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"quantized_cmmap_.open(filename, mode)", 37);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"] ", 2);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"cannot open: ", 13);
    v12 = strlen(a2);
    v13 = v11;
    v14 = a2;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v12);
  return 0;
}

uint64_t MeCab::QuantizedConnector::open(MeCab::QuantizedConnector *this, const char *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  if (a2)
  {
    v3 = *(unsigned __int16 *)a2;
    *((_WORD *)this + 180) = v3;
    v4 = *((unsigned __int16 *)a2 + 1);
    *((_WORD *)this + 181) = v4;
    if (v4 * (unint64_t)v3 + 4 == a3)
    {
      *((_QWORD *)this + 125) = a2 + 4;
      return 1;
    }
    v14 = (_QWORD *)((char *)this + 368);
    std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 46) - 24) + 368), 0);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/quantized_connector.cpp", 73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"(", 1);
    v16 = (_QWORD *)std::ostream::operator<<();
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") [", 3);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"length == offset + lsize_ * rsize_ * sizeof(char)", 49);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"] ", 2);
    v12 = "invalid binary image";
    v13 = 20;
  }
  else
  {
    v6 = (_QWORD *)((char *)this + 368);
    std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 46) - 24) + 368), 0);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/quantized_connector.cpp", 73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"(", 1);
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") [", 3);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ptr", 3);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
    v12 = "matrix is NULL";
    v13 = 14;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
  return 0;
}

void *MeCab::QuantizedConnector::close(MeCab::QuantizedConnector *this)
{
  return MeCab::Mmap<char>::close((uint64_t)this + 656);
}

uint64_t MeCab::QuantizedConnector::compile(MeCab::QuantizedConnector *this, const char *a2, const char *a3, uint64_t a4)
{
  uint64_t v4;
  const char *v5;
  const char *v6;
  const char *v7;
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  size_t v19;
  _QWORD *v20;
  size_t v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  void **v24;
  unint64_t v25;
  void **v26;
  void **v27;
  uint64_t i;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  size_t v35;
  uint64_t v36;
  unsigned __int16 v37;
  unsigned __int16 v38;
  size_t v39;
  char *v40;
  char *v41;
  _QWORD *v42;
  _QWORD *v43;
  const std::locale::facet *v44;
  const std::locale::facet *v45;
  _QWORD *v46;
  void **v47;
  unint64_t v48;
  void **v49;
  void **v50;
  uint64_t j;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  size_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  __int16 v62;
  int v63;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD v71[12];
  char v72;
  uint64_t v73;
  unsigned __int16 v74;
  _WORD v75[5];
  uint64_t v76;
  uint64_t v77;
  void **v78;
  std::locale v79;
  uint64_t v80;
  _BYTE v81[408];
  uint64_t v82;
  _QWORD v83[2];
  _BYTE v84[408];
  uint64_t v85;
  void *__p[2];
  char v87;
  uint64_t v88;

  v4 = MEMORY[0x24BDAC7A8](this, a2, a3, a4);
  v6 = v5;
  v7 = (const char *)v4;
  v88 = *MEMORY[0x24BDAC8D0];
  std::ifstream::basic_ifstream(v83);
  std::string::basic_string[abi:ne180100]<0>(__p, "1 1\n0 0 0\n");
  std::istringstream::basic_istringstream[abi:ne180100](v71, (__int128 *)__p, 8);
  if (v87 < 0)
    operator delete(__p[0]);
  v8 = v83;
  if ((v84[*(_QWORD *)(v83[0] - 24) + 16] & 5) != 0)
  {
    v9 = strlen(v7);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)v7, v9);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" is not found. minimum setting is used.", 39);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
    v12 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale((std::locale *)__p);
    std::ostream::put();
    std::ostream::flush();
    v8 = v71;
  }
  std::ofstream::basic_ofstream(&v80);
  if ((v81[*(_QWORD *)(v80 - 24) + 24] & 5) != 0)
  {
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/quantized_connector.cpp", 73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"(", 1);
    v14 = (_QWORD *)std::ostream::operator<<();
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)") [", 3);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"ofs", 3);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"] ", 2);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"permission denied: ", 19);
    v19 = strlen(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v6, v19);
    MeCab::die::~die((MeCab::die *)__p);
  }
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"reading ", 8);
  v21 = strlen(v7);
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v7, v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" ... ", 5);
  *(_QWORD *)&v75[1] = 0;
  v76 = 0;
  v77 = 0;
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
  v23 = std::locale::use_facet(&v79, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
  std::locale::~locale(&v79);
  v24 = __p;
  std::istream::getline();
  v79.__locale_ = (std::locale::__imp *)__p;
  v25 = 0;
  v26 = (void **)((char *)__p + strlen((const char *)__p));
  do
  {
    v27 = v26;
    if (v24 != v26)
    {
      while (2)
      {
        for (i = 0; i != 2; ++i)
        {
          if (*(unsigned __int8 *)v24 == asc_2083E09B2[i])
          {
            v27 = v24;
            goto LABEL_15;
          }
        }
        v24 = (void **)((char *)v24 + 1);
        if (v24 != v26)
          continue;
        break;
      }
      v27 = v26;
    }
LABEL_15:
    *(_BYTE *)v27 = 0;
    if (*(_BYTE *)v79.__locale_)
    {
      v78 = (void **)&v75[1];
      std::back_insert_iterator<std::vector<char *>>::operator=[abi:ne180100](&v78, &v79);
      ++v25;
    }
    if (v27 == v26)
      break;
    v24 = (void **)((char *)v27 + 1);
    v79.__locale_ = (std::locale::__imp *)((char *)v27 + 1);
  }
  while (v25 < 2);
  if (v25 != 2)
  {
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/quantized_connector.cpp", 73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"(", 1);
    v30 = (_QWORD *)std::ostream::operator<<();
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)") [", 3);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"tokenize2(buf, \"\\t \", std::back_inserter(column), 2) == 2", 57);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"] ", 2);
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"format error: ", 14);
    v35 = strlen((const char *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)__p, v35);
    MeCab::die::~die((MeCab::die *)&v79);
  }
  v36 = *(_QWORD *)&v75[1];
  v37 = atoi(**(const char ***)&v75[1]);
  v75[0] = v37;
  v38 = atoi(*(const char **)(v36 + 8));
  v74 = v38;
  v39 = v38 * v37;
  if ((_DWORD)v39)
  {
    v40 = (char *)operator new(v38 * v37);
    v41 = &v40[v39];
    bzero(v40, v39);
  }
  else
  {
    v40 = 0;
    v41 = 0;
  }
  if (v41 - v40 >= 1)
    bzero(v40, v41 - v40);
  v42 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"x", 1);
  v43 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(_QWORD *)(*v43 - 24)));
  v44 = std::locale::use_facet(&v79, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
  std::locale::~locale(&v79);
  std::ostream::put();
  std::ostream::flush();
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
    v45 = std::locale::use_facet(&v79, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
    std::locale::~locale(&v79);
    v46 = (_QWORD *)std::istream::getline();
    if ((*((_BYTE *)v46 + *(_QWORD *)(*v46 - 24) + 32) & 5) != 0)
      break;
    v76 = *(_QWORD *)&v75[1];
    v47 = __p;
    v79.__locale_ = (std::locale::__imp *)__p;
    v48 = 0;
    v49 = (void **)((char *)__p + strlen((const char *)__p));
    do
    {
      v50 = v49;
      if (v47 != v49)
      {
        while (2)
        {
          for (j = 0; j != 2; ++j)
          {
            if (*(unsigned __int8 *)v47 == asc_2083E09B2[j])
            {
              v50 = v47;
              goto LABEL_36;
            }
          }
          v47 = (void **)((char *)v47 + 1);
          if (v47 != v49)
            continue;
          break;
        }
        v50 = v49;
      }
LABEL_36:
      *(_BYTE *)v50 = 0;
      if (*(_BYTE *)v79.__locale_)
      {
        v78 = (void **)&v75[1];
        std::back_insert_iterator<std::vector<char *>>::operator=[abi:ne180100](&v78, &v79);
        ++v48;
      }
      if (v50 == v49)
        break;
      v47 = (void **)((char *)v50 + 1);
      v79.__locale_ = (std::locale::__imp *)((char *)v50 + 1);
    }
    while (v48 < 3);
    if (v48 != 3)
    {
      v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/quantized_connector.cpp", 73);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"(", 1);
      v53 = (_QWORD *)std::ostream::operator<<();
      v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)") [", 3);
      v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"tokenize2(buf, \"\\t \", std::back_inserter(column), 3) == 3", 57);
      v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"] ", 2);
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"format error: ", 14);
      v58 = strlen((const char *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)__p, v58);
      MeCab::die::~die((MeCab::die *)&v79);
    }
    v59 = *(_QWORD *)&v75[1];
    v60 = atoi(**(const char ***)&v75[1]);
    v61 = atoi(*(const char **)(v59 + 8));
    v62 = atoi(*(const char **)(v59 + 16));
    v63 = v75[0];
    if (v60 >= v75[0] || v61 >= v74)
    {
      v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mecabra/src/quantized_connector.cpp", 73);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"(", 1);
      v66 = (_QWORD *)std::ostream::operator<<();
      v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)") [", 3);
      v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"l < lsize && r < rsize", 22);
      v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"index values are out of range", 29);
      MeCab::die::~die((MeCab::die *)&v79);
    }
    MeCab::progress_bar((MeCab *)"emitting matrix      ", (const char *)(v60 + 1), v75[0]);
    v40[v60 + v63 * (uint64_t)(int)v61] = (unsigned __int16)(v62 + 128) >> 8;
  }
  std::ostream::write();
  if ((v81[*(_QWORD *)(v80 - 24) + 24] & 1) != 0)
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"ERROR: failed to write lsize\n", 29);
  std::ostream::write();
  if ((v81[*(_QWORD *)(v80 - 24) + 24] & 1) != 0)
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"ERROR: failed to write rsize\n", 29);
  std::ostream::write();
  if ((v81[*(_QWORD *)(v80 - 24) + 24] & 1) != 0)
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"ERROR: failed to write matrix\n", 30);
  if (v40)
    operator delete(v40);
  if (*(_QWORD *)&v75[1])
  {
    v76 = *(_QWORD *)&v75[1];
    operator delete(*(void **)&v75[1]);
  }
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)&v81[*(_QWORD *)(v80 - 24) - 8], *(_DWORD *)&v81[*(_QWORD *)(v80 - 24) + 24] | 4);
  v80 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)&v81[*(_QWORD *)(v80 - 24) - 8] = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x20BD061F8](v81);
  std::ostream::~ostream();
  MEMORY[0x20BD06354](&v82);
  v71[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v71 + *(_QWORD *)(v71[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v71[2] = MEMORY[0x24BEDB848] + 16;
  if (v72 < 0)
    operator delete((void *)v71[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x20BD06354](&v73);
  v83[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v83 + *(_QWORD *)(v83[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x20BD061F8](v84);
  std::istream::~istream();
  MEMORY[0x20BD06354](&v85);
  return 1;
}

void sub_2083DC53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,uint64_t a48,std::locale a49,uint64_t a50)
{
  if (__p)
  {
    a46 = (uint64_t)__p;
    operator delete(__p);
  }
  std::ofstream::~ofstream(&a50);
  std::istringstream::~istringstream((uint64_t)&a10);
  std::ifstream::~ifstream(&STACK[0x380]);
  _Unwind_Resume(a1);
}

uint64_t MeCab::QuantizedConnector::cost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(__int16 *)(a3 + 92)
                      + (*(char *)(*(_QWORD *)(a1 + 1000)
                                 + *(unsigned __int16 *)(a2 + 84)
                                 + *(unsigned __int16 *)(a3 + 86) * (unint64_t)*(unsigned __int16 *)(a1 + 360)) << 8));
}

uint64_t MeCab::QuantizedConnector::get_connect_cost(MeCab::QuantizedConnector *this, int a2, int a3)
{
  return (*(char *)(*((_QWORD *)this + 125) + a2 + *((unsigned __int16 *)this + 180) * a3) << 8);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x24BEDA9B0](this, __c, __pos);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
  MEMORY[0x24BEDAC08](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add, __p_new_stuff);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x24BEDAC98](this, __n, __c);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x24BEDACA8](this, __pos, __n1, __s, __n2);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
  MEMORY[0x24BEDACB8](this, __requested_capacity);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x24BEDACC8](this, __c);
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x24BEDACE8](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x24BEDAD00](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x24BEDADD8]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x24BEDADE0]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x24BEDADF0]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x24BEDADF8]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x24BEDAE50]();
}

uint64_t std::istream::getline()
{
  return MEMORY[0x24BEDAE58]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x24BEDAE70]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x24BEDAE78]();
}

{
  return MEMORY[0x24BEDAE80]();
}

{
  return MEMORY[0x24BEDAE90]();
}

{
  return MEMORY[0x24BEDAEA8]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x24BEDAEE0]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x24BEDAEE8]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x24BEDAEF0]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x24BEDAF10]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF30]();
}

{
  return MEMORY[0x24BEDAF48]();
}

{
  return MEMORY[0x24BEDAF50]();
}

{
  return MEMORY[0x24BEDAF60]();
}

{
  return MEMORY[0x24BEDAF68]();
}

{
  return MEMORY[0x24BEDAF70]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x24BEDB010]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

std::ios_base::Init *__cdecl std::ios_base::Init::Init(std::ios_base::Init *this)
{
  return (std::ios_base::Init *)MEMORY[0x24BEDB508](this);
}

void std::ios_base::Init::~Init(std::ios_base::Init *this)
{
  MEMORY[0x24BEDB510](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

uint64_t operator delete[]()
{
  return off_24C09BA68();
}

void operator delete(void *__p)
{
  off_24C09BA70(__p);
}

void operator delete(void *__p, const std::nothrow_t *a2)
{
  off_24C09BA78(__p, a2);
}

uint64_t operator delete()
{
  return off_24C09BA80();
}

void *__cdecl operator new[](size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_24C09BA88(__sz, a2);
}

uint64_t operator new[]()
{
  return off_24C09BA90();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_24C09BA98(__sz);
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_24C09BAA0(__sz, a2);
}

uint64_t operator new()
{
  return off_24C09BAA8();
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x24BDAC7B0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x24BEDB940](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x24BEDB958]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x24BDAC838](*(_QWORD *)&a1, a2);
}

double atof(const char *a1)
{
  double result;

  MEMORY[0x24BDAD250](a1);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x24BDAD258](a1);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

int close(int a1)
{
  return MEMORY[0x24BDAD9D8](*(_QWORD *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x24BDAD9F0](a1);
}

void exit(int a1)
{
  MEMORY[0x24BDAE268](*(_QWORD *)&a1);
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x24BDAE270](__x);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x24BDAE2E0](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x24BDAE350](a1);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAE428](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x24BDAE508](*(_QWORD *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE590](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x24BDAE5F0](a1);
}

size_t iconv(iconv_t a1, char **a2, size_t *a3, char **a4, size_t *a5)
{
  return MEMORY[0x24BEDBF18](a1, a2, a3, a4, a5);
}

int iconv_close(iconv_t a1)
{
  return MEMORY[0x24BEDBF20](a1);
}

iconv_t iconv_open(const char *a1, const char *a2)
{
  return (iconv_t)MEMORY[0x24BEDBF28](a1, a2);
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAA8](__x);
  return result;
}

int madvise(void *a1, size_t a2, int a3)
{
  return MEMORY[0x24BDAED00](a1, a2, *(_QWORD *)&a3);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED88](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE70](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x24BDAEEB0](__b, __pattern16, __len);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x24BDAEFA8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x24BDAEFF0](a1, a2);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x24BDAF228](a1, *(_QWORD *)&a2);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x24BDAF258](a1);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x24BDAF6A8](a1);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x24BDAF818](a1, a2, a3, a4);
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x24BDAF880](a1, a2);
}

int putchar(int a1)
{
  return MEMORY[0x24BDAF9F0](*(_QWORD *)&a1);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x24BDAFA88](a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x24BDAFF00](__dst, __src);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x24BDAFF68](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x24BDAFF70](__dst, __src, __n);
}

