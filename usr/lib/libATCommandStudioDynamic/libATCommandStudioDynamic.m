void qmi::Client::send(uint64_t a1, uint64_t a2)
{
  qmi::Client::State::send(*(_QWORD *)(a1 + 16), a2);
}

void __destroy_helper_block_e8_32r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 32), 8);
}

void __copy_helper_block_e8_32r(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 32), *(const void **)(a2 + 32), 8);
}

void __destroy_helper_block_e8_40c48_ZTSNSt3__18weak_ptrIN3qmi11ClientProxy5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t __copy_helper_block_e8_32c47_ZTSNSt3__110shared_ptrI19ATCSRouterIPCDriverEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void ___ZN3qmi11ClientProxy5State18handleMessage_syncERKN3xpc4dictE_block_invoke(uint64_t a1)
{
  qmi::ClientProxy::State::handleMessage(*(_QWORD *)(a1 + 40), (xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

uint64_t __copy_helper_block_e8_40c48_ZTSNSt3__18weak_ptrIN3qmi11ClientProxy5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

xpc_object_t __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  xpc_object_t result;

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  result = xpc_null_create();
  *(_QWORD *)(a2 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_32b40c22_ZTSN8dispatch6sourceE(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 40);
  if (v2)
    dispatch_release(v2);
  _Block_object_dispose(*(const void **)(a1 + 32), 7);
}

void __destroy_helper_block_e8_32c47_ZTSNSt3__110shared_ptrI19ATCSRouterIPCDriverEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t ___ZN8dispatch9sync_implIRU13block_pointerFivEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 40) + 16))();
  **(_DWORD **)(a1 + 32) = result;
  return result;
}

uint64_t QMux::State::getWriteDataInternal_sync(QMux::State *this, unsigned __int8 *__dst, unsigned int a3)
{
  size_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  char **v18;
  char **v19;
  BOOL v20;
  char **v21;
  unsigned int v22;
  BOOL v23;
  char v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  char v30;
  unsigned int v31;
  BOOL v32;
  BOOL v33;
  std::__shared_weak_count *v34;
  int v35;
  char *v36;
  int v37;
  char v38;
  int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  int64x2_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  const char *v62;
  int v63;
  const char *v64;
  unint64_t *v65;
  unint64_t v66;
  int v68;
  unsigned int v69;
  std::__shared_weak_count *v70;
  uint64_t *v71;

  if (!*((_QWORD *)this + 22) || *((_BYTE *)this + 360) && *((_DWORD *)this + 93) >= *((_DWORD *)this + 91))
    return 0;
  LOWORD(v5) = 0;
  v6 = *((_QWORD *)this + 21);
  v7 = *(_QWORD *)(*((_QWORD *)this + 18) + 8 * (v6 / 0xAA));
  v8 = v6 % 0xAA;
  v9 = (unsigned __int8 *)(v7 + 24 * (v6 % 0xAA));
  if (a3 >= 0xFFFF)
    v10 = 0xFFFFLL;
  else
    v10 = a3;
  v12 = v9 + 8;
  v11 = *((_QWORD *)v9 + 1);
  v13 = *(_QWORD *)(v11 + 8) - *(_QWORD *)v11;
  if ((_DWORD)v10)
  {
    v14 = *((unsigned __int16 *)this + 156);
    if (v13 > v14)
    {
      if (v13 - v14 >= v10)
        v5 = v10;
      else
        v5 = v13 - v14;
      memmove(__dst, (const void *)(*(_QWORD *)v11 + v14), v5);
      v11 = *(_QWORD *)v12;
      v13 = *(_QWORD *)(*(_QWORD *)v12 + 8) - **(_QWORD **)v12;
    }
  }
  v15 = *v9;
  v16 = *(unsigned __int8 *)(v7 + 24 * v8 + 1);
  v17 = *(unsigned __int16 *)(v11 + 24);
  v18 = (char **)*((_QWORD *)this + 15);
  v69 = *(unsigned __int16 *)(v11 + 26);
  if (!v18)
    goto LABEL_49;
  v19 = (char **)((char *)this + 120);
  do
  {
    v22 = *((unsigned __int8 *)v18 + 32);
    v23 = v22 == v15;
    if (v22 >= v15)
      v24 = 1;
    else
      v24 = -1;
    if (v23)
    {
      v25 = *((unsigned __int8 *)v18 + 33);
      v26 = v25 == v16;
      v24 = v25 >= v16 ? 1 : -1;
      if (v26)
        v24 = 0;
    }
    v20 = (v24 & 0x80) == 0;
    if (v24 < 0)
      v21 = v18 + 1;
    else
      v21 = v18;
    if (v20)
      v19 = v18;
    v18 = (char **)*v21;
  }
  while (*v21);
  if (v19 == (char **)((char *)this + 120))
    goto LABEL_49;
  v28 = *((unsigned __int8 *)v19 + 32);
  v29 = v15 == v28;
  if (v15 >= v28)
    v30 = 1;
  else
    v30 = -1;
  if (v29)
  {
    v31 = *((unsigned __int8 *)v19 + 33);
    v32 = v16 >= v31;
    v33 = v16 == v31;
    v30 = -1;
    if (v32)
      v30 = 1;
    if (v33)
      v30 = 0;
  }
  if (v30 < 0)
  {
LABEL_49:
    v39 = 0;
    v36 = 0;
    v37 = 0;
    v70 = 0;
    v38 = 1;
  }
  else
  {
    v70 = 0;
    v34 = (std::__shared_weak_count *)v19[6];
    if (v34)
    {
      v35 = v17;
      v70 = std::__shared_weak_count::lock(v34);
      if (v70)
      {
        v36 = v19[5];
        if (v36)
        {
          v37 = (*(uint64_t (**)(char *))(*(_QWORD *)v36 + 104))(v36);
          v17 = v35;
          v38 = 0;
          v39 = 1;
          goto LABEL_50;
        }
      }
      else
      {
        v36 = 0;
      }
      v37 = 0;
      v38 = 1;
      v39 = 1;
      v17 = v35;
    }
    else
    {
      v36 = 0;
      v37 = 0;
      v38 = 1;
      v39 = 1;
    }
  }
LABEL_50:
  v27 = (unsigned __int16)v5;
  v40 = (unsigned __int16)(*((_WORD *)this + 156) + v5);
  *((_WORD *)this + 156) += v5;
  if (v40 != (unsigned __int16)v13)
  {
LABEL_76:
    v60 = *((_DWORD *)this + 50);
    if (v60 <= 1)
      goto LABEL_89;
    v61 = v27;
    if ((v38 & 1) != 0)
      goto LABEL_82;
    goto LABEL_80;
  }
  *((_WORD *)this + 156) = 0;
  v41 = *((_QWORD *)this + 21);
  v42 = *((_QWORD *)this + 18);
  v43 = (uint64_t *)(v42 + 8 * (v41 / 0xAA));
  if (*((_QWORD *)this + 19) == v42)
    v44 = 0;
  else
    v44 = (uint64_t *)(*v43 + 24 * (v41 % 0xAA));
  v68 = v17;
  v45 = (uint64_t *)(v42 + 8 * (v41 / 0xAA));
  v46 = v37;
  v47 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v44 - *v43) >> 3);
  if ((uint64_t)v44 - *v43 < -23)
  {
    v51 = 168 - v47;
    v49 = &v45[-(v51 / 0xAA)];
    v50 = (uint64_t *)(*v49 + 24 * (170 * (v51 / 0xAA) - v51) + 4056);
  }
  else
  {
    v48 = v47 + 1;
    v49 = &v45[v48 / 0xAA];
    v50 = (uint64_t *)(*v49 + 24 * (v48 % 0xAA));
  }
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<QMuxQueueItem,QMuxQueueItem*,QMuxQueueItem&,QMuxQueueItem**,long,170l>,std::__deque_iterator<QMuxQueueItem,QMuxQueueItem*,QMuxQueueItem&,QMuxQueueItem**,long,170l>,0>(&v71, v43, v44, v45, v44, v49, v50);
  v52 = (std::__shared_weak_count *)v44[2];
  if (v52)
  {
    p_shared_owners = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(p_shared_owners);
    while (__stlxr(v54 - 1, p_shared_owners));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = vaddq_s64(*(int64x2_t *)((char *)this + 168), (int64x2_t)xmmword_19EA1DD90);
  *(int64x2_t *)((char *)this + 168) = v55;
  if (v55.i64[0] >= 0x154uLL)
  {
    operator delete(**((void ***)this + 18));
    *((_QWORD *)this + 18) += 8;
    *((_QWORD *)this + 21) -= 170;
  }
  if (*((_BYTE *)this + 360))
  {
    v56 = (unsigned int *)((char *)this + 368);
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 - 1, v56));
    v58 = (unsigned int *)((char *)this + 372);
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  if (!v39)
  {
    v62 = (char *)this + 40;
    if (*((char *)this + 63) < 0)
      v62 = *(const char **)v62;
    (*(void (**)(_QWORD, uint64_t, const char *, ...))(**((_QWORD **)this + 10) + 24))(*((_QWORD *)this + 10), 6, "[%s] Cannot call handleSentData, QMI client(svc=%d client=%d) not found\n", v62, v15, v16);
    v17 = v68;
    v37 = v46;
    goto LABEL_76;
  }
  if ((v38 & 1) != 0)
  {
    v60 = *((_DWORD *)this + 50);
    v61 = v27;
    v17 = v68;
    v37 = v46;
    if (v60 <= 1)
      goto LABEL_89;
LABEL_82:
    if (v61 >= v27)
      v63 = v27;
    else
      v63 = v61;
    sLogBinaryToOsLog(*((capabilities::abs **)this + 44), v60, 0, v15, v17, v37, (uint64_t)__dst, v63);
    if (v61 < v27)
    {
      v64 = (char *)this + 40;
      if (*((char *)this + 63) < 0)
        v64 = *(const char **)v64;
      (*(void (**)(_QWORD, uint64_t, const char *, ...))(**((_QWORD **)this + 10) + 24))(*((_QWORD *)this + 10), 6, "[%s] send: Truncated binary from %d bytes to %u bytes for QMI client(svc=%d client=%d)\n", v64, v27, v61, v15, v16);
    }
    goto LABEL_89;
  }
  (*(void (**)(char *, _QWORD))(*(_QWORD *)v36 + 56))(v36, v69);
  v17 = v68;
  v37 = v46;
  v60 = *((_DWORD *)this + 50);
  if (v60 > 1)
  {
LABEL_80:
    if (*((int *)v36 + 10) >= 2)
    {
      v61 = *((_DWORD *)v36 + 9);
      goto LABEL_82;
    }
  }
LABEL_89:
  if (v70)
  {
    v65 = (unint64_t *)&v70->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  return v27;
}

void sub_19E9C9B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E9C9B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E9C9B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void QMux::State::handleMessage_sync(uint64_t a1, uint64_t a2, const void *a3, size_t a4, unsigned __int16 *a5, unint64_t a6)
{
  BOOL v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t *v23;
  unsigned int v24;
  BOOL v25;
  char v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  BOOL v30;
  char v31;
  unsigned int v32;
  BOOL v33;
  BOOL v34;
  char v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  const char *v42;
  size_t v43;
  int v44;
  unsigned int v45;
  const char *v46;
  unsigned int v47;
  uint64_t v48;
  const char *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  char **v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  BOOL v56;
  char v57;
  char *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  const char *v64;
  int v65;
  uint64_t v66;
  std::__shared_weak_count *v67;

  if (*(_BYTE *)(a1 + 360))
    v12 = *(_DWORD *)(a2 + 8) == 1;
  else
    v12 = 0;
  if (v12)
  {
    v13 = (unsigned int *)(a1 + 372);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
      atomic_store(0, v13);
    v15 = *(_QWORD *)(a1 + 184);
    if (v15 && (!*(_BYTE *)(a1 + 360) || *(_DWORD *)(a1 + 372) < *(_DWORD *)(a1 + 364)))
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, a1, *(_QWORD *)(a1 + 208));
  }
  v16 = *(unsigned __int8 *)(a2 + 6);
  if (v16 == 255)
  {
    QMux::State::handleBroadcastMessage_sync(a1, a2, a3, a4, a5, a6);
    return;
  }
  if (a6 < 2)
  {
    v17 = 0;
    v18 = *(unsigned __int8 *)(a2 + 5);
    v19 = a1 + 120;
    v20 = *(_QWORD *)(a1 + 120);
    if (!v20)
    {
LABEL_57:
      v40 = *(_DWORD *)(a2 + 8);
      if (v40 == 1)
        v41 = 1;
      else
        v41 = 2 * (v40 != 0);
      sLogBinaryToOsLog(*(capabilities::abs **)(a1 + 352), *(_DWORD *)(a1 + 200), v41, v18, v17, 0, (uint64_t)a3, a4);
      v42 = (const char *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0)
        v42 = *(const char **)v42;
      (*(void (**)(_QWORD, uint64_t, const char *, ...))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), 6, "[%s] handleReadData: Cannot find QMI client. Dropping. (svc=%d client=%d txid=%d msgid=0x%x)\n", v42, *(unsigned __int8 *)(a2 + 5), *(unsigned __int8 *)(a2 + 6), *(unsigned __int16 *)(a2 + 12), v17);
      return;
    }
  }
  else
  {
    v17 = *a5;
    v18 = *(unsigned __int8 *)(a2 + 5);
    v19 = a1 + 120;
    v20 = *(_QWORD *)(a1 + 120);
    if (!v20)
      goto LABEL_57;
  }
  v21 = v19;
  do
  {
    v24 = *(unsigned __int8 *)(v20 + 32);
    v25 = v24 == v18;
    if (v24 >= v18)
      v26 = 1;
    else
      v26 = -1;
    if (v25)
    {
      v27 = *(unsigned __int8 *)(v20 + 33);
      v28 = v27 == v16;
      v26 = v27 >= v16 ? 1 : -1;
      if (v28)
        v26 = 0;
    }
    v22 = (v26 & 0x80) == 0;
    if (v26 < 0)
      v23 = (uint64_t *)(v20 + 8);
    else
      v23 = (uint64_t *)v20;
    if (v22)
      v21 = v20;
    v20 = *v23;
  }
  while (*v23);
  if (v21 == v19)
    goto LABEL_57;
  v29 = *(unsigned __int8 *)(v21 + 32);
  v30 = v18 == v29;
  if (v18 >= v29)
    v31 = 1;
  else
    v31 = -1;
  if (v30)
  {
    v32 = *(unsigned __int8 *)(v21 + 33);
    v33 = v16 >= v32;
    v34 = v16 == v32;
    v35 = -1;
    if (v33)
      v35 = 1;
    if (v34)
      v31 = 0;
    else
      v31 = v35;
  }
  if (v31 < 0)
    goto LABEL_57;
  v67 = 0;
  v36 = *(std::__shared_weak_count **)(v21 + 48);
  if (!v36)
    goto LABEL_78;
  v67 = std::__shared_weak_count::lock(v36);
  if (!v67)
    goto LABEL_78;
  v37 = *(_QWORD *)(v21 + 40);
  v66 = v37;
  if (!v37)
  {
    v39 = *(_DWORD *)(a1 + 200);
    if (v39 > 1)
    {
      v38 = 0;
LABEL_66:
      v43 = *(unsigned int *)(v37 + 36);
      v44 = *(_DWORD *)(a2 + 8);
      if (v44 == 1)
        v45 = 1;
      else
        v45 = 2 * (v44 != 0);
      sLogBinaryToOsLog(*(capabilities::abs **)(a1 + 352), v39, v45, *(unsigned __int8 *)(a2 + 5), v17, v38, (uint64_t)a3, a4);
      if (a4 > v43)
      {
        v46 = (const char *)(a1 + 40);
        if (*(char *)(a1 + 63) < 0)
          v46 = *(const char **)v46;
        (*(void (**)(_QWORD, uint64_t, const char *, ...))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), 6, "[%s] recv: Truncated binary from %zd bytes to %zu bytes for QMI client(svc=%d client=%d)\n", v46, a4, v43, *(unsigned __int8 *)(a2 + 5), *(unsigned __int8 *)(a2 + 6));
      }
      goto LABEL_73;
    }
LABEL_78:
    v49 = (const char *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      v49 = *(const char **)v49;
    (*(void (**)(_QWORD, uint64_t, const char *, ...))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), 6, "[%s] handleReadData: Client did exist, but is now dead; dropping. (svc=%d client=%d txid=%d msgid=0x%x)\n",
      v49,
      *(unsigned __int8 *)(a2 + 5),
      *(unsigned __int8 *)(a2 + 6),
      *(unsigned __int16 *)(a2 + 12),
      v17);
    goto LABEL_81;
  }
  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 104))(v37);
  v39 = *(_DWORD *)(a1 + 200);
  if (v39 >= 2 && *(int *)(v37 + 40) >= 2)
    goto LABEL_66;
LABEL_73:
  v65 = v38;
  if (*(_DWORD *)(a1 + 216) == 4)
  {
    v47 = *(unsigned __int8 *)(a2 + 5);
    if (*(_BYTE *)(a2 + 5) || v17 != 42)
    {
      v48 = *(_QWORD *)(a1 + 296);
      if (v48)
      {
        while (1)
        {
          v53 = v48;
          v54 = *(unsigned __int8 *)(v48 + 26);
          if (v47 == v54)
          {
            v55 = *(unsigned __int16 *)(v53 + 28);
            if (v17 >= v55)
            {
              v56 = v55 == v17;
              if (v55 >= v17)
                v57 = 1;
              else
                v57 = -1;
              if (v56)
                v57 = 0;
              goto LABEL_99;
            }
LABEL_86:
            v48 = *(_QWORD *)v53;
            v52 = (char **)v53;
            if (!*(_QWORD *)v53)
              goto LABEL_103;
          }
          else
          {
            if (v47 < v54)
              goto LABEL_86;
            if (v54 >= v47)
              v57 = 1;
            else
              v57 = -1;
LABEL_99:
            if ((v57 & 0x80) == 0)
              goto LABEL_106;
            v48 = *(_QWORD *)(v53 + 8);
            if (!v48)
            {
              v52 = (char **)(v53 + 8);
              goto LABEL_103;
            }
          }
        }
      }
      v52 = (char **)(a1 + 296);
      v53 = a1 + 296;
LABEL_103:
      v58 = (char *)operator new(0x20uLL);
      *(_DWORD *)(v58 + 26) = v47 | (v17 << 16) | 0xAA00;
      *(_QWORD *)v58 = 0;
      *((_QWORD *)v58 + 1) = 0;
      *((_QWORD *)v58 + 2) = v53;
      *v52 = v58;
      v59 = **(_QWORD **)(a1 + 288);
      if (v59)
      {
        *(_QWORD *)(a1 + 288) = v59;
        v58 = *v52;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 296), (uint64_t *)v58);
      ++*(_QWORD *)(a1 + 304);
    }
  }
LABEL_106:
  v60 = *(_DWORD *)(a2 + 8);
  if (v60 == 2)
  {
    (*(void (**)(uint64_t, unsigned __int16 *, unint64_t))(*(_QWORD *)v66 + 40))(v66, a5, a6);
    if (*(_QWORD *)(a1 + 320) == *(_QWORD *)(a1 + 328)
      && QMIControl::getPowerModeForMsg_sync(*(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a2 + 5), v17) == 1)
    {
      v61 = mach_absolute_time();
      QMIWakeReason::set(a1 + 320, a3, a4, v61);
    }
  }
  else if (v60 == 1)
  {
    (*(void (**)(uint64_t, _QWORD, unsigned __int16 *, unint64_t))(*(_QWORD *)v66 + 32))(v66, *(unsigned __int16 *)(a2 + 12), a5, a6);
  }
  else
  {
    v62 = (const char *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      v62 = *(const char **)v62;
    v63 = *(_QWORD *)(a1 + 80);
    v64 = (const char *)qmi::asString();
    (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v63 + 24))(v63, 6, "[%s] handleReadData: Unknown message type %s; dropping. (svc=%d client=%d txid=%d msgid=0x%x sim=%hhu)\n",
      v62,
      v64,
      *(unsigned __int8 *)(a2 + 5),
      *(unsigned __int8 *)(a2 + 6),
      *(unsigned __int16 *)(a2 + 12),
      v17,
      v65);
  }
LABEL_81:
  if (v67)
  {
    p_shared_owners = (unint64_t *)&v67->__shared_owners_;
    do
      v51 = __ldaxr(p_shared_owners);
    while (__stlxr(v51 - 1, p_shared_owners));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
}

void sub_19E9CA0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E9CA0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E9CA108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sLogBinaryToOsLog(capabilities::abs *a1, int a2, unsigned int a3, int a4, int a5, int a6, uint64_t a7, int a8)
{
  _BOOL4 v15;
  const char *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  NSObject *v21;
  uint32_t v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v30;
  char v31;
  BOOL v32;
  const char *v33;
  const char *v34;
  BOOL v35;
  _BOOL4 v37;
  const char *v38;
  const char *v39;
  _BOOL4 v40;
  const char *v41;
  const char *v42;
  const char *v43;
  const char *v44;
  const char *v45;
  const char *v46;
  int v47;
  int v48;
  __int16 v49;
  const char *v50;
  __int16 v51;
  const char *v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  _WORD v58[11];

  *(_QWORD *)&v58[7] = *MEMORY[0x1E0C80C00];
  if (a2 < 2)
    return;
  if (!capabilities::abs::shouldLogSIMSlot(a1))
    a6 = 0;
  switch(a4)
  {
    case 0:
    case 2:
    case 4:
    case 8:
    case 9:
    case 10:
    case 12:
    case 26:
    case 34:
    case 36:
    case 40:
    case 42:
    case 43:
    case 44:
    case 48:
    case 82:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 234:
      goto LABEL_5;
    case 1:
      if ((a3 != 2 || a5 != 1) && (a3 || a5 != 32))
      {
        v23 = a3 == 2 && a5 == 34;
        v24 = v23;
        v25 = a5 == 32 && a3 == 1;
        if (!v25 && !v24)
        {
          v26 = a5 == 45 || a5 == 107;
          v27 = !v26 || a3 >= 2;
          v28 = !v27;
          if (a5 != 198 || a3 != 2)
            goto LABEL_83;
        }
      }
      goto LABEL_84;
    case 3:
      if (a3 != 2 || a5 != 81)
        goto LABEL_5;
      goto LABEL_84;
    case 5:
      if (a3)
        v30 = 0;
      else
        v30 = a5 == 32;
      v31 = v30;
      v32 = a5 == 1 && a3 == 2;
      if (v32 || (v31 & 1) != 0)
        goto LABEL_93;
      goto LABEL_5;
    case 11:
      if (a3 > 1 || a5 != 52)
        goto LABEL_5;
      goto LABEL_93;
    case 225:
      if (a3 == 2 && a5 == 45)
        goto LABEL_84;
      v35 = a3 != 2 || (a5 - 53) >= 3;
      v28 = !v35;
      if (a5 == 51 && a3 == 0)
        goto LABEL_84;
LABEL_83:
      if (!v28)
        goto LABEL_5;
LABEL_84:
      v37 = os_log_type_enabled((os_log_t)a1, OS_LOG_TYPE_DEFAULT);
      if (a6)
      {
        if (!v37)
          return;
        v38 = qmi::asShortString(a4);
        if (a3 > 2)
          v39 = "???";
        else
          v39 = off_1E4153ED0[(char)a3];
        v47 = 67110658;
        v48 = a4;
        v49 = 2080;
        v50 = v38;
        v51 = 2080;
        v52 = v39;
        v53 = 1024;
        v54 = a5;
        v55 = 1024;
        v56 = a6;
        v57 = 1040;
        *(_DWORD *)v58 = a8;
        v58[2] = 2098;
        *(_QWORD *)&v58[3] = a7;
        v20 = "QMI: Svc=0x%02x(%s) %s MsgId=0x%04x Sim=%d Bin=[%{public,libTelephonyDecoder:QMI}.*P]";
        goto LABEL_14;
      }
      if (!v37)
        return;
      v43 = qmi::asShortString(a4);
      if (a3 > 2)
        v44 = "???";
      else
        v44 = off_1E4153ED0[(char)a3];
      v47 = 67110402;
      v48 = a4;
      v49 = 2080;
      v50 = v43;
      v51 = 2080;
      v52 = v44;
      v53 = 1024;
      v54 = a5;
      v55 = 1040;
      v56 = a8;
      v57 = 2098;
      *(_QWORD *)v58 = a7;
      v20 = "QMI: Svc=0x%02x(%s) %s MsgId=0x%04x Bin=[%{public,libTelephonyDecoder:QMI}.*P]";
      goto LABEL_17;
    case 226:
      if (a3 != 1 || a5 != 53268)
        goto LABEL_5;
      goto LABEL_93;
    case 233:
      if (a3 != 1 || (a5 & 0xFFFE) != 0xD00C)
      {
LABEL_5:
        v15 = os_log_type_enabled((os_log_t)a1, OS_LOG_TYPE_DEFAULT);
        if (a6)
        {
          if (!v15)
            return;
          v16 = qmi::asShortString(a4);
          if (a3 > 2)
            v17 = "???";
          else
            v17 = off_1E4153ED0[(char)a3];
          v47 = 67110658;
          v48 = a4;
          v49 = 2080;
          v50 = v16;
          v51 = 2080;
          v52 = v17;
          v53 = 1024;
          v54 = a5;
          v55 = 1024;
          v56 = a6;
          v57 = 1040;
          *(_DWORD *)v58 = a8;
          v58[2] = 2096;
          *(_QWORD *)&v58[3] = a7;
          v20 = "QMI: Svc=0x%02x(%s) %s MsgId=0x%04x Sim=%d Bin=[%{libTelephonyDecoder:QMI}.*P]";
          goto LABEL_14;
        }
        if (!v15)
          return;
        v18 = qmi::asShortString(a4);
        if (a3 > 2)
          v19 = "???";
        else
          v19 = off_1E4153ED0[(char)a3];
        v47 = 67110402;
        v48 = a4;
        v49 = 2080;
        v50 = v18;
        v51 = 2080;
        v52 = v19;
        v53 = 1024;
        v54 = a5;
        v55 = 1040;
        v56 = a8;
        v57 = 2096;
        *(_QWORD *)v58 = a7;
        v20 = "QMI: Svc=0x%02x(%s) %s MsgId=0x%04x Bin=[%{libTelephonyDecoder:QMI}.*P]";
        goto LABEL_17;
      }
LABEL_93:
      v40 = os_log_type_enabled((os_log_t)a1, OS_LOG_TYPE_DEFAULT);
      if (!a6)
      {
        if (!v40)
          return;
        v45 = qmi::asShortString(a4);
        if (a3 > 2)
          v46 = "???";
        else
          v46 = off_1E4153ED0[(char)a3];
        v47 = 67110403;
        v48 = a4;
        v49 = 2080;
        v50 = v45;
        v51 = 2080;
        v52 = v46;
        v53 = 1024;
        v54 = a5;
        v55 = 1040;
        v56 = a8;
        v57 = 2101;
        *(_QWORD *)v58 = a7;
        v20 = "QMI: Svc=0x%02x(%s) %s MsgId=0x%04x Bin=[%{sensitive,libTelephonyDecoder:QMI}.*P]";
LABEL_17:
        v21 = a1;
        v22 = 50;
        goto LABEL_18;
      }
      if (v40)
      {
        v41 = qmi::asShortString(a4);
        if (a3 > 2)
          v42 = "???";
        else
          v42 = off_1E4153ED0[(char)a3];
        v47 = 67110659;
        v48 = a4;
        v49 = 2080;
        v50 = v41;
        v51 = 2080;
        v52 = v42;
        v53 = 1024;
        v54 = a5;
        v55 = 1024;
        v56 = a6;
        v57 = 1040;
        *(_DWORD *)v58 = a8;
        v58[2] = 2101;
        *(_QWORD *)&v58[3] = a7;
        v20 = "QMI: Svc=0x%02x(%s) %s MsgId=0x%04x Sim=%d Bin=[%{sensitive,libTelephonyDecoder:QMI}.*P]";
LABEL_14:
        v21 = a1;
        v22 = 56;
LABEL_18:
        _os_log_impl(&dword_19E9C8000, v21, OS_LOG_TYPE_DEFAULT, v20, (uint8_t *)&v47, v22);
      }
      return;
    default:
      if (os_log_type_enabled((os_log_t)a1, OS_LOG_TYPE_DEBUG))
      {
        v33 = qmi::asShortString(a4);
        if (a3 > 2)
          v34 = "???";
        else
          v34 = off_1E4153ED0[(char)a3];
        v47 = 67109890;
        v48 = a4;
        v49 = 2080;
        v50 = v33;
        v51 = 2080;
        v52 = v34;
        v53 = 1024;
        v54 = a5;
        _os_log_debug_impl(&dword_19E9C8000, (os_log_t)a1, OS_LOG_TYPE_DEBUG, "QMI: Svc=0x%02x(%s) %s MsgId=0x%04x", (uint8_t *)&v47, 0x22u);
      }
      return;
  }
}

const char *qmi::asShortString(int a1)
{
  const char *result;

  result = "CTL";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = "WDS";
      break;
    case 2:
      result = "DMS";
      break;
    case 3:
      result = "NAS";
      break;
    case 4:
      result = "QOS";
      break;
    case 5:
      result = "WMS";
      break;
    case 6:
      result = "PDS";
      break;
    case 8:
      result = "AT";
      break;
    case 9:
      result = "VS";
      break;
    case 10:
      result = "CAT";
      break;
    case 11:
      result = "UIM";
      break;
    case 12:
      result = "PBM";
      break;
    case 26:
      result = "WDA";
      break;
    case 34:
      result = "COEX";
      break;
    case 36:
      result = "PDC";
      break;
    case 40:
      result = "787";
      break;
    case 42:
      result = "DSD";
      break;
    case 43:
      result = "SSCTL";
      break;
    case 44:
      result = "MFSE";
      break;
    case 48:
      result = "DFS";
      break;
    case 82:
      result = "MS";
      break;
    case 225:
      result = "AUDIO";
      break;
    case 226:
      result = "BSP";
      break;
    case 227:
      result = "CIQ";
      break;
    case 228:
      result = "AWD";
      break;
    case 229:
      result = "VINYL";
      break;
    case 230:
      result = "MAVIMS";
      break;
    case 231:
      result = "ELQM";
      break;
    case 232:
      result = "P2P";
      break;
    case 233:
      result = "APPS";
      break;
    case 234:
      result = "SFT";
      break;
    default:
      result = "???";
      break;
  }
  return result;
}

uint64_t qmi::QmiClientProxyAdapter::simSlot(qmi::QmiClientProxyAdapter *this)
{
  return *((unsigned __int8 *)this + 232);
}

void qmi::ClientProxy::State::handleResponse_sync(uint64_t a1, const void *a2, size_t a3, int a4)
{
  uint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  uint64_t v20;
  NSObject *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  int *v37;
  uint64_t v38;
  unint64_t v39;
  int *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t *i;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  NSObject *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  NSObject *v52;
  int64x2_t v53;
  unint64_t v54;
  uint64_t v55;
  int *v56;
  unint64_t v57;
  int **v58;
  int *v59;
  int *v60;
  uint64_t v61;
  int **v62;
  int *v63;
  int *v64;
  int *v65;
  uint64_t v66;
  NSObject *v67;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  NSObject *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  xpc_object_t object;
  uint8_t buf[24];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 96);
  if (*(_QWORD *)(a1 + 104) != v4)
  {
    v6 = *(_QWORD *)(a1 + 120);
    v7 = (char *)(v4 + 8 * (v6 >> 7));
    v8 = *(_QWORD *)v7;
    v9 = *(_QWORD *)v7 + 32 * (v6 & 0x7F);
    v10 = *(_QWORD *)(v4 + (((*(_QWORD *)(a1 + 128) + v6) >> 4) & 0xFFFFFFFFFFFFFF8))
        + 32 * ((*(_QWORD *)(a1 + 128) + v6) & 0x7F);
    if (v9 != v10)
    {
      while (*(unsigned __int16 *)(*(_QWORD *)(v9 + 16) + 26) != a4)
      {
        v9 += 32;
        if (v9 - v8 == 4096)
        {
          v13 = *((_QWORD *)v7 + 1);
          v7 += 8;
          v8 = v13;
          v9 = v13;
        }
        if (v9 == v10)
          return;
      }
      v14 = xpc_dictionary_create(0, 0, 0);
      if (v14 || (v14 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1A1AEB9A8](v14) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v14);
          v15 = v14;
        }
        else
        {
          v15 = xpc_null_create();
        }
      }
      else
      {
        v15 = xpc_null_create();
        v14 = 0;
      }
      xpc_release(v14);
      v16 = xpc_data_create(a2, a3);
      if (!v16)
        v16 = xpc_null_create();
      xpc_dictionary_set_value(v15, "resp_qmi_message", v16);
      v17 = xpc_null_create();
      xpc_release(v16);
      xpc_release(v17);
      v18 = xpc_int64_create(*(unsigned __int16 *)(*(_QWORD *)(v9 + 16) + 26));
      if (!v18)
        v18 = xpc_null_create();
      xpc_dictionary_set_value(v15, "txid", v18);
      v19 = xpc_null_create();
      xpc_release(v18);
      xpc_release(v19);
      v20 = *(_QWORD *)(a1 + 232);
      if (!v20)
      {
        v21 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          v22 = (_QWORD *)(a1 + 48);
          if (*(char *)(a1 + 71) < 0)
            v22 = (_QWORD *)*v22;
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v22;
          _os_log_error_impl(&dword_19E9C8000, v21, OS_LOG_TYPE_ERROR, "Client: [%s], invalid fTransport when handling response", buf, 0xCu);
        }
        goto LABEL_56;
      }
      object = v15;
      if (v15)
        xpc_retain(v15);
      else
        object = xpc_null_create();
      (*(void (**)(uint64_t, xpc_object_t *))(*(_QWORD *)v20 + 24))(v20, &object);
      xpc_release(object);
      object = 0;
      v23 = *(_QWORD *)(a1 + 120);
      v24 = *(_QWORD *)(a1 + 96);
      v25 = *(_QWORD *)(a1 + 104);
      v26 = (int *)(v24 + 8 * (v23 >> 7));
      if (v25 == v24)
      {
        v27 = 0;
        if (v9)
          goto LABEL_28;
      }
      else
      {
        v27 = *(_QWORD *)v26 + 32 * (*(_QWORD *)(a1 + 120) & 0x7FLL);
        if (v9 != v27)
        {
LABEL_28:
          v28 = ((v9 - *(_QWORD *)v7) >> 5) + 16 * (v7 - (char *)v26);
          v29 = *(_QWORD *)v26;
          v30 = v27;
          v31 = (int *)(v24 + 8 * (v23 >> 7));
          v32 = v28 - ((v27 - *(_QWORD *)v26) >> 5);
          if (v32)
          {
            if (v28 < 1)
            {
              v33 = 127 - v28;
              LOBYTE(v28) = ~(127 - v28);
              v31 = &v26[-2 * (v33 >> 7)];
            }
            else
            {
              v31 = &v26[2 * ((unint64_t)v28 >> 7)];
            }
            v29 = *(_QWORD *)v31;
            v30 = *(_QWORD *)v31 + 32 * (v28 & 0x7F);
            v34 = *(_QWORD *)(a1 + 128);
            if (v32 > (unint64_t)(v34 - 1) >> 1)
            {
              v35 = (v30 - v29) >> 5;
              if (v30 - v29 < -31)
              {
                v54 = 126 - v35;
                v36 = ~(_BYTE)v54;
                v37 = &v31[-2 * (v54 >> 7)];
              }
              else
              {
                v36 = v35 + 1;
                v37 = &v31[2 * ((unint64_t)(v35 + 1) >> 7)];
              }
              v55 = *(_QWORD *)v37;
              v56 = (int *)(*(_QWORD *)v37 + 32 * (v36 & 0x7F));
              v57 = v34 + v23;
              v58 = (int **)(v24 + 8 * (v57 >> 7));
              if (v25 == v24)
                v59 = 0;
              else
                v59 = &(*v58)[8 * (v57 & 0x7F)];
              if (v37 == (int *)v58)
              {
                memset(buf, 170, sizeof(buf));
                std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<qmi::ClientProxy::State::Transaction *,std::__deque_iterator<qmi::ClientProxy::State::Transaction,qmi::ClientProxy::State::Transaction *,qmi::ClientProxy::State::Transaction&,qmi::ClientProxy::State::Transaction **,long,128l>,0>((int **)buf, v56, v59, v31, v30);
              }
              else
              {
                memset(buf, 170, sizeof(buf));
                std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<qmi::ClientProxy::State::Transaction *,std::__deque_iterator<qmi::ClientProxy::State::Transaction,qmi::ClientProxy::State::Transaction *,qmi::ClientProxy::State::Transaction&,qmi::ClientProxy::State::Transaction **,long,128l>,0>((int **)buf, v56, (int *)(v55 + 4096), v31, v30);
                v60 = *(int **)&buf[8];
                v61 = *(_QWORD *)&buf[16];
                v62 = (int **)(v37 + 2);
                if (v37 + 2 != (int *)v58)
                {
                  do
                  {
                    v63 = *v62;
                    v64 = *v62 + 1024;
                    memset(buf, 170, sizeof(buf));
                    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<qmi::ClientProxy::State::Transaction *,std::__deque_iterator<qmi::ClientProxy::State::Transaction,qmi::ClientProxy::State::Transaction *,qmi::ClientProxy::State::Transaction&,qmi::ClientProxy::State::Transaction **,long,128l>,0>((int **)buf, v63, v64, v60, v61);
                    v60 = *(int **)&buf[8];
                    v61 = *(_QWORD *)&buf[16];
                    ++v62;
                  }
                  while (v62 != v58);
                }
                v65 = *v58;
                memset(buf, 170, sizeof(buf));
                std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<qmi::ClientProxy::State::Transaction *,std::__deque_iterator<qmi::ClientProxy::State::Transaction,qmi::ClientProxy::State::Transaction *,qmi::ClientProxy::State::Transaction&,qmi::ClientProxy::State::Transaction **,long,128l>,0>((int **)buf, v65, v59, v60, v61);
              }
              v66 = *(_QWORD *)&buf[16];
              v67 = *(NSObject **)(*(_QWORD *)&buf[16] + 8);
              if (v67)
                dispatch_source_cancel(v67);
              v68 = *(std::__shared_weak_count **)(v66 + 24);
              if (v68)
              {
                p_shared_owners = (unint64_t *)&v68->__shared_owners_;
                do
                  v70 = __ldaxr(p_shared_owners);
                while (__stlxr(v70 - 1, p_shared_owners));
                if (!v70)
                {
                  ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                  std::__shared_weak_count::__release_weak(v68);
                }
              }
              v71 = *(NSObject **)(v66 + 8);
              if (v71)
                dispatch_release(v71);
              v73 = *(_QWORD *)(a1 + 96);
              v72 = *(_QWORD *)(a1 + 104);
              v74 = v72 - v73;
              v75 = v72 == v73;
              v77 = *(_QWORD *)(a1 + 120);
              v76 = *(_QWORD *)(a1 + 128);
              *(_QWORD *)(a1 + 128) = v76 - 1;
              v78 = 16 * v74 - 1;
              if (v75)
                v78 = 0;
              if ((unint64_t)(v78 - (v76 + v77) + 1) >= 0x100)
              {
                operator delete(*(void **)(v72 - 8));
                *(_QWORD *)(a1 + 104) -= 8;
              }
LABEL_55:
              std::deque<qmi::ClientProxy::State::Transaction>::shrink_to_fit(a1 + 88);
              qmi::ClientProxy::State::sendIfPossible_sync((qmi::ClientProxy::State *)a1);
LABEL_56:
              xpc_release(v15);
              return;
            }
          }
LABEL_37:
          v38 = (v30 - v29) >> 5;
          if (v30 - v29 < -31)
          {
            v47 = 126 - v38;
            v40 = &v31[-2 * (v47 >> 7)];
            v41 = *(_QWORD *)v40 + 32 * (~(_BYTE)v47 & 0x7F);
            if (v26 != v31)
              goto LABEL_39;
          }
          else
          {
            v39 = v38 + 1;
            v40 = &v31[2 * (v39 >> 7)];
            v41 = *(_QWORD *)v40 + 32 * (v39 & 0x7F);
            if (v26 != v31)
            {
LABEL_39:
              memset(buf, 170, sizeof(buf));
              std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<qmi::ClientProxy::State::Transaction *,std::__deque_iterator<qmi::ClientProxy::State::Transaction,qmi::ClientProxy::State::Transaction *,qmi::ClientProxy::State::Transaction&,qmi::ClientProxy::State::Transaction **,long,128l>,0>(buf, v29, v30, v40, v41);
              v42 = *(_QWORD **)&buf[8];
              v43 = *(_QWORD *)&buf[16];
              for (i = (uint64_t *)(v31 - 2); i != (uint64_t *)v26; --i)
              {
                v45 = *i;
                v46 = *i + 4096;
                memset(buf, 170, sizeof(buf));
                std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<qmi::ClientProxy::State::Transaction *,std::__deque_iterator<qmi::ClientProxy::State::Transaction,qmi::ClientProxy::State::Transaction *,qmi::ClientProxy::State::Transaction&,qmi::ClientProxy::State::Transaction **,long,128l>,0>(buf, v45, v46, v42, v43);
                v42 = *(_QWORD **)&buf[8];
                v43 = *(_QWORD *)&buf[16];
              }
              std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<qmi::ClientProxy::State::Transaction *,std::__deque_iterator<qmi::ClientProxy::State::Transaction,qmi::ClientProxy::State::Transaction *,qmi::ClientProxy::State::Transaction&,qmi::ClientProxy::State::Transaction **,long,128l>,0>(buf, v27, *(_QWORD *)v26 + 4096, v42, v43);
              goto LABEL_44;
            }
          }
          std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<qmi::ClientProxy::State::Transaction *,std::__deque_iterator<qmi::ClientProxy::State::Transaction,qmi::ClientProxy::State::Transaction *,qmi::ClientProxy::State::Transaction&,qmi::ClientProxy::State::Transaction **,long,128l>,0>(buf, v27, v30, v40, v41);
LABEL_44:
          v48 = *(NSObject **)(v27 + 8);
          if (v48)
            dispatch_source_cancel(v48);
          v49 = *(std::__shared_weak_count **)(v27 + 24);
          if (v49)
          {
            v50 = (unint64_t *)&v49->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
          v52 = *(NSObject **)(v27 + 8);
          if (v52)
            dispatch_release(v52);
          v53 = vaddq_s64(*(int64x2_t *)(a1 + 120), (int64x2_t)xmmword_19EA1DD90);
          *(int64x2_t *)(a1 + 120) = v53;
          if (v53.i64[0] >= 0x100uLL)
          {
            operator delete(**(void ***)(a1 + 96));
            *(_QWORD *)(a1 + 96) += 8;
            *(_QWORD *)(a1 + 120) -= 128;
          }
          goto LABEL_55;
        }
      }
      v29 = *(_QWORD *)v26;
      v30 = v27;
      v31 = (int *)(v24 + 8 * (v23 >> 7));
      goto LABEL_37;
    }
  }
}

void sub_19E9CAF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void qmi::ClientProxy::State::sendIfPossible_sync(qmi::ClientProxy::State *this)
{
  unsigned int v1;
  BOOL v2;
  int v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  dispatch_object_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  int64x2_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  uint64_t *v36;
  const void *v37;
  void *v38;
  NSObject *v39;
  char *v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  BOOL v48;
  uint64_t *v49;
  void (**v50)(void *, _QWORD);
  uint8_t buf[4];
  char *v52;
  __int16 v53;
  int v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v1 = *((_DWORD *)this + 19);
  v2 = v1 > 7;
  v3 = (1 << v1) & 0xCF;
  if (v2 || v3 == 0)
  {
    while (*((_QWORD *)this + 22))
    {
      v6 = *((_QWORD *)this + 16);
      if (v6 >= *((int *)this + 21))
        break;
      v7 = *((_QWORD *)this + 13);
      v8 = *((_QWORD *)this + 12);
      v9 = *((_QWORD *)this + 21);
      v10 = *(_QWORD *)(*((_QWORD *)this + 18) + ((v9 >> 4) & 0xFFFFFFFFFFFFFF8));
      if (v7 == v8)
        v11 = 0;
      else
        v11 = 16 * (v7 - v8) - 1;
      v12 = *((_QWORD *)this + 15) + v6;
      if (v11 == v12)
      {
        std::deque<qmi::ClientProxy::State::Transaction>::__add_back_capacity((_QWORD *)this + 11);
        v8 = *((_QWORD *)this + 12);
        v12 = *((_QWORD *)this + 16) + *((_QWORD *)this + 15);
      }
      v13 = v10 + 32 * (v9 & 0x7F);
      v14 = *(_QWORD *)(v8 + ((v12 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v12 & 0x7F);
      *(_DWORD *)v14 = *(_DWORD *)v13;
      *(_OWORD *)(v14 + 8) = *(_OWORD *)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v14 + 24) = *(_QWORD *)(v13 + 24);
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)(v13 + 24) = 0;
      ++*((_QWORD *)this + 16);
      v15 = *(_QWORD *)(*((_QWORD *)this + 18) + ((*((_QWORD *)this + 21) >> 4) & 0xFFFFFFFFFFFFFF8))
          + 32 * (*((_QWORD *)this + 21) & 0x7FLL);
      v17 = (dispatch_object_t *)(v15 + 8);
      v16 = *(NSObject **)(v15 + 8);
      if (v16)
        dispatch_source_cancel(v16);
      v18 = *(std::__shared_weak_count **)(v15 + 24);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (*v17)
        dispatch_release(*v17);
      v21 = vaddq_s64(*(int64x2_t *)((char *)this + 168), (int64x2_t)xmmword_19EA1DD90);
      *(int64x2_t *)((char *)this + 168) = v21;
      if (v21.i64[0] >= 0x100uLL)
      {
        operator delete(**((void ***)this + 18));
        *((_QWORD *)this + 18) += 8;
        *((_QWORD *)this + 21) -= 128;
      }
      v22 = *((_QWORD *)this + 16) + *((_QWORD *)this + 15) - 1;
      v23 = *(_QWORD *)(*((_QWORD *)this + 12) + ((v22 >> 4) & 0xFFFFFFFFFFFFFF8));
      v24 = v22 & 0x7F;
      v25 = *((_QWORD *)this + 28);
      if (!v25)
        goto LABEL_51;
      v28 = *(_QWORD *)(v25 + 8);
      v26 = v25 + 8;
      v27 = v28;
      if (!v28)
        goto LABEL_51;
      v29 = v23 + 32 * v24;
      v31 = *(_QWORD *)(v29 + 16);
      v30 = v29 + 16;
      v32 = *(unsigned __int16 *)(v31 + 26);
      v33 = v26;
      do
      {
        v34 = *(unsigned __int16 *)(v27 + 32);
        v35 = v34 >= v32;
        if (v34 >= v32)
          v36 = (uint64_t *)v27;
        else
          v36 = (uint64_t *)(v27 + 8);
        if (v35)
          v33 = v27;
        v27 = *v36;
      }
      while (*v36);
      if (v33 != v26
        && *(unsigned __int16 *)(v33 + 32) <= v32
        && (v37 = *(const void **)(v33 + 40)) != 0
        && (v38 = _Block_copy(v37)) != 0)
      {
        _Block_release(v38);
        v39 = *((_QWORD *)this + 5);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          v40 = (char *)this + 48;
          if (*((char *)this + 71) < 0)
            v40 = (char *)*((_QWORD *)this + 6);
          v41 = *(unsigned __int16 *)(*(_QWORD *)v30 + 24);
          *(_DWORD *)buf = 136315394;
          v52 = v40;
          v53 = 1024;
          v54 = v41;
          _os_log_impl(&dword_19E9C8000, v39, OS_LOG_TYPE_DEFAULT, "#I [%s]: Call back has been registered for this request 0x%04x", buf, 0x12u);
        }
        v42 = *((_QWORD *)this + 28);
        v43 = *(unsigned __int16 *)(*(_QWORD *)v30 + 24);
        v46 = *(_QWORD *)(v42 + 8);
        v44 = v42 + 8;
        v45 = v46;
        do
        {
          v47 = *(unsigned __int16 *)(v45 + 32);
          v48 = v47 >= v43;
          if (v47 >= v43)
            v49 = (uint64_t *)v45;
          else
            v49 = (uint64_t *)(v45 + 8);
          if (v48)
            v44 = v45;
          v45 = *v49;
        }
        while (*v49);
        v50 = (void (**)(void *, _QWORD))_Block_copy(*(const void **)(v44 + 40));
        v50[2](v50, *(unsigned __int16 *)(*(_QWORD *)v30 + 26));
        _Block_release(v50);
      }
      else
      {
LABEL_51:
        (*(void (**)(qmi::ClientProxy::State *, unint64_t))(*(_QWORD *)this + 48))(this, v23 + 32 * v24 + 16);
      }
    }
    std::deque<qmi::ClientProxy::State::Transaction>::shrink_to_fit((uint64_t)this + 136);
    qmi::ClientProxy::State::checkIfLowPower_sync(this);
  }
}

void sub_19E9CB380(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::deque<qmi::ClientProxy::State::Transaction>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void **v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void ***)(a1 + 8);
    if (v3 >= 0x80)
    {
      operator delete(*v4);
      v4 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v4;
      v2 = *(_QWORD *)(a1 + 40);
      v3 = *(_QWORD *)(a1 + 32) - 128;
      *(_QWORD *)(a1 + 32) = v3;
    }
    v5 = *(_QWORD *)(a1 + 16);
    v6 = 16 * (v5 - (_QWORD)v4) - 1;
    if ((void **)v5 == v4)
      v6 = 0;
    if (v6 - (v3 + v2) >= 0x80)
    {
      operator delete(*(void **)(v5 - 8));
      v4 = *(void ***)(a1 + 8);
      v5 = *(_QWORD *)(a1 + 16) - 8;
      *(_QWORD *)(a1 + 16) = v5;
    }
  }
  else
  {
    v4 = *(void ***)(a1 + 16);
    if (v4 != *(void ***)(a1 + 8))
    {
      do
      {
        operator delete(*(v4 - 1));
        v7 = *(void ***)(a1 + 8);
        v4 = (void **)(*(_QWORD *)(a1 + 16) - 8);
        *(_QWORD *)(a1 + 16) = v4;
      }
      while (v4 != v7);
    }
    *(_QWORD *)(a1 + 32) = 0;
    v5 = (uint64_t)v4;
  }
  v8 = *(void **)a1;
  v9 = v5 - (_QWORD)v4;
  v10 = (v5 - (uint64_t)v4) >> 3;
  if (v10 < (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)a1) >> 3)
  {
    if ((void **)v5 == v4)
    {
      v11 = 0;
      v12 = 8 * v10;
    }
    else
    {
      if (v9 < 0)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = operator new(v5 - (_QWORD)v4);
      v12 = (uint64_t)&v11[v10];
      if ((unint64_t)(v9 - 8) < 0x18 || (unint64_t)((char *)v11 - (char *)v4) < 0x20)
      {
        v16 = v11;
        v17 = v4;
      }
      else
      {
        v13 = 0;
        v14 = ((unint64_t)(v9 - 8) >> 3) + 1;
        v15 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        v16 = &v11[v15];
        v17 = &v4[v15];
        v18 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v19 = &v11[v13];
          v20 = *(_OWORD *)&v4[v13 + 2];
          *v19 = *(_OWORD *)&v4[v13];
          v19[1] = v20;
          v13 += 4;
          v18 -= 4;
        }
        while (v18);
        if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_23;
      }
      do
      {
        v21 = (uint64_t)*v17++;
        *v16++ = v21;
      }
      while (v16 != (_QWORD *)v12);
    }
LABEL_23:
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v11;
    *(_QWORD *)(a1 + 16) = v12;
    *(_QWORD *)(a1 + 24) = v12;
    if (v8)
      operator delete(v8);
  }
}

void qmi::ClientProxy::State::checkIfLowPower_sync(qmi::ClientProxy::State *this)
{
  NSObject *v1;
  NSObject *v3;
  _QWORD *v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 24);
  if (v1 && !*((_QWORD *)this + 16) && *((_DWORD *)this + 19) != 4)
  {
    v3 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      v4 = (_QWORD *)((char *)this + 48);
      if (*((char *)this + 71) < 0)
        v4 = (_QWORD *)*v4;
      v5 = 136315138;
      v6 = v4;
      _os_log_debug_impl(&dword_19E9C8000, v3, OS_LOG_TYPE_DEBUG, "#D [%s]: Nothing further to send: low-power hold is complete", (uint8_t *)&v5, 0xCu);
      v1 = *((_QWORD *)this + 24);
      *((_QWORD *)this + 24) = 0;
      if (!v1)
        goto LABEL_7;
    }
    else
    {
      *((_QWORD *)this + 24) = 0;
    }
    dispatch_group_leave(v1);
    dispatch_release(v1);
LABEL_7:
    *((_DWORD *)this + 19) = 6;
  }
}

void qmi::EurTransportLocal::sendMessage(uint64_t a1, void **a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  xpc_object_t object[3];

  v3 = *(std::__shared_weak_count **)(a1 + 104);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    object[2] = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD **)(a1 + 96);
      object[1] = v7;
      if (!v7)
        goto LABEL_7;
      v8 = *a2;
      object[0] = v8;
      if (v8)
      {
        xpc_retain(v8);
        v9 = v7[3];
        if (v9)
        {
LABEL_6:
          (*(void (**)(uint64_t, xpc_object_t *))(*(_QWORD *)v9 + 48))(v9, object);
          xpc_release(object[0]);
          object[0] = 0;
LABEL_7:
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          return;
        }
      }
      else
      {
        object[0] = xpc_null_create();
        v9 = v7[3];
        if (v9)
          goto LABEL_6;
      }
      std::__throw_bad_function_call[abi:ne180100]();
    }
  }
}

void sub_19E9CB764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
  xpc_release(object);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void qmi::Client::State::handleClientMessage_sync(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3;
  NSObject *v4;
  _QWORD *v5;
  xpc_object_t v6;

  v3 = *a2;
  if (*a2)
    xpc_retain(*a2);
  else
    v3 = xpc_null_create();
  v4 = *(NSObject **)(a1 + 24);
  v5 = operator new(0x10uLL);
  *v5 = a1;
  v5[1] = v3;
  v6 = xpc_null_create();
  dispatch_async_f(v4, v5, (dispatch_function_t)dispatch::async<qmi::Client::State::handleClientMessage_sync(xpc::dict const&)::$_0>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::handleClientMessage_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::State::handleClientMessage_sync(xpc::dict const&)::$_0>>)::{lambda(void *)#1}::__invoke);
  xpc_release(v6);
}

void `non-virtual thunk to'qmi::QmiClientProxyAdapter::send_sync(uint64_t a1, uint64_t *a2)
{
  qmi::QmiClientProxyAdapter::send_sync((_QWORD *)(a1 - 48), a2);
}

void qmi::QmiClientProxyAdapter::send_sync(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t (*v6)(QMux *__hidden);
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;

  v37 = 0;
  v38 = 0;
  v4 = (std::__shared_weak_count *)a1[38];
  if (!v4)
  {
    v5 = 0;
    goto LABEL_7;
  }
  v5 = std::__shared_weak_count::lock(v4);
  v38 = v5;
  if (!v5 || ((v37 = a1[37]) != 0 ? (v6 = QMux::BOOL_true_type) : (v6 = 0), !v6))
  {
LABEL_7:
    if (!v5)
      return;
    goto LABEL_35;
  }
  v7 = (std::__shared_weak_count *)a1[8];
  if (!v7 || (v8 = a1[7], (v9 = std::__shared_weak_count::lock(v7)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v14 = v8 - 48;
  if (!v8)
    v14 = 0;
  v35 = v14;
  v36 = v9;
  v33 = v14;
  v34 = v9;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  v17 = (std::__shared_weak_count *)a2[1];
  v31 = *a2;
  v32 = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  QMux::send(&v37, &v33, &v31, v10, v11, v12, v13);
  v20 = v32;
  if (v32)
  {
    v21 = (unint64_t *)&v32->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v34;
  if (v34)
  {
    v24 = (unint64_t *)&v34->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v36;
  if (!v36)
    goto LABEL_34;
  v27 = (unint64_t *)&v36->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    v5 = v38;
    if (!v38)
      return;
  }
  else
  {
LABEL_34:
    v5 = v38;
    if (!v38)
      return;
  }
LABEL_35:
  v29 = (unint64_t *)&v5->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_19E9CBA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  QMux::~QMux((QMux *)&a15);
  _Unwind_Resume(a1);
}

void sub_19E9CBA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  QMux::~QMux((QMux *)va);
  _Unwind_Resume(a1);
}

void QMux::send(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, const char *a7)
{
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  _QWORD *v19;
  unint64_t *p_shared_owners;
  NSObject *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;

  if (*a2)
  {
    v10 = (_QWORD *)*a1;
    if (!*a1)
      return;
  }
  else
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x6DD, "client", "is not", "true", "Cannot queue send: Client is empty! (svc=?? client=?? txid=%d msgid=0x%x)", a7, *(unsigned __int16 *)(*a3 + 26), *(unsigned __int16 *)(*a3 + 24));
    v10 = (_QWORD *)*a1;
    if (!*a1)
      return;
  }
  v11 = a1[1];
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(_OWORD *)a2;
  *a2 = 0;
  a2[1] = 0;
  v25 = *(_OWORD *)a3;
  v26 = v14;
  *a3 = 0;
  a3[1] = 0;
  v15 = (std::__shared_weak_count *)v10[2];
  if (!v15 || (v16 = v10[1], (v17 = std::__shared_weak_count::lock(v15)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v18 = v17;
  v19 = operator new(0x30uLL);
  *v19 = v10;
  v19[1] = v11;
  *((_OWORD *)v19 + 1) = v26;
  *((_OWORD *)v19 + 2) = v25;
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  v21 = v10[3];
  do
    v22 = __ldxr(p_shared_owners);
  while (__stxr(v22 + 1, p_shared_owners));
  v23 = operator new(0x18uLL);
  *v23 = v19;
  v23[1] = v16;
  v23[2] = v18;
  dispatch_async_f(v21, v23, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::send(std::shared_ptr<qmi::QMuxClientIface>,std::shared_ptr<qmi::SerializedMessage>)::$_0>(QMux::send(std::shared_ptr<qmi::QMuxClientIface>,std::shared_ptr<qmi::SerializedMessage>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::send(std::shared_ptr<qmi::QMuxClientIface>,std::shared_ptr<qmi::SerializedMessage>)::$_0,std::default_delete<QMux::send(std::shared_ptr<qmi::QMuxClientIface>,std::shared_ptr<qmi::SerializedMessage>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
}

void qmi::Client::State::send(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  uint64_t v10;
  const void *v11;
  void *v12;
  __int16 v13;
  __int16 v14;
  NSObject *v15;
  unsigned int *v16;
  signed int v17;
  xpc_object_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  _QWORD *v24;
  xpc_object_t v25;
  unint64_t *p_shared_owners;
  NSObject *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  void *__p[3];
  _QWORD v33[6];
  _QWORD *v34;
  uint64_t block;
  uint64_t v36;
  uint64_t (*v37)(uint64_t);
  void *v38;
  __int16 *v39;
  _QWORD *v40;
  __int16 v41;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A1AEB9A8](v4) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v4);
      v5 = v4;
    }
    else
    {
      v5 = xpc_null_create();
    }
  }
  else
  {
    v5 = xpc_null_create();
    v4 = 0;
  }
  xpc_release(v4);
  memset(__p, 170, sizeof(__p));
  QMIServiceMsg::serialize(*(QMIServiceMsg **)(a2 + 8), (char **)__p);
  v6 = xpc_data_create(__p[0], (char *)__p[1] - (char *)__p[0]);
  if (!v6)
    v6 = xpc_null_create();
  xpc_dictionary_set_value(v5, "send_qmi_message", v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  v8 = xpc_int64_create(*(unsigned int *)(a2 + 16));
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(v5, "send_timeout_ms", v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(const void **)(a2 + 32);
  if (!v11)
  {
    v12 = 0;
    if (*(_QWORD *)(a2 + 24))
      goto LABEL_13;
LABEL_19:
    v13 = 0;
    goto LABEL_25;
  }
  v12 = _Block_copy(v11);
  if (!*(_QWORD *)(a2 + 24))
    goto LABEL_19;
LABEL_13:
  v31 = a1;
  if (*(_BYTE *)(a1 + 280))
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 136));
    v13 = *(_WORD *)(v31 + 146);
    if (((v13 + 1) & 0xFFFE) != 0)
      v14 = v13 + 1;
    else
      v14 = 1;
    *(_WORD *)(v31 + 146) = v14;
  }
  else
  {
    v33[0] = MEMORY[0x1E0C809B0];
    v33[1] = 0x40000000;
    v33[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi6Client5StateEE20execute_wrapped_syncIZNS3_4sendERNS2_9SendProxyEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    v33[3] = &__block_descriptor_tmp_31_0;
    v33[4] = a1 + 8;
    v33[5] = &v31;
    v34 = v33;
    v15 = *(NSObject **)(a1 + 24);
    if (*(_QWORD *)(a1 + 32))
    {
      v41 = -21846;
      block = MEMORY[0x1E0C809B0];
      v36 = 0x40000000;
      v37 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFtvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
      v38 = &__block_descriptor_tmp_33;
      v39 = &v41;
      v40 = &v34;
      dispatch_async_and_wait(v15, &block);
    }
    else
    {
      v41 = -21846;
      block = MEMORY[0x1E0C809B0];
      v36 = 0x40000000;
      v37 = ___ZN8dispatch9sync_implIRU13block_pointerFtvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
      v38 = &__block_descriptor_tmp_32_0;
      v39 = &v41;
      v40 = &v34;
      dispatch_sync(v15, &block);
    }
    v13 = v41;
  }
  **(_WORD **)(a2 + 24) = v13;
LABEL_25:
  v16 = (unsigned int *)(v10 + 8);
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  if (v17 < 0)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x33, "prevRefCount", ">=", "0", (const char *)v17, 0);
  if (v5)
  {
    xpc_retain(v5);
    v18 = v5;
    if (v12)
      goto LABEL_31;
LABEL_34:
    v19 = 0;
    v20 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v20)
      goto LABEL_47;
    goto LABEL_35;
  }
  v18 = xpc_null_create();
  if (!v12)
    goto LABEL_34;
LABEL_31:
  v19 = _Block_copy(v12);
  v20 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v20)
LABEL_47:
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_35:
  v21 = *(_QWORD *)(a1 + 8);
  v22 = std::__shared_weak_count::lock(v20);
  if (!v22)
    goto LABEL_47;
  v23 = v22;
  v24 = operator new(0x28uLL);
  *v24 = a1;
  v24[1] = v18;
  v25 = xpc_null_create();
  v24[2] = v10;
  v24[3] = v19;
  *((_WORD *)v24 + 16) = v13;
  p_shared_owners = (unint64_t *)&v23->__shared_owners_;
  v27 = *(NSObject **)(a1 + 24);
  do
    v28 = __ldxr(p_shared_owners);
  while (__stxr(v28 + 1, p_shared_owners));
  v29 = operator new(0x18uLL);
  *v29 = v24;
  v29[1] = v21;
  v29[2] = v23;
  dispatch_async_f(v27, v29, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::send(qmi::Client::SendProxy &)::$_1>(qmi::Client::State::send(qmi::Client::SendProxy &)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::send(qmi::Client::SendProxy &)::$_1,dispatch_queue_s *::default_delete<qmi::Client::State::send(qmi::Client::SendProxy &)::$_1>>)::{lambda(void *)#1}::__invoke);
  do
    v30 = __ldaxr(p_shared_owners);
  while (__stlxr(v30 - 1, p_shared_owners));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  xpc_release(v25);
  if (v12)
    _Block_release(v12);
  if (__p[0])
    operator delete(__p[0]);
  xpc_release(v5);
}

void sub_19E9CBFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  void *v10;
  const void *v11;

  if (v11)
    _Block_release(v11);
  if (__p)
    operator delete(__p);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void QMIServiceMsg::serialize(QMIServiceMsg *this@<X0>, char **a2@<X8>)
{
  __int16 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t *v8;
  uint64_t *i;
  uint64_t v10;
  size_t v11;
  char *v12;

  v4 = *((_WORD *)this + 7);
  a2[1] = 0;
  a2[2] = 0;
  v5 = (unsigned __int16)(v4 + 4);
  *a2 = 0;
  if (v4 == -4)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIServiceMsg.cpp", (const char *)0x16C, "buffer", "!=", "NULL", 0, 0);
    v6 = 0;
    v4 = *((_WORD *)this + 7);
  }
  else
  {
    v6 = (char *)operator new((unsigned __int16)(v4 + 4));
    *a2 = v6;
    a2[2] = &v6[v5];
    bzero(v6, (unsigned __int16)(v4 + 4));
    a2[1] = &v6[v5];
  }
  *(_WORD *)v6 = *((_WORD *)this + 6);
  *((_WORD *)v6 + 1) = v4;
  v7 = v6 + 4;
  v8 = (uint64_t *)*((_QWORD *)this + 2);
  for (i = (uint64_t *)*((_QWORD *)this + 3); v8 != i; v7 = &v12[v11])
  {
    v10 = *v8++;
    v11 = *(unsigned __int16 *)(v10 + 2);
    *v7 = *(_BYTE *)v10;
    *(_WORD *)(v7 + 1) = v11;
    v12 = v7 + 3;
    memcpy(v7 + 3, *(const void **)(v10 + 8), v11);
  }
  if (v7 > &v6[v5])
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIServiceMsg.cpp", (const char *)0x186, "buffer", "<=", "(uint8_t*)bufferPtr + bufferLen", v7, &v6[v5]);
}

void sub_19E9CC1AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  int v2;
  void *v3;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN19ATCSRouterIPCDriver13handleReceiveEP24mav_router_context_tag_t20mav_router_channel_tPvS3__block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  unsigned int size;
  size_t v5;
  void *v6;
  int v7;
  BOOL v8;
  int v9;
  _QWORD applier[7];
  int v11;
  _QWORD v12[3];
  int v13;
  _QWORD v14[4];

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 8 * *(unsigned int *)(a1 + 56));
  if (v2)
  {
    v3 = *(NSObject **)(a1 + 48);
    size = dispatch_data_get_size(v3);
    v5 = size;
    if (size)
    {
      v6 = operator new(size);
      v7 = (_DWORD)v6 + v5;
      bzero(v6, v5);
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
    v14[0] = 0;
    v14[1] = v14;
    v14[2] = 0x2000000000;
    v14[3] = v6;
    v12[0] = 0;
    v12[1] = v12;
    v12[2] = 0x2000000000;
    v13 = -1431655766;
    v9 = 0;
    v13 = dispatch_data_get_size(v3);
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 1107296256;
    applier[2] = ___ZL19mav_buffer_copy_rawPvS_jjPj_block_invoke;
    applier[3] = &__block_descriptor_tmp_19;
    v11 = 0;
    applier[4] = v12;
    applier[5] = v14;
    applier[6] = &v9;
    v8 = dispatch_data_apply(v3, applier);
    _Block_object_dispose(v12, 8);
    _Block_object_dispose(v14, 8);
    if (!v8)
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSRouterIPCDriver.cpp", (const char *)0x6D, "result", "==", "MAV_BUFFER_SUCCESS", (const char *)0x67, 0);
    (*(void (**)(uint64_t, void *, _QWORD))(*(_QWORD *)v2 + 16))(v2, v6, (v7 - (_DWORD)v6));
    if (v6)
      operator delete(v6);
  }
  dispatch_release(*(dispatch_object_t *)(a1 + 48));
}

void sub_19E9CC350(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void QMIServiceMsg::QMIServiceMsg(QMIServiceMsg *this, unsigned __int16 *a2, unsigned int a3, int a4)
{
  QMIServiceMsg *v7;
  unsigned int v8;
  const char *v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  size_t v15;
  _WORD *v16;
  void *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t (*v42)(Tlv::Reader *__hidden);
  _DWORD *v43;
  _WORD *v44;
  int v45;
  __int16 v46;
  int v47;
  unsigned __int16 *v48;
  unsigned int v49;
  _QWORD v51[2];
  BOOL (*v52)(uint64_t, unsigned __int8 *);
  void *v53;
  char v54;

  v7 = this;
  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E4153F70;
  *(_OWORD *)((char *)this + 12) = 0u;
  *(_OWORD *)((char *)this + 28) = 0u;
  *((_WORD *)this + 22) = -1;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  if (a3 <= 3)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIServiceMsg.cpp", (const char *)0x57, "buf_length", ">=", "4", (const char *)a3, (const void *)4);
  *((_WORD *)v7 + 6) = *a2;
  v8 = a2[1];
  *((_WORD *)v7 + 7) = v8;
  v9 = (const char *)(v8 + 4);
  if ((_DWORD)v9 != a3)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIServiceMsg.cpp", (const char *)0x5E, "(4 + fMsgLength)", "==", "buf_length", v9, (const void *)a3);
    v8 = *((unsigned __int16 *)v7 + 7);
  }
  v49 = a3;
  v47 = a4;
  v48 = a2;
  v10 = (char *)(a2 + 2);
  if (v8)
  {
    v11 = 0;
    do
    {
      v14 = *v10;
      v15 = *(unsigned __int16 *)(v10 + 1);
      v16 = operator new(0x18uLL);
      *(_BYTE *)v16 = v14;
      v16[1] = v15;
      v17 = operator new[](v15);
      *((_QWORD *)v16 + 1) = v17;
      v16[8] = 0;
      memcpy(v17, v10 + 3, v15);
      v7 = this;
      v19 = (char *)*((_QWORD *)this + 3);
      v18 = *((_QWORD *)this + 4);
      if ((unint64_t)v19 < v18)
      {
        *(_QWORD *)v19 = v16;
        v12 = (uint64_t)(v19 + 8);
      }
      else
      {
        v20 = (char *)*((_QWORD *)this + 2);
        v21 = (v19 - v20) >> 3;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v23 = v18 - (_QWORD)v20;
        if (v23 >> 2 > v22)
          v22 = v23 >> 2;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          if (v24 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = v24;
          v26 = (char *)operator new(8 * v24);
          v24 = v25;
          v27 = &v26[8 * v21];
          *(_QWORD *)v27 = v16;
          v12 = (uint64_t)(v27 + 8);
          v28 = (char *)(v19 - v20);
          if (v19 != v20)
          {
LABEL_19:
            v29 = (unint64_t)(v28 - 8);
            if (v29 < 0x58)
              goto LABEL_56;
            if ((unint64_t)(v20 - v26) < 0x20)
              goto LABEL_56;
            v30 = (v29 >> 3) + 1;
            v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
            v32 = &v19[-v31];
            v27 -= v31;
            v33 = &v26[8 * v21 - 16];
            v34 = v19 - 16;
            v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v36 = *(_OWORD *)v34;
              *((_OWORD *)v33 - 1) = *((_OWORD *)v34 - 1);
              *(_OWORD *)v33 = v36;
              v33 -= 32;
              v34 -= 32;
              v35 -= 4;
            }
            while (v35);
            v19 = v32;
            if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_56:
              do
              {
                v37 = *((_QWORD *)v19 - 1);
                v19 -= 8;
                *((_QWORD *)v27 - 1) = v37;
                v27 -= 8;
              }
              while (v19 != v20);
            }
            v7 = this;
            v19 = (char *)*((_QWORD *)this + 2);
            *((_QWORD *)this + 2) = v27;
            *((_QWORD *)this + 3) = v12;
            *((_QWORD *)this + 4) = &v26[8 * v24];
            if (!v19)
              goto LABEL_8;
LABEL_29:
            operator delete(v19);
            v8 = *((unsigned __int16 *)v7 + 7);
            goto LABEL_8;
          }
        }
        else
        {
          v26 = 0;
          v27 = (char *)(8 * v21);
          *(_QWORD *)(8 * v21) = v16;
          v12 = 8 * v21 + 8;
          v28 = (char *)(v19 - v20);
          if (v19 != v20)
            goto LABEL_19;
        }
        v7 = this;
        *((_QWORD *)this + 2) = v27;
        *((_QWORD *)this + 3) = v12;
        *((_QWORD *)this + 4) = &v26[8 * v24];
        if (v19)
          goto LABEL_29;
      }
LABEL_8:
      *((_QWORD *)v7 + 3) = v12;
      v13 = (v15 + 3);
      v11 += v13;
      v10 += v13;
    }
    while (v11 < v8);
  }
  v38 = (char *)v48 + v49;
  if (v10 != v38)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIServiceMsg.cpp", (const char *)0x70, "buf_ptr", "==", "(const char*)buf + buf_length", v10, v38);
  if (v47)
  {
    v40 = (_QWORD *)*((_QWORD *)v7 + 2);
    v39 = (_QWORD *)*((_QWORD *)v7 + 3);
    v51[0] = MEMORY[0x1E0C809B0];
    v51[1] = 0x40000000;
    v52 = ___ZNK13QMIServiceMsg6getTlvEh_block_invoke;
    v53 = &__block_descriptor_tmp_11;
    v54 = 2;
    if (v40 == v39)
      goto LABEL_47;
    while ((((uint64_t (*)(_QWORD *, _QWORD))v52)(v51, *v40) & 1) == 0)
    {
      if (++v40 == v39)
      {
        v40 = v39;
        break;
      }
    }
    if (v40 == *((_QWORD **)v7 + 3))
      goto LABEL_47;
    v41 = *v40;
    *(_WORD *)(v41 + 16) = 0;
    v42 = Tlv::Reader::this_type_does_not_support_comparisons;
    if (!v41)
      v42 = 0;
    if (!v42 || *(_WORD *)(v41 + 2) != 4)
    {
LABEL_47:
      v43 = (_DWORD *)((char *)v7 + 40);
      v46 = 3;
    }
    else
    {
      *((_DWORD *)v7 + 10) = 0;
      v43 = (_DWORD *)((char *)v7 + 40);
      v44 = *(_WORD **)(v41 + 8);
      if (!*v44)
      {
        v46 = 0;
        goto LABEL_49;
      }
      v45 = (unsigned __int16)v44[1];
      *((_WORD *)v7 + 22) = v45;
      if (v45)
        return;
      v46 = 4;
    }
    *v43 = 1;
LABEL_49:
    *((_WORD *)v7 + 22) = v46;
  }
}

void sub_19E9CC77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ATCSCounted *a13)
{
  void *v14;
  void *v15;

  v14 = (void *)*((_QWORD *)a13 + 7);
  if (v14)
  {
    *((_QWORD *)a13 + 8) = v14;
    operator delete(v14);
    v15 = (void *)*((_QWORD *)a13 + 2);
    if (!v15)
    {
LABEL_3:
      ATCSCounted::~ATCSCounted(a13);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v15 = (void *)*((_QWORD *)a13 + 2);
    if (!v15)
      goto LABEL_3;
  }
  *((_QWORD *)a13 + 3) = v15;
  operator delete(v15);
  ATCSCounted::~ATCSCounted(a13);
  _Unwind_Resume(a1);
}

uint64_t QMux::State::handleReadData(QMux::State *this, const unsigned __int8 *a2, int a3)
{
  NSObject *v3;
  char *v4;
  _QWORD v6[3];
  int v7;
  const unsigned __int8 *v8;
  _QWORD v9[6];
  _QWORD *v10;
  uint64_t block;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  void *v14;
  unsigned int *v15;
  _QWORD *v16;
  unsigned int v17;

  v8 = a2;
  v7 = a3;
  if (a3 < 0)
    return 0;
  v6[0] = &v7;
  v6[1] = this;
  v6[2] = &v8;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS2_14handleReadDataEPKhjE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  v9[3] = &__block_descriptor_tmp_141;
  v9[4] = (char *)this + 8;
  v9[5] = v6;
  v10 = v9;
  v4 = (char *)this + 24;
  v3 = *((_QWORD *)this + 3);
  if (*((_QWORD *)v4 + 1))
  {
    v17 = -1431655766;
    block = MEMORY[0x1E0C809B0];
    v12 = 0x40000000;
    v13 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFjvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v14 = &__block_descriptor_tmp_143;
    v15 = &v17;
    v16 = &v10;
    dispatch_async_and_wait(v3, &block);
  }
  else
  {
    v17 = -1431655766;
    block = MEMORY[0x1E0C809B0];
    v12 = 0x40000000;
    v13 = ___ZN8dispatch9sync_implIRU13block_pointerFjvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v14 = &__block_descriptor_tmp_142;
    v15 = &v17;
    v16 = &v10;
    dispatch_sync(v3, &block);
  }
  return v17;
}

uint64_t ___ZL19mav_buffer_copy_rawPvS_jjPj_block_invoke(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unint64_t a5)
{
  int v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v10;
  size_t v11;

  v5 = *(_DWORD *)(a1 + 56) - a3;
  v6 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if ((_DWORD)v6)
    v7 = v5 < (int)a5;
  else
    v7 = 0;
  if (!v7)
    return 1;
  v10 = v5 & ~(v5 >> 31);
  if (v6 >= a5)
    v11 = a5;
  else
    v11 = v6;
  memcpy(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), (const void *)(a4 + v10), v11);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) -= v11;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += v11;
  **(_DWORD **)(a1 + 48) += v11;
  return 1;
}

void qmi::QmiClientProxyAdapter::handleReceivedData(uint64_t a1, int a2, const void *a3, size_t a4)
{
  qmi::ClientProxy::State::handleResponse_sync(a1 + 48, a3, a4, a2);
}

void qmi::QmiClientProxyAdapter::handleSentData(qmi::QmiClientProxyAdapter *this, int a2)
{
  qmi::ClientProxy::State::handleSentMessage_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), a2);
}

void qmi::QmiClientProxyAdapter::handleReceivedIndication(uint64_t a1, const void *a2, size_t a3)
{
  qmi::ClientProxy::State::handleIndication_sync(a1 + 48, a2, a3);
}

void qmi::ClientProxy::State::handleIndication_sync(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v4;
  xpc_object_t v7;
  xpc_object_t v8;
  NSObject *v9;
  _QWORD *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  uint64_t v13;
  xpc_object_t object;
  uint8_t buf[4];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 232);
  if (v4)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4))
    {
      v7 = xpc_dictionary_create(0, 0, 0);
      if (v7 || (v7 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1A1AEB9A8](v7) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v7);
          v8 = v7;
        }
        else
        {
          v8 = xpc_null_create();
        }
      }
      else
      {
        v8 = xpc_null_create();
        v7 = 0;
      }
      xpc_release(v7);
      v11 = xpc_data_create(a2, a3);
      if (!v11)
        v11 = xpc_null_create();
      xpc_dictionary_set_value(v8, "ind_qmi_message", v11);
      v12 = xpc_null_create();
      xpc_release(v11);
      xpc_release(v12);
      v13 = *(_QWORD *)(a1 + 232);
      object = v8;
      if (v8)
        xpc_retain(v8);
      else
        object = xpc_null_create();
      (*(void (**)(uint64_t, xpc_object_t *))(*(_QWORD *)v13 + 24))(v13, &object);
      xpc_release(object);
      object = 0;
      xpc_release(v8);
    }
  }
  else
  {
    v9 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = (_QWORD *)(a1 + 48);
      if (*(char *)(a1 + 71) < 0)
        v10 = (_QWORD *)*v10;
      *(_DWORD *)buf = 136315138;
      v16 = v10;
      _os_log_error_impl(&dword_19E9C8000, v9, OS_LOG_TYPE_ERROR, "Client: [%s], invalid fTransport when handling indication", buf, 0xCu);
    }
  }
}

void sub_19E9CCBA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t QMIControl::getPowerModeForMsg_sync(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t *v3;
  unsigned __int8 **v4;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t *v14;
  unsigned int v15;
  uint64_t **v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned __int16 *v21;
  uint64_t v22;
  unsigned __int16 *v23;
  unsigned int v24;
  BOOL v25;
  uint64_t *v26;
  unsigned __int8 *v27;
  unsigned __int8 **v28;
  unsigned int v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t *v32;

  v4 = (unsigned __int8 **)(a1 + 208);
  v3 = *(uint64_t **)(a1 + 208);
  if (!v3)
    return 2;
  v8 = a1 + 208;
  v9 = *(_QWORD *)(a1 + 208);
  do
  {
    v10 = *(unsigned __int8 *)(v9 + 32);
    v11 = v10 >= a2;
    if (v10 >= a2)
      v12 = (uint64_t *)v9;
    else
      v12 = (uint64_t *)(v9 + 8);
    if (v11)
      v8 = v9;
    v9 = *v12;
  }
  while (*v12);
  if ((unsigned __int8 **)v8 == v4 || *(unsigned __int8 *)(v8 + 32) > a2)
    return 2;
  do
  {
    while (1)
    {
      v14 = v3;
      v15 = *((unsigned __int8 *)v3 + 32);
      if (v15 > a2)
        break;
      if (v15 >= a2)
      {
        v21 = (unsigned __int16 *)(v14 + 6);
        v20 = v14[6];
        if (v20)
          goto LABEL_24;
LABEL_34:
        v23 = v21;
        goto LABEL_35;
      }
      v3 = (uint64_t *)v14[1];
      if (!v3)
      {
        v16 = (uint64_t **)(v14 + 1);
        goto LABEL_19;
      }
    }
    v3 = (uint64_t *)*v14;
  }
  while (*v14);
  v16 = (uint64_t **)v14;
LABEL_19:
  v17 = operator new(0x40uLL);
  v17[32] = a2;
  *((_QWORD *)v17 + 7) = 0;
  *((_QWORD *)v17 + 6) = 0;
  *((_QWORD *)v17 + 5) = v17 + 48;
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = v14;
  *v16 = (uint64_t *)v17;
  v18 = **(_QWORD **)(a1 + 200);
  v19 = (uint64_t *)v17;
  if (v18)
  {
    *(_QWORD *)(a1 + 200) = v18;
    v19 = *v16;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 208), v19);
  ++*(_QWORD *)(a1 + 216);
  v22 = *((_QWORD *)v17 + 6);
  v21 = (unsigned __int16 *)(v17 + 48);
  v20 = v22;
  if (!v22)
    goto LABEL_34;
LABEL_24:
  v23 = v21;
  do
  {
    v24 = *(unsigned __int16 *)(v20 + 26);
    v25 = v24 >= a3;
    if (v24 >= a3)
      v26 = (uint64_t *)v20;
    else
      v26 = (uint64_t *)(v20 + 8);
    if (v25)
      v23 = (unsigned __int16 *)v20;
    v20 = *v26;
  }
  while (*v26);
  if (v23 == v21 || v23[13] > a3)
    goto LABEL_34;
LABEL_35:
  v27 = *v4;
  v28 = v4;
  if (*v4)
  {
    while (1)
    {
      while (1)
      {
        v28 = (unsigned __int8 **)v27;
        v29 = v27[32];
        if (v29 <= a2)
          break;
        v27 = *v28;
        v4 = v28;
        if (!*v28)
          goto LABEL_42;
      }
      if (v29 >= a2)
        break;
      v27 = v28[1];
      if (!v27)
      {
        v4 = v28 + 1;
        goto LABEL_42;
      }
    }
  }
  else
  {
LABEL_42:
    v30 = (unsigned __int8 *)v28;
    v28 = (unsigned __int8 **)operator new(0x40uLL);
    *((_BYTE *)v28 + 32) = a2;
    v28[7] = 0;
    v28[6] = 0;
    v28[5] = (unsigned __int8 *)(v28 + 6);
    *v28 = 0;
    v28[1] = 0;
    v28[2] = v30;
    *v4 = (unsigned __int8 *)v28;
    v31 = **(_QWORD **)(a1 + 200);
    v32 = (uint64_t *)v28;
    if (v31)
    {
      *(_QWORD *)(a1 + 200) = v31;
      v32 = (uint64_t *)*v4;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 208), v32);
    ++*(_QWORD *)(a1 + 216);
  }
  if (v23 == (unsigned __int16 *)(v28 + 6))
    return 2;
  else
    return 1;
}

BOOL qmi::EurTransportLocal::isValid(qmi::EurTransportLocal *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  _BOOL8 v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *((_QWORD *)this + 12) != 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v5;
}

BOOL ___ZNK13QMIServiceMsg6getTlvEh_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  return *a2 == *(unsigned __int8 *)(a1 + 32);
}

BOOL qmi::EurTransportXPC::isValid(qmi::EurTransportXPC *this)
{
  return MEMORY[0x1A1AEB9A8](*((_QWORD *)this + 12)) == MEMORY[0x1E0C812E0];
}

void qmi::EurTransportXPC::sendMessage(uint64_t a1, xpc_object_t *a2)
{
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 96), *a2);
}

void __copy_helper_block_e8_32b40c22_ZTSN8dispatch6sourceE(uint64_t a1, uint64_t a2)
{
  NSObject *v4;

  _Block_object_assign((void *)(a1 + 32), *(const void **)(a2 + 32), 7);
  v4 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
    dispatch_retain(v4);
}

void *__copy_helper_block_e8_32c24_ZTSNSt3__18weak_ptrIvEE56c60_ZTSKN8dispatch5blockIU13block_pointerFvRK13QMIServiceMsgEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[7];
  if (result)
    result = _Block_copy(result);
  a1[7] = result;
  return result;
}

void ___ZN19ATCSRouterIPCDriver16handleWriteReadyEP22ATCSDispatcherCallbackPv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  size_t v3;
  void *v4;
  int v5;
  void *v6;
  size_t v7;
  unsigned int v8;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1)
  {
    v2 = *(_QWORD *)(a1 + 32);
    v3 = *(_QWORD *)(v2 + 56);
    v4 = malloc(v3);
    v5 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v1 + 24))(v1, v4, v3);
    if (v5 >= 1)
    {
      v6 = (void *)*MEMORY[0x1E0C80CE0];
      while (!dispatch_data_create(v4, v5, *(dispatch_queue_t *)(v2 + 32), v6))
      {
        _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSRouterIPCDriver.cpp", (const char *)0xBF, "data", "!=", "NULL", 0, 0);
        v8 = mav_router_service_transmit();
        if (v8)
          goto LABEL_9;
LABEL_4:
        v7 = *(_QWORD *)(v2 + 56);
        v4 = malloc(v7);
        v5 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(_QWORD *)v1 + 24))(v1, v4, v7);
        if (v5 < 1)
          goto LABEL_10;
      }
      v8 = mav_router_service_transmit();
      if (!v8)
        goto LABEL_4;
LABEL_9:
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSRouterIPCDriver.cpp", (const char *)0xC5, "result", "==", "MAV_ROUTER_SUCCESS", (const char *)v8, 0);
      goto LABEL_4;
    }
LABEL_10:
    free(v4);
  }
  else
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSRouterIPCDriver.cpp", (const char *)0xAE, "callback", "!=", "NULL", 0, 0);
  }
}

uint64_t QMux::State::getWriteData(QMux::State *this, unsigned __int8 *a2, int a3)
{
  NSObject *v3;
  char *v4;
  _QWORD v6[3];
  int v7;
  unsigned __int8 *v8;
  _QWORD v9[6];
  _QWORD *v10;
  uint64_t block;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  void *v14;
  unsigned int *v15;
  _QWORD *v16;
  unsigned int v17;

  v8 = a2;
  v7 = a3;
  v6[0] = this;
  v6[1] = &v8;
  v6[2] = &v7;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS2_12getWriteDataEPhjE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v9[3] = &__block_descriptor_tmp_149;
  v9[4] = (char *)this + 8;
  v9[5] = v6;
  v10 = v9;
  v4 = (char *)this + 24;
  v3 = *((_QWORD *)this + 3);
  if (*((_QWORD *)v4 + 1))
  {
    v17 = -1431655766;
    block = MEMORY[0x1E0C809B0];
    v12 = 0x40000000;
    v13 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFivEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v14 = &__block_descriptor_tmp_151;
    v15 = &v17;
    v16 = &v10;
    dispatch_async_and_wait(v3, &block);
  }
  else
  {
    v17 = -1431655766;
    block = MEMORY[0x1E0C809B0];
    v12 = 0x40000000;
    v13 = ___ZN8dispatch9sync_implIRU13block_pointerFivEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v14 = &__block_descriptor_tmp_150;
    v15 = &v17;
    v16 = &v10;
    dispatch_sync(v3, &block);
  }
  return v17;
}

QMIServiceMsg *QMIServiceMsg::create(QMIServiceMsg *this, const qmi::MutableMessageBase *a2)
{
  QMIServiceMsg *v2;
  void *__p[3];

  memset(__p, 170, sizeof(__p));
  qmi::MutableMessageBase::serialize(this);
  v2 = (QMIServiceMsg *)operator new(0x58uLL);
  QMIServiceMsg::QMIServiceMsg(v2, (unsigned __int16 *)__p[0], (unsigned __int16)(LOWORD(__p[1]) - LOWORD(__p[0])), 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v2;
}

void sub_19E9CD2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  operator delete(v11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c24_ZTSNSt3__18weak_ptrIvEE56c60_ZTSKN8dispatch5blockIU13block_pointerFvRK13QMIServiceMsgEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 56);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

uint64_t ___ZN8dispatch9sync_implIRU13block_pointerFjvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 40) + 16))();
  **(_DWORD **)(a1 + 32) = result;
  return result;
}

uint64_t QMux::State::handleReadData_sync(QMux::State *this, const unsigned __int8 *a2, uint64_t a3)
{
  int v4;
  uint64_t v6;
  const char *v7;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  unsigned __int8 v17;
  int v18;
  uint64_t v19;
  void *__p;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, unsigned __int8 *, unsigned __int16 *, unsigned int, int);
  void *v25;
  QMux::State *v26;
  const unsigned __int8 *v27;
  int v28;

  v4 = *((_DWORD *)this + 54);
  if (v4 == 5)
    return a3;
  if (!v4)
  {
    v6 = *((_QWORD *)this + 10);
    v7 = (char *)this + 40;
    if (*((char *)this + 63) < 0)
      v7 = *(const char **)v7;
    (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v6 + 24))(v6, 6, "[%s] QMux is kStopped; dropping incoming %u bytes.\n",
      v7,
      a3);
    return a3;
  }
  v22 = MEMORY[0x1E0C809B0];
  v23 = 0x40000000;
  v24 = ___ZN4QMux5State19handleReadData_syncEPKhj_block_invoke;
  v25 = &__block_descriptor_tmp_6;
  v28 = a3;
  v26 = this;
  v27 = a2;
  v10 = qmi::parse();
  if ((v10 & 0x80000000) != 0)
  {
    v13 = (char *)this + 40;
    if (*((char *)this + 63) < 0)
      v13 = *(const char **)v13;
    (*(void (**)(_QWORD, uint64_t, const char *, ...))(**((_QWORD **)this + 10) + 24))(*((_QWORD *)this + 10), 6, "[%s] Irrecoverable parsing error (available=%d). Resetting QMux.\n", v13, a3);
    __p = operator new(0x20uLL);
    v21 = xmmword_19EA1F1A0;
    strcpy((char *)__p, "Irrecoverable parsing error");
    QMux::State::invokeReset_sync((uint64_t)this, (uint64_t)&__p);
LABEL_23:
    if (SHIBYTE(v21) < 0)
    {
      operator delete(__p);
      return a3;
    }
    return a3;
  }
  v11 = v10;
  if (!(_DWORD)v10)
  {
    v14 = (char *)this + 40;
    v15 = (char *)this + 40;
    if (*((char *)this + 63) < 0)
      v15 = *(const char **)v14;
    (*(void (**)(_QWORD, uint64_t, const char *, ...))(**((_QWORD **)this + 10) + 24))(*((_QWORD *)this + 10), 6, "[%s] Not enough bytes for even the header (needs at least %u bytes), only %u available.\n", v15, 8, a3);
    v16 = *((_QWORD *)this + 10);
    if (*((char *)this + 63) < 0)
      v14 = *(const char **)v14;
    v17 = atomic_load((unsigned __int8 *)&qword_1ED710210);
    if ((v17 & 1) == 0)
    {
      v19 = *((_QWORD *)this + 10);
      v18 = __cxa_guard_acquire(&qword_1ED710210);
      v16 = v19;
      if (v18)
      {
        _MergedGlobals = (uint64_t)off_1E4153A98;
        __cxa_guard_release(&qword_1ED710210);
        v16 = v19;
      }
    }
    ATCSLogger::logCommand(v16, 6, (uint64_t)v14, (uint64_t)a2, a3, (uint64_t)&_MergedGlobals);
    __p = operator new(0x40uLL);
    v21 = xmmword_19EA1F190;
    strcpy((char *)__p, "QMux read parsing error: buffer underrun for incomplete frame");
    QMux::State::invokeReset_sync((uint64_t)this, (uint64_t)&__p);
    goto LABEL_23;
  }
  if (v10 < a3)
  {
    v12 = (char *)this + 40;
    if (*((char *)this + 63) < 0)
      v12 = *(const char **)v12;
    (*(void (**)(_QWORD, uint64_t, const char *, ...))(**((_QWORD **)this + 10) + 24))(*((_QWORD *)this + 10), 6, "[%s] More bytes in the buffer. Expecting %d, but %d available; continuing.\n",
      v12,
      v10,
      a3);
  }
  return v11;
}

void sub_19E9CD644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ATCSRouterIPCDriver::handleReceive(uint64_t a1, int a2, uint64_t a3)
{
  unsigned __int8 v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v17[5];
  std::__shared_weak_count *v18;
  uint64_t v19;
  int v20;

  v5 = atomic_load((unsigned __int8 *)&_MergedGlobals_2);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_2))
  {
    __cxa_atexit((void (*)(void *))std::weak_ptr<ATCSRouterIPCDriver>::~weak_ptr, &qword_1ED7102B0, &dword_19E9C8000);
    __cxa_guard_release(&_MergedGlobals_2);
  }
  if (!qword_1ED7102B8)
    return 0;
  v6 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_1ED7102B8);
  if (!v6)
    return 0;
  v7 = v6;
  if (qword_1ED7102B0)
  {
    v8 = *(NSObject **)(qword_1ED7102B0 + 32);
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 1174405120;
    v17[2] = ___ZN19ATCSRouterIPCDriver13handleReceiveEP24mav_router_context_tag_t20mav_router_channel_tPvS3__block_invoke;
    v17[3] = &__block_descriptor_tmp_7;
    v17[4] = qword_1ED7102B0;
    v18 = v7;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v20 = a2;
    v19 = a3;
    dispatch_async(v8, v17);
    v11 = v18;
    if (v18)
    {
      v12 = (unint64_t *)&v18->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  v14 = (unint64_t *)&v7->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return 0;
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return 0;
}

void qmi::ClientProxy::State::handleSentMessage_sync(qmi::ClientProxy::State *this, int a2)
{
  uint64_t v2;
  __int16 v3;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  __int16 v18;
  NSObject *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[6];
  std::__shared_weak_count *v23;
  __int16 v24;
  __int16 v25;

  v2 = *((_QWORD *)this + 12);
  if (*((_QWORD *)this + 13) != v2)
  {
    v3 = a2;
    v5 = *((_QWORD *)this + 15);
    v6 = (uint64_t *)(v2 + 8 * (v5 >> 7));
    v7 = *v6;
    v8 = *v6 + 32 * (v5 & 0x7F);
    v9 = *(_QWORD *)(v2 + (((*((_QWORD *)this + 16) + v5) >> 4) & 0xFFFFFFFFFFFFFF8))
       + 32 * ((*((_QWORD *)this + 16) + v5) & 0x7F);
    if (v8 != v9)
    {
      while (*(unsigned __int16 *)(*(_QWORD *)(v8 + 16) + 26) != a2)
      {
        v8 += 32;
        if (v8 - v7 == 4096)
        {
          v21 = v6[1];
          ++v6;
          v7 = v21;
          v8 = v21;
        }
        if (v8 == v9)
          return;
      }
    }
    if (v8 != v9)
    {
      v10 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      if (!v10 || (v11 = *((_QWORD *)this + 1), (v12 = std::__shared_weak_count::lock(v10)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v13 = v12;
      p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
      do
        v15 = __ldxr(p_shared_weak_owners);
      while (__stxr(v15 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v13);
      }
      v18 = *(_WORD *)(*(_QWORD *)(v8 + 16) + 24);
      v19 = *((_QWORD *)this + 3);
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 1174405120;
      v22[2] = ___ZN3qmi11ClientProxy5State22handleSentMessage_syncEt_block_invoke;
      v22[3] = &__block_descriptor_tmp_22;
      v22[4] = this;
      v22[5] = v11;
      v23 = v13;
      do
        v20 = __ldxr(p_shared_weak_owners);
      while (__stxr(v20 + 1, p_shared_weak_owners));
      v24 = v3;
      v25 = v18;
      qmi::ClientProxy::State::Transaction::startTimer((unsigned int *)v8, v19, (uint64_t)v22);
      if (v23)
        std::__shared_weak_count::__release_weak(v23);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void qmi::ClientProxy::State::Transaction::startTimer(unsigned int *a1, dispatch_queue_t queue, uint64_t a3)
{
  NSObject *v5;
  NSObject *v6;
  int64_t v7;
  NSObject *v8;
  NSObject *v9;
  dispatch_time_t v10;
  _QWORD v11[5];
  dispatch_object_t object;

  if (!*((_QWORD *)a1 + 1))
  {
    v5 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, queue);
    v6 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = v5;
    if (v6)
    {
      dispatch_release(v6);
      v5 = *((_QWORD *)a1 + 1);
    }
    if (v5)
    {
      v7 = 1000000 * *a1;
      dispatch_retain(v5);
      v8 = *((_QWORD *)a1 + 1);
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 1174405120;
      v11[2] = ___ZN3qmi11ClientProxy5State11Transaction10startTimerEP16dispatch_queue_sU13block_pointerFvvE_block_invoke;
      v11[3] = &__block_descriptor_tmp_35;
      v11[4] = a3;
      object = v5;
      dispatch_retain(v5);
      dispatch_source_set_event_handler(v8, v11);
      v9 = *((_QWORD *)a1 + 1);
      v10 = dispatch_time(0, v7);
      dispatch_source_set_timer(v9, v10, 0xFFFFFFFFFFFFFFFFLL, 0x2FAF080uLL);
      dispatch_activate(*((dispatch_object_t *)a1 + 1));
      if (object)
        dispatch_release(object);
      dispatch_release(v5);
    }
  }
}

void ___ZN4QMux5State19handleReadData_syncEPKhj_block_invoke(uint64_t a1, unsigned __int8 *a2, unsigned __int16 *a3, unsigned int a4, int a5)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  const char *v14;
  char *v15;
  const char *v16;
  uint64_t v17;
  int v18;
  char *v19;
  __int128 v20;
  char *v21;
  __int128 v22;

  if ((a4 & 0x80000000) != 0)
    return;
  v6 = *(_QWORD *)(a1 + 32);
  if (*a2 != 1)
  {
    v14 = (const char *)(v6 + 40);
    if (*(char *)(v6 + 63) < 0)
      v14 = *(const char **)v14;
    (*(void (**)(_QWORD, uint64_t, const char *, ...))(**(_QWORD **)(v6 + 80) + 24))(*(_QWORD *)(v6 + 80), 6, "[%s] Invalid interface type byte (got 0x%02x, available=%d); stream is corrupt. Resetting QMux.\n",
      v14,
      *a2,
      *(_DWORD *)(a1 + 48));
    v15 = (char *)operator new(0x28uLL);
    v21 = v15;
    v22 = xmmword_19EA1F1B0;
    strcpy(v15, "QMux read parsing error: bad I/F type");
    QMux::State::invokeReset((_QWORD *)v6, (uint64_t)&v21);
    goto LABEL_21;
  }
  if (a2[4] != 128)
  {
    v16 = (const char *)(v6 + 40);
    if (*(char *)(v6 + 63) < 0)
      v16 = *(const char **)v16;
    (*(void (**)(_QWORD, uint64_t, const char *, ...))(**(_QWORD **)(v6 + 80) + 24))(*(_QWORD *)(v6 + 80), 6, "[%s] Invalid control flags (got 0x%02x, available=%d); stream is corrupt. Resetting QMux.\n",
      v16,
      a2[4],
      *(_DWORD *)(a1 + 48));
    v15 = (char *)operator new(0x30uLL);
    v19 = v15;
    v20 = xmmword_19EA1F1C0;
    strcpy(v15, "QMux read parsing error: bad control flags");
    QMux::State::invokeReset((_QWORD *)v6, (uint64_t)&v19);
LABEL_21:
    operator delete(v15);
    return;
  }
  if (a5 >= (int)a4)
  {
    QMux::State::handleMessage_sync(*(_QWORD *)(a1 + 32), (uint64_t)a2, *(const void **)(a1 + 40), *(unsigned int *)(a1 + 48), a3, a4);
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 48);
    if (v7 >= 0x20)
      v8 = 32;
    else
      v8 = v7;
    v9 = (const char *)(v6 + 40);
    v10 = (const char *)(v6 + 40);
    if (*(char *)(v6 + 63) < 0)
      v10 = *(const char **)v9;
    (*(void (**)(_QWORD, uint64_t, const char *, ...))(**(_QWORD **)(v6 + 80) + 24))(*(_QWORD *)(v6 + 80), 6, "[%s] Not enough bytes in the buffer. Expecting %d, only %d available; first %u bytes are:\n",
      v10,
      *((unsigned __int16 *)a2 + 1) + 1,
      *(_DWORD *)(a1 + 48),
      v8);
    v11 = *(_QWORD *)(v6 + 80);
    if (*(char *)(v6 + 63) < 0)
      v9 = *(const char **)v9;
    v12 = *(_QWORD *)(a1 + 40);
    v13 = atomic_load((unsigned __int8 *)&qword_1ED710210);
    if ((v13 & 1) == 0)
    {
      v17 = v11;
      v18 = __cxa_guard_acquire(&qword_1ED710210);
      v11 = v17;
      if (v18)
      {
        _MergedGlobals = (uint64_t)off_1E4153A98;
        __cxa_guard_release(&qword_1ED710210);
        v11 = v17;
      }
    }
    ATCSLogger::logCommand(v11, 6, (uint64_t)v9, v12, v8, (uint64_t)&_MergedGlobals);
  }
}

void sub_19E9CDD14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E9CDD28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t QMux::State::send_sync(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  const char *v14;
  unsigned int v15;
  const char *v16;
  uint64_t v17;
  uint64_t v19;
  BOOL v20;
  uint64_t *v21;
  unsigned int v22;
  BOOL v23;
  char v24;
  unsigned int v25;
  BOOL v26;
  uint64_t result;
  unsigned int v28;
  BOOL v29;
  char v30;
  unsigned int v31;
  BOOL v32;
  BOOL v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  uint64_t v40;
  const char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  void *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  int64_t v56;
  char *v57;
  char *v58;
  char *v59;
  void *v60;
  unint64_t v61;
  char *v62;
  void *v63;
  char *v64;
  char *v65;
  void *v66;
  unint64_t v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  int64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  int64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 *v96;
  char *v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  void *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  unint64_t v110;
  uint64_t v111;
  __int128 *v112;
  _OWORD *v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  int64_t v126;
  char *v127;
  char *v128;
  size_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  __int128 *v134;
  _OWORD *v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  int v143;
  unsigned int *v144;
  unsigned int v145;
  unsigned int v146;
  int v147;
  BOOL v148;
  uint64_t v149;
  const char *v150;
  int v151;
  char v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  int64_t v158;
  unint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  __int128 *v165;
  _OWORD *v166;
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  void *v173;
  void *__src;
  char *__srca;
  char *__srcb;
  char *__srcc;
  void *__srcd;
  void *__srce;

  v8 = *a2;
  v9 = *(unsigned __int8 *)(*a2 + 33);
  v10 = *(unsigned __int8 *)(*a2 + 32);
  v11 = *(_DWORD *)(a1 + 216);
  v12 = v11 == 5 || v11 == 0;
  if (v12)
  {
    v13 = *(_QWORD *)(a1 + 80);
    v14 = (const char *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
    {
      v14 = *(const char **)v14;
      v15 = v11 - 1;
      if (v15 <= 4)
        goto LABEL_8;
    }
    else
    {
      v15 = v11 - 1;
      if (v15 <= 4)
      {
LABEL_8:
        v16 = off_1E4153EE8[v15];
        return (*(uint64_t (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v13 + 24))(v13, 6, "[%s] Cannot queue send: QMux is %s. (svc=%d client=%d txid=%d msgid=0x%x)\n", v14, v16, v10, v9, *(unsigned __int16 *)(*a3 + 26), *(unsigned __int16 *)(*a3 + 24));
      }
    }
    v16 = "kStopped";
    return (*(uint64_t (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v13 + 24))(v13, 6, "[%s] Cannot queue send: QMux is %s. (svc=%d client=%d txid=%d msgid=0x%x)\n", v14, v16, v10, v9, *(unsigned __int16 *)(*a3 + 26), *(unsigned __int16 *)(*a3 + 24));
  }
  v17 = *(_QWORD *)(a1 + 120);
  if (v17)
  {
    v19 = a1 + 120;
    do
    {
      v22 = *(unsigned __int8 *)(v17 + 32);
      v23 = v22 == v10;
      if (v22 >= v10)
        v24 = 1;
      else
        v24 = -1;
      if (v23)
      {
        v25 = *(unsigned __int8 *)(v17 + 33);
        v26 = v25 == v9;
        v24 = v25 >= v9 ? 1 : -1;
        if (v26)
          v24 = 0;
      }
      v20 = (v24 & 0x80) == 0;
      if (v24 < 0)
        v21 = (uint64_t *)(v17 + 8);
      else
        v21 = (uint64_t *)v17;
      if (v20)
        v19 = v17;
      v17 = *v21;
    }
    while (*v21);
    if (v19 != a1 + 120)
    {
      v28 = *(unsigned __int8 *)(v19 + 32);
      v29 = v10 == v28;
      if (v10 >= v28)
        v30 = 1;
      else
        v30 = -1;
      if (v29)
      {
        v31 = *(unsigned __int8 *)(v19 + 33);
        v32 = v9 >= v31;
        v33 = v9 == v31;
        v30 = -1;
        if (v32)
          v30 = 1;
        if (v33)
          v30 = 0;
      }
      if ((v30 & 0x80) == 0)
      {
        v34 = *(std::__shared_weak_count **)(v19 + 48);
        if (v34 && (v35 = std::__shared_weak_count::lock(v34), v8 = *a2, v35))
        {
          v36 = v35;
          v37 = *(_QWORD *)(v19 + 40);
          p_shared_owners = (unint64_t *)&v35->__shared_owners_;
          do
            v39 = __ldaxr(p_shared_owners);
          while (__stlxr(v39 - 1, p_shared_owners));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v36);
          }
          if (v8 == v37)
          {
LABEL_57:
            v42 = *(char **)(a1 + 152);
            v43 = *(char **)(a1 + 144);
            v44 = (v42 - v43) >> 3;
            if (v42 == v43)
              v45 = 0;
            else
              v45 = 170 * v44 - 1;
            v46 = *(_QWORD *)(a1 + 168);
            v47 = *(_QWORD *)(a1 + 176) + v46;
            if (v45 != v47)
            {
LABEL_155:
              v139 = *(_QWORD *)&v43[8 * (v47 / 0xAA)] + 24 * (v47 % 0xAA);
              *(_BYTE *)v139 = v10;
              *(_BYTE *)(v139 + 1) = v9;
              v140 = a3[1];
              *(_QWORD *)(v139 + 8) = *a3;
              *(_QWORD *)(v139 + 16) = v140;
              if (v140)
              {
                v141 = (unint64_t *)(v140 + 8);
                do
                  v142 = __ldxr(v141);
                while (__stxr(v142 + 1, v141));
              }
              qmi::fixupHeader();
              ++*(_QWORD *)(a1 + 176);
              v143 = *(unsigned __int8 *)(a1 + 360);
              if (*(_BYTE *)(a1 + 360))
              {
                v144 = (unsigned int *)(a1 + 368);
                do
                {
                  v145 = __ldxr(v144);
                  v146 = v145 + 1;
                }
                while (__stxr(v146, v144));
                v147 = *(_DWORD *)(a1 + 372);
                v148 = (int)(v146 + v147) > *(_DWORD *)(a1 + 364) + (*(_DWORD *)(a1 + 364) >> 2);
                if (*(int *)(a1 + 200) < 1)
                {
LABEL_172:
                  result = *(_QWORD *)(a1 + 184);
                  if (result)
                    v152 = v148;
                  else
                    v152 = 1;
                  if ((v152 & 1) == 0)
                    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)result + 56))(result, a1, *(_QWORD *)(a1 + 208));
                  return result;
                }
              }
              else
              {
                v147 = 0;
                v148 = 0;
                v146 = -1431655766;
                if (*(int *)(a1 + 200) < 1)
                  goto LABEL_172;
              }
              if (*(int *)(*a2 + 40) >= 1)
              {
                v149 = *(_QWORD *)(a1 + 80);
                v150 = (const char *)(a1 + 40);
                v151 = *(char *)(a1 + 63);
                if (v143)
                {
                  if (v151 < 0)
                    v150 = *(const char **)v150;
                  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v149 + 24))(v149, 6, "[%s] queueing qmux pdu for svc=%d client=%d (txid=%d msgid=0x%x) [tx-slot=%d, rx-pending=%d]\n", v150, v10, v9, *(unsigned __int16 *)(*a3 + 26), *(unsigned __int16 *)(*a3 + 24), v146, v147);
                }
                else
                {
                  if (v151 < 0)
                    v150 = *(const char **)v150;
                  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v149 + 24))(v149, 6, "[%s] queueing qmux pdu for svc=%d client=%d (txid=%d msgid=0x%x)\n", v150, v10, v9, *(unsigned __int16 *)(*a3 + 26), *(unsigned __int16 *)(*a3 + 24));
                }
              }
              goto LABEL_172;
            }
            if (v46 >= 0xAA)
            {
              *(_QWORD *)(a1 + 168) = v46 - 170;
              v48 = v43 + 8;
              v49 = *(void **)v43;
              *(_QWORD *)(a1 + 144) = v43 + 8;
              if (v42 != *(char **)(a1 + 160))
              {
LABEL_152:
                *(_QWORD *)v42 = v49;
                goto LABEL_153;
              }
              v50 = *(char **)(a1 + 136);
              __src = v49;
              if (v48 > v50)
              {
                v51 = (v48 - v50) >> 3;
                if (v51 >= -1)
                  v52 = v51 + 1;
                else
                  v52 = v51 + 2;
                v53 = v52 >> 1;
                v54 = -v53;
                v55 = &v48[-8 * v53];
                v56 = v42 - v48;
                if (v42 != v48)
                {
                  memmove(&v48[-8 * v53], v48, v42 - v48);
                  v42 = *(char **)(a1 + 144);
                }
                v57 = &v42[8 * v54];
                v42 = &v55[v56];
                *(_QWORD *)(a1 + 144) = v57;
                *(_QWORD *)(a1 + 152) = &v55[v56];
                v49 = __src;
                goto LABEL_152;
              }
              v173 = *(void **)(a1 + 136);
              v69 = (v42 - v50) >> 2;
              if (v42 == v50)
                v69 = 1;
              if (!(v69 >> 61))
              {
                v70 = v69 >> 2;
                v71 = 8 * v69;
                v72 = (char *)operator new(8 * v69);
                v73 = &v72[8 * v70];
                v74 = v42 - v48;
                v12 = v42 == v48;
                v42 = v73;
                if (v12)
                  goto LABEL_150;
                v42 = &v73[v74 & 0xFFFFFFFFFFFFFFF8];
                v75 = v74 - 8;
                if ((unint64_t)(v74 - 8) >= 0x38)
                {
                  v131 = &v72[8 * v70];
                  v76 = v131;
                  if ((unint64_t)(v131 - v48) >= 0x20)
                  {
                    v132 = (v75 >> 3) + 1;
                    v133 = 8 * (v132 & 0x3FFFFFFFFFFFFFFCLL);
                    v76 = &v73[v133];
                    v48 += v133;
                    v134 = (__int128 *)(v43 + 24);
                    v135 = v131 + 16;
                    v136 = v132 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v137 = *v134;
                      *(v135 - 1) = *(v134 - 1);
                      *v135 = v137;
                      v134 += 2;
                      v135 += 2;
                      v136 -= 4;
                    }
                    while (v136);
                    if (v132 == (v132 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_150:
                      *(_QWORD *)(a1 + 136) = v72;
                      *(_QWORD *)(a1 + 144) = v73;
                      *(_QWORD *)(a1 + 152) = v42;
                      *(_QWORD *)(a1 + 160) = &v72[v71];
                      v49 = __src;
                      if (v173)
                      {
                        operator delete(v173);
                        v42 = *(char **)(a1 + 152);
                      }
                      goto LABEL_152;
                    }
                  }
                }
                else
                {
                  v76 = &v72[8 * v70];
                }
                do
                {
                  v138 = *(_QWORD *)v48;
                  v48 += 8;
                  *(_QWORD *)v76 = v138;
                  v76 += 8;
                }
                while (v76 != v42);
                goto LABEL_150;
              }
LABEL_191:
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            v172 = v42 - v43;
            v58 = *(char **)(a1 + 160);
            v59 = *(char **)(a1 + 136);
            if (v44 >= (unint64_t)((v58 - v59) >> 3))
            {
              if (v58 == v59)
                v61 = 1;
              else
                v61 = (v58 - v59) >> 2;
              if (!(v61 >> 61))
              {
                v170 = 8 * v61;
                v171 = v61;
                v62 = (char *)operator new(8 * v61);
                __srca = v62;
                v63 = operator new(0xFF0uLL);
                v64 = &v62[8 * v44];
                v65 = &v62[v170];
                if (v44 == v171)
                {
                  v66 = v63;
                  if (v172 < 1)
                  {
                    if (v42 == v43)
                      v78 = 1;
                    else
                      v78 = v172 >> 2;
                    if (v78 >> 61)
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    v64 = (char *)operator new(8 * v78);
                    v68 = &v64[8 * v78];
                    operator delete(__srca);
                    v43 = *(char **)(a1 + 144);
                    v42 = *(char **)(a1 + 152);
                    __srca = v64;
                  }
                  else
                  {
                    v67 = v44 + 2;
                    if (v44 >= -1)
                      v67 = v44 + 1;
                    v64 -= 8 * (v67 >> 1);
                    v68 = v65;
                  }
                  v63 = v66;
                }
                else
                {
                  v68 = &v62[v170];
                }
                *(_QWORD *)v64 = v63;
                v79 = v64 + 8;
                if (v42 == v43)
                {
                  v80 = __srca;
                }
                else
                {
                  v80 = __srca;
                  do
                  {
                    if (v64 == v80)
                    {
                      if (v79 >= v68)
                      {
                        __srcc = v80;
                        if (v68 == v80)
                          v86 = 1;
                        else
                          v86 = (v68 - v80) >> 2;
                        if (v86 >> 61)
                          std::__throw_bad_array_new_length[abi:ne180100]();
                        v80 = (char *)operator new(8 * v86);
                        v87 = (v86 + 3) >> 2;
                        v64 = &v80[8 * v87];
                        v88 = __srcc;
                        v89 = v79 - __srcc;
                        v12 = v79 == __srcc;
                        v79 = v64;
                        if (!v12)
                        {
                          v79 = &v64[v89 & 0xFFFFFFFFFFFFFFF8];
                          v90 = v89 - 8;
                          v91 = &v80[8 * v87];
                          v92 = __srcc;
                          if (v90 < 0x38)
                            goto LABEL_195;
                          v93 = 8 * v87;
                          v92 = __srcc;
                          v91 = &v80[8 * v87];
                          if ((unint64_t)(v91 - __srcc) < 0x20)
                            goto LABEL_195;
                          v94 = (v90 >> 3) + 1;
                          v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
                          v91 = &v64[v95];
                          v92 = &__srcc[v95];
                          v96 = (__int128 *)(__srcc + 16);
                          v97 = &v80[v93 + 16];
                          v98 = v94 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            v99 = *v96;
                            *((_OWORD *)v97 - 1) = *(v96 - 1);
                            *(_OWORD *)v97 = v99;
                            v96 += 2;
                            v97 += 32;
                            v98 -= 4;
                          }
                          while (v98);
                          if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
                          {
LABEL_195:
                            do
                            {
                              v100 = *(_QWORD *)v92;
                              v92 += 8;
                              *(_QWORD *)v91 = v100;
                              v91 += 8;
                            }
                            while (v91 != v79);
                          }
                          v88 = __srcc;
                        }
                        v68 = &v80[8 * v86];
                        operator delete(v88);
                      }
                      else
                      {
                        __srcb = v68;
                        v82 = (v68 - v79) >> 3;
                        if (v82 >= -1)
                          v83 = v82 + 1;
                        else
                          v83 = v82 + 2;
                        v84 = v83 >> 1;
                        v64 = &v80[8 * (v83 >> 1)];
                        v85 = v80;
                        if (v79 != v80)
                        {
                          memmove(v64, v80, v79 - v80);
                          v85 = v79;
                        }
                        v79 = &v85[8 * v84];
                        v68 = __srcb;
                      }
                    }
                    v81 = *((_QWORD *)v42 - 1);
                    v42 -= 8;
                    *((_QWORD *)v64 - 1) = v81;
                    v64 -= 8;
                  }
                  while (v42 != *(char **)(a1 + 144));
                }
                v101 = *(void **)(a1 + 136);
                *(_QWORD *)(a1 + 136) = v80;
                *(_QWORD *)(a1 + 144) = v64;
                *(_QWORD *)(a1 + 152) = v79;
                *(_QWORD *)(a1 + 160) = v68;
                if (v101)
                  operator delete(v101);
                goto LABEL_154;
              }
              goto LABEL_191;
            }
            v60 = operator new(0xFF0uLL);
            if (v58 != v42)
            {
              *(_QWORD *)v42 = v60;
LABEL_153:
              *(_QWORD *)(a1 + 152) += 8;
LABEL_154:
              v43 = *(char **)(a1 + 144);
              v47 = *(_QWORD *)(a1 + 176) + *(_QWORD *)(a1 + 168);
              goto LABEL_155;
            }
            if (v43 == v59)
            {
              __srcd = v60;
              v102 = (v58 - v43) >> 2;
              if (v42 == v43)
                v102 = 1;
              if (v102 >> 61)
                goto LABEL_191;
              v103 = (v102 + 3) >> 2;
              v104 = 8 * v102;
              v105 = (char *)operator new(8 * v102);
              v77 = &v105[8 * v103];
              v106 = v77;
              if (v42 != v43)
              {
                v106 = &v77[8 * v44];
                v107 = &v105[8 * v103];
                v108 = v43;
                if ((unint64_t)(v172 - 8) < 0x38)
                  goto LABEL_196;
                v109 = &v105[8 * v103];
                v107 = v109;
                v108 = v43;
                if ((unint64_t)(v109 - v43) < 0x20)
                  goto LABEL_196;
                v110 = ((unint64_t)(v172 - 8) >> 3) + 1;
                v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
                v107 = &v77[v111];
                v108 = &v43[v111];
                v112 = (__int128 *)(v43 + 16);
                v113 = v109 + 16;
                v114 = v110 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v115 = *v112;
                  *(v113 - 1) = *(v112 - 1);
                  *v113 = v115;
                  v112 += 2;
                  v113 += 2;
                  v114 -= 4;
                }
                while (v114);
                if (v110 != (v110 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_196:
                  do
                  {
                    v116 = *(_QWORD *)v108;
                    v108 += 8;
                    *(_QWORD *)v107 = v116;
                    v107 += 8;
                  }
                  while (v107 != v106);
                }
              }
              *(_QWORD *)(a1 + 136) = v105;
              *(_QWORD *)(a1 + 144) = v77;
              *(_QWORD *)(a1 + 152) = v106;
              *(_QWORD *)(a1 + 160) = &v105[v104];
              v60 = __srcd;
              if (v43)
              {
                operator delete(v43);
                v60 = __srcd;
                v77 = *(char **)(a1 + 144);
              }
            }
            else
            {
              v77 = v43;
            }
            *((_QWORD *)v77 - 1) = v60;
            v117 = *(char **)(a1 + 144);
            v118 = *(char **)(a1 + 152);
            *(_QWORD *)(a1 + 144) = v117 - 8;
            v119 = *((_QWORD *)v117 - 1);
            *(_QWORD *)(a1 + 144) = v117;
            if (v118 != *(char **)(a1 + 160))
            {
LABEL_137:
              *(_QWORD *)v118 = v119;
              goto LABEL_153;
            }
            v120 = *(char **)(a1 + 136);
            if (v117 > v120)
            {
              v121 = (v117 - v120) >> 3;
              if (v121 >= -1)
                v122 = v121 + 1;
              else
                v122 = v121 + 2;
              v123 = v122 >> 1;
              v124 = -v123;
              v125 = &v117[-8 * v123];
              v126 = v118 - v117;
              if (v118 != v117)
              {
                v127 = &v117[-8 * v123];
                v128 = v117;
                v129 = v118 - v117;
                v130 = -v123;
                memmove(v127, v128, v129);
                v124 = v130;
                v117 = *(char **)(a1 + 144);
              }
              *(_QWORD *)(a1 + 144) = &v117[8 * v124];
              *(_QWORD *)(a1 + 152) = &v125[v126];
              *(_QWORD *)&v125[v126] = v119;
              goto LABEL_153;
            }
            __srce = *(void **)(a1 + 136);
            v153 = (v118 - v120) >> 2;
            if (v118 == v120)
              v153 = 1;
            if (v153 >> 61)
              goto LABEL_191;
            v154 = v153 >> 2;
            v155 = 8 * v153;
            v156 = (char *)operator new(8 * v153);
            v157 = &v156[8 * v154];
            v158 = v118 - v117;
            v12 = v118 == v117;
            v118 = v157;
            if (!v12)
            {
              v118 = &v157[v158 & 0xFFFFFFFFFFFFFFF8];
              v159 = v158 - 8;
              if ((unint64_t)(v158 - 8) < 0x38)
              {
                v160 = &v156[8 * v154];
                do
                {
LABEL_187:
                  v169 = *(_QWORD *)v117;
                  v117 += 8;
                  *(_QWORD *)v160 = v169;
                  v160 += 8;
                }
                while (v160 != v118);
                goto LABEL_188;
              }
              v161 = &v156[8 * v154];
              v160 = v161;
              if ((unint64_t)(v161 - v117) < 0x20)
                goto LABEL_187;
              v162 = (v159 >> 3) + 1;
              v163 = 8 * (v162 & 0x3FFFFFFFFFFFFFFCLL);
              v160 = &v157[v163];
              v164 = &v117[v163];
              v165 = (__int128 *)(v117 + 16);
              v166 = v161 + 16;
              v167 = v162 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v168 = *v165;
                *(v166 - 1) = *(v165 - 1);
                *v166 = v168;
                v165 += 2;
                v166 += 2;
                v167 -= 4;
              }
              while (v167);
              v117 = v164;
              if (v162 != (v162 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_187;
            }
LABEL_188:
            *(_QWORD *)(a1 + 136) = v156;
            *(_QWORD *)(a1 + 144) = v157;
            *(_QWORD *)(a1 + 152) = v118;
            *(_QWORD *)(a1 + 160) = &v156[v155];
            if (__srce)
            {
              operator delete(__srce);
              v118 = *(char **)(a1 + 152);
            }
            goto LABEL_137;
          }
        }
        else if (!v8)
        {
          goto LABEL_57;
        }
        _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x2F4, "client", "==", "i->second.lock()", a6);
        goto LABEL_57;
      }
    }
  }
  v40 = *(_QWORD *)(a1 + 80);
  v41 = (const char *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0)
    v41 = *(const char **)v41;
  return (*(uint64_t (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v40 + 24))(v40, 6, "[%s] Cannot queue send: Unknown client. (svc=%d client=%d txid=%d msgid=0x%x)\n", v41, v10, v9, *(unsigned __int16 *)(*a3 + 26), *(unsigned __int16 *)(*a3 + 24));
}

void sub_19E9CE7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p)
{
  void *v20;

  operator delete(v20);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19E9CE7EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count **v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *v1;
  if (*v1)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(a1);
}

void ATCSRouterIPCDriver::handleWriteReady(uint64_t a1, uint64_t a2, uint64_t a3)
{
  dispatch_block_t v4;
  _QWORD block[7];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN19ATCSRouterIPCDriver16handleWriteReadyEP22ATCSDispatcherCallbackPv_block_invoke;
  block[3] = &__block_descriptor_tmp_15_2;
  block[4] = a1;
  block[5] = a3;
  block[6] = a2;
  v4 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, block);
  dispatch_async(*(dispatch_queue_t *)(a1 + 32), v4);
  _Block_release(v4);
}

uint64_t ATCSLoggerDefault::log(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const char *v11;
  __int128 v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[7];
  _OWORD v18[3];
  unint64_t v19;
  uint64_t *v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (a2 > 6)
    v11 = "atcs";
  else
    v11 = off_1E41537C0[a2];
  v20 = &a9;
  v19 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v18[1] = v12;
  v18[2] = v12;
  v18[0] = v12;
  ctu::LogMessageBuffer::LogMessageBuffer((ctu::LogMessageBuffer *)v18);
  MEMORY[0x1A1AEAF88](v17, a3, v20);
  ctu::LogMessageBuffer::operator=();
  MEMORY[0x1A1AEAFA0](v17);
  v13 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = ctu::LogMessageBuffer::str((ctu::LogMessageBuffer *)v18);
    if (*(char *)(v14 + 23) >= 0)
      v15 = v14;
    else
      v15 = *(_QWORD *)v14;
    *(_DWORD *)buf = 136315394;
    v22 = v11;
    v23 = 2080;
    v24 = v15;
    _os_log_impl(&dword_19E9C8000, v13, OS_LOG_TYPE_DEFAULT, "#I %s: %s", buf, 0x16u);
  }
  return MEMORY[0x1A1AEAFA0](v18);
}

void ___ZN3ctu15XpcClientHelper9setServerIN3qmi12EurTransportEEEvN3xpc10connectionEN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke(_QWORD *a1, xpc_object_t a2)
{
  _QWORD *v3;
  std::__shared_weak_count *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v3 = (_QWORD *)a1[4];
  v15 = 0;
  v16 = 0;
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v16 = std::__shared_weak_count::lock(v4);
    if (!v16)
      return;
    v6 = a1[5];
    v15 = v6;
    if (v6)
    {
      v7 = MEMORY[0x1A1AEB9A8](a2);
      v8 = MEMORY[0x1E0C812F8];
      if (v7 != MEMORY[0x1E0C812F8])
      {
        if (v7 == MEMORY[0x1E0C81310] && *v3 == a1[7])
        {
          v14 = a2;
          if (a2)
          {
            xpc_retain(a2);
          }
          else
          {
            a2 = xpc_null_create();
            v14 = a2;
          }
          v13 = *(_QWORD *)(v6 + 88);
          if (v13)
          {
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 48))(v13, &v14);
            a2 = v14;
          }
          xpc_release(a2);
        }
        goto LABEL_18;
      }
      if (a2)
      {
        xpc_retain(a2);
        v14 = a2;
      }
      else
      {
        a2 = xpc_null_create();
        v14 = a2;
        if (!a2)
        {
          v9 = xpc_null_create();
          a2 = 0;
          goto LABEL_16;
        }
      }
      if (MEMORY[0x1A1AEB9A8](a2) == v8)
      {
        xpc_retain(a2);
        v9 = a2;
LABEL_17:
        qmi::EurTransport::handleMessage(v6, &v14);
        xpc_release(v9);
        v14 = 0;
        xpc_release(a2);
        goto LABEL_18;
      }
      v9 = xpc_null_create();
LABEL_16:
      v14 = v9;
      goto LABEL_17;
    }
  }
LABEL_18:
  v10 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_19E9CEBC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
  xpc_release(object);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void qmi::EurTransport::handleMessage(uint64_t a1, void **a2)
{
  void *v3;
  uint64_t v4;
  xpc_object_t object;

  if (*(_QWORD *)(a1 + 56))
  {
    v3 = *a2;
    object = v3;
    if (v3)
    {
      xpc_retain(v3);
      v4 = *(_QWORD *)(a1 + 56);
      if (v4)
      {
LABEL_4:
        (*(void (**)(uint64_t, xpc_object_t *))(*(_QWORD *)v4 + 48))(v4, &object);
        xpc_release(object);
        return;
      }
    }
    else
    {
      object = xpc_null_create();
      v4 = *(_QWORD *)(a1 + 56);
      if (v4)
        goto LABEL_4;
    }
    std::__throw_bad_function_call[abi:ne180100]();
  }
}

void sub_19E9CECA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZNK3ctu15XpcServerHelper12acceptClientIN3qmi6Client5StateEEEvN3xpc10connectionEN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke(uint64_t a1, xpc_object_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  xpc_object_t v10;
  uint64_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  xpc_object_t object[2];
  std::__shared_weak_count *v18;

  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v18 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(void **)(a1 + 32);
      object[1] = v7;
      if (!v7)
        goto LABEL_23;
      v8 = MEMORY[0x1A1AEB9A8](a2);
      v9 = MEMORY[0x1E0C812F8];
      if (v8 != MEMORY[0x1E0C812F8])
      {
        if (v8 != MEMORY[0x1E0C81310])
          goto LABEL_23;
        v10 = *(xpc_object_t *)(a1 + 48);
        if (v10)
        {
          xpc_retain(v10);
          object[0] = a2;
          if (a2)
          {
LABEL_8:
            xpc_retain(a2);
LABEL_19:
            qmi::Client::State::handleClientError((uint64_t)v7, v11, object);
            xpc_release(a2);
            xpc_release(v10);
LABEL_23:
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v16 = __ldaxr(p_shared_owners);
            while (__stlxr(v16 - 1, p_shared_owners));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
            return;
          }
        }
        else
        {
          v10 = xpc_null_create();
          object[0] = a2;
          if (a2)
            goto LABEL_8;
        }
        a2 = xpc_null_create();
        object[0] = a2;
        goto LABEL_19;
      }
      v12 = *(xpc_object_t *)(a1 + 48);
      if (v12)
      {
        xpc_retain(*(xpc_object_t *)(a1 + 48));
        if (a2)
        {
LABEL_11:
          xpc_retain(a2);
          object[0] = a2;
          goto LABEL_14;
        }
      }
      else
      {
        v12 = xpc_null_create();
        if (a2)
          goto LABEL_11;
      }
      a2 = xpc_null_create();
      object[0] = a2;
      if (!a2)
      {
        v13 = xpc_null_create();
        a2 = 0;
        goto LABEL_21;
      }
LABEL_14:
      if (MEMORY[0x1A1AEB9A8](a2) == v9)
      {
        xpc_retain(a2);
        goto LABEL_22;
      }
      v13 = xpc_null_create();
LABEL_21:
      object[0] = v13;
LABEL_22:
      qmi::Client::State::handleClientMessage((uint64_t)v7, v14, object);
      xpc_release(object[0]);
      object[0] = 0;
      xpc_release(a2);
      xpc_release(v12);
      v6 = v18;
      if (!v18)
        return;
      goto LABEL_23;
    }
  }
}

void sub_19E9CEE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
  void *v11;
  void *v12;

  xpc_release(v11);
  xpc_release(v12);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void qmi::Client::State::handleClientMessage(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  NSObject *v5;
  int64_t int64;
  xpc_object_t value;
  int v8;
  xpc_object_t v9;
  _QWORD *v10;
  char *v11;
  size_t v12;
  void *v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void *__dst[3];
  uint8_t buf[4];
  _QWORD *v20;
  __int16 v21;
  void **v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = *(NSObject **)(a1 + 40);
  if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    goto LABEL_2;
  v10 = (_QWORD *)(a1 + 56);
  if (*(char *)(a1 + 79) < 0)
    v10 = (_QWORD *)*v10;
  v11 = (char *)MEMORY[0x1A1AEB90C](*a3);
  memset(__dst, 170, sizeof(__dst));
  v12 = strlen(v11);
  if (v12 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = (void *)v12;
  if (v12 >= 0x17)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    v14 = (void **)operator new(v15 + 1);
    __dst[1] = v13;
    __dst[2] = (void *)(v16 | 0x8000000000000000);
    __dst[0] = v14;
  }
  else
  {
    HIBYTE(__dst[2]) = v12;
    v14 = __dst;
    if (!v12)
      goto LABEL_23;
  }
  memcpy(v14, v11, (size_t)v13);
LABEL_23:
  *((_BYTE *)v13 + (_QWORD)v14) = 0;
  free(v11);
  v17 = __dst;
  if (SHIBYTE(__dst[2]) < 0)
    v17 = (void **)__dst[0];
  *(_DWORD *)buf = 136315394;
  v20 = v10;
  v21 = 2080;
  v22 = v17;
  _os_log_debug_impl(&dword_19E9C8000, v5, OS_LOG_TYPE_DEBUG, "#D [%s] *** Client got message: %s", buf, 0x16u);
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
LABEL_2:
  int64 = xpc_dictionary_get_int64(*a3, "status");
  if (int64)
    qmi::Client::State::handleStatus_sync(a1, a3, int64);
  value = xpc_dictionary_get_value(*a3, "resp_qmi_message");
  if (value)
    qmi::Client::State::handleResponse_sync(a1, a3, value);
  v9 = xpc_dictionary_get_value(*a3, "ind_qmi_message");
  if (v9)
    qmi::Client::State::handleIndication_sync(a1, v8, v9);
  if (xpc_dictionary_get_BOOL(*a3, "low_power"))
    (*(void (**)(uint64_t, xpc_object_t *))(*(_QWORD *)a1 + 32))(a1, a3);
  if (xpc_dictionary_get_BOOL(*a3, "exit_low_power"))
    qmi::Client::State::handleExitLowPower_sync(a1);
}

void qmi::Client::State::handleResponse_sync(uint64_t a1, xpc_object_t *a2, void *a3)
{
  int64_t int64;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  __int16 v10;
  char *v11;
  size_t length;
  __int16 v13;
  int *v14;
  int *v15;
  int v16;
  const void *v17;
  uint64_t v18;
  void *v19;
  unsigned int *v20;
  signed int v21;
  unsigned int *v22;
  const void *v23;
  unsigned int *v24;
  int v25;
  unsigned int *v26;
  unsigned int *v27;
  int v28;
  const void *v29;
  unsigned __int16 v30;
  unsigned __int16 *bytes_ptr;

  int64 = xpc_dictionary_get_int64(*a2, "txid");
  v8 = *(_QWORD *)(a1 + 152);
  v7 = *(_QWORD *)(a1 + 160);
  if (v8 != v7)
  {
    while (int64 != *(_DWORD *)v8)
    {
      v8 += 24;
      if (v8 == v7)
        return;
    }
  }
  if (v8 != v7)
  {
    if (MEMORY[0x1A1AEB9A8](a3) == MEMORY[0x1E0C812E8])
    {
      length = xpc_data_get_length(a3);
      if (!(length >> 16))
      {
        v30 = length;
        bytes_ptr = (unsigned __int16 *)xpc_data_get_bytes_ptr(a3);
        v11 = (char *)operator new(0x58uLL);
        QMIServiceMsg::QMIServiceMsg((QMIServiceMsg *)v11, bytes_ptr, v30, 1);
LABEL_12:
        qmi::Client::State::postResponseToClient_sync(a1, (uint64_t)v11, (const void **)(v8 + 16));
        v14 = (int *)(v8 + 24);
        v15 = *(int **)(a1 + 160);
        if ((int *)(v8 + 24) == v15)
          goto LABEL_33;
        while (1)
        {
          v16 = *v14;
          v18 = *((_QWORD *)v14 + 1);
          v17 = (const void *)*((_QWORD *)v14 + 2);
          if (v17)
          {
            v19 = _Block_copy(v17);
            if (v18)
              goto LABEL_19;
          }
          else
          {
            v19 = 0;
            if (v18)
            {
LABEL_19:
              v20 = (unsigned int *)(v18 + 8);
              do
                v21 = __ldxr(v20);
              while (__stxr(v21 + 1, v20));
              if (v21 < 0)
                _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x33, "prevRefCount", ">=", "0", (const char *)v21, 0);
            }
          }
          *(_DWORD *)v8 = v16;
          v22 = *(unsigned int **)(v8 + 8);
          v23 = *(const void **)(v8 + 16);
          *(_QWORD *)(v8 + 8) = v18;
          *(_QWORD *)(v8 + 16) = v19;
          if (v22)
          {
            v24 = v22 + 2;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (v25 <= 0)
            {
              _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x3F, "prevRefCount", ">", "0", (const char *)v25, 0);
            }
            else if (v25 == 1)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
            }
          }
          if (v23)
            _Block_release(v23);
          v14 += 6;
          v8 += 24;
          if (v14 == v15)
          {
            v14 = *(int **)(a1 + 160);
LABEL_33:
            while (v14 != (int *)v8)
            {
              v26 = (unsigned int *)*((_QWORD *)v14 - 2);
              if (v26)
              {
                v27 = v26 + 2;
                do
                  v28 = __ldaxr(v27);
                while (__stlxr(v28 - 1, v27));
                if (v28 <= 0)
                {
                  _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x3F, "prevRefCount", ">", "0", (const char *)v28, 0);
                }
                else if (v28 == 1)
                {
                  (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
                }
              }
              v29 = (const void *)*((_QWORD *)v14 - 1);
              if (v29)
                _Block_release(v29);
              v14 -= 6;
            }
            *(_QWORD *)(a1 + 160) = v8;
            return;
          }
        }
      }
    }
    else if (MEMORY[0x1A1AEB9A8](a3) == MEMORY[0x1E0C81350])
    {
      v9 = xpc_dictionary_get_int64(*a2, "internal_error");
      v10 = *(_WORD *)(*(_QWORD *)(v8 + 8) + 12);
      v11 = (char *)operator new(0x58uLL);
      *((_DWORD *)v11 + 2) = 0;
      *(_QWORD *)v11 = off_1E4153F70;
      *((_WORD *)v11 + 6) = v10;
      *(_QWORD *)(v11 + 14) = 0;
      *(_QWORD *)(v11 + 30) = 0;
      *(_QWORD *)(v11 + 22) = 0;
      *((_WORD *)v11 + 19) = 0;
      *((_DWORD *)v11 + 10) = 1;
      *((_WORD *)v11 + 22) = v9;
LABEL_11:
      *((_OWORD *)v11 + 3) = 0u;
      *((_OWORD *)v11 + 4) = 0u;
      goto LABEL_12;
    }
    v13 = *(_WORD *)(*(_QWORD *)(v8 + 8) + 12);
    v11 = (char *)operator new(0x58uLL);
    *((_DWORD *)v11 + 2) = 0;
    *(_QWORD *)v11 = off_1E4153F70;
    *((_WORD *)v11 + 6) = v13;
    *(_QWORD *)(v11 + 14) = 0;
    *(_QWORD *)(v11 + 30) = 0;
    *(_QWORD *)(v11 + 22) = 0;
    *((_WORD *)v11 + 19) = 0;
    *((_DWORD *)v11 + 10) = 1;
    *((_WORD *)v11 + 22) = 255;
    goto LABEL_11;
  }
}

void sub_19E9CF4CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E9CF4E8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    _Block_release(v1);
  _Unwind_Resume(exception_object);
}

void qmi::Client::State::handleIndication_sync(uint64_t a1, int a2, xpc_object_t xdata)
{
  size_t length;
  unsigned __int16 v6;
  unsigned __int16 *bytes_ptr;
  unsigned __int16 *v8;
  unsigned int *v9;
  signed int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t *v17;
  int v18;
  const void *v19;
  void *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  char v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  _QWORD block[5];
  std::__shared_weak_count *v31;
  unsigned __int16 *v32;
  void *aBlock;
  char v34;

  length = xpc_data_get_length(xdata);
  if (length >> 16)
    return;
  v6 = length;
  bytes_ptr = (unsigned __int16 *)xpc_data_get_bytes_ptr(xdata);
  v8 = (unsigned __int16 *)operator new(0x58uLL);
  QMIServiceMsg::QMIServiceMsg((QMIServiceMsg *)v8, bytes_ptr, v6, 0);
  v9 = (unsigned int *)(v8 + 4);
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  if (v10 < 0)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x33, "prevRefCount", ">=", "0", (const char *)v10, 0);
    v11 = a1 + 208;
    v12 = *(_QWORD *)(a1 + 208);
    if (!v12)
    {
      do
LABEL_18:
        v18 = __ldaxr(v9);
      while (__stlxr(v18 - 1, v9));
      if (v18 <= 0)
      {
        _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x3F, "prevRefCount", ">", "0", (const char *)v18, 0);
      }
      else if (v18 == 1)
      {
        (*(void (**)(unsigned __int16 *))(*(_QWORD *)v8 + 8))(v8);
      }
      return;
    }
  }
  else
  {
    v11 = a1 + 208;
    v12 = *(_QWORD *)(a1 + 208);
    if (!v12)
      goto LABEL_18;
  }
  v13 = v8[6];
  v14 = v11;
  do
  {
    v15 = *(unsigned __int16 *)(v12 + 32);
    v16 = v15 >= v13;
    if (v15 >= v13)
      v17 = (uint64_t *)v12;
    else
      v17 = (uint64_t *)(v12 + 8);
    if (v16)
      v14 = v12;
    v12 = *v17;
  }
  while (*v17);
  if (v14 == v11 || v13 < *(unsigned __int16 *)(v14 + 32))
    goto LABEL_18;
  v19 = *(const void **)(v14 + 40);
  if (v19)
  {
    v20 = _Block_copy(v19);
    v21 = *(_QWORD *)(a1 + 264);
    v22 = *(std::__shared_weak_count **)(a1 + 272);
    if (!v22)
      goto LABEL_29;
  }
  else
  {
    v20 = 0;
    v21 = *(_QWORD *)(a1 + 264);
    v22 = *(std::__shared_weak_count **)(a1 + 272);
    if (!v22)
      goto LABEL_29;
  }
  p_shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
  do
    v24 = __ldxr(p_shared_weak_owners);
  while (__stxr(v24 + 1, p_shared_weak_owners));
LABEL_29:
  v25 = *(_BYTE *)(a1 + 256);
  v26 = *(NSObject **)(a1 + 136);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZN3qmi6Client5State21handleIndication_syncERKN3xpc4dictEPv_block_invoke;
  block[3] = &__block_descriptor_tmp_16;
  block[4] = v21;
  v31 = v22;
  if (v22)
  {
    v27 = (unint64_t *)&v22->__shared_weak_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v34 = v25;
  v32 = v8;
  if (v20)
  {
    aBlock = _Block_copy(v20);
    dispatch_async(v26, block);
    v29 = aBlock;
    if (!aBlock)
      goto LABEL_37;
    goto LABEL_36;
  }
  aBlock = 0;
  dispatch_async(v26, block);
  v29 = aBlock;
  if (aBlock)
LABEL_36:
    _Block_release(v29);
LABEL_37:
  if (v31)
    std::__shared_weak_count::__release_weak(v31);
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  if (v20)
    _Block_release(v20);
}

void sub_19E9CF7A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN3qmi6Client5State21handleIndication_syncERKN3xpc4dictEPv_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  BOOL v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  int v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 32) != 0;
      if (!*(_BYTE *)(a1 + 64))
        goto LABEL_9;
      goto LABEL_7;
    }
  }
  else
  {
    v3 = 0;
  }
  v4 = 0;
  if (!*(_BYTE *)(a1 + 64))
  {
LABEL_9:
    v6 = *(_QWORD *)(a1 + 56);
    v5 = (_QWORD *)(a1 + 48);
    (*(void (**)(void))(v6 + 16))();
    goto LABEL_10;
  }
LABEL_7:
  if (v4)
    goto LABEL_9;
  v5 = (_QWORD *)(a1 + 48);
LABEL_10:
  v7 = *v5;
  v8 = (unsigned int *)(*v5 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9 <= 0)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x3F, "prevRefCount", ">", "0", (const char *)v9, 0);
  }
  else if (v7 && v9 == 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_19E9CF8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QMIServiceMsg::~QMIServiceMsg(QMIServiceMsg *this)
{
  _QWORD **v2;
  _QWORD **v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  signed int v10;

  *(_QWORD *)this = off_1E4153F70;
  v2 = (_QWORD **)*((_QWORD *)this + 2);
  v3 = (_QWORD **)*((_QWORD *)this + 3);
  while (v2 != v3)
  {
    v4 = *v2;
    if (*v2)
    {
      v5 = (void *)v4[1];
      if (v5)
        operator delete[](v5);
      operator delete(v4);
    }
    ++v2;
  }
  v6 = (void *)*((_QWORD *)this + 7);
  if (v6)
  {
    *((_QWORD *)this + 8) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 2);
  if (v7)
  {
    *((_QWORD *)this + 3) = v7;
    operator delete(v7);
  }
  *(_QWORD *)this = off_1E4155120;
  v8 = (unsigned int *)((char *)this + 8);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 - 1515870811, v8));
  if (v9)
  {
    do
      v10 = __ldxr(v8);
    while (__stxr(v10 - 1515870811, v8));
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x27, "atomicAdd(&fRefCount, (int) 0xa5a5a5a5)", "==", "0", (const char *)v10, 0);
  }
  operator delete(this);
}

{
  _QWORD **v2;
  _QWORD **v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  signed int v10;

  *(_QWORD *)this = off_1E4153F70;
  v2 = (_QWORD **)*((_QWORD *)this + 2);
  v3 = (_QWORD **)*((_QWORD *)this + 3);
  while (v2 != v3)
  {
    v4 = *v2;
    if (*v2)
    {
      v5 = (void *)v4[1];
      if (v5)
        operator delete[](v5);
      operator delete(v4);
    }
    ++v2;
  }
  v6 = (void *)*((_QWORD *)this + 7);
  if (v6)
  {
    *((_QWORD *)this + 8) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 2);
  if (v7)
  {
    *((_QWORD *)this + 3) = v7;
    operator delete(v7);
  }
  *(_QWORD *)this = off_1E4155120;
  v8 = (unsigned int *)((char *)this + 8);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 - 1515870811, v8));
  if (v9)
  {
    do
      v10 = __ldxr(v8);
    while (__stxr(v10 - 1515870811, v8));
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x27, "atomicAdd(&fRefCount, (int) 0xa5a5a5a5)", "==", "0", (const char *)v10, 0);
  }
}

{
  _QWORD **v2;
  _QWORD **v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  signed int v10;

  *(_QWORD *)this = off_1E4153F70;
  v2 = (_QWORD **)*((_QWORD *)this + 2);
  v3 = (_QWORD **)*((_QWORD *)this + 3);
  while (v2 != v3)
  {
    v4 = *v2;
    if (*v2)
    {
      v5 = (void *)v4[1];
      if (v5)
        operator delete[](v5);
      operator delete(v4);
    }
    ++v2;
  }
  v6 = (void *)*((_QWORD *)this + 7);
  if (v6)
  {
    *((_QWORD *)this + 8) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 2);
  if (v7)
  {
    *((_QWORD *)this + 3) = v7;
    operator delete(v7);
  }
  *(_QWORD *)this = off_1E4155120;
  v8 = (unsigned int *)((char *)this + 8);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 - 1515870811, v8));
  if (v9)
  {
    do
      v10 = __ldxr(v8);
    while (__stxr(v10 - 1515870811, v8));
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x27, "atomicAdd(&fRefCount, (int) 0xa5a5a5a5)", "==", "0", (const char *)v10, 0);
  }
}

void qmi::Client::State::send_sync(_QWORD *a1, xpc_object_t *a2, int a3, unsigned int *a4, const void **a5)
{
  xpc_object_t v10;
  xpc_object_t v11;
  void *v12;
  unsigned int *v13;
  signed int v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  unsigned int *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  unsigned int *v27;
  signed int v28;
  char *v29;
  char *v30;
  _QWORD *v31;
  void *v32;
  unsigned int *v33;
  signed int v34;
  char *v35;
  _QWORD *v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  void *v40;
  unsigned int *v41;
  signed int v42;
  _QWORD *v43;
  unsigned int *v44;
  unsigned int *v45;
  int v46;
  const void *v47;
  unsigned int *v48;
  int v49;
  unsigned int *v50;
  char *v51;

  v10 = xpc_int64_create(a3);
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(*a2, "txid", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  if (((*(uint64_t (**)(_QWORD *, xpc_object_t *))(*a1 + 48))(a1, a2) & 1) == 0)
  {
    v19 = *((_WORD *)a4 + 6);
    v20 = (char *)operator new(0x58uLL);
    *((_DWORD *)v20 + 2) = 0;
    *(_QWORD *)v20 = off_1E4153F70;
    *((_WORD *)v20 + 6) = v19;
    *(_QWORD *)(v20 + 14) = 0;
    *(_QWORD *)(v20 + 30) = 0;
    *(_QWORD *)(v20 + 22) = 0;
    *((_WORD *)v20 + 19) = 0;
    *((_DWORD *)v20 + 10) = 1;
    *((_WORD *)v20 + 22) = 5;
    *((_OWORD *)v20 + 3) = 0u;
    *((_OWORD *)v20 + 4) = 0u;
    qmi::Client::State::postResponseToClient_sync((uint64_t)a1, (uint64_t)v20, a5);
    return;
  }
  if (*a5)
  {
    v50 = a4;
    v12 = _Block_copy(*a5);
    v13 = a4 + 2;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    if (v14 < 0)
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x33, "prevRefCount", ">=", "0", (const char *)v14, 0);
    v15 = a1[21];
    v16 = a1[20];
    if (v16 < v15)
    {
      *(_DWORD *)v16 = a3;
      *(_QWORD *)(v16 + 8) = a4;
      if (v12)
      {
        v17 = _Block_copy(v12);
        v18 = *(unsigned int **)(v16 + 8);
        *(_QWORD *)(v16 + 16) = v17;
        if (!v18)
        {
LABEL_28:
          a1[20] = v16 + 24;
LABEL_64:
          v48 = a4 + 2;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (v49 <= 0)
          {
            _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x3F, "prevRefCount", ">", "0", (const char *)v49, 0);
          }
          else if (v49 == 1)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)a4 + 8))(a4);
          }
LABEL_70:
          if (v12)
            _Block_release(v12);
          return;
        }
      }
      else
      {
        *(_QWORD *)(v16 + 16) = 0;
        v18 = a4;
      }
      v27 = v18 + 2;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      if (v28 < 0)
        _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x33, "prevRefCount", ">=", "0", (const char *)v28, 0);
      goto LABEL_28;
    }
    v21 = a1[19];
    v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - v21) >> 3);
    if (v22 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v21) >> 3);
    v24 = 2 * v23;
    if (2 * v23 <= v22 + 1)
      v24 = v22 + 1;
    if (v23 >= 0x555555555555555)
      v25 = 0xAAAAAAAAAAAAAAALL;
    else
      v25 = v24;
    if (v25)
    {
      if (v25 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v26 = (char *)operator new(24 * v25);
    }
    else
    {
      v26 = 0;
    }
    v30 = &v26[24 * v25];
    v29 = &v26[24 * v22];
    *(_DWORD *)v29 = a3;
    v31 = v29 + 16;
    *((_QWORD *)v29 + 1) = a4;
    if (v12)
    {
      v32 = _Block_copy(v12);
      a4 = (unsigned int *)*((_QWORD *)v29 + 1);
      *v31 = v32;
      if (!a4)
        goto LABEL_38;
    }
    else
    {
      *v31 = 0;
    }
    v33 = a4 + 2;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    if (v34 < 0)
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x33, "prevRefCount", ">=", "0", (const char *)v34, 0);
LABEL_38:
    v35 = v29 + 24;
    v37 = (_QWORD *)a1[19];
    v36 = (_QWORD *)a1[20];
    v51 = v29;
    if (v36 == v37)
    {
      a1[19] = v29;
      a1[20] = v35;
      a1[21] = v30;
    }
    else
    {
      do
      {
        v38 = *((_DWORD *)v36 - 6);
        v36 -= 3;
        *((_DWORD *)v29 - 6) = v38;
        v39 = v36[1];
        *((_QWORD *)v29 - 2) = v39;
        v40 = (void *)v36[2];
        if (v40)
        {
          v40 = _Block_copy(v40);
          v39 = *((_QWORD *)v29 - 2);
        }
        *((_QWORD *)v29 - 1) = v40;
        if (v39)
        {
          v41 = (unsigned int *)(v39 + 8);
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
          if (v42 < 0)
            _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x33, "prevRefCount", ">=", "0", (const char *)v42, 0);
        }
        v29 = v51 - 24;
        v51 -= 24;
      }
      while (v36 != v37);
      v36 = (_QWORD *)a1[19];
      v43 = (_QWORD *)a1[20];
      a1[19] = v29;
      a1[20] = v35;
      for (a1[21] = v30; v43 != v36; v43 -= 3)
      {
        v44 = (unsigned int *)*(v43 - 2);
        if (v44)
        {
          v45 = v44 + 2;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (v46 <= 0)
          {
            _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x3F, "prevRefCount", ">", "0", (const char *)v46, 0);
          }
          else if (v46 == 1)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v44 + 8))(v44);
          }
        }
        v47 = (const void *)*(v43 - 1);
        if (v47)
          _Block_release(v47);
      }
    }
    if (v36)
      operator delete(v36);
    a4 = v50;
    a1[20] = v35;
    if (!v50)
      goto LABEL_70;
    goto LABEL_64;
  }
}

void sub_19E9CFF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  const void **v12;

  if (*v12)
    _Block_release(*v12);
  std::__split_buffer<qmi::Client::State::Transaction>::~__split_buffer((uint64_t)&a12);
  qmi::Client::State::Transaction::~Transaction((qmi::Client::State::Transaction *)&a9);
  _Unwind_Resume(a1);
}

BOOL qmi::Client::LocalState::sendOrQueue_sync(uint64_t a1, void **a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  int v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v11;
  NSObject *v12;
  _BOOL8 v13;
  _QWORD *v14;
  char *v15;
  size_t v16;
  void *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  void **v23;
  void *v24;
  NSObject *v25;
  _QWORD *v26;
  char *v27;
  size_t v28;
  void *v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  uint64_t v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  xpc_object_t object;
  uint64_t v42;
  std::__shared_weak_count *v43;
  void *__dst[3];
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint8_t buf[4];
  _QWORD *v48;
  __int16 v49;
  void **v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v45 = 0;
  v46 = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 360);
  if (v4)
  {
    v46 = std::__shared_weak_count::lock(v4);
    if (v46)
    {
      v5 = *(_QWORD *)(a1 + 352);
      v45 = v5;
      if (v5)
      {
        v6 = *(unsigned __int8 *)(v5 + 112);
        v42 = 0;
        v43 = 0;
        v7 = *(std::__shared_weak_count **)(a1 + 328);
        if (v7)
        {
          v8 = std::__shared_weak_count::lock(v7);
          v43 = v8;
          if (v8)
          {
            v9 = *(_QWORD *)(a1 + 320);
            v42 = v9;
            if (v6 && v9 != 0)
            {
              v11 = *a2;
              object = v11;
              if (v11)
                xpc_retain(v11);
              else
                object = xpc_null_create();
              v34 = *(_QWORD *)(v9 + 24);
              if (!v34)
                std::__throw_bad_function_call[abi:ne180100]();
              (*(void (**)(uint64_t, xpc_object_t *))(*(_QWORD *)v34 + 48))(v34, &object);
              xpc_release(object);
              object = 0;
              v13 = 1;
LABEL_59:
              p_shared_owners = (unint64_t *)&v8->__shared_owners_;
              do
                v36 = __ldaxr(p_shared_owners);
              while (__stlxr(v36 - 1, p_shared_owners));
              if (!v36)
              {
                ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
                std::__shared_weak_count::__release_weak(v8);
              }
              goto LABEL_63;
            }
          }
        }
        else
        {
          v8 = 0;
        }
        v22 = *(_QWORD *)(a1 + 368);
        v13 = v22 != 0;
        if (v22)
        {
          v23 = *(void ***)(v22 + 16);
          if ((unint64_t)v23 >= *(_QWORD *)(v22 + 24))
          {
            *(_QWORD *)(v22 + 16) = std::vector<xpc::dict>::__emplace_back_slow_path<xpc::dict const&>((xpc_object_t **)(v22 + 8), *a2);
            if (!v8)
              goto LABEL_63;
          }
          else
          {
            v24 = *a2;
            *v23 = *a2;
            if (v24)
            {
              xpc_retain(v24);
              *(_QWORD *)(v22 + 16) = v23 + 1;
              if (!v8)
                goto LABEL_63;
            }
            else
            {
              *v23 = xpc_null_create();
              *(_QWORD *)(v22 + 16) = v23 + 1;
              if (!v8)
                goto LABEL_63;
            }
          }
          goto LABEL_59;
        }
        v25 = *(NSObject **)(a1 + 40);
        if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
LABEL_54:
          if (!v8)
            goto LABEL_63;
          goto LABEL_59;
        }
        v26 = (_QWORD *)(a1 + 56);
        if (*(char *)(a1 + 79) < 0)
          v26 = (_QWORD *)*v26;
        v27 = (char *)MEMORY[0x1A1AEB90C](*a2);
        memset(__dst, 170, sizeof(__dst));
        v28 = strlen(v27);
        if (v28 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v29 = (void *)v28;
        if (v28 >= 0x17)
        {
          v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v28 | 7) != 0x17)
            v31 = v28 | 7;
          v32 = v31 + 1;
          v30 = (void **)operator new(v31 + 1);
          __dst[1] = v29;
          __dst[2] = (void *)(v32 | 0x8000000000000000);
          __dst[0] = v30;
        }
        else
        {
          HIBYTE(__dst[2]) = v28;
          v30 = __dst;
          if (!v28)
            goto LABEL_49;
        }
        memcpy(v30, v27, (size_t)v29);
LABEL_49:
        *((_BYTE *)v29 + (_QWORD)v30) = 0;
        free(v27);
        v33 = __dst;
        if (SHIBYTE(__dst[2]) < 0)
          v33 = (void **)__dst[0];
        *(_DWORD *)buf = 136315394;
        v48 = v26;
        v49 = 2080;
        v50 = v33;
        _os_log_impl(&dword_19E9C8000, v25, OS_LOG_TYPE_DEFAULT, "#E [%s] ****** Client message DROPPED because local connect message not yet sent. Message: %s", buf, 0x16u);
        if (SHIBYTE(__dst[2]) < 0)
          operator delete(__dst[0]);
        v8 = v43;
        goto LABEL_54;
      }
    }
  }
  v12 = *(NSObject **)(a1 + 40);
  v13 = 0;
  if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    goto LABEL_63;
  v14 = (_QWORD *)(a1 + 56);
  if (*(char *)(a1 + 79) < 0)
    v14 = (_QWORD *)*v14;
  v15 = (char *)MEMORY[0x1A1AEB90C](*a2);
  memset(__dst, 170, sizeof(__dst));
  v16 = strlen(v15);
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v17 = (void *)v16;
  if (v16 >= 0x17)
  {
    v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v19 = v16 | 7;
    v20 = v19 + 1;
    v18 = (void **)operator new(v19 + 1);
    __dst[1] = v17;
    __dst[2] = (void *)(v20 | 0x8000000000000000);
    __dst[0] = v18;
  }
  else
  {
    HIBYTE(__dst[2]) = v16;
    v18 = __dst;
    if (!v16)
      goto LABEL_23;
  }
  memcpy(v18, v15, (size_t)v17);
LABEL_23:
  *((_BYTE *)v17 + (_QWORD)v18) = 0;
  free(v15);
  v21 = __dst;
  if (SHIBYTE(__dst[2]) < 0)
    v21 = (void **)__dst[0];
  *(_DWORD *)buf = 136315394;
  v48 = v14;
  v49 = 2080;
  v50 = v21;
  _os_log_impl(&dword_19E9C8000, v12, OS_LOG_TYPE_DEFAULT, "#E [%s] ****** Client message DROPPED (not queued) because of invalid local connection. Message: %s", buf, 0x16u);
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
  v13 = 0;
LABEL_63:
  v37 = v46;
  if (v46)
  {
    v38 = (unint64_t *)&v46->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  return v13;
}

void sub_19E9D0478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void qmi::ClientProxy::State::handleMessage_sync(uint64_t a1, void **a2)
{
  void *v3;
  NSObject *v4;
  _QWORD v5[6];
  _QWORD v6[5];
  xpc_object_t object;

  v6[0] = 0;
  v6[1] = v6;
  v6[2] = 0x3002000000;
  v6[3] = __Block_byref_object_copy_;
  v6[4] = __Block_byref_object_dispose_;
  v3 = *a2;
  object = v3;
  if (v3)
    xpc_retain(v3);
  else
    object = xpc_null_create();
  v4 = *(NSObject **)(a1 + 24);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 1107296256;
  v5[2] = ___ZN3qmi11ClientProxy5State18handleMessage_syncERKN3xpc4dictE_block_invoke;
  v5[3] = &__block_descriptor_tmp_12;
  v5[4] = v6;
  v5[5] = a1;
  dispatch_async(v4, v5);
  _Block_object_dispose(v6, 8);
  xpc_release(object);
}

void qmi::Client::State::postResponseToClient_sync(uint64_t a1, uint64_t a2, const void **a3)
{
  unsigned int *v6;
  signed int v7;
  NSObject *v8;
  const void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char v15;
  _QWORD *v16;

  v6 = (unsigned int *)(a2 + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  if ((v7 & 0x80000000) == 0)
  {
    v8 = *(NSObject **)(a1 + 136);
    v9 = *a3;
    if (*a3)
      goto LABEL_5;
LABEL_8:
    v10 = 0;
    v11 = *(_QWORD *)(a1 + 264);
    v12 = *(_QWORD *)(a1 + 272);
    if (!v12)
      goto LABEL_11;
    goto LABEL_9;
  }
  _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x33, "prevRefCount", ">=", "0", (const char *)v7, 0);
  v8 = *(NSObject **)(a1 + 136);
  v9 = *a3;
  if (!*a3)
    goto LABEL_8;
LABEL_5:
  v10 = _Block_copy(v9);
  v11 = *(_QWORD *)(a1 + 264);
  v12 = *(_QWORD *)(a1 + 272);
  if (!v12)
    goto LABEL_11;
LABEL_9:
  v13 = (unint64_t *)(v12 + 16);
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
LABEL_11:
  v15 = *(_BYTE *)(a1 + 256);
  v16 = operator new(0x28uLL);
  *v16 = a2;
  v16[1] = v10;
  v16[2] = v11;
  v16[3] = v12;
  *((_BYTE *)v16 + 32) = v15;
  dispatch_async_f(v8, v16, (dispatch_function_t)dispatch::async<qmi::Client::State::postResponseToClient_sync(QMIServiceMsg const*,dispatch::block<void({block_pointer})(QMIServiceMsg const&)> const&)::$_0>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::postResponseToClient_sync(QMIServiceMsg const*,dispatch::block<void({block_pointer})(QMIServiceMsg const&)> const&)::$_0,std::default_delete<qmi::Client::State::postResponseToClient_sync(QMIServiceMsg const*,dispatch::block<void({block_pointer})(QMIServiceMsg const&)> const&)::$_0>>)::{lambda(void *)#1}::__invoke);
}

uint64_t qmi::Client::XPCState::sendOrQueue_sync(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v4;
  xpc_object_t *v5;
  xpc_object_t v6;
  NSObject *v7;
  _BOOL4 v8;
  uint64_t result;
  _QWORD *v10;
  xpc_object_t *v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1A1AEB9A8](*(_QWORD *)(a1 + 128)) == MEMORY[0x1E0C812E0])
  {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 128), *a2);
    return 1;
  }
  v4 = *(_QWORD *)(a1 + 288);
  if (v4)
  {
    v5 = *(xpc_object_t **)(v4 + 16);
    if ((unint64_t)v5 >= *(_QWORD *)(v4 + 24))
    {
      v11 = std::vector<xpc::dict>::__emplace_back_slow_path<xpc::dict const&>((xpc_object_t **)(v4 + 8), *a2);
    }
    else
    {
      v6 = *a2;
      *v5 = *a2;
      if (v6)
        xpc_retain(v6);
      else
        *v5 = xpc_null_create();
      v11 = v5 + 1;
    }
    *(_QWORD *)(v4 + 16) = v11;
    return 1;
  }
  v7 = *(NSObject **)(a1 + 40);
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v8)
  {
    v10 = (_QWORD *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0)
      v10 = (_QWORD *)*v10;
    v12 = 136315138;
    v13 = v10;
    _os_log_impl(&dword_19E9C8000, v7, OS_LOG_TYPE_DEFAULT, "#E [%s] ****** Client message DROPPED because no connection", (uint8_t *)&v12, 0xCu);
    return 0;
  }
  return result;
}

void sub_19E9D07C4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void qmi::ClientProxy::State::handleMessage(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t value;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  NSObject *v10;
  _BOOL4 v11;
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  uint64_t v18;
  unsigned int v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  uint64_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  uint64_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  uint64_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  uint64_t v35;
  unsigned int v36;
  xpc_object_t v37;
  xpc_object_t v38;
  xpc_object_t v39;
  uint64_t v40;
  int v41;
  NSObject *v42;
  _BOOL4 v43;
  _QWORD *v44;
  int v45;
  _QWORD *v46;
  xpc_object_t v47;
  xpc_object_t v48;
  xpc_object_t v49;
  uint64_t v50;
  uint64_t v51;
  xpc_object_t xint;
  uint8_t buf[4];
  _QWORD *v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  xint = xpc_null_create();
  value = xpc_dictionary_get_value(*a2, "sim");
  v5 = value;
  if (value)
    xpc_retain(value);
  else
    v5 = xpc_null_create();
  v6 = xint;
  xint = v5;
  v7 = MEMORY[0x1A1AEB9A8](v5);
  xpc_release(v6);
  v8 = MEMORY[0x1E0C81350];
  if (v7 != MEMORY[0x1E0C81350])
  {
    v9 = xpc::dyn_cast_or_default();
    v10 = *(NSObject **)(a1 + 40);
    v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (v9 - 1 > 1)
    {
      if (v11)
      {
        v14 = (_QWORD *)(a1 + 48);
        if (*(char *)(a1 + 71) < 0)
          v14 = (_QWORD *)*v14;
        *(_DWORD *)buf = 136315394;
        v54 = v14;
        v55 = 1024;
        v56 = v9;
        _os_log_impl(&dword_19E9C8000, v10, OS_LOG_TYPE_DEFAULT, "#E [%s]: SimSlot not changed due to illegal value of %d", buf, 0x12u);
      }
    }
    else
    {
      if (v11)
      {
        v12 = (_QWORD *)(a1 + 48);
        if (*(char *)(a1 + 71) < 0)
          v12 = (_QWORD *)*v12;
        v13 = *(unsigned __int8 *)(a1 + 184);
        *(_DWORD *)buf = 136315650;
        v54 = v12;
        v55 = 1024;
        v56 = v13;
        v57 = 1024;
        v58 = v9;
        _os_log_impl(&dword_19E9C8000, v10, OS_LOG_TYPE_DEFAULT, "#I [%s]: Changing sim slot from %d to %d", buf, 0x18u);
      }
      *(_BYTE *)(a1 + 184) = v9;
    }
  }
  v15 = xpc_dictionary_get_value(*a2, "send_qmi_message");
  v16 = v15;
  if (v15)
    xpc_retain(v15);
  else
    v16 = xpc_null_create();
  v17 = xint;
  xint = v16;
  v18 = MEMORY[0x1A1AEB9A8](v16);
  xpc_release(v17);
  if (v18 == v8)
  {
    v20 = xpc_dictionary_get_value(*a2, "low_power");
    v21 = v20;
    if (v20)
      xpc_retain(v20);
    else
      v21 = xpc_null_create();
    v22 = xint;
    xint = v21;
    v23 = MEMORY[0x1A1AEB9A8](v21);
    xpc_release(v22);
    if (v23 != v8)
      *(_BYTE *)(a1 + 81) = xpc::dyn_cast_or_default();
    v24 = xpc_dictionary_get_value(*a2, "low_power_reply");
    v25 = v24;
    if (v24)
      xpc_retain(v24);
    else
      v25 = xpc_null_create();
    v26 = xint;
    xint = v25;
    v27 = MEMORY[0x1A1AEB9A8](v25);
    xpc_release(v26);
    if (v27 != v8 && *(_DWORD *)(a1 + 76) == 4)
    {
      *(_DWORD *)(a1 + 76) = 5;
      qmi::ClientProxy::State::checkIfLowPower_sync((qmi::ClientProxy::State *)a1);
    }
    v28 = xpc_dictionary_get_value(*a2, "exit_low_power");
    v29 = v28;
    if (v28)
      xpc_retain(v28);
    else
      v29 = xpc_null_create();
    v30 = xint;
    xint = v29;
    v31 = MEMORY[0x1A1AEB9A8](v29);
    xpc_release(v30);
    if (v31 != v8)
      *(_BYTE *)(a1 + 80) = xpc::dyn_cast_or_default();
    v32 = xpc_dictionary_get_value(*a2, "status");
    v33 = v32;
    if (v32)
      xpc_retain(v32);
    else
      v33 = xpc_null_create();
    v34 = xint;
    xint = v33;
    v35 = MEMORY[0x1A1AEB9A8](v33);
    xpc_release(v34);
    if (v35 != v8)
    {
      v36 = xpc_int64_get_value(xint);
      qmi::ClientProxy::State::handleStatus_sync(a1, v36);
    }
    v37 = xpc_dictionary_get_value(*a2, "send_window");
    v38 = v37;
    if (v37)
      xpc_retain(v37);
    else
      v38 = xpc_null_create();
    v39 = xint;
    xint = v38;
    v40 = MEMORY[0x1A1AEB9A8](v38);
    xpc_release(v39);
    if (v40 != v8)
    {
      v41 = xpc::dyn_cast_or_default();
      v42 = *(NSObject **)(a1 + 40);
      v43 = os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
      if ((v41 - 1) > 4)
      {
        if (v43)
        {
          v46 = (_QWORD *)(a1 + 48);
          if (*(char *)(a1 + 71) < 0)
            v46 = (_QWORD *)*v46;
          *(_DWORD *)buf = 136315394;
          v54 = v46;
          v55 = 1024;
          v56 = v41;
          _os_log_impl(&dword_19E9C8000, v42, OS_LOG_TYPE_DEFAULT, "#E [%s]: Send window not changed due to illegal value of %d", buf, 0x12u);
        }
      }
      else
      {
        if (v43)
        {
          v44 = (_QWORD *)(a1 + 48);
          if (*(char *)(a1 + 71) < 0)
            v44 = (_QWORD *)*v44;
          v45 = *(_DWORD *)(a1 + 84);
          *(_DWORD *)buf = 136315650;
          v54 = v44;
          v55 = 1024;
          v56 = v45;
          v57 = 1024;
          v58 = v41;
          _os_log_impl(&dword_19E9C8000, v42, OS_LOG_TYPE_DEFAULT, "#I [%s]: Changing send window from %d to %d", buf, 0x18u);
        }
        *(_DWORD *)(a1 + 84) = v41;
      }
    }
    v47 = xpc_dictionary_get_value(*a2, "remote_log_bytes");
    v48 = v47;
    if (v47)
      xpc_retain(v47);
    else
      v48 = xpc_null_create();
    v49 = xint;
    xint = v48;
    v50 = MEMORY[0x1A1AEB9A8](v48);
    xpc_release(v49);
    if (v50 != v8)
    {
      v51 = xpc::dyn_cast_or_default();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, v51);
    }
    qmi::ClientProxy::State::handleIndWakeChange_sync(a1, a2);
  }
  else
  {
    v19 = *(_DWORD *)(a1 + 76);
    if (v19 <= 7)
    {
      if (((1 << v19) & 0xF1) != 0)
        qmi::ClientProxy::State::handleSend_sync(a1, a2, &xint);
      else
        qmi::ClientProxy::State::handleSendNotReady_sync(a1, a2);
    }
  }
  xpc_release(xint);
}

void sub_19E9D0D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void qmi::ClientProxy::State::handleSend_sync(uint64_t a1, xpc_object_t *a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  xpc_object_t value;
  __int16 v9;
  xpc_object_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  int v25;
  int v26;
  int v27;
  _BYTE object[18];
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  xpc_data_get_bytes_ptr(*a3);
  xpc_data_get_length(*a3);
  qmi::createRequest();
  v7 = *(_QWORD *)object;
  v6 = *(std::__shared_weak_count **)&object[8];
  value = xpc_dictionary_get_value(*a2, "txid");
  *(_QWORD *)object = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)object = xpc_null_create();
  v9 = xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)object);
  *(_WORD *)(v7 + 26) = v9;
  v10 = xpc_dictionary_get_value(*a2, "send_timeout_ms");
  *(_QWORD *)object = v10;
  if (v10)
    xpc_retain(v10);
  else
    *(_QWORD *)object = xpc_null_create();
  v11 = xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)object);
  v12 = *(_QWORD *)(a1 + 152);
  v13 = *(_QWORD *)(a1 + 144);
  if (v12 == v13)
    v14 = 0;
  else
    v14 = 16 * (v12 - v13) - 1;
  v15 = *(_QWORD *)(a1 + 176);
  v16 = v15 + *(_QWORD *)(a1 + 168);
  if (v14 == v16)
  {
    std::deque<qmi::ClientProxy::State::Transaction>::__add_back_capacity((_QWORD *)(a1 + 136));
    v13 = *(_QWORD *)(a1 + 144);
    v15 = *(_QWORD *)(a1 + 176);
    v16 = v15 + *(_QWORD *)(a1 + 168);
  }
  v17 = *(_QWORD *)(v13 + ((v16 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v16 & 0x7F);
  *(_DWORD *)v17 = v11;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = v7;
  *(_QWORD *)(v17 + 24) = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    v15 = *(_QWORD *)(a1 + 176);
  }
  *(_QWORD *)(a1 + 176) = v15 + 1;
  qmi::ClientProxy::State::sendIfPossible_sync((qmi::ClientProxy::State *)a1);
  v20 = *(_QWORD *)(a1 + 176);
  if (!v20 || (v21 = *(NSObject **)(a1 + 40), !os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)))
  {
    if (!v6)
      return;
    goto LABEL_19;
  }
  v24 = (_QWORD *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    v24 = (_QWORD *)*v24;
  v25 = *(unsigned __int8 *)(a1 + 72);
  v26 = *(unsigned __int16 *)(v7 + 26);
  v27 = *(unsigned __int16 *)(v7 + 24);
  *(_DWORD *)object = 136316162;
  *(_QWORD *)&object[4] = v24;
  *(_WORD *)&object[12] = 1024;
  *(_DWORD *)&object[14] = v25;
  v29 = 1024;
  v30 = v26;
  v31 = 1024;
  v32 = v27;
  v33 = 2048;
  v34 = v20;
  _os_log_debug_impl(&dword_19E9C8000, v21, OS_LOG_TYPE_DEBUG, "#D [%s]: Message pended for svc=0x%x (txid=%u, msgId=0x%04x); pending=%zu",
    object,
    0x28u);
  if (v6)
  {
LABEL_19:
    v22 = (unint64_t *)&v6->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_19E9D112C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::deque<qmi::ClientProxy::State::Transaction>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void *v29;
  char *v30;
  char *v31;
  char *v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  BOOL v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  _OWORD *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  __int128 *v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v2 = a1[4];
  v3 = v2 >= 0x80;
  v4 = v2 - 128;
  if (v3)
  {
    a1[4] = v4;
    v6 = (_QWORD *)a1[1];
    v5 = (char *)a1[2];
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    a1[1] = v6 + 1;
    if (v5 != (char *)a1[3])
    {
LABEL_92:
      *(_QWORD *)v5 = v8;
      goto LABEL_93;
    }
    v9 = (char *)*a1;
    if ((unint64_t)v7 > *a1)
    {
      v10 = (uint64_t)&v7[-*a1] >> 3;
      if (v10 >= -1)
        v11 = v10 + 1;
      else
        v11 = v10 + 2;
      v12 = v11 >> 1;
      v13 = -v12;
      v14 = &v7[-8 * v12];
      v15 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v12], v7, v5 - v7);
        v7 = (char *)a1[1];
      }
      v5 = &v14[v15];
      v16 = &v7[8 * v13];
      goto LABEL_11;
    }
    v35 = (v5 - v9) >> 2;
    if (v5 == v9)
      v35 = 1;
    if (v35 >> 61)
      goto LABEL_109;
    v36 = v35 >> 2;
    v37 = 8 * v35;
    v38 = (char *)operator new(8 * v35);
    v39 = &v38[8 * v36];
    v41 = v5 - v7;
    v40 = v5 == v7;
    v5 = v39;
    if (!v40)
    {
      v5 = &v39[v41 & 0xFFFFFFFFFFFFFFF8];
      v42 = v41 - 8;
      if ((unint64_t)(v41 - 8) >= 0x38)
      {
        v92 = &v38[8 * v36];
        v43 = v92;
        if ((unint64_t)(v92 - v7) >= 0x20)
        {
          v93 = (v42 >> 3) + 1;
          v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          v43 = &v39[v94];
          v7 += v94;
          v95 = (__int128 *)(v6 + 3);
          v96 = v92 + 16;
          v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            *v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_89;
        }
      }
      else
      {
        v43 = &v38[8 * v36];
      }
      do
      {
        v99 = *(_QWORD *)v7;
        v7 += 8;
        *(_QWORD *)v43 = v99;
        v43 += 8;
      }
      while (v43 != v5);
    }
LABEL_89:
    *a1 = v38;
    a1[1] = v39;
    a1[2] = v5;
    a1[3] = &v38[v37];
    if (!v9)
      goto LABEL_92;
    v100 = v9;
LABEL_91:
    operator delete(v100);
    v5 = (char *)a1[2];
    goto LABEL_92;
  }
  v18 = (char *)a1[2];
  v17 = (char *)a1[3];
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  v21 = v18 - v19;
  v22 = (v18 - v19) >> 3;
  v23 = (uint64_t)&v17[-*a1];
  if (v22 < (unint64_t)(v23 >> 3))
  {
    v24 = operator new(0x1000uLL);
    v25 = v24;
    if (v17 != v18)
    {
      *(_QWORD *)v18 = v24;
LABEL_93:
      a1[2] += 8;
      return;
    }
    if (v19 == v20)
    {
      v69 = (v17 - v19) >> 2;
      if (v18 == v19)
        v69 = 1;
      if (v69 >> 61)
        goto LABEL_109;
      v70 = (v69 + 3) >> 2;
      v71 = 8 * v69;
      v72 = (char *)operator new(8 * v69);
      v44 = &v72[8 * v70];
      v73 = v44;
      if (v18 != v19)
      {
        v73 = &v44[8 * v22];
        v74 = &v72[8 * v70];
        v75 = v19;
        if ((unint64_t)(v21 - 8) < 0x38)
          goto LABEL_113;
        v76 = &v72[8 * v70];
        v74 = v76;
        v75 = v19;
        if ((unint64_t)(v76 - v19) < 0x20)
          goto LABEL_113;
        v77 = ((unint64_t)(v21 - 8) >> 3) + 1;
        v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        v74 = &v44[v78];
        v75 = &v19[v78];
        v79 = (__int128 *)(v19 + 16);
        v80 = v76 + 16;
        v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v82 = *v79;
          *(v80 - 1) = *(v79 - 1);
          *v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_113:
          do
          {
            v83 = *(_QWORD *)v75;
            v75 += 8;
            *(_QWORD *)v74 = v83;
            v74 += 8;
          }
          while (v74 != v73);
        }
      }
      *a1 = v72;
      a1[1] = v44;
      a1[2] = v73;
      a1[3] = &v72[v71];
      if (v19)
      {
        operator delete(v19);
        v44 = (char *)a1[1];
      }
    }
    else
    {
      v44 = v19;
    }
    *((_QWORD *)v44 - 1) = v25;
    v84 = (char *)a1[1];
    v5 = (char *)a1[2];
    a1[1] = v84 - 8;
    v8 = *((_QWORD *)v84 - 1);
    a1[1] = v84;
    if (v5 != (char *)a1[3])
      goto LABEL_92;
    v85 = (char *)*a1;
    if ((unint64_t)v84 > *a1)
    {
      v86 = (uint64_t)&v84[-*a1] >> 3;
      if (v86 >= -1)
        v87 = v86 + 1;
      else
        v87 = v86 + 2;
      v88 = v87 >> 1;
      v89 = -v88;
      v90 = &v84[-8 * v88];
      v91 = v5 - v84;
      if (v5 != v84)
      {
        memmove(&v84[-8 * v88], v84, v5 - v84);
        v84 = (char *)a1[1];
      }
      v5 = &v90[v91];
      v16 = &v84[8 * v89];
LABEL_11:
      a1[1] = v16;
      a1[2] = v5;
      goto LABEL_92;
    }
    v101 = (v5 - v85) >> 2;
    if (v5 == v85)
      v101 = 1;
    if (!(v101 >> 61))
    {
      v102 = v101 >> 2;
      v103 = 8 * v101;
      v104 = (char *)operator new(8 * v101);
      v105 = &v104[8 * v102];
      v106 = v5 - v84;
      v40 = v5 == v84;
      v5 = v105;
      if (!v40)
      {
        v5 = &v105[v106 & 0xFFFFFFFFFFFFFFF8];
        v107 = v106 - 8;
        if ((unint64_t)(v106 - 8) >= 0x38)
        {
          v109 = &v104[8 * v102];
          v108 = v109;
          if ((unint64_t)(v109 - v84) >= 0x20)
          {
            v110 = (v107 >> 3) + 1;
            v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
            v108 = &v105[v111];
            v112 = &v84[v111];
            v113 = (__int128 *)(v84 + 16);
            v114 = v109 + 16;
            v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v116 = *v113;
              *(v114 - 1) = *(v113 - 1);
              *v114 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            v84 = v112;
            if (v110 == (v110 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_106;
          }
        }
        else
        {
          v108 = &v104[8 * v102];
        }
        do
        {
          v117 = *(_QWORD *)v84;
          v84 += 8;
          *(_QWORD *)v108 = v117;
          v108 += 8;
        }
        while (v108 != v5);
      }
LABEL_106:
      *a1 = v104;
      a1[1] = v105;
      a1[2] = v5;
      a1[3] = &v104[v103];
      if (!v85)
        goto LABEL_92;
      v100 = v85;
      goto LABEL_91;
    }
LABEL_109:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  v26 = v23 >> 2;
  if (v17 == v20)
    v27 = 1;
  else
    v27 = v26;
  if (v27 >> 61)
    goto LABEL_109;
  v28 = (char *)operator new(8 * v27);
  v29 = operator new(0x1000uLL);
  v30 = &v28[8 * v22];
  v31 = &v28[8 * v27];
  if (v22 == v27)
  {
    v33 = v29;
    if (v21 < 1)
    {
      if (v18 == v19)
        v45 = 1;
      else
        v45 = v21 >> 2;
      if (v45 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v30 = (char *)operator new(8 * v45);
      v31 = &v30[8 * v45];
      operator delete(v28);
      v46 = (char *)a1[1];
      v18 = (char *)a1[2];
      v28 = v30;
      *(_QWORD *)v30 = v33;
      v32 = v30 + 8;
      if (v18 == v46)
        goto LABEL_40;
    }
    else
    {
      v34 = v22 + 2;
      if (v22 >= -1)
        v34 = v22 + 1;
      v30 -= 8 * (v34 >> 1);
      *(_QWORD *)v30 = v29;
      v32 = v30 + 8;
      if (v18 == v19)
        goto LABEL_40;
    }
    goto LABEL_44;
  }
  *(_QWORD *)v30 = v29;
  v32 = v30 + 8;
  if (v18 != v19)
  {
    do
    {
LABEL_44:
      if (v30 == v28)
      {
        if (v32 >= v31)
        {
          if (v31 == v28)
            v53 = 1;
          else
            v53 = (v31 - v28) >> 2;
          if (v53 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v54 = (char *)operator new(8 * v53);
          v55 = v54;
          v56 = (v53 + 3) >> 2;
          v30 = &v54[8 * v56];
          v57 = v32 - v28;
          v40 = v32 == v28;
          v32 = v30;
          if (!v40)
          {
            v32 = &v30[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = v57 - 8;
            v59 = &v54[8 * v56];
            v60 = v28;
            if (v58 < 0x38)
              goto LABEL_114;
            v61 = 8 * v56;
            v59 = &v54[8 * v56];
            v60 = v28;
            if ((unint64_t)(v59 - v28) < 0x20)
              goto LABEL_114;
            v62 = (v58 >> 3) + 1;
            v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
            v59 = &v30[v63];
            v60 = &v28[v63];
            v64 = (__int128 *)(v28 + 16);
            v65 = &v54[v61 + 16];
            v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v67 = *v64;
              *((_OWORD *)v65 - 1) = *(v64 - 1);
              *(_OWORD *)v65 = v67;
              v64 += 2;
              v65 += 32;
              v66 -= 4;
            }
            while (v66);
            if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_114:
              do
              {
                v68 = *(_QWORD *)v60;
                v60 += 8;
                *(_QWORD *)v59 = v68;
                v59 += 8;
              }
              while (v59 != v32);
            }
          }
          v31 = &v54[8 * v53];
          operator delete(v28);
          v28 = v55;
        }
        else
        {
          v49 = (v31 - v32) >> 3;
          if (v49 >= -1)
            v50 = v49 + 1;
          else
            v50 = v49 + 2;
          v51 = v50 >> 1;
          v30 = &v28[8 * (v50 >> 1)];
          v52 = v28;
          if (v32 != v28)
          {
            memmove(v30, v28, v32 - v28);
            v52 = v32;
          }
          v32 = (char *)v52 + 8 * v51;
        }
      }
      v48 = *((_QWORD *)v18 - 1);
      v18 -= 8;
      *((_QWORD *)v30 - 1) = v48;
      v30 -= 8;
    }
    while (v18 != (char *)a1[1]);
  }
LABEL_40:
  v47 = (char *)*a1;
  *a1 = v28;
  a1[1] = v30;
  a1[2] = v32;
  a1[3] = v31;
  if (v47)
    operator delete(v47);
}

void sub_19E9D1800(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *qmi::ClientRouter::get(uint64_t a1, signed int a2)
{
  uint64_t *v4;
  uint64_t *v5;
  signed int v6;
  NSObject *v7;
  const char *v8;
  signed int v9;
  int v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)(*(_QWORD *)a1 + 24);
  if (v4)
  {
    v5 = *(uint64_t **)(*(_QWORD *)a1 + 24);
    do
    {
      v6 = *((_DWORD *)v5 + 8);
      if (v6 <= a2)
      {
        if (v6 >= a2)
          goto LABEL_9;
        ++v5;
      }
      v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  v7 = *(NSObject **)(*(_QWORD *)a1 + 8);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
  {
LABEL_9:
    if (v4)
      goto LABEL_17;
LABEL_21:
    std::__throw_out_of_range[abi:ne180100]();
  }
  if (a2 > 3)
    v8 = "???";
  else
    v8 = off_1E4153450[a2];
  v11 = 136315138;
  v12 = v8;
  _os_log_fault_impl(&dword_19E9C8000, v7, OS_LOG_TYPE_FAULT, "Could not find subscription %s", (uint8_t *)&v11, 0xCu);
  v4 = *(uint64_t **)(*(_QWORD *)a1 + 24);
  if (!v4)
    goto LABEL_21;
  while (1)
  {
LABEL_17:
    while (1)
    {
      v9 = *((_DWORD *)v4 + 8);
      if (v9 <= a2)
        break;
      v4 = (uint64_t *)*v4;
      if (!v4)
        goto LABEL_21;
    }
    if (v9 >= a2)
      return v4 + 5;
    v4 = (uint64_t *)v4[1];
    if (!v4)
      goto LABEL_21;
  }
}

void _ATCSException::triggerAssertion(_ATCSException *this, const char *a2, const char *a3, const char *a4, const char *a5, const char *a6, const void *a7)
{
  int v12;
  std::__shared_weak_count *v14;
  void (**v15)(std::exception *);
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::exception __b[66];

  v12 = (int)a2;
  __b[65] = *(std::exception *)MEMORY[0x1E0C80C00];
  memset(__b, 170, 0x208uLL);
  _ATCSException::_ATCSException((_ATCSException *)__b, (const char *)this, v12, "Assertion failure %s %s %s, left operand %p right operand %p", a3, a4, a5, a6, a7);
  pthread_mutex_lock(&ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance);
  if (qword_1ED710188)
    goto LABEL_2;
  v15 = (void (**)(std::exception *))operator new(8uLL);
  *v15 = 0;
  v14 = (std::__shared_weak_count *)operator new(0x20uLL);
  v14->__vftable = (std::__shared_weak_count_vtbl *)off_1E4154028;
  v14->__shared_owners_ = 0;
  v14->__shared_weak_owners_ = 0;
  v14[1].__vftable = (std::__shared_weak_count_vtbl *)v15;
  *v15 = (void (*)(std::exception *))DefaultATCSExceptionHandler;
  v16 = (std::__shared_weak_count *)off_1ED710190;
  qword_1ED710188 = (uint64_t)v15;
  off_1ED710190 = v14;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
LABEL_2:
    v15 = (void (**)(std::exception *))qword_1ED710188;
    v14 = (std::__shared_weak_count *)off_1ED710190;
    v23 = (std::__shared_weak_count *)off_1ED710190;
    if (!off_1ED710190)
      goto LABEL_12;
    goto LABEL_10;
  }
  v23 = v14;
LABEL_10:
  v19 = (unint64_t *)&v14->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
LABEL_12:
  pthread_mutex_unlock(&ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance);
  (*v15)(__b);
  if (v23)
  {
    v21 = (unint64_t *)&v23->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  std::exception::~exception(__b);
}

void sub_19E9D1B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, std::exception a17)
{
  void *v17;

  operator delete(v17);
  pthread_mutex_unlock(&ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance);
  std::exception::~exception(&a17);
  _Unwind_Resume(a1);
}

void _ATCSException::triggerAssertion(_ATCSException *this, const char *a2, const char *a3, const char *a4, const char *a5, const char *a6, const char *a7, ...)
{
  int v11;
  std::__shared_weak_count *v13;
  void (**v14)(std::exception *);
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  std::exception __b[66];
  va_list va;

  va_start(va, a7);
  v11 = (int)a2;
  __b[65] = *(std::exception *)MEMORY[0x1E0C80C00];
  memset(__b, 170, 0x208uLL);
  _ATCSException::_ATCSException((_ATCSException *)__b, (const char *)this, v11, "Assertion failure %s %s %s", a3, a4, a5);
  _ATCSException::append((_ATCSException *)__b, a6, va);
  pthread_mutex_lock(&ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance);
  if (qword_1ED710188)
    goto LABEL_2;
  v14 = (void (**)(std::exception *))operator new(8uLL);
  *v14 = 0;
  v13 = (std::__shared_weak_count *)operator new(0x20uLL);
  v13->__vftable = (std::__shared_weak_count_vtbl *)off_1E4154028;
  v13->__shared_owners_ = 0;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
  *v14 = (void (*)(std::exception *))DefaultATCSExceptionHandler;
  v15 = (std::__shared_weak_count *)off_1ED710190;
  qword_1ED710188 = (uint64_t)v14;
  off_1ED710190 = v13;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
LABEL_2:
    v14 = (void (**)(std::exception *))qword_1ED710188;
    v13 = (std::__shared_weak_count *)off_1ED710190;
    v22 = (std::__shared_weak_count *)off_1ED710190;
    if (!off_1ED710190)
      goto LABEL_12;
    goto LABEL_10;
  }
  v22 = v13;
LABEL_10:
  v18 = (unint64_t *)&v13->__shared_owners_;
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
LABEL_12:
  pthread_mutex_unlock(&ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance);
  (*v14)(__b);
  if (v22)
  {
    v20 = (unint64_t *)&v22->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  std::exception::~exception(__b);
}

void sub_19E9D1D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::exception a15)
{
  void *v15;

  operator delete(v15);
  pthread_mutex_unlock(&ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance);
  std::exception::~exception(&a15);
  _Unwind_Resume(a1);
}

_QWORD *qmi::ClientProxy::ClientProxy(_QWORD *a1, uint64_t *a2, xpc_object_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t *v8;
  unint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  v5 = *a2;
  v6 = a2[1];
  a1[2] = *a2;
  a1[3] = v6;
  v7 = a1 + 2;
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v5 = *v7;
  }
  qmi::ClientProxy::State::init(v5, a3);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  a1[2] = *a2;
  a1[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v4 = a1[2];
  }
  qmi::ClientProxy::State::init(v4, a3);
  return a1;
}

void sub_19E9D1E10(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v2);
  v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(a1);
}

void qmi::ClientProxy::State::init(uint64_t a1, xpc_object_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  _QWORD *v18;
  NSObject *v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint8_t *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  xpc_object_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  _QWORD *v38;
  NSObject *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  __int128 *v44;
  uint64_t v45;
  __int128 *v46;
  uint64_t v47;
  _QWORD v48[3];
  _QWORD *v49;
  _QWORD v50[3];
  uint8_t *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint8_t buf[4];
  _QWORD *v57;
  uint8_t *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 232))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v3 || (v5 = *(_QWORD *)(a1 + 8), (v6 = std::__shared_weak_count::lock(v3)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v7 = v6;
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
    }
    *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v54 = v12;
    v55 = v12;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)&v54 = &off_1E41524F8;
    *((_QWORD *)&v54 + 1) = v5;
    *(_QWORD *)&v55 = v7;
    *((_QWORD *)&v55 + 1) = &v54;
    *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v52 = v14;
    v53 = v14;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    *(_QWORD *)&v52 = &off_1E4152588;
    *((_QWORD *)&v52 + 1) = v5;
    *(_QWORD *)&v53 = v7;
    *((_QWORD *)&v53 + 1) = &v52;
    v16 = *(_QWORD *)(a1 + 232);
    v17 = (uint8_t *)*((_QWORD *)&v55 + 1);
    if (!*((_QWORD *)&v55 + 1))
    {
      v51 = 0;
      v18 = (_QWORD *)(v16 + 32);
LABEL_29:
      v58 = v17;
      goto LABEL_32;
    }
    if (*((__int128 **)&v55 + 1) == &v54)
    {
      v50[0] = &off_1E41524F8;
      v50[1] = v5;
      v50[2] = v55;
      v51 = (uint8_t *)v50;
      if (!(_QWORD)v55)
      {
        v18 = (_QWORD *)(v16 + 32);
        goto LABEL_31;
      }
      v21 = (unint64_t *)(v55 + 16);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      v17 = v51;
      v18 = (_QWORD *)(v16 + 32);
      if (!v51)
        goto LABEL_29;
    }
    else
    {
      v17 = (uint8_t *)(*(uint64_t (**)(void))(**((_QWORD **)&v55 + 1) + 16))();
      v51 = v17;
      v18 = (_QWORD *)(v16 + 32);
      if (!v17)
        goto LABEL_29;
    }
    if (v17 != (uint8_t *)v50)
    {
      v17 = (uint8_t *)(*(uint64_t (**)(uint8_t *))(*(_QWORD *)v17 + 16))(v17);
      goto LABEL_29;
    }
LABEL_31:
    v58 = buf;
    (*(void (**)(_QWORD *, uint8_t *))(v50[0] + 24))(v50, buf);
LABEL_32:
    std::__function::__value_func<void ()(xpc::dict)>::swap[abi:ne180100](buf, v18);
    v23 = v58;
    if (v58 == buf)
    {
      v24 = 4;
      v23 = buf;
    }
    else
    {
      if (!v58)
        goto LABEL_37;
      v24 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_37:
    v25 = v51;
    if (v51 == (uint8_t *)v50)
    {
      v26 = 4;
      v25 = (uint8_t *)v50;
    }
    else
    {
      if (!v51)
        goto LABEL_42;
      v26 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_42:
    v27 = *(_QWORD *)(a1 + 232);
    v28 = (_QWORD *)*((_QWORD *)&v53 + 1);
    if (*((_QWORD *)&v53 + 1))
    {
      if (*((__int128 **)&v53 + 1) == &v52)
      {
        v49 = v48;
        (*(void (**)(__int128 *, _QWORD *))(v52 + 24))(&v52, v48);
        v28 = v49;
        if (!v49)
          goto LABEL_50;
        goto LABEL_48;
      }
      v28 = (_QWORD *)(*(uint64_t (**)(void))(**((_QWORD **)&v53 + 1) + 16))();
    }
    v49 = v28;
    if (!v28)
      goto LABEL_50;
LABEL_48:
    if (v28 == v48)
    {
      v58 = buf;
      (*(void (**)(_QWORD *, uint8_t *))(v48[0] + 24))(v48, buf);
LABEL_52:
      std::__function::__value_func<void ()(xpc::object const&)>::swap[abi:ne180100](buf, (_QWORD *)(v27 + 64));
      v29 = v58;
      if (v58 == buf)
      {
        v30 = 4;
        v29 = buf;
      }
      else
      {
        if (!v58)
          goto LABEL_57;
        v30 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_57:
      v31 = v49;
      if (v49 == v48)
      {
        v32 = 4;
        v31 = v48;
      }
      else
      {
        if (!v49)
          goto LABEL_62;
        v32 = 5;
      }
      (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_62:
      v33 = *a2;
      if (v33)
      {
        xpc_retain(v33);
        v34 = *(std::__shared_weak_count **)(a1 + 16);
        if (!v34)
LABEL_89:
          std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      else
      {
        v33 = xpc_null_create();
        v34 = *(std::__shared_weak_count **)(a1 + 16);
        if (!v34)
          goto LABEL_89;
      }
      v35 = *(_QWORD *)(a1 + 8);
      v36 = std::__shared_weak_count::lock(v34);
      if (!v36)
        goto LABEL_89;
      v37 = v36;
      v38 = operator new(0x10uLL);
      *v38 = a1;
      v38[1] = v33;
      if (v33)
        xpc_retain(v33);
      else
        v38[1] = xpc_null_create();
      v39 = *(NSObject **)(a1 + 24);
      v40 = (unint64_t *)&v37->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
      v42 = operator new(0x18uLL);
      *v42 = v38;
      v42[1] = v35;
      v42[2] = v37;
      dispatch_async_f(v39, v42, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<qmi::ClientProxy::State>::execute_wrapped<qmi::ClientProxy::State::init(xpc::connection const&)::$_2>(qmi::ClientProxy::State::init(xpc::connection const&)::$_2 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::ClientProxy::State::init(xpc::connection const&)::$_2,dispatch_queue_s *::default_delete<qmi::ClientProxy::State::init(xpc::connection const&)::$_2>>)::{lambda(void *)#1}::__invoke);
      do
        v43 = __ldaxr(v40);
      while (__stlxr(v43 - 1, v40));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
      xpc_release(v33);
      v44 = (__int128 *)*((_QWORD *)&v53 + 1);
      if (*((__int128 **)&v53 + 1) == &v52)
      {
        v45 = 4;
        v44 = &v52;
      }
      else
      {
        if (!*((_QWORD *)&v53 + 1))
          goto LABEL_81;
        v45 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v44 + 8 * v45))();
LABEL_81:
      v46 = (__int128 *)*((_QWORD *)&v55 + 1);
      if (*((__int128 **)&v55 + 1) == &v54)
      {
        v47 = 4;
        v46 = &v54;
      }
      else
      {
        if (!*((_QWORD *)&v55 + 1))
        {
LABEL_86:
          std::__shared_weak_count::__release_weak(v7);
          return;
        }
        v47 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v46 + 8 * v47))();
      goto LABEL_86;
    }
    v28 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v28 + 16))(v28);
LABEL_50:
    v58 = (uint8_t *)v28;
    goto LABEL_52;
  }
  v19 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    v20 = (_QWORD *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v20 = (_QWORD *)*v20;
    *(_DWORD *)buf = 136315138;
    v57 = v20;
    _os_log_error_impl(&dword_19E9C8000, v19, OS_LOG_TYPE_ERROR, "Client: [%s], invalid fTransport passed in as parameter to state constructor", buf, 0xCu);
  }
}

void sub_19E9D2318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, char *a20,char a21,uint64_t a22,uint64_t a23,char *a24)
{
  std::__shared_weak_count *v24;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v26 = a16;
  if (a16 == &a13)
  {
    v27 = 4;
    v26 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_6:
  v28 = a20;
  if (a20 == &a17)
  {
    v29 = 4;
    v28 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_11;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_11:
  v30 = a24;
  if (a24 == &a21)
  {
    v31 = 4;
    v30 = &a21;
  }
  else
  {
    if (!a24)
      goto LABEL_16;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_16:
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_19E9D24CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;

  v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(std::__shared_weak_count **)(v1 + 8);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  _Unwind_Resume(exception_object);
}

_QWORD *qmi::ClientProxy::ClientProxy(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  xpc_object_t v7;
  xpc_object_t v9;

  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v3 = a2[1];
  a1[2] = *a2;
  a1[3] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v4 = a1[2];
  }
  v7 = xpc_null_create();
  v9 = v7;
  qmi::ClientProxy::State::init(v4, &v9);
  xpc_release(v7);
  return a1;
}

void sub_19E9D259C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  std::__shared_weak_count *v5;

  xpc_release(v3);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v2);
  v5 = *(std::__shared_weak_count **)(v1 + 8);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(a1);
}

void qmi::ClientProxy::~ClientProxy(qmi::ClientProxy *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v5)
      return;
  }
  std::__shared_weak_count::__release_weak(v5);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v5)
      return;
  }
  std::__shared_weak_count::__release_weak(v5);
}

uint64_t qmi::ClientProxy::shutdown(qmi::ClientProxy *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2));
}

uint64_t qmi::ClientProxy::getName(qmi::ClientProxy *this)
{
  return *((_QWORD *)this + 2) + 48;
}

uint64_t qmi::ClientProxy::getSvcType(qmi::ClientProxy *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 2) + 72);
}

BOOL qmi::ClientProxy::operator BOOL(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

BOOL qmi::ClientProxy::isValid(qmi::ClientProxy *this)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v4;
  _QWORD v5[6];
  _QWORD *v6;
  uint64_t block;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  void *v10;
  char *v11;
  _QWORD *v12;
  char v13;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
    return 0;
  v4 = *((_QWORD *)this + 2);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi11ClientProxy5StateEE20execute_wrapped_syncIZNKS3_7isValidEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v5[3] = &__block_descriptor_tmp_43;
  v5[4] = v1 + 8;
  v5[5] = &v4;
  v6 = v5;
  v2 = *(NSObject **)(v1 + 24);
  if (*(_QWORD *)(v1 + 32))
  {
    v13 = -86;
    block = MEMORY[0x1E0C809B0];
    v8 = 0x40000000;
    v9 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v10 = &__block_descriptor_tmp_45;
    v11 = &v13;
    v12 = &v6;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    v13 = -86;
    block = MEMORY[0x1E0C809B0];
    v8 = 0x40000000;
    v9 = ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v10 = &__block_descriptor_tmp_44;
    v11 = &v13;
    v12 = &v6;
    dispatch_sync(v2, &block);
  }
  return v13 != 0;
}

BOOL qmi::ClientProxy::State::isValid(qmi::ClientProxy::State *this)
{
  NSObject *v1;
  char *v2;
  qmi::ClientProxy::State *v4;
  _QWORD v5[6];
  _QWORD *v6;
  uint64_t block;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  void *v10;
  char *v11;
  _QWORD *v12;
  char v13;

  v4 = this;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi11ClientProxy5StateEE20execute_wrapped_syncIZNKS3_7isValidEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v5[3] = &__block_descriptor_tmp_43;
  v5[4] = (char *)this + 8;
  v5[5] = &v4;
  v6 = v5;
  v2 = (char *)this + 24;
  v1 = *((_QWORD *)this + 3);
  if (*((_QWORD *)v2 + 1))
  {
    v13 = -86;
    block = MEMORY[0x1E0C809B0];
    v8 = 0x40000000;
    v9 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v10 = &__block_descriptor_tmp_45;
    v11 = &v13;
    v12 = &v6;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    v13 = -86;
    block = MEMORY[0x1E0C809B0];
    v8 = 0x40000000;
    v9 = ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v10 = &__block_descriptor_tmp_44;
    v11 = &v13;
    v12 = &v6;
    dispatch_sync(v1, &block);
  }
  return v13 != 0;
}

BOOL qmi::ClientProxy::isStopped(qmi::ClientProxy *this)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v4;
  _QWORD v5[6];
  _QWORD *v6;
  uint64_t block;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  void *v10;
  char *v11;
  _QWORD *v12;
  char v13;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
    return 0;
  v4 = *((_QWORD *)this + 2);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi11ClientProxy5StateEE20execute_wrapped_syncIZNKS3_9isStoppedEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v5[3] = &__block_descriptor_tmp_46;
  v5[4] = v1 + 8;
  v5[5] = &v4;
  v6 = v5;
  v2 = *(NSObject **)(v1 + 24);
  if (*(_QWORD *)(v1 + 32))
  {
    v13 = -86;
    block = MEMORY[0x1E0C809B0];
    v8 = 0x40000000;
    v9 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v10 = &__block_descriptor_tmp_45;
    v11 = &v13;
    v12 = &v6;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    v13 = -86;
    block = MEMORY[0x1E0C809B0];
    v8 = 0x40000000;
    v9 = ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v10 = &__block_descriptor_tmp_44;
    v11 = &v13;
    v12 = &v6;
    dispatch_sync(v2, &block);
  }
  return v13 != 0;
}

BOOL qmi::ClientProxy::State::isStopped(qmi::ClientProxy::State *this)
{
  NSObject *v1;
  char *v2;
  qmi::ClientProxy::State *v4;
  _QWORD v5[6];
  _QWORD *v6;
  uint64_t block;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  void *v10;
  char *v11;
  _QWORD *v12;
  char v13;

  v4 = this;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi11ClientProxy5StateEE20execute_wrapped_syncIZNKS3_9isStoppedEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v5[3] = &__block_descriptor_tmp_46;
  v5[4] = (char *)this + 8;
  v5[5] = &v4;
  v6 = v5;
  v2 = (char *)this + 24;
  v1 = *((_QWORD *)this + 3);
  if (*((_QWORD *)v2 + 1))
  {
    v13 = -86;
    block = MEMORY[0x1E0C809B0];
    v8 = 0x40000000;
    v9 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v10 = &__block_descriptor_tmp_45;
    v11 = &v13;
    v12 = &v6;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    v13 = -86;
    block = MEMORY[0x1E0C809B0];
    v8 = 0x40000000;
    v9 = ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    v10 = &__block_descriptor_tmp_44;
    v11 = &v13;
    v12 = &v6;
    dispatch_sync(v1, &block);
  }
  return v13 != 0;
}

void qmi::ClientProxy::registerResponse(uint64_t a1, __int16 a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  const void *v6;
  size_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;

  v4 = *(_QWORD **)(a1 + 16);
  v10 = 0;
  v11 = 0;
  v9 = 0;
  v6 = *(const void **)a3;
  v5 = *(_QWORD *)(a3 + 8);
  v7 = v5 - *(_QWORD *)a3;
  if (v5 == *(_QWORD *)a3)
  {
    v8 = 0;
  }
  else
  {
    if ((v7 & 0x8000000000000000) != 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v5 - *(_QWORD *)a3);
    v9 = v8;
    v11 = &v8[v7];
    memcpy(v8, v6, v7);
    v10 = &v8[v7];
  }
  qmi::ClientProxy::State::registerResponse(v4, a2, (uint64_t)&v9);
  if (v8)
    operator delete(v8);
}

void sub_19E9D2B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (v11)
    operator delete(v11);
  _Unwind_Resume(exception_object);
}

void qmi::ClientProxy::State::registerResponse(_QWORD *a1, __int16 a2, uint64_t a3)
{
  uint64_t v4;
  const void *v5;
  size_t v6;
  char *v7;
  char *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  _WORD *v13;
  unint64_t *p_shared_owners;
  NSObject *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;

  v5 = *(const void **)a3;
  v4 = *(_QWORD *)(a3 + 8);
  v6 = v4 - *(_QWORD *)a3;
  if (v4 == *(_QWORD *)a3)
  {
    v8 = 0;
    v7 = 0;
    v9 = (std::__shared_weak_count *)a1[2];
    if (!v9)
      goto LABEL_13;
  }
  else
  {
    if ((v6 & 0x8000000000000000) != 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - *(_QWORD *)a3);
    v8 = &v7[v6];
    memcpy(v7, v5, v6);
    v9 = (std::__shared_weak_count *)a1[2];
    if (!v9)
LABEL_13:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v10 = a1[1];
  v11 = std::__shared_weak_count::lock(v9);
  if (!v11)
    goto LABEL_13;
  v12 = v11;
  v13 = operator new(0x28uLL);
  *(_QWORD *)v13 = a1;
  v13[4] = a2;
  *((_QWORD *)v13 + 2) = v7;
  *((_QWORD *)v13 + 3) = v8;
  *((_QWORD *)v13 + 4) = v8;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v15 = a1[3];
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  v17 = operator new(0x18uLL);
  *v17 = v13;
  v17[1] = v10;
  v17[2] = v12;
  dispatch_async_f(v15, v17, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<qmi::ClientProxy::State>::execute_wrapped<qmi::ClientProxy::State::registerResponse(unsigned short,std::vector<unsigned char>)::$_0>(qmi::ClientProxy::State::registerResponse(unsigned short,std::vector<unsigned char>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::ClientProxy::State::registerResponse(unsigned short,std::vector<unsigned char>)::$_0,std::default_delete<qmi::ClientProxy::State::registerResponse(unsigned short,std::vector<unsigned char>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_19E9D2D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void qmi::ClientProxy::deregisterResponse(qmi::ClientProxy *this, __int16 a2)
{
  uint64_t v2;
  _QWORD v3[5];
  __int16 v4;

  v2 = *((_QWORD *)this + 2);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN3qmi11ClientProxy5State18deregisterResponseEt_block_invoke;
  v3[3] = &__block_descriptor_tmp_31;
  v3[4] = v2;
  v4 = a2;
  ctu::SharedSynchronizable<qmi::ClientProxy::State>::execute_wrapped((uint64_t *)(v2 + 8), (uint64_t)v3);
}

void qmi::ClientProxy::State::deregisterResponse(qmi::ClientProxy::State *this, __int16 a2)
{
  _QWORD v2[5];
  __int16 v3;

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 0x40000000;
  v2[2] = ___ZN3qmi11ClientProxy5State18deregisterResponseEt_block_invoke;
  v2[3] = &__block_descriptor_tmp_31;
  v2[4] = this;
  v3 = a2;
  ctu::SharedSynchronizable<qmi::ClientProxy::State>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v2);
}

void qmi::ClientProxy::sendIndication(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  size_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;

  v2 = *(_QWORD *)(a1 + 16);
  v8 = 0;
  v9 = 0;
  v7 = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 == *(_QWORD *)a2)
  {
    v6 = 0;
  }
  else
  {
    if ((v5 & 0x8000000000000000) != 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - *(_QWORD *)a2);
    v7 = v6;
    v9 = &v6[v5];
    memcpy(v6, v4, v5);
    v8 = &v6[v5];
  }
  qmi::ClientProxy::State::sendIndication(v2, (uint64_t)&v7);
  if (v6)
    operator delete(v6);
}

void sub_19E9D2ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (v11)
    operator delete(v11);
  _Unwind_Resume(exception_object);
}

void qmi::ClientProxy::State::sendIndication(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  size_t v5;
  char *v6;
  char *v7;
  _QWORD v8[5];
  void *__p;
  void *v10;
  char *v11;

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v8[2] = ___ZN3qmi11ClientProxy5State14sendIndicationENSt3__16vectorIhNS2_9allocatorIhEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_32;
  v8[4] = a1;
  __p = 0;
  v10 = 0;
  v11 = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    if ((v5 & 0x8000000000000000) != 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - *(_QWORD *)a2);
    v7 = &v6[v5];
    __p = v6;
    v11 = &v6[v5];
    memcpy(v6, v4, v5);
    v10 = v7;
  }
  ctu::SharedSynchronizable<qmi::ClientProxy::State>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v8);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_19E9D2FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void qmi::ClientProxy::handleMessage(uint64_t a1, void **a2)
{
  void *v3;
  NSObject *v4;
  _QWORD v5[6];
  _QWORD v6[5];
  xpc_object_t object;

  v6[0] = 0;
  v6[1] = v6;
  v6[2] = 0x3002000000;
  v6[3] = __Block_byref_object_copy_;
  v6[4] = __Block_byref_object_dispose_;
  v3 = *a2;
  object = v3;
  if (v3)
    xpc_retain(v3);
  else
    object = xpc_null_create();
  v4 = *(NSObject **)(*(_QWORD *)(a1 + 16) + 24);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 1107296256;
  v5[2] = ___ZNK3qmi11ClientProxy13handleMessageERKN3xpc4dictE_block_invoke;
  v5[3] = &__block_descriptor_tmp;
  v5[4] = v6;
  v5[5] = a1;
  dispatch_async(v4, v5);
  _Block_object_dispose(v6, 8);
  xpc_release(object);
}

void ___ZNK3qmi11ClientProxy13handleMessageERKN3xpc4dictE_block_invoke(uint64_t a1)
{
  qmi::ClientProxy::State::handleMessage(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16), (xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void qmi::ClientProxy::handleMessage_sync(uint64_t a1, xpc_object_t *a2)
{
  qmi::ClientProxy::State::handleMessage(*(_QWORD *)(a1 + 16), a2);
}

const char *qmi::asString(unsigned int a1)
{
  if (a1 > 7)
    return "(unknown)";
  else
    return off_1E4152758[a1];
}

{
  if (a1 > 5)
    return "(unknown)";
  else
    return off_1E4153020[a1];
}

{
  if (a1 > 2)
    return "(unknown)";
  else
    return off_1E4153650[a1];
}

{
  if (a1 > 3)
    return "???";
  else
    return off_1E4153668[a1];
}

uint64_t qmi::ClientProxy::State::State(uint64_t a1, __int128 *a2, NSObject **a3, int a4, _QWORD *a5)
{
  char v6;
  const char *v10;
  NSObject *v11;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _BYTE v18[16];
  _BYTE v19[8];

  v6 = a4;
  v10 = qmi::asShortString(a4);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v18, "com.apple.telephony.bb", v10);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v11 = *a3;
  *(_QWORD *)(a1 + 24) = *a3;
  if (v11)
    dispatch_retain(v11);
  *(_QWORD *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 40), (const ctu::OsLogLogger *)v19);
  MEMORY[0x1A1AEAED4](v19);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v18);
  *(_QWORD *)a1 = off_1E41520D0;
  v12 = (std::string *)(a1 + 48);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v13 = *a2;
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  *(_QWORD *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 72) = v6;
  *(_DWORD *)(a1 + 76) = 1;
  *(_WORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 84) = 5;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_BYTE *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_QWORD *)(a1 + 232) = *a5;
  v14 = a5[1];
  *(_QWORD *)(a1 + 240) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  return a1;
}

void sub_19E9D3234(_Unwind_Exception *a1)
{
  _QWORD *v1;

  ctu::SharedLoggable<qmi::ClientProxy::State,ctu::OsLogLogger>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedLoggable<qmi::ClientProxy::State,ctu::OsLogLogger>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  MEMORY[0x1A1AEAED4](a1 + 4);
  v2 = a1[3];
  if (v2)
    dispatch_release(v2);
  v3 = a1[2];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void qmi::ClientProxy::State::~State(qmi::ClientProxy::State *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD **v5;
  NSObject *v6;
  NSObject *v7;
  void **v8;
  void **v9;
  void **v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void **v15;
  void **v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  std::__shared_weak_count *v22;

  *(_QWORD *)this = off_1E41520D0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (_QWORD **)*((_QWORD *)this + 28);
      *((_QWORD *)this + 28) = 0;
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (_QWORD **)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v5)
  {
LABEL_6:
    std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(unsigned short)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(unsigned short)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(unsigned short)>>>>::destroy(v5[1]);
    operator delete(v5);
  }
LABEL_7:
  std::__tree<unsigned short>::destroy((uint64_t)this + 200, *((_QWORD **)this + 26));
  v6 = *((_QWORD *)this + 24);
  if (v6)
  {
    dispatch_group_leave(v6);
    v7 = *((_QWORD *)this + 24);
    if (v7)
      dispatch_release(v7);
  }
  v8 = (void **)((char *)this + 136);
  std::deque<qmi::ClientProxy::State::Transaction>::clear((_QWORD *)this + 17);
  v9 = (void **)*((_QWORD *)this + 18);
  v10 = (void **)*((_QWORD *)this + 19);
  if (v9 != v10)
  {
    do
    {
      v11 = *v9++;
      operator delete(v11);
    }
    while (v9 != v10);
    v13 = *((_QWORD *)this + 18);
    v12 = *((_QWORD *)this + 19);
    if (v12 != v13)
      *((_QWORD *)this + 19) = v12 + ((v13 - v12 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*v8)
    operator delete(*v8);
  v14 = (void **)((char *)this + 88);
  std::deque<qmi::ClientProxy::State::Transaction>::clear((_QWORD *)this + 11);
  v15 = (void **)*((_QWORD *)this + 12);
  v16 = (void **)*((_QWORD *)this + 13);
  if (v15 != v16)
  {
    do
    {
      v17 = *v15++;
      operator delete(v17);
    }
    while (v15 != v16);
    v19 = *((_QWORD *)this + 12);
    v18 = *((_QWORD *)this + 13);
    if (v18 != v19)
      *((_QWORD *)this + 13) = v18 + ((v19 - v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*v14)
    operator delete(*v14);
  if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    MEMORY[0x1A1AEAED4]((char *)this + 40);
    v20 = *((_QWORD *)this + 4);
    if (!v20)
      goto LABEL_25;
    goto LABEL_24;
  }
  operator delete(*((void **)this + 6));
  MEMORY[0x1A1AEAED4]((char *)this + 40);
  v20 = *((_QWORD *)this + 4);
  if (v20)
LABEL_24:
    dispatch_release(v20);
LABEL_25:
  v21 = *((_QWORD *)this + 3);
  if (v21)
    dispatch_release(v21);
  v22 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
}

void qmi::ClientProxy::State::handleServerError(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  NSObject *v4;
  _QWORD *v5;
  NSObject *v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*a2 == MEMORY[0x1E0C81288])
  {
    v4 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = (_QWORD *)(a1 + 48);
      if (*(char *)(a1 + 71) < 0)
        v5 = (_QWORD *)*v5;
      v8 = 136315138;
      v9 = v5;
      _os_log_impl(&dword_19E9C8000, v4, OS_LOG_TYPE_DEFAULT, "#I client '%s' ignoring XPC_ERROR_TERMINATION_IMMINENT", (uint8_t *)&v8, 0xCu);
    }
  }
  else
  {
    qmi::ClientProxy::State::handleStatus_sync(a1, 1u);
    v3 = *(_QWORD *)(a1 + 232);
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
    else
    {
      v6 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v7 = (_QWORD *)(a1 + 48);
        if (*(char *)(a1 + 71) < 0)
          v7 = (_QWORD *)*v7;
        v8 = 136315138;
        v9 = v7;
        _os_log_error_impl(&dword_19E9C8000, v6, OS_LOG_TYPE_ERROR, "Client: [%s], invalid fTransport in server error handler", (uint8_t *)&v8, 0xCu);
      }
    }
  }
}

void qmi::ClientProxy::State::handleStatus_sync(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  _QWORD *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  int v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  _QWORD *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (_QWORD *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
    {
      v5 = (_QWORD *)*v5;
      if (a2 <= 2)
      {
LABEL_4:
        v6 = off_1E4152740[a2];
        v7 = *(int *)(a1 + 76);
        if (v7 > 7)
        {
LABEL_5:
          v8 = "(unknown)";
LABEL_9:
          v18 = 136315650;
          v19 = v5;
          v20 = 2080;
          v21 = v6;
          v22 = 2080;
          v23 = v8;
          _os_log_impl(&dword_19E9C8000, v4, OS_LOG_TYPE_DEFAULT, "#I [%s]: handleStatus_sync(%s), current fQMuxState=%s", (uint8_t *)&v18, 0x20u);
          goto LABEL_10;
        }
LABEL_8:
        v8 = off_1E4152758[v7];
        goto LABEL_9;
      }
    }
    else if (a2 <= 2)
    {
      goto LABEL_4;
    }
    v6 = "(unknown)";
    v7 = *(int *)(a1 + 76);
    if (v7 > 7)
      goto LABEL_5;
    goto LABEL_8;
  }
LABEL_10:
  if (a2 == 1)
  {
    v10 = *(_DWORD *)(a1 + 76);
    if ((v10 - 4) >= 3)
    {
      if (!v10)
      {
        v13 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          v17 = (_QWORD *)(a1 + 48);
          if (*(char *)(a1 + 71) < 0)
            v17 = (_QWORD *)*v17;
          v18 = 136315138;
          v19 = v17;
          _os_log_debug_impl(&dword_19E9C8000, v13, OS_LOG_TYPE_DEBUG, "#D [%s]: Stopping client before it started; will re-start",
            (uint8_t *)&v18,
            0xCu);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        qmi::ClientProxy::State::cancelAllMessages_sync((qmi::ClientProxy::State *)a1);
        v14 = *(NSObject **)(a1 + 192);
        *(_QWORD *)(a1 + 192) = 0;
        if (v14)
        {
          dispatch_group_leave(v14);
          dispatch_release(v14);
        }
        *(_DWORD *)(a1 + 76) = 1;
      }
    }
    else
    {
      v11 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        v15 = (_QWORD *)(a1 + 48);
        if (*(char *)(a1 + 71) < 0)
          v15 = (_QWORD *)*v15;
        v18 = 136315138;
        v19 = v15;
        _os_log_debug_impl(&dword_19E9C8000, v11, OS_LOG_TYPE_DEBUG, "#D [%s]: Stopping client and cleaning up", (uint8_t *)&v18, 0xCu);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      qmi::ClientProxy::State::cancelAllMessages_sync((qmi::ClientProxy::State *)a1);
      v12 = *(NSObject **)(a1 + 192);
      *(_QWORD *)(a1 + 192) = 0;
      if (v12)
      {
        dispatch_group_leave(v12);
        dispatch_release(v12);
      }
      qmi::ClientProxy::State::sendDisconnectMessage_sync((qmi::ClientProxy::State *)a1, 1);
    }
  }
  else if (a2 == 2 && *(_DWORD *)(a1 + 76) == 1)
  {
    v9 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      v16 = (_QWORD *)(a1 + 48);
      if (*(char *)(a1 + 71) < 0)
        v16 = (_QWORD *)*v16;
      v18 = 136315138;
      v19 = v16;
      _os_log_debug_impl(&dword_19E9C8000, v9, OS_LOG_TYPE_DEBUG, "#D [%s]: Starting client", (uint8_t *)&v18, 0xCu);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    *(_DWORD *)(a1 + 76) = 0;
  }
}

void qmi::ClientProxy::State::handleSendNotReady_sync(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t value;
  xpc_object_t v4;
  xpc_object_t v5;

  value = xpc_dictionary_get_value(*a2, "txid");
  v5 = value;
  if (value)
  {
    v4 = value;
    xpc_retain(value);
  }
  else
  {
    v4 = xpc_null_create();
    v5 = v4;
  }
  qmi::ClientProxy::State::sendInternalErrorResponseForRemoteId_sync(a1, &v5, 1);
  xpc_release(v4);
}

void sub_19E9D3988(_Unwind_Exception *a1)
{
  void *v1;

  xpc_release(v1);
  _Unwind_Resume(a1);
}

void qmi::ClientProxy::State::handleIndWakeChange_sync(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v4;
  xpc_object_t value;
  xpc_object_t v6;
  uint64_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t *v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  size_t count;
  xpc_object_t v18;
  uint64_t v19;
  size_t v20;
  xpc_object_t v21;
  unsigned __int16 v22;
  xpc_object_t v23;
  unsigned __int16 v24;
  unsigned __int16 v25;
  _QWORD v26[2];
  xpc_object_t object;

  v4 = xpc_null_create();
  value = xpc_dictionary_get_value(*a2, "set_ind_wake");
  v6 = value;
  v7 = MEMORY[0x1E0C812C8];
  if (value)
  {
    xpc_retain(value);
  }
  else
  {
    v6 = xpc_null_create();
    if (!v6)
    {
      v8 = xpc_null_create();
      v6 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A1AEB9A8](v6) == v7)
  {
    xpc_retain(v6);
    v8 = v6;
  }
  else
  {
    v8 = xpc_null_create();
  }
LABEL_8:
  xpc_release(v6);
  v9 = xpc_null_create();
  xpc_release(v4);
  v10 = MEMORY[0x1A1AEB9A8](v8);
  xpc_release(v9);
  if (v10 != v7)
    goto LABEL_29;
  v12 = *(_QWORD **)(a1 + 208);
  v11 = (_QWORD *)(a1 + 208);
  v13 = v11 - 1;
  std::__tree<unsigned short>::destroy((uint64_t)(v11 - 1), v12);
  *(v11 - 1) = v11;
  *v11 = 0;
  v11[1] = 0;
  if (v8)
  {
    xpc_retain(v8);
    v14 = v8;
LABEL_12:
    xpc_retain(v14);
    v15 = v14;
    goto LABEL_13;
  }
  v14 = xpc_null_create();
  if (v14)
    goto LABEL_12;
  v15 = xpc_null_create();
  v14 = 0;
LABEL_13:
  xpc_release(v14);
  if (v8)
  {
    xpc_retain(v8);
    v16 = v8;
  }
  else
  {
    v16 = xpc_null_create();
  }
  if (MEMORY[0x1A1AEB9A8](v8) == v7)
  {
    count = xpc_array_get_count(v8);
    if (v16)
      goto LABEL_18;
  }
  else
  {
    count = 0;
    if (v16)
    {
LABEL_18:
      xpc_retain(v16);
      v18 = v16;
      goto LABEL_21;
    }
  }
  v18 = xpc_null_create();
LABEL_21:
  xpc_release(v16);
  v19 = *v13;
  v26[0] = v13;
  v26[1] = v19;
  if (count || v15 != v18)
  {
    v20 = 0;
    if (v15 != v18)
    {
      while (1)
      {
        v23 = xpc_array_get_value(v15, v20);
        object = v23;
        if (v23)
          xpc_retain(v23);
        else
          object = xpc_null_create();
        v24 = xpc::dyn_cast_or_default();
        xpc_release(object);
        v25 = v24;
        std::insert_iterator<std::set<unsigned short>>::operator=[abi:ne180100]((uint64_t)v26, &v25);
        ++v20;
      }
    }
    do
    {
      v21 = xpc_array_get_value(v15, v20);
      object = v21;
      if (v21)
        xpc_retain(v21);
      else
        object = xpc_null_create();
      v22 = xpc::dyn_cast_or_default();
      xpc_release(object);
      v25 = v22;
      std::insert_iterator<std::set<unsigned short>>::operator=[abi:ne180100]((uint64_t)v26, &v25);
      ++v20;
    }
    while (count != v20);
  }
  xpc_release(v18);
  xpc_release(v15);
LABEL_29:
  xpc_release(v8);
}

void sub_19E9D3C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  void *v12;
  void *v13;
  void *v14;

  xpc_release(object);
  xpc_release(v14);
  xpc_release(v13);
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void qmi::ClientProxy::State::handleServerError_sync(uint64_t a1, void **a2)
{
  void *v3;
  NSObject *v4;
  _QWORD v5[6];
  _QWORD v6[5];
  xpc_object_t object;

  v6[0] = 0;
  v6[1] = v6;
  v6[2] = 0x3002000000;
  v6[3] = __Block_byref_object_copy__13;
  v6[4] = __Block_byref_object_dispose__14;
  v3 = *a2;
  object = v3;
  if (v3)
    xpc_retain(v3);
  else
    object = xpc_null_create();
  v4 = *(NSObject **)(a1 + 24);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 1107296256;
  v5[2] = ___ZN3qmi11ClientProxy5State22handleServerError_syncERKN3xpc6objectE_block_invoke;
  v5[3] = &__block_descriptor_tmp_15;
  v5[4] = v6;
  v5[5] = a1;
  dispatch_async(v4, v5);
  _Block_object_dispose(v6, 8);
  xpc_release(object);
}

xpc_object_t __Block_byref_object_copy__13(uint64_t a1, uint64_t a2)
{
  xpc_object_t result;

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  result = xpc_null_create();
  *(_QWORD *)(a2 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__14(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

void ___ZN3qmi11ClientProxy5State22handleServerError_syncERKN3xpc6objectE_block_invoke(uint64_t a1)
{
  qmi::ClientProxy::State::handleServerError(*(_QWORD *)(a1 + 40), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void qmi::ClientProxy::State::sendInternalErrorResponseForTxId_sync(qmi::ClientProxy::State *this, int a2, int a3)
{
  uint64_t v3;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  xpc_object_t v11;
  uint64_t v12;
  xpc_object_t v13;

  v3 = *((_QWORD *)this + 12);
  if (*((_QWORD *)this + 13) != v3)
  {
    v6 = *((_QWORD *)this + 15);
    v7 = (uint64_t *)(v3 + 8 * (v6 >> 7));
    v8 = *v7;
    v9 = *v7 + 32 * (v6 & 0x7F);
    v10 = *(_QWORD *)(v3 + (((*((_QWORD *)this + 16) + v6) >> 4) & 0xFFFFFFFFFFFFFF8))
        + 32 * ((*((_QWORD *)this + 16) + v6) & 0x7F);
    if (v9 != v10)
    {
      while (*(unsigned __int16 *)(*(_QWORD *)(v9 + 16) + 26) != a2)
      {
        v9 += 32;
        if (v9 - v8 == 4096)
        {
          v12 = v7[1];
          ++v7;
          v8 = v12;
          v9 = v12;
        }
        if (v9 == v10)
          return;
      }
    }
    if (v9 != v10)
    {
      v11 = xpc_int64_create(*(unsigned __int16 *)(*(_QWORD *)(v9 + 16) + 26));
      v13 = v11;
      if (!v11)
      {
        v11 = xpc_null_create();
        v13 = v11;
      }
      qmi::ClientProxy::State::sendInternalErrorResponseForRemoteId_sync((uint64_t)this, &v13, a3);
      xpc_release(v11);
    }
  }
}

void sub_19E9D3F2C(_Unwind_Exception *a1)
{
  void *v1;

  xpc_release(v1);
  _Unwind_Resume(a1);
}

void qmi::ClientProxy::State::sendInternalErrorResponseForRemoteId_sync(uint64_t a1, xpc_object_t *a2, int a3)
{
  uint64_t v4;
  xpc_object_t v7;
  xpc_object_t v8;
  NSObject *v9;
  _QWORD *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  uint64_t v17;
  xpc_object_t object;
  uint8_t buf[4];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 232);
  if (v4)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4))
    {
      v7 = xpc_dictionary_create(0, 0, 0);
      if (v7 || (v7 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1A1AEB9A8](v7) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v7);
          v8 = v7;
        }
        else
        {
          v8 = xpc_null_create();
        }
      }
      else
      {
        v8 = xpc_null_create();
        v7 = 0;
      }
      xpc_release(v7);
      v11 = xpc_null_create();
      xpc_dictionary_set_value(v8, "resp_qmi_message", v11);
      v12 = xpc_null_create();
      xpc_release(v11);
      xpc_release(v12);
      v13 = *a2;
      if (v13)
        xpc_retain(v13);
      else
        v13 = xpc_null_create();
      xpc_dictionary_set_value(v8, "txid", v13);
      v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
      v15 = xpc_int64_create(a3);
      if (!v15)
        v15 = xpc_null_create();
      xpc_dictionary_set_value(v8, "internal_error", v15);
      v16 = xpc_null_create();
      xpc_release(v15);
      xpc_release(v16);
      v17 = *(_QWORD *)(a1 + 232);
      object = v8;
      if (v8)
        xpc_retain(v8);
      else
        object = xpc_null_create();
      (*(void (**)(uint64_t, xpc_object_t *))(*(_QWORD *)v17 + 24))(v17, &object);
      xpc_release(object);
      object = 0;
      xpc_release(v8);
    }
  }
  else
  {
    v9 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = (_QWORD *)(a1 + 48);
      if (*(char *)(a1 + 71) < 0)
        v10 = (_QWORD *)*v10;
      *(_DWORD *)buf = 136315138;
      v20 = v10;
      _os_log_error_impl(&dword_19E9C8000, v9, OS_LOG_TYPE_ERROR, "Client: [%s], invalid fTransport when sending internal error response for remote id", buf, 0xCu);
    }
  }
}

void sub_19E9D4198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void qmi::ClientProxy::State::cleanUpDisconnect_sync(NSObject **this)
{
  NSObject *v2;

  qmi::ClientProxy::State::cancelAllMessages_sync((qmi::ClientProxy::State *)this);
  v2 = this[24];
  this[24] = 0;
  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
}

void qmi::ClientProxy::State::cancelAllMessages_sync(qmi::ClientProxy::State *this)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  xpc_object_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  xpc_object_t v14;
  uint64_t v15;
  _QWORD *v16;
  xpc_object_t v17;

  v2 = *((_QWORD *)this + 12);
  if (*((_QWORD *)this + 13) != v2)
  {
    v3 = *((_QWORD *)this + 15);
    v4 = (_QWORD *)(v2 + 8 * (v3 >> 7));
    v5 = *v4 + 32 * (v3 & 0x7F);
    v6 = *(_QWORD *)(v2 + (((*((_QWORD *)this + 16) + v3) >> 4) & 0xFFFFFFFFFFFFFF8))
       + 32 * ((*((_QWORD *)this + 16) + v3) & 0x7F);
    while (v5 != v6)
    {
      v7 = xpc_int64_create(*(unsigned __int16 *)(*(_QWORD *)(v5 + 16) + 26));
      v17 = v7;
      if (!v7)
      {
        v7 = xpc_null_create();
        v17 = v7;
      }
      qmi::ClientProxy::State::sendInternalErrorResponseForRemoteId_sync((uint64_t)this, &v17, 2);
      xpc_release(v7);
      v5 += 32;
      if (v5 - *v4 == 4096)
      {
        v8 = v4[1];
        ++v4;
        v5 = v8;
      }
    }
  }
  std::deque<qmi::ClientProxy::State::Transaction>::clear((_QWORD *)this + 11);
  std::deque<qmi::ClientProxy::State::Transaction>::shrink_to_fit((uint64_t)this + 88);
  v9 = *((_QWORD *)this + 18);
  if (*((_QWORD *)this + 19) != v9)
  {
    v10 = *((_QWORD *)this + 21);
    v11 = (_QWORD *)(v9 + 8 * (v10 >> 7));
    v12 = *v11 + 32 * (v10 & 0x7F);
    v13 = *(_QWORD *)(v9 + (((*((_QWORD *)this + 22) + v10) >> 4) & 0xFFFFFFFFFFFFFF8))
        + 32 * ((*((_QWORD *)this + 22) + v10) & 0x7F);
    while (v12 != v13)
    {
      v14 = xpc_int64_create(*(unsigned __int16 *)(*(_QWORD *)(v12 + 16) + 26));
      v17 = v14;
      if (!v14)
      {
        v14 = xpc_null_create();
        v17 = v14;
      }
      qmi::ClientProxy::State::sendInternalErrorResponseForRemoteId_sync((uint64_t)this, &v17, 2);
      xpc_release(v14);
      v12 += 32;
      if (v12 - *v11 == 4096)
      {
        v15 = v11[1];
        ++v11;
        v12 = v15;
      }
    }
  }
  v16 = (_QWORD *)((char *)this + 136);
  std::deque<qmi::ClientProxy::State::Transaction>::clear(v16);
  std::deque<qmi::ClientProxy::State::Transaction>::shrink_to_fit((uint64_t)v16);
}

void sub_19E9D440C(_Unwind_Exception *a1)
{
  void *v1;

  xpc_release(v1);
  _Unwind_Resume(a1);
}

void std::deque<qmi::ClientProxy::State::Transaction>::clear(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    v14 = 0;
    goto LABEL_20;
  }
  v4 = a1[4];
  v5 = &v2[v4 >> 7];
  v6 = (uint64_t)*v5 + 32 * (v4 & 0x7F);
  v7 = *(uint64_t *)((char *)v2 + (((a1[5] + v4) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((a1[5] + v4) & 0x7F);
  if (v6 == v7)
    goto LABEL_18;
  do
  {
    v8 = *(NSObject **)(v6 + 8);
    if (v8)
      dispatch_source_cancel(v8);
    v9 = *(std::__shared_weak_count **)(v6 + 24);
    if (!v9)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
LABEL_11:
      v12 = *(NSObject **)(v6 + 8);
      if (!v12)
        goto LABEL_13;
LABEL_12:
      dispatch_release(v12);
      goto LABEL_13;
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v12 = *(NSObject **)(v6 + 8);
    if (v12)
      goto LABEL_12;
LABEL_13:
    v6 += 32;
    if (v6 - (_QWORD)*v5 == 4096)
    {
      v13 = (uint64_t)v5[1];
      ++v5;
      v6 = v13;
    }
  }
  while (v6 != v7);
  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
LABEL_18:
  a1[5] = 0;
  v14 = (char *)v3 - (char *)v2;
  if (v14 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v15 = a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v14 = v15 - (_QWORD)v2;
    }
    while (v14 > 0x10);
  }
LABEL_20:
  if (v14 >> 3 == 1)
  {
    v16 = 64;
LABEL_25:
    a1[4] = v16;
  }
  else if (v14 >> 3 == 2)
  {
    v16 = 128;
    goto LABEL_25;
  }
}

void qmi::ClientProxy::State::sendDisconnectMessage_sync(qmi::ClientProxy::State *this, BOOL a2)
{
  uint64_t v3;
  xpc_object_t v5;
  xpc_object_t v6;
  NSObject *v7;
  _QWORD *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  uint64_t v13;
  xpc_object_t object;
  uint8_t buf[4];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 29);
  if (v3)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3))
    {
      v5 = xpc_dictionary_create(0, 0, 0);
      if (v5 || (v5 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1A1AEB9A8](v5) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v5);
          v6 = v5;
        }
        else
        {
          v6 = xpc_null_create();
        }
      }
      else
      {
        v6 = xpc_null_create();
        v5 = 0;
      }
      xpc_release(v5);
      v9 = xpc_int64_create(1);
      if (!v9)
        v9 = xpc_null_create();
      xpc_dictionary_set_value(v6, "status", v9);
      v10 = xpc_null_create();
      xpc_release(v9);
      xpc_release(v10);
      v11 = xpc_BOOL_create(a2);
      if (!v11)
        v11 = xpc_null_create();
      xpc_dictionary_set_value(v6, "error", v11);
      v12 = xpc_null_create();
      xpc_release(v11);
      xpc_release(v12);
      v13 = *((_QWORD *)this + 29);
      object = v6;
      if (v6)
        xpc_retain(v6);
      else
        object = xpc_null_create();
      (*(void (**)(uint64_t, xpc_object_t *))(*(_QWORD *)v13 + 24))(v13, &object);
      xpc_release(object);
      object = 0;
      xpc_release(v6);
    }
    *((_DWORD *)this + 19) = 1;
  }
  else
  {
    v7 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = (_QWORD *)((char *)this + 48);
      if (*((char *)this + 71) < 0)
        v8 = (_QWORD *)*v8;
      *(_DWORD *)buf = 136315138;
      v16 = v8;
      _os_log_error_impl(&dword_19E9C8000, v7, OS_LOG_TYPE_ERROR, "Client: [%s], invalid fTransport when sending disconnect message", buf, 0xCu);
    }
  }
}

void sub_19E9D47D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t qmi::ClientProxy::State::getIndWakeSet_sync(qmi::ClientProxy::State *this)
{
  return (uint64_t)this + 200;
}

void ___ZN3qmi11ClientProxy5State22handleSentMessage_syncEt_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  size_t v22;
  void *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  void *__p[2];
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38[2];
  __int128 v39;
  unint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  std::__shared_weak_count *v52;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    return;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = std::__shared_weak_count::lock(v2);
  v52 = v4;
  if (!v4)
    return;
  if (!*(_QWORD *)(a1 + 40))
  {
    v24 = v4;
LABEL_29:
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    return;
  }
  qmi::ClientProxy::State::sendInternalErrorResponseForTxId_sync((qmi::ClientProxy::State *)v3, *(unsigned __int16 *)(a1 + 56), 0);
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v40 = 0xAAAAAAAAAAAAAAAALL;
  v50 = v5;
  v49 = v5;
  v48 = v5;
  v47 = v5;
  v46 = v5;
  v45 = v5;
  v44 = v5;
  v43 = v5;
  v42 = v5;
  *(_OWORD *)v38 = v5;
  v39 = v5;
  v36 = v5;
  v37 = v5;
  v34 = v5;
  v35 = v5;
  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v41 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v33 + *(_QWORD *)(v33 - 24)) = v9;
  v10 = (std::ios_base *)((char *)&v33 + *(_QWORD *)(v33 - 24));
  std::ios_base::init(v10, &v34);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v33 = v6 + 24;
  v41 = v7;
  std::streambuf::basic_streambuf();
  v11 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v34 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v38 = 0u;
  v39 = 0u;
  LODWORD(v40) = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"ATCS_TIMEOUT on message for svc=", 32);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" client=", 8);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
  v13 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" (txid=", 7);
  v14 = (_QWORD *)std::ostream::operator<<();
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" msgid=0x", 9);
  *(_DWORD *)((char *)v15 + *(_QWORD *)(*v15 - 24) + 8) = *(_DWORD *)((_BYTE *)v15 + *(_QWORD *)(*v15 - 24) + 8) & 0xFFFFFFB5 | 8;
  v16 = (_QWORD *)std::ostream::operator<<();
  *(_DWORD *)((char *)v16 + *(_QWORD *)(*v16 - 24) + 8) = *(_DWORD *)((_BYTE *)v16 + *(_QWORD *)(*v16 - 24) + 8) & 0xFFFFFFB5 | 2;
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") [", 3);
  v18 = *(char *)(v3 + 71);
  if (v18 >= 0)
    v19 = v3 + 48;
  else
    v19 = *(_QWORD *)(v3 + 48);
  if (v18 >= 0)
    v20 = *(unsigned __int8 *)(v3 + 71);
  else
    v20 = *(_QWORD *)(v3 + 56);
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"]", 1);
  if ((v40 & 0x10) != 0)
  {
    v25 = *((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1) < (unint64_t)v37)
    {
      *((_QWORD *)&v39 + 1) = v37;
      v25 = v37;
    }
    v26 = (const void *)*((_QWORD *)&v36 + 1);
    v22 = v25 - *((_QWORD *)&v36 + 1);
    if ((unint64_t)(v25 - *((_QWORD *)&v36 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_35;
  }
  else
  {
    if ((v40 & 8) == 0)
    {
      v22 = 0;
      HIBYTE(v32) = 0;
      v23 = __p;
      goto LABEL_24;
    }
    v26 = (const void *)v35;
    v22 = v36 - v35;
    if ((_QWORD)v36 - (_QWORD)v35 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_35:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v22 >= 0x17)
  {
    v27 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v27 = v22 | 7;
    v28 = v27 + 1;
    v23 = operator new(v27 + 1);
    __p[1] = (void *)v22;
    v32 = v28 | 0x8000000000000000;
    __p[0] = v23;
    goto LABEL_23;
  }
  HIBYTE(v32) = v22;
  v23 = __p;
  if (v22)
LABEL_23:
    memmove(v23, v26, v22);
LABEL_24:
  *((_BYTE *)v23 + v22) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 40))(v3, __p);
  if (SHIBYTE(v32) < 0)
    operator delete(__p[0]);
  v33 = *v8;
  *(uint64_t *)((char *)&v33 + *(_QWORD *)(v33 - 24)) = v8[3];
  *(_QWORD *)&v34 = v11 + 16;
  if (SBYTE7(v39) < 0)
    operator delete(v38[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AEB300](&v41);
  v24 = v52;
  if (v52)
    goto LABEL_29;
}

void sub_19E9D4C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  if (a14 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a15);
    std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v15 - 96);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v15 - 96);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AEB300](a1 + 112);
  return a1;
}

void qmi::ClientProxy::State::dumpState_sync(qmi::ClientProxy::State *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  char *v9;
  char *v10;
  NSObject *v11;
  _QWORD *v12;
  int v13;
  int v14;
  void **v15;
  void **v16;
  void **v17;
  std::string *p_p;
  void *v19[2];
  char v20;
  void *v21[2];
  char v22;
  std::string __p;
  _BYTE v24[28];
  __int16 v25;
  void **v26;
  __int16 v27;
  std::string *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = (char *)*((_QWORD *)this + 25);
  v3 = (char *)this + 208;
  memset(&__p, 0, sizeof(__p));
  if (v2 == (char *)this + 208)
    goto LABEL_30;
  std::to_string((std::string *)v24, *((unsigned __int16 *)v2 + 13));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    __p = *(std::string *)v24;
    v4 = (char *)*((_QWORD *)v2 + 1);
    if (!v4)
      goto LABEL_8;
  }
  else
  {
    __p = *(std::string *)v24;
    v4 = (char *)*((_QWORD *)v2 + 1);
    if (!v4)
    {
      do
      {
LABEL_8:
        v5 = (char *)*((_QWORD *)v2 + 2);
        v6 = *(_QWORD *)v5 == (_QWORD)v2;
        v2 = v5;
      }
      while (!v6);
      goto LABEL_10;
    }
  }
  do
  {
    v5 = v4;
    v4 = *(char **)v4;
  }
  while (v4);
LABEL_10:
  if (v5 != v3)
  {
    do
    {
      v24[23] = 1;
      strcpy(v24, ",");
      std::string::append(&__p, v24, 1uLL);
      if ((v24[23] & 0x80000000) != 0)
        operator delete(*(void **)v24);
      std::to_string((std::string *)v24, *((unsigned __int16 *)v5 + 13));
      if (v24[23] >= 0)
        v7 = v24;
      else
        v7 = *(const std::string::value_type **)v24;
      if (v24[23] >= 0)
        v8 = v24[23];
      else
        v8 = *(_QWORD *)&v24[8];
      std::string::append(&__p, v7, v8);
      if ((v24[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v24);
        v9 = (char *)*((_QWORD *)v5 + 1);
        if (v9)
        {
          do
          {
LABEL_25:
            v10 = v9;
            v9 = *(char **)v9;
          }
          while (v9);
          goto LABEL_12;
        }
      }
      else
      {
        v9 = (char *)*((_QWORD *)v5 + 1);
        if (v9)
          goto LABEL_25;
      }
      do
      {
        v10 = (char *)*((_QWORD *)v5 + 2);
        v6 = *(_QWORD *)v10 == (_QWORD)v5;
        v5 = v10;
      }
      while (!v6);
LABEL_12:
      v5 = v10;
    }
    while (v10 != v3);
  }
LABEL_30:
  v11 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    goto LABEL_42;
  v12 = (_QWORD *)((char *)this + 48);
  if (*((char *)this + 71) < 0)
    v12 = (_QWORD *)*v12;
  v13 = *((unsigned __int8 *)this + 72);
  qmi::ClientProxy::State::getStateString_sync(this, v21);
  v14 = v22;
  v15 = (void **)v21[0];
  qmi::ClientProxy::State::getTxQueueState_sync(this, v19);
  v16 = v21;
  if (v14 < 0)
    v16 = v15;
  if (v20 >= 0)
    v17 = v19;
  else
    v17 = (void **)v19[0];
  p_p = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  *(_DWORD *)v24 = 136447234;
  *(_QWORD *)&v24[4] = v12;
  *(_WORD *)&v24[12] = 1024;
  *(_DWORD *)&v24[14] = v13;
  *(_WORD *)&v24[18] = 2082;
  *(_QWORD *)&v24[20] = v16;
  v25 = 2082;
  v26 = v17;
  v27 = 2082;
  v28 = p_p;
  _os_log_impl(&dword_19E9C8000, v11, OS_LOG_TYPE_DEFAULT, "#I [%{public}s]   qmi::ClientProxy(svc=%d) [%{public}s] %{public}s ind_wake=[%{public}s]", v24, 0x30u);
  if (v20 < 0)
  {
    operator delete(v19[0]);
    if ((v22 & 0x80000000) == 0)
    {
LABEL_42:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      goto LABEL_43;
    }
  }
  else if ((v22 & 0x80000000) == 0)
  {
    goto LABEL_42;
  }
  operator delete(v21[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_43:
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_19E9D501C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

unint64_t qmi::ClientProxy::State::getStateString_sync@<X0>(qmi::ClientProxy::State *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  const char *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  size_t v15;
  unint64_t result;
  size_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  void *__p[2];
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v3 = *((int *)this + 19);
  if (v3 <= 7)
  {
    v4 = off_1E4152758[v3];
    if (*((_QWORD *)this + 24))
      goto LABEL_3;
LABEL_7:
    result = strlen(v4);
    if (result > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v17 = result;
    if (result >= 0x17)
    {
      v23 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((result | 7) != 0x17)
        v23 = result | 7;
      v24 = v23 + 1;
      v25 = operator new(v23 + 1);
      a2[1] = v17;
      a2[2] = v24 | 0x8000000000000000;
      *a2 = v25;
      a2 = v25;
    }
    else
    {
      *((_BYTE *)a2 + 23) = result;
      if (!result)
        goto LABEL_28;
    }
    result = (unint64_t)memcpy(a2, v4, v17);
LABEL_28:
    *((_BYTE *)a2 + v17) = 0;
    return result;
  }
  v4 = "(unknown)";
  if (!*((_QWORD *)this + 24))
    goto LABEL_7;
LABEL_3:
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33 = 0xAAAAAAAAAAAAAAAALL;
  v35 = v5;
  v43 = v5;
  v42 = v5;
  v41 = v5;
  v40 = v5;
  v39 = v5;
  v38 = v5;
  v37 = v5;
  v36 = v5;
  *(_OWORD *)__p = v5;
  v32 = v5;
  v29 = v5;
  v30 = v5;
  v27 = v5;
  v28 = v5;
  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v34 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v26 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v26 + *(_QWORD *)(v26 - 24)) = v9;
  v10 = (std::ios_base *)((char *)&v26 + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v10, &v27);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v26 = v6 + 24;
  v34 = v7;
  std::streambuf::basic_streambuf();
  v11 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v27 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v32 = 0u;
  LODWORD(v33) = 16;
  v12 = strlen(v4);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)v4, v12);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", lowpower=", 11);
  *(_DWORD *)((char *)v14 + *(_QWORD *)(*v14 - 24) + 8) = *(_DWORD *)((_BYTE *)v14 + *(_QWORD *)(*v14 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  if ((v33 & 0x10) != 0)
  {
    v18 = *((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1) < (unint64_t)v30)
    {
      *((_QWORD *)&v32 + 1) = v30;
      v18 = v30;
    }
    v19 = (const void *)*((_QWORD *)&v29 + 1);
    v15 = v18 - *((_QWORD *)&v29 + 1);
    if ((unint64_t)(v18 - *((_QWORD *)&v29 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_30;
  }
  else
  {
    if ((v33 & 8) == 0)
    {
      v15 = 0;
      *((_BYTE *)a2 + 23) = 0;
      goto LABEL_21;
    }
    v19 = (const void *)v28;
    v15 = v29 - v28;
    if ((_QWORD)v29 - (_QWORD)v28 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_30:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v15 >= 0x17)
  {
    v20 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v20 = v15 | 7;
    v21 = v20 + 1;
    v22 = operator new(v20 + 1);
    a2[1] = v15;
    a2[2] = v21 | 0x8000000000000000;
    *a2 = v22;
    a2 = v22;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v15;
    if (!v15)
      goto LABEL_21;
  }
  memmove(a2, v19, v15);
LABEL_21:
  *((_BYTE *)a2 + v15) = 0;
  v26 = *v8;
  *(uint64_t *)((char *)&v26 + *(_QWORD *)(v26 - 24)) = v8[3];
  *(_QWORD *)&v27 = v11 + 16;
  if (SBYTE7(v32) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AEB300](&v34);
}

void sub_19E9D53A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AEB300](v1);
  _Unwind_Resume(a1);
}

uint64_t qmi::ClientProxy::State::getTxQueueState_sync@<X0>(qmi::ClientProxy::State *this@<X0>, _BYTE *a2@<X8>)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  void *__p[2];
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33 = 0xAAAAAAAAAAAAAAAALL;
  v43 = v4;
  v42 = v4;
  v41 = v4;
  v40 = v4;
  v39 = v4;
  v38 = v4;
  v37 = v4;
  v36 = v4;
  v35 = v4;
  v32 = v4;
  *(_OWORD *)__p = v4;
  v30 = v4;
  v29 = v4;
  v28 = v4;
  v27 = v4;
  v5 = MEMORY[0x1E0DE4FE0];
  v6 = MEMORY[0x1E0DE4FE0] + 64;
  v34 = MEMORY[0x1E0DE4FE0] + 64;
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v26 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v26 + *(_QWORD *)(v26 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v26 + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v8, &v27);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v26 = v5 + 24;
  v34 = v6;
  std::streambuf::basic_streambuf();
  *(_QWORD *)&v27 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v32 = 0u;
  LODWORD(v33) = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"sendable=", 9);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)" simSlot=", 9);
  std::ostream::operator<<();
  v9 = *((_QWORD *)this + 16);
  if (v9)
  {
    v10 = *((_QWORD *)this + 12);
    if (*((_QWORD *)this + 13) != v10)
    {
      v11 = *((_QWORD *)this + 15);
      v12 = (_QWORD *)(v10 + 8 * (v11 >> 7));
      v13 = *v12 + 32 * (v11 & 0x7F);
      v14 = *(_QWORD *)(v10 + (((v11 + v9) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((v11 + v9) & 0x7F);
      while (v13 != v14)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)" sent(", 6);
        v15 = (_QWORD *)std::ostream::operator<<();
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)":0x", 3);
        *(_DWORD *)((char *)v16 + *(_QWORD *)(*v16 - 24) + 8) = *(_DWORD *)((_BYTE *)v16 + *(_QWORD *)(*v16 - 24)
                                                                                           + 8) & 0xFFFFFFB5 | 8;
        v17 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)")", 1);
        v13 += 32;
        if (v13 - *v12 == 4096)
        {
          v18 = v12[1];
          ++v12;
          v13 = v18;
        }
      }
    }
  }
  if (*((_QWORD *)this + 22))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)" pending=", 9);
    std::ostream::operator<<();
  }
  if ((v33 & 0x10) != 0)
  {
    v20 = *((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1) < (unint64_t)v30)
    {
      *((_QWORD *)&v32 + 1) = v30;
      v20 = v30;
    }
    v21 = (const void *)*((_QWORD *)&v29 + 1);
    v19 = v20 - *((_QWORD *)&v29 + 1);
    if ((unint64_t)(v20 - *((_QWORD *)&v29 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_27;
  }
  else
  {
    if ((v33 & 8) == 0)
    {
      v19 = 0;
      a2[23] = 0;
      goto LABEL_23;
    }
    v21 = (const void *)v28;
    v19 = v29 - v28;
    if ((_QWORD)v29 - (_QWORD)v28 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_27:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v19 >= 0x17)
  {
    v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v22 = v19 | 7;
    v23 = v22 + 1;
    v24 = operator new(v22 + 1);
    *((_QWORD *)a2 + 1) = v19;
    *((_QWORD *)a2 + 2) = v23 | 0x8000000000000000;
    *(_QWORD *)a2 = v24;
    a2 = v24;
    goto LABEL_22;
  }
  a2[23] = v19;
  if (v19)
LABEL_22:
    memmove(a2, v21, v19);
LABEL_23:
  a2[v19] = 0;
  v26 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&v26 + *(_QWORD *)(v26 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *(_QWORD *)&v27 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v32) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AEB300](&v34);
}

void sub_19E9D5784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::ostream::~ostream();
  MEMORY[0x1A1AEB300](a10);
  _Unwind_Resume(a1);
}

_QWORD *qmi::ClientProxy::State::createCallBacksHandler_sync(_QWORD *this)
{
  _QWORD *v1;

  if (!this[28])
  {
    v1 = this;
    this = operator new(0x18uLL);
    this[2] = 0;
    this[1] = 0;
    *this = this + 1;
    v1[28] = this;
  }
  return this;
}

void ___ZN3qmi11ClientProxy5State18deregisterResponseEt_block_invoke(uint64_t a1)
{
  uint64_t v2;
  CallbacksHandler *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(CallbacksHandler **)(v2 + 224);
  if (!v3)
  {
    v3 = (CallbacksHandler *)operator new(0x18uLL);
    *((_QWORD *)v3 + 2) = 0;
    *((_QWORD *)v3 + 1) = 0;
    *(_QWORD *)v3 = (char *)v3 + 8;
    *(_QWORD *)(v2 + 224) = v3;
  }
  CallbacksHandler::deRegisterSendCallback(v3, *(unsigned __int16 *)(a1 + 40));
}

void ___ZN3qmi11ClientProxy5State14sendIndicationENSt3__16vectorIhNS2_9allocatorIhEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v2 + 224))
  {
    qmi::ClientProxy::State::handleIndication_sync(*(_QWORD *)(a1 + 32), *(const void **)(a1 + 40), *(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40));
  }
  else
  {
    v3 = operator new(0x18uLL);
    v3[2] = 0;
    v3[1] = 0;
    *v3 = v3 + 1;
    *(_QWORD *)(v2 + 224) = v3;
    qmi::ClientProxy::State::handleIndication_sync(v2, *(const void **)(a1 + 40), *(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40));
  }
}

_QWORD *__copy_helper_block_e8_40c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  size_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;

  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  v3 = *(_BYTE **)(a2 + 40);
  v2 = *(_BYTE **)(a2 + 48);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    v5 = result;
    if ((v4 & 0x8000000000000000) != 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v2 - v3);
    v5[5] = v6;
    v5[6] = v6;
    v7 = &v6[v4];
    v5[7] = &v6[v4];
    result = memcpy(v6, v3, v4);
    v5[6] = v7;
  }
  return result;
}

void sub_19E9D5964(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void qmi::ClientProxy::State::setConnected_sync(qmi::ClientProxy::State *this)
{
  NSObject *v2;
  int v3;
  NSObject *v4;
  _QWORD *v5;
  int v6;
  int v7;
  xpc_object_t v8;
  xpc_object_t v9;
  _QWORD *v10;
  uint64_t v11;
  const char *v12;
  xpc_object_t v13;
  xpc_object_t v14;
  uint64_t v15;
  NSObject *v16;
  _QWORD *v17;
  NSObject *v18;
  _QWORD *v19;
  int v20;
  int v21;
  xpc_object_t object;
  uint8_t buf[4];
  _QWORD *v24;
  __int16 v25;
  _WORD v26[9];

  *(_QWORD *)&v26[5] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v10 = (_QWORD *)((char *)this + 48);
    if (*((char *)this + 71) < 0)
      v10 = (_QWORD *)*v10;
    v11 = *((int *)this + 19);
    if (v11 > 7)
      v12 = "(unknown)";
    else
      v12 = off_1E4152758[v11];
    *(_DWORD *)buf = 136315394;
    v24 = v10;
    v25 = 2080;
    *(_QWORD *)v26 = v12;
    _os_log_debug_impl(&dword_19E9C8000, v2, OS_LOG_TYPE_DEBUG, "#D [%s]: Client connected to modem; old state=%s",
      buf,
      0x16u);
    v3 = *((_DWORD *)this + 19);
    if (v3 != 1)
      goto LABEL_3;
  }
  else
  {
    v3 = *((_DWORD *)this + 19);
    if (v3 != 1)
    {
LABEL_3:
      if (!v3)
      {
        v4 = *((_QWORD *)this + 5);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          v5 = (_QWORD *)((char *)this + 48);
          if (*((char *)this + 71) < 0)
            v5 = (_QWORD *)*v5;
          v6 = *((unsigned __int8 *)this + 72);
          v7 = (*(uint64_t (**)(qmi::ClientProxy::State *))(*(_QWORD *)this + 64))(this);
          *(_DWORD *)buf = 136315650;
          v24 = v5;
          v25 = 1024;
          *(_DWORD *)v26 = v6;
          v26[2] = 1024;
          *(_DWORD *)&v26[3] = v7;
          _os_log_impl(&dword_19E9C8000, v4, OS_LOG_TYPE_DEFAULT, "#I [%s]: Client id received successfully: svc=0x%x id=%d; starting client",
            buf,
            0x18u);
        }
        if (*((_QWORD *)this + 24))
        {
          *((_DWORD *)this + 19) = 5;
          qmi::ClientProxy::State::checkIfLowPower_sync(this);
        }
        else
        {
          *((_DWORD *)this + 19) = 4;
        }
        v8 = xpc_dictionary_create(0, 0, 0);
        if (v8 || (v8 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1A1AEB9A8](v8) == MEMORY[0x1E0C812F8])
          {
            xpc_retain(v8);
            v9 = v8;
          }
          else
          {
            v9 = xpc_null_create();
          }
        }
        else
        {
          v9 = xpc_null_create();
          v8 = 0;
        }
        xpc_release(v8);
        v13 = xpc_int64_create(2);
        if (!v13)
          v13 = xpc_null_create();
        xpc_dictionary_set_value(v9, "status", v13);
        v14 = xpc_null_create();
        xpc_release(v13);
        xpc_release(v14);
        v15 = *((_QWORD *)this + 29);
        if (v15)
        {
          object = v9;
          if (v9)
            xpc_retain(v9);
          else
            object = xpc_null_create();
          (*(void (**)(uint64_t, xpc_object_t *))(*(_QWORD *)v15 + 24))(v15, &object);
          xpc_release(object);
          object = 0;
          qmi::ClientProxy::State::sendIfPossible_sync(this);
        }
        else
        {
          v16 = *((_QWORD *)this + 5);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            v17 = (_QWORD *)((char *)this + 48);
            if (*((char *)this + 71) < 0)
              v17 = (_QWORD *)*v17;
            *(_DWORD *)buf = 136315138;
            v24 = v17;
            _os_log_error_impl(&dword_19E9C8000, v16, OS_LOG_TYPE_ERROR, "Client: [%s], invalid fTransport when setting connected state", buf, 0xCu);
          }
        }
        xpc_release(v9);
      }
      return;
    }
  }
  v18 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    v19 = (_QWORD *)((char *)this + 48);
    if (*((char *)this + 71) < 0)
      v19 = (_QWORD *)*v19;
    v20 = *((unsigned __int8 *)this + 72);
    v21 = (*(uint64_t (**)(qmi::ClientProxy::State *))(*(_QWORD *)this + 64))(this);
    *(_DWORD *)buf = 136315650;
    v24 = v19;
    v25 = 1024;
    *(_DWORD *)v26 = v20;
    v26[2] = 1024;
    *(_DWORD *)&v26[3] = v21;
    _os_log_impl(&dword_19E9C8000, v18, OS_LOG_TYPE_DEFAULT, "#I [%s]: Received client id (svc=0x%x id=%d), but client was manually released; releasing id now.",
      buf,
      0x18u);
  }
  (*(void (**)(qmi::ClientProxy::State *))(*(_QWORD *)this + 24))(this);
}

void sub_19E9D5D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void qmi::ClientProxy::State::triggerLowPower_sync(qmi::ClientProxy::State *this, const group *a2)
{
  unsigned int v4;
  NSObject *v5;
  _QWORD *v6;
  const char *v7;
  char *gr_name;
  NSObject *v9;
  NSObject *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  NSObject *v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  char *v29;
  _QWORD v30[6];
  std::__shared_weak_count *v31;
  dispatch_object_t v32;
  xpc_object_t object;
  uint8_t buf[4];
  _QWORD *v35;
  __int16 v36;
  void *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)this + 19);
  if (v4 <= 7)
  {
    if (((1 << v4) & 0x8E) != 0)
      return;
    if (((1 << v4) & 0x60) != 0)
    {
      v5 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = (_QWORD *)((char *)this + 48);
        if (*((char *)this + 71) < 0)
          v6 = (_QWORD *)*v6;
        v7 = "(unknown)";
        if (v4 == 5)
          v7 = "kLowPowerPendingSends";
        if (v4 == 6)
          v7 = "kLowPowerStalled";
        *(_DWORD *)buf = 136315394;
        v35 = v6;
        v36 = 2080;
        v37 = (void *)v7;
        _os_log_impl(&dword_19E9C8000, v5, OS_LOG_TYPE_DEFAULT, "#E [%s]: ERROR: Triggered enter-low-power but we are in state %s already!", buf, 0x16u);
      }
    }
  }
  gr_name = a2->gr_name;
  if (a2->gr_name)
  {
    dispatch_retain((dispatch_object_t)a2->gr_name);
    dispatch_group_enter((dispatch_group_t)gr_name);
  }
  v9 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = gr_name;
  if (v9)
  {
    dispatch_group_leave(v9);
    dispatch_release(v9);
  }
  if (*((_BYTE *)this + 81))
  {
    v10 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v28 = (_QWORD *)((char *)this + 48);
      if (*((char *)this + 71) < 0)
        v28 = (_QWORD *)*v28;
      v29 = a2->gr_name;
      *(_DWORD *)buf = 136315394;
      v35 = v28;
      v36 = 2048;
      v37 = v29;
      _os_log_debug_impl(&dword_19E9C8000, v10, OS_LOG_TYPE_DEBUG, "#D [%s]: Client low-power group ++ Holding open (%p)", buf, 0x16u);
    }
    v11 = xpc_dictionary_create(0, 0, 0);
    if (v11 || (v11 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1A1AEB9A8](v11) == MEMORY[0x1E0C812F8])
      {
        xpc_retain(v11);
        v12 = v11;
      }
      else
      {
        v12 = xpc_null_create();
      }
    }
    else
    {
      v12 = xpc_null_create();
      v11 = 0;
    }
    xpc_release(v11);
    v13 = xpc_BOOL_create(1);
    if (!v13)
      v13 = xpc_null_create();
    xpc_dictionary_set_value(v12, "low_power", v13);
    v14 = xpc_null_create();
    xpc_release(v13);
    xpc_release(v14);
    v15 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (!v15 || (v16 = *((_QWORD *)this + 1), (v17 = std::__shared_weak_count::lock(v15)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v18 = v17;
    p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
    do
      v20 = __ldxr(p_shared_weak_owners);
    while (__stxr(v20 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v18);
    }
    v23 = a2->gr_name;
    if (v23)
      dispatch_retain((dispatch_object_t)v23);
    v24 = *((_QWORD *)this + 29);
    if (v24)
    {
      object = v12;
      if (v12)
        xpc_retain(v12);
      else
        object = xpc_null_create();
      v30[0] = MEMORY[0x1E0C809B0];
      v30[1] = 1174405120;
      v30[2] = ___ZN3qmi11ClientProxy5State20triggerLowPower_syncERKN8dispatch5groupE_block_invoke;
      v30[3] = &__block_descriptor_tmp_34;
      v30[4] = this;
      v30[5] = v16;
      v31 = v18;
      do
        v27 = __ldxr(p_shared_weak_owners);
      while (__stxr(v27 + 1, p_shared_weak_owners));
      v32 = (dispatch_object_t)v23;
      if (v23)
        dispatch_retain((dispatch_object_t)v23);
      (*(void (**)(uint64_t, xpc_object_t *, _QWORD *))(*(_QWORD *)v24 + 32))(v24, &object, v30);
      xpc_release(object);
      object = 0;
      if (v32)
        dispatch_release(v32);
      if (v31)
        std::__shared_weak_count::__release_weak(v31);
    }
    else
    {
      v25 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        v26 = (_QWORD *)((char *)this + 48);
        if (*((char *)this + 71) < 0)
          v26 = (_QWORD *)*v26;
        *(_DWORD *)buf = 136315138;
        v35 = v26;
        _os_log_error_impl(&dword_19E9C8000, v25, OS_LOG_TYPE_ERROR, "Client: [%s], invalid fTransport when triggering low power state", buf, 0xCu);
      }
    }
    if (v23)
      dispatch_release((dispatch_object_t)v23);
    std::__shared_weak_count::__release_weak(v18);
    xpc_release(v12);
  }
  else
  {
    *((_DWORD *)this + 19) = 5;
    qmi::ClientProxy::State::checkIfLowPower_sync(this);
  }
}

void sub_19E9D61D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, dispatch_object_t object, xpc_object_t a18)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN3qmi11ClientProxy5State20triggerLowPower_syncERKN8dispatch5groupE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          v9 = (_QWORD *)(v3 + 48);
          if (*(char *)(v3 + 71) < 0)
            v9 = (_QWORD *)*v9;
          v10 = a1[7];
          v11 = 136315394;
          v12 = v9;
          v13 = 2048;
          v14 = v10;
          _os_log_debug_impl(&dword_19E9C8000, v6, OS_LOG_TYPE_DEBUG, "#D [%s]: Client low-power group -- Done (%p)", (uint8_t *)&v11, 0x16u);
          if (*(_QWORD *)(v3 + 192) != a1[7])
            goto LABEL_8;
          goto LABEL_6;
        }
        if (*(_QWORD *)(v3 + 192) == a1[7])
        {
LABEL_6:
          if (*(_DWORD *)(v3 + 76) == 4)
          {
            *(_DWORD *)(v3 + 76) = 5;
            qmi::ClientProxy::State::checkIfLowPower_sync((qmi::ClientProxy::State *)v3);
          }
        }
      }
LABEL_8:
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void __copy_helper_block_e8_40c48_ZTSNSt3__18weak_ptrIN3qmi11ClientProxy5StateEEE56c21_ZTSN8dispatch5groupE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  NSObject *v5;

  v2 = a2[6];
  a1[5] = a2[5];
  a1[6] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[7];
  a1[7] = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_40c48_ZTSNSt3__18weak_ptrIN3qmi11ClientProxy5StateEEE56c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;

  v2 = *(NSObject **)(a1 + 56);
  if (v2)
    dispatch_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void qmi::ClientProxy::State::triggerExitLowPower_sync(qmi::ClientProxy::State *this)
{
  uint64_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  NSObject *v5;
  _QWORD *v6;
  xpc_object_t v7;
  xpc_object_t v8;
  uint64_t v9;
  xpc_object_t object;
  uint8_t buf[4];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 29);
  if (v2)
  {
    if (*((_BYTE *)this + 80) && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2))
    {
      v3 = xpc_dictionary_create(0, 0, 0);
      if (v3 || (v3 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1A1AEB9A8](v3) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v3);
          v4 = v3;
        }
        else
        {
          v4 = xpc_null_create();
        }
      }
      else
      {
        v4 = xpc_null_create();
        v3 = 0;
      }
      xpc_release(v3);
      v7 = xpc_BOOL_create(1);
      if (!v7)
        v7 = xpc_null_create();
      xpc_dictionary_set_value(v4, "exit_low_power", v7);
      v8 = xpc_null_create();
      xpc_release(v7);
      xpc_release(v8);
      v9 = *((_QWORD *)this + 29);
      object = v4;
      if (v4)
        xpc_retain(v4);
      else
        object = xpc_null_create();
      (*(void (**)(uint64_t, xpc_object_t *))(*(_QWORD *)v9 + 24))(v9, &object);
      xpc_release(object);
      object = 0;
      xpc_release(v4);
    }
    if ((*((_DWORD *)this + 19) - 4) <= 2)
    {
      *((_DWORD *)this + 19) = 4;
      qmi::ClientProxy::State::sendIfPossible_sync(this);
    }
  }
  else
  {
    v5 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = (_QWORD *)((char *)this + 48);
      if (*((char *)this + 71) < 0)
        v6 = (_QWORD *)*v6;
      *(_DWORD *)buf = 136315138;
      v12 = v6;
      _os_log_error_impl(&dword_19E9C8000, v5, OS_LOG_TYPE_ERROR, "Client: [%s], invalid fTransport when triggering exit low power state", buf, 0xCu);
    }
  }
}

void sub_19E9D6620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void qmi::ClientProxy::State::init_sync(uint64_t a1, uint64_t a2)
{
  void (***v3)(_QWORD, uint64_t, dispatch_object_t *);
  NSObject *v4;
  _QWORD *v6;
  int v7;
  NSObject *v8;
  _QWORD *v9;
  dispatch_object_t object;
  uint8_t buf[4];
  _QWORD *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = *(void (****)(_QWORD, uint64_t, dispatch_object_t *))(a1 + 232);
  v4 = *(NSObject **)(a1 + 40);
  if (v3)
  {
    if (os_log_type_enabled(*(os_log_t *)(a1 + 40), OS_LOG_TYPE_DEFAULT))
    {
      v6 = (_QWORD *)(a1 + 48);
      if (*(char *)(a1 + 71) < 0)
        v6 = (_QWORD *)*v6;
      v7 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)buf = 136315394;
      v12 = v6;
      v13 = 1024;
      v14 = v7;
      _os_log_impl(&dword_19E9C8000, v4, OS_LOG_TYPE_DEFAULT, "#I [%s]: Client created of type 0x%x", buf, 0x12u);
      v3 = *(void (****)(_QWORD, uint64_t, dispatch_object_t *))(a1 + 232);
    }
    v8 = *(NSObject **)(a1 + 24);
    object = v8;
    if (v8)
      dispatch_retain(v8);
    (**v3)(v3, a2, &object);
    if (object)
      dispatch_release(object);
  }
  else if (os_log_type_enabled(*(os_log_t *)(a1 + 40), OS_LOG_TYPE_ERROR))
  {
    v9 = (_QWORD *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v9 = (_QWORD *)*v9;
    *(_DWORD *)buf = 136315138;
    v12 = v9;
    _os_log_error_impl(&dword_19E9C8000, v4, OS_LOG_TYPE_ERROR, "Client: [%s], invalid fTransport at time of initialization", buf, 0xCu);
  }
}

void sub_19E9D681C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  _Unwind_Resume(exception_object);
}

void qmi::ClientProxy::State::setDisconnected_sync(qmi::ClientProxy::State *this, int a2)
{
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  const char *v7;
  int v8;
  NSObject *v9;
  NSObject *v10;
  int v11;
  _QWORD *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (_QWORD *)((char *)this + 48);
    if (*((char *)this + 71) < 0)
    {
      v5 = (_QWORD *)*v5;
      v6 = *((int *)this + 19);
      if (v6 <= 7)
        goto LABEL_4;
    }
    else
    {
      v6 = *((int *)this + 19);
      if (v6 <= 7)
      {
LABEL_4:
        v7 = off_1E4152758[v6];
LABEL_7:
        v11 = 136315650;
        v12 = v5;
        v13 = 1024;
        v14 = a2;
        v15 = 2080;
        v16 = v7;
        _os_log_impl(&dword_19E9C8000, v4, OS_LOG_TYPE_DEFAULT, "#I [%s]: Client disconnect from modem; temp failure=%d; old state=%s",
          (uint8_t *)&v11,
          0x1Cu);
        goto LABEL_8;
      }
    }
    v7 = "(unknown)";
    goto LABEL_7;
  }
LABEL_8:
  v8 = *((_DWORD *)this + 19);
  if ((v8 - 4) >= 3)
  {
    if (!v8)
    {
      qmi::ClientProxy::State::cancelAllMessages_sync(this);
      v10 = *((_QWORD *)this + 24);
      *((_QWORD *)this + 24) = 0;
      if (v10)
      {
        dispatch_group_leave(v10);
        dispatch_release(v10);
      }
      if ((a2 & 1) != 0)
        (*(void (**)(qmi::ClientProxy::State *))(*(_QWORD *)this + 32))(this);
      else
        qmi::ClientProxy::State::sendDisconnectMessage_sync(this, 0);
    }
  }
  else
  {
    qmi::ClientProxy::State::cancelAllMessages_sync(this);
    v9 = *((_QWORD *)this + 24);
    *((_QWORD *)this + 24) = 0;
    if (v9)
    {
      dispatch_group_leave(v9);
      dispatch_release(v9);
    }
    qmi::ClientProxy::State::sendDisconnectMessage_sync(this, 1);
  }
}

uint64_t qmi::ClientProxy::State::Transaction::Transaction(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  *(_DWORD *)result = a3;
  v4 = *a2;
  v3 = a2[1];
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  *(_DWORD *)result = a3;
  v4 = *a2;
  v3 = a2[1];
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void qmi::ClientProxy::State::Transaction::~Transaction(qmi::ClientProxy::State::Transaction *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  NSObject *v6;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    dispatch_source_cancel(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = *((_QWORD *)this + 1);
    if (!v6)
      return;
  }
  else
  {
LABEL_7:
    v6 = *((_QWORD *)this + 1);
    if (!v6)
      return;
  }
  dispatch_release(v6);
}

{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  NSObject *v6;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    dispatch_source_cancel(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = *((_QWORD *)this + 1);
    if (!v6)
      return;
  }
  else
  {
LABEL_7:
    v6 = *((_QWORD *)this + 1);
    if (!v6)
      return;
  }
  dispatch_release(v6);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

__n128 qmi::ClientProxy::State::Transaction::Transaction(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  return result;
}

{
  __n128 result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  return result;
}

uint64_t qmi::ClientProxy::State::Transaction::operator=(uint64_t a1, int *a2)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 3);
  v5 = *(_OWORD *)(a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  v6 = *(std::__shared_weak_count **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  *(_DWORD *)a1 = v3;
  v7 = *(NSObject **)(a1 + 8);
  *(_OWORD *)(a1 + 8) = v5;
  if (v7)
    dispatch_source_cancel(v7);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (!v7)
        return a1;
      goto LABEL_8;
    }
  }
  if (v7)
LABEL_8:
    dispatch_release(v7);
  return a1;
}

void ___ZN3qmi11ClientProxy5State11Transaction10startTimerEP16dispatch_queue_sU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 40));
}

uint64_t qmi::QmiClientProxyAdapter::QmiClientProxyAdapter(uint64_t a1, __int128 *a2, NSObject **a3, int a4, uint64_t *a5)
{
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v18[2];

  *(_QWORD *)a1 = &unk_1E41526B8;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v10 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v10;
  }
  *(_BYTE *)(a1 + 32) = a4;
  *(_BYTE *)(a1 + 33) = -1;
  *(_QWORD *)(a1 + 36) = 0x2FFFFFFFFLL;
  *(_BYTE *)(a1 + 44) = 1;
  v11 = *a5;
  v12 = (std::__shared_weak_count *)a5[1];
  v18[0] = v11;
  v18[1] = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  qmi::ClientProxy::State::State(a1 + 48, a2, a3, a4, v18);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *(_QWORD *)a1 = off_1E4152270;
  *(_QWORD *)(a1 + 48) = &unk_1E4152338;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  return a1;
}

void sub_19E9D6D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;
  uint64_t v11;

  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  *(_QWORD *)v9 = v11 + 16;
  if (*(char *)(v9 + 31) < 0)
    operator delete(*v10);
  _Unwind_Resume(a1);
}

uint64_t qmi::QmiClientProxyAdapter::QmiClientProxyAdapter(uint64_t a1, uint64_t *a2, __int128 *a3, int a4, uint64_t *a5)
{
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  NSObject **v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD v29[3];
  std::__shared_weak_count *v30;

  *(_QWORD *)a1 = &unk_1E41526B8;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v10;
  }
  *(_BYTE *)(a1 + 32) = a4;
  *(_BYTE *)(a1 + 33) = -1;
  *(_QWORD *)(a1 + 36) = 0x2FFFFFFFFLL;
  *(_BYTE *)(a1 + 44) = 1;
  v11 = *a2;
  v12 = (std::__shared_weak_count *)a2[1];
  v29[2] = *a2;
  v30 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = (NSObject **)(v11 + 24);
  v16 = *a5;
  v17 = (std::__shared_weak_count *)a5[1];
  v29[0] = v16;
  v29[1] = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  qmi::ClientProxy::State::State(a1 + 48, a3, v15, a4, v29);
  if (v17)
  {
    v20 = (unint64_t *)&v17->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v22 = v30;
  if (v30)
  {
    v23 = (unint64_t *)&v30->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  *(_QWORD *)a1 = off_1E4152270;
  *(_QWORD *)(a1 + 48) = &unk_1E4152338;
  *(_QWORD *)(a1 + 296) = *a2;
  v25 = a2[1];
  *(_QWORD *)(a1 + 304) = v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 16);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  return a1;
}

void sub_19E9D6F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  void **v12;
  uint64_t v13;

  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  *(_QWORD *)v11 = v13 + 16;
  if (*(char *)(v11 + 31) < 0)
    operator delete(*v12);
  _Unwind_Resume(a1);
}

void qmi::QmiClientProxyAdapter::shutdown(qmi::QmiClientProxyAdapter *this)
{
  NSObject *v1;
  char *v2;
  qmi::QmiClientProxyAdapter *v3;
  _QWORD block[6];

  v3 = this;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi11ClientProxy5StateEE20execute_wrapped_syncIZNS1_21QmiClientProxyAdapter8shutdownEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_47;
  block[4] = (char *)this + 56;
  block[5] = &v3;
  v2 = (char *)this + 72;
  v1 = *((_QWORD *)this + 9);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void `non-virtual thunk to'qmi::QmiClientProxyAdapter::shutdown(qmi::QmiClientProxyAdapter *this)
{
  NSObject *v1;
  char *v2;
  char *v3;
  _QWORD block[6];

  v3 = (char *)this - 48;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi11ClientProxy5StateEE20execute_wrapped_syncIZNS1_21QmiClientProxyAdapter8shutdownEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_47;
  block[4] = (char *)this + 8;
  block[5] = &v3;
  v2 = (char *)this + 24;
  v1 = *((_QWORD *)this + 3);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void qmi::QmiClientProxyAdapter::disconnect_sync(qmi::QmiClientProxyAdapter *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t (*v4)(QMux *__hidden);
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22[3];
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v24 = 0;
  v25 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2)
  {
    v3 = 0;
    goto LABEL_7;
  }
  v3 = std::__shared_weak_count::lock(v2);
  v25 = v3;
  if (!v3 || ((v24 = *((_QWORD *)this + 37)) != 0 ? (v4 = QMux::BOOL_true_type) : (v4 = 0), !v4))
  {
LABEL_7:
    if (!v3)
      return;
    goto LABEL_26;
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (!v5 || (v6 = *((_QWORD *)this + 7), (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v12 = v7;
  v13 = v6 - 48;
  if (!v6)
    v13 = 0;
  v22[2] = v13;
  v23 = v7;
  v22[0] = v13;
  v22[1] = (uint64_t)v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v15 = __ldxr(p_shared_owners);
  while (__stxr(v15 + 1, p_shared_owners));
  QMux::remove(&v24, v22, v8, v9, v10, v11);
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  v17 = v23;
  if (!v23)
    goto LABEL_25;
  v18 = (unint64_t *)&v23->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    v3 = v25;
    if (!v25)
      return;
  }
  else
  {
LABEL_25:
    v3 = v25;
    if (!v25)
      return;
  }
LABEL_26:
  v20 = (unint64_t *)&v3->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_19E9D71FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  QMux::~QMux((QMux *)&a13);
  _Unwind_Resume(a1);
}

void sub_19E9D7220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  QMux::~QMux((QMux *)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'qmi::QmiClientProxyAdapter::disconnect_sync(qmi::QmiClientProxyAdapter *this)
{
  qmi::QmiClientProxyAdapter::disconnect_sync((qmi::QmiClientProxyAdapter *)((char *)this - 48));
}

void qmi::QmiClientProxyAdapter::connect_sync(qmi::QmiClientProxyAdapter *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t (*v4)(QMux *__hidden);
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22[3];
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v24 = 0;
  v25 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (!v2)
  {
    v3 = 0;
    goto LABEL_7;
  }
  v3 = std::__shared_weak_count::lock(v2);
  v25 = v3;
  if (!v3 || ((v24 = *((_QWORD *)this + 37)) != 0 ? (v4 = QMux::BOOL_true_type) : (v4 = 0), !v4))
  {
LABEL_7:
    if (!v3)
      return;
    goto LABEL_26;
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (!v5 || (v6 = *((_QWORD *)this + 7), (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v12 = v7;
  v13 = v6 - 48;
  if (!v6)
    v13 = 0;
  v22[2] = v13;
  v23 = v7;
  v22[0] = v13;
  v22[1] = (uint64_t)v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v15 = __ldxr(p_shared_owners);
  while (__stxr(v15 + 1, p_shared_owners));
  QMux::add(&v24, v22, v8, v9, v10, v11);
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  v17 = v23;
  if (!v23)
    goto LABEL_25;
  v18 = (unint64_t *)&v23->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    v3 = v25;
    if (!v25)
      return;
  }
  else
  {
LABEL_25:
    v3 = v25;
    if (!v25)
      return;
  }
LABEL_26:
  v20 = (unint64_t *)&v3->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_19E9D73CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  QMux::~QMux((QMux *)&a13);
  _Unwind_Resume(a1);
}

void sub_19E9D73F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  QMux::~QMux((QMux *)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'qmi::QmiClientProxyAdapter::connect_sync(qmi::QmiClientProxyAdapter *this)
{
  qmi::QmiClientProxyAdapter::connect_sync((qmi::QmiClientProxyAdapter *)((char *)this - 48));
}

void qmi::QmiClientProxyAdapter::invokeReset_sync(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  uint64_t (*v7)(QMux *__hidden);
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::string v10;

  v4 = *(std::__shared_weak_count **)(a1 + 304);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_14;
  }
  v5 = std::__shared_weak_count::lock(v4);
  if (!v5)
    goto LABEL_14;
  v6 = *(_QWORD **)(a1 + 296);
  v7 = QMux::BOOL_true_type;
  if (!v6)
    v7 = 0;
  if (!v7 || !v6)
    goto LABEL_14;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v10 = *(std::string *)a2;
  QMux::State::invokeReset(v6, (uint64_t)&v10);
  if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_14:
    if (!v5)
      return;
    goto LABEL_15;
  }
  operator delete(v10.__r_.__value_.__l.__data_);
LABEL_15:
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_19E9D752C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  QMux::~QMux((QMux *)&a9);
  _Unwind_Resume(a1);
}

void sub_19E9D7540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  QMux::~QMux((QMux *)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'qmi::QmiClientProxyAdapter::invokeReset_sync(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  uint64_t (*v7)(QMux *__hidden);
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::string v10;

  v4 = *(std::__shared_weak_count **)(a1 + 256);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_14;
  }
  v5 = std::__shared_weak_count::lock(v4);
  if (!v5)
    goto LABEL_14;
  v6 = *(_QWORD **)(a1 + 248);
  v7 = QMux::BOOL_true_type;
  if (!v6)
    v7 = 0;
  if (!v7 || !v6)
    goto LABEL_14;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v10 = *(std::string *)a2;
  QMux::State::invokeReset(v6, (uint64_t)&v10);
  if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_14:
    if (!v5)
      return;
    goto LABEL_15;
  }
  operator delete(v10.__r_.__value_.__l.__data_);
LABEL_15:
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_19E9D7684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  QMux::~QMux((QMux *)&a9);
  _Unwind_Resume(a1);
}

void sub_19E9D7698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  QMux::~QMux((QMux *)&a9);
  _Unwind_Resume(a1);
}

uint64_t qmi::QmiClientProxyAdapter::updateLogLevel_sync(uint64_t result, int a2)
{
  if (a2 <= 69)
  {
    if (a2 == 10)
    {
      *(_DWORD *)(result + 40) = 4;
      return result;
    }
    if (a2 == 20)
    {
      *(_DWORD *)(result + 40) = 3;
      return result;
    }
  }
  else
  {
    switch(a2)
    {
      case 70:
LABEL_5:
        *(_DWORD *)(result + 40) = 1;
        return result;
      case 255:
        *(_DWORD *)(result + 40) = 0;
        return result;
      case 80:
        goto LABEL_5;
    }
  }
  *(_DWORD *)(result + 40) = 2;
  return result;
}

uint64_t `non-virtual thunk to'qmi::QmiClientProxyAdapter::updateLogLevel_sync(uint64_t result, int a2)
{
  if (a2 <= 69)
  {
    if (a2 == 10)
    {
      *(_DWORD *)(result - 8) = 4;
      return result;
    }
    if (a2 == 20)
    {
      *(_DWORD *)(result - 8) = 3;
      return result;
    }
  }
  else
  {
    switch(a2)
    {
      case 70:
LABEL_5:
        *(_DWORD *)(result - 8) = 1;
        return result;
      case 255:
        *(_DWORD *)(result - 8) = 0;
        return result;
      case 80:
        goto LABEL_5;
    }
  }
  *(_DWORD *)(result - 8) = 2;
  return result;
}

uint64_t qmi::QmiClientProxyAdapter::getClientId_sync(qmi::QmiClientProxyAdapter *this)
{
  return *((unsigned __int8 *)this + 33);
}

uint64_t `non-virtual thunk to'qmi::QmiClientProxyAdapter::getClientId_sync(qmi::QmiClientProxyAdapter *this)
{
  return *((unsigned __int8 *)this - 15);
}

uint64_t qmi::QmiClientProxyAdapter::setMaxLogBytes_sync(uint64_t this, int a2)
{
  *(_DWORD *)(this + 36) = a2;
  return this;
}

uint64_t `non-virtual thunk to'qmi::QmiClientProxyAdapter::setMaxLogBytes_sync(uint64_t this, int a2)
{
  *(_DWORD *)(this - 12) = a2;
  return this;
}

void qmi::QmiClientProxyAdapter::notifyRegisterFailure(uint64_t a1)
{
  int isInternalError;

  isInternalError = qmi::isInternalError();
  qmi::ClientProxy::State::setDisconnected_sync((qmi::ClientProxy::State *)(a1 + 48), isInternalError);
}

void qmi::QmiClientProxyAdapter::notifyRegistered(qmi::QmiClientProxyAdapter *this)
{
  qmi::ClientProxy::State::setConnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48));
}

void qmi::QmiClientProxyAdapter::revokeRegistration(qmi::QmiClientProxyAdapter *this)
{
  qmi::ClientProxy::State::setDisconnected_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48), 1);
}

void qmi::QmiClientProxyAdapter::enterPowerMode(uint64_t a1, char *object, int a3)
{
  qmi::ClientProxy::State *v4;
  group var18;

  if (a3 == 1)
  {
    v4 = (qmi::ClientProxy::State *)(a1 + 48);
    var18.gr_name = object;
    if (object)
      dispatch_retain((dispatch_object_t)object);
    qmi::ClientProxy::State::triggerLowPower_sync(v4, &var18);
    if (object)
      dispatch_release((dispatch_object_t)object);
  }
  else if (!a3)
  {
    qmi::ClientProxy::State::triggerExitLowPower_sync((qmi::ClientProxy::State *)(a1 + 48));
  }
}

void sub_19E9D785C(_Unwind_Exception *exception_object)
{
  NSObject *v1;

  if (v1)
    dispatch_release(v1);
  _Unwind_Resume(exception_object);
}

uint64_t *qmi::QmiClientProxyAdapter::appendPowerModeSet(uint64_t a1, uint64_t *a2)
{
  return std::set<unsigned short>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned short,std::__tree_node<unsigned short,void *> *,long>>(a2, *(unsigned __int16 **)(a1 + 248), (unsigned __int16 *)(a1 + 256));
}

uint64_t *std::set<unsigned short>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned short,std::__tree_node<unsigned short,void *> *,long>>(uint64_t *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unsigned __int16 *v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned __int16 *v9;
  uint64_t *v10;
  _WORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  unsigned __int16 *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18[11];

  if (a2 != a3)
  {
    v18[9] = v3;
    v18[10] = v4;
    v6 = a2;
    v7 = result;
    v8 = result + 1;
    do
    {
      v17 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      v18[0] = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      result = std::__tree<unsigned short>::__find_equal<unsigned short>(v7, v8, v18, &v17, v6 + 13);
      if (*result)
      {
        v9 = (unsigned __int16 *)*((_QWORD *)v6 + 1);
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = result;
        v11 = operator new(0x20uLL);
        v11[13] = v6[13];
        v12 = v18[0];
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = v12;
        *v10 = (uint64_t)v11;
        v13 = *(_QWORD **)*v7;
        if (v13)
        {
          *v7 = (uint64_t)v13;
          v14 = (uint64_t *)*v10;
        }
        else
        {
          v14 = (uint64_t *)v11;
        }
        result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], v14);
        ++v7[2];
        v9 = (unsigned __int16 *)*((_QWORD *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_11:
            v15 = v9;
            v9 = *(unsigned __int16 **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v15 = (unsigned __int16 *)*((_QWORD *)v6 + 2);
        v16 = *(_QWORD *)v15 == (_QWORD)v6;
        v6 = v15;
      }
      while (!v16);
LABEL_3:
      v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

void qmi::QmiClientProxyAdapter::dumpState(qmi::QmiClientProxyAdapter *this)
{
  qmi::ClientProxy::State::dumpState_sync((qmi::QmiClientProxyAdapter *)((char *)this + 48));
}

void qmi::QmiClientProxyAdapter::~QmiClientProxyAdapter(qmi::QmiClientProxyAdapter *this)
{
  qmi::ClientProxy::State *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = off_1E4152270;
  *((_QWORD *)this + 6) = &unk_1E4152338;
  v2 = (qmi::QmiClientProxyAdapter *)((char *)this + 48);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  qmi::ClientProxy::State::~State(v2);
  *(_QWORD *)this = &unk_1E41526B8;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  qmi::ClientProxy::State *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = off_1E4152270;
  *((_QWORD *)this + 6) = &unk_1E4152338;
  v2 = (qmi::QmiClientProxyAdapter *)((char *)this + 48);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  qmi::ClientProxy::State::~State(v2);
  *(_QWORD *)this = &unk_1E41526B8;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  operator delete(this);
}

void `non-virtual thunk to'qmi::QmiClientProxyAdapter::~QmiClientProxyAdapter(qmi::QmiClientProxyAdapter *this)
{
  std::__shared_weak_count *v2;

  *((_QWORD *)this - 6) = off_1E4152270;
  *(_QWORD *)this = &unk_1E4152338;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  qmi::ClientProxy::State::~State(this);
  *((_QWORD *)this - 6) = &unk_1E41526B8;
  if (*((char *)this - 17) < 0)
    operator delete(*((void **)this - 5));
}

{
  char *v2;
  std::__shared_weak_count *v3;

  *((_QWORD *)this - 6) = off_1E4152270;
  v2 = (char *)this - 48;
  *(_QWORD *)this = &unk_1E4152338;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  qmi::ClientProxy::State::~State(this);
  *((_QWORD *)this - 6) = &unk_1E41526B8;
  if (*((char *)this - 17) < 0)
    operator delete(*((void **)this - 5));
  operator delete(v2);
}

void std::vector<unsigned char>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E4151B08, MEMORY[0x1E0DE42D0]);
}

void sub_19E9D7BF0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

_QWORD *ctu::SharedSynchronizable<qmi::ClientProxy::State>::~SharedSynchronizable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  v2 = a1[3];
  if (v2)
    dispatch_release(v2);
  v3 = a1[2];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

uint64_t std::insert_iterator<std::set<unsigned short>>::operator=[abi:ne180100](uint64_t a1, unsigned __int16 *a2)
{
  uint64_t *v4;
  _QWORD **v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t *v16;
  uint64_t *v17;

  v5 = *(_QWORD ***)a1;
  v4 = *(uint64_t **)(a1 + 8);
  v16 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  v17 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  v6 = std::__tree<unsigned short>::__find_equal<unsigned short>(v5, v4, &v17, &v16, a2);
  v7 = (_QWORD *)*v6;
  if (*v6)
  {
    *(_QWORD *)(a1 + 8) = v7;
    v8 = (_QWORD *)v7[1];
    if (!v8)
    {
      do
      {
LABEL_9:
        v13 = (_QWORD *)v7[2];
        v14 = *v13 == (_QWORD)v7;
        v7 = v13;
      }
      while (!v14);
      goto LABEL_11;
    }
  }
  else
  {
    v9 = v6;
    v7 = operator new(0x20uLL);
    *((_WORD *)v7 + 13) = *a2;
    v10 = v17;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v10;
    *v9 = (uint64_t)v7;
    v11 = (_QWORD *)**v5;
    v12 = v7;
    if (v11)
    {
      *v5 = v11;
      v12 = (uint64_t *)*v9;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v5[1], v12);
    v5[2] = (_QWORD *)((char *)v5[2] + 1);
    *(_QWORD *)(a1 + 8) = v7;
    v8 = (_QWORD *)v7[1];
    if (!v8)
      goto LABEL_9;
  }
  do
  {
    v13 = v8;
    v8 = (_QWORD *)*v8;
  }
  while (v8);
LABEL_11:
  *(_QWORD *)(a1 + 8) = v13;
  return a1;
}

uint64_t *std::__tree<unsigned short>::__find_equal<unsigned short>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned __int16 *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((unsigned __int16 *)a2 + 13), v6 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (uint64_t *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (*((unsigned __int16 *)v10 + 13) < v16)
      goto LABEL_17;
    v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = (uint64_t *)v18;
          v20 = *(unsigned __int16 *)(v18 + 26);
          if (v16 >= v20)
            break;
          v18 = *v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (uint64_t *)a2[1];
      do
      {
        v13 = v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (uint64_t *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *((unsigned __int16 *)v13 + 13))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = (uint64_t *)v22;
            v24 = *(unsigned __int16 *)(v22 + 26);
            if (v6 >= v24)
              break;
            v22 = *v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 == result)
    return result;
  while (1)
  {
    v2 = a2[2];
    if (*(_BYTE *)(v2 + 24))
      return result;
    v3 = *(uint64_t **)(v2 + 16);
    v4 = *v3;
    if (*v3 != v2)
      break;
    v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(_BYTE *)(v2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
          goto LABEL_15;
      }
      else
      {
        v9 = *(uint64_t **)(v2 + 8);
        v10 = *v9;
        *(_QWORD *)(v2 + 8) = *v9;
        if (v10)
        {
          *(_QWORD *)(v10 + 16) = v2;
          v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
        *v9 = v2;
        *(_QWORD *)(v2 + 16) = v9;
        v3 = (uint64_t *)v9[2];
        v2 = *v3;
        *((_BYTE *)v9 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
LABEL_15:
          *(_QWORD *)(v11 + 16) = v3;
      }
      *(_QWORD *)(v2 + 16) = v3[2];
      *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
      *(_QWORD *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(_BYTE *)(v2 + 24) = 1;
    a2 = v3;
    *((_BYTE *)v3 + 24) = v3 == result;
    *v5 = 1;
    if (v3 == result)
      return result;
  }
  if (v4)
  {
    v6 = *(unsigned __int8 *)(v4 + 24);
    v5 = (_BYTE *)(v4 + 24);
    if (!v6)
      goto LABEL_3;
  }
  if (*(uint64_t **)v2 == a2)
  {
    v12 = a2[1];
    *(_QWORD *)v2 = v12;
    if (v12)
    {
      *(_QWORD *)(v12 + 16) = v2;
      v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(_QWORD *)(v2 + 16) = a2;
    v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((_BYTE *)a2 + 24) = 1;
  *((_BYTE *)v3 + 24) = 0;
  v13 = (uint64_t *)v3[1];
  v14 = *v13;
  v3[1] = *v13;
  if (v14)
    *(_QWORD *)(v14 + 16) = v3;
  v13[2] = v3[2];
  *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v13;
  *v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _QWORD v13[2];
  std::locale v14;

  v13[0] = 0xAAAAAAAAAAAAAAAALL;
  v13[1] = 0xAAAAAAAAAAAAAAAALL;
  MEMORY[0x1A1AEB228](v13, a1);
  if (LOBYTE(v13[0]))
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1A1AEB234](v13);
  return a1;
}

void sub_19E9D82B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x1A1AEB234](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x19E9D8290);
}

void sub_19E9D82F8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__b[3];

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if ((uint64_t)v12 >= 1)
    {
      memset(__b, 170, sizeof(__b));
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        __b[2] = (void *)(v15 | 0x8000000000000000);
        __b[0] = v13;
      }
      else
      {
        HIBYTE(__b[2]) = v12;
        v13 = __b;
      }
      memset(v13, __c, v12);
      *((_BYTE *)v13 + v12) = 0;
      if (SHIBYTE(__b[2]) >= 0)
        v16 = __b;
      else
        v16 = (void **)__b[0];
      v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 96))(v6, v16, v12);
      v18 = v17;
      if (SHIBYTE(__b[2]) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12)
          return 0;
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(_QWORD *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_19E9D84A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__tree<unsigned short>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<unsigned short>::destroy(a1, *a2);
    std::__tree<unsigned short>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE4F80] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E28], MEMORY[0x1E0DE43F0]);
}

void std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(unsigned short)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(unsigned short)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(unsigned short)>>>>::destroy(_QWORD *a1)
{
  const void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(unsigned short)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(unsigned short)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(unsigned short)>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(unsigned short)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(unsigned short)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(unsigned short)>>>>::destroy(a1[1]);
    v2 = (const void *)a1[5];
    if (v2)
      _Block_release(v2);
    operator delete(a1);
  }
}

void ctu::SharedSynchronizable<qmi::ClientProxy::State>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi11ClientProxy5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &__block_descriptor_tmp_38;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN3qmi11ClientProxy5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __copy_helper_block_e8_32b40c52_ZTSNSt3__110shared_ptrIKN3qmi11ClientProxy5StateEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  _Block_object_assign(a1 + 4, *(const void **)(a2 + 32), 7);
  v4 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void __destroy_helper_block_e8_32b40c52_ZTSNSt3__110shared_ptrIKN3qmi11ClientProxy5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    _Block_object_dispose(*(const void **)(a1 + 32), 7);
  }
  else
  {
LABEL_5:
    _Block_object_dispose(*(const void **)(a1 + 32), 7);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<qmi::ClientProxy::State>::execute_wrapped<qmi::ClientProxy::State::registerResponse(unsigned short,std::vector<unsigned char>)::$_0>(qmi::ClientProxy::State::registerResponse(unsigned short,std::vector<unsigned char>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::ClientProxy::State::registerResponse(unsigned short,std::vector<unsigned char>)::$_0,std::default_delete<qmi::ClientProxy::State::registerResponse(unsigned short,std::vector<unsigned char>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t **v4;
  unsigned int v5;
  _BYTE *v6;
  _BYTE *v7;
  size_t v8;
  char *v9;
  char *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD v15[5];
  void *__p;
  void *v17;
  char *v18;

  v2 = *a1;
  v3 = **a1;
  v4 = *(uint64_t ***)(v3 + 224);
  if (!v4)
  {
    v4 = (uint64_t **)operator new(0x18uLL);
    v4[2] = 0;
    v4[1] = 0;
    *v4 = (uint64_t *)(v4 + 1);
    *(_QWORD *)(v3 + 224) = v4;
  }
  v5 = *((unsigned __int16 *)v2 + 4);
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1174405120;
  v15[2] = ___ZZN3qmi11ClientProxy5State16registerResponseEtNSt3__16vectorIhNS2_9allocatorIhEEEEENK3__0clEv_block_invoke;
  v15[3] = &__block_descriptor_tmp_41;
  v15[4] = v3;
  __p = 0;
  v17 = 0;
  v18 = 0;
  v7 = (_BYTE *)v2[2];
  v6 = (_BYTE *)v2[3];
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if ((v8 & 0x8000000000000000) != 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v9 = (char *)operator new(v6 - v7);
    v10 = &v9[v8];
    __p = v9;
    v18 = &v9[v8];
    memcpy(v9, v7, v8);
    v17 = v10;
  }
  CallbacksHandler::registerSendCallback(v4, v5, v15);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  v11 = (void *)v2[2];
  if (v11)
  {
    v2[3] = (uint64_t)v11;
    operator delete(v11);
  }
  operator delete(v2);
  v12 = (std::__shared_weak_count *)a1[2];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  operator delete(a1);
}

void sub_19E9D88CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  _QWORD *v15;
  _QWORD *v16;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v18 = (void *)v16[2];
  if (v18)
  {
    v16[3] = v18;
    operator delete(v18);
    operator delete(v16);
    v19 = (std::__shared_weak_count *)v15[2];
    if (!v19)
      goto LABEL_9;
  }
  else
  {
    operator delete(v16);
    v19 = (std::__shared_weak_count *)v15[2];
    if (!v19)
      goto LABEL_9;
  }
  p_shared_owners = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_9:
  operator delete(v15);
  _Unwind_Resume(a1);
}

void ___ZZN3qmi11ClientProxy5State16registerResponseEtNSt3__16vectorIhNS2_9allocatorIhEEEEENK3__0clEv_block_invoke(_QWORD *a1, __int16 a2)
{
  _BYTE *v3;
  uint64_t v4;
  _BYTE *v5;
  size_t v6;
  char *v7;
  char *v8;
  _QWORD v9[5];
  void *__p;
  void *v11;
  char *v12;
  __int16 v13;

  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1174405120;
  v9[2] = ___ZZN3qmi11ClientProxy5State16registerResponseEtNSt3__16vectorIhNS2_9allocatorIhEEEEENK3__0clEv_block_invoke_2;
  v9[3] = &__block_descriptor_tmp_39;
  v4 = a1[4];
  v3 = (_BYTE *)a1[5];
  v9[4] = v4;
  __p = 0;
  v11 = 0;
  v12 = 0;
  v5 = (_BYTE *)a1[6];
  v6 = v5 - v3;
  if (v5 != v3)
  {
    if ((v6 & 0x8000000000000000) != 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v5 - v3);
    v8 = &v7[v6];
    __p = v7;
    v12 = &v7[v6];
    memcpy(v7, v3, v6);
    v11 = v8;
  }
  v13 = a2;
  ctu::SharedSynchronizable<qmi::ClientProxy::State>::execute_wrapped((uint64_t *)(v4 + 8), (uint64_t)v9);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_19E9D8A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZZN3qmi11ClientProxy5State16registerResponseEtNSt3__16vectorIhNS2_9allocatorIhEEEEENK3__0clEv_block_invoke_2(uint64_t a1)
{
  qmi::ClientProxy::State::handleResponse_sync(*(_QWORD *)(a1 + 32), *(const void **)(a1 + 40), *(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40), *(unsigned __int16 *)(a1 + 64));
}

_QWORD *std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_0,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_0>,void ()(xpc::dict)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E41524F8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_0,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_0>,void ()(xpc::dict)>::~__func(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_1E41524F8;
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

_QWORD *std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_0,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_0>,void ()(xpc::dict)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E41524F8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_0,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_0>,void ()(xpc::dict)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E41524F8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_0,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_0>,void ()(xpc::dict)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_0,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_0>,void ()(xpc::dict)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_0,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_0>,void ()(xpc::dict)>::operator()(uint64_t a1, xpc_object_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  xpc_object_t object;

  object = *a2;
  *a2 = xpc_null_create();
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)(a1 + 8);
      if (v6)
        qmi::ClientProxy::State::handleMessage_sync(v6, &object);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  xpc_release(object);
}

uint64_t std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_0,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_0>,void ()(xpc::dict)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3qmi11ClientProxy5State4initERKN3xpc10connectionEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3qmi11ClientProxy5State4initERKN3xpc10connectionEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3qmi11ClientProxy5State4initERKN3xpc10connectionEE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3qmi11ClientProxy5State4initERKN3xpc10connectionEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_0,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_0>,void ()(xpc::dict)>::target_type()
{
}

_QWORD *std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_1,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_1>,void ()(xpc::object const&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E4152588;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_1,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_1>,void ()(xpc::object const&)>::~__func(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_1E4152588;
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

_QWORD *std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_1,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_1>,void ()(xpc::object const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E4152588;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_1,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_1>,void ()(xpc::object const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E4152588;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_1,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_1>,void ()(xpc::object const&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_1,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_1>,void ()(xpc::object const&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_1,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_1>,void ()(xpc::object const&)>::operator()(uint64_t a1, void **a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        qmi::ClientProxy::State::handleServerError_sync(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

uint64_t std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_1,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_1>,void ()(xpc::object const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3qmi11ClientProxy5State4initERKN3xpc10connectionEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3qmi11ClientProxy5State4initERKN3xpc10connectionEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3qmi11ClientProxy5State4initERKN3xpc10connectionEE3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3qmi11ClientProxy5State4initERKN3xpc10connectionEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<qmi::ClientProxy::State::init(xpc::connection const&)::$_1,std::allocator<qmi::ClientProxy::State::init(xpc::connection const&)::$_1>,void ()(xpc::object const&)>::target_type()
{
}

void dispatch::async<void ctu::SharedSynchronizable<qmi::ClientProxy::State>::execute_wrapped<qmi::ClientProxy::State::init(xpc::connection const&)::$_2>(qmi::ClientProxy::State::init(xpc::connection const&)::$_2 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::ClientProxy::State::init(xpc::connection const&)::$_2,dispatch_queue_s *::default_delete<qmi::ClientProxy::State::init(xpc::connection const&)::$_2>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t *v2;
  xpc_object_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(uint64_t **)a1;
  v3 = (xpc_object_t *)(*(_QWORD *)a1 + 8);
  qmi::ClientProxy::State::init_sync(**(_QWORD **)a1, (uint64_t)v3);
  xpc_release(*v3);
  operator delete(v2);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_19E9D8F7C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  xpc_object_t *v2;
  void *v3;
  xpc_object_t *v4;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = v2;
  xpc_release(*v4);
  operator delete(v3);
  v6 = (std::__shared_weak_count *)v1[2];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN3qmi11ClientProxy5StateEE20execute_wrapped_syncIZNKS3_7isValidEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = *(uint64_t **)(a1 + 40);
  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 232);
  if (v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  v5 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v6 = (_QWORD *)(v2 + 48);
    if (*(char *)(v2 + 71) < 0)
      v6 = (_QWORD *)*v6;
    v7 = 136315138;
    v8 = v6;
    _os_log_error_impl(&dword_19E9C8000, v5, OS_LOG_TYPE_ERROR, "Client: [%s], invalid fTransport when checking client validity", (uint8_t *)&v7, 0xCu);
  }
  return 0;
}

uint64_t ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 40) + 16))();
  **(_BYTE **)(a1 + 32) = result;
  return result;
}

uint64_t ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 40) + 16))();
  **(_BYTE **)(a1 + 32) = result;
  return result;
}

BOOL ___ZNK3ctu20SharedSynchronizableIN3qmi11ClientProxy5StateEE20execute_wrapped_syncIZNKS3_9isStoppedEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return *(_DWORD *)(**(_QWORD **)(a1 + 40) + 76) == 1;
}

void std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<qmi::ClientProxy::State::Transaction *,std::__deque_iterator<qmi::ClientProxy::State::Transaction,qmi::ClientProxy::State::Transaction *,qmi::ClientProxy::State::Transaction&,qmi::ClientProxy::State::Transaction **,long,128l>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  NSObject *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;

  v6 = a4;
  if (a2 == a3)
  {
    v9 = a2;
    goto LABEL_22;
  }
  v9 = a3;
  v10 = *a4;
  for (i = a3; ; i = v13)
  {
    v12 = (a5 - v10) >> 5;
    if ((i - a2) >> 5 < v12)
      v12 = (i - a2) >> 5;
    v13 = i - 32 * v12;
    if (v12)
    {
      while (1)
      {
        v15 = *(_DWORD *)(i - 32);
        i -= 32;
        v16 = *(_QWORD *)(i + 24);
        v17 = *(_OWORD *)(i + 8);
        *(_QWORD *)(i + 8) = 0;
        *(_QWORD *)(i + 16) = 0;
        *(_QWORD *)(i + 24) = 0;
        *(_DWORD *)(a5 - 32) = v15;
        a5 -= 32;
        v18 = *(std::__shared_weak_count **)(a5 + 24);
        *(_QWORD *)(a5 + 24) = v16;
        v19 = *(NSObject **)(a5 + 8);
        *(_OWORD *)(a5 + 8) = v17;
        if (v19)
          dispatch_source_cancel(v19);
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
          if (!v21)
            break;
        }
        if (v19)
          goto LABEL_16;
LABEL_8:
        if (i == v13)
          goto LABEL_6;
      }
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (!v19)
        goto LABEL_8;
LABEL_16:
      dispatch_release(v19);
      goto LABEL_8;
    }
LABEL_6:
    if (v13 == a2)
      break;
    v14 = *--v6;
    v10 = v14;
    a5 = v14 + 4096;
  }
  if (*v6 + 4096 == a5)
  {
    v22 = v6[1];
    ++v6;
    a5 = v22;
  }
LABEL_22:
  *a1 = v9;
  a1[1] = v6;
  a1[2] = a5;
}

void std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<qmi::ClientProxy::State::Transaction *,std::__deque_iterator<qmi::ClientProxy::State::Transaction,qmi::ClientProxy::State::Transaction *,qmi::ClientProxy::State::Transaction&,qmi::ClientProxy::State::Transaction **,long,128l>,0>(int **a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  int *v6;
  int *v7;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  NSObject *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a4;
  v7 = a2;
  if (a2 == a3)
  {
    v9 = a2;
    goto LABEL_24;
  }
  v9 = a3;
  v10 = *(_QWORD *)a4;
  while (1)
  {
    v11 = (v10 - a5 + 4096) >> 5;
    if (((char *)v9 - (char *)v7) >> 5 < v11)
      v11 = ((char *)v9 - (char *)v7) >> 5;
    if (v11)
    {
      v12 = &v7[8 * v11];
      while (1)
      {
        v13 = *v7;
        v14 = *((_QWORD *)v7 + 3);
        v15 = *(_OWORD *)(v7 + 2);
        *((_QWORD *)v7 + 1) = 0;
        *((_QWORD *)v7 + 2) = 0;
        *((_QWORD *)v7 + 3) = 0;
        v16 = *(std::__shared_weak_count **)(a5 + 24);
        *(_QWORD *)(a5 + 24) = v14;
        *(_DWORD *)a5 = v13;
        v17 = *(NSObject **)(a5 + 8);
        *(_OWORD *)(a5 + 8) = v15;
        if (v17)
          dispatch_source_cancel(v17);
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
            break;
        }
        if (v17)
          goto LABEL_15;
LABEL_7:
        v7 += 8;
        a5 += 32;
        if (v7 == v12)
        {
          v7 = v12;
          goto LABEL_19;
        }
      }
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      if (!v17)
        goto LABEL_7;
LABEL_15:
      dispatch_release(v17);
      goto LABEL_7;
    }
LABEL_19:
    if (v7 == v9)
      break;
    v20 = *((_QWORD *)v6 + 1);
    v6 += 2;
    v10 = v20;
    a5 = v20;
  }
  if (*(_QWORD *)v6 + 4096 == a5)
  {
    v21 = *((_QWORD *)v6 + 1);
    v6 += 2;
    a5 = v21;
  }
LABEL_24:
  *a1 = v9;
  a1[1] = v6;
  a1[2] = (int *)a5;
}

void ___ZNK3ctu20SharedSynchronizableIN3qmi11ClientProxy5StateEE20execute_wrapped_syncIZNS1_21QmiClientProxyAdapter8shutdownEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = *(uint64_t **)(a1 + 40);
  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 280);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  }
  else
  {
    v4 = *(NSObject **)(v2 + 88);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = (_QWORD *)(v2 + 96);
      if (*(char *)(v2 + 119) < 0)
        v5 = (_QWORD *)*v5;
      v6 = 136315138;
      v7 = v5;
      _os_log_error_impl(&dword_19E9C8000, v4, OS_LOG_TYPE_ERROR, "Client: [%s], invalid fTransport when shutting down", (uint8_t *)&v6, 0xCu);
    }
  }
}

_QWORD *ATCSDPCQueue::Callback::Callback(_QWORD *this)
{
  *this = off_1E41527A8;
  return this;
}

void ATCSDPCQueue::ATCSDPCQueue(ATCSDPCQueue *this)
{
  pthread_mutex_t *v2;

  *(_DWORD *)this = 0;
  *((_BYTE *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  if (!ATCSTimer::fsDriver)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSTimer.cpp", (const char *)0x39, "fsDriver", "!=", "NULL", 0, 0);
  *((_QWORD *)this + 4) = 0;
  v2 = (pthread_mutex_t *)operator new(0x48uLL);
  v2[1].__sig = 0;
  if ((initialized & 1) == 0)
  {
    pthread_key_create((pthread_key_t *)&threadInfoKey, 0);
    initialized = 1;
  }
  pthread_mutex_init(v2, 0);
  *((_QWORD *)this + 4) = v2;
  *((_BYTE *)this + 40) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
}

{
  pthread_mutex_t *v2;

  *(_DWORD *)this = 0;
  *((_BYTE *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  if (!ATCSTimer::fsDriver)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSTimer.cpp", (const char *)0x39, "fsDriver", "!=", "NULL", 0, 0);
  *((_QWORD *)this + 4) = 0;
  v2 = (pthread_mutex_t *)operator new(0x48uLL);
  v2[1].__sig = 0;
  if ((initialized & 1) == 0)
  {
    pthread_key_create((pthread_key_t *)&threadInfoKey, 0);
    initialized = 1;
  }
  pthread_mutex_init(v2, 0);
  *((_QWORD *)this + 4) = v2;
  *((_BYTE *)this + 40) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
}

void sub_19E9D95CC(_Unwind_Exception *a1)
{
  ATCSTimer *v1;

  ATCSTimer::~ATCSTimer(v1);
  _Unwind_Resume(a1);
}

void sub_19E9D96B0(_Unwind_Exception *a1)
{
  ATCSTimer *v1;

  ATCSTimer::~ATCSTimer(v1);
  _Unwind_Resume(a1);
}

void ATCSDPCQueue::~ATCSDPCQueue(pthread_mutex_t **this)
{
  pthread_mutex_t *v2;

  ATCSDPCQueue::cancel((ATCSDPCQueue *)this);
  std::deque<ATCSDPCQueue::Callback *>::~deque[abi:ne180100]((uint64_t)(this + 6));
  v2 = this[4];
  pthread_mutex_destroy(v2);
  if (v2)
    operator delete(v2);
  if (*((_BYTE *)this + 4))
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSTimer.cpp", (const char *)0x3E, "fPending", "!=", "true", (const char *)1, (const void *)1);
}

{
  pthread_mutex_t *v2;

  ATCSDPCQueue::cancel((ATCSDPCQueue *)this);
  std::deque<ATCSDPCQueue::Callback *>::~deque[abi:ne180100]((uint64_t)(this + 6));
  v2 = this[4];
  pthread_mutex_destroy(v2);
  if (v2)
    operator delete(v2);
  if (*((_BYTE *)this + 4))
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSTimer.cpp", (const char *)0x3E, "fPending", "!=", "true", (const char *)1, (const void *)1);
}

uint64_t ATCSDPCQueue::cancel(ATCSDPCQueue *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  unint64_t v6;
  pthread_mutex_t *v7;

  ATCSTimer::cancel(this);
  v2 = (pthread_mutex_t *)*((_QWORD *)this + 4);
  pthread_mutex_lock(v2);
  v2[1].__sig = (uint64_t)pthread_self();
  *((_BYTE *)this + 40) = 0;
  while (1)
  {
    v3 = *((_QWORD *)this + 11);
    if (!v3)
      break;
    v4 = (void **)*((_QWORD *)this + 7);
    v5 = (*(_QWORD **)((char *)v4 + ((*((_QWORD *)this + 10) >> 6) & 0x3FFFFFFFFFFFFF8)))[*((_QWORD *)this + 10) & 0x1FFLL];
    v6 = *((_QWORD *)this + 10) + 1;
    *((_QWORD *)this + 10) = v6;
    *((_QWORD *)this + 11) = v3 - 1;
    if (v6 >= 0x400)
    {
      operator delete(*v4);
      *((_QWORD *)this + 7) += 8;
      *((_QWORD *)this + 10) -= 512;
    }
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  v7 = (pthread_mutex_t *)*((_QWORD *)this + 4);
  pthread_self();
  v7[1].__sig = 0;
  return pthread_mutex_unlock(v7);
}

uint64_t ATCSDPCQueue::startTimer(ATCSDPCQueue *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  _QWORD *v8;

  if (a2 < 0)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSDPCQueue.cpp", (const char *)0x29, "timeout", "<=", "std::numeric_limits<int>::max()", a6);
  v8 = operator new(0x20uLL);
  *v8 = off_1E41527E8;
  v8[1] = this;
  v8[2] = ATCSDPCQueue::handleTimer;
  v8[3] = 0;
  return ATCSTimer::set((char *)this, a2, (uint64_t)v8);
}

uint64_t ATCSDPCQueue::handleTimer(int64x2_t *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  unint64_t v6;
  pthread_mutex_t *v7;
  pthread_mutex_t *v8;
  uint64_t v9;
  void **v10;
  int64x2_t v11;
  pthread_mutex_t *v12;
  pthread_mutex_t *v13;
  const char *v14;
  int v15;
  _QWORD *v16;
  pthread_mutex_t *v17;

  v2 = (pthread_mutex_t *)this[2].i64[0];
  pthread_mutex_lock(v2);
  v2[1].__sig = (uint64_t)pthread_self();
  v3 = this[5].i64[1];
  if (v3)
  {
    v4 = (void **)this[3].i64[1];
    v5 = (*(_QWORD **)((char *)v4 + (((unint64_t)this[5].i64[0] >> 6) & 0x3FFFFFFFFFFFFF8)))[this[5].i64[0] & 0x1FF];
    v6 = this[5].i64[0] + 1;
    this[5].i64[0] = v6;
    this[5].i64[1] = v3 - 1;
    if (v6 >= 0x400)
    {
      operator delete(*v4);
      this[3].i64[1] += 8;
      this[5].i64[0] -= 512;
    }
    v7 = (pthread_mutex_t *)this[2].i64[0];
    pthread_self();
    v7[1].__sig = 0;
    pthread_mutex_unlock(v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v8 = (pthread_mutex_t *)this[2].i64[0];
    pthread_mutex_lock(v8);
    v8[1].__sig = (uint64_t)pthread_self();
    if (this[5].i64[1])
    {
      while (1)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(this[3].i64[1] + (((unint64_t)this[5].i64[0] >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * (this[5].i64[0] & 0x1FF));
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9))
          break;
        v10 = (void **)this[3].i64[1];
        v11 = vaddq_s64(this[5], (int64x2_t)xmmword_19EA1DD90);
        this[5] = v11;
        if (v11.i64[0] >= 0x400uLL)
        {
          operator delete(*v10);
          this[3].i64[1] += 8;
          this[5].i64[0] -= 512;
        }
        v12 = (pthread_mutex_t *)this[2].i64[0];
        pthread_self();
        v12[1].__sig = 0;
        pthread_mutex_unlock(v12);
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        v13 = (pthread_mutex_t *)this[2].i64[0];
        pthread_mutex_lock(v13);
        v13[1].__sig = (uint64_t)pthread_self();
        if (!this[5].i64[1])
          goto LABEL_13;
      }
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
      if (v15 < 0)
        _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSDPCQueue.cpp", (const char *)0x29, "timeout", "<=", "std::numeric_limits<int>::max()", v14);
      v16 = operator new(0x20uLL);
      *v16 = off_1E41527E8;
      v16[1] = this;
      v16[2] = ATCSDPCQueue::handleTimer;
      v16[3] = 0;
      ATCSTimer::set(this->i8, v15, (uint64_t)v16);
    }
  }
LABEL_13:
  this[2].i8[8] = 0;
  v17 = (pthread_mutex_t *)this[2].i64[0];
  pthread_self();
  v17[1].__sig = 0;
  return pthread_mutex_unlock(v17);
}

void sub_19E9D9B4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  pthread_mutex_t *v3;

  v3 = *(pthread_mutex_t **)(v1 + 32);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t ATCSDPCQueue::enqueue(ATCSDPCQueue *this, ATCSDPCQueue::Callback *a2)
{
  pthread_mutex_t *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void *v26;
  void *v27;
  unint64_t v28;
  char *v29;
  void *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  char *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  unint64_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  int64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  char *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  unint64_t v73;
  uint64_t v74;
  __int128 *v75;
  _OWORD *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  size_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  __int128 *v94;
  _OWORD *v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  pthread_mutex_t *v99;
  pthread_mutex_t *v101;
  const char *v102;
  int v103;
  _QWORD *v104;
  unint64_t v105;
  char *v106;
  char *v107;
  int64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  __int128 *v115;
  _OWORD *v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  void *v120;
  ATCSDPCQueue::Callback *v121;

  v4 = (pthread_mutex_t *)*((_QWORD *)this + 4);
  pthread_mutex_lock(v4);
  v4[1].__sig = (uint64_t)pthread_self();
  v6 = (char *)*((_QWORD *)this + 7);
  v5 = (char *)*((_QWORD *)this + 8);
  v7 = v5 - v6;
  v8 = v6;
  if (v5 == v6)
    v9 = 0;
  else
    v9 = ((v5 - v6) << 6) - 1;
  v11 = *((_QWORD *)this + 10);
  v10 = *((_QWORD *)this + 11);
  v12 = v10 + v11;
  if (v9 == v10 + v11)
  {
    if (v11 >= 0x200)
    {
      *((_QWORD *)this + 10) = v11 - 512;
      v13 = v6 + 8;
      v14 = *(_QWORD *)v6;
      *((_QWORD *)this + 7) = v6 + 8;
      if (v5 != *((char **)this + 9))
      {
LABEL_95:
        *(_QWORD *)v5 = v14;
        goto LABEL_96;
      }
      v15 = (char *)*((_QWORD *)this + 6);
      if (v13 > v15)
      {
        v16 = (v13 - v15) >> 3;
        if (v16 >= -1)
          v17 = v16 + 1;
        else
          v17 = v16 + 2;
        v18 = v17 >> 1;
        v19 = -v18;
        v20 = &v13[-8 * v18];
        v21 = v5 - v13;
        if (v5 != v13)
        {
          memmove(&v13[-8 * v18], v13, v5 - v13);
          v5 = (char *)*((_QWORD *)this + 7);
        }
        v22 = &v5[8 * v19];
        v5 = &v20[v21];
        *((_QWORD *)this + 7) = v22;
        *((_QWORD *)this + 8) = &v20[v21];
        goto LABEL_95;
      }
      if (v5 == v15)
        v34 = 1;
      else
        v34 = (v5 - v15) >> 2;
      if (!(v34 >> 61))
      {
        v35 = (char *)operator new(8 * v34);
        v36 = &v35[8 * (v34 >> 2)];
        v38 = v5 - v13;
        v37 = v5 == v13;
        v5 = v36;
        if (v37)
          goto LABEL_93;
        v5 = &v36[v38 & 0xFFFFFFFFFFFFFFF8];
        v39 = v38 - 8;
        if (v39 >= 0x38)
        {
          v91 = &v35[8 * (v34 >> 2)];
          v40 = v91;
          if ((unint64_t)(v91 - v13) >= 0x20)
          {
            v92 = (v39 >> 3) + 1;
            v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
            v40 = &v36[v93];
            v13 += v93;
            v94 = (__int128 *)(v6 + 24);
            v95 = v91 + 16;
            v96 = v92 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v97 = *v94;
              *(v95 - 1) = *(v94 - 1);
              *v95 = v97;
              v94 += 2;
              v95 += 2;
              v96 -= 4;
            }
            while (v96);
            if (v92 == (v92 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              *((_QWORD *)this + 6) = v35;
              *((_QWORD *)this + 7) = v36;
              *((_QWORD *)this + 8) = v5;
              *((_QWORD *)this + 9) = &v35[8 * v34];
              if (v15)
              {
                operator delete(v15);
                v5 = (char *)*((_QWORD *)this + 8);
              }
              goto LABEL_95;
            }
          }
        }
        else
        {
          v40 = &v35[8 * (v34 >> 2)];
        }
        do
        {
          v98 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v40 = v98;
          v40 += 8;
        }
        while (v40 != v5);
        goto LABEL_93;
      }
LABEL_118:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    v23 = v7 >> 3;
    v24 = (char *)*((_QWORD *)this + 9);
    v25 = (char *)*((_QWORD *)this + 6);
    if (v7 >> 3 >= (unint64_t)((v24 - v25) >> 3))
    {
      if (v24 == v25)
        v28 = 1;
      else
        v28 = (v24 - v25) >> 2;
      if (!(v28 >> 61))
      {
        v29 = (char *)operator new(8 * v28);
        v121 = a2;
        v30 = operator new(0x1000uLL);
        v31 = &v29[8 * v23];
        v32 = &v29[8 * v28];
        if (v23 == v28)
        {
          v120 = v30;
          if (v7 < 1)
          {
            if (v5 == v6)
              v42 = 1;
            else
              v42 = v7 >> 2;
            if (v42 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v31 = (char *)operator new(8 * v42);
            v32 = &v31[8 * v42];
            operator delete(v29);
            v8 = (char *)*((_QWORD *)this + 7);
            v5 = (char *)*((_QWORD *)this + 8);
            v29 = v31;
          }
          else
          {
            v33 = v23 + 2;
            if (v23 >= -1)
              v33 = v23 + 1;
            v31 -= 8 * (v33 >> 1);
          }
          v30 = v120;
        }
        *(_QWORD *)v31 = v30;
        v43 = v31 + 8;
        if (v5 != v8)
        {
          do
          {
            if (v31 == v29)
            {
              if (v43 >= v32)
              {
                if (v32 == v29)
                  v50 = 1;
                else
                  v50 = (v32 - v29) >> 2;
                if (v50 >> 61)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v51 = (char *)operator new(8 * v50);
                v52 = v51;
                v53 = (v50 + 3) >> 2;
                v31 = &v51[8 * v53];
                v54 = v43 - v29;
                v37 = v43 == v29;
                v43 = v31;
                if (!v37)
                {
                  v43 = &v31[v54 & 0xFFFFFFFFFFFFFFF8];
                  v55 = v54 - 8;
                  v56 = &v51[8 * v53];
                  v57 = v29;
                  if (v55 < 0x38)
                    goto LABEL_122;
                  v58 = 8 * v53;
                  v56 = &v51[8 * v53];
                  v57 = v29;
                  if ((unint64_t)(v56 - v29) < 0x20)
                    goto LABEL_122;
                  v59 = (v55 >> 3) + 1;
                  v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
                  v56 = &v31[v60];
                  v57 = &v29[v60];
                  v61 = (__int128 *)(v29 + 16);
                  v62 = &v51[v58 + 16];
                  v63 = v59 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v64 = *v61;
                    *((_OWORD *)v62 - 1) = *(v61 - 1);
                    *(_OWORD *)v62 = v64;
                    v61 += 2;
                    v62 += 32;
                    v63 -= 4;
                  }
                  while (v63);
                  if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_122:
                    do
                    {
                      v65 = *(_QWORD *)v57;
                      v57 += 8;
                      *(_QWORD *)v56 = v65;
                      v56 += 8;
                    }
                    while (v56 != v43);
                  }
                }
                v32 = &v51[8 * v50];
                operator delete(v29);
                v29 = v52;
              }
              else
              {
                v46 = (v32 - v43) >> 3;
                if (v46 >= -1)
                  v47 = v46 + 1;
                else
                  v47 = v46 + 2;
                v48 = v47 >> 1;
                v31 = &v29[8 * (v47 >> 1)];
                v49 = v29;
                if (v43 != v29)
                {
                  memmove(v31, v29, v43 - v29);
                  v49 = v43;
                }
                v43 = (char *)v49 + 8 * v48;
              }
            }
            v45 = *((_QWORD *)v5 - 1);
            v5 -= 8;
            *((_QWORD *)v31 - 1) = v45;
            v31 -= 8;
          }
          while (v5 != *((char **)this + 7));
        }
        v44 = (void *)*((_QWORD *)this + 6);
        *((_QWORD *)this + 6) = v29;
        *((_QWORD *)this + 7) = v31;
        *((_QWORD *)this + 8) = v43;
        *((_QWORD *)this + 9) = v32;
        a2 = v121;
        if (v44)
          operator delete(v44);
        goto LABEL_97;
      }
      goto LABEL_118;
    }
    v26 = operator new(0x1000uLL);
    v27 = v26;
    if (v24 != v5)
    {
      *(_QWORD *)v5 = v26;
LABEL_96:
      *((_QWORD *)this + 8) += 8;
LABEL_97:
      v8 = (char *)*((_QWORD *)this + 7);
      v10 = *((_QWORD *)this + 11);
      v12 = *((_QWORD *)this + 10) + v10;
      goto LABEL_98;
    }
    if (v6 == v25)
    {
      if (v5 == v6)
        v66 = 1;
      else
        v66 = (v24 - v6) >> 2;
      if (v66 >> 61)
        goto LABEL_118;
      v67 = (char *)operator new(8 * v66);
      v68 = (v66 + 3) >> 2;
      v41 = &v67[8 * v68];
      v69 = v41;
      if (v5 != v6)
      {
        v69 = &v41[8 * v23];
        v70 = &v67[8 * v68];
        v71 = v6;
        if ((unint64_t)(v7 - 8) < 0x38)
          goto LABEL_123;
        v72 = &v67[8 * v68];
        v70 = v72;
        v71 = v6;
        if ((unint64_t)(v72 - v6) < 0x20)
          goto LABEL_123;
        v73 = ((unint64_t)(v7 - 8) >> 3) + 1;
        v74 = 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
        v70 = &v41[v74];
        v71 = &v6[v74];
        v75 = (__int128 *)(v6 + 16);
        v76 = v72 + 16;
        v77 = v73 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v78 = *v75;
          *(v76 - 1) = *(v75 - 1);
          *v76 = v78;
          v75 += 2;
          v76 += 2;
          v77 -= 4;
        }
        while (v77);
        if (v73 != (v73 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_123:
          do
          {
            v79 = *(_QWORD *)v71;
            v71 += 8;
            *(_QWORD *)v70 = v79;
            v70 += 8;
          }
          while (v70 != v69);
        }
      }
      *((_QWORD *)this + 6) = v67;
      *((_QWORD *)this + 7) = v41;
      *((_QWORD *)this + 8) = v69;
      *((_QWORD *)this + 9) = &v67[8 * v66];
      if (v6)
      {
        operator delete(v6);
        v41 = (char *)*((_QWORD *)this + 7);
      }
    }
    else
    {
      v41 = v6;
    }
    *((_QWORD *)v41 - 1) = v27;
    v80 = (char *)*((_QWORD *)this + 7);
    v81 = (char *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 7) = v80 - 8;
    v82 = *((_QWORD *)v80 - 1);
    *((_QWORD *)this + 7) = v80;
    if (v81 != *((char **)this + 9))
    {
LABEL_80:
      *(_QWORD *)v81 = v82;
      goto LABEL_96;
    }
    v83 = (char *)*((_QWORD *)this + 6);
    if (v80 > v83)
    {
      v84 = (v80 - v83) >> 3;
      if (v84 >= -1)
        v85 = v84 + 1;
      else
        v85 = v84 + 2;
      v86 = v85 >> 1;
      v87 = -v86;
      v88 = &v80[-8 * v86];
      v89 = v81 - v80;
      if (v89)
      {
        memmove(&v80[-8 * v86], v80, v89);
        v80 = (char *)*((_QWORD *)this + 7);
      }
      v90 = &v88[v89];
      *((_QWORD *)this + 7) = &v80[8 * v87];
      *((_QWORD *)this + 8) = v90;
      *(_QWORD *)v90 = v82;
      goto LABEL_96;
    }
    if (v81 == v83)
      v105 = 1;
    else
      v105 = (v81 - v83) >> 2;
    if (v105 >> 61)
      goto LABEL_118;
    v106 = (char *)operator new(8 * v105);
    v107 = &v106[8 * (v105 >> 2)];
    v108 = v81 - v80;
    v37 = v81 == v80;
    v81 = v107;
    if (!v37)
    {
      v81 = &v107[v108 & 0xFFFFFFFFFFFFFFF8];
      v109 = v108 - 8;
      if (v109 < 0x38)
      {
        v110 = &v106[8 * (v105 >> 2)];
        do
        {
LABEL_114:
          v119 = *(_QWORD *)v80;
          v80 += 8;
          *(_QWORD *)v110 = v119;
          v110 += 8;
        }
        while (v110 != v81);
        goto LABEL_115;
      }
      v111 = &v106[8 * (v105 >> 2)];
      v110 = v111;
      if ((unint64_t)(v111 - v80) < 0x20)
        goto LABEL_114;
      v112 = (v109 >> 3) + 1;
      v113 = 8 * (v112 & 0x3FFFFFFFFFFFFFFCLL);
      v110 = &v107[v113];
      v114 = &v80[v113];
      v115 = (__int128 *)(v80 + 16);
      v116 = v111 + 16;
      v117 = v112 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v118 = *v115;
        *(v116 - 1) = *(v115 - 1);
        *v116 = v118;
        v115 += 2;
        v116 += 2;
        v117 -= 4;
      }
      while (v117);
      v80 = v114;
      if (v112 != (v112 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_114;
    }
LABEL_115:
    *((_QWORD *)this + 6) = v106;
    *((_QWORD *)this + 7) = v107;
    *((_QWORD *)this + 8) = v81;
    *((_QWORD *)this + 9) = &v106[8 * v105];
    if (v83)
    {
      operator delete(v83);
      v81 = (char *)*((_QWORD *)this + 8);
    }
    goto LABEL_80;
  }
LABEL_98:
  *(_QWORD *)(*(_QWORD *)&v8[(v12 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v12 & 0x1FF)) = a2;
  *((_QWORD *)this + 11) = v10 + 1;
  if (*((_BYTE *)this + 40))
  {
    v99 = (pthread_mutex_t *)*((_QWORD *)this + 4);
    pthread_self();
    v99[1].__sig = 0;
    return pthread_mutex_unlock(v99);
  }
  else
  {
    *((_BYTE *)this + 40) = 1;
    (*(void (**)(ATCSDPCQueue::Callback *))(*(_QWORD *)a2 + 24))(a2);
    v101 = (pthread_mutex_t *)*((_QWORD *)this + 4);
    pthread_self();
    v101[1].__sig = 0;
    pthread_mutex_unlock(v101);
    *((_BYTE *)this + 40) = 1;
    v103 = (*(uint64_t (**)(ATCSDPCQueue::Callback *))(*(_QWORD *)a2 + 24))(a2);
    if (v103 < 0)
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSDPCQueue.cpp", (const char *)0x29, "timeout", "<=", "std::numeric_limits<int>::max()", v102);
    v104 = operator new(0x20uLL);
    *v104 = off_1E41527E8;
    v104[1] = this;
    v104[2] = ATCSDPCQueue::handleTimer;
    v104[3] = 0;
    return ATCSTimer::set((char *)this, v103, (uint64_t)v104);
  }
}

void sub_19E9DA304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  uint64_t v9;
  void *v10;
  pthread_mutex_t *v12;

  operator delete(__p);
  operator delete(v10);
  v12 = *(pthread_mutex_t **)(v9 + 32);
  pthread_self();
  v12[1].__sig = 0;
  pthread_mutex_unlock(v12);
  _Unwind_Resume(a1);
}

uint64_t std::deque<ATCSDPCQueue::Callback *>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t ATCSTimer::MemberCallback<ATCSDPCQueue>::invoke(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

void QMIWakeReason::QMIWakeReason(QMIWakeReason *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
}

{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
}

_QWORD *QMIWakeReason::reset(_QWORD *this)
{
  this[1] = *this;
  this[3] = 0;
  return this;
}

void QMIWakeReason::set(uint64_t a1, const void *a2, size_t __sz, uint64_t a4)
{
  void *v8;
  size_t v9;
  void *v10;

  if (a2 && __sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v8 = operator new(__sz);
    v9 = (size_t)v8 + __sz;
    memcpy(v8, a2, __sz);
    v10 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v10;
      operator delete(v10);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = a4;
  }
}

void sub_19E9DA50C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t QMIWakeReason::getCaptureTime(QMIWakeReason *this)
{
  return *((_QWORD *)this + 3);
}

BOOL QMIWakeReason::isSet(QMIWakeReason *this)
{
  return *(_QWORD *)this != *((_QWORD *)this + 1);
}

const void **QMIWakeReason::copyWakeData@<X0>(const void **this@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v3;
  const void *v4;
  size_t v5;
  char *v6;
  char *v7;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *this;
  v3 = this[1];
  v5 = v3 - (_BYTE *)*this;
  if (v3 != *this)
  {
    if ((v5 & 0x8000000000000000) != 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - (_BYTE *)*this);
    *a2 = v6;
    v7 = &v6[v5];
    a2[2] = &v6[v5];
    this = (const void **)memcpy(v6, v4, v5);
    a2[1] = v7;
  }
  return this;
}

void sub_19E9DA5AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Client::State::State(uint64_t a1, __int128 *a2, __int128 *a3, int a4, NSObject **a5)
{
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  const std::string::value_type *v17;
  std::string *v18;
  __int128 v19;
  void **v20;
  NSObject *v21;
  const char *v22;
  __int128 v23;
  __int128 v24;
  NSObject *v25;
  xpc_object_t object;
  _BYTE v28[16];
  std::string v29;
  void *__p[2];
  int64_t v31;
  _BYTE v32[8];

  v5 = *((char *)a2 + 23);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = *((_QWORD *)a2 + 1);
  v7 = v6 + 12;
  memset(&v29, 170, sizeof(v29));
  if (v6 + 12 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v7 >= 0x17)
  {
    v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v14 = v7 | 7;
    v15 = v14 + 1;
    v16 = (char *)operator new(v14 + 1);
    v29.__r_.__value_.__l.__size_ = v6 + 12;
    v29.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
    v29.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
    v13 = v16 + 12;
    *((_DWORD *)v16 + 2) = 1534357093;
    *(_QWORD *)v16 = *(_QWORD *)"qmi::Client[";
  }
  else
  {
    v29.__r_.__value_.__r.__words[2] = 0;
    *((_BYTE *)&v29.__r_.__value_.__s + 23) = v6 + 12;
    v13 = &v29.__r_.__value_.__s.__data_[12];
    v29.__r_.__value_.__s.__data_[13] = 0;
    HIWORD(v29.__r_.__value_.__r.__words[1]) = 0;
    strcpy((char *)&v29, "qmi::Client[");
    if (!v6)
      goto LABEL_15;
  }
  if (v5 >= 0)
    v17 = (const std::string::value_type *)a2;
  else
    v17 = *(const std::string::value_type **)a2;
  memmove(v13, v17, v6);
LABEL_15:
  v13[v6] = 0;
  v18 = std::string::append(&v29, "]", 1uLL);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v31 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (v31 >= 0)
    v20 = __p;
  else
    v20 = (void **)__p[0];
  v21 = dispatch_queue_create((const char *)v20, 0);
  v22 = qmi::asShortString(a4);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v28, "com.apple.telephony.bb", v22);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v21;
  if (v21)
    dispatch_retain(v21);
  *(_QWORD *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 40), (const ctu::OsLogLogger *)v32);
  MEMORY[0x1A1AEAED4](v32);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v28);
  if (v21)
    dispatch_release(v21);
  if (SHIBYTE(v31) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_24;
  }
  else if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(v29.__r_.__value_.__l.__data_);
LABEL_24:
  *(_QWORD *)a1 = off_1E4152870;
  *(_QWORD *)(a1 + 48) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v23 = *a2;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 56) = v23;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 80), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v24 = *a3;
    *(_QWORD *)(a1 + 96) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 80) = v24;
  }
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 104) = a4;
  *(_QWORD *)(a1 + 112) = xpc_null_create();
  object = xpc_null_create();
  MEMORY[0x1A1AEAF64](a1 + 120, &object);
  xpc_release(object);
  object = 0;
  *(_QWORD *)(a1 + 128) = xpc_null_create();
  v25 = *a5;
  *(_QWORD *)(a1 + 136) = *a5;
  if (v25)
    dispatch_retain(v25);
  *(_BYTE *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 146) = 1;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_BYTE *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  return a1;
}

void sub_19E9DA8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  uint64_t v9;
  _QWORD *v10;
  void **v11;
  const void *v13;

  if (*(char *)(v9 + 79) < 0)
  {
    operator delete(*v11);
    v13 = *(const void **)(v9 + 48);
    if (!v13)
      goto LABEL_6;
  }
  else
  {
    v13 = *(const void **)(v9 + 48);
    if (!v13)
    {
LABEL_6:
      ctu::SharedLoggable<qmi::ClientProxy::State,ctu::OsLogLogger>::~SharedLoggable(v10);
      _Unwind_Resume(a1);
    }
  }
  _Block_release(v13);
  goto LABEL_6;
}

uint64_t qmi::Client::State::State(uint64_t a1, __int128 *a2, __int128 *a3, int a4, NSObject **a5, _QWORD *a6)
{
  char v8;
  const char *v12;
  NSObject *v13;
  __int128 v14;
  __int128 v15;
  NSObject *v16;
  uint64_t v17;
  xpc_object_t object;
  _BYTE v20[16];
  _BYTE v21[8];

  v8 = a4;
  v12 = qmi::asShortString(a4);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v20, "com.apple.telephony.bb", v12);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v13 = *a5;
  *(_QWORD *)(a1 + 24) = *a5;
  if (v13)
    dispatch_retain(v13);
  *(_QWORD *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 40), (const ctu::OsLogLogger *)v21);
  MEMORY[0x1A1AEAED4](v21);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v20);
  *(_QWORD *)a1 = off_1E4152870;
  *(_QWORD *)(a1 + 48) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v14 = *a2;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 56) = v14;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 80), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v15 = *a3;
    *(_QWORD *)(a1 + 96) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 80) = v15;
  }
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 104) = v8;
  *(_QWORD *)(a1 + 112) = xpc_null_create();
  object = xpc_null_create();
  MEMORY[0x1A1AEAF64](a1 + 120, &object);
  xpc_release(object);
  object = 0;
  *(_QWORD *)(a1 + 128) = xpc_null_create();
  v16 = *a5;
  *(_QWORD *)(a1 + 136) = *a5;
  if (v16)
    dispatch_retain(v16);
  *(_BYTE *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 146) = 1;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  v17 = a6[1];
  *(_BYTE *)(a1 + 256) = v17 != 0;
  *(_QWORD *)(a1 + 264) = *a6;
  *(_QWORD *)(a1 + 272) = v17;
  *a6 = 0;
  a6[1] = 0;
  *(_BYTE *)(a1 + 280) = 1;
  return a1;
}

void sub_19E9DABD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  uint64_t v9;
  _QWORD *v10;
  void **v11;
  const void *v13;

  if (*(char *)(v9 + 79) < 0)
  {
    operator delete(*v11);
    v13 = *(const void **)(v9 + 48);
    if (!v13)
      goto LABEL_6;
  }
  else
  {
    v13 = *(const void **)(v9 + 48);
    if (!v13)
    {
LABEL_6:
      ctu::SharedLoggable<qmi::ClientProxy::State,ctu::OsLogLogger>::~SharedLoggable(v10);
      _Unwind_Resume(a1);
    }
  }
  _Block_release(v13);
  goto LABEL_6;
}

void qmi::Client::State::~State(qmi::Client::State *this)
{
  std::__shared_weak_count *v2;
  const void *v3;
  void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned int *v11;
  unsigned int *v12;
  int v13;
  const void *v14;
  NSObject *v15;
  const void *v16;
  NSObject *v17;
  NSObject *v18;
  std::__shared_weak_count *v19;

  *(_QWORD *)this = off_1E4152870;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (const void *)*((_QWORD *)this + 31);
  if (v3)
    _Block_release(v3);
  v4 = (void *)*((_QWORD *)this + 28);
  if (v4)
  {
    *((_QWORD *)this + 29) = v4;
    operator delete(v4);
  }
  std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>>>>::destroy(*((_QWORD **)this + 26));
  v5 = (const void *)*((_QWORD *)this + 24);
  if (v5)
    _Block_release(v5);
  v6 = (const void *)*((_QWORD *)this + 23);
  if (v6)
    _Block_release(v6);
  v7 = (const void *)*((_QWORD *)this + 22);
  if (v7)
    _Block_release(v7);
  v8 = *((_QWORD *)this + 19);
  if (v8)
  {
    v9 = *((_QWORD *)this + 20);
    v10 = (void *)*((_QWORD *)this + 19);
    if (v9 != v8)
    {
      do
      {
        v11 = *(unsigned int **)(v9 - 16);
        if (v11)
        {
          v12 = v11 + 2;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (v13 <= 0)
          {
            _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x3F, "prevRefCount", ">", "0", (const char *)v13, 0);
          }
          else if (v13 == 1)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
          }
        }
        v14 = *(const void **)(v9 - 8);
        if (v14)
          _Block_release(v14);
        v9 -= 24;
      }
      while (v9 != v8);
      v10 = (void *)*((_QWORD *)this + 19);
    }
    *((_QWORD *)this + 20) = v8;
    operator delete(v10);
  }
  v15 = *((_QWORD *)this + 17);
  if (v15)
    dispatch_release(v15);
  xpc_release(*((xpc_object_t *)this + 16));
  *((_QWORD *)this + 16) = 0;
  MEMORY[0x1A1AEAF70]((char *)this + 120);
  MEMORY[0x1A1AEAF4C]((char *)this + 112);
  if ((*((char *)this + 103) & 0x80000000) == 0)
  {
    if ((*((char *)this + 79) & 0x80000000) == 0)
      goto LABEL_32;
LABEL_35:
    operator delete(*((void **)this + 7));
    v16 = (const void *)*((_QWORD *)this + 6);
    if (!v16)
      goto LABEL_37;
    goto LABEL_36;
  }
  operator delete(*((void **)this + 10));
  if (*((char *)this + 79) < 0)
    goto LABEL_35;
LABEL_32:
  v16 = (const void *)*((_QWORD *)this + 6);
  if (v16)
LABEL_36:
    _Block_release(v16);
LABEL_37:
  MEMORY[0x1A1AEAED4]((char *)this + 40);
  v17 = *((_QWORD *)this + 4);
  if (v17)
    dispatch_release(v17);
  v18 = *((_QWORD *)this + 3);
  if (v18)
    dispatch_release(v18);
  v19 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
}

void qmi::Client::State::handleServerError(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v4;
  NSObject *v5;
  xpc_object_t v6;

  if (*a2 == (xpc_object_t)MEMORY[0x1E0C81260])
  {
    ctu::XpcClientHelper::setServer();
    v4 = *a2;
    v6 = v4;
    if (v4)
    {
      xpc_retain(v4);
    }
    else
    {
      v4 = xpc_null_create();
      v6 = v4;
    }
    v5 = 0;
    qmi::Client::State::sendServerFailure_sync(a1, &v6, &v5);
    xpc_release(v4);
  }
  else if (*a2 == (xpc_object_t)MEMORY[0x1E0C81258])
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  }
}

void qmi::Client::State::sendServerFailure_sync(uint64_t a1, xpc_object_t *a2, NSObject **a3)
{
  NSObject *v5;
  xpc_object_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char v12;
  const void *v13;
  void *v14;
  _QWORD *v15;
  xpc_object_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!*(_QWORD *)(a1 + 192))
    return;
  v5 = *(NSObject **)(a1 + 136);
  v6 = *a2;
  if (!*a2)
  {
    v6 = xpc_null_create();
    v7 = *a3;
    if (!v7)
      goto LABEL_5;
    goto LABEL_4;
  }
  xpc_retain(*a2);
  v7 = *a3;
  if (v7)
  {
LABEL_4:
    dispatch_retain(v7);
    dispatch_group_enter(v7);
  }
LABEL_5:
  v8 = *(_QWORD *)(a1 + 264);
  v9 = *(_QWORD *)(a1 + 272);
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *(_BYTE *)(a1 + 256);
  v13 = *(const void **)(a1 + 192);
  if (v13)
    v14 = _Block_copy(v13);
  else
    v14 = 0;
  v15 = operator new(0x30uLL);
  *v15 = v6;
  v16 = xpc_null_create();
  v15[1] = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(v7);
  }
  v15[2] = v8;
  v15[3] = v9;
  *((_BYTE *)v15 + 32) = v12;
  v15[5] = v14;
  v17 = 0;
  v18 = 0;
  dispatch_async_f(v5, v15, (dispatch_function_t)dispatch::async<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0,std::default_delete<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0,std::default_delete<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0>>::~unique_ptr[abi:ne180100](&v17);
  std::unique_ptr<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0,std::default_delete<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0>>::~unique_ptr[abi:ne180100](&v18);
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
  xpc_release(v16);
}

void qmi::Client::State::handleClientError(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t v5;
  xpc_object_t v6;
  void *v7;
  NSObject *v8;
  NSObject *v9;
  xpc_object_t v10;
  NSObject *v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD v29[6];
  std::__shared_weak_count *v30;
  xpc_object_t v31;
  _BYTE buf[24];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (*a3 != (xpc_object_t)MEMORY[0x1E0C81288])
  {
    v5 = xpc_null_create();
    v6 = xpc_null_create();
    v7 = *(void **)(a1 + 128);
    *(_QWORD *)(a1 + 128) = v5;
    xpc_release(v7);
    xpc_release(v6);
    v8 = dispatch_group_create();
    v9 = v8;
    *(_QWORD *)buf = v8;
    if (v8)
    {
      dispatch_retain(v8);
      dispatch_group_enter(v9);
      dispatch_release(v9);
    }
    v10 = *a3;
    v31 = v10;
    if (v10)
    {
      xpc_retain(v10);
    }
    else
    {
      v10 = xpc_null_create();
      v31 = v10;
    }
    qmi::Client::State::sendServerFailure_sync(a1, &v31, (NSObject **)buf);
    xpc_release(v10);
    v31 = 0;
    if (MEMORY[0x1A1AEB9A8](*(_QWORD *)(a1 + 112)) != MEMORY[0x1E0C812E0])
      goto LABEL_36;
    v13 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v13 || (v14 = *(_QWORD *)(a1 + 8), (v15 = std::__shared_weak_count::lock(v13)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v16 = v15;
    p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v18 = __ldxr(p_shared_weak_owners);
    while (__stxr(v18 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (v20)
    {
      v21 = std::__shared_weak_count::lock(v15);
      if (v21)
        goto LABEL_20;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v16);
      v21 = std::__shared_weak_count::lock(v16);
      if (v21)
      {
LABEL_20:
        v22 = (unint64_t *)&v21->__shared_weak_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
        std::__shared_weak_count::__release_weak(v16);
        v24 = (unint64_t *)&v21->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (v25)
          goto LABEL_29;
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        v16 = v21;
LABEL_28:
        std::__shared_weak_count::__release_weak(v16);
LABEL_29:
        v9 = *(NSObject **)buf;
        v26 = *(NSObject **)(a1 + 24);
        v29[0] = MEMORY[0x1E0C809B0];
        v29[1] = 1174405120;
        v29[2] = ___ZN3qmi6Client5State17handleClientErrorERKN3xpc10connectionERKNS2_6objectE_block_invoke;
        v29[3] = &__block_descriptor_tmp_0;
        v29[4] = a1;
        v29[5] = v14;
        v30 = v21;
        if (v21)
        {
          v27 = (unint64_t *)&v21->__shared_weak_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        dispatch_group_notify(v9, v26, v29);
        if (v30)
          std::__shared_weak_count::__release_weak(v30);
        if (v21)
          std::__shared_weak_count::__release_weak(v21);
LABEL_36:
        if (v9)
        {
          dispatch_group_leave(v9);
          dispatch_release(v9);
        }
        return;
      }
    }
    v14 = 0;
    goto LABEL_28;
  }
  v11 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = (_QWORD *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0)
      v12 = (_QWORD *)*v12;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v12;
    _os_log_impl(&dword_19E9C8000, v11, OS_LOG_TYPE_DEFAULT, "#I client '%s' ignoring XPC_ERROR_TERMINATION_IMMINENT", buf, 0xCu);
  }
}

void sub_19E9DB3C4(_Unwind_Exception *exception_object)
{
  NSObject *v1;

  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3qmi6Client5State17handleClientErrorERKN3xpc10connectionERKNS2_6objectE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_19E9DB4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c24_ZTSNSt3__18weak_ptrIvEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c24_ZTSNSt3__18weak_ptrIvEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void qmi::Client::State::setClientHandle(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  NSObject *v9;
  _QWORD v10[2];
  _QWORD block[6];

  v10[0] = a1;
  v10[1] = a2;
  if (*(_BYTE *)(a1 + 280))
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 136));
    v5 = *a2;
    v4 = a2[1];
    if (v4)
    {
      v6 = (unint64_t *)(v4 + 16);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    v8 = *(std::__shared_weak_count **)(a1 + 272);
    *(_QWORD *)(a1 + 264) = v5;
    *(_QWORD *)(a1 + 272) = v4;
    if (v8)
      std::__shared_weak_count::__release_weak(v8);
    *(_BYTE *)(a1 + 256) = a2[1] != 0;
  }
  else
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi6Client5StateEE20execute_wrapped_syncIZNS3_15setClientHandleERKNSt3__18weak_ptrIvEEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSC__block_invoke;
    block[3] = &__block_descriptor_tmp_29;
    block[4] = a1 + 8;
    block[5] = v10;
    v9 = *(NSObject **)(a1 + 24);
    if (*(_QWORD *)(a1 + 32))
      dispatch_async_and_wait(v9, block);
    else
      dispatch_sync(v9, block);
  }
}

void qmi::Client::State::stop(qmi::Client::State *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v2 || (v3 = *((_QWORD *)this + 1), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = operator new(8uLL);
  *v6 = this;
  v7 = *((_QWORD *)this + 3);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = operator new(0x18uLL);
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::stop(void)::$_0>(qmi::Client::State::stop(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::stop(void)::$_0,dispatch_queue_s *::default_delete<qmi::Client::State::stop(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void qmi::Client::State::sendStopMessage_sync(qmi::Client::State *this)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t xdict;

  if (!*((_BYTE *)this + 144))
    return;
  *((_BYTE *)this + 144) = 0;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    xdict = v2;
  }
  else
  {
    v3 = xpc_null_create();
    xdict = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_9;
    }
  }
  if (MEMORY[0x1A1AEB9A8](v3) != MEMORY[0x1E0C812F8])
  {
    v4 = xpc_null_create();
LABEL_9:
    xdict = v4;
    goto LABEL_10;
  }
  xpc_retain(v3);
LABEL_10:
  xpc_release(v3);
  v5 = xpc_int64_create(1);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "status", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  (*(void (**)(qmi::Client::State *, xpc_object_t *))(*(_QWORD *)this + 56))(this, &xdict);
  xpc_release(xdict);
}

void sub_19E9DB7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void qmi::Client::State::start(qmi::Client::State *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v2 || (v3 = *((_QWORD *)this + 1), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = operator new(8uLL);
  *v6 = this;
  v7 = *((_QWORD *)this + 3);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = operator new(0x18uLL);
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::start(void)::$_0>(qmi::Client::State::start(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::start(void)::$_0,dispatch_queue_s *::default_delete<qmi::Client::State::start(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void qmi::Client::State::sendStartMessage_sync(qmi::Client::State *this)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t xdict;

  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    xdict = v2;
  }
  else
  {
    v3 = xpc_null_create();
    xdict = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A1AEB9A8](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  xdict = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_int64_create(2);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "status", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v7 = xpc_BOOL_create(*((_QWORD *)this + 31) != 0);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "low_power", v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v9 = xpc_BOOL_create(*((_QWORD *)this + 6) != 0);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "exit_low_power", v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  (*(void (**)(qmi::Client::State *, xpc_object_t *))(*(_QWORD *)this + 56))(this, &xdict);
  xpc_release(xdict);
}

void sub_19E9DBA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void qmi::Client::State::handleStatus_sync(uint64_t a1, xpc_object_t *a2, int a3)
{
  const void *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char v11;
  void *v12;
  xpc_object_t v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  char v20;
  const void *v21;
  void *v22;
  xpc_object_t v23;
  _QWORD *v24;
  NSObject *v25;
  _QWORD *v26;
  xpc_object_t value;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  char v34;
  NSObject *v35;
  _QWORD *v36;
  uint64_t v37;
  xpc_object_t object;

  if (a3 != 1)
  {
    if (a3 != 2)
      return;
    v5 = *(const void **)(a1 + 176);
    if (!v5)
      return;
    v6 = *(NSObject **)(a1 + 136);
    v7 = *(_QWORD *)(a1 + 264);
    v8 = *(_QWORD *)(a1 + 272);
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 16);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      v5 = *(const void **)(a1 + 176);
      v11 = *(_BYTE *)(a1 + 256);
      if (!v5)
      {
        v12 = 0;
        v13 = *a2;
        if (!*a2)
        {
LABEL_9:
          v13 = xpc_null_create();
LABEL_23:
          v24 = operator new(0x28uLL);
          *v24 = v7;
          v24[1] = v8;
          *((_BYTE *)v24 + 16) = v11;
          v24[3] = v12;
          v24[4] = v13;
          if (v13)
            xpc_retain(v13);
          else
            v24[4] = xpc_null_create();
          dispatch_async_f(v6, v24, (dispatch_function_t)dispatch::async<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_0>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_0,std::default_delete<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_0>>)::{lambda(void *)#1}::__invoke);
          xpc_release(v13);
          return;
        }
LABEL_22:
        xpc_retain(v13);
        goto LABEL_23;
      }
    }
    else
    {
      v11 = *(_BYTE *)(a1 + 256);
    }
    v12 = _Block_copy(v5);
    v13 = *a2;
    if (!*a2)
      goto LABEL_9;
    goto LABEL_22;
  }
  v14 = dispatch_group_create();
  v15 = v14;
  if (v14)
  {
    dispatch_retain(v14);
    dispatch_group_enter(v15);
    dispatch_release(v15);
    if (*(_QWORD *)(a1 + 184))
    {
      dispatch_retain(v15);
      dispatch_group_enter(v15);
      goto LABEL_14;
    }
  }
  else if (*(_QWORD *)(a1 + 184))
  {
LABEL_14:
    v16 = *(_QWORD *)(a1 + 264);
    v17 = *(_QWORD *)(a1 + 272);
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 16);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v20 = *(_BYTE *)(a1 + 256);
    v21 = *(const void **)(a1 + 184);
    if (v21)
    {
      v22 = _Block_copy(v21);
      v23 = *a2;
      if (*a2)
      {
LABEL_19:
        xpc_retain(v23);
LABEL_27:
        v25 = *(NSObject **)(a1 + 136);
        v26 = operator new(0x30uLL);
        *v26 = v15;
        v26[1] = v16;
        v26[2] = v17;
        *((_BYTE *)v26 + 24) = v20;
        v26[4] = v22;
        v26[5] = v23;
        if (v23)
          xpc_retain(v23);
        else
          v26[5] = xpc_null_create();
        v37 = 0;
        object = 0;
        dispatch_async_f(v25, v26, (dispatch_function_t)dispatch::async<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1,std::default_delete<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1>>)::{lambda(void *)#1}::__invoke);
        std::unique_ptr<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1,std::default_delete<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1>>::~unique_ptr[abi:ne180100](&v37);
        std::unique_ptr<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1,std::default_delete<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1>>::~unique_ptr[abi:ne180100]((uint64_t *)&object);
        xpc_release(v23);
        goto LABEL_31;
      }
    }
    else
    {
      v22 = 0;
      v23 = *a2;
      if (*a2)
        goto LABEL_19;
    }
    v23 = xpc_null_create();
    goto LABEL_27;
  }
LABEL_31:
  value = xpc_dictionary_get_value(*a2, "error");
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  v28 = xpc::dyn_cast_or_default();
  xpc_release(object);
  if (*(_BYTE *)(a1 + 144))
    v29 = v28;
  else
    v29 = 0;
  if (v29 == 1)
  {
    v31 = *(_QWORD *)(a1 + 264);
    v30 = *(_QWORD *)(a1 + 272);
    if (v30)
    {
      v32 = (unint64_t *)(v30 + 16);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    v34 = *(_BYTE *)(a1 + 256);
    v35 = *(NSObject **)(a1 + 24);
    v36 = operator new(0x20uLL);
    *v36 = a1;
    v36[1] = v31;
    v36[2] = v30;
    *((_BYTE *)v36 + 24) = v34;
    dispatch_group_notify_f(v15, v35, v36, (dispatch_function_t)dispatch::detail::group_notify<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_2>(dispatch_group_s *,dispatch_queue_s *,qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_2 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  }
  if (v15)
  {
    dispatch_group_leave(v15);
    dispatch_release(v15);
  }
}

void sub_19E9DBDC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  NSObject *v10;
  std::__shared_weak_count *v11;

  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  if (v10)
  {
    dispatch_group_leave(v10);
    dispatch_release(v10);
  }
  _Unwind_Resume(exception_object);
}

void qmi::Client::State::handleExitLowPower_sync(uint64_t a1)
{
  const void *v2;
  void *v3;
  const void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  char v9;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  _QWORD v14[5];
  std::__shared_weak_count *v15;
  void *aBlock;
  char v17;

  v2 = *(const void **)(a1 + 48);
  if (!v2)
    return;
  v3 = _Block_copy(v2);
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 264);
  v6 = *(std::__shared_weak_count **)(a1 + 272);
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  v9 = *(_BYTE *)(a1 + 256);
  v10 = *(NSObject **)(a1 + 136);
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 1174405120;
  v14[2] = ___ZN3qmi6Client5State23handleExitLowPower_syncERKN3xpc4dictE_block_invoke;
  v14[3] = &__block_descriptor_tmp_15_0;
  v14[4] = v5;
  v15 = v6;
  if (v6)
  {
    v11 = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v17 = v9;
  if (v3)
  {
    aBlock = _Block_copy(v3);
    dispatch_async(v10, v14);
    v13 = aBlock;
    if (!aBlock)
      goto LABEL_13;
    goto LABEL_12;
  }
  aBlock = 0;
  dispatch_async(v10, v14);
  v13 = aBlock;
  if (aBlock)
LABEL_12:
    _Block_release(v13);
LABEL_13:
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  if (v4)
    _Block_release(v4);
}

void qmi::Client::LocalState::setProxyMessenger(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;

  v3 = *a2;
  v2 = a2[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a1 + 328);
  *(_QWORD *)(a1 + 320) = v3;
  *(_QWORD *)(a1 + 328) = v2;
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void qmi::Client::XPCState::handleEnterLowPower_sync(uint64_t a1, xpc_object_t *a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  char v10;
  const void *v11;
  void *v12;
  xpc_object_t v13;
  NSObject *v14;
  _QWORD *v15;
  xpc_object_t reply;
  xpc_object_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  NSObject *v26;
  unint64_t v27;
  _QWORD v28[6];
  std::__shared_weak_count *v29;
  xpc_object_t object;
  uint64_t v31;
  uint64_t v32;

  v4 = dispatch_group_create();
  v5 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
    dispatch_release(v5);
    if (*(_QWORD *)(a1 + 248))
    {
      dispatch_retain(v5);
      dispatch_group_enter(v5);
      goto LABEL_5;
    }
  }
  else if (*(_QWORD *)(a1 + 248))
  {
LABEL_5:
    v6 = *(_QWORD *)(a1 + 264);
    v7 = *(_QWORD *)(a1 + 272);
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 16);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = *(_BYTE *)(a1 + 256);
    v11 = *(const void **)(a1 + 248);
    if (v11)
    {
      v12 = _Block_copy(v11);
      v13 = *a2;
      if (*a2)
      {
LABEL_10:
        xpc_retain(v13);
LABEL_13:
        v14 = *(NSObject **)(a1 + 136);
        v15 = operator new(0x30uLL);
        *v15 = v5;
        v15[1] = v6;
        v15[2] = v7;
        *((_BYTE *)v15 + 24) = v10;
        v15[4] = v12;
        v15[5] = v13;
        if (v13)
          xpc_retain(v13);
        else
          v15[5] = xpc_null_create();
        v31 = 0;
        v32 = 0;
        dispatch_async_f(v14, v15, (dispatch_function_t)dispatch::async<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0>(dispatch_queue_s *,std::unique_ptr<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>)::{lambda(void *)#1}::__invoke);
        std::unique_ptr<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>::~unique_ptr[abi:ne180100](&v31);
        std::unique_ptr<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>::~unique_ptr[abi:ne180100](&v32);
        xpc_release(v13);
        goto LABEL_17;
      }
    }
    else
    {
      v12 = 0;
      v13 = *a2;
      if (*a2)
        goto LABEL_10;
    }
    v13 = xpc_null_create();
    goto LABEL_13;
  }
LABEL_17:
  reply = xpc_dictionary_create_reply(*a2);
  if (reply || (reply = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A1AEB9A8](reply) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(reply);
      v17 = reply;
    }
    else
    {
      v17 = xpc_null_create();
    }
  }
  else
  {
    v17 = xpc_null_create();
    reply = 0;
  }
  xpc_release(reply);
  v18 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v18 || (v19 = *(_QWORD *)(a1 + 8), (v20 = std::__shared_weak_count::lock(v18)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v21 = v20;
  p_shared_weak_owners = (unint64_t *)&v20->__shared_weak_owners_;
  do
    v23 = __ldxr(p_shared_weak_owners);
  while (__stxr(v23 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v21);
  }
  v26 = *(NSObject **)(a1 + 24);
  v28[0] = MEMORY[0x1E0C809B0];
  v28[1] = 1174405120;
  v28[2] = ___ZN3qmi6Client8XPCState24handleEnterLowPower_syncERKN3xpc4dictE_block_invoke;
  v28[3] = &__block_descriptor_tmp_13;
  v28[4] = a1;
  v28[5] = v19;
  v29 = v21;
  do
    v27 = __ldxr(p_shared_weak_owners);
  while (__stxr(v27 + 1, p_shared_weak_owners));
  object = v17;
  if (v17)
    xpc_retain(v17);
  else
    object = xpc_null_create();
  dispatch_group_notify(v5, v26, v28);
  xpc_release(object);
  object = 0;
  if (v29)
    std::__shared_weak_count::__release_weak(v29);
  std::__shared_weak_count::__release_weak(v21);
  xpc_release(v17);
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
}

void sub_19E9DC288(_Unwind_Exception *exception_object)
{
  NSObject *v1;

  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E9DC2AC()
{
  uint64_t v0;
  void *v1;

  xpc_release(v1);
  if (!v0)
    JUMPOUT(0x19E9DC2A0);
  JUMPOUT(0x19E9DC290);
}

void ___ZN3qmi6Client8XPCState24handleEnterLowPower_syncERKN3xpc4dictE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 56))(v3, a1 + 7);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_19E9DC36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrIN3qmi6Client5StateEEE56c15_ZTSN3xpc4dictE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *v6;
  xpc_object_t result;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (void *)a2[7];
  a1[7] = v6;
  if (v6)
    return xpc_retain(v6);
  result = xpc_null_create();
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrIN3qmi6Client5StateEEE56c15_ZTSN3xpc4dictE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(_QWORD *)(a1 + 56) = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void qmi::Client::LocalState::handleEnterLowPower_sync(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  void *v7;
  NSObject *v8;
  char *v9;
  void *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  NSObject *v19;
  unint64_t v20;
  _QWORD block[6];
  std::__shared_weak_count *v22;
  dispatch_group_t group[2];
  std::__shared_weak_count *v24;
  char v25;
  void *aBlock;
  std::string __p;
  uint64_t v28;
  uint64_t v29;

  v2 = dispatch_group_create();
  v3 = v2;
  if (!v2)
  {
    if (!*(_QWORD *)(a1 + 248))
      goto LABEL_23;
    group[0] = 0;
    v4 = *(std::__shared_weak_count **)(a1 + 272);
    group[1] = *(dispatch_group_t *)(a1 + 264);
    v24 = v4;
    if (!v4)
      goto LABEL_9;
LABEL_7:
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    goto LABEL_9;
  }
  dispatch_retain(v2);
  dispatch_group_enter(v3);
  dispatch_release(v3);
  if (!*(_QWORD *)(a1 + 248))
    goto LABEL_23;
  group[0] = v3;
  dispatch_retain(v3);
  dispatch_group_enter(v3);
  v4 = *(std::__shared_weak_count **)(a1 + 272);
  group[1] = *(dispatch_group_t *)(a1 + 264);
  v24 = v4;
  if (v4)
    goto LABEL_7;
LABEL_9:
  v25 = *(_BYTE *)(a1 + 256);
  v7 = *(void **)(a1 + 248);
  if (v7)
    v7 = _Block_copy(v7);
  aBlock = v7;
  if (*(char *)(a1 + 79) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 56), *(_QWORD *)(a1 + 64));
  else
    __p = *(std::string *)(a1 + 56);
  v8 = *(NSObject **)(a1 + 136);
  v9 = (char *)operator new(0x40uLL);
  *(_OWORD *)v9 = *(_OWORD *)group;
  *((_QWORD *)v9 + 2) = v24;
  group[1] = 0;
  v24 = 0;
  v9[24] = v25;
  *((_QWORD *)v9 + 4) = aBlock;
  group[0] = 0;
  aBlock = 0;
  *(std::string *)(v9 + 40) = __p;
  memset(&__p, 0, sizeof(__p));
  v28 = 0;
  v29 = 0;
  dispatch_async_f(v8, v9, (dispatch_function_t)dispatch::async<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0>(dispatch_queue_s *,std::unique_ptr<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>::~unique_ptr[abi:ne180100](&v28);
  std::unique_ptr<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>::~unique_ptr[abi:ne180100](&v29);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v10 = aBlock;
    if (!aBlock)
      goto LABEL_19;
    goto LABEL_18;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  v10 = aBlock;
  if (aBlock)
LABEL_18:
    _Block_release(v10);
LABEL_19:
  if (v24)
    std::__shared_weak_count::__release_weak(v24);
  if (group[0])
  {
    dispatch_group_leave(group[0]);
    dispatch_release(group[0]);
  }
LABEL_23:
  v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v11 || (v12 = *(_QWORD *)(a1 + 8), (v13 = std::__shared_weak_count::lock(v11)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v14 = v13;
  v15 = (unint64_t *)&v13->__shared_weak_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v14);
  }
  v19 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZN3qmi6Client10LocalState24handleEnterLowPower_syncERKN3xpc4dictE_block_invoke;
  block[3] = &__block_descriptor_tmp_14;
  block[4] = a1;
  block[5] = v12;
  v22 = v14;
  do
    v20 = __ldxr(v15);
  while (__stxr(v20 + 1, v15));
  dispatch_group_notify(v3, v19, block);
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  std::__shared_weak_count::__release_weak(v14);
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
}

void sub_19E9DC6CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, dispatch_group_t group, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,void *aBlock)
{
  NSObject *v21;

  if (aBlock)
    _Block_release(aBlock);
  if (a19)
    std::__shared_weak_count::__release_weak(a19);
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (v21)
  {
    dispatch_group_leave(v21);
    dispatch_release(v21);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3qmi6Client10LocalState24handleEnterLowPower_syncERKN3xpc4dictE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  xpc_object_t v5;
  xpc_object_t v6;
  std::__shared_weak_count *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t xdict;
  std::__shared_weak_count *v15;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    return;
  v3 = a1[4];
  v4 = std::__shared_weak_count::lock(v2);
  v15 = v4;
  if (!v4)
    return;
  if (!a1[5])
  {
    v7 = v4;
LABEL_16:
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  v5 = xpc_dictionary_create(0, 0, 0);
  v6 = v5;
  if (v5)
  {
    xdict = v5;
  }
  else
  {
    v6 = xpc_null_create();
    xdict = v6;
    if (!v6)
    {
      v8 = xpc_null_create();
      v6 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1A1AEB9A8](v6) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v6);
    goto LABEL_13;
  }
  v8 = xpc_null_create();
LABEL_12:
  xdict = v8;
LABEL_13:
  xpc_release(v6);
  v9 = xpc_BOOL_create(1);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(xdict, "low_power_reply", v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  (*(void (**)(uint64_t, xpc_object_t *))(*(_QWORD *)v3 + 56))(v3, &xdict);
  xpc_release(xdict);
  v7 = v15;
  if (v15)
    goto LABEL_16;
}

void sub_19E9DC8B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
  xpc_release(object);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrIN3qmi6Client5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrIN3qmi6Client5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN3qmi6Client5State23handleExitLowPower_syncERKN3xpc4dictE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  BOOL v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
  {
    v3 = 0;
LABEL_10:
    if (*(_BYTE *)(a1 + 56))
      goto LABEL_12;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    goto LABEL_10;
  if (*(_BYTE *)(a1 + 56))
    v4 = *(_QWORD *)(a1 + 32) == 0;
  else
    v4 = 0;
  if (v4)
    goto LABEL_12;
LABEL_11:
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
LABEL_12:
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_19E9DC9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c24_ZTSNSt3__18weak_ptrIvEE48c44_ZTSN8dispatch5blockIU13block_pointerFvPvEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[6];
  if (result)
    result = _Block_copy(result);
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c24_ZTSNSt3__18weak_ptrIvEE48c44_ZTSN8dispatch5blockIU13block_pointerFvPvEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 48);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void qmi::Client::State::send(_QWORD *a1, xpc_object_t *a2)
{
  xpc_object_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v4 = (std::__shared_weak_count *)a1[2];
    if (!v4)
LABEL_16:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v3 = xpc_null_create();
    v4 = (std::__shared_weak_count *)a1[2];
    if (!v4)
      goto LABEL_16;
  }
  v5 = a1[1];
  v6 = std::__shared_weak_count::lock(v4);
  if (!v6)
    goto LABEL_16;
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  if (v3)
    xpc_retain(v3);
  else
    v8[1] = xpc_null_create();
  v9 = a1[3];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v9, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::send(xpc::dict const&)::$_0>(qmi::Client::State::send(xpc::dict const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::send(xpc::dict const&)::$_0,dispatch_queue_s *::default_delete<qmi::Client::State::send(xpc::dict const&)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  xpc_release(v3);
}

uint64_t qmi::Client::State::pickNextTxId_sync(qmi::Client::State *this)
{
  uint64_t v1;
  __int16 v2;

  v1 = *((unsigned __int16 *)this + 73);
  if ((((_WORD)v1 + 1) & 0xFFFE) != 0)
    v2 = v1 + 1;
  else
    v2 = 1;
  *((_WORD *)this + 73) = v2;
  return v1;
}

void qmi::Client::State::Transaction::~Transaction(qmi::Client::State::Transaction *this)
{
  unsigned int *v2;
  unsigned int *v3;
  int v4;
  const void *v5;

  v2 = (unsigned int *)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = v2 + 2;
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (v4 <= 0)
    {
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x3F, "prevRefCount", ">", "0", (const char *)v4, 0);
    }
    else if (v4 == 1)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  v5 = (const void *)*((_QWORD *)this + 2);
  if (v5)
    _Block_release(v5);
}

void qmi::Client::State::setHandler(_QWORD *a1, int a2, const void **a3)
{
  void *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _DWORD *v10;
  unint64_t *p_shared_owners;
  NSObject *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;

  if (*a3)
  {
    v5 = _Block_copy(*a3);
    v6 = (std::__shared_weak_count *)a1[2];
    if (!v6)
LABEL_12:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v5 = 0;
    v6 = (std::__shared_weak_count *)a1[2];
    if (!v6)
      goto LABEL_12;
  }
  v7 = a1[1];
  v8 = std::__shared_weak_count::lock(v6);
  if (!v8)
    goto LABEL_12;
  v9 = v8;
  v10 = operator new(0x18uLL);
  *(_QWORD *)v10 = a1;
  v10[2] = a2;
  *((_QWORD *)v10 + 2) = v5;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v12 = a1[3];
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v14 = operator new(0x18uLL);
  *v14 = v10;
  v14[1] = v7;
  v14[2] = v9;
  dispatch_async_f(v12, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(void *)>)::$_0>(qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(void *)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(void *)>)::$_0,dispatch_queue_s *::default_delete<qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(void *)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

{
  void *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _DWORD *v10;
  unint64_t *p_shared_owners;
  NSObject *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;

  if (*a3)
  {
    v5 = _Block_copy(*a3);
    v6 = (std::__shared_weak_count *)a1[2];
    if (!v6)
LABEL_12:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v5 = 0;
    v6 = (std::__shared_weak_count *)a1[2];
    if (!v6)
      goto LABEL_12;
  }
  v7 = a1[1];
  v8 = std::__shared_weak_count::lock(v6);
  if (!v8)
    goto LABEL_12;
  v9 = v8;
  v10 = operator new(0x18uLL);
  *(_QWORD *)v10 = a1;
  v10[2] = a2;
  *((_QWORD *)v10 + 2) = v5;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v12 = a1[3];
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v14 = operator new(0x18uLL);
  *v14 = v10;
  v14[1] = v7;
  v14[2] = v9;
  dispatch_async_f(v12, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(dispatch_group_s *)>)::$_0>(qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(dispatch_group_s *)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(dispatch_group_s *)>)::$_0,dispatch_queue_s *::default_delete<qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(dispatch_group_s *)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void qmi::Client::State::setIndHandler(_QWORD *a1, __int16 a2, const void **a3)
{
  void *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _WORD *v10;
  unint64_t *p_shared_owners;
  NSObject *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;

  if (*a3)
  {
    v5 = _Block_copy(*a3);
    v6 = (std::__shared_weak_count *)a1[2];
    if (!v6)
LABEL_12:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v5 = 0;
    v6 = (std::__shared_weak_count *)a1[2];
    if (!v6)
      goto LABEL_12;
  }
  v7 = a1[1];
  v8 = std::__shared_weak_count::lock(v6);
  if (!v8)
    goto LABEL_12;
  v9 = v8;
  v10 = operator new(0x18uLL);
  *(_QWORD *)v10 = a1;
  v10[4] = a2;
  *((_QWORD *)v10 + 2) = v5;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v12 = a1[3];
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v14 = operator new(0x18uLL);
  *v14 = v10;
  v14[1] = v7;
  v14[2] = v9;
  dispatch_async_f(v12, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::setIndHandler(unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>)::$_0>(qmi::Client::State::setIndHandler(unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::setIndHandler(unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>)::$_0,dispatch_queue_s *::default_delete<qmi::Client::State::setIndHandler(unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void qmi::Client::State::setIndShouldWake(qmi::Client::State *this, __int16 a2, char a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _WORD *v10;
  unint64_t *p_shared_owners;
  NSObject *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v4 || (v7 = *((_QWORD *)this + 1), (v8 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  v10 = operator new(0x10uLL);
  *(_QWORD *)v10 = this;
  v10[4] = a2;
  *((_BYTE *)v10 + 10) = a3;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v12 = *((_QWORD *)this + 3);
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v14 = operator new(0x18uLL);
  *v14 = v10;
  v14[1] = v7;
  v14[2] = v9;
  dispatch_async_f(v12, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::setIndShouldWake(unsigned short,BOOL)::$_0>(qmi::Client::State::setIndShouldWake(unsigned short,BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::setIndShouldWake(unsigned short,BOOL)::$_0,dispatch_queue_s *::default_delete<qmi::Client::State::setIndShouldWake(unsigned short,BOOL)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void qmi::Client::State::sendIndWakeSet_sync(qmi::Client::State *this)
{
  xpc_object_t v2;
  xpc_object_t v3;
  unsigned __int16 *v4;
  unsigned __int16 *i;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t xdict;

  v2 = xpc_array_create(0, 0);
  if (v2 || (v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A1AEB9A8](v2) == MEMORY[0x1E0C812C8])
    {
      xpc_retain(v2);
      v3 = v2;
    }
    else
    {
      v3 = xpc_null_create();
    }
  }
  else
  {
    v3 = xpc_null_create();
    v2 = 0;
  }
  xpc_release(v2);
  v4 = (unsigned __int16 *)*((_QWORD *)this + 28);
  for (i = (unsigned __int16 *)*((_QWORD *)this + 29); v4 != i; ++v4)
  {
    v6 = xpc_int64_create(*v4);
    if (!v6)
      v6 = xpc_null_create();
    xpc_array_append_value(v3, v6);
    xpc_release(v6);
  }
  v7 = xpc_dictionary_create(0, 0, 0);
  v8 = v7;
  if (v7)
  {
    xdict = v7;
  }
  else
  {
    v8 = xpc_null_create();
    xdict = v8;
    if (!v8)
    {
      v9 = xpc_null_create();
      v8 = 0;
      goto LABEL_18;
    }
  }
  if (MEMORY[0x1A1AEB9A8](v8) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v8);
    goto LABEL_19;
  }
  v9 = xpc_null_create();
LABEL_18:
  xdict = v9;
LABEL_19:
  xpc_release(v8);
  if (v3)
  {
    xpc_retain(v3);
    v10 = v3;
  }
  else
  {
    v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "set_ind_wake", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  (*(void (**)(qmi::Client::State *, xpc_object_t *))(*(_QWORD *)this + 56))(this, &xdict);
  xpc_release(xdict);
  xpc_release(v3);
}

void sub_19E9DD250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

_QWORD *qmi::Client::XPCState::XPCState(uint64_t a1, __int128 *a2, __int128 *a3, int a4, NSObject **a5)
{
  _QWORD *result;

  result = (_QWORD *)qmi::Client::State::State(a1, a2, a3, a4, a5);
  *result = off_1E41529B8;
  result[36] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)qmi::Client::State::State(a1, a2, a3, a4, a5);
  *result = off_1E41529B8;
  result[36] = 0;
  return result;
}

_QWORD *qmi::Client::XPCState::XPCState(uint64_t a1, __int128 *a2, __int128 *a3, int a4, NSObject **a5, _QWORD *a6)
{
  _QWORD *result;

  result = (_QWORD *)qmi::Client::State::State(a1, a2, a3, a4, a5, a6);
  *result = off_1E41529B8;
  result[36] = 0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)qmi::Client::State::State(a1, a2, a3, a4, a5, a6);
  *result = off_1E41529B8;
  result[36] = 0;
  return result;
}

void qmi::Client::XPCState::create(__int128 *a1@<X0>, __int128 *a2@<X1>, xpc_object_t *a3@<X2>, int a4@<W3>, NSObject **a5@<X4>, uint64_t *a6@<X8>)
{
  _QWORD *v12;
  uint64_t v13;
  NSObject *v14;
  xpc_object_t *v15[2];
  _QWORD block[6];

  *a6 = 0xAAAAAAAAAAAAAAAALL;
  a6[1] = 0xAAAAAAAAAAAAAAAALL;
  v12 = operator new(0x128uLL);
  qmi::Client::State::State((uint64_t)v12, a1, a2, a4, a5);
  *v12 = off_1E41529B8;
  v12[36] = 0;
  *a6 = 0xAAAAAAAAAAAAAAAALL;
  a6[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<qmi::Client::XPCState>::shared_ptr[abi:ne180100]<qmi::Client::XPCState,std::shared_ptr<qmi::Client::XPCState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::XPCState>(qmi::Client::XPCState*)::{lambda(qmi::Client::XPCState*)#1},void>(a6, (uint64_t)v12);
  v13 = *a6;
  v15[0] = a3;
  v15[1] = (xpc_object_t *)v13;
  if (*(_BYTE *)(v13 + 280))
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v13 + 136));
    qmi::Client::XPCState::init(xpc::connection const&)::$_0::operator()(v15);
  }
  else
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi6Client5StateEE20execute_wrapped_syncIZNS2_8XPCState4initERKN3xpc10connectionEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSC__block_invoke;
    block[3] = &__block_descriptor_tmp_35_0;
    block[4] = v13 + 8;
    block[5] = v15;
    v14 = *(NSObject **)(v13 + 24);
    if (*(_QWORD *)(v13 + 32))
      dispatch_async_and_wait(v14, block);
    else
      dispatch_sync(v14, block);
  }
}

void sub_19E9DD45C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E9DD470(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void qmi::Client::XPCState::init(uint64_t a1, xpc_object_t *a2)
{
  NSObject *v2;
  uint64_t v3;
  xpc_object_t *v4[2];
  _QWORD block[6];

  v4[0] = a2;
  v4[1] = (xpc_object_t *)a1;
  if (*(_BYTE *)(a1 + 280))
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 136));
    qmi::Client::XPCState::init(xpc::connection const&)::$_0::operator()(v4);
  }
  else
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi6Client5StateEE20execute_wrapped_syncIZNS2_8XPCState4initERKN3xpc10connectionEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSC__block_invoke;
    block[3] = &__block_descriptor_tmp_35_0;
    block[4] = a1 + 8;
    block[5] = v4;
    v3 = a1 + 24;
    v2 = *(NSObject **)(a1 + 24);
    if (*(_QWORD *)(v3 + 8))
      dispatch_async_and_wait(v2, block);
    else
      dispatch_sync(v2, block);
  }
}

void qmi::Client::XPCState::create(__int128 *a1@<X0>, __int128 *a2@<X1>, xpc_object_t *a3@<X2>, int a4@<W3>, NSObject **a5@<X4>, _QWORD *a6@<X5>, uint64_t *a7@<X8>)
{
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  xpc_object_t *v17[2];
  _QWORD block[6];

  *a7 = 0xAAAAAAAAAAAAAAAALL;
  a7[1] = 0xAAAAAAAAAAAAAAAALL;
  v14 = operator new(0x128uLL);
  qmi::Client::State::State((uint64_t)v14, a1, a2, a4, a5, a6);
  *v14 = off_1E41529B8;
  v14[36] = 0;
  *a7 = 0xAAAAAAAAAAAAAAAALL;
  a7[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<qmi::Client::XPCState>::shared_ptr[abi:ne180100]<qmi::Client::XPCState,std::shared_ptr<qmi::Client::XPCState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::XPCState>(qmi::Client::XPCState*)::{lambda(qmi::Client::XPCState*)#1},void>(a7, (uint64_t)v14);
  v15 = *a7;
  v17[0] = a3;
  v17[1] = (xpc_object_t *)v15;
  if (*(_BYTE *)(v15 + 280))
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v15 + 136));
    qmi::Client::XPCState::init(xpc::connection const&)::$_0::operator()(v17);
  }
  else
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi6Client5StateEE20execute_wrapped_syncIZNS2_8XPCState4initERKN3xpc10connectionEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSC__block_invoke;
    block[3] = &__block_descriptor_tmp_35_0;
    block[4] = v15 + 8;
    block[5] = v17;
    v16 = *(NSObject **)(v15 + 24);
    if (*(_QWORD *)(v15 + 32))
      dispatch_async_and_wait(v16, block);
    else
      dispatch_sync(v16, block);
  }
}

void sub_19E9DD638(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E9DD64C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void qmi::Client::XPCState::~XPCState(qmi::Client::XPCState *this)
{
  *(_QWORD *)this = off_1E41529B8;
  std::unique_ptr<qmi::Client::XPCState::ConnectHelper>::reset[abi:ne180100]((uint64_t *)this + 36, 0);
  qmi::Client::State::~State(this);
}

{
  *(_QWORD *)this = off_1E41529B8;
  std::unique_ptr<qmi::Client::XPCState::ConnectHelper>::reset[abi:ne180100]((uint64_t *)this + 36, 0);
  qmi::Client::State::~State(this);
}

{
  void *v2;

  *(_QWORD *)this = off_1E41529B8;
  std::unique_ptr<qmi::Client::XPCState::ConnectHelper>::reset[abi:ne180100]((uint64_t *)this + 36, 0);
  qmi::Client::State::~State(this);
  operator delete(v2);
}

BOOL qmi::Client::XPCState::handleNewClient(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  xpc_object_t v6;
  void *v7;
  xpc_object_t v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  _QWORD handler[5];
  std::__shared_weak_count *v24;
  xpc_object_t v25;

  v4 = MEMORY[0x1A1AEB9A8](*(_QWORD *)(a1 + 128));
  v5 = MEMORY[0x1E0C812E0];
  if (v4 == MEMORY[0x1E0C812E0])
    return v4 != v5;
  v6 = *a2;
  if (*a2)
    xpc_retain(*a2);
  else
    v6 = xpc_null_create();
  v7 = *(void **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v6;
  xpc_release(v7);
  v8 = *a2;
  if (v8)
  {
    xpc_retain(v8);
    v9 = *(NSObject **)(a1 + 24);
    if (!v9)
      goto LABEL_8;
    goto LABEL_7;
  }
  v8 = xpc_null_create();
  v9 = *(NSObject **)(a1 + 24);
  if (v9)
LABEL_7:
    dispatch_retain(v9);
LABEL_8:
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v10 || (v11 = *(_QWORD *)(a1 + 8), (v12 = std::__shared_weak_count::lock(v10)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v13 = v12;
  p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 1174405120;
  handler[2] = ___ZNK3ctu15XpcServerHelper12acceptClientIN3qmi6Client5StateEEEvN3xpc10connectionEN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke;
  handler[3] = &__block_descriptor_tmp_36;
  handler[4] = v11;
  v24 = v13;
  do
    v18 = __ldxr(p_shared_weak_owners);
  while (__stxr(v18 + 1, p_shared_weak_owners));
  v25 = v8;
  xpc_connection_set_event_handler((xpc_connection_t)v8, handler);
  xpc_connection_set_target_queue((xpc_connection_t)v8, v9);
  xpc_connection_resume((xpc_connection_t)v8);
  if (v24)
    std::__shared_weak_count::__release_weak(v24);
  std::__shared_weak_count::__release_weak(v13);
  if (v9)
    dispatch_release(v9);
  xpc_release(v8);
  if (*(_BYTE *)(a1 + 144))
    qmi::Client::State::sendStartMessage_sync((qmi::Client::State *)a1);
  if (*(_QWORD *)(a1 + 224) != *(_QWORD *)(a1 + 232))
    qmi::Client::State::sendIndWakeSet_sync((qmi::Client::State *)a1);
  v19 = *(_QWORD *)(a1 + 288);
  if (v19)
  {
    v20 = *(_QWORD *)(v19 + 8);
    for (i = *(_QWORD *)(v19 + 16); v20 != i; v20 += 8)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v20);
    std::unique_ptr<qmi::Client::XPCState::ConnectHelper>::reset[abi:ne180100]((uint64_t *)(a1 + 288), 0);
  }
  return v4 != v5;
}

void sub_19E9DD928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  void *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  std::__shared_weak_count::__release_weak(v17);
  if (v16)
    dispatch_release(v16);
  xpc_release(v15);
  _Unwind_Resume(a1);
}

void std::unique_ptr<qmi::Client::XPCState::ConnectHelper>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v2 + 16);
      v5 = *(void **)(v2 + 8);
      if (v4 != v3)
      {
        v6 = *(_QWORD *)(v2 + 16);
        do
        {
          v7 = *(void **)(v6 - 8);
          v6 -= 8;
          xpc_release(v7);
          *(_QWORD *)(v4 - 8) = 0;
          v4 = v6;
        }
        while (v6 != v3);
        v5 = *(void **)(v2 + 8);
      }
      *(_QWORD *)(v2 + 16) = v3;
      operator delete(v5);
    }
    xpc_release(*(xpc_object_t *)v2);
    operator delete((void *)v2);
  }
}

BOOL qmi::Client::XPCState::sendNowOrDrop_sync(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = MEMORY[0x1A1AEB9A8](*(_QWORD *)(a1 + 128));
  v5 = MEMORY[0x1E0C812E0];
  if (v4 != MEMORY[0x1E0C812E0])
    return 0;
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 128), *a2);
  return v4 == v5;
}

void qmi::Client::XPCState::sendConnectMessage_sync(qmi::Client::XPCState *this)
{
  uint64_t v2;
  uint64_t v3;
  void ***v4;
  _QWORD *v5;
  NSObject *v6;
  _QWORD *v7;
  _OWORD *v8;
  void *v9;
  void **v10;
  int v11;
  xpc_object_t v12;
  void *v13;
  xpc_connection_t *v14;
  NSObject *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _xpc_connection_s *v24;
  unint64_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  const char *v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  const char **v33;
  const char *v34;
  xpc_object_t v35;
  xpc_object_t v36;
  void *v37;
  xpc_object_t v38;
  xpc_object_t v39;
  NSObject *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  _xpc_connection_s *v49;
  NSObject *v50;
  unint64_t v51;
  _QWORD v52[6];
  std::__shared_weak_count *v53;
  xpc_object_t object;
  __int128 buf;
  void (*v56)(_QWORD *, xpc_object_t);
  void *v57;
  char *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  _xpc_connection_s *v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v2 = MEMORY[0x1A1AEB9A8](*((_QWORD *)this + 16));
  v3 = MEMORY[0x1E0C812E0];
  if (v2 == MEMORY[0x1E0C812E0])
    return;
  if (*((_QWORD *)this + 14))
  {
    v4 = (void ***)((char *)this + 288);
    v5 = (_QWORD *)*((_QWORD *)this + 36);
    if (v5)
    {
      if (MEMORY[0x1A1AEB9A8](*v5) == v3)
        return;
    }
    else
    {
      v8 = operator new(0x20uLL);
      *v8 = 0u;
      v8[1] = 0u;
      *(_QWORD *)v8 = xpc_null_create();
      *((_QWORD *)v8 + 1) = 0;
      *((_QWORD *)v8 + 2) = 0;
      *((_QWORD *)v8 + 3) = 0;
      *(_QWORD *)&buf = 0;
      std::unique_ptr<qmi::Client::XPCState::ConnectHelper>::reset[abi:ne180100]((uint64_t *)this + 36, (uint64_t)v8);
      std::unique_ptr<qmi::Client::XPCState::ConnectHelper>::reset[abi:ne180100]((uint64_t *)&buf, 0);
      if (MEMORY[0x1A1AEB9A8](**v4) == v3)
        return;
    }
    v9 = xpc_connection_create(0, *((dispatch_queue_t *)this + 3));
    if (v9)
    {
      v10 = *v4;
    }
    else
    {
      v9 = xpc_null_create();
      v10 = *v4;
      if (!v9)
      {
        v12 = xpc_null_create();
        v9 = 0;
        v11 = 1;
        goto LABEL_15;
      }
    }
    xpc_retain(v9);
    v11 = 0;
    v12 = v9;
LABEL_15:
    v13 = *v10;
    *v10 = v12;
    xpc_release(v13);
    object = v9;
    if (v11)
      object = xpc_null_create();
    else
      xpc_retain(v9);
    v14 = (xpc_connection_t *)((char *)this + 120);
    ctu::XpcServerHelper::setListener();
    xpc_release(object);
    object = 0;
    v15 = *((_QWORD *)this + 3);
    if (v15)
      dispatch_retain(*((dispatch_object_t *)this + 3));
    v16 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (!v16 || (v17 = *((_QWORD *)this + 1), (v18 = std::__shared_weak_count::lock(v16)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v19 = v18;
    p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
    do
      v21 = __ldxr(p_shared_weak_owners);
    while (__stxr(v21 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v19);
    }
    if (MEMORY[0x1A1AEB9A8](*v14) == v3)
    {
      v24 = *v14;
      *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
      *((_QWORD *)&buf + 1) = 1174405120;
      v56 = ___ZN3ctu15XpcServerHelper13startListenerIN3qmi6Client5StateEEEvN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke;
      v57 = &__block_descriptor_tmp_37;
      v58 = (char *)this + 120;
      v59 = v17;
      v60 = v19;
      do
        v25 = __ldxr(p_shared_weak_owners);
      while (__stxr(v25 + 1, p_shared_weak_owners));
      v61 = v24;
      xpc_connection_set_event_handler(v24, &buf);
      xpc_connection_set_target_queue(*v14, v15);
      xpc_connection_resume(*v14);
      if (v60)
        std::__shared_weak_count::__release_weak(v60);
    }
    std::__shared_weak_count::__release_weak(v19);
    if (v15)
      dispatch_release(v15);
    v26 = xpc_dictionary_create(0, 0, 0);
    if (v26 || (v26 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1A1AEB9A8](v26) == MEMORY[0x1E0C812F8])
      {
        xpc_retain(v26);
        v27 = v26;
      }
      else
      {
        v27 = xpc_null_create();
      }
    }
    else
    {
      v27 = xpc_null_create();
      v26 = 0;
    }
    xpc_release(v26);
    v28 = (char *)this + 80;
    if (*((char *)this + 103) < 0)
      v28 = *(const char **)v28;
    v29 = xpc_string_create(v28);
    if (!v29)
      v29 = xpc_null_create();
    xpc_dictionary_set_value(v27, "connect", v29);
    v30 = xpc_null_create();
    xpc_release(v29);
    xpc_release(v30);
    v31 = xpc_int64_create(*((unsigned __int8 *)this + 104));
    if (!v31)
      v31 = xpc_null_create();
    xpc_dictionary_set_value(v27, "svc_type", v31);
    v32 = xpc_null_create();
    xpc_release(v31);
    xpc_release(v32);
    v33 = (const char **)((char *)this + 56);
    v34 = (char *)this + 56;
    if (*((char *)this + 79) < 0)
      v34 = *v33;
    v35 = xpc_string_create(v34);
    if (!v35)
      v35 = xpc_null_create();
    xpc_dictionary_set_value(v27, "name", v35);
    v36 = xpc_null_create();
    xpc_release(v35);
    xpc_release(v36);
    v37 = xpc_endpoint_create((xpc_connection_t)v9);
    if (v37 || (v37 = xpc_null_create()) != 0)
    {
      xpc_retain(v37);
      v38 = v37;
    }
    else
    {
      v38 = xpc_null_create();
      v37 = 0;
    }
    xpc_dictionary_set_value(v27, "endpoint", v38);
    v39 = xpc_null_create();
    xpc_release(v38);
    xpc_release(v39);
    xpc_release(v37);
    if (MEMORY[0x1A1AEB9A8](*((_QWORD *)this + 14)) == v3)
    {
      v41 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      if (!v41 || (v42 = *((_QWORD *)this + 1), (v43 = std::__shared_weak_count::lock(v41)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v44 = v43;
      v45 = (unint64_t *)&v43->__shared_weak_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
      v47 = (unint64_t *)&v43->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v44);
      }
      v49 = (_xpc_connection_s *)*((_QWORD *)this + 14);
      v50 = *((_QWORD *)this + 3);
      v52[0] = MEMORY[0x1E0C809B0];
      v52[1] = 1174405120;
      v52[2] = ___ZN3qmi6Client8XPCState23sendConnectMessage_syncEv_block_invoke;
      v52[3] = &__block_descriptor_tmp_18;
      v52[4] = this;
      v52[5] = v42;
      v53 = v44;
      do
        v51 = __ldxr(v45);
      while (__stxr(v51 + 1, v45));
      xpc_connection_send_message_with_reply(v49, v27, v50, v52);
      if (v53)
        std::__shared_weak_count::__release_weak(v53);
      std::__shared_weak_count::__release_weak(v44);
    }
    else
    {
      v40 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        if (*((char *)this + 79) < 0)
          v33 = (const char **)*v33;
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v33;
        _os_log_error_impl(&dword_19E9C8000, v40, OS_LOG_TYPE_ERROR, "[%s] ****** Client connection has been lost!", (uint8_t *)&buf, 0xCu);
      }
    }
    xpc_release(v27);
    xpc_release(v9);
    return;
  }
  v6 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = (_QWORD *)((char *)this + 56);
    if (*((char *)this + 79) < 0)
      v7 = (_QWORD *)*v7;
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v7;
    _os_log_impl(&dword_19E9C8000, v6, OS_LOG_TYPE_DEFAULT, "#I [%s] Client reconnect skipped because server is not reachable.", (uint8_t *)&buf, 0xCu);
  }
}

void sub_19E9DE078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, xpc_object_t object, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  void *v23;
  void *v24;
  std::__shared_weak_count *v25;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  std::__shared_weak_count::__release_weak(v25);
  xpc_release(v24);
  xpc_release(v23);
  _Unwind_Resume(a1);
}

void ___ZN3qmi6Client8XPCState23sendConnectMessage_syncEv_block_invoke(_QWORD *a1, xpc_object_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  xpc_object_t *v8;
  xpc_object_t *Listener;
  xpc_object_t v10;
  void **v11;
  xpc_object_t v12;
  void *v13;
  uint64_t v14;
  xpc_object_t v15;
  NSObject *v16;
  _BOOL4 v17;
  _QWORD *v18;
  const char *v19;
  NSObject *v20;
  xpc_object_t v21;
  NSObject *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  NSObject *v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  uint8_t buf[4];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v29 = v6;
  if (!v6)
    return;
  v7 = v6;
  if (!a1[5])
    goto LABEL_32;
  v8 = *(xpc_object_t **)(v5 + 288);
  if (!v8)
    goto LABEL_32;
  Listener = (xpc_object_t *)ctu::XpcServerHelper::getListener((ctu::XpcServerHelper *)(v5 + 120));
  if (!xpc_equal(*v8, *Listener))
    goto LABEL_32;
  v10 = xpc_null_create();
  v11 = *(void ***)(v5 + 288);
  v12 = xpc_null_create();
  v13 = *v11;
  *v11 = v10;
  xpc_release(v13);
  xpc_release(v12);
  if (MEMORY[0x1A1AEB9A8](a2) == MEMORY[0x1E0C81310])
  {
    if (a2 == (xpc_object_t)MEMORY[0x1E0C81260])
    {
      v22 = *(NSObject **)(v5 + 40);
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        goto LABEL_32;
      v23 = (_QWORD *)(v5 + 56);
      if (*(char *)(v5 + 79) < 0)
        v23 = (_QWORD *)*v23;
      *(_DWORD *)buf = 136315138;
      v31 = v23;
      v19 = "#E [%s] Client connection invalid.";
      v20 = v22;
      goto LABEL_23;
    }
    v15 = (xpc_object_t)MEMORY[0x1E0C81258];
    v16 = *(NSObject **)(v5 + 40);
    v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (a2 == v15)
    {
      if (v17)
      {
        v24 = (_QWORD *)(v5 + 56);
        if (*(char *)(v5 + 79) < 0)
          v24 = (_QWORD *)*v24;
        *(_DWORD *)buf = 136315138;
        v31 = v24;
        _os_log_impl(&dword_19E9C8000, v16, OS_LOG_TYPE_DEFAULT, "#I [%s] Client connection interrupted; retrying.",
          buf,
          0xCu);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 64))(v5);
      goto LABEL_32;
    }
    if (v17)
    {
      v18 = (_QWORD *)(v5 + 56);
      if (*(char *)(v5 + 79) < 0)
        v18 = (_QWORD *)*v18;
      *(_DWORD *)buf = 136315138;
      v31 = v18;
      v19 = "#I [%s] Client connection other error.";
      v20 = v16;
LABEL_23:
      _os_log_impl(&dword_19E9C8000, v20, OS_LOG_TYPE_DEFAULT, v19, buf, 0xCu);
    }
LABEL_32:
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  v14 = MEMORY[0x1E0C812F8];
  if (a2)
  {
    xpc_retain(a2);
  }
  else
  {
    a2 = xpc_null_create();
    if (!a2)
    {
      v21 = xpc_null_create();
      a2 = 0;
      goto LABEL_30;
    }
  }
  if (MEMORY[0x1A1AEB9A8](a2) == v14)
  {
    xpc_retain(a2);
    v21 = a2;
  }
  else
  {
    v21 = xpc_null_create();
  }
LABEL_30:
  xpc_release(a2);
  if (MEMORY[0x1A1AEB9A8](v21) == v14)
  {
    if (xpc_dictionary_get_count(v21))
    {
      v27 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        v28 = (_QWORD *)(v5 + 56);
        if (*(char *)(v5 + 79) < 0)
          v28 = (_QWORD *)*v28;
        *(_DWORD *)buf = 136315138;
        v31 = v28;
        _os_log_impl(&dword_19E9C8000, v27, OS_LOG_TYPE_DEFAULT, "#E [%s] Client connection rejected!", buf, 0xCu);
      }
    }
  }
  xpc_release(v21);
  v7 = v29;
  if (v29)
    goto LABEL_32;
}

void sub_19E9DE4F0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Client::LocalState::LocalState(uint64_t a1, __int128 *a2, __int128 *a3, int a4, NSObject **a5, _QWORD *a6)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v8 = qmi::Client::State::State(a1, a2, a3, a4, a5);
  *(_QWORD *)v8 = off_1E4152A40;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_OWORD *)(v8 + 304) = 0u;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  v9 = a6[1];
  *(_QWORD *)(v8 + 352) = *a6;
  *(_QWORD *)(v8 + 360) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = xpc_null_create();
  return a1;
}

{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v8 = qmi::Client::State::State(a1, a2, a3, a4, a5);
  *(_QWORD *)v8 = off_1E4152A40;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_OWORD *)(v8 + 304) = 0u;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  v9 = a6[1];
  *(_QWORD *)(v8 + 352) = *a6;
  *(_QWORD *)(v8 + 360) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = xpc_null_create();
  return a1;
}

uint64_t qmi::Client::LocalState::LocalState(uint64_t a1, __int128 *a2, __int128 *a3, int a4, NSObject **a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v9 = qmi::Client::State::State(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v9 = off_1E4152A40;
  *(_OWORD *)(v9 + 288) = 0u;
  *(_OWORD *)(v9 + 304) = 0u;
  *(_OWORD *)(v9 + 320) = 0u;
  *(_OWORD *)(v9 + 336) = 0u;
  v10 = a7[1];
  *(_QWORD *)(v9 + 352) = *a7;
  *(_QWORD *)(v9 + 360) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 16);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = xpc_null_create();
  return a1;
}

{
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v9 = qmi::Client::State::State(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v9 = off_1E4152A40;
  *(_OWORD *)(v9 + 288) = 0u;
  *(_OWORD *)(v9 + 304) = 0u;
  *(_OWORD *)(v9 + 320) = 0u;
  *(_OWORD *)(v9 + 336) = 0u;
  v10 = a7[1];
  *(_QWORD *)(v9 + 352) = *a7;
  *(_QWORD *)(v9 + 360) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 16);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = xpc_null_create();
  return a1;
}

void qmi::Client::LocalState::create(__int128 *a1@<X0>, __int128 *a2@<X1>, int a3@<W2>, NSObject **a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  void *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  _QWORD block[6];

  *a6 = 0xAAAAAAAAAAAAAAAALL;
  a6[1] = 0xAAAAAAAAAAAAAAAALL;
  v12 = operator new(0x180uLL);
  v13 = (uint64_t)v12;
  v14 = (std::__shared_weak_count *)a5[1];
  v23 = *a5;
  v24 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  qmi::Client::State::State((uint64_t)v12, a1, a2, a3, a4);
  *(_QWORD *)v13 = off_1E4152A40;
  *(_OWORD *)(v13 + 288) = 0u;
  *(_OWORD *)(v13 + 304) = 0u;
  *(_OWORD *)(v13 + 320) = 0u;
  *(_OWORD *)(v13 + 336) = 0u;
  *(_QWORD *)(v13 + 352) = v23;
  *(_QWORD *)(v13 + 360) = v24;
  if (v24)
  {
    p_shared_weak_owners = (unint64_t *)&v24->__shared_weak_owners_;
    do
      v18 = __ldxr(p_shared_weak_owners);
    while (__stxr(v18 + 1, p_shared_weak_owners));
  }
  *(_QWORD *)(v13 + 368) = 0;
  *(_QWORD *)(v13 + 376) = xpc_null_create();
  *a6 = 0xAAAAAAAAAAAAAAAALL;
  a6[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<qmi::Client::LocalState>::shared_ptr[abi:ne180100]<qmi::Client::LocalState,std::shared_ptr<qmi::Client::LocalState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::LocalState>(qmi::Client::LocalState*)::{lambda(qmi::Client::LocalState*)#1},void>(a6, v13);
  if (!v24)
    goto LABEL_11;
  v19 = (unint64_t *)&v24->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    v21 = *a6;
    v25 = v21;
    if (*(_BYTE *)(v21 + 280))
      goto LABEL_12;
  }
  else
  {
LABEL_11:
    v21 = *a6;
    v25 = v21;
    if (*(_BYTE *)(v21 + 280))
    {
LABEL_12:
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v21 + 136));
      qmi::Client::LocalState::init(void)::$_0::operator()(v21);
      return;
    }
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi6Client5StateEE20execute_wrapped_syncIZNS2_10LocalState4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_38_0;
  block[4] = v21 + 8;
  block[5] = &v25;
  v22 = *(NSObject **)(v21 + 24);
  if (*(_QWORD *)(v21 + 32))
    dispatch_async_and_wait(v22, block);
  else
    dispatch_sync(v22, block);
}

void sub_19E9DE8B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E9DE8CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_19E9DE8E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void qmi::Client::LocalState::init(dispatch_queue_t *this)
{
  NSObject *v2;
  dispatch_queue_t *v3;
  _QWORD block[6];

  v3 = this;
  if (*((_BYTE *)this + 280))
  {
    dispatch_assert_queue_V2(this[17]);
    qmi::Client::LocalState::init(void)::$_0::operator()((uint64_t)this);
  }
  else
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi6Client5StateEE20execute_wrapped_syncIZNS2_10LocalState4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
    block[3] = &__block_descriptor_tmp_38_0;
    block[4] = this + 1;
    block[5] = &v3;
    v2 = this[3];
    if (this[4])
      dispatch_async_and_wait(v2, block);
    else
      dispatch_sync(v2, block);
  }
}

void qmi::Client::LocalState::create(__int128 *a1@<X0>, __int128 *a2@<X1>, int a3@<W2>, NSObject **a4@<X3>, _QWORD *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X8>)
{
  void *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  _QWORD block[6];

  *a7 = 0xAAAAAAAAAAAAAAAALL;
  a7[1] = 0xAAAAAAAAAAAAAAAALL;
  v14 = operator new(0x180uLL);
  v15 = (uint64_t)v14;
  v16 = (std::__shared_weak_count *)a6[1];
  v25 = *a6;
  v26 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  qmi::Client::State::State((uint64_t)v14, a1, a2, a3, a4, a5);
  *(_QWORD *)v15 = off_1E4152A40;
  *(_OWORD *)(v15 + 288) = 0u;
  *(_OWORD *)(v15 + 304) = 0u;
  *(_OWORD *)(v15 + 320) = 0u;
  *(_OWORD *)(v15 + 336) = 0u;
  *(_QWORD *)(v15 + 352) = v25;
  *(_QWORD *)(v15 + 360) = v26;
  if (v26)
  {
    p_shared_weak_owners = (unint64_t *)&v26->__shared_weak_owners_;
    do
      v20 = __ldxr(p_shared_weak_owners);
    while (__stxr(v20 + 1, p_shared_weak_owners));
  }
  *(_QWORD *)(v15 + 368) = 0;
  *(_QWORD *)(v15 + 376) = xpc_null_create();
  *a7 = 0xAAAAAAAAAAAAAAAALL;
  a7[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<qmi::Client::LocalState>::shared_ptr[abi:ne180100]<qmi::Client::LocalState,std::shared_ptr<qmi::Client::LocalState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::LocalState>(qmi::Client::LocalState*)::{lambda(qmi::Client::LocalState*)#1},void>(a7, v15);
  if (!v26)
    goto LABEL_11;
  v21 = (unint64_t *)&v26->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    v23 = *a7;
    v27 = v23;
    if (*(_BYTE *)(v23 + 280))
      goto LABEL_12;
  }
  else
  {
LABEL_11:
    v23 = *a7;
    v27 = v23;
    if (*(_BYTE *)(v23 + 280))
    {
LABEL_12:
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v23 + 136));
      qmi::Client::LocalState::init(void)::$_0::operator()(v23);
      return;
    }
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi6Client5StateEE20execute_wrapped_syncIZNS2_10LocalState4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_38_0;
  block[4] = v23 + 8;
  block[5] = &v27;
  v24 = *(NSObject **)(v23 + 24);
  if (*(_QWORD *)(v23 + 32))
    dispatch_async_and_wait(v24, block);
  else
    dispatch_sync(v24, block);
}

void sub_19E9DEB5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E9DEB74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_19E9DEB90(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void qmi::Client::LocalState::~LocalState(xpc_object_t *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  *this = off_1E4152A40;
  qmi::Client::State::sendStopMessage_sync((qmi::Client::State *)this);
  xpc_release(this[47]);
  v2 = this[46];
  this[46] = 0;
  this[47] = 0;
  if (v2)
  {
    v3 = v2[1];
    if (v3)
    {
      v4 = v2[2];
      v5 = (void *)v2[1];
      if (v4 != v3)
      {
        v6 = v2[2];
        do
        {
          v7 = *(void **)(v6 - 8);
          v6 -= 8;
          xpc_release(v7);
          *(_QWORD *)(v4 - 8) = 0;
          v4 = v6;
        }
        while (v6 != v3);
        v5 = (void *)v2[1];
      }
      v2[2] = v3;
      operator delete(v5);
    }
    operator delete(v2);
  }
  v8 = (std::__shared_weak_count *)this[45];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  v9 = (std::__shared_weak_count *)this[43];
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  v10 = (std::__shared_weak_count *)this[41];
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  v11 = (std::__shared_weak_count *)this[39];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)this[37];
  if (!v14)
    goto LABEL_24;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    qmi::Client::State::~State((qmi::Client::State *)this);
  }
  else
  {
LABEL_24:
    qmi::Client::State::~State((qmi::Client::State *)this);
  }
}

{
  void *v1;

  qmi::Client::LocalState::~LocalState(this);
  operator delete(v1);
}

uint64_t qmi::Client::LocalState::handleNewClient(qmi::Client::State *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  void *v9;

  if (*((_BYTE *)this + 144))
    qmi::Client::State::sendStartMessage_sync(this);
  if (*((_QWORD *)this + 28) != *((_QWORD *)this + 29))
    qmi::Client::State::sendIndWakeSet_sync(this);
  v2 = (_QWORD *)*((_QWORD *)this + 46);
  if (v2)
  {
    v3 = v2[1];
    v4 = v2[2];
    if (v3 == v4)
    {
      *((_QWORD *)this + 46) = 0;
      v5 = (char *)v2[1];
      if (!v5)
      {
LABEL_17:
        operator delete(v2);
        return 1;
      }
LABEL_12:
      v6 = (char *)v2[2];
      v7 = v5;
      if (v6 != v5)
      {
        v8 = (char *)v2[2];
        do
        {
          v9 = (void *)*((_QWORD *)v8 - 1);
          v8 -= 8;
          xpc_release(v9);
          *((_QWORD *)v6 - 1) = 0;
          v6 = v8;
        }
        while (v8 != v5);
        v7 = (char *)v2[1];
      }
      v2[2] = v5;
      operator delete(v7);
      goto LABEL_17;
    }
    do
    {
      (*(void (**)(qmi::Client::State *, uint64_t))(*(_QWORD *)this + 56))(this, v3);
      v3 += 8;
    }
    while (v3 != v4);
    v2 = (_QWORD *)*((_QWORD *)this + 46);
    *((_QWORD *)this + 46) = 0;
    if (v2)
    {
      v5 = (char *)v2[1];
      if (!v5)
        goto LABEL_17;
      goto LABEL_12;
    }
  }
  return 1;
}

uint64_t qmi::Client::LocalState::sendNowOrDrop_sync(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  int v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  _QWORD *v15;
  char *v16;
  size_t v17;
  void *v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  xpc_object_t object;
  void *__dst[3];
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint8_t buf[4];
  _QWORD *v35;
  __int16 v36;
  void **v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v32 = 0;
  v33 = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 360);
  if (!v4 || (v33 = std::__shared_weak_count::lock(v4)) == 0 || (v5 = *(_QWORD *)(a1 + 352), (v32 = v5) == 0))
  {
    v14 = *(NSObject **)(a1 + 40);
    v12 = 0;
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      goto LABEL_31;
    v15 = (_QWORD *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0)
      v15 = (_QWORD *)*v15;
    v16 = (char *)MEMORY[0x1A1AEB90C](*a2);
    memset(__dst, 170, sizeof(__dst));
    v17 = strlen(v16);
    if (v17 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v18 = (void *)v17;
    if (v17 >= 0x17)
    {
      v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17)
        v20 = v17 | 7;
      v21 = v20 + 1;
      v19 = (void **)operator new(v20 + 1);
      __dst[1] = v18;
      __dst[2] = (void *)(v21 | 0x8000000000000000);
      __dst[0] = v19;
    }
    else
    {
      HIBYTE(__dst[2]) = v17;
      v19 = __dst;
      if (!v17)
        goto LABEL_26;
    }
    memcpy(v19, v16, (size_t)v18);
LABEL_26:
    *((_BYTE *)v18 + (_QWORD)v19) = 0;
    free(v16);
    v22 = __dst;
    if (SHIBYTE(__dst[2]) < 0)
      v22 = (void **)__dst[0];
    *(_DWORD *)buf = 136315394;
    v35 = v15;
    v36 = 2080;
    v37 = v22;
    _os_log_impl(&dword_19E9C8000, v14, OS_LOG_TYPE_DEFAULT, "#E [%s] ****** Client message DROPPED because of invalid local connection. Message: %s", buf, 0x16u);
    if (SHIBYTE(__dst[2]) < 0)
      operator delete(__dst[0]);
    goto LABEL_30;
  }
  v6 = *(std::__shared_weak_count **)(a1 + 328);
  if (!v6 || (v7 = *(unsigned __int8 *)(v5 + 112), v8 = std::__shared_weak_count::lock(v6), (__dst[1] = v8) == 0))
  {
LABEL_30:
    v12 = 0;
    goto LABEL_31;
  }
  v9 = v8;
  v10 = *(_QWORD **)(a1 + 320);
  __dst[0] = v10;
  if (v7)
    v11 = v10 == 0;
  else
    v11 = 1;
  v12 = !v11;
  if (!v11)
  {
    v13 = (void *)*a2;
    object = v13;
    if (v13)
      xpc_retain(v13);
    else
      object = xpc_null_create();
    v27 = v10[3];
    if (!v27)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, xpc_object_t *))(*(_QWORD *)v27 + 48))(v27, &object);
    xpc_release(object);
    object = 0;
  }
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v29 = __ldaxr(p_shared_owners);
  while (__stlxr(v29 - 1, p_shared_owners));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_31:
  v23 = v33;
  if (v33)
  {
    v24 = (unint64_t *)&v33->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  return v12;
}

void sub_19E9DF098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void qmi::Client::LocalState::sendConnectMessage_sync(qmi::Client::LocalState *this)
{
  _BYTE *v2;
  _OWORD *v3;
  xpc_object_t v4;
  xpc_object_t v5;
  const char *v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  const char *v11;
  xpc_object_t v12;
  xpc_object_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  xpc_object_t v45;
  std::__shared_weak_count *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  _QWORD *v56;
  unint64_t *v57;
  NSObject *v58;
  unint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  xpc_object_t object;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;

  v2 = (_BYTE *)*((_QWORD *)this + 46);
  if (v2)
  {
    if (*v2)
      return;
  }
  else
  {
    v3 = operator new(0x20uLL);
    *v3 = 0u;
    v3[1] = 0u;
    *((_QWORD *)this + 46) = v3;
  }
  (*(void (**)(qmi::Client::LocalState *, uint64_t))(*(_QWORD *)this + 16))(this, 1);
  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A1AEB9A8](v4) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v4);
      v5 = v4;
    }
    else
    {
      v5 = xpc_null_create();
    }
  }
  else
  {
    v5 = xpc_null_create();
    v4 = 0;
  }
  xpc_release(v4);
  v6 = (char *)this + 80;
  if (*((char *)this + 103) < 0)
    v6 = *(const char **)v6;
  v7 = xpc_string_create(v6);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(v5, "connect", v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v9 = xpc_int64_create(*((unsigned __int8 *)this + 104));
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v5, "svc_type", v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = (char *)this + 56;
  if (*((char *)this + 79) < 0)
    v11 = *(const char **)v11;
  v12 = xpc_string_create(v11);
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(v5, "name", v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v14 || (v15 = *((_QWORD *)this + 1), (v16 = std::__shared_weak_count::lock(v14)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v17 = v16;
  p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
  do
    v19 = __ldxr(p_shared_weak_owners);
  while (__stxr(v19 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v17);
  }
  do
    v22 = __ldxr(p_shared_weak_owners);
  while (__stxr(v22 + 1, p_shared_weak_owners));
  v23 = operator new(0x38uLL);
  v23[1] = 0;
  v23[2] = 0;
  *v23 = off_1E4152F20;
  v23[3] = &off_1E4152F70;
  v23[4] = v15;
  v23[5] = v17;
  v23[6] = v23 + 3;
  v24 = (std::__shared_weak_count *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 38) = v23 + 3;
  *((_QWORD *)this + 39) = v23;
  if (!v24)
    goto LABEL_34;
  v25 = (unint64_t *)&v24->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    v27 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
    if (!v27)
      goto LABEL_81;
  }
  else
  {
LABEL_34:
    v27 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
    if (!v27)
      goto LABEL_81;
  }
  v28 = std::__shared_weak_count::lock(v27);
  v68 = v28;
  if (v28)
  {
    v29 = (_QWORD *)*((_QWORD *)this + 44);
    if (v29)
    {
      v30 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      if (!v30 || (v31 = *((_QWORD *)this + 1), (v32 = std::__shared_weak_count::lock(v30)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v33 = v32;
      v34 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      v36 = (unint64_t *)&v32->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      v67 = v31;
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
      v38 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
      v66 = *((_QWORD *)this + 36);
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_weak_owners_;
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      v41 = *((_QWORD *)this + 38);
      v42 = (std::__shared_weak_count *)*((_QWORD *)this + 39);
      v65 = v41;
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_weak_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      if (v5)
      {
        xpc_retain(v5);
        v45 = v5;
      }
      else
      {
        v45 = xpc_null_create();
      }
      do
        v47 = __ldxr(v34);
      while (__stxr(v47 + 1, v34));
      if (v42)
      {
        v48 = (unint64_t *)&v42->__shared_weak_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      if (v38)
      {
        v50 = (unint64_t *)&v38->__shared_weak_owners_;
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
      }
      v52 = (std::__shared_weak_count *)v29[2];
      if (!v52 || (v53 = v29[1], (v54 = std::__shared_weak_count::lock(v52)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v55 = v54;
      v56 = operator new(0x40uLL);
      *v56 = v29;
      v56[1] = v45;
      object = xpc_null_create();
      v56[2] = v67;
      v56[3] = v33;
      v56[4] = v65;
      v56[5] = v42;
      v56[6] = v66;
      v56[7] = v38;
      v57 = (unint64_t *)&v55->__shared_owners_;
      v58 = v29[3];
      do
        v59 = __ldxr(v57);
      while (__stxr(v59 + 1, v57));
      v60 = operator new(0x18uLL);
      *v60 = v56;
      v60[1] = v53;
      v60[2] = v55;
      dispatch_async_f(v58, v60, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<BBServerConnection>::execute_wrapped<void QMIServerConnection::acceptLocalMessage<qmi::Client::State>(xpc::dict const&,std::weak_ptr<qmi::Client::State>,std::weak_ptr<std::function<void ()(xpc::dict)>>,std::weak_ptr<std::function<void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>>)::{lambda(void)#1}>(qmi::Client::State&&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State>)::{lambda(void *)#1}::__invoke);
      do
        v61 = __ldaxr(v57);
      while (__stlxr(v61 - 1, v57));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
      xpc_release(object);
      if (v42)
        std::__shared_weak_count::__release_weak(v42);
      if (v38)
        std::__shared_weak_count::__release_weak(v38);
      std::__shared_weak_count::__release_weak(v33);
      v46 = v68;
      if (!v68)
        goto LABEL_81;
    }
    else
    {
      v46 = v28;
    }
    v62 = (unint64_t *)&v46->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
LABEL_81:
  std::__shared_weak_count::__release_weak(v17);
  xpc_release(v5);
}

void sub_19E9DF610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  std::__shared_weak_count *v6;
  va_list va;

  va_start(va, a5);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::__shared_weak_count::__release_weak(v6);
  xpc_release(v5);
  _Unwind_Resume(a1);
}

uint64_t qmi::Client::LocalState::setConnecting(uint64_t this, char a2)
{
  **(_BYTE **)(this + 368) = a2;
  return this;
}

uint64_t qmi::Client::Client(uint64_t a1, __int128 *a2, int a3, NSObject **a4, __int128 *a5, _QWORD *a6)
{
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  xpc_object_t object;
  __int128 v20;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)a1 = 0u;
  qmi::sFixupServerConnection(&object, a6);
  qmi::Client::XPCState::create(a2, a5, &object, a3, a4, (uint64_t *)&v20);
  v11 = v20;
  v20 = 0uLL;
  v12 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v11;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  xpc_release(object);
  return a1;
}

void sub_19E9DF7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v13;

  xpc_release(object);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v11);
  v13 = *(std::__shared_weak_count **)(v10 + 8);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  _Unwind_Resume(a1);
}

xpc_object_t qmi::sFixupServerConnection(_QWORD *a1, _QWORD *a2)
{
  xpc_object_t result;
  void *v5;

  if (MEMORY[0x1A1AEB9A8](*a2) == MEMORY[0x1E0C812E0])
  {
    v5 = (void *)*a2;
    *a1 = *a2;
    if (v5)
      return xpc_retain(v5);
    goto LABEL_6;
  }
  result = xpc_connection_create_mach_service("com.apple.commcenter.atcs.xpc", 0, 2uLL);
  *a1 = result;
  if (!result)
  {
LABEL_6:
    result = xpc_null_create();
    *a1 = result;
  }
  return result;
}

uint64_t qmi::Client::Client(uint64_t a1, __int128 *a2, int a3, NSObject **a4, __int128 *a5, _QWORD *a6, _QWORD *a7)
{
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  xpc_object_t object;
  __int128 v22;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)a1 = 0u;
  qmi::sFixupServerConnection(&object, a7);
  qmi::Client::XPCState::create(a2, a5, &object, a3, a4, a6, (uint64_t *)&v22);
  v13 = v22;
  v22 = 0uLL;
  v14 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v13;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  xpc_release(object);
  return a1;
}

void sub_19E9DF990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v13;

  xpc_release(object);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v11);
  v13 = *(std::__shared_weak_count **)(v10 + 8);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  _Unwind_Resume(a1);
}

uint64_t qmi::Client::Client(uint64_t a1, __int128 *a2, int a3, NSObject **a4, __int128 *a5, uint64_t *a6)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;
  __int128 v23;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)a1 = 0u;
  v7 = a6[1];
  v21 = *a6;
  v22 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  qmi::Client::LocalState::create(a2, a5, a3, a4, &v21, (uint64_t *)&v23);
  v10 = v23;
  v23 = 0uLL;
  v11 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v10;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v22;
  if (!v22)
    return a1;
  v18 = (unint64_t *)&v22->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_19E9DFB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v12;

  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v10);
  v12 = *(std::__shared_weak_count **)(v9 + 8);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  _Unwind_Resume(a1);
}

uint64_t qmi::Client::Client(uint64_t a1, __int128 *a2, int a3, NSObject **a4, __int128 *a5, _QWORD *a6, uint64_t *a7)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 v24;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)a1 = 0u;
  v8 = a7[1];
  v22 = *a7;
  v23 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  qmi::Client::LocalState::create(a2, a5, a3, a4, a6, &v22, (uint64_t *)&v24);
  v11 = v24;
  v24 = 0uLL;
  v12 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v11;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v23;
  if (!v23)
    return a1;
  v19 = (unint64_t *)&v23->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
    return a1;
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  return a1;
}

void sub_19E9DFC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v12;

  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v10);
  v12 = *(std::__shared_weak_count **)(v9 + 8);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  _Unwind_Resume(a1);
}

uint64_t qmi::Client::Client(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    *(_QWORD *)(a1 + 24) = v5;
    if (v5)
      *(_QWORD *)(a1 + 16) = *a2;
  }
  return a1;
}

{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    *(_QWORD *)(a1 + 24) = v5;
    if (v5)
      *(_QWORD *)(a1 + 16) = *a2;
  }
  return a1;
}

void qmi::Client::~Client(qmi::Client *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v5)
      return;
  }
  std::__shared_weak_count::__release_weak(v5);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v5)
      return;
  }
  std::__shared_weak_count::__release_weak(v5);
}

uint64_t qmi::Client::operator std::weak_ptr<qmi::Client::State>@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 24);
  *a2 = *(_QWORD *)(result + 16);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void qmi::Client::create(dispatch_object_t object@<X2>, xpc_object_t a2@<X4>, __int128 *a3@<X0>, int a4@<W1>, __int128 *a5@<X3>, uint64_t a6@<X8>)
{
  xpc_object_t v12;
  NSObject *v13;

  v13 = object;
  if (object)
    dispatch_retain(object);
  v12 = a2;
  if (a2)
  {
    xpc_retain(a2);
  }
  else
  {
    a2 = xpc_null_create();
    v12 = a2;
  }
  qmi::Client::Client(a6, a3, a4, &v13, a5, &v12);
  xpc_release(a2);
  if (object)
    dispatch_release(object);
}

void sub_19E9DFF00(_Unwind_Exception *a1)
{
  NSObject *v1;
  void *v2;

  xpc_release(v2);
  if (v1)
    dispatch_release(v1);
  _Unwind_Resume(a1);
}

void qmi::Client::create(__int128 *a1@<X0>, int a2@<W1>, NSObject **a3@<X2>, __int128 *a4@<X3>, xpc_object_t *a5@<X4>, uint64_t a6@<X8>)
{
  NSObject *v11;
  xpc_object_t v12;
  xpc_object_t v13;
  NSObject *v14;

  v11 = *a3;
  v14 = v11;
  if (v11)
    dispatch_retain(v11);
  v12 = *a5;
  v13 = v12;
  if (v12)
  {
    xpc_retain(v12);
  }
  else
  {
    v12 = xpc_null_create();
    v13 = v12;
  }
  qmi::Client::Client(a6, a1, a2, &v14, a4, &v13);
  xpc_release(v12);
  if (v11)
    dispatch_release(v11);
}

void sub_19E9DFFEC(_Unwind_Exception *a1)
{
  NSObject *v1;
  void *v2;

  xpc_release(v2);
  if (v1)
    dispatch_release(v1);
  _Unwind_Resume(a1);
}

void qmi::Client::createWithQueue(__int128 *a1@<X0>, int a2@<W1>, NSObject **a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  NSObject *v11;
  xpc_object_t v12;
  void *mach_service;
  xpc_object_t v14;
  std::__shared_weak_count *v15[2];
  NSObject *v16;

  v11 = *a3;
  v16 = v11;
  if (v11)
    dispatch_retain(v11);
  *(_OWORD *)v15 = *(_OWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v12 = xpc_null_create();
  if (MEMORY[0x1A1AEB9A8]() == MEMORY[0x1E0C812E0])
  {
    v14 = v12;
    if (v12)
    {
      xpc_retain(v12);
      mach_service = v12;
      goto LABEL_9;
    }
  }
  else
  {
    mach_service = xpc_connection_create_mach_service("com.apple.commcenter.atcs.xpc", 0, 2uLL);
    v14 = mach_service;
    if (mach_service)
      goto LABEL_9;
  }
  mach_service = xpc_null_create();
  v14 = mach_service;
LABEL_9:
  qmi::Client::Client(a6, a1, a2, &v16, a4, v15, &v14);
  xpc_release(mach_service);
  xpc_release(v12);
  if (v15[1])
    std::__shared_weak_count::__release_weak(v15[1]);
  if (v11)
    dispatch_release(v11);
}

void sub_19E9E0158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  NSObject *v12;
  void *v13;
  void *v14;

  xpc_release(v14);
  xpc_release(v13);
  if (a12)
  {
    std::__shared_weak_count::__release_weak(a12);
    if (!v12)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if (!v12)
  {
    goto LABEL_3;
  }
  dispatch_release(v12);
  _Unwind_Resume(a1);
}

void qmi::Client::createWithQueue(__int128 *a1@<X0>, int a2@<W1>, NSObject **a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, xpc_object_t *a6@<X5>, uint64_t a7@<X8>)
{
  NSObject *v13;
  xpc_object_t v14;
  xpc_object_t v15;
  std::__shared_weak_count *v16[2];
  NSObject *v17;

  v13 = *a3;
  v17 = v13;
  if (v13)
    dispatch_retain(v13);
  *(_OWORD *)v16 = *(_OWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v14 = *a6;
  v15 = v14;
  if (v14)
  {
    xpc_retain(v14);
  }
  else
  {
    v14 = xpc_null_create();
    v15 = v14;
  }
  qmi::Client::Client(a7, a1, a2, &v17, a4, v16, &v15);
  xpc_release(v14);
  if (v16[1])
    std::__shared_weak_count::__release_weak(v16[1]);
  if (v13)
    dispatch_release(v13);
}

void sub_19E9E029C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  NSObject *v12;
  void *v13;

  xpc_release(v13);
  if (a12)
  {
    std::__shared_weak_count::__release_weak(a12);
    if (!v12)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if (!v12)
  {
    goto LABEL_3;
  }
  dispatch_release(v12);
  _Unwind_Resume(a1);
}

void qmi::Client::createWithQueueLocal(__int128 *a1@<X0>, int a2@<W1>, NSObject **a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  NSObject *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22[2];
  dispatch_object_t object;

  v13 = *a3;
  object = v13;
  if (v13)
    dispatch_retain(v13);
  *(_OWORD *)v22 = *(_OWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  if (*(_QWORD *)a6
  {
    v15 = *(std::__shared_weak_count **)(a6 + 8);
    v20 = v14;
    v21 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
  }
  else
  {
    v15 = 0;
    v20 = 0;
    v21 = 0;
  }
  qmi::Client::Client(a7, a1, a2, &object, a4, v22, (uint64_t *)&v20);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v22[1])
    std::__shared_weak_count::__release_weak(v22[1]);
  if (object)
    dispatch_release(object);
}

void sub_19E9E0420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  NSObject *v12;

  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a12)
  {
    std::__shared_weak_count::__release_weak(a12);
    if (!v12)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if (!v12)
  {
    goto LABEL_3;
  }
  dispatch_release(v12);
  _Unwind_Resume(a1);
}

void qmi::Client::set(qmi::Client *this, const char *a2, int a3)
{
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t xdict;

  v6 = xpc_dictionary_create(0, 0, 0);
  v7 = v6;
  if (v6)
  {
    xdict = v6;
  }
  else
  {
    v7 = xpc_null_create();
    xdict = v7;
    if (!v7)
    {
      v8 = xpc_null_create();
      v7 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A1AEB9A8](v7) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v7);
    goto LABEL_9;
  }
  v8 = xpc_null_create();
LABEL_8:
  xdict = v8;
LABEL_9:
  xpc_release(v7);
  v9 = xpc_int64_create(a3);
  if (!v9)
    v9 = xpc_null_create();
  v10 = xdict;
  xpc_dictionary_set_value(xdict, a2, v9);
  v11 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v11);
  qmi::Client::State::send(*((_QWORD **)this + 2), &xdict);
  xpc_release(v10);
}

void qmi::Client::set(qmi::Client *this, const char *a2, unsigned int a3)
{
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t xdict;

  v6 = xpc_dictionary_create(0, 0, 0);
  v7 = v6;
  if (v6)
  {
    xdict = v6;
  }
  else
  {
    v7 = xpc_null_create();
    xdict = v7;
    if (!v7)
    {
      v8 = xpc_null_create();
      v7 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1A1AEB9A8](v7) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v7);
    goto LABEL_9;
  }
  v8 = xpc_null_create();
LABEL_8:
  xdict = v8;
LABEL_9:
  xpc_release(v7);
  v9 = xpc_int64_create(a3);
  if (!v9)
    v9 = xpc_null_create();
  v10 = xdict;
  xpc_dictionary_set_value(xdict, a2, v9);
  v11 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v11);
  qmi::Client::State::send(*((_QWORD **)this + 2), &xdict);
  xpc_release(v10);
}

void qmi::Client::setClientHandle(uint64_t a1, uint64_t *a2)
{
  qmi::Client::State::setClientHandle(*(_QWORD *)(a1 + 16), a2);
}

void qmi::Client::stop(qmi::Client::State **this)
{
  qmi::Client::State::stop(this[2]);
}

void qmi::Client::start(qmi::Client::State **this)
{
  qmi::Client::State::start(this[2]);
}

void qmi::Client::release(qmi::Client *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void qmi::Client::setHandler(uint64_t a1, int a2, void *aBlock)
{
  _QWORD *v4;
  void *v5;
  std::logic_error *exception;
  const void *v7;

  if (a2 == 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Low power handler cannot take an XPC object paramter");
    __cxa_throw(exception, (struct type_info *)off_1E4151B18, MEMORY[0x1E0DE4360]);
  }
  v4 = *(_QWORD **)(a1 + 16);
  if (aBlock)
  {
    v5 = _Block_copy(aBlock);
    v7 = v5;
    qmi::Client::State::setHandler(v4, a2, &v7);
    if (v5)
      _Block_release(v5);
  }
  else
  {
    v7 = 0;
    qmi::Client::State::setHandler(v4, a2, &v7);
  }
}

void sub_19E9E07E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
  return result;
}

void qmi::Client::setHandler(uint64_t a1, unsigned int a2, void *aBlock)
{
  _QWORD *v3;
  void *v4;
  std::logic_error *exception;
  const void *v6;

  if (a2 <= 5)
  {
    if (a2 != 3)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "This event cannot take a dispatch parameter");
      __cxa_throw(exception, (struct type_info *)off_1E4151B18, MEMORY[0x1E0DE4360]);
    }
    v3 = *(_QWORD **)(a1 + 16);
    if (aBlock)
    {
      v4 = _Block_copy(aBlock);
      v6 = v4;
      qmi::Client::State::setHandler(v3, 3, &v6);
      if (v4)
        _Block_release(v4);
    }
    else
    {
      v6 = 0;
      qmi::Client::State::setHandler(v3, 3, &v6);
    }
  }
}

void sub_19E9E08DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void qmi::Client::setHandler(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD aBlock[5];
  _QWORD v8[5];
  const void *v9;

  if (a2 <= 5)
  {
    if (a2 == 3)
    {
      if (a3)
      {
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1107296256;
        aBlock[2] = ___ZNK3qmi6Client10setHandlerENS0_5EventEU13block_pointerFvvE_block_invoke_22;
        aBlock[3] = &__block_descriptor_tmp_24;
        aBlock[4] = a3;
        v4 = *(_QWORD **)(a1 + 16);
        v5 = _Block_copy(aBlock);
        v9 = v5;
        qmi::Client::State::setHandler(v4, 3, &v9);
        if (v5)
          _Block_release(v5);
      }
      else
      {
        v6 = *(_QWORD **)(a1 + 16);
        v9 = 0;
        qmi::Client::State::setHandler(v6, 3, &v9);
      }
    }
    else if (a3)
    {
      v8[0] = MEMORY[0x1E0C809B0];
      v8[1] = 1107296256;
      v8[2] = ___ZNK3qmi6Client10setHandlerENS0_5EventEU13block_pointerFvvE_block_invoke;
      v8[3] = &__block_descriptor_tmp_21;
      v8[4] = a3;
      qmi::Client::setHandler(a1, a2, v8);
    }
    else
    {
      v3 = *(_QWORD **)(a1 + 16);
      v9 = 0;
      qmi::Client::State::setHandler(v3, a2, &v9);
    }
  }
}

void sub_19E9E0A48(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK3qmi6Client10setHandlerENS0_5EventEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __copy_helper_block_e8_32b(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 32), *(const void **)(a2 + 32), 7);
}

void __destroy_helper_block_e8_32b(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 32), 7);
}

uint64_t ___ZNK3qmi6Client10setHandlerENS0_5EventEU13block_pointerFvvE_block_invoke_22(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void qmi::Client::setIndHandler(uint64_t a1, __int16 a2, void *aBlock)
{
  _QWORD *v4;
  void *v5;
  const void *v6;

  v4 = *(_QWORD **)(a1 + 16);
  if (aBlock)
  {
    v5 = _Block_copy(aBlock);
    v6 = v5;
    qmi::Client::State::setIndHandler(v4, a2, &v6);
    if (v5)
      _Block_release(v5);
  }
  else
  {
    v6 = 0;
    qmi::Client::State::setIndHandler(v4, a2, &v6);
  }
}

void qmi::Client::setIndShouldWake(qmi::Client::State **this, __int16 a2, char a3)
{
  qmi::Client::State::setIndShouldWake(this[2], a2, a3);
}

uint64_t qmi::Client::getName(qmi::Client *this)
{
  return *((_QWORD *)this + 2) + 56;
}

uint64_t qmi::Client::getSvcType(qmi::Client *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 2) + 104);
}

void qmi::Client::pushSendBarrier(qmi::Client *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  _QWORD v5[5];
  dispatch_object_t object;

  v2 = dispatch_semaphore_create(0);
  v3 = v2;
  v4 = *(NSObject **)(*((_QWORD *)this + 2) + 24);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 1174405120;
  v5[2] = ___ZNK3qmi6Client15pushSendBarrierEv_block_invoke;
  v5[3] = &__block_descriptor_tmp_26;
  v5[4] = this;
  object = v2;
  if (v2)
    dispatch_retain(v2);
  dispatch_sync(v4, v5);
  dispatch_semaphore_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
  if (object)
    dispatch_release(object);
  if (v3)
    dispatch_release(v3);
}

void ___ZNK3qmi6Client15pushSendBarrierEv_block_invoke(uint64_t a1)
{
  xpc_object_t *v2;
  _xpc_connection_s *v3;
  NSObject *v4;
  _QWORD barrier[4];
  dispatch_object_t object;

  v2 = (xpc_object_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 16) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  v3 = (_xpc_connection_s *)*v2;
  if (*v2)
    xpc_retain(*v2);
  else
    v3 = (_xpc_connection_s *)xpc_null_create();
  if (MEMORY[0x1A1AEB9A8](v3) == MEMORY[0x1E0C812E0])
  {
    barrier[0] = MEMORY[0x1E0C809B0];
    barrier[1] = 1174405120;
    barrier[2] = ___ZNK3qmi6Client15pushSendBarrierEv_block_invoke_2;
    barrier[3] = &__block_descriptor_tmp_25;
    v4 = *(NSObject **)(a1 + 40);
    object = v4;
    if (v4)
      dispatch_retain(v4);
    xpc_connection_send_barrier(v3, barrier);
    if (object)
      dispatch_release(object);
  }
  else
  {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
  }
  xpc_release(v3);
}

void sub_19E9E0CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object)
{
  void *v14;

  if (object)
    dispatch_release(object);
  xpc_release(v14);
  _Unwind_Resume(a1);
}

intptr_t ___ZNK3qmi6Client15pushSendBarrierEv_block_invoke_2(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void __copy_helper_block_e8_32c25_ZTSN8dispatch9semaphoreE(uint64_t a1, uint64_t a2)
{
  NSObject *v3;

  v3 = *(NSObject **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  if (v3)
    dispatch_retain(v3);
}

void __destroy_helper_block_e8_32c25_ZTSN8dispatch9semaphoreE(uint64_t a1)
{
  NSObject *v1;

  v1 = *(NSObject **)(a1 + 32);
  if (v1)
    dispatch_release(v1);
}

void __copy_helper_block_e8_40c25_ZTSN8dispatch9semaphoreE(uint64_t a1, uint64_t a2)
{
  NSObject *v3;

  v3 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (v3)
    dispatch_retain(v3);
}

void __destroy_helper_block_e8_40c25_ZTSN8dispatch9semaphoreE(uint64_t a1)
{
  NSObject *v1;

  v1 = *(NSObject **)(a1 + 40);
  if (v1)
    dispatch_release(v1);
}

uint64_t qmi::Client::XPCState::getServerConnection(qmi::Client::XPCState *this)
{
  return (uint64_t)this + 128;
}

uint64_t qmi::Client::LocalState::getServerConnection(qmi::Client::LocalState *this)
{
  return (uint64_t)this + 376;
}

uint64_t std::__split_buffer<qmi::Client::State::Transaction>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  unsigned int *v4;
  unsigned int *v5;
  int v6;
  const void *v7;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    v4 = *(unsigned int **)(i - 16);
    if (v4)
    {
      v5 = v4 + 2;
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (v6 <= 0)
      {
        _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x3F, "prevRefCount", ">", "0", (const char *)v6, 0);
      }
      else if (v6 == 1)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
    }
    v7 = *(const void **)(i - 8);
    if (v7)
      _Block_release(v7);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<qmi::Client::State::Transaction>,std::reverse_iterator<qmi::Client::State::Transaction*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t i;
  unsigned int *v5;
  unsigned int *v6;
  int v7;
  const void *v8;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    for (i = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8); v3 != i; v3 += 24)
    {
      v5 = *(unsigned int **)(v3 + 8);
      if (v5)
      {
        v6 = v5 + 2;
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (v7 <= 0)
        {
          _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x3F, "prevRefCount", ">", "0", (const char *)v7, 0);
        }
        else if (v7 == 1)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
        }
      }
      v8 = *(const void **)(v3 + 16);
      if (v8)
        _Block_release(v8);
    }
  }
  return a1;
}

xpc_object_t *std::vector<xpc::dict>::__emplace_back_slow_path<xpc::dict const&>(xpc_object_t **a1, void *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  xpc_object_t *v9;
  char *v10;
  xpc_object_t *v11;
  xpc_object_t *v12;
  xpc_object_t *v13;
  xpc_object_t *v14;
  void *v15;
  xpc_object_t *v16;
  xpc_object_t *v17;
  void *v18;

  v2 = a1[1] - *a1;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v6 = (char *)a1[2] - (char *)*a1;
  if (v6 >> 2 > v3)
    v3 = v6 >> 2;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
    v7 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (!v7)
  {
    v8 = 0;
    v9 = (xpc_object_t *)(8 * v2);
    *v9 = a2;
    if (a2)
      goto LABEL_10;
LABEL_20:
    *v9 = xpc_null_create();
    v10 = &v8[8 * v7];
    v11 = v9 + 1;
    v13 = *a1;
    v12 = a1[1];
    if (v12 != *a1)
      goto LABEL_11;
LABEL_21:
    *a1 = v9;
    a1[1] = v11;
    a1[2] = (xpc_object_t *)v10;
    if (!v12)
      return v11;
    goto LABEL_17;
  }
  if (v7 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v8 = (char *)operator new(8 * v7);
  v9 = (xpc_object_t *)&v8[8 * v2];
  *v9 = a2;
  if (!a2)
    goto LABEL_20;
LABEL_10:
  xpc_retain(a2);
  v10 = &v8[8 * v7];
  v11 = v9 + 1;
  v13 = *a1;
  v12 = a1[1];
  if (v12 == *a1)
    goto LABEL_21;
LABEL_11:
  v14 = v12;
  do
  {
    v15 = *--v14;
    *--v9 = v15;
    *(v12 - 1) = xpc_null_create();
    v12 = v14;
  }
  while (v14 != v13);
  v12 = *a1;
  v16 = a1[1];
  *a1 = v9;
  a1[1] = v11;
  a1[2] = (xpc_object_t *)v10;
  if (v16 != v12)
  {
    v17 = v16;
    do
    {
      v18 = *--v17;
      xpc_release(v18);
      *(v16 - 1) = 0;
      v16 = v17;
    }
    while (v17 != v12);
  }
  if (v12)
LABEL_17:
    operator delete(v12);
  return v11;
}

void std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>>>>::destroy(_QWORD *a1)
{
  const void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>>>>::destroy(a1[1]);
    v2 = (const void *)a1[5];
    if (v2)
      _Block_release(v2);
    operator delete(a1);
  }
}

void ___ZNK3ctu20SharedSynchronizableIN3qmi6Client5StateEE20execute_wrapped_syncIZNS3_15setClientHandleERKNSt3__18weak_ptrIvEEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSC__block_invoke(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v1 = *(uint64_t **)(a1 + 40);
  v3 = *v1;
  v2 = (uint64_t *)v1[1];
  v5 = *v2;
  v4 = v2[1];
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(std::__shared_weak_count **)(v3 + 272);
  *(_QWORD *)(v3 + 264) = v5;
  *(_QWORD *)(v3 + 272) = v4;
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  *(_BYTE *)(v3 + 256) = *(_QWORD *)(v1[1] + 8) != 0;
}

void dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::stop(void)::$_0>(qmi::Client::State::stop(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::stop(void)::$_0,dispatch_queue_s *::default_delete<qmi::Client::State::stop(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  qmi::Client::State **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(qmi::Client::State ***)a1;
  qmi::Client::State::sendStopMessage_sync(**(qmi::Client::State ***)a1);
  operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_19E9E11FC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::start(void)::$_0>(qmi::Client::State::start(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::start(void)::$_0,dispatch_queue_s *::default_delete<qmi::Client::State::start(void)::$_0>>)::{lambda(void *)#1}::__invoke(qmi::Client::State ***a1)
{
  qmi::Client::State **v2;
  qmi::Client::State *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *a1;
  v3 = **a1;
  if (!*((_BYTE *)v3 + 144))
  {
    *((_BYTE *)v3 + 144) = 1;
    qmi::Client::State::sendStartMessage_sync(v3);
  }
  operator delete(v2);
  v4 = (std::__shared_weak_count *)a1[2];
  if (!v4)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    operator delete(a1);
  }
  else
  {
LABEL_7:
    operator delete(a1);
  }
}

void sub_19E9E12E8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<qmi::Client::State::handleClientMessage_sync(xpc::dict const&)::$_0>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::handleClientMessage_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::State::handleClientMessage_sync(xpc::dict const&)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2;
  xpc_object_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)a1;
  v3 = xpc_null_create();
  qmi::Client::State::handleClientMessage(v2, v4, (xpc_object_t *)a1 + 1);
  xpc_release(v3);
  xpc_release(*((xpc_object_t *)a1 + 1));
  operator delete(a1);
}

void sub_19E9E1398(_Unwind_Exception *a1)
{
  void *v1;
  xpc_object_t *v2;
  void *v3;

  xpc_release(v3);
  xpc_release(*v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_0>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_0,std::default_delete<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  BOOL v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  const void *v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      if (*((_BYTE *)a1 + 16))
        v4 = *(_QWORD *)a1 == 0;
      else
        v4 = 0;
      if (!v4)
        goto LABEL_11;
      goto LABEL_12;
    }
  }
  else
  {
    v3 = 0;
  }
  if (!*((_BYTE *)a1 + 16))
LABEL_11:
    (*(void (**)(void))(*((_QWORD *)a1 + 3) + 16))();
LABEL_12:
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  xpc_release(*((xpc_object_t *)a1 + 4));
  *((_QWORD *)a1 + 4) = 0;
  v7 = (const void *)*((_QWORD *)a1 + 3);
  if (v7)
    _Block_release(v7);
  v8 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  operator delete(a1);
}

void sub_19E9E14A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  const void *v6;
  std::__shared_weak_count *v7;

  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  xpc_release(*(xpc_object_t *)(v1 + 32));
  *(_QWORD *)(v1 + 32) = 0;
  v6 = *(const void **)(v1 + 24);
  if (v6)
    _Block_release(v6);
  v7 = *(std::__shared_weak_count **)(v1 + 8);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1,std::default_delete<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 40));
    *(_QWORD *)(v2 + 40) = 0;
    v3 = *(const void **)(v2 + 32);
    if (v3)
      _Block_release(v3);
    v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    if (*(_QWORD *)v2)
    {
      dispatch_group_leave(*(dispatch_group_t *)v2);
      if (*(_QWORD *)v2)
        dispatch_release(*(dispatch_object_t *)v2);
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *dispatch::async<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1,std::default_delete<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  BOOL v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;

  v8 = a1;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      if (*(_BYTE *)(a1 + 24))
        v4 = *(_QWORD *)(a1 + 8) == 0;
      else
        v4 = 0;
      if (v4)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  else
  {
    v3 = 0;
  }
  if (!*(_BYTE *)(a1 + 24))
LABEL_11:
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
LABEL_12:
  if (!v3)
    return std::unique_ptr<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1,std::default_delete<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1>>::~unique_ptr[abi:ne180100](&v8);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return std::unique_ptr<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1,std::default_delete<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1>>::~unique_ptr[abi:ne180100](&v8);
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return std::unique_ptr<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1,std::default_delete<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1>>::~unique_ptr[abi:ne180100](&v8);
}

void sub_19E9E1668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  va_list va;

  va_start(va, a2);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::unique_ptr<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1,std::default_delete<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_1>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_2>(dispatch_group_s *,dispatch_queue_s *,qmi::Client::State::handleStatus_sync(xpc::dict const&,qmi::ClientStatus)::$_2 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(void *a1)
{
  qmi::Client::State *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  BOOL v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = *(qmi::Client::State **)a1;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      if (*((_BYTE *)a1 + 24))
        v5 = *((_QWORD *)a1 + 1) == 0;
      else
        v5 = 0;
      if (v5)
        goto LABEL_13;
      goto LABEL_11;
    }
  }
  else
  {
    v4 = 0;
  }
  if (*((_BYTE *)a1 + 24))
    goto LABEL_13;
LABEL_11:
  if (*((_BYTE *)v2 + 144))
    qmi::Client::State::sendStartMessage_sync(v2);
LABEL_13:
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  operator delete(a1);
}

void sub_19E9E1778(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;

  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = (std::__shared_weak_count *)v1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 40));
    *(_QWORD *)(v2 + 40) = 0;
    v3 = *(const void **)(v2 + 32);
    if (v3)
      _Block_release(v3);
    v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    if (*(_QWORD *)v2)
    {
      dispatch_group_leave(*(dispatch_group_t *)v2);
      if (*(_QWORD *)v2)
        dispatch_release(*(dispatch_object_t *)v2);
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *dispatch::async<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0>(dispatch_queue_s *,std::unique_ptr<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  BOOL v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;

  v8 = a1;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      if (*(_BYTE *)(a1 + 24))
        v4 = *(_QWORD *)(a1 + 8) == 0;
      else
        v4 = 0;
      if (v4)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  else
  {
    v3 = 0;
  }
  if (!*(_BYTE *)(a1 + 24))
LABEL_11:
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
LABEL_12:
  if (!v3)
    return std::unique_ptr<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>::~unique_ptr[abi:ne180100](&v8);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return std::unique_ptr<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>::~unique_ptr[abi:ne180100](&v8);
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return std::unique_ptr<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>::~unique_ptr[abi:ne180100](&v8);
}

void sub_19E9E191C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  va_list va;

  va_start(va, a2);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::unique_ptr<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::XPCState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = *a1;
  *a1 = 0;
  if (!v2)
    return a1;
  if ((*(char *)(v2 + 63) & 0x80000000) == 0)
  {
    v3 = *(const void **)(v2 + 32);
    if (!v3)
      goto LABEL_7;
    goto LABEL_6;
  }
  operator delete(*(void **)(v2 + 40));
  v3 = *(const void **)(v2 + 32);
  if (v3)
LABEL_6:
    _Block_release(v3);
LABEL_7:
  v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  if (*(_QWORD *)v2)
  {
    dispatch_group_leave(*(dispatch_group_t *)v2);
    if (*(_QWORD *)v2)
      dispatch_release(*(dispatch_object_t *)v2);
  }
  operator delete((void *)v2);
  return a1;
}

uint64_t *dispatch::async<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0>(dispatch_queue_s *,std::unique_ptr<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  BOOL v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;

  v8 = a1;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      if (*(_BYTE *)(a1 + 24))
        v4 = *(_QWORD *)(a1 + 8) == 0;
      else
        v4 = 0;
      if (v4)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  else
  {
    v3 = 0;
  }
  if (!*(_BYTE *)(a1 + 24))
LABEL_11:
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
LABEL_12:
  if (!v3)
    return std::unique_ptr<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>::~unique_ptr[abi:ne180100](&v8);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return std::unique_ptr<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>::~unique_ptr[abi:ne180100](&v8);
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return std::unique_ptr<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>::~unique_ptr[abi:ne180100](&v8);
}

void sub_19E9E1AC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  va_list va;

  va_start(va, a2);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::unique_ptr<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0,std::default_delete<qmi::Client::LocalState::handleEnterLowPower_sync(xpc::dict const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void dispatch::async<qmi::Client::State::postResponseToClient_sync(QMIServiceMsg const*,dispatch::block<void({block_pointer})(QMIServiceMsg const&)> const&)::$_0>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::postResponseToClient_sync(QMIServiceMsg const*,dispatch::block<void({block_pointer})(QMIServiceMsg const&)> const&)::$_0,std::default_delete<qmi::Client::State::postResponseToClient_sync(QMIServiceMsg const*,dispatch::block<void({block_pointer})(QMIServiceMsg const&)> const&)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  const void *v12;

  v2 = (std::__shared_weak_count *)a1[3];
  if (!v2)
  {
    v3 = 0;
LABEL_6:
    v4 = 0;
    if (!*((_BYTE *)a1 + 32))
      goto LABEL_8;
LABEL_7:
    if (!v4)
      goto LABEL_10;
    goto LABEL_8;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    goto LABEL_6;
  v4 = a1[2] != 0;
  if (*((_BYTE *)a1 + 32))
    goto LABEL_7;
LABEL_8:
  v5 = a1[1];
  if (v5)
    (*(void (**)(uint64_t, _QWORD))(v5 + 16))(v5, *a1);
LABEL_10:
  v6 = *a1;
  v7 = (unsigned int *)(*a1 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8 <= 0)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x3F, "prevRefCount", ">", "0", (const char *)v8, 0);
  }
  else if (v6 && v8 == 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v11 = (std::__shared_weak_count *)a1[3];
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = (const void *)a1[1];
  if (v12)
    _Block_release(v12);
  operator delete(a1);
}

void sub_19E9E1C40(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  const void *v7;

  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v6 = (std::__shared_weak_count *)v1[3];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  v7 = (const void *)v1[1];
  if (v7)
    _Block_release(v7);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::send(xpc::dict const&)::$_0>(qmi::Client::State::send(xpc::dict const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::send(xpc::dict const&)::$_0,dispatch_queue_s *::default_delete<qmi::Client::State::send(xpc::dict const&)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD **a1)
{
  void *v2;
  xpc_object_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *a1;
  v3 = (xpc_object_t *)(*a1 + 1);
  (*(void (**)(_QWORD, xpc_object_t *))(*(_QWORD *)**a1 + 48))(**a1, v3);
  xpc_release(*v3);
  operator delete(v2);
  v4 = (std::__shared_weak_count *)a1[2];
  if (!v4)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    operator delete(a1);
  }
  else
  {
LABEL_5:
    operator delete(a1);
  }
}

void sub_19E9E1D48(_Unwind_Exception *a1)
{
  _QWORD *v1;
  xpc_object_t *v2;
  void *v3;
  xpc_object_t *v4;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = v2;
  xpc_release(*v4);
  operator delete(v3);
  v6 = (std::__shared_weak_count *)v1[2];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN3qmi6Client5StateEE20execute_wrapped_syncIZNS3_4sendERNS2_9SendProxyEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  __int16 v3;

  v1 = **(_QWORD **)(a1 + 40);
  result = *(unsigned __int16 *)(v1 + 146);
  if ((((_WORD)result + 1) & 0xFFFE) != 0)
    v3 = result + 1;
  else
    v3 = 1;
  *(_WORD *)(v1 + 146) = v3;
  return result;
}

uint64_t ___ZN8dispatch9sync_implIRU13block_pointerFtvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 40) + 16))();
  **(_WORD **)(a1 + 32) = result;
  return result;
}

uint64_t ___ZN8dispatch19async_and_wait_implIRU13block_pointerFtvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 40) + 16))();
  **(_WORD **)(a1 + 32) = result;
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::send(qmi::Client::SendProxy &)::$_1>(qmi::Client::State::send(qmi::Client::SendProxy &)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::send(qmi::Client::SendProxy &)::$_1,dispatch_queue_s *::default_delete<qmi::Client::State::send(qmi::Client::SendProxy &)::$_1>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  __int16 v5;
  unsigned int *v6;
  unsigned int *v7;
  int v8;
  const void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v2 = *a1;
  v3 = **a1;
  if (*((_WORD *)v2 + 16))
  {
    qmi::Client::State::send_sync((_QWORD *)v3, (xpc_object_t *)v2 + 1, *((unsigned __int16 *)v2 + 16), (unsigned int *)v2[2], (const void **)v2 + 3);
  }
  else
  {
    v4 = *(unsigned __int16 *)(v3 + 146);
    if ((((_WORD)v4 + 1) & 0xFFFE) != 0)
      v5 = v4 + 1;
    else
      v5 = 1;
    *(_WORD *)(v3 + 146) = v5;
    qmi::Client::State::send_sync((_QWORD *)v3, (xpc_object_t *)v2 + 1, v4, (unsigned int *)v2[2], (const void **)v2 + 3);
  }
  v6 = (unsigned int *)v2[2];
  v7 = v6 + 2;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8 <= 0)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x3F, "prevRefCount", ">", "0", (const char *)v8, 0);
  }
  else if (v6 && v8 == 1)
  {
    (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  v9 = (const void *)v2[3];
  if (v9)
    _Block_release(v9);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v10 = (std::__shared_weak_count *)a1[2];
  if (!v10)
    goto LABEL_20;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    operator delete(a1);
  }
  else
  {
LABEL_20:
    operator delete(a1);
  }
}

void sub_19E9E1F88(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v4 = *(const void **)(v2 + 24);
  if (v4)
    _Block_release(v4);
  xpc_release(*(xpc_object_t *)(v2 + 8));
  operator delete((void *)v2);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(void *)>)::$_0>(qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(void *)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(void *)>)::$_0,dispatch_queue_s *::default_delete<qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(void *)>)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  const void *v5;
  void *v6;
  void *v7;
  const void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  void *v11;
  const void *v12;
  void *v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  const void *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  xpc_object_t v22;
  xpc_object_t xdict;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  switch(*(_DWORD *)(*(_QWORD *)a1 + 8))
  {
    case 1:
      v4 = (void *)v2[2];
      if (v4)
        v4 = _Block_copy(v4);
      v5 = *(const void **)(v3 + 184);
      *(_QWORD *)(v3 + 184) = v4;
      if (v5)
        goto LABEL_5;
      goto LABEL_32;
    case 2:
      v6 = (void *)v2[2];
      if (v6)
        v6 = _Block_copy(v6);
      v5 = *(const void **)(v3 + 176);
      *(_QWORD *)(v3 + 176) = v6;
      if (v5)
LABEL_5:
        _Block_release(v5);
      goto LABEL_32;
    case 4:
      v7 = (void *)v2[2];
      if (v7)
        v7 = _Block_copy(v7);
      v8 = *(const void **)(v3 + 48);
      *(_QWORD *)(v3 + 48) = v7;
      if (v8)
        _Block_release(v8);
      if (!*(_BYTE *)(v3 + 144))
        goto LABEL_32;
      v9 = xpc_dictionary_create(0, 0, 0);
      v10 = v9;
      if (v9)
      {
        xdict = v9;
      }
      else
      {
        v10 = xpc_null_create();
        xdict = v10;
        if (!v10)
        {
          v14 = xpc_null_create();
          v10 = 0;
          goto LABEL_28;
        }
      }
      if (MEMORY[0x1A1AEB9A8](v10) == MEMORY[0x1E0C812F8])
      {
        xpc_retain(v10);
        goto LABEL_29;
      }
      v14 = xpc_null_create();
LABEL_28:
      xdict = v14;
LABEL_29:
      xpc_release(v10);
      v15 = xpc_BOOL_create(v2[2] != 0);
      if (!v15)
        v15 = xpc_null_create();
      v16 = xdict;
      xpc_dictionary_set_value(xdict, "exit_low_power", v15);
      v17 = xpc_null_create();
      xpc_release(v15);
      xpc_release(v17);
      qmi::Client::State::send((_QWORD *)v3, &xdict);
      xpc_release(v16);
LABEL_32:
      v18 = (const void *)v2[2];
      if (v18)
        _Block_release(v18);
      operator delete(v2);
      v19 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      operator delete(a1);
      return;
    case 5:
      v11 = (void *)v2[2];
      if (v11)
        v11 = _Block_copy(v11);
      v12 = *(const void **)(v3 + 192);
      *(_QWORD *)(v3 + 192) = v11;
      if (v12)
        _Block_release(v12);
      if (!*(_QWORD *)(v3 + 112))
      {
        v13 = (void *)MEMORY[0x1E0C81260];
        xpc_retain(MEMORY[0x1E0C81260]);
        v22 = v13;
        xpc_retain(v13);
        xdict = 0;
        qmi::Client::State::sendServerFailure_sync(v3, &v22, (NSObject **)&xdict);
        xpc_release(MEMORY[0x1E0C81260]);
        xpc_release(MEMORY[0x1E0C81260]);
      }
      goto LABEL_32;
    default:
      goto LABEL_32;
  }
}

uint64_t *std::unique_ptr<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0,std::default_delete<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  NSObject *v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(const void **)(v2 + 40);
    if (v3)
      _Block_release(v3);
    v4 = *(std::__shared_weak_count **)(v2 + 24);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    v5 = *(NSObject **)(v2 + 8);
    if (v5)
    {
      dispatch_group_leave(v5);
      v6 = *(NSObject **)(v2 + 8);
      if (v6)
        dispatch_release(v6);
    }
    xpc_release(*(xpc_object_t *)v2);
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *dispatch::async<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0,std::default_delete<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  BOOL v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;

  v8 = a1;
  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      if (*(_BYTE *)(a1 + 32))
        v4 = *(_QWORD *)(a1 + 16) == 0;
      else
        v4 = 0;
      if (v4)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  else
  {
    v3 = 0;
  }
  if (!*(_BYTE *)(a1 + 32))
LABEL_11:
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
LABEL_12:
  if (!v3)
    return std::unique_ptr<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0,std::default_delete<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0>>::~unique_ptr[abi:ne180100](&v8);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return std::unique_ptr<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0,std::default_delete<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0>>::~unique_ptr[abi:ne180100](&v8);
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return std::unique_ptr<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0,std::default_delete<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0>>::~unique_ptr[abi:ne180100](&v8);
}

void sub_19E9E2410(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  va_list va;

  va_start(va, a2);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::unique_ptr<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0,std::default_delete<qmi::Client::State::sendServerFailure_sync(xpc::object,dispatch::group_session const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(dispatch_group_s *)>)::$_0>(qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(dispatch_group_s *)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(dispatch_group_s *)>)::$_0,dispatch_queue_s *::default_delete<qmi::Client::State::setHandler(qmi::Client::Event,dispatch::block<void({block_pointer})(dispatch_group_s *)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  const void *v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  const void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  xpc_object_t xdict;

  v2 = *a1;
  if (*((_DWORD *)*a1 + 2) == 3)
  {
    v3 = *v2;
    v4 = (void *)v2[2];
    if (v4)
      v4 = _Block_copy(v4);
    v5 = *(const void **)(v3 + 248);
    *(_QWORD *)(v3 + 248) = v4;
    if (v5)
      _Block_release(v5);
    if (*(_BYTE *)(v3 + 144))
    {
      v6 = xpc_dictionary_create(0, 0, 0);
      v7 = v6;
      if (v6)
      {
        xdict = v6;
      }
      else
      {
        v7 = xpc_null_create();
        xdict = v7;
        if (!v7)
        {
          v8 = xpc_null_create();
          v7 = 0;
          goto LABEL_14;
        }
      }
      if (MEMORY[0x1A1AEB9A8](v7) == MEMORY[0x1E0C812F8])
      {
        xpc_retain(v7);
LABEL_15:
        xpc_release(v7);
        v9 = xpc_BOOL_create(v2[2] != 0);
        if (!v9)
          v9 = xpc_null_create();
        xpc_dictionary_set_value(xdict, "low_power", v9);
        v10 = xpc_null_create();
        xpc_release(v9);
        xpc_release(v10);
        (*(void (**)(uint64_t, xpc_object_t *))(*(_QWORD *)v3 + 56))(v3, &xdict);
        xpc_release(xdict);
        goto LABEL_18;
      }
      v8 = xpc_null_create();
LABEL_14:
      xdict = v8;
      goto LABEL_15;
    }
  }
LABEL_18:
  v11 = (const void *)v2[2];
  if (v11)
    _Block_release(v11);
  operator delete(v2);
  v12 = (std::__shared_weak_count *)a1[2];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  operator delete(a1);
}

void sub_19E9E2600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  _QWORD *v11;
  const void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  xpc_release(object);
  v13 = (const void *)v11[2];
  if (v13)
    _Block_release(v13);
  operator delete(v11);
  v14 = (std::__shared_weak_count *)v10[2];
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::setIndHandler(unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>)::$_0>(qmi::Client::State::setIndHandler(unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::setIndHandler(unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>)::$_0,dispatch_queue_s *::default_delete<qmi::Client::State::setIndHandler(unsigned short,dispatch::block<void({block_pointer})(QMIServiceMsg const&)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  const void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t *v13;
  const void *v14;
  const void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  v2 = *a1;
  v3 = **a1;
  v4 = (const void *)(*a1)[2];
  if (v4)
  {
    v5 = _Block_copy(v4);
    v7 = (_QWORD *)(v3 + 208);
    v6 = *(_QWORD *)(v3 + 208);
    v8 = *((unsigned __int16 *)v2 + 4);
    if (v6)
      goto LABEL_7;
    goto LABEL_5;
  }
  v5 = 0;
  v7 = (_QWORD *)(v3 + 208);
  v6 = *(_QWORD *)(v3 + 208);
  v8 = *((unsigned __int16 *)v2 + 4);
  if (!v6)
  {
LABEL_5:
    v9 = v7;
LABEL_11:
    v11 = operator new(0x30uLL);
    v11[16] = v8;
    *((_QWORD *)v11 + 5) = 0;
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = v9;
    *v7 = v11;
    v12 = **(_QWORD **)(v3 + 200);
    v13 = (uint64_t *)v11;
    if (v12)
    {
      *(_QWORD *)(v3 + 200) = v12;
      v13 = (uint64_t *)*v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 208), v13);
    ++*(_QWORD *)(v3 + 216);
    v14 = (const void *)*((_QWORD *)v11 + 5);
    *((_QWORD *)v11 + 5) = v5;
    if (!v14)
      goto LABEL_17;
LABEL_16:
    _Block_release(v14);
    goto LABEL_17;
  }
  while (1)
  {
LABEL_7:
    while (1)
    {
      v9 = (_QWORD *)v6;
      v10 = *(unsigned __int16 *)(v6 + 32);
      if (v8 >= v10)
        break;
      v6 = *v9;
      v7 = v9;
      if (!*v9)
        goto LABEL_11;
    }
    if (v10 >= v8)
      break;
    v6 = v9[1];
    if (!v6)
    {
      v7 = v9 + 1;
      goto LABEL_11;
    }
  }
  v14 = (const void *)v9[5];
  v9[5] = v5;
  if (v14)
    goto LABEL_16;
LABEL_17:
  v15 = (const void *)v2[2];
  if (v15)
    _Block_release(v15);
  operator delete(v2);
  v16 = (std::__shared_weak_count *)a1[2];
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  operator delete(a1);
}

void sub_19E9E2814(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  const void *v3;
  const void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (v3)
    _Block_release(v3);
  v5 = (const void *)v2[2];
  if (v5)
    _Block_release(v5);
  operator delete(v2);
  v6 = (std::__shared_weak_count *)v1[2];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::State::setIndShouldWake(unsigned short,BOOL)::$_0>(qmi::Client::State::setIndShouldWake(unsigned short,BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State::setIndShouldWake(unsigned short,BOOL)::$_0,dispatch_queue_s *::default_delete<qmi::Client::State::setIndShouldWake(unsigned short,BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(qmi::Client::State ***a1)
{
  qmi::Client::State **v2;
  qmi::Client::State *v3;
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  unint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _WORD *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  _OWORD *v20;
  unsigned __int16 *v21;
  unint64_t v22;
  __int128 v23;
  __int16 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v2 = *a1;
  v3 = **a1;
  v4 = (unsigned __int16 *)*((_QWORD *)v3 + 28);
  v5 = (unsigned __int16 *)*((_QWORD *)v3 + 29);
  v6 = v5;
  if (v4 == v5)
  {
    v7 = (unsigned __int16 *)*((_QWORD *)v3 + 28);
    if (*((_BYTE *)v2 + 10))
      goto LABEL_7;
  }
  else
  {
    v7 = (unsigned __int16 *)*((_QWORD *)v3 + 28);
    while (*v7 != *((unsigned __int16 *)v2 + 4))
    {
      if (++v7 == v5)
      {
        v7 = (unsigned __int16 *)*((_QWORD *)v3 + 29);
        break;
      }
    }
    if (*((_BYTE *)v2 + 10))
    {
LABEL_7:
      if (v7 == v5)
      {
        v8 = *((_QWORD *)v3 + 30);
        if ((unint64_t)v5 >= v8)
        {
          v10 = (char *)v5 - (char *)v4;
          if ((char *)v5 - (char *)v4 <= -3)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v11 = v10 >> 1;
          v12 = v8 - (_QWORD)v4;
          if (v12 <= (v10 >> 1) + 1)
            v13 = v11 + 1;
          else
            v13 = v12;
          if (v12 >= 0x7FFFFFFFFFFFFFFELL)
            v14 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v14 = v13;
          if (v14)
          {
            if (v14 < 0)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v15 = operator new(2 * v14);
          }
          else
          {
            v15 = 0;
          }
          v16 = &v15[2 * v11];
          v17 = &v15[2 * v14];
          *v16 = *((_WORD *)v2 + 4);
          v9 = v16 + 1;
          if (v4 != v5)
          {
            if ((unint64_t)(v10 - 2) < 0x1E)
              goto LABEL_46;
            if ((char *)v5 - v15 - (v10 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
              goto LABEL_46;
            v18 = ((unint64_t)(v10 - 2) >> 1) + 1;
            v19 = 2 * (v18 & 0xFFFFFFFFFFFFFFF0);
            v6 = &v5[v19 / 0xFFFFFFFFFFFFFFFELL];
            v16 = (_WORD *)((char *)v16 - v19);
            v20 = &v15[2 * v11 - 16];
            v21 = v5 - 8;
            v22 = v18 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v23 = *(_OWORD *)v21;
              *(v20 - 1) = *((_OWORD *)v21 - 1);
              *v20 = v23;
              v20 -= 2;
              v21 -= 16;
              v22 -= 16;
            }
            while (v22);
            if (v18 != (v18 & 0xFFFFFFFFFFFFFFF0))
            {
LABEL_46:
              do
              {
                v24 = *--v6;
                *--v16 = v24;
              }
              while (v6 != v4);
            }
          }
          *((_QWORD *)v3 + 28) = v16;
          *((_QWORD *)v3 + 29) = v9;
          *((_QWORD *)v3 + 30) = v17;
          if (v4)
            operator delete(v4);
        }
        else
        {
          *v5 = *((_WORD *)v2 + 4);
          v9 = v5 + 1;
        }
LABEL_35:
        *((_QWORD *)v3 + 29) = v9;
        qmi::Client::State::sendIndWakeSet_sync(v3);
        goto LABEL_36;
      }
      goto LABEL_36;
    }
  }
  if (v7 != v5)
  {
    if (v5 != v7 + 1)
      memmove(v7, v7 + 1, (char *)v5 - (char *)(v7 + 1));
    v9 = v5 - 1;
    goto LABEL_35;
  }
LABEL_36:
  operator delete(v2);
  v25 = (std::__shared_weak_count *)a1[2];
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  operator delete(a1);
}

void sub_19E9E2AB8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<qmi::Client::XPCState>::shared_ptr[abi:ne180100]<qmi::Client::XPCState,std::shared_ptr<qmi::Client::XPCState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::XPCState>(qmi::Client::XPCState*)::{lambda(qmi::Client::XPCState*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E4152CA0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 8) = a2;
    *(_QWORD *)(a2 + 16) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 8) = a2;
    *(_QWORD *)(a2 + 16) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_19E9E2C14(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<qmi::Client::XPCState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::XPCState>(qmi::Client::XPCState*)::{lambda(qmi::Client::XPCState*)#1}::operator() const(qmi::Client::XPCState*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_19E9E2C34(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<qmi::Client::XPCState *,std::shared_ptr<qmi::Client::XPCState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::XPCState>(qmi::Client::XPCState*)::{lambda(qmi::Client::XPCState *)#1},std::allocator<qmi::Client::XPCState>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<qmi::Client::XPCState *,std::shared_ptr<qmi::Client::XPCState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::XPCState>(qmi::Client::XPCState*)::{lambda(qmi::Client::XPCState *)#1},std::allocator<qmi::Client::XPCState>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<qmi::Client::XPCState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::XPCState>(qmi::Client::XPCState*)::{lambda(qmi::Client::XPCState*)#1}::operator() const(qmi::Client::XPCState*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<qmi::Client::XPCState *,std::shared_ptr<qmi::Client::XPCState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::XPCState>(qmi::Client::XPCState*)::{lambda(qmi::Client::XPCState *)#1},std::allocator<qmi::Client::XPCState>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN3qmi6Client5StateEE15make_shared_ptrINS2_8XPCStateEEENSt3__110shared_"
                     "ptrIT_EEPS9_EUlPS6_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN3qmi6Client5StateEE15make_shared_ptrINS2_8XPCStateEEENSt3_"
                                "_110shared_ptrIT_EEPS9_EUlPS6_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN3qmi6Client5StateEE15make_shared_ptrINS2_8XPCStateEEENSt3__110shared_ptrIT_EEPS9_EUlPS6_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN3qmi6Client5StateEE15make_shared_ptrINS2_8XPCStateEEENSt3__110shared_ptrIT_EEPS9_EUlPS6_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<qmi::Client::XPCState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::XPCState>(qmi::Client::XPCState*)::{lambda(qmi::Client::XPCState*)#1}::operator() const(qmi::Client::XPCState*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t qmi::Client::XPCState::init(xpc::connection const&)::$_0::operator()(xpc_object_t **a1)
{
  xpc_object_t *v2;
  uint64_t result;
  uint64_t v4;
  xpc_object_t v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  xpc_object_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _xpc_connection_s *v15;
  unint64_t v16;
  _QWORD handler[6];
  std::__shared_weak_count *v18;
  _xpc_connection_s *v19;
  xpc_object_t object;

  v2 = a1[1];
  result = MEMORY[0x1A1AEB9A8](**a1);
  v4 = MEMORY[0x1E0C812E0];
  if (result != MEMORY[0x1E0C812E0])
    return result;
  v5 = **a1;
  if (!v5)
  {
    v5 = xpc_null_create();
    v6 = v2[3];
    if (!v6)
      goto LABEL_5;
    goto LABEL_4;
  }
  xpc_retain(v5);
  v6 = v2[3];
  if (v6)
LABEL_4:
    dispatch_retain(v6);
LABEL_5:
  v7 = (std::__shared_weak_count *)v2[2];
  if (!v7 || (v8 = v2[1], (v9 = std::__shared_weak_count::lock(v7)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v10 = v9;
  p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
    object = v5;
    if (v5)
    {
LABEL_13:
      xpc_retain(v5);
      goto LABEL_18;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v10);
    object = v5;
    if (v5)
      goto LABEL_13;
  }
  object = xpc_null_create();
LABEL_18:
  ctu::XpcClientHelper::setServer_internal();
  xpc_release(object);
  object = 0;
  if (MEMORY[0x1A1AEB9A8](v2[14]) == v4)
  {
    v15 = (_xpc_connection_s *)v2[14];
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 1174405120;
    handler[2] = ___ZN3ctu15XpcClientHelper9setServerIN3qmi6Client5StateEEEvN3xpc10connectionEN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke;
    handler[3] = &__block_descriptor_tmp_34_0;
    handler[4] = v2 + 14;
    handler[5] = v8;
    v18 = v10;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
    v19 = v15;
    xpc_connection_set_event_handler(v15, handler);
    xpc_connection_set_target_queue(v15, v6);
    xpc_connection_resume(v15);
    if (v18)
      std::__shared_weak_count::__release_weak(v18);
  }
  std::__shared_weak_count::__release_weak(v10);
  if (v6)
    dispatch_release(v6);
  xpc_release(v5);
  return (*((uint64_t (**)(xpc_object_t *))*v2 + 8))(v2);
}

void sub_19E9E2EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, xpc_object_t object)
{
  void *v18;
  NSObject *v19;
  std::__shared_weak_count *v20;

  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  std::__shared_weak_count::__release_weak(v20);
  if (v19)
    dispatch_release(v19);
  xpc_release(v18);
  _Unwind_Resume(a1);
}

void ___ZN3ctu15XpcClientHelper9setServerIN3qmi6Client5StateEEEvN3xpc10connectionEN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke(_QWORD *a1, xpc_object_t a2)
{
  std::__shared_weak_count *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  xpc_object_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  xpc_object_t v14[2];
  std::__shared_weak_count *v15;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (_QWORD *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v15 = v6;
    if (v6)
    {
      v7 = v6;
      v8 = (void *)a1[5];
      v14[1] = v8;
      if (!v8)
      {
LABEL_20:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      v9 = MEMORY[0x1A1AEB9A8](a2);
      v10 = MEMORY[0x1E0C812F8];
      if (v9 != MEMORY[0x1E0C812F8])
      {
        if (v9 == MEMORY[0x1E0C81310] && *v5 == a1[7])
        {
          v14[0] = a2;
          if (a2)
          {
            xpc_retain(a2);
          }
          else
          {
            a2 = xpc_null_create();
            v14[0] = a2;
          }
          qmi::Client::State::handleServerError((uint64_t)v8, v14);
          xpc_release(a2);
        }
        goto LABEL_20;
      }
      if (a2)
      {
        xpc_retain(a2);
      }
      else
      {
        a2 = xpc_null_create();
        if (!a2)
        {
          v11 = xpc_null_create();
          a2 = 0;
          goto LABEL_16;
        }
      }
      if (MEMORY[0x1A1AEB9A8](a2) == v10)
      {
        xpc_retain(a2);
        v11 = a2;
      }
      else
      {
        v11 = xpc_null_create();
      }
LABEL_16:
      xpc_release(v11);
      xpc_release(a2);
      v7 = v15;
      if (!v15)
        return;
      goto LABEL_20;
    }
  }
}

void sub_19E9E30C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  xpc_release(v11);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN3qmi6Client5StateEE20execute_wrapped_syncIZNS2_8XPCState4initERKN3xpc10connectionEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSC__block_invoke(uint64_t a1)
{
  return qmi::Client::XPCState::init(xpc::connection const&)::$_0::operator()(*(xpc_object_t ***)(a1 + 40));
}

uint64_t __copy_helper_block_e8_32c42_ZTSNSt3__18weak_ptrIN3qmi6Client5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c42_ZTSNSt3__18weak_ptrIN3qmi6Client5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN3ctu15XpcServerHelper13startListenerIN3qmi6Client5StateEEEvN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke(_QWORD *a1, xpc_object_t a2)
{
  ctu::XpcServerHelper *v3;
  std::__shared_weak_count *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  char v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  xpc_object_t object;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v3 = (ctu::XpcServerHelper *)a1[4];
  v16 = 0;
  v17 = 0;
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v17 = std::__shared_weak_count::lock(v4);
    if (!v17)
      return;
    v6 = a1[5];
    v16 = v6;
    if (v6)
    {
      v7 = MEMORY[0x1A1AEB9A8](a2);
      v8 = MEMORY[0x1E0C812E0];
      if (v7 != MEMORY[0x1E0C812E0])
      {
        if (v7 == MEMORY[0x1E0C81310] && *(_QWORD *)ctu::XpcServerHelper::getListener(v3) == a1[7])
        {
          if (a2)
            xpc_retain(a2);
          else
            a2 = xpc_null_create();
          xpc_release(a2);
        }
        goto LABEL_21;
      }
      if (a2)
      {
        xpc_retain(a2);
        object = a2;
        v9 = a2;
      }
      else
      {
        v9 = xpc_null_create();
        object = v9;
        if (!v9)
        {
          v10 = xpc_null_create();
          v9 = 0;
          goto LABEL_16;
        }
      }
      if (MEMORY[0x1A1AEB9A8](v9) == v8)
      {
        xpc_retain(v9);
        goto LABEL_17;
      }
      v10 = xpc_null_create();
LABEL_16:
      object = v10;
LABEL_17:
      v11 = (*(uint64_t (**)(uint64_t, xpc_object_t *))(*(_QWORD *)v6 + 24))(v6, &object);
      xpc_release(object);
      object = 0;
      xpc_release(v9);
      if ((v11 & 1) == 0)
        xpc_connection_cancel((xpc_connection_t)a2);
    }
  }
LABEL_21:
  v12 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_19E9E32EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<qmi::Client::LocalState>::shared_ptr[abi:ne180100]<qmi::Client::LocalState,std::shared_ptr<qmi::Client::LocalState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::LocalState>(qmi::Client::LocalState*)::{lambda(qmi::Client::LocalState*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E4152DA0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 8) = a2;
    *(_QWORD *)(a2 + 16) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 8) = a2;
    *(_QWORD *)(a2 + 16) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_19E9E3440(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<qmi::Client::LocalState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::LocalState>(qmi::Client::LocalState*)::{lambda(qmi::Client::LocalState*)#1}::operator() const(qmi::Client::LocalState*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_19E9E3460(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<qmi::Client::LocalState *,std::shared_ptr<qmi::Client::LocalState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::LocalState>(qmi::Client::LocalState*)::{lambda(qmi::Client::LocalState *)#1},std::allocator<qmi::Client::LocalState>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<qmi::Client::LocalState *,std::shared_ptr<qmi::Client::LocalState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::LocalState>(qmi::Client::LocalState*)::{lambda(qmi::Client::LocalState *)#1},std::allocator<qmi::Client::LocalState>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<qmi::Client::LocalState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::LocalState>(qmi::Client::LocalState*)::{lambda(qmi::Client::LocalState*)#1}::operator() const(qmi::Client::LocalState*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<qmi::Client::LocalState *,std::shared_ptr<qmi::Client::LocalState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::LocalState>(qmi::Client::LocalState*)::{lambda(qmi::Client::LocalState *)#1},std::allocator<qmi::Client::LocalState>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN3qmi6Client5StateEE15make_shared_ptrINS2_10LocalStateEEENSt3__110shar"
                     "ed_ptrIT_EEPS9_EUlPS6_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN3qmi6Client5StateEE15make_shared_ptrINS2_10LocalStateEEENS"
                                "t3__110shared_ptrIT_EEPS9_EUlPS6_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN3qmi6Client5StateEE15make_shared_ptrINS2_10LocalStateEEENSt3__110shared_ptrIT_EEPS9_EUlPS6_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN3qmi6Client5StateEE15make_shared_ptrINS2_10LocalStateEEENSt3__110shared_ptrIT_EEPS9_EUlPS6_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<qmi::Client::LocalState> ctu::SharedSynchronizable<qmi::Client::State>::make_shared_ptr<qmi::Client::LocalState>(qmi::Client::LocalState*)::{lambda(qmi::Client::LocalState*)#1}::operator() const(qmi::Client::LocalState*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void qmi::Client::LocalState::init(void)::$_0::operator()(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::string::size_type v15;
  char v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string __p;
  std::string v24;
  _QWORD v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  if (TelephonyRadiosGetRadioVendor() == 1)
  {
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2 || (v3 = *(_QWORD *)(a1 + 8), (v4 = std::__shared_weak_count::lock(v2)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v5 = v4;
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (v9)
    {
      memset(&v24, 170, sizeof(v24));
      if ((*(char *)(a1 + 79) & 0x80000000) == 0)
      {
LABEL_10:
        v24 = *(std::string *)(a1 + 56);
LABEL_15:
        v21 = v3;
        v22 = v5;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__p, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
        else
          __p = v24;
        v12 = operator new(0x38uLL);
        v12[1] = 0;
        v12[2] = 0;
        *v12 = &unk_1E4152DF0;
        v14 = v21;
        v13 = v22;
        v21 = 0;
        v22 = 0;
        v25[0] = __p.__r_.__value_.__l.__size_;
        v15 = __p.__r_.__value_.__r.__words[0];
        *(_QWORD *)((char *)v25 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
        v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        memset(&__p, 0, sizeof(__p));
        v12[6] = 0;
        v17 = operator new(0x30uLL);
        *v17 = &off_1E4152E40;
        v17[1] = v14;
        v17[2] = v13;
        v17[3] = v15;
        v17[4] = v25[0];
        *(_QWORD *)((char *)v17 + 39) = *(_QWORD *)((char *)v25 + 7);
        *((_BYTE *)v17 + 47) = v16;
        v12[6] = v17;
        v18 = *(std::__shared_weak_count **)(a1 + 296);
        *(_QWORD *)(a1 + 288) = v12 + 3;
        *(_QWORD *)(a1 + 296) = v12;
        if (!v18)
          goto LABEL_24;
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_26;
        }
        else
        {
LABEL_24:
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_26:
            if (v22)
              std::__shared_weak_count::__release_weak(v22);
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
            if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v24.__r_.__value_.__l.__data_);
            std::__shared_weak_count::__release_weak(v5);
            return;
          }
        }
        operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_26;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v5);
      memset(&v24, 170, sizeof(v24));
      if ((*(char *)(a1 + 79) & 0x80000000) == 0)
        goto LABEL_10;
    }
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)(a1 + 56), *(_QWORD *)(a1 + 64));
    goto LABEL_15;
  }
  v10 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
  {
    LOWORD(v21) = 0;
    _os_log_fault_impl(&dword_19E9C8000, v10, OS_LOG_TYPE_FAULT, "Attemping to create a QMI client on a device that does not support it!\n", (uint8_t *)&v21, 2u);
  }
}

void sub_19E9E37D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count *v20;

  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      std::__shared_weak_count::__release_weak(v20);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  std::__shared_weak_count::__release_weak(v20);
  _Unwind_Resume(a1);
}

uint64_t qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1}::~dict(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v2)
      return a1;
    goto LABEL_3;
  }
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
LABEL_3:
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__shared_ptr_emplace<std::function<void ()(xpc::dict)>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E4152DF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::function<void ()(xpc::dict)>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E4152DF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<std::function<void ()(xpc::dict)>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 24;
  result = *(_QWORD *)(a1 + 48);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t std::__function::__func<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1},std::allocator<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1}>,void ()(xpc::dict)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = &off_1E4152E40;
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2)
      return a1;
    goto LABEL_3;
  }
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
LABEL_3:
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1},std::allocator<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1}>,void ()(xpc::dict)>::~__func(void **__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_1E4152E40;
  if (*((char *)__p + 47) < 0)
  {
    operator delete(__p[3]);
    v2 = (std::__shared_weak_count *)__p[2];
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
LABEL_3:
    std::__shared_weak_count::__release_weak(v2);
LABEL_4:
  operator delete(__p);
}

std::string *std::__function::__func<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1},std::allocator<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1}>,void ()(xpc::dict)>::__clone(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  std::string::size_type v4;
  std::string::size_type v5;
  unint64_t *v6;
  unint64_t v7;
  std::string *v8;

  v2 = (std::string *)operator new(0x30uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v2->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E4152E40;
  v2->__r_.__value_.__l.__size_ = v5;
  v2->__r_.__value_.__r.__words[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = v2 + 1;
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 24);
    v3[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 40);
  }
  return v3;
}

void sub_19E9E3A78(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1},std::allocator<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1}>,void ()(xpc::dict)>::__clone(uint64_t a1, std::string *a2)
{
  std::string::size_type v2;
  std::string::size_type v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  a2->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E4152E40;
  a2->__r_.__value_.__l.__size_ = v3;
  a2->__r_.__value_.__r.__words[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  if (*(char *)(a1 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2 + 1, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    v6 = *(_OWORD *)(a1 + 24);
    a2[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 40);
    *(_OWORD *)&a2[1].__r_.__value_.__l.__data_ = v6;
  }
}

void sub_19E9E3B18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1},std::allocator<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1}>,void ()(xpc::dict)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2)
      return;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
LABEL_3:
    std::__shared_weak_count::__release_weak(v2);
}

void std::__function::__func<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1},std::allocator<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1}>,void ()(xpc::dict)>::destroy_deallocate(void **__p)
{
  std::__shared_weak_count *v2;

  if (*((char *)__p + 47) < 0)
  {
    operator delete(__p[3]);
    v2 = (std::__shared_weak_count *)__p[2];
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
LABEL_3:
    std::__shared_weak_count::__release_weak(v2);
LABEL_4:
  operator delete(__p);
}

void std::__function::__func<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1},std::allocator<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1}>,void ()(xpc::dict)>::operator()(uint64_t a1, xpc_object_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  xpc_object_t object;

  object = *a2;
  *a2 = xpc_null_create();
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)(a1 + 8);
      if (v6)
        qmi::Client::State::handleClientMessage_sync(v6, &object);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  xpc_release(object);
}

uint64_t std::__function::__func<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1},std::allocator<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1}>,void ()(xpc::dict)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN3qmi6Client10LocalState4initEvENK3$_0clEvEUlN3xpc4dictEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN3qmi6Client10LocalState4initEvENK3$_0clEvEUlN3xpc4dictEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN3qmi6Client10LocalState4initEvENK3$_0clEvEUlN3xpc4dictEE_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN3qmi6Client10LocalState4initEvENK3$_0clEvEUlN3xpc4dictEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1},std::allocator<qmi::Client::LocalState::init(void)::$_0::operator() const(void)::{lambda(xpc::dict)#1}>,void ()(xpc::dict)>::target_type()
{
}

void ___ZNK3ctu20SharedSynchronizableIN3qmi6Client5StateEE20execute_wrapped_syncIZNS2_10LocalState4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1)
{
  qmi::Client::LocalState::init(void)::$_0::operator()(**(_QWORD **)(a1 + 40));
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  void *v1;

  std::exception::~exception(this);
  operator delete(v1);
}

void std::__shared_ptr_emplace<std::function<void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E4152F20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::function<void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E4152F20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<std::function<void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 24;
  result = *(_QWORD *)(a1 + 48);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

_QWORD *std::__function::__func<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0,std::allocator<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0>,void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E4152F70;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0,std::allocator<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0>,void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>::~__func(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_1E4152F70;
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

_QWORD *std::__function::__func<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0,std::allocator<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0>,void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E4152F70;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t std::__function::__func<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0,std::allocator<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0>,void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_1E4152F70;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void std::__function::__func<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0,std::allocator<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0>,void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0,std::allocator<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0>,void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0,std::allocator<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0>,void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>::operator()(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *p_shared_owners;
  NSObject *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_21;
  v6 = std::__shared_weak_count::lock(v5);
  if (!v6)
    goto LABEL_21;
  v7 = v6;
  v8 = *(_QWORD **)(a1 + 8);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 16);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v13 = __ldxr(p_shared_weak_owners);
      while (__stxr(v13 + 1, p_shared_weak_owners));
    }
    v14 = (std::__shared_weak_count *)v8[2];
    if (!v14 || (v15 = v8[1], (v16 = std::__shared_weak_count::lock(v14)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v17 = v16;
    v18 = operator new(0x20uLL);
    *v18 = v8;
    v18[1] = v9;
    v18[2] = v4;
    v18[3] = v3;
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    v20 = v8[3];
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
    v22 = operator new(0x18uLL);
    *v22 = v18;
    v22[1] = v15;
    v22[2] = v17;
    dispatch_async_f(v20, v22, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0::operator() const(std::weak_ptr<std::function<void ()(xpc::dict)>>)::{lambda(void)#1}>(qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0::operator() const(std::weak_ptr<std::function<void ()(xpc::dict)>>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0::operator() const(std::weak_ptr<std::function<void ()(xpc::dict)>>)::{lambda(void)#1},std::default_delete<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0::operator() const(std::weak_ptr<std::function<void ()(xpc::dict)>>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v24 = (unint64_t *)&v7->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v3)
      goto LABEL_22;
  }
  else
  {
LABEL_21:
    if (v3)
LABEL_22:
      std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t std::__function::__func<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0,std::allocator<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0>,void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3qmi6Client10LocalState23sendConnectMessage_syncEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3qmi6Client10LocalState23sendConnectMessage_syncEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3qmi6Client10LocalState23sendConnectMessage_syncEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3qmi6Client10LocalState23sendConnectMessage_syncEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0,std::allocator<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0>,void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>::target_type()
{
}

void dispatch::async<void ctu::SharedSynchronizable<qmi::Client::State>::execute_wrapped<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0::operator() const(std::weak_ptr<std::function<void ()(xpc::dict)>>)::{lambda(void)#1}>(qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0::operator() const(std::weak_ptr<std::function<void ()(xpc::dict)>>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0::operator() const(std::weak_ptr<std::function<void ()(xpc::dict)>>)::{lambda(void)#1},std::default_delete<qmi::Client::LocalState::sendConnectMessage_sync(void)::$_0::operator() const(std::weak_ptr<std::function<void ()(xpc::dict)>>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  const void *v6;
  void *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  xpc_object_t object;

  v2 = *a1;
  v3 = *(std::__shared_weak_count **)(*a1 + 8);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = v4;
      v6 = *(const void **)v2;
      if (*(_QWORD *)v2)
      {
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v9 = __ldxr(p_shared_owners);
          while (__stxr(v9 + 1, p_shared_owners));
          v10 = *(_QWORD *)(v2 + 16);
          v11 = *(std::__shared_weak_count **)(v2 + 24);
          if (v11)
          {
            p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
            do
              v13 = __ldxr(p_shared_weak_owners);
            while (__stxr(v13 + 1, p_shared_weak_owners));
            do
              v14 = __ldxr(p_shared_weak_owners);
            while (__stxr(v14 + 1, p_shared_weak_owners));
          }
          v15 = (std::__shared_weak_count *)*((_QWORD *)v7 + 41);
          *((_QWORD *)v7 + 40) = v10;
          *((_QWORD *)v7 + 41) = v11;
          if (v15)
            std::__shared_weak_count::__release_weak(v15);
          if (v11)
            std::__shared_weak_count::__release_weak(v11);
          object = xpc_null_create();
          (*(void (**)(const void *, xpc_object_t *))(*(_QWORD *)v6 + 24))(v6, &object);
          xpc_release(object);
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
      }
      v17 = (unint64_t *)&v5->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  v19 = *(std::__shared_weak_count **)(v2 + 24);
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  v20 = *(std::__shared_weak_count **)(v2 + 8);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  operator delete((void *)v2);
  v21 = (std::__shared_weak_count *)a1[2];
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  operator delete(a1);
}

void sub_19E9E427C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  xpc_release(object);
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 - 1, v13));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  do
    v16 = __ldaxr(v13);
  while (__stlxr(v16 - 1, v13));
  if (v16)
  {
    v17 = (std::__shared_weak_count *)v11[3];
    if (!v17)
      goto LABEL_8;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    v17 = (std::__shared_weak_count *)v11[3];
    if (!v17)
    {
LABEL_8:
      v18 = (std::__shared_weak_count *)v11[1];
      if (!v18)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  std::__shared_weak_count::__release_weak(v17);
  v18 = (std::__shared_weak_count *)v11[1];
  if (!v18)
  {
LABEL_9:
    operator delete(v11);
    v19 = (std::__shared_weak_count *)v10[2];
    if (!v19)
      goto LABEL_18;
    goto LABEL_14;
  }
LABEL_13:
  std::__shared_weak_count::__release_weak(v18);
  operator delete(v11);
  v19 = (std::__shared_weak_count *)v10[2];
  if (!v19)
    goto LABEL_18;
LABEL_14:
  p_shared_owners = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_18:
  operator delete(v10);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<BBServerConnection>::execute_wrapped<void QMIServerConnection::acceptLocalMessage<qmi::Client::State>(xpc::dict const&,std::weak_ptr<qmi::Client::State>,std::weak_ptr<std::function<void ()(xpc::dict)>>,std::weak_ptr<std::function<void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>>)::{lambda(void)#1}>(qmi::Client::State&&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Client::State>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  xpc_object_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  _QWORD *v17;
  xpc_object_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t **v27;

  v2 = *a1;
  v4 = **a1;
  v3 = (xpc_object_t)(*a1)[1];
  if (v3)
  {
    xpc_retain(v3);
    v5 = v2[3];
    v26 = v2[2];
    v27 = a1;
    if (!v5)
      goto LABEL_7;
  }
  else
  {
    v3 = xpc_null_create();
    v5 = v2[3];
    v26 = v2[2];
    v27 = a1;
    if (!v5)
      goto LABEL_7;
  }
  v6 = (unint64_t *)(v5 + 16);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
LABEL_7:
  v9 = v2[4];
  v8 = v2[5];
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v13 = v2[6];
  v12 = v2[7];
  if (v12)
  {
    v14 = (unint64_t *)(v12 + 16);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v25 = *(NSObject **)(v4 + 72);
  v16 = *(NSObject **)(v4 + 24);
  v17 = operator new(0x40uLL);
  *v17 = v4;
  v17[1] = v3;
  v18 = xpc_null_create();
  v17[2] = v26;
  v17[3] = v5;
  v17[4] = v9;
  v17[5] = v8;
  v17[6] = v13;
  v17[7] = v12;
  dispatch_group_notify_f(v25, v16, v17, (dispatch_function_t)dispatch::detail::group_notify<void QMIServerConnection::acceptLocalMessage<qmi::Client::State>(xpc::dict const&,std::weak_ptr<qmi::Client::State>,std::weak_ptr<std::function<void ()(xpc::dict)>>,std::weak_ptr<std::function<void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,qmi::Client::State&&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  xpc_release(v18);
  v19 = (std::__shared_weak_count *)v2[7];
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  v20 = (std::__shared_weak_count *)v2[5];
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  v21 = (std::__shared_weak_count *)v2[3];
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v22 = (std::__shared_weak_count *)v27[2];
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  operator delete(v27);
}

void sub_19E9E4528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *__p, uint64_t a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  void QMIServerConnection::acceptLocalMessage<qmi::Client::State>(xpc::dict const&,std::weak_ptr<qmi::Client::State>,std::weak_ptr<std::function<void ()(xpc::dict)>>,std::weak_ptr<std::function<void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::~((uint64_t)&a13);
  std::unique_ptr<void QMIServerConnection::acceptLocalMessage<qmi::Client::State>(xpc::dict const&,std::weak_ptr<qmi::Client::State>,std::weak_ptr<std::function<void ()(xpc::dict)>>,std::weak_ptr<std::function<void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>>)::{lambda(void)#1},std::default_delete<void QMIServerConnection::acceptLocalMessage<qmi::Client::State>(xpc::dict const&,std::weak_ptr<qmi::Client::State>,std::weak_ptr<std::function<void ()(xpc::dict)>>,std::weak_ptr<std::function<void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>>)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](&a12);
  v16 = (std::__shared_weak_count *)__p[2];
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t void QMIServerConnection::acceptLocalMessage<qmi::Client::State>(xpc::dict const&,std::weak_ptr<qmi::Client::State>,std::weak_ptr<std::function<void ()(xpc::dict)>>,std::weak_ptr<std::function<void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::~(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = *(std::__shared_weak_count **)(a1 + 24);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

void dispatch::detail::group_notify<void QMIServerConnection::acceptLocalMessage<qmi::Client::State>(xpc::dict const&,std::weak_ptr<qmi::Client::State>,std::weak_ptr<std::function<void ()(xpc::dict)>>,std::weak_ptr<std::function<void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,qmi::Client::State&&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char v15;
  xpc_object_t v16;
  xpc_object_t v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  _QWORD block[5];
  std::__shared_weak_count *v31;
  xpc_object_t object;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;

  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    v3 = *a1;
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[2];
      if (v6)
      {
        v7 = *(uint64_t **)(v3 + 48);
        if (v7 == *(uint64_t **)(v3 + 56))
        {
LABEL_17:
          v16 = xpc_string_create("not accepted");
          if (!v16)
            v16 = xpc_null_create();
          xpc_dictionary_set_value((xpc_object_t)a1[1], "error", v16);
          v17 = xpc_null_create();
          xpc_release(v16);
          xpc_release(v17);
          v18 = *(NSObject **)(v6 + 24);
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 1174405120;
          block[2] = ___ZZZN19QMIServerConnection18acceptLocalMessageIN3qmi6Client5StateEEEvRKN3xpc4dictENSt3__18weak_ptrIT_EENS9_INS8_8functionIFvS5_EEEEENS9_INSC_IFvSF_EEEEEENKUlvE_clEvENKUlvE_clEv_block_invoke;
          block[3] = &__block_descriptor_tmp_40;
          block[4] = v6;
          v31 = v5;
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v20 = __ldxr(p_shared_owners);
          while (__stxr(v20 + 1, p_shared_owners));
          v21 = (void *)a1[1];
          object = v21;
          if (v21)
            xpc_retain(v21);
          else
            object = xpc_null_create();
          dispatch_async(v18, block);
          xpc_release(object);
          object = 0;
          v22 = v31;
          if (v31)
          {
            v23 = (unint64_t *)&v31->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
        }
        else
        {
          while (1)
          {
            v8 = *v7;
            v9 = (std::__shared_weak_count *)a1[7];
            v35 = a1[6];
            v36 = v9;
            if (v9)
            {
              p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
              do
                v11 = __ldxr(p_shared_weak_owners);
              while (__stxr(v11 + 1, p_shared_weak_owners));
            }
            v12 = (std::__shared_weak_count *)a1[5];
            v33 = a1[4];
            v34 = v12;
            if (v12)
            {
              v13 = (unint64_t *)&v12->__shared_weak_owners_;
              do
                v14 = __ldxr(v13);
              while (__stxr(v14 + 1, v13));
            }
            v15 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)v8 + 24))(v8, a1 + 1, &v35, &v33);
            if (v34)
              std::__shared_weak_count::__release_weak(v34);
            if (v36)
              std::__shared_weak_count::__release_weak(v36);
            if ((v15 & 1) != 0)
              break;
            v7 += 2;
            if (v7 == *(uint64_t **)(v3 + 56))
              goto LABEL_17;
          }
        }
      }
      v25 = (unint64_t *)&v5->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  v27 = (std::__shared_weak_count *)a1[7];
  if (v27)
    std::__shared_weak_count::__release_weak(v27);
  v28 = (std::__shared_weak_count *)a1[5];
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  v29 = (std::__shared_weak_count *)a1[3];
  if (v29)
    std::__shared_weak_count::__release_weak(v29);
  xpc_release((xpc_object_t)a1[1]);
  operator delete(a1);
}

void sub_19E9E485C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20)
{
  _QWORD *v20;
  std::__shared_weak_count *v21;
  xpc_object_t *v22;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;

  if (a18)
    std::__shared_weak_count::__release_weak(a18);
  if (a20)
    std::__shared_weak_count::__release_weak(a20);
  p_shared_owners = (unint64_t *)&v21->__shared_owners_;
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (v25)
  {
    v26 = (std::__shared_weak_count *)v20[7];
    if (!v26)
      goto LABEL_9;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    v26 = (std::__shared_weak_count *)v20[7];
    if (!v26)
    {
LABEL_9:
      v27 = (std::__shared_weak_count *)v20[5];
      if (!v27)
        goto LABEL_10;
      goto LABEL_15;
    }
  }
  std::__shared_weak_count::__release_weak(v26);
  v27 = (std::__shared_weak_count *)v20[5];
  if (!v27)
  {
LABEL_10:
    v28 = (std::__shared_weak_count *)v20[3];
    if (!v28)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_15:
  std::__shared_weak_count::__release_weak(v27);
  v28 = (std::__shared_weak_count *)v20[3];
  if (!v28)
  {
LABEL_12:
    xpc_release(*v22);
    operator delete(v20);
    _Unwind_Resume(a1);
  }
LABEL_11:
  std::__shared_weak_count::__release_weak(v28);
  goto LABEL_12;
}

uint64_t ___ZZZN19QMIServerConnection18acceptLocalMessageIN3qmi6Client5StateEEEvRKN3xpc4dictENSt3__18weak_ptrIT_EENS9_INS8_8functionIFvS5_EEEEENS9_INSC_IFvSF_EEEEEENKUlvE_clEvENKUlvE_clEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = xpc_null_create();
  qmi::Client::State::handleClientMessage(v2, v4, (xpc_object_t *)(a1 + 48));
  xpc_release(v3);
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 0);
}

void sub_19E9E495C(_Unwind_Exception *a1)
{
  void *v1;

  xpc_release(v1);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c45_ZTSNSt3__110shared_ptrIN3qmi6Client5StateEEE48c15_ZTSN3xpc4dictE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *v6;
  xpc_object_t result;

  v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (void *)a2[6];
  a1[6] = v6;
  if (v6)
    return xpc_retain(v6);
  result = xpc_null_create();
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c45_ZTSNSt3__110shared_ptrIN3qmi6Client5StateEEE48c15_ZTSN3xpc4dictE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t *std::unique_ptr<void QMIServerConnection::acceptLocalMessage<qmi::Client::State>(xpc::dict const&,std::weak_ptr<qmi::Client::State>,std::weak_ptr<std::function<void ()(xpc::dict)>>,std::weak_ptr<std::function<void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>>)::{lambda(void)#1},std::default_delete<void QMIServerConnection::acceptLocalMessage<qmi::Client::State>(xpc::dict const&,std::weak_ptr<qmi::Client::State>,std::weak_ptr<std::function<void ()(xpc::dict)>>,std::weak_ptr<std::function<void ()(std::weak_ptr<std::function<void ()(xpc::dict)>>)>>)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 56);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    v4 = *(std::__shared_weak_count **)(v2 + 40);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    v5 = *(std::__shared_weak_count **)(v2 + 24);
    if (v5)
      std::__shared_weak_count::__release_weak(v5);
    xpc_release(*(xpc_object_t *)(v2 + 8));
    operator delete((void *)v2);
  }
  return a1;
}

_QWORD *qmi::EurTransport::EurTransport(_QWORD *this)
{
  *this = &unk_1E4153060;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  this[7] = 0;
  this[11] = 0;
  return this;
}

uint64_t qmi::EurTransport::handleServerError(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 88);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

_QWORD *qmi::EurTransport::setMessageHandler(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)(a1 + 32);
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v7 = v6;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v6);
    }
    else
    {
      v7 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v7 = 0;
  }
  std::__function::__value_func<void ()(xpc::dict)>::swap[abi:ne180100](v6, v2);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

_QWORD *qmi::EurTransport::setServerErrorHandler(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)(a1 + 64);
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v7 = v6;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v6);
    }
    else
    {
      v7 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v7 = 0;
  }
  std::__function::__value_func<void ()(xpc::object const&)>::swap[abi:ne180100](v6, v2);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void qmi::EurTransport::setQueue(uint64_t a1, dispatch_object_t *a2)
{
  dispatch_object_t v3;
  NSObject *v4;

  v3 = *a2;
  if (*a2)
    dispatch_retain(*a2);
  v4 = *(NSObject **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v3;
  if (v4)
    dispatch_release(v4);
}

qmi::EurTransportXPC *qmi::EurTransportXPC::EurTransportXPC(qmi::EurTransportXPC *this)
{
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &off_1E41530A0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 12) = xpc_null_create();
  return this;
}

{
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &off_1E41530A0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 12) = xpc_null_create();
  return this;
}

void qmi::EurTransportXPC::init_sync(_QWORD *a1, xpc_object_t *a2, dispatch_object_t *a3)
{
  NSObject *v6;
  NSObject *v7;
  xpc_object_t v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  _xpc_connection_s **v14;
  _xpc_connection_s *v15;
  unint64_t *v16;
  unint64_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  _QWORD handler[6];
  std::__shared_weak_count *v21;
  _xpc_connection_s *v22;
  xpc_object_t object;

  v6 = *a3;
  if (*a3)
  {
    dispatch_retain(*a3);
    dispatch_retain(v6);
  }
  v7 = a1[3];
  a1[3] = v6;
  if (v7)
    dispatch_release(v7);
  if (v6)
    dispatch_release(v6);
  v8 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v9 = *a3;
    if (!v9)
      goto LABEL_10;
    goto LABEL_9;
  }
  v8 = xpc_null_create();
  v9 = *a3;
  if (v9)
LABEL_9:
    dispatch_retain(v9);
LABEL_10:
  v11 = a1[1];
  v10 = (std::__shared_weak_count *)a1[2];
  if (v10)
  {
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
  }
  object = v8;
  if (v8)
    xpc_retain(v8);
  else
    object = xpc_null_create();
  v14 = (_xpc_connection_s **)(a1 + 12);
  ctu::XpcClientHelper::setServer_internal();
  xpc_release(object);
  object = 0;
  if (MEMORY[0x1A1AEB9A8](*v14) == MEMORY[0x1E0C812E0])
  {
    v15 = *v14;
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 1174405120;
    handler[2] = ___ZN3ctu15XpcClientHelper9setServerIN3qmi12EurTransportEEEvN3xpc10connectionEN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke;
    handler[3] = &__block_descriptor_tmp_1;
    handler[4] = v14;
    handler[5] = v11;
    v21 = v10;
    if (v10)
    {
      v16 = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v22 = v15;
    xpc_connection_set_event_handler(v15, handler);
    xpc_connection_set_target_queue(v15, v9);
    xpc_connection_resume(v15);
    if (v21)
      std::__shared_weak_count::__release_weak(v21);
  }
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  if (v9)
    dispatch_release(v9);
  xpc_release(v8);
  v18 = xpc_dictionary_create(0, 0, 0);
  if (v18 || (v18 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A1AEB9A8](v18) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v18);
      v19 = v18;
    }
    else
    {
      v19 = xpc_null_create();
    }
  }
  else
  {
    v19 = xpc_null_create();
    v18 = 0;
  }
  xpc_release(v18);
  xpc_connection_send_message((xpc_connection_t)*a2, v19);
  xpc_release(v19);
}

void sub_19E9E4F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, xpc_object_t object)
{
  void *v18;
  NSObject *v19;
  std::__shared_weak_count *v20;

  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  if (v19)
    dispatch_release(v19);
  xpc_release(v18);
  _Unwind_Resume(a1);
}

uint64_t qmi::EurTransportXPC::clearServer(qmi::EurTransportXPC *this)
{
  return ctu::XpcClientHelper::setServer();
}

void qmi::EurTransportXPC::sendMessageWithReply(uint64_t a1, xpc_object_t *a2, xpc_handler_t handler)
{
  xpc_connection_send_message_with_reply(*(xpc_connection_t *)(a1 + 96), *a2, *(dispatch_queue_t *)(a1 + 24), handler);
}

double qmi::EurTransportLocal::EurTransportLocal(qmi::EurTransportLocal *this)
{
  double result;

  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &off_1E41530E0;
  *((_QWORD *)this + 1) = 0;
  result = 0.0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  return result;
}

{
  double result;

  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &off_1E41530E0;
  *((_QWORD *)this + 1) = 0;
  result = 0.0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  return result;
}

void qmi::EurTransportLocal::init_sync(_QWORD *a1, uint64_t a2, dispatch_object_t *a3)
{
  NSObject *v4;
  NSObject *v5;
  xpc_object_t v6;
  xpc_object_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  xpc_object_t object;

  v4 = *a3;
  if (*a3)
  {
    dispatch_retain(*a3);
    dispatch_retain(v4);
  }
  v5 = a1[3];
  a1[3] = v4;
  if (v5)
    dispatch_release(v5);
  if (v4)
    dispatch_release(v4);
  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6 || (v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1A1AEB9A8](v6) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v6);
      v7 = v6;
    }
    else
    {
      v7 = xpc_null_create();
    }
  }
  else
  {
    v7 = xpc_null_create();
    v6 = 0;
  }
  xpc_release(v6);
  object = v7;
  if (v7)
    xpc_retain(v7);
  else
    object = xpc_null_create();
  (*(void (**)(_QWORD *, xpc_object_t *))(*a1 + 24))(a1, &object);
  xpc_release(object);
  object = 0;
  v8 = operator new(0x38uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &unk_1E4152DF0;
  v9 = v8 + 3;
  v10 = a1[7];
  if (v10)
  {
    if ((_QWORD *)v10 == a1 + 4)
    {
      v8[6] = v9;
      (*(void (**)(_QWORD *, _QWORD *))(a1[4] + 24))(a1 + 4, v9);
      goto LABEL_21;
    }
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  }
  v8[6] = v10;
LABEL_21:
  v11 = (std::__shared_weak_count *)a1[17];
  a1[16] = v9;
  a1[17] = v8;
  if (!v11)
    goto LABEL_25;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    v14 = (std::__shared_weak_count *)a1[15];
    if (!v14)
      goto LABEL_39;
  }
  else
  {
LABEL_25:
    v14 = (std::__shared_weak_count *)a1[15];
    if (!v14)
      goto LABEL_39;
  }
  v15 = std::__shared_weak_count::lock(v14);
  v27 = v15;
  if (v15)
  {
    v16 = v15;
    v17 = a1[14];
    v26 = v17;
    if (v17)
    {
      v18 = (std::__shared_weak_count *)a1[17];
      v24 = a1[16];
      v25 = v18;
      if (v18)
      {
        p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
        do
          v20 = __ldxr(p_shared_weak_owners);
        while (__stxr(v20 + 1, p_shared_weak_owners));
      }
      v21 = *(_QWORD *)(v17 + 24);
      if (!v21)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v21 + 48))(v21, &v24);
      if (v25)
        std::__shared_weak_count::__release_weak(v25);
    }
    v22 = (unint64_t *)&v16->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
LABEL_39:
  xpc_release(v7);
}

void sub_19E9E530C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char a12, uint64_t a13, xpc_object_t object)
{
  void *v14;

  if (a11)
    std::__shared_weak_count::__release_weak(a11);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  xpc_release(v14);
  _Unwind_Resume(a1);
}

void qmi::EurTransportLocal::sendMessageWithReply(uint64_t a1, void **a2)
{
  void *v3;
  xpc_object_t object;

  v3 = *a2;
  object = v3;
  if (v3)
    xpc_retain(v3);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, xpc_object_t *))(*(_QWORD *)a1 + 24))(a1, &object);
  xpc_release(object);
}

void sub_19E9E53E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void qmi::EurTransportLocal::setSendToClient(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;

  v3 = *a2;
  v2 = a2[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v3;
  *(_QWORD *)(a1 + 104) = v2;
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void qmi::EurTransportLocal::setProxyMessenger(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;

  v3 = *a2;
  v2 = a2[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a1 + 120);
  *(_QWORD *)(a1 + 112) = v3;
  *(_QWORD *)(a1 + 120) = v2;
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void qmi::EurTransportLocal::shutdown(qmi::EurTransportLocal *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

_QWORD *std::__function::__value_func<void ()(xpc::dict)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 170, 24);
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_19E9E5668(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__value_func<void ()(xpc::object const&)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 170, 24);
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_19E9E5814(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__18weak_ptrIN3qmi12EurTransportEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__18weak_ptrIN3qmi12EurTransportEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

_QWORD *BBServerConnection::BBServerConnection(_QWORD *a1, uint64_t a2)
{
  const char *v3;
  NSObject *v4;
  _BYTE v6[16];
  _BYTE v7[8];

  if (*(char *)(a2 + 23) >= 0)
    v3 = (const char *)a2;
  else
    v3 = *(const char **)a2;
  v4 = dispatch_queue_create(v3, 0);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v6, "com.apple.telephony.bb", "server");
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = v4;
  if (v4)
    dispatch_retain(v4);
  a1[4] = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 5), (const ctu::OsLogLogger *)v7);
  MEMORY[0x1A1AEAED4](v7);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v6);
  if (v4)
    dispatch_release(v4);
  *a1 = off_1E41531B8;
  return a1;
}

void BBServerConnection::~BBServerConnection(BBServerConnection *this)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  MEMORY[0x1A1AEAED4]((char *)this + 40);
  v2 = *((_QWORD *)this + 4);
  if (v2)
    dispatch_release(v2);
  v3 = *((_QWORD *)this + 3);
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void QMIServerConnection::QMIServerConnection(QMIServerConnection *this)
{
  xpc_object_t v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  char __p[20];
  char v7;

  v7 = 19;
  strcpy(__p, "QMIServerConnection");
  BBServerConnection::BBServerConnection(this, (uint64_t)__p);
  if (v7 < 0)
    operator delete(*(void **)__p);
  *(_QWORD *)this = off_1E41531E8;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = 0;
  v2 = xpc_null_create();
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 11) = v2;
  *((_BYTE *)this + 112) = 0;
  v3 = dispatch_group_create();
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v3;
  if (v4)
  {
    dispatch_release(v4);
    v3 = *((_QWORD *)this + 9);
  }
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(v3);
  }
  v5 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v3;
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
}

void sub_19E9E5A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void QMIServerConnection::~QMIServerConnection(xpc_connection_t *this)
{
  _xpc_connection_s *v2;
  xpc_object_t v3;
  xpc_connection_t v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  _xpc_connection_s *v12;
  xpc_connection_t v13;
  xpc_connection_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  NSObject *v19;
  std::__shared_weak_count *v20;
  uint8_t v21[16];

  *this = (xpc_connection_t)off_1E41531E8;
  if (MEMORY[0x1A1AEB9A8](this[11]) == MEMORY[0x1E0C812E0])
  {
    xpc_connection_cancel(this[11]);
    v2 = (_xpc_connection_s *)xpc_null_create();
    v3 = xpc_null_create();
    v4 = this[11];
    this[11] = v2;
    xpc_release(v4);
    xpc_release(v3);
    v5 = this[5];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_19E9C8000, v5, OS_LOG_TYPE_DEFAULT, "#I XPC Listener: shutdown!", v21, 2u);
    }
  }
  v6 = (std::__shared_weak_count *)this[13];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  xpc_release(this[11]);
  this[11] = 0;
  v9 = this[10];
  if (v9)
  {
    dispatch_group_leave(v9);
    v10 = this[10];
    if (v10)
      dispatch_release(v10);
  }
  v11 = this[9];
  if (v11)
    dispatch_release(v11);
  v12 = this[6];
  if (v12)
  {
    v13 = this[7];
    v14 = this[6];
    if (v13 != v12)
    {
      do
      {
        v15 = (std::__shared_weak_count *)*((_QWORD *)v13 - 1);
        if (v15)
        {
          v16 = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v13 = (xpc_connection_t)((char *)v13 - 16);
      }
      while (v13 != v12);
      v14 = this[6];
    }
    this[7] = v12;
    operator delete(v14);
  }
  MEMORY[0x1A1AEAED4](this + 5);
  v18 = this[4];
  if (v18)
    dispatch_release(v18);
  v19 = this[3];
  if (v19)
    dispatch_release(v19);
  v20 = (std::__shared_weak_count *)this[2];
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
}

{
  void *v1;

  QMIServerConnection::~QMIServerConnection(this);
  operator delete(v1);
}

uint64_t QMIServerConnection::checkReady(QMIServerConnection *this)
{
  return *((unsigned __int8 *)this + 112);
}

void QMIServerConnection::init(_QWORD *a1, uint64_t a2, xpc_object_t *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  xpc_object_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  xpc_object_t v22;
  NSObject *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v5 = *(_QWORD **)a2;
  v6 = *(_QWORD **)(a2 + 8);
  v7 = (int64_t)v6 - *(_QWORD *)a2;
  if (v6 == *(_QWORD **)a2)
  {
    v11 = 0;
    v15 = 0;
    v10 = 0;
    v16 = *a3;
    if (*a3)
      goto LABEL_10;
LABEL_13:
    v16 = xpc_null_create();
    v17 = (std::__shared_weak_count *)a1[2];
    if (!v17)
      goto LABEL_22;
    goto LABEL_14;
  }
  if (v7 < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v8 = v7 >> 4;
  v9 = operator new(v7);
  v10 = v9;
  v11 = v9;
  do
  {
    v12 = v5[1];
    *v11 = *v5;
    v11[1] = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v5 += 2;
    v11 += 2;
  }
  while (v5 != v6);
  v15 = (char *)&v9[2 * v8];
  v16 = *a3;
  if (!*a3)
    goto LABEL_13;
LABEL_10:
  xpc_retain(v16);
  v17 = (std::__shared_weak_count *)a1[2];
  if (!v17)
LABEL_22:
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_14:
  v18 = a1[1];
  v19 = std::__shared_weak_count::lock(v17);
  if (!v19)
    goto LABEL_22;
  v20 = v19;
  v21 = operator new(0x28uLL);
  *v21 = a1;
  v21[1] = v10;
  v21[2] = v11;
  v21[3] = v15;
  v21[4] = v16;
  v22 = xpc_null_create();
  v23 = a1[3];
  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v25 = __ldxr(p_shared_owners);
  while (__stxr(v25 + 1, p_shared_owners));
  v26 = operator new(0x18uLL);
  *v26 = v21;
  v26[1] = v18;
  v26[2] = v20;
  dispatch_async_f(v23, v26, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<BBServerConnection>::execute_wrapped<QMIServerConnection::init(std::vector<std::shared_ptr<qmi::ServerAccepter>> const&,xpc::connection const&)::$_0>(QMIServerConnection::init(std::vector<std::shared_ptr<qmi::ServerAccepter>> const&,xpc::connection const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIServerConnection::init(std::vector<std::shared_ptr<qmi::ServerAccepter>> const&,xpc::connection const&)::$_0,std::default_delete<QMIServerConnection::init(std::vector<std::shared_ptr<qmi::ServerAccepter>> const&,xpc::connection const&)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  xpc_release(v22);
}

void QMIServerConnection::shutdown(QMIServerConnection *this)
{
  NSObject *v1;
  char *v2;
  QMIServerConnection *v3;
  _QWORD block[6];

  v3 = this;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI18BBServerConnectionE20execute_wrapped_syncIZN19QMIServerConnection8shutdownEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
  block[3] = &__block_descriptor_tmp_2;
  block[4] = (char *)this + 8;
  block[5] = &v3;
  v2 = (char *)this + 24;
  v1 = *((_QWORD *)this + 3);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void QMIServerConnection::loadMappings_sync(capabilities::ipc *a1@<X0>, _QWORD *a2@<X1>, __CFDictionary **a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  std::string::size_type v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  unint64_t *v30;
  unint64_t v31;
  std::string::size_type size;
  std::string *v33;
  std::string::size_type v34;
  int v35;
  BOOL v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v41;
  __CFDictionary *v42;
  const __CFAllocator *v43;
  const __CFAllocator *v44;
  const __CFAllocator *v45;
  const __CFAllocator *v46;
  const __CFAllocator *v47;
  const __CFAllocator *v48;
  const __CFAllocator *v49;
  const __CFAllocator *v50;
  const __CFAllocator *v51;
  const __CFAllocator *v52;
  const __CFAllocator *v53;
  const __CFAllocator *v54;
  const __CFAllocator *v55;
  const __CFAllocator *v56;
  const __CFAllocator *v57;
  const __CFAllocator *v58;
  const __CFAllocator *v59;
  const __CFAllocator *v60;
  const __CFAllocator *v61;
  const __CFAllocator *v62;
  const __CFAllocator *v63;
  const __CFAllocator *v64;
  const __CFAllocator *v65;
  const __CFAllocator *v66;
  const __CFAllocator *v67;
  const __CFAllocator *v68;
  const __CFAllocator *v69;
  const __CFAllocator *v70;
  const __CFAllocator *v71;
  const __CFAllocator *v72;
  const __CFAllocator *v73;
  const __CFAllocator *v74;
  uint64_t v75;
  const __CFAllocator *v76;
  uint64_t v77;
  const __CFAllocator *v78;
  uint64_t v79;
  const __CFAllocator *v80;
  uint64_t v81;
  const __CFAllocator *v82;
  capabilities::ipc *v83;
  const __CFAllocator *v84;
  _QWORD *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  std::string::size_type v90;
  std::string *p_dst;
  uint64_t v92;
  const void **v93;
  const void *v94;
  uint64_t v95;
  uint64_t v96;
  std::string::size_type v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  __int128 v102;
  unint64_t *v103;
  unint64_t v104;
  int v105;
  __int128 v106;
  std::string::size_type v107;
  std::string *v108;
  uint64_t v109;
  const void **v110;
  const void *v111;
  uint64_t v112;
  uint64_t v113;
  std::string::size_type v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  __int128 v119;
  unint64_t *v120;
  unint64_t v121;
  int v122;
  __int128 v123;
  std::string::size_type v124;
  std::string *v125;
  uint64_t v126;
  const void **v127;
  const void *v128;
  uint64_t v129;
  uint64_t v130;
  std::string::size_type v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  __int128 v136;
  unint64_t *v137;
  unint64_t v138;
  int v139;
  _QWORD *v140;
  _QWORD *v141;
  CFTypeID v142;
  __CFDictionary **v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  std::string v147;
  std::string __dst;
  _BYTE v149[32];
  __int128 v150;
  __int128 v151;
  __int128 v152;
  void *__p[2];
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  unint64_t v165;
  __CFDictionary *v166;
  std::string v167;
  _DWORD v168[2];
  __int128 v169;
  uint64_t v170;
  std::string v171;
  std::string v172;

  *((_QWORD *)&v169 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v170 = 0x5AAAAAAAAAAAAAALL;
  *(_QWORD *)&v169 = 0xAAAA003278756D71;
  memset(v168, 170, 7);
  v5 = capabilities::ipc::supportsPCI(a1);
  if ((v5 & 1) != 0 || config::hw::watch((config::hw *)v5))
  {
    v6 = 0xAAAA003178756D71;
    if (SHIBYTE(v170) < 0)
      goto LABEL_9;
LABEL_7:
    HIBYTE(v170) = 12;
    v7 = (char *)&v169;
    goto LABEL_10;
  }
  if ((SHIBYTE(v170) & 0x80000000) == 0)
  {
    v6 = 0xAAAA003278756D71;
    goto LABEL_7;
  }
  v6 = 0xAAAA003278756D71;
LABEL_9:
  *((_QWORD *)&v169 + 1) = 12;
  v7 = (char *)v169;
LABEL_10:
  strcpy(v7, "qmux_control");
  v9 = a2 + 1;
  v8 = (_QWORD *)a2[1];
  memset(&v167, 170, sizeof(v167));
  if (v8)
  {
    do
    {
      v10 = v8;
      v8 = (_QWORD *)v8[1];
    }
    while (v8);
  }
  else
  {
    v11 = a2 + 1;
    do
    {
      v10 = (_QWORD *)v11[2];
      v36 = *v10 == (_QWORD)v11;
      v11 = v10;
    }
    while (v36);
  }
  v12 = v10[4];
  v13 = (std::__shared_weak_count *)v10[5];
  *(_QWORD *)v149 = v12;
  *(_QWORD *)&v149[8] = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  if (v12)
  {
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    if (*(char *)(v16 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v167, *(const std::string::value_type **)v16, *(_QWORD *)(v16 + 8));
    }
    else
    {
      v17 = *(_OWORD *)v16;
      v167.__r_.__value_.__r.__words[2] = *(_QWORD *)(v16 + 16);
      *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v17;
    }
  }
  else
  {
    *((_BYTE *)&v167.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&v167, "(empty QMux)");
  }
  if (!v13)
    goto LABEL_27;
  v18 = (unint64_t *)&v13->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    v145 = a2 + 1;
    if (v9 != (_QWORD *)*a2)
      goto LABEL_28;
  }
  else
  {
LABEL_27:
    v145 = a2 + 1;
    if (v9 != (_QWORD *)*a2)
    {
LABEL_28:
      v20 = v145;
      while (1)
      {
        v21 = (_QWORD *)*v20;
        v22 = v20;
        if (*v20)
        {
          do
          {
            v23 = v21;
            v21 = (_QWORD *)v21[1];
          }
          while (v21);
        }
        else
        {
          do
          {
            v23 = (_QWORD *)v22[2];
            v36 = *v23 == (_QWORD)v22;
            v22 = v23;
          }
          while (v36);
        }
        v24 = v23[4];
        v25 = (std::__shared_weak_count *)v23[5];
        v172.__r_.__value_.__r.__words[0] = v24;
        v172.__r_.__value_.__l.__size_ = (std::string::size_type)v25;
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        if (v24)
        {
          v28 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v24 + 40))(v24);
          if (*(char *)(v28 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v149, *(const std::string::value_type **)v28, *(_QWORD *)(v28 + 8));
          }
          else
          {
            v29 = *(_OWORD *)v28;
            *(_QWORD *)&v149[16] = *(_QWORD *)(v28 + 16);
            *(_OWORD *)v149 = v29;
          }
        }
        else
        {
          v149[23] = 12;
          strcpy(v149, "(empty QMux)");
        }
        if (v25)
        {
          v30 = (unint64_t *)&v25->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
            break;
        }
        if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_47;
LABEL_48:
        v167 = *(std::string *)v149;
        size = v149[23];
        if (v149[23] < 0)
          size = v167.__r_.__value_.__l.__size_;
        if (size == 12)
        {
          v33 = v149[23] >= 0 ? &v167 : (std::string *)v167.__r_.__value_.__r.__words[0];
          v34 = v33->__r_.__value_.__r.__words[0];
          v35 = v33->__r_.__value_.__r.__words[1];
          v36 = v34 == 0x6E6F635F78756D71 && v35 == 1819243124;
          if (v36)
          {
            v37 = (_QWORD *)*v20;
            if (*v20)
            {
              do
              {
                v38 = v37;
                v37 = (_QWORD *)v37[1];
              }
              while (v37);
            }
            else
            {
              do
              {
                v38 = (_QWORD *)v20[2];
                v36 = *v38 == (_QWORD)v20;
                v20 = v38;
              }
              while (v36);
            }
            v20 = v38;
            if (v38 != (_QWORD *)*a2)
              continue;
          }
        }
        goto LABEL_67;
      }
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_48;
LABEL_47:
      operator delete(v167.__r_.__value_.__l.__data_);
      goto LABEL_48;
    }
  }
LABEL_67:
  v143 = a3;
  v166 = 0;
  v39 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v42 = Mutable;
  if (Mutable)
    v166 = Mutable;
  if (SHIBYTE(v170) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v149, (const std::string::value_type *)v169, *((std::string::size_type *)&v169 + 1));
  }
  else
  {
    *(_OWORD *)v149 = v169;
    *(_QWORD *)&v149[16] = v170;
  }
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"cellmonitor", (uint64_t)v149, v39, v41);
  if ((v149[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v149);
    if ((SHIBYTE(v170) & 0x80000000) == 0)
      goto LABEL_74;
  }
  else if ((SHIBYTE(v170) & 0x80000000) == 0)
  {
LABEL_74:
    *(_OWORD *)v149 = v169;
    *(_QWORD *)&v149[16] = v170;
    goto LABEL_77;
  }
  std::string::__init_copy_ctor_external((std::string *)v149, (const std::string::value_type *)v169, *((std::string::size_type *)&v169 + 1));
LABEL_77:
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"radio", (uint64_t)v149, v39, v43);
  if ((v149[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v149);
    if ((SHIBYTE(v170) & 0x80000000) == 0)
      goto LABEL_79;
  }
  else if ((SHIBYTE(v170) & 0x80000000) == 0)
  {
LABEL_79:
    *(_OWORD *)v149 = v169;
    *(_QWORD *)&v149[16] = v170;
    goto LABEL_82;
  }
  std::string::__init_copy_ctor_external((std::string *)v149, (const std::string::value_type *)v169, *((std::string::size_type *)&v169 + 1));
LABEL_82:
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"audio", (uint64_t)v149, v39, v44);
  if ((v149[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v149);
    if ((SHIBYTE(v170) & 0x80000000) == 0)
      goto LABEL_84;
  }
  else if ((SHIBYTE(v170) & 0x80000000) == 0)
  {
LABEL_84:
    *(_OWORD *)v149 = v169;
    *(_QWORD *)&v149[16] = v170;
    goto LABEL_87;
  }
  std::string::__init_copy_ctor_external((std::string *)v149, (const std::string::value_type *)v169, *((std::string::size_type *)&v169 + 1));
LABEL_87:
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"voice", (uint64_t)v149, v39, v45);
  if ((v149[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v149);
    if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_89;
  }
  else if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_89:
    *(std::string *)v149 = v167;
    goto LABEL_92;
  }
  std::string::__init_copy_ctor_external((std::string *)v149, v167.__r_.__value_.__l.__data_, v167.__r_.__value_.__l.__size_);
LABEL_92:
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"sms", (uint64_t)v149, v39, v46);
  if ((v149[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v149);
    if ((SHIBYTE(v170) & 0x80000000) == 0)
      goto LABEL_94;
  }
  else if ((SHIBYTE(v170) & 0x80000000) == 0)
  {
LABEL_94:
    *(_OWORD *)v149 = v169;
    *(_QWORD *)&v149[16] = v170;
    goto LABEL_97;
  }
  std::string::__init_copy_ctor_external((std::string *)v149, (const std::string::value_type *)v169, *((std::string::size_type *)&v169 + 1));
LABEL_97:
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"location", (uint64_t)v149, v39, v47);
  if ((v149[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v149);
    if ((SHIBYTE(v170) & 0x80000000) == 0)
      goto LABEL_99;
  }
  else if ((SHIBYTE(v170) & 0x80000000) == 0)
  {
LABEL_99:
    *(_OWORD *)v149 = v169;
    *(_QWORD *)&v149[16] = v170;
    goto LABEL_102;
  }
  std::string::__init_copy_ctor_external((std::string *)v149, (const std::string::value_type *)v169, *((std::string::size_type *)&v169 + 1));
LABEL_102:
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"sim", (uint64_t)v149, v39, v48);
  if ((v149[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v149);
    if ((SHIBYTE(v170) & 0x80000000) == 0)
      goto LABEL_104;
  }
  else if ((SHIBYTE(v170) & 0x80000000) == 0)
  {
LABEL_104:
    *(_OWORD *)v149 = v169;
    *(_QWORD *)&v149[16] = v170;
    goto LABEL_107;
  }
  std::string::__init_copy_ctor_external((std::string *)v149, (const std::string::value_type *)v169, *((std::string::size_type *)&v169 + 1));
LABEL_107:
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"ims", (uint64_t)v149, v39, v49);
  if ((v149[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v149);
    if ((SHIBYTE(v170) & 0x80000000) == 0)
      goto LABEL_109;
  }
  else if ((SHIBYTE(v170) & 0x80000000) == 0)
  {
LABEL_109:
    *(_OWORD *)v149 = v169;
    *(_QWORD *)&v149[16] = v170;
    goto LABEL_112;
  }
  std::string::__init_copy_ctor_external((std::string *)v149, (const std::string::value_type *)v169, *((std::string::size_type *)&v169 + 1));
LABEL_112:
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"coex", (uint64_t)v149, v39, v50);
  if ((v149[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v149);
    if ((SHIBYTE(v170) & 0x80000000) == 0)
      goto LABEL_114;
  }
  else if ((SHIBYTE(v170) & 0x80000000) == 0)
  {
LABEL_114:
    *(_OWORD *)v149 = v169;
    *(_QWORD *)&v149[16] = v170;
    goto LABEL_117;
  }
  std::string::__init_copy_ctor_external((std::string *)v149, (const std::string::value_type *)v169, *((std::string::size_type *)&v169 + 1));
LABEL_117:
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"phonebook", (uint64_t)v149, v39, v51);
  if ((v149[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v149);
    if ((SHIBYTE(v170) & 0x80000000) == 0)
      goto LABEL_119;
  }
  else if ((SHIBYTE(v170) & 0x80000000) == 0)
  {
LABEL_119:
    *(_OWORD *)v149 = v169;
    *(_QWORD *)&v149[16] = v170;
    goto LABEL_122;
  }
  std::string::__init_copy_ctor_external((std::string *)v149, (const std::string::value_type *)v169, *((std::string::size_type *)&v169 + 1));
LABEL_122:
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"vinyl", (uint64_t)v149, v39, v52);
  if ((v149[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v149);
    if ((SHIBYTE(v170) & 0x80000000) == 0)
      goto LABEL_124;
  }
  else if ((SHIBYTE(v170) & 0x80000000) == 0)
  {
LABEL_124:
    *(_OWORD *)v149 = v169;
    *(_QWORD *)&v149[16] = v170;
    goto LABEL_127;
  }
  std::string::__init_copy_ctor_external((std::string *)v149, (const std::string::value_type *)v169, *((std::string::size_type *)&v169 + 1));
LABEL_127:
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"eos", (uint64_t)v149, v39, v53);
  if ((v149[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v149);
    if ((SHIBYTE(v170) & 0x80000000) == 0)
      goto LABEL_129;
  }
  else if ((SHIBYTE(v170) & 0x80000000) == 0)
  {
LABEL_129:
    *(_OWORD *)v149 = v169;
    *(_QWORD *)&v149[16] = v170;
    goto LABEL_132;
  }
  std::string::__init_copy_ctor_external((std::string *)v149, (const std::string::value_type *)v169, *((std::string::size_type *)&v169 + 1));
LABEL_132:
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"diag", (uint64_t)v149, v39, v54);
  if ((v149[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v149);
    if ((SHIBYTE(v170) & 0x80000000) == 0)
      goto LABEL_134;
  }
  else if ((SHIBYTE(v170) & 0x80000000) == 0)
  {
LABEL_134:
    *(_OWORD *)v149 = v169;
    *(_QWORD *)&v149[16] = v170;
    goto LABEL_137;
  }
  std::string::__init_copy_ctor_external((std::string *)v149, (const std::string::value_type *)v169, *((std::string::size_type *)&v169 + 1));
LABEL_137:
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"bsp", (uint64_t)v149, v39, v55);
  if ((v149[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v149);
    if ((SHIBYTE(v170) & 0x80000000) == 0)
      goto LABEL_139;
  }
  else if ((SHIBYTE(v170) & 0x80000000) == 0)
  {
LABEL_139:
    *(_OWORD *)v149 = v169;
    *(_QWORD *)&v149[16] = v170;
    goto LABEL_142;
  }
  std::string::__init_copy_ctor_external((std::string *)v149, (const std::string::value_type *)v169, *((std::string::size_type *)&v169 + 1));
LABEL_142:
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"dms", (uint64_t)v149, v39, v56);
  if ((v149[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v149);
    if ((SHIBYTE(v170) & 0x80000000) == 0)
      goto LABEL_144;
  }
  else if ((SHIBYTE(v170) & 0x80000000) == 0)
  {
LABEL_144:
    *(_OWORD *)v149 = v169;
    *(_QWORD *)&v149[16] = v170;
    goto LABEL_147;
  }
  std::string::__init_copy_ctor_external((std::string *)v149, (const std::string::value_type *)v169, *((std::string::size_type *)&v169 + 1));
LABEL_147:
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"awd", (uint64_t)v149, v39, v57);
  if ((v149[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v149);
    if ((SHIBYTE(v170) & 0x80000000) == 0)
      goto LABEL_149;
  }
  else if ((SHIBYTE(v170) & 0x80000000) == 0)
  {
LABEL_149:
    *(_OWORD *)v149 = v169;
    *(_QWORD *)&v149[16] = v170;
    goto LABEL_152;
  }
  std::string::__init_copy_ctor_external((std::string *)v149, (const std::string::value_type *)v169, *((std::string::size_type *)&v169 + 1));
LABEL_152:
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"cat", (uint64_t)v149, v39, v58);
  if ((v149[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v149);
    if ((SHIBYTE(v170) & 0x80000000) == 0)
      goto LABEL_154;
  }
  else if ((SHIBYTE(v170) & 0x80000000) == 0)
  {
LABEL_154:
    *(_OWORD *)v149 = v169;
    *(_QWORD *)&v149[16] = v170;
    goto LABEL_157;
  }
  std::string::__init_copy_ctor_external((std::string *)v149, (const std::string::value_type *)v169, *((std::string::size_type *)&v169 + 1));
LABEL_157:
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"elqm", (uint64_t)v149, v39, v59);
  if ((v149[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v149);
    if ((SHIBYTE(v170) & 0x80000000) == 0)
      goto LABEL_159;
  }
  else if ((SHIBYTE(v170) & 0x80000000) == 0)
  {
LABEL_159:
    *(_OWORD *)v149 = v169;
    *(_QWORD *)&v149[16] = v170;
    goto LABEL_162;
  }
  std::string::__init_copy_ctor_external((std::string *)v149, (const std::string::value_type *)v169, *((std::string::size_type *)&v169 + 1));
LABEL_162:
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"pdc", (uint64_t)v149, v39, v60);
  if ((v149[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v149);
    if ((SHIBYTE(v170) & 0x80000000) == 0)
      goto LABEL_164;
  }
  else if ((SHIBYTE(v170) & 0x80000000) == 0)
  {
LABEL_164:
    *(_OWORD *)v149 = v169;
    *(_QWORD *)&v149[16] = v170;
    goto LABEL_167;
  }
  std::string::__init_copy_ctor_external((std::string *)v149, (const std::string::value_type *)v169, *((std::string::size_type *)&v169 + 1));
LABEL_167:
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"dsd", (uint64_t)v149, v39, v61);
  if ((v149[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v149);
    if ((SHIBYTE(v170) & 0x80000000) == 0)
      goto LABEL_169;
  }
  else if ((SHIBYTE(v170) & 0x80000000) == 0)
  {
LABEL_169:
    *(_OWORD *)v149 = v169;
    *(_QWORD *)&v149[16] = v170;
    goto LABEL_172;
  }
  std::string::__init_copy_ctor_external((std::string *)v149, (const std::string::value_type *)v169, *((std::string::size_type *)&v169 + 1));
LABEL_172:
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"antenna", (uint64_t)v149, v39, v62);
  if ((v149[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v149);
    if ((SHIBYTE(v170) & 0x80000000) == 0)
      goto LABEL_174;
  }
  else if ((SHIBYTE(v170) & 0x80000000) == 0)
  {
LABEL_174:
    *(_OWORD *)v149 = v169;
    *(_QWORD *)&v149[16] = v170;
    goto LABEL_177;
  }
  std::string::__init_copy_ctor_external((std::string *)v149, (const std::string::value_type *)v169, *((std::string::size_type *)&v169 + 1));
LABEL_177:
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"p2p", (uint64_t)v149, v39, v63);
  if ((v149[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v149);
    if ((SHIBYTE(v170) & 0x80000000) == 0)
      goto LABEL_179;
  }
  else if ((SHIBYTE(v170) & 0x80000000) == 0)
  {
LABEL_179:
    *(_OWORD *)v149 = v169;
    *(_QWORD *)&v149[16] = v170;
    goto LABEL_182;
  }
  std::string::__init_copy_ctor_external((std::string *)v149, (const std::string::value_type *)v169, *((std::string::size_type *)&v169 + 1));
LABEL_182:
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"at", (uint64_t)v149, v39, v64);
  if ((v149[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v149);
    if ((SHIBYTE(v170) & 0x80000000) == 0)
      goto LABEL_184;
  }
  else if ((SHIBYTE(v170) & 0x80000000) == 0)
  {
LABEL_184:
    *(_OWORD *)v149 = v169;
    *(_QWORD *)&v149[16] = v170;
    goto LABEL_187;
  }
  std::string::__init_copy_ctor_external((std::string *)v149, (const std::string::value_type *)v169, *((std::string::size_type *)&v169 + 1));
LABEL_187:
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"media", (uint64_t)v149, v39, v65);
  if ((v149[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v149);
    if ((SHIBYTE(v170) & 0x80000000) == 0)
      goto LABEL_189;
  }
  else if ((SHIBYTE(v170) & 0x80000000) == 0)
  {
LABEL_189:
    *(_OWORD *)v149 = v169;
    *(_QWORD *)&v149[16] = v170;
    goto LABEL_192;
  }
  std::string::__init_copy_ctor_external((std::string *)v149, (const std::string::value_type *)v169, *((std::string::size_type *)&v169 + 1));
LABEL_192:
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"wda", (uint64_t)v149, v39, v66);
  if ((v149[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v149);
    if ((SHIBYTE(v170) & 0x80000000) == 0)
      goto LABEL_194;
  }
  else if ((SHIBYTE(v170) & 0x80000000) == 0)
  {
LABEL_194:
    *(_OWORD *)v149 = v169;
    *(_QWORD *)&v149[16] = v170;
    goto LABEL_197;
  }
  std::string::__init_copy_ctor_external((std::string *)v149, (const std::string::value_type *)v169, *((std::string::size_type *)&v169 + 1));
LABEL_197:
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"dfs", (uint64_t)v149, v39, v67);
  if ((v149[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v149);
    if ((SHIBYTE(v170) & 0x80000000) == 0)
      goto LABEL_199;
  }
  else if ((SHIBYTE(v170) & 0x80000000) == 0)
  {
LABEL_199:
    *(_OWORD *)v149 = v169;
    *(_QWORD *)&v149[16] = v170;
    goto LABEL_202;
  }
  std::string::__init_copy_ctor_external((std::string *)v149, (const std::string::value_type *)v169, *((std::string::size_type *)&v169 + 1));
LABEL_202:
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"ssctl", (uint64_t)v149, v39, v68);
  if ((v149[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v149);
    if ((SHIBYTE(v170) & 0x80000000) == 0)
      goto LABEL_204;
  }
  else if ((SHIBYTE(v170) & 0x80000000) == 0)
  {
LABEL_204:
    *(_OWORD *)v149 = v169;
    *(_QWORD *)&v149[16] = v170;
    goto LABEL_207;
  }
  std::string::__init_copy_ctor_external((std::string *)v149, (const std::string::value_type *)v169, *((std::string::size_type *)&v169 + 1));
LABEL_207:
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"stw", (uint64_t)v149, v39, v69);
  if ((v149[23] & 0x80000000) != 0)
    operator delete(*(void **)v149);
  *(_QWORD *)v149 = v6;
  *(_QWORD *)&v149[8] = 0xAAAAAAAAAAAAAAAALL;
  *(_DWORD *)&v149[16] = v168[0];
  *(_DWORD *)&v149[19] = *(_DWORD *)((char *)v168 + 3);
  v149[23] = 5;
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"registration", (uint64_t)v149, v39, v70);
  if ((v149[23] & 0x80000000) != 0)
    operator delete(*(void **)v149);
  *(_QWORD *)v149 = v6;
  *(_QWORD *)&v149[8] = 0xAAAAAAAAAAAAAAAALL;
  *(_DWORD *)&v149[16] = v168[0];
  *(_DWORD *)&v149[19] = *(_DWORD *)((char *)v168 + 3);
  v149[23] = 5;
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"ussd", (uint64_t)v149, v39, v71);
  if ((v149[23] & 0x80000000) != 0)
    operator delete(*(void **)v149);
  *(_QWORD *)v149 = v6;
  *(_QWORD *)&v149[8] = 0xAAAAAAAAAAAAAAAALL;
  *(_DWORD *)&v149[16] = v168[0];
  *(_DWORD *)&v149[19] = *(_DWORD *)((char *)v168 + 3);
  v149[23] = 5;
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"supp", (uint64_t)v149, v39, v72);
  if ((v149[23] & 0x80000000) != 0)
    operator delete(*(void **)v149);
  *(_QWORD *)v149 = v6;
  *(_QWORD *)&v149[8] = 0xAAAAAAAAAAAAAAAALL;
  *(_DWORD *)&v149[16] = v168[0];
  *(_DWORD *)&v149[19] = *(_DWORD *)((char *)v168 + 3);
  v149[23] = 5;
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"settings", (uint64_t)v149, v39, v73);
  if ((v149[23] & 0x80000000) != 0)
    operator delete(*(void **)v149);
  *(_QWORD *)v149 = v6;
  *(_QWORD *)&v149[8] = 0xAAAAAAAAAAAAAAAALL;
  *(_DWORD *)&v149[16] = v168[0];
  *(_DWORD *)&v149[19] = *(_DWORD *)((char *)v168 + 3);
  v149[23] = 5;
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"desense", (uint64_t)v149, v39, v74);
  if ((v149[23] & 0x80000000) != 0)
    operator delete(*(void **)v149);
  ctu::cf::insert<char const*,char const*>(v42, (const __CFString **)"logchan", v39, v75, v76);
  ctu::cf::insert<char const*,char const*>(v42, (const __CFString **)"dormancy", v39, v77, v78);
  ctu::cf::insert<char const*,char const*>(v42, (const __CFString **)"aqm", v39, v79, v80);
  ctu::cf::insert<char const*,char const*>(v42, (const __CFString **)"subscriber", v39, v81, v82);
  if (!capabilities::ipc::supportsPCI(v83))
    goto LABEL_224;
  if (SHIBYTE(v170) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v149, (const std::string::value_type *)v169, *((std::string::size_type *)&v169 + 1));
  }
  else
  {
    *(_OWORD *)v149 = v169;
    *(_QWORD *)&v149[16] = v170;
  }
  ctu::cf::insert<char const*,std::string>(v42, (const __CFString **)"debug_ipc", (uint64_t)v149, v39, v84);
  if ((v149[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v149);
    v85 = (_QWORD *)*a2;
    if ((_QWORD *)*a2 != v145)
      goto LABEL_225;
  }
  else
  {
LABEL_224:
    v85 = (_QWORD *)*a2;
    if ((_QWORD *)*a2 != v145)
    {
LABEL_225:
      v86 = 0;
      v87 = *MEMORY[0x1E0DE4F50];
      v88 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      v146 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      v144 = MEMORY[0x1E0DE4FB8] + 16;
      while (1)
      {
        v165 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v89 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v89 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v163 = v89;
        v164 = v89;
        v161 = v89;
        v162 = v89;
        v159 = v89;
        v160 = v89;
        v157 = v89;
        v158 = v89;
        v155 = v89;
        v156 = v89;
        *(_OWORD *)__p = v89;
        v154 = v89;
        v151 = v89;
        v152 = v89;
        *(_OWORD *)&v149[16] = v89;
        v150 = v89;
        *(_OWORD *)v149 = v89;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v149);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149[16], (uint64_t)"coredump_", 9);
        ++v86;
        std::ostream::operator<<();
        if ((BYTE8(v155) & 0x10) != 0)
        {
          v92 = v155;
          v93 = (const void **)&v152;
          if ((unint64_t)v155 < *((_QWORD *)&v152 + 1))
          {
            *(_QWORD *)&v155 = *((_QWORD *)&v152 + 1);
            v92 = *((_QWORD *)&v152 + 1);
            v93 = (const void **)&v152;
          }
        }
        else
        {
          if ((BYTE8(v155) & 8) == 0)
          {
            v90 = 0;
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
            p_dst = &__dst;
            goto LABEL_241;
          }
          v92 = *((_QWORD *)&v151 + 1);
          v93 = (const void **)&v150 + 1;
        }
        v94 = *v93;
        v90 = v92 - (_QWORD)*v93;
        if (v90 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v90 >= 0x17)
          break;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v92 - *(_BYTE *)v93;
        p_dst = &__dst;
        if (v90)
          goto LABEL_240;
LABEL_241:
        p_dst->__r_.__value_.__s.__data_[v90] = 0;
        v97 = v85[4];
        v98 = (std::__shared_weak_count *)v85[5];
        v172.__r_.__value_.__r.__words[0] = v97;
        v172.__r_.__value_.__l.__size_ = (std::string::size_type)v98;
        if (v98)
        {
          v99 = (unint64_t *)&v98->__shared_owners_;
          do
            v100 = __ldxr(v99);
          while (__stxr(v100 + 1, v99));
        }
        if (v97)
        {
          v101 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v97 + 40))(v97);
          if (*(char *)(v101 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v147, *(const std::string::value_type **)v101, *(_QWORD *)(v101 + 8));
          }
          else
          {
            v102 = *(_OWORD *)v101;
            v147.__r_.__value_.__r.__words[2] = *(_QWORD *)(v101 + 16);
            *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v102;
          }
        }
        else
        {
          *((_BYTE *)&v147.__r_.__value_.__s + 23) = 12;
          strcpy((char *)&v147, "(empty QMux)");
        }
        if (!v98)
          goto LABEL_253;
        v103 = (unint64_t *)&v98->__shared_owners_;
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
          v105 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_254:
            v172 = __dst;
            goto LABEL_257;
          }
        }
        else
        {
LABEL_253:
          v105 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_254;
        }
        std::string::__init_copy_ctor_external(&v172, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
LABEL_257:
        if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v171, v147.__r_.__value_.__l.__data_, v147.__r_.__value_.__l.__size_);
        else
          v171 = v147;
        ctu::cf::insert<std::string,std::string>();
        if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v171.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v172.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_262:
            if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_273;
            goto LABEL_263;
          }
        }
        else if ((SHIBYTE(v172.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_262;
        }
        operator delete(v172.__r_.__value_.__l.__data_);
        if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_273:
          operator delete(v147.__r_.__value_.__l.__data_);
          if ((v105 & 0x80000000) == 0)
            goto LABEL_264;
          goto LABEL_274;
        }
LABEL_263:
        if ((v105 & 0x80000000) == 0)
          goto LABEL_264;
LABEL_274:
        operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_264:
        *(_QWORD *)v149 = v87;
        *(_QWORD *)&v149[*(_QWORD *)(v87 - 24)] = v146;
        *(_QWORD *)&v149[16] = v88;
        *(_QWORD *)&v149[24] = v144;
        if (SHIBYTE(v154) < 0)
          operator delete(__p[1]);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1A1AEB300](&v156);
        v165 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v106 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v106 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v163 = v106;
        v164 = v106;
        v161 = v106;
        v162 = v106;
        v159 = v106;
        v160 = v106;
        v157 = v106;
        v158 = v106;
        v155 = v106;
        v156 = v106;
        *(_OWORD *)__p = v106;
        v154 = v106;
        v151 = v106;
        v152 = v106;
        *(_OWORD *)&v149[16] = v106;
        v150 = v106;
        *(_OWORD *)v149 = v106;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v149);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149[16], (uint64_t)"data_", 5);
        std::ostream::operator<<();
        if ((BYTE8(v155) & 0x10) != 0)
        {
          v109 = v155;
          v110 = (const void **)&v152;
          if ((unint64_t)v155 < *((_QWORD *)&v152 + 1))
          {
            *(_QWORD *)&v155 = *((_QWORD *)&v152 + 1);
            v109 = *((_QWORD *)&v152 + 1);
            v110 = (const void **)&v152;
          }
        }
        else
        {
          if ((BYTE8(v155) & 8) == 0)
          {
            v107 = 0;
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
            v108 = &__dst;
            goto LABEL_284;
          }
          v109 = *((_QWORD *)&v151 + 1);
          v110 = (const void **)&v150 + 1;
        }
        v111 = *v110;
        v107 = v109 - (_QWORD)*v110;
        if (v107 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v107 >= 0x17)
        {
          v112 = (v107 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v107 | 7) != 0x17)
            v112 = v107 | 7;
          v113 = v112 + 1;
          v108 = (std::string *)operator new(v112 + 1);
          __dst.__r_.__value_.__l.__size_ = v107;
          __dst.__r_.__value_.__r.__words[2] = v113 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v108;
LABEL_283:
          memmove(v108, v111, v107);
          goto LABEL_284;
        }
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v109 - *(_BYTE *)v110;
        v108 = &__dst;
        if (v107)
          goto LABEL_283;
LABEL_284:
        v108->__r_.__value_.__s.__data_[v107] = 0;
        v114 = v85[4];
        v115 = (std::__shared_weak_count *)v85[5];
        v172.__r_.__value_.__r.__words[0] = v114;
        v172.__r_.__value_.__l.__size_ = (std::string::size_type)v115;
        if (v115)
        {
          v116 = (unint64_t *)&v115->__shared_owners_;
          do
            v117 = __ldxr(v116);
          while (__stxr(v117 + 1, v116));
        }
        if (v114)
        {
          v118 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v114 + 40))(v114);
          if (*(char *)(v118 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v147, *(const std::string::value_type **)v118, *(_QWORD *)(v118 + 8));
          }
          else
          {
            v119 = *(_OWORD *)v118;
            v147.__r_.__value_.__r.__words[2] = *(_QWORD *)(v118 + 16);
            *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v119;
          }
        }
        else
        {
          *((_BYTE *)&v147.__r_.__value_.__s + 23) = 12;
          strcpy((char *)&v147, "(empty QMux)");
        }
        if (!v115)
          goto LABEL_296;
        v120 = (unint64_t *)&v115->__shared_owners_;
        do
          v121 = __ldaxr(v120);
        while (__stlxr(v121 - 1, v120));
        if (!v121)
        {
          ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
          std::__shared_weak_count::__release_weak(v115);
          v122 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_297:
            v172 = __dst;
            goto LABEL_300;
          }
        }
        else
        {
LABEL_296:
          v122 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_297;
        }
        std::string::__init_copy_ctor_external(&v172, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
LABEL_300:
        if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v171, v147.__r_.__value_.__l.__data_, v147.__r_.__value_.__l.__size_);
        else
          v171 = v147;
        ctu::cf::insert<std::string,std::string>();
        if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v171.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v172.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_305:
            if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_316;
            goto LABEL_306;
          }
        }
        else if ((SHIBYTE(v172.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_305;
        }
        operator delete(v172.__r_.__value_.__l.__data_);
        if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_316:
          operator delete(v147.__r_.__value_.__l.__data_);
          if ((v122 & 0x80000000) == 0)
            goto LABEL_307;
          goto LABEL_317;
        }
LABEL_306:
        if ((v122 & 0x80000000) == 0)
          goto LABEL_307;
LABEL_317:
        operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_307:
        *(_QWORD *)v149 = v87;
        *(_QWORD *)&v149[*(_QWORD *)(v87 - 24)] = v146;
        *(_QWORD *)&v149[16] = v88;
        *(_QWORD *)&v149[24] = MEMORY[0x1E0DE4FB8] + 16;
        if (SHIBYTE(v154) < 0)
          operator delete(__p[1]);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1A1AEB300](&v156);
        v165 = 0xAAAAAAAAAAAAAAAALL;
        *(_QWORD *)&v123 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v123 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v163 = v123;
        v164 = v123;
        v161 = v123;
        v162 = v123;
        v159 = v123;
        v160 = v123;
        v157 = v123;
        v158 = v123;
        v155 = v123;
        v156 = v123;
        *(_OWORD *)__p = v123;
        v154 = v123;
        v151 = v123;
        v152 = v123;
        *(_OWORD *)&v149[16] = v123;
        v150 = v123;
        *(_OWORD *)v149 = v123;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v149);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v149[16], (uint64_t)"qos_", 4);
        std::ostream::operator<<();
        if ((BYTE8(v155) & 0x10) != 0)
        {
          v126 = v155;
          v127 = (const void **)&v152;
          if ((unint64_t)v155 < *((_QWORD *)&v152 + 1))
          {
            *(_QWORD *)&v155 = *((_QWORD *)&v152 + 1);
            v126 = *((_QWORD *)&v152 + 1);
            v127 = (const void **)&v152;
          }
        }
        else
        {
          if ((BYTE8(v155) & 8) == 0)
          {
            v124 = 0;
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
            v125 = &__dst;
            goto LABEL_327;
          }
          v126 = *((_QWORD *)&v151 + 1);
          v127 = (const void **)&v150 + 1;
        }
        v128 = *v127;
        v124 = v126 - (_QWORD)*v127;
        if (v124 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v124 >= 0x17)
        {
          v129 = (v124 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v124 | 7) != 0x17)
            v129 = v124 | 7;
          v130 = v129 + 1;
          v125 = (std::string *)operator new(v129 + 1);
          __dst.__r_.__value_.__l.__size_ = v124;
          __dst.__r_.__value_.__r.__words[2] = v130 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v125;
LABEL_326:
          memmove(v125, v128, v124);
          goto LABEL_327;
        }
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v126 - *(_BYTE *)v127;
        v125 = &__dst;
        if (v124)
          goto LABEL_326;
LABEL_327:
        v125->__r_.__value_.__s.__data_[v124] = 0;
        v131 = v85[4];
        v132 = (std::__shared_weak_count *)v85[5];
        v172.__r_.__value_.__r.__words[0] = v131;
        v172.__r_.__value_.__l.__size_ = (std::string::size_type)v132;
        if (v132)
        {
          v133 = (unint64_t *)&v132->__shared_owners_;
          do
            v134 = __ldxr(v133);
          while (__stxr(v134 + 1, v133));
        }
        if (v131)
        {
          v135 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v131 + 40))(v131);
          if (*(char *)(v135 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v147, *(const std::string::value_type **)v135, *(_QWORD *)(v135 + 8));
          }
          else
          {
            v136 = *(_OWORD *)v135;
            v147.__r_.__value_.__r.__words[2] = *(_QWORD *)(v135 + 16);
            *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v136;
          }
        }
        else
        {
          *((_BYTE *)&v147.__r_.__value_.__s + 23) = 12;
          strcpy((char *)&v147, "(empty QMux)");
        }
        if (!v132)
          goto LABEL_339;
        v137 = (unint64_t *)&v132->__shared_owners_;
        do
          v138 = __ldaxr(v137);
        while (__stlxr(v138 - 1, v137));
        if (!v138)
        {
          ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
          std::__shared_weak_count::__release_weak(v132);
          v42 = v166;
          v139 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_340:
            v172 = __dst;
            goto LABEL_343;
          }
        }
        else
        {
LABEL_339:
          v42 = v166;
          v139 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_340;
        }
        std::string::__init_copy_ctor_external(&v172, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
LABEL_343:
        if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v171, v147.__r_.__value_.__l.__data_, v147.__r_.__value_.__l.__size_);
        else
          v171 = v147;
        ctu::cf::insert<std::string,std::string>();
        if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v171.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v172.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_348:
            if ((SHIBYTE(v147.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_349;
            goto LABEL_360;
          }
        }
        else if ((SHIBYTE(v172.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_348;
        }
        operator delete(v172.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v147.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_349:
          if (v139 < 0)
            goto LABEL_361;
          goto LABEL_350;
        }
LABEL_360:
        operator delete(v147.__r_.__value_.__l.__data_);
        if (v139 < 0)
LABEL_361:
          operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_350:
        *(_QWORD *)v149 = v87;
        *(_QWORD *)&v149[*(_QWORD *)(v87 - 24)] = v146;
        *(_QWORD *)&v149[16] = v88;
        *(_QWORD *)&v149[24] = MEMORY[0x1E0DE4FB8] + 16;
        if (SHIBYTE(v154) < 0)
          operator delete(__p[1]);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1A1AEB300](&v156);
        v140 = (_QWORD *)v85[1];
        if (v140)
        {
          do
          {
            v141 = v140;
            v140 = (_QWORD *)*v140;
          }
          while (v140);
        }
        else
        {
          do
          {
            v141 = (_QWORD *)v85[2];
            v36 = *v141 == (_QWORD)v85;
            v85 = v141;
          }
          while (!v36);
        }
        v85 = v141;
        if (v141 == v145)
          goto LABEL_363;
      }
      v95 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v90 | 7) != 0x17)
        v95 = v90 | 7;
      v96 = v95 + 1;
      p_dst = (std::string *)operator new(v95 + 1);
      __dst.__r_.__value_.__l.__size_ = v90;
      __dst.__r_.__value_.__r.__words[2] = v96 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_240:
      memmove(p_dst, v94, v90);
      goto LABEL_241;
    }
  }
LABEL_363:
  if (v42)
  {
    v142 = CFGetTypeID(v42);
    if (v142 == CFDictionaryGetTypeID())
    {
      *v143 = v42;
      CFRetain(v42);
    }
    else
    {
      *v143 = 0;
    }
    CFRelease(v42);
  }
  else
  {
    *v143 = 0;
  }
  if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v170) & 0x80000000) == 0)
      return;
LABEL_373:
    operator delete((void *)v169);
    return;
  }
  operator delete(v167.__r_.__value_.__l.__data_);
  if (SHIBYTE(v170) < 0)
    goto LABEL_373;
}

void sub_19E9E7868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (a34 < 0)
    operator delete(__p);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v34 - 232));
  if (*(char *)(v34 - 201) < 0)
  {
    operator delete(*(void **)(v34 - 224));
    if ((*(char *)(v34 - 161) & 0x80000000) == 0)
      goto LABEL_5;
  }
  else if ((*(char *)(v34 - 161) & 0x80000000) == 0)
  {
LABEL_5:
    _Unwind_Resume(a1);
  }
  operator delete(*(void **)(v34 - 184));
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_19E9E7BE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1A1AEB300](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1A1AEB300](a1 + 128);
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void dispatch::async<void ctu::SharedSynchronizable<BBServerConnection>::execute_wrapped<QMIServerConnection::init(std::vector<std::shared_ptr<qmi::ServerAccepter>> const&,xpc::connection const&)::$_0>(QMIServerConnection::init(std::vector<std::shared_ptr<qmi::ServerAccepter>> const&,xpc::connection const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIServerConnection::init(std::vector<std::shared_ptr<qmi::ServerAccepter>> const&,xpc::connection const&)::$_0,std::default_delete<QMIServerConnection::init(std::vector<std::shared_ptr<qmi::ServerAccepter>> const&,xpc::connection const&)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD **a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  xpc_object_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  void *v46;
  NSObject *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *i;
  NSObject *v56;
  NSObject *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v62;
  uint8_t buf[16];

  v1 = a1;
  v2 = *a1;
  v62 = v2;
  v3 = *v2;
  v4 = *v2 + 48;
  if ((_QWORD *)v4 != v2 + 1)
  {
    v6 = (char *)v2[1];
    v5 = (char *)v2[2];
    v7 = (v5 - v6) >> 4;
    v8 = *(_QWORD *)(v3 + 64);
    v9 = *(char **)(v3 + 48);
    if (v7 > (v8 - (uint64_t)v9) >> 4)
    {
      if (v9)
      {
        v10 = *(char **)(v3 + 56);
        v11 = *(void **)(v3 + 48);
        if (v10 != v9)
        {
          do
          {
            v12 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
            if (v12)
            {
              p_shared_owners = (unint64_t *)&v12->__shared_owners_;
              do
                v14 = __ldaxr(p_shared_owners);
              while (__stlxr(v14 - 1, p_shared_owners));
              if (!v14)
              {
                ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
                std::__shared_weak_count::__release_weak(v12);
              }
            }
            v10 -= 16;
          }
          while (v10 != v9);
          v11 = *(void **)v4;
        }
        *(_QWORD *)(v3 + 56) = v9;
        operator delete(v11);
        v8 = 0;
        *(_QWORD *)v4 = 0;
        *(_QWORD *)(v4 + 8) = 0;
        *(_QWORD *)(v4 + 16) = 0;
      }
      v1 = a1;
      if (v5 - v6 < 0)
        goto LABEL_98;
      v33 = v8 >> 3;
      if (v8 >> 3 <= v7)
        v33 = (v5 - v6) >> 4;
      v34 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v33;
      if (v34 >> 60)
LABEL_98:
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v35 = operator new(16 * v34);
      *(_QWORD *)(v3 + 48) = v35;
      *(_QWORD *)(v3 + 56) = v35;
      *(_QWORD *)(v3 + 64) = &v35[2 * v34];
      while (v6 != v5)
      {
        *v35 = *(_QWORD *)v6;
        v36 = *((_QWORD *)v6 + 1);
        v35[1] = v36;
        if (v36)
        {
          v37 = (unint64_t *)(v36 + 8);
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
        }
        v6 += 16;
        v35 += 2;
      }
      *(_QWORD *)(v3 + 56) = v35;
      v39 = (xpc_object_t)v2[4];
      if (!v39)
        goto LABEL_73;
LABEL_63:
      xpc_retain(v39);
      goto LABEL_74;
    }
    v15 = *(char **)(v3 + 56);
    v16 = (v15 - v9) >> 4;
    if (v16 >= v7)
    {
      if (v6 != v5)
      {
        do
        {
          v27 = *(_QWORD *)v6;
          v26 = *((_QWORD *)v6 + 1);
          if (v26)
          {
            v28 = (unint64_t *)(v26 + 8);
            do
              v29 = __ldxr(v28);
            while (__stxr(v29 + 1, v28));
          }
          v30 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
          *(_QWORD *)v9 = v27;
          *((_QWORD *)v9 + 1) = v26;
          if (v30)
          {
            v31 = (unint64_t *)&v30->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
          v6 += 16;
          v9 += 16;
        }
        while (v6 != v5);
        v15 = *(char **)(v3 + 56);
      }
      while (v15 != v9)
      {
        v43 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
        if (v43)
        {
          v44 = (unint64_t *)&v43->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v15 -= 16;
      }
      *(_QWORD *)(v3 + 56) = v9;
      v1 = a1;
      v39 = (xpc_object_t)v2[4];
      if (!v39)
        goto LABEL_73;
      goto LABEL_63;
    }
    v17 = &v6[16 * v16];
    if (v15 == v9)
    {
      v18 = *(char **)(v3 + 48);
      if (v17 == v5)
      {
LABEL_61:
        *(_QWORD *)(v3 + 56) = v18;
        v1 = a1;
        goto LABEL_62;
      }
    }
    else
    {
      do
      {
        v20 = *(_QWORD *)v6;
        v19 = *((_QWORD *)v6 + 1);
        if (v19)
        {
          v21 = (unint64_t *)(v19 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v23 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
        *(_QWORD *)v9 = v20;
        *((_QWORD *)v9 + 1) = v19;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v6 += 16;
        v9 += 16;
      }
      while (v6 != v17);
      v9 = *(char **)(v3 + 56);
      v18 = v9;
      if (v17 == v5)
        goto LABEL_61;
    }
    v18 = v9;
    do
    {
      *(_QWORD *)v18 = *(_QWORD *)v17;
      v40 = *((_QWORD *)v17 + 1);
      *((_QWORD *)v18 + 1) = v40;
      if (v40)
      {
        v41 = (unint64_t *)(v40 + 8);
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      v17 += 16;
      v18 += 16;
    }
    while (v17 != v5);
    goto LABEL_61;
  }
LABEL_62:
  v39 = (xpc_object_t)v2[4];
  if (v39)
    goto LABEL_63;
LABEL_73:
  v39 = xpc_null_create();
LABEL_74:
  v46 = *(void **)(v3 + 88);
  *(_QWORD *)(v3 + 88) = v39;
  xpc_release(v46);
  xpc_connection_suspend(*(xpc_connection_t *)(v3 + 88));
  v47 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19E9C8000, v47, OS_LOG_TYPE_DEFAULT, "#I XPC Listener: creating qmi::Server", buf, 2u);
  }
  qmi::Server::Server((uint64_t)buf, (xpc_object_t *)(v3 + 88));
  v48 = *(std::__shared_weak_count **)(v3 + 104);
  *(_OWORD *)(v3 + 96) = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v52 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = *(_QWORD **)(v3 + 48);
  for (i = *(_QWORD **)(v3 + 56); v54 != i; v54 += 2)
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v54 + 16))(*v54, v3 + 96);
  v56 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19E9C8000, v56, OS_LOG_TYPE_DEFAULT, "#I XPC Listener: go!", buf, 2u);
  }
  xpc_connection_resume(*(xpc_connection_t *)(v3 + 88));
  v57 = *(NSObject **)(v3 + 80);
  *(_QWORD *)(v3 + 80) = 0;
  if (v57)
  {
    dispatch_group_leave(v57);
    dispatch_release(v57);
  }
  *(_BYTE *)(v3 + 112) = 1;
  std::unique_ptr<QMIServerConnection::init(std::vector<std::shared_ptr<qmi::ServerAccepter>> const&,xpc::connection const&)::$_0,std::default_delete<QMIServerConnection::init(std::vector<std::shared_ptr<qmi::ServerAccepter>> const&,xpc::connection const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v62);
  v58 = (std::__shared_weak_count *)v1[2];
  if (v58)
  {
    v59 = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  operator delete(v1);
}

void sub_19E9E8220(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a2);
  std::unique_ptr<QMIServerConnection::init(std::vector<std::shared_ptr<qmi::ServerAccepter>> const&,xpc::connection const&)::$_0,std::default_delete<QMIServerConnection::init(std::vector<std::shared_ptr<qmi::ServerAccepter>> const&,xpc::connection const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  v4 = (std::__shared_weak_count *)v2[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<QMIServerConnection::init(std::vector<std::shared_ptr<qmi::ServerAccepter>> const&,xpc::connection const&)::$_0,std::default_delete<QMIServerConnection::init(std::vector<std::shared_ptr<qmi::ServerAccepter>> const&,xpc::connection const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 32));
    *(_QWORD *)(v2 + 32) = 0;
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v2 + 16);
      v5 = *(void **)(v2 + 8);
      if (v4 != v3)
      {
        do
        {
          v6 = *(std::__shared_weak_count **)(v4 - 8);
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          v4 -= 16;
        }
        while (v4 != v3);
        v5 = *(void **)(v2 + 8);
      }
      *(_QWORD *)(v2 + 16) = v3;
      operator delete(v5);
    }
    operator delete((void *)v2);
  }
  return a1;
}

void ___ZNK3ctu20SharedSynchronizableI18BBServerConnectionE20execute_wrapped_syncIZN19QMIServerConnection8shutdownEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke(uint64_t a1)
{
  uint64_t v1;
  xpc_object_t v2;
  xpc_object_t v3;
  void *v4;
  NSObject *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint8_t v9[16];

  v1 = **(_QWORD **)(a1 + 40);
  *(_BYTE *)(v1 + 112) = 0;
  if (MEMORY[0x1A1AEB9A8](*(_QWORD *)(v1 + 88)) == MEMORY[0x1E0C812E0])
  {
    xpc_connection_cancel(*(xpc_connection_t *)(v1 + 88));
    v2 = xpc_null_create();
    v3 = xpc_null_create();
    v4 = *(void **)(v1 + 88);
    *(_QWORD *)(v1 + 88) = v2;
    xpc_release(v4);
    xpc_release(v3);
    v5 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_19E9C8000, v5, OS_LOG_TYPE_DEFAULT, "#I XPC Listener: shutdown!", v9, 2u);
    }
  }
  v6 = *(uint64_t **)(v1 + 48);
  v7 = *(uint64_t **)(v1 + 56);
  while (v6 != v7)
  {
    v8 = *v6;
    v6 += 2;
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  }
}

void ctu::cf::insert<char const*,std::string>(__CFDictionary *a1, const __CFString **a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  void *v6;
  void *v7;
  BOOL v8;
  void *value;

  value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, a2, (const char *)0x8000100, a4, a5);
  v6 = value;
  value = 0;
  ctu::cf::convert_copy();
  v7 = value;
  if (v6)
    v8 = value == 0;
  else
    v8 = 1;
  if (v8)
  {
    if (!value)
      goto LABEL_8;
  }
  else
  {
    CFDictionaryAddValue(a1, v6, value);
  }
  CFRelease(v7);
LABEL_8:
  if (v6)
    CFRelease(v6);
}

void sub_19E9E84CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_19E9E84F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void ctu::cf::insert<char const*,char const*>(__CFDictionary *a1, const __CFString **a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  void *v7;
  const __CFAllocator *v8;
  void *v9;
  BOOL v10;
  void *value;

  value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, a2, (const char *)0x8000100, a3, a5);
  v7 = value;
  value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, (const __CFString **)"qmux1", (const char *)0x8000100, a3, v8);
  v9 = value;
  if (v7)
    v10 = value == 0;
  else
    v10 = 1;
  if (v10)
  {
    if (!value)
      goto LABEL_8;
  }
  else
  {
    CFDictionaryAddValue(a1, v7, value);
  }
  CFRelease(v9);
LABEL_8:
  if (v7)
    CFRelease(v7);
}

void sub_19E9E85E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_19E9E8604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<std::string,std::string>()
{
  ctu::cf::convert_copy();
  ctu::cf::convert_copy();
}

void sub_19E9E86C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_19E9E86E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ATCSThreadStartStub(void (**a1)(_QWORD))
{
  pthread_setspecific(threadInfoKey, a1);
  (*a1)(a1[1]);
  operator delete(a1);
  return 0;
}

pthread_t ATCSThreadSpawn(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v7;
  __int128 v8;
  int v9;
  pthread_t v11;
  pthread_attr_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((initialized & 1) == 0)
  {
    pthread_key_create((pthread_key_t *)&threadInfoKey, 0);
    initialized = 1;
  }
  v7 = operator new(0x10uLL);
  *v7 = a2;
  v7[1] = a3;
  v11 = (pthread_t)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v12.__opaque[24] = v8;
  *(_OWORD *)&v12.__opaque[40] = v8;
  *(_OWORD *)&v12.__sig = v8;
  *(_OWORD *)&v12.__opaque[8] = v8;
  pthread_attr_init(&v12);
  if (a4)
    pthread_attr_setdetachstate(&v12, 2);
  v9 = pthread_create(&v11, &v12, (void *(__cdecl *)(void *))ATCSThreadStartStub, v7);
  pthread_attr_destroy(&v12);
  if (!v9)
    return v11;
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "pthread_create() failed, error = %d\n", v9);
  return 0;
}

BOOL ATCSThreadJoin(_opaque_pthread_t *a1)
{
  return pthread_join(a1, 0) == 0;
}

BOOL ATCSThreadKill(_opaque_pthread_t *a1)
{
  return pthread_kill(a1, 9) == 0;
}

void ATCSMutex::ATCSMutex(ATCSMutex *this, const char *a2)
{
  pthread_mutex_t *v3;

  *(_QWORD *)this = 0;
  v3 = (pthread_mutex_t *)operator new(0x48uLL);
  v3[1].__sig = 0;
  if ((initialized & 1) == 0)
  {
    pthread_key_create((pthread_key_t *)&threadInfoKey, 0);
    initialized = 1;
  }
  pthread_mutex_init(v3, 0);
  *(_QWORD *)this = v3;
}

{
  pthread_mutex_t *v3;

  *(_QWORD *)this = 0;
  v3 = (pthread_mutex_t *)operator new(0x48uLL);
  v3[1].__sig = 0;
  if ((initialized & 1) == 0)
  {
    pthread_key_create((pthread_key_t *)&threadInfoKey, 0);
    initialized = 1;
  }
  pthread_mutex_init(v3, 0);
  *(_QWORD *)this = v3;
}

void ATCSMutex::~ATCSMutex(pthread_mutex_t **this)
{
  pthread_mutex_t *v1;

  v1 = *this;
  pthread_mutex_destroy(*this);
  if (v1)
    operator delete(v1);
}

{
  pthread_mutex_t *v1;

  v1 = *this;
  pthread_mutex_destroy(*this);
  if (v1)
    operator delete(v1);
}

pthread_t ATCSMutex::lock(pthread_mutex_t **this)
{
  pthread_mutex_t *v1;
  pthread_t result;

  v1 = *this;
  pthread_mutex_lock(*this);
  result = pthread_self();
  v1[1].__sig = (uint64_t)result;
  return result;
}

uint64_t ATCSMutex::unlock(pthread_mutex_t **this)
{
  pthread_mutex_t *v1;

  v1 = *this;
  pthread_self();
  v1[1].__sig = 0;
  return pthread_mutex_unlock(v1);
}

BOOL ATCSMutex::isLocked(ATCSMutex *this)
{
  uint64_t v1;
  _opaque_pthread_t *v2;

  v1 = *(_QWORD *)this;
  v2 = pthread_self();
  return pthread_equal(v2, *(pthread_t *)(v1 + 64)) != 0;
}

BOOL ATCSMutex::isUnlocked(ATCSMutex *this)
{
  pthread_t v1;

  v1 = *(pthread_t *)(*(_QWORD *)this + 64);
  return v1 != pthread_self();
}

void ATCSCondition::ATCSCondition(ATCSCondition *this, const char *a2)
{
  pthread_cond_t *v3;

  v3 = (pthread_cond_t *)malloc(0x30uLL);
  *(_QWORD *)this = v3;
  pthread_cond_init(v3, 0);
}

{
  pthread_cond_t *v3;

  v3 = (pthread_cond_t *)malloc(0x30uLL);
  *(_QWORD *)this = v3;
  pthread_cond_init(v3, 0);
}

void ATCSCondition::~ATCSCondition(pthread_cond_t **this)
{
  pthread_cond_destroy(*this);
  free(*this);
}

{
  pthread_cond_destroy(*this);
  free(*this);
}

uint64_t ATCSCondition::wait(pthread_cond_t **this, pthread_mutex_t **a2, unsigned int a3)
{
  pthread_mutex_t *v5;
  pthread_t v6;
  int v7;
  unsigned int v8;
  timespec v10;

  v5 = *a2;
  v6 = pthread_self();
  v5[1].__sig = 0;
  if ((a3 & 0x80000000) != 0)
  {
    v7 = pthread_cond_wait(*this, v5);
  }
  else
  {
    v10.tv_sec = a3 / 0x3E8uLL;
    v10.tv_nsec = 1000000 * (a3 % 0x3E8);
    v7 = pthread_cond_timedwait_relative_np(*this, v5, &v10);
  }
  v5[1].__sig = (uint64_t)v6;
  if (v7 == 60)
    v8 = 1;
  else
    v8 = -1;
  if (v7)
    return v8;
  else
    return 0;
}

uint64_t ATCSCondition::broadcast(pthread_cond_t **this)
{
  return pthread_cond_broadcast(*this);
}

uint64_t ATCSCondition::signal(pthread_cond_t **this)
{
  return pthread_cond_signal(*this);
}

void ATCSIPCDriver::ATCSIPCDriver(ATCSIPCDriver *this)
{
  *(_QWORD *)this = off_1E41532E8;
  *((_BYTE *)this + 8) = 0;
}

uint64_t ATCSIPCDriver::bootstrapInternal(uint64_t this)
{
  *(_BYTE *)(this + 8) = 1;
  return this;
}

_BYTE *ATCSIPCDriver::bootstrap(_BYTE *this)
{
  if (!this[8])
    return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 16))(this);
  return this;
}

void Tlv::Tlv(Tlv *this, char a2, size_t __sz)
{
  size_t v4;
  void *v5;

  *(_BYTE *)this = a2;
  *((_WORD *)this + 1) = __sz;
  v4 = __sz;
  v5 = operator new[](__sz);
  *((_QWORD *)this + 1) = v5;
  *((_WORD *)this + 8) = 0;
  bzero(v5, v4);
}

{
  size_t v4;
  void *v5;

  *(_BYTE *)this = a2;
  *((_WORD *)this + 1) = __sz;
  v4 = __sz;
  v5 = operator new[](__sz);
  *((_QWORD *)this + 1) = v5;
  *((_WORD *)this + 8) = 0;
  bzero(v5, v4);
}

void Tlv::Tlv(Tlv *this, char a2, size_t __sz, const void *a4)
{
  size_t v6;
  char *v7;
  uint64_t v8;

  *(_BYTE *)this = a2;
  *((_WORD *)this + 1) = __sz;
  v6 = __sz;
  v7 = (char *)operator new[](__sz);
  *((_QWORD *)this + 1) = v7;
  *((_WORD *)this + 8) = 0;
  if (a4)
  {
    v8 = 0;
  }
  else
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x1F, "src", "!=", "NULL", 0, 0);
    v7 = (char *)*((_QWORD *)this + 1);
    v8 = *((unsigned __int16 *)this + 8);
    v6 = *((unsigned __int16 *)this + 1);
  }
  memcpy(&v7[v8], a4, v6);
}

{
  size_t v6;
  char *v7;
  uint64_t v8;

  *(_BYTE *)this = a2;
  *((_WORD *)this + 1) = __sz;
  v6 = __sz;
  v7 = (char *)operator new[](__sz);
  *((_QWORD *)this + 1) = v7;
  *((_WORD *)this + 8) = 0;
  if (a4)
  {
    v8 = 0;
  }
  else
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x1F, "src", "!=", "NULL", 0, 0);
    v7 = (char *)*((_QWORD *)this + 1);
    v8 = *((unsigned __int16 *)this + 8);
    v6 = *((unsigned __int16 *)this + 1);
  }
  memcpy(&v7[v8], a4, v6);
}

void Tlv::Tlv(Tlv *this, const void **a2)
{
  size_t v4;
  void *v5;

  *(_BYTE *)this = *(_BYTE *)a2;
  v4 = *((unsigned __int16 *)a2 + 1);
  *((_WORD *)this + 1) = v4;
  v5 = operator new[](v4);
  *((_QWORD *)this + 1) = v5;
  *((_WORD *)this + 8) = 0;
  memcpy(v5, a2[1], v4);
}

{
  size_t v4;
  void *v5;

  *(_BYTE *)this = *(_BYTE *)a2;
  v4 = *((unsigned __int16 *)a2 + 1);
  *((_WORD *)this + 1) = v4;
  v5 = operator new[](v4);
  *((_QWORD *)this + 1) = v5;
  *((_WORD *)this + 8) = 0;
  memcpy(v5, a2[1], v4);
}

void Tlv::~Tlv(Tlv *this)
{
  void *v1;

  v1 = (void *)*((_QWORD *)this + 1);
  if (v1)
    operator delete[](v1);
}

{
  void *v1;

  v1 = (void *)*((_QWORD *)this + 1);
  if (v1)
    operator delete[](v1);
}

_WORD *Tlv::create(Tlv *this, unsigned int a2)
{
  char v3;
  _WORD *v4;
  void *v5;

  v3 = (char)this;
  v4 = operator new(0x18uLL);
  *(_BYTE *)v4 = v3;
  v4[1] = a2;
  v5 = operator new[](a2);
  *((_QWORD *)v4 + 1) = v5;
  v4[8] = 0;
  bzero(v5, a2);
  return v4;
}

void sub_19E9E8FA0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_WORD *Tlv::create(Tlv *this, unsigned int a2, const void *a3, const void *a4)
{
  char v6;
  _WORD *v7;
  void *v8;

  v6 = (char)this;
  v7 = operator new(0x18uLL);
  *(_BYTE *)v7 = v6;
  v7[1] = a2;
  v8 = operator new[](a2);
  *((_QWORD *)v7 + 1) = v8;
  v7[8] = 0;
  if (!a3)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x1F, "src", "!=", "NULL", 0, 0);
  memcpy(v8, a3, a2);
  return v7;
}

void sub_19E9E9054(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_WORD *Tlv::create(const void **this, const Tlv *a2)
{
  _WORD *v3;
  size_t v4;
  void *v5;

  v3 = operator new(0x18uLL);
  *(_BYTE *)v3 = *(_BYTE *)this;
  v4 = *((unsigned __int16 *)this + 1);
  v3[1] = v4;
  v5 = operator new[](v4);
  *((_QWORD *)v3 + 1) = v5;
  v3[8] = 0;
  memcpy(v5, this[1], v4);
  return v3;
}

void sub_19E9E90C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void Tlv::putByte(Tlv *this, char a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;

  v4 = *((unsigned __int16 *)this + 8);
  v5 = (const void *)*((unsigned __int16 *)this + 1);
  if (v4 >= v5)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x59, "(fIndex+1)", "<=", "fLength", (const char *)(v4 + 1), v5);
    LODWORD(v4) = *((unsigned __int16 *)this + 8);
  }
  v6 = *((_QWORD *)this + 1);
  *((_WORD *)this + 8) = v4 + 1;
  *(_BYTE *)(v6 + v4) = a2;
}

void Tlv::putWord(Tlv *this, __int16 a2)
{
  uint64_t v4;
  const char *v5;
  const void *v6;

  v4 = *((unsigned __int16 *)this + 8);
  v5 = (const char *)(v4 + 2);
  v6 = (const void *)*((unsigned __int16 *)this + 1);
  if ((int)v4 + 2 > v6)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x6B, "(fIndex+2)", "<=", "fLength", v5, v6);
    LODWORD(v4) = *((unsigned __int16 *)this + 8);
    LODWORD(v6) = *((unsigned __int16 *)this + 1);
    LODWORD(v5) = v4 + 2;
  }
  if (v5 > v6)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0xB3, "(index+2)", "<=", "fLength", (const char *)v5, (const void *)v6);
  *(_BYTE *)(*((_QWORD *)this + 1) + v4) = a2;
  *(_BYTE *)(*((_QWORD *)this + 1) + (unsigned __int16)(v4 + 1)) = HIBYTE(a2);
  *((_WORD *)this + 8) = v4 + 2;
}

uint64_t Tlv::putWordAt(Tlv *this, __int16 a2, unsigned int a3)
{
  const char *v6;
  const void *v7;

  v6 = (const char *)(a3 + 2);
  v7 = (const void *)*((unsigned __int16 *)this + 1);
  if (v6 > v7)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0xB3, "(index+2)", "<=", "fLength", v6, v7);
  *(_BYTE *)(*((_QWORD *)this + 1) + a3) = a2;
  *(_BYTE *)(*((_QWORD *)this + 1) + (unsigned __int16)(a3 + 1)) = HIBYTE(a2);
  return (unsigned __int16)v6;
}

void Tlv::putDWord(Tlv *this, int a2)
{
  uint64_t v4;
  const char *v5;
  const void *v6;

  v4 = *((unsigned __int16 *)this + 8);
  v5 = (const char *)(v4 + 4);
  v6 = (const void *)*((unsigned __int16 *)this + 1);
  if ((int)v4 + 4 > v6)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x7C, "(fIndex+4)", "<=", "fLength", v5, v6);
    LODWORD(v4) = *((unsigned __int16 *)this + 8);
    LODWORD(v6) = *((unsigned __int16 *)this + 1);
    LODWORD(v5) = v4 + 4;
  }
  if (v5 > v6)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0xCA, "(index+4)", "<=", "fLength", (const char *)v5, (const void *)v6);
  *(_BYTE *)(*((_QWORD *)this + 1) + v4) = a2;
  *(_BYTE *)(*((_QWORD *)this + 1) + (unsigned __int16)(v4 + 1)) = BYTE1(a2);
  *(_BYTE *)(*((_QWORD *)this + 1) + (unsigned __int16)(v4 + 2)) = BYTE2(a2);
  *(_BYTE *)(*((_QWORD *)this + 1) + (unsigned __int16)(v4 + 3)) = HIBYTE(a2);
  *((_WORD *)this + 8) = v4 + 4;
}

uint64_t Tlv::putDWordAt(Tlv *this, int a2, unsigned int a3)
{
  const char *v6;
  const void *v7;

  v6 = (const char *)(a3 + 4);
  v7 = (const void *)*((unsigned __int16 *)this + 1);
  if (v6 > v7)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0xCA, "(index+4)", "<=", "fLength", v6, v7);
  *(_BYTE *)(*((_QWORD *)this + 1) + a3) = a2;
  *(_BYTE *)(*((_QWORD *)this + 1) + (unsigned __int16)(a3 + 1)) = BYTE1(a2);
  *(_BYTE *)(*((_QWORD *)this + 1) + (unsigned __int16)(a3 + 2)) = BYTE2(a2);
  *(_BYTE *)(*((_QWORD *)this + 1) + (unsigned __int16)(a3 + 3)) = HIBYTE(a2);
  return (unsigned __int16)v6;
}

uint64_t Tlv::putQWord(Tlv *this, const unint64_t *a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t result;

  v4 = *((unsigned __int16 *)this + 8);
  v5 = (const void *)*((unsigned __int16 *)this + 1);
  if ((int)v4 + 8 > v5)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x8D, "(fIndex+8)", "<=", "fLength", (const char *)(v4 + 8), v5);
    LODWORD(v4) = *((unsigned __int16 *)this + 8);
  }
  result = Tlv::putQWordAt(this, a2, v4);
  *((_WORD *)this + 8) = result;
  return result;
}

uint64_t Tlv::putQWordAt(Tlv *this, const unint64_t *a2, unsigned int a3)
{
  const char *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  const void *v11;

  v6 = (const char *)(a3 + 8);
  v7 = (const void *)*((unsigned __int16 *)this + 1);
  if (v6 > v7)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0xE4, "(index+8)", "<=", "fLength", v6, v7);
    LODWORD(v7) = *((unsigned __int16 *)this + 1);
  }
  v8 = *a2;
  if (a3 + 4 > v7)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0xCA, "(index+4)", "<=", "fLength", (const char *)(a3 + 4), (const void *)v7);
  *(_BYTE *)(*((_QWORD *)this + 1) + a3) = v8;
  *(_BYTE *)(*((_QWORD *)this + 1) + (unsigned __int16)(a3 + 1)) = BYTE1(v8);
  *(_BYTE *)(*((_QWORD *)this + 1) + (unsigned __int16)(a3 + 2)) = BYTE2(v8);
  *(_BYTE *)(*((_QWORD *)this + 1) + (unsigned __int16)(a3 + 3)) = BYTE3(v8);
  v9 = *a2;
  v10 = (const char *)((unsigned __int16)(a3 + 4) + 4);
  v11 = (const void *)*((unsigned __int16 *)this + 1);
  if (v10 > v11)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0xCA, "(index+4)", "<=", "fLength", v10, v11);
  *(_BYTE *)(*((_QWORD *)this + 1) + (unsigned __int16)(a3 + 4)) = BYTE4(v9);
  *(_BYTE *)(*((_QWORD *)this + 1) + (unsigned __int16)(a3 + 5)) = BYTE5(v9);
  *(_BYTE *)(*((_QWORD *)this + 1) + (unsigned __int16)(a3 + 6)) = BYTE6(v9);
  *(_BYTE *)(*((_QWORD *)this + 1) + (unsigned __int16)(a3 + 7)) = HIBYTE(v9);
  return (unsigned __int16)(a3 + 8);
}

void Tlv::putByteAt(Tlv *this, char a2, unsigned int a3)
{
  const void *v5;
  uint64_t v6;

  v5 = (const void *)*((unsigned __int16 *)this + 1);
  v6 = a3;
  if (v5 <= a3)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x9F, "(index+1)", "<=", "fLength", (const char *)(a3 + 1), v5);
  *(_BYTE *)(*((_QWORD *)this + 1) + v6) = a2;
}

char *Tlv::putStringField(uint64_t a1, uint64_t a2)
{
  int v4;
  size_t v5;
  uint64_t v6;
  const void *v7;
  const char *v8;
  char *result;

  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = *(unsigned __int8 *)(a2 + 23);
  else
    v5 = *(_QWORD *)(a2 + 8);
  v6 = *(unsigned __int16 *)(a1 + 16);
  v7 = (const void *)*(unsigned __int16 *)(a1 + 2);
  if (v5 + v6 > (unint64_t)v7)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0xFC, "(fIndex + strlen)", "<=", "fLength", (const char *)(v5 + v6), v7);
    v6 = *(unsigned __int16 *)(a1 + 16);
    LOBYTE(v4) = *(_BYTE *)(a2 + 23);
  }
  if ((v4 & 0x80u) == 0)
    v8 = (const char *)a2;
  else
    v8 = *(const char **)a2;
  result = strncpy((char *)(*(_QWORD *)(a1 + 8) + v6), v8, v5);
  *(_WORD *)(a1 + 16) += v5;
  return result;
}

void *Tlv::putData(Tlv *this, const void *__src, size_t __n)
{
  unsigned int v3;
  const char *v6;
  const void *v7;
  void *result;

  v3 = __n;
  v6 = (const char *)(*((unsigned __int16 *)this + 8) + __n);
  v7 = (const void *)*((unsigned __int16 *)this + 1);
  if (v6 > v7)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x110, "(fIndex + length)", "<=", "fLength", v6, v7);
  if (!__src)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x111, "src", "!=", "NULL", 0, 0);
  result = memcpy((void *)(*((_QWORD *)this + 1) + *((unsigned __int16 *)this + 8)), __src, v3);
  *((_WORD *)this + 8) += v3;
  return result;
}

uint64_t Tlv::getByte(Tlv *this)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;

  v2 = *((unsigned __int16 *)this + 8);
  v3 = (const void *)*((unsigned __int16 *)this + 1);
  if (v2 >= v3)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x125, "(fIndex+1)", "<=", "fLength", (const char *)(v2 + 1), v3);
    LODWORD(v2) = *((unsigned __int16 *)this + 8);
  }
  v4 = *((_QWORD *)this + 1);
  *((_WORD *)this + 8) = v2 + 1;
  return *(unsigned __int8 *)(v4 + v2);
}

uint64_t Tlv::getWord(Tlv *this)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  __int16 v5;

  v2 = *((unsigned __int16 *)this + 8);
  v3 = (const void *)*((unsigned __int16 *)this + 1);
  if ((int)v2 + 2 > v3)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x138, "(fIndex+2)", "<=", "fLength", (const char *)(v2 + 2), v3);
    LODWORD(v2) = *((unsigned __int16 *)this + 8);
  }
  v4 = *((_QWORD *)this + 1);
  *((_WORD *)this + 8) = v2 + 1;
  v5 = *(unsigned __int8 *)(v4 + v2);
  *((_WORD *)this + 8) = v2 + 2;
  return (unsigned __int16)(v5 | (*(unsigned __int8 *)(v4 + (unsigned __int16)(v2 + 1)) << 8));
}

uint64_t Tlv::getDWord(Tlv *this)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;

  v2 = *((unsigned __int16 *)this + 8);
  v3 = (const void *)*((unsigned __int16 *)this + 1);
  if ((int)v2 + 4 > v3)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x14E, "(fIndex+4)", "<=", "fLength", (const char *)(v2 + 4), v3);
    LODWORD(v2) = *((unsigned __int16 *)this + 8);
  }
  v4 = *((_QWORD *)this + 1);
  *((_WORD *)this + 8) = v2 + 1;
  v5 = *(unsigned __int8 *)(v4 + v2);
  *((_WORD *)this + 8) = v2 + 2;
  v6 = *(unsigned __int8 *)(v4 + (unsigned __int16)(v2 + 1));
  *((_WORD *)this + 8) = v2 + 3;
  v7 = *(unsigned __int8 *)(v4 + (unsigned __int16)(v2 + 2));
  *((_WORD *)this + 8) = v2 + 4;
  return v5 | (v6 << 8) | (v7 << 16) | (*(unsigned __int8 *)(v4 + (unsigned __int16)(v2 + 3)) << 24);
}

unint64_t Tlv::getQWord(Tlv *this)
{
  uint64_t v2;
  const void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *((unsigned __int16 *)this + 8);
  v3 = (const void *)*((unsigned __int16 *)this + 1);
  if ((int)v2 + 8 > v3)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x16A, "(fIndex+8)", "<=", "fLength", (const char *)(v2 + 8), v3);
    LODWORD(v2) = *((unsigned __int16 *)this + 8);
    LODWORD(v3) = *((unsigned __int16 *)this + 1);
  }
  v4 = (const char *)(v2 + 4);
  if (v4 > v3)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x14E, "(fIndex+4)", "<=", "fLength", v4, (const void *)v3);
    LODWORD(v2) = *((unsigned __int16 *)this + 8);
    LODWORD(v3) = *((unsigned __int16 *)this + 1);
  }
  v5 = *((_QWORD *)this + 1);
  *((_WORD *)this + 8) = v2 + 1;
  v6 = *(unsigned __int8 *)(v5 + v2);
  *((_WORD *)this + 8) = v2 + 2;
  v7 = *(unsigned __int8 *)(v5 + (unsigned __int16)(v2 + 1));
  v8 = v2 + 3;
  *((_WORD *)this + 8) = v2 + 3;
  v9 = *(unsigned __int8 *)(v5 + (unsigned __int16)(v2 + 2));
  v10 = v2 + 4;
  *((_WORD *)this + 8) = v10;
  v11 = *(unsigned __int8 *)(v5 + v8);
  v12 = (const char *)(v10 + 4);
  if (v12 > v3)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x14E, "(fIndex+4)", "<=", "fLength", v12, (const void *)v3);
    v10 = *((_WORD *)this + 8);
    v5 = *((_QWORD *)this + 1);
  }
  *((_WORD *)this + 8) = v10 + 1;
  v13 = *(unsigned __int8 *)(v5 + v10);
  *((_WORD *)this + 8) = v10 + 2;
  v14 = *(unsigned __int8 *)(v5 + (unsigned __int16)(v10 + 1));
  *((_WORD *)this + 8) = v10 + 3;
  v15 = *(unsigned __int8 *)(v5 + (unsigned __int16)(v10 + 2));
  *((_WORD *)this + 8) = v10 + 4;
  return v6 | (v7 << 8) | (v9 << 16) | (v11 << 24) | (v13 << 32) | (v14 << 40) | (v15 << 48) | ((unint64_t)*(unsigned __int8 *)(v5 + (unsigned __int16)(v10 + 3)) << 56);
}

uint64_t Tlv::getByteAt(Tlv *this, unsigned int a2)
{
  const void *v3;
  uint64_t v4;

  v3 = (const void *)*((unsigned __int16 *)this + 1);
  v4 = a2;
  if (v3 <= a2)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x17F, "(index+1)", "<=", "fLength", (const char *)(a2 + 1), v3);
  return *(unsigned __int8 *)(*((_QWORD *)this + 1) + v4);
}

uint64_t Tlv::getWordAt(Tlv *this, unsigned int a2)
{
  const char *v4;
  const void *v5;

  v4 = (const char *)(a2 + 2);
  v5 = (const void *)*((unsigned __int16 *)this + 1);
  if (v4 > v5)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x191, "(index+2)", "<=", "fLength", v4, v5);
  return (unsigned __int16)(*(unsigned __int8 *)(*((_QWORD *)this + 1) + a2) | (*(unsigned __int8 *)(*((_QWORD *)this + 1) + (unsigned __int16)(a2 + 1)) << 8));
}

uint64_t Tlv::getDWordAt(Tlv *this, unsigned int a2)
{
  const char *v4;
  const void *v5;
  uint64_t v6;

  v4 = (const char *)(a2 + 4);
  v5 = (const void *)*((unsigned __int16 *)this + 1);
  if (v4 > v5)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x1A6, "(index+4)", "<=", "fLength", v4, v5);
  v6 = *((_QWORD *)this + 1);
  return *(unsigned __int8 *)(v6 + a2) | (*(unsigned __int8 *)(v6 + (unsigned __int16)(a2 + 1)) << 8) | (*(unsigned __int8 *)(v6 + (unsigned __int16)(a2 + 2)) << 16) | (*(unsigned __int8 *)(v6 + (unsigned __int16)(a2 + 3)) << 24);
}

unint64_t Tlv::getQWordAt(Tlv *this, unsigned int a2)
{
  const char *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;

  v4 = (const char *)(a2 + 8);
  v5 = (const void *)*((unsigned __int16 *)this + 1);
  if (v4 > v5)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x1C2, "(index+8)", "<=", "fLength", v4, v5);
    LODWORD(v5) = *((unsigned __int16 *)this + 1);
  }
  if (a2 + 4 > v5)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x1A6, "(index+4)", "<=", "fLength", (const char *)(a2 + 4), (const void *)v5);
    LODWORD(v5) = *((unsigned __int16 *)this + 1);
  }
  v6 = *((_QWORD *)this + 1);
  v7 = *(unsigned __int8 *)(v6 + a2);
  v8 = *(unsigned __int8 *)(v6 + (unsigned __int16)(a2 + 1));
  v9 = *(unsigned __int8 *)(v6 + (unsigned __int16)(a2 + 2));
  v10 = *(unsigned __int8 *)(v6 + (unsigned __int16)(a2 + 3));
  v11 = (const char *)((unsigned __int16)(a2 + 4) + 4);
  if (v11 > v5)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x1A6, "(index+4)", "<=", "fLength", v11, (const void *)v5);
    v6 = *((_QWORD *)this + 1);
  }
  return v7 | (v8 << 8) | (v9 << 16) | (v10 << 24) | ((unint64_t)*(unsigned __int8 *)(v6
                                                                                           + (unsigned __int16)(a2 + 4)) << 32) | ((unint64_t)*(unsigned __int8 *)(v6 + (unsigned __int16)(a2 + 5)) << 40) | ((unint64_t)*(unsigned __int8 *)(v6 + (unsigned __int16)(a2 + 6)) << 48) | ((unint64_t)*(unsigned __int8 *)(v6 + (unsigned __int16)(a2 + 7)) << 56);
}

std::string *Tlv::getStringField@<X0>(Tlv *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  unsigned int v5;
  std::string *result;
  __int16 v7;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = *((unsigned __int16 *)this + 1);
  v5 = *((unsigned __int16 *)this + 8);
  if (v4 <= (int)v5)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x1DA, "(fLength - fIndex)", ">", "0", (const char *)(int)(v4 - v5), 0);
    LOWORD(v4) = *((_WORD *)this + 1);
    v5 = *((unsigned __int16 *)this + 8);
  }
  result = std::string::__assign_external((std::string *)a2, (const std::string::value_type *)(*((_QWORD *)this + 1) + v5), (unsigned __int16)(v4 - v5));
  v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) != 0)
    v7 = *(_WORD *)(a2 + 8);
  *((_WORD *)this + 8) += v7;
  return result;
}

void sub_19E9E9EB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *Tlv::getStringFieldAt@<X0>(Tlv *this@<X0>, unsigned int a2@<W1>, std::string *a3@<X8>)
{
  int v6;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  v6 = *((unsigned __int16 *)this + 1);
  if (v6 <= (int)a2)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x1F4, "(fLength - index)", ">", "0", (const char *)(int)(v6 - a2), 0);
    LOWORD(v6) = *((_WORD *)this + 1);
  }
  return std::string::__assign_external(a3, (const std::string::value_type *)(*((_QWORD *)this + 1) + a2), (unsigned __int16)(v6 - a2));
}

void sub_19E9E9F58(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t Tlv::getData(Tlv *this, int a2)
{
  __int16 v2;
  unsigned int v4;
  const char *v5;
  const void *v6;

  v2 = a2;
  v4 = *((unsigned __int16 *)this + 8);
  v5 = (const char *)(v4 + a2);
  v6 = (const void *)*((unsigned __int16 *)this + 1);
  if (v5 > v6)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x20C, "(fIndex + length)", "<=", "fLength", v5, v6);
    v4 = *((unsigned __int16 *)this + 8);
  }
  *((_WORD *)this + 8) = v4 + v2;
  return *((_QWORD *)this + 1) + v4;
}

uint64_t Tlv::getDataAt(Tlv *this, unsigned int a2, int a3)
{
  const char *v5;
  const void *v6;

  v5 = (const char *)(a3 + a2);
  v6 = (const void *)*((unsigned __int16 *)this + 1);
  if (v5 > v6)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x226, "(index + length)", "<=", "fLength", v5, v6);
  return *((_QWORD *)this + 1) + a2;
}

void Tlv::Writer::putByte(Tlv::Writer *this, char a2)
{
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;

  v4 = *((unsigned __int16 *)this + 4);
  v5 = *(_QWORD *)this;
  v6 = (const void *)*(unsigned __int16 *)(*(_QWORD *)this + 2);
  if (v4 >= v6)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x230, "(fIndex+1)", "<=", "fTlv->getLength()", (const char *)(v4 + 1), v6);
    v5 = *(_QWORD *)this;
    LODWORD(v4) = *((unsigned __int16 *)this + 4);
  }
  v7 = *(_QWORD *)(v5 + 8);
  *((_WORD *)this + 4) = v4 + 1;
  *(_BYTE *)(v7 + v4) = a2;
}

void Tlv::Writer::putWord(Tlv::Writer *this, __int16 a2)
{
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;

  v4 = *((unsigned __int16 *)this + 4);
  v5 = *(_QWORD *)this;
  v6 = (const void *)*(unsigned __int16 *)(*(_QWORD *)this + 2);
  if ((int)v4 + 2 > v6)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x257, "(index+2)", "<=", "fTlv->getLength()", (const char *)(v4 + 2), v6);
    v5 = *(_QWORD *)this;
  }
  v7 = *(_QWORD *)(v5 + 8);
  *(_BYTE *)(v7 + v4) = a2;
  *(_BYTE *)(v7 + (unsigned __int16)(v4 + 1)) = HIBYTE(a2);
  *((_WORD *)this + 4) = v4 + 2;
}

uint64_t Tlv::Writer::putWordAt(Tlv::Writer *this, __int16 a2, unsigned int a3)
{
  const char *v5;
  uint64_t v6;
  const void *v7;
  uint64_t v9;

  v5 = (const char *)(a3 + 2);
  v6 = *(_QWORD *)this;
  v7 = (const void *)*(unsigned __int16 *)(*(_QWORD *)this + 2);
  if (v5 > v7)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x257, "(index+2)", "<=", "fTlv->getLength()", v5, v7);
    v6 = *(_QWORD *)this;
  }
  v9 = *(_QWORD *)(v6 + 8);
  *(_BYTE *)(v9 + a3) = a2;
  *(_BYTE *)(v9 + (unsigned __int16)(a3 + 1)) = HIBYTE(a2);
  return (unsigned __int16)v5;
}

void Tlv::Writer::putDWord(Tlv::Writer *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;

  v4 = *((unsigned __int16 *)this + 4);
  v5 = *(_QWORD *)this;
  v6 = (const void *)*(unsigned __int16 *)(*(_QWORD *)this + 2);
  if ((int)v4 + 4 > v6)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x262, "(index+4)", "<=", "fTlv->getLength()", (const char *)(v4 + 4), v6);
    v5 = *(_QWORD *)this;
  }
  v7 = *(_QWORD *)(v5 + 8);
  *(_BYTE *)(v7 + v4) = a2;
  *(_BYTE *)(v7 + (unsigned __int16)(v4 + 1)) = BYTE1(a2);
  *(_BYTE *)(v7 + (unsigned __int16)(v4 + 2)) = BYTE2(a2);
  *(_BYTE *)(v7 + (unsigned __int16)(v4 + 3)) = HIBYTE(a2);
  *((_WORD *)this + 4) = v4 + 4;
}

uint64_t Tlv::Writer::putDWordAt(Tlv::Writer *this, int a2, unsigned int a3)
{
  const char *v5;
  uint64_t v6;
  const void *v7;
  uint64_t v9;

  v5 = (const char *)(a3 + 4);
  v6 = *(_QWORD *)this;
  v7 = (const void *)*(unsigned __int16 *)(*(_QWORD *)this + 2);
  if (v5 > v7)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x262, "(index+4)", "<=", "fTlv->getLength()", v5, v7);
    v6 = *(_QWORD *)this;
  }
  v9 = *(_QWORD *)(v6 + 8);
  *(_BYTE *)(v9 + a3) = a2;
  *(_BYTE *)(v9 + (unsigned __int16)(a3 + 1)) = BYTE1(a2);
  *(_BYTE *)(v9 + (unsigned __int16)(a3 + 2)) = BYTE2(a2);
  *(_BYTE *)(v9 + (unsigned __int16)(a3 + 3)) = HIBYTE(a2);
  return (unsigned __int16)v5;
}

uint64_t Tlv::Writer::putQWord(Tlv::Writer *this, uint64_t a2)
{
  uint64_t result;

  result = Tlv::Writer::putQWordAt(this, a2, *((unsigned __int16 *)this + 4));
  *((_WORD *)this + 4) = result;
  return result;
}

uint64_t Tlv::Writer::putQWordAt(Tlv::Writer *this, uint64_t a2, unsigned int a3)
{
  const char *v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;

  v6 = (const char *)(a3 + 8);
  v7 = *(_QWORD *)this;
  v8 = (const void *)*(unsigned __int16 *)(*(_QWORD *)this + 2);
  if (v6 > v8)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x26F, "(index+8)", "<=", "fTlv->getLength()", v6, v8);
    v7 = *(_QWORD *)this;
    LODWORD(v8) = *(unsigned __int16 *)(*(_QWORD *)this + 2);
  }
  if (a3 + 4 > v8)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x262, "(index+4)", "<=", "fTlv->getLength()", (const char *)(a3 + 4), (const void *)v8);
    v7 = *(_QWORD *)this;
  }
  v9 = *(_QWORD *)(v7 + 8);
  *(_BYTE *)(v9 + a3) = a2;
  *(_BYTE *)(v9 + (unsigned __int16)(a3 + 1)) = BYTE1(a2);
  *(_BYTE *)(v9 + (unsigned __int16)(a3 + 2)) = BYTE2(a2);
  *(_BYTE *)(v9 + (unsigned __int16)(a3 + 3)) = BYTE3(a2);
  v10 = (const char *)((unsigned __int16)(a3 + 4) + 4);
  v11 = *(_QWORD *)this;
  v12 = (const void *)*(unsigned __int16 *)(*(_QWORD *)this + 2);
  if (v10 > v12)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x262, "(index+4)", "<=", "fTlv->getLength()", v10, v12);
    v11 = *(_QWORD *)this;
  }
  v13 = *(_QWORD *)(v11 + 8);
  *(_BYTE *)(v13 + (unsigned __int16)(a3 + 4)) = BYTE4(a2);
  *(_BYTE *)(v13 + (unsigned __int16)(a3 + 5)) = BYTE5(a2);
  *(_BYTE *)(v13 + (unsigned __int16)(a3 + 6)) = BYTE6(a2);
  *(_BYTE *)(v13 + (unsigned __int16)(a3 + 7)) = HIBYTE(a2);
  return (unsigned __int16)(a3 + 8);
}

void Tlv::Writer::putFloat(Tlv::Writer *this, float a2)
{
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;

  v4 = *((unsigned __int16 *)this + 4);
  v5 = *(_QWORD *)this;
  v6 = (const void *)*(unsigned __int16 *)(*(_QWORD *)this + 2);
  if ((int)v4 + 4 > v6)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x262, "(index+4)", "<=", "fTlv->getLength()", (const char *)(v4 + 4), v6);
    v5 = *(_QWORD *)this;
  }
  v7 = *(_QWORD *)(v5 + 8);
  *(_BYTE *)(v7 + v4) = LOBYTE(a2);
  *(_BYTE *)(v7 + (unsigned __int16)(v4 + 1)) = BYTE1(a2);
  *(_BYTE *)(v7 + (unsigned __int16)(v4 + 2)) = BYTE2(a2);
  *(_BYTE *)(v7 + (unsigned __int16)(v4 + 3)) = HIBYTE(a2);
  *((_WORD *)this + 4) = v4 + 4;
}

uint64_t Tlv::Writer::putFloatAt(Tlv::Writer *this, float a2, unsigned int a3)
{
  const char *v5;
  uint64_t v6;
  const void *v7;
  uint64_t v9;

  v5 = (const char *)(a3 + 4);
  v6 = *(_QWORD *)this;
  v7 = (const void *)*(unsigned __int16 *)(*(_QWORD *)this + 2);
  if (v5 > v7)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x262, "(index+4)", "<=", "fTlv->getLength()", v5, v7);
    v6 = *(_QWORD *)this;
  }
  v9 = *(_QWORD *)(v6 + 8);
  *(_BYTE *)(v9 + a3) = LOBYTE(a2);
  *(_BYTE *)(v9 + (unsigned __int16)(a3 + 1)) = BYTE1(a2);
  *(_BYTE *)(v9 + (unsigned __int16)(a3 + 2)) = BYTE2(a2);
  *(_BYTE *)(v9 + (unsigned __int16)(a3 + 3)) = HIBYTE(a2);
  return (unsigned __int16)v5;
}

uint64_t Tlv::Writer::putDouble(Tlv::Writer *this, double a2)
{
  uint64_t result;

  result = Tlv::Writer::putQWordAt(this, *(uint64_t *)&a2, *((unsigned __int16 *)this + 4));
  *((_WORD *)this + 4) = result;
  return result;
}

uint64_t Tlv::Writer::putDoubleAt(Tlv::Writer *this, double a2, unsigned int a3)
{
  return Tlv::Writer::putQWordAt(this, *(uint64_t *)&a2, a3);
}

void Tlv::Writer::putByteAt(Tlv::Writer *this, char a2, unsigned int a3)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;

  v4 = *(_QWORD *)this;
  v5 = (const void *)*(unsigned __int16 *)(*(_QWORD *)this + 2);
  v6 = a3;
  if (v5 <= a3)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x24F, "(index+1)", "<=", "fTlv->getLength()", (const char *)(a3 + 1), v5);
    v4 = *(_QWORD *)this;
  }
  *(_BYTE *)(*(_QWORD *)(v4 + 8) + v6) = a2;
}

void *Tlv::Writer::putStringField(unsigned __int16 *a1, const void **a2)
{
  int v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  void *result;

  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  v6 = a1[4];
  v7 = *(_QWORD *)a1;
  v8 = (const void *)*(unsigned __int16 *)(*(_QWORD *)a1 + 2);
  if (v5 + v6 > (unint64_t)v8)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x289, "(fIndex + strlen)", "<=", "fTlv->getLength()", (const char *)(v5 + v6), v8);
    v7 = *(_QWORD *)a1;
    v6 = a1[4];
    LOBYTE(v4) = *((_BYTE *)a2 + 23);
  }
  if ((v4 & 0x80u) == 0)
    v9 = a2;
  else
    v9 = *a2;
  result = memcpy((void *)(*(_QWORD *)(v7 + 8) + v6), v9, v5);
  a1[4] += v5;
  return result;
}

void *Tlv::Writer::putData(Tlv::Writer *this, const void *__src, size_t __n)
{
  unsigned int v3;
  const char *v6;
  const void *v7;
  void *result;

  v3 = __n;
  v6 = (const char *)(*((unsigned __int16 *)this + 4) + __n);
  v7 = (const void *)*(unsigned __int16 *)(*(_QWORD *)this + 2);
  if (v6 > v7)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x293, "(fIndex + length)", "<=", "fTlv->getLength()", v6, v7);
  if (!__src)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x294, "src", "!=", "NULL", 0, 0);
  result = memcpy((void *)(*(_QWORD *)(*(_QWORD *)this + 8) + *((unsigned __int16 *)this + 4)), __src, v3);
  *((_WORD *)this + 4) += v3;
  return result;
}

uint64_t Tlv::Reader::getByte(Tlv::Reader *this)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;

  v2 = *((unsigned __int16 *)this + 4);
  v3 = *(_QWORD *)this;
  v4 = (const void *)*(unsigned __int16 *)(*(_QWORD *)this + 2);
  if (v2 >= v4)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x29F, "(fIndex+1)", "<=", "fTlv->getLength()", (const char *)(v2 + 1), v4);
    v3 = *(_QWORD *)this;
    LODWORD(v2) = *((unsigned __int16 *)this + 4);
  }
  v5 = *(_QWORD *)(v3 + 8);
  *((_WORD *)this + 4) = v2 + 1;
  return *(unsigned __int8 *)(v5 + v2);
}

uint64_t Tlv::Reader::getWord(Tlv::Reader *this)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  __int16 v6;

  v2 = *((unsigned __int16 *)this + 4);
  v3 = *(_QWORD *)this;
  v4 = (const void *)*(unsigned __int16 *)(*(_QWORD *)this + 2);
  if ((int)v2 + 2 > v4)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x2A7, "(fIndex+2)", "<=", "fTlv->getLength()", (const char *)(v2 + 2), v4);
    v3 = *(_QWORD *)this;
    LODWORD(v2) = *((unsigned __int16 *)this + 4);
  }
  v5 = *(_QWORD *)(v3 + 8);
  *((_WORD *)this + 4) = v2 + 1;
  v6 = *(unsigned __int8 *)(v5 + v2);
  *((_WORD *)this + 4) = v2 + 2;
  return (unsigned __int16)(v6 | (*(unsigned __int8 *)(v5 + (unsigned __int16)(v2 + 1)) << 8));
}

uint64_t Tlv::Reader::getDWord(Tlv::Reader *this)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;

  v2 = *((unsigned __int16 *)this + 4);
  v3 = *(_QWORD *)this;
  v4 = (const void *)*(unsigned __int16 *)(*(_QWORD *)this + 2);
  if ((int)v2 + 4 > v4)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x2B2, "(fIndex+4)", "<=", "fTlv->getLength()", (const char *)(v2 + 4), v4);
    v3 = *(_QWORD *)this;
    LODWORD(v2) = *((unsigned __int16 *)this + 4);
  }
  v5 = *(_QWORD *)(v3 + 8);
  *((_WORD *)this + 4) = v2 + 1;
  v6 = *(unsigned __int8 *)(v5 + v2);
  *((_WORD *)this + 4) = v2 + 2;
  v7 = *(unsigned __int8 *)(v5 + (unsigned __int16)(v2 + 1));
  *((_WORD *)this + 4) = v2 + 3;
  v8 = *(unsigned __int8 *)(v5 + (unsigned __int16)(v2 + 2));
  *((_WORD *)this + 4) = v2 + 4;
  return v6 | (v7 << 8) | (v8 << 16) | (*(unsigned __int8 *)(v5 + (unsigned __int16)(v2 + 3)) << 24);
}

unint64_t Tlv::Reader::getQWord(Tlv::Reader *this)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *((unsigned __int16 *)this + 4);
  v3 = *(_QWORD *)this;
  v4 = (const void *)*(unsigned __int16 *)(*(_QWORD *)this + 2);
  if ((int)v2 + 8 > v4)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x2C2, "(fIndex+8)", "<=", "fTlv->getLength()", (const char *)(v2 + 8), v4);
    LODWORD(v2) = *((unsigned __int16 *)this + 4);
    v3 = *(_QWORD *)this;
    LODWORD(v4) = *(unsigned __int16 *)(*(_QWORD *)this + 2);
  }
  if ((int)v2 + 4 > v4)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x2B2, "(fIndex+4)", "<=", "fTlv->getLength()", (const char *)(v2 + 4), (const void *)v4);
    v3 = *(_QWORD *)this;
    LODWORD(v2) = *((unsigned __int16 *)this + 4);
    LODWORD(v4) = *(unsigned __int16 *)(*(_QWORD *)this + 2);
  }
  v5 = *(_QWORD *)(v3 + 8);
  *((_WORD *)this + 4) = v2 + 1;
  v6 = *(unsigned __int8 *)(v5 + v2);
  *((_WORD *)this + 4) = v2 + 2;
  v7 = *(unsigned __int8 *)(v5 + (unsigned __int16)(v2 + 1));
  v8 = v2 + 3;
  *((_WORD *)this + 4) = v2 + 3;
  v9 = *(unsigned __int8 *)(v5 + (unsigned __int16)(v2 + 2));
  v10 = v2 + 4;
  *((_WORD *)this + 4) = v10;
  v11 = *(unsigned __int8 *)(v5 + v8);
  if (v10 + 4 > v4)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x2B2, "(fIndex+4)", "<=", "fTlv->getLength()", (const char *)(v10 + 4), (const void *)v4);
    v10 = *((_WORD *)this + 4);
    v5 = *(_QWORD *)(*(_QWORD *)this + 8);
  }
  *((_WORD *)this + 4) = v10 + 1;
  v12 = *(unsigned __int8 *)(v5 + v10);
  *((_WORD *)this + 4) = v10 + 2;
  v13 = *(unsigned __int8 *)(v5 + (unsigned __int16)(v10 + 1));
  *((_WORD *)this + 4) = v10 + 3;
  v14 = *(unsigned __int8 *)(v5 + (unsigned __int16)(v10 + 2));
  *((_WORD *)this + 4) = v10 + 4;
  return v6 | (v7 << 8) | (v9 << 16) | (v11 << 24) | (v12 << 32) | (v13 << 40) | (v14 << 48) | ((unint64_t)*(unsigned __int8 *)(v5 + (unsigned __int16)(v10 + 3)) << 56);
}

uint64_t Tlv::Reader::getByteAt(Tlv::Reader *this, unsigned int a2)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;

  v2 = *(_QWORD *)this;
  v3 = (const void *)*(unsigned __int16 *)(*(_QWORD *)this + 2);
  v4 = a2;
  if (v3 <= a2)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x2CC, "(index+1)", "<=", "fTlv->getLength()", (const char *)(a2 + 1), v3);
    v2 = *(_QWORD *)this;
  }
  return *(unsigned __int8 *)(*(_QWORD *)(v2 + 8) + v4);
}

uint64_t Tlv::Reader::getWordAt(Tlv::Reader *this, unsigned int a2)
{
  const char *v3;
  uint64_t v4;
  const void *v5;

  v3 = (const char *)(a2 + 2);
  v4 = *(_QWORD *)this;
  v5 = (const void *)*(unsigned __int16 *)(*(_QWORD *)this + 2);
  if (v3 > v5)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x2D4, "(index+2)", "<=", "fTlv->getLength()", v3, v5);
    v4 = *(_QWORD *)this;
  }
  return (unsigned __int16)(*(unsigned __int8 *)(*(_QWORD *)(v4 + 8) + a2) | (*(unsigned __int8 *)(*(_QWORD *)(v4 + 8)
                                                                                                 + (unsigned __int16)(a2 + 1)) << 8));
}

uint64_t Tlv::Reader::getDWordAt(Tlv::Reader *this, unsigned int a2)
{
  const char *v3;
  uint64_t v4;
  const void *v5;
  uint64_t v7;

  v3 = (const char *)(a2 + 4);
  v4 = *(_QWORD *)this;
  v5 = (const void *)*(unsigned __int16 *)(*(_QWORD *)this + 2);
  if (v3 > v5)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x2DF, "(index+4)", "<=", "fTlv->getLength()", v3, v5);
    v4 = *(_QWORD *)this;
  }
  v7 = *(_QWORD *)(v4 + 8);
  return *(unsigned __int8 *)(v7 + a2) | (*(unsigned __int8 *)(v7 + (unsigned __int16)(a2 + 1)) << 8) | (*(unsigned __int8 *)(v7 + (unsigned __int16)(a2 + 2)) << 16) | (*(unsigned __int8 *)(v7 + (unsigned __int16)(a2 + 3)) << 24);
}

unint64_t Tlv::Reader::getQWordAt(Tlv::Reader *this, unsigned int a2)
{
  const char *v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;

  v4 = (const char *)(a2 + 8);
  v5 = *(_QWORD *)this;
  v6 = (const void *)*(unsigned __int16 *)(*(_QWORD *)this + 2);
  if (v4 > v6)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x2F0, "(index+8)", "<=", "fTlv->getLength()", v4, v6);
    v5 = *(_QWORD *)this;
    LODWORD(v6) = *(unsigned __int16 *)(*(_QWORD *)this + 2);
  }
  if (a2 + 4 > v6)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x2DF, "(index+4)", "<=", "fTlv->getLength()", (const char *)(a2 + 4), (const void *)v6);
    v5 = *(_QWORD *)this;
    LODWORD(v6) = *(unsigned __int16 *)(*(_QWORD *)this + 2);
  }
  v7 = *(_QWORD *)(v5 + 8);
  v8 = *(unsigned __int8 *)(v7 + a2);
  v9 = *(unsigned __int8 *)(v7 + (unsigned __int16)(a2 + 1));
  v10 = *(unsigned __int8 *)(v7 + (unsigned __int16)(a2 + 2));
  v11 = *(unsigned __int8 *)(v7 + (unsigned __int16)(a2 + 3));
  v12 = (const char *)((unsigned __int16)(a2 + 4) + 4);
  if (v12 > v6)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x2DF, "(index+4)", "<=", "fTlv->getLength()", v12, (const void *)v6);
    v7 = *(_QWORD *)(*(_QWORD *)this + 8);
  }
  return v8 | (v9 << 8) | (v10 << 16) | (v11 << 24) | ((unint64_t)*(unsigned __int8 *)(v7
                                                                                            + (unsigned __int16)(a2 + 4)) << 32) | ((unint64_t)*(unsigned __int8 *)(v7 + (unsigned __int16)(a2 + 5)) << 40) | ((unint64_t)*(unsigned __int8 *)(v7 + (unsigned __int16)(a2 + 6)) << 48) | ((unint64_t)*(unsigned __int8 *)(v7 + (unsigned __int16)(a2 + 7)) << 56);
}

float Tlv::Reader::getFloat(Tlv::Reader *this)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  float result;

  v2 = *((unsigned __int16 *)this + 4);
  v3 = *(_QWORD *)this;
  v4 = (const void *)*(unsigned __int16 *)(*(_QWORD *)this + 2);
  if ((int)v2 + 4 > v4)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x2B2, "(fIndex+4)", "<=", "fTlv->getLength()", (const char *)(v2 + 4), v4);
    v3 = *(_QWORD *)this;
    LODWORD(v2) = *((unsigned __int16 *)this + 4);
  }
  v5 = *(_QWORD *)(v3 + 8);
  *((_WORD *)this + 4) = v2 + 1;
  v6 = *(unsigned __int8 *)(v5 + v2);
  *((_WORD *)this + 4) = v2 + 2;
  v7 = *(unsigned __int8 *)(v5 + (unsigned __int16)(v2 + 1));
  *((_WORD *)this + 4) = v2 + 3;
  v8 = *(unsigned __int8 *)(v5 + (unsigned __int16)(v2 + 2));
  *((_WORD *)this + 4) = v2 + 4;
  LODWORD(result) = v6 | (v7 << 8) | (v8 << 16) | (*(unsigned __int8 *)(v5 + (unsigned __int16)(v2 + 3)) << 24);
  return result;
}

float Tlv::Reader::getFloatAt(Tlv::Reader *this, unsigned int a2)
{
  const char *v3;
  uint64_t v4;
  const void *v5;
  uint64_t v7;
  float result;

  v3 = (const char *)(a2 + 4);
  v4 = *(_QWORD *)this;
  v5 = (const void *)*(unsigned __int16 *)(*(_QWORD *)this + 2);
  if (v3 > v5)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x2DF, "(index+4)", "<=", "fTlv->getLength()", v3, v5);
    v4 = *(_QWORD *)this;
  }
  v7 = *(_QWORD *)(v4 + 8);
  LODWORD(result) = *(unsigned __int8 *)(v7 + a2) | (*(unsigned __int8 *)(v7 + (unsigned __int16)(a2 + 1)) << 8) | (*(unsigned __int8 *)(v7 + (unsigned __int16)(a2 + 2)) << 16) | (*(unsigned __int8 *)(v7 + (unsigned __int16)(a2 + 3)) << 24);
  return result;
}

double Tlv::Reader::getDouble(Tlv::Reader *this)
{
  return COERCE_DOUBLE(Tlv::Reader::getQWord(this));
}

double Tlv::Reader::getDoubleAt(Tlv::Reader *this, unsigned int a2)
{
  return COERCE_DOUBLE(Tlv::Reader::getQWordAt(this, a2));
}

void Tlv::Reader::getStringField(Tlv::Reader *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  __int16 v11;

  v4 = *(_QWORD *)this;
  v5 = *(unsigned __int16 *)(*(_QWORD *)this + 2);
  v6 = *((unsigned __int16 *)this + 4);
  if (v5 <= v6)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x313, "(fTlv->getLength() - fIndex)", ">", "0", (const char *)(v5 - v6), 0);
    v4 = *(_QWORD *)this;
    LODWORD(v5) = *(unsigned __int16 *)(*(_QWORD *)this + 2);
    LODWORD(v6) = *((unsigned __int16 *)this + 4);
  }
  memset(a2, 170, 24);
  v7 = *(_QWORD *)(v4 + 8);
  v8 = (unsigned __int16)(v5 - v6);
  if ((unsigned __int16)(v5 - v6) >= 0x17u)
  {
    if ((v8 | 7) == 0x17)
      v10 = ((unsigned __int16)v8 & 0xFFF8) + 8;
    else
      v10 = v8 | 7;
    v9 = operator new(v10 + 1);
    a2[1] = v8;
    a2[2] = v10 - 0x7FFFFFFFFFFFFFFFLL;
    *a2 = v9;
    goto LABEL_10;
  }
  *((_BYTE *)a2 + 23) = v5 - v6;
  v9 = a2;
  if ((_DWORD)v5 != (_DWORD)v6)
LABEL_10:
    memmove(v9, (const void *)(v7 + v6), v8);
  *((_BYTE *)v9 + v8) = 0;
  v11 = *((unsigned __int8 *)a2 + 23);
  if ((v11 & 0x80u) != 0)
    v11 = *((_WORD *)a2 + 4);
  *((_WORD *)this + 4) += v11;
}

void Tlv::Reader::getStringFieldAt(Tlv::Reader *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  _QWORD *v12;

  v5 = *(_QWORD *)this;
  v6 = *(unsigned __int16 *)(*(_QWORD *)this + 2);
  v7 = a2;
  if (v6 <= a2)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x320, "(fTlv->getLength() - index)", ">", "0", (const char *)(v6 - a2), 0);
    v5 = *(_QWORD *)this;
    LODWORD(v6) = *(unsigned __int16 *)(*(_QWORD *)this + 2);
  }
  v9 = *(_QWORD *)(v5 + 8);
  v10 = (unsigned __int16)(v6 - a2);
  if ((unsigned __int16)(v6 - a2) >= 0x17u)
  {
    if ((v10 | 7) == 0x17)
      v11 = ((unsigned __int16)v10 & 0xFFF8) + 8;
    else
      v11 = v10 | 7;
    v12 = operator new(v11 + 1);
    a3[1] = v10;
    a3[2] = v11 - 0x7FFFFFFFFFFFFFFFLL;
    *a3 = v12;
    a3 = v12;
  }
  else
  {
    *((_BYTE *)a3 + 23) = v6 - a2;
    if ((_DWORD)v6 == a2)
    {
      *((_BYTE *)a3 + v10) = 0;
      return;
    }
  }
  memmove(a3, (const void *)(v9 + v7), v10);
  *((_BYTE *)a3 + v10) = 0;
}

uint64_t Tlv::Reader::getData(Tlv::Reader *this, int a2)
{
  __int16 v2;
  unsigned int v4;
  const char *v5;
  uint64_t v6;
  const void *v7;

  v2 = a2;
  v4 = *((unsigned __int16 *)this + 4);
  v5 = (const char *)(v4 + a2);
  v6 = *(_QWORD *)this;
  v7 = (const void *)*(unsigned __int16 *)(*(_QWORD *)this + 2);
  if (v5 > v7)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x32A, "(fIndex + length)", "<=", "fTlv->getLength()", v5, v7);
    v4 = *((unsigned __int16 *)this + 4);
    v6 = *(_QWORD *)this;
  }
  *((_WORD *)this + 4) = v4 + v2;
  return *(_QWORD *)(v6 + 8) + v4;
}

uint64_t Tlv::Reader::getDataAt(Tlv::Reader *this, unsigned int a2, int a3)
{
  const char *v4;
  uint64_t v5;
  const void *v6;

  v4 = (const char *)(a3 + a2);
  v5 = *(_QWORD *)this;
  v6 = (const void *)*(unsigned __int16 *)(*(_QWORD *)this + 2);
  if (v4 > v6)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/TLV.cpp", (const char *)0x334, "(index + length)", "<=", "fTlv->getLength()", v4, v6);
    v5 = *(_QWORD *)this;
  }
  return *(_QWORD *)(v5 + 8) + a2;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  unint64_t v6;
  void *v7;
  unint64_t v8;
  std::string *v9;
  unint64_t v10;
  std::string::size_type v11;
  uint64_t v12;
  size_t v13;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__n > v8)
    {
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) < __n - v8)
        std::string::__throw_length_error[abi:ne180100]();
      v9 = (std::string *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
    v6 = HIBYTE(v10);
    v7 = (void *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      v8 = 22;
      v9 = this;
LABEL_7:
      v11 = 2 * v8;
      if (__n > 2 * v8)
        v11 = __n;
      v12 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v12 = v11 | 7;
      if (v11 >= 0x17)
        v13 = v12 + 1;
      else
        v13 = 23;
      v7 = operator new(v13);
      memcpy(v7, __s, __n);
      if (v8 != 22)
        operator delete(v9);
      this->__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      this->__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
LABEL_22:
      this->__r_.__value_.__l.__size_ = __n;
      goto LABEL_23;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    goto LABEL_22;
  *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
LABEL_23:
  *((_BYTE *)v7 + __n) = 0;
  return this;
}

const char *qmi::asLongString(int a1)
{
  const char *result;

  result = "QMI Control Service";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = "QMI Wireless Data Service";
      break;
    case 2:
      result = "QMI Device Management Service";
      break;
    case 3:
      result = "QMI Network Access Service";
      break;
    case 4:
      result = "QMI Qos Service";
      break;
    case 5:
      result = "QMI Wireless Messaging Service";
      break;
    case 6:
      result = "QMI Position Determination Service";
      break;
    case 8:
      result = "QMI Access Terminal Service";
      break;
    case 9:
      result = "QMI Voice Service";
      break;
    case 10:
      result = "QMI Card App Toolkit";
      break;
    case 11:
      result = "QMI User Identity Module";
      break;
    case 12:
      result = "QMI Phonebook Manager Service";
      break;
    case 26:
      result = "QMI Wireless Data Administrative Service";
      break;
    case 34:
      result = "QMI Coexistence Service";
      break;
    case 36:
      result = "QMI Persistent Device Service";
      break;
    case 40:
      result = "QMI 5WI 787 Service";
      break;
    case 42:
      result = "QMI Data System Determination";
      break;
    case 43:
      result = "QMI Subsystem Control";
      break;
    case 44:
      result = "QMI Modem File System Extended Service";
      break;
    case 48:
      result = "QMI Data Filter Service";
      break;
    case 82:
      result = "QMI Media Service Extension";
      break;
    case 225:
      result = "QMI Audio Service";
      break;
    case 226:
      result = "QMI Board Support Package Service";
      break;
    case 227:
      result = "QMI Carrier IQ Service";
      break;
    case 228:
      result = "QMI Apple Wireless Diagnostics";
      break;
    case 229:
      result = "QMI Vinyl Service";
      break;
    case 230:
      result = "QMI Mav 5WI Service";
      break;
    case 231:
      result = "QMI Enhnaced Link Quality Metric Service";
      break;
    case 232:
      result = "QMI Mav P2P Service";
      break;
    case 233:
      result = "QMI BSP APPS Service";
      break;
    case 234:
      result = "QMI Stewie Service";
      break;
    default:
      result = "Unknown Service";
      break;
  }
  return result;
}

uint64_t qmi::serviceTypeFromString(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _BYTE *v4;
  _WORD *v14;

  v2 = *(char *)(a1 + 23);
  if (v2 >= 0)
    v3 = *(unsigned __int8 *)(a1 + 23);
  else
    v3 = *(_QWORD *)(a1 + 8);
  if (v3 == 2)
  {
    if (v2 >= 0)
      v14 = (_WORD *)a1;
    else
      v14 = *(_WORD **)a1;
    if (!memcmp(v14, "AT", 2uLL))
      return 8;
    if (*v14 == 21334)
      return 9;
  }
  else if (v3 == 3)
  {
    if (v2 >= 0)
      v4 = (_BYTE *)a1;
    else
      v4 = *(_BYTE **)a1;
    if (*(_WORD *)v4 == 21571 && v4[2] == 76)
      return 0;
    if (*(_WORD *)v4 == 17495 && v4[2] == 83)
      return 1;
    if (*(_WORD *)v4 == 19780 && v4[2] == 83)
      return 2;
    if (*(_WORD *)v4 == 16718 && v4[2] == 83)
      return 3;
    if (*(_WORD *)v4 == 20305 && v4[2] == 83)
      return 4;
    if (*(_WORD *)v4 == 19799 && v4[2] == 83)
      return 5;
    if (*(_WORD *)v4 == 17488 && v4[2] == 83)
      return 6;
    if (!memcmp(v4, "CAT", 3uLL))
      return 10;
    if (*(_WORD *)v4 == 18773 && v4[2] == 77)
      return 11;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "PBM"))
    return 12;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "AUDIO"))
    return 225;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "BSP"))
    return 226;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "CIQ"))
    return 227;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "AWD"))
    return 228;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "COEX"))
    return 34;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "DSD"))
    return 42;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "MFSE"))
    return 44;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "VINYL"))
    return 229;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "MAVIMS"))
    return 230;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "ELQM"))
    return 231;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "PDC"))
    return 36;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "P2P"))
    return 232;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "MS"))
    return 82;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "WDA"))
    return 26;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "APPS"))
    return 233;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "DFS"))
    return 48;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "SSCTL"))
    return 43;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, "SFT"))
    return -22;
  else
    return -1;
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, char *__s)
{
  int v4;
  size_t v5;
  const void *v6;

  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (v5 != strlen(__s))
    return 0;
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = *a1;
  return memcmp(v6, __s, v5) == 0;
}

qmi::ClientRouter *qmi::ClientRouter::ClientRouter(qmi::ClientRouter *this, os_log_s *a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = operator new(0x60uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = off_1E4153350;
  v5 = MEMORY[0x1A1AEAEA4](v4 + 3, a2);
  v4[7] = 0;
  v4[6] = 0;
  v4[4] = 0;
  v4[5] = v4 + 6;
  v4[11] = 0;
  *(_QWORD *)this = v5;
  *((_QWORD *)this + 1) = v4;
  return this;
}

{
  _QWORD *v4;
  uint64_t v5;

  v4 = operator new(0x60uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = off_1E4153350;
  v5 = MEMORY[0x1A1AEAEA4](v4 + 3, a2);
  v4[7] = 0;
  v4[6] = 0;
  v4[4] = 0;
  v4[5] = v4 + 6;
  v4[11] = 0;
  *(_QWORD *)this = v5;
  *((_QWORD *)this + 1) = v4;
  return this;
}

void sub_19E9EBC2C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_19E9EBCAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void qmi::ClientRouter::remove(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  int v7;
  BOOL v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t **v12;
  BOOL v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;

  v2 = *a1;
  v4 = (uint64_t **)(*a1 + 24);
  v3 = *v4;
  if (*v4)
  {
    v5 = v4;
    v6 = *v4;
    do
    {
      v7 = *((_DWORD *)v6 + 8);
      v8 = v7 < a2;
      if (v7 >= a2)
        v9 = (uint64_t **)v6;
      else
        v9 = (uint64_t **)(v6 + 1);
      if (!v8)
        v5 = (uint64_t **)v6;
      v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && *((_DWORD *)v5 + 8) <= a2)
    {
      v10 = v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v12 = v5;
        do
        {
          v11 = v12[2];
          v13 = *v11 == (_QWORD)v12;
          v12 = (uint64_t **)v11;
        }
        while (!v13);
      }
      if (*(uint64_t ***)(v2 + 16) == v5)
        *(_QWORD *)(v2 + 16) = v11;
      --*(_QWORD *)(v2 + 32);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v3, (uint64_t *)v5);
      v14 = (std::__shared_weak_count *)v5[8];
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v17 = (std::__shared_weak_count *)v5[6];
      if (v17)
        std::__shared_weak_count::__release_weak(v17);
      operator delete(v5);
    }
  }
}

uint64_t qmi::ClientRouter::has(uint64_t a1, int a2)
{
  uint64_t *v2;
  int v4;

  v2 = *(uint64_t **)(*(_QWORD *)a1 + 24);
  if (!v2)
    return 0;
  while (1)
  {
    v4 = *((_DWORD *)v2 + 8);
    if (v4 <= a2)
      break;
LABEL_3:
    v2 = (uint64_t *)*v2;
    if (!v2)
      return 0;
  }
  if (v4 < a2)
  {
    ++v2;
    goto LABEL_3;
  }
  return 1;
}

_QWORD *qmi::ClientRouter::setHandler(uint64_t *a1, int a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _QWORD *result;
  uint64_t v18;
  std::logic_error *exception;
  int v20;
  _QWORD v21[3];
  _QWORD *v22;
  unsigned int *v23;
  _QWORD v24[4];
  _BYTE v25[24];
  _BYTE *v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v20 = a2;
  v4 = (_QWORD *)a3[3];
  if (v4)
  {
    if (v4 == a3)
    {
      v22 = v21;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v21);
    }
    else
    {
      v22 = (_QWORD *)a3[3];
      a3[3] = 0;
    }
  }
  else
  {
    v22 = 0;
  }
  v23 = (unsigned int *)&v20;
  v5 = *a1;
  if (!*(_QWORD *)(*a1 + 32))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempted to enumerate an empty client map");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E4151B18, MEMORY[0x1E0DE4360]);
  }
  v6 = *(_QWORD **)(v5 + 16);
  v7 = (_QWORD *)(v5 + 24);
  if (v6 != (_QWORD *)(v5 + 24))
  {
    v8 = MEMORY[0x1E0C809B0];
    while (1)
    {
      v9 = *((_DWORD *)v6 + 8);
      v10 = (uint64_t)v22;
      v11 = *v23;
      v24[0] = v8;
      v24[1] = 1174405120;
      v24[2] = ___ZZNK3qmi12ClientRouter10setHandlerENS_6Client5EventENSt3__18functionIFvNS_16SubscriptionTypeEEEEENK3__0clIS5_NS_11ClientStateEEEDaT_RKT0__block_invoke;
      v24[3] = &__block_descriptor_tmp_3;
      if (!v22)
        goto LABEL_13;
      if (v22 != v21)
        break;
      v26 = v25;
      (*(void (**)(_QWORD *, _BYTE *))(v21[0] + 24))(v21, v25);
LABEL_15:
      v27 = v9;
      qmi::Client::setHandler((uint64_t)(v6 + 5), v11, (uint64_t)v24);
      v12 = v26;
      if (v26 == v25)
      {
        v12 = v25;
        v13 = 4;
        goto LABEL_19;
      }
      if (v26)
      {
        v13 = 5;
LABEL_19:
        (*(void (**)(void))(*v12 + 8 * v13))();
      }
      v14 = (_QWORD *)v6[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v6[2];
          v16 = *v15 == (_QWORD)v6;
          v6 = v15;
        }
        while (!v16);
      }
      v6 = v15;
      if (v15 == v7)
        goto LABEL_26;
    }
    v10 = (*(uint64_t (**)(void))(*v22 + 16))();
LABEL_13:
    v26 = (_BYTE *)v10;
    goto LABEL_15;
  }
LABEL_26:
  result = v22;
  if (v22 == v21)
  {
    v18 = 4;
    result = v21;
  }
  else
  {
    if (!v22)
      return result;
    v18 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v18))();
}

{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _QWORD *result;
  uint64_t v18;
  std::logic_error *exception;
  int v20;
  _QWORD v21[3];
  _QWORD *v22;
  int *v23;
  _QWORD aBlock[4];
  _BYTE v25[24];
  _BYTE *v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v20 = a2;
  v4 = (_QWORD *)a3[3];
  if (v4)
  {
    if (v4 == a3)
    {
      v22 = v21;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v21);
    }
    else
    {
      v22 = (_QWORD *)a3[3];
      a3[3] = 0;
    }
  }
  else
  {
    v22 = 0;
  }
  v23 = &v20;
  v5 = *a1;
  if (!*(_QWORD *)(*a1 + 32))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempted to enumerate an empty client map");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E4151B18, MEMORY[0x1E0DE4360]);
  }
  v6 = *(_QWORD **)(v5 + 16);
  v7 = (_QWORD *)(v5 + 24);
  if (v6 != (_QWORD *)(v5 + 24))
  {
    v8 = MEMORY[0x1E0C809B0];
    while (1)
    {
      v9 = *((_DWORD *)v6 + 8);
      v10 = (uint64_t)v22;
      v11 = *v23;
      aBlock[0] = v8;
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZZNK3qmi12ClientRouter10setHandlerENS_6Client5EventENSt3__18functionIFvNS_16SubscriptionTypeEN3xpc6objectEEEEENK3__0clIS5_NS_11ClientStateEEEDaT_RKT0__block_invoke;
      aBlock[3] = &__block_descriptor_tmp_8;
      if (!v22)
        goto LABEL_13;
      if (v22 != v21)
        break;
      v26 = v25;
      (*(void (**)(_QWORD *, _BYTE *))(v21[0] + 24))(v21, v25);
LABEL_15:
      v27 = v9;
      qmi::Client::setHandler((uint64_t)(v6 + 5), v11, aBlock);
      v12 = v26;
      if (v26 == v25)
      {
        v12 = v25;
        v13 = 4;
        goto LABEL_19;
      }
      if (v26)
      {
        v13 = 5;
LABEL_19:
        (*(void (**)(void))(*v12 + 8 * v13))();
      }
      v14 = (_QWORD *)v6[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v6[2];
          v16 = *v15 == (_QWORD)v6;
          v6 = v15;
        }
        while (!v16);
      }
      v6 = v15;
      if (v15 == v7)
        goto LABEL_26;
    }
    v10 = (*(uint64_t (**)(void))(*v22 + 16))();
LABEL_13:
    v26 = (_BYTE *)v10;
    goto LABEL_15;
  }
LABEL_26:
  result = v22;
  if (v22 == v21)
  {
    v18 = 4;
    result = v21;
  }
  else
  {
    if (!v22)
      return result;
    v18 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v18))();
}

{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _QWORD *result;
  uint64_t v18;
  std::logic_error *exception;
  int v20;
  _QWORD v21[3];
  _QWORD *v22;
  unsigned int *v23;
  _QWORD aBlock[4];
  _BYTE v25[24];
  _BYTE *v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v20 = a2;
  v4 = (_QWORD *)a3[3];
  if (v4)
  {
    if (v4 == a3)
    {
      v22 = v21;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v21);
    }
    else
    {
      v22 = (_QWORD *)a3[3];
      a3[3] = 0;
    }
  }
  else
  {
    v22 = 0;
  }
  v23 = (unsigned int *)&v20;
  v5 = *a1;
  if (!*(_QWORD *)(*a1 + 32))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempted to enumerate an empty client map");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E4151B18, MEMORY[0x1E0DE4360]);
  }
  v6 = *(_QWORD **)(v5 + 16);
  v7 = (_QWORD *)(v5 + 24);
  if (v6 != (_QWORD *)(v5 + 24))
  {
    v8 = MEMORY[0x1E0C809B0];
    while (1)
    {
      v9 = *((_DWORD *)v6 + 8);
      v10 = (uint64_t)v22;
      v11 = *v23;
      aBlock[0] = v8;
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZZNK3qmi12ClientRouter10setHandlerENS_6Client5EventENSt3__18functionIFvNS_16SubscriptionTypeEN8dispatch5groupEEEEENK3__0clIS5_NS_11ClientStateEEEDaT_RKT0__block_invoke;
      aBlock[3] = &__block_descriptor_tmp_10;
      if (!v22)
        goto LABEL_13;
      if (v22 != v21)
        break;
      v26 = v25;
      (*(void (**)(_QWORD *, _BYTE *))(v21[0] + 24))(v21, v25);
LABEL_15:
      v27 = v9;
      qmi::Client::setHandler((uint64_t)(v6 + 5), v11, aBlock);
      v12 = v26;
      if (v26 == v25)
      {
        v12 = v25;
        v13 = 4;
        goto LABEL_19;
      }
      if (v26)
      {
        v13 = 5;
LABEL_19:
        (*(void (**)(void))(*v12 + 8 * v13))();
      }
      v14 = (_QWORD *)v6[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v6[2];
          v16 = *v15 == (_QWORD)v6;
          v6 = v15;
        }
        while (!v16);
      }
      v6 = v15;
      if (v15 == v7)
        goto LABEL_26;
    }
    v10 = (*(uint64_t (**)(void))(*v22 + 16))();
LABEL_13:
    v26 = (_BYTE *)v10;
    goto LABEL_15;
  }
LABEL_26:
  result = v22;
  if (v22 == v21)
  {
    v18 = 4;
    result = v21;
  }
  else
  {
    if (!v22)
      return result;
    v18 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v18))();
}

void sub_19E9EC060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_19E9EC350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_19E9EC640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void qmi::ClientRouter::setHandler(uint64_t *a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  std::logic_error *exception;

  v2 = *a1;
  if (!*(_QWORD *)(*a1 + 32))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Attempted to enumerate an empty client map");
    __cxa_throw(exception, (struct type_info *)off_1E4151B18, MEMORY[0x1E0DE4360]);
  }
  v3 = *(_QWORD **)(v2 + 16);
  v4 = (_QWORD *)(v2 + 24);
  if (v3 != (_QWORD *)(v2 + 24))
  {
    do
    {
      qmi::Client::setHandler((uint64_t)(v3 + 5), a2, 0);
      v6 = (_QWORD *)v3[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v3[2];
          v8 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v4);
  }
}

void sub_19E9EC798(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void qmi::ClientRouter::setIndShouldWake(qmi::ClientRouter *this, __int16 a2, char a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  std::logic_error *exception;

  v3 = *(_QWORD *)this;
  if (!*(_QWORD *)(*(_QWORD *)this + 32))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Attempted to enumerate an empty client map");
    __cxa_throw(exception, (struct type_info *)off_1E4151B18, MEMORY[0x1E0DE4360]);
  }
  v4 = *(_QWORD **)(v3 + 16);
  v5 = (_QWORD *)(v3 + 24);
  if (v4 != (_QWORD *)(v3 + 24))
  {
    do
    {
      qmi::Client::State::setIndShouldWake((qmi::Client::State *)v4[7], a2, a3);
      v8 = (_QWORD *)v4[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v4[2];
          v10 = *v9 == (_QWORD)v4;
          v4 = v9;
        }
        while (!v10);
      }
      v4 = v9;
    }
    while (v9 != v5);
  }
}

void sub_19E9EC870(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void qmi::ClientRouter::start(uint64_t *a1, int a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t *v14;

  v2 = *a1;
  if (a2 == 3)
  {
    v3 = *(_QWORD **)(v2 + 16);
    v4 = (_QWORD *)(v2 + 24);
    if (v3 != (_QWORD *)(v2 + 24))
    {
      do
      {
        qmi::Client::State::start((qmi::Client::State *)v3[7]);
        v5 = (_QWORD *)v3[1];
        if (v5)
        {
          do
          {
            v6 = v5;
            v5 = (_QWORD *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            v6 = (_QWORD *)v3[2];
            v7 = *v6 == (_QWORD)v3;
            v3 = v6;
          }
          while (!v7);
        }
        v3 = v6;
      }
      while (v6 != v4);
    }
  }
  else
  {
    v10 = *(_QWORD *)(v2 + 24);
    v8 = v2 + 24;
    v9 = v10;
    if (v10)
    {
      v11 = v8;
      do
      {
        v12 = *(_DWORD *)(v9 + 32);
        v13 = v12 < a2;
        if (v12 >= a2)
          v14 = (uint64_t *)v9;
        else
          v14 = (uint64_t *)(v9 + 8);
        if (!v13)
          v11 = v9;
        v9 = *v14;
      }
      while (*v14);
      if (v11 != v8 && *(_DWORD *)(v11 + 32) <= a2)
        qmi::Client::State::start(*(qmi::Client::State **)(v11 + 56));
    }
  }
}

void qmi::ClientRouter::stop(uint64_t *a1, int a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t *v14;

  v2 = *a1;
  if (a2 == 3)
  {
    v3 = *(_QWORD **)(v2 + 16);
    v4 = (_QWORD *)(v2 + 24);
    if (v3 != (_QWORD *)(v2 + 24))
    {
      do
      {
        qmi::Client::State::stop((qmi::Client::State *)v3[7]);
        v5 = (_QWORD *)v3[1];
        if (v5)
        {
          do
          {
            v6 = v5;
            v5 = (_QWORD *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            v6 = (_QWORD *)v3[2];
            v7 = *v6 == (_QWORD)v3;
            v3 = v6;
          }
          while (!v7);
        }
        v3 = v6;
      }
      while (v6 != v4);
    }
  }
  else
  {
    v10 = *(_QWORD *)(v2 + 24);
    v8 = v2 + 24;
    v9 = v10;
    if (v10)
    {
      v11 = v8;
      do
      {
        v12 = *(_DWORD *)(v9 + 32);
        v13 = v12 < a2;
        if (v12 >= a2)
          v14 = (uint64_t *)v9;
        else
          v14 = (uint64_t *)(v9 + 8);
        if (!v13)
          v11 = v9;
        v9 = *v14;
      }
      while (*v14);
      if (v11 != v8 && *(_DWORD *)(v11 + 32) <= a2)
        qmi::Client::State::stop(*(qmi::Client::State **)(v11 + 56));
    }
  }
}

void qmi::ClientRouter::reset(qmi::ClientRouter *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void qmi::ClientRouter::addClient(uint64_t *a1, int a2, std::__shared_weak_count **this)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  int v13;
  BOOL v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;

  qmi::Client::set((qmi::Client *)this, "sim", a2);
  v6 = *a1;
  v7 = this[2];
  v8 = this[3];
  v30 = v8;
  this[2] = 0;
  this[3] = 0;
  v10 = (uint64_t *)(v6 + 24);
  v9 = *(_QWORD *)(v6 + 24);
  if (!v9)
  {
    v17 = (uint64_t *)(v6 + 24);
    if (*(uint64_t **)(v6 + 16) != v10)
      goto LABEL_19;
    v16 = 0;
    v17 = (uint64_t *)(v6 + 24);
    v19 = (uint64_t *)(v6 + 24);
LABEL_36:
    if (v16)
      v21 = v19;
    else
      v21 = v17;
    if (v16)
      v10 = v19 + 1;
    else
      v10 = v17;
    if (*v10)
      goto LABEL_46;
    goto LABEL_43;
  }
  v11 = (uint64_t *)(v6 + 24);
  v12 = *(uint64_t **)(v6 + 24);
  do
  {
    v13 = *((_DWORD *)v12 + 8);
    v14 = v13 < a2;
    if (v13 >= a2)
      v15 = (uint64_t **)v12;
    else
      v15 = (uint64_t **)(v12 + 1);
    if (!v14)
      v11 = v12;
    v12 = *v15;
  }
  while (*v15);
  v16 = *(_QWORD **)(v6 + 24);
  v17 = (uint64_t *)(v6 + 24);
  if (v11 != v10)
  {
    if (*((_DWORD *)v11 + 8) <= a2)
    {
      v30 = 0;
      v23 = (std::__shared_weak_count *)v11[8];
      v11[7] = (uint64_t)v7;
      v11[8] = (uint64_t)v8;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      goto LABEL_46;
    }
    v16 = (_QWORD *)*v11;
    v17 = v11;
  }
  if (*(uint64_t **)(v6 + 16) == v17)
  {
    v19 = v17;
    goto LABEL_36;
  }
  if (v16)
  {
    v18 = v16;
    do
    {
      v19 = v18;
      v18 = (uint64_t *)v18[1];
    }
    while (v18);
    if (*((_DWORD *)v19 + 8) < a2)
      goto LABEL_36;
    goto LABEL_22;
  }
LABEL_19:
  v19 = v17;
  do
  {
    v20 = v19;
    v19 = (uint64_t *)v19[2];
  }
  while ((uint64_t *)*v19 == v20);
  v16 = 0;
  if (*((_DWORD *)v19 + 8) < a2)
    goto LABEL_36;
LABEL_22:
  v21 = (uint64_t *)(v6 + 24);
  if (!v9)
  {
LABEL_43:
    v26 = operator new(0x48uLL);
    v26[8] = a2;
    *((_QWORD *)v26 + 5) = 0;
    *((_QWORD *)v26 + 6) = 0;
    *((_QWORD *)v26 + 7) = v7;
    *((_QWORD *)v26 + 8) = v8;
    v30 = 0;
    *(_QWORD *)v26 = 0;
    *((_QWORD *)v26 + 1) = 0;
    *((_QWORD *)v26 + 2) = v21;
    *v10 = (uint64_t)v26;
    v27 = **(_QWORD **)(v6 + 16);
    if (v27)
    {
      *(_QWORD *)(v6 + 16) = v27;
      v26 = (_DWORD *)*v10;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v6 + 24), (uint64_t *)v26);
    ++*(_QWORD *)(v6 + 32);
    goto LABEL_46;
  }
  while (1)
  {
    while (1)
    {
      v21 = (uint64_t *)v9;
      v22 = *(_DWORD *)(v9 + 32);
      if (v22 <= a2)
        break;
      v9 = *v21;
      v10 = v21;
      if (!*v21)
        goto LABEL_43;
    }
    if (v22 >= a2)
      break;
    v9 = v21[1];
    if (!v9)
    {
      v10 = v21 + 1;
      goto LABEL_43;
    }
  }
LABEL_46:
  if (v30)
  {
    v28 = (unint64_t *)&v30->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_19E9ECD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::Client::~Client((qmi::Client *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *qmi::ClientRouter::setIndHandlerInternal(uint64_t *a1, __int16 a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  _QWORD *result;
  uint64_t v20;
  std::logic_error *exception;
  __int16 v22;
  const void *v23;
  _QWORD v24[3];
  _QWORD *v25;
  __int16 *v26;
  _QWORD aBlock[4];
  _BYTE v28[24];
  _BYTE *v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v22 = a2;
  v4 = (_QWORD *)a3[3];
  if (v4)
  {
    if (v4 == a3)
    {
      v25 = v24;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v24);
    }
    else
    {
      v25 = (_QWORD *)a3[3];
      a3[3] = 0;
    }
  }
  else
  {
    v25 = 0;
  }
  v26 = &v22;
  v5 = *a1;
  if (!*(_QWORD *)(*a1 + 32))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempted to enumerate an empty client map");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E4151B18, MEMORY[0x1E0DE4360]);
  }
  v6 = *(_QWORD **)(v5 + 16);
  v7 = (_QWORD *)(v5 + 24);
  if (v6 != (_QWORD *)(v5 + 24))
  {
    v8 = MEMORY[0x1E0C809B0];
    while (1)
    {
      v9 = *((_DWORD *)v6 + 8);
      v10 = (uint64_t)v25;
      v11 = *v26;
      aBlock[0] = v8;
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZZNK3qmi12ClientRouter21setIndHandlerInternalEtNSt3__18functionIFvNS_16SubscriptionTypeERK13QMIServiceMsgEEEENK3__0clIS3_NS_11ClientStateEEEDaT_RKT0__block_invoke;
      aBlock[3] = &__block_descriptor_tmp_12_0;
      if (!v25)
        goto LABEL_13;
      if (v25 != v24)
        break;
      v29 = v28;
      (*(void (**)(_QWORD *, _BYTE *))(v24[0] + 24))(v24, v28);
LABEL_15:
      v30 = v9;
      v12 = (_QWORD *)v6[7];
      v13 = _Block_copy(aBlock);
      v23 = v13;
      qmi::Client::State::setIndHandler(v12, v11, &v23);
      if (v13)
        _Block_release(v13);
      v14 = v29;
      if (v29 == v28)
      {
        v14 = v28;
        v15 = 4;
        goto LABEL_21;
      }
      if (v29)
      {
        v15 = 5;
LABEL_21:
        (*(void (**)(void))(*v14 + 8 * v15))();
      }
      v16 = (_QWORD *)v6[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v6[2];
          v18 = *v17 == (_QWORD)v6;
          v6 = v17;
        }
        while (!v18);
      }
      v6 = v17;
      if (v17 == v7)
        goto LABEL_28;
    }
    v10 = (*(uint64_t (**)(void))(*v25 + 16))();
LABEL_13:
    v29 = (_BYTE *)v10;
    goto LABEL_15;
  }
LABEL_28:
  result = v25;
  if (v25 == v24)
  {
    v20 = 4;
    result = v24;
  }
  else
  {
    if (!v25)
      return result;
    v20 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v20))();
}

void sub_19E9ECF8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void std::__shared_ptr_emplace<qmi::ClientRouter::State>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E4153350;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<qmi::ClientRouter::State>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E4153350;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<qmi::ClientRouter::State>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v2 = (_QWORD *)(a1 + 64);
  v3 = *(_QWORD **)(a1 + 88);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  std::__tree<std::__value_type<qmi::SubscriptionType,qmi::ClientState>,std::__map_value_compare<qmi::SubscriptionType,std::__value_type<qmi::SubscriptionType,qmi::ClientState>,std::less<qmi::SubscriptionType>,true>,std::allocator<std::__value_type<qmi::SubscriptionType,qmi::ClientState>>>::destroy(*(_QWORD **)(a1 + 48));
  v5 = *(void **)(a1 + 32);
  if (v5)
    os_release(v5);
  JUMPOUT(0x1A1AEAED4);
}

void std::__tree<std::__value_type<qmi::SubscriptionType,qmi::ClientState>,std::__map_value_compare<qmi::SubscriptionType,std::__value_type<qmi::SubscriptionType,qmi::ClientState>,std::less<qmi::SubscriptionType>,true>,std::allocator<std::__value_type<qmi::SubscriptionType,qmi::ClientState>>>::destroy(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  if (a1)
  {
    std::__tree<std::__value_type<qmi::SubscriptionType,qmi::ClientState>,std::__map_value_compare<qmi::SubscriptionType,std::__value_type<qmi::SubscriptionType,qmi::ClientState>,std::less<qmi::SubscriptionType>,true>,std::allocator<std::__value_type<qmi::SubscriptionType,qmi::ClientState>>>::destroy(*a1);
    std::__tree<std::__value_type<qmi::SubscriptionType,qmi::ClientState>,std::__map_value_compare<qmi::SubscriptionType,std::__value_type<qmi::SubscriptionType,qmi::ClientState>,std::less<qmi::SubscriptionType>,true>,std::allocator<std::__value_type<qmi::SubscriptionType,qmi::ClientState>>>::destroy(a1[1]);
    v2 = (std::__shared_weak_count *)a1[8];
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = (std::__shared_weak_count *)a1[6];
    if (v5)
      std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_10;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (!v2)
  {
    v5 = 1;
    v6 = (uint64_t **)v3[2];
    v7 = *v6;
    if (*v6 == v3)
      goto LABEL_6;
LABEL_11:
    v6[1] = (uint64_t *)v2;
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
    goto LABEL_12;
  }
LABEL_10:
  v5 = 0;
  *(_QWORD *)(v2 + 16) = v3[2];
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 != v3)
    goto LABEL_11;
LABEL_6:
  *v6 = (uint64_t *)v2;
  if (v3 != result)
  {
    v7 = v6[1];
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
LABEL_12:
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
    goto LABEL_16;
  }
  v7 = 0;
  result = (uint64_t *)v2;
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
    goto LABEL_12;
LABEL_16:
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v14 = (uint64_t **)v7[2];
    if (*v14 != v7)
      break;
    if (*((_BYTE *)v7 + 24))
    {
      v16 = (_QWORD *)*v7;
      if (*v7)
        goto LABEL_48;
    }
    else
    {
      *((_BYTE *)v7 + 24) = 1;
      *((_BYTE *)v14 + 24) = 0;
      v20 = (uint64_t *)v7[1];
      *v14 = v20;
      if (v20)
        v20[2] = (uint64_t)v14;
      v7[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v7;
      v7[1] = (uint64_t)v14;
      v14[2] = v7;
      if (result == (uint64_t *)v14)
        result = v7;
      v7 = *v14;
      v16 = (_QWORD *)**v14;
      if (v16)
      {
LABEL_48:
        if (!*((_BYTE *)v16 + 24))
          goto LABEL_71;
      }
    }
    v21 = (uint64_t *)v7[1];
    if (v21 && !*((_BYTE *)v21 + 24))
    {
      if (v16 && !*((_BYTE *)v16 + 24))
      {
LABEL_71:
        v21 = v7;
      }
      else
      {
        *((_BYTE *)v21 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = *v21;
        v7[1] = *v21;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v21[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v21;
        *v21 = (uint64_t)v7;
        v7[2] = (uint64_t)v21;
        v16 = v7;
      }
      v27 = (uint64_t *)v21[2];
      *((_BYTE *)v21 + 24) = *((_BYTE *)v27 + 24);
      *((_BYTE *)v27 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v28 = *v27;
      v29 = *(_QWORD *)(*v27 + 8);
      *v27 = v29;
      if (v29)
        *(_QWORD *)(v29 + 16) = v27;
      *(_QWORD *)(v28 + 16) = v27[2];
      *(_QWORD *)(v27[2] + 8 * (*(_QWORD *)v27[2] != (_QWORD)v27)) = v28;
      *(_QWORD *)(v28 + 8) = v27;
      v27[2] = v28;
      return result;
    }
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (*((_BYTE *)v12 + 24))
      v13 = v12 == result;
    else
      v13 = 1;
    if (v13)
      goto LABEL_61;
LABEL_24:
    v7 = *(uint64_t **)(v12[2] + 8 * (*(_QWORD *)v12[2] == (_QWORD)v12));
  }
  if (*((_BYTE *)v7 + 24))
  {
    v15 = (_QWORD *)*v7;
    if (!*v7)
    {
LABEL_38:
      v19 = (uint64_t *)v7[1];
      if (v19 && !*((_BYTE *)v19 + 24))
        goto LABEL_67;
      *((_BYTE *)v7 + 24) = 0;
      v12 = (uint64_t *)v7[2];
      if (v12 == result)
      {
        v12 = result;
LABEL_61:
        *((_BYTE *)v12 + 24) = 1;
        return result;
      }
      if (!*((_BYTE *)v12 + 24))
        goto LABEL_61;
      goto LABEL_24;
    }
  }
  else
  {
    *((_BYTE *)v7 + 24) = 1;
    *((_BYTE *)v14 + 24) = 0;
    v17 = v14[1];
    v18 = (uint64_t *)*v17;
    v14[1] = (uint64_t *)*v17;
    if (v18)
      v18[2] = (uint64_t)v14;
    v17[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v17;
    *v17 = (uint64_t)v14;
    v14[2] = v17;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
    v15 = (_QWORD *)*v7;
    if (!*v7)
      goto LABEL_38;
  }
  if (*((_BYTE *)v15 + 24))
    goto LABEL_38;
  v19 = (uint64_t *)v7[1];
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_67:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v23 = v15[1];
    *v7 = v23;
    if (v23)
      *(_QWORD *)(v23 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v19 = v7;
  }
  v24 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v24 + 24);
  *(_BYTE *)(v24 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v25 = *(uint64_t **)(v24 + 8);
  v26 = *v25;
  *(_QWORD *)(v24 + 8) = *v25;
  if (v26)
    *(_QWORD *)(v26 + 16) = v24;
  v25[2] = *(_QWORD *)(v24 + 16);
  *(_QWORD *)(*(_QWORD *)(v24 + 16) + 8 * (**(_QWORD **)(v24 + 16) != v24)) = v25;
  *v25 = v24;
  *(_QWORD *)(v24 + 16) = v25;
  return result;
}

void std::__throw_out_of_range[abi:ne180100]()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception);
  __cxa_throw(exception, (struct type_info *)off_1E4151B10, MEMORY[0x1E0DE42E0]);
}

void sub_19E9ED50C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, "map::at:  key not found");
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

uint64_t ___ZZNK3qmi12ClientRouter10setHandlerENS_6Client5EventENSt3__18functionIFvNS_16SubscriptionTypeEEEEENK3__0clIS5_NS_11ClientStateEEEDaT_RKT0__block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v3;

  v3 = *(_DWORD *)(a1 + 64);
  v1 = *(_QWORD *)(a1 + 56);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v1 + 48))(v1, &v3);
}

uint64_t __copy_helper_block_e8_32c50_ZTSNSt3__18functionIFvN3qmi16SubscriptionTypeEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a2 + 56);
  if (result)
  {
    if (result == a2 + 32)
    {
      *(_QWORD *)(a1 + 56) = a1 + 32;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 56) + 24))(*(_QWORD *)(a2 + 56), a1 + 32);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(a1 + 56) = result;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 56) = 0;
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c50_ZTSNSt3__18functionIFvN3qmi16SubscriptionTypeEEEE(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 32;
  result = *(_QWORD *)(a1 + 56);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void ___ZZNK3qmi12ClientRouter10setHandlerENS_6Client5EventENSt3__18functionIFvNS_16SubscriptionTypeEN3xpc6objectEEEEENK3__0clIS5_NS_11ClientStateEEEDaT_RKT0__block_invoke(uint64_t a1, xpc_object_t object)
{
  int v3;
  uint64_t v4;
  xpc_object_t objecta;
  int v6;

  v3 = *(_DWORD *)(a1 + 64);
  objecta = object;
  if (!object)
  {
    objecta = xpc_null_create();
    v6 = v3;
    v4 = *(_QWORD *)(a1 + 56);
    if (v4)
      goto LABEL_3;
LABEL_5:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  xpc_retain(object);
  v6 = v3;
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    goto LABEL_5;
LABEL_3:
  (*(void (**)(uint64_t, int *, xpc_object_t *))(*(_QWORD *)v4 + 48))(v4, &v6, &objecta);
  xpc_release(objecta);
}

void sub_19E9ED6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c63_ZTSNSt3__18functionIFvN3qmi16SubscriptionTypeEN3xpc6objectEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a2 + 56);
  if (result)
  {
    if (result == a2 + 32)
    {
      *(_QWORD *)(a1 + 56) = a1 + 32;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 56) + 24))(*(_QWORD *)(a2 + 56), a1 + 32);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(a1 + 56) = result;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 56) = 0;
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c63_ZTSNSt3__18functionIFvN3qmi16SubscriptionTypeEN3xpc6objectEEEE(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 32;
  result = *(_QWORD *)(a1 + 56);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void ___ZZNK3qmi12ClientRouter10setHandlerENS_6Client5EventENSt3__18functionIFvNS_16SubscriptionTypeEN8dispatch5groupEEEEENK3__0clIS5_NS_11ClientStateEEEDaT_RKT0__block_invoke(uint64_t a1, dispatch_object_t object)
{
  int v3;
  uint64_t v4;
  dispatch_object_t objecta;
  int v6;

  v3 = *(_DWORD *)(a1 + 64);
  objecta = object;
  if (object)
    dispatch_retain(object);
  v6 = v3;
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, int *, dispatch_object_t *))(*(_QWORD *)v4 + 48))(v4, &v6, &objecta);
  if (objecta)
    dispatch_release(objecta);
}

void sub_19E9ED7F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c67_ZTSNSt3__18functionIFvN3qmi16SubscriptionTypeEN8dispatch5groupEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a2 + 56);
  if (result)
  {
    if (result == a2 + 32)
    {
      *(_QWORD *)(a1 + 56) = a1 + 32;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 56) + 24))(*(_QWORD *)(a2 + 56), a1 + 32);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(a1 + 56) = result;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 56) = 0;
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c67_ZTSNSt3__18functionIFvN3qmi16SubscriptionTypeEN8dispatch5groupEEEE(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 32;
  result = *(_QWORD *)(a1 + 56);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t ___ZZNK3qmi12ClientRouter21setIndHandlerInternalEtNSt3__18functionIFvNS_16SubscriptionTypeERK13QMIServiceMsgEEEENK3__0clIS3_NS_11ClientStateEEEDaT_RKT0__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;

  v4 = *(_DWORD *)(a1 + 64);
  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v2 + 48))(v2, &v4, a2);
}

uint64_t __copy_helper_block_e8_32c67_ZTSNSt3__18functionIFvN3qmi16SubscriptionTypeERK13QMIServiceMsgEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a2 + 56);
  if (result)
  {
    if (result == a2 + 32)
    {
      *(_QWORD *)(a1 + 56) = a1 + 32;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 56) + 24))(*(_QWORD *)(a2 + 56), a1 + 32);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(a1 + 56) = result;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 56) = 0;
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c67_ZTSNSt3__18functionIFvN3qmi16SubscriptionTypeERK13QMIServiceMsgEEE(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 32;
  result = *(_QWORD *)(a1 + 56);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void ATCSCommPortConfigurer::ATCSCommPortConfigurer(ATCSCommPortConfigurer *this, int a2, int a3, char a4, char a5, char a6)
{
  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = a3;
  *((_BYTE *)this + 8) = a4;
  *((_BYTE *)this + 9) = a5;
  *((_BYTE *)this + 10) = a6;
  ATCSCommPortConfigurer::configure(this);
}

{
  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = a3;
  *((_BYTE *)this + 8) = a4;
  *((_BYTE *)this + 9) = a5;
  *((_BYTE *)this + 10) = a6;
  ATCSCommPortConfigurer::configure(this);
}

uint64_t ATCSCommPortConfigurer::configure(ATCSCommPortConfigurer *this)
{
  __int128 v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  _ATCSException *exception;
  char *v7;
  void *v8;
  int v9;
  _ATCSException *v10;
  char *v11;
  void *v12;
  termios v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13.c_ospeed = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v13.c_cc = v2;
  *(_OWORD *)&v13.c_cc[16] = v2;
  *(_OWORD *)&v13.c_iflag = v2;
  *(_OWORD *)&v13.c_cflag = v2;
  if (tcgetattr(*(_DWORD *)this, &v13))
  {
    v5 = *__error();
    exception = (_ATCSException *)__cxa_allocate_exception(0x208uLL);
    v7 = strerror(v5);
    _ATCSException::_ATCSException(exception, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/Helpers/ATCSCommPortConfigurer.cpp", 44, "Failed get attributes, err = %s (%d)\n", v7, v5);
  }
  cfsetspeed(&v13, *((unsigned int *)this + 1));
  cfmakeraw(&v13);
  v13.c_iflag = v13.c_iflag & 0xFFFFFFFFFFFFF0CCLL | 1;
  v13.c_oflag &= ~1uLL;
  *(_WORD *)&v13.c_cc[16] = *((_WORD *)this + 4);
  v3 = 248576;
  if (!*((_BYTE *)this + 10))
    v3 = 51968;
  v13.c_cflag = v3 | v13.c_cflag & 0xFFFFFFFFFFFC20FFLL;
  v13.c_lflag &= 0xFFFFFFFFFFFFFA77;
  result = tcsetattr(*(_DWORD *)this, 0, &v13);
  if ((_DWORD)result)
  {
    v9 = *__error();
    v10 = (_ATCSException *)__cxa_allocate_exception(0x208uLL);
    v11 = strerror(v9);
    _ATCSException::_ATCSException(v10, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/Helpers/ATCSCommPortConfigurer.cpp", 89, "Failed set attributes, err = %s (%d)", v11, v9);
  }
  return result;
}

void sub_19E9EDB78(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E9EDB8C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ATCSTimer::timerBootstrap(ATCSTimer *this, ATCSTimerDriver *a2)
{
  unsigned __int8 v3;
  uint64_t v4;
  ATCSLogger *v5;
  ATCSTimerDriver *Instance;
  pthread_mutex_t *v7;

  {
    ATCSMutex::ATCSMutex((ATCSMutex *)&ATCSTimerGetTimerListLock(void)::sMutex, "timer list lock");
    __cxa_atexit((void (*)(void *))ATCSMutex::~ATCSMutex, &ATCSTimerGetTimerListLock(void)::sMutex, &dword_19E9C8000);
  }
  v4 = ATCSTimerGetTimerListLock(void)::sMutex;
  pthread_mutex_lock((pthread_mutex_t *)ATCSTimerGetTimerListLock(void)::sMutex);
  v5 = (ATCSLogger *)pthread_self();
  *(_QWORD *)(v4 + 64) = v5;
  Instance = (ATCSTimerDriver *)ATCSLogger::getInstance(v5);
  ATCSTimer::fLogger = (uint64_t)Instance;
  if (!ATCSTimer::fsDriver)
  {
    if (!this)
      this = (ATCSTimer *)ATCSTimerDriver::create(Instance);
    ATCSTimer::fsDriver = (uint64_t)this;
    *((_QWORD *)this + 1) = ATCSTimer::dispatchExpiredTimers;
  }
  v7 = (pthread_mutex_t *)ATCSTimerGetTimerListLock(void)::sMutex;
  pthread_self();
  v7[1].__sig = 0;
  return pthread_mutex_unlock(v7);
}

void sub_19E9EDCC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9EDCD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  pthread_mutex_t *v3;

  v3 = *(pthread_mutex_t **)(v1 + 504);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

_QWORD *ATCSTimerDriver::create(ATCSTimerDriver *this)
{
  _QWORD *v1;
  pthread_mutex_t *v2;
  pthread_cond_t *v3;

  v1 = operator new(0x28uLL);
  v1[2] = 0;
  *v1 = off_1E4153480;
  v1[1] = 0;
  v2 = (pthread_mutex_t *)operator new(0x48uLL);
  v2[1].__sig = 0;
  if ((initialized & 1) == 0)
  {
    pthread_key_create((pthread_key_t *)&threadInfoKey, 0);
    initialized = 1;
  }
  pthread_mutex_init(v2, 0);
  v1[2] = v2;
  v3 = (pthread_cond_t *)malloc(0x30uLL);
  v1[3] = v3;
  pthread_cond_init(v3, 0);
  *((_DWORD *)v1 + 8) = 0;
  *((_BYTE *)v1 + 36) = 0;
  ATCSThreadSpawn((uint64_t)"ATCSTimer Thread", (uint64_t)ATCSTimerDriver::startATCSTimerDispatcher, (uint64_t)v1, 1);
  return v1;
}

void sub_19E9EDDC4(_Unwind_Exception *a1)
{
  void *v1;
  pthread_mutex_t **v2;
  pthread_cond_t **v3;

  ATCSCondition::~ATCSCondition(v3);
  ATCSMutex::~ATCSMutex(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E9EDDF0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ATCSTimer::dispatchExpiredTimers(ATCSTimer *this)
{
  unsigned __int8 v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  pthread_mutex_t *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  pthread_mutex_t *v14;

  {
    ATCSMutex::ATCSMutex((ATCSMutex *)&ATCSTimerGetTimerListLock(void)::sMutex, "timer list lock");
    __cxa_atexit((void (*)(void *))ATCSMutex::~ATCSMutex, &ATCSTimerGetTimerListLock(void)::sMutex, &dword_19E9C8000);
  }
  v2 = ATCSTimerGetTimerListLock(void)::sMutex;
  pthread_mutex_lock((pthread_mutex_t *)ATCSTimerGetTimerListLock(void)::sMutex);
  *(_QWORD *)(v2 + 64) = pthread_self();
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ATCSTimer::fsDriver + 24))(ATCSTimer::fsDriver);
  v4 = ATCSTimer::fATCSTimerList;
  if (ATCSTimer::fATCSTimerList)
  {
    v5 = v3;
    while (v5 >= *(_DWORD *)v4)
    {
      v6 = *(_QWORD *)(v4 + 16);
      ATCSTimer::fATCSTimerList = v6;
      if (v6)
        *(_QWORD *)(v6 + 24) = &ATCSTimer::fATCSTimerList;
      *(_BYTE *)(v4 + 4) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)(v4 + 24) = 0;
      v7 = *(_QWORD *)(v4 + 8);
      *(_QWORD *)(v4 + 8) = 0;
      {
        ATCSMutex::ATCSMutex((ATCSMutex *)&ATCSTimerGetTimerListLock(void)::sMutex, "timer list lock");
        __cxa_atexit((void (*)(void *))ATCSMutex::~ATCSMutex, &ATCSTimerGetTimerListLock(void)::sMutex, &dword_19E9C8000);
      }
      v9 = (pthread_mutex_t *)ATCSTimerGetTimerListLock(void)::sMutex;
      pthread_self();
      v9[1].__sig = 0;
      pthread_mutex_unlock(v9);
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      {
        ATCSMutex::ATCSMutex((ATCSMutex *)&ATCSTimerGetTimerListLock(void)::sMutex, "timer list lock");
        __cxa_atexit((void (*)(void *))ATCSMutex::~ATCSMutex, &ATCSTimerGetTimerListLock(void)::sMutex, &dword_19E9C8000);
      }
      v11 = ATCSTimerGetTimerListLock(void)::sMutex;
      pthread_mutex_lock((pthread_mutex_t *)ATCSTimerGetTimerListLock(void)::sMutex);
      *(_QWORD *)(v11 + 64) = pthread_self();
      v12 = ATCSTimer::fATCSTimerList;
      if (ATCSTimer::fATCSTimerList == v4)
      {
        v12 = v4;
        if (*(_DWORD *)v4 < v5)
        {
          _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSTimer.cpp", (const char *)0xA9, "TIME_GTE(fATCSTimerList->fDeadline, now)", "==", "true", 0, (const void *)1);
          v12 = ATCSTimer::fATCSTimerList;
        }
      }
      v4 = v12;
      if (!v12)
        goto LABEL_18;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)ATCSTimer::fsDriver + 16))(ATCSTimer::fsDriver);
  }
LABEL_18:
  {
    ATCSMutex::ATCSMutex((ATCSMutex *)&ATCSTimerGetTimerListLock(void)::sMutex, "timer list lock");
    __cxa_atexit((void (*)(void *))ATCSMutex::~ATCSMutex, &ATCSTimerGetTimerListLock(void)::sMutex, &dword_19E9C8000);
  }
  v14 = (pthread_mutex_t *)ATCSTimerGetTimerListLock(void)::sMutex;
  pthread_self();
  v14[1].__sig = 0;
  return pthread_mutex_unlock(v14);
}

void sub_19E9EE0DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9EE0F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9EE10C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9EE124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ATCSTimer::ATCSTimer(ATCSTimer *this)
{
  *(_DWORD *)this = 0;
  *((_BYTE *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  if (!ATCSTimer::fsDriver)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSTimer.cpp", (const char *)0x39, "fsDriver", "!=", "NULL", 0, 0);
}

{
  *(_DWORD *)this = 0;
  *((_BYTE *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  if (!ATCSTimer::fsDriver)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSTimer.cpp", (const char *)0x39, "fsDriver", "!=", "NULL", 0, 0);
}

void ATCSTimer::~ATCSTimer(ATCSTimer *this)
{
  if (*((_BYTE *)this + 4))
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSTimer.cpp", (const char *)0x3E, "fPending", "!=", "true", (const char *)1, (const void *)1);
}

{
  if (*((_BYTE *)this + 4))
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSTimer.cpp", (const char *)0x3E, "fPending", "!=", "true", (const char *)1, (const void *)1);
}

uint64_t ATCSTimer::set(char *a1, int a2, uint64_t a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  const char **v9;
  const char **v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  pthread_mutex_t *v16;

  {
    ATCSMutex::ATCSMutex((ATCSMutex *)&ATCSTimerGetTimerListLock(void)::sMutex, "timer list lock");
    __cxa_atexit((void (*)(void *))ATCSMutex::~ATCSMutex, &ATCSTimerGetTimerListLock(void)::sMutex, &dword_19E9C8000);
  }
  v7 = ATCSTimerGetTimerListLock(void)::sMutex;
  pthread_mutex_lock((pthread_mutex_t *)ATCSTimerGetTimerListLock(void)::sMutex);
  *(_QWORD *)(v7 + 64) = pthread_self();
  if (a2 < 0)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSTimer.cpp", (const char *)0x45, "relativeTimeoutMilliseconds", ">=", "0", (const char *)a2, 0);
  if (a1[4])
  {
    v9 = (const char **)(a1 + 16);
    v8 = *((_QWORD *)a1 + 2);
    if (v8 && *(const char ***)(v8 + 24) != v9)
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSTimer.cpp", (const char *)0x7C, "fNext == NULL", "||", "fNext->fPrev == &fNext", 0, 0);
    v10 = (const char **)*((_QWORD *)a1 + 3);
    if (*v10 != a1)
    {
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSTimer.cpp", (const char *)0x7D, "*fPrev", "==", "this", *v10, a1);
      v10 = (const char **)*((_QWORD *)a1 + 3);
    }
    *v10 = *v9;
    if (*v9)
      *((_QWORD *)*v9 + 3) = *((_QWORD *)a1 + 3);
    v11 = *((_QWORD *)a1 + 1);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    a1[4] = 0;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ATCSTimer::fsDriver + 24))(ATCSTimer::fsDriver) + a2;
  *(_DWORD *)a1 = v12;
  *((_QWORD *)a1 + 1) = a3;
  v13 = ATCSTimer::fATCSTimerList;
  if (!ATCSTimer::fATCSTimerList)
  {
    *((_QWORD *)a1 + 2) = 0;
    ATCSTimer::fATCSTimerList = (uint64_t)a1;
LABEL_22:
    *((_QWORD *)a1 + 3) = &ATCSTimer::fATCSTimerList;
    (*(void (**)(uint64_t))(*(_QWORD *)ATCSTimer::fsDriver + 16))(ATCSTimer::fsDriver);
    goto LABEL_25;
  }
  if (*(_DWORD *)ATCSTimer::fATCSTimerList >= v12)
  {
    *((_QWORD *)a1 + 2) = ATCSTimer::fATCSTimerList;
    ATCSTimer::fATCSTimerList = (uint64_t)a1;
    *(_QWORD *)(v13 + 24) = a1 + 16;
    goto LABEL_22;
  }
  while (1)
  {
    v14 = v13;
    v13 = *(_QWORD *)(v13 + 16);
    if (!v13)
      break;
    if (*(_DWORD *)v13 > v12)
    {
      v15 = v14 + 16;
      *((_QWORD *)a1 + 2) = v13;
      *(_QWORD *)(v13 + 24) = a1 + 16;
      goto LABEL_24;
    }
  }
  v15 = v14 + 16;
  *((_QWORD *)a1 + 2) = 0;
LABEL_24:
  *(_QWORD *)(v14 + 16) = a1;
  *((_QWORD *)a1 + 3) = v15;
LABEL_25:
  a1[4] = 1;
  v16 = (pthread_mutex_t *)ATCSTimerGetTimerListLock(void)::sMutex;
  pthread_self();
  v16[1].__sig = 0;
  return pthread_mutex_unlock(v16);
}

void sub_19E9EE558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9EE570(_Unwind_Exception *a1)
{
  uint64_t v1;
  pthread_mutex_t *v3;

  v3 = *(pthread_mutex_t **)(v1 + 504);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

BOOL ATCSTimer::cancel_nl(ATCSTimer *this)
{
  int v1;
  uint64_t v3;
  char *v4;
  const char **v5;
  uint64_t v6;

  v1 = *((unsigned __int8 *)this + 4);
  if (*((_BYTE *)this + 4))
  {
    v4 = (char *)this + 16;
    v3 = *((_QWORD *)this + 2);
    if (v3 && *(char **)(v3 + 24) != v4)
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSTimer.cpp", (const char *)0x7C, "fNext == NULL", "||", "fNext->fPrev == &fNext", 0, 0);
    v5 = (const char **)*((_QWORD *)this + 3);
    if (*v5 != (const char *)this)
    {
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSTimer.cpp", (const char *)0x7D, "*fPrev", "==", "this", *v5, this);
      v5 = (const char **)*((_QWORD *)this + 3);
    }
    *v5 = *(const char **)v4;
    if (*(_QWORD *)v4)
      *(_QWORD *)(*(_QWORD *)v4 + 24) = *((_QWORD *)this + 3);
    v6 = *((_QWORD *)this + 1);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    *((_BYTE *)this + 4) = 0;
  }
  return v1 != 0;
}

BOOL ATCSTimer::cancel(ATCSTimer *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  char *v6;
  const char **v7;
  uint64_t v8;
  pthread_mutex_t *v9;

  {
    ATCSMutex::ATCSMutex((ATCSMutex *)&ATCSTimerGetTimerListLock(void)::sMutex, "timer list lock");
    __cxa_atexit((void (*)(void *))ATCSMutex::~ATCSMutex, &ATCSTimerGetTimerListLock(void)::sMutex, &dword_19E9C8000);
  }
  v3 = ATCSTimerGetTimerListLock(void)::sMutex;
  pthread_mutex_lock((pthread_mutex_t *)ATCSTimerGetTimerListLock(void)::sMutex);
  *(_QWORD *)(v3 + 64) = pthread_self();
  v4 = *((unsigned __int8 *)this + 4);
  if (*((_BYTE *)this + 4))
  {
    v6 = (char *)this + 16;
    v5 = *((_QWORD *)this + 2);
    if (v5 && *(char **)(v5 + 24) != v6)
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSTimer.cpp", (const char *)0x7C, "fNext == NULL", "||", "fNext->fPrev == &fNext", 0, 0);
    v7 = (const char **)*((_QWORD *)this + 3);
    if (*v7 != (const char *)this)
    {
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/Timers/ATCSTimer.cpp", (const char *)0x7D, "*fPrev", "==", "this", *v7, this);
      v7 = (const char **)*((_QWORD *)this + 3);
    }
    *v7 = *(const char **)v6;
    if (*(_QWORD *)v6)
      *(_QWORD *)(*(_QWORD *)v6 + 24) = *((_QWORD *)this + 3);
    v8 = *((_QWORD *)this + 1);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    *((_BYTE *)this + 4) = 0;
  }
  v9 = (pthread_mutex_t *)ATCSTimerGetTimerListLock(void)::sMutex;
  pthread_self();
  v9[1].__sig = 0;
  pthread_mutex_unlock(v9);
  return v4 != 0;
}

void sub_19E9EE800(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9EE818(_Unwind_Exception *a1)
{
  uint64_t v1;
  pthread_mutex_t *v3;

  v3 = *(pthread_mutex_t **)(v1 + 504);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t ATCSTimer::printTimerQueue(ATCSTimer *this)
{
  int v1;
  uint64_t v2;
  int v3;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ATCSTimer::fsDriver + 24))(ATCSTimer::fsDriver);
  v2 = ATCSTimer::fATCSTimerList;
  if (ATCSTimer::fATCSTimerList)
  {
    v3 = v1;
    do
    {
      (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)ATCSTimer::fLogger + 24))(ATCSTimer::fLogger, 3, " %d\n", *(_DWORD *)v2 - v3);
      v2 = *(_QWORD *)(v2 + 16);
    }
    while (v2);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)ATCSTimer::fLogger + 24))(ATCSTimer::fLogger, 3, "\n");
}

void ATCSTimerDriver::ATCSTimerDriver(ATCSTimerDriver *this)
{
  pthread_mutex_t *v2;
  pthread_cond_t *v3;

  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E4153480;
  *((_QWORD *)this + 1) = 0;
  v2 = (pthread_mutex_t *)operator new(0x48uLL);
  v2[1].__sig = 0;
  if ((initialized & 1) == 0)
  {
    pthread_key_create((pthread_key_t *)&threadInfoKey, 0);
    initialized = 1;
  }
  pthread_mutex_init(v2, 0);
  *((_QWORD *)this + 2) = v2;
  v3 = (pthread_cond_t *)malloc(0x30uLL);
  *((_QWORD *)this + 3) = v3;
  pthread_cond_init(v3, 0);
  *((_DWORD *)this + 8) = 0;
  *((_BYTE *)this + 36) = 0;
  ATCSThreadSpawn((uint64_t)"ATCSTimer Thread", (uint64_t)ATCSTimerDriver::startATCSTimerDispatcher, (uint64_t)this, 1);
}

{
  pthread_mutex_t *v2;
  pthread_cond_t *v3;

  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E4153480;
  *((_QWORD *)this + 1) = 0;
  v2 = (pthread_mutex_t *)operator new(0x48uLL);
  v2[1].__sig = 0;
  if ((initialized & 1) == 0)
  {
    pthread_key_create((pthread_key_t *)&threadInfoKey, 0);
    initialized = 1;
  }
  pthread_mutex_init(v2, 0);
  *((_QWORD *)this + 2) = v2;
  v3 = (pthread_cond_t *)malloc(0x30uLL);
  *((_QWORD *)this + 3) = v3;
  pthread_cond_init(v3, 0);
  *((_DWORD *)this + 8) = 0;
  *((_BYTE *)this + 36) = 0;
  ATCSThreadSpawn((uint64_t)"ATCSTimer Thread", (uint64_t)ATCSTimerDriver::startATCSTimerDispatcher, (uint64_t)this, 1);
}

void sub_19E9EE99C(_Unwind_Exception *a1)
{
  pthread_mutex_t **v1;
  pthread_cond_t **v2;

  ATCSCondition::~ATCSCondition(v2);
  ATCSMutex::~ATCSMutex(v1);
  _Unwind_Resume(a1);
}

void sub_19E9EE9B8(_Unwind_Exception *a1)
{
  pthread_mutex_t **v1;

  ATCSMutex::~ATCSMutex(v1);
  _Unwind_Resume(a1);
}

void ATCSTimerDriver::startATCSTimerDispatcher(ATCSTimerDriver *this, void *a2)
{
  pthread_mutex_t *v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unsigned int v7;
  pthread_mutex_t *v8;
  pthread_t v9;
  unsigned int tv_sec_high;
  unsigned int tv_sec;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  pthread_mutex_t *v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  timespec v19;

  while (1)
  {
    v3 = (pthread_mutex_t *)*((_QWORD *)this + 2);
    pthread_mutex_lock(v3);
    v3[1].__sig = (uint64_t)pthread_self();
    if (!systemtime(void)::denom)
      break;
    while (1)
    {
      v4 = mach_absolute_time();
      if (!*((_BYTE *)this + 36))
        goto LABEL_16;
LABEL_5:
      v5 = systemtime(void)::numer * v4 / systemtime(void)::denom;
      v6 = *((_DWORD *)this + 8);
      v7 = v6 - v5;
      if (v6 <= (int)v5)
        break;
      v8 = (pthread_mutex_t *)*((_QWORD *)this + 2);
      v9 = pthread_self();
      v8[1].__sig = 0;
      if ((v7 & 0x80000000) != 0)
      {
LABEL_17:
        pthread_cond_wait(*((pthread_cond_t **)this + 3), v8);
        v8[1].__sig = (uint64_t)v9;
        if (!systemtime(void)::denom)
          goto LABEL_8;
      }
      else
      {
        v19.tv_sec = v7 / 0x3E8uLL;
        v19.tv_nsec = 1000000 * (v7 % 0x3E8);
        pthread_cond_timedwait_relative_np(*((pthread_cond_t **)this + 3), v8, &v19);
        v8[1].__sig = (uint64_t)v9;
        if (!systemtime(void)::denom)
          goto LABEL_8;
      }
    }
    *((_BYTE *)this + 36) = 0;
    v16 = (pthread_mutex_t *)*((_QWORD *)this + 2);
    pthread_self();
    v16[1].__sig = 0;
    v17 = pthread_mutex_unlock(v16);
    v18 = (void (*)(uint64_t))*((_QWORD *)this + 1);
    if (v18)
      v18(v17);
  }
LABEL_8:
  v19.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  mach_timebase_info((mach_timebase_info_t)&v19);
  if (HIDWORD(v19.tv_sec))
  {
    tv_sec_high = HIDWORD(v19.tv_sec);
    tv_sec = v19.tv_sec;
    do
    {
      v12 = tv_sec_high;
      tv_sec_high = tv_sec % tv_sec_high;
      tv_sec = v12;
    }
    while (tv_sec_high);
  }
  else
  {
    v12 = v19.tv_sec;
  }
  v13 = 1000000;
  v14 = LODWORD(v19.tv_sec) / v12;
  do
  {
    v15 = v14;
    v14 = v13;
    v13 = v15 % v13;
  }
  while (v13);
  systemtime(void)::numer = LODWORD(v19.tv_sec) / v12 / v14;
  systemtime(void)::denom = 0xF4240 / v14 * (unint64_t)(HIDWORD(v19.tv_sec) / v12);
  v4 = mach_absolute_time();
  if (*((_BYTE *)this + 36))
    goto LABEL_5;
LABEL_16:
  v8 = (pthread_mutex_t *)*((_QWORD *)this + 2);
  v9 = pthread_self();
  v8[1].__sig = 0;
  goto LABEL_17;
}

void sub_19E9EEC3C(_Unwind_Exception *a1)
{
  pthread_mutex_t **v1;
  pthread_cond_t **v2;

  ATCSCondition::~ATCSCondition(v2);
  ATCSMutex::~ATCSMutex(v1);
  _Unwind_Resume(a1);
}

void sub_19E9EEC58(_Unwind_Exception *a1)
{
  pthread_mutex_t **v1;

  ATCSMutex::~ATCSMutex(v1);
  _Unwind_Resume(a1);
}

void ATCSTimerDriver::~ATCSTimerDriver(pthread_cond_t **this)
{
  pthread_mutex_t *v2;

  *this = (pthread_cond_t *)off_1E4153480;
  pthread_cond_destroy(this[3]);
  free(this[3]);
  v2 = (pthread_mutex_t *)this[2];
  pthread_mutex_destroy(v2);
  if (v2)
    operator delete(v2);
}

{
  pthread_mutex_t *v2;

  *this = (pthread_cond_t *)off_1E4153480;
  pthread_cond_destroy(this[3]);
  free(this[3]);
  v2 = (pthread_mutex_t *)this[2];
  pthread_mutex_destroy(v2);
  if (v2)
    operator delete(v2);
}

{
  pthread_mutex_t *v2;

  *this = (pthread_cond_t *)off_1E4153480;
  pthread_cond_destroy(this[3]);
  free(this[3]);
  v2 = (pthread_mutex_t *)this[2];
  pthread_mutex_destroy(v2);
  if (v2)
    operator delete(v2);
  operator delete(this);
}

uint64_t ATCSTimerDriver::setNextTimeout(ATCSTimerDriver *this, int a2)
{
  pthread_mutex_t *v4;
  pthread_mutex_t *v5;

  v4 = (pthread_mutex_t *)*((_QWORD *)this + 2);
  pthread_mutex_lock(v4);
  v4[1].__sig = (uint64_t)pthread_self();
  if (!*((_BYTE *)this + 36) || *((_DWORD *)this + 8) > a2)
    pthread_cond_signal(*((pthread_cond_t **)this + 3));
  *((_DWORD *)this + 8) = a2;
  *((_BYTE *)this + 36) = 1;
  v5 = (pthread_mutex_t *)*((_QWORD *)this + 2);
  pthread_self();
  v5[1].__sig = 0;
  return pthread_mutex_unlock(v5);
}

void sub_19E9EEDF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  pthread_mutex_t *v3;

  v3 = *(pthread_mutex_t **)(v1 + 16);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t ATCSTimerDriver::getCurrentTime(ATCSTimerDriver *this)
{
  uint32_t denom;
  uint32_t numer;
  uint32_t v3;
  unsigned int v4;
  uint32_t v5;
  uint32_t v6;
  mach_timebase_info info;

  if (!systemtime(void)::denom)
  {
    info = (mach_timebase_info)0xAAAAAAAAAAAAAAAALL;
    mach_timebase_info(&info);
    if (info.denom)
    {
      denom = info.denom;
      numer = info.numer;
      do
      {
        v3 = denom;
        denom = numer % denom;
        numer = v3;
      }
      while (denom);
    }
    else
    {
      v3 = info.numer;
    }
    v4 = 1000000;
    v5 = info.numer / v3;
    do
    {
      v6 = v5;
      v5 = v4;
      v4 = v6 % v4;
    }
    while (v4);
    systemtime(void)::numer = info.numer / v3 / v5;
    systemtime(void)::denom = 0xF4240 / v5 * (unint64_t)(info.denom / v3);
  }
  return systemtime(void)::numer * mach_absolute_time() / systemtime(void)::denom;
}

void ATCSTimerDriver::timerDispatcher(ATCSTimerDriver *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  unsigned int v6;
  pthread_mutex_t *v7;
  pthread_t v8;
  unsigned int tv_sec_high;
  unsigned int tv_sec;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  pthread_mutex_t *v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  timespec v18;

  while (1)
  {
    v2 = (pthread_mutex_t *)*((_QWORD *)this + 2);
    pthread_mutex_lock(v2);
    v2[1].__sig = (uint64_t)pthread_self();
    if (!systemtime(void)::denom)
      break;
    while (1)
    {
      v3 = mach_absolute_time();
      if (!*((_BYTE *)this + 36))
        goto LABEL_16;
LABEL_5:
      v4 = systemtime(void)::numer * v3 / systemtime(void)::denom;
      v5 = *((_DWORD *)this + 8);
      v6 = v5 - v4;
      if (v5 <= (int)v4)
        break;
      v7 = (pthread_mutex_t *)*((_QWORD *)this + 2);
      v8 = pthread_self();
      v7[1].__sig = 0;
      if ((v6 & 0x80000000) != 0)
      {
LABEL_17:
        pthread_cond_wait(*((pthread_cond_t **)this + 3), v7);
        v7[1].__sig = (uint64_t)v8;
        if (!systemtime(void)::denom)
          goto LABEL_8;
      }
      else
      {
        v18.tv_sec = v6 / 0x3E8uLL;
        v18.tv_nsec = 1000000 * (v6 % 0x3E8);
        pthread_cond_timedwait_relative_np(*((pthread_cond_t **)this + 3), v7, &v18);
        v7[1].__sig = (uint64_t)v8;
        if (!systemtime(void)::denom)
          goto LABEL_8;
      }
    }
    *((_BYTE *)this + 36) = 0;
    v15 = (pthread_mutex_t *)*((_QWORD *)this + 2);
    pthread_self();
    v15[1].__sig = 0;
    v16 = pthread_mutex_unlock(v15);
    v17 = (void (*)(uint64_t))*((_QWORD *)this + 1);
    if (v17)
      v17(v16);
  }
LABEL_8:
  v18.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  mach_timebase_info((mach_timebase_info_t)&v18);
  if (HIDWORD(v18.tv_sec))
  {
    tv_sec_high = HIDWORD(v18.tv_sec);
    tv_sec = v18.tv_sec;
    do
    {
      v11 = tv_sec_high;
      tv_sec_high = tv_sec % tv_sec_high;
      tv_sec = v11;
    }
    while (tv_sec_high);
  }
  else
  {
    v11 = v18.tv_sec;
  }
  v12 = 1000000;
  v13 = LODWORD(v18.tv_sec) / v11;
  do
  {
    v14 = v13;
    v13 = v12;
    v12 = v14 % v12;
  }
  while (v12);
  systemtime(void)::numer = LODWORD(v18.tv_sec) / v11 / v13;
  systemtime(void)::denom = 0xF4240 / v13 * (unint64_t)(HIDWORD(v18.tv_sec) / v11);
  v3 = mach_absolute_time();
  if (*((_BYTE *)this + 36))
    goto LABEL_5;
LABEL_16:
  v7 = (pthread_mutex_t *)*((_QWORD *)this + 2);
  v8 = pthread_self();
  v7[1].__sig = 0;
  goto LABEL_17;
}

uint64_t strncasecmp_terminated(unint64_t a1, unint64_t a2, unsigned int a3)
{
  uint64_t result;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __darwin_ct_rune_t v9;
  __darwin_ct_rune_t v10;
  BOOL v12;
  unint64_t v13;

  if (!(a1 | a2))
    return 0;
  v4 = (char *)a2;
  if (!a1 && a2)
    return -__tolower(*(char *)a2);
  if (a1 && !a2)
    return __tolower(*(char *)a1);
  if (a3)
  {
    v6 = a3;
    v7 = a3 - 1;
    v8 = (char *)a1;
    while (1)
    {
      v9 = __tolower(*v8);
      v10 = *v4++;
      result = (v9 - __tolower(v10));
      if ((_DWORD)result)
        break;
      if (*v8++)
        v12 = v7 == 0;
      else
        v12 = 1;
      --v7;
      if (v12)
        goto LABEL_20;
    }
  }
  else
  {
    v6 = 0;
LABEL_20:
    v13 = *(unsigned __int8 *)(a1 + v6);
    if (((1 << v13) & 0x2401) == 0 || v13 > 0xF)
      return (char)v13;
    else
      return 0;
  }
  return result;
}

int strcasecmp(const char *a1, const char *a2)
{
  int v2;
  __darwin_ct_rune_t v5;
  int v6;
  uint64_t v7;
  const char *v8;
  __darwin_ct_rune_t v9;
  __darwin_ct_rune_t v10;
  int v11;
  uint64_t v12;

  if (!((unint64_t)a1 | (unint64_t)a2))
    return 0;
  if (!a1 && a2)
  {
    v5 = *a2;
    return -__tolower(v5);
  }
  if (a1 && !a2)
    return __tolower(*a1);
  LOBYTE(v6) = *a1;
  if (*a1)
  {
    v7 = 0;
    v8 = a1 + 1;
    while (1)
    {
      v9 = __tolower((char)v6);
      v10 = __tolower(a2[v7]);
      v11 = v7 == 0xFFFFFFFFLL ? -1 : v2;
      v2 = v9 == v10 ? v11 : v9 - v10;
      if (v7 == 0xFFFFFFFFLL || v9 != v10)
        break;
      v12 = v7 + 1;
      v6 = v8[v7++];
      if (!v6)
      {
        v5 = a2[v12];
        if (a2[v12])
          return -__tolower(v5);
        return 0;
      }
    }
    return v2;
  }
  v5 = *a2;
  if (*a2)
    return -__tolower(v5);
  return 0;
}

uint64_t systemtime(void)
{
  uint32_t denom;
  uint32_t numer;
  uint32_t v2;
  unsigned int v3;
  uint32_t v4;
  uint32_t v5;
  mach_timebase_info info;

  if (!systemtime(void)::denom)
  {
    info = (mach_timebase_info)0xAAAAAAAAAAAAAAAALL;
    mach_timebase_info(&info);
    if (info.denom)
    {
      denom = info.denom;
      numer = info.numer;
      do
      {
        v2 = denom;
        denom = numer % denom;
        numer = v2;
      }
      while (denom);
    }
    else
    {
      v2 = info.numer;
    }
    v3 = 1000000;
    v4 = info.numer / v2;
    do
    {
      v5 = v4;
      v4 = v3;
      v3 = v5 % v3;
    }
    while (v3);
    systemtime(void)::numer = info.numer / v2 / v4;
    systemtime(void)::denom = 0xF4240 / v4 * (unint64_t)(info.denom / v2);
  }
  return systemtime(void)::numer * mach_absolute_time() / systemtime(void)::denom;
}

ssize_t writeToCompletion(int __fd, const unsigned __int8 *__buf, size_t __nbyte)
{
  ssize_t result;

  while (__nbyte)
  {
    result = write(__fd, __buf, __nbyte);
    __buf += result;
    __nbyte -= result;
    if (result < 0)
      return result;
  }
  return 0;
}

uint64_t config::hw::watch(config::hw *this)
{
  ctu::Gestalt *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;

  v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v2 = off_1EE52E190;
  if (!off_1EE52E190)
  {
    ctu::Gestalt::create_default_global(v1);
    v3 = (std::__shared_weak_count *)*(&off_1EE52E190 + 1);
    off_1EE52E190 = v13;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v2 = off_1EE52E190;
  }
  v6 = (std::__shared_weak_count *)*(&off_1EE52E190 + 1);
  if (*(&off_1EE52E190 + 1))
  {
    v7 = (unint64_t *)(*(&off_1EE52E190 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 144))(v2);
  v10 = result;
  if (v6)
  {
    v11 = (unint64_t *)&v6->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      return v10;
    }
  }
  return result;
}

void sub_19E9EF520(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_19E9EF53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t config::hw::iPad(config::hw *this)
{
  ctu::Gestalt *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;

  v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v2 = off_1EE52E190;
  if (!off_1EE52E190)
  {
    ctu::Gestalt::create_default_global(v1);
    v3 = (std::__shared_weak_count *)*(&off_1EE52E190 + 1);
    off_1EE52E190 = v13;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v2 = off_1EE52E190;
  }
  v6 = (std::__shared_weak_count *)*(&off_1EE52E190 + 1);
  if (*(&off_1EE52E190 + 1))
  {
    v7 = (unint64_t *)(*(&off_1EE52E190 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 136))(v2);
  v10 = result;
  if (v6)
  {
    v11 = (unint64_t *)&v6->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      return v10;
    }
  }
  return result;
}

void sub_19E9EF6A0(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_19E9EF6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void config::hw::product(config::hw *this)
{
  ctu::Gestalt *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v2 = off_1EE52E190;
  if (!off_1EE52E190)
  {
    ctu::Gestalt::create_default_global(v1);
    v3 = (std::__shared_weak_count *)*(&off_1EE52E190 + 1);
    off_1EE52E190 = v11;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v2 = off_1EE52E190;
  }
  v6 = (std::__shared_weak_count *)*(&off_1EE52E190 + 1);
  if (*(&off_1EE52E190 + 1))
  {
    v7 = (unint64_t *)(*(&off_1EE52E190 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_19E9EF828(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_19E9EF844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void config::hw::deviceMaterial(config::hw *this)
{
  ctu::Gestalt *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v2 = off_1EE52E190;
  if (!off_1EE52E190)
  {
    ctu::Gestalt::create_default_global(v1);
    v3 = (std::__shared_weak_count *)*(&off_1EE52E190 + 1);
    off_1EE52E190 = v11;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v2 = off_1EE52E190;
  }
  v6 = (std::__shared_weak_count *)*(&off_1EE52E190 + 1);
  if (*(&off_1EE52E190 + 1))
  {
    v7 = (unint64_t *)(*(&off_1EE52E190 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 104))(v2);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_19E9EF9B0(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_19E9EF9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void config::hw::getBootArgs(std::string *a1@<X8>)
{
  ctu::Gestalt *v3;
  uint64_t v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  _QWORD *v17;
  const void *v18;
  const void *v19;
  int v20;
  const void *v21;
  unint64_t v22;
  size_t v23;
  int v24;
  int v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  __int128 v29;
  void *__p[2];
  uint64_t v31;
  _QWORD v32[5];

  memset(v32, 170, 24);
  v3 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v4 = off_1EE52E190;
  if (!off_1EE52E190)
  {
    ctu::Gestalt::create_default_global(v3);
    v5 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v6 = (std::__shared_weak_count *)*(&off_1EE52E190 + 1);
    off_1EE52E190 = v5;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = off_1EE52E190;
  }
  v9 = (std::__shared_weak_count *)*(&off_1EE52E190 + 1);
  v32[3] = v4;
  v32[4] = *(&off_1EE52E190 + 1);
  if (*(&off_1EE52E190 + 1))
  {
    v10 = (unint64_t *)(*(&off_1EE52E190 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v4 + 112))(v32, v4);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  HIBYTE(v31) = 9;
  strcpy((char *)__p, "boot-args");
  v14 = (uint64_t *)v32[1];
  if (v32[1])
  {
    while (1)
    {
      v16 = (uint64_t **)v14;
      v19 = (const void *)v14[4];
      v17 = v14 + 4;
      v18 = v19;
      v20 = *((char *)v17 + 23);
      if (v20 >= 0)
        v21 = v17;
      else
        v21 = v18;
      if (v20 >= 0)
        v22 = *((unsigned __int8 *)v17 + 23);
      else
        v22 = v17[1];
      if (v22 >= 9)
        v23 = 9;
      else
        v23 = v22;
      v24 = memcmp(__p, v21, v23);
      if (v24)
      {
        if (v24 < 0)
          goto LABEL_18;
LABEL_32:
        v25 = memcmp(v21, __p, v23);
        if (v25)
        {
          if ((v25 & 0x80000000) == 0)
            goto LABEL_43;
        }
        else if (v22 >= 9)
        {
LABEL_43:
          v26 = (char *)v16;
          if (*((char *)v16 + 79) < 0)
            goto LABEL_44;
LABEL_42:
          v29 = *(_OWORD *)(v26 + 56);
          a1->__r_.__value_.__r.__words[2] = *((_QWORD *)v26 + 9);
          *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v29;
          goto LABEL_45;
        }
        v14 = v16[1];
        if (!v14)
        {
          v15 = v16 + 1;
          goto LABEL_39;
        }
      }
      else
      {
        if (v22 <= 9)
          goto LABEL_32;
LABEL_18:
        v14 = *v16;
        v15 = v16;
        if (!*v16)
          goto LABEL_39;
      }
    }
  }
  v15 = (uint64_t **)&v32[1];
  v16 = (uint64_t **)&v32[1];
LABEL_39:
  v26 = (char *)operator new(0x50uLL);
  *((_OWORD *)v26 + 2) = *(_OWORD *)__p;
  v27 = v31;
  __p[1] = 0;
  v31 = 0;
  __p[0] = 0;
  *((_QWORD *)v26 + 6) = v27;
  *((_QWORD *)v26 + 7) = 0;
  *((_QWORD *)v26 + 8) = 0;
  *((_QWORD *)v26 + 9) = 0;
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = 0;
  *((_QWORD *)v26 + 2) = v16;
  *v15 = (uint64_t *)v26;
  v28 = (uint64_t *)v26;
  if (*(_QWORD *)v32[0])
  {
    v32[0] = *(_QWORD *)v32[0];
    v28 = *v15;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v32[1], v28);
  ++v32[2];
  if ((v26[79] & 0x80000000) == 0)
    goto LABEL_42;
LABEL_44:
  std::string::__init_copy_ctor_external(a1, *((const std::string::value_type **)v26 + 7), *((_QWORD *)v26 + 8));
LABEL_45:
  if (SHIBYTE(v31) < 0)
    operator delete(__p[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v32[1]);
}

void sub_19E9EFCB0(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_19E9EFCCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E9EFCE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  if (a14 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a16);
  _Unwind_Resume(a1);
}

void config::hw::regionCode(config::hw *this)
{
  ctu::Gestalt *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v2 = off_1EE52E190;
  if (!off_1EE52E190)
  {
    ctu::Gestalt::create_default_global(v1);
    v3 = (std::__shared_weak_count *)*(&off_1EE52E190 + 1);
    off_1EE52E190 = v11;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v2 = off_1EE52E190;
  }
  v6 = (std::__shared_weak_count *)*(&off_1EE52E190 + 1);
  if (*(&off_1EE52E190 + 1))
  {
    v7 = (unint64_t *)(*(&off_1EE52E190 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_19E9EFE5C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_19E9EFE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void config::hw::regionInfo(config::hw *this)
{
  ctu::Gestalt *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v2 = off_1EE52E190;
  if (!off_1EE52E190)
  {
    ctu::Gestalt::create_default_global(v1);
    v3 = (std::__shared_weak_count *)*(&off_1EE52E190 + 1);
    off_1EE52E190 = v11;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v2 = off_1EE52E190;
  }
  v6 = (std::__shared_weak_count *)*(&off_1EE52E190 + 1);
  if (*(&off_1EE52E190 + 1))
  {
    v7 = (unint64_t *)(*(&off_1EE52E190 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_19E9EFFE4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_19E9F0000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t config::build::carrier(config::build *this)
{
  uint64_t result;

  result = TelephonyUtilIsCarrierBuild();
  if ((_DWORD)result)
    return TelephonyUtilIsInternalBuild() ^ 1;
  return result;
}

uint64_t config::build::internal_or_carrier(config::build *this)
{
  if ((TelephonyUtilIsInternalBuild() & 1) != 0)
    return 1;
  else
    return TelephonyUtilIsCarrierBuild();
}

void config::build::version(config::build *this)
{
  ctu::Gestalt *v1;
  void (***v2)(_QWORD);
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v2 = (void (***)(_QWORD))off_1EE52E190;
  if (!off_1EE52E190)
  {
    ctu::Gestalt::create_default_global(v1);
    v3 = (std::__shared_weak_count *)*(&off_1EE52E190 + 1);
    off_1EE52E190 = v11;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v2 = (void (***)(_QWORD))off_1EE52E190;
  }
  v6 = (std::__shared_weak_count *)*(&off_1EE52E190 + 1);
  if (*(&off_1EE52E190 + 1))
  {
    v7 = (unint64_t *)(*(&off_1EE52E190 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (**v2)(v2);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_19E9F01B4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_19E9F01D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD *)(a1 + 8));
    if (*(char *)(a1 + 79) < 0)
    {
      operator delete(*(void **)(a1 + 56));
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_4;
    }
    else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_4:
      operator delete((void *)a1);
      return;
    }
    operator delete(*(void **)(a1 + 32));
    operator delete((void *)a1);
  }
}

uint64_t __cxx_global_var_init()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance, &dword_19E9C8000);
  }
  return result;
}

uint64_t qmi::QMuxClientIface::QMuxClientIface(uint64_t a1, __int128 *a2, char a3)
{
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = &unk_1E41526B8;
  v5 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_BYTE *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 33) = -1;
  *(_QWORD *)(a1 + 36) = 0x2FFFFFFFFLL;
  *(_BYTE *)(a1 + 44) = 1;
  return a1;
}

uint64_t qmi::QMuxClientIface::setLogLevel(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

uint64_t qmi::QMuxClientIface::setShouldResetOnTimeout(uint64_t this, char a2)
{
  *(_BYTE *)(this + 44) = a2;
  return this;
}

uint64_t qmi::QMuxClientIface::setMaxLogBytes(uint64_t this, int a2)
{
  *(_DWORD *)(this + 36) = a2;
  return this;
}

void qmi::create_client_proxy_state(uint64_t *a1@<X0>, __int128 *a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;

  v8 = (std::__shared_weak_count *)operator new(0x80uLL);
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E41530A0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)off_1E41534C0;
  v8[3].__shared_owners_ = 0;
  v8[4].__shared_weak_owners_ = 0;
  v8[1].__shared_weak_owners_ = 0;
  v8[2].__vftable = 0;
  v8[1].__shared_owners_ = 0;
  v8[5].__vftable = (std::__shared_weak_count_vtbl *)xpc_null_create();
  v30 = (uint64_t)&v8[1];
  v31 = v8;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v8[1].__shared_owners_ = (uint64_t)&v8[1];
  v8[1].__shared_weak_owners_ = (uint64_t)v8;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  v14 = operator new(0x138uLL);
  v15 = (uint64_t)v14;
  v26 = v30;
  v27 = v31;
  if (v31)
  {
    v16 = (unint64_t *)&v31->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  qmi::QmiClientProxyAdapter::QmiClientProxyAdapter((uint64_t)v14, a1, a2, a3, &v26);
  v28 = 0xAAAAAAAAAAAAAAAALL;
  v29 = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<qmi::QmiClientProxyAdapter>::shared_ptr[abi:ne180100]<qmi::QmiClientProxyAdapter,std::shared_ptr<qmi::QmiClientProxyAdapter> ctu::SharedSynchronizable<qmi::ClientProxy::State>::make_shared_ptr<qmi::QmiClientProxyAdapter>(qmi::QmiClientProxyAdapter*)::{lambda(qmi::QmiClientProxyAdapter*)#1},void>(&v28, v15);
  v18 = v29;
  if (v28)
    v19 = v28 + 48;
  else
    v19 = 0;
  *a4 = v19;
  a4[1] = v18;
  v28 = 0;
  v29 = 0;
  v20 = v27;
  if (v27)
  {
    v21 = (unint64_t *)&v27->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v31;
  if (v31)
  {
    v24 = (unint64_t *)&v31->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_19E9F05AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_19E9F05C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;

  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v13);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_19E9F05EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void qmi::create_client_proxy_gcd_state(uint64_t *a1@<X0>, __int128 *a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, unint64_t *a6@<X8>)
{
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  void *v32;
  uint64_t v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  std::__shared_weak_count *v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  std::__shared_weak_count *v49;

  v12 = (char *)operator new(0xA8uLL);
  v13 = (std::__shared_weak_count *)v12;
  *((_QWORD *)v12 + 1) = 0;
  v14 = (unint64_t *)(v12 + 8);
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = off_1E4153560;
  *((_QWORD *)v12 + 3) = &off_1E41530E0;
  *((_QWORD *)v12 + 10) = 0;
  *((_QWORD *)v12 + 14) = 0;
  *((_QWORD *)v12 + 6) = 0;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  v48 = v12 + 24;
  v49 = (std::__shared_weak_count *)v12;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  v16 = (unint64_t *)(v12 + 16);
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  *((_QWORD *)v12 + 4) = v12 + 24;
  *((_QWORD *)v12 + 5) = v12;
  do
    v18 = __ldaxr(v14);
  while (__stlxr(v18 - 1, v14));
  if (!v18)
  {
    (*(void (**)(char *))(*(_QWORD *)v12 + 16))(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  v19 = v48;
  v20 = *a4;
  v21 = (std::__shared_weak_count *)a4[1];
  if (v21)
  {
    p_shared_weak_owners = (unint64_t *)&v21->__shared_weak_owners_;
    do
      v23 = __ldxr(p_shared_weak_owners);
    while (__stxr(v23 + 1, p_shared_weak_owners));
    do
      v24 = __ldxr(p_shared_weak_owners);
    while (__stxr(v24 + 1, p_shared_weak_owners));
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)v48 + 13);
  *((_QWORD *)v48 + 12) = v20;
  v19[13] = v21;
  if (v25)
    std::__shared_weak_count::__release_weak(v25);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  v26 = *a5;
  v27 = (std::__shared_weak_count *)a5[1];
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_weak_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    do
      v30 = __ldxr(v28);
    while (__stxr(v30 + 1, v28));
  }
  v31 = (std::__shared_weak_count *)v19[15];
  v19[14] = v26;
  v19[15] = v27;
  if (v31)
    std::__shared_weak_count::__release_weak(v31);
  if (v27)
    std::__shared_weak_count::__release_weak(v27);
  v32 = operator new(0x138uLL);
  v33 = (uint64_t)v32;
  v44 = v19;
  v45 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v35 = __ldxr(p_shared_owners);
    while (__stxr(v35 + 1, p_shared_owners));
  }
  qmi::QmiClientProxyAdapter::QmiClientProxyAdapter((uint64_t)v32, a1, a2, a3, (uint64_t *)&v44);
  v46 = 0xAAAAAAAAAAAAAAAALL;
  v47 = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<qmi::QmiClientProxyAdapter>::shared_ptr[abi:ne180100]<qmi::QmiClientProxyAdapter,std::shared_ptr<qmi::QmiClientProxyAdapter> ctu::SharedSynchronizable<qmi::ClientProxy::State>::make_shared_ptr<qmi::QmiClientProxyAdapter>(qmi::QmiClientProxyAdapter*)::{lambda(qmi::QmiClientProxyAdapter*)#1},void>(&v46, v33);
  v36 = v47;
  if (v46)
    v37 = v46 + 48;
  else
    v37 = 0;
  *a6 = v37;
  a6[1] = v36;
  v46 = 0;
  v47 = 0;
  v38 = v45;
  if (v45)
  {
    v39 = (unint64_t *)&v45->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v49;
  if (v49)
  {
    v42 = (unint64_t *)&v49->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
}

void sub_19E9F0874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_19E9F0890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;

  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v13);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_19E9F08B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<qmi::EurTransportXPC>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E41534C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<qmi::EurTransportXPC>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E41534C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<qmi::EurTransportXPC>::__on_zero_shared(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  NSObject *v6;
  std::__shared_weak_count *v7;

  a1[3] = &off_1E41530A0;
  MEMORY[0x1A1AEAF4C](a1 + 15);
  a1[3] = &unk_1E4153060;
  v2 = (_QWORD *)a1[14];
  if (v2 == a1 + 11)
  {
    v3 = 4;
    v2 = a1 + 11;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = (_QWORD *)a1[10];
  if (v4 == a1 + 7)
  {
    v5 = 4;
    v4 = a1 + 7;
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  v6 = a1[6];
  if (v6)
    dispatch_release(v6);
  v7 = (std::__shared_weak_count *)a1[5];
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

_QWORD *std::shared_ptr<qmi::QmiClientProxyAdapter>::shared_ptr[abi:ne180100]<qmi::QmiClientProxyAdapter,std::shared_ptr<qmi::QmiClientProxyAdapter> ctu::SharedSynchronizable<qmi::ClientProxy::State>::make_shared_ptr<qmi::QmiClientProxyAdapter>(qmi::QmiClientProxyAdapter*)::{lambda(qmi::QmiClientProxyAdapter*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E4153510;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 64);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 56) = a2 + 48;
    *(_QWORD *)(a2 + 64) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 56) = a2 + 48;
    *(_QWORD *)(a2 + 64) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_19E9F0AD0(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[9], v1, (dispatch_function_t)std::shared_ptr<qmi::QmiClientProxyAdapter> ctu::SharedSynchronizable<qmi::ClientProxy::State>::make_shared_ptr<qmi::QmiClientProxyAdapter>(qmi::QmiClientProxyAdapter*)::{lambda(qmi::QmiClientProxyAdapter*)#1}::operator() const(qmi::QmiClientProxyAdapter*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_19E9F0AF0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<qmi::QmiClientProxyAdapter *,std::shared_ptr<qmi::QmiClientProxyAdapter> ctu::SharedSynchronizable<qmi::ClientProxy::State>::make_shared_ptr<qmi::QmiClientProxyAdapter>(qmi::QmiClientProxyAdapter*)::{lambda(qmi::QmiClientProxyAdapter *)#1},std::allocator<qmi::QmiClientProxyAdapter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<qmi::QmiClientProxyAdapter *,std::shared_ptr<qmi::QmiClientProxyAdapter> ctu::SharedSynchronizable<qmi::ClientProxy::State>::make_shared_ptr<qmi::QmiClientProxyAdapter>(qmi::QmiClientProxyAdapter*)::{lambda(qmi::QmiClientProxyAdapter *)#1},std::allocator<qmi::QmiClientProxyAdapter>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 72), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<qmi::QmiClientProxyAdapter> ctu::SharedSynchronizable<qmi::ClientProxy::State>::make_shared_ptr<qmi::QmiClientProxyAdapter>(qmi::QmiClientProxyAdapter*)::{lambda(qmi::QmiClientProxyAdapter*)#1}::operator() const(qmi::QmiClientProxyAdapter*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<qmi::QmiClientProxyAdapter *,std::shared_ptr<qmi::QmiClientProxyAdapter> ctu::SharedSynchronizable<qmi::ClientProxy::State>::make_shared_ptr<qmi::QmiClientProxyAdapter>(qmi::QmiClientProxyAdapter*)::{lambda(qmi::QmiClientProxyAdapter *)#1},std::allocator<qmi::QmiClientProxyAdapter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN3qmi11ClientProxy5StateEE15make_shared_ptrINS1_21QmiClientProxyAdapte"
                     "rEEENSt3__110shared_ptrIT_EEPS9_EUlPS6_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN3qmi11ClientProxy5StateEE15make_shared_ptrINS1_21QmiClient"
                                "ProxyAdapterEEENSt3__110shared_ptrIT_EEPS9_EUlPS6_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN3qmi11ClientProxy5StateEE15make_shared_ptrINS1_21QmiClientProxyAdapterEEENSt3__110shared_ptrIT_EEPS9_EUlPS6_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN3qmi11ClientProxy5StateEE15make_shared_ptrINS1_21QmiClientProxyAdapterEEENSt3__110shared_ptrIT_EEPS9_EUlPS6_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<qmi::QmiClientProxyAdapter> ctu::SharedSynchronizable<qmi::ClientProxy::State>::make_shared_ptr<qmi::QmiClientProxyAdapter>(qmi::QmiClientProxyAdapter*)::{lambda(qmi::QmiClientProxyAdapter*)#1}::operator() const(qmi::QmiClientProxyAdapter*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_emplace<qmi::EurTransportLocal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E4153560;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<qmi::EurTransportLocal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E4153560;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<qmi::EurTransportLocal>::__on_zero_shared(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  NSObject *v11;
  std::__shared_weak_count *v12;

  a1[3] = &off_1E41530E0;
  v2 = (std::__shared_weak_count *)a1[20];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[18];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[18];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[16];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  a1[3] = &unk_1E4153060;
  v7 = (_QWORD *)a1[14];
  if (v7 == a1 + 11)
  {
    v8 = 4;
    v7 = a1 + 11;
  }
  else
  {
    if (!v7)
      goto LABEL_14;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_14:
  v9 = (_QWORD *)a1[10];
  if (v9 == a1 + 7)
  {
    v10 = 4;
    v9 = a1 + 7;
  }
  else
  {
    if (!v9)
      goto LABEL_19;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_19:
  v11 = a1[6];
  if (v11)
    dispatch_release(v11);
  v12 = (std::__shared_weak_count *)a1[5];
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
}

const char *asString(unsigned int a1)
{
  if (a1 > 6)
    return "atcs";
  else
    return off_1E41537C0[a1];
}

void ATCSLogger::ATCSLogger(ATCSLogger *this)
{
  *(_QWORD *)this = off_1E4153698;
}

void ATCSLogger::instantiate(ATCSLogger *this, ATCSLogger *a2)
{
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN10ATCSLogger11instantiateEPS__block_invoke;
  block[3] = &__block_descriptor_tmp_4;
  block[4] = this;
  if (ATCSLogger::instantiate(ATCSLogger*)::onceToken != -1)
    dispatch_once(&ATCSLogger::instantiate(ATCSLogger*)::onceToken, block);
}

uint64_t ___ZN10ATCSLogger11instantiateEPS__block_invoke(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  pthread_mutex_t *v4;

  {
    ATCSMutex::ATCSMutex((ATCSMutex *)&ATCSLoggerGetCommonMutex(void)::sMutex, "ATCSLogger");
    __cxa_atexit((void (*)(void *))ATCSMutex::~ATCSMutex, &ATCSLoggerGetCommonMutex(void)::sMutex, &dword_19E9C8000);
  }
  v3 = ATCSLoggerGetCommonMutex(void)::sMutex;
  pthread_mutex_lock((pthread_mutex_t *)ATCSLoggerGetCommonMutex(void)::sMutex);
  *(_QWORD *)(v3 + 64) = pthread_self();
  if (ATCSLogger::fsInstance)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)ATCSLogger::fsInstance + 8))(ATCSLogger::fsInstance);
    ATCSLogger::fsInstance = 0;
  }
  ATCSLogger::fsInstance = *(_QWORD *)(a1 + 32);
  v4 = (pthread_mutex_t *)ATCSLoggerGetCommonMutex(void)::sMutex;
  pthread_self();
  v4[1].__sig = 0;
  return pthread_mutex_unlock(v4);
}

void sub_19E9F0EE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *ATCSLogger::getInstance(ATCSLogger *this)
{
  unsigned __int8 v1;
  uint64_t v2;
  _QWORD *v3;
  pthread_mutex_t *v4;

  {
    ATCSMutex::ATCSMutex((ATCSMutex *)&ATCSLoggerGetCommonMutex(void)::sMutex, "ATCSLogger");
    __cxa_atexit((void (*)(void *))ATCSMutex::~ATCSMutex, &ATCSLoggerGetCommonMutex(void)::sMutex, &dword_19E9C8000);
  }
  v2 = ATCSLoggerGetCommonMutex(void)::sMutex;
  pthread_mutex_lock((pthread_mutex_t *)ATCSLoggerGetCommonMutex(void)::sMutex);
  *(_QWORD *)(v2 + 64) = pthread_self();
  v3 = (_QWORD *)ATCSLogger::fsInstance;
  if (!ATCSLogger::fsInstance)
  {
    v3 = operator new(0x10uLL);
    *v3 = off_1E4153698;
    ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(v3 + 1), "com.apple.telephony.bb", "atcs");
    *v3 = off_1E4153748;
    ATCSLogger::fsInstance = (uint64_t)v3;
  }
  v4 = (pthread_mutex_t *)ATCSLoggerGetCommonMutex(void)::sMutex;
  pthread_self();
  v4[1].__sig = 0;
  pthread_mutex_unlock(v4);
  return v3;
}

void sub_19E9F0FF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E9F100C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  pthread_mutex_t *v4;

  operator delete(v1);
  v4 = *(pthread_mutex_t **)(v2 + 496);
  pthread_self();
  v4[1].__sig = 0;
  pthread_mutex_unlock(v4);
  _Unwind_Resume(a1);
}

uint64_t ATCSLogger::logCommand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  size_t v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[4];
  unsigned int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v12 = (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a6 + 16))(a6, a5);
  v13 = MEMORY[0x1E0C80A78]();
  v15 = &v19[-v14];
  if (v13)
    memset(&v19[-v14], 170, v12);
  v20 = -1431655766;
  v16 = (*(uint64_t (**)(uint64_t, _BYTE *, size_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a6 + 24))(a6, v15, v12, a4, a5, &v20);
  if ((_DWORD)v16)
  {
    v17 = v20;
  }
  else
  {
    v17 = 0;
    *v15 = 0;
    v20 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2, a3, v15, v16, v17, a4, a5);
}

void ATCSLoggerDefault::~ATCSLoggerDefault(ATCSLoggerDefault *this)
{
  MEMORY[0x1A1AEAED4]((char *)this + 8);
}

{
  MEMORY[0x1A1AEAED4]((char *)this + 8);
  operator delete(this);
}

void ATCSLoggerDefault::logWithLabel(uint64_t a1, unsigned int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const char *v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  size_t v16;
  __int128 v17;
  NSObject *v18;
  int v19;
  std::string::size_type v20;
  uint64_t v21;
  std::string *p_dst;
  uint64_t v23;
  _QWORD v24[7];
  _OWORD v25[3];
  unint64_t v26;
  uint64_t *v27;
  std::string __dst;
  uint8_t buf[4];
  std::string *v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  memset(&__dst, 170, sizeof(__dst));
  if (a2 > 6)
    v12 = "atcs";
  else
    v12 = off_1E41537C0[a2];
  v13 = strlen(v12);
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v14 = v13;
  if (v13 < 0x17)
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v13;
    if (v13)
    {
      memcpy(&__dst, v12, v13);
      __dst.__r_.__value_.__s.__data_[v14] = 0;
      if (!a3)
        goto LABEL_16;
    }
    else
    {
      __dst.__r_.__value_.__s.__data_[0] = 0;
      if (!a3)
        goto LABEL_16;
    }
    goto LABEL_14;
  }
  v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17)
    v15 = v13 | 7;
  __dst.__r_.__value_.__l.__size_ = v13;
  __dst.__r_.__value_.__r.__words[2] = (v15 + 1) | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(v15 + 1);
  memcpy(__dst.__r_.__value_.__l.__data_, v12, v14);
  *(_BYTE *)(__dst.__r_.__value_.__r.__words[0] + v14) = 0;
  if (a3)
  {
LABEL_14:
    if (*a3)
    {
      std::string::push_back(&__dst, 46);
      v16 = strlen(a3);
      std::string::append(&__dst, a3, v16);
    }
  }
LABEL_16:
  v27 = &a9;
  v26 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v25[1] = v17;
  v25[2] = v17;
  v25[0] = v17;
  ctu::LogMessageBuffer::LogMessageBuffer((ctu::LogMessageBuffer *)v25);
  MEMORY[0x1A1AEAF88](v24, a4, v27);
  ctu::LogMessageBuffer::operator=();
  MEMORY[0x1A1AEAFA0](v24);
  v18 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    v19 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
    v20 = __dst.__r_.__value_.__r.__words[0];
    v21 = ctu::LogMessageBuffer::str((ctu::LogMessageBuffer *)v25);
    p_dst = &__dst;
    if (v19 < 0)
      p_dst = (std::string *)v20;
    if (*(char *)(v21 + 23) >= 0)
      v23 = v21;
    else
      v23 = *(_QWORD *)v21;
    *(_DWORD *)buf = 136315394;
    v30 = p_dst;
    v31 = 2080;
    v32 = v23;
    _os_log_impl(&dword_19E9C8000, v18, OS_LOG_TYPE_DEFAULT, "#I %s: %s", buf, 0x16u);
  }
  MEMORY[0x1A1AEAFA0](v25);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_19E9F141C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  MEMORY[0x1A1AEAFA0](va);
  if (*(char *)(v9 - 97) < 0)
  {
    operator delete(*(void **)(v9 - 120));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t ATCSLoggerDefault::fault(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const char *v11;
  __int128 v12;
  NSObject *v13;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[7];
  _OWORD v18[3];
  unint64_t v19;
  uint64_t *v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (a2 > 6)
    v11 = "atcs";
  else
    v11 = off_1E41537C0[a2];
  v20 = &a9;
  v19 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v18[1] = v12;
  v18[2] = v12;
  v18[0] = v12;
  ctu::LogMessageBuffer::LogMessageBuffer((ctu::LogMessageBuffer *)v18);
  MEMORY[0x1A1AEAF88](v17, a3, v20);
  ctu::LogMessageBuffer::operator=();
  MEMORY[0x1A1AEAFA0](v17);
  v13 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
  {
    v15 = ctu::LogMessageBuffer::str((ctu::LogMessageBuffer *)v18);
    if (*(char *)(v15 + 23) >= 0)
      v16 = v15;
    else
      v16 = *(_QWORD *)v15;
    *(_DWORD *)buf = 136315394;
    v22 = v11;
    v23 = 2080;
    v24 = v16;
    _os_log_fault_impl(&dword_19E9C8000, v13, OS_LOG_TYPE_FAULT, "%s: %s", buf, 0x16u);
  }
  return MEMORY[0x1A1AEAFA0](v18);
}

void ATCSLoggerDefault::logCommandInternal(uint64_t a1, unsigned int a2, const char *a3, const void *a4, unsigned int a5, unsigned int a6, uint64_t a7, int a8)
{
  const char *v14;
  size_t v15;
  std::string::size_type v16;
  uint64_t v17;
  std::string *p_dst;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  NSObject *v22;
  std::string *v23;
  size_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  ctu *v29;
  int v30;
  void **v31;
  void **v32;
  void *p_p;
  void *__p;
  char v36;
  void *v37[2];
  unint64_t v38;
  std::string __dst;
  uint8_t buf[4];
  std::string *v41;
  __int16 v42;
  void **v43;
  __int16 v44;
  void *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  memset(&__dst, 170, sizeof(__dst));
  if (a2 > 6)
    v14 = "atcs";
  else
    v14 = off_1E41537C0[a2];
  v15 = strlen(v14);
  if (v15 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v16 = v15;
  v17 = a7;
  if (v15 >= 0x17)
  {
    v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v19 = v15 | 7;
    v20 = v19 + 1;
    p_dst = (std::string *)operator new(v19 + 1);
    __dst.__r_.__value_.__l.__size_ = v16;
    __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v15;
    p_dst = &__dst;
    if (!v15)
    {
      __dst.__r_.__value_.__s.__data_[0] = 0;
      if (!a3)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  memcpy(p_dst, v14, v16);
  p_dst->__r_.__value_.__s.__data_[v16] = 0;
  if (!a3)
    goto LABEL_15;
LABEL_13:
  if (*a3)
  {
    std::string::push_back(&__dst, 46);
    v21 = strlen(a3);
    std::string::append(&__dst, a3, v21);
  }
LABEL_15:
  v22 = *(NSObject **)(a1 + 8);
  if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    goto LABEL_33;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = &__dst;
  else
    v23 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  v24 = a5;
  if (a5 >= 0x17)
  {
    v26 = (a5 & 0xFFFFFFF8) + 8;
    if ((a5 | 7) != 0x17)
      v26 = a5 | 7;
    v27 = v26 + 1;
    v25 = operator new(v26 + 1);
    v37[1] = (void *)v24;
    v38 = v27 | 0x8000000000000000;
    v37[0] = v25;
    goto LABEL_25;
  }
  HIBYTE(v38) = a5;
  v25 = v37;
  if (a5)
LABEL_25:
    memcpy(v25, a4, v24);
  v28 = a8 - a6;
  v29 = (ctu *)(v17 + a6);
  *((_BYTE *)v25 + v24) = 0;
  v30 = SHIBYTE(v38);
  v31 = (void **)v37[0];
  ctu::hex(v29, (const void *)v28);
  v32 = v37;
  if (v30 < 0)
    v32 = v31;
  if (v36 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  *(_DWORD *)buf = 136315650;
  v41 = v23;
  v42 = 2080;
  v43 = v32;
  v44 = 2080;
  v45 = p_p;
  _os_log_impl(&dword_19E9C8000, v22, OS_LOG_TYPE_DEFAULT, "#I %s: %s [%s]", buf, 0x20u);
  if (v36 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v38) & 0x80000000) == 0)
    {
LABEL_33:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      goto LABEL_34;
    }
  }
  else if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete(v37[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_34:
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_19E9F1880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Transaction::Transaction(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = 0;
  v7 = *a4;
  if (*a4)
    v7 = _Block_copy(v7);
  v9 = *a2;
  v8 = a2[1];
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v8;
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 40) = 0;
  return a1;
}

{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = 0;
  v7 = *a4;
  if (*a4)
    v7 = _Block_copy(v7);
  v9 = *a2;
  v8 = a2[1];
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v8;
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 40) = 0;
  return a1;
}

void qmi::Transaction::~Transaction(qmi::Transaction *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  const void *v11;

  if (*((_QWORD *)this + 1))
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x2A, "!fCallback", "is not", "true", a6);
  if (*(_QWORD *)this)
  {
    dispatch_source_cancel(*(dispatch_source_t *)this);
    v7 = *(NSObject **)this;
    *(_QWORD *)this = 0;
    if (v7)
      dispatch_release(v7);
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (!v8)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
LABEL_10:
    v11 = (const void *)*((_QWORD *)this + 1);
    if (!v11)
      goto LABEL_12;
    goto LABEL_11;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  v11 = (const void *)*((_QWORD *)this + 1);
  if (v11)
LABEL_11:
    _Block_release(v11);
LABEL_12:
  if (*(_QWORD *)this)
    dispatch_release(*(dispatch_object_t *)this);
}

void qmi::Transaction::cancelTimer(NSObject **this)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *this;
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *this;
    *this = 0;
    if (v3)
      dispatch_release(v3);
  }
}

void qmi::Transaction::startTimer(uint64_t a1, uint64_t a2)
{
  NSObject *current_queue;
  NSObject *v5;
  NSObject *v6;
  int64_t v7;
  __int16 v8;
  NSObject *v9;
  NSObject *v10;
  dispatch_time_t v11;
  _QWORD handler[5];
  dispatch_object_t object;
  __int16 v14;

  if (*(_QWORD *)(a1 + 32) && *(_QWORD *)(a1 + 8))
  {
    current_queue = dispatch_get_current_queue();
    v5 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, current_queue);
    v6 = *(NSObject **)a1;
    *(_QWORD *)a1 = v5;
    if (v6)
    {
      dispatch_release(v6);
      v5 = *(NSObject **)a1;
    }
    if (v5)
    {
      v7 = 1000000 * *(_QWORD *)(a1 + 32);
      v8 = *(_WORD *)(*(_QWORD *)(a1 + 16) + 26);
      dispatch_retain(v5);
      v9 = *(NSObject **)a1;
      handler[0] = MEMORY[0x1E0C809B0];
      handler[1] = 1174405120;
      handler[2] = ___ZN3qmi11Transaction10startTimerEU13block_pointerFvtE_block_invoke;
      handler[3] = &__block_descriptor_tmp_5;
      v14 = v8;
      handler[4] = a2;
      object = v5;
      dispatch_retain(v5);
      dispatch_source_set_event_handler(v9, handler);
      v10 = *(NSObject **)a1;
      v11 = dispatch_time(0, v7);
      dispatch_source_set_timer(v10, v11, 0xFFFFFFFFFFFFFFFFLL, 0x2FAF080uLL);
      dispatch_activate(*(dispatch_object_t *)a1);
      if (object)
        dispatch_release(object);
      dispatch_release(v5);
    }
  }
}

void ___ZN3qmi11Transaction10startTimerEU13block_pointerFvtE_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 40));
}

void __copy_helper_block_e8_32b40c23_ZTSKN8dispatch6sourceE(uint64_t a1, uint64_t a2)
{
  NSObject *v4;

  _Block_object_assign((void *)(a1 + 32), *(const void **)(a2 + 32), 7);
  v4 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
    dispatch_retain(v4);
}

void __destroy_helper_block_e8_32b40c23_ZTSKN8dispatch6sourceE(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 40);
  if (v2)
    dispatch_release(v2);
  _Block_object_dispose(*(const void **)(a1 + 32), 7);
}

void qmi::Transaction::invoke(NSObject **this, NSObject *a2, const qmi::ResponseBase *a3)
{
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD v18[3];

  v6 = *this;
  if (v6)
  {
    dispatch_source_cancel(v6);
    v7 = *this;
    *this = 0;
    if (v7)
      dispatch_release(v7);
  }
  v8 = this[1];
  this[1] = 0;
  if (v8)
  {
    v9 = _Block_copy(v8);
    v10 = *(_QWORD *)a3;
    v11 = *((_QWORD *)a3 + 1);
    v18[0] = *(_QWORD *)a3;
    v18[1] = v11;
    v12 = *((_QWORD *)a3 + 2);
    v18[2] = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v15 = operator new(0x20uLL);
    *v15 = v9;
    v15[1] = v10;
    v15[2] = v11;
    v15[3] = v12;
    if (v12)
    {
      v16 = (unint64_t *)(v12 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    dispatch_async_f(a2, v15, (dispatch_function_t)dispatch::async<qmi::Transaction::invoke(dispatch_queue_s *,qmi::ResponseBase const&)::$_0>(dispatch_queue_s *,std::unique_ptr<qmi::Transaction::invoke(dispatch_queue_s *,qmi::ResponseBase const&)::$_0,std::default_delete<qmi::Transaction::invoke(dispatch_queue_s *,qmi::ResponseBase const&)::$_0>>)::{lambda(void *)#1}::__invoke);
    qmi::MessageBase::~MessageBase((qmi::MessageBase *)v18);
    _Block_release(v8);
  }
}

uint64_t qmi::TransactionQueue::State::State(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  int v13;
  capabilities::radio *v14;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  *(_DWORD *)(a1 + 32) = 0;
  v6 = a4[1];
  *(_QWORD *)(a1 + 40) = *a4;
  *(_QWORD *)(a1 + 48) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = a5[1];
  *(_QWORD *)(a1 + 56) = *a5;
  *(_QWORD *)(a1 + 64) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  v12 = *(unsigned __int8 *)(*a5 + 32);
  *(_BYTE *)(a1 + 264) = v12;
  *(_WORD *)(a1 + 266) = 1;
  if (v12)
  {
    v13 = 5;
  }
  else
  {
    v14 = (capabilities::radio *)capabilities::radio::supportsQMuxSendWindow((capabilities::radio *)a1);
    if ((_DWORD)v14)
      v13 = capabilities::radio::QMuxPendingRequestLimitCount(v14);
    else
      v13 = 1024;
  }
  *(_DWORD *)(a1 + 268) = v13;
  dispatch_retain(*(dispatch_object_t *)(a1 + 16));
  dispatch_retain(*(dispatch_object_t *)(a1 + 24));
  return a1;
}

void sub_19E9F1EA4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void **v5;
  void **v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;

  std::vector<dispatch::group_session>::~vector[abi:ne180100](v5);
  std::vector<dispatch::group_session>::~vector[abi:ne180100](v6);
  boost::ptr_deque<qmi::Transaction,boost::heap_clone_allocator,std::allocator<void *>>::~ptr_deque(v4, v8, v9, v10, v11, v12);
  boost::ptr_deque<qmi::Transaction,boost::heap_clone_allocator,std::allocator<void *>>::~ptr_deque(v3, v13, v14, v15, v16, v17);
  boost::ptr_deque<qmi::Transaction,boost::heap_clone_allocator,std::allocator<void *>>::~ptr_deque(v2, v18, v19, v20, v21, v22);
  v23 = (std::__shared_weak_count *)v1[8];
  if (v23)
  {
    std::__shared_weak_count::__release_weak(v23);
    v24 = (std::__shared_weak_count *)v1[6];
    if (!v24)
    {
LABEL_3:
      v25 = (std::__shared_weak_count *)v1[1];
      if (!v25)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v24 = (std::__shared_weak_count *)v1[6];
    if (!v24)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v24);
  v25 = (std::__shared_weak_count *)v1[1];
  if (!v25)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  std::__shared_weak_count::__release_weak(v25);
  _Unwind_Resume(a1);
}

void **std::vector<dispatch::group_session>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = *((_QWORD *)v5 - 1);
        v5 -= 8;
        v6 = v7;
        if (v7)
        {
          dispatch_group_leave(v6);
          v8 = *((_QWORD *)v3 - 1);
          if (v8)
            dispatch_release(v8);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t boost::ptr_deque<qmi::Transaction,boost::heap_clone_allocator,std::allocator<void *>>::~ptr_deque(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v7;
  unint64_t v8;
  qmi::Transaction ***v9;
  qmi::Transaction **v10;
  qmi::Transaction **v11;
  uint64_t v12;
  void *v13;
  qmi::Transaction **v14;

  v7 = a1[1];
  if (a1[2] != v7)
  {
    v8 = a1[4];
    v9 = (qmi::Transaction ***)(v7 + 8 * (v8 >> 9));
    v10 = *v9;
    v11 = &(*v9)[v8 & 0x1FF];
    v12 = *(_QWORD *)(v7 + (((a1[5] + v8) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v8) & 0x1FF);
    while (v11 != (qmi::Transaction **)v12)
    {
      if (*v11)
      {
        qmi::Transaction::~Transaction(*v11, a2, a3, a4, a5, a6);
        operator delete(v13);
        v10 = *v9;
      }
      if ((char *)++v11 - (char *)v10 == 4096)
      {
        v14 = v9[1];
        ++v9;
        v10 = v14;
        v11 = v14;
      }
    }
  }
  return std::deque<ATCSDPCQueue::Callback *>::~deque[abi:ne180100]((uint64_t)a1);
}

void qmi::TransactionQueue::State::~State(dispatch_object_t *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  dispatch_object_t v8;
  dispatch_object_t v9;
  dispatch_object_t v10;
  NSObject *v11;
  NSObject *isa;
  NSObject *v13;
  NSObject *v14;
  dispatch_object_t v15;
  dispatch_object_t v16;
  dispatch_object_t v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  unint64_t v22;
  NSObject *v23;
  qmi::Transaction **v24;
  qmi::Transaction **v25;
  uint64_t v26;
  void *v27;
  qmi::Transaction **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  NSObject *v34;
  unint64_t v35;
  NSObject *v36;
  qmi::Transaction **v37;
  qmi::Transaction **v38;
  uint64_t v39;
  void *v40;
  qmi::Transaction **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  NSObject *v47;
  unint64_t v48;
  NSObject *v49;
  qmi::Transaction **v50;
  qmi::Transaction **v51;
  uint64_t v52;
  void *v53;
  qmi::Transaction **v54;
  std::__shared_weak_count *v55;
  std::__shared_weak_count *v56;
  std::__shared_weak_count *v57;

  qmi::TransactionQueue::State::stop_sync((qmi::TransactionQueue::State *)this);
  dispatch_release(this[3]);
  dispatch_release(this[2]);
  v7 = this[30];
  if (v7)
  {
    v8 = this[31];
    v9 = this[30];
    if (v8 != v7)
    {
      v10 = this[31];
      do
      {
        isa = v10[-1].isa;
        --v10;
        v11 = isa;
        if (isa)
        {
          dispatch_group_leave(v11);
          v13 = v8[-1].isa;
          if (v13)
            dispatch_release(v13);
        }
        v8 = v10;
      }
      while (v10 != v7);
      v9 = this[30];
    }
    this[31] = v7;
    operator delete(v9);
  }
  v14 = this[27];
  if (v14)
  {
    v15 = this[28];
    v16 = this[27];
    if (v15 != v14)
    {
      v17 = this[28];
      do
      {
        v19 = v17[-1].isa;
        --v17;
        v18 = v19;
        if (v19)
        {
          dispatch_group_leave(v18);
          v20 = v15[-1].isa;
          if (v20)
            dispatch_release(v20);
        }
        v15 = v17;
      }
      while (v17 != v14);
      v16 = this[27];
    }
    this[28] = v14;
    operator delete(v16);
  }
  v21 = this[22];
  if (this[23] != v21)
  {
    v22 = (unint64_t)this[25];
    v23 = &v21[v22 >> 9];
    v24 = (qmi::Transaction **)v23->isa;
    v25 = (qmi::Transaction **)((char *)v23->isa + 8 * (v22 & 0x1FF));
    v26 = *(uint64_t *)((char *)&v21->isa + ((((unint64_t)this[26] + v22) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * (((unint64_t)this[26] + v22) & 0x1FF);
    while (v25 != (qmi::Transaction **)v26)
    {
      if (*v25)
      {
        qmi::Transaction::~Transaction(*v25, v2, v3, v4, v5, v6);
        operator delete(v27);
        v24 = (qmi::Transaction **)v23->isa;
      }
      if ((char *)++v25 - (char *)v24 == 4096)
      {
        v28 = (qmi::Transaction **)v23[1].isa;
        ++v23;
        v24 = v28;
        v25 = v28;
      }
    }
  }
  std::deque<ATCSDPCQueue::Callback *>::~deque[abi:ne180100]((uint64_t)(this + 21));
  v34 = this[16];
  if (this[17] != v34)
  {
    v35 = (unint64_t)this[19];
    v36 = &v34[v35 >> 9];
    v37 = (qmi::Transaction **)v36->isa;
    v38 = (qmi::Transaction **)((char *)v36->isa + 8 * (v35 & 0x1FF));
    v39 = *(uint64_t *)((char *)&v34->isa + ((((unint64_t)this[20] + v35) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * (((unint64_t)this[20] + v35) & 0x1FF);
    while (v38 != (qmi::Transaction **)v39)
    {
      if (*v38)
      {
        qmi::Transaction::~Transaction(*v38, v29, v30, v31, v32, v33);
        operator delete(v40);
        v37 = (qmi::Transaction **)v36->isa;
      }
      if ((char *)++v38 - (char *)v37 == 4096)
      {
        v41 = (qmi::Transaction **)v36[1].isa;
        ++v36;
        v37 = v41;
        v38 = v41;
      }
    }
  }
  std::deque<ATCSDPCQueue::Callback *>::~deque[abi:ne180100]((uint64_t)(this + 15));
  v47 = this[10];
  if (this[11] != v47)
  {
    v48 = (unint64_t)this[13];
    v49 = &v47[v48 >> 9];
    v50 = (qmi::Transaction **)v49->isa;
    v51 = (qmi::Transaction **)((char *)v49->isa + 8 * (v48 & 0x1FF));
    v52 = *(uint64_t *)((char *)&v47->isa + ((((unint64_t)this[14] + v48) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * (((unint64_t)this[14] + v48) & 0x1FF);
    while (v51 != (qmi::Transaction **)v52)
    {
      if (*v51)
      {
        qmi::Transaction::~Transaction(*v51, v42, v43, v44, v45, v46);
        operator delete(v53);
        v50 = (qmi::Transaction **)v49->isa;
      }
      if ((char *)++v51 - (char *)v50 == 4096)
      {
        v54 = (qmi::Transaction **)v49[1].isa;
        ++v49;
        v50 = v54;
        v51 = v54;
      }
    }
  }
  std::deque<ATCSDPCQueue::Callback *>::~deque[abi:ne180100]((uint64_t)(this + 9));
  v55 = (std::__shared_weak_count *)this[8];
  if (v55)
    std::__shared_weak_count::__release_weak(v55);
  v56 = (std::__shared_weak_count *)this[6];
  if (v56)
    std::__shared_weak_count::__release_weak(v56);
  v57 = (std::__shared_weak_count *)this[1];
  if (v57)
    std::__shared_weak_count::__release_weak(v57);
}

void qmi::TransactionQueue::State::stop_sync(qmi::TransactionQueue::State *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  NSObject ***v10;
  uint64_t v11;
  NSObject **v12;
  NSObject ***v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  NSObject ***v22;
  uint64_t v23;
  NSObject **v24;
  NSObject ***v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  NSObject ***v34;
  uint64_t v35;
  NSObject **v36;
  NSObject ***v37;
  _QWORD v38[3];

  *((_DWORD *)this + 8) = 0;
  if (*((_QWORD *)this + 14) || *((_QWORD *)this + 20) || *((_QWORD *)this + 26))
  {
    memset(v38, 170, sizeof(v38));
    qmi::MessageBase::MessageBase();
    v7 = *((_QWORD *)this + 10);
    if (*((_QWORD *)this + 11) != v7)
    {
      v8 = *((_QWORD *)this + 13);
      v9 = (_QWORD *)(v7 + 8 * (v8 >> 9));
      v10 = (NSObject ***)(*v9 + 8 * (v8 & 0x1FF));
      v11 = *(_QWORD *)(v7 + (((*((_QWORD *)this + 14) + v8) >> 6) & 0x3FFFFFFFFFFFFF8))
          + 8 * ((*((_QWORD *)this + 14) + v8) & 0x1FF);
      while (v10 != (NSObject ***)v11)
      {
        v12 = *v10++;
        qmi::Transaction::invoke(v12, *((NSObject **)this + 3), (const qmi::ResponseBase *)v38);
        if ((NSObject ***)((char *)v10 - *v9) == (NSObject ***)4096)
        {
          v13 = (NSObject ***)v9[1];
          ++v9;
          v10 = v13;
        }
      }
    }
    boost::ptr_container_detail::reversible_ptr_container<boost::ptr_container_detail::sequence_config<qmi::Transaction,std::deque<void *>>,boost::heap_clone_allocator>::clear((_QWORD *)this + 9, v2, v3, v4, v5, v6);
    v19 = *((_QWORD *)this + 16);
    if (*((_QWORD *)this + 17) != v19)
    {
      v20 = *((_QWORD *)this + 19);
      v21 = (_QWORD *)(v19 + 8 * (v20 >> 9));
      v22 = (NSObject ***)(*v21 + 8 * (v20 & 0x1FF));
      v23 = *(_QWORD *)(v19 + (((*((_QWORD *)this + 20) + v20) >> 6) & 0x3FFFFFFFFFFFFF8))
          + 8 * ((*((_QWORD *)this + 20) + v20) & 0x1FF);
      while (v22 != (NSObject ***)v23)
      {
        v24 = *v22++;
        qmi::Transaction::invoke(v24, *((NSObject **)this + 3), (const qmi::ResponseBase *)v38);
        if ((NSObject ***)((char *)v22 - *v21) == (NSObject ***)4096)
        {
          v25 = (NSObject ***)v21[1];
          ++v21;
          v22 = v25;
        }
      }
    }
    boost::ptr_container_detail::reversible_ptr_container<boost::ptr_container_detail::sequence_config<qmi::Transaction,std::deque<void *>>,boost::heap_clone_allocator>::clear((_QWORD *)this + 15, v14, v15, v16, v17, v18);
    v31 = *((_QWORD *)this + 22);
    if (*((_QWORD *)this + 23) != v31)
    {
      v32 = *((_QWORD *)this + 25);
      v33 = (_QWORD *)(v31 + 8 * (v32 >> 9));
      v34 = (NSObject ***)(*v33 + 8 * (v32 & 0x1FF));
      v35 = *(_QWORD *)(v31 + (((*((_QWORD *)this + 26) + v32) >> 6) & 0x3FFFFFFFFFFFFF8))
          + 8 * ((*((_QWORD *)this + 26) + v32) & 0x1FF);
      while (v34 != (NSObject ***)v35)
      {
        v36 = *v34++;
        qmi::Transaction::invoke(v36, *((NSObject **)this + 3), (const qmi::ResponseBase *)v38);
        if ((NSObject ***)((char *)v34 - *v33) == (NSObject ***)4096)
        {
          v37 = (NSObject ***)v33[1];
          ++v33;
          v34 = v37;
        }
      }
    }
    boost::ptr_container_detail::reversible_ptr_container<boost::ptr_container_detail::sequence_config<qmi::Transaction,std::deque<void *>>,boost::heap_clone_allocator>::clear((_QWORD *)this + 21, v26, v27, v28, v29, v30);
    qmi::MessageBase::~MessageBase((qmi::MessageBase *)v38);
  }
  qmi::TransactionQueue::State::checkFlushNotifiers_sync(this);
}

std::__shared_weak_count_vtbl **qmi::TransactionQueue::State::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, std::__shared_weak_count_vtbl **a5@<X8>)
{
  std::__shared_weak_count_vtbl *v10;

  v10 = (std::__shared_weak_count_vtbl *)operator new(0x110uLL);
  qmi::TransactionQueue::State::State((uint64_t)v10, a1, a2, a3, a4);
  return std::shared_ptr<qmi::TransactionQueue::State>::shared_ptr[abi:ne180100]<qmi::TransactionQueue::State,qmi::TransactionQueue::State::Deleter,void>(a5, v10);
}

void sub_19E9F2510(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void qmi::TransactionQueue::State::Deleter::operator()(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = *(NSObject **)(a2 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3qmi16TransactionQueue5State7DeleterclEPS1__block_invoke;
  block[3] = &__block_descriptor_tmp_6;
  block[4] = a2;
  dispatch_async(v2, block);
}

void ___ZN3qmi16TransactionQueue5State7DeleterclEPS1__block_invoke(uint64_t a1)
{
  dispatch_object_t *v1;
  void *v2;

  v1 = *(dispatch_object_t **)(a1 + 32);
  if (v1)
  {
    qmi::TransactionQueue::State::~State(v1);
    operator delete(v2);
  }
}

void boost::ptr_container_detail::reversible_ptr_container<boost::ptr_container_detail::sequence_config<qmi::Transaction,std::deque<void *>>,boost::heap_clone_allocator>::clear(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  void **v7;
  void **v8;
  unint64_t v9;
  void **v10;
  _BYTE *v11;
  qmi::Transaction **v12;
  uint64_t v13;
  void *v14;
  qmi::Transaction **v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v7 = (void **)a1[1];
  v8 = (void **)a1[2];
  if (v8 == v7)
  {
    a1[5] = 0;
    v16 = 0;
  }
  else
  {
    v9 = a1[4];
    v10 = &v7[v9 >> 9];
    v11 = *v10;
    v12 = (qmi::Transaction **)((char *)*v10 + 8 * (v9 & 0x1FF));
    v13 = *(uint64_t *)((char *)v7 + (((a1[5] + v9) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v9) & 0x1FF);
    if (v12 != (qmi::Transaction **)v13)
    {
      do
      {
        if (*v12)
        {
          qmi::Transaction::~Transaction(*v12, a2, a3, a4, a5, a6);
          operator delete(v14);
          v11 = *v10;
        }
        if ((char *)++v12 - v11 == 4096)
        {
          v15 = (qmi::Transaction **)v10[1];
          ++v10;
          v11 = v15;
          v12 = v15;
        }
      }
      while (v12 != (qmi::Transaction **)v13);
      v7 = (void **)a1[1];
      v8 = (void **)a1[2];
    }
    a1[5] = 0;
    v16 = (char *)v8 - (char *)v7;
    if ((unint64_t)((char *)v8 - (char *)v7) >= 0x11)
    {
      do
      {
        operator delete(*v7);
        v17 = a1[2];
        v7 = (void **)(a1[1] + 8);
        a1[1] = v7;
        v16 = v17 - (_QWORD)v7;
      }
      while (v16 > 0x10);
    }
  }
  if (v16 >> 3 == 1)
  {
    v18 = 256;
  }
  else
  {
    if (v16 >> 3 != 2)
      return;
    v18 = 512;
  }
  a1[4] = v18;
}

void qmi::TransactionQueue::State::checkFlushNotifiers_sync(qmi::TransactionQueue::State *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;

  if (!*((_QWORD *)this + 14) && !*((_QWORD *)this + 20))
  {
    v2 = *((_QWORD *)this + 27);
    v3 = *((_QWORD *)this + 28);
    if (v3 != v2)
    {
      v4 = *((_QWORD *)this + 28);
      do
      {
        v6 = *(NSObject **)(v4 - 8);
        v4 -= 8;
        v5 = v6;
        if (v6)
        {
          dispatch_group_leave(v5);
          v7 = *(NSObject **)(v3 - 8);
          if (v7)
            dispatch_release(v7);
        }
        v3 = v4;
      }
      while (v4 != v2);
    }
    *((_QWORD *)this + 28) = v2;
    if (!*((_QWORD *)this + 26))
    {
      v8 = *((_QWORD *)this + 30);
      v9 = *((_QWORD *)this + 31);
      if (v9 != v8)
      {
        v10 = *((_QWORD *)this + 31);
        do
        {
          v12 = *(NSObject **)(v10 - 8);
          v10 -= 8;
          v11 = v12;
          if (v12)
          {
            dispatch_group_leave(v11);
            v13 = *(NSObject **)(v9 - 8);
            if (v13)
              dispatch_release(v13);
          }
          v9 = v10;
        }
        while (v10 != v8);
      }
      *((_QWORD *)this + 31) = v8;
    }
  }
}

_QWORD *qmi::TransactionQueue::State::findSentTransaction_sync(qmi::TransactionQueue::State *this, __int16 a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD v9[2];
  BOOL (*v10)(uint64_t, uint64_t);
  void *v11;
  __int16 v12;

  v2 = *((_QWORD *)this + 13);
  v3 = *((_QWORD *)this + 10);
  v4 = (_QWORD *)(v3 + 8 * (v2 >> 9));
  if (*((_QWORD *)this + 11) == v3)
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    v5 = (_QWORD *)(*v4 + 8 * (*((_QWORD *)this + 13) & 0x1FFLL));
    v6 = *(_QWORD *)(v3 + (((*((_QWORD *)this + 14) + v2) >> 6) & 0x3FFFFFFFFFFFFF8))
       + 8 * ((*((_QWORD *)this + 14) + v2) & 0x1FF);
  }
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v10 = ___ZN3qmi16TransactionQueue5State24findSentTransaction_syncEt_block_invoke;
  v11 = &__block_descriptor_tmp_8_0;
  v12 = a2;
  while (v5 != (_QWORD *)v6)
  {
    if ((((uint64_t (*)(_QWORD *, _QWORD))v10)(v9, *v5) & 1) != 0)
      break;
    if ((_QWORD *)((char *)++v5 - *v4) == (_QWORD *)4096)
    {
      v7 = (_QWORD *)v4[1];
      ++v4;
      v5 = v7;
    }
  }
  return v4;
}

BOOL ___ZN3qmi16TransactionQueue5State24findSentTransaction_syncEt_block_invoke(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(*(_QWORD *)(a2 + 16) + 26) == *(unsigned __int16 *)(a1 + 32);
}

_QWORD *qmi::TransactionQueue::State::createTransaction_sync(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, void **a5)
{
  __int16 v9;
  __int16 v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *result;
  uint64_t v27;

  v9 = *(_WORD *)(a1 + 266);
  *(_WORD *)(*a3 + 26) = v9;
  if ((unsigned __int16)(v9 + 1) == (*(_BYTE *)(a1 + 264) == 0) << 8)
    v10 = 1;
  else
    v10 = v9 + 1;
  *(_WORD *)(a1 + 266) = v10;
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v12 = *a5;
  if (*a5)
    v12 = _Block_copy(v12);
  v14 = *a3;
  v13 = a3[1];
  v11[1] = v12;
  v11[2] = v14;
  v11[3] = v13;
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v11[4] = a4;
  v17 = *(_OWORD *)(a2 + 8);
  v18 = *(_QWORD *)(a2 + 16);
  *((_BYTE *)v11 + 40) = 0;
  v19 = v17;
  if (v18 == (_QWORD)v17)
    v20 = 0;
  else
    v20 = ((v18 - (_QWORD)v17) << 6) - 1;
  v21 = *(_QWORD *)(a2 + 32);
  v22 = *(_QWORD *)(a2 + 40);
  v23 = v22 + v21;
  if (v20 == v22 + v21)
  {
    std::deque<void *>::__add_back_capacity(a2);
    v19 = *(_QWORD *)(a2 + 8);
    v21 = *(_QWORD *)(a2 + 32);
    v22 = *(_QWORD *)(a2 + 40);
    v23 = v21 + v22;
  }
  *(_QWORD *)(*(_QWORD *)(v19 + ((v23 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v23 & 0x1FF)) = v11;
  *(_QWORD *)(a2 + 40) = v22 + 1;
  v24 = v22 + 1 + v21;
  v25 = *(_QWORD *)(a2 + 8);
  result = (_QWORD *)(v25 + 8 * (v24 >> 9));
  v27 = *result + 8 * (v24 & 0x1FF);
  if (*(_QWORD *)(a2 + 16) == v25)
    v27 = 0;
  if (v27 == *result)
    --result;
  return result;
}

void sub_19E9F29DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  boost::ptr_container_detail::static_move_ptr<qmi::Transaction,boost::ptr_container_detail::static_clone_deleter<boost::heap_clone_allocator>>::~static_move_ptr((qmi::Transaction **)va, a2, a3, a4, a5, a6);
  _Unwind_Resume(a1);
}

uint64_t qmi::TransactionQueue::State::push_sync(uint64_t a1, qmi::MutableMessageBase *this, uint64_t a3, void **a4)
{
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[3];

  memset(__p, 170, sizeof(__p));
  qmi::MutableMessageBase::serialize(this);
  qmi::createRequest();
  v10 = qmi::TransactionQueue::State::push_sync(a1, &v15, a3, a4, v7, v8, v9);
  v11 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v10;
}

void sub_19E9F2AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t qmi::TransactionQueue::State::push_sync(uint64_t a1, _QWORD *a2, uint64_t a3, void **a4, uint64_t a5, uint64_t a6, const char *a7)
{
  std::__shared_weak_count *v11;
  ATCSLogger *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  ATCSLogger *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  _QWORD *v37;
  const char *v38;
  _QWORD *Instance;
  const char *v40;
  ATCSLogger *Transaction_sync;
  uint64_t v42;
  _QWORD *v43;
  const char *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  std::__shared_weak_count *v48;

  v48 = 0;
  v11 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v11
    || (v12 = (ATCSLogger *)std::__shared_weak_count::lock(v11), (v48 = (std::__shared_weak_count *)v12) == 0)
    || (v13 = *(_QWORD *)(a1 + 56)) == 0)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0xCD, "client", "is not", "true", "QMIClient must still be alive if we're adding something!", a7);
    v13 = 0;
  }
  v14 = *(unsigned __int8 *)(v13 + 32);
  v15 = *(unsigned __int8 *)(v13 + 33);
  v16 = *(_DWORD *)(a1 + 32);
  if (!v16)
  {
    Instance = ATCSLogger::getInstance(v12);
    v40 = (const char *)(v13 + 8);
    if (*(char *)(v13 + 31) < 0)
      v40 = *(const char **)v40;
    (*(void (**)(_QWORD *, uint64_t, const char *, ...))(*Instance + 24))(Instance, 6, "message discarded because stopped for svc=%d client=%d (msgid=0x%x) [%s]\n", v14, v15, *(unsigned __int16 *)(*a2 + 24), v40);
    qmi::TransactionQueue::State::createTransaction_sync(a1, a1 + 168, a2, a3, a4);
    qmi::TransactionQueue::State::stop_sync((qmi::TransactionQueue::State *)a1);
    goto LABEL_24;
  }
  if (v16 == 1)
  {
    Transaction_sync = (ATCSLogger *)qmi::TransactionQueue::State::createTransaction_sync(a1, a1 + 168, a2, a3, a4);
    v21 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)v42 + 16) + 26);
    v43 = ATCSLogger::getInstance(Transaction_sync);
    v44 = (const char *)(v13 + 8);
    if (*(char *)(v13 + 31) < 0)
      v44 = *(const char **)v44;
    (*(void (**)(_QWORD *, uint64_t, const char *, ...))(*v43 + 24))(v43, 6, "message stalled for svc=%d client=%d (txid=%d msgid=0x%x) [%s]\n", v14, v15, v21, *(unsigned __int16 *)(*a2 + 24), v44);
    goto LABEL_28;
  }
  if (v16 != 2)
  {
LABEL_24:
    v21 = 0;
    goto LABEL_28;
  }
  v17 = (ATCSLogger *)qmi::TransactionQueue::State::createTransaction_sync(a1, a1 + 120, a2, a3, a4);
  v19 = v18;
  v20 = *v18;
  v21 = *(unsigned __int16 *)(*(_QWORD *)(*v18 + 16) + 26);
  v22 = *(_QWORD *)(a1 + 112);
  if (v22 < *(unsigned int *)(a1 + 268))
  {
    while (1)
    {
      if (!*(_QWORD *)(a1 + 160))
      {
LABEL_16:
        v20 = *v19;
        break;
      }
      v23 = *(_QWORD *)(a1 + 104) + v22;
      v24 = *(_QWORD *)(a1 + 80);
      v25 = (char *)(v24 + 8 * (v23 >> 9));
      if (*(_QWORD *)(a1 + 88) == v24)
      {
        v26 = 0;
        v27 = *(_QWORD *)(a1 + 152);
        v31 = *(_QWORD *)(a1 + 128);
        v29 = (char *)(v31 + 8 * (v27 >> 9));
        if (*(_QWORD *)(a1 + 136) == v31)
        {
LABEL_14:
          v30 = 0;
          goto LABEL_15;
        }
      }
      else
      {
        v26 = *(_QWORD *)v25 + 8 * (v23 & 0x1FF);
        v27 = *(_QWORD *)(a1 + 152);
        v28 = *(_QWORD *)(a1 + 128);
        v29 = (char *)(v28 + 8 * (v27 >> 9));
        if (*(_QWORD *)(a1 + 136) == v28)
          goto LABEL_14;
      }
      v30 = (char *)(*(_QWORD *)v29 + 8 * (v27 & 0x1FF));
LABEL_15:
      std::deque<void *>::insert(a1 + 72, v25, v26, v30);
      std::deque<void *>::erase(a1 + 120, v29, v30);
      qmi::TransactionQueue::State::sendNow_sync((qmi::TransactionQueue::State *)a1, v32, v33, v34, v35, v36);
      v22 = *(_QWORD *)(a1 + 112);
      if (v22 >= *(unsigned int *)(a1 + 268))
        goto LABEL_16;
    }
  }
  if (!*(_BYTE *)(v20 + 40))
  {
    v37 = ATCSLogger::getInstance(v17);
    v38 = (const char *)(v13 + 8);
    if (*(char *)(v13 + 31) < 0)
      v38 = *(const char **)v38;
    (*(void (**)(_QWORD *, uint64_t, const char *, ...))(*v37 + 24))(v37, 6, "message pended due to send window for svc=%d client=%d (txid=%d msgid=0x%x) [%s]\n", v14, v15, v21, *(unsigned __int16 *)(*a2 + 24), v38);
  }
LABEL_28:
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v46 = __ldaxr(p_shared_owners);
    while (__stlxr(v46 - 1, p_shared_owners));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  return v21;
}

void sub_19E9F2DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E9F2E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E9F2E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E9F2E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E9F2E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void qmi::TransactionQueue::State::sendIfPossible_sync(qmi::TransactionQueue::State *this)
{
  unint64_t v1;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;

  v1 = *((_QWORD *)this + 14);
  if (v1 < *((unsigned int *)this + 67))
  {
    v3 = (char *)this + 120;
    v4 = (char *)this + 72;
    do
    {
      if (!*((_QWORD *)this + 20))
        return;
      v11 = *((_QWORD *)this + 13) + v1;
      v12 = *((_QWORD *)this + 10);
      v13 = (char *)(v12 + 8 * (v11 >> 9));
      if (*((_QWORD *)this + 11) == v12)
      {
        v14 = 0;
        v15 = *((_QWORD *)this + 19);
        v18 = *((_QWORD *)this + 16);
        v17 = (char *)(v18 + 8 * (v15 >> 9));
        if (*((_QWORD *)this + 17) != v18)
        {
LABEL_10:
          v5 = (char *)(*(_QWORD *)v17 + 8 * (v15 & 0x1FF));
          goto LABEL_4;
        }
      }
      else
      {
        v14 = *(_QWORD *)v13 + 8 * (v11 & 0x1FF);
        v15 = *((_QWORD *)this + 19);
        v16 = *((_QWORD *)this + 16);
        v17 = (char *)(v16 + 8 * (v15 >> 9));
        if (*((_QWORD *)this + 17) != v16)
          goto LABEL_10;
      }
      v5 = 0;
LABEL_4:
      std::deque<void *>::insert((uint64_t)v4, v13, v14, v5);
      std::deque<void *>::erase((uint64_t)v3, v17, v5);
      qmi::TransactionQueue::State::sendNow_sync(this, v6, v7, v8, v9, v10);
      v1 = *((_QWORD *)this + 14);
    }
    while (v1 < *((unsigned int *)this + 67));
  }
}

uint64_t qmi::TransactionQueue::State::forceSend_sync(uint64_t a1, qmi::MutableMessageBase *this, uint64_t a3, void **a4)
{
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[3];

  memset(__p, 170, sizeof(__p));
  qmi::MutableMessageBase::serialize(this);
  qmi::createRequest();
  v10 = qmi::TransactionQueue::State::forceSend_sync(a1, &v15, a3, a4, v7, v8, v9);
  v11 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v10;
}

void sub_19E9F3014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t qmi::TransactionQueue::State::forceSend_sync(uint64_t a1, _QWORD *a2, uint64_t a3, void **a4, uint64_t a5, uint64_t a6, const char *a7)
{
  std::__shared_weak_count *v11;
  ATCSLogger *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  ATCSLogger *v23;
  _QWORD *Instance;
  const char *v25;
  std::__shared_weak_count *v26;
  _QWORD *v27;
  const char *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  ATCSLogger *v32;

  v32 = 0;
  v11 = *(std::__shared_weak_count **)(a1 + 64);
  if (v11
    && (v12 = (ATCSLogger *)std::__shared_weak_count::lock(v11), (v32 = v12) != 0)
    && (v13 = *(_QWORD *)(a1 + 56)) != 0)
  {
    v14 = *(unsigned __int8 *)(v13 + 32);
    v15 = *(unsigned __int8 *)(v13 + 33);
    v16 = *(_DWORD *)(a1 + 32);
    if ((v16 - 1) < 2)
      goto LABEL_5;
  }
  else
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0xFB, "client", "is not", "true", "QMIClient must still be alive if we're adding something!", a7);
    v13 = 0;
    v14 = MEMORY[0x20];
    v15 = MEMORY[0x21];
    v16 = *(_DWORD *)(a1 + 32);
    if ((v16 - 1) < 2)
    {
LABEL_5:
      qmi::TransactionQueue::State::createTransaction_sync(a1, a1 + 72, a2, a3, a4);
      v18 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)v17 + 16) + 26);
      qmi::TransactionQueue::State::sendNow_sync((qmi::TransactionQueue::State *)a1, v17, v19, v20, v21, v22);
      Instance = ATCSLogger::getInstance(v23);
      v25 = (const char *)(v13 + 8);
      if (*(char *)(v13 + 31) < 0)
        v25 = *(const char **)v25;
      (*(void (**)(_QWORD *, uint64_t, const char *, ...))(*Instance + 24))(Instance, 6, "message force-sent for svc=%d client=%d (txid=%d msgid=0x%x) [%s]\n", v14, v15, v18, *(unsigned __int16 *)(*a2 + 24), v25);
      v26 = (std::__shared_weak_count *)v32;
      if (!v32)
        return v18;
LABEL_15:
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
      return v18;
    }
  }
  if (!v16)
  {
    v27 = ATCSLogger::getInstance(v12);
    v28 = (const char *)(v13 + 8);
    if (*(char *)(v13 + 31) < 0)
      v28 = *(const char **)v28;
    (*(void (**)(_QWORD *, uint64_t, const char *, ...))(*v27 + 24))(v27, 6, "message discarded because stopped for svc=%d client=%d (msgid=0x%x) [%s]\n", v14, v15, *(unsigned __int16 *)(*a2 + 24), v28);
    qmi::TransactionQueue::State::createTransaction_sync(a1, a1 + 168, a2, a3, a4);
    qmi::TransactionQueue::State::stop_sync((qmi::TransactionQueue::State *)a1);
  }
  v18 = 0;
  v26 = (std::__shared_weak_count *)v32;
  if (v32)
    goto LABEL_15;
  return v18;
}

void sub_19E9F3228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E9F323C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E9F3250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void qmi::TransactionQueue::State::sendNow_sync(qmi::TransactionQueue::State *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  uint64_t (*v14)(QMux *__hidden);
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;

  v7 = *((_QWORD *)this + 13) + *((_QWORD *)this + 14);
  v8 = *((_QWORD *)this + 10);
  v9 = (_QWORD *)(v8 + 8 * (v7 >> 9));
  v10 = *v9 + 8 * (v7 & 0x1FF);
  if (*((_QWORD *)this + 11) == v8)
    v10 = 0;
  if (v10 == *v9)
    v10 = *(v9 - 1) + 4096;
  v11 = *(_QWORD *)(v10 - 8);
  if (*(_BYTE *)(v11 + 40))
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x167, "!tx.wasSent()", "is not", "true", a6);
  *(_BYTE *)(v11 + 40) = 1;
  v44 = 0;
  v45 = 0;
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (!v12)
  {
    v13 = 0;
    goto LABEL_13;
  }
  v13 = std::__shared_weak_count::lock(v12);
  v45 = v13;
  if (!v13 || ((v44 = *((_QWORD *)this + 5)) != 0 ? (v14 = QMux::BOOL_true_type) : (v14 = 0), !v14))
  {
LABEL_13:
    if (!v13)
      return;
    goto LABEL_40;
  }
  v42 = 0;
  v43 = 0;
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (v15)
  {
    v16 = std::__shared_weak_count::lock(v15);
    v43 = v16;
    if (!v16)
      goto LABEL_39;
    v21 = *((_QWORD *)this + 7);
    v42 = v21;
    if (v21)
    {
      v40 = v21;
      v41 = v16;
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
      v24 = *(std::__shared_weak_count **)(v11 + 24);
      v38 = *(_QWORD *)(v11 + 16);
      v39 = v24;
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      QMux::send(&v44, &v40, &v38, v17, v18, v19, v20);
      v27 = v39;
      if (v39)
      {
        v28 = (unint64_t *)&v39->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = v41;
      if (v41)
      {
        v31 = (unint64_t *)&v41->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
    }
  }
  v33 = v43;
  if (!v43)
    goto LABEL_39;
  v34 = (unint64_t *)&v43->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (v35)
  {
LABEL_39:
    v13 = v45;
    if (!v45)
      return;
    goto LABEL_40;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  v13 = v45;
  if (!v45)
    return;
LABEL_40:
  v36 = (unint64_t *)&v13->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
}

void sub_19E9F34D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  QMux::~QMux((QMux *)&a15);
  _Unwind_Resume(a1);
}

void qmi::TransactionQueue::State::sendTransactionResponse_sync(qmi::TransactionQueue::State *this, int a2, const qmi::ResponseBase *a3, uint64_t a4, uint64_t a5, uint64_t a6, const char *a7)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  NSObject **v17;
  std::__shared_weak_count *v18;
  ATCSLogger *v19;
  uint64_t v20;
  int v21;
  int v22;
  _QWORD *v23;
  const char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  qmi::Transaction *v33;
  void *v34;
  unint64_t i;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  ATCSLogger *v52;
  uint64_t v53;
  int v54;
  int v55;
  _QWORD *Instance;
  const char *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL (*v63)(uint64_t, uint64_t);
  void *v64;
  __int16 v65;

  v10 = *((_QWORD *)this + 13);
  v11 = *((_QWORD *)this + 10);
  v12 = *((_QWORD *)this + 11);
  v13 = v11 + 8 * (v10 >> 9);
  if (v12 == v11)
  {
    v14 = 0;
    v15 = 0;
  }
  else
  {
    v14 = (char *)(*(_QWORD *)v13 + 8 * (*((_QWORD *)this + 13) & 0x1FFLL));
    v15 = *(_QWORD *)(v11 + (((*((_QWORD *)this + 14) + v10) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * ((*((_QWORD *)this + 14) + v10) & 0x1FF);
  }
  v61 = MEMORY[0x1E0C809B0];
  v62 = 0x40000000;
  v63 = ___ZN3qmi16TransactionQueue5State24findSentTransaction_syncEt_block_invoke;
  v64 = &__block_descriptor_tmp_8_0;
  v65 = a2;
  if (v14 == (char *)v15)
  {
    if (v12 != v11)
      goto LABEL_6;
  }
  else
  {
    while ((((uint64_t (*)(uint64_t *, _QWORD))v63)(&v61, *(_QWORD *)v14) & 1) == 0)
    {
      v14 += 8;
      if (&v14[-*(_QWORD *)v13] == (char *)4096)
      {
        v36 = *(char **)(v13 + 8);
        v13 += 8;
        v14 = v36;
      }
      if (v14 == (char *)v15)
      {
        v14 = (char *)v15;
        break;
      }
    }
    v11 = *((_QWORD *)this + 10);
    if (*((_QWORD *)this + 11) != v11)
    {
LABEL_6:
      v16 = *((_QWORD *)this + 14) + *((_QWORD *)this + 13);
      if (v14 != (char *)(*(_QWORD *)(v11 + ((v16 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v16 & 0x1FF)))
        goto LABEL_7;
LABEL_40:
      v61 = 0;
      v62 = 0;
      v51 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
      if (!v51
        || (v52 = (ATCSLogger *)std::__shared_weak_count::lock(v51), (v62 = (uint64_t)v52) == 0)
        || (v53 = *((_QWORD *)this + 7), (v61 = v53) == 0))
      {
        _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x132, "client", "is not", "true", "QMIClient must still be alive if we're adding something!", a7);
        v53 = 0;
      }
      v54 = *(unsigned __int8 *)(v53 + 32);
      v55 = *(unsigned __int8 *)(v53 + 33);
      Instance = ATCSLogger::getInstance(v52);
      v57 = (const char *)(v53 + 8);
      if (*(char *)(v53 + 31) < 0)
        v57 = *(const char **)v57;
      (*(void (**)(_QWORD *, uint64_t, const char *, ...))(*Instance + 24))(Instance, 6, "No transaction found for message for svc=%d client=%d (txid=%d msgid=0x%x); dropping response [%s]\n",
        v54,
        v55,
        a2,
        *(unsigned __int16 *)a3,
        v57);
      v58 = (std::__shared_weak_count *)v62;
      if (v62)
      {
        v59 = (unint64_t *)(v62 + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      goto LABEL_51;
    }
  }
  if (!v14)
    goto LABEL_40;
LABEL_7:
  v17 = *(NSObject ***)v14;
  if (!*(_QWORD *)(*(_QWORD *)v14 + 8))
  {
    v61 = 0;
    v62 = 0;
    v18 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
    if (!v18
      || (v19 = (ATCSLogger *)std::__shared_weak_count::lock(v18), (v62 = (uint64_t)v19) == 0)
      || (v20 = *((_QWORD *)this + 7), (v61 = v20) == 0))
    {
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x121, "client", "is not", "true", "QMIClient must still be alive if we're adding something!", a7);
      v20 = 0;
    }
    v21 = *(unsigned __int8 *)(v20 + 32);
    v22 = *(unsigned __int8 *)(v20 + 33);
    v23 = ATCSLogger::getInstance(v19);
    v24 = (const char *)(v20 + 8);
    if (*(char *)(v20 + 31) < 0)
      v24 = *(const char **)v24;
    (*(void (**)(_QWORD *, uint64_t, const char *, ...))(*v23 + 24))(v23, 6, "No callback for message for svc=%d client=%d (txid=%d msgid=0x%x); dropping response [%s]\n",
      v21,
      v22,
      a2,
      *(unsigned __int16 *)a3,
      v24);
    v25 = (std::__shared_weak_count *)v62;
    if (v62)
    {
      v26 = (unint64_t *)(v62 + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v17 = *(NSObject ***)v14;
  }
  qmi::Transaction::invoke(v17, *((NSObject **)this + 3), a3);
  v33 = *(qmi::Transaction **)v14;
  if (*(_BYTE *)(*(_QWORD *)v14 + 40)
    || (_ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x12A, "tx->wasSent()", "is not", "true", v32), (v33 = *(qmi::Transaction **)v14) != 0))
  {
    qmi::Transaction::~Transaction(v33, v28, v29, v30, v31, v32);
    operator delete(v34);
  }
  std::deque<void *>::erase((uint64_t)this + 72, (char *)v13, v14);
  for (i = *((_QWORD *)this + 14); i < *((unsigned int *)this + 67); i = *((_QWORD *)this + 14))
  {
    if (!*((_QWORD *)this + 20))
      break;
    v43 = *((_QWORD *)this + 13) + i;
    v44 = *((_QWORD *)this + 10);
    v45 = (char *)(v44 + 8 * (v43 >> 9));
    if (*((_QWORD *)this + 11) == v44)
    {
      v46 = 0;
      v47 = *((_QWORD *)this + 19);
      v50 = *((_QWORD *)this + 16);
      v49 = (char *)(v50 + 8 * (v47 >> 9));
      if (*((_QWORD *)this + 17) == v50)
      {
LABEL_36:
        v37 = 0;
        goto LABEL_30;
      }
    }
    else
    {
      v46 = *(_QWORD *)v45 + 8 * (v43 & 0x1FF);
      v47 = *((_QWORD *)this + 19);
      v48 = *((_QWORD *)this + 16);
      v49 = (char *)(v48 + 8 * (v47 >> 9));
      if (*((_QWORD *)this + 17) == v48)
        goto LABEL_36;
    }
    v37 = (char *)(*(_QWORD *)v49 + 8 * (v47 & 0x1FF));
LABEL_30:
    std::deque<void *>::insert((uint64_t)this + 72, v45, v46, v37);
    std::deque<void *>::erase((uint64_t)this + 120, v49, v37);
    qmi::TransactionQueue::State::sendNow_sync(this, v38, v39, v40, v41, v42);
  }
LABEL_51:
  qmi::TransactionQueue::State::checkFlushNotifiers_sync(this);
}

void sub_19E9F3930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E9F3944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E9F3958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E9F396C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void qmi::TransactionQueue::State::start_sync(qmi::TransactionQueue::State *this)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  const void **j;
  void **v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  int64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  BOOL v67;
  int64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  __int128 *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  void *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  unint64_t v94;
  char *v95;
  char *v96;
  unint64_t v97;
  char *v98;
  int64_t v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 *v107;
  char *v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  char *v112;
  uint64_t *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  unint64_t v120;
  char *v121;
  char *v122;
  unint64_t v123;
  int64_t v124;
  unint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int128 *v132;
  char *v133;
  uint64_t v134;
  __int128 v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  unint64_t v144;
  char *v145;
  char *v146;
  unint64_t v147;
  int64_t v148;
  unint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __int128 *v157;
  char *v158;
  uint64_t v159;
  __int128 v160;
  char *v161;
  char *v162;
  char *v163;
  char *v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  unint64_t v172;
  char *v173;
  char *v174;
  unint64_t v175;
  char *v176;
  int64_t v177;
  unint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  __int128 *v185;
  char *v186;
  uint64_t v187;
  __int128 v188;
  _QWORD *v189;
  char *v190;
  _QWORD *v191;
  char *v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  unint64_t v200;
  char *v201;
  char *v202;
  unint64_t v203;
  int64_t v204;
  unint64_t v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  __int128 *v212;
  char *v213;
  uint64_t v214;
  __int128 v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  char *v221;
  unint64_t v222;
  int64_t v223;
  unint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  __int128 *v230;
  char *v231;
  uint64_t v232;
  __int128 v233;
  uint64_t v234;
  void *v235;
  char *v236;
  unint64_t v237;
  char *v238;
  char *v239;
  unint64_t v240;
  uint64_t v241;
  char *v242;
  char **v243;
  char *v244;
  unint64_t v245;
  __int16 v246;
  unint64_t v247;
  uint64_t v248;
  const void **v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  const void **v256;
  char *v257;
  unint64_t v258;
  uint64_t v259;
  const void **v260;
  _BYTE *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  const void **v266;
  _BYTE *v267;
  unint64_t v268;
  uint64_t v269;
  char *v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  char *v275;
  void **v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  char *v280;
  const void **v281;
  char *v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  char *v288;
  char *v289;
  void **v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  char *v294;
  uint64_t i;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  char *v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  uint64_t v303;
  char *v304;
  _QWORD *v305;
  uint64_t v306;
  char *v307;
  char *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  char *v312;
  int64_t v313;
  unint64_t v314;
  unint64_t v315;
  uint64_t v316;
  char *v317;
  char *v318;
  int64_t v319;
  unint64_t v320;
  char *v321;
  uint64_t v322;
  uint64_t v323;
  __int128 *v324;
  char *v325;
  uint64_t v326;
  __int128 v327;
  uint64_t v328;
  _QWORD *v329;
  char *v330;
  char *v331;
  unint64_t v332;
  __int16 v333;
  unint64_t v334;
  const void **v335;
  char *v336;
  _QWORD *v337;
  char *v338;
  unint64_t v339;
  uint64_t v340;
  const void **v341;
  char *v342;
  unint64_t v343;
  const void **v344;
  char *v345;
  _QWORD *v346;
  char *v347;
  uint64_t v348;
  const void **v349;
  char *v350;
  unint64_t v351;
  __int128 v352;
  char *v353;
  char *v354;
  uint64_t v355;
  char *v356;
  char *v357;
  char *v358;
  char *v359;
  _BYTE *v360;
  char *v361;
  uint64_t v362;
  char *v363;
  char *v364;
  _BYTE *v365;
  char *v366;
  char **v367;
  char *v368;
  uint64_t v369;
  char *v370;
  char *v371;
  char **v372;
  char *v373;
  uint64_t v374;
  char *v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  const void **v380;
  char *v381;
  uint64_t v382;
  unint64_t v383;
  const void **v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  const void **v388;
  const void **v389;
  char *v390;
  uint64_t v391;
  unint64_t v392;
  _BYTE *v393;
  unint64_t v394;
  const void **v395;
  _BYTE *v396;
  uint64_t v397;
  unint64_t v398;
  void **v399;
  unint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unint64_t v408;
  uint64_t v409;
  unint64_t v410;
  uint64_t v411;
  char *v412;
  char *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  const char *v418;
  unint64_t v419;
  uint64_t v420;
  char *v421;
  uint64_t v422;
  unint64_t v423;
  unint64_t v424;
  char *v425;
  char *v426;
  unint64_t v427;
  unint64_t v428;
  void **v429;
  char *v430;
  const void **v431;
  uint64_t v432;
  __int128 v433;
  __int128 v434;

  *((_DWORD *)this + 8) = 2;
  v2 = *((_QWORD *)this + 19);
  v3 = *((_QWORD *)this + 20);
  v4 = v2 + v3;
  v5 = (v2 + v3) >> 9;
  v6 = (char *)*((_QWORD *)this + 16);
  v7 = (char *)*((_QWORD *)this + 17);
  v8 = &v6[8 * v5];
  if (v7 != v6)
  {
    v9 = *(_QWORD *)v8 + 8 * (v4 & 0x1FF);
    v10 = *((_QWORD *)this + 25);
    v11 = *((_QWORD *)this + 22);
    v12 = (char *)(v11 + 8 * (v10 >> 9));
    if (*((_QWORD *)this + 23) != v11)
      goto LABEL_3;
LABEL_6:
    v13 = 0;
    v432 = 0;
    v18 = *((_QWORD *)this + 26);
    j = (const void **)(v11 + 8 * ((v18 + v10) >> 9));
    v17 = (void **)((char *)this + 120);
    if (!v18)
      goto LABEL_505;
    goto LABEL_7;
  }
  v9 = 0;
  v10 = *((_QWORD *)this + 25);
  v11 = *((_QWORD *)this + 22);
  v12 = (char *)(v11 + 8 * (v10 >> 9));
  if (*((_QWORD *)this + 23) == v11)
    goto LABEL_6;
LABEL_3:
  v13 = (char *)(*(_QWORD *)v12 + 8 * (v10 & 0x1FF));
  v14 = *((_QWORD *)this + 26);
  v15 = v14 + v10;
  j = (const void **)(v11 + 8 * (v15 >> 9));
  v432 = (uint64_t)*j + 8 * (v15 & 0x1FF);
  v17 = (void **)((char *)this + 120);
  if (!v14)
    goto LABEL_505;
LABEL_7:
  if ((char *)v432 == v13)
  {
    v428 = 0;
    v19 = v2 >> 9;
    v20 = &v6[8 * (v2 >> 9)];
    v21 = v7 - v6;
    if (v7 != v6)
    {
LABEL_9:
      v22 = *(_QWORD *)v20 + 8 * (*((_QWORD *)this + 19) & 0x1FFLL);
      if (v9 != v22)
        goto LABEL_10;
      goto LABEL_30;
    }
  }
  else
  {
    v428 = ((v432 - (uint64_t)*j) >> 3) + (((char *)j - v12) << 6) - ((uint64_t)&v13[-*(_QWORD *)v12] >> 3);
    v19 = v2 >> 9;
    v20 = &v6[8 * (v2 >> 9)];
    v21 = v7 - v6;
    if (v7 != v6)
      goto LABEL_9;
  }
  v22 = 0;
  if (v9)
  {
LABEL_10:
    v23 = ((v9 - *(_QWORD *)v8) >> 3) + ((v8 - v20) << 6) - ((v22 - *(_QWORD *)v20) >> 3);
    v429 = v17;
    v430 = v12;
    v431 = j;
    v427 = v23;
    if (v23 < v3 - v23)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  v23 = 0;
  v429 = v17;
  v430 = v12;
  v431 = j;
  v427 = 0;
  if (!v3)
  {
LABEL_31:
    v37 = (v21 << 6) - 1;
    v38 = v7 - v6;
    if (v7 == v6)
      v37 = 0;
    v39 = v37 - v4;
    v40 = v428 >= v39;
    v41 = v428 - v39;
    if (v41 == 0 || !v40)
      goto LABEL_364;
    v426 = v13;
    if (v7 == v6)
      v42 = v41 + 1;
    else
      v42 = v41;
    if ((v42 & 0x1FF) != 0)
      v43 = (v42 >> 9) + 1;
    else
      v43 = v42 >> 9;
    if (v43 >= v19)
      v44 = v19;
    else
      v44 = v43;
    if (v43 > v19)
    {
      v45 = v43 - v44;
      v46 = *((_QWORD *)this + 18) - *((_QWORD *)this + 15);
      v47 = v38 >> 3;
      if (v43 - v44 > (v46 >> 3) - (v38 >> 3))
      {
        v48 = v46 >> 2;
        if (v48 <= v45 + v47)
          v49 = v45 + v47;
        else
          v49 = v48;
        if (v49)
        {
          if (v49 >> 61)
            goto LABEL_515;
          v50 = (char *)operator new(8 * v49);
        }
        else
        {
          v50 = 0;
        }
        v424 = v44 << 9;
        v161 = &v50[8 * (v47 - v44)];
        v162 = &v50[8 * v49];
        v163 = v161;
        v164 = v50;
        while (1)
        {
          v166 = operator new(0x1000uLL);
          if (v161 == v162)
          {
            if (v163 <= v164)
            {
              if (v162 == v164)
                v172 = 1;
              else
                v172 = (v162 - v164) >> 2;
              if (v172 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v173 = (char *)operator new(8 * v172);
              v174 = v164;
              v175 = v172 >> 2;
              v176 = &v173[8 * (v172 >> 2)];
              v161 = v176;
              v177 = v162 - v163;
              if (v162 != v163)
              {
                v161 = &v176[v177 & 0xFFFFFFFFFFFFFFF8];
                v178 = v177 - 8;
                if (v178 < 0x38 || (v179 = 8 * v175, (unint64_t)(&v173[8 * v175] - v163) < 0x20))
                {
                  v180 = &v173[8 * (v172 >> 2)];
                  v181 = v163;
                  goto LABEL_201;
                }
                v183 = (v178 >> 3) + 1;
                v184 = 8 * (v183 & 0x3FFFFFFFFFFFFFFCLL);
                v180 = &v176[v184];
                v181 = &v163[v184];
                v185 = (__int128 *)(v163 + 16);
                v186 = &v173[v179 + 16];
                v187 = v183 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v188 = *v185;
                  *((_OWORD *)v186 - 1) = *(v185 - 1);
                  *(_OWORD *)v186 = v188;
                  v185 += 2;
                  v186 += 32;
                  v187 -= 4;
                }
                while (v187);
                if (v183 != (v183 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_201:
                    v182 = *(_QWORD *)v181;
                    v181 += 8;
                    *(_QWORD *)v180 = v182;
                    v180 += 8;
                  }
                  while (v180 != v161);
                }
              }
              v162 = &v173[8 * v172];
              if (v174)
                operator delete(v174);
              v163 = &v173[8 * (v172 >> 2)];
              v164 = v173;
              goto LABEL_185;
            }
            v167 = (v163 - v164) >> 3;
            if (v167 >= -1)
              v168 = v167 + 1;
            else
              v168 = v167 + 2;
            v169 = v168 >> 1;
            v170 = &v163[-8 * (v168 >> 1)];
            v171 = v162;
            if (v162 != v163)
            {
              memmove(v170, v163, v162 - v163);
              v171 = v163;
            }
            v165 = -v169;
            v161 = &v170[v162 - v163];
            v163 = &v171[8 * v165];
          }
LABEL_185:
          *(_QWORD *)v161 = v166;
          v161 += 8;
          if (!--v45)
          {
            v189 = (_QWORD *)*((_QWORD *)this + 16);
            if (!v44)
            {
              v190 = v163;
LABEL_211:
              v191 = (_QWORD *)*((_QWORD *)this + 17);
              if (v191 == v189)
              {
                v192 = v190;
                v7 = v161;
              }
              else
              {
                do
                {
                  if (v190 == v164)
                  {
                    if (v161 >= v162)
                    {
                      if (v162 == v190)
                        v220 = 1;
                      else
                        v220 = (v162 - v190) >> 2;
                      if (v220 >> 61)
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      v221 = (char *)operator new(8 * v220);
                      v164 = v221;
                      v222 = (v220 + 3) >> 2;
                      v216 = &v221[8 * v222];
                      v7 = v216;
                      v223 = v161 - v190;
                      if (v161 != v190)
                      {
                        v7 = &v216[v223 & 0xFFFFFFFFFFFFFFF8];
                        v224 = v223 - 8;
                        v225 = &v221[8 * v222];
                        v226 = v190;
                        if (v224 < 0x38)
                          goto LABEL_524;
                        v227 = 8 * v222;
                        v225 = &v221[8 * v222];
                        v226 = v190;
                        if ((unint64_t)(v225 - v190) < 0x20)
                          goto LABEL_524;
                        v228 = (v224 >> 3) + 1;
                        v229 = 8 * (v228 & 0x3FFFFFFFFFFFFFFCLL);
                        v225 = &v216[v229];
                        v226 = &v190[v229];
                        v230 = (__int128 *)(v190 + 16);
                        v231 = &v221[v227 + 16];
                        v232 = v228 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v233 = *v230;
                          *((_OWORD *)v231 - 1) = *(v230 - 1);
                          *(_OWORD *)v231 = v233;
                          v230 += 2;
                          v231 += 32;
                          v232 -= 4;
                        }
                        while (v232);
                        if (v228 != (v228 & 0x3FFFFFFFFFFFFFFCLL))
                        {
LABEL_524:
                          do
                          {
                            v234 = *(_QWORD *)v226;
                            v226 += 8;
                            *(_QWORD *)v225 = v234;
                            v225 += 8;
                          }
                          while (v225 != v7);
                        }
                      }
                      v162 = &v221[8 * v220];
                      if (v190)
                        operator delete(v190);
                    }
                    else
                    {
                      v218 = (v162 - v161) >> 3;
                      if (v218 >= -1)
                        v219 = v218 + 1;
                      else
                        v219 = v218 + 2;
                      v7 = &v161[8 * (v219 >> 1)];
                      v216 = &v190[8 * (v219 >> 1)];
                      if (v161 == v190)
                      {
                        v164 = v161;
                      }
                      else
                      {
                        memmove(&v190[8 * (v219 >> 1)], v190, v161 - v190);
                        v164 = v190;
                      }
                    }
                  }
                  else
                  {
                    v216 = v190;
                    v7 = v161;
                  }
                  v217 = *--v191;
                  *((_QWORD *)v216 - 1) = v217;
                  v192 = v216 - 8;
                  v161 = v7;
                  v190 = v192;
                }
                while (v191 != *((_QWORD **)this + 16));
              }
              v193 = (void *)*((_QWORD *)this + 15);
              *((_QWORD *)this + 15) = v164;
              *((_QWORD *)this + 16) = v192;
              *((_QWORD *)this + 17) = v7;
              *((_QWORD *)this + 18) = v162;
              *((_QWORD *)this + 19) -= v424;
              v17 = v429;
              if (v193)
              {
                operator delete(v193);
                v7 = (char *)*((_QWORD *)this + 17);
              }
LABEL_363:
              v3 = *((_QWORD *)this + 20);
              v6 = (char *)*((_QWORD *)this + 16);
              v4 = *((_QWORD *)this + 19) + v3;
              v5 = v4 >> 9;
              v13 = v426;
              v12 = v430;
              j = v431;
LABEL_364:
              v298 = &v6[8 * v5];
              if (v7 != v6)
              {
                v299 = (char *)(*(_QWORD *)v298 + 8 * (v4 & 0x1FF));
                v239 = (char *)v432;
                v300 = v428;
                v301 = v3 - v427;
                v302 = v3 - v427 - v428;
                if (v3 - v427 < v428)
                  goto LABEL_366;
LABEL_393:
                v329 = v299;
                v330 = v298;
                v331 = v239;
                if (!v300)
                  goto LABEL_469;
                goto LABEL_413;
              }
              v299 = 0;
              v239 = (char *)v432;
              v300 = v428;
              v301 = v3 - v427;
              v302 = v3 - v427 - v428;
              if (v3 - v427 >= v428)
                goto LABEL_393;
LABEL_366:
              if (v301 >= v300 >> 1)
              {
                v303 = v302 + ((v239 - (_BYTE *)*j) >> 3);
                if (v303 < 1)
                {
                  v332 = 511 - v303;
                  v333 = ~(_WORD)v332;
                  j -= v332 >> 9;
                  goto LABEL_401;
                }
                j += (unint64_t)v303 >> 9;
LABEL_397:
                v331 = (char *)*j + 8 * (v303 & 0x1FF);
              }
              else if (v301)
              {
                v303 = v301 + ((uint64_t)&v13[-*(_QWORD *)v12] >> 3);
                if (v303 >= 1)
                {
                  j = (const void **)&v12[8 * ((unint64_t)v303 >> 9)];
                  goto LABEL_397;
                }
                v334 = 511 - v303;
                v333 = ~(_WORD)v334;
                j = (const void **)&v12[-8 * (v334 >> 9)];
LABEL_401:
                v331 = (char *)*j + 8 * (v333 & 0x1FF);
              }
              else
              {
                j = (const void **)v12;
                v331 = v13;
              }
              if (v331 == v239)
              {
                v329 = v299;
                v330 = v298;
                v300 = v301;
                if (!v301)
                  goto LABEL_469;
                goto LABEL_413;
              }
              v335 = j;
              v336 = v331;
              v330 = v298;
              v329 = v299;
              while (2)
              {
                *v329++ = *(_QWORD *)v336;
                if ((_QWORD *)((char *)v329 - *(_QWORD *)v330) == (_QWORD *)4096)
                {
                  v337 = (_QWORD *)*((_QWORD *)v330 + 1);
                  v330 += 8;
                  v329 = v337;
                  v336 += 8;
                  if (v336 - (_BYTE *)*v335 == 4096)
                  {
LABEL_409:
                    v338 = (char *)v335[1];
                    ++v335;
                    v336 = v338;
                  }
                }
                else
                {
                  v336 += 8;
                  if (v336 - (_BYTE *)*v335 == 4096)
                    goto LABEL_409;
                }
                ++v3;
                if (v336 == v239)
                {
                  *((_QWORD *)this + 20) = v3;
                  v300 = v301;
                  if (!v301)
                    goto LABEL_469;
LABEL_413:
                  v339 = v300;
                  v340 = ((uint64_t)&v299[-*(_QWORD *)v298] >> 3) - v300;
                  if (v340 < 1)
                  {
                    v343 = 511 - v340;
                    v341 = (const void **)&v298[-8 * (v343 >> 9)];
                    v342 = (char *)*v341 + 8 * (~(_WORD)v343 & 0x1FF);
                    if (v342 == v299)
                      goto LABEL_425;
                  }
                  else
                  {
                    v341 = (const void **)&v298[8 * ((unint64_t)v340 >> 9)];
                    v342 = (char *)*v341 + 8 * (v340 & 0x1FF);
                    if (v342 == v299)
                    {
LABEL_425:
                      if (v339 < v301)
                      {
                        v348 = ((uint64_t)&v299[-*(_QWORD *)v298] >> 3) - v301;
                        if (v348 < 1)
                        {
                          v351 = 511 - v348;
                          v349 = (const void **)&v298[-8 * (v351 >> 9)];
                          v350 = (char *)*v349 + 8 * (~(_WORD)v351 & 0x1FF);
                        }
                        else
                        {
                          v349 = (const void **)&v298[8 * ((unint64_t)v348 >> 9)];
                          v350 = (char *)*v349 + 8 * (v348 & 0x1FF);
                        }
                        *(_QWORD *)&v352 = 0xAAAAAAAAAAAAAAAALL;
                        *((_QWORD *)&v352 + 1) = 0xAAAAAAAAAAAAAAAALL;
                        v433 = v352;
                        v434 = v352;
                        std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,0>((const void ***)&v433, v349, v350, v341, v342, (const void **)v298, v299);
                        v299 = (char *)*((_QWORD *)&v434 + 1);
                        v298 = (char *)v434;
                      }
                      if (v12 == (char *)j)
                      {
                        if (v13 != v331)
                        {
                          v373 = *(char **)v298;
                          v372 = (char **)(v298 - 8);
                          v371 = v373;
                          while (1)
                          {
                            v374 = (v299 - v371) >> 3;
                            if ((v331 - v13) >> 3 < v374)
                              v374 = (v331 - v13) >> 3;
                            v331 -= 8 * v374;
                            if (v374)
                              memmove(&v299[-8 * v374], v331, 8 * v374);
                            if (v331 == v13)
                              break;
                            v375 = *v372--;
                            v371 = v375;
                            v299 = v375 + 4096;
                          }
                        }
                        goto LABEL_469;
                      }
                      v353 = (char *)*j;
                      if (*j != v331)
                      {
                        v354 = *(char **)v298;
                        while (1)
                        {
                          v355 = (v299 - v354) >> 3;
                          if ((v331 - v353) >> 3 < v355)
                            v355 = (v331 - v353) >> 3;
                          v331 -= 8 * v355;
                          v299 -= 8 * v355;
                          if (v355)
                            memmove(v299, v331, 8 * v355);
                          if (v331 == v353)
                            break;
                          v356 = (char *)*((_QWORD *)v298 - 1);
                          v298 -= 8;
                          v354 = v356;
                          v299 = v356 + 4096;
                        }
                        if ((char *)(*(_QWORD *)v298 + 4096) == v299)
                        {
                          v357 = (char *)*((_QWORD *)v298 + 1);
                          v298 += 8;
                          v299 = v357;
                        }
                      }
                      v12 = v430;
                      v358 = (char *)(j - 1);
                      if (v358 != v430)
                      {
                        v359 = *(char **)v298;
                        do
                        {
                          while (1)
                          {
                            v360 = *(_BYTE **)v358;
                            v361 = (char *)(*(_QWORD *)v358 + 4096);
                            while (1)
                            {
                              v362 = (v299 - v359) >> 3;
                              if ((v361 - v360) >> 3 < v362)
                                v362 = (v361 - v360) >> 3;
                              v361 -= 8 * v362;
                              v299 -= 8 * v362;
                              if (v362)
                                memmove(v299, v361, 8 * v362);
                              if (v361 == v360)
                                break;
                              v363 = (char *)*((_QWORD *)v298 - 1);
                              v298 -= 8;
                              v359 = v363;
                              v299 = v363 + 4096;
                            }
                            v359 = *(char **)v298;
                            if ((char *)(*(_QWORD *)v298 + 4096) == v299)
                              break;
                            v12 = v430;
                            v358 -= 8;
                            if (v358 == v430)
                              goto LABEL_453;
                          }
                          v364 = (char *)*((_QWORD *)v298 + 1);
                          v298 += 8;
                          v359 = v364;
                          v299 = v364;
                          v12 = v430;
                          v358 -= 8;
                        }
                        while (v358 != v430);
                      }
LABEL_453:
                      v365 = (_BYTE *)(*(_QWORD *)v12 + 4096);
                      if (v365 != v13)
                      {
                        v368 = *(char **)v298;
                        v367 = (char **)(v298 - 8);
                        v366 = v368;
                        while (1)
                        {
                          v369 = (v299 - v366) >> 3;
                          if ((v365 - v13) >> 3 < v369)
                            v369 = (v365 - v13) >> 3;
                          v365 -= 8 * v369;
                          if (v369)
                            memmove(&v299[-8 * v369], v365, 8 * v369);
                          if (v365 == v13)
                            break;
                          v370 = *v367--;
                          v366 = v370;
                          v299 = v370 + 4096;
                        }
                      }
                      goto LABEL_469;
                    }
                  }
                  v344 = v341;
                  v345 = v342;
                  while (2)
                  {
                    *v329++ = *(_QWORD *)v345;
                    if ((_QWORD *)((char *)v329 - *(_QWORD *)v330) == (_QWORD *)4096)
                    {
                      v346 = (_QWORD *)*((_QWORD *)v330 + 1);
                      v330 += 8;
                      v329 = v346;
                      v345 += 8;
                      if (v345 - (_BYTE *)*v344 == 4096)
                      {
LABEL_423:
                        v347 = (char *)v344[1];
                        ++v344;
                        v345 = v347;
                      }
                    }
                    else
                    {
                      v345 += 8;
                      if (v345 - (_BYTE *)*v344 == 4096)
                        goto LABEL_423;
                    }
                    ++v3;
                    if (v345 == v299)
                    {
                      *((_QWORD *)this + 20) = v3;
                      goto LABEL_425;
                    }
                    continue;
                  }
                }
                continue;
              }
            }
            while (2)
            {
              if (v161 != v162)
              {
                v190 = v163;
                goto LABEL_216;
              }
              if (v163 > v164)
              {
                v194 = (v163 - v164) >> 3;
                if (v194 >= -1)
                  v195 = v194 + 1;
                else
                  v195 = v194 + 2;
                v196 = v195 >> 1;
                v197 = &v163[-8 * (v195 >> 1)];
                v198 = v162;
                if (v162 != v163)
                {
                  memmove(v197, v163, v162 - v163);
                  v198 = v163;
                }
                v199 = -v196;
                v161 = &v197[v162 - v163];
                v190 = &v198[8 * v199];
                goto LABEL_216;
              }
              if (v162 == v164)
                v200 = 1;
              else
                v200 = (v162 - v164) >> 2;
              if (v200 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v201 = (char *)operator new(8 * v200);
              v202 = v201;
              v203 = v200 >> 2;
              v190 = &v201[8 * (v200 >> 2)];
              v161 = v190;
              v204 = v162 - v163;
              if (v162 != v163)
              {
                v161 = &v190[v204 & 0xFFFFFFFFFFFFFFF8];
                v205 = v204 - 8;
                if (v205 < 0x38 || (v206 = 8 * v203, (unint64_t)(&v201[8 * v203] - v163) < 0x20))
                {
                  v207 = &v201[8 * (v200 >> 2)];
                  v208 = v163;
                  goto LABEL_233;
                }
                v210 = (v205 >> 3) + 1;
                v211 = 8 * (v210 & 0x3FFFFFFFFFFFFFFCLL);
                v207 = &v190[v211];
                v208 = &v163[v211];
                v212 = (__int128 *)(v163 + 16);
                v213 = &v201[v206 + 16];
                v214 = v210 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v215 = *v212;
                  *((_OWORD *)v213 - 1) = *(v212 - 1);
                  *(_OWORD *)v213 = v215;
                  v212 += 2;
                  v213 += 32;
                  v214 -= 4;
                }
                while (v214);
                if (v210 != (v210 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_233:
                    v209 = *(_QWORD *)v208;
                    v208 += 8;
                    *(_QWORD *)v207 = v209;
                    v207 += 8;
                  }
                  while (v207 != v161);
                }
              }
              v162 = &v201[8 * v200];
              if (v164)
                operator delete(v164);
              v164 = v202;
LABEL_216:
              *(_QWORD *)v161 = *v189;
              v161 += 8;
              v189 = (_QWORD *)(*((_QWORD *)this + 16) + 8);
              *((_QWORD *)this + 16) = v189;
              v163 = v190;
              if (!--v44)
                goto LABEL_211;
              continue;
            }
          }
        }
      }
      if (!v45)
        goto LABEL_361;
      do
      {
        if (*((_QWORD *)this + 18) == *((_QWORD *)this + 17))
        {
          for (i = 0; i != v45; ++i)
          {
            *(_QWORD *)&v433 = operator new(0x1000uLL);
            std::__split_buffer<void **>::push_front(v17, &v433);
            v7 = (char *)*((_QWORD *)this + 17);
            if (&v7[-*((_QWORD *)this + 16)] == (char *)8)
              v296 = 511;
            else
              v296 = 512;
            v297 = v296 + *((_QWORD *)this + 19);
            *((_QWORD *)this + 19) = v297;
          }
          v44 = v43;
          goto LABEL_362;
        }
        *(_QWORD *)&v433 = operator new(0x1000uLL);
        std::__split_buffer<void **>::push_back((char **)v17, &v433);
        --v43;
        --v45;
      }
      while (v45);
      v7 = (char *)*((_QWORD *)this + 17);
LABEL_361:
      v297 = *((_QWORD *)this + 19);
LABEL_362:
      *((_QWORD *)this + 19) = v297 - (v44 << 9);
      if (!v44)
        goto LABEL_363;
      while (1)
      {
        v305 = (_QWORD *)*((_QWORD *)this + 16);
        v307 = (char *)(v305 + 1);
        v306 = *v305;
        *((_QWORD *)this + 16) = v305 + 1;
        if (v7 == *((char **)this + 18))
        {
          v308 = (char *)*v17;
          if (v307 <= *v17)
          {
            v314 = (v7 - v308) >> 2;
            if (v7 == v308)
              v314 = 1;
            if (v314 >> 61)
              goto LABEL_515;
            v315 = v314 >> 2;
            v316 = 8 * v314;
            v317 = (char *)operator new(8 * v314);
            v318 = &v317[8 * v315];
            v319 = v7 - v307;
            v67 = v7 == v307;
            v7 = v318;
            if (!v67)
            {
              v7 = &v318[v319 & 0xFFFFFFFFFFFFFFF8];
              v320 = v319 - 8;
              if ((unint64_t)(v319 - 8) < 0x38)
              {
                v321 = &v317[8 * v315];
                goto LABEL_389;
              }
              v321 = &v317[8 * v315];
              if ((unint64_t)(v321 - v307) < 0x20)
                goto LABEL_525;
              v322 = (v320 >> 3) + 1;
              v323 = 8 * (v322 & 0x3FFFFFFFFFFFFFFCLL);
              v321 = &v318[v323];
              v307 += v323;
              v324 = (__int128 *)(v305 + 3);
              v325 = &v317[8 * v315 + 16];
              v326 = v322 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v327 = *v324;
                *((_OWORD *)v325 - 1) = *(v324 - 1);
                *(_OWORD *)v325 = v327;
                v324 += 2;
                v325 += 32;
                v326 -= 4;
              }
              while (v326);
              if (v322 != (v322 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_525:
                do
                {
LABEL_389:
                  v328 = *(_QWORD *)v307;
                  v307 += 8;
                  *(_QWORD *)v321 = v328;
                  v321 += 8;
                }
                while (v321 != v7);
              }
            }
            *((_QWORD *)this + 15) = v317;
            *((_QWORD *)this + 16) = v318;
            *((_QWORD *)this + 17) = v7;
            *((_QWORD *)this + 18) = &v317[v316];
            if (v308)
            {
              operator delete(v308);
              v7 = (char *)*((_QWORD *)this + 17);
            }
            goto LABEL_371;
          }
          v309 = (v307 - (_BYTE *)*v17) >> 3;
          if (v309 >= -1)
            v310 = v309 + 1;
          else
            v310 = v309 + 2;
          v311 = v310 >> 1;
          v312 = &v307[-8 * (v310 >> 1)];
          v313 = v7 - v307;
          if (v7 != v307)
          {
            memmove(&v307[-8 * (v310 >> 1)], v307, v7 - v307);
            v7 = (char *)*((_QWORD *)this + 16);
          }
          v304 = &v7[-8 * v311];
          v7 = &v312[v313];
          *((_QWORD *)this + 16) = v304;
          *((_QWORD *)this + 17) = &v312[v313];
        }
LABEL_371:
        *(_QWORD *)v7 = v306;
        v7 = (char *)(*((_QWORD *)this + 17) + 8);
        *((_QWORD *)this + 17) = v7;
        if (!--v44)
          goto LABEL_363;
      }
    }
    *((_QWORD *)this + 19) = v2 - (v44 << 9);
    if (!v44)
      goto LABEL_363;
    while (1)
    {
      v53 = (_QWORD *)*((_QWORD *)this + 16);
      v55 = (char *)(v53 + 1);
      v54 = *v53;
      *((_QWORD *)this + 16) = v53 + 1;
      if (v7 == *((char **)this + 18))
      {
        v56 = (char *)*v17;
        if (v55 <= *v17)
        {
          v62 = (v7 - v56) >> 2;
          if (v7 == v56)
            v62 = 1;
          if (v62 >> 61)
            goto LABEL_515;
          v63 = v62 >> 2;
          v64 = 8 * v62;
          v65 = (char *)operator new(8 * v62);
          v66 = &v65[8 * v63];
          v68 = v7 - v55;
          v67 = v7 == v55;
          v7 = v66;
          if (!v67)
          {
            v7 = &v66[v68 & 0xFFFFFFFFFFFFFFF8];
            v69 = v68 - 8;
            if ((unint64_t)(v68 - 8) < 0x38)
            {
              v70 = &v65[8 * v63];
              goto LABEL_76;
            }
            v70 = &v65[8 * v63];
            if ((unint64_t)(v70 - v55) < 0x20)
              goto LABEL_526;
            v71 = (v69 >> 3) + 1;
            v72 = 8 * (v71 & 0x3FFFFFFFFFFFFFFCLL);
            v70 = &v66[v72];
            v55 += v72;
            v73 = (__int128 *)(v53 + 3);
            v74 = &v65[8 * v63 + 16];
            v75 = v71 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v76 = *v73;
              *((_OWORD *)v74 - 1) = *(v73 - 1);
              *(_OWORD *)v74 = v76;
              v73 += 2;
              v74 += 32;
              v75 -= 4;
            }
            while (v75);
            if (v71 != (v71 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_526:
              do
              {
LABEL_76:
                v77 = *(_QWORD *)v55;
                v55 += 8;
                *(_QWORD *)v70 = v77;
                v70 += 8;
              }
              while (v70 != v7);
            }
          }
          *((_QWORD *)this + 15) = v65;
          *((_QWORD *)this + 16) = v66;
          *((_QWORD *)this + 17) = v7;
          *((_QWORD *)this + 18) = &v65[v64];
          if (v56)
          {
            operator delete(v56);
            v7 = (char *)*((_QWORD *)this + 17);
          }
          goto LABEL_58;
        }
        v57 = (v55 - (_BYTE *)*v17) >> 3;
        if (v57 >= -1)
          v58 = v57 + 1;
        else
          v58 = v57 + 2;
        v59 = v58 >> 1;
        v60 = &v55[-8 * (v58 >> 1)];
        v61 = v7 - v55;
        if (v7 != v55)
        {
          memmove(&v55[-8 * (v58 >> 1)], v55, v7 - v55);
          v7 = (char *)*((_QWORD *)this + 16);
        }
        v52 = &v7[-8 * v59];
        v7 = &v60[v61];
        *((_QWORD *)this + 16) = v52;
        *((_QWORD *)this + 17) = &v60[v61];
      }
LABEL_58:
      *(_QWORD *)v7 = v54;
      v7 = (char *)(*((_QWORD *)this + 17) + 8);
      *((_QWORD *)this + 17) = v7;
      if (!--v44)
        goto LABEL_363;
    }
  }
LABEL_11:
  v24 = v428 - v2;
  if (v428 <= v2)
    goto LABEL_268;
  v425 = v13;
  v25 = (v21 << 6) - 1;
  if (v7 == v6)
  {
    v25 = 0;
    ++v24;
  }
  if ((v24 & 0x1FF) != 0)
    v26 = (v24 >> 9) + 1;
  else
    v26 = v24 >> 9;
  v27 = (v25 - v4) >> 9;
  if (v26 >= v27)
    v28 = v27;
  else
    v28 = v26;
  if (v26 <= v27)
  {
    *((_QWORD *)this + 19) = v2 + (v28 << 9);
    for (j = v431; v28; --v28)
    {
      v51 = *((_QWORD *)this + 17);
      *(_QWORD *)&v433 = *(_QWORD *)(v51 - 8);
      *((_QWORD *)this + 17) = v51 - 8;
      std::__split_buffer<void **>::push_front(v17, &v433);
    }
    goto LABEL_267;
  }
  v29 = v26 - v28;
  v30 = (char *)*((_QWORD *)this + 15);
  v31 = *((_QWORD *)this + 18) - (_QWORD)v30;
  v32 = (v7 - v6) >> 3;
  if (v26 - v28 <= (v31 >> 3) - v32)
  {
    if (v29)
    {
      if (v6 == v30)
      {
LABEL_86:
        v80 = v29;
        do
        {
          *(_QWORD *)&v433 = operator new(0x1000uLL);
          std::__split_buffer<void **>::push_back((char **)v17, &v433);
          --v80;
        }
        while (v80);
        v28 += v29;
        v2 = *((_QWORD *)this + 19);
      }
      else
      {
        while (1)
        {
          *(_QWORD *)&v433 = operator new(0x1000uLL);
          std::__split_buffer<void **>::push_front(v17, &v433);
          v78 = (void *)*((_QWORD *)this + 16);
          v79 = *((_QWORD *)this + 17) - (_QWORD)v78 == 8 ? 511 : 512;
          v2 = v79 + *((_QWORD *)this + 19);
          *((_QWORD *)this + 19) = v2;
          if (!--v29)
            break;
          if (v78 == *v17)
            goto LABEL_86;
        }
      }
    }
    v12 = v430;
    j = v431;
    for (*((_QWORD *)this + 19) = v2 + (v28 << 9); v28; --v28)
    {
      v81 = *((_QWORD *)this + 17);
      *(_QWORD *)&v433 = *(_QWORD *)(v81 - 8);
      *((_QWORD *)this + 17) = v81 - 8;
      std::__split_buffer<void **>::push_front(v17, &v433);
    }
    goto LABEL_267;
  }
  v33 = v7 == v6;
  v34 = v29 + v32;
  if (v31 >> 2 <= v34)
    v35 = v34;
  else
    v35 = v31 >> 2;
  if (!v35)
  {
    v36 = 0;
    goto LABEL_97;
  }
  if (v35 >> 61)
LABEL_515:
    std::__throw_bad_array_new_length[abi:ne180100]();
  v36 = (char *)operator new(8 * v35);
LABEL_97:
  v423 = (v26 << 9) - v33;
  v82 = &v36[8 * v35];
  v83 = v36;
  v84 = v36;
  v85 = v36;
  do
  {
    while (1)
    {
      v86 = operator new(0x1000uLL);
      if (v83 == v82)
        break;
LABEL_99:
      v17 = v429;
      *(_QWORD *)v83 = v86;
      v83 += 8;
      if (!--v29)
        goto LABEL_124;
    }
    if (v84 <= v85)
    {
      if (v82 == v85)
        v94 = 1;
      else
        v94 = (v82 - v85) >> 2;
      if (v94 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v95 = (char *)operator new(8 * v94);
      v96 = v85;
      v97 = v94 >> 2;
      v98 = &v95[8 * (v94 >> 2)];
      v83 = v98;
      v99 = v82 - v84;
      if (v82 == v84)
        goto LABEL_118;
      v83 = &v98[v99 & 0xFFFFFFFFFFFFFFF8];
      v100 = v99 - 8;
      if (v100 >= 0x38 && (v101 = 8 * v97, (unint64_t)(&v95[8 * v97] - v84) >= 0x20))
      {
        v105 = (v100 >> 3) + 1;
        v106 = 8 * (v105 & 0x3FFFFFFFFFFFFFFCLL);
        v102 = &v98[v106];
        v103 = &v84[v106];
        v107 = (__int128 *)(v84 + 16);
        v108 = &v95[v101 + 16];
        v109 = v105 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v110 = *v107;
          *((_OWORD *)v108 - 1) = *(v107 - 1);
          *(_OWORD *)v108 = v110;
          v107 += 2;
          v108 += 32;
          v109 -= 4;
        }
        while (v109);
        if (v105 == (v105 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_118;
      }
      else
      {
        v102 = &v95[8 * (v94 >> 2)];
        v103 = v84;
      }
      do
      {
        v104 = *(_QWORD *)v103;
        v103 += 8;
        *(_QWORD *)v102 = v104;
        v102 += 8;
      }
      while (v102 != v83);
LABEL_118:
      v82 = &v95[8 * v94];
      if (v96)
        operator delete(v96);
      v84 = &v95[8 * (v94 >> 2)];
      v85 = v95;
      goto LABEL_99;
    }
    v87 = v85;
    v88 = (v84 - v85) >> 3;
    if (v88 >= -1)
      v89 = v88 + 1;
    else
      v89 = v88 + 2;
    v90 = v89 >> 1;
    v91 = &v84[-8 * (v89 >> 1)];
    v92 = v82;
    if (v82 != v84)
    {
      memmove(v91, v84, v82 - v84);
      v92 = v84;
    }
    v93 = &v91[v82 - v84];
    v84 = &v92[-8 * v90];
    v85 = v87;
    v17 = v429;
    *(_QWORD *)v93 = v86;
    v83 = v93 + 8;
    --v29;
  }
  while (v29);
LABEL_124:
  v111 = *((_QWORD *)this + 17);
  if (v28)
  {
    while (v83 != v82)
    {
      v112 = v84;
LABEL_129:
      *(_QWORD *)v83 = *(_QWORD *)(v111 - 8);
      v83 += 8;
      v111 = *((_QWORD *)this + 17) - 8;
      *((_QWORD *)this + 17) = v111;
      v84 = v112;
      if (!--v28)
        goto LABEL_126;
    }
    if (v84 > v85)
    {
      v114 = v85;
      v115 = (v84 - v85) >> 3;
      if (v115 >= -1)
        v116 = v115 + 1;
      else
        v116 = v115 + 2;
      v117 = v116 >> 1;
      v118 = &v84[-8 * (v116 >> 1)];
      v119 = v82;
      if (v82 != v84)
      {
        memmove(v118, v84, v82 - v84);
        v119 = v84;
      }
      v83 = &v118[v82 - v84];
      v112 = &v119[-8 * v117];
      v85 = v114;
LABEL_150:
      v17 = v429;
      goto LABEL_129;
    }
    if (v82 == v85)
      v120 = 1;
    else
      v120 = (v82 - v85) >> 2;
    if (v120 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v121 = (char *)operator new(8 * v120);
    v122 = v121;
    v123 = v120 >> 2;
    v112 = &v121[8 * (v120 >> 2)];
    v83 = v112;
    v124 = v82 - v84;
    if (v82 != v84)
    {
      v83 = &v112[v124 & 0xFFFFFFFFFFFFFFF8];
      v125 = v124 - 8;
      if (v125 >= 0x38 && (v126 = 8 * v123, (unint64_t)(&v121[8 * v123] - v84) >= 0x20))
      {
        v130 = (v125 >> 3) + 1;
        v131 = 8 * (v130 & 0x3FFFFFFFFFFFFFFCLL);
        v127 = &v112[v131];
        v128 = &v84[v131];
        v132 = (__int128 *)(v84 + 16);
        v133 = &v121[v126 + 16];
        v134 = v130 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v135 = *v132;
          *((_OWORD *)v133 - 1) = *(v132 - 1);
          *(_OWORD *)v133 = v135;
          v132 += 2;
          v133 += 32;
          v134 -= 4;
        }
        while (v134);
        if (v130 == (v130 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_147;
      }
      else
      {
        v127 = &v121[8 * (v120 >> 2)];
        v128 = v84;
      }
      do
      {
        v129 = *(_QWORD *)v128;
        v128 += 8;
        *(_QWORD *)v127 = v129;
        v127 += 8;
      }
      while (v127 != v83);
    }
LABEL_147:
    v82 = &v121[8 * v120];
    if (v85)
      operator delete(v85);
    v85 = v122;
    goto LABEL_150;
  }
  v112 = v84;
LABEL_126:
  v113 = (uint64_t *)*((_QWORD *)this + 16);
  if (v113 != (uint64_t *)v111)
  {
    v23 = v427;
    while (1)
    {
      while (v83 != v82)
      {
        v136 = v112;
        v137 = *v113++;
        *(_QWORD *)v83 = v137;
        v83 += 8;
        if (v113 == *((uint64_t **)this + 17))
          goto LABEL_265;
      }
      if (v112 <= v85)
        break;
      v138 = (v112 - v85) >> 3;
      if (v138 >= -1)
        v139 = v138 + 1;
      else
        v139 = v138 + 2;
      v140 = v139 >> 1;
      v141 = &v112[-8 * (v139 >> 1)];
      v142 = v82;
      if (v82 != v112)
      {
        memmove(v141, v112, v82 - v112);
        v142 = v112;
      }
      v143 = &v141[v82 - v112];
      v136 = &v142[-8 * v140];
LABEL_176:
      v23 = v427;
      v154 = *v113++;
      *(_QWORD *)v143 = v154;
      v83 = v143 + 8;
      v112 = v136;
      if (v113 == *((uint64_t **)this + 17))
        goto LABEL_265;
    }
    if (v82 == v85)
      v144 = 1;
    else
      v144 = (v82 - v85) >> 2;
    if (v144 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v145 = (char *)operator new(8 * v144);
    v146 = v145;
    v147 = v144 >> 2;
    v136 = &v145[8 * (v144 >> 2)];
    v143 = v136;
    v148 = v82 - v112;
    if (v82 != v112)
    {
      v143 = &v136[v148 & 0xFFFFFFFFFFFFFFF8];
      v149 = v148 - 8;
      if (v149 < 0x38 || (v150 = 8 * v147, (unint64_t)(&v145[8 * v147] - v112) < 0x20))
      {
        v151 = &v145[8 * (v144 >> 2)];
        v152 = v112;
        goto LABEL_172;
      }
      v155 = (v149 >> 3) + 1;
      v156 = 8 * (v155 & 0x3FFFFFFFFFFFFFFCLL);
      v151 = &v136[v156];
      v152 = &v112[v156];
      v157 = (__int128 *)(v112 + 16);
      v158 = &v145[v150 + 16];
      v159 = v155 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v160 = *v157;
        *((_OWORD *)v158 - 1) = *(v157 - 1);
        *(_OWORD *)v158 = v160;
        v157 += 2;
        v158 += 32;
        v159 -= 4;
      }
      while (v159);
      if (v155 != (v155 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_172:
          v153 = *(_QWORD *)v152;
          v152 += 8;
          *(_QWORD *)v151 = v153;
          v151 += 8;
        }
        while (v151 != v143);
      }
    }
    v82 = &v145[8 * v144];
    if (v85)
      operator delete(v85);
    v85 = v146;
    goto LABEL_176;
  }
  v136 = v112;
  v23 = v427;
LABEL_265:
  v235 = (void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = v85;
  *((_QWORD *)this + 16) = v136;
  *((_QWORD *)this + 17) = v83;
  *((_QWORD *)this + 18) = v82;
  *((_QWORD *)this + 19) += v423;
  v12 = v430;
  j = v431;
  if (v235)
    operator delete(v235);
LABEL_267:
  v2 = *((_QWORD *)this + 19);
  v6 = (char *)*((_QWORD *)this + 16);
  v7 = (char *)*((_QWORD *)this + 17);
  v19 = v2 >> 9;
  v13 = v425;
LABEL_268:
  v236 = &v6[8 * v19];
  v237 = v428;
  if (v7 != v6)
  {
    v238 = (char *)(*(_QWORD *)v236 + 8 * (v2 & 0x1FF));
    v239 = (char *)v432;
    v240 = v428 - v23;
    if (v428 > v23)
      goto LABEL_270;
LABEL_275:
    v242 = v238;
    v243 = (char **)v236;
    j = (const void **)v12;
    v244 = v13;
    if (!v428)
      goto LABEL_469;
    goto LABEL_294;
  }
  v238 = 0;
  v239 = (char *)v432;
  v240 = v428 - v23;
  if (v428 <= v23)
    goto LABEL_275;
LABEL_270:
  if (v23 >= v428 >> 1)
  {
    v241 = v240 + ((uint64_t)&v13[-*(_QWORD *)v12] >> 3);
    if (v241 < 1)
    {
      v245 = 511 - v241;
      v246 = ~(_WORD)v245;
      j = (const void **)&v12[-8 * (v245 >> 9)];
      goto LABEL_283;
    }
    j = (const void **)&v12[8 * ((unint64_t)v241 >> 9)];
LABEL_279:
    v244 = (char *)*j + 8 * (v241 & 0x1FF);
  }
  else if (v23)
  {
    v241 = ((v239 - (_BYTE *)*j) >> 3) - v23;
    if (v241 >= 1)
    {
      j += (unint64_t)v241 >> 9;
      goto LABEL_279;
    }
    v247 = 511 - v241;
    v246 = ~(_WORD)v247;
    j -= v247 >> 9;
LABEL_283:
    v244 = (char *)*j + 8 * (v246 & 0x1FF);
  }
  else
  {
    v244 = v239;
  }
  if (v244 == v13)
  {
    v242 = v238;
    v243 = (char **)v236;
    v237 = v427;
    if (!v427)
      goto LABEL_469;
    goto LABEL_294;
  }
  v248 = *((_QWORD *)this + 20);
  v249 = j;
  v250 = v244;
  v243 = (char **)v236;
  v242 = v238;
  while (2)
  {
    while (2)
    {
      if (v242 == *v243)
      {
        v251 = (uint64_t)*--v243;
        v242 = (char *)(v251 + 4096);
        if (v250 == *v249)
          break;
        goto LABEL_287;
      }
      if (v250 != *v249)
      {
LABEL_287:
        v252 = *((_QWORD *)v250 - 1);
        v250 -= 8;
        *((_QWORD *)v242 - 1) = v252;
        v242 -= 8;
        --v2;
        ++v248;
        if (v250 == v13)
          goto LABEL_291;
        continue;
      }
      break;
    }
    v253 = (uint64_t)*--v249;
    v250 = (char *)(v253 + 4088);
    *((_QWORD *)v242 - 1) = *(_QWORD *)(v253 + 4088);
    v242 -= 8;
    --v2;
    ++v248;
    if ((char *)(v253 + 4088) != v13)
      continue;
    break;
  }
LABEL_291:
  *((_QWORD *)this + 19) = v2;
  *((_QWORD *)this + 20) = v248;
  v237 = v427;
  if (!v427)
    goto LABEL_469;
LABEL_294:
  v254 = v237;
  v255 = v237 + ((uint64_t)&v238[-*(_QWORD *)v236] >> 3);
  if (v255 >= 1)
  {
    v256 = (const void **)&v236[8 * ((unint64_t)v255 >> 9)];
    v257 = (char *)*v256 + 8 * (v255 & 0x1FF);
    if (v257 == v238)
      goto LABEL_305;
LABEL_298:
    v259 = *((_QWORD *)this + 20);
    v260 = v256;
    v261 = v257;
    while (1)
    {
      if (v242 == *v243)
      {
        v262 = (uint64_t)*--v243;
        v242 = (char *)(v262 + 4096);
        if (v261 != *v260)
          goto LABEL_300;
      }
      else if (v261 != *v260)
      {
LABEL_300:
        v263 = *((_QWORD *)v261 - 1);
        v261 -= 8;
        *((_QWORD *)v242 - 1) = v263;
        v242 -= 8;
        --v2;
        ++v259;
        if (v261 == v238)
          goto LABEL_304;
        continue;
      }
      v264 = (uint64_t)*--v260;
      v261 = (_BYTE *)(v264 + 4088);
      *((_QWORD *)v242 - 1) = *(_QWORD *)(v264 + 4088);
      v242 -= 8;
      --v2;
      ++v259;
      if ((char *)(v264 + 4088) == v238)
      {
LABEL_304:
        *((_QWORD *)this + 19) = v2;
        *((_QWORD *)this + 20) = v259;
        goto LABEL_305;
      }
    }
  }
  v258 = 511 - v255;
  v256 = (const void **)&v236[-8 * (v258 >> 9)];
  v257 = (char *)*v256 + 8 * (~(_WORD)v258 & 0x1FF);
  if (v257 != v238)
    goto LABEL_298;
LABEL_305:
  if (v254 < v427)
  {
    v265 = v427 + ((uint64_t)&v238[-*(_QWORD *)v236] >> 3);
    if (v265 < 1)
    {
      v268 = 511 - v265;
      v266 = (const void **)&v236[-8 * (v268 >> 9)];
      v267 = (char *)*v266 + 8 * (~(_WORD)v268 & 0x1FF);
    }
    else
    {
      v266 = (const void **)&v236[8 * ((unint64_t)v265 >> 9)];
      v267 = (char *)*v266 + 8 * (v265 & 0x1FF);
    }
    *(_QWORD *)&v433 = v236;
    *((_QWORD *)&v433 + 1) = v238;
    std::__for_each_segment[abi:ne180100]<std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,std::__deque_iterator<void *,void **,void *&,void ***,long,512l>>>(v256, v257, v266, v267, (uint64_t)&v433);
    v238 = (char *)*((_QWORD *)&v433 + 1);
    v236 = (char *)v433;
  }
  if (v431 == j)
  {
    v12 = v430;
    if (v244 != v239)
    {
      v277 = *(char **)v236;
      v276 = (void **)(v236 + 8);
      v275 = v277;
      while (1)
      {
        v278 = (v275 - v238 + 4096) >> 3;
        if ((v239 - v244) >> 3 >= v278)
          v279 = v278;
        else
          v279 = (v239 - v244) >> 3;
        if (v279)
          memmove(v238, v244, 8 * v279);
        v244 += 8 * v279;
        if (v244 == v239)
          break;
        v280 = (char *)*v276++;
        v275 = v280;
        v238 = v280;
      }
    }
  }
  else
  {
    v269 = (uint64_t)*j + 4096;
    if ((char *)v269 != v244)
    {
      v271 = *(char **)v236;
      v236 += 8;
      v270 = v271;
      while (1)
      {
        v272 = (v270 - v238 + 4096) >> 3;
        if ((v269 - (uint64_t)v244) >> 3 >= v272)
          v273 = v272;
        else
          v273 = (v269 - (uint64_t)v244) >> 3;
        if (v273)
          memmove(v238, v244, 8 * v273);
        v244 += 8 * v273;
        if (v244 == (char *)v269)
          break;
        v274 = *(char **)v236;
        v236 += 8;
        v270 = v274;
        v238 = v274;
      }
      v238 += 8 * v273;
      if ((char *)(*((_QWORD *)v236 - 1) + 4096) == v238)
        v238 = *(char **)v236;
      else
        v236 -= 8;
      v239 = (char *)v432;
    }
    v281 = j + 1;
    if (v281 != v431)
    {
      v282 = *(char **)v236;
      do
      {
        while (1)
        {
          v283 = 0;
          v284 = (char *)*v281;
          for (v236 += 8; ; v236 += 8)
          {
            v285 = (v282 - v238 + 4096) >> 3;
            if ((4096 - 8 * v283) >> 3 >= v285)
              v286 = v285;
            else
              v286 = (4096 - 8 * v283) >> 3;
            if (v286)
              memmove(v238, &v284[8 * v283], 8 * v286);
            v283 += v286;
            if (v283 == 512)
              break;
            v287 = *(char **)v236;
            v282 = v287;
            v238 = v287;
          }
          v238 += 8 * v286;
          v282 = (char *)*((_QWORD *)v236 - 1);
          if (v282 + 4096 != v238)
            break;
          v282 = *(char **)v236;
          v238 = *(char **)v236;
          v239 = (char *)v432;
          if (++v281 == v431)
            goto LABEL_346;
        }
        v236 -= 8;
        v239 = (char *)v432;
        ++v281;
      }
      while (v281 != v431);
    }
LABEL_346:
    v12 = v430;
    v288 = (char *)*v431;
    if (*v431 != v239)
    {
      v291 = *(char **)v236;
      v290 = (void **)(v236 + 8);
      v289 = v291;
      while (1)
      {
        v292 = (v289 - v238 + 4096) >> 3;
        if ((v239 - v288) >> 3 >= v292)
          v293 = v292;
        else
          v293 = (v239 - v288) >> 3;
        if (v293)
          memmove(v238, v288, 8 * v293);
        v288 += 8 * v293;
        if (v288 == v239)
          break;
        v294 = (char *)*v290++;
        v289 = v294;
        v238 = v294;
      }
    }
  }
LABEL_469:
  if (v239 == v13)
  {
    v376 = 0;
    v377 = *((_QWORD *)this + 25);
    v378 = *((_QWORD *)this + 22);
    v379 = *((_QWORD *)this + 23);
    v380 = (const void **)(v378 + 8 * (v377 >> 9));
    if (v379 == v378)
      goto LABEL_477;
LABEL_471:
    v381 = (char *)*v380 + 8 * (v377 & 0x1FF);
    if (v13 != v381)
      goto LABEL_472;
LABEL_478:
    v383 = 0;
    v384 = v380;
    if (v376 >= 1)
      goto LABEL_483;
  }
  else
  {
    v376 = ((v239 - (_BYTE *)*v431) >> 3) + (((char *)v431 - v12) << 6) - ((uint64_t)&v13[-*(_QWORD *)v12] >> 3);
    v377 = *((_QWORD *)this + 25);
    v378 = *((_QWORD *)this + 22);
    v379 = *((_QWORD *)this + 23);
    v380 = (const void **)(v378 + 8 * (v377 >> 9));
    if (v379 != v378)
      goto LABEL_471;
LABEL_477:
    v381 = 0;
    if (!v13)
      goto LABEL_478;
LABEL_472:
    v382 = ((uint64_t)&v13[-*(_QWORD *)v12] >> 3) + ((v12 - (char *)v380) << 6);
    v383 = v382 - ((v381 - (_BYTE *)*v380) >> 3);
    if (v382 == (v381 - (_BYTE *)*v380) >> 3)
    {
      v13 = v381;
      v384 = v380;
      if (v376 >= 1)
        goto LABEL_483;
    }
    else
    {
      if (v382 < 1)
      {
        v385 = 511 - v382;
        v384 = &v380[-(v385 >> 9)];
        v13 = (char *)*v384 + 8 * (~(_WORD)v385 & 0x1FF);
        if (v376 < 1)
          goto LABEL_505;
      }
      else
      {
        v384 = &v380[(unint64_t)v382 >> 9];
        v13 = (char *)*v384 + 8 * (v382 & 0x1FF);
        if (v376 < 1)
          goto LABEL_505;
      }
LABEL_483:
      v386 = *((_QWORD *)this + 26);
      v387 = v376 + ((v13 - (_BYTE *)*v384) >> 3);
      if (v383 <= (unint64_t)(v386 - v376) >> 1)
      {
        if (v387 < 1)
        {
          v389 = &v384[-((unint64_t)(511 - v387) >> 9)];
          v390 = (char *)*v389;
          v391 = ~(511 - (_WORD)v387) & 0x1FF;
        }
        else
        {
          v389 = &v384[(unint64_t)v387 >> 9];
          v390 = (char *)*v389;
          v391 = v387 & 0x1FF;
        }
        std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,0>((const void ***)&v433, v380, v381, v384, v13, v389, &v390[8 * v391]);
        v397 = *((_QWORD *)this + 26) - v376;
        v398 = *((_QWORD *)this + 25) + v376;
        *((_QWORD *)this + 25) = v398;
        *((_QWORD *)this + 26) = v397;
        if (v398 >= 0x400)
        {
          v399 = (void **)*((_QWORD *)this + 22);
          do
          {
            operator delete(*v399);
            v399 = (void **)(*((_QWORD *)this + 22) + 8);
            *((_QWORD *)this + 22) = v399;
            v400 = *((_QWORD *)this + 25) - 512;
            *((_QWORD *)this + 25) = v400;
          }
          while (v400 >= 0x400);
        }
      }
      else
      {
        if (v387 < 1)
        {
          v392 = 511 - v387;
          LOWORD(v387) = ~(511 - v387);
          v388 = &v384[-(v392 >> 9)];
        }
        else
        {
          v388 = &v384[(unint64_t)v387 >> 9];
        }
        v393 = (char *)*v388 + 8 * (v387 & 0x1FF);
        v394 = v386 + v377;
        v395 = (const void **)(v378 + 8 * (v394 >> 9));
        if (v379 == v378)
          v396 = 0;
        else
          v396 = (char *)*v395 + 8 * (v394 & 0x1FF);
        *(_QWORD *)&v433 = v384;
        *((_QWORD *)&v433 + 1) = v13;
        std::__for_each_segment[abi:ne180100]<std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,std::__deque_iterator<void *,void **,void *&,void ***,long,512l>>>(v388, v393, v395, v396, (uint64_t)&v433);
        v402 = *((_QWORD *)this + 22);
        v401 = *((_QWORD *)this + 23);
        if (v401 == v402)
          v403 = 0;
        else
          v403 = ((v401 - v402) << 6) - 1;
        v404 = *((_QWORD *)this + 25);
        v405 = *((_QWORD *)this + 26) - v376;
        *((_QWORD *)this + 26) = v405;
        if ((unint64_t)(v403 - (v404 + v405)) >= 0x400)
        {
          do
          {
            operator delete(*(void **)(v401 - 8));
            v406 = *((_QWORD *)this + 22);
            v401 = *((_QWORD *)this + 23) - 8;
            *((_QWORD *)this + 23) = v401;
            if (v401 == v406)
              v407 = 0;
            else
              v407 = ((v401 - v406) << 6) - 1;
          }
          while ((unint64_t)(v407 - (*((_QWORD *)this + 26) + *((_QWORD *)this + 25))) > 0x3FF);
        }
      }
    }
  }
LABEL_505:
  v408 = *((_QWORD *)this + 14);
  if (v408 < *((unsigned int *)this + 67))
  {
    while (2)
    {
      if (!*((_QWORD *)this + 20))
        return;
      v419 = *((_QWORD *)this + 13) + v408;
      v420 = *((_QWORD *)this + 10);
      v421 = (char *)(v420 + 8 * (v419 >> 9));
      if (*((_QWORD *)this + 11) == v420)
      {
        v409 = 0;
        v410 = *((_QWORD *)this + 19);
        v411 = *((_QWORD *)this + 16);
        v412 = (char *)(v411 + 8 * (v410 >> 9));
        if (*((_QWORD *)this + 17) == v411)
          goto LABEL_513;
      }
      else
      {
        v409 = *(_QWORD *)v421 + 8 * (v419 & 0x1FF);
        v410 = *((_QWORD *)this + 19);
        v422 = *((_QWORD *)this + 16);
        v412 = (char *)(v422 + 8 * (v410 >> 9));
        if (*((_QWORD *)this + 17) == v422)
        {
LABEL_513:
          v413 = 0;
LABEL_509:
          std::deque<void *>::insert((uint64_t)this + 72, v421, v409, v413);
          std::deque<void *>::erase((uint64_t)v17, v412, v413);
          qmi::TransactionQueue::State::sendNow_sync(this, v414, v415, v416, v417, v418);
          v408 = *((_QWORD *)this + 14);
          if (v408 >= *((unsigned int *)this + 67))
            return;
          continue;
        }
      }
      break;
    }
    v413 = (char *)(*(_QWORD *)v412 + 8 * (v410 & 0x1FF));
    goto LABEL_509;
  }
}

void sub_19E9F5728(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_19E9F5740()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x19E9F57F8);
  JUMPOUT(0x19E9F57F0);
}

void sub_19E9F5750()
{
  uint64_t v0;

  if (!v0)
    JUMPOUT(0x19E9F57F8);
  JUMPOUT(0x19E9F57F0);
}

void sub_19E9F575C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_19E9F57AC(void *a1)
{
  void **v1;
  void **v2;
  void *v3;

  __cxa_begin_catch(a1);
  while (v1 != v2)
  {
    v3 = *v1++;
    operator delete(v3);
  }
  __cxa_rethrow();
}

void sub_19E9F57D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_end_catch();
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E9F57E4()
{
  __cxa_end_catch();
  JUMPOUT(0x19E9F57ECLL);
}

void qmi::TransactionQueue::State::setSendWindowWidth_sync(qmi::TransactionQueue::State *this, unsigned int a2)
{
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  *((_DWORD *)this + 67) = a2;
  if (*((_DWORD *)this + 8) == 2)
  {
    v3 = *((_QWORD *)this + 14);
    if (v3 < a2)
    {
      do
      {
        if (!*((_QWORD *)this + 20))
          return;
        v10 = *((_QWORD *)this + 13) + v3;
        v11 = *((_QWORD *)this + 10);
        v12 = (char *)(v11 + 8 * (v10 >> 9));
        if (*((_QWORD *)this + 11) == v11)
        {
          v13 = 0;
          v14 = *((_QWORD *)this + 19);
          v17 = *((_QWORD *)this + 16);
          v16 = (char *)(v17 + 8 * (v14 >> 9));
          if (*((_QWORD *)this + 17) != v17)
          {
LABEL_11:
            v4 = (char *)(*(_QWORD *)v16 + 8 * (v14 & 0x1FF));
            goto LABEL_5;
          }
        }
        else
        {
          v13 = *(_QWORD *)v12 + 8 * (v10 & 0x1FF);
          v14 = *((_QWORD *)this + 19);
          v15 = *((_QWORD *)this + 16);
          v16 = (char *)(v15 + 8 * (v14 >> 9));
          if (*((_QWORD *)this + 17) != v15)
            goto LABEL_11;
        }
        v4 = 0;
LABEL_5:
        std::deque<void *>::insert((uint64_t)this + 72, v12, v13, v4);
        std::deque<void *>::erase((uint64_t)this + 120, v16, v4);
        qmi::TransactionQueue::State::sendNow_sync(this, v5, v6, v7, v8, v9);
        v3 = *((_QWORD *)this + 14);
      }
      while (v3 < *((unsigned int *)this + 67));
    }
  }
}

uint64_t qmi::TransactionQueue::State::getSendWindowWidth_sync(qmi::TransactionQueue::State *this)
{
  return *((unsigned int *)this + 67);
}

uint64_t qmi::TransactionQueue::State::getSendable_sync(qmi::TransactionQueue::State *this)
{
  return *((unsigned int *)this + 67) - *((_QWORD *)this + 14);
}

uint64_t qmi::TransactionQueue::State::getQueueSize_sync(qmi::TransactionQueue::State *this)
{
  return *((_QWORD *)this + 20) + *((_QWORD *)this + 14) + *((_QWORD *)this + 26);
}

void qmi::TransactionQueue::State::sendTimeout_sync(qmi::TransactionQueue::State *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  NSObject ***v8;
  uint64_t v9;
  unint64_t v10;
  NSObject **v11;
  uint64_t isa_low;
  NSObject *v13;
  const char *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD *Instance;
  const char *v21;
  NSObject ***v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  int v26;
  int v27;
  _QWORD *v28;
  const char *v29;
  _QWORD *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  _QWORD *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL (*v39)(uint64_t, uint64_t);
  void *v40;
  __int16 v41;

  v4 = *((_QWORD *)this + 13);
  v5 = *((_QWORD *)this + 10);
  v6 = *((_QWORD *)this + 11);
  v7 = (_QWORD *)(v5 + 8 * (v4 >> 9));
  if (v6 == v5)
  {
    v8 = 0;
    v9 = 0;
  }
  else
  {
    v8 = (NSObject ***)(*v7 + 8 * (*((_QWORD *)this + 13) & 0x1FFLL));
    v9 = *(_QWORD *)(v5 + (((*((_QWORD *)this + 14) + v4) >> 6) & 0x3FFFFFFFFFFFFF8))
       + 8 * ((*((_QWORD *)this + 14) + v4) & 0x1FF);
  }
  v37 = MEMORY[0x1E0C809B0];
  v38 = 0x40000000;
  v39 = ___ZN3qmi16TransactionQueue5State24findSentTransaction_syncEt_block_invoke;
  v40 = &__block_descriptor_tmp_8_0;
  v41 = a2;
  if (v8 == (NSObject ***)v9)
  {
    if (v6 != v5)
      goto LABEL_6;
  }
  else
  {
    while ((((uint64_t (*)(uint64_t *, NSObject **))v39)(&v37, *v8) & 1) == 0)
    {
      if ((NSObject ***)((char *)++v8 - *v7) == (NSObject ***)4096)
      {
        v22 = (NSObject ***)v7[1];
        ++v7;
        v8 = v22;
      }
      if (v8 == (NSObject ***)v9)
      {
        v8 = (NSObject ***)v9;
        break;
      }
    }
    v5 = *((_QWORD *)this + 10);
    if (*((_QWORD *)this + 11) != v5)
    {
LABEL_6:
      v10 = *((_QWORD *)this + 14) + *((_QWORD *)this + 13);
      if (v8 != (NSObject ***)(*(_QWORD *)(v5 + ((v10 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v10 & 0x1FF)))
        goto LABEL_7;
      goto LABEL_21;
    }
  }
  if (v8)
  {
LABEL_7:
    v11 = *v8;
    isa_low = LOWORD((*v8)[2][3].isa);
    v13 = *((_QWORD *)this + 3);
    qmi::MessageBase::MessageBase();
    qmi::Transaction::invoke(v11, v13, (const qmi::ResponseBase *)&v37);
    qmi::MessageBase::~MessageBase((qmi::MessageBase *)&v37);
    if (*((_BYTE *)*v8 + 40))
    {
      v37 = 0;
      v38 = 0;
      v15 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
      if (v15)
      {
LABEL_9:
        v15 = std::__shared_weak_count::lock(v15);
        v16 = v15;
        v38 = (uint64_t)v15;
        if (v15)
        {
          v17 = *((_QWORD *)this + 7);
          v37 = v17;
          if (v17)
          {
            v18 = *(unsigned __int8 *)(v17 + 32);
            v19 = *(unsigned __int8 *)(v17 + 33);
            Instance = ATCSLogger::getInstance((ATCSLogger *)v15);
            v21 = (const char *)(v17 + 8);
            if (*(char *)(v17 + 31) < 0)
              v21 = *(const char **)v21;
            (*(void (**)(_QWORD *, uint64_t, const char *, ...))(*Instance + 24))(Instance, 6, "ATCS_TIMEOUT on message for svc=%d client=%d (txid=%d msgid=0x%x) [%s]\n", v18, v19, a2, isa_low, v21);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 64))(v17, a2, isa_low);
LABEL_30:
            p_shared_owners = (unint64_t *)&v16->__shared_owners_;
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              v33 = v16;
LABEL_40:
              std::__shared_weak_count::__release_weak(v33);
              goto LABEL_41;
            }
            goto LABEL_41;
          }
        }
LABEL_29:
        v30 = ATCSLogger::getInstance((ATCSLogger *)v15);
        (*(void (**)(_QWORD *, uint64_t, const char *, ...))(*v30 + 24))(v30, 6, "ATCS_TIMEOUT for message but client dead (txid=%d msgid=0x%x)\n", a2, isa_low);
        if (!v16)
          goto LABEL_41;
        goto LABEL_30;
      }
    }
    else
    {
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x17D, "tx->wasSent()", "is not", "true", v14);
      v37 = 0;
      v38 = 0;
      v15 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
      if (v15)
        goto LABEL_9;
    }
    v16 = 0;
    goto LABEL_29;
  }
LABEL_21:
  v37 = 0;
  v38 = 0;
  v23 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (!v23)
  {
    v24 = 0;
    goto LABEL_35;
  }
  v23 = std::__shared_weak_count::lock(v23);
  v24 = v23;
  v38 = (uint64_t)v23;
  if (!v23 || (v25 = *((_QWORD *)this + 7), (v37 = v25) == 0))
  {
LABEL_35:
    v34 = ATCSLogger::getInstance((ATCSLogger *)v23);
    (*(void (**)(_QWORD *, uint64_t, const char *, ...))(*v34 + 24))(v34, 6, "Timeout fired, but no transaction found for message (txid=%d) but client is dead; ignoring\n",
      a2);
    if (!v24)
      goto LABEL_41;
    goto LABEL_36;
  }
  v26 = *(unsigned __int8 *)(v25 + 32);
  v27 = *(unsigned __int8 *)(v25 + 33);
  v28 = ATCSLogger::getInstance((ATCSLogger *)v23);
  v29 = (const char *)(v25 + 8);
  if (*(char *)(v25 + 31) < 0)
    v29 = *(const char **)v29;
  (*(void (**)(_QWORD *, uint64_t, const char *, ...))(*v28 + 24))(v28, 6, "Timeout fired, but no transaction found for svc=%d client=%d (txid=%d); ignoring [%s]\n",
    v26,
    v27,
    a2,
    v29);
LABEL_36:
  v35 = (unint64_t *)&v24->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    v33 = v24;
    goto LABEL_40;
  }
LABEL_41:
  qmi::TransactionQueue::State::checkFlushNotifiers_sync(this);
}

void sub_19E9F5CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E9F5CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E9F5CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E9F5CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void qmi::TransactionQueue::State::startTimer_sync(qmi::TransactionQueue::State *this, __int16 a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD v13[5];
  _QWORD v14[2];
  BOOL (*v15)(uint64_t, uint64_t);
  void *v16;
  __int16 v17;

  v3 = *((_QWORD *)this + 13);
  v4 = *((_QWORD *)this + 10);
  v5 = *((_QWORD *)this + 11);
  v6 = (_QWORD *)(v4 + 8 * (v3 >> 9));
  if (v5 == v4)
  {
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v7 = (uint64_t *)(*v6 + 8 * (*((_QWORD *)this + 13) & 0x1FFLL));
    v8 = *(_QWORD *)(v4 + (((*((_QWORD *)this + 14) + v3) >> 6) & 0x3FFFFFFFFFFFFF8))
       + 8 * ((*((_QWORD *)this + 14) + v3) & 0x1FF);
  }
  v9 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 0x40000000;
  v15 = ___ZN3qmi16TransactionQueue5State24findSentTransaction_syncEt_block_invoke;
  v16 = &__block_descriptor_tmp_8_0;
  v17 = a2;
  if (v7 == (uint64_t *)v8)
  {
    if (v5 != v4)
      goto LABEL_6;
  }
  else
  {
    while ((((uint64_t (*)(_QWORD *, uint64_t))v15)(v14, *v7) & 1) == 0)
    {
      if ((uint64_t *)((char *)++v7 - *v6) == (uint64_t *)4096)
      {
        v12 = (uint64_t *)v6[1];
        ++v6;
        v7 = v12;
      }
      if (v7 == (uint64_t *)v8)
      {
        v7 = (uint64_t *)v8;
        break;
      }
    }
    v4 = *((_QWORD *)this + 10);
    if (*((_QWORD *)this + 11) != v4)
    {
LABEL_6:
      v10 = *((_QWORD *)this + 14) + *((_QWORD *)this + 13);
      if (v7 == (uint64_t *)(*(_QWORD *)(v4 + ((v10 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v10 & 0x1FF)))
        return;
      goto LABEL_7;
    }
  }
  if (!v7)
    return;
LABEL_7:
  v11 = *v7;
  v13[0] = v9;
  v13[1] = 0x40000000;
  v13[2] = ___ZN3qmi16TransactionQueue5State15startTimer_syncEt_block_invoke;
  v13[3] = &__block_descriptor_tmp_24_0;
  v13[4] = this;
  qmi::Transaction::startTimer(v11, (uint64_t)v13);
}

void ___ZN3qmi16TransactionQueue5State15startTimer_syncEt_block_invoke(uint64_t a1, uint64_t a2)
{
  qmi::TransactionQueue::State::sendTimeout_sync(*(qmi::TransactionQueue::State **)(a1 + 32), a2);
}

void qmi::TransactionQueue::State::stall_sync(qmi::TransactionQueue::State *this)
{
  *((_DWORD *)this + 8) = 1;
  qmi::TransactionQueue::State::checkFlushNotifiers_sync(this);
}

void qmi::TransactionQueue::State::stall_sync(qmi::TransactionQueue::State *this, dispatch_object_t object)
{
  NSObject *v2;
  dispatch_group_t **v4;
  dispatch_group_t *v5;
  dispatch_group_t *v6;
  _QWORD *v7;
  NSObject *v8;

  v2 = object;
  v8 = object;
  if (!object)
  {
    v7 = (_QWORD *)*((_QWORD *)this + 28);
    v4 = (dispatch_group_t **)((char *)this + 224);
    if ((unint64_t)v7 < *((_QWORD *)this + 29))
    {
      *v7 = 0;
      v6 = (dispatch_group_t *)(v7 + 1);
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  dispatch_retain(object);
  v5 = (dispatch_group_t *)*((_QWORD *)this + 28);
  v4 = (dispatch_group_t **)((char *)this + 224);
  if ((unint64_t)v5 >= *((_QWORD *)this + 29))
  {
LABEL_8:
    v6 = std::vector<dispatch::group_session>::__emplace_back_slow_path<dispatch::group>((dispatch_group_t **)this + 27, &v8);
    v2 = v8;
    goto LABEL_9;
  }
  *v5 = v2;
  dispatch_retain(v2);
  if (*v5)
    dispatch_group_enter(*v5);
  v6 = v5 + 1;
LABEL_9:
  *v4 = v6;
  if (v2)
    dispatch_release(v2);
  *((_DWORD *)this + 8) = 1;
  qmi::TransactionQueue::State::checkFlushNotifiers_sync(this);
}

void sub_19E9F5F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  _Unwind_Resume(exception_object);
}

void qmi::TransactionQueue::State::flush_sync(qmi::TransactionQueue::State *this, dispatch_object_t object)
{
  NSObject *v2;
  dispatch_group_t **v4;
  dispatch_group_t *v5;
  dispatch_group_t *v6;
  _QWORD *v7;
  NSObject *v8;

  v2 = object;
  v8 = object;
  if (!object)
  {
    v7 = (_QWORD *)*((_QWORD *)this + 31);
    v4 = (dispatch_group_t **)((char *)this + 248);
    if ((unint64_t)v7 < *((_QWORD *)this + 32))
    {
      *v7 = 0;
      v6 = (dispatch_group_t *)(v7 + 1);
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  dispatch_retain(object);
  v5 = (dispatch_group_t *)*((_QWORD *)this + 31);
  v4 = (dispatch_group_t **)((char *)this + 248);
  if ((unint64_t)v5 >= *((_QWORD *)this + 32))
  {
LABEL_8:
    v6 = std::vector<dispatch::group_session>::__emplace_back_slow_path<dispatch::group>((dispatch_group_t **)this + 30, &v8);
    v2 = v8;
    goto LABEL_9;
  }
  *v5 = v2;
  dispatch_retain(v2);
  if (*v5)
    dispatch_group_enter(*v5);
  v6 = v5 + 1;
LABEL_9:
  *v4 = v6;
  if (v2)
    dispatch_release(v2);
  qmi::TransactionQueue::State::checkFlushNotifiers_sync(this);
}

void sub_19E9F5FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  _Unwind_Resume(exception_object);
}

uint64_t qmi::TransactionQueue::State::dumpState_sync@<X0>(qmi::TransactionQueue::State *this@<X0>, _BYTE *a2@<X8>)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  qmi::TransactionQueue::State *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void *__p[2];
  __int128 v38;
  unint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v39 = 0xAAAAAAAAAAAAAAAALL;
  v49 = v4;
  v48 = v4;
  v47 = v4;
  v46 = v4;
  v45 = v4;
  v44 = v4;
  v43 = v4;
  v42 = v4;
  v41 = v4;
  v38 = v4;
  *(_OWORD *)__p = v4;
  v36 = v4;
  v35 = v4;
  v34 = v4;
  v33 = v4;
  v5 = MEMORY[0x1E0DE4FE0];
  v6 = MEMORY[0x1E0DE4FE0] + 64;
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v32 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v32 + *(_QWORD *)(v32 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v32 + *(_QWORD *)(v32 - 24));
  std::ios_base::init(v8, &v33);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v32 = v5 + 24;
  v40 = v6;
  std::streambuf::basic_streambuf();
  *(_QWORD *)&v33 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v38 = 0u;
  LODWORD(v39) = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"sendable=", 9);
  std::ostream::operator<<();
  v31 = this;
  v9 = *((_QWORD *)this + 14);
  if (v9)
  {
    v10 = *((_QWORD *)this + 10);
    if (*((_QWORD *)this + 11) != v10)
    {
      v11 = *((_QWORD *)this + 13);
      v12 = (_QWORD *)(v10 + 8 * (v11 >> 9));
      v13 = *v12 + 8 * (v11 & 0x1FF);
      v14 = *(_QWORD *)(v10 + (((v11 + v9) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v11 + v9) & 0x1FF);
      while (v13 != v14)
      {
        v15 = *(_QWORD *)(*(_QWORD *)v13 + 8);
        if (v15)
          v16 = " sent(";
        else
          v16 = " timedout(";
        if (v15)
          v17 = 6;
        else
          v17 = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)v16, v17);
        v18 = (_QWORD *)std::ostream::operator<<();
        v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)":0x", 3);
        *(_DWORD *)((char *)v19 + *(_QWORD *)(*v19 - 24) + 8) = *(_DWORD *)((_BYTE *)v19 + *(_QWORD *)(*v19 - 24)
                                                                                           + 8) & 0xFFFFFFB5 | 8;
        v20 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)")", 1);
        v13 += 8;
        if (v13 - *v12 == 4096)
        {
          v21 = v12[1];
          ++v12;
          v13 = v21;
        }
      }
    }
  }
  v22 = (uint64_t *)MEMORY[0x1E0DE4F60];
  if (*((_QWORD *)v31 + 20))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)" pending=", 9);
    std::ostream::operator<<();
  }
  if (*((_QWORD *)v31 + 26))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)" stalled=", 9);
    std::ostream::operator<<();
  }
  if ((v39 & 0x10) != 0)
  {
    v25 = *((_QWORD *)&v38 + 1);
    if (*((_QWORD *)&v38 + 1) < (unint64_t)v36)
    {
      *((_QWORD *)&v38 + 1) = v36;
      v25 = v36;
    }
    v26 = (const void *)*((_QWORD *)&v35 + 1);
    v23 = v25 - *((_QWORD *)&v35 + 1);
    if ((unint64_t)(v25 - *((_QWORD *)&v35 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_35;
  }
  else
  {
    if ((v39 & 8) == 0)
    {
      v23 = 0;
      a2[23] = 0;
      v24 = MEMORY[0x1E0DE4FB8];
      goto LABEL_31;
    }
    v26 = (const void *)v34;
    v23 = v35 - v34;
    if ((_QWORD)v35 - (_QWORD)v34 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_35:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v23 >= 0x17)
  {
    v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v27 = v23 | 7;
    v28 = v27 + 1;
    v29 = operator new(v27 + 1);
    *((_QWORD *)a2 + 1) = v23;
    *((_QWORD *)a2 + 2) = v28 | 0x8000000000000000;
    *(_QWORD *)a2 = v29;
    a2 = v29;
    v24 = MEMORY[0x1E0DE4FB8];
    goto LABEL_30;
  }
  a2[23] = v23;
  v24 = MEMORY[0x1E0DE4FB8];
  if (v23)
LABEL_30:
    memmove(a2, v26, v23);
LABEL_31:
  a2[v23] = 0;
  v32 = *v22;
  *(uint64_t *)((char *)&v32 + *(_QWORD *)(v32 - 24)) = v22[3];
  *(_QWORD *)&v33 = v24 + 16;
  if (SBYTE7(v38) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AEB300](&v40);
}

void sub_19E9F641C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::ostream::~ostream();
  MEMORY[0x1A1AEB300](a11);
  _Unwind_Resume(a1);
}

_QWORD *qmi::TransactionQueue::TransactionQueue(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  return this;
}

_QWORD *qmi::TransactionQueue::TransactionQueue(_QWORD *this, const qmi::TransactionQueue *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *((_QWORD *)a2 + 1);
  *this = *(_QWORD *)a2;
  this[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *((_QWORD *)a2 + 1);
  *this = *(_QWORD *)a2;
  this[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void qmi::TransactionQueue::operator=(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = *a2;
  v2 = a2[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = v3;
  a1[1] = v2;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t *qmi::TransactionQueue::swap(uint64_t *this, qmi::TransactionQueue *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *this;
  *this = *(_QWORD *)a2;
  *(_QWORD *)a2 = v2;
  v3 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  return this;
}

void qmi::TransactionQueue::~TransactionQueue(qmi::TransactionQueue *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

std::__shared_weak_count_vtbl **qmi::TransactionQueue::TransactionQueue(std::__shared_weak_count_vtbl **a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  std::__shared_weak_count_vtbl *v10;

  v10 = (std::__shared_weak_count_vtbl *)operator new(0x110uLL);
  qmi::TransactionQueue::State::State((uint64_t)v10, a2, a3, a4, a5);
  return std::shared_ptr<qmi::TransactionQueue::State>::shared_ptr[abi:ne180100]<qmi::TransactionQueue::State,qmi::TransactionQueue::State::Deleter,void>(a1, v10);
}

{
  std::__shared_weak_count_vtbl *v10;

  v10 = (std::__shared_weak_count_vtbl *)operator new(0x110uLL);
  qmi::TransactionQueue::State::State((uint64_t)v10, a2, a3, a4, a5);
  return std::shared_ptr<qmi::TransactionQueue::State>::shared_ptr[abi:ne180100]<qmi::TransactionQueue::State,qmi::TransactionQueue::State::Deleter,void>(a1, v10);
}

void sub_19E9F6638(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E9F66B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t qmi::TransactionQueue::send_sync(uint64_t *a1, _QWORD *a2, uint64_t a3, void *a4)
{
  dispatch_queue_t current_queue;
  uint64_t v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v15;

  current_queue = dispatch_get_current_queue();
  v12 = *a1;
  if (current_queue != *(dispatch_queue_t *)(*a1 + 16))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x1FD, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v10);
    v12 = *a1;
  }
  if (a4)
    a4 = _Block_copy(a4);
  v15 = a4;
  v13 = qmi::TransactionQueue::State::push_sync(v12, a2, a3, &v15, v9, (uint64_t)v10, v11);
  if (a4)
    _Block_release(a4);
  return v13;
}

void sub_19E9F67F0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    _Block_release(v1);
  _Unwind_Resume(exception_object);
}

uint64_t qmi::TransactionQueue::forceSend_sync(uint64_t *a1, _QWORD *a2, uint64_t a3, void *a4)
{
  dispatch_queue_t current_queue;
  uint64_t v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v15;

  current_queue = dispatch_get_current_queue();
  v12 = *a1;
  if (current_queue != *(dispatch_queue_t *)(*a1 + 16))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x203, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v10);
    v12 = *a1;
  }
  if (a4)
    a4 = _Block_copy(a4);
  v15 = a4;
  v13 = qmi::TransactionQueue::State::forceSend_sync(v12, a2, a3, &v15, v9, (uint64_t)v10, v11);
  if (a4)
    _Block_release(a4);
  return v13;
}

void sub_19E9F68D0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    _Block_release(v1);
  _Unwind_Resume(exception_object);
}

uint64_t qmi::TransactionQueue::send_sync(uint64_t *a1, qmi::MutableMessageBase *a2, uint64_t a3, void *a4)
{
  dispatch_queue_t current_queue;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;

  current_queue = dispatch_get_current_queue();
  v10 = *a1;
  if (current_queue != *(dispatch_queue_t *)(*a1 + 16))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x209, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v9);
    v10 = *a1;
  }
  if (a4)
    a4 = _Block_copy(a4);
  v13 = a4;
  v11 = qmi::TransactionQueue::State::push_sync(v10, a2, a3, &v13);
  if (a4)
    _Block_release(a4);
  return v11;
}

void sub_19E9F69B0(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    _Block_release(v1);
  _Unwind_Resume(exception_object);
}

uint64_t qmi::TransactionQueue::forceSend_sync(uint64_t *a1, qmi::MutableMessageBase *a2, uint64_t a3, void *a4)
{
  dispatch_queue_t current_queue;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;

  current_queue = dispatch_get_current_queue();
  v10 = *a1;
  if (current_queue != *(dispatch_queue_t *)(*a1 + 16))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x20F, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v9);
    v10 = *a1;
  }
  if (a4)
    a4 = _Block_copy(a4);
  v13 = a4;
  v11 = qmi::TransactionQueue::State::forceSend_sync(v10, a2, a3, &v13);
  if (a4)
    _Block_release(a4);
  return v11;
}

void sub_19E9F6A90(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    _Block_release(v1);
  _Unwind_Resume(exception_object);
}

void qmi::TransactionQueue::stop_sync(qmi::TransactionQueue::State **this)
{
  qmi::TransactionQueue::State::stop_sync(*this);
}

void qmi::TransactionQueue::startTimer_sync(qmi::TransactionQueue::State **this, __int16 a2)
{
  const char *v4;
  dispatch_queue_t current_queue;
  qmi::TransactionQueue::State *v6;

  current_queue = dispatch_get_current_queue();
  v6 = *this;
  if (current_queue != *((dispatch_queue_t *)*this + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x21B, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v4);
    v6 = *this;
  }
  qmi::TransactionQueue::State::startTimer_sync(v6, a2);
}

void qmi::TransactionQueue::sendTransactionResponse_sync(qmi::TransactionQueue::State **this, int a2, const qmi::ResponseBase *a3)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  dispatch_queue_t current_queue;
  qmi::TransactionQueue::State *v11;

  current_queue = dispatch_get_current_queue();
  v11 = *this;
  if (current_queue != *((dispatch_queue_t *)*this + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x221, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v8);
    v11 = *this;
  }
  qmi::TransactionQueue::State::sendTransactionResponse_sync(v11, a2, a3, v6, v7, (uint64_t)v8, v9);
}

void qmi::TransactionQueue::start_sync(qmi::TransactionQueue::State **this)
{
  qmi::TransactionQueue::State::start_sync(*this);
}

void qmi::TransactionQueue::stall_sync(qmi::TransactionQueue::State **this)
{
  const char *v2;
  dispatch_queue_t current_queue;
  qmi::TransactionQueue::State *v4;

  current_queue = dispatch_get_current_queue();
  v4 = *this;
  if (current_queue != *((dispatch_queue_t *)*this + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x22C, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v2);
    v4 = *this;
  }
  *((_DWORD *)v4 + 8) = 1;
  qmi::TransactionQueue::State::checkFlushNotifiers_sync(v4);
}

void qmi::TransactionQueue::stall_sync(qmi::TransactionQueue::State **this, NSObject *a2)
{
  const char *v4;
  dispatch_queue_t current_queue;
  qmi::TransactionQueue::State *v6;

  current_queue = dispatch_get_current_queue();
  v6 = *this;
  if (current_queue != *((dispatch_queue_t *)*this + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x232, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v4);
    v6 = *this;
  }
  qmi::TransactionQueue::State::stall_sync(v6, a2);
}

void qmi::TransactionQueue::flush_sync(qmi::TransactionQueue::State **this, NSObject *a2)
{
  const char *v4;
  dispatch_queue_t current_queue;
  qmi::TransactionQueue::State *v6;

  current_queue = dispatch_get_current_queue();
  v6 = *this;
  if (current_queue != *((dispatch_queue_t *)*this + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x238, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v4);
    v6 = *this;
  }
  qmi::TransactionQueue::State::flush_sync(v6, a2);
}

void qmi::TransactionQueue::setSendWindowWidth_sync(qmi::TransactionQueue::State **this, unsigned int a2)
{
  const char *v4;
  dispatch_queue_t current_queue;
  qmi::TransactionQueue::State *v6;

  current_queue = dispatch_get_current_queue();
  v6 = *this;
  if (current_queue != *((dispatch_queue_t *)*this + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x23E, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v4);
    v6 = *this;
  }
  qmi::TransactionQueue::State::setSendWindowWidth_sync(v6, a2);
}

uint64_t qmi::TransactionQueue::getSendWindowWidth_sync(qmi::TransactionQueue *this)
{
  dispatch_queue_t current_queue;
  const char *v3;
  uint64_t v4;

  current_queue = dispatch_get_current_queue();
  v4 = *(_QWORD *)this;
  if (current_queue != *(dispatch_queue_t *)(*(_QWORD *)this + 16))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x244, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v3);
    v4 = *(_QWORD *)this;
  }
  return *(unsigned int *)(v4 + 268);
}

uint64_t qmi::TransactionQueue::debugGetQueueSendableCount_sync(qmi::TransactionQueue *this)
{
  dispatch_queue_t current_queue;
  const char *v3;
  uint64_t v4;

  current_queue = dispatch_get_current_queue();
  v4 = *(_QWORD *)this;
  if (current_queue != *(dispatch_queue_t *)(*(_QWORD *)this + 16))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x249, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v3);
    v4 = *(_QWORD *)this;
  }
  return *(unsigned int *)(v4 + 268) - *(_QWORD *)(v4 + 112);
}

uint64_t qmi::TransactionQueue::debugGetQueueSize_sync(qmi::TransactionQueue *this)
{
  dispatch_queue_t current_queue;
  const char *v3;
  _QWORD *v4;

  current_queue = dispatch_get_current_queue();
  v4 = *(_QWORD **)this;
  if (current_queue != *(dispatch_queue_t *)(*(_QWORD *)this + 16))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x24E, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v3);
    v4 = *(_QWORD **)this;
  }
  return v4[20] + v4[14] + v4[26];
}

uint64_t qmi::TransactionQueue::dumpState_sync@<X0>(qmi::TransactionQueue::State **this@<X0>, _BYTE *a2@<X8>)
{
  const char *v4;
  dispatch_queue_t current_queue;
  qmi::TransactionQueue::State *v6;

  current_queue = dispatch_get_current_queue();
  v6 = *this;
  if (current_queue != *((dispatch_queue_t *)*this + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x253, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v4);
    v6 = *this;
  }
  return qmi::TransactionQueue::State::dumpState_sync(v6, a2);
}

dispatch_group_t *std::vector<dispatch::group_session>::__emplace_back_slow_path<dispatch::group>(dispatch_group_t **a1, NSObject **a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  dispatch_group_t *v10;
  NSObject *v11;
  dispatch_group_t *v12;
  dispatch_group_t *v13;
  dispatch_group_t *v14;
  dispatch_group_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  dispatch_group_t *v19;
  dispatch_group_t *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  NSObject *v24;
  dispatch_group_t *v25;
  dispatch_group_t *v26;
  NSObject *v27;
  NSObject *v28;
  NSObject *v29;

  v2 = (char *)a1[1] - (char *)*a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v7 = (char *)a1[2] - (char *)*a1;
  if (v7 >> 2 > v4)
    v4 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  if (!v8)
  {
    v9 = 0;
    v10 = (dispatch_group_t *)(8 * v3);
    v11 = *a2;
    *(_QWORD *)(8 * v3) = *a2;
    if (!v11)
      goto LABEL_14;
    goto LABEL_12;
  }
  if (v8 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v9 = (char *)operator new(8 * v8);
  v10 = (dispatch_group_t *)&v9[8 * v3];
  v11 = *a2;
  *v10 = *a2;
  if (v11)
  {
LABEL_12:
    dispatch_retain(v11);
    if (*v10)
      dispatch_group_enter(*v10);
  }
LABEL_14:
  v12 = (dispatch_group_t *)&v9[8 * v8];
  v13 = v10 + 1;
  v14 = *a1;
  v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    v16 = (char *)v15 - (char *)*a1 - 8;
    if (v16 < 0x78
      || &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v15
      && (dispatch_group_t *)((char *)v15 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8) < v10)
    {
      goto LABEL_36;
    }
    v17 = (v16 >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v10 = (dispatch_group_t *)((char *)v10 - v18);
    v19 = &v15[v18 / 0xFFFFFFFFFFFFFFF8];
    v20 = v15 - 2;
    v21 = &v9[8 * v3 - 16];
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *(_OWORD *)v20;
      *((_OWORD *)v21 - 1) = *((_OWORD *)v20 - 1);
      *(_OWORD *)v21 = v23;
      *((_OWORD *)v20 - 1) = 0uLL;
      *(_OWORD *)v20 = 0uLL;
      v20 -= 4;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_36:
      do
      {
        v24 = *--v15;
        *--v10 = v24;
        *v15 = 0;
      }
      while (v15 != v14);
    }
    v15 = *a1;
    v25 = a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v12;
    if (v25 != v15)
    {
      v26 = v25;
      do
      {
        v28 = *--v26;
        v27 = v28;
        if (v28)
        {
          dispatch_group_leave(v27);
          v29 = *(v25 - 1);
          if (v29)
            dispatch_release(v29);
        }
        v25 = v26;
      }
      while (v26 != v15);
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void dispatch::async<qmi::Transaction::invoke(dispatch_queue_s *,qmi::ResponseBase const&)::$_0>(dispatch_queue_s *,std::unique_ptr<qmi::Transaction::invoke(dispatch_queue_s *,qmi::ResponseBase const&)::$_0,std::default_delete<qmi::Transaction::invoke(dispatch_queue_s *,qmi::ResponseBase const&)::$_0>>)::{lambda(void *)#1}::__invoke(const void **a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)(a1 + 1);
  (*((void (**)(void))*a1 + 2))();
  qmi::MessageBase::~MessageBase(v2);
  if (*a1)
    _Block_release(*a1);
  operator delete(a1);
}

void sub_19E9F7100(_Unwind_Exception *a1)
{
  const void **v1;
  qmi::MessageBase *v2;
  qmi::MessageBase *v3;

  v3 = v2;
  qmi::MessageBase::~MessageBase(v3);
  if (*v1)
    _Block_release(*v1);
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **std::shared_ptr<qmi::TransactionQueue::State>::shared_ptr[abi:ne180100]<qmi::TransactionQueue::State,qmi::TransactionQueue::State::Deleter,void>(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E4153898;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = a2;
  a1[1] = (std::__shared_weak_count_vtbl *)v4;
  if (!a2)
    return a1;
  v6 = (std::__shared_weak_count *)a2->~__shared_weak_count_0;
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
    a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
    a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_19E9F7244(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t block, uint64_t a11, void (*a12)(uint64_t a1), void *a13, uint64_t a14)
{
  uint64_t v14;
  NSObject *v15;

  __cxa_begin_catch(a1);
  v15 = *(NSObject **)(v14 + 16);
  block = MEMORY[0x1E0C809B0];
  a11 = 0x40000000;
  a12 = ___ZN3qmi16TransactionQueue5State7DeleterclEPS1__block_invoke;
  a13 = &__block_descriptor_tmp_6;
  a14 = v14;
  dispatch_async(v15, &block);
  __cxa_rethrow();
}

void sub_19E9F728C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<qmi::TransactionQueue::State *,qmi::TransactionQueue::State::Deleter,std::allocator<qmi::TransactionQueue::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<qmi::TransactionQueue::State *,qmi::TransactionQueue::State::Deleter,std::allocator<qmi::TransactionQueue::State>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(NSObject **)(v1 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3qmi16TransactionQueue5State7DeleterclEPS1__block_invoke;
  block[3] = &__block_descriptor_tmp_6;
  block[4] = v1;
  dispatch_async(v2, block);
}

uint64_t std::__shared_ptr_pointer<qmi::TransactionQueue::State *,qmi::TransactionQueue::State::Deleter,std::allocator<qmi::TransactionQueue::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000019EA1EDD5)
    return a1 + 24;
  if (((v3 & 0x800000019EA1EDD5 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000019EA1EDD5))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000019EA1EDD5 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

qmi::Transaction **boost::ptr_container_detail::static_move_ptr<qmi::Transaction,boost::ptr_container_detail::static_clone_deleter<boost::heap_clone_allocator>>::~static_move_ptr(qmi::Transaction **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  qmi::Transaction *v7;
  void *v8;

  v7 = *a1;
  if (v7)
  {
    qmi::Transaction::~Transaction(v7, a2, a3, a4, a5, a6);
    operator delete(v8);
  }
  return a1;
}

void std::deque<void *>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  BOOL v38;
  int64_t v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  void *v89;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v32 = (v5 - v9) >> 2;
      if (v5 == v9)
        v32 = 1;
      if (!(v32 >> 61))
      {
        v33 = v32 >> 2;
        v34 = 8 * v32;
        v35 = (char *)operator new(8 * v32);
        v36 = &v35[8 * v33];
        v37 = &v35[v34];
        v39 = v5 - v7;
        v38 = v5 == v7;
        v5 = v36;
        if (!v38)
        {
          v5 = &v36[v39 & 0xFFFFFFFFFFFFFFF8];
          v40 = v39 - 8;
          if ((unint64_t)(v39 - 8) >= 0x38)
          {
            v73 = &v35[8 * v33];
            v41 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              v74 = (v40 >> 3) + 1;
              v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              v41 = &v36[v75];
              v7 += v75;
              v76 = (__int128 *)(v6 + 3);
              v77 = v73 + 16;
              v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v41 = &v35[8 * v33];
          }
          do
          {
            v80 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v41 = v80;
            v41 += 8;
          }
          while (v41 != v5);
        }
        goto LABEL_74;
      }
LABEL_85:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v89 = operator new(0x1000uLL);
      std::__split_buffer<void **>::push_back((char **)a1, &v89);
      return;
    }
    v89 = operator new(0x1000uLL);
    std::__split_buffer<void **>::push_front((void **)a1, &v89);
    v42 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v42 + 1);
    v8 = *v42;
    *(_QWORD *)(a1 + 8) = v42 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v43 = (v5 - v9) >> 2;
      if (v5 == v9)
        v43 = 1;
      if (!(v43 >> 61))
      {
        v44 = v43 >> 2;
        v45 = 8 * v43;
        v35 = (char *)operator new(8 * v43);
        v36 = &v35[8 * v44];
        v37 = &v35[v45];
        v46 = v5 - v7;
        v38 = v5 == v7;
        v5 = v36;
        if (!v38)
        {
          v5 = &v36[v46 & 0xFFFFFFFFFFFFFFF8];
          v47 = v46 - 8;
          if ((unint64_t)(v46 - 8) >= 0x38)
          {
            v81 = &v35[8 * v44];
            v48 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              v82 = (v47 >> 3) + 1;
              v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              v48 = &v36[v83];
              v7 += v83;
              v84 = (__int128 *)(v42 + 3);
              v85 = v81 + 16;
              v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v48 = &v35[8 * v44];
          }
          do
          {
            v88 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v48 = v88;
            v48 += 8;
          }
          while (v48 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v35;
        *(_QWORD *)(a1 + 8) = v36;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v37;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_85;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_85;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v30 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v49 = 1;
      else
        v49 = v20 >> 2;
      if (v49 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v27 = (char *)operator new(8 * v49);
      v28 = &v27[8 * v49];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v27;
      *(_QWORD *)v27 = v30;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v31 = v21 + 2;
      if (v21 >= -1)
        v31 = v21 + 1;
      v27 -= 8 * (v31 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    goto LABEL_49;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
  {
    do
    {
LABEL_49:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v25)
            v57 = 1;
          else
            v57 = (v28 - v25) >> 2;
          if (v57 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v58 = (char *)operator new(8 * v57);
          v59 = v58;
          v60 = (v57 + 3) >> 2;
          v27 = &v58[8 * v60];
          v61 = v29 - v25;
          v38 = v29 == v25;
          v29 = v27;
          if (!v38)
          {
            v29 = &v27[v61 & 0xFFFFFFFFFFFFFFF8];
            v62 = v61 - 8;
            v63 = &v58[8 * v60];
            v64 = v25;
            if (v62 < 0x38)
              goto LABEL_89;
            v65 = 8 * v60;
            v63 = &v58[8 * v60];
            v64 = v25;
            if ((unint64_t)(v63 - v25) < 0x20)
              goto LABEL_89;
            v66 = (v62 >> 3) + 1;
            v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
            v63 = &v27[v67];
            v64 = &v25[v67];
            v68 = (__int128 *)(v25 + 16);
            v69 = &v58[v65 + 16];
            v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v71 = *v68;
              *((_OWORD *)v69 - 1) = *(v68 - 1);
              *(_OWORD *)v69 = v71;
              v68 += 2;
              v69 += 32;
              v70 -= 4;
            }
            while (v70);
            if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_89:
              do
              {
                v72 = *(_QWORD *)v64;
                v64 += 8;
                *(_QWORD *)v63 = v72;
                v63 += 8;
              }
              while (v63 != v29);
            }
          }
          v28 = &v58[8 * v57];
          operator delete(v25);
          v25 = v59;
        }
        else
        {
          v53 = (v28 - v29) >> 3;
          if (v53 >= -1)
            v54 = v53 + 1;
          else
            v54 = v53 + 2;
          v55 = v54 >> 1;
          v27 = &v25[8 * (v54 >> 1)];
          v56 = v25;
          if (v29 != v25)
          {
            memmove(v27, v25, v29 - v25);
            v56 = v29;
          }
          v29 = (char *)v56 + 8 * v55;
        }
      }
      v52 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v27 - 1) = v52;
      v27 -= 8;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
  }
LABEL_45:
  v51 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v27;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v51)
    operator delete(v51);
}

void sub_19E9F7908(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__split_buffer<void **>::push_back(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_22;
  v5 = *a1;
  v6 = a1[1];
  if (v6 > *a1)
  {
    v7 = (v6 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v6[-8 * v9];
    v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  v14 = (v4 - v5) >> 2;
  if (v4 == v5)
    v14 = 1;
  if (v14 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v6;
  v19 = v4 == v6;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        v31 = *(_QWORD *)v6;
        v6 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20)
      goto LABEL_19;
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = &v6[v25];
    v27 = (__int128 *)(v6 + 16);
    v28 = v23 + 16;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_19;
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    v4 = a1[2];
  }
LABEL_22:
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<void **>::push_front(void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    v7 = a1[2];
    v6 = a1[3];
    if (v7 >= v6)
    {
      v13 = v6 - v4;
      v12 = v13 == 0;
      v14 = v13 >> 2;
      if (v12)
        v14 = 1;
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = (v14 + 3) >> 2;
      v16 = 8 * v14;
      v17 = (char *)operator new(8 * v14);
      v5 = &v17[8 * v15];
      v18 = v5;
      v19 = v7 - v4;
      if (v7 != v4)
      {
        v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        v20 = v19 - 8;
        v21 = &v17[8 * v15];
        v22 = v4;
        if (v20 < 0x38)
          goto LABEL_27;
        v23 = &v17[8 * v15];
        v21 = v23;
        v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20)
          goto LABEL_27;
        v24 = (v20 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v5[v25];
        v22 = &v4[v25];
        v26 = (__int128 *)(v4 + 16);
        v27 = v23 + 16;
        v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            v30 = *(_QWORD *)v22;
            v22 += 8;
            *(_QWORD *)v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        v5 = (char *)a1[1];
      }
    }
    else
    {
      v8 = (v6 - v7) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v11 = &v7[8 * (v9 >> 1)];
      v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    v5 = (char *)a1[1];
  }
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void std::deque<void *>::erase(uint64_t a1, char *a2, char *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void **v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  const void **v14;
  const void **v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  const void **v19;
  char *v20;
  unint64_t v21;
  int64x2_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  const void **v28;
  _BYTE *v29;
  __int16 v30;
  const void **v31;
  _BYTE *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const void **v41[4];

  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = (const void **)(v7 + 8 * (v6 >> 9));
  if (v8 != v7)
  {
    v10 = (char *)*v9 + 8 * (*(_QWORD *)(a1 + 32) & 0x1FFLL);
    if (a3 != v10)
      goto LABEL_3;
LABEL_7:
    v12 = *v9;
    goto LABEL_8;
  }
  v10 = 0;
  if (!a3)
    goto LABEL_7;
LABEL_3:
  v11 = ((uint64_t)&a3[-*(_QWORD *)a2] >> 3) + ((a2 - (char *)v9) << 6);
  v12 = *v9;
  v13 = v11 - ((v10 - (_BYTE *)*v9) >> 3);
  if (!v13)
  {
LABEL_8:
    v14 = (const void **)(v7 + 8 * (v6 >> 9));
    v15 = (const void **)v10;
    goto LABEL_9;
  }
  if (v11 < 1)
  {
    v23 = 511 - v11;
    LOWORD(v11) = ~(511 - v11);
    v14 = &v9[-(v23 >> 9)];
  }
  else
  {
    v14 = &v9[(unint64_t)v11 >> 9];
  }
  v12 = *v14;
  v15 = (const void **)((char *)*v14 + 8 * (v11 & 0x1FF));
  v24 = *(_QWORD *)(a1 + 40);
  if (v13 > (unint64_t)(v24 - 1) >> 1)
  {
    v25 = (char *)v15 - v12;
    v26 = ((char *)v15 - v12) >> 3;
    if (v25 < -7)
    {
      v33 = 510 - v26;
      v28 = &v14[-(v33 >> 9)];
      v29 = (char *)*v28 + 8 * (~(_WORD)v33 & 0x1FF);
      v30 = v24 + v6;
      v31 = (const void **)(v7 + 8 * ((v24 + v6) >> 9));
      if (v8 != v7)
        goto LABEL_19;
    }
    else
    {
      v27 = v26 + 1;
      v28 = &v14[v27 >> 9];
      v29 = (char *)*v28 + 8 * (v27 & 0x1FF);
      v30 = v24 + v6;
      v31 = (const void **)(v7 + 8 * ((v24 + v6) >> 9));
      if (v8 != v7)
      {
LABEL_19:
        v32 = (char *)*v31 + 8 * (v30 & 0x1FF);
LABEL_22:
        v41[0] = v14;
        v41[1] = v15;
        std::__for_each_segment[abi:ne180100]<std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,std::__deque_iterator<void *,void **,void *&,void ***,long,512l>>>(v28, v29, v31, v32, (uint64_t)v41);
        v35 = *(_QWORD *)(a1 + 8);
        v34 = *(_QWORD *)(a1 + 16);
        v36 = v34 - v35;
        v37 = v34 == v35;
        v39 = *(_QWORD *)(a1 + 32);
        v38 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 40) = v38 - 1;
        v40 = (v36 << 6) - 1;
        if (v37)
          v40 = 0;
        if ((unint64_t)(v40 - (v38 + v39) + 1) >= 0x400)
        {
          operator delete(*(void **)(v34 - 8));
          *(_QWORD *)(a1 + 16) -= 8;
        }
        return;
      }
    }
    v32 = 0;
    goto LABEL_22;
  }
LABEL_9:
  v16 = (char *)v15 - v12;
  v17 = ((char *)v15 - v12) >> 3;
  if (v16 < -7)
  {
    v21 = 510 - v17;
    v19 = &v14[-(v21 >> 9)];
    v20 = (char *)*v19 + 8 * (~(_WORD)v21 & 0x1FF);
  }
  else
  {
    v18 = v17 + 1;
    v19 = &v14[v18 >> 9];
    v20 = (char *)*v19 + 8 * (v18 & 0x1FF);
  }
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,0>(v41, v9, v10, v14, (char *)v15, v19, v20);
  v22 = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_19EA1DD90);
  *(int64x2_t *)(a1 + 32) = v22;
  if (v22.i64[0] >= 0x400uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 512;
  }
}

const void ***std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,0>(const void ***result, const void **a2, char *a3, const void **a4, char *a5, const void **a6, char *a7)
{
  const void **v8;
  const void ***v12;
  _BYTE *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  const void **v20;
  char *v21;
  _BYTE *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;

  v8 = a6;
  v12 = result;
  if (a2 == a4)
  {
    if (a3 == a5)
      goto LABEL_42;
    v31 = (uint64_t)*a6;
    v32 = a5;
    while (1)
    {
      v33 = (uint64_t)&a7[-v31] >> 3;
      if ((v32 - a3) >> 3 < v33)
        v33 = (v32 - a3) >> 3;
      v32 -= 8 * v33;
      a7 -= 8 * v33;
      if (v33)
        result = (const void ***)memmove(a7, v32, 8 * v33);
      if (v32 == a3)
        break;
      v34 = (uint64_t)*--v8;
      v31 = v34;
      a7 = (char *)(v34 + 4096);
    }
    goto LABEL_40;
  }
  v14 = *a4;
  if (*a4 != a5)
  {
    v15 = (uint64_t)*a6;
    v16 = a5;
    while (1)
    {
      v17 = (uint64_t)&a7[-v15] >> 3;
      if ((v16 - v14) >> 3 < v17)
        v17 = (v16 - v14) >> 3;
      v16 -= 8 * v17;
      a7 -= 8 * v17;
      if (v17)
        result = (const void ***)memmove(a7, v16, 8 * v17);
      if (v16 == v14)
        break;
      v18 = (uint64_t)*--v8;
      v15 = v18;
      a7 = (char *)(v18 + 4096);
    }
    if ((char *)*v8 + 4096 == a7)
    {
      v19 = (char *)v8[1];
      ++v8;
      a7 = v19;
    }
  }
  v20 = a4 - 1;
  if (a4 - 1 != a2)
  {
    v21 = (char *)*v8;
    do
    {
      while (1)
      {
        v22 = *v20;
        v23 = (char *)*v20 + 4096;
        while (1)
        {
          v24 = (a7 - v21) >> 3;
          if ((v23 - v22) >> 3 < v24)
            v24 = (v23 - v22) >> 3;
          v23 -= 8 * v24;
          a7 -= 8 * v24;
          if (v24)
            result = (const void ***)memmove(a7, v23, 8 * v24);
          if (v23 == v22)
            break;
          v25 = (char *)*--v8;
          v21 = v25;
          a7 = v25 + 4096;
        }
        v21 = (char *)*v8;
        if ((char *)*v8 + 4096 == a7)
          break;
        if (--v20 == a2)
          goto LABEL_24;
      }
      v26 = (char *)v8[1];
      ++v8;
      v21 = v26;
      a7 = v26;
      --v20;
    }
    while (v20 != a2);
  }
LABEL_24:
  v27 = (char *)*a2 + 4096;
  if (v27 != a3)
  {
    v28 = (uint64_t)*v8;
    while (1)
    {
      v29 = (uint64_t)&a7[-v28] >> 3;
      if ((v27 - a3) >> 3 < v29)
        v29 = (v27 - a3) >> 3;
      v27 -= 8 * v29;
      a7 -= 8 * v29;
      if (v29)
        result = (const void ***)memmove(a7, v27, 8 * v29);
      if (v27 == a3)
        break;
      v30 = (uint64_t)*--v8;
      v28 = v30;
      a7 = (char *)(v30 + 4096);
    }
LABEL_40:
    if ((char *)*v8 + 4096 == a7)
    {
      v35 = (char *)v8[1];
      ++v8;
      a7 = v35;
    }
  }
LABEL_42:
  *v12 = a4;
  v12[1] = (const void **)a5;
  v12[2] = v8;
  v12[3] = (const void **)a7;
  return result;
}

const void **std::__for_each_segment[abi:ne180100]<std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<void *,void **,void *&,void ***,long,512l>,std::__deque_iterator<void *,void **,void *&,void ***,long,512l>>>(const void **result, _BYTE *__src, const void **a3, _BYTE *a4, uint64_t a5)
{
  _BYTE *v7;
  char *v8;
  void **v9;
  const void **v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  const void **i;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void **v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void **v32;
  _BYTE *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;

  v7 = __src;
  v9 = *(void ***)a5;
  v8 = *(char **)(a5 + 8);
  if (result != a3)
  {
    v11 = result;
    v12 = (char *)*result + 4096;
    if (v12 != __src)
    {
      v14 = (char *)*v9++;
      v13 = v14;
      while (1)
      {
        v15 = (v13 - v8 + 4096) >> 3;
        if ((v12 - v7) >> 3 >= v15)
          v16 = v15;
        else
          v16 = (v12 - v7) >> 3;
        if (v16)
          result = (const void **)memmove(v8, v7, 8 * v16);
        v7 += 8 * v16;
        if (v7 == v12)
          break;
        v17 = (char *)*v9++;
        v13 = v17;
        v8 = v17;
      }
      v8 += 8 * v16;
      if ((char *)*(v9 - 1) + 4096 == v8)
      {
        v8 = (char *)*v9;
        *(_QWORD *)a5 = v9;
        *(_QWORD *)(a5 + 8) = v8;
        i = v11 + 1;
        if (v11 + 1 != a3)
          goto LABEL_16;
LABEL_39:
        v33 = *a3;
        if (v33 == a4)
          goto LABEL_50;
        v35 = (char *)*v9++;
        v34 = v35;
        while (1)
        {
          v36 = (v34 - v8 + 4096) >> 3;
          v37 = (a4 - v33) >> 3 >= v36 ? v36 : (a4 - v33) >> 3;
          if (v37)
            result = (const void **)memmove(v8, v33, 8 * v37);
          v33 += 8 * v37;
          if (v33 == a4)
            break;
          v38 = (char *)*v9++;
          v34 = v38;
          v8 = v38;
        }
        v8 += 8 * v37;
        v32 = v9 - 1;
        if ((char *)*(v9 - 1) + 4096 != v8)
        {
LABEL_49:
          v9 = v32;
          goto LABEL_50;
        }
        goto LABEL_37;
      }
      --v9;
    }
    *(_QWORD *)a5 = v9;
    *(_QWORD *)(a5 + 8) = v8;
    for (i = v11 + 1; i != a3; ++i)
    {
LABEL_16:
      while (1)
      {
        v19 = 0;
        v20 = (char *)*i;
        v22 = (char *)*v9++;
        v21 = v22;
        while (1)
        {
          v23 = (v21 - v8 + 4096) >> 3;
          if ((4096 - 8 * v19) >> 3 >= v23)
            v24 = v23;
          else
            v24 = (4096 - 8 * v19) >> 3;
          if (v24)
            result = (const void **)memmove(v8, &v20[8 * v19], 8 * v24);
          v19 += v24;
          if (v19 == 512)
            break;
          v25 = (char *)*v9++;
          v21 = v25;
          v8 = v25;
        }
        v8 += 8 * v24;
        v26 = v9 - 1;
        if ((char *)*(v9 - 1) + 4096 != v8)
          break;
        v8 = (char *)*v9;
        *(_QWORD *)a5 = v9;
        *(_QWORD *)(a5 + 8) = v8;
        if (++i == a3)
          goto LABEL_39;
      }
      --v9;
      *(_QWORD *)a5 = v26;
      *(_QWORD *)(a5 + 8) = v8;
    }
    goto LABEL_39;
  }
  if (__src != a4)
  {
    v28 = (char *)*v9++;
    v27 = v28;
    while (1)
    {
      v29 = (v27 - v8 + 4096) >> 3;
      if ((a4 - v7) >> 3 >= v29)
        v30 = v29;
      else
        v30 = (a4 - v7) >> 3;
      if (v30)
        result = (const void **)memmove(v8, v7, 8 * v30);
      v7 += 8 * v30;
      if (v7 == a4)
        break;
      v31 = (char *)*v9++;
      v27 = v31;
      v8 = v31;
    }
    v8 += 8 * v30;
    v32 = v9 - 1;
    if ((char *)*(v9 - 1) + 4096 != v8)
      goto LABEL_49;
LABEL_37:
    v8 = (char *)*v9;
  }
LABEL_50:
  *(_QWORD *)a5 = v9;
  *(_QWORD *)(a5 + 8) = v8;
  return result;
}

void std::deque<void *>::insert(uint64_t a1, char *a2, uint64_t a3, char *a4)
{
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  void *v53;
  void *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  unint64_t v69;
  int64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  char *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  BOOL v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  void *v125;

  v6 = *(_QWORD *)(a1 + 32);
  v8 = *(char **)(a1 + 8);
  v7 = *(char **)(a1 + 16);
  v9 = &v8[8 * (v6 >> 9)];
  v10 = v7 - v8;
  if (v7 == v8)
  {
    v11 = 0;
    if (a3)
    {
LABEL_3:
      v12 = ((a3 - *(_QWORD *)a2) >> 3) + ((a2 - v9) << 6) - ((v11 - *(_QWORD *)v9) >> 3);
      v13 = *(_QWORD *)(a1 + 40);
      v14 = v13 - v12;
      if (v12 < v13 - v12)
        goto LABEL_4;
LABEL_11:
      v16 = (v10 << 6) - 1;
      if (v7 == v8)
        v16 = 0;
      if (v16 == v13 + v6)
      {
        std::deque<void *>::__add_back_capacity(a1);
        v13 = *(_QWORD *)(a1 + 40);
        v14 = v13 - v12;
      }
      if (v13 == v12)
      {
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + (((*(_QWORD *)(a1 + 32) + v12) >> 6) & 0x3FFFFFFFFFFFFF8))
                  + 8 * ((*(_QWORD *)(a1 + 32) + v12) & 0x1FF)) = *(_QWORD *)a4;
        *(_QWORD *)(a1 + 40) = v12 + 1;
        return;
      }
      v17 = *(_QWORD *)(a1 + 32) + v13;
      v18 = *(_QWORD *)(a1 + 8);
      v19 = (char *)(v18 + 8 * (v17 >> 9));
      v20 = *(_QWORD *)v19 + 8 * (v17 & 0x1FF);
      if (*(_QWORD *)(a1 + 16) == v18)
        v21 = 0;
      else
        v21 = (char *)v20;
      v22 = (uint64_t)&v21[-*(_QWORD *)v19];
      v23 = v22 >> 3;
      if (v22 < 9)
      {
        v27 = 512 - v23;
        v25 = &v19[-8 * (v27 >> 9)];
        v26 = (char *)(*(_QWORD *)v25 + 8 * (~(_WORD)v27 & 0x1FF));
      }
      else
      {
        v24 = v23 - 1;
        v25 = &v19[8 * (v24 >> 9)];
        v26 = (char *)(*(_QWORD *)v25 + 8 * (v24 & 0x1FF));
      }
      if (v26 == a4)
        a4 = v21;
      *(_QWORD *)v21 = *(_QWORD *)v26;
      *(_QWORD *)(a1 + 40) = v13 + 1;
      if (v14 < 2)
        goto LABEL_69;
      v28 = ((uint64_t)&v21[-*(_QWORD *)v19] >> 3) - v14;
      if (v28 < 1)
      {
        v29 = &v19[-8 * ((unint64_t)(511 - v28) >> 9)];
        v30 = *(_QWORD *)v29;
        v31 = *(_QWORD *)v29 + 8 * (~(511 - (_WORD)v28) & 0x1FF);
        if (v26 == (char *)v31)
          goto LABEL_69;
      }
      else
      {
        v29 = &v19[8 * ((unint64_t)v28 >> 9)];
        v30 = *(_QWORD *)v29;
        v31 = *(_QWORD *)v29 + 8 * (v28 & 0x1FF);
        if (v26 == (char *)v31)
          goto LABEL_69;
      }
      v35 = ((uint64_t)&v26[-*(_QWORD *)v25] >> 3) + ((v25 - v29) << 6) - ((v31 - v30) >> 3);
      if (v35 >= 1)
      {
        do
        {
          v37 = *(char **)v25;
          if (v26 == *(char **)v25)
          {
            v38 = (char *)*((_QWORD *)v25 - 1);
            v25 -= 8;
            v37 = v38;
            v26 = v38 + 4096;
          }
          v39 = v26 - 8;
          v40 = (v26 - v37) >> 3;
          if (v40 >= v35)
            v41 = v35;
          else
            v41 = (v26 - v37) >> 3;
          if (v40 <= v35)
            v42 = v37;
          else
            v42 = &v26[-8 * v35];
          if (a4 >= v26 || v42 > a4)
            goto LABEL_52;
          if (v39 == v21)
          {
            v44 = ((a4 - v37) >> 3) - 1;
            if (v44 >= 1)
              goto LABEL_51;
          }
          else
          {
            v43 = ~((v39 - v37) >> 3) + ((v19 - v25) << 6) + ((uint64_t)&v21[-*(_QWORD *)v19] >> 3);
            if (!v43)
              goto LABEL_52;
            v44 = v43 + ((a4 - v37) >> 3);
            if (v44 >= 1)
            {
LABEL_51:
              a4 = (char *)(*(_QWORD *)&v25[((unint64_t)v44 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v44 & 0x1FF));
LABEL_52:
              if (v42 != v26)
                goto LABEL_53;
              goto LABEL_62;
            }
          }
          a4 = (char *)(*(_QWORD *)&v25[-8 * ((unint64_t)(511 - v44) >> 9)] + 8 * (~(511 - (_WORD)v44) & 0x1FF));
          if (v42 != v26)
          {
LABEL_53:
            v45 = *(_QWORD *)v19;
            while (1)
            {
              v46 = (uint64_t)&v21[-v45] >> 3;
              if ((v26 - v42) >> 3 < v46)
                v46 = (v26 - v42) >> 3;
              v26 -= 8 * v46;
              v21 -= 8 * v46;
              if (v46)
                memmove(v21, v26, 8 * v46);
              if (v26 == v42)
                break;
              v47 = *((_QWORD *)v19 - 1);
              v19 -= 8;
              v45 = v47;
              v21 = (char *)(v47 + 4096);
            }
            if ((char *)(*(_QWORD *)v19 + 4096) == v21)
            {
              v48 = (char *)*((_QWORD *)v19 + 1);
              v19 += 8;
              v21 = v48;
            }
          }
LABEL_62:
          if (v41 == 1)
          {
            v26 = v39;
          }
          else
          {
            v49 = ((uint64_t)&v39[-*(_QWORD *)v25] >> 3) - (v41 - 1);
            if (v49 < 1)
            {
              v50 = 511 - v49;
              v25 -= 8 * (v50 >> 9);
              v26 = (char *)(*(_QWORD *)v25 + 8 * (~(_WORD)v50 & 0x1FF));
            }
            else
            {
              v25 += 8 * ((unint64_t)v49 >> 9);
              v26 = (char *)(*(_QWORD *)v25 + 8 * (v49 & 0x1FF));
            }
          }
          v36 = v35 <= v41;
          v35 -= v41;
        }
        while (!v36);
      }
LABEL_69:
      if (v21 == *(char **)v19)
        v21 = (char *)(*((_QWORD *)v19 - 1) + 4096);
      *((_QWORD *)v21 - 1) = *(_QWORD *)a4;
      return;
    }
  }
  else
  {
    v11 = *(_QWORD *)v9 + 8 * (*(_QWORD *)(a1 + 32) & 0x1FFLL);
    if (a3 != v11)
      goto LABEL_3;
  }
  v12 = 0;
  v13 = *(_QWORD *)(a1 + 40);
  v14 = v13;
  if (!v13)
    goto LABEL_11;
LABEL_4:
  if (!v6)
  {
    v15 = (v10 << 6) - 1;
    if (v7 == v8)
      v15 = 0;
    if (v15 - v13 >= 0x200)
    {
      *(_QWORD *)(a1 + 32) = 512;
      v125 = (void *)*((_QWORD *)v7 - 1);
      *(_QWORD *)(a1 + 16) = v7 - 8;
      std::__split_buffer<void **>::push_front((void **)a1, &v125);
      goto LABEL_114;
    }
    v32 = *(char **)(a1 + 24);
    v33 = *(char **)a1;
    v34 = (uint64_t)&v32[-*(_QWORD *)a1];
    if (v7 - v8 < (unint64_t)v34)
    {
      if (v8 == v33)
      {
        v125 = operator new(0x1000uLL);
        std::__split_buffer<void **>::push_back((char **)a1, &v125);
        v82 = *(_QWORD *)(a1 + 16);
        v125 = *(void **)(v82 - 8);
        *(_QWORD *)(a1 + 16) = v82 - 8;
        std::__split_buffer<void **>::push_front((void **)a1, &v125);
        if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
          goto LABEL_32;
      }
      else
      {
        v125 = operator new(0x1000uLL);
        std::__split_buffer<void **>::push_front((void **)a1, &v125);
        if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
        {
LABEL_32:
          *(_QWORD *)(a1 + 32) = 256;
          goto LABEL_114;
        }
      }
      *(_QWORD *)(a1 + 32) += 512;
      goto LABEL_114;
    }
    if (v32 == v33)
      v51 = 1;
    else
      v51 = v34 >> 2;
    if (v51 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v52 = (char *)operator new(8 * v51);
    v53 = operator new(0x1000uLL);
    v54 = v53;
    if (v51)
    {
      v55 = &v52[8 * v51];
      *(_QWORD *)v52 = v53;
      v56 = v52 + 8;
      if (v8 != v7)
      {
LABEL_78:
        v57 = v52;
        while (1)
        {
          if (v56 == v55)
          {
            if (v57 <= v52)
            {
              if (v56 == v52)
                v66 = 1;
              else
                v66 = (v56 - v52) >> 2;
              if (v66 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v67 = (char *)operator new(8 * v66);
              v68 = v67;
              v69 = v66 >> 2;
              v58 = &v67[8 * (v66 >> 2)];
              v70 = v56 - v57;
              v115 = v56 == v57;
              v56 = v58;
              if (!v115)
              {
                v56 = &v58[v70 & 0xFFFFFFFFFFFFFFF8];
                v71 = v70 - 8;
                if (v71 < 0x38 || (v72 = 8 * v69, (unint64_t)(&v67[8 * v69] - v57) < 0x20))
                {
                  v73 = &v67[8 * (v66 >> 2)];
                  v74 = v57;
                  goto LABEL_97;
                }
                v76 = (v71 >> 3) + 1;
                v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
                v73 = &v58[v77];
                v74 = &v57[v77];
                v78 = (__int128 *)(v57 + 16);
                v79 = &v67[v72 + 16];
                v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v81 = *v78;
                  *((_OWORD *)v79 - 1) = *(v78 - 1);
                  *(_OWORD *)v79 = v81;
                  v78 += 2;
                  v79 += 32;
                  v80 -= 4;
                }
                while (v80);
                if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_97:
                    v75 = *(_QWORD *)v74;
                    v74 += 8;
                    *(_QWORD *)v73 = v75;
                    v73 += 8;
                  }
                  while (v73 != v56);
                }
              }
              v55 = &v67[8 * v66];
              if (v52)
                operator delete(v52);
              v52 = v68;
              goto LABEL_80;
            }
            v60 = (v57 - v52) >> 3;
            if (v60 >= -1)
              v61 = v60 + 1;
            else
              v61 = v60 + 2;
            v62 = v61 >> 1;
            v63 = &v57[-8 * (v61 >> 1)];
            v64 = v56;
            if (v56 != v57)
            {
              memmove(v63, v57, v56 - v57);
              v64 = v57;
            }
            v65 = -v62;
            v55 = v56;
            v56 = &v63[v56 - v57];
            v58 = &v64[8 * v65];
          }
          else
          {
            v58 = v57;
          }
LABEL_80:
          v59 = *(_QWORD *)v8;
          v8 += 8;
          *(_QWORD *)v56 = v59;
          v56 += 8;
          v57 = v58;
          if (v8 == *(char **)(a1 + 16))
            goto LABEL_109;
        }
      }
    }
    else
    {
      v83 = (char *)operator new(8uLL);
      v55 = v83 + 8;
      operator delete(v52);
      v8 = *(char **)(a1 + 8);
      v84 = *(char **)(a1 + 16);
      v52 = v83;
      *(_QWORD *)v83 = v54;
      v56 = v83 + 8;
      if (v8 != v84)
        goto LABEL_78;
    }
    v58 = v52;
LABEL_109:
    v85 = *(char **)a1;
    *(_QWORD *)a1 = v52;
    *(_QWORD *)(a1 + 8) = v58;
    *(_QWORD *)(a1 + 16) = v56;
    *(_QWORD *)(a1 + 24) = v55;
    if (v56 - v58 == 8)
      v86 = 256;
    else
      v86 = *(_QWORD *)(a1 + 32) + 512;
    *(_QWORD *)(a1 + 32) = v86;
    if (v85)
      operator delete(v85);
  }
LABEL_114:
  v87 = *(_QWORD *)(a1 + 32);
  v88 = *(_QWORD *)(a1 + 8);
  v89 = *(_QWORD *)(a1 + 16);
  v90 = (char *)(v88 + 8 * (v87 >> 9));
  v91 = *(char **)v90;
  if (v12)
  {
    if (v89 == v88)
      v92 = 0;
    else
      v92 = (char *)(*(_QWORD *)v90 + 8 * (*(_QWORD *)(a1 + 32) & 0x1FFLL));
    v93 = v92 - v91;
    v94 = (v92 - v91) >> 3;
    if (v93 < 9)
      v95 = (char *)(*(_QWORD *)&v90[-8 * ((unint64_t)(512 - v94) >> 9)] + 8 * (~(512 - (_WORD)v94) & 0x1FF));
    else
      v95 = (char *)(*(_QWORD *)&v90[((unint64_t)(v94 - 1) >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * ((v94 - 1) & 0x1FF));
    if (v92 == a4)
      a4 = v95;
    *(_QWORD *)v95 = *(_QWORD *)v92;
    v98 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 32) = v87 - 1;
    *(_QWORD *)(a1 + 40) = v98;
    if (v12 < 2)
      goto LABEL_137;
    v99 = (uint64_t)&v92[-*(_QWORD *)v90];
    v100 = v99 >> 3;
    if (v99 < -7)
    {
      v101 = &v90[-8 * ((unint64_t)(510 - v100) >> 9)];
      v102 = *(_QWORD *)v101;
      v103 = *(_QWORD *)v101 + 8 * (~(510 - (_WORD)v100) & 0x1FF);
      v104 = v100 + v12;
      if ((uint64_t)(v100 + v12) < 1)
      {
LABEL_132:
        v105 = &v90[-8 * ((511 - v104) >> 9)];
        v106 = *(_QWORD *)v105;
        v107 = *(_QWORD *)v105 + 8 * (~(511 - (_WORD)v104) & 0x1FF);
        if (v107 == v103)
          goto LABEL_137;
LABEL_136:
        v108 = ((v107 - v106) >> 3) + ((v105 - v101) << 6) - ((uint64_t)(v103 - v102) >> 3);
        if (v108 < 1)
          goto LABEL_137;
        while (1)
        {
          v110 = *(_QWORD *)v101;
          v111 = *(_QWORD *)v101 + 4096;
          v112 = (uint64_t)(v111 - v103) >> 3;
          if (v112 >= v108)
            v113 = v108;
          else
            v113 = (uint64_t)(v111 - v103) >> 3;
          if (v112 <= v108)
            v114 = *(_QWORD *)v101 + 4096;
          else
            v114 = v103 + 8 * v108;
          if (v103 > (unint64_t)a4)
            goto LABEL_154;
          v115 = (unint64_t)a4 >= v114 || v103 == (_QWORD)v92;
          if (v115)
            goto LABEL_154;
          v116 = ((uint64_t)&v92[-*(_QWORD *)v90] >> 3) - (((uint64_t)(v103 - v110) >> 3) + ((v101 - v90) << 6));
          if (!v116)
            goto LABEL_154;
          v117 = v116 + ((uint64_t)&a4[-v110] >> 3);
          if (v117 >= 1)
            break;
          a4 = (char *)(*(_QWORD *)&v101[-8 * ((unint64_t)(511 - v117) >> 9)]
                      + 8 * (~(511 - (_WORD)v117) & 0x1FF));
          if (v103 != v114)
          {
LABEL_155:
            v119 = *(char **)v90;
            v90 += 8;
            v118 = v119;
            v120 = (char *)v103;
            while (1)
            {
              v121 = (v118 - v92 + 4096) >> 3;
              if ((uint64_t)(v114 - (_QWORD)v120) >> 3 >= v121)
                v122 = v121;
              else
                v122 = (uint64_t)(v114 - (_QWORD)v120) >> 3;
              if (v122)
                memmove(v92, v120, 8 * v122);
              v120 += 8 * v122;
              if (v120 == (char *)v114)
                break;
              v123 = *(char **)v90;
              v90 += 8;
              v118 = v123;
              v92 = v123;
            }
            v92 += 8 * v122;
            if ((char *)(*((_QWORD *)v90 - 1) + 4096) == v92)
              v92 = *(char **)v90;
            else
              v90 -= 8;
          }
LABEL_166:
          if (v113)
          {
            v124 = v113 + ((uint64_t)(v103 - *(_QWORD *)v101) >> 3);
            if (v124 < 1)
            {
              v109 = 511 - v124;
              v101 -= 8 * (v109 >> 9);
              v103 = *(_QWORD *)v101 + 8 * (~(_WORD)v109 & 0x1FF);
            }
            else
            {
              v101 += 8 * ((unint64_t)v124 >> 9);
              v103 = *(_QWORD *)v101 + 8 * (v124 & 0x1FF);
            }
          }
          v36 = v108 <= v113;
          v108 -= v113;
          if (v36)
            goto LABEL_137;
        }
        a4 = (char *)(*(_QWORD *)&v101[((unint64_t)v117 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v117 & 0x1FF));
LABEL_154:
        if (v103 != v114)
          goto LABEL_155;
        goto LABEL_166;
      }
    }
    else
    {
      v101 = &v90[8 * ((unint64_t)(v100 + 1) >> 9)];
      v102 = *(_QWORD *)v101;
      v103 = *(_QWORD *)v101 + 8 * ((v100 + 1) & 0x1FF);
      v104 = v100 + v12;
      if ((uint64_t)(v100 + v12) < 1)
        goto LABEL_132;
    }
    v105 = &v90[8 * (v104 >> 9)];
    v106 = *(_QWORD *)v105;
    v107 = *(_QWORD *)v105 + 8 * (v104 & 0x1FF);
    if (v107 == v103)
    {
LABEL_137:
      *(_QWORD *)v92 = *(_QWORD *)a4;
      return;
    }
    goto LABEL_136;
  }
  if (v89 == v88)
    v96 = 0;
  else
    v96 = *(_QWORD *)v90 + 8 * (*(_QWORD *)(a1 + 32) & 0x1FFLL);
  if ((char *)v96 == v91)
    v96 = *((_QWORD *)v90 - 1) + 4096;
  *(_QWORD *)(v96 - 8) = *(_QWORD *)a4;
  v97 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 32) = v87 - 1;
  *(_QWORD *)(a1 + 40) = v97;
}

void sub_19E9F8D84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

const char *asString(int a1)
{
  if ((a1 - 1) > 9)
    return "qmux";
  else
    return off_1E4153F10[a1 - 1];
}

uint64_t getMessageIdFromBuffer(unsigned __int16 *a1, unint64_t a2)
{
  if (a2 < 2)
    return 0;
  else
    return *a1;
}

uint64_t QMux::State::State(uint64_t a1, __int128 *a2, int a3, _QWORD *a4, int a5, char a6)
{
  _QWORD *v6;
  int v7;
  size_t v8;
  unint64_t v9;
  std::string::value_type *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  const std::string::value_type *v19;
  std::string *v20;
  __int128 v21;
  void **v22;
  NSObject *v23;
  NSObject *v24;
  std::string *v25;
  __int128 v26;
  _QWORD *Instance;
  _QWORD *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  const char *v32;
  capabilities::radio *v33;
  capabilities::radio *v34;
  ATCSTimerDriver *v35;
  std::string v38;
  void *__p[2];
  int64_t v40;

  *(_QWORD *)a1 = off_1E4153A58;
  v6 = (_QWORD *)(a1 + 8);
  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = *((_QWORD *)a2 + 1);
  v9 = v8 + 17;
  memset(&v38, 170, sizeof(v38));
  if (v8 + 17 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v9 >= 0x17)
  {
    v16 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v16 = v9 | 7;
    v17 = v16 + 1;
    v18 = (char *)operator new(v16 + 1);
    v38.__r_.__value_.__l.__size_ = v8 + 17;
    v38.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    v38.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    v18[16] = 39;
    *(_OWORD *)v18 = *(_OWORD *)"ATCS.QMux.queue('";
    v15 = v18 + 17;
  }
  else
  {
    v38.__r_.__value_.__r.__words[2] = 39;
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = *(_OWORD *)"ATCS.QMux.queue('";
    v15 = &v38.__r_.__value_.__s.__data_[17];
    if (!v8)
      goto LABEL_15;
  }
  if (v7 >= 0)
    v19 = (const std::string::value_type *)a2;
  else
    v19 = *(const std::string::value_type **)a2;
  memmove(v15, v19, v8);
LABEL_15:
  v15[v8] = 0;
  v20 = std::string::append(&v38, "')", 2uLL);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v40 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (v40 >= 0)
    v22 = __p;
  else
    v22 = (void **)__p[0];
  v23 = dispatch_queue_create((const char *)v22, 0);
  *v6 = 0;
  v6[1] = 0;
  *(_QWORD *)(a1 + 24) = v23;
  if (v23)
  {
    v24 = v23;
    dispatch_retain(v23);
    *(_QWORD *)(a1 + 32) = 0;
    dispatch_release(v24);
    if ((SHIBYTE(v40) & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
  *(_QWORD *)(a1 + 32) = 0;
  if (SHIBYTE(v40) < 0)
LABEL_20:
    operator delete(__p[0]);
LABEL_21:
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v38.__r_.__value_.__l.__data_);
    *(_QWORD *)a1 = off_1E41538E8;
    v25 = (std::string *)(a1 + 40);
    if ((*((char *)a2 + 23) & 0x80000000) == 0)
      goto LABEL_23;
  }
  else
  {
    *(_QWORD *)a1 = off_1E41538E8;
    v25 = (std::string *)(a1 + 40);
    if ((*((char *)a2 + 23) & 0x80000000) == 0)
    {
LABEL_23:
      v26 = *a2;
      v25->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v26;
      goto LABEL_28;
    }
  }
  std::string::__init_copy_ctor_external(v25, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
LABEL_28:
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  Instance = ATCSLogger::getInstance((ATCSLogger *)v23);
  *(_QWORD *)(a1 + 80) = Instance;
  v28 = operator new(0x20uLL);
  *v28 = off_1E4153B60;
  v28[1] = 0;
  v28[2] = 0;
  v28[3] = Instance;
  *(_QWORD *)(a1 + 88) = v28;
  *(_QWORD *)(a1 + 96) = *a4;
  v29 = a4[1];
  *(_QWORD *)(a1 + 104) = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 16);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 112) = a1 + 120;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = a5;
  *(_QWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)(a1 + 288) = a1 + 296;
  *(_WORD *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 314) = a6;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  if ((a3 - 1) > 9)
    v32 = "qmux";
  else
    v32 = off_1E4153F10[a3 - 1];
  v33 = (capabilities::radio *)ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 352), "com.apple.telephony.bb", v32);
  v34 = (capabilities::radio *)capabilities::radio::supportsQMuxSendWindow(v33);
  *(_BYTE *)(a1 + 360) = (_BYTE)v34;
  *(_DWORD *)(a1 + 364) = capabilities::radio::QMuxPendingRequestLimitCount(v34);
  *(_QWORD *)(a1 + 368) = 0;
  ATCSTimer::timerBootstrap(0, v35);
  return a1;
}

void sub_19E9F9140()
{
  __break(1u);
}

void sub_19E9F9164()
{
  __cxa_end_catch();
  JUMPOUT(0x19E9F926CLL);
}

void sub_19E9F9174()
{
  JUMPOUT(0x19E9F926CLL);
}

void sub_19E9F917C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19E9F928CLL);
}

void ctu::TrackedGroup::~TrackedGroup(ctu::TrackedGroup *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *((_QWORD *)this + 2);
    v4 = (void *)*((_QWORD *)this + 1);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
          std::__shared_weak_count::__release_weak(v5);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v2;
    operator delete(v4);
  }
  if (*(_QWORD *)this)
    dispatch_release(*(dispatch_object_t *)this);
}

void QMux::State::~State(QMux::State *this)
{
  uint64_t v2;
  void **v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  NSObject *v33;
  NSObject *v34;
  std::__shared_weak_count *v35;
  _QWORD v36[2];
  uint64_t v37;
  _QWORD block[6];

  *(_QWORD *)this = off_1E41538E8;
  v2 = *((_QWORD *)this + 10);
  v3 = (void **)((char *)this + 40);
  v4 = (char *)this + 40;
  if (*((char *)this + 63) < 0)
    v4 = (const char *)*v3;
  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v2 + 24))(v2, 6, "[%s] Destroying QMux\n", v4);
  if (*((_QWORD *)this + 23))
  {
    v9 = (char *)this + 40;
    if (*((char *)this + 63) < 0)
      v9 = (const char *)*v3;
    (*(void (**)(_QWORD, uint64_t, const char *, ...))(**((_QWORD **)this + 10) + 24))(*((_QWORD *)this + 10), 6, "[%s] Warning! QMux destroyed while still attached to IPCDriver; attempting detach\n",
      v9);
    v36[1] = this;
    v37 = 0;
    v36[0] = &v37;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS2_18setDriverAndCookieEP13ATCSIPCDriverPvE3__1EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    block[3] = &__block_descriptor_tmp_138;
    block[4] = (char *)this + 8;
    block[5] = v36;
    v10 = *((_QWORD *)this + 3);
    if (*((_QWORD *)this + 4))
    {
      dispatch_async_and_wait(v10, block);
      v12 = v37;
      if (!v37)
      {
LABEL_11:
        if (*((_QWORD *)this + 23))
          _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x142, "fDriver==NULL", "is not", "true", "QMux destroyed while still attached to IPCDriver", v11);
        goto LABEL_13;
      }
    }
    else
    {
      dispatch_sync(v10, block);
      v12 = v37;
      if (!v37)
        goto LABEL_11;
    }
    (*(void (**)(uint64_t, QMux::State *, char *))(*(_QWORD *)v12 + 48))(v12, this, (char *)this + 192);
    goto LABEL_11;
  }
LABEL_13:
  QMux::State::setMainState((uint64_t)this, 5, v5, v6, v7, v8);
  QMux::State::tearDown_sync(this);
  MEMORY[0x1A1AEAED4]((char *)this + 352);
  v13 = (void *)*((_QWORD *)this + 40);
  if (v13)
  {
    *((_QWORD *)this + 41) = v13;
    operator delete(v13);
  }
  std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(*((_QWORD **)this + 37));
  v14 = *((_QWORD *)this + 35);
  if (v14)
    dispatch_release(v14);
  v15 = *((_QWORD *)this + 32);
  if (v15)
  {
    v16 = *((_QWORD *)this + 33);
    v17 = (void *)*((_QWORD *)this + 32);
    if (v16 != v15)
    {
      do
      {
        v18 = *(std::__shared_weak_count **)(v16 - 8);
        if (v18)
          std::__shared_weak_count::__release_weak(v18);
        v16 -= 16;
      }
      while (v16 != v15);
      v17 = (void *)*((_QWORD *)this + 32);
    }
    *((_QWORD *)this + 33) = v15;
    operator delete(v17);
  }
  v19 = *((_QWORD *)this + 31);
  if (v19)
    dispatch_release(v19);
  v20 = *((_QWORD *)this + 30);
  if (v20)
  {
    dispatch_group_leave(v20);
    v21 = *((_QWORD *)this + 30);
    if (v21)
      dispatch_release(v21);
  }
  v22 = *((_QWORD *)this + 29);
  if (v22)
  {
    dispatch_group_leave(v22);
    v23 = *((_QWORD *)this + 29);
    if (v23)
      dispatch_release(v23);
  }
  v24 = *((_QWORD *)this + 28);
  if (v24)
  {
    dispatch_group_leave(v24);
    v25 = *((_QWORD *)this + 28);
    if (v25)
      dispatch_release(v25);
  }
  std::deque<QMuxQueueItem>::~deque[abi:ne180100]((uint64_t)this + 136);
  std::__tree<std::__value_type<std::pair<qmi::ServiceType const,unsigned char const>,std::weak_ptr<qmi::QMuxClientIface>>,std::__map_value_compare<std::pair<qmi::ServiceType const,unsigned char const>,std::__value_type<std::pair<qmi::ServiceType const,unsigned char const>,std::weak_ptr<qmi::QMuxClientIface>>,std::less<std::pair<qmi::ServiceType const,unsigned char const>>,true>,std::allocator<std::__value_type<std::pair<qmi::ServiceType const,unsigned char const>,std::weak_ptr<qmi::QMuxClientIface>>>>::destroy(*((_QWORD **)this + 15));
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  v27 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (!v30)
    goto LABEL_47;
  v31 = (unint64_t *)&v30->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (v32)
  {
LABEL_47:
    if ((*((char *)this + 63) & 0x80000000) == 0)
      goto LABEL_49;
    goto LABEL_48;
  }
  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
  std::__shared_weak_count::__release_weak(v30);
  if (*((char *)this + 63) < 0)
LABEL_48:
    operator delete(*v3);
LABEL_49:
  v33 = *((_QWORD *)this + 4);
  if (v33)
    dispatch_release(v33);
  v34 = *((_QWORD *)this + 3);
  if (v34)
    dispatch_release(v34);
  v35 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v35)
    std::__shared_weak_count::__release_weak(v35);
}

{
  void *v1;

  QMux::State::~State(this);
  operator delete(v1);
}

void QMux::State::setDriverAndCookie(QMux::State *this, ATCSIPCDriver *a2, void *a3)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  QMux::State *v8;
  ATCSIPCDriver **v9;
  void **v10;
  void *v11;
  ATCSIPCDriver *v12;
  uint64_t block;
  uint64_t v14;
  void *v15;
  void *v16;
  char *v17;
  QMux::State **v18;

  v11 = a3;
  v12 = a2;
  if (!a2)
  {
    v7 = 0;
    v8 = (QMux::State *)&v7;
    v9 = (ATCSIPCDriver **)this;
    block = MEMORY[0x1E0C809B0];
    v14 = 0x40000000;
    v15 = ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS2_18setDriverAndCookieEP13ATCSIPCDriverPvE3__1EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    v16 = &__block_descriptor_tmp_138;
    v17 = (char *)this + 8;
    v18 = &v8;
    v5 = *((_QWORD *)this + 3);
    if (*((_QWORD *)this + 4))
    {
      dispatch_async_and_wait(v5, &block);
      v6 = v7;
      if (!v7)
        return;
    }
    else
    {
      dispatch_sync(v5, &block);
      v6 = v7;
      if (!v7)
        return;
    }
    (*(void (**)(uint64_t, QMux::State *, char *))(*(_QWORD *)v6 + 48))(v6, this, (char *)this + 192);
    return;
  }
  v8 = this;
  v9 = &v12;
  v10 = &v11;
  block = MEMORY[0x1E0C809B0];
  v14 = 0x40000000;
  v15 = ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS2_18setDriverAndCookieEP13ATCSIPCDriverPvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
  v16 = &__block_descriptor_tmp_137;
  v17 = (char *)this + 8;
  v18 = &v8;
  v4 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 4))
    dispatch_async_and_wait(v4, &block);
  else
    dispatch_sync(v4, &block);
}

void QMux::State::setMainState(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  int v6;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t i;
  std::__shared_weak_count *v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t j;
  std::__shared_weak_count *v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  uint64_t k;
  std::__shared_weak_count *v32;
  NSObject *v33;
  NSObject *v34;
  NSObject *v35;
  NSObject *v36;
  NSObject *v37;

  v6 = *(_DWORD *)(a1 + 216);
  if (v6 != 5)
  {
    if (v6 == a2)
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x241, "fMainState", "!=", "state", a6);
    *(_DWORD *)(a1 + 216) = a2;
    if ((a2 - 1) > 4)
      v9 = "kStopped";
    else
      v9 = off_1E4153EE8[a2 - 1];
    (*(void (**)(_QWORD, uint64_t, const char *, ...))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), 6, "Setting state to %s", v9);
    switch(*(_DWORD *)(a1 + 216))
    {
      case 0:
        v16 = *(NSObject **)(a1 + 224);
        *(_QWORD *)(a1 + 224) = 0;
        if (v16)
        {
          dispatch_group_leave(v16);
          dispatch_release(v16);
        }
        v17 = *(NSObject **)(a1 + 232);
        *(_QWORD *)(a1 + 232) = 0;
        if (v17)
        {
          dispatch_group_leave(v17);
          dispatch_release(v17);
        }
        v18 = *(NSObject **)(a1 + 248);
        *(_QWORD *)(a1 + 248) = 0;
        if (v18)
          dispatch_release(v18);
        v19 = *(_QWORD *)(a1 + 256);
        for (i = *(_QWORD *)(a1 + 264); i != v19; i -= 16)
        {
          v21 = *(std::__shared_weak_count **)(i - 8);
          if (v21)
            std::__shared_weak_count::__release_weak(v21);
        }
        goto LABEL_44;
      case 3:
        if (*(_QWORD *)(a1 + 224))
          QMux::State::powerDown_sync((QMux::State *)a1, v10, v11, v12, v13, v14, v15);
        return;
      case 4:
        v22 = *(NSObject **)(a1 + 224);
        *(_QWORD *)(a1 + 224) = 0;
        if (v22)
        {
          dispatch_group_leave(v22);
          dispatch_release(v22);
        }
        v23 = *(NSObject **)(a1 + 232);
        *(_QWORD *)(a1 + 232) = 0;
        if (v23)
        {
          dispatch_group_leave(v23);
          dispatch_release(v23);
        }
        v24 = *(NSObject **)(a1 + 248);
        *(_QWORD *)(a1 + 248) = 0;
        if (v24)
          dispatch_release(v24);
        v25 = *(_QWORD *)(a1 + 256);
        for (j = *(_QWORD *)(a1 + 264); j != v25; j -= 16)
        {
          v27 = *(std::__shared_weak_count **)(j - 8);
          if (v27)
            std::__shared_weak_count::__release_weak(v27);
        }
        *(_QWORD *)(a1 + 264) = v25;
        v37 = *(NSObject **)(a1 + 280);
        if (v37)
        {
          dispatch_source_cancel(v37);
          v36 = *(NSObject **)(a1 + 280);
          *(_QWORD *)(a1 + 280) = 0;
          if (v36)
            goto LABEL_49;
        }
        return;
      case 5:
        v28 = *(NSObject **)(a1 + 224);
        *(_QWORD *)(a1 + 224) = 0;
        if (v28)
        {
          dispatch_group_leave(v28);
          dispatch_release(v28);
        }
        v29 = *(NSObject **)(a1 + 232);
        *(_QWORD *)(a1 + 232) = 0;
        if (v29)
        {
          dispatch_group_leave(v29);
          dispatch_release(v29);
        }
        v30 = *(NSObject **)(a1 + 248);
        *(_QWORD *)(a1 + 248) = 0;
        if (v30)
          dispatch_release(v30);
        v19 = *(_QWORD *)(a1 + 256);
        for (k = *(_QWORD *)(a1 + 264); k != v19; k -= 16)
        {
          v32 = *(std::__shared_weak_count **)(k - 8);
          if (v32)
            std::__shared_weak_count::__release_weak(v32);
        }
LABEL_44:
        *(_QWORD *)(a1 + 264) = v19;
        v33 = *(NSObject **)(a1 + 280);
        if (v33)
        {
          dispatch_source_cancel(v33);
          v34 = *(NSObject **)(a1 + 280);
          *(_QWORD *)(a1 + 280) = 0;
          if (v34)
            dispatch_release(v34);
        }
        v35 = *(NSObject **)(a1 + 240);
        *(_QWORD *)(a1 + 240) = 0;
        if (!v35)
          return;
        dispatch_group_leave(v35);
        v36 = v35;
LABEL_49:
        dispatch_release(v36);
        break;
      default:
        return;
    }
  }
}

void QMux::State::tearDown_sync(QMux::State *this)
{
  char *v2;
  char *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  _BYTE *v7;
  const char *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  char *v12;
  BOOL v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _BYTE *v19;
  std::__shared_weak_count *v20;

  QMux::State::clearQueues_sync(this);
  *((_WORD *)this + 156) = 0;
  atomic_store(0, (unsigned int *)this + 93);
  atomic_store(0, (unsigned int *)this + 92);
  v2 = (char *)*((_QWORD *)this + 14);
  v3 = (char *)this + 120;
  if (v2 != (char *)this + 120)
  {
    do
    {
      v4 = (std::__shared_weak_count *)*((_QWORD *)v2 + 6);
      if (!v4)
        goto LABEL_13;
      v5 = std::__shared_weak_count::lock(v4);
      v20 = v5;
      if (!v5)
        goto LABEL_13;
      v6 = v5;
      v7 = (_BYTE *)*((_QWORD *)v2 + 5);
      v19 = v7;
      if (v7)
      {
        v8 = (char *)this + 40;
        if (*((char *)this + 63) < 0)
          v8 = (const char *)*((_QWORD *)this + 5);
        (*(void (**)(_QWORD, uint64_t, const char *, ...))(**((_QWORD **)this + 10) + 24))(*((_QWORD *)this + 10), 6, "[%s] Sending control indication to QMIClient(svcType=%d,clientId=%d) on sync\n", v8, v2[32], v2[33]);
        (*(void (**)(_BYTE *))(*(_QWORD *)v7 + 48))(v7);
        v7[33] = -1;
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        v11 = (char *)*((_QWORD *)v2 + 1);
        if (!v11)
        {
          do
          {
LABEL_17:
            v12 = (char *)*((_QWORD *)v2 + 2);
            v13 = *(_QWORD *)v12 == (_QWORD)v2;
            v2 = v12;
          }
          while (!v13);
          goto LABEL_3;
        }
      }
      else
      {
LABEL_13:
        v11 = (char *)*((_QWORD *)v2 + 1);
        if (!v11)
          goto LABEL_17;
      }
      do
      {
        v12 = v11;
        v11 = *(char **)v11;
      }
      while (v11);
LABEL_3:
      v2 = v12;
    }
    while (v12 != v3);
  }
  std::__tree<std::__value_type<std::pair<qmi::ServiceType const,unsigned char const>,std::weak_ptr<qmi::QMuxClientIface>>,std::__map_value_compare<std::pair<qmi::ServiceType const,unsigned char const>,std::__value_type<std::pair<qmi::ServiceType const,unsigned char const>,std::weak_ptr<qmi::QMuxClientIface>>,std::less<std::pair<qmi::ServiceType const,unsigned char const>>,true>,std::allocator<std::__value_type<std::pair<qmi::ServiceType const,unsigned char const>,std::weak_ptr<qmi::QMuxClientIface>>>>::destroy(*((_QWORD **)this + 15));
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 14) = v3;
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  v19 = (_BYTE *)*((_QWORD *)this + 8);
  v20 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  QMux::State::notifyClientAdded_sync((uint64_t)this, &v19, 0);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_19E9F9BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E9F9BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void QMux::State::create(__int128 *a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, int a4@<W3>, char a5@<W4>, _QWORD *a6@<X8>)
{
  void *v12;
  void *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  _QWORD *v36;
  unint64_t *v37;
  NSObject *v38;
  unint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD v42[2];

  *a6 = 0xAAAAAAAAAAAAAAAALL;
  a6[1] = 0xAAAAAAAAAAAAAAAALL;
  v12 = operator new(0x178uLL);
  v13 = v12;
  v14 = *a3;
  v15 = (std::__shared_weak_count *)a3[1];
  v42[0] = v14;
  v42[1] = v15;
  if (v15)
  {
    p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
  }
  QMux::State::State((uint64_t)v12, a1, a2, v42, a4, a5);
  *a6 = v13;
  v18 = (std::__shared_weak_count *)operator new(0x20uLL);
  v18->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  v18->__vftable = (std::__shared_weak_count_vtbl *)off_1E4153BB0;
  v18->__shared_weak_owners_ = 0;
  v18[1].__vftable = (std::__shared_weak_count_vtbl *)v13;
  a6[1] = v18;
  v20 = (std::__shared_weak_count *)*((_QWORD *)v13 + 2);
  if (v20)
  {
    if (v20->__shared_owners_ != -1)
      goto LABEL_17;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
    v22 = (unint64_t *)&v18->__shared_weak_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    *((_QWORD *)v13 + 1) = v13;
    *((_QWORD *)v13 + 2) = v18;
    std::__shared_weak_count::__release_weak(v20);
  }
  else
  {
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
    v25 = (unint64_t *)&v18->__shared_weak_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
    *((_QWORD *)v13 + 1) = v13;
    *((_QWORD *)v13 + 2) = v18;
  }
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_17:
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  v29 = (_QWORD *)*a6;
  v28 = a6[1];
  if (v28)
  {
    v30 = (unint64_t *)(v28 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = (std::__shared_weak_count *)v29[2];
  if (!v32 || (v33 = v29[1], (v34 = std::__shared_weak_count::lock(v32)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v35 = v34;
  v36 = operator new(0x10uLL);
  *v36 = v29;
  v36[1] = v28;
  v37 = (unint64_t *)&v35->__shared_owners_;
  v38 = v29[3];
  do
    v39 = __ldxr(v37);
  while (__stxr(v39 + 1, v37));
  v40 = operator new(0x18uLL);
  *v40 = v36;
  v40[1] = v33;
  v40[2] = v35;
  dispatch_async_f(v38, v40, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::State::create(std::string const&,QMux::Name,std::weak_ptr<ATCSResetInvoker>,qmi::LogLevel,BOOL)::$_0>(QMux::State::create(std::string const&,QMux::Name,std::weak_ptr<ATCSResetInvoker>,qmi::LogLevel,BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::State::create(std::string const&,QMux::Name,std::weak_ptr<ATCSResetInvoker>,qmi::LogLevel,BOOL)::$_0,std::default_delete<QMux::State::create(std::string const&,QMux::Name,std::weak_ptr<ATCSResetInvoker>,qmi::LogLevel,BOOL)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v41 = __ldaxr(v37);
  while (__stlxr(v41 - 1, v37));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
}

void sub_19E9F9E58()
{
  __break(1u);
}

void sub_19E9F9E80(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  __cxa_end_catch();
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void QMux::State::init_sync(QMux::State *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  QMIControl *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  QMIControl *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  QMIControl *v29[2];

  v3 = *((_QWORD *)this + 1);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v2 || (v4 = std::__shared_weak_count::lock(v2), (v26 = v4) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  v27 = 0;
  v28 = std::__shared_weak_count::lock(v4);
  if (v28)
    v27 = v3;
  v29[0] = (QMIControl *)0xAAAAAAAAAAAAAAAALL;
  v29[1] = (QMIControl *)0xAAAAAAAAAAAAAAAALL;
  v8 = (QMIControl *)operator new(0xE0uLL);
  QMIControl::QMIControl(v8, (const QMux *)&v27);
  std::shared_ptr<QMIControl>::shared_ptr[abi:ne180100]<QMIControl,QMIControl::Deleter,void>(v29, (uint64_t)v8);
  QMIControl::init_sync(v29[0], (const QMux *)&v27);
  v9 = *(_OWORD *)v29;
  v29[0] = 0;
  v29[1] = 0;
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  *((_OWORD *)this + 4) = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)v29[1];
  if (v29[1])
  {
    v14 = (unint64_t *)((char *)v29[1] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v28;
  if (v28)
  {
    v17 = (unint64_t *)&v28->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  std::__shared_weak_count::__release_weak(v5);
  if (v26)
  {
    v19 = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v21 = (QMIControl *)*((_QWORD *)this + 9);
  v29[0] = *((QMIControl **)this + 8);
  v29[1] = v21;
  if (v21)
  {
    v22 = (unint64_t *)((char *)v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  QMux::State::notifyClientAdded_sync((uint64_t)this, v29, 0);
  if (v21)
  {
    v24 = (unint64_t *)((char *)v21 + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      (*(void (**)(QMIControl *))(*(_QWORD *)v21 + 16))(v21);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v21);
    }
  }
}

void sub_19E9FA0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E9FA0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::__shared_weak_count *v13;

  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  QMux::~QMux((QMux *)&a11);
  std::__shared_weak_count::__release_weak(v13);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *QMux::QMux(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;

  *a1 = 0;
  a1[1] = 0;
  v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    a1[1] = v5;
    if (v5)
      *a1 = *a2;
  }
  return a1;
}

{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;

  *a1 = 0;
  a1[1] = 0;
  v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    a1[1] = v5;
    if (v5)
      *a1 = *a2;
  }
  return a1;
}

void QMux::~QMux(QMux *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void QMux::State::notifyClientAdded_sync(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  _BYTE *v6;
  const char *v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t **v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  char v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  char v25;
  char v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;

  v6 = (_BYTE *)*a2;
  v6[33] = a3;
  (*(void (**)(_BYTE *))(*(_QWORD *)v6 + 16))(v6);
  v8 = *(unsigned __int8 *)(*a2 + 32);
  v10 = (uint64_t **)(a1 + 120);
  v9 = *(uint64_t **)(a1 + 120);
  if (!v9)
  {
    v16 = (unsigned __int8 *)(a1 + 120);
    goto LABEL_56;
  }
  v11 = *(uint64_t ***)(a1 + 120);
  while (1)
  {
    v12 = *((unsigned __int8 *)v11 + 32);
    if (v8 == v12)
    {
      v13 = *((unsigned __int8 *)v11 + 33);
      v14 = v13 == a3;
      if (v13 > a3)
        goto LABEL_5;
      if (v13 >= a3)
        v15 = 1;
      else
        v15 = -1;
      if (v14)
        v15 = 0;
    }
    else
    {
      if (v8 < v12)
        goto LABEL_5;
      v15 = v12 >= v8 ? 1 : -1;
    }
    if ((v15 & 0x80) == 0)
      break;
    ++v11;
LABEL_5:
    v11 = (uint64_t **)*v11;
    if (!v11)
      goto LABEL_37;
  }
  v17 = 1;
  do
  {
    v18 = *((unsigned __int8 *)v9 + 32);
    if (v8 == v18)
    {
      v19 = *((unsigned __int8 *)v9 + 33);
      v20 = v19 == a3;
      if (v19 > a3)
        goto LABEL_22;
      if (v19 >= a3)
        v21 = 1;
      else
        v21 = -1;
      if (v20)
        v21 = 0;
    }
    else
    {
      if (v8 < v18)
        goto LABEL_22;
      if (v18 >= v8)
        v21 = 1;
      else
        v21 = -1;
    }
    if ((v21 & 0x80) == 0)
      goto LABEL_36;
    ++v9;
LABEL_22:
    v9 = (uint64_t *)*v9;
  }
  while (v9);
  v17 = 0;
LABEL_36:
  _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x1F8, "fClientMap.count(key)", "==", "0", (const char *)v17, 0);
  v9 = *v10;
LABEL_37:
  v16 = (unsigned __int8 *)(a1 + 120);
  if (v9)
  {
    while (1)
    {
      v16 = (unsigned __int8 *)v9;
      v22 = *((unsigned __int8 *)v9 + 32);
      if (v8 == v22)
      {
        v23 = v16[33];
        v24 = v23 == a3;
        if (v23 > a3)
          goto LABEL_39;
        if (v23 >= a3)
          v25 = 1;
        else
          v25 = -1;
        if (v24)
          v25 = 0;
        if ((v25 & 0x80) == 0)
          goto LABEL_59;
      }
      else
      {
        if (v8 < v22)
        {
LABEL_39:
          v9 = *(uint64_t **)v16;
          v10 = (uint64_t **)v16;
          if (!*(_QWORD *)v16)
            break;
          continue;
        }
        if (v22 >= v8)
          v26 = 1;
        else
          v26 = -1;
        if ((v26 & 0x80) == 0)
          goto LABEL_59;
      }
      v9 = (uint64_t *)*((_QWORD *)v16 + 1);
      if (!v9)
      {
        v10 = (uint64_t **)(v16 + 8);
        break;
      }
    }
  }
LABEL_56:
  v27 = v16;
  v16 = (unsigned __int8 *)operator new(0x38uLL);
  *((_WORD *)v16 + 16) = v8 | ((_WORD)a3 << 8);
  *((_QWORD *)v16 + 5) = 0;
  *((_QWORD *)v16 + 6) = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = v27;
  *v10 = (uint64_t *)v16;
  v28 = **(_QWORD **)(a1 + 112);
  v29 = (uint64_t *)v16;
  if (v28)
  {
    *(_QWORD *)(a1 + 112) = v28;
    v29 = *v10;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 120), v29);
  ++*(_QWORD *)(a1 + 128);
LABEL_59:
  v31 = *a2;
  v30 = a2[1];
  if (v30)
  {
    v32 = (unint64_t *)(v30 + 16);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = (std::__shared_weak_count *)*((_QWORD *)v16 + 6);
  *((_QWORD *)v16 + 5) = v31;
  *((_QWORD *)v16 + 6) = v30;
  if (v34)
    std::__shared_weak_count::__release_weak(v34);
  if (*(_DWORD *)(a1 + 216) == 3 && *(_QWORD *)(a1 + 224))
  {
    v35 = *(_QWORD *)(a1 + 232);
    if (!v35)
    {
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x1FF, "fPowerDownClientsState", "is not", "true", v7);
      v35 = *(_QWORD *)(a1 + 232);
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 88))(*a2, v35, 1);
  }
}

void QMux::State::join(NSObject **this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  QMux::State *v6;
  dispatch_group_t group;
  _QWORD block[6];

  v2 = dispatch_group_create();
  v3 = v2;
  v6 = (QMux::State *)this;
  group = v2;
  if (v2)
  {
    dispatch_retain(v2);
    dispatch_group_enter(v3);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNKS2_4joinEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
  block[3] = &__block_descriptor_tmp_132;
  block[4] = this + 1;
  block[5] = &v6;
  v4 = this[3];
  if (this[4])
  {
    dispatch_async_and_wait(v4, block);
    v5 = group;
    if (!group)
      goto LABEL_9;
  }
  else
  {
    dispatch_sync(v4, block);
    v5 = group;
    if (!group)
      goto LABEL_9;
  }
  dispatch_group_leave(v5);
  if (group)
    dispatch_release(group);
LABEL_9:
  dispatch_group_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
  if (v3)
    dispatch_release(v3);
}

void QMux::State::joinControl(NSObject **this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  QMux::State *v6;
  dispatch_group_t group;
  _QWORD block[6];

  v2 = dispatch_group_create();
  v3 = v2;
  v6 = (QMux::State *)this;
  group = v2;
  if (v2)
  {
    dispatch_retain(v2);
    dispatch_group_enter(v3);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS2_11joinControlEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
  block[3] = &__block_descriptor_tmp_134;
  block[4] = this + 1;
  block[5] = &v6;
  v4 = this[3];
  if (this[4])
  {
    dispatch_async_and_wait(v4, block);
    v5 = group;
    if (!group)
      goto LABEL_9;
  }
  else
  {
    dispatch_sync(v4, block);
    v5 = group;
    if (!group)
      goto LABEL_9;
  }
  dispatch_group_leave(v5);
  if (group)
    dispatch_release(group);
LABEL_9:
  dispatch_group_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
  if (v3)
    dispatch_release(v3);
}

void QMux::State::flush_sync(QMux::State *this, const group *a2)
{
  char *v2;
  char *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  char *v12;
  BOOL v13;

  v2 = (char *)*((_QWORD *)this + 14);
  v3 = (char *)this + 120;
  if (v2 != (char *)this + 120)
  {
    do
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)v2 + 6);
      if (!v5)
        goto LABEL_11;
      v6 = std::__shared_weak_count::lock(v5);
      if (!v6)
        goto LABEL_11;
      v7 = v6;
      v8 = *((_QWORD *)v2 + 5);
      if (v8)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v8 + 80))(v8, a2->gr_name);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        v11 = (char *)*((_QWORD *)v2 + 1);
        if (!v11)
        {
          do
          {
LABEL_15:
            v12 = (char *)*((_QWORD *)v2 + 2);
            v13 = *(_QWORD *)v12 == (_QWORD)v2;
            v2 = v12;
          }
          while (!v13);
          goto LABEL_3;
        }
      }
      else
      {
LABEL_11:
        v11 = (char *)*((_QWORD *)v2 + 1);
        if (!v11)
          goto LABEL_15;
      }
      do
      {
        v12 = v11;
        v11 = *(char **)v11;
      }
      while (v11);
LABEL_3:
      v2 = v12;
    }
    while (v12 != v3);
  }
}

void sub_19E9FA70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QMux::State::clearQueues_sync(QMux::State *this)
{
  uint64_t v2;
  const char *v3;
  void **v4;
  void **v5;
  unint64_t v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *((_QWORD *)this + 10);
  v3 = (char *)this + 40;
  if (*((char *)this + 63) < 0)
    v3 = *(const char **)v3;
  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v2 + 24))(v2, 6, "[%s] Clearing all messages in the QMux send/pending queues\n", v3);
  v4 = (void **)*((_QWORD *)this + 18);
  v5 = (void **)*((_QWORD *)this + 19);
  if (v5 == v4)
  {
    *((_QWORD *)this + 22) = 0;
    v14 = 0;
    goto LABEL_18;
  }
  v6 = *((_QWORD *)this + 21);
  v7 = &v4[v6 / 0xAA];
  v8 = (unint64_t)*v7 + 24 * (v6 % 0xAA);
  v9 = (unint64_t)v4[(*((_QWORD *)this + 22) + v6) / 0xAA] + 24 * ((*((_QWORD *)this + 22) + v6) % 0xAA);
  if (v8 == v9)
    goto LABEL_16;
  do
  {
    v10 = *(std::__shared_weak_count **)(v8 + 16);
    if (!v10)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (v12)
    {
LABEL_11:
      v8 += 24;
      if (v8 - (_QWORD)*v7 != 4080)
        continue;
LABEL_12:
      v13 = (unint64_t)v7[1];
      ++v7;
      v8 = v13;
      continue;
    }
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v8 += 24;
    if (v8 - (_QWORD)*v7 == 4080)
      goto LABEL_12;
  }
  while (v8 != v9);
  v4 = (void **)*((_QWORD *)this + 18);
  v5 = (void **)*((_QWORD *)this + 19);
LABEL_16:
  *((_QWORD *)this + 22) = 0;
  v14 = (char *)v5 - (char *)v4;
  if (v14 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v15 = *((_QWORD *)this + 19);
      v4 = (void **)(*((_QWORD *)this + 18) + 8);
      *((_QWORD *)this + 18) = v4;
      v14 = v15 - (_QWORD)v4;
    }
    while (v14 > 0x10);
  }
LABEL_18:
  if (v14 >> 3 == 1)
  {
    v16 = 85;
LABEL_23:
    *((_QWORD *)this + 21) = v16;
  }
  else if (v14 >> 3 == 2)
  {
    v16 = 170;
    goto LABEL_23;
  }
}

void QMux::State::add_sync(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD **)(a1 + 64);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  QMIControl::add_sync(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_19E9FA964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QMux::State::remove_sync(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t *v16;
  unsigned int v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;
  BOOL v23;
  char v24;
  unsigned int v25;
  BOOL v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  char v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  unsigned __int8 *v60;
  unsigned __int8 **i;
  unsigned __int8 *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unsigned __int8 *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  __int128 v79;
  uint64_t *v80;
  uint64_t *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void **v87;
  unint64_t v88;
  _QWORD *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t *v101;
  std::__shared_weak_count *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  __int128 v105;
  __int128 v106;

  v4 = (std::__shared_weak_count *)a2[1];
  v5 = *(unsigned __int8 *)(*a2 + 33);
  v6 = *(unsigned __int8 *)(*a2 + 32);
  v7 = *(_QWORD **)(a1 + 64);
  v103 = *a2;
  v104 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  QMIControl::remove_sync(v7, &v103);
  v10 = v104;
  if (!v104)
    goto LABEL_8;
  v11 = (unint64_t *)&v104->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (v5 == 255)
      return;
  }
  else
  {
LABEL_8:
    if (v5 == 255)
      return;
  }
  *(_BYTE *)(*a2 + 33) = -1;
  v13 = *(_QWORD *)(a1 + 120);
  if (v13)
  {
    v14 = a1 + 120;
    do
    {
      v17 = *(unsigned __int8 *)(v13 + 32);
      v18 = v17 == v6;
      if (v17 >= v6)
        v19 = 1;
      else
        v19 = -1;
      if (v18)
      {
        v20 = *(unsigned __int8 *)(v13 + 33);
        v21 = v20 == v5;
        v19 = v20 >= v5 ? 1 : -1;
        if (v21)
          v19 = 0;
      }
      v15 = (v19 & 0x80) == 0;
      if (v19 < 0)
        v16 = (uint64_t *)(v13 + 8);
      else
        v16 = (uint64_t *)v13;
      if (v15)
        v14 = v13;
      v13 = *v16;
    }
    while (*v16);
    if (v14 != a1 + 120)
    {
      v22 = *(unsigned __int8 *)(v14 + 32);
      v23 = v6 == v22;
      if (v6 >= v22)
        v24 = 1;
      else
        v24 = -1;
      if (v23)
      {
        v25 = *(unsigned __int8 *)(v14 + 33);
        v26 = v5 >= v25;
        v27 = v5 == v25;
        v24 = -1;
        if (v26)
          v24 = 1;
        if (v27)
          v24 = 0;
      }
      if ((v24 & 0x80) == 0)
      {
        v28 = *(_QWORD *)(a1 + 168);
        v29 = *(_QWORD *)(a1 + 144);
        v30 = *(_QWORD *)(a1 + 152);
        v31 = (_QWORD *)(v29 + 8 * (v28 / 0xAA));
        if (v30 == v29)
        {
          v42 = 0;
          v33 = 0;
          v34 = *(_QWORD *)(a1 + 176);
          v37 = v34 + v28;
          v39 = (uint64_t *)(v29 + 8 * ((v34 + v28) / 0xAA));
          v40 = 1;
        }
        else
        {
          v32 = *(unsigned __int8 **)(v29 + 8 * (v28 / 0xAA));
          v33 = &v32[24 * (v28 % 0xAA)];
          v34 = *(_QWORD *)(a1 + 176);
          v35 = *(_QWORD *)(v29 + 8 * ((v34 + v28) / 0xAA)) + 24 * ((v34 + v28) % 0xAA);
          if (v33 != (unsigned __int8 *)v35)
          {
            if (*(_WORD *)(a1 + 312))
            {
              v33 += 24;
              if (v33 - v32 == 4080)
              {
                v36 = (unsigned __int8 *)v31[1];
                ++v31;
                v32 = v36;
                v33 = v36;
              }
            }
          }
          if (v33 == (unsigned __int8 *)v35)
            goto LABEL_46;
          while (*v33 != v6 || v5 != v33[1])
          {
            v33 += 24;
            if (v33 - v32 == 4080)
            {
              v49 = (unsigned __int8 *)v31[1];
              ++v31;
              v32 = v49;
              v33 = v49;
            }
            if (v33 == (unsigned __int8 *)v35)
              goto LABEL_46;
          }
          if (v33 == (unsigned __int8 *)v35)
          {
LABEL_46:
            v33 = (unsigned __int8 *)(*(_QWORD *)(v29 + 8 * ((v34 + v28) / 0xAA)) + 24 * ((v34 + v28) % 0xAA));
          }
          else
          {
            v60 = v33;
            for (i = (unsigned __int8 **)v31; ; v32 = *i)
            {
              v60 += 24;
              if (v60 - v32 == 4080)
              {
                v62 = i[1];
                ++i;
                v60 = v62;
              }
              if (v60 == (unsigned __int8 *)v35)
                break;
              if (*v60 != v6 || v5 != v60[1])
              {
                *(_WORD *)v33 = *(_WORD *)v60;
                v64 = *((_QWORD *)v60 + 1);
                v63 = *((_QWORD *)v60 + 2);
                if (v63)
                {
                  v65 = (unint64_t *)(v63 + 8);
                  do
                    v66 = __ldxr(v65);
                  while (__stxr(v66 + 1, v65));
                }
                v67 = (std::__shared_weak_count *)*((_QWORD *)v33 + 2);
                *((_QWORD *)v33 + 1) = v64;
                *((_QWORD *)v33 + 2) = v63;
                if (v67)
                {
                  v68 = (unint64_t *)&v67->__shared_owners_;
                  do
                    v69 = __ldaxr(v68);
                  while (__stlxr(v69 - 1, v68));
                  if (!v69)
                  {
                    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                    std::__shared_weak_count::__release_weak(v67);
                  }
                }
                v33 += 24;
                if (&v33[-*v31] == (unsigned __int8 *)4080)
                {
                  v70 = (unsigned __int8 *)v31[1];
                  ++v31;
                  v33 = v70;
                }
              }
            }
            v28 = *(_QWORD *)(a1 + 168);
            v34 = *(_QWORD *)(a1 + 176);
            v29 = *(_QWORD *)(a1 + 144);
            v30 = *(_QWORD *)(a1 + 152);
          }
          v37 = v34 + v28;
          v38 = (v34 + v28) / 0xAA;
          v39 = (uint64_t *)(v29 + 8 * v38);
          if (v30 == v29)
          {
            v41 = 0;
            v40 = 1;
            v42 = v33;
            if (v33)
            {
LABEL_49:
              v43 = 170 * (v39 - v31)
                  - 0x5555555555555555 * ((v41 - *v39) >> 3)
                  + 0x5555555555555555 * ((uint64_t)&v42[-*v31] >> 3);
              v44 = v28 / 0xAA;
              v45 = (uint64_t *)(v29 + 8 * (v28 / 0xAA));
              if ((v40 & 1) != 0)
                goto LABEL_50;
              goto LABEL_62;
            }
          }
          else
          {
            v40 = 0;
            v41 = *v39 + 24 * (v37 - 170 * v38);
            v42 = v33;
            if (v33 != (unsigned __int8 *)v41)
              goto LABEL_49;
          }
        }
        v43 = 0;
        v44 = v28 / 0xAA;
        v45 = (uint64_t *)(v29 + 8 * (v28 / 0xAA));
        if ((v40 & 1) != 0)
        {
LABEL_50:
          v46 = 0;
          if (!v33)
            goto LABEL_51;
          goto LABEL_63;
        }
LABEL_62:
        v46 = (uint64_t *)(*v45 + 24 * (v28 - 170 * v44));
        if (v33 == (unsigned __int8 *)v46)
        {
LABEL_51:
          v47 = 0;
          v48 = v45;
          if (v43 < 1)
            goto LABEL_137;
LABEL_72:
          v54 = v34 - v43;
          v55 = v43 - 0x5555555555555555 * ((uint64_t)&v33[-*v48] >> 3);
          if (v47 > v54 >> 1)
          {
            if (v55 < 1)
            {
              v71 = 169 - v55;
              v56 = &v48[-(v71 / 0xAA)];
              v57 = *v56 + 24 * (170 * (v71 / 0xAA) - v71) + 4056;
            }
            else
            {
              v56 = &v48[v55 / 0xAAuLL];
              v57 = *v56 + 24 * (v55 % 0xAAuLL);
            }
            if ((v40 & 1) != 0)
              v72 = 0;
            else
              v72 = *v39 + 24 * (v37 % 0xAA);
            *(_QWORD *)&v105 = v48;
            *((_QWORD *)&v105 + 1) = v33;
            std::__for_each_segment[abi:ne180100]<std::__deque_iterator<QMuxQueueItem,QMuxQueueItem*,QMuxQueueItem&,QMuxQueueItem**,long,170l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<QMuxQueueItem,QMuxQueueItem*,QMuxQueueItem&,QMuxQueueItem**,long,170l>,std::__deque_iterator<QMuxQueueItem,QMuxQueueItem*,QMuxQueueItem&,QMuxQueueItem**,long,170l>>>(v56, v57, v39, v72, (uint64_t)&v105);
            v73 = *((_QWORD *)&v105 + 1);
            v75 = *(_QWORD *)(a1 + 144);
            v74 = *(_QWORD *)(a1 + 152);
            if (v74 == v75)
            {
              v77 = 0;
            }
            else
            {
              v76 = *(_QWORD *)(a1 + 176) + *(_QWORD *)(a1 + 168);
              v77 = *(_QWORD *)(v75 + 8 * (v76 / 0xAA)) + 24 * (v76 % 0xAA);
            }
            if (*((_QWORD *)&v105 + 1) == v77)
              goto LABEL_130;
            v89 = (_QWORD *)v105;
            while (1)
            {
              v90 = *(std::__shared_weak_count **)(v73 + 16);
              if (v90)
              {
                v91 = (unint64_t *)&v90->__shared_owners_;
                do
                  v92 = __ldaxr(v91);
                while (__stlxr(v92 - 1, v91));
                if (!v92)
                  break;
              }
              v73 += 24;
              if (v73 - *v89 == 4080)
                goto LABEL_126;
LABEL_120:
              if (v73 == v77)
              {
                v75 = *(_QWORD *)(a1 + 144);
                v74 = *(_QWORD *)(a1 + 152);
LABEL_130:
                if (v74 == v75)
                  v94 = 0;
                else
                  v94 = 170 * ((v74 - v75) >> 3) - 1;
                v95 = *(_QWORD *)(a1 + 168);
                v96 = *(_QWORD *)(a1 + 176) - v43;
                *(_QWORD *)(a1 + 176) = v96;
                if ((unint64_t)(v94 - (v95 + v96)) >= 0x154)
                {
                  do
                  {
                    operator delete(*(void **)(v74 - 8));
                    v74 = *(_QWORD *)(a1 + 152) - 8;
                    v15 = v74 == *(_QWORD *)(a1 + 144);
                    v97 = 170 * ((v74 - *(_QWORD *)(a1 + 144)) >> 3) - 1;
                    *(_QWORD *)(a1 + 152) = v74;
                    if (v15)
                      v97 = 0;
                  }
                  while ((unint64_t)(v97 - (*(_QWORD *)(a1 + 176) + *(_QWORD *)(a1 + 168))) > 0x153);
                }
LABEL_137:
                v98 = *(_QWORD **)(v14 + 8);
                if (v98)
                {
                  do
                  {
                    v99 = v98;
                    v98 = (_QWORD *)*v98;
                  }
                  while (v98);
                }
                else
                {
                  v100 = (_QWORD *)v14;
                  do
                  {
                    v99 = (_QWORD *)v100[2];
                    v15 = *v99 == (_QWORD)v100;
                    v100 = v99;
                  }
                  while (!v15);
                }
                if (*(_QWORD *)(a1 + 112) == v14)
                  *(_QWORD *)(a1 + 112) = v99;
                v101 = *(uint64_t **)(a1 + 120);
                --*(_QWORD *)(a1 + 128);
                std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v101, (uint64_t *)v14);
                v102 = *(std::__shared_weak_count **)(v14 + 48);
                if (v102)
                  std::__shared_weak_count::__release_weak(v102);
                operator delete((void *)v14);
                return;
              }
            }
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
            v73 += 24;
            if (v73 - *v89 != 4080)
              goto LABEL_120;
LABEL_126:
            v93 = v89[1];
            ++v89;
            v73 = v93;
            goto LABEL_120;
          }
          if (v55 < 1)
          {
            v78 = 169 - v55;
            v58 = &v48[-(v78 / 0xAA)];
            v59 = (uint64_t *)(*v58 + 24 * (170 * (v78 / 0xAA) - v78) + 4056);
          }
          else
          {
            v58 = &v48[v55 / 0xAAuLL];
            v59 = (uint64_t *)(*v58 + 24 * (v55 % 0xAAuLL));
          }
          *(_QWORD *)&v79 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v79 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v105 = v79;
          v106 = v79;
          std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<QMuxQueueItem,QMuxQueueItem*,QMuxQueueItem&,QMuxQueueItem**,long,170l>,std::__deque_iterator<QMuxQueueItem,QMuxQueueItem*,QMuxQueueItem&,QMuxQueueItem**,long,170l>,0>((uint64_t **)&v105, v45, v46, v48, (uint64_t *)v33, v58, v59);
          v80 = (uint64_t *)*((_QWORD *)&v106 + 1);
          while (1)
          {
            while (1)
            {
              if (v46 == v80)
              {
                v85 = *(_QWORD *)(a1 + 176) - v43;
                v86 = *(_QWORD *)(a1 + 168) + v43;
                *(_QWORD *)(a1 + 168) = v86;
                *(_QWORD *)(a1 + 176) = v85;
                if (v86 >= 0x154)
                {
                  v87 = *(void ***)(a1 + 144);
                  do
                  {
                    operator delete(*v87);
                    v87 = (void **)(*(_QWORD *)(a1 + 144) + 8);
                    *(_QWORD *)(a1 + 144) = v87;
                    v88 = *(_QWORD *)(a1 + 168) - 170;
                    *(_QWORD *)(a1 + 168) = v88;
                  }
                  while (v88 >= 0x154);
                }
                goto LABEL_137;
              }
              v82 = (std::__shared_weak_count *)v46[2];
              if (v82)
              {
                v83 = (unint64_t *)&v82->__shared_owners_;
                do
                  v84 = __ldaxr(v83);
                while (__stlxr(v84 - 1, v83));
                if (!v84)
                  break;
              }
              v46 += 3;
              if ((uint64_t *)((char *)v46 - *v45) == (uint64_t *)4080)
                goto LABEL_103;
            }
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
            v46 += 3;
            if ((uint64_t *)((char *)v46 - *v45) == (uint64_t *)4080)
            {
LABEL_103:
              v81 = (uint64_t *)v45[1];
              ++v45;
              v46 = v81;
            }
          }
        }
LABEL_63:
        v50 = 170 * (v31 - v45) - 0x5555555555555555 * ((uint64_t)&v42[-*v31] >> 3);
        v51 = ((uint64_t)v46 - *v45) >> 3;
        v47 = v50 + 0x5555555555555555 * v51;
        if (v47)
        {
          v52 = v47 - 0x5555555555555555 * v51;
          if (v52 < 1)
          {
            v53 = 169 - v52;
            v48 = &v45[-(v53 / 0xAA)];
            v33 = (unsigned __int8 *)(*v48 + 24 * (170 * (v53 / 0xAA) - v53) + 4056);
            if (v43 < 1)
              goto LABEL_137;
          }
          else
          {
            v48 = &v45[v52 / 0xAAuLL];
            v33 = (unsigned __int8 *)(*v48 + 24 * (v52 % 0xAAuLL));
            if (v43 < 1)
              goto LABEL_137;
          }
        }
        else
        {
          v33 = (unsigned __int8 *)v46;
          v48 = v45;
          if (v43 < 1)
            goto LABEL_137;
        }
        goto LABEL_72;
      }
    }
  }
}

void sub_19E9FB238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QMux::State::check_sync(QMux::State *this)
{
  char *v1;
  char *v2;
  const char **v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  char *v7;
  char *v8;
  const char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  BOOL v14;
  char *v15;
  char *v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v1 = (char *)*((_QWORD *)this + 14);
  v2 = (char *)this + 120;
  if (v1 != (char *)this + 120)
  {
    v4 = (const char **)((char *)this + 40);
    while (1)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)v1 + 6);
      if (!v5)
        break;
      v6 = std::__shared_weak_count::lock(v5);
      if (!v6 || !*((_QWORD *)v1 + 5))
        goto LABEL_13;
      v7 = (char *)*((_QWORD *)v1 + 1);
      if (v7)
      {
        do
        {
          v1 = v7;
          v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = v1;
          v1 = (char *)*((_QWORD *)v1 + 2);
        }
        while (*(char **)v1 != v8);
      }
LABEL_30:
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      if (v1 == v2)
        return;
    }
    v6 = 0;
LABEL_13:
    v9 = (const char *)v4;
    if (*((char *)this + 63) < 0)
      v9 = *v4;
    (*(void (**)(_QWORD, uint64_t, const char *, ...))(**((_QWORD **)this + 10) + 24))(*((_QWORD *)this + 10), 6, "[%s] QMIClient(svcType=%d,clientId=%d) is dead but still registered; recycling the id\n",
      v9,
      v1[32],
      v1[33]);
    QMIControl::releaseClientId_sync(*((_QWORD **)this + 8), v1[32], v1[33]);
    v10 = (char *)*((_QWORD *)v1 + 1);
    v11 = v10;
    v12 = v1;
    if (v10)
    {
      do
      {
        v13 = v11;
        v11 = *(char **)v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        v13 = (char *)*((_QWORD *)v12 + 2);
        v14 = *(_QWORD *)v13 == (_QWORD)v12;
        v12 = v13;
      }
      while (!v14);
    }
    v15 = v1;
    if (v10)
    {
      do
      {
        v16 = v10;
        v10 = *(char **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        v16 = (char *)*((_QWORD *)v15 + 2);
        v14 = *(_QWORD *)v16 == (_QWORD)v15;
        v15 = v16;
      }
      while (!v14);
    }
    if (*((char **)this + 14) == v1)
      *((_QWORD *)this + 14) = v16;
    v17 = (uint64_t *)*((_QWORD *)this + 15);
    --*((_QWORD *)this + 16);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v17, (uint64_t *)v1);
    v18 = (std::__shared_weak_count *)*((_QWORD *)v1 + 6);
    if (v18)
      std::__shared_weak_count::__release_weak(v18);
    operator delete(v1);
    v1 = v13;
    goto LABEL_30;
  }
}

void sub_19E9FB428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t QMux::State::notifyClientAddFailure_sync(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 24))(*a2, a3);
}

void QMux::State::revokeClient_sync(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t *v9;
  unsigned int v10;
  BOOL v11;
  char v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  BOOL v19;
  BOOL v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  _BYTE *v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  const char *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;

  v6 = *(_QWORD *)(a1 + 120);
  if (v6)
  {
    v7 = a1 + 120;
    do
    {
      v10 = *(unsigned __int8 *)(v6 + 32);
      v11 = v10 == a2;
      if (v10 >= a2)
        v12 = 1;
      else
        v12 = -1;
      if (v11)
      {
        v13 = *(unsigned __int8 *)(v6 + 33);
        v14 = v13 == a3;
        v12 = v13 >= a3 ? 1 : -1;
        if (v14)
          v12 = 0;
      }
      v8 = (v12 & 0x80) == 0;
      if (v12 < 0)
        v9 = (uint64_t *)(v6 + 8);
      else
        v9 = (uint64_t *)v6;
      if (v8)
        v7 = v6;
      v6 = *v9;
    }
    while (*v9);
    if (v7 != a1 + 120)
    {
      v15 = *(unsigned __int8 *)(v7 + 32);
      v16 = v15 == a2;
      if (v15 <= a2)
        v17 = 1;
      else
        v17 = -1;
      if (v16)
      {
        v18 = *(unsigned __int8 *)(v7 + 33);
        v19 = v18 == a3;
        v20 = v18 > a3;
        v17 = -1;
        if (!v20)
          v17 = 1;
        if (v19)
          v17 = 0;
      }
      if ((v17 & 0x80) == 0)
      {
        v21 = *(std::__shared_weak_count **)(v7 + 48);
        if (v21)
        {
          v22 = std::__shared_weak_count::lock(v21);
          if (v22)
          {
            v23 = *(_BYTE **)(v7 + 40);
            if (v23)
            {
              v24 = (const char *)(a1 + 40);
              if (*(char *)(a1 + 63) < 0)
                v24 = *(const char **)v24;
              (*(void (**)(_QWORD, uint64_t, const char *, ...))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), 6, "[%s] Sending client id revocation to QMIClient(svcType=%d,clientId=%d)\n", v24, a2, a3);
              (*(void (**)(_BYTE *))(*(_QWORD *)v23 + 48))(v23);
              v23[33] = -1;
LABEL_45:
              v28 = *(_QWORD **)(v7 + 8);
              if (v28)
              {
                do
                {
                  v29 = v28;
                  v28 = (_QWORD *)*v28;
                }
                while (v28);
              }
              else
              {
                v30 = (_QWORD *)v7;
                do
                {
                  v29 = (_QWORD *)v30[2];
                  v8 = *v29 == (_QWORD)v30;
                  v30 = v29;
                }
                while (!v8);
              }
              if (*(_QWORD *)(a1 + 112) == v7)
                *(_QWORD *)(a1 + 112) = v29;
              v31 = *(uint64_t **)(a1 + 120);
              --*(_QWORD *)(a1 + 128);
              std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v31, (uint64_t *)v7);
              v32 = *(std::__shared_weak_count **)(v7 + 48);
              if (v32)
                std::__shared_weak_count::__release_weak(v32);
              operator delete((void *)v7);
              if (v22)
              {
                p_shared_owners = (unint64_t *)&v22->__shared_owners_;
                do
                  v34 = __ldaxr(p_shared_owners);
                while (__stlxr(v34 - 1, p_shared_owners));
                if (!v34)
                {
                  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                  std::__shared_weak_count::__release_weak(v22);
                }
              }
              return;
            }
          }
        }
        else
        {
          v22 = 0;
        }
        v27 = (const char *)(a1 + 40);
        if (*(char *)(a1 + 63) < 0)
          v27 = *(const char **)v27;
        (*(void (**)(_QWORD, uint64_t, const char *, ...))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), 6, "[%s] Could not revoke client id, because QMIClient(svcType=%d,clientId=%d) was attached but marked dead\n", v27, a2, a3);
        goto LABEL_45;
      }
    }
  }
  v25 = *(_QWORD *)(a1 + 80);
  v26 = (const char *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0)
    v26 = *(const char **)v26;
  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v25 + 24))(v25, 6, "[%s] Could not revoke client id, because QMIClient(svcType=%d,clientId=%d) isnt attached\n", v26, a2, a3);
}

void sub_19E9FB6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void QMux::State::notifyControlMessageError_sync(uint64_t a1, int a2)
{
  QMuxFlowControl *v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  void **v8;
  void *__p[2];
  char v10;

  if (!a2)
    return;
  v2 = (QMuxFlowControl *)(a1 + 360);
  if (*(_BYTE *)(a1 + 360) && (a2 == 65537 || a2 == -559087616))
  {
    v3 = (unsigned int *)(a1 + 372);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      atomic_store(0, v3);
      v5 = *(_QWORD *)(a1 + 80);
      v6 = (const char *)(a1 + 40);
      if ((*(char *)(a1 + 63) & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  v5 = *(_QWORD *)(a1 + 80);
  v6 = (const char *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0)
LABEL_9:
    v6 = *(const char **)v6;
LABEL_10:
  v7 = (const char *)qmi::asString();
  QMuxFlowControl::toString(v2, __p);
  if (v10 >= 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v5 + 24))(v5, 6, "[%s] Control message error: %s%s\n", v6, v7, (const char *)v8);
  if (v10 < 0)
    operator delete(__p[0]);
}

void sub_19E9FB7E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t QMuxFlowControl::toString@<X0>(QMuxFlowControl *this@<X0>, _BYTE *a2@<X8>)
{
  __int128 v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  size_t v8;
  _BYTE *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  void *__src[2];
  void *__p[2];
  __int128 v22;
  __int128 v23;
  _OWORD v24[9];
  unint64_t v25;

  v25 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v24[7] = v4;
  v24[8] = v4;
  v24[5] = v4;
  v24[6] = v4;
  v24[3] = v4;
  v24[4] = v4;
  v24[1] = v4;
  v24[2] = v4;
  v23 = v4;
  v24[0] = v4;
  *(_OWORD *)__p = v4;
  v22 = v4;
  v19 = v4;
  *(_OWORD *)__src = v4;
  v17 = v4;
  v18 = v4;
  v16 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v16);
  if (*(_BYTE *)this)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)" |flow-control: tx-limit=", 25);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", pending-rx=", 13);
    atomic_load((unsigned int *)this + 3);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", pending-tx=", 13);
    atomic_load((unsigned int *)this + 2);
    v7 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"|", 1);
  }
  if ((BYTE8(v23) & 0x10) != 0)
  {
    v9 = (_BYTE *)v23;
    if ((void *)v23 < __src[1])
    {
      *(void **)&v23 = __src[1];
      v9 = __src[1];
    }
    v10 = __src[0];
    v8 = v9 - (char *)__src[0];
    if ((unint64_t)(v9 - (char *)__src[0]) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_20;
  }
  else
  {
    if ((BYTE8(v23) & 8) == 0)
    {
      v8 = 0;
      a2[23] = 0;
      goto LABEL_16;
    }
    v10 = (const void *)*((_QWORD *)&v18 + 1);
    v8 = *((_QWORD *)&v19 + 1) - *((_QWORD *)&v18 + 1);
    if (*((_QWORD *)&v19 + 1) - *((_QWORD *)&v18 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_20:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v13 = operator new(v11 + 1);
    *((_QWORD *)a2 + 1) = v8;
    *((_QWORD *)a2 + 2) = v12 | 0x8000000000000000;
    *(_QWORD *)a2 = v13;
    a2 = v13;
    goto LABEL_15;
  }
  a2[23] = v8;
  if (v8)
LABEL_15:
    memmove(a2, v10, v8);
LABEL_16:
  a2[v8] = 0;
  *(_QWORD *)&v16 = *MEMORY[0x1E0DE4F50];
  v14 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&v16 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v17 = v14;
  *((_QWORD *)&v17 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v22) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1A1AEB300](v24);
}

void sub_19E9FBA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QMux::State::stop_sync(QMux::State *this)
{
  uint64_t v2;
  const char *v3;
  unsigned int v4;
  const char *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  void *__p[2];
  char v12;

  v2 = *((_QWORD *)this + 10);
  v3 = (char *)this + 40;
  if (*((char *)this + 63) < 0)
  {
    v3 = *(const char **)v3;
    v4 = *((_DWORD *)this + 54) - 1;
    if (v4 <= 4)
      goto LABEL_3;
  }
  else
  {
    v4 = *((_DWORD *)this + 54) - 1;
    if (v4 <= 4)
    {
LABEL_3:
      v5 = off_1E4153EE8[v4];
      goto LABEL_6;
    }
  }
  v5 = "kStopped";
LABEL_6:
  QMux::State::powerStateString_sync((uint64_t)this, (char *)__p);
  if (v12 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v2 + 24))(v2, 6, "[%s] Stopping QMux (mainState=%s, powerState=%s)\n", v3, v5, (const char *)v6);
  if ((v12 & 0x80000000) == 0)
  {
    if ((*((_DWORD *)this + 54) - 1) >= 4)
      return;
LABEL_13:
    QMux::State::setMainState((uint64_t)this, 0, v7, v8, v9, v10);
    QMux::State::tearDown_sync(this);
    return;
  }
  operator delete(__p[0]);
  if ((*((_DWORD *)this + 54) - 1) < 4)
    goto LABEL_13;
}

void sub_19E9FBB44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const char *QMux::State::stateString_sync(QMux::State *this)
{
  unsigned int v1;

  v1 = *((_DWORD *)this + 54) - 1;
  if (v1 > 4)
    return "kStopped";
  else
    return off_1E4153EE8[v1];
}

uint64_t QMux::State::powerStateString_sync@<X0>(uint64_t this@<X0>, char *a2@<X8>)
{
  char *v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  const void **v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::ios_base *v18;
  _QWORD *v19;
  _QWORD *v20;
  size_t v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  void *__p[2];
  __int128 v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v2 = a2;
  if (!*(_QWORD *)(this + 224))
  {
    if (!*(_QWORD *)(this + 240))
    {
      a2[23] = 6;
      strcpy(a2, "Stable");
      return this;
    }
    *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v34 = 0xAAAAAAAAAAAAAAAALL;
    v36 = v14;
    v44 = v14;
    v43 = v14;
    v42 = v14;
    v41 = v14;
    v40 = v14;
    v39 = v14;
    v38 = v14;
    v37 = v14;
    *(_OWORD *)__p = v14;
    v33 = v14;
    v30 = v14;
    v31 = v14;
    v28 = v14;
    v29 = v14;
    v15 = MEMORY[0x1E0DE4FE0];
    v16 = MEMORY[0x1E0DE4FE0] + 64;
    v35 = MEMORY[0x1E0DE4FE0] + 64;
    v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v17 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v27 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    *(uint64_t *)((char *)&v27 + *(_QWORD *)(v27 - 24)) = v17;
    v18 = (std::ios_base *)((char *)&v27 + *(_QWORD *)(v27 - 24));
    std::ios_base::init(v18, &v28);
    v18[1].__vftable = 0;
    v18[1].__fmtflags_ = -1;
    v27 = v15 + 24;
    v35 = v16;
    std::streambuf::basic_streambuf();
    v9 = MEMORY[0x1E0DE4FB8];
    *(_QWORD *)&v28 = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v33 = 0u;
    LODWORD(v34) = 16;
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"PoweringUp(", 11);
    *(_DWORD *)((char *)v19 + *(_QWORD *)(*v19 - 24) + 8) = *(_DWORD *)((_BYTE *)v19 + *(_QWORD *)(*v19 - 24) + 8) & 0xFFFFFFB5 | 8;
    v20 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)")", 1);
    if ((v34 & 0x10) != 0)
    {
      v24 = *((_QWORD *)&v33 + 1);
      if (*((_QWORD *)&v33 + 1) < (unint64_t)v31)
      {
        *((_QWORD *)&v33 + 1) = v31;
        v24 = v31;
      }
      v22 = (const void *)*((_QWORD *)&v30 + 1);
      v21 = v24 - *((_QWORD *)&v30 + 1);
      if ((unint64_t)(v24 - *((_QWORD *)&v30 + 1)) > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_32;
    }
    else
    {
      if ((v34 & 8) == 0)
        goto LABEL_8;
      v22 = (const void *)v29;
      v21 = v30 - v29;
      if ((_QWORD)v30 - (_QWORD)v29 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_32:
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v21 >= 0x17)
    {
      v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v21 | 7) != 0x17)
        v23 = v21 | 7;
      goto LABEL_26;
    }
LABEL_22:
    v2[23] = v21;
    if (!v21)
      goto LABEL_28;
    goto LABEL_27;
  }
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v34 = 0xAAAAAAAAAAAAAAAALL;
  v36 = v3;
  v44 = v3;
  v43 = v3;
  v42 = v3;
  v41 = v3;
  v40 = v3;
  v39 = v3;
  v38 = v3;
  v37 = v3;
  *(_OWORD *)__p = v3;
  v33 = v3;
  v30 = v3;
  v31 = v3;
  v28 = v3;
  v29 = v3;
  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v27 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v27 + *(_QWORD *)(v27 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v27 + *(_QWORD *)(v27 - 24));
  std::ios_base::init(v8, &v28);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v27 = v4 + 24;
  v35 = v5;
  std::streambuf::basic_streambuf();
  v9 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v28 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v33 = 0u;
  LODWORD(v34) = 16;
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"PoweringDown(", 13);
  *(_DWORD *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 8) = *(_DWORD *)((_BYTE *)v10 + *(_QWORD *)(*v10 - 24) + 8) & 0xFFFFFFB5 | 8;
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)")", 1);
  if ((v34 & 0x10) != 0)
  {
    v13 = *((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1) < (unint64_t)v31)
    {
      *((_QWORD *)&v33 + 1) = v31;
      v13 = v31;
    }
    v12 = (const void **)&v30 + 1;
LABEL_12:
    v22 = *v12;
    v21 = v13 - (_QWORD)*v12;
    if (v21 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v21 >= 0x17)
    {
      v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v21 | 7) != 0x17)
        v23 = v21 | 7;
LABEL_26:
      v25 = v23 + 1;
      v26 = (char *)operator new(v23 + 1);
      *((_QWORD *)v2 + 1) = v21;
      *((_QWORD *)v2 + 2) = v25 | 0x8000000000000000;
      *(_QWORD *)v2 = v26;
      v2 = v26;
LABEL_27:
      memmove(v2, v22, v21);
      goto LABEL_28;
    }
    goto LABEL_22;
  }
  if ((v34 & 8) != 0)
  {
    v12 = (const void **)&v29;
    v13 = v30;
    goto LABEL_12;
  }
LABEL_8:
  v21 = 0;
  v2[23] = 0;
LABEL_28:
  v2[v21] = 0;
  v27 = *v6;
  *(uint64_t *)((char *)&v27 + *(_QWORD *)(v27 - 24)) = v6[3];
  *(_QWORD *)&v28 = v9 + 16;
  if (SBYTE7(v33) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1A1AEB300](&v35);
}

void sub_19E9FBFCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AEB300](v1);
  _Unwind_Resume(a1);
}

void QMux::State::clearPowerDownWatchdog_sync(QMux::State *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t i;
  std::__shared_weak_count *v5;
  NSObject *v6;
  NSObject *v7;

  v2 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v2)
    dispatch_release(v2);
  v3 = *((_QWORD *)this + 32);
  for (i = *((_QWORD *)this + 33); i != v3; i -= 16)
  {
    v5 = *(std::__shared_weak_count **)(i - 8);
    if (v5)
      std::__shared_weak_count::__release_weak(v5);
  }
  *((_QWORD *)this + 33) = v3;
  v6 = *((_QWORD *)this + 35);
  if (v6)
  {
    dispatch_source_cancel(v6);
    v7 = *((_QWORD *)this + 35);
    *((_QWORD *)this + 35) = 0;
    if (v7)
      dispatch_release(v7);
  }
}

void QMux::State::powerDown_sync(QMux::State *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6, const char *a7)
{
  uint64_t v8;
  unsigned int v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char **v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  unsigned int v17;
  const char *v18;
  std::string *p_p;
  NSObject *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  QMux::State *v31;
  const char *v32;
  std::__shared_weak_count *v33;
  NSObject *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  __int128 v37;
  NSObject *v38;
  NSObject *v39;
  unint64_t v40;
  NSObject *v41;
  _QWORD *v42;
  unint64_t *v43;
  unint64_t v44;
  QMux::State *v45;
  QMux::State *v46;
  BOOL v47;
  unint64_t v48;
  NSObject *v49;
  NSObject *v50;
  _QWORD *v51;
  std::__shared_weak_count *v52;
  std::string::size_type v53;
  std::string __p;
  QMux::State *v55;
  NSObject *v56[3];

  if (!*((_QWORD *)this + 28))
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x575, "fPowerDownState", "is not", "true", a6);
  v8 = *((_QWORD *)this + 40);
  if (v8 != *((_QWORD *)this + 41))
  {
    *((_QWORD *)this + 41) = v8;
    *((_QWORD *)this + 43) = 0;
  }
  v9 = *((_DWORD *)this + 54);
  if (v9 <= 5)
  {
    if (((1 << v9) & 0x31) != 0)
    {
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x584, "false", "is not", "true", "Can never reach here!", a7);
      return;
    }
    if (((1 << v9) & 6) != 0)
    {
      v10 = (char *)this + 40;
      if (*((char *)this + 63) < 0)
        v10 = *(const char **)v10;
      v11 = "kStopped";
      if (v9 == 1)
        v11 = "kSync";
      if (v9 == 2)
        v12 = "kInit";
      else
        v12 = v11;
      (*(void (**)(_QWORD, uint64_t, const char *, ...))(**((_QWORD **)this + 10) + 24))(*((_QWORD *)this + 10), 6, "[%s] Entering power mode %d; must wait until QMux is running (mainState=%s)\n",
        v10,
        1,
        v12);
      return;
    }
  }
  v13 = (const char **)((char *)this + 40);
  v14 = (char *)this + 40;
  if (*((char *)this + 63) < 0)
    v14 = *v13;
  (*(void (**)(_QWORD, uint64_t, const char *, ...))(**((_QWORD **)this + 10) + 24))(*((_QWORD *)this + 10), 6, "[%s] Entering power mode %d; signalling all clients\n",
    v14,
    1);
  v15 = *((_QWORD *)this + 10);
  v16 = (char *)this + 40;
  if (*((char *)this + 63) < 0)
  {
    v16 = *v13;
    v17 = *((_DWORD *)this + 54) - 1;
    if (v17 <= 4)
      goto LABEL_21;
  }
  else
  {
    v17 = *((_DWORD *)this + 54) - 1;
    if (v17 <= 4)
    {
LABEL_21:
      v18 = off_1E4153EE8[v17];
      goto LABEL_24;
    }
  }
  v18 = "kStopped";
LABEL_24:
  QMux::State::powerStateString_sync((uint64_t)this, (char *)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v15 + 24))(v15, 6, "[%s] fMainState=%s fPowerState=%s\n", v16, v18, (const char *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v20 = *((_QWORD *)this + 28);
  if (v20)
    dispatch_retain(*((dispatch_object_t *)this + 28));
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v21 || (v53 = *((_QWORD *)this + 1), (v22 = std::__shared_weak_count::lock(v21)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v23 = v22;
  p_shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v22->__shared_owners_;
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v23);
  }
  v28 = dispatch_group_create();
  v29 = v28;
  if (v28)
  {
    dispatch_retain(v28);
    dispatch_group_enter(v29);
  }
  v30 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = v29;
  if (v30)
  {
    dispatch_group_leave(v30);
    dispatch_release(v30);
  }
  if (v29)
    dispatch_release(v29);
  v52 = v23;
  QMux::State::startPowerDownWatchdog_sync(this);
  v31 = (QMux::State *)*((_QWORD *)this + 14);
  if (v31 != (QMux::State *)((char *)this + 120))
  {
    do
    {
      v32 = (char *)this + 40;
      if (*((char *)this + 63) < 0)
        v32 = *v13;
      (*(void (**)(_QWORD, uint64_t, const char *, ...))(**((_QWORD **)this + 10) + 24))(*((_QWORD *)this + 10), 6, "[%s] EXTRA:     -- signal QMIClient(svc=%d client=%d) to power down\n", v32, *((unsigned __int8 *)v31 + 32), *((unsigned __int8 *)v31 + 33));
      v33 = (std::__shared_weak_count *)*((_QWORD *)v31 + 6);
      if (!v33 || (v34 = std::__shared_weak_count::lock(v33), (v56[2] = v34) == 0))
      {
LABEL_72:
        v45 = (QMux::State *)*((_QWORD *)v31 + 1);
        if (!v45)
          goto LABEL_76;
        goto LABEL_73;
      }
      v35 = (std::__shared_weak_count *)v34;
      v36 = *((_QWORD *)v31 + 5);
      v56[1] = v36;
      if (v36)
      {
        if (*((_BYTE *)v31 + 32))
        {
          v56[0] = 0xAAAAAAAAAAAAAAAALL;
          if (*(char *)(v36 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v36 + 8), *(_QWORD *)(v36 + 16));
          }
          else
          {
            v37 = *(_OWORD *)(v36 + 8);
            __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v36 + 24);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v37;
          }
          ctu::TrackedGroup::fork(v56, (uint64_t)this + 248, (uint64_t *)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v39 = v56[0];
          (*(void (**)(uint64_t, NSObject *, uint64_t))(*(_QWORD *)v36 + 88))(v36, v56[0], 1);
          if (v39)
            goto LABEL_68;
        }
        else
        {
          v38 = dispatch_group_create();
          v39 = v38;
          if (v38)
          {
            dispatch_retain(v38);
            dispatch_group_enter(v39);
            dispatch_release(v39);
          }
          (*(void (**)(uint64_t, NSObject *, uint64_t))(*(_QWORD *)v36 + 88))(v36, v39, 1);
          __p.__r_.__value_.__r.__words[0] = v53;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v52;
          do
            v40 = __ldxr(p_shared_weak_owners);
          while (__stxr(v40 + 1, p_shared_weak_owners));
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v20;
          if (v20)
            dispatch_retain(v20);
          v41 = *((_QWORD *)this + 3);
          v42 = operator new(0x18uLL);
          *v42 = v53;
          v42[1] = v52;
          v42[2] = v20;
          dispatch_group_notify_f(v39, v41, v42, (dispatch_function_t)dispatch::detail::group_notify<QMux::State::powerDown_sync(void)::$_0>(dispatch_group_s *,dispatch_queue_s *,QMux::State::powerDown_sync(void)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
          if (v39)
          {
LABEL_68:
            dispatch_group_leave(v39);
            dispatch_release(v39);
          }
        }
      }
      v43 = (unint64_t *)&v35->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (v44)
        goto LABEL_72;
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
      v45 = (QMux::State *)*((_QWORD *)v31 + 1);
      if (!v45)
      {
        do
        {
LABEL_76:
          v46 = (QMux::State *)*((_QWORD *)v31 + 2);
          v47 = *(_QWORD *)v46 == (_QWORD)v31;
          v31 = v46;
        }
        while (!v47);
        goto LABEL_47;
      }
      do
      {
LABEL_73:
        v46 = v45;
        v45 = *(QMux::State **)v45;
      }
      while (v45);
LABEL_47:
      v31 = v46;
    }
    while (v46 != (QMux::State *)((char *)this + 120));
  }
  __p.__r_.__value_.__r.__words[0] = v53;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v52;
  do
    v48 = __ldxr(p_shared_weak_owners);
  while (__stxr(v48 + 1, p_shared_weak_owners));
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v20;
  if (v20)
    dispatch_retain(v20);
  v55 = this;
  v49 = *((_QWORD *)this + 29);
  v50 = *((_QWORD *)this + 3);
  v51 = operator new(0x20uLL);
  *v51 = v53;
  v51[1] = v52;
  v51[2] = v20;
  v51[3] = this;
  dispatch_group_notify_f(v49, v50, v51, (dispatch_function_t)dispatch::detail::group_notify<QMux::State::powerDown_sync(void)::$_1>(dispatch_group_s *,dispatch_queue_s *,QMux::State::powerDown_sync(void)::$_1 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::__shared_weak_count::__release_weak(v52);
  if (v20)
    dispatch_release(v20);
}

void sub_19E9FC654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  NSObject *v24;

  QMux::State::powerUp_sync(void)::$_0::~$_0((uint64_t)&__p);
  std::__shared_weak_count::__release_weak(a13);
  if (v24)
    dispatch_release(v24);
  _Unwind_Resume(a1);
}

void QMux::State::start_sync(QMux::State *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6, const char *a7)
{
  int v7;

  v7 = *((_DWORD *)this + 54);
  if (v7 == 5)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x298, "false", "is not", "true", "Should never start() a QMux that is being destroyed!", a7);
  }
  else
  {
    if (v7 != 1)
    {
      if (v7)
        return;
      QMux::State::setMainState((uint64_t)this, 1, a3, a4, a5, a6);
    }
    QMIControl::sendSync_sync(*((QMIControl **)this + 8));
  }
}

void QMux::State::restart_sync(QMIControl **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6, const char *a7)
{
  int v8;
  const char *v9;
  uint64_t v10;

  switch(*((_DWORD *)this + 54))
  {
    case 0:
      goto LABEL_5;
    case 1:
      goto LABEL_6;
    case 2:
    case 3:
    case 4:
      QMux::State::stop_sync((QMux::State *)this);
      v8 = *((_DWORD *)this + 54);
      if (v8 == 5)
      {
        v9 = "Should never start() a QMux that is being destroyed!";
        v10 = 664;
LABEL_9:
        _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)v10, "false", "is not", "true", v9, a7);
      }
      else
      {
        if (v8 != 1)
        {
          if (v8)
            return;
LABEL_5:
          QMux::State::setMainState((uint64_t)this, 1, a3, a4, a5, a6);
        }
LABEL_6:
        QMIControl::sendSync_sync(this[8]);
      }
      return;
    case 5:
      v9 = "Should never restart() a QMux that is being destroyed!";
      v10 = 687;
      goto LABEL_9;
    default:
      return;
  }
}

void QMux::State::notifySyncSuccess_sync(QMux::State *this)
{
  const char *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  _QWORD *v14;

  v2 = (const char *)*((unsigned int *)this + 54);
  if ((_DWORD)v2 != 1)
  {
    if ((_DWORD)v2 == 5)
      return;
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x2BA, "fMainState", "==", "kSync", v2, (const void *)1);
  }
  v3 = (char *)this + 40;
  if (*((char *)this + 63) < 0)
    v3 = *(const char **)v3;
  (*(void (**)(_QWORD, uint64_t, const char *, ...))(**((_QWORD **)this + 10) + 24))(*((_QWORD *)this + 10), 6, "[%s] QMux in sync with baseband. Starting clients.\n", v3);
  QMux::State::setMainState((uint64_t)this, 2, v4, v5, v6, v7);
  v8 = dispatch_group_create();
  QMIControl::start_sync(*((QMIControl **)this + 8), *((_BYTE *)this + 314), v8);
  v10 = *((_QWORD *)this + 1);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v9 || (v11 = std::__shared_weak_count::lock(v9)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v12 = v11;
  v13 = *((_QWORD *)this + 3);
  v14 = operator new(0x10uLL);
  *v14 = v10;
  v14[1] = v12;
  dispatch_group_notify_f(v8, v13, v14, (dispatch_function_t)dispatch::detail::group_notify<QMux::State::notifySyncSuccess_sync(void)::$_0>(dispatch_group_s *,dispatch_queue_s *,QMux::State::notifySyncSuccess_sync(void)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  if (v8)
    dispatch_release(v8);
}

void sub_19E9FC9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  NSObject *v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v3)
    dispatch_release(v3);
  _Unwind_Resume(a1);
}

void QMux::State::notifySyncFailure_sync(QMIControl **this)
{
  const char *v2;

  v2 = (const char *)*((unsigned int *)this + 54);
  if ((_DWORD)v2 != 1)
  {
    if ((_DWORD)v2 == 5)
      return;
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x2D2, "fMainState", "==", "kSync", v2, (const void *)1);
  }
  QMIControl::sendSync_sync(this[8]);
}

void QMux::State::dumpState_sync(QMux::State *this)
{
  const char *v2;
  unsigned int v3;
  const char *v4;
  uint64_t v5;
  int v6;
  void **v7;
  uint64_t v8;
  void **v9;
  void **v10;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;

  v2 = (char *)this + 40;
  if (*((char *)this + 63) < 0)
  {
    v2 = *(const char **)v2;
    v3 = *((_DWORD *)this + 54) - 1;
    if (v3 <= 4)
      goto LABEL_3;
  }
  else
  {
    v3 = *((_DWORD *)this + 54) - 1;
    if (v3 <= 4)
    {
LABEL_3:
      v4 = off_1E4153EE8[v3];
      goto LABEL_6;
    }
  }
  v4 = "kStopped";
LABEL_6:
  v5 = *((_QWORD *)this + 10);
  QMux::State::powerStateString_sync((uint64_t)this, (char *)v13);
  v6 = v14;
  v7 = (void **)v13[0];
  v8 = *((_QWORD *)this + 16);
  QMuxFlowControl::toString((QMux::State *)((char *)this + 360), __p);
  if (v6 >= 0)
    v9 = v13;
  else
    v9 = v7;
  if (v12 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v5 + 24))(v5, 6, "[%s] QMux mainState=%s, powerState=%s, client count=%d%s\n", v2, v4, (const char *)v9, v8, (const char *)v10);
  if (v12 < 0)
  {
    operator delete(__p[0]);
    if ((v14 & 0x80000000) == 0)
      goto LABEL_14;
LABEL_16:
    operator delete(v13[0]);
    goto LABEL_14;
  }
  if (v14 < 0)
    goto LABEL_16;
LABEL_14:
  QMux::State::dumpClientSummaryState_sync((uint64_t)this);
  QMux::State::dumpClientState_sync(this);
  QMux::State::dumpPowerDownState_sync(this);
}

void sub_19E9FCB80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t QMux::State::dumpClientSummaryState_sync(uint64_t this)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  int v4;
  __int128 v5;
  std::ios_base *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  char v15;
  size_t v16;
  void **v17;
  uint64_t v18;
  const void **v19;
  const void *v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char **v35;
  void *__dst[2];
  int64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 __p;
  __int128 v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  v1 = *(_QWORD **)(this + 112);
  v2 = (_QWORD *)(this + 120);
  if (v1 != (_QWORD *)(this + 120))
  {
    v3 = this;
    v34 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v35 = (const char **)(this + 40);
    v29 = *MEMORY[0x1E0DE4F60];
    v33 = MEMORY[0x1E0DE4FE0] + 64;
    v32 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v28 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v31 = MEMORY[0x1E0DE4FB8] + 16;
    v30 = this;
    v27 = (_QWORD *)(this + 120);
    do
    {
      v4 = *((unsigned __int8 *)v1 + 32);
      *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v54 = v5;
      v55 = v5;
      v52 = v5;
      v53 = v5;
      v50 = v5;
      v51 = v5;
      v48 = v5;
      v49 = v5;
      v45 = 0xAAAAAAAAAAAAAAAALL;
      v47 = v5;
      __p = v5;
      v44 = v5;
      v41 = v5;
      v42 = v5;
      v39 = v5;
      v40 = v5;
      v46 = v33;
      v38 = v34;
      *(uint64_t *)((char *)&v38 + *(_QWORD *)(v34 - 24)) = v32;
      v6 = (std::ios_base *)((char *)&v38 + *(_QWORD *)(v38 - 24));
      std::ios_base::init(v6, &v39);
      v6[1].__vftable = 0;
      v6[1].__fmtflags_ = -1;
      v38 = MEMORY[0x1E0DE4FE0] + 24;
      v46 = MEMORY[0x1E0DE4FE0] + 64;
      std::streambuf::basic_streambuf();
      *(_QWORD *)&v39 = v31;
      __p = 0u;
      v44 = 0u;
      LODWORD(v45) = 16;
      std::ostream::operator<<();
      v7 = (_QWORD *)v1[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v1[2];
          v9 = *v8 == (_QWORD)v1;
          v1 = v8;
        }
        while (!v9);
      }
      v1 = v2;
      if (v8 == v2)
      {
LABEL_20:
        v12 = (const char *)v35;
        if ((*(char *)(v3 + 63) & 0x80000000) == 0)
          goto LABEL_21;
      }
      else
      {
        do
        {
          if (v4 != *((unsigned __int8 *)v8 + 32))
          {
            v1 = v8;
            goto LABEL_20;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)",", 1);
          std::ostream::operator<<();
          v10 = (_QWORD *)v8[1];
          if (v10)
          {
            do
            {
              v11 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              v11 = (_QWORD *)v8[2];
              v9 = *v11 == (_QWORD)v8;
              v8 = v11;
            }
            while (!v9);
          }
          v8 = v11;
        }
        while (v11 != v2);
        v1 = v2;
        v12 = (const char *)v35;
        if ((*(char *)(v3 + 63) & 0x80000000) == 0)
        {
LABEL_21:
          v13 = *(_QWORD *)(v3 + 80);
          v14 = qmi::asShortString(v4);
          v15 = v45;
          if ((v45 & 0x10) != 0)
            goto LABEL_26;
          goto LABEL_22;
        }
      }
      v12 = *v35;
      v13 = *(_QWORD *)(v3 + 80);
      v14 = qmi::asShortString(v4);
      v15 = v45;
      if ((v45 & 0x10) != 0)
      {
LABEL_26:
        v18 = *((_QWORD *)&v44 + 1);
        v19 = (const void **)&v41 + 1;
        if (*((_QWORD *)&v44 + 1) < (unint64_t)v42)
        {
          *((_QWORD *)&v44 + 1) = v42;
          v18 = v42;
          v19 = (const void **)&v41 + 1;
        }
        goto LABEL_29;
      }
LABEL_22:
      if ((v15 & 8) == 0)
      {
        v16 = 0;
        HIBYTE(v37) = 0;
        v17 = __dst;
        goto LABEL_37;
      }
      v18 = v41;
      v19 = (const void **)&v40;
LABEL_29:
      v20 = *v19;
      v16 = v18 - (_QWORD)*v19;
      if (v16 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v16 >= 0x17)
      {
        v21 = v13;
        v22 = v12;
        v23 = v14;
        v24 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17)
          v24 = v16 | 7;
        v25 = v24 + 1;
        v17 = (void **)operator new(v24 + 1);
        __dst[1] = (void *)v16;
        v37 = v25 | 0x8000000000000000;
        __dst[0] = v17;
        v14 = v23;
        v12 = v22;
        v13 = v21;
        v2 = v27;
      }
      else
      {
        HIBYTE(v37) = v18 - *(_BYTE *)v19;
        v17 = __dst;
        if (!v16)
          goto LABEL_37;
      }
      memmove(v17, v20, v16);
LABEL_37:
      *((_BYTE *)v17 + v16) = 0;
      v26 = (const char *)__dst;
      if (v37 < 0)
        v26 = (const char *)__dst[0];
      (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v13 + 24))(v13, 6, "[%s]     svc=%d (%s) registered ids={%s}\n", v12, v4, v14, v26);
      v3 = v30;
      if (SHIBYTE(v37) < 0)
        operator delete(__dst[0]);
      v38 = v29;
      *(uint64_t *)((char *)&v38 + *(_QWORD *)(v29 - 24)) = v28;
      *(_QWORD *)&v39 = MEMORY[0x1E0DE4FB8] + 16;
      if (SBYTE7(v44) < 0)
        operator delete((void *)__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      this = MEMORY[0x1A1AEB300](&v46);
    }
    while (v1 != v2);
  }
  return this;
}

void sub_19E9FCFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::ostringstream::~ostringstream((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_19E9FCFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::ostringstream::~ostringstream((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_19E9FCFF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  if (a31 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a32);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void QMux::State::dumpClientState_sync(QMux::State *this)
{
  char *v1;
  char *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  char *v10;
  BOOL v11;

  v1 = (char *)*((_QWORD *)this + 14);
  v2 = (char *)this + 120;
  if (v1 != (char *)this + 120)
  {
    do
    {
      v3 = (std::__shared_weak_count *)*((_QWORD *)v1 + 6);
      if (!v3)
        goto LABEL_11;
      v4 = std::__shared_weak_count::lock(v3);
      if (!v4)
        goto LABEL_11;
      v5 = v4;
      v6 = *((_QWORD *)v1 + 5);
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 112))(v6);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        v9 = (char *)*((_QWORD *)v1 + 1);
        if (!v9)
        {
          do
          {
LABEL_15:
            v10 = (char *)*((_QWORD *)v1 + 2);
            v11 = *(_QWORD *)v10 == (_QWORD)v1;
            v1 = v10;
          }
          while (!v11);
          goto LABEL_3;
        }
      }
      else
      {
LABEL_11:
        v9 = (char *)*((_QWORD *)v1 + 1);
        if (!v9)
          goto LABEL_15;
      }
      do
      {
        v10 = v9;
        v9 = *(char **)v9;
      }
      while (v9);
LABEL_3:
      v1 = v10;
    }
    while (v10 != v2);
  }
}

void sub_19E9FD158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QMux::State::dumpPowerDownState_sync(QMux::State *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::string::size_type size;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  std::string *v20;
  std::string v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v2 = (char *)*((_QWORD *)this + 32);
  v3 = (char *)*((_QWORD *)this + 33);
  if (v2 == v3)
    goto LABEL_29;
  v4 = 0;
  v5 = (char *)*((_QWORD *)this + 32);
  do
  {
    v6 = *((_QWORD *)v5 + 1);
    if (v6 && *(_QWORD *)(v6 + 8) != -1)
      ++v4;
    v5 += 16;
  }
  while (v5 != v3);
  if (!v4)
  {
LABEL_29:
    v17 = *((_QWORD *)this + 10);
    v18 = (char *)this + 40;
    if (*((char *)this + 63) < 0)
      v18 = *(const char **)v18;
    (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v17 + 24))(v17, 6, "[%s]     power down tags: %zu clients; all complete\n",
      v18,
      (v3 - v2) >> 4);
  }
  else
  {
    memset(&v21, 0, sizeof(v21));
    do
    {
      v7 = (std::__shared_weak_count *)*((_QWORD *)v2 + 1);
      if (v7)
      {
        v8 = std::__shared_weak_count::lock(v7);
        v23 = v8;
        if (v8)
        {
          v9 = v8;
          v10 = *(_QWORD *)v2;
          v22 = v10;
          if (v10)
          {
            size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
            if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = v21.__r_.__value_.__l.__size_;
            if (size)
              std::string::push_back(&v21, 44);
            v12 = *(char *)(v10 + 23);
            if (v12 >= 0)
              v13 = (const std::string::value_type *)v10;
            else
              v13 = *(const std::string::value_type **)v10;
            if (v12 >= 0)
              v14 = *(unsigned __int8 *)(v10 + 23);
            else
              v14 = *(_QWORD *)(v10 + 8);
            std::string::append(&v21, v13, v14);
          }
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
      }
      v2 += 16;
    }
    while (v2 != v3);
    v19 = (char *)this + 40;
    if (*((char *)this + 63) < 0)
      v19 = *(const char **)v19;
    v20 = &v21;
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v20 = (std::string *)v21.__r_.__value_.__r.__words[0];
    (*(void (**)(_QWORD, uint64_t, const char *, ...))(**((_QWORD **)this + 10) + 24))(*((_QWORD *)this + 10), 6, "[%s]     power down tags: %zu clients; remaining={%s}\n",
      v19,
      (uint64_t)(*((_QWORD *)this + 33) - *((_QWORD *)this + 32)) >> 4,
      (const char *)v20);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void sub_19E9FD348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t QMux::State::getDebugName(QMux::State *this)
{
  return (uint64_t)this + 40;
}

uint64_t QMux::State::getPrivateData(QMux::State *this)
{
  return *((_QWORD *)this + 24);
}

void QMux::State::invokeReset(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  std::string *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v3 = (std::__shared_weak_count *)a1[2];
    if (!v3)
      goto LABEL_18;
  }
  else
  {
    __p = *(std::string *)a2;
    v3 = (std::__shared_weak_count *)a1[2];
    if (!v3)
LABEL_18:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v4 = a1[1];
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    goto LABEL_18;
  v6 = v5;
  v7 = operator new(0x20uLL);
  *v7 = a1;
  v8 = (std::string *)(v7 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v7[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v9 = a1[3];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v7;
  v12[1] = v4;
  v12[2] = v6;
  dispatch_async_f(v9, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::State::invokeReset(std::string)::$_0>(QMux::State::invokeReset(std::string)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::State::invokeReset(std::string)::$_0,std::default_delete<QMux::State::invokeReset(std::string)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (v13)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_17:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_17;
}

void QMux::State::invokeReset_sync(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  const void **v23;
  int v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  const void *v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  const char *v37;
  std::string *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  NSObject *global_queue;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD block[5];
  std::__shared_weak_count *v50;
  std::string __p;
  std::string v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  void *v57[4];

  v53 = 0;
  v54 = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 104);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v54 = v5;
    if (v5)
    {
      v53 = *(_QWORD *)(a1 + 96);
      if (v53)
      {
        memset(&v52, 170, sizeof(v52));
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          v52 = *(std::string *)a2;
        v16 = *(uint64_t **)(a1 + 256);
        v17 = *(uint64_t **)(a1 + 264);
        if (v16 != v17)
        {
          v18 = 0;
          v19 = *(uint64_t **)(a1 + 256);
          do
          {
            v20 = v19[1];
            if (v20 && *(_QWORD *)(v20 + 8) != -1)
              ++v18;
            v19 += 2;
          }
          while (v19 != v17);
          if (v18)
          {
            while (1)
            {
              v21 = (std::__shared_weak_count *)v16[1];
              if (v21)
              {
                v22 = std::__shared_weak_count::lock(v21);
                v56 = v22;
                if (v22)
                  break;
              }
LABEL_27:
              v16 += 2;
              if (v16 == v17)
                goto LABEL_59;
            }
            v55 = *v16;
            v23 = (const void **)v55;
            if (!v55)
            {
              v28 = v22;
LABEL_55:
              p_shared_owners = (unint64_t *)&v28->__shared_owners_;
              do
                v36 = __ldaxr(p_shared_owners);
              while (__stlxr(v36 - 1, p_shared_owners));
              if (!v36)
              {
                ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                std::__shared_weak_count::__release_weak(v28);
              }
              goto LABEL_27;
            }
            v24 = *(char *)(v55 + 23);
            if (v24 >= 0)
              v25 = *(unsigned __int8 *)(v55 + 23);
            else
              v25 = *(_QWORD *)(v55 + 8);
            v26 = v25 + 3;
            memset(v57, 170, 24);
            if (v25 + 3 >= 0x7FFFFFFFFFFFFFF8)
              std::string::__throw_length_error[abi:ne180100]();
            if (v26 >= 0x17)
            {
              v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v26 | 7) != 0x17)
                v29 = v26 | 7;
              v30 = v29 + 1;
              v31 = (char *)operator new(v29 + 1);
              v57[1] = (void *)(v25 + 3);
              v57[2] = (void *)(v30 | 0x8000000000000000);
              v57[0] = v31;
              v27 = v31 + 3;
              *(_WORD *)v31 = 11552;
              v31[2] = 32;
            }
            else
            {
              v57[1] = 0;
              v57[2] = 0;
              v57[0] = (void *)2108704;
              HIBYTE(v57[2]) = v25 + 3;
              v27 = (char *)v57 + 3;
              if (!v25)
                goto LABEL_46;
            }
            if (v24 >= 0)
              v32 = v23;
            else
              v32 = *v23;
            memmove(v27, v32, v25);
LABEL_46:
            v27[v25] = 0;
            if (SHIBYTE(v57[2]) >= 0)
              v33 = (const std::string::value_type *)v57;
            else
              v33 = (const std::string::value_type *)v57[0];
            if (SHIBYTE(v57[2]) >= 0)
              v34 = HIBYTE(v57[2]);
            else
              v34 = (std::string::size_type)v57[1];
            std::string::append(&v52, v33, v34);
            if (SHIBYTE(v57[2]) < 0)
              operator delete(v57[0]);
            v28 = v56;
            if (!v56)
              goto LABEL_27;
            goto LABEL_55;
          }
        }
LABEL_59:
        v37 = (const char *)(a1 + 40);
        if (*(char *)(a1 + 63) < 0)
          v37 = *(const char **)v37;
        v38 = &v52;
        if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v38 = (std::string *)v52.__r_.__value_.__r.__words[0];
        (*(void (**)(_QWORD, uint64_t, const char *, ...))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), 6, "[%s] Triggering Reset with reason %s\n", v37, (const char *)v38);
        v39 = *(std::__shared_weak_count **)(a1 + 16);
        v57[0] = *(void **)(a1 + 8);
        if (!v39 || (v57[1] = std::__shared_weak_count::lock(v39)) == 0)
          std::__throw_bad_weak_ptr[abi:ne180100]();
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 1174405120;
        block[2] = ___ZN4QMux5State16invokeReset_syncERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
        block[3] = &__block_descriptor_tmp_88;
        block[4] = v53;
        v50 = v54;
        if (v54)
        {
          v40 = (unint64_t *)&v54->__shared_owners_;
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
        }
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__p, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
        else
          __p = v52;
        global_queue = dispatch_get_global_queue(2, 0);
        dispatch_async(global_queue, block);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v43 = v50;
        if (v50)
        {
          v44 = (unint64_t *)&v50->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v46 = (std::__shared_weak_count *)v57[1];
        if (v57[1])
        {
          v47 = (unint64_t *)((char *)v57[1] + 8);
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v52.__r_.__value_.__l.__data_);
          v5 = v54;
          if (!v54)
            return;
        }
        else
        {
          v5 = v54;
          if (!v54)
            return;
        }
        goto LABEL_13;
      }
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = (const char *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0)
    v6 = *(const char **)v6;
  if (*(char *)(a2 + 23) >= 0)
    v7 = (const char *)a2;
  else
    v7 = *(const char **)a2;
  (*(void (**)(_QWORD, uint64_t, const char *, ...))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), 6, "[%s] No reset invoker available; resetting QMux for reason=%s\n",
    v6,
    v7);
  QMux::State::restart_sync((QMIControl **)a1, v8, v9, v10, v11, v12, v13);
  if (v5)
  {
LABEL_13:
    v14 = (unint64_t *)&v5->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_19E9FD968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
  uint64_t v28;
  uint64_t v29;

  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v28);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v29 - 112);
  if (a26 < 0)
  {
    operator delete(__p);
    std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void QMux::State::handleBroadcastMessage_sync(uint64_t a1, uint64_t a2, const void *a3, size_t a4, unsigned __int16 *a5, unint64_t a6)
{
  size_t v7;
  unsigned int v10;
  const char *v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t *v17;
  unsigned int v18;
  BOOL v19;
  unint64_t v20;
  void **v21;
  BOOL v22;
  int v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  size_t v32;
  char *v33;
  void *v34;
  char *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  size_t v40;
  int v41;

  v7 = a4;
  if (a6 < 2)
    v10 = 0;
  else
    v10 = *a5;
  sLogBinaryToOsLog(*(capabilities::abs **)(a1 + 352), *(_DWORD *)(a1 + 200), 2u, *(unsigned __int8 *)(a2 + 5), v10, 0, (uint64_t)a3, a4);
  v11 = (const char *)*(unsigned int *)(a2 + 8);
  if ((_DWORD)v11 != 2)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x45E, "header.msgType", "==", "qmi::QMuxHeader::IND", v11, (const void *)2);
  v13 = (_QWORD *)(a1 + 120);
  v12 = *(_QWORD *)(a1 + 120);
  if (v12)
  {
    v14 = *(unsigned __int8 *)(a2 + 5);
    v15 = (_QWORD *)(a1 + 120);
    do
    {
      v18 = *(unsigned __int8 *)(v12 + 32);
      v19 = v18 == v14;
      if (v18 >= v14)
        v20 = 1;
      else
        v20 = 255;
      if (v19)
        v20 = *(_BYTE *)(v12 + 33) != 0;
      v16 = v20 >= 0x80;
      if (v20 >= 0x80)
        v17 = (uint64_t *)(v12 + 8);
      else
        v17 = (uint64_t *)v12;
      if (!v16)
        v15 = (_QWORD *)v12;
      v12 = *v17;
    }
    while (*v17);
    if (v15 != v13)
    {
      v21 = (void **)(a1 + 320);
      if (a3)
        v22 = v7 == 0;
      else
        v22 = 1;
      v23 = !v22;
      v41 = v23;
      do
      {
        if (*((unsigned __int8 *)v15 + 32) != *(unsigned __int8 *)(a2 + 5))
          return;
        v24 = (std::__shared_weak_count *)v15[6];
        if (!v24)
          goto LABEL_45;
        v25 = std::__shared_weak_count::lock(v24);
        if (!v25)
          goto LABEL_45;
        v26 = v25;
        v27 = v15[5];
        if (v27)
        {
          v28 = (const char *)(a1 + 40);
          if (*(char *)(a1 + 63) < 0)
            v28 = *(const char **)(a1 + 40);
          (*(void (**)(_QWORD, uint64_t, const char *, ...))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), 6, "[%s] handleReadData: Broadcast IND for QMI client (svc=%d client=%d msgid=0x%x)\n", v28, *(unsigned __int8 *)(a2 + 5), *((unsigned __int8 *)v15 + 33), v10);
          (*(void (**)(uint64_t, unsigned __int16 *, unint64_t))(*(_QWORD *)v27 + 40))(v27, a5, a6);
          if (*(_QWORD *)(a1 + 320) == *(_QWORD *)(a1 + 328)
            && QMIControl::getPowerModeForMsg_sync(*(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a2 + 5), v10) == 1)
          {
            v29 = mach_absolute_time();
            if (v41)
            {
              if ((v7 & 0x8000000000000000) != 0)
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              v30 = v29;
              v31 = (char *)operator new(v7);
              v32 = v7;
              v33 = v31;
              v40 = v32;
              memcpy(v31, a3, v32);
              v34 = *v21;
              if (*v21)
              {
                *(_QWORD *)(a1 + 328) = v34;
                operator delete(v34);
                *v21 = 0;
                *(_QWORD *)(a1 + 328) = 0;
                *(_QWORD *)(a1 + 336) = 0;
              }
              v35 = &v33[v40];
              *(_QWORD *)(a1 + 320) = v33;
              *(_QWORD *)(a1 + 328) = &v33[v40];
              v7 = v40;
              *(_QWORD *)(a1 + 336) = v35;
              *(_QWORD *)(a1 + 344) = v30;
            }
          }
        }
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v37 = __ldaxr(p_shared_owners);
        while (__stlxr(v37 - 1, p_shared_owners));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
          v38 = (_QWORD *)v15[1];
          if (!v38)
          {
            do
            {
LABEL_49:
              v39 = (_QWORD *)v15[2];
              v19 = *v39 == (_QWORD)v15;
              v15 = v39;
            }
            while (!v19);
            goto LABEL_28;
          }
        }
        else
        {
LABEL_45:
          v38 = (_QWORD *)v15[1];
          if (!v38)
            goto LABEL_49;
        }
        do
        {
          v39 = v38;
          v38 = (_QWORD *)*v38;
        }
        while (v38);
LABEL_28:
        v15 = v39;
      }
      while (v39 != v13);
    }
  }
}

void sub_19E9FDCD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
    std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void QMux::getQMIWakeReason(QMux *this@<X0>, const char *a2@<X5>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  QMux *v8;
  _QWORD v9[6];
  _QWORD *v10;
  uint64_t block;
  uint64_t v12;
  double (*v13)(uint64_t);
  void *v14;
  _OWORD *v15;
  _QWORD *v16;

  v5 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x472, "fState", "is not", "true", a2);
    v5 = *(_QWORD *)this;
  }
  v6 = MEMORY[0x1E0C809B0];
  v8 = this;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNKS1_16getQMIWakeReasonEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
  v9[3] = &__block_descriptor_tmp_145;
  v9[4] = v5 + 8;
  v9[5] = &v8;
  v10 = v9;
  v7 = *(NSObject **)(v5 + 24);
  if (*(_QWORD *)(v5 + 32))
  {
    *a3 = 0uLL;
    a3[1] = 0uLL;
    block = v6;
    v12 = 0x40000000;
    v13 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerF13QMIWakeReasonvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEE_block_invoke;
    v14 = &__block_descriptor_tmp_147;
    v15 = a3;
    v16 = &v10;
    dispatch_async_and_wait(v7, &block);
  }
  else
  {
    *a3 = 0uLL;
    a3[1] = 0uLL;
    block = v6;
    v12 = 0x40000000;
    v13 = ___ZN8dispatch9sync_implIRU13block_pointerF13QMIWakeReasonvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEE_block_invoke;
    v14 = &__block_descriptor_tmp_146;
    v15 = a3;
    v16 = &v10;
    dispatch_sync(v7, &block);
  }
}

_QWORD *QMux::State::getQMIWakeReason@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  char *v7;
  char *v8;

  v2 = this;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = (_BYTE *)this[40];
  v4 = (_BYTE *)this[41];
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if ((v6 & 0x8000000000000000) != 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - v5);
    *a2 = v7;
    v8 = &v7[v6];
    a2[2] = &v7[v6];
    this = memcpy(v7, v5, v6);
    a2[1] = v8;
  }
  a2[3] = v2[43];
  return this;
}

void sub_19E9FDEA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t QMux::State::getWriteData_sync(QMux::State *this, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t result;

  if (*((_DWORD *)this + 54) == 5 || (result = QMux::State::getWriteDataInternal_sync(this, a2, a3), !(_DWORD)result))
  {
    result = *((_QWORD *)this + 23);
    if (result)
    {
      (*(void (**)(uint64_t, QMux::State *, _QWORD))(*(_QWORD *)result + 64))(result, this, *((_QWORD *)this + 26));
      return 0;
    }
  }
  return result;
}

uint64_t QMuxQueueItem::serialize(QMuxQueueItem *this, void *__dst, unsigned int a3, unsigned int a4)
{
  size_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;

  LOWORD(v4) = 0;
  if (a4)
  {
    v5 = **((_QWORD **)this + 1);
    v6 = *(_QWORD *)(*((_QWORD *)this + 1) + 8) - v5;
    v7 = v6 > a3;
    v8 = v6 - a3;
    if (v7)
    {
      if (v8 >= a4)
        v4 = a4;
      else
        v4 = v8;
      memmove(__dst, (const void *)(v5 + a3), v4);
    }
  }
  return (unsigned __int16)v4;
}

uint64_t QMuxQueueItem::getLength(QMuxQueueItem *this)
{
  return (unsigned __int16)(*(_WORD *)(*((_QWORD *)this + 1) + 8) - **((_WORD **)this + 1));
}

void QMux::State::dumpSystemLog(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *global_queue;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD block[5];
  std::__shared_weak_count *v17;
  std::string __p;
  std::string v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v3 = *(std::__shared_weak_count **)(a1 + 104);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v21 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 96);
      v20 = v7;
      if (!v7)
        goto LABEL_22;
      memset(&v19, 170, sizeof(v19));
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v19 = *(std::string *)a2;
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 1174405120;
      block[2] = ___ZN4QMux5State13dumpSystemLogENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
      block[3] = &__block_descriptor_tmp_86;
      block[4] = v7;
      v17 = v6;
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
      else
        __p = v19;
      global_queue = dispatch_get_global_queue(2, 0);
      dispatch_async(global_queue, block);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v11 = v17;
      if (v17)
      {
        v12 = (unint64_t *)&v17->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
      v6 = v21;
      if (v21)
      {
LABEL_22:
        v14 = (unint64_t *)&v6->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
}

void sub_19E9FE150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  uint64_t v25;

  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v24);
  if (a24 < 0)
  {
    operator delete(__p);
    std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v25 - 48);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v25 - 48);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4QMux5State13dumpSystemLogENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (_QWORD *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 24))(v2, *v3);
  else
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 24))(v2, v3);
}

void __copy_helper_block_e8_32c44_ZTSNSt3__110shared_ptrI16ATCSResetInvokerEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v2;
  unint64_t *v3;
  unint64_t v4;
  std::string *v5;
  __int128 v6;

  v2 = *(_QWORD *)(a2 + 40);
  a1[1].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 32);
  a1[1].__r_.__value_.__r.__words[2] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 48);
    v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_19E9FE234(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c44_ZTSNSt3__110shared_ptrI16ATCSResetInvokerEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    v2 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v2)
      return;
  }
  else
  {
    v2 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v2)
      return;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

uint64_t ___ZN4QMux5State16invokeReset_syncERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (_QWORD *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v2 + 16))(v2, *v3, 1);
  else
    return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v3, 1);
}

BOOL QMux::State::isRunning_sync(QMux::State *this)
{
  return *((_DWORD *)this + 54) == 3;
}

BOOL QMux::State::isPoweredDown_sync(QMux::State *this)
{
  return *((_DWORD *)this + 54) == 4;
}

void QMux::State::enterPowerMode_sync(QMux::State *this, dispatch_object_t object, char *a3, uint64_t a4, uint64_t a5, const char *a6, const char *a7)
{
  int v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  unsigned int v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  NSObject *v22;
  void **v23;
  char *v24;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  const char *v28;
  unsigned int v29;
  const char *v30;
  char *v31;
  __int128 v32;
  void *__p[2];
  char v34;

  v7 = (int)a3;
  switch(*((_DWORD *)this + 54))
  {
    case 0:
      v20 = *((_QWORD *)this + 10);
      v21 = (char *)this + 40;
      if (*((char *)this + 63) < 0)
        v21 = *(const char **)v21;
      (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v20 + 24))(v20, 6, "[%s] enterPowerMode(%d) ignored (QMux is %s)\n", v21, (_DWORD)a3, "kStopped");
      return;
    case 1:
    case 2:
    case 3:
      if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
      {
        if (!*((_QWORD *)this + 28) && !*((_QWORD *)this + 30))
          goto LABEL_41;
        v16 = *((_QWORD *)this + 10);
        v17 = (char *)this + 40;
        if (*((char *)this + 63) < 0)
        {
          v17 = *(const char **)v17;
          v18 = *((_DWORD *)this + 54) - 1;
          if (v18 <= 4)
            goto LABEL_8;
        }
        else
        {
          v18 = *((_DWORD *)this + 54) - 1;
          if (v18 <= 4)
          {
LABEL_8:
            v19 = off_1E4153EE8[v18];
LABEL_32:
            QMux::State::powerStateString_sync((uint64_t)this, (char *)__p);
            if (v34 >= 0)
              v23 = __p;
            else
              v23 = (void **)__p[0];
            (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v16 + 24))(v16, 6, "[%s] Error with mainState=%s, powerState=%s\n", v17, v19, (const char *)v23);
            if (v34 < 0)
              operator delete(__p[0]);
            v24 = (char *)operator new(0x20uLL);
            v31 = v24;
            v32 = xmmword_19EA1F1A0;
            strcpy(v24, "Baseband_QMI_LowPower_Error");
            QMux::State::dumpSystemLog((uint64_t)this, (uint64_t)&v31);
            operator delete(v24);
            v25 = *((_QWORD *)this + 28);
            *((_QWORD *)this + 28) = 0;
            if (v25)
            {
              dispatch_group_leave(v25);
              dispatch_release(v25);
            }
            v26 = *((_QWORD *)this + 30);
            *((_QWORD *)this + 30) = 0;
            if (v26)
            {
              dispatch_group_leave(v26);
              dispatch_release(v26);
            }
            goto LABEL_41;
          }
        }
        v19 = "kStopped";
        goto LABEL_32;
      }
      if (*((_QWORD *)this + 28))
        _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x52B, "!fPowerDownState", "is not", "true", v14);
      if (*((_QWORD *)this + 30))
        _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x52C, "!fPowerUpState", "is not", "true", v14);
LABEL_41:
      if (!v7)
      {
        v28 = (char *)this + 40;
        if (*((char *)this + 63) < 0)
        {
          v28 = *(const char **)v28;
          v29 = *((_DWORD *)this + 54) - 1;
          if (v29 <= 4)
            goto LABEL_51;
        }
        else
        {
          v29 = *((_DWORD *)this + 54) - 1;
          if (v29 <= 4)
          {
LABEL_51:
            v30 = off_1E4153EE8[v29];
LABEL_54:
            (*(void (**)(_QWORD, uint64_t, const char *, ...))(**((_QWORD **)this + 10) + 24))(*((_QWORD *)this + 10), 6, "[%s] enterPowerMode(%d) ignored (QMux is %s)\n", v28, 0, v30);
            return;
          }
        }
        v30 = "kStopped";
        goto LABEL_54;
      }
      if (object)
      {
        dispatch_retain(object);
        dispatch_retain(object);
        dispatch_group_enter(object);
      }
      v27 = *((_QWORD *)this + 28);
      *((_QWORD *)this + 28) = object;
      if (v27)
      {
        dispatch_group_leave(v27);
        dispatch_release(v27);
      }
      if (object)
        dispatch_release(object);
      QMux::State::powerDown_sync(this, v10, v11, v12, v13, v14, v15);
      return;
    case 4:
      if ((_DWORD)a3)
        _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x515, "targetProfile", "==", "qmi::kQMIPower_Normal", (const char *)a3, 0);
      if (*((_QWORD *)this + 28))
        _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x516, "!fPowerDownState", "is not", "true", a6);
      if (*((_QWORD *)this + 30))
        _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x517, "!fPowerUpState", "is not", "true", a6);
      if (object)
      {
        dispatch_retain(object);
        dispatch_retain(object);
        dispatch_group_enter(object);
      }
      v22 = *((_QWORD *)this + 30);
      *((_QWORD *)this + 30) = object;
      if (v22)
      {
        dispatch_group_leave(v22);
        dispatch_release(v22);
      }
      if (object)
        dispatch_release(object);
      QMux::State::powerUp_sync(this);
      return;
    case 5:
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x50D, "false", "is not", "true", "No way to call _sync functions after in kOffline; refs should be gone!",
        a7);
      return;
    default:
      return;
  }
}

void sub_19E9FE768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  operator delete(v21);
  _Unwind_Resume(a1);
}

void QMux::State::powerUp_sync(QMux::State *this)
{
  uint64_t v2;
  const char *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  NSObject *v28;
  _QWORD *v29;
  __int128 v30;

  v2 = *((_QWORD *)this + 10);
  v3 = (char *)this + 40;
  v4 = (char *)this + 40;
  if (*((char *)this + 63) < 0)
    v4 = *(const char **)v3;
  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v2 + 24))(v2, 6, "[%s] Exiting low power mode\n", v4);
  QMux::State::setMainState((uint64_t)this, 3, v5, v6, v7, v8);
  if (*((_QWORD *)this + 30))
  {
    QMIControl::setPowerMode_sync(*((_QWORD **)this + 8), 0);
    v10 = *((_QWORD *)this + 10);
    if ((*((char *)this + 63) & 0x80000000) == 0)
      goto LABEL_5;
  }
  else
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x541, "fPowerUpState", "is not", "true", v9);
    QMIControl::setPowerMode_sync(*((_QWORD **)this + 8), 0);
    v10 = *((_QWORD *)this + 10);
    if ((*((char *)this + 63) & 0x80000000) == 0)
      goto LABEL_5;
  }
  v3 = *(const char **)v3;
LABEL_5:
  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v10 + 24))(v10, 6, "[%s] EXTRA:     -- wait for QMIControl to set QMI to power up\n", v3);
  v11 = *((_QWORD *)this + 30);
  if (v11)
    dispatch_retain(*((dispatch_object_t *)this + 30));
  v12 = dispatch_group_create();
  (*(void (**)(_QWORD, NSObject *))(**((_QWORD **)this + 8) + 120))(*((_QWORD *)this + 8), v12);
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v13 || (v14 = std::__shared_weak_count::lock(v13)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v15 = v14;
  p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v15);
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v20 || (v21 = *((_QWORD *)this + 1), (v22 = std::__shared_weak_count::lock(v20)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v23 = v22;
  *(_QWORD *)&v30 = v21;
  *((_QWORD *)&v30 + 1) = v22;
  v24 = (unint64_t *)&v22->__shared_weak_owners_;
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  v26 = (unint64_t *)&v22->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v23);
  }
  if (v11)
    dispatch_retain(v11);
  v28 = *((_QWORD *)this + 3);
  v29 = operator new(0x18uLL);
  *(_OWORD *)v29 = v30;
  v29[2] = v11;
  dispatch_group_notify_f(v12, v28, v29, (dispatch_function_t)dispatch::detail::group_notify<QMux::State::powerUp_sync(void)::$_0>(dispatch_group_s *,dispatch_queue_s *,QMux::State::powerUp_sync(void)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::__shared_weak_count::__release_weak(v15);
  if (v12)
    dispatch_release(v12);
  if (v11)
    dispatch_release(v11);
}

void sub_19E9FE9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  va_list va;

  va_start(va, a3);
  QMux::State::powerUp_sync(void)::$_0::~$_0((uint64_t)va);
  std::__shared_weak_count::__release_weak(v5);
  if (v4)
  {
    dispatch_release(v4);
    if (!v3)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if (!v3)
  {
    goto LABEL_3;
  }
  dispatch_release(v3);
  _Unwind_Resume(a1);
}

uint64_t QMux::State::powerUp_sync(void)::$_0::~$_0(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;

  v2 = *(NSObject **)(a1 + 16);
  if (v2)
    dispatch_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void QMux::State::powerUp_signalClients_sync(QMux::State *this)
{
  uint64_t v2;
  const char **v3;
  const char *v4;
  QMux::State *v5;
  const char *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  QMux::State *v13;
  QMux::State *v14;
  BOOL v15;

  v2 = *((_QWORD *)this + 10);
  v3 = (const char **)((char *)this + 40);
  v4 = (char *)this + 40;
  if (*((char *)this + 63) < 0)
    v4 = *v3;
  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v2 + 24))(v2, 6, "[%s] Normal power mode resumed; signalling all clients\n",
    v4);
  v5 = (QMux::State *)*((_QWORD *)this + 14);
  if (v5 != (QMux::State *)((char *)this + 120))
  {
    do
    {
      v6 = (char *)this + 40;
      if (*((char *)this + 63) < 0)
        v6 = *v3;
      (*(void (**)(_QWORD, uint64_t, const char *, ...))(**((_QWORD **)this + 10) + 24))(*((_QWORD *)this + 10), 6, "[%s] EXTRA:     -- signal QMIClient(svc=%d client=%d) to resume\n", v6, *((unsigned __int8 *)v5 + 32), *((unsigned __int8 *)v5 + 33));
      v7 = (std::__shared_weak_count *)*((_QWORD *)v5 + 6);
      if (!v7)
        goto LABEL_15;
      v8 = std::__shared_weak_count::lock(v7);
      if (!v8)
        goto LABEL_15;
      v9 = v8;
      v10 = *((_QWORD *)v5 + 5);
      if (v10)
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 88))(v10, *((_QWORD *)this + 30), 0);
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        v13 = (QMux::State *)*((_QWORD *)v5 + 1);
        if (!v13)
        {
          do
          {
LABEL_19:
            v14 = (QMux::State *)*((_QWORD *)v5 + 2);
            v15 = *(_QWORD *)v14 == (_QWORD)v5;
            v5 = v14;
          }
          while (!v15);
          goto LABEL_5;
        }
      }
      else
      {
LABEL_15:
        v13 = (QMux::State *)*((_QWORD *)v5 + 1);
        if (!v13)
          goto LABEL_19;
      }
      do
      {
        v14 = v13;
        v13 = *(QMux::State **)v13;
      }
      while (v13);
LABEL_5:
      v5 = v14;
    }
    while (v14 != (QMux::State *)((char *)this + 120));
  }
}

void sub_19E9FEBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void QMux::State::getClientPowerDownSession_sync(QMux::State *this@<X0>, const qmi::QMuxClientIface *a2@<X1>, NSObject **a3@<X8>)
{
  char *v4;
  std::string __p;

  v4 = (char *)this + 248;
  if (*((char *)a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  else
    __p = *(std::string *)((char *)a2 + 8);
  ctu::TrackedGroup::fork(a3, (uint64_t)v4, (uint64_t *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_19E9FEC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__int128 *ctu::TrackedGroup::fork(NSObject **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  char v6;
  NSObject *v7;
  NSObject *v8;
  char *v9;
  unint64_t *v10;
  NSObject *v11;
  NSObject *global_queue;
  NSObject *v13;
  unint64_t v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  char *v42;
  __int128 v43;
  char *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  __int128 *result;
  __int128 *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  void *v54[2];
  __int128 v55;
  __int128 v56;
  _QWORD v57[2];
  void *v58;
  std::__shared_weak_count *v59;
  dispatch_group_t group;
  uint64_t v61;
  void *object;
  _BYTE v63[24];
  _BYTE *v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  v57[0] = a3[1];
  *(_QWORD *)((char *)v57 + 7) = *(uint64_t *)((char *)a3 + 15);
  v6 = *((_BYTE *)a3 + 23);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  *(_OWORD *)v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v7 = dispatch_group_create();
  v8 = v7;
  *a1 = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(v8);
    dispatch_release(v8);
  }
  v9 = (char *)operator new(0x30uLL);
  *((_QWORD *)v9 + 1) = 0;
  v10 = (unint64_t *)(v9 + 8);
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = off_1E4153B10;
  *((_QWORD *)v9 + 3) = v5;
  *((_QWORD *)v9 + 4) = v57[0];
  *(_QWORD *)(v9 + 39) = *(_QWORD *)((char *)v57 + 7);
  v9[47] = v6;
  v57[0] = 0;
  *(_QWORD *)((char *)v57 + 7) = 0;
  *(_QWORD *)&v53 = v9 + 24;
  *((_QWORD *)&v53 + 1) = v9;
  v11 = *(NSObject **)a2;
  if (*(_QWORD *)a2)
  {
    dispatch_retain(*(dispatch_object_t *)a2);
    dispatch_group_enter(v11);
  }
  global_queue = dispatch_get_global_queue(0, 0);
  v13 = global_queue;
  if (global_queue)
    dispatch_retain(global_queue);
  v58 = v9 + 24;
  v59 = (std::__shared_weak_count *)v9;
  do
    v14 = __ldxr(v10);
  while (__stxr(v14 + 1, v10));
  group = v11;
  if (v11)
  {
    dispatch_retain(v11);
    dispatch_group_enter(v11);
  }
  v64 = 0;
  v61 = 0;
  object = 0;
  v54[0] = 0;
  v54[1] = 0;
  *((_QWORD *)&v56 + 1) = 0;
  v15 = operator new(0x48uLL);
  v16 = v15;
  v17 = v63;
  *v15 = v9 + 24;
  v15[1] = v9;
  v59 = 0;
  group = 0;
  v58 = 0;
  v15[3] = 0;
  v15[4] = 0;
  v15[2] = v11;
  if (!v64)
  {
    v15[8] = 0;
    v61 = 0;
    object = 0;
    v18 = v64;
    v64 = 0;
    if (v18 != v63)
      goto LABEL_13;
LABEL_16:
    v19 = 4;
    v18 = v63;
    goto LABEL_17;
  }
  v15[8] = v64;
  v61 = 0;
  object = 0;
  v18 = 0;
  v64 = 0;
  if (!v63)
    goto LABEL_16;
LABEL_13:
  if (!v18)
    goto LABEL_18;
  v19 = 5;
LABEL_17:
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_18:
  dispatch_group_notify_f(v8, v13, v16, (dispatch_function_t)dispatch::detail::group_notify<ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  v20 = v64;
  object = 0;
  v64 = 0;
  if (v20 == v63)
  {
    v21 = 4;
    v20 = v63;
  }
  else
  {
    if (!v20)
    {
      v61 = 0;
      v23 = group;
      if (!group)
        goto LABEL_29;
      goto LABEL_28;
    }
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
  v61 = 0;
  if (v64 == v63)
  {
    v22 = 4;
  }
  else
  {
    if (!v64)
      goto LABEL_27;
    v22 = 5;
    v17 = v64;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v22))(v17);
LABEL_27:
  v23 = group;
  if (group)
  {
LABEL_28:
    dispatch_group_leave(v23);
    dispatch_release(group);
  }
LABEL_29:
  if (v59)
  {
    p_shared_owners = &v59->__shared_owners_;
    do
      v25 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v25 - 1, (unint64_t *)p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (v13)
    dispatch_release(v13);
  v27 = *(char **)(a2 + 16);
  v26 = *(_QWORD *)(a2 + 24);
  if ((unint64_t)v27 >= v26)
  {
    v32 = *(char **)(a2 + 8);
    v33 = (v27 - v32) >> 4;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v35 = v26 - (_QWORD)v32;
    if (v35 >> 3 > v34)
      v34 = v35 >> 3;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
      v36 = 0xFFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    if (v36 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v37 = (char *)operator new(16 * v36);
    v38 = &v37[16 * v33];
    v39 = *((_QWORD *)&v53 + 1);
    *(_OWORD *)v38 = v53;
    if (v39)
    {
      v40 = (unint64_t *)(v39 + 16);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
      v32 = *(char **)(a2 + 8);
      v27 = *(char **)(a2 + 16);
    }
    v42 = &v37[16 * v36];
    v31 = v38 + 16;
    if (v27 == v32)
    {
      *(_QWORD *)(a2 + 8) = v38;
      *(_QWORD *)(a2 + 16) = v31;
      *(_QWORD *)(a2 + 24) = v42;
    }
    else
    {
      do
      {
        v43 = *((_OWORD *)v27 - 1);
        v27 -= 16;
        *((_OWORD *)v38 - 1) = v43;
        v38 -= 16;
        *(_QWORD *)v27 = 0;
        *((_QWORD *)v27 + 1) = 0;
      }
      while (v27 != v32);
      v32 = *(char **)(a2 + 8);
      v44 = *(char **)(a2 + 16);
      *(_QWORD *)(a2 + 8) = v38;
      *(_QWORD *)(a2 + 16) = v31;
      *(_QWORD *)(a2 + 24) = v42;
      while (v44 != v32)
      {
        v45 = (std::__shared_weak_count *)*((_QWORD *)v44 - 1);
        if (v45)
          std::__shared_weak_count::__release_weak(v45);
        v44 -= 16;
      }
    }
    if (v32)
      operator delete(v32);
  }
  else
  {
    *(_QWORD *)v27 = v53;
    v28 = *((_QWORD *)&v53 + 1);
    *((_QWORD *)v27 + 1) = *((_QWORD *)&v53 + 1);
    if (v28)
    {
      v29 = (unint64_t *)(v28 + 16);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v31 = v27 + 16;
  }
  *(_QWORD *)(a2 + 16) = v31;
  if (v11)
  {
    dispatch_group_leave(v11);
    dispatch_release(v11);
  }
  if (!*((_QWORD *)&v53 + 1))
    goto LABEL_70;
  v46 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (!v47)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v53 + 1) + 16))(*((_QWORD *)&v53 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v53 + 1));
    v48 = *((_QWORD *)&v56 + 1);
    if (!*((_QWORD *)&v56 + 1))
      goto LABEL_73;
  }
  else
  {
LABEL_70:
    v48 = *((_QWORD *)&v56 + 1);
    if (!*((_QWORD *)&v56 + 1))
      goto LABEL_73;
  }
  if (v54[0])
  {
    v58 = v54[1];
    *(void **)&v53 = v54[0];
    (*(void (**)(uint64_t, void **, __int128 *))(*(_QWORD *)v48 + 48))(v48, &v58, &v53);
  }
LABEL_73:
  if (v54[1])
    os_release(v54[1]);
  result = (__int128 *)*((_QWORD *)&v56 + 1);
  v50 = &v55;
  v54[1] = 0;
  *((_QWORD *)&v56 + 1) = 0;
  if (result == &v55)
  {
    v51 = 4;
    result = &v55;
  }
  else
  {
    if (!result)
      return result;
    v51 = 5;
  }
  result = (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v51))();
  v54[0] = 0;
  if (*((__int128 **)&v56 + 1) == &v55)
  {
    v52 = 4;
  }
  else
  {
    if (!*((_QWORD *)&v56 + 1))
      return result;
    v52 = 5;
    v50 = (__int128 *)*((_QWORD *)&v56 + 1);
  }
  return (__int128 *)(*(uint64_t (**)(__int128 *))(*(_QWORD *)v50 + 8 * v52))(v50);
}

void sub_19E9FF200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  NSObject *v3;
  dispatch_group_t *v4;
  NSObject *v5;
  NSObject *v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1}::~signpost_interval((uint64_t *)va2);
  if (v5)
  {
    dispatch_release(v5);
    if (!v3)
    {
LABEL_6:
      std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
      v7 = *v4;
      if (*v4)
      {
        dispatch_group_leave(*v4);
        dispatch_release(v7);
      }
      ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)va1);
      _Unwind_Resume(a1);
    }
  }
  else if (!v3)
  {
    goto LABEL_6;
  }
  dispatch_group_leave(v3);
  dispatch_release(v3);
  goto LABEL_6;
}

void QMux::State::startPowerDownWatchdog_sync(QMux::State *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t i;
  std::__shared_weak_count *v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t j;
  std::__shared_weak_count *v12;
  dispatch_source_t v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  NSObject *v23;
  unint64_t v24;
  NSObject *v25;
  dispatch_time_t v26;
  _QWORD handler[6];
  std::__shared_weak_count *v28;

  v2 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v2)
    dispatch_release(v2);
  v3 = *((_QWORD *)this + 32);
  for (i = *((_QWORD *)this + 33); i != v3; i -= 16)
  {
    v5 = *(std::__shared_weak_count **)(i - 8);
    if (v5)
      std::__shared_weak_count::__release_weak(v5);
  }
  *((_QWORD *)this + 33) = v3;
  v6 = *((_QWORD *)this + 35);
  if (v6)
  {
    dispatch_source_cancel(v6);
    v7 = *((_QWORD *)this + 35);
    *((_QWORD *)this + 35) = 0;
    if (v7)
      dispatch_release(v7);
  }
  v8 = *((_QWORD *)this + 29);
  if (v8)
    dispatch_retain(*((dispatch_object_t *)this + 29));
  v9 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = v8;
  if (v9)
    dispatch_release(v9);
  v10 = *((_QWORD *)this + 32);
  for (j = *((_QWORD *)this + 33); j != v10; j -= 16)
  {
    v12 = *(std::__shared_weak_count **)(j - 8);
    if (v12)
      std::__shared_weak_count::__release_weak(v12);
  }
  *((_QWORD *)this + 33) = v10;
  v13 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, *((dispatch_queue_t *)this + 3));
  v14 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = v13;
  if (v14)
  {
    dispatch_release(v14);
    v13 = (dispatch_source_t)*((_QWORD *)this + 35);
  }
  if (v13)
  {
    v15 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (!v15 || (v16 = *((_QWORD *)this + 1), (v17 = std::__shared_weak_count::lock(v15)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v18 = v17;
    p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
    do
      v20 = __ldxr(p_shared_weak_owners);
    while (__stxr(v20 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v18);
    }
    v23 = *((_QWORD *)this + 35);
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 1174405120;
    handler[2] = ___ZN4QMux5State27startPowerDownWatchdog_syncEv_block_invoke;
    handler[3] = &__block_descriptor_tmp_109;
    handler[4] = this;
    handler[5] = v16;
    v28 = v18;
    do
      v24 = __ldxr(p_shared_weak_owners);
    while (__stxr(v24 + 1, p_shared_weak_owners));
    dispatch_source_set_event_handler(v23, handler);
    v25 = *((_QWORD *)this + 35);
    v26 = dispatch_time(0, 9000000000);
    dispatch_source_set_timer(v25, v26, 0x218711A00uLL, 0x1DCD6500uLL);
    dispatch_activate(*((dispatch_object_t *)this + 35));
    if (v28)
      std::__shared_weak_count::__release_weak(v28);
    std::__shared_weak_count::__release_weak(v18);
  }
}

void ___ZN4QMux5State27startPowerDownWatchdog_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  QMux::State *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (QMux::State *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5] && *((_QWORD *)v3 + 35))
        QMux::State::dumpPowerDownState_sync(v3);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_19E9FF53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrIN4QMux5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrIN4QMux5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void QMux::State::powerDown_configIndSet_sync(QMux::State *this)
{
  uint64_t v2;
  const char *v3;
  char *v4;
  char *v5;
  char *v6;
  unsigned int v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  _QWORD **v16;
  _QWORD *v17[2];

  v2 = *((_QWORD *)this + 10);
  v3 = (char *)this + 40;
  if (*((char *)this + 63) < 0)
    v3 = *(const char **)v3;
  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v2 + 24))(v2, 6, "[%s] Client power-down complete; configuring indication sets for power mode %d\n",
    v3,
    1);
  v4 = (char *)*((_QWORD *)this + 14);
  v5 = (char *)this + 120;
  if (v4 != (char *)this + 120)
  {
    do
    {
      v7 = v4[32];
      if (!v4[32])
      {
        v15 = (char *)*((_QWORD *)v4 + 1);
        if (v15)
        {
          do
          {
            v6 = v15;
            v15 = *(char **)v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v6 = (char *)*((_QWORD *)v4 + 2);
            v12 = *(_QWORD *)v6 == (_QWORD)v4;
            v4 = v6;
          }
          while (!v12);
        }
        goto LABEL_7;
      }
      v17[0] = 0;
      v17[1] = 0;
      v16 = v17;
      while (1)
      {
        v8 = (std::__shared_weak_count *)*((_QWORD *)v4 + 6);
        if (v8)
        {
          v9 = std::__shared_weak_count::lock(v8);
          if (v9)
          {
            v10 = *((_QWORD *)v4 + 5);
            if (v10)
              (*(void (**)(uint64_t, _QWORD ***, uint64_t))(*(_QWORD *)v10 + 96))(v10, &v16, 1);
          }
          v11 = (char *)*((_QWORD *)v4 + 1);
          if (!v11)
          {
            do
            {
LABEL_19:
              v6 = (char *)*((_QWORD *)v4 + 2);
              v12 = *(_QWORD *)v6 == (_QWORD)v4;
              v4 = v6;
            }
            while (!v12);
            goto LABEL_21;
          }
        }
        else
        {
          v9 = 0;
          v11 = (char *)*((_QWORD *)v4 + 1);
          if (!v11)
            goto LABEL_19;
        }
        do
        {
          v6 = v11;
          v11 = *(char **)v11;
        }
        while (v11);
LABEL_21:
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        if (v6 == v5)
          break;
        v4 = v6;
        if (v6[32] != v7)
          goto LABEL_6;
      }
      v6 = (char *)this + 120;
LABEL_6:
      QMIControl::configurePowerMode_sync(*((_QWORD *)this + 8), (char *)1, v7, (char *)&v16);
      std::__tree<unsigned short>::destroy((uint64_t)&v16, v17[0]);
LABEL_7:
      v4 = v6;
    }
    while (v6 != v5);
  }
}

void sub_19E9FF748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  std::__tree<unsigned short>::destroy((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

void sub_19E9FF760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, _QWORD *a15)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::__tree<unsigned short>::destroy((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

uint64_t QMux::State::powerDown_finish_sync(QMux::State *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v7;
  const char *v8;
  const char *v9;
  const char *v10;

  if (*((_QWORD *)this + 28))
  {
    v7 = *((_QWORD *)this + 10);
    v8 = (char *)this + 40;
    v9 = (char *)this + 40;
    if ((*((char *)this + 63) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x622, "fPowerDownState", "is not", "true", a6);
    v7 = *((_QWORD *)this + 10);
    v8 = (char *)this + 40;
    v9 = (char *)this + 40;
    if ((*((char *)this + 63) & 0x80000000) == 0)
      goto LABEL_3;
  }
  v9 = *(const char **)v8;
LABEL_3:
  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v7 + 24))(v7, 6, "[%s] Power-down configuration done; entering power-down mode %d\n",
    v9,
    1);
  if (*((_QWORD *)this + 22))
  {
    v10 = v8;
    if (*((char *)this + 63) < 0)
      v10 = *(const char **)v8;
    (*(void (**)(_QWORD, uint64_t, const char *, ...))(**((_QWORD **)this + 10) + 24))(*((_QWORD *)this + 10), 6, "[%s] ERROR: QMux should be powered down but the send queue is not empty!\n", v10);
    if (*((_QWORD *)this + 22))
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x62A, "fSendQueue.empty()", "==", "true", 0, (const void *)1);
  }
  QMIControl::setPowerMode_sync(*((_QWORD **)this + 8), 1u);
  if (*((char *)this + 63) < 0)
    v8 = *(const char **)v8;
  (*(void (**)(_QWORD, uint64_t, const char *, ...))(**((_QWORD **)this + 10) + 24))(*((_QWORD *)this + 10), 6, "[%s] EXTRA:     -- wait for QMIControl to set the power mode\n", v8);
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 8) + 120))(*((_QWORD *)this + 8), *((_QWORD *)this + 28));
  return QMux::State::setMainState(this, 4);
}

void QMux::State::setLogger_sync(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = *a2;
  v2 = a2[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v3;
  *(_QWORD *)(a1 + 88) = v2;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void QMux::QMux(QMux *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
}

{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
}

QMux *QMux::QMux(QMux *a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t *a5, uint64_t a6, int a7, char a8)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  int v15;
  const char *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v25[4];
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  _QWORD block[6];

  v12 = (std::__shared_weak_count *)a5[1];
  v25[0] = *a5;
  v25[1] = (uint64_t)v12;
  if (v12)
  {
    p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
  }
  if (a7)
    v15 = 2;
  else
    v15 = 1;
  QMux::State::create(a4, 0, v25, v15, a8, a1);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  if (a2)
  {
    v18 = *(_QWORD *)a1;
    v17 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
    v25[2] = *(_QWORD *)a1;
    v25[3] = (uint64_t)v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    if (!v18)
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x69B, "ptr", "is not", "true", v16);
    v27 = a3;
    v28 = a2;
    v26[0] = v18;
    v26[1] = &v28;
    v26[2] = &v27;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS2_18setDriverAndCookieEP13ATCSIPCDriverPvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    block[3] = &__block_descriptor_tmp_137;
    block[4] = v18 + 8;
    block[5] = v26;
    v21 = *(NSObject **)(v18 + 24);
    if (*(_QWORD *)(v18 + 32))
    {
      dispatch_async_and_wait(v21, block);
      if (!v17)
        goto LABEL_23;
    }
    else
    {
      dispatch_sync(v21, block);
      if (!v17)
      {
LABEL_23:
        QMux::start(a1);
        return a1;
      }
    }
    v22 = (unint64_t *)&v17->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    goto LABEL_23;
  }
  return a1;
}

{
  return QMux::QMux(a1, a2, a3, a4, a5, 0, a7, a8);
}

void sub_19E9FFB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

void sub_19E9FFB58(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (!v1)
    _Unwind_Resume(exception_object);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(exception_object);
}

void QMux::setDriverAndCookie(QMux *this, ATCSIPCDriver *a2, void *a3, uint64_t a4, uint64_t a5, const char *a6)
{
  std::__shared_weak_count *v8;
  QMux::State *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v9 = *(QMux::State **)this;
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if (!v9)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x69B, "ptr", "is not", "true", a6);
  QMux::State::setDriverAndCookie(v9, a2, a3);
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_19E9FFC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QMux::start(QMux *this)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t *p_shared_owners;
  NSObject *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;

  v1 = *(_QWORD **)this;
  if (*(_QWORD *)this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 + 1, v3));
    }
    v5 = (std::__shared_weak_count *)v1[2];
    if (!v5 || (v6 = v1[1], (v7 = std::__shared_weak_count::lock(v5)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v8 = v7;
    v9 = operator new(0x10uLL);
    *v9 = v1;
    v9[1] = v2;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    v11 = v1[3];
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v13 = operator new(0x18uLL);
    *v13 = v9;
    v13[1] = v6;
    v13[2] = v8;
    dispatch_async_f(v11, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::start(void)::$_0>(QMux::start(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::start(void)::$_0,dispatch_queue_s *::default_delete<QMux::start(void)::$_0>>)::{lambda(void *)#1}::__invoke);
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

QMux *QMux::QMux(QMux *a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, int a6, char a7)
{
  const char *v14;
  size_t v15;
  size_t v16;
  __int128 *p_dst;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  int v25;
  const char *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  NSObject *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  _QWORD v40[3];
  uint64_t v41;
  uint64_t v42;
  __int128 __dst;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  _QWORD *v47;

  if ((a4 - 1) > 9)
    v14 = "qmux";
  else
    v14 = off_1E4153F10[a4 - 1];
  v15 = strlen(v14);
  if (v15 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v16 = v15;
  v35 = a3;
  if (v15 >= 0x17)
  {
    v20 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v20 = v15 | 7;
    v21 = v20 + 1;
    p_dst = (__int128 *)operator new(v20 + 1);
    *((_QWORD *)&__dst + 1) = v16;
    v44 = v21 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
LABEL_12:
    memcpy(p_dst, v14, v16);
    *((_BYTE *)p_dst + v16) = 0;
    v22 = *a5;
    v19 = (std::__shared_weak_count *)a5[1];
    v36 = v22;
    v37 = v19;
    if (!v19)
      goto LABEL_15;
LABEL_13:
    p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v24 = __ldxr(p_shared_weak_owners);
    while (__stxr(v24 + 1, p_shared_weak_owners));
    goto LABEL_15;
  }
  HIBYTE(v44) = v15;
  p_dst = &__dst;
  if (v15)
    goto LABEL_12;
  LOBYTE(__dst) = 0;
  v18 = *a5;
  v19 = (std::__shared_weak_count *)a5[1];
  v36 = v18;
  v37 = v19;
  if (v19)
    goto LABEL_13;
LABEL_15:
  if (a6)
    v25 = 2;
  else
    v25 = 1;
  QMux::State::create(&__dst, a4, &v36, v25, a7, a1);
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  if ((SHIBYTE(v44) & 0x80000000) == 0)
  {
    if (!a2)
      return a1;
LABEL_24:
    v27 = *(_QWORD *)a1;
    v28 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
    v38 = *(_QWORD *)a1;
    v39 = v28;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(p_shared_owners);
      while (__stxr(v30 + 1, p_shared_owners));
    }
    if (!v27)
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x69B, "ptr", "is not", "true", v26);
    v41 = v35;
    v42 = a2;
    v40[0] = v27;
    v40[1] = &v42;
    v40[2] = &v41;
    *(_QWORD *)&__dst = MEMORY[0x1E0C809B0];
    *((_QWORD *)&__dst + 1) = 0x40000000;
    v44 = (unint64_t)___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS2_18setDriverAndCookieEP13ATCSIPCDriverPvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    v45 = &__block_descriptor_tmp_137;
    v46 = v27 + 8;
    v47 = v40;
    v31 = *(NSObject **)(v27 + 24);
    if (*(_QWORD *)(v27 + 32))
    {
      dispatch_async_and_wait(v31, &__dst);
      if (!v28)
        goto LABEL_37;
    }
    else
    {
      dispatch_sync(v31, &__dst);
      if (!v28)
      {
LABEL_37:
        QMux::start(a1);
        return a1;
      }
    }
    v32 = (unint64_t *)&v28->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
    goto LABEL_37;
  }
  operator delete((void *)__dst);
  if (a2)
    goto LABEL_24;
  return a1;
}

void sub_19E9FFFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

void sub_19E9FFFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__shared_weak_count *v24;

  if (v24)
    std::__shared_weak_count::__release_weak(v24);
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

QMux *QMux::QMux(QMux *a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t *a5, int a6, char a7)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  int v14;
  const char *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v24[4];
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  _QWORD block[6];

  v11 = (std::__shared_weak_count *)a5[1];
  v24[0] = *a5;
  v24[1] = (uint64_t)v11;
  if (v11)
  {
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
  }
  if (a6)
    v14 = 2;
  else
    v14 = 1;
  QMux::State::create(a4, 0, v24, v14, a7, a1);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  if (a2)
  {
    v17 = *(_QWORD *)a1;
    v16 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
    v24[2] = *(_QWORD *)a1;
    v24[3] = (uint64_t)v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    if (!v17)
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x69B, "ptr", "is not", "true", v15);
    v26 = a3;
    v27 = a2;
    v25[0] = v17;
    v25[1] = &v27;
    v25[2] = &v26;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS2_18setDriverAndCookieEP13ATCSIPCDriverPvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    block[3] = &__block_descriptor_tmp_137;
    block[4] = v17 + 8;
    block[5] = v25;
    v20 = *(NSObject **)(v17 + 24);
    if (*(_QWORD *)(v17 + 32))
    {
      dispatch_async_and_wait(v20, block);
      if (!v16)
        goto LABEL_23;
    }
    else
    {
      dispatch_sync(v20, block);
      if (!v16)
      {
LABEL_23:
        QMux::start(a1);
        return a1;
      }
    }
    v21 = (unint64_t *)&v16->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    goto LABEL_23;
  }
  return a1;
}

{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  const char *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v22[4];
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  _QWORD block[6];

  v10 = (std::__shared_weak_count *)a5[1];
  v22[0] = *a5;
  v22[1] = (uint64_t)v10;
  if (v10)
  {
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
  }
  QMux::State::create(a4, 0, v22, a6, a7, a1);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  if (a2)
  {
    v15 = *(_QWORD *)a1;
    v14 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
    v22[2] = *(_QWORD *)a1;
    v22[3] = (uint64_t)v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    if (!v15)
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x69B, "ptr", "is not", "true", v13);
    v24 = a3;
    v25 = a2;
    v23[0] = v15;
    v23[1] = &v25;
    v23[2] = &v24;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS2_18setDriverAndCookieEP13ATCSIPCDriverPvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    block[3] = &__block_descriptor_tmp_137;
    block[4] = v15 + 8;
    block[5] = v23;
    v18 = *(NSObject **)(v15 + 24);
    if (*(_QWORD *)(v15 + 32))
    {
      dispatch_async_and_wait(v18, block);
      if (!v14)
        goto LABEL_20;
    }
    else
    {
      dispatch_sync(v18, block);
      if (!v14)
      {
LABEL_20:
        QMux::start(a1);
        return a1;
      }
    }
    v19 = (unint64_t *)&v14->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    goto LABEL_20;
  }
  return a1;
}

void sub_19EA001A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

void sub_19EA001C0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (!v1)
    _Unwind_Resume(exception_object);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(exception_object);
}

void sub_19EA00360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

void sub_19EA0037C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (!v1)
    _Unwind_Resume(exception_object);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(exception_object);
}

void QMux::join(QMux *this)
{
  NSObject **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(NSObject ***)this;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (v2)
    QMux::State::join(v2);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void QMux::joinControl(QMux *this)
{
  NSObject **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(NSObject ***)this;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (v2)
    QMux::State::joinControl(v2);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void QMux::flush(QMux *this, dispatch_object_t object)
{
  _QWORD *v2;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  NSObject *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;

  v2 = *(_QWORD **)this;
  if (*(_QWORD *)this)
  {
    if (object)
    {
      dispatch_retain(object);
      dispatch_retain(object);
      dispatch_group_enter(object);
      dispatch_release(object);
      v2 = *(_QWORD **)this;
    }
    v5 = *((_QWORD *)this + 1);
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    if (object)
    {
      dispatch_retain(object);
      dispatch_group_enter(object);
    }
    v8 = (std::__shared_weak_count *)v2[2];
    if (!v8 || (v9 = v2[1], (v10 = std::__shared_weak_count::lock(v8)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v11 = v10;
    v12 = operator new(0x18uLL);
    *v12 = v2;
    v12[1] = v5;
    v12[2] = object;
    v13 = v2[3];
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    v16 = operator new(0x18uLL);
    *v16 = v12;
    v16[1] = v9;
    v16[2] = v11;
    dispatch_async_f(v13, v16, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::flush(dispatch_group_s *)::$_0>(QMux::flush(dispatch_group_s *)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::flush(dispatch_group_s *)::$_0,dispatch_queue_s *::default_delete<QMux::flush(dispatch_group_s *)::$_0>>)::{lambda(void *)#1}::__invoke);
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (v17)
    {
      if (object)
      {
LABEL_17:
        dispatch_group_leave(object);
        dispatch_release(object);
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (object)
        goto LABEL_17;
    }
  }
}

void QMux::add(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  unint64_t *p_shared_owners;
  NSObject *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v8 = (_QWORD *)*a1;
  if (!*a1)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x6A2, "fState", "is not", "true", a6);
    v8 = (_QWORD *)*a1;
  }
  v9 = a1[1];
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *a2;
  v13 = a2[1];
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (std::__shared_weak_count *)v8[2];
  if (!v16 || (v17 = v8[1], (v18 = std::__shared_weak_count::lock(v16)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v18;
  v20 = operator new(0x20uLL);
  *v20 = v8;
  v20[1] = v9;
  v20[2] = v12;
  v20[3] = v13;
  p_shared_owners = (unint64_t *)&v19->__shared_owners_;
  v22 = v8[3];
  do
    v23 = __ldxr(p_shared_owners);
  while (__stxr(v23 + 1, p_shared_owners));
  v24 = operator new(0x18uLL);
  *v24 = v20;
  v24[1] = v17;
  v24[2] = v19;
  dispatch_async_f(v22, v24, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::add(std::shared_ptr<qmi::QMuxClientIface>)::$_0>(QMux::add(std::shared_ptr<qmi::QMuxClientIface>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::add(std::shared_ptr<qmi::QMuxClientIface>)::$_0,std::default_delete<QMux::add(std::shared_ptr<qmi::QMuxClientIface>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
}

void QMux::remove(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  unint64_t *p_shared_owners;
  NSObject *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v8 = (_QWORD *)*a1;
  if (!*a1)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x6AB, "fState", "is not", "true", a6);
    v8 = (_QWORD *)*a1;
  }
  v9 = a1[1];
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *a2;
  v13 = a2[1];
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (std::__shared_weak_count *)v8[2];
  if (!v16 || (v17 = v8[1], (v18 = std::__shared_weak_count::lock(v16)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v18;
  v20 = operator new(0x20uLL);
  *v20 = v8;
  v20[1] = v9;
  v20[2] = v12;
  v20[3] = v13;
  p_shared_owners = (unint64_t *)&v19->__shared_owners_;
  v22 = v8[3];
  do
    v23 = __ldxr(p_shared_owners);
  while (__stxr(v23 + 1, p_shared_owners));
  v24 = operator new(0x18uLL);
  *v24 = v20;
  v24[1] = v17;
  v24[2] = v19;
  dispatch_async_f(v22, v24, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::remove(std::shared_ptr<qmi::QMuxClientIface>)::$_0>(QMux::remove(std::shared_ptr<qmi::QMuxClientIface>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::remove(std::shared_ptr<qmi::QMuxClientIface>)::$_0,std::default_delete<QMux::remove(std::shared_ptr<qmi::QMuxClientIface>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
}

void QMux::restart(QMux *this)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t *p_shared_owners;
  NSObject *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;

  v1 = *(_QWORD **)this;
  if (*(_QWORD *)this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 + 1, v3));
    }
    v5 = (std::__shared_weak_count *)v1[2];
    if (!v5 || (v6 = v1[1], (v7 = std::__shared_weak_count::lock(v5)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v8 = v7;
    v9 = operator new(0x10uLL);
    *v9 = v1;
    v9[1] = v2;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    v11 = v1[3];
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v13 = operator new(0x18uLL);
    *v13 = v9;
    v13[1] = v6;
    v13[2] = v8;
    dispatch_async_f(v11, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::restart(void)::$_0>(QMux::restart(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::restart(void)::$_0,dispatch_queue_s *::default_delete<QMux::restart(void)::$_0>>)::{lambda(void *)#1}::__invoke);
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void QMux::stop(QMux *this)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t *p_shared_owners;
  NSObject *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;

  v1 = *(_QWORD **)this;
  if (*(_QWORD *)this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 + 1, v3));
    }
    v5 = (std::__shared_weak_count *)v1[2];
    if (!v5 || (v6 = v1[1], (v7 = std::__shared_weak_count::lock(v5)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v8 = v7;
    v9 = operator new(0x10uLL);
    *v9 = v1;
    v9[1] = v2;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    v11 = v1[3];
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v13 = operator new(0x18uLL);
    *v13 = v9;
    v13[1] = v6;
    v13[2] = v8;
    dispatch_async_f(v11, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::stop(void)::$_0>(QMux::stop(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::stop(void)::$_0,dispatch_queue_s *::default_delete<QMux::stop(void)::$_0>>)::{lambda(void *)#1}::__invoke);
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void QMux::shutdown(QMux *this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  _QWORD block[6];

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    v9 = *(_QWORD *)this;
    v10 = v2;
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldxr(p_shared_owners);
      while (__stxr(v4 + 1, p_shared_owners));
    }
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS1_8shutdownEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
    block[3] = &__block_descriptor_tmp_154;
    block[4] = v1 + 8;
    block[5] = &v9;
    v5 = *(NSObject **)(v1 + 24);
    if (*(_QWORD *)(v1 + 32))
    {
      dispatch_async_and_wait(v5, block);
      v6 = v10;
      if (!v10)
        return;
    }
    else
    {
      dispatch_sync(v5, block);
      v6 = v10;
      if (!v10)
        return;
    }
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void QMux::enterPowerMode(_QWORD *a1, dispatch_object_t object, int a3)
{
  _QWORD *v3;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  _QWORD *v14;
  unint64_t *p_shared_owners;
  NSObject *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;

  v3 = (_QWORD *)*a1;
  if (*a1)
  {
    if (object)
    {
      dispatch_retain(object);
      v3 = (_QWORD *)*a1;
    }
    v7 = a1[1];
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    if (object)
    {
      dispatch_retain(object);
      dispatch_group_enter(object);
    }
    v10 = (std::__shared_weak_count *)v3[2];
    if (!v10 || (v11 = v3[1], (v12 = std::__shared_weak_count::lock(v10)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v13 = v12;
    v14 = operator new(0x20uLL);
    *v14 = v3;
    v14[1] = v7;
    v14[2] = object;
    *((_DWORD *)v14 + 6) = a3;
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    v16 = v3[3];
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    v18 = operator new(0x18uLL);
    *v18 = v14;
    v18[1] = v11;
    v18[2] = v13;
    dispatch_async_f(v16, v18, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::enterPowerMode(dispatch_group_s *,qmi::PowerProfile)::$_0>(QMux::enterPowerMode(dispatch_group_s *,qmi::PowerProfile)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::enterPowerMode(dispatch_group_s *,qmi::PowerProfile)::$_0,dispatch_queue_s *::default_delete<QMux::enterPowerMode(dispatch_group_s *,qmi::PowerProfile)::$_0>>)::{lambda(void *)#1}::__invoke);
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (v19)
    {
      if (object)
LABEL_17:
        dispatch_release(object);
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if (object)
        goto LABEL_17;
    }
  }
}

void QMux::invokeReset(_QWORD **a1, uint64_t a2, int a3)
{
  _QWORD *v5;
  _ATCSException *exception;
  void *v7;
  std::string __p;

  v5 = *a1;
  if (*a1)
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __p = *(std::string *)a2;
    QMux::State::invokeReset(v5, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (a3)
  {
    exception = (_ATCSException *)__cxa_allocate_exception(0x208uLL);
    if (*(char *)(a2 + 23) >= 0)
      _ATCSException::_ATCSException(exception, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", 1784, (const char *)a2, *(_OWORD *)&__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__r.__words[2]);
    else
      _ATCSException::_ATCSException(exception, "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", 1784, *(const char **)a2, *(_OWORD *)&__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__r.__words[2]);
  }
}

void sub_19EA00E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL QMux::isRunning(QMux *this)
{
  uint64_t v1;
  NSObject *v2;
  QMux *v4;
  _QWORD v5[6];
  _QWORD *v6;
  uint64_t block;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  void *v10;
  char *v11;
  _QWORD *v12;
  char v13;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v4 = this;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNKS1_9isRunningEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
  v5[3] = &__block_descriptor_tmp_156;
  v5[4] = v1 + 8;
  v5[5] = &v4;
  v6 = v5;
  v2 = *(NSObject **)(v1 + 24);
  if (*(_QWORD *)(v1 + 32))
  {
    v13 = -86;
    block = MEMORY[0x1E0C809B0];
    v8 = 0x40000000;
    v9 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke_0;
    v10 = &__block_descriptor_tmp_158;
    v11 = &v13;
    v12 = &v6;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    v13 = -86;
    block = MEMORY[0x1E0C809B0];
    v8 = 0x40000000;
    v9 = ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke_0;
    v10 = &__block_descriptor_tmp_157;
    v11 = &v13;
    v12 = &v6;
    dispatch_sync(v2, &block);
  }
  return v13 != 0;
}

BOOL QMux::isPoweredDown(QMux *this)
{
  uint64_t v1;
  NSObject *v2;
  QMux *v4;
  _QWORD v5[6];
  _QWORD *v6;
  uint64_t block;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  void *v10;
  char *v11;
  _QWORD *v12;
  char v13;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0;
  v4 = this;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNKS1_13isPoweredDownEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
  v5[3] = &__block_descriptor_tmp_159;
  v5[4] = v1 + 8;
  v5[5] = &v4;
  v6 = v5;
  v2 = *(NSObject **)(v1 + 24);
  if (*(_QWORD *)(v1 + 32))
  {
    v13 = -86;
    block = MEMORY[0x1E0C809B0];
    v8 = 0x40000000;
    v9 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke_0;
    v10 = &__block_descriptor_tmp_158;
    v11 = &v13;
    v12 = &v6;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    v13 = -86;
    block = MEMORY[0x1E0C809B0];
    v8 = 0x40000000;
    v9 = ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke_0;
    v10 = &__block_descriptor_tmp_157;
    v11 = &v13;
    v12 = &v6;
    dispatch_sync(v2, &block);
  }
  return v13 != 0;
}

void QMux::setLogger(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  unint64_t *p_shared_owners;
  NSObject *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  if (*a2)
  {
    v8 = (_QWORD *)*a1;
    if (!*a1)
      return;
  }
  else
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x713, "logger.get()", "is not", "true", a6);
    v8 = (_QWORD *)*a1;
    if (!*a1)
      return;
  }
  v9 = a1[1];
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *a2;
  v13 = a2[1];
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (std::__shared_weak_count *)v8[2];
  if (!v16 || (v17 = v8[1], (v18 = std::__shared_weak_count::lock(v16)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v18;
  v20 = operator new(0x20uLL);
  *v20 = v8;
  v20[1] = v9;
  v20[2] = v12;
  v20[3] = v13;
  p_shared_owners = (unint64_t *)&v19->__shared_owners_;
  v22 = v8[3];
  do
    v23 = __ldxr(p_shared_owners);
  while (__stxr(v23 + 1, p_shared_owners));
  v24 = operator new(0x18uLL);
  *v24 = v20;
  v24[1] = v17;
  v24[2] = v19;
  dispatch_async_f(v22, v24, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::setLogger(std::shared_ptr<ATCSLogger>)::$_0>(QMux::setLogger(std::shared_ptr<ATCSLogger>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::setLogger(std::shared_ptr<ATCSLogger>)::$_0,std::default_delete<QMux::setLogger(std::shared_ptr<ATCSLogger>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
}

void QMux::dumpState(QMux *this)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t *p_shared_owners;
  NSObject *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;

  v1 = *(_QWORD **)this;
  if (*(_QWORD *)this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 + 1, v3));
    }
    v5 = (std::__shared_weak_count *)v1[2];
    if (!v5 || (v6 = v1[1], (v7 = std::__shared_weak_count::lock(v5)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v8 = v7;
    v9 = operator new(0x10uLL);
    *v9 = v1;
    v9[1] = v2;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    v11 = v1[3];
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v13 = operator new(0x18uLL);
    *v13 = v9;
    v13[1] = v6;
    v13[2] = v8;
    dispatch_async_f(v11, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::dumpState(void)::$_0>(QMux::dumpState(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::dumpState(void)::$_0,dispatch_queue_s *::default_delete<QMux::dumpState(void)::$_0>>)::{lambda(void *)#1}::__invoke);
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void QMux::getName(QMux *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = *(_QWORD *)this;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (v4)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    if (*(char *)(v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)v8, *(_QWORD *)(v8 + 8));
    }
    else
    {
      v9 = *(_OWORD *)v8;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(v8 + 16);
      *(_OWORD *)a2 = v9;
    }
  }
  else
  {
    *(_BYTE *)(a2 + 23) = 12;
    strcpy((char *)a2, "(empty QMux)");
  }
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_19EA0138C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QMux::getQMIPowerDownMessages(QMux *this@<X0>, const char *a2@<X5>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  QMux *v9;
  _QWORD v10[6];
  _QWORD *v11;
  _QWORD block[2];
  void (*v13)(uint64_t);
  void *v14;
  _QWORD *v15;
  _QWORD *v16;

  v5 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x72F, "fState", "is not", "true", a2);
    v5 = *(_QWORD *)this;
  }
  v9 = this;
  v6 = MEMORY[0x1E0C809B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS1_23getQMIPowerDownMessagesEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
  v10[3] = &__block_descriptor_tmp_161;
  v10[4] = v5 + 8;
  v10[5] = &v9;
  v11 = v10;
  v7 = *(NSObject **)(v5 + 24);
  v8 = *(_QWORD *)(v5 + 32);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = a3 + 1;
  block[0] = v6;
  block[1] = 0x40000000;
  if (v8)
  {
    v13 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFNSt3__13setINS1_4pairIKN3qmi11ServiceTypeEKtEENS1_4lessIS8_EENS1_9allocatorIS8_EEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke;
    v14 = &__block_descriptor_tmp_163;
    v15 = a3;
    v16 = &v11;
    dispatch_async_and_wait(v7, block);
  }
  else
  {
    v13 = ___ZN8dispatch9sync_implIRU13block_pointerFNSt3__13setINS1_4pairIKN3qmi11ServiceTypeEKtEENS1_4lessIS8_EENS1_9allocatorIS8_EEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke;
    v14 = &__block_descriptor_tmp_162;
    v15 = a3;
    v16 = &v11;
    dispatch_sync(v7, block);
  }
}

_QWORD *QMux::State::getQMIPowerDownMessages@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = this[37];
  *a2 = this[36];
  v3 = this[38];
  a2[2] = v3;
  if (v3)
    v4 = (_QWORD *)(v2 + 16);
  else
    v4 = a2;
  a2[1] = v2;
  this[37] = 0;
  this[38] = 0;
  *v4 = a2 + 1;
  this[36] = this + 37;
  return this;
}

uint64_t QMuxQueueItem::QMuxQueueItem(uint64_t a1, char a2, char a3, _QWORD *a4)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  *(_BYTE *)a1 = a2;
  *(_BYTE *)(a1 + 1) = a3;
  v5 = a4[1];
  *(_QWORD *)(a1 + 8) = *a4;
  *(_QWORD *)(a1 + 16) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  qmi::fixupHeader();
  return a1;
}

{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  *(_BYTE *)a1 = a2;
  *(_BYTE *)(a1 + 1) = a3;
  v5 = a4[1];
  *(_QWORD *)(a1 + 8) = *a4;
  *(_QWORD *)(a1 + 16) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  qmi::fixupHeader();
  return a1;
}

void sub_19EA01550(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19EA015B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void QMuxQueueItem::~QMuxQueueItem(QMuxQueueItem *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t QMuxCommandFormatter::bufferSizeForCommandHeader(QMuxCommandFormatter *this)
{
  return 128;
}

uint64_t QMuxCommandFormatter::interpretCommandHeader(QMuxCommandFormatter *this, char *a2, unsigned int a3, const void *a4, unsigned int a5, unsigned int *a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  qmi::parse();
  v6 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v6;
}

void sub_19EA01778(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK20QMuxCommandFormatter22interpretCommandHeaderEPcjPKvjPj_block_invoke(uint64_t a1, uint64_t a2)
{
  char *v4;
  size_t v5;
  int v6;
  const char *v7;
  uint64_t result;
  uint64_t v9;
  unsigned int v10;

  v4 = *(char **)(a1 + 40);
  v5 = *(unsigned int *)(a1 + 56);
  v6 = *(unsigned __int8 *)(a2 + 5);
  v7 = qmi::asShortString(v6);
  result = snprintf(v4, v5, "%s:0x%02X Length:%u Flags:0x%02X ClientID:%u", v7, v6, *(unsigned __int16 *)(a2 + 2), *(unsigned __int8 *)(a2 + 4), *(unsigned __int8 *)(a2 + 6));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  **(_DWORD **)(a1 + 48) = 0;
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v10 = *(_DWORD *)(a1 + 56);
  if (v10 >= *(_DWORD *)(v9 + 24))
    v10 = *(_DWORD *)(v9 + 24);
  *(_DWORD *)(v9 + 24) = v10;
  return result;
}

_QWORD *ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1}::~signpost_interval(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)(a1 + 3));
  v2 = a1[2];
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = a1[2];
    if (v3)
      dispatch_release(v3);
  }
  v4 = (std::__shared_weak_count *)a1[1];
  if (!v4)
    return a1;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void std::__shared_ptr_emplace<std::string>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E4153B10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::string>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E4153B10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<std::string>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void dispatch::detail::group_notify<ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (a1)
  {
    ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)(a1 + 3));
    v2 = a1[2];
    if (v2)
    {
      dispatch_group_leave(v2);
      v3 = a1[2];
      if (v3)
        dispatch_release(v3);
    }
    v4 = (std::__shared_weak_count *)a1[1];
    if (!v4)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      operator delete(a1);
    }
    else
    {
LABEL_9:
      operator delete(a1);
    }
  }
}

void ctu::os::signpost_interval::~signpost_interval(ctu::os::signpost_interval *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  ctu::os::signpost_interval *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *((_QWORD *)this + 5);
  if (v2 && *(_QWORD *)this)
  {
    v3 = *((_QWORD *)this + 1);
    v10 = *(_QWORD *)this;
    v11 = v3;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v11, &v10);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
    os_release(v4);
  v5 = (_QWORD *)((char *)this + 16);
  *((_QWORD *)this + 1) = 0;
  v6 = (ctu::os::signpost_interval *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6 == (ctu::os::signpost_interval *)((char *)this + 16))
  {
    v7 = 4;
    v6 = (ctu::os::signpost_interval *)((char *)this + 16);
  }
  else
  {
    if (!v6)
    {
      *(_QWORD *)this = 0;
      return;
    }
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  v8 = (_QWORD *)*((_QWORD *)this + 5);
  *(_QWORD *)this = 0;
  if (v8 == v5)
  {
    v9 = 4;
  }
  else
  {
    if (!v8)
      return;
    v9 = 5;
    v5 = v8;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v9))(v5);
}

void std::__shared_ptr_pointer<ATCSLogger *,DummyDeleter,std::allocator<ATCSLogger>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<ATCSLogger *,DummyDeleter,std::allocator<ATCSLogger>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000019EA1F07CLL)
    return a1 + 24;
  if (((v3 & 0x800000019EA1F07CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000019EA1F07CLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000019EA1F07CLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__tree<std::__value_type<std::pair<qmi::ServiceType const,unsigned char const>,std::weak_ptr<qmi::QMuxClientIface>>,std::__map_value_compare<std::pair<qmi::ServiceType const,unsigned char const>,std::__value_type<std::pair<qmi::ServiceType const,unsigned char const>,std::weak_ptr<qmi::QMuxClientIface>>,std::less<std::pair<qmi::ServiceType const,unsigned char const>>,true>,std::allocator<std::__value_type<std::pair<qmi::ServiceType const,unsigned char const>,std::weak_ptr<qmi::QMuxClientIface>>>>::destroy(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  if (a1)
  {
    std::__tree<std::__value_type<std::pair<qmi::ServiceType const,unsigned char const>,std::weak_ptr<qmi::QMuxClientIface>>,std::__map_value_compare<std::pair<qmi::ServiceType const,unsigned char const>,std::__value_type<std::pair<qmi::ServiceType const,unsigned char const>,std::weak_ptr<qmi::QMuxClientIface>>,std::less<std::pair<qmi::ServiceType const,unsigned char const>>,true>,std::allocator<std::__value_type<std::pair<qmi::ServiceType const,unsigned char const>,std::weak_ptr<qmi::QMuxClientIface>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::pair<qmi::ServiceType const,unsigned char const>,std::weak_ptr<qmi::QMuxClientIface>>,std::__map_value_compare<std::pair<qmi::ServiceType const,unsigned char const>,std::__value_type<std::pair<qmi::ServiceType const,unsigned char const>,std::weak_ptr<qmi::QMuxClientIface>>,std::less<std::pair<qmi::ServiceType const,unsigned char const>>,true>,std::allocator<std::__value_type<std::pair<qmi::ServiceType const,unsigned char const>,std::weak_ptr<qmi::QMuxClientIface>>>>::destroy(a1[1]);
    v2 = (std::__shared_weak_count *)a1[6];
    if (v2)
      std::__shared_weak_count::__release_weak(v2);
    operator delete(a1);
  }
}

uint64_t std::deque<QMuxQueueItem>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v12 = 0;
    goto LABEL_16;
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5 = &v2[v4 / 0xAA];
  v6 = (unint64_t)*v5 + 24 * (v4 % 0xAA);
  v7 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v4) / 0xAA] + 24 * ((*(_QWORD *)(a1 + 40) + v4) % 0xAA);
  if (v6 == v7)
    goto LABEL_14;
  do
  {
    v8 = *(std::__shared_weak_count **)(v6 + 16);
    if (!v8)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (v10)
    {
LABEL_9:
      v6 += 24;
      if (v6 - (_QWORD)*v5 != 4080)
        continue;
LABEL_10:
      v11 = (unint64_t)v5[1];
      ++v5;
      v6 = v11;
      continue;
    }
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v6 += 24;
    if (v6 - (_QWORD)*v5 == 4080)
      goto LABEL_10;
  }
  while (v6 != v7);
  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
LABEL_14:
  *(_QWORD *)(a1 + 40) = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
LABEL_16:
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 85;
LABEL_21:
    *(_QWORD *)(a1 + 32) = v14;
  }
  else if (v13 == 2)
  {
    v14 = 170;
    goto LABEL_21;
  }
  if (v2 != v3)
  {
    do
    {
      v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    v17 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(a1 + 16);
    if (v16 != v17)
      *(_QWORD *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(*a1);
    std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void std::__shared_ptr_pointer<QMux::State *,std::shared_ptr<QMux::State> ctu::SharedSynchronizable<QMux::State>::make_shared_ptr<QMux::State>(QMux::State*)::{lambda(QMux::State *)#1},std::allocator<QMux::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<QMux::State *,std::shared_ptr<QMux::State> ctu::SharedSynchronizable<QMux::State>::make_shared_ptr<QMux::State>(QMux::State*)::{lambda(QMux::State *)#1},std::allocator<QMux::State>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<QMux::State> ctu::SharedSynchronizable<QMux::State>::make_shared_ptr<QMux::State>(QMux::State*)::{lambda(QMux::State*)#1}::operator() const(QMux::State*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<QMux::State *,std::shared_ptr<QMux::State> ctu::SharedSynchronizable<QMux::State>::make_shared_ptr<QMux::State>(QMux::State*)::{lambda(QMux::State *)#1},std::allocator<QMux::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4QMux5StateEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4QMux5StateEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4QMux5StateEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4QMux5StateEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<QMux::State> ctu::SharedSynchronizable<QMux::State>::make_shared_ptr<QMux::State>(QMux::State*)::{lambda(QMux::State*)#1}::operator() const(QMux::State*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::State::create(std::string const&,QMux::Name,std::weak_ptr<ATCSResetInvoker>,qmi::LogLevel,BOOL)::$_0>(QMux::State::create(std::string const&,QMux::Name,std::weak_ptr<ATCSResetInvoker>,qmi::LogLevel,BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::State::create(std::string const&,QMux::Name,std::weak_ptr<ATCSResetInvoker>,qmi::LogLevel,BOOL)::$_0,std::default_delete<QMux::State::create(std::string const&,QMux::Name,std::weak_ptr<ATCSResetInvoker>,qmi::LogLevel,BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  QMux::State **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *(QMux::State ***)a1;
  QMux::State::init_sync(**(QMux::State ***)a1);
  v3 = (std::__shared_weak_count *)v2[1];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  operator delete(v2);
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v6)
    goto LABEL_10;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    operator delete((void *)a1);
  }
  else
  {
LABEL_10:
    operator delete((void *)a1);
  }
}

void sub_19EA01ED0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = (std::__shared_weak_count *)v2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v2);
  v7 = (std::__shared_weak_count *)v1[2];
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNKS2_4joinEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke(uint64_t a1)
{
  dispatch_group_t *v1;
  dispatch_group_t v2;
  _QWORD *isa;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;

  v1 = *(dispatch_group_t **)(a1 + 40);
  v2 = *v1;
  isa = (*v1)[14].isa;
  v4 = (uint64_t)&(*v1)[15];
  if (isa != (_QWORD *)v4)
  {
    do
    {
      v5 = (std::__shared_weak_count *)isa[6];
      if (!v5)
        goto LABEL_11;
      v6 = std::__shared_weak_count::lock(v5);
      if (!v6)
        goto LABEL_11;
      v7 = v6;
      v8 = isa[5];
      if (v8)
        (*(void (**)(uint64_t, dispatch_group_t))(*(_QWORD *)v8 + 72))(v8, v1[1]);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        v11 = (_QWORD *)isa[1];
        if (!v11)
        {
          do
          {
LABEL_15:
            v12 = (_QWORD *)isa[2];
            v13 = *v12 == (_QWORD)isa;
            isa = v12;
          }
          while (!v13);
          goto LABEL_3;
        }
      }
      else
      {
LABEL_11:
        v11 = (_QWORD *)isa[1];
        if (!v11)
          goto LABEL_15;
      }
      do
      {
        v12 = v11;
        v11 = (_QWORD *)*v11;
      }
      while (v11);
LABEL_3:
      isa = v12;
    }
    while (v12 != (_QWORD *)v4);
  }
  dispatch_group_async(v1[1], (dispatch_queue_t)v2[3].isa, &__block_literal_global);
}

void sub_19EA0204C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS2_11joinControlEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v6 = *(_QWORD **)(a1 + 40);
  v8 = (_QWORD *)(*v6 + 120);
  v7 = (_QWORD *)*v8;
  if (!*v8)
    goto LABEL_6;
  do
  {
    v9 = v7;
    v7 = (_QWORD *)*v7;
  }
  while (v7);
  if (v9 == v8 || *((_BYTE *)v9 + 32) || *((_BYTE *)v9 + 33))
  {
LABEL_6:
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x175, "i", "!=", "fClientMap.end()", a6);
    v9 = v8;
  }
  v10 = (std::__shared_weak_count *)v9[6];
  if (v10)
  {
    v11 = std::__shared_weak_count::lock(v10);
    if (v11)
    {
      v12 = v11;
      v13 = v9[5];
      if (v13)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 72))(v13, v6[1]);
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void sub_19EA02174(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS2_18setDriverAndCookieEP13ATCSIPCDriverPvE3__1EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(result + 40);
  v3 = *(uint64_t **)v1;
  v2 = *(_QWORD *)(v1 + 8);
  v4 = *v3;
  *v3 = *(_QWORD *)(v2 + 184);
  *(_QWORD *)(v2 + 184) = v4;
  return result;
}

void std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<QMuxQueueItem,QMuxQueueItem*,QMuxQueueItem&,QMuxQueueItem**,long,170l>,std::__deque_iterator<QMuxQueueItem,QMuxQueueItem*,QMuxQueueItem&,QMuxQueueItem**,long,170l>,0>(uint64_t **a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *j;
  int64_t v16;
  uint64_t *v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t k;
  int64_t v33;
  uint64_t v34;
  uint64_t *v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int64_t v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *i;
  int64_t v62;
  uint64_t *v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v77;

  v7 = a7;
  v8 = a6;
  v9 = a5;
  v10 = a4;
  v77 = a3;
  if (a2 == a4)
  {
    if (a3 == a5)
      goto LABEL_84;
    v59 = *a6;
    v60 = a7;
    for (i = a5; ; i = v63)
    {
      v62 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v60 - v59) >> 3);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (i - a3)) < v62)
        v62 = 0xAAAAAAAAAAAAAAABLL * (i - a3);
      v63 = &i[-3 * v62];
      if (v62)
      {
        v7 = v60;
        do
        {
          v64 = *((_WORD *)i - 12);
          i -= 3;
          *((_WORD *)v7 - 12) = v64;
          v7 -= 3;
          v66 = i[1];
          v65 = i[2];
          if (v65)
          {
            v67 = (unint64_t *)(v65 + 8);
            do
              v68 = __ldxr(v67);
            while (__stxr(v68 + 1, v67));
          }
          v69 = (std::__shared_weak_count *)*(v60 - 1);
          *(v60 - 2) = v66;
          *(v60 - 1) = v65;
          if (v69)
          {
            p_shared_owners = (unint64_t *)&v69->__shared_owners_;
            do
              v71 = __ldaxr(p_shared_owners);
            while (__stlxr(v71 - 1, p_shared_owners));
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
              std::__shared_weak_count::__release_weak(v69);
            }
          }
          v60 = v7;
        }
        while (i != v63);
      }
      else
      {
        v7 = v60;
      }
      a3 = v77;
      if (v63 == v77)
        break;
      v72 = *--v8;
      v59 = v72;
      v60 = (uint64_t *)(v72 + 4080);
    }
    goto LABEL_82;
  }
  v12 = *a4;
  if ((uint64_t *)*a4 != a5)
  {
    v13 = *a6;
    v14 = a7;
    for (j = a5; ; j = v17)
    {
      v16 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v14 - v13) >> 3);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)j - v12) >> 3)) < v16)
        v16 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)j - v12) >> 3);
      v17 = &j[-3 * v16];
      if (v16)
      {
        v7 = v14;
        do
        {
          v18 = *((_WORD *)j - 12);
          j -= 3;
          *((_WORD *)v7 - 12) = v18;
          v7 -= 3;
          v20 = j[1];
          v19 = j[2];
          if (v19)
          {
            v21 = (unint64_t *)(v19 + 8);
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          v23 = (std::__shared_weak_count *)*(v14 - 1);
          *(v14 - 2) = v20;
          *(v14 - 1) = v19;
          if (v23)
          {
            v24 = (unint64_t *)&v23->__shared_owners_;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
          v14 = v7;
        }
        while (j != v17);
      }
      else
      {
        v7 = v14;
      }
      if (v17 == (uint64_t *)v12)
        break;
      v26 = *--v8;
      v13 = v26;
      v14 = (uint64_t *)(v26 + 4080);
    }
    if ((uint64_t *)(*v8 + 4080) == v7)
    {
      v27 = (uint64_t *)v8[1];
      ++v8;
      v7 = v27;
    }
    v10 = a4;
    a3 = v77;
  }
  v28 = v10 - 1;
  if (v28 != a2)
  {
    v74 = v9;
    v29 = (uint64_t *)*v8;
    do
    {
      while (1)
      {
        v31 = *v28;
        for (k = *v28 + 4080; ; k = v34)
        {
          v33 = 0xAAAAAAAAAAAAAAABLL * (v7 - v29);
          if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((k - v31) >> 3)) < v33)
            v33 = 0xAAAAAAAAAAAAAAABLL * ((k - v31) >> 3);
          v34 = k - 24 * v33;
          if (v33)
          {
            v35 = v7;
            do
            {
              v36 = *(_WORD *)(k - 24);
              k -= 24;
              *((_WORD *)v35 - 12) = v36;
              v35 -= 3;
              v38 = *(_QWORD *)(k + 8);
              v37 = *(_QWORD *)(k + 16);
              if (v37)
              {
                v39 = (unint64_t *)(v37 + 8);
                do
                  v40 = __ldxr(v39);
                while (__stxr(v40 + 1, v39));
              }
              v41 = (std::__shared_weak_count *)*(v7 - 1);
              *(v7 - 2) = v38;
              *(v7 - 1) = v37;
              if (v41)
              {
                v42 = (unint64_t *)&v41->__shared_owners_;
                do
                  v43 = __ldaxr(v42);
                while (__stlxr(v43 - 1, v42));
                if (!v43)
                {
                  ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                  std::__shared_weak_count::__release_weak(v41);
                }
              }
              v7 = v35;
            }
            while (k != v34);
          }
          else
          {
            v35 = v7;
          }
          if (v34 == v31)
            break;
          v44 = (uint64_t *)*--v8;
          v29 = v44;
          v7 = v44 + 510;
        }
        v29 = (uint64_t *)*v8;
        if ((uint64_t *)(*v8 + 4080) != v35)
          break;
        v30 = (uint64_t *)v8[1];
        ++v8;
        v29 = v30;
        v7 = v30;
        a3 = v77;
        if (--v28 == a2)
          goto LABEL_45;
      }
      v7 = v35;
      a3 = v77;
      --v28;
    }
    while (v28 != a2);
LABEL_45:
    v9 = v74;
  }
  v10 = a4;
  v45 = *a2 + 4080;
  if ((uint64_t *)v45 != a3)
  {
    v46 = *v8;
    v47 = v7;
    while (1)
    {
      v48 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v47 - v46) >> 3);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v45 - (uint64_t)a3) >> 3)) < v48)
        v48 = 0xAAAAAAAAAAAAAAABLL * ((v45 - (uint64_t)a3) >> 3);
      v49 = v45 - 24 * v48;
      if (v48)
      {
        v7 = v47;
        do
        {
          v50 = *(_WORD *)(v45 - 24);
          v45 -= 24;
          *((_WORD *)v7 - 12) = v50;
          v7 -= 3;
          v52 = *(_QWORD *)(v45 + 8);
          v51 = *(_QWORD *)(v45 + 16);
          if (v51)
          {
            v53 = (unint64_t *)(v51 + 8);
            do
              v54 = __ldxr(v53);
            while (__stxr(v54 + 1, v53));
          }
          v55 = (std::__shared_weak_count *)*(v47 - 1);
          *(v47 - 2) = v52;
          *(v47 - 1) = v51;
          if (v55)
          {
            v56 = (unint64_t *)&v55->__shared_owners_;
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 - 1, v56));
            if (!v57)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
          v47 = v7;
        }
        while (v45 != v49);
      }
      else
      {
        v7 = v47;
      }
      a3 = v77;
      if ((uint64_t *)v49 == v77)
        break;
      v58 = *--v8;
      v46 = v58;
      v47 = (uint64_t *)(v58 + 4080);
      v45 = v49;
    }
LABEL_82:
    if ((uint64_t *)(*v8 + 4080) == v7)
    {
      v73 = (uint64_t *)v8[1];
      ++v8;
      v7 = v73;
    }
  }
LABEL_84:
  *a1 = v10;
  a1[1] = v9;
  a1[2] = v8;
  a1[3] = v7;
}

void std::__for_each_segment[abi:ne180100]<std::__deque_iterator<QMuxQueueItem,QMuxQueueItem*,QMuxQueueItem&,QMuxQueueItem**,long,170l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<QMuxQueueItem,QMuxQueueItem*,QMuxQueueItem&,QMuxQueueItem**,long,170l>,std::__deque_iterator<QMuxQueueItem,QMuxQueueItem*,QMuxQueueItem&,QMuxQueueItem**,long,170l>>>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v67;

  v5 = a4;
  v6 = a2;
  v8 = *(_QWORD **)a5;
  v7 = *(_QWORD *)(a5 + 8);
  if (a1 == a3)
  {
    if (a2 == a4)
      goto LABEL_82;
    v52 = *v8;
    while (1)
    {
      v53 = 0xAAAAAAAAAAAAAAABLL * ((v52 - v7 + 4080) >> 3);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3)) < v53)
        v53 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3);
      if (v53)
      {
        v54 = v6 + 24 * v53;
        do
        {
          *(_WORD *)v7 = *(_WORD *)v6;
          v56 = *(_QWORD *)(v6 + 8);
          v55 = *(_QWORD *)(v6 + 16);
          if (v55)
          {
            v57 = (unint64_t *)(v55 + 8);
            do
              v58 = __ldxr(v57);
            while (__stxr(v58 + 1, v57));
          }
          v59 = *(std::__shared_weak_count **)(v7 + 16);
          *(_QWORD *)(v7 + 8) = v56;
          *(_QWORD *)(v7 + 16) = v55;
          if (v59)
          {
            p_shared_owners = (unint64_t *)&v59->__shared_owners_;
            do
              v61 = __ldaxr(p_shared_owners);
            while (__stlxr(v61 - 1, p_shared_owners));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          v6 += 24;
          v7 += 24;
        }
        while (v6 != v54);
        v6 = v54;
      }
      if (v6 == v5)
        break;
      v62 = v8[1];
      ++v8;
      v52 = v62;
      v7 = v62;
    }
    goto LABEL_80;
  }
  v10 = *a1 + 4080;
  if (v10 != a2)
  {
    v11 = *v8;
    while (1)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v7 + 4080) >> 3);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v10 - v6) >> 3)) < v12)
        v12 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v6) >> 3);
      if (v12)
      {
        v13 = v6 + 24 * v12;
        do
        {
          *(_WORD *)v7 = *(_WORD *)v6;
          v15 = *(_QWORD *)(v6 + 8);
          v14 = *(_QWORD *)(v6 + 16);
          if (v14)
          {
            v16 = (unint64_t *)(v14 + 8);
            do
              v17 = __ldxr(v16);
            while (__stxr(v17 + 1, v16));
          }
          v18 = *(std::__shared_weak_count **)(v7 + 16);
          *(_QWORD *)(v7 + 8) = v15;
          *(_QWORD *)(v7 + 16) = v14;
          if (v18)
          {
            v19 = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
          v6 += 24;
          v7 += 24;
        }
        while (v6 != v13);
        v6 = v13;
        v5 = a4;
      }
      if (v6 == v10)
        break;
      v21 = v8[1];
      ++v8;
      v11 = v21;
      v7 = v21;
    }
    if (*v8 + 4080 == v7)
    {
      v22 = v8[1];
      ++v8;
      v7 = v22;
    }
  }
  *(_QWORD *)a5 = v8;
  *(_QWORD *)(a5 + 8) = v7;
  v23 = a1 + 1;
  if (a1 + 1 != a3)
  {
    do
    {
      while (1)
      {
        v24 = 0;
        v67 = v23;
        v25 = *v23;
        v26 = *v8;
        while (1)
        {
          v27 = v25 + 24 * v24;
          v28 = 0xAAAAAAAAAAAAAAABLL * ((v26 - v7 + 4080) >> 3);
          if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((4080 - 24 * v24) >> 3)) < v28)
            v28 = 0xAAAAAAAAAAAAAAABLL * ((4080 - 24 * v24) >> 3);
          if (v28)
          {
            v29 = v8;
            v30 = v27 + 24 * v28;
            v31 = v25 + 24 * v24;
            do
            {
              *(_WORD *)v7 = *(_WORD *)v31;
              v33 = *(_QWORD *)(v31 + 8);
              v32 = *(_QWORD *)(v31 + 16);
              if (v32)
              {
                v34 = (unint64_t *)(v32 + 8);
                do
                  v35 = __ldxr(v34);
                while (__stxr(v35 + 1, v34));
              }
              v36 = *(std::__shared_weak_count **)(v7 + 16);
              *(_QWORD *)(v7 + 8) = v33;
              *(_QWORD *)(v7 + 16) = v32;
              if (v36)
              {
                v37 = (unint64_t *)&v36->__shared_owners_;
                do
                  v38 = __ldaxr(v37);
                while (__stlxr(v38 - 1, v37));
                if (!v38)
                {
                  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                  std::__shared_weak_count::__release_weak(v36);
                }
              }
              v31 += 24;
              v7 += 24;
            }
            while (v31 != v30);
            v8 = v29;
            v24 -= 0x5555555555555555 * ((v30 - v27) >> 3);
            if (v24 == 170)
              break;
          }
          v39 = v8[1];
          ++v8;
          v26 = v39;
          v7 = v39;
        }
        if (*v29 + 4080 == v7)
          break;
        *(_QWORD *)a5 = v29;
        *(_QWORD *)(a5 + 8) = v7;
        v23 = v67 + 1;
        if (v67 + 1 == a3)
          goto LABEL_43;
      }
      v8 = v29 + 1;
      v7 = v29[1];
      *(_QWORD *)a5 = v29 + 1;
      *(_QWORD *)(a5 + 8) = v7;
      v23 = v67 + 1;
    }
    while (v67 + 1 != a3);
LABEL_43:
    v5 = a4;
  }
  v40 = *a3;
  if (*a3 != v5)
  {
    v41 = *v8;
    while (1)
    {
      v42 = 0xAAAAAAAAAAAAAAABLL * ((v41 - v7 + 4080) >> 3);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v5 - v40) >> 3)) < v42)
        v42 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v40) >> 3);
      if (v42)
      {
        v43 = v40 + 24 * v42;
        do
        {
          *(_WORD *)v7 = *(_WORD *)v40;
          v45 = *(_QWORD *)(v40 + 8);
          v44 = *(_QWORD *)(v40 + 16);
          if (v44)
          {
            v46 = (unint64_t *)(v44 + 8);
            do
              v47 = __ldxr(v46);
            while (__stxr(v47 + 1, v46));
          }
          v48 = *(std::__shared_weak_count **)(v7 + 16);
          *(_QWORD *)(v7 + 8) = v45;
          *(_QWORD *)(v7 + 16) = v44;
          if (v48)
          {
            v49 = (unint64_t *)&v48->__shared_owners_;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          v40 += 24;
          v7 += 24;
        }
        while (v40 != v43);
        v40 = v43;
      }
      if (v40 == v5)
        break;
      v51 = v8[1];
      ++v8;
      v41 = v51;
      v7 = v51;
    }
LABEL_80:
    if (*v8 + 4080 == v7)
    {
      v63 = v8[1];
      ++v8;
      v7 = v63;
    }
  }
LABEL_82:
  *(_QWORD *)a5 = v8;
  *(_QWORD *)(a5 + 8) = v7;
}

void dispatch::detail::group_notify<QMux::State::notifySyncSuccess_sync(void)::$_0>(dispatch_group_s *,dispatch_queue_s *,QMux::State::notifySyncSuccess_sync(void)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t *__p)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *__p;
  if (*(_DWORD *)(*__p + 216) == 2)
  {
    v3 = (const char *)(v2 + 40);
    if (*(char *)(v2 + 63) < 0)
      v3 = *(const char **)v3;
    (*(void (**)(_QWORD, uint64_t, const char *, ...))(**(_QWORD **)(v2 + 80) + 24))(*(_QWORD *)(v2 + 80), 6, "[%s] All pending clients started! QMux fully initialized\n", v3);
    QMux::State::setMainState(*__p, 3, v4, v5, v6, v7);
  }
  v8 = (std::__shared_weak_count *)__p[1];
  if (!v8)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    operator delete(__p);
  }
  else
  {
LABEL_9:
    operator delete(__p);
  }
}

void sub_19EA02C24(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = (std::__shared_weak_count *)v1[1];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS2_14handleReadDataEPKhjE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  QMux::State *v4;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = **(_DWORD **)v1;
  if (!v2)
    return 0;
  LODWORD(v3) = 0;
  v4 = *(QMux::State **)(v1 + 8);
  do
  {
    v3 = QMux::State::handleReadData_sync(v4, (const unsigned __int8 *)(**(_QWORD **)(v1 + 16) + v3), v2 - v3)+ v3;
    v2 = **(_DWORD **)v1;
  }
  while (v3 < v2);
  return v3;
}

uint64_t ___ZN8dispatch19async_and_wait_implIRU13block_pointerFjvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 40) + 16))();
  **(_DWORD **)(a1 + 32) = result;
  return result;
}

void sub_19EA02DAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double ___ZN8dispatch9sync_implIRU13block_pointerF13QMIWakeReasonvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  double result;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(a1 + 40) + 16))(&v5);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v3;
    operator delete(v3);
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
  }
  result = *(double *)&v5;
  *(_OWORD *)v2 = v5;
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)(v2 + 24) = v7;
  return result;
}

double ___ZN8dispatch19async_and_wait_implIRU13block_pointerF13QMIWakeReasonvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  double result;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(a1 + 40) + 16))(&v5);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v3;
    operator delete(v3);
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
  }
  result = *(double *)&v5;
  *(_OWORD *)v2 = v5;
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)(v2 + 24) = v7;
  return result;
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS2_12getWriteDataEPhjE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  uint64_t v1;
  QMux::State *v2;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(QMux::State **)v1;
  if (*(_DWORD *)(*(_QWORD *)v1 + 216) == 5
    || (result = QMux::State::getWriteDataInternal_sync(v2, **(unsigned __int8 ***)(v1 + 8), **(_DWORD **)(v1 + 16)),
        !(_DWORD)result))
  {
    result = *((_QWORD *)v2 + 23);
    if (result)
    {
      (*(void (**)(uint64_t, QMux::State *, _QWORD))(*(_QWORD *)result + 64))(result, v2, *((_QWORD *)v2 + 26));
      return 0;
    }
  }
  return result;
}

uint64_t ___ZN8dispatch19async_and_wait_implIRU13block_pointerFivEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 40) + 16))();
  **(_DWORD **)(a1 + 32) = result;
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::State::invokeReset(std::string)::$_0>(QMux::State::invokeReset(std::string)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::State::invokeReset(std::string)::$_0,std::default_delete<QMux::State::invokeReset(std::string)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t *v2;
  void **v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(uint64_t **)a1;
  v3 = (void **)(*(_QWORD *)a1 + 8);
  QMux::State::invokeReset_sync(**(_QWORD **)a1, (uint64_t)v3);
  if (*((char *)v2 + 31) < 0)
    operator delete(*v3);
  operator delete(v2);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    operator delete((void *)a1);
  }
  else
  {
LABEL_7:
    operator delete((void *)a1);
  }
}

void sub_19EA02FE4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  char *v2;
  void **v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (v2[31] < 0)
    operator delete(*v3);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<QMux::State::powerUp_sync(void)::$_0>(dispatch_group_s *,dispatch_queue_s *,QMux::State::powerUp_sync(void)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(QMux::State **__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  QMux::State *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  std::__shared_weak_count *v10;

  v2 = (std::__shared_weak_count *)__p[1];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *__p;
      if (*__p)
      {
        if (*((QMux::State **)v5 + 30) == __p[2])
        {
          QMux::State::powerUp_signalClients_sync(*__p);
          v6 = *((_QWORD *)v5 + 30);
          *((_QWORD *)v5 + 30) = 0;
          if (v6)
          {
            dispatch_group_leave(v6);
            dispatch_release(v6);
          }
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  v9 = __p[2];
  if (v9)
    dispatch_release(v9);
  v10 = (std::__shared_weak_count *)__p[1];
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  operator delete(__p);
}

void sub_19EA0310C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  NSObject *v6;
  std::__shared_weak_count *v7;

  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
    v6 = v1[2];
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v6 = v1[2];
    if (!v6)
    {
LABEL_5:
      v7 = (std::__shared_weak_count *)v1[1];
      if (!v7)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  dispatch_release(v6);
  v7 = (std::__shared_weak_count *)v1[1];
  if (!v7)
  {
LABEL_6:
    operator delete(v1);
    _Unwind_Resume(a1);
  }
LABEL_9:
  std::__shared_weak_count::__release_weak(v7);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<QMux::State::powerDown_sync(void)::$_0>(dispatch_group_s *,dispatch_queue_s *,QMux::State::powerDown_sync(void)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  std::__shared_weak_count *v10;

  v2 = (std::__shared_weak_count *)__p[1];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *__p;
      if (*__p)
      {
        if (*(_QWORD *)(v5 + 224) == __p[2])
        {
          v6 = *(NSObject **)(v5 + 232);
          *(_QWORD *)(v5 + 232) = 0;
          if (v6)
          {
            dispatch_group_leave(v6);
            dispatch_release(v6);
          }
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  v9 = __p[2];
  if (v9)
    dispatch_release(v9);
  v10 = (std::__shared_weak_count *)__p[1];
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  operator delete(__p);
}

void dispatch::detail::group_notify<QMux::State::powerDown_sync(void)::$_1>(dispatch_group_s *,dispatch_queue_s *,QMux::State::powerDown_sync(void)::$_1 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t *__p)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  const char *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  NSObject *v13;
  _QWORD *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  NSObject *v17;
  std::__shared_weak_count *v18;

  v2 = (std::__shared_weak_count *)__p[1];
  if (v2)
  {
    v3 = __p[3];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (*__p && *(_QWORD *)(*__p + 224) == __p[2])
      {
        QMux::State::powerDown_configIndSet_sync((QMux::State *)v3);
        v6 = (const char *)(v3 + 40);
        if (*(char *)(v3 + 63) < 0)
          v6 = *(const char **)v6;
        (*(void (**)(_QWORD, uint64_t, const char *, ...))(**(_QWORD **)(v3 + 80) + 24))(*(_QWORD *)(v3 + 80), 6, "[%s] EXTRA:     -- wait for QMIControl to finish configuring IND sets\n", v6);
        v7 = dispatch_group_create();
        (*(void (**)(_QWORD, NSObject *))(**(_QWORD **)(v3 + 64) + 120))(*(_QWORD *)(v3 + 64), v7);
        v9 = *__p;
        v8 = __p[1];
        if (v8)
        {
          v10 = (unint64_t *)(v8 + 16);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        v12 = __p[2];
        if (v12)
          dispatch_retain((dispatch_object_t)__p[2]);
        v13 = *(NSObject **)(v3 + 24);
        v14 = operator new(0x20uLL);
        *v14 = v9;
        v14[1] = v8;
        v14[2] = v3;
        v14[3] = v12;
        dispatch_group_notify_f(v7, v13, v14, (dispatch_function_t)dispatch::detail::group_notify<QMux::State::powerDown_sync(void)::$_1::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,QMux::State::powerDown_sync(void)::$_1::operator() const(void)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
        if (v7)
          dispatch_release(v7);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  v17 = __p[2];
  if (v17)
    dispatch_release(v17);
  v18 = (std::__shared_weak_count *)__p[1];
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  operator delete(__p);
}

void sub_19EA033B0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  std::__shared_weak_count *v10;

  if (v5)
  {
    dispatch_release(v5);
    if (!v4)
    {
LABEL_3:
      if (!v3)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else if (!v4)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v4);
  if (!v3)
  {
LABEL_8:
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (v8)
    {
      v9 = v1[2];
      if (!v9)
        goto LABEL_12;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v9 = v1[2];
      if (!v9)
      {
LABEL_12:
        v10 = (std::__shared_weak_count *)v1[1];
        if (!v10)
          goto LABEL_13;
        goto LABEL_16;
      }
    }
    dispatch_release(v9);
    v10 = (std::__shared_weak_count *)v1[1];
    if (!v10)
    {
LABEL_13:
      operator delete(v1);
      _Unwind_Resume(a1);
    }
LABEL_16:
    std::__shared_weak_count::__release_weak(v10);
    operator delete(v1);
    _Unwind_Resume(a1);
  }
LABEL_7:
  dispatch_release(v3);
  goto LABEL_8;
}

void dispatch::detail::group_notify<QMux::State::powerDown_sync(void)::$_1::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,QMux::State::powerDown_sync(void)::$_1::operator() const(void)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  QMux::State *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  NSObject *v13;
  std::__shared_weak_count *v14;

  v2 = (std::__shared_weak_count *)__p[1];
  if (v2)
  {
    v3 = (QMux::State *)__p[2];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v10 = v4;
      if (*__p && *(_QWORD *)(*__p + 224) == __p[3])
        QMux::State::powerDown_finish_sync(v3, v5, v6, v7, v8, v9);
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  v13 = __p[3];
  if (v13)
    dispatch_release(v13);
  v14 = (std::__shared_weak_count *)__p[1];
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  operator delete(__p);
}

void sub_19EA03518(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  NSObject *v6;
  std::__shared_weak_count *v7;

  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
    v6 = v1[3];
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v6 = v1[3];
    if (!v6)
    {
LABEL_5:
      v7 = (std::__shared_weak_count *)v1[1];
      if (!v7)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  dispatch_release(v6);
  v7 = (std::__shared_weak_count *)v1[1];
  if (!v7)
  {
LABEL_6:
    operator delete(v1);
    _Unwind_Resume(a1);
  }
LABEL_9:
  std::__shared_weak_count::__release_weak(v7);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::flush(dispatch_group_s *)::$_0>(QMux::flush(dispatch_group_s *)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::flush(dispatch_group_s *)::$_0,dispatch_queue_s *::default_delete<QMux::flush(dispatch_group_s *)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  QMux::State **v2;
  QMux::State *v3;
  char *v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  group v13;

  v2 = *(QMux::State ***)a1;
  v3 = **(QMux::State ***)a1;
  v4 = *(char **)(*(_QWORD *)a1 + 16);
  v13.gr_name = v4;
  if (v4)
    dispatch_retain((dispatch_object_t)v4);
  QMux::State::flush_sync(v3, &v13);
  if (v4)
    dispatch_release((dispatch_object_t)v4);
  v5 = v2[2];
  if (v5)
  {
    dispatch_group_leave(v5);
    v6 = v2[2];
    if (v6)
      dispatch_release(v6);
  }
  v7 = (std::__shared_weak_count *)v2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  operator delete(v2);
  v10 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (!v10)
    goto LABEL_17;
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    operator delete(a1);
  }
  else
  {
LABEL_17:
    operator delete(a1);
  }
}

void sub_19EA036A0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v4 = v3;
  if (v4)
    dispatch_release(v4);
  v6 = v2[2];
  if (v6)
  {
    dispatch_group_leave(v6);
    v7 = v2[2];
    if (v7)
      dispatch_release(v7);
  }
  v8 = (std::__shared_weak_count *)v2[1];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(v2);
  v11 = (std::__shared_weak_count *)v1[2];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::add(std::shared_ptr<qmi::QMuxClientIface>)::$_0>(QMux::add(std::shared_ptr<qmi::QMuxClientIface>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::add(std::shared_ptr<qmi::QMuxClientIface>)::$_0,std::default_delete<QMux::add(std::shared_ptr<qmi::QMuxClientIface>)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)(*(_QWORD *)*a1 + 64);
  v4 = (std::__shared_weak_count *)v2[3];
  v19 = v2[2];
  v20 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  QMIControl::add_sync(v3, &v19);
  v7 = v20;
  if (v20)
  {
    v8 = (unint64_t *)&v20->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)v2[3];
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)v2[1];
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v2);
  v16 = (std::__shared_weak_count *)a1[2];
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  operator delete(a1);
}

void sub_19EA038A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  _QWORD *v10;
  _QWORD *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  v15 = (std::__shared_weak_count *)v11[3];
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)v11[1];
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  operator delete(v11);
  v21 = (std::__shared_weak_count *)v10[2];
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::remove(std::shared_ptr<qmi::QMuxClientIface>)::$_0>(QMux::remove(std::shared_ptr<qmi::QMuxClientIface>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::remove(std::shared_ptr<qmi::QMuxClientIface>)::$_0,std::default_delete<QMux::remove(std::shared_ptr<qmi::QMuxClientIface>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = *(uint64_t **)a1;
  QMux::State::remove_sync(**(_QWORD **)a1, (_QWORD *)(*(_QWORD *)a1 + 16));
  v3 = (std::__shared_weak_count *)v2[3];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)v2[1];
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(v2);
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v9)
    goto LABEL_15;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    operator delete((void *)a1);
  }
  else
  {
LABEL_15:
    operator delete((void *)a1);
  }
}

void sub_19EA03A9C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  v4 = (std::__shared_weak_count *)v2[3];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)v2[1];
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  operator delete(v2);
  v10 = (std::__shared_weak_count *)v1[2];
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::restart(void)::$_0>(QMux::restart(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::restart(void)::$_0,dispatch_queue_s *::default_delete<QMux::restart(void)::$_0>>)::{lambda(void *)#1}::__invoke(QMIControl ****a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6, const char *a7)
{
  QMIControl ***v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  v8 = *a1;
  QMux::State::restart_sync(**a1, a2, a3, a4, a5, a6, a7);
  v9 = (std::__shared_weak_count *)v8[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(v8);
  v12 = (std::__shared_weak_count *)a1[2];
  if (!v12)
    goto LABEL_10;
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    operator delete(a1);
  }
  else
  {
LABEL_10:
    operator delete(a1);
  }
}

void sub_19EA03C20(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = (std::__shared_weak_count *)v2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v2);
  v7 = (std::__shared_weak_count *)v1[2];
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::stop(void)::$_0>(QMux::stop(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::stop(void)::$_0,dispatch_queue_s *::default_delete<QMux::stop(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  QMux::State **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *(QMux::State ***)a1;
  QMux::State::stop_sync(**(QMux::State ***)a1);
  v3 = (std::__shared_weak_count *)v2[1];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  operator delete(v2);
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v6)
    goto LABEL_10;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    operator delete((void *)a1);
  }
  else
  {
LABEL_10:
    operator delete((void *)a1);
  }
}

void sub_19EA03D6C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = (std::__shared_weak_count *)v2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v2);
  v7 = (std::__shared_weak_count *)v1[2];
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS1_8shutdownEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke(uint64_t a1)
{
  QMux::State::stop_sync(**(QMux::State ***)(a1 + 40));
}

void dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::start(void)::$_0>(QMux::start(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::start(void)::$_0,dispatch_queue_s *::default_delete<QMux::start(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6, const char *a7)
{
  uint64_t *v8;
  uint64_t v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  v8 = *a1;
  v9 = **a1;
  v10 = *(_DWORD *)(v9 + 216);
  switch(v10)
  {
    case 5:
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x298, "false", "is not", "true", "Should never start() a QMux that is being destroyed!", a7);
      break;
    case 1:
      goto LABEL_5;
    case 0:
      QMux::State::setMainState(**a1, 1, a3, a4, a5, a6);
LABEL_5:
      QMIControl::sendSync_sync(*(QMIControl **)(v9 + 64));
      break;
  }
  v11 = (std::__shared_weak_count *)v8[1];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(v8);
  v14 = (std::__shared_weak_count *)a1[2];
  if (!v14)
    goto LABEL_16;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    operator delete(a1);
  }
  else
  {
LABEL_16:
    operator delete(a1);
  }
}

void sub_19EA03F20(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = (std::__shared_weak_count *)v2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v2);
  v7 = (std::__shared_weak_count *)v1[2];
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::send(std::shared_ptr<qmi::QMuxClientIface>,std::shared_ptr<qmi::SerializedMessage>)::$_0>(QMux::send(std::shared_ptr<qmi::QMuxClientIface>,std::shared_ptr<qmi::SerializedMessage>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::send(std::shared_ptr<qmi::QMuxClientIface>,std::shared_ptr<qmi::SerializedMessage>)::$_0,std::default_delete<QMux::send(std::shared_ptr<qmi::QMuxClientIface>,std::shared_ptr<qmi::SerializedMessage>)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t *v10;

  v10 = *(uint64_t **)a1;
  QMux::State::send_sync(*v10, v10 + 2, v10 + 4, a4, a5, a6);
  std::unique_ptr<QMux::send(std::shared_ptr<qmi::QMuxClientIface>,std::shared_ptr<qmi::SerializedMessage>)::$_0,std::default_delete<QMux::send(std::shared_ptr<qmi::QMuxClientIface>,std::shared_ptr<qmi::SerializedMessage>)::$_0>>::~unique_ptr[abi:ne180100](&v10);
  v7 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  operator delete(a1);
}

void sub_19EA04034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a2);
  std::unique_ptr<QMux::send(std::shared_ptr<qmi::QMuxClientIface>,std::shared_ptr<qmi::SerializedMessage>)::$_0,std::default_delete<QMux::send(std::shared_ptr<qmi::QMuxClientIface>,std::shared_ptr<qmi::SerializedMessage>)::$_0>>::~unique_ptr[abi:ne180100]((_QWORD **)va);
  v4 = (std::__shared_weak_count *)v2[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v2);
  _Unwind_Resume(a1);
}

_QWORD **std::unique_ptr<QMux::send(std::shared_ptr<qmi::QMuxClientIface>,std::shared_ptr<qmi::SerializedMessage>)::$_0,std::default_delete<QMux::send(std::shared_ptr<qmi::QMuxClientIface>,std::shared_ptr<qmi::SerializedMessage>)::$_0>>::~unique_ptr[abi:ne180100](_QWORD **a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[5];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = (std::__shared_weak_count *)v2[3];
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)v2[1];
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::enterPowerMode(dispatch_group_s *,qmi::PowerProfile)::$_0>(QMux::enterPowerMode(dispatch_group_s *,qmi::PowerProfile)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::enterPowerMode(dispatch_group_s *,qmi::PowerProfile)::$_0,dispatch_queue_s *::default_delete<QMux::enterPowerMode(dispatch_group_s *,qmi::PowerProfile)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6, const char *a7)
{
  QMux::State **v8;
  NSObject *v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  v8 = *(QMux::State ***)a1;
  QMux::State::enterPowerMode_sync(**(QMux::State ***)a1, (dispatch_object_t)v8[2], (char *)*((unsigned int *)v8 + 6), a4, a5, a6, a7);
  v9 = v8[2];
  if (v9)
  {
    dispatch_group_leave(v9);
    v10 = v8[2];
    if (v10)
      dispatch_release(v10);
  }
  v11 = (std::__shared_weak_count *)v8[1];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(v8);
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v14)
    goto LABEL_13;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    operator delete((void *)a1);
  }
  else
  {
LABEL_13:
    operator delete((void *)a1);
  }
}

void sub_19EA0424C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = v2[2];
  if (v4)
  {
    dispatch_group_leave(v4);
    v5 = v2[2];
    if (v5)
      dispatch_release(v5);
  }
  v6 = (std::__shared_weak_count *)v2[1];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(v2);
  v9 = (std::__shared_weak_count *)v1[2];
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNKS1_9isRunningEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke(uint64_t a1)
{
  return *(_DWORD *)(***(_QWORD ***)(a1 + 40) + 216) == 3;
}

uint64_t ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke_0(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 40) + 16))();
  **(_BYTE **)(a1 + 32) = result;
  return result;
}

uint64_t ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke_0(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 40) + 16))();
  **(_BYTE **)(a1 + 32) = result;
  return result;
}

BOOL ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNKS1_13isPoweredDownEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke(uint64_t a1)
{
  return *(_DWORD *)(***(_QWORD ***)(a1 + 40) + 216) == 4;
}

void dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::setLogger(std::shared_ptr<ATCSLogger>)::$_0>(QMux::setLogger(std::shared_ptr<ATCSLogger>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::setLogger(std::shared_ptr<ATCSLogger>)::$_0,std::default_delete<QMux::setLogger(std::shared_ptr<ATCSLogger>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  v2 = *a1;
  v3 = **a1;
  v5 = (*a1)[2];
  v4 = (*a1)[3];
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(std::__shared_weak_count **)(v3 + 88);
  *(_QWORD *)(v3 + 80) = v5;
  *(_QWORD *)(v3 + 88) = v4;
  if (!v8)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)v2[3];
    if (!v11)
      goto LABEL_14;
  }
  else
  {
LABEL_8:
    v11 = (std::__shared_weak_count *)v2[3];
    if (!v11)
      goto LABEL_14;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_14:
  v14 = (std::__shared_weak_count *)v2[1];
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      operator delete(v2);
      v17 = (std::__shared_weak_count *)a1[2];
      if (v17)
        goto LABEL_19;
LABEL_22:
      operator delete(a1);
      return;
    }
  }
  operator delete(v2);
  v17 = (std::__shared_weak_count *)a1[2];
  if (!v17)
    goto LABEL_22;
LABEL_19:
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    goto LABEL_22;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<QMux::State>::execute_wrapped<QMux::dumpState(void)::$_0>(QMux::dumpState(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMux::dumpState(void)::$_0,dispatch_queue_s *::default_delete<QMux::dumpState(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  QMux::State **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *(QMux::State ***)a1;
  QMux::State::dumpState_sync(**(QMux::State ***)a1);
  v3 = (std::__shared_weak_count *)v2[1];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  operator delete(v2);
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v6)
    goto LABEL_10;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    operator delete((void *)a1);
  }
  else
  {
LABEL_10:
    operator delete((void *)a1);
  }
}

void sub_19EA045BC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = (std::__shared_weak_count *)v2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v2);
  v7 = (std::__shared_weak_count *)v1[2];
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4QMux5StateEE20execute_wrapped_syncIZNS1_23getQMIPowerDownMessagesEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = ***(_QWORD ****)(result + 40);
  v3 = v2[37];
  *a2 = v2[36];
  v4 = v2[38];
  a2[2] = v4;
  if (v4)
    v5 = (_QWORD *)(v3 + 16);
  else
    v5 = a2;
  a2[1] = v3;
  v2[37] = 0;
  v2[38] = 0;
  *v5 = a2 + 1;
  v2[36] = v2 + 37;
  return result;
}

void ___ZN8dispatch9sync_implIRU13block_pointerFNSt3__13setINS1_4pairIKN3qmi11ServiceTypeEKtEENS1_4lessIS8_EENS1_9allocatorIS8_EEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD **v6;
  _QWORD *v7;
  uint64_t v8;

  (*(void (**)(_QWORD ***__return_ptr))(**(_QWORD **)(a1 + 40) + 16))(&v6);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 + 8;
  std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(*(_QWORD **)(v2 + 8));
  *(_QWORD *)v2 = v6;
  v4 = v7;
  *(_QWORD *)(v2 + 8) = v7;
  v5 = v8;
  *(_QWORD *)(v2 + 16) = v8;
  if (v5)
  {
    v4[2] = v3;
    v6 = &v7;
    v7 = 0;
    v8 = 0;
    std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(0);
  }
  else
  {
    *(_QWORD *)v2 = v3;
    std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(v7);
  }
}

void ___ZN8dispatch19async_and_wait_implIRU13block_pointerFNSt3__13setINS1_4pairIKN3qmi11ServiceTypeEKtEENS1_4lessIS8_EENS1_9allocatorIS8_EEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD **v6;
  _QWORD *v7;
  uint64_t v8;

  (*(void (**)(_QWORD ***__return_ptr))(**(_QWORD **)(a1 + 40) + 16))(&v6);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 + 8;
  std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(*(_QWORD **)(v2 + 8));
  *(_QWORD *)v2 = v6;
  v4 = v7;
  *(_QWORD *)(v2 + 8) = v7;
  v5 = v8;
  *(_QWORD *)(v2 + 16) = v8;
  if (v5)
  {
    v4[2] = v3;
    v6 = &v7;
    v7 = 0;
    v8 = 0;
    std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(0);
  }
  else
  {
    *(_QWORD *)v2 = v3;
    std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(v7);
  }
}

void QMIServiceMsg::QMIServiceMsg(QMIServiceMsg *this, __int16 a2)
{
  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E4153F70;
  *((_WORD *)this + 6) = a2;
  *(_QWORD *)((char *)this + 14) = 0;
  *(_QWORD *)((char *)this + 30) = 0;
  *(_QWORD *)((char *)this + 22) = 0;
  *((_WORD *)this + 19) = 0;
  *((_DWORD *)this + 10) = 1;
  *((_WORD *)this + 22) = -1;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
}

{
  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E4153F70;
  *((_WORD *)this + 6) = a2;
  *(_QWORD *)((char *)this + 14) = 0;
  *(_QWORD *)((char *)this + 30) = 0;
  *(_QWORD *)((char *)this + 22) = 0;
  *((_WORD *)this + 19) = 0;
  *((_DWORD *)this + 10) = 1;
  *((_WORD *)this + 22) = -1;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
}

uint64_t QMIServiceMsg::decodeWord(QMIServiceMsg *this, const void *a2)
{
  return *(unsigned __int16 *)this;
}

uint64_t QMIServiceMsg::decodeByte(QMIServiceMsg *this, const void *a2)
{
  return *(unsigned __int8 *)this;
}

uint64_t QMIServiceMsg::setErrorValues(uint64_t this)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)(Tlv::Reader *__hidden);
  _WORD *v6;
  int v7;
  _QWORD v8[2];
  BOOL (*v9)(uint64_t, unsigned __int8 *);
  void *v10;
  char v11;

  v1 = this;
  v2 = *(_QWORD **)(this + 16);
  v3 = *(_QWORD **)(this + 24);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v9 = ___ZNK13QMIServiceMsg6getTlvEh_block_invoke;
  v10 = &__block_descriptor_tmp_11;
  v11 = 2;
  if (v2 == v3)
    goto LABEL_16;
  while (1)
  {
    this = ((uint64_t (*)(_QWORD *, _QWORD))v9)(v8, *v2);
    if ((this & 1) != 0)
      break;
    if (++v2 == v3)
    {
      v2 = v3;
      break;
    }
  }
  if (v2 == *(_QWORD **)(v1 + 24))
    goto LABEL_16;
  v4 = *v2;
  *(_WORD *)(v4 + 16) = 0;
  v5 = Tlv::Reader::this_type_does_not_support_comparisons;
  if (!v4)
    v5 = 0;
  if (!v5 || *(_WORD *)(v4 + 2) != 4)
  {
LABEL_16:
    *(_DWORD *)(v1 + 40) = 1;
    *(_WORD *)(v1 + 44) = 3;
  }
  else
  {
    *(_DWORD *)(v1 + 40) = 0;
    v6 = *(_WORD **)(v4 + 8);
    if (*v6)
    {
      v7 = (unsigned __int16)v6[1];
      *(_WORD *)(v1 + 44) = v7;
      if (!v7)
      {
        *(_DWORD *)(v1 + 40) = 1;
        *(_WORD *)(v1 + 44) = 4;
      }
    }
    else
    {
      *(_WORD *)(v1 + 44) = 0;
    }
  }
  return this;
}

double QMIServiceMsg::QMIServiceMsg(uint64_t a1, __int16 a2, int a3, __int16 a4)
{
  double result;

  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = off_1E4153F70;
  *(_WORD *)(a1 + 12) = a2;
  *(_QWORD *)(a1 + 14) = 0;
  *(_QWORD *)(a1 + 30) = 0;
  *(_QWORD *)(a1 + 22) = 0;
  *(_WORD *)(a1 + 38) = 0;
  *(_DWORD *)(a1 + 40) = a3;
  *(_WORD *)(a1 + 44) = a4;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  return result;
}

{
  double result;

  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = off_1E4153F70;
  *(_WORD *)(a1 + 12) = a2;
  *(_QWORD *)(a1 + 14) = 0;
  *(_QWORD *)(a1 + 30) = 0;
  *(_QWORD *)(a1 + 22) = 0;
  *(_WORD *)(a1 + 38) = 0;
  *(_DWORD *)(a1 + 40) = a3;
  *(_WORD *)(a1 + 44) = a4;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  return result;
}

uint64_t QMIServiceMsg::QMIServiceMsg(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v8;

  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = off_1E4153F70;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_WORD *)(a1 + 44) = -1;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(const void **)a2;
  v6 = v4 - *(_QWORD *)a2;
  if (v6 < 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v8 = (char *)operator new(v4 - *(_QWORD *)a2);
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 72) = &v8[v6];
  memcpy(v8, v5, v6);
  *(_QWORD *)(a1 + 64) = &v8[v6];
  *(_BYTE *)(a1 + 80) = a3;
  *(_WORD *)(a1 + 12) = *(_WORD *)&v8[a3];
  *(_WORD *)(a1 + 14) = v6 - a3 - 4;
  return a1;
}

void sub_19EA04AFC(_Unwind_Exception *a1)
{
  ATCSCounted *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *((_QWORD *)v1 + 8) = v4;
    operator delete(v4);
    v5 = (void *)*((_QWORD *)v1 + 2);
    if (!v5)
    {
LABEL_3:
      ATCSCounted::~ATCSCounted(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v5 = (void *)*((_QWORD *)v1 + 2);
    if (!v5)
      goto LABEL_3;
  }
  *((_QWORD *)v1 + 3) = v5;
  operator delete(v5);
  ATCSCounted::~ATCSCounted(v1);
  _Unwind_Resume(a1);
}

double QMIServiceMsg::create(QMIServiceMsg *this)
{
  __int16 v1;
  char *v2;
  double result;

  v1 = (__int16)this;
  v2 = (char *)operator new(0x58uLL);
  *((_DWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = off_1E4153F70;
  *((_WORD *)v2 + 6) = v1;
  *(_QWORD *)(v2 + 14) = 0;
  *(_QWORD *)(v2 + 30) = 0;
  *(_QWORD *)(v2 + 22) = 0;
  *((_WORD *)v2 + 19) = 0;
  *((_DWORD *)v2 + 10) = 1;
  *((_WORD *)v2 + 22) = -1;
  result = 0.0;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  return result;
}

QMIServiceMsg *QMIServiceMsg::create(QMIServiceMsg *this, const void *a2)
{
  unsigned int v2;
  QMIServiceMsg *v4;

  v2 = a2;
  v4 = (QMIServiceMsg *)operator new(0x58uLL);
  QMIServiceMsg::QMIServiceMsg(v4, (unsigned __int16 *)this, v2, 1);
  return v4;
}

void sub_19EA04DEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double QMIServiceMsg::create(__int16 a1, int a2, __int16 a3)
{
  char *v6;
  double result;

  v6 = (char *)operator new(0x58uLL);
  *((_DWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_1E4153F70;
  *((_WORD *)v6 + 6) = a1;
  *(_QWORD *)(v6 + 14) = 0;
  *(_QWORD *)(v6 + 30) = 0;
  *(_QWORD *)(v6 + 22) = 0;
  *((_WORD *)v6 + 19) = 0;
  *((_DWORD *)v6 + 10) = a2;
  *((_WORD *)v6 + 22) = a3;
  result = 0.0;
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  return result;
}

QMIServiceMsg *QMIServiceMsg::createIndication(QMIServiceMsg *this, const void *a2)
{
  unsigned int v2;
  QMIServiceMsg *v4;

  v2 = a2;
  v4 = (QMIServiceMsg *)operator new(0x58uLL);
  QMIServiceMsg::QMIServiceMsg(v4, (unsigned __int16 *)this, v2, 0);
  return v4;
}

void sub_19EA04EB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

QMIServiceMsg *QMIServiceMsg::createRequest(QMIServiceMsg *this, const void *a2)
{
  unsigned int v2;
  QMIServiceMsg *v4;

  v2 = a2;
  v4 = (QMIServiceMsg *)operator new(0x58uLL);
  QMIServiceMsg::QMIServiceMsg(v4, (unsigned __int16 *)this, v2, 0);
  return v4;
}

void sub_19EA04F0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double QMIServiceMsg::create(QMIServiceMsg *this, const qmi::MessageBase *a2)
{
  uint64_t v3;
  unsigned __int16 *v4;
  unint64_t v5;
  QMIServiceMsg *v6;
  double result;
  int v8;
  __int16 v9;
  int v10;
  __int16 v11;
  char *v12;

  v3 = *((_QWORD *)this + 1);
  if (v3 && (v4 = *(unsigned __int16 **)v3, v5 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3, v5 < 0xFFFF))
  {
    v6 = (QMIServiceMsg *)operator new(0x58uLL);
    QMIServiceMsg::QMIServiceMsg(v6, v4, (unsigned __int16)v5, 1);
  }
  else
  {
    v8 = *((_DWORD *)this + 1);
    if (qmi::isInternalError())
    {
      v9 = 0;
      v10 = 1;
      switch(v8)
      {
        case 65537:
          break;
        case 65538:
          v9 = 1;
          break;
        case 65539:
          v9 = 2;
          break;
        case 65542:
          v9 = 3;
          break;
        case 65552:
          v9 = 4;
          break;
        case 65553:
          v9 = 5;
          break;
        default:
          v9 = v8;
          v10 = 1;
          break;
      }
    }
    else
    {
      v10 = 0;
      v9 = v8;
    }
    v11 = *(_WORD *)this;
    v12 = (char *)operator new(0x58uLL);
    *((_DWORD *)v12 + 2) = 0;
    *(_QWORD *)v12 = off_1E4153F70;
    *((_WORD *)v12 + 6) = v11;
    *(_QWORD *)(v12 + 14) = 0;
    *(_QWORD *)(v12 + 30) = 0;
    *(_QWORD *)(v12 + 22) = 0;
    *((_WORD *)v12 + 19) = 0;
    *((_DWORD *)v12 + 10) = v10;
    *((_WORD *)v12 + 22) = v9;
    result = 0.0;
    *((_OWORD *)v12 + 3) = 0u;
    *((_OWORD *)v12 + 4) = 0u;
  }
  return result;
}

void sub_19EA0505C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t QMIServiceMsg::createFromRawData(QMIServiceMsg *this, const unsigned __int8 *a2)
{
  return 0;
}

uint64_t QMIServiceMsg::createFromRawData()
{
  return 0;
}

uint64_t QMIServiceMsg::getTlv(QMIServiceMsg *this)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)*((_QWORD *)this + 6);
  if (v1 == *((uint64_t **)this + 3))
    return 0;
  v2 = *v1;
  *((_QWORD *)this + 6) = v1 + 1;
  return v2;
}

uint64_t QMIServiceMsg::getTlv(QMIServiceMsg *this, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t result;
  _QWORD v6[2];
  BOOL (*v7)(uint64_t, unsigned __int8 *);
  void *v8;
  char v9;

  v2 = (_QWORD *)*((_QWORD *)this + 2);
  v3 = (_QWORD *)*((_QWORD *)this + 3);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v7 = ___ZNK13QMIServiceMsg6getTlvEh_block_invoke;
  v8 = &__block_descriptor_tmp_11;
  v9 = a2;
  if (v2 == v3)
    return 0;
  while ((((uint64_t (*)(_QWORD *, _QWORD))v7)(v6, *v2) & 1) == 0)
  {
    if (++v2 == v3)
    {
      v2 = v3;
      break;
    }
  }
  if (v2 == *((_QWORD **)this + 3))
    return 0;
  result = *v2;
  *(_WORD *)(*v2 + 16) = 0;
  return result;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t result;
  _QWORD v6[2];
  BOOL (*v7)(uint64_t, unsigned __int8 *);
  void *v8;
  char v9;

  v2 = (_QWORD *)*((_QWORD *)this + 2);
  v3 = (_QWORD *)*((_QWORD *)this + 3);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v7 = ___ZNK13QMIServiceMsg6getTlvEh_block_invoke;
  v8 = &__block_descriptor_tmp_11;
  v9 = a2;
  if (v2 == v3)
    return 0;
  while ((((uint64_t (*)(_QWORD *, _QWORD))v7)(v6, *v2) & 1) == 0)
  {
    if (++v2 == v3)
    {
      v2 = v3;
      break;
    }
  }
  if (v2 == *((_QWORD **)this + 3))
    return 0;
  result = *v2;
  *(_WORD *)(*v2 + 16) = 0;
  return result;
}

void QMIServiceMsg::addTlv(QMIServiceMsg *this, Tlv *a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  if (a2)
  {
    v5 = (char *)*((_QWORD *)this + 3);
    v4 = *((_QWORD *)this + 4);
    if ((unint64_t)v5 < v4)
    {
LABEL_3:
      *(_QWORD *)v5 = a2;
      v6 = (uint64_t)(v5 + 8);
      goto LABEL_25;
    }
  }
  else
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIServiceMsg.cpp", (const char *)0x120, "value", "!=", "NULL", 0, 0);
    v5 = (char *)*((_QWORD *)this + 3);
    v4 = *((_QWORD *)this + 4);
    if ((unint64_t)v5 < v4)
      goto LABEL_3;
  }
  v7 = (char *)*((_QWORD *)this + 2);
  v8 = (v5 - v7) >> 3;
  v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) >> 61)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v10 = v4 - (_QWORD)v7;
  if (v10 >> 2 > v9)
    v9 = v10 >> 2;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
    v11 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    if (v11 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v12 = (char *)operator new(8 * v11);
    v13 = &v12[8 * v8];
    v14 = &v12[8 * v11];
    *(_QWORD *)v13 = a2;
    v6 = (uint64_t)(v13 + 8);
    v15 = (char *)(v5 - v7);
    if (v5 == v7)
      goto LABEL_23;
    goto LABEL_16;
  }
  v12 = 0;
  v13 = (char *)(8 * v8);
  v14 = 0;
  *(_QWORD *)(8 * v8) = a2;
  v6 = 8 * v8 + 8;
  v15 = (char *)(v5 - v7);
  if (v5 != v7)
  {
LABEL_16:
    v16 = (unint64_t)(v15 - 8);
    if (v16 < 0x58)
      goto LABEL_30;
    if ((unint64_t)(v7 - v12) < 0x20)
      goto LABEL_30;
    v17 = (v16 >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v5[-v18];
    v13 -= v18;
    v20 = &v12[8 * v8 - 16];
    v21 = v5 - 16;
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *(_OWORD *)v21;
      *((_OWORD *)v20 - 1) = *((_OWORD *)v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    v5 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_30:
      do
      {
        v24 = *((_QWORD *)v5 - 1);
        v5 -= 8;
        *((_QWORD *)v13 - 1) = v24;
        v13 -= 8;
      }
      while (v5 != v7);
    }
    v5 = (char *)*((_QWORD *)this + 2);
  }
LABEL_23:
  *((_QWORD *)this + 2) = v13;
  *((_QWORD *)this + 3) = v6;
  *((_QWORD *)this + 4) = v14;
  if (v5)
    operator delete(v5);
LABEL_25:
  *((_QWORD *)this + 3) = v6;
  *((_WORD *)this + 7) += *((_WORD *)a2 + 1) + 3;
  *((_QWORD *)this + 6) = *((_QWORD *)this + 2);
}

void QMIServiceMsg::createTlv(QMIServiceMsg *this@<X0>, char a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  _WORD *v8;
  void *v9;

  v8 = operator new(0x18uLL);
  *(_BYTE *)v8 = a2;
  v8[1] = a3;
  v9 = operator new[](a3);
  *((_QWORD *)v8 + 1) = v9;
  v8[8] = 0;
  bzero(v9, a3);
  QMIServiceMsg::addTlv(this, (Tlv *)v8);
  *(_QWORD *)a4 = v8;
  *(_WORD *)(a4 + 8) = 0;
}

void sub_19EA05460(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *QMIServiceMsg::encodeByte(_QWORD *this, unsigned __int8 **a2)
{
  *(_BYTE *)(*this)++ = (_BYTE)a2;
  return this;
}

_BYTE **QMIServiceMsg::encodeWord(_BYTE **this, unsigned __int8 **a2)
{
  _BYTE *v2;

  **this = (_BYTE)a2;
  v2 = (*this)++;
  v2[1] = BYTE1(a2);
  ++*this;
  return this;
}

void QMIServiceMsg::serialize(QMIServiceMsg *this, char *a2, uint64_t a3)
{
  char *v6;
  char **v7;
  char **i;
  char *v9;
  size_t v10;
  char *v11;

  if (!a2)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIServiceMsg.cpp", (const char *)0x16C, "buffer", "!=", "NULL", 0, 0);
  *(_WORD *)a2 = *((_WORD *)this + 6);
  *((_WORD *)a2 + 1) = *((_WORD *)this + 7);
  v6 = a2 + 4;
  v7 = (char **)*((_QWORD *)this + 2);
  for (i = (char **)*((_QWORD *)this + 3); v7 != i; v6 = &v11[v10])
  {
    v9 = *v7++;
    v10 = *((unsigned __int16 *)v9 + 1);
    *v6 = *v9;
    *(_WORD *)(v6 + 1) = v10;
    v11 = v6 + 3;
    memcpy(v6 + 3, *((const void **)v9 + 1), v10);
  }
  if (v6 > &a2[a3])
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIServiceMsg.cpp", (const char *)0x186, "buffer", "<=", "(uint8_t*)bufferPtr + bufferLen", v6, &a2[a3]);
}

BOOL QMIServiceMsg::isError(QMIServiceMsg *this)
{
  return *((_DWORD *)this + 10) || *((_WORD *)this + 22) != 0;
}

uint64_t QMIServiceMsg::getNewError(QMIServiceMsg *this)
{
  int v1;
  uint64_t result;

  v1 = *((_DWORD *)this + 10);
  result = *((unsigned __int16 *)this + 22);
  if (v1 == 1)
  {
    if (result < 6)
      return dword_19EA1F1F4[(__int16)result];
    return result | 0xDEAD0000;
  }
  if (v1)
    return result | 0xDEAD0000;
  return result;
}

uint64_t QMIServiceMsg::getErrorString(QMIServiceMsg *this)
{
  return qmi::asString();
}

void _ATCSException::_ATCSException(_ATCSException *this, const char *a2, int a3, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  *(_QWORD *)this = off_1E4153FE8;
  _ATCSException::constructCommon(this, a2, a3, a4, va);
}

{
  va_list va;

  va_start(va, a4);
  *(_QWORD *)this = off_1E4153FE8;
  _ATCSException::constructCommon(this, a2, a3, a4, va);
}

uint64_t _ATCSException::constructCommon(_ATCSException *this, const char *a2, int a3, const char *a4, va_list a5)
{
  unsigned __int8 v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;

  if ((v9 & 1) == 0)
  {
    v17 = a3;
    a3 = v17;
    if (v18)
    {
      _ATCSException::constructCommon(char const*,unsigned int,char const*,char *)::trailerLength = 1;
      a3 = v17;
    }
  }
  v10 = _ATCSException::constructCommon(char const*,unsigned int,char const*,char *)::trailerLength;
  v11 = 512 - _ATCSException::constructCommon(char const*,unsigned int,char const*,char *)::trailerLength;
  v12 = (char *)this + 8;
  result = snprintf(v12, 512 - _ATCSException::constructCommon(char const*,unsigned int,char const*,char *)::trailerLength, "Exception at %s:%u: \n\t", a2, a3);
  if ((result & 0x80000000) == 0)
  {
    if (v11 <= result)
      v14 = 511 - v10;
    else
      v14 = result;
    v15 = v11 - v14;
    if (v11 - v14 >= 2)
    {
      result = vsnprintf(&v12[v14], v11 - v14, a4, a5);
      if ((result & 0x80000000) != 0)
        return result;
      v16 = result;
      if (v15 <= result)
        v16 = v15 - 1;
      v15 -= v16;
      v14 += v16;
    }
    return snprintf(&v12[v14], _ATCSException::constructCommon(char const*,unsigned int,char const*,char *)::trailerLength + v15, "%s", "\n");
  }
  return result;
}

void _ATCSException::append(_ATCSException *this, const char *a2, va_list a3)
{
  char *v5;
  size_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  size_t v9;
  unsigned int v10;
  size_t v11;
  size_t v12;
  unsigned int v13;
  size_t v14;

  v5 = (char *)this + 8;
  v6 = strnlen((const char *)this + 8, 0x200uLL);
  v7 = atomic_load((unsigned __int8 *)&qword_1ED710220);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1ED710220))
  {
    _MergedGlobals_0 = 1;
    __cxa_guard_release(&qword_1ED710220);
  }
  v8 = atomic_load((unsigned __int8 *)&qword_1ED710230);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1ED710230))
  {
    qword_1ED710228 = 1;
    __cxa_guard_release(&qword_1ED710230);
  }
  if (512 - v6 > qword_1ED710228 + _MergedGlobals_0)
  {
    v9 = 512 - (v6 + _MergedGlobals_0 + qword_1ED710228);
    v10 = snprintf(&v5[v6], v9, "%s", "\t");
    if ((v10 & 0x80000000) == 0)
    {
      v11 = v9 - v10;
      v12 = v6 + v10;
      if (v11 >= 2)
      {
        v13 = vsnprintf(&v5[v12], v11, a2, a3);
        if ((v13 & 0x80000000) != 0)
          return;
        v14 = v13;
        if (v11 <= v13)
          v14 = v11 - 1;
        v11 -= v14;
        v12 += v14;
      }
      snprintf(&v5[v12], qword_1ED710228 + v11, "%s", "\n");
    }
  }
}

void _ATCSException::_ATCSException(_ATCSException *this, const _ATCSException *a2)
{
  *(_QWORD *)this = off_1E4153FE8;
  strncpy((char *)this + 8, (const char *)a2 + 8, 0x200uLL);
}

{
  *(_QWORD *)this = off_1E4153FE8;
  strncpy((char *)this + 8, (const char *)a2 + 8, 0x200uLL);
}

void _ATCSException::triggerAssertion(_ATCSException *this, const char *a2, const char *a3, const char *a4, const char *a5, const char *a6)
{
  int v9;
  std::__shared_weak_count *v11;
  void (**v12)(std::exception *);
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  std::exception __b[66];

  v9 = (int)a2;
  __b[65] = *(std::exception *)MEMORY[0x1E0C80C00];
  memset(__b, 170, 0x208uLL);
  _ATCSException::_ATCSException((_ATCSException *)__b, (const char *)this, v9, "Assertion failure %s %s %s", a3, a4, a5);
  pthread_mutex_lock(&ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance);
  if (qword_1ED710188)
    goto LABEL_2;
  v12 = (void (**)(std::exception *))operator new(8uLL);
  *v12 = 0;
  v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__vftable = (std::__shared_weak_count_vtbl *)off_1E4154028;
  v11->__shared_owners_ = 0;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)v12;
  *v12 = (void (*)(std::exception *))DefaultATCSExceptionHandler;
  v13 = (std::__shared_weak_count *)off_1ED710190;
  qword_1ED710188 = (uint64_t)v12;
  off_1ED710190 = v11;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
LABEL_2:
    v12 = (void (**)(std::exception *))qword_1ED710188;
    v11 = (std::__shared_weak_count *)off_1ED710190;
    v20 = (std::__shared_weak_count *)off_1ED710190;
    if (!off_1ED710190)
      goto LABEL_12;
    goto LABEL_10;
  }
  v20 = v11;
LABEL_10:
  v16 = (unint64_t *)&v11->__shared_owners_;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
LABEL_12:
  pthread_mutex_unlock(&ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance);
  (*v12)(__b);
  if (v20)
  {
    v18 = (unint64_t *)&v20->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  std::exception::~exception(__b);
}

void sub_19EA05BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, std::exception a15)
{
  void *v15;

  operator delete(v15);
  pthread_mutex_unlock(&ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance);
  std::exception::~exception(&a15);
  _Unwind_Resume(a1);
}

void _ATCSException::triggerAssertion(_ATCSException *this, const char *a2, const char *a3, const char *a4, const char *a5, const char *a6, const void *a7, const char *a8, const char *a9, uint64_t a10, uint64_t a11, ...)
{
  int v17;
  std::__shared_weak_count *v19;
  void (**v20)(std::exception *);
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  std::exception __b[66];

  v17 = (int)a2;
  __b[65] = *(std::exception *)MEMORY[0x1E0C80C00];
  memset(__b, 170, 0x208uLL);
  _ATCSException::_ATCSException((_ATCSException *)__b, (const char *)this, v17, "Assertion failure %s %s %s, left operand %p right operand %p", a3, a4, a5, a6, a7);
  _ATCSException::append((_ATCSException *)__b, a8, (va_list)&a9);
  pthread_mutex_lock(&ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance);
  if (qword_1ED710188)
    goto LABEL_2;
  v20 = (void (**)(std::exception *))operator new(8uLL);
  *v20 = 0;
  v19 = (std::__shared_weak_count *)operator new(0x20uLL);
  v19->__vftable = (std::__shared_weak_count_vtbl *)off_1E4154028;
  v19->__shared_owners_ = 0;
  v19->__shared_weak_owners_ = 0;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)v20;
  *v20 = (void (*)(std::exception *))DefaultATCSExceptionHandler;
  v21 = (std::__shared_weak_count *)off_1ED710190;
  qword_1ED710188 = (uint64_t)v20;
  off_1ED710190 = v19;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
LABEL_2:
    v20 = (void (**)(std::exception *))qword_1ED710188;
    v19 = (std::__shared_weak_count *)off_1ED710190;
    v28 = (std::__shared_weak_count *)off_1ED710190;
    if (!off_1ED710190)
      goto LABEL_12;
    goto LABEL_10;
  }
  v28 = v19;
LABEL_10:
  v24 = (unint64_t *)&v19->__shared_owners_;
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
LABEL_12:
  pthread_mutex_unlock(&ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance);
  (*v20)(__b);
  if (v28)
  {
    v26 = (unint64_t *)&v28->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  std::exception::~exception(__b);
}

void sub_19EA05DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, std::exception a17)
{
  void *v17;

  operator delete(v17);
  pthread_mutex_unlock(&ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance);
  std::exception::~exception(&a17);
  _Unwind_Resume(a1);
}

void _ATCSException::setExceptionHandler(_ATCSException *this, void (*a2)(_ATCSException *))
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count_vtbl *v4;
  char v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void (*v11)(_ATCSException *);
  unint64_t *v12;
  unint64_t v13;

  pthread_mutex_lock(&ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance);
  if (!qword_1ED710188)
  {
    v4 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
    v4->~__shared_weak_count = 0;
    v3 = (std::__shared_weak_count *)operator new(0x20uLL);
    v3->__vftable = (std::__shared_weak_count_vtbl *)off_1E4154028;
    v3->__shared_owners_ = 0;
    v3->__shared_weak_owners_ = 0;
    v3[1].__vftable = v4;
    v4->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))DefaultATCSExceptionHandler;
    v6 = (std::__shared_weak_count *)off_1ED710190;
    qword_1ED710188 = (uint64_t)v4;
    off_1ED710190 = v3;
    if (!v6)
    {
LABEL_9:
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v5 = 0;
      goto LABEL_12;
    }
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v4 = (std::__shared_weak_count_vtbl *)qword_1ED710188;
  v3 = (std::__shared_weak_count *)off_1ED710190;
  if (off_1ED710190)
    goto LABEL_9;
  v5 = 1;
LABEL_12:
  pthread_mutex_unlock(&ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance);
  if (this)
    v11 = (void (*)(_ATCSException *))this;
  else
    v11 = DefaultATCSExceptionHandler;
  v4->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  if ((v5 & 1) == 0)
  {
    v12 = (unint64_t *)&v3->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_19EA05F90(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance);
  _Unwind_Resume(a1);
}

uint64_t _ATCSException::what(_ATCSException *this)
{
  return (uint64_t)this + 8;
}

void _ATCSException::~_ATCSException(std::exception *this)
{
  void *v1;

  std::exception::~exception(this);
  operator delete(v1);
}

uint64_t ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void DefaultATCSExceptionHandler(_ATCSException *a1)
{
  _ATCSException *exception;
  void *v3;

  exception = (_ATCSException *)__cxa_allocate_exception(0x208uLL);
  _ATCSException::_ATCSException(exception, a1);
}

void std::__shared_ptr_pointer<ATCSExceptionHandlerGlobal *,std::shared_ptr<ATCSExceptionHandlerGlobal>::__shared_ptr_default_delete<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal>,std::allocator<ATCSExceptionHandlerGlobal>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ATCSExceptionHandlerGlobal *,std::shared_ptr<ATCSExceptionHandlerGlobal>::__shared_ptr_default_delete<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal>,std::allocator<ATCSExceptionHandlerGlobal>>::__on_zero_shared(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 24);
  if (v1)
    operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<ATCSExceptionHandlerGlobal *,std::shared_ptr<ATCSExceptionHandlerGlobal>::__shared_ptr_default_delete<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal>,std::allocator<ATCSExceptionHandlerGlobal>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000019EA1F2A8)
    return a1 + 24;
  if (((v3 & 0x800000019EA1F2A8 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000019EA1F2A8))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000019EA1F2A8 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t __cxx_global_var_init_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>::~PthreadMutexGuardPolicy, &ctu::Singleton<ATCSExceptionHandlerGlobal,ATCSExceptionHandlerGlobal,ctu::PthreadMutexGuardPolicy<ATCSExceptionHandlerGlobal>>::sInstance, &dword_19E9C8000);
  }
  return result;
}

ssize_t ReadBuffer::readFromFD(ReadBuffer *this, int a2)
{
  unsigned int v2;
  unsigned int v3;
  ssize_t v4;
  ssize_t v7;

  v2 = *((_DWORD *)this + 2);
  v3 = *((_DWORD *)this + 3) + *((_DWORD *)this + 4);
  if (v2 < v3)
    return 0xFFFFFFFFLL;
  v7 = read(a2, (void *)(*(_QWORD *)this + v3), v2 - v3);
  v4 = v7;
  if (v7 < 0x80000000)
  {
    if (v7 <= 0)
      return v4;
  }
  else
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSFileDescriptorIPCDriver.cpp", (const char *)0x58, "ret", "<=", "std::numeric_limits<int>::max()", (const char *)v7, (const void *)0x7FFFFFFF);
  }
  *((_DWORD *)this + 3) += v4;
  return v4;
}

void ReadBuffer::consume(ReadBuffer *this, char *a2)
{
  int v2;
  const void *v4;
  unsigned int v5;
  size_t v6;

  v2 = (int)a2;
  v4 = (const void *)*((unsigned int *)this + 3);
  if (v4 < a2)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSFileDescriptorIPCDriver.cpp", (const char *)0x64, "amount", "<=", "fSize", (const char *)a2, v4);
    LODWORD(v4) = *((_DWORD *)this + 3);
  }
  v5 = *((_DWORD *)this + 4) + v2;
  v6 = ((_DWORD)v4 - v2);
  *((_DWORD *)this + 3) = v6;
  *((_DWORD *)this + 4) = v5;
  if ((_DWORD)v4 != v2)
  {
    if (v5 < *((_DWORD *)this + 2) >> 1)
      return;
    memmove(*(void **)this, (const void *)(*(_QWORD *)this + v5), v6);
  }
  *((_DWORD *)this + 4) = 0;
}

ATCSFileDescriptorIPCDriverPrivate *ATCSFileDescriptorIPCDriver::create(ATCSFileDescriptorIPCDriver *this, int a2, int a3)
{
  char v5;
  ATCSFileDescriptorIPCDriverPrivate *v6;

  v5 = (char)this;
  v6 = (ATCSFileDescriptorIPCDriverPrivate *)operator new(0x128uLL);
  ATCSFileDescriptorIPCDriverPrivate::ATCSFileDescriptorIPCDriverPrivate(v6, v5, a2, a3);
  return v6;
}

void sub_19EA06334(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ATCSFileDescriptorIPCDriver::ATCSFileDescriptorIPCDriver(ATCSFileDescriptorIPCDriver *this)
{
  _QWORD *v1;

  ATCSThreadedIPCDriver::ATCSThreadedIPCDriver(this);
  *v1 = off_1E4154078;
}

void ATCSFileDescriptorIPCDriver::~ATCSFileDescriptorIPCDriver(pthread_cond_t **this)
{
  pthread_mutex_t *v2;

  *this = (pthread_cond_t *)off_1E4154DB8;
  pthread_cond_destroy(this[5]);
  free(this[5]);
  v2 = (pthread_mutex_t *)this[2];
  pthread_mutex_destroy(v2);
  if (v2)
    operator delete(v2);
}

void ATCSFileDescriptorIPCDriverPrivate::ATCSFileDescriptorIPCDriverPrivate(ATCSFileDescriptorIPCDriverPrivate *this, char a2, int a3, int a4)
{
  _QWORD *v8;
  pthread_cond_t *v9;
  int v10;
  int v11;

  ATCSThreadedIPCDriver::ATCSThreadedIPCDriver(this);
  *v8 = off_1E4154120;
  v9 = (pthread_cond_t *)malloc(0x30uLL);
  *((_QWORD *)this + 8) = v9;
  pthread_cond_init(v9, 0);
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 9) = (char *)this + 80;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = (char *)this + 104;
  *((_DWORD *)this + 62) = -1;
  *((_DWORD *)this + 65) = 0;
  *((_BYTE *)this + 264) = a2;
  *((_DWORD *)this + 67) = a3;
  *((_DWORD *)this + 68) = a4;
  *((_QWORD *)this + 35) = 0;
  *((_WORD *)this + 144) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  v10 = pipe((int *)this + 63);
  if (v10)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSFileDescriptorIPCDriver.cpp", (const char *)0xF6, "ret", "==", "0", (const char *)v10, 0);
  v11 = *((_DWORD *)this + 63);
  *((_DWORD *)this + 62) = v11;
  if (__darwin_check_fd_set_overflow(v11, (char *)this + 120, 0))
    *(_DWORD *)((char *)this + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFFCLL) + 120) |= 1 << v11;
}

void sub_19EA0650C(_Unwind_Exception *a1)
{
  pthread_cond_t **v1;

  ATCSFileDescriptorIPCDriver::~ATCSFileDescriptorIPCDriver(v1);
  _Unwind_Resume(a1);
}

void sub_19EA06520(_Unwind_Exception *a1)
{
  pthread_cond_t **v1;
  pthread_cond_t **v2;
  _QWORD **v3;
  _QWORD **v4;

  std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(*v4);
  std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(*v3);
  ATCSCondition::~ATCSCondition(v2);
  ATCSFileDescriptorIPCDriver::~ATCSFileDescriptorIPCDriver(v1);
  _Unwind_Resume(a1);
}

void ATCSFileDescriptorIPCDriverPrivate::~ATCSFileDescriptorIPCDriverPrivate(ATCSFileDescriptorIPCDriverPrivate *this)
{
  pthread_mutex_t *v2;

  *(_QWORD *)this = off_1E4154120;
  ATCSThreadedIPCDriver::tearDownInternal(this);
  close(*((_DWORD *)this + 63));
  close(*((_DWORD *)this + 64));
  std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(*((_QWORD **)this + 13));
  std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(*((_QWORD **)this + 10));
  pthread_cond_destroy(*((pthread_cond_t **)this + 8));
  free(*((void **)this + 8));
  *(_QWORD *)this = off_1E4154DB8;
  pthread_cond_destroy(*((pthread_cond_t **)this + 5));
  free(*((void **)this + 5));
  v2 = (pthread_mutex_t *)*((_QWORD *)this + 2);
  pthread_mutex_destroy(v2);
  if (v2)
    operator delete(v2);
}

{
  void *v1;

  ATCSFileDescriptorIPCDriverPrivate::~ATCSFileDescriptorIPCDriverPrivate(this);
  operator delete(v1);
}

uint64_t ATCSFileDescriptorIPCDriverPrivate::getPrivateData(ATCSFileDescriptorIPCDriverPrivate *this, ATCSDispatcherCallback *a2)
{
  return (*(uint64_t (**)(ATCSDispatcherCallback *))(*(_QWORD *)a2 + 32))(a2);
}

void ATCSFileDescriptorIPCDriverPrivate::writeWorkerMainLoop(uint64_t a1, int a2)
{
  uint64_t v4;
  _opaque_pthread_t *v5;
  uint64_t v6;
  _opaque_pthread_t *v7;
  _BOOL8 v8;
  char *v9;
  _QWORD *v10;
  int v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  size_t v15;
  pthread_mutex_t *v16;
  pthread_mutex_t *v17;
  char *v18;
  ssize_t v19;
  ssize_t v20;
  pthread_mutex_t *v21;
  ATCSLogger *v22;
  pthread_mutex_t *v23;
  _QWORD *Instance;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  pthread_mutex_t *v28;
  pthread_t v29;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = pthread_self();
  if (!pthread_equal(v5, *(pthread_t *)(v4 + 64)))
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = pthread_self();
    v8 = pthread_equal(v7, *(pthread_t *)(v6 + 64)) != 0;
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSFileDescriptorIPCDriver.cpp", (const char *)0x114, "fLock.isLocked()", "==", "true", (const char *)v8, (const void *)1);
  }
  v9 = (char *)operator new[](*(unsigned int *)(a1 + 272));
  v10 = (_QWORD *)(a1 + 80);
  while (1)
  {
LABEL_4:
    if (*(_BYTE *)(a1 + 289))
    {
      *(_BYTE *)(a1 + 289) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, 1);
    }
    v11 = *(_DWORD *)(a1 + 260);
    if (!v11)
      break;
    *(_DWORD *)(a1 + 260) = 0;
    v12 = *(_QWORD **)(a1 + 72);
    if (v12 != v10)
      goto LABEL_8;
  }
  while (1)
  {
    v28 = *(pthread_mutex_t **)(a1 + 16);
    v29 = pthread_self();
    v28[1].__sig = 0;
    pthread_cond_wait(*(pthread_cond_t **)(a1 + 64), v28);
    v28[1].__sig = (uint64_t)v29;
    if ((*(_DWORD *)(a1 + 56) & a2) != 0)
      break;
    if (*(_BYTE *)(a1 + 289))
    {
      *(_BYTE *)(a1 + 289) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, 1);
    }
    v11 = *(_DWORD *)(a1 + 260);
    if (v11)
    {
      v10 = (_QWORD *)(a1 + 80);
      *(_DWORD *)(a1 + 260) = 0;
      v12 = *(_QWORD **)(a1 + 72);
      if (v12 == (_QWORD *)(a1 + 80))
        goto LABEL_4;
LABEL_8:
      while (1)
      {
        v13 = *((_DWORD *)v12 + 8);
        v14 = v12[5];
        if (*(_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14))
          break;
LABEL_20:
        v25 = (_QWORD *)v12[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v12[2];
            v27 = *v26 == (_QWORD)v12;
            v12 = v26;
          }
          while (!v27);
        }
        if (v26 != v10)
        {
          v12 = v26;
          if (v11)
            continue;
        }
        goto LABEL_4;
      }
      --v11;
      while (1)
      {
        v15 = *(_QWORD *)(a1 + 16);
        pthread_self();
        *(_QWORD *)(v15 + 64) = 0;
        pthread_mutex_unlock((pthread_mutex_t *)v15);
        LODWORD(v15) = (*(uint64_t (**)(uint64_t, char *, _QWORD))(*(_QWORD *)v14 + 24))(v14, v9, *(unsigned int *)(a1 + 272));
        v16 = *(pthread_mutex_t **)(a1 + 16);
        pthread_mutex_lock(v16);
        v16[1].__sig = (uint64_t)pthread_self();
        if ((*(_DWORD *)(a1 + 56) & a2) != 0)
          goto LABEL_34;
        v15 = (int)v15;
        if ((int)v15 >= 1)
        {
          v17 = *(pthread_mutex_t **)(a1 + 16);
          pthread_self();
          v17[1].__sig = 0;
          pthread_mutex_unlock(v17);
          v18 = v9;
          do
          {
            if (!v15)
            {
              v23 = *(pthread_mutex_t **)(a1 + 16);
              pthread_mutex_lock(v23);
              v23[1].__sig = (uint64_t)pthread_self();
              goto LABEL_10;
            }
            v19 = write(v13, v18, v15);
            v18 += v19;
            v15 -= v19;
          }
          while ((v19 & 0x8000000000000000) == 0);
          v20 = v19;
          v21 = *(pthread_mutex_t **)(a1 + 16);
          pthread_mutex_lock(v21);
          v22 = (ATCSLogger *)pthread_self();
          v21[1].__sig = (uint64_t)v22;
          if (v20 < 0)
          {
            Instance = ATCSLogger::getInstance(v22);
            (*(void (**)(_QWORD *, uint64_t, const char *, ...))(*Instance + 24))(Instance, 5, "Failed to write to completion, ret = %zd, fd = %d\n", v20, v13);
          }
        }
LABEL_10:
        if (!*(_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14))
        {
          v10 = (_QWORD *)(a1 + 80);
          goto LABEL_20;
        }
      }
    }
  }
LABEL_34:
  operator delete[](v9);
}

pthread_t ATCSFileDescriptorIPCDriverPrivate::readWorkerMainLoop(uint64_t a1, int a2)
{
  uint64_t v3;
  _opaque_pthread_t *v4;
  uint64_t v5;
  _opaque_pthread_t *v6;
  _BOOL8 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  int v18;
  int v19;
  _QWORD *v20;
  int v21;
  ATCSLogger *v22;
  _QWORD *Instance;
  pthread_mutex_t *v24;
  pthread_mutex_t *v25;
  pthread_t result;
  uint64_t v27;
  pthread_mutex_t *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  ssize_t v34;
  pthread_mutex_t *v35;
  pthread_mutex_t *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  const void *v40;
  size_t v41;
  pthread_mutex_t *v42;
  _QWORD *v43;
  _QWORD *v44;
  __int128 v45;
  pthread_mutex_t *v46;
  pthread_mutex_t *v47;
  pthread_mutex_t *v48;
  pthread_mutex_t *v49;
  uint64_t v50;
  int *v51;
  pthread_mutex_t *v52;
  int v53;
  char v55;
  fd_set v56;
  fd_set v57;
  fd_set v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 16);
  v4 = pthread_self();
  if (!pthread_equal(v4, *(pthread_t *)(v3 + 64)))
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = pthread_self();
    v7 = pthread_equal(v6, *(pthread_t *)(v5 + 64)) != 0;
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSFileDescriptorIPCDriver.cpp", (const char *)0x16C, "fLock.isLocked()", "==", "true", (const char *)v7, (const void *)1);
  }
  v53 = *(_DWORD *)(a1 + 248) + 1;
  v8 = *(_OWORD *)(a1 + 200);
  *(_OWORD *)&v58.fds_bits[16] = *(_OWORD *)(a1 + 184);
  *(_OWORD *)&v58.fds_bits[20] = v8;
  v9 = *(_OWORD *)(a1 + 232);
  *(_OWORD *)&v58.fds_bits[24] = *(_OWORD *)(a1 + 216);
  *(_OWORD *)&v58.fds_bits[28] = v9;
  v10 = *(_OWORD *)(a1 + 136);
  *(_OWORD *)v58.fds_bits = *(_OWORD *)(a1 + 120);
  *(_OWORD *)&v58.fds_bits[4] = v10;
  v11 = *(_OWORD *)(a1 + 168);
  *(_OWORD *)&v58.fds_bits[8] = *(_OWORD *)(a1 + 152);
  *(_OWORD *)&v58.fds_bits[12] = v11;
  v12 = (_QWORD *)(a1 + 80);
  v13 = *(_QWORD **)(a1 + 72);
  if (v13 != (_QWORD *)(a1 + 80))
  {
    do
    {
      v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v13[5] + 32))(v13[5]);
      *(_DWORD *)(v14 + 20) = 0;
      *(_DWORD *)(v14 + 24) = 0;
      v15 = (_QWORD *)v13[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v13[2];
          v17 = *v16 == (_QWORD)v13;
          v13 = v16;
        }
        while (!v17);
      }
      v13 = v16;
    }
    while (v16 != v12);
  }
  while (1)
  {
LABEL_51:
    *(_QWORD *)&v45 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v45 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v57.fds_bits[24] = v45;
    *(_OWORD *)&v57.fds_bits[28] = v45;
    *(_OWORD *)&v57.fds_bits[16] = v45;
    *(_OWORD *)&v57.fds_bits[20] = v45;
    *(_OWORD *)&v57.fds_bits[8] = v45;
    *(_OWORD *)&v57.fds_bits[12] = v45;
    *(_OWORD *)v57.fds_bits = v45;
    *(_OWORD *)&v57.fds_bits[4] = v45;
    *(_OWORD *)&v56.fds_bits[24] = v45;
    *(_OWORD *)&v56.fds_bits[28] = v45;
    *(_OWORD *)&v56.fds_bits[16] = v45;
    *(_OWORD *)&v56.fds_bits[20] = v45;
    *(_OWORD *)&v56.fds_bits[8] = v45;
    *(_OWORD *)&v56.fds_bits[12] = v45;
    *(_OWORD *)v56.fds_bits = v45;
    *(_OWORD *)&v56.fds_bits[4] = v45;
    v46 = *(pthread_mutex_t **)(a1 + 16);
    pthread_self();
    v46[1].__sig = 0;
    pthread_mutex_unlock(v46);
    v57 = v58;
    v56 = v58;
    v19 = select(v53, &v57, 0, &v56, 0);
    v47 = *(pthread_mutex_t **)(a1 + 16);
    pthread_mutex_lock(v47);
    result = pthread_self();
    v47[1].__sig = (uint64_t)result;
    if ((*(_DWORD *)(a1 + 56) & a2) != 0)
      return result;
    if (v19 < 0)
      break;
    v18 = *(_DWORD *)(a1 + 252);
    if (__darwin_check_fd_set_overflow(v18, &v57, 0)
      && ((*(unsigned int *)((char *)v57.fds_bits + (((unint64_t)v18 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v18) & 1) != 0)
    {
      v55 = -86;
      read(*(_DWORD *)(a1 + 252), &v55, 1uLL);
      --v19;
    }
    v20 = *(_QWORD **)(a1 + 72);
    if (v20 != v12 && v19)
    {
      while (1)
      {
        v21 = *((_DWORD *)v20 + 8);
        v22 = (ATCSLogger *)__darwin_check_fd_set_overflow(v21, &v56, 0);
        if ((_DWORD)v22)
        {
          if (((*(unsigned int *)((char *)v56.fds_bits + (((unint64_t)v21 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v21) & 1) != 0)
          {
            Instance = ATCSLogger::getInstance(v22);
            (*(void (**)(_QWORD *, uint64_t, const char *, ...))(*Instance + 24))(Instance, 5, "select exception on FD %d\n", v21);
            if (*(_QWORD *)(a1 + 280))
            {
              v24 = *(pthread_mutex_t **)(a1 + 16);
              pthread_self();
              v24[1].__sig = 0;
              pthread_mutex_unlock(v24);
              LOBYTE(v24) = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 280) + 24))(*(_QWORD *)(a1 + 280), v21, 0xFFFFFFFFLL);
              v25 = *(pthread_mutex_t **)(a1 + 16);
              pthread_mutex_lock(v25);
              result = pthread_self();
              v25[1].__sig = (uint64_t)result;
              if ((v24 & 1) != 0)
                return result;
            }
          }
        }
        if (!__darwin_check_fd_set_overflow(v21, &v57, 0)
          || ((*(unsigned int *)((char *)v57.fds_bits + (((unint64_t)v21 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v21) & 1) == 0)
        {
          goto LABEL_45;
        }
        v27 = v20[5];
        v28 = *(pthread_mutex_t **)(a1 + 16);
        pthread_self();
        v28[1].__sig = 0;
        pthread_mutex_unlock(v28);
        v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
        v30 = v29;
        v31 = *(_DWORD *)(v29 + 16);
        v32 = *(_DWORD *)(v29 + 20) + *(_DWORD *)(v29 + 24);
        if (v31 >= v32)
        {
          v34 = read(v21, (void *)(*(_QWORD *)(v29 + 8) + v32), v31 - v32);
          v33 = v34;
          if (v34 >= 0x80000000)
          {
            _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSFileDescriptorIPCDriver.cpp", (const char *)0x58, "ret", "<=", "std::numeric_limits<int>::max()", (const char *)v34, (const void *)0x7FFFFFFF);
LABEL_31:
            *(_DWORD *)(v30 + 20) += v33;
            goto LABEL_32;
          }
          if (v34 > 0)
            goto LABEL_31;
        }
        else
        {
          v33 = -1;
        }
LABEL_32:
        v35 = *(pthread_mutex_t **)(a1 + 16);
        pthread_mutex_lock(v35);
        result = pthread_self();
        v35[1].__sig = (uint64_t)result;
        if ((*(_DWORD *)(a1 + 56) & a2) != 0)
          return result;
        if (v33 < 0)
        {
          if (*(_QWORD *)(a1 + 280))
          {
            v48 = *(pthread_mutex_t **)(a1 + 16);
            pthread_self();
            v48[1].__sig = 0;
            pthread_mutex_unlock(v48);
            (*(void (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 280) + 32))(*(_QWORD *)(a1 + 280), "Writing to read buffer failed");
            goto LABEL_57;
          }
          return result;
        }
        v36 = *(pthread_mutex_t **)(a1 + 16);
        pthread_self();
        v36[1].__sig = 0;
        pthread_mutex_unlock(v36);
        if (*(_DWORD *)(v30 + 20))
        {
          v37 = *(_DWORD *)(v30 + 24);
          do
          {
            v38 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 16))(v27, *(_QWORD *)(v30 + 8) + v37);
            v39 = v38;
            if (!v38)
              break;
            v40 = (const void *)*(unsigned int *)(v30 + 20);
            if (v40 < v38)
            {
              _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSFileDescriptorIPCDriver.cpp", (const char *)0x64, "amount", "<=", "fSize", (const char *)v38, v40);
              LODWORD(v40) = *(_DWORD *)(v30 + 20);
            }
            v37 = *(_DWORD *)(v30 + 24) + v39;
            v41 = v40 - v39;
            *(_DWORD *)(v30 + 20) = v41;
            *(_DWORD *)(v30 + 24) = v37;
            if ((_DWORD)v40 != v39)
            {
              if (v37 < *(_DWORD *)(v30 + 16) >> 1)
                continue;
              memmove(*(void **)(v30 + 8), (const void *)(*(_QWORD *)(v30 + 8) + v37), v41);
              LODWORD(v41) = *(_DWORD *)(v30 + 20);
            }
            v37 = 0;
            *(_DWORD *)(v30 + 24) = 0;
          }
          while ((_DWORD)v41);
        }
        v42 = *(pthread_mutex_t **)(a1 + 16);
        pthread_mutex_lock(v42);
        result = pthread_self();
        v42[1].__sig = (uint64_t)result;
        if ((*(_DWORD *)(a1 + 56) & a2) != 0)
          return result;
LABEL_45:
        v43 = (_QWORD *)v20[1];
        if (v43)
        {
          do
          {
            v44 = v43;
            v43 = (_QWORD *)*v43;
          }
          while (v43);
        }
        else
        {
          do
          {
            v44 = (_QWORD *)v20[2];
            v17 = *v44 == (_QWORD)v20;
            v20 = v44;
          }
          while (!v17);
        }
        v20 = v44;
        if (v44 == v12)
          goto LABEL_51;
      }
    }
  }
  if (*(_QWORD *)(a1 + 280))
  {
    v49 = *(pthread_mutex_t **)(a1 + 16);
    pthread_self();
    v49[1].__sig = 0;
    pthread_mutex_unlock(v49);
    v50 = *(_QWORD *)(a1 + 280);
    v51 = __error();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 16))(v50, *v51);
LABEL_57:
    v52 = *(pthread_mutex_t **)(a1 + 16);
    pthread_mutex_lock(v52);
    result = pthread_self();
    v52[1].__sig = (uint64_t)result;
  }
  return result;
}

uint64_t ATCSFileDescriptorIPCDriverPrivate::handleWriteReady(ATCSFileDescriptorIPCDriverPrivate *this, ATCSDispatcherCallback *a2, void *a3)
{
  pthread_mutex_t *v5;
  pthread_mutex_t *v6;

  v5 = (pthread_mutex_t *)*((_QWORD *)this + 2);
  pthread_mutex_lock(v5);
  v5[1].__sig = (uint64_t)pthread_self();
  if (!*((_BYTE *)this + 288))
  {
    *(_BYTE *)(*(uint64_t (**)(ATCSDispatcherCallback *))(*(_QWORD *)a2 + 32))(a2) = 1;
    ++*((_DWORD *)this + 65);
    pthread_cond_signal(*((pthread_cond_t **)this + 8));
  }
  v6 = (pthread_mutex_t *)*((_QWORD *)this + 2);
  pthread_self();
  v6[1].__sig = 0;
  return pthread_mutex_unlock(v6);
}

void sub_19EA06F54(_Unwind_Exception *a1)
{
  uint64_t v1;
  pthread_mutex_t *v3;

  v3 = *(pthread_mutex_t **)(v1 + 16);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t ATCSFileDescriptorIPCDriverPrivate::clearWriteReady(ATCSFileDescriptorIPCDriverPrivate *this, ATCSDispatcherCallback *a2, void *a3)
{
  pthread_mutex_t *v5;
  pthread_mutex_t *v6;

  v5 = (pthread_mutex_t *)*((_QWORD *)this + 2);
  pthread_mutex_lock(v5);
  v5[1].__sig = (uint64_t)pthread_self();
  *(_BYTE *)(*(uint64_t (**)(ATCSDispatcherCallback *))(*(_QWORD *)a2 + 32))(a2) = 0;
  v6 = (pthread_mutex_t *)*((_QWORD *)this + 2);
  pthread_self();
  v6[1].__sig = 0;
  return pthread_mutex_unlock(v6);
}

void sub_19EA06FE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  pthread_mutex_t *v3;

  v3 = *(pthread_mutex_t **)(v1 + 16);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

void ATCSFileDescriptorIPCDriverPrivate::kickReader(ATCSFileDescriptorIPCDriverPrivate *this)
{
  const char *v1;
  char __buf;

  __buf = -86;
  v1 = (const char *)write(*((_DWORD *)this + 64), &__buf, 1uLL);
  __error();
  if (v1 != (const char *)1)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSFileDescriptorIPCDriver.cpp", (const char *)0x234, "ret", "==", "sizeof( buff)", v1, (const void *)1);
}

uint64_t ATCSFileDescriptorIPCDriverPrivate::kickWriter(pthread_cond_t **this)
{
  return pthread_cond_signal(this[8]);
}

uint64_t ATCSFileDescriptorIPCDriverPrivate::registerDispatcher(ATCSFileDescriptorIPCDriverPrivate *this, ATCSDispatcherCallback *a2, void *a3, void **a4)
{
  int v5;
  pthread_mutex_t *v8;
  const char *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  char *v13;
  int v14;
  BOOL v15;
  char **v16;
  uint64_t **v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  size_t v30;
  pthread_mutex_t *v31;

  v5 = (int)a3;
  v8 = (pthread_mutex_t *)*((_QWORD *)this + 2);
  pthread_mutex_lock(v8);
  v8[1].__sig = (uint64_t)pthread_self();
  if (*((_BYTE *)this + 264) && *((_DWORD *)this + 12))
    ATCSThreadedIPCDriver::stopWorkersInternal(this);
  v11 = (uint64_t **)((char *)this + 80);
  v10 = (uint64_t *)*((_QWORD *)this + 10);
  if (v10)
  {
    v12 = (uint64_t **)((char *)this + 80);
    v13 = (char *)*((_QWORD *)this + 10);
    do
    {
      v14 = *((_DWORD *)v13 + 8);
      v15 = v14 < v5;
      if (v14 >= v5)
        v16 = (char **)v13;
      else
        v16 = (char **)(v13 + 8);
      if (!v15)
        v12 = (uint64_t **)v13;
      v13 = *v16;
    }
    while (*v16);
    if (v12 == v11
      || *((_DWORD *)v12 + 8) > v5
      || (_ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSFileDescriptorIPCDriver.cpp", (const char *)0x248, "i", "==", "fMap.end()", v9), v10 = *v11, v17 = (uint64_t **)((char *)this + 80), *v11))
    {
      while (1)
      {
        while (1)
        {
          v17 = (uint64_t **)v10;
          v18 = *((_DWORD *)v10 + 8);
          if (v18 <= v5)
            break;
          v10 = *v17;
          v11 = v17;
          if (!*v17)
            goto LABEL_23;
        }
        if (v18 >= v5)
          break;
        v10 = v17[1];
        if (!v10)
        {
          v11 = v17 + 1;
          goto LABEL_23;
        }
      }
      v17[5] = (uint64_t *)a2;
      v23 = (_QWORD *)((char *)this + 104);
      v22 = (_QWORD *)*((_QWORD *)this + 13);
      if (v22)
        goto LABEL_30;
      goto LABEL_26;
    }
  }
  else
  {
    v17 = (uint64_t **)((char *)this + 80);
  }
LABEL_23:
  v19 = operator new(0x30uLL);
  v19[8] = v5;
  *((_QWORD *)v19 + 5) = 0;
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  *((_QWORD *)v19 + 2) = v17;
  *v11 = (uint64_t *)v19;
  v20 = **((_QWORD **)this + 9);
  v21 = (uint64_t *)v19;
  if (v20)
  {
    *((_QWORD *)this + 9) = v20;
    v21 = *v11;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 10), v21);
  ++*((_QWORD *)this + 11);
  *((_QWORD *)v19 + 5) = a2;
  v23 = (_QWORD *)((char *)this + 104);
  v22 = (_QWORD *)*((_QWORD *)this + 13);
  if (!v22)
  {
LABEL_26:
    v24 = v23;
LABEL_34:
    v26 = operator new(0x30uLL);
    v26[4] = a2;
    *((_DWORD *)v26 + 10) = 0;
    *v26 = 0;
    v26[1] = 0;
    v26[2] = v24;
    *v23 = v26;
    v27 = **((_QWORD **)this + 12);
    v28 = v26;
    if (v27)
    {
      *((_QWORD *)this + 12) = v27;
      v28 = (uint64_t *)*v23;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 13), v28);
    ++*((_QWORD *)this + 14);
    goto LABEL_38;
  }
  while (1)
  {
LABEL_30:
    while (1)
    {
      v24 = v22;
      v25 = v22[4];
      if (v25 <= (unint64_t)a2)
        break;
      v22 = (_QWORD *)*v24;
      v23 = v24;
      if (!*v24)
        goto LABEL_34;
    }
    if (v25 >= (unint64_t)a2)
      break;
    v22 = (_QWORD *)v24[1];
    if (!v22)
    {
      v23 = v24 + 1;
      goto LABEL_34;
    }
  }
  v26 = v24;
LABEL_38:
  *((_DWORD *)v26 + 10) = v5;
  if (__darwin_check_fd_set_overflow(v5, (char *)this + 120, 0))
    *(_DWORD *)((char *)this + (((unint64_t)v5 >> 3) & 0x1FFFFFFFFFFFFFFCLL) + 120) |= 1 << v5;
  if (*((_DWORD *)this + 62) < v5)
    *((_DWORD *)this + 62) = v5;
  v29 = operator new(0x20uLL);
  v30 = *((unsigned int *)this + 67);
  *(_BYTE *)v29 = 1;
  v29[1] = 0;
  *((_DWORD *)v29 + 5) = 0;
  *((_DWORD *)v29 + 6) = 0;
  *((_DWORD *)v29 + 4) = v30;
  v29[1] = operator new[](v30);
  *a4 = v29;
  ++*((_DWORD *)this + 65);
  if (*((_BYTE *)this + 264))
    ATCSThreadedIPCDriver::startWorkersInternal(this);
  v31 = (pthread_mutex_t *)*((_QWORD *)this + 2);
  pthread_self();
  v31[1].__sig = 0;
  return pthread_mutex_unlock(v31);
}

void sub_19EA07358(_Unwind_Exception *a1)
{
  uint64_t v1;
  pthread_mutex_t *v3;

  v3 = *(pthread_mutex_t **)(v1 + 16);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t ATCSFileDescriptorIPCDriverPrivate::unregisterDispatcher(ATCSFileDescriptorIPCDriverPrivate *this, ATCSDispatcherCallback *a2, void **a3)
{
  pthread_mutex_t *v6;
  const char *v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  char *v15;
  BOOL v16;
  unint64_t v17;
  uint64_t *v18;
  const char *v19;
  char *v20;
  char *v21;
  int v22;
  BOOL v23;
  char **v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t *v28;
  char *v29;
  int v30;
  unsigned int v31;
  _QWORD *v32;
  void *v33;
  pthread_mutex_t *v34;

  v6 = (pthread_mutex_t *)*((_QWORD *)this + 2);
  pthread_mutex_lock(v6);
  v6[1].__sig = (uint64_t)pthread_self();
  if (*((_BYTE *)this + 264) && *((_DWORD *)this + 12))
    ATCSThreadedIPCDriver::stopWorkersInternal(this);
  v8 = (_QWORD *)*((_QWORD *)this + 13);
  if (!v8)
    goto LABEL_15;
  v9 = (char *)this + 104;
  do
  {
    v10 = v8[4];
    v11 = v10 >= (unint64_t)a2;
    if (v10 >= (unint64_t)a2)
      v12 = v8;
    else
      v12 = v8 + 1;
    if (v11)
      v9 = (char *)v8;
    v8 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v9 == (char *)this + 104 || *((_QWORD *)v9 + 4) > (unint64_t)a2)
  {
LABEL_15:
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSFileDescriptorIPCDriver.cpp", (const char *)0x26A, "i", "!=", "fReverseMap.end()", v7);
    v9 = (char *)this + 104;
  }
  v13 = (char *)*((_QWORD *)v9 + 1);
  if (v13)
  {
    do
    {
      v14 = v13;
      v13 = *(char **)v13;
    }
    while (v13);
  }
  else
  {
    v15 = v9;
    do
    {
      v14 = (char *)*((_QWORD *)v15 + 2);
      v16 = *(_QWORD *)v14 == (_QWORD)v15;
      v15 = v14;
    }
    while (!v16);
  }
  v17 = *((int *)v9 + 10);
  if (*((char **)this + 12) == v9)
    *((_QWORD *)this + 12) = v14;
  v18 = (uint64_t *)*((_QWORD *)this + 13);
  --*((_QWORD *)this + 14);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v18, (uint64_t *)v9);
  operator delete(v9);
  v20 = (char *)*((_QWORD *)this + 10);
  if (!v20)
    goto LABEL_34;
  v21 = (char *)this + 80;
  do
  {
    v22 = *((_DWORD *)v20 + 8);
    v23 = v22 < (int)v17;
    if (v22 >= (int)v17)
      v24 = (char **)v20;
    else
      v24 = (char **)(v20 + 8);
    if (!v23)
      v21 = v20;
    v20 = *v24;
  }
  while (*v24);
  if (v21 == (char *)this + 80 || (int)v17 < *((_DWORD *)v21 + 8))
  {
LABEL_34:
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSFileDescriptorIPCDriver.cpp", (const char *)0x271, "j", "!=", "fMap.end()", v19);
    v21 = (char *)this + 80;
  }
  v25 = (char *)*((_QWORD *)v21 + 1);
  if (v25)
  {
    do
    {
      v26 = v25;
      v25 = *(char **)v25;
    }
    while (v25);
  }
  else
  {
    v27 = v21;
    do
    {
      v26 = (char *)*((_QWORD *)v27 + 2);
      v16 = *(_QWORD *)v26 == (_QWORD)v27;
      v27 = v26;
    }
    while (!v16);
  }
  if (*((char **)this + 9) == v21)
    *((_QWORD *)this + 9) = v26;
  v28 = (uint64_t *)*((_QWORD *)this + 10);
  --*((_QWORD *)this + 11);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v28, (uint64_t *)v21);
  operator delete(v21);
  v29 = (char *)this + 120;
  if (__darwin_check_fd_set_overflow(v17, (char *)this + 120, 0))
    *(_DWORD *)&v29[(v17 >> 3) & 0x1FFFFFFFFFFFFFFCLL] &= ~(1 << v17);
  if ((_DWORD)v17 == *((_DWORD *)this + 62))
  {
    if ((int)v17 < 1)
    {
LABEL_52:
      v31 = *((_DWORD *)this + 63);
    }
    else
    {
      v30 = v17 + 1;
      while (1)
      {
        v31 = v30 - 2;
        if (__darwin_check_fd_set_overflow(v30 - 2, (char *)this + 120, 0))
        {
          if (((*(_DWORD *)&v29[4 * (v31 >> 5)] >> v31) & 1) != 0)
            break;
        }
        if (--v30 <= 1)
          goto LABEL_52;
      }
    }
    *((_DWORD *)this + 62) = v31;
  }
  v32 = *a3;
  if (*a3)
  {
    v33 = (void *)v32[1];
    if (v33
      || (_ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSFileDescriptorIPCDriver.cpp", (const char *)0x31, "fBuffer", "!=", "NULL", 0, 0), (v33 = (void *)v32[1]) != 0))
    {
      operator delete[](v33);
    }
    operator delete(v32);
  }
  *a3 = 0;
  if (*((_BYTE *)this + 264) && *((_QWORD *)this + 11))
    ATCSThreadedIPCDriver::startWorkersInternal(this);
  v34 = (pthread_mutex_t *)*((_QWORD *)this + 2);
  pthread_self();
  v34[1].__sig = 0;
  return pthread_mutex_unlock(v34);
}

void sub_19EA076A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  pthread_mutex_t *v3;

  v3 = *(pthread_mutex_t **)(v1 + 16);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t ATCSFileDescriptorIPCDriverPrivate::enterLowPower(ATCSFileDescriptorIPCDriverPrivate *this)
{
  pthread_mutex_t *v2;
  pthread_mutex_t *v3;

  v2 = (pthread_mutex_t *)*((_QWORD *)this + 2);
  pthread_mutex_lock(v2);
  v2[1].__sig = (uint64_t)pthread_self();
  *((_BYTE *)this + 288) = 1;
  (*(void (**)(ATCSFileDescriptorIPCDriverPrivate *, _QWORD))(*(_QWORD *)this + 152))(this, 0);
  v3 = (pthread_mutex_t *)*((_QWORD *)this + 2);
  pthread_self();
  v3[1].__sig = 0;
  return pthread_mutex_unlock(v3);
}

void sub_19EA0773C(_Unwind_Exception *a1)
{
  uint64_t v1;
  pthread_mutex_t *v3;

  v3 = *(pthread_mutex_t **)(v1 + 16);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t ATCSFileDescriptorIPCDriverPrivate::exitLowPower(ATCSFileDescriptorIPCDriverPrivate *this)
{
  pthread_mutex_t *v2;
  pthread_mutex_t *v3;

  v2 = (pthread_mutex_t *)*((_QWORD *)this + 2);
  pthread_mutex_lock(v2);
  v2[1].__sig = (uint64_t)pthread_self();
  *((_WORD *)this + 144) = 256;
  pthread_cond_signal(*((pthread_cond_t **)this + 8));
  v3 = (pthread_mutex_t *)*((_QWORD *)this + 2);
  pthread_self();
  v3[1].__sig = 0;
  return pthread_mutex_unlock(v3);
}

void sub_19EA077B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  pthread_mutex_t *v3;

  v3 = *(pthread_mutex_t **)(v1 + 16);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t ATCSFileDescriptorIPCDriverPrivate::setErrorHandler(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 280) = a2;
  return result;
}

uint64_t ATCSFileDescriptorIPCDriverPrivate::reconfigureWithMask(ATCSFileDescriptorIPCDriverPrivate *this, fd_set *__src)
{
  const char *v4;
  char *v5;
  int v6;
  uint64_t result;

  if (*((_DWORD *)this + 12))
  {
    ATCSThreadedIPCDriver::stopWorkersInternal(this);
    v4 = (const char *)*((unsigned int *)this + 12);
    if ((_DWORD)v4)
      ATCSThreadedIPCDriver::stopWorkersInternal(this);
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSFileDescriptorIPCDriver.cpp", (const char *)0x2AE, "stopWorkersIfNeeded()", "==", "kNobody", v4, 0);
  }
  v5 = (char *)this + 120;
  memmove((char *)this + 120, __src, 0x80uLL);
  v6 = *((_DWORD *)this + 63);
  result = __darwin_check_fd_set_overflow(v6, v5, 0);
  if ((_DWORD)result)
    *(_DWORD *)&v5[((unint64_t)v6 >> 3) & 0x1FFFFFFFFFFFFFFCLL] |= 1 << v6;
  return result;
}

uint64_t ATCSFileDescriptorIPCDriverPrivate::handleWriteReadyForAllInternal(uint64_t this, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;

  v2 = *(_QWORD **)(this + 72);
  v3 = (_QWORD *)(this + 80);
  if (v2 != (_QWORD *)(this + 80))
  {
    if ((a2 & 1) != 0)
    {
      v5 = this;
      do
      {
        this = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2[5] + 32))(v2[5]);
        *(_BYTE *)this = a2;
        ++*(_DWORD *)(v5 + 260);
        v9 = (_QWORD *)v2[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (_QWORD *)v2[2];
            v8 = *v10 == (_QWORD)v2;
            v2 = v10;
          }
          while (!v8);
        }
        v2 = v10;
      }
      while (v10 != v3);
    }
    else
    {
      do
      {
        this = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2[5] + 32))(v2[5]);
        *(_BYTE *)this = a2;
        v6 = (_QWORD *)v2[1];
        if (v6)
        {
          do
          {
            v7 = v6;
            v6 = (_QWORD *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = (_QWORD *)v2[2];
            v8 = *v7 == (_QWORD)v2;
            v2 = v7;
          }
          while (!v8);
        }
        v2 = v7;
      }
      while (v7 != v3);
    }
  }
  return this;
}

uint64_t ATCSFileDescriptorIPCDriverPrivate::handleWriteReadyForAll(ATCSFileDescriptorIPCDriverPrivate *this)
{
  pthread_mutex_t *v2;
  pthread_mutex_t *v3;

  v2 = (pthread_mutex_t *)*((_QWORD *)this + 2);
  pthread_mutex_lock(v2);
  v2[1].__sig = (uint64_t)pthread_self();
  (*(void (**)(ATCSFileDescriptorIPCDriverPrivate *, uint64_t))(*(_QWORD *)this + 152))(this, 1);
  v3 = (pthread_mutex_t *)*((_QWORD *)this + 2);
  pthread_self();
  v3[1].__sig = 0;
  return pthread_mutex_unlock(v3);
}

void sub_19EA079F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  pthread_mutex_t *v3;

  v3 = *(pthread_mutex_t **)(v1 + 16);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t ATCSFileDescriptorIPCDriverPrivate::bootstrapInternal(_opaque_pthread_t *this)
{
  return ATCSThreadedIPCDriver::bootstrapInternal(this, this->__opaque[248]);
}

uint64_t ATCSFileDescriptorIPCDriverPrivate::startWorkers(ATCSFileDescriptorIPCDriverPrivate *this)
{
  if (*((_BYTE *)this + 264))
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSFileDescriptorIPCDriver.cpp", (const char *)0x9F, "fAutostart", "==", "false", (const char *)1, 0);
  return ATCSThreadedIPCDriver::startRemainingWorkers((_opaque_pthread_t *)this);
}

uint64_t ATCSFileDescriptorIPCDriverPrivate::stopWorkers(ATCSFileDescriptorIPCDriverPrivate *this)
{
  pthread_mutex_t *v2;
  pthread_mutex_t *v3;

  v2 = (pthread_mutex_t *)*((_QWORD *)this + 2);
  pthread_mutex_lock(v2);
  v2[1].__sig = (uint64_t)pthread_self();
  if (*((_BYTE *)this + 264))
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSFileDescriptorIPCDriver.cpp", (const char *)0xA6, "fAutostart", "==", "false", (const char *)1, 0);
  if (*((_DWORD *)this + 12))
    ATCSThreadedIPCDriver::stopWorkersInternal(this);
  v3 = (pthread_mutex_t *)*((_QWORD *)this + 2);
  pthread_self();
  v3[1].__sig = 0;
  return pthread_mutex_unlock(v3);
}

void sub_19EA07B04(_Unwind_Exception *a1)
{
  uint64_t v1;
  pthread_mutex_t *v3;

  v3 = *(pthread_mutex_t **)(v1 + 16);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

qmi::Server::State *qmi::Server::State::State(qmi::Server::State *this)
{
  NSObject *v2;
  xpc_object_t object;
  _BYTE v5[16];
  _BYTE v6[8];

  v2 = dispatch_queue_create("qmi::Server", 0);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v5, "com.apple.telephony.bb", "server");
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = v2;
  if (v2)
    dispatch_retain(v2);
  *((_QWORD *)this + 3) = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger((qmi::Server::State *)((char *)this + 32), (const ctu::OsLogLogger *)v6);
  MEMORY[0x1A1AEAED4](v6);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v5);
  if (v2)
    dispatch_release(v2);
  object = xpc_null_create();
  MEMORY[0x1A1AEAF64]((char *)this + 40, &object);
  xpc_release(object);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  return this;
}

void sub_19EA07C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  _QWORD *v9;

  xpc_release(object);
  ctu::SharedLoggable<qmi::ClientProxy::State,ctu::OsLogLogger>::~SharedLoggable(v9);
  _Unwind_Resume(a1);
}

void qmi::Server::State::~State(qmi::Server::State *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;

  v2 = *((_QWORD *)this + 6);
  if (v2)
  {
    v3 = *((_QWORD *)this + 7);
    v4 = (void *)*((_QWORD *)this + 6);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
          std::__shared_weak_count::__release_weak(v5);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v2;
    operator delete(v4);
  }
  MEMORY[0x1A1AEAF70]((char *)this + 40);
  MEMORY[0x1A1AEAED4]((char *)this + 32);
  v6 = *((_QWORD *)this + 3);
  if (v6)
    dispatch_release(v6);
  v7 = *((_QWORD *)this + 2);
  if (v7)
    dispatch_release(v7);
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

void qmi::Server::State::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  qmi::Server::State *v4;

  *(_QWORD *)a2 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAAAALL;
  v4 = (qmi::Server::State *)operator new(0x48uLL);
  qmi::Server::State::State(v4);
  *(_QWORD *)a2 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<qmi::Server::State>::shared_ptr[abi:ne180100]<qmi::Server::State,std::shared_ptr<qmi::Server::State> ctu::SharedSynchronizable<qmi::Server::State>::make_shared_ptr<qmi::Server::State>(qmi::Server::State*)::{lambda(qmi::Server::State*)#1},void>((std::__shared_weak_count_vtbl **)a2, (std::__shared_weak_count_vtbl *)v4);
  qmi::Server::State::init_sync(*(uint64_t **)a2, a1);
}

void sub_19EA07D74(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19EA07D88(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void qmi::Server::State::init_sync(uint64_t *a1, xpc_object_t *a2)
{
  xpc_connection_t *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _xpc_connection_s *v13;
  unint64_t v14;
  xpc_object_t object;
  _QWORD handler[6];
  std::__shared_weak_count *v17;
  _xpc_connection_s *v18;

  object = *a2;
  if (*a2)
    xpc_retain(*a2);
  else
    object = xpc_null_create();
  v3 = (xpc_connection_t *)(a1 + 5);
  ctu::XpcServerHelper::setListener();
  xpc_release(object);
  v4 = a1[2];
  if (v4)
    dispatch_retain((dispatch_object_t)a1[2]);
  v5 = (std::__shared_weak_count *)a1[1];
  if (!v5 || (v6 = *a1, (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (MEMORY[0x1A1AEB9A8](*v3) == MEMORY[0x1E0C812E0])
  {
    v13 = *v3;
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 1174405120;
    handler[2] = ___ZN3ctu15XpcServerHelper13startListenerIN3qmi6Server5StateEEEvN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke;
    handler[3] = &__block_descriptor_tmp_7;
    handler[4] = v3;
    handler[5] = v6;
    v17 = v8;
    do
      v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
    v18 = v13;
    xpc_connection_set_event_handler(v13, handler);
    xpc_connection_set_target_queue(*v3, v4);
    xpc_connection_resume(*v3);
    if (v17)
      std::__shared_weak_count::__release_weak(v17);
  }
  std::__shared_weak_count::__release_weak(v8);
  if (v4)
    dispatch_release(v4);
}

void sub_19EA07F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  NSObject *v17;
  std::__shared_weak_count *v18;

  if (a17)
    std::__shared_weak_count::__release_weak(a17);
  std::__shared_weak_count::__release_weak(v18);
  if (v17)
    dispatch_release(v17);
  _Unwind_Resume(a1);
}

void qmi::Server::State::handleListenerError(uint64_t a1, _QWORD *a2)
{
  NSObject *v3;
  char *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void *__dst[3];
  uint8_t buf[4];
  void **v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = *(NSObject **)(a1 + 32);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    return;
  v4 = (char *)MEMORY[0x1A1AEB90C](*a2);
  memset(__dst, 170, sizeof(__dst));
  v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    __dst[2] = (void *)(v9 | 0x8000000000000000);
    __dst[0] = v7;
  }
  else
  {
    HIBYTE(__dst[2]) = v5;
    v7 = __dst;
    if (!v5)
      goto LABEL_11;
  }
  memcpy(v7, v4, (size_t)v6);
LABEL_11:
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  free(v4);
  v10 = __dst;
  if (SHIBYTE(__dst[2]) < 0)
    v10 = (void **)__dst[0];
  *(_DWORD *)buf = 136315138;
  v13 = v10;
  _os_log_debug_impl(&dword_19E9C8000, v3, OS_LOG_TYPE_DEBUG, "#D Connection error: %s", buf, 0xCu);
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
}

uint64_t qmi::Server::State::handleNewClient(uint64_t *a1, xpc_object_t *a2)
{
  _xpc_connection_s *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  _QWORD handler[5];
  std::__shared_weak_count *v16;
  _xpc_connection_s *v17;

  v3 = (_xpc_connection_s *)*a2;
  if (!*a2)
  {
    v3 = (_xpc_connection_s *)xpc_null_create();
    v4 = a1[2];
    if (!v4)
      goto LABEL_4;
    goto LABEL_3;
  }
  xpc_retain(*a2);
  v4 = a1[2];
  if (v4)
LABEL_3:
    dispatch_retain(v4);
LABEL_4:
  v5 = (std::__shared_weak_count *)a1[1];
  if (!v5 || (v6 = *a1, (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 1174405120;
  handler[2] = ___ZNK3ctu15XpcServerHelper12acceptClientIN3qmi6Server5StateEEEvN3xpc10connectionEN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke;
  handler[3] = &__block_descriptor_tmp_6_0;
  handler[4] = v6;
  v16 = v8;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v17 = v3;
  xpc_connection_set_event_handler(v3, handler);
  xpc_connection_set_target_queue(v3, v4);
  xpc_connection_resume(v3);
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  std::__shared_weak_count::__release_weak(v8);
  if (v4)
    dispatch_release(v4);
  xpc_release(v3);
  return 1;
}

void sub_19EA08248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  void *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  std::__shared_weak_count::__release_weak(v17);
  if (v16)
    dispatch_release(v16);
  xpc_release(v15);
  _Unwind_Resume(a1);
}

void qmi::Server::State::handleClientMessage(_QWORD *a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  xpc_object_t reply;
  xpc_object_t v10;
  _QWORD *v11;
  xpc_object_t *v12;
  __int128 *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  void *v16;
  int v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  NSObject *v26;
  xpc_object_t v27;
  xpc_object_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  char *v32;
  size_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  void *__p[4];
  xpc_object_t *v40;
  unint64_t v41;
  uint8_t buf[4];
  void **v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v40 = (xpc_object_t *)0xAAAAAAAAAAAAAAAALL;
  v41 = 0xAAAAAAAAAAAAAAAALL;
  v5 = xpc_null_create();
  v6 = MEMORY[0x1A1AEB9A8](*a3);
  v7 = MEMORY[0x1E0C812F8];
  if (v6 == MEMORY[0x1E0C812F8])
  {
    reply = xpc_dictionary_create_reply(*a3);
    if (reply || (reply = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1A1AEB9A8](reply) == v7)
      {
        xpc_retain(reply);
        v8 = reply;
      }
      else
      {
        v8 = xpc_null_create();
      }
    }
    else
    {
      v8 = xpc_null_create();
      reply = 0;
    }
    v10 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v10);
    xpc_release(reply);
  }
  else
  {
    v8 = v5;
  }
  if (MEMORY[0x1A1AEB9A8](v8) == v7)
  {
    v12 = (xpc_object_t *)operator new(8uLL);
    *v12 = v8;
    if (v8)
      xpc_retain(v8);
    else
      *v12 = xpc_null_create();
    v11 = operator new(0x28uLL);
    *v11 = off_1E4154200;
    v11[1] = 0;
    v11[2] = 0;
    v11[3] = v12;
    v11[4] = MEMORY[0x1E0DE3A70];
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v40 = v12;
  v41 = (unint64_t)v11;
  xpc_release(v8);
  v13 = (__int128 *)a1[6];
  while (v13 != (__int128 *)a1[7])
  {
    __p[0] = 0;
    __p[1] = 0;
    v14 = (std::__shared_weak_count *)*((_QWORD *)v13 + 1);
    if (v14)
    {
      v15 = std::__shared_weak_count::lock(v14);
      __p[1] = v15;
      if (v15)
      {
        v16 = *(void **)v13;
        __p[0] = v16;
        if (v16)
        {
          v17 = (*(uint64_t (**)(void *, xpc_object_t *, _QWORD *))(*(_QWORD *)v16 + 16))(v16, a3, a1 + 2);
          v13 += v17 ^ 1u;
          goto LABEL_37;
        }
      }
    }
    else
    {
      v15 = 0;
    }
    v18 = v13 + 1;
    v19 = (__int128 *)a1[7];
    if (v13 + 1 == v19)
    {
      v20 = v13;
    }
    else
    {
      do
      {
        v21 = *v18;
        *(_QWORD *)v18 = 0;
        *((_QWORD *)v18 + 1) = 0;
        v22 = (std::__shared_weak_count *)*((_QWORD *)v18 - 1);
        *(v18 - 1) = v21;
        if (v22)
          std::__shared_weak_count::__release_weak(v22);
        ++v18;
      }
      while (v18 != v19);
      v20 = v18 - 1;
      v18 = (__int128 *)a1[7];
    }
    while (v18 != v20)
    {
      v23 = (std::__shared_weak_count *)*((_QWORD *)v18 - 1);
      if (v23)
        std::__shared_weak_count::__release_weak(v23);
      --v18;
    }
    a1[7] = v20;
    if (!v15)
      continue;
    v17 = 2;
LABEL_37:
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    if ((v17 | 2) != 2)
      goto LABEL_47;
  }
  v26 = a1[4];
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl(&dword_19E9C8000, v26, OS_LOG_TYPE_DEFAULT, "#I Incoming connection was not accepted; dropped.",
      (uint8_t *)__p,
      2u);
    v26 = a1[4];
  }
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
  {
    v32 = (char *)MEMORY[0x1A1AEB90C](*a3);
    memset(__p, 170, 24);
    v33 = strlen(v32);
    if (v33 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v34 = (void *)v33;
    if (v33 >= 0x17)
    {
      v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v33 | 7) != 0x17)
        v36 = v33 | 7;
      v37 = v36 + 1;
      v35 = operator new(v36 + 1);
      __p[1] = v34;
      __p[2] = (void *)(v37 | 0x8000000000000000);
      __p[0] = v35;
    }
    else
    {
      HIBYTE(__p[2]) = v33;
      v35 = __p;
      if (!v33)
        goto LABEL_61;
    }
    memcpy(v35, v32, (size_t)v34);
LABEL_61:
    *((_BYTE *)v34 + (_QWORD)v35) = 0;
    free(v32);
    v38 = __p;
    if (SHIBYTE(__p[2]) < 0)
      v38 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v43 = v38;
    _os_log_debug_impl(&dword_19E9C8000, v26, OS_LOG_TYPE_DEBUG, "#D  -- details of dropped connection: %s", buf, 0xCu);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
  v27 = xpc_string_create("not accepted");
  if (!v27)
    v27 = xpc_null_create();
  xpc_dictionary_set_value(*v40, "error", v27);
  v28 = xpc_null_create();
  xpc_release(v27);
  xpc_release(v28);
LABEL_47:
  v29 = (std::__shared_weak_count *)v41;
  if (v41)
  {
    v30 = (unint64_t *)(v41 + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_19EA08704()
{
  __break(1u);
}

void sub_19EA08734(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x19EA08784);
  }
  _Unwind_Resume(exception_object);
}

void sub_19EA0877C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_19EA0878C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x19EA087A8);
}

void qmi::Server::State::getEndpoint(NSObject **this@<X0>, xpc_object_t *a2@<X8>)
{
  uint64_t v3;
  NSObject *v4;
  qmi::Server::State *v5;
  _QWORD v6[6];
  _QWORD *v7;
  uint64_t block;
  uint64_t v9;
  void (*v10)(uint64_t);
  void *v11;
  xpc_object_t *v12;
  _QWORD *v13;

  v3 = MEMORY[0x1E0C809B0];
  v5 = (qmi::Server::State *)this;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi6Server5StateEE20execute_wrapped_syncIZNKS3_11getEndpointEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v6[3] = &__block_descriptor_tmp_8_1;
  v6[4] = this;
  v6[5] = &v5;
  v7 = v6;
  v4 = this[2];
  if (this[3])
  {
    *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *a2 = xpc_null_create();
    block = v3;
    v9 = 0x40000000;
    v10 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFN3xpc8endpointEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke;
    v11 = &__block_descriptor_tmp_11_0;
    v12 = a2;
    v13 = &v7;
    dispatch_async_and_wait(v4, &block);
  }
  else
  {
    *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *a2 = xpc_null_create();
    block = v3;
    v9 = 0x40000000;
    v10 = ___ZN8dispatch9sync_implIRU13block_pointerFN3xpc8endpointEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke;
    v11 = &__block_descriptor_tmp_10_0;
    v12 = a2;
    v13 = &v7;
    dispatch_sync(v4, &block);
  }
}

void qmi::Server::State::registerAccepter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  _QWORD *v11;
  unint64_t *p_shared_owners;
  NSObject *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = *a2;
  v4 = a2[1];
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  if (!v7 || (v8 = *a1, (v9 = std::__shared_weak_count::lock(v7)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v10 = v9;
  v11 = operator new(0x18uLL);
  *v11 = a1;
  v11[1] = v3;
  v11[2] = v4;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v13 = a1[2];
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  v15 = operator new(0x18uLL);
  *v15 = v11;
  v15[1] = v8;
  v15[2] = v10;
  dispatch_async_f(v13, v15, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<qmi::Server::State>::execute_wrapped<qmi::Server::State::registerAccepter(std::weak_ptr<qmi::Server::Accepter>)::$_0>(qmi::Server::State::registerAccepter(std::weak_ptr<qmi::Server::Accepter>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Server::State::registerAccepter(std::weak_ptr<qmi::Server::Accepter>)::$_0,std::default_delete<qmi::Server::State::registerAccepter(std::weak_ptr<qmi::Server::Accepter>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

uint64_t qmi::Server::Server(uint64_t a1, xpc_object_t *a2)
{
  qmi::Server::State *v4;

  *(_QWORD *)a1 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)(a1 + 8) = 0xAAAAAAAAAAAAAAAALL;
  v4 = (qmi::Server::State *)operator new(0x48uLL);
  qmi::Server::State::State(v4);
  *(_QWORD *)a1 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)(a1 + 8) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<qmi::Server::State>::shared_ptr[abi:ne180100]<qmi::Server::State,std::shared_ptr<qmi::Server::State> ctu::SharedSynchronizable<qmi::Server::State>::make_shared_ptr<qmi::Server::State>(qmi::Server::State*)::{lambda(qmi::Server::State*)#1},void>((std::__shared_weak_count_vtbl **)a1, (std::__shared_weak_count_vtbl *)v4);
  qmi::Server::State::init_sync(*(uint64_t **)a1, a2);
  return a1;
}

void sub_19EA08A24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = v1;
  v4 = *(std::__shared_weak_count **)(v2 + 8);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19EA08A6C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void qmi::Server::~Server(qmi::Server *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t qmi::Server::create@<X0>(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  return qmi::Server::Server(a2, a1);
}

void qmi::Server::getEndpoint(NSObject ***this@<X0>, xpc_object_t *a2@<X8>)
{
  qmi::Server::State::getEndpoint(*this, a2);
}

void qmi::Server::registerAccepter(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  uint64_t v6[2];

  v2 = *a1;
  v3 = (std::__shared_weak_count *)a2[1];
  v6[0] = *a2;
  v6[1] = (uint64_t)v3;
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
    qmi::Server::State::registerAccepter(v2, v6);
    std::__shared_weak_count::__release_weak(v3);
  }
  else
  {
    qmi::Server::State::registerAccepter(v2, v6);
  }
}

void std::__shared_ptr_pointer<xpc::dict *,void (*)(xpc::dict *),std::allocator<xpc::dict>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<xpc::dict *,void (*)(xpc::dict *),std::allocator<xpc::dict>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<xpc::dict *,void (*)(xpc::dict *),std::allocator<xpc::dict>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000019EA1F38ALL)
    return a1 + 32;
  if (((v3 & 0x800000019EA1F38ALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000019EA1F38ALL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000019EA1F38ALL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 32;
  return 0;
}

std::__shared_weak_count_vtbl **std::shared_ptr<qmi::Server::State>::shared_ptr[abi:ne180100]<qmi::Server::State,std::shared_ptr<qmi::Server::State> ctu::SharedSynchronizable<qmi::Server::State>::make_shared_ptr<qmi::Server::State>(qmi::Server::State*)::{lambda(qmi::Server::State*)#1},void>(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E4154250;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = a2;
  a1[1] = (std::__shared_weak_count_vtbl *)v4;
  if (!a2)
    return a1;
  v6 = (std::__shared_weak_count *)a2->~__shared_weak_count_0;
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
    a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
    a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_19EA08D8C(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)std::shared_ptr<qmi::Server::State> ctu::SharedSynchronizable<qmi::Server::State>::make_shared_ptr<qmi::Server::State>(qmi::Server::State*)::{lambda(qmi::Server::State*)#1}::operator() const(qmi::Server::State*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_19EA08DAC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<qmi::Server::State *,std::shared_ptr<qmi::Server::State> ctu::SharedSynchronizable<qmi::Server::State>::make_shared_ptr<qmi::Server::State>(qmi::Server::State*)::{lambda(qmi::Server::State *)#1},std::allocator<qmi::Server::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<qmi::Server::State *,std::shared_ptr<qmi::Server::State> ctu::SharedSynchronizable<qmi::Server::State>::make_shared_ptr<qmi::Server::State>(qmi::Server::State*)::{lambda(qmi::Server::State *)#1},std::allocator<qmi::Server::State>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 16), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<qmi::Server::State> ctu::SharedSynchronizable<qmi::Server::State>::make_shared_ptr<qmi::Server::State>(qmi::Server::State*)::{lambda(qmi::Server::State*)#1}::operator() const(qmi::Server::State*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<qmi::Server::State *,std::shared_ptr<qmi::Server::State> ctu::SharedSynchronizable<qmi::Server::State>::make_shared_ptr<qmi::Server::State>(qmi::Server::State*)::{lambda(qmi::Server::State *)#1},std::allocator<qmi::Server::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN3qmi6Server5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN3qmi6Server5StateEE15make_shared_ptrIS3_EENSt3__110shared_"
                                "ptrIT_EEPS8_EUlPS3_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN3qmi6Server5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN3qmi6Server5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void std::shared_ptr<qmi::Server::State> ctu::SharedSynchronizable<qmi::Server::State>::make_shared_ptr<qmi::Server::State>(qmi::Server::State*)::{lambda(qmi::Server::State*)#1}::operator() const(qmi::Server::State*)::{lambda(void *)#1}::__invoke(qmi::Server::State *a1)
{
  void *v1;

  if (a1)
  {
    qmi::Server::State::~State(a1);
    operator delete(v1);
  }
}

void ___ZN3ctu15XpcServerHelper13startListenerIN3qmi6Server5StateEEEvN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke(_QWORD *a1, xpc_object_t a2)
{
  std::__shared_weak_count *v3;
  ctu::XpcServerHelper *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  xpc_object_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  xpc_object_t v14[2];
  std::__shared_weak_count *v15;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (ctu::XpcServerHelper *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v15 = v6;
    if (v6)
    {
      v7 = v6;
      v8 = (void *)a1[5];
      v14[1] = v8;
      if (!v8)
      {
LABEL_21:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      v9 = MEMORY[0x1A1AEB9A8](a2);
      v10 = MEMORY[0x1E0C812E0];
      if (v9 != MEMORY[0x1E0C812E0])
      {
        if (v9 == MEMORY[0x1E0C81310] && *(_QWORD *)ctu::XpcServerHelper::getListener(v5) == a1[7])
        {
          v14[0] = a2;
          if (a2)
          {
            xpc_retain(a2);
          }
          else
          {
            a2 = xpc_null_create();
            v14[0] = a2;
          }
          qmi::Server::State::handleListenerError((uint64_t)v8, v14);
          xpc_release(a2);
        }
        goto LABEL_21;
      }
      if (a2)
      {
        xpc_retain(a2);
        v14[0] = a2;
      }
      else
      {
        a2 = xpc_null_create();
        v14[0] = a2;
        if (!a2)
        {
          v11 = xpc_null_create();
          a2 = 0;
          goto LABEL_16;
        }
      }
      if (MEMORY[0x1A1AEB9A8](a2) == v10)
      {
        xpc_retain(a2);
        v11 = a2;
        goto LABEL_17;
      }
      v11 = xpc_null_create();
LABEL_16:
      v14[0] = v11;
LABEL_17:
      qmi::Server::State::handleNewClient((uint64_t *)v8, v14);
      xpc_release(v11);
      v14[0] = 0;
      xpc_release(a2);
      v7 = v15;
      if (!v15)
        return;
      goto LABEL_21;
    }
  }
}

void sub_19EA09020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  xpc_release(v11);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrIN3qmi6Server5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrIN3qmi6Server5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZNK3ctu15XpcServerHelper12acceptClientIN3qmi6Server5StateEEEvN3xpc10connectionEN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke(uint64_t a1, xpc_object_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  xpc_object_t object[2];
  std::__shared_weak_count *v17;

  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v17 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD **)(a1 + 32);
      object[1] = v7;
      if (!v7)
        goto LABEL_23;
      v8 = MEMORY[0x1A1AEB9A8](a2);
      v9 = MEMORY[0x1E0C812F8];
      if (v8 != MEMORY[0x1E0C812F8])
      {
        if (v8 != MEMORY[0x1E0C81310])
          goto LABEL_23;
        v10 = *(xpc_object_t *)(a1 + 48);
        if (v10)
        {
          xpc_retain(*(xpc_object_t *)(a1 + 48));
          if (a2)
          {
LABEL_8:
            xpc_retain(a2);
LABEL_19:
            xpc_release(a2);
            xpc_release(v10);
LABEL_23:
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v15 = __ldaxr(p_shared_owners);
            while (__stlxr(v15 - 1, p_shared_owners));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
            return;
          }
        }
        else
        {
          v10 = xpc_null_create();
          if (a2)
            goto LABEL_8;
        }
        a2 = xpc_null_create();
        goto LABEL_19;
      }
      v11 = *(xpc_object_t *)(a1 + 48);
      if (v11)
      {
        xpc_retain(*(xpc_object_t *)(a1 + 48));
        if (a2)
        {
LABEL_11:
          xpc_retain(a2);
          object[0] = a2;
          goto LABEL_14;
        }
      }
      else
      {
        v11 = xpc_null_create();
        if (a2)
          goto LABEL_11;
      }
      a2 = xpc_null_create();
      object[0] = a2;
      if (!a2)
      {
        v12 = xpc_null_create();
        a2 = 0;
        goto LABEL_21;
      }
LABEL_14:
      if (MEMORY[0x1A1AEB9A8](a2) == v9)
      {
        xpc_retain(a2);
        goto LABEL_22;
      }
      v12 = xpc_null_create();
LABEL_21:
      object[0] = v12;
LABEL_22:
      qmi::Server::State::handleClientMessage(v7, v13, object);
      xpc_release(object[0]);
      object[0] = 0;
      xpc_release(a2);
      xpc_release(v11);
      v6 = v17;
      if (!v17)
        return;
      goto LABEL_23;
    }
  }
}

void sub_19EA09284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
  void *v11;
  void *v12;

  xpc_release(object);
  xpc_release(v11);
  xpc_release(v12);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c42_ZTSNSt3__18weak_ptrIN3qmi6Server5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c42_ZTSNSt3__18weak_ptrIN3qmi6Server5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN8dispatch9sync_implIRU13block_pointerFN3xpc8endpointEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  void **v2;
  xpc_object_t v3;
  void *v4;
  xpc_object_t object;

  (*(void (**)(xpc_object_t *__return_ptr))(**(_QWORD **)(a1 + 40) + 16))(&object);
  v2 = *(void ***)(a1 + 32);
  v3 = object;
  object = xpc_null_create();
  v4 = *v2;
  *v2 = v3;
  xpc_release(v4);
  xpc_release(object);
}

void ___ZN8dispatch19async_and_wait_implIRU13block_pointerFN3xpc8endpointEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  void **v2;
  xpc_object_t v3;
  void *v4;
  xpc_object_t object;

  (*(void (**)(xpc_object_t *__return_ptr))(**(_QWORD **)(a1 + 40) + 16))(&object);
  v2 = *(void ***)(a1 + 32);
  v3 = object;
  object = xpc_null_create();
  v4 = *v2;
  *v2 = v3;
  xpc_release(v4);
  xpc_release(object);
}

void dispatch::async<void ctu::SharedSynchronizable<qmi::Server::State>::execute_wrapped<qmi::Server::State::registerAccepter(std::weak_ptr<qmi::Server::Accepter>)::$_0>(qmi::Server::State::registerAccepter(std::weak_ptr<qmi::Server::Accepter>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::Server::State::registerAccepter(std::weak_ptr<qmi::Server::Accepter>)::$_0,std::default_delete<qmi::Server::State::registerAccepter(std::weak_ptr<qmi::Server::Accepter>)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  char *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  __int128 v27;

  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  v5 = (char *)v3[7];
  v4 = v3[8];
  if ((unint64_t)v5 >= v4)
  {
    v10 = (char *)v3[6];
    v11 = (v5 - v10) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v13 = v4 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v27 = *(_OWORD *)(v2 + 1);
    v15 = (char *)operator new(16 * v14);
    v16 = &v15[16 * v11];
    *(_OWORD *)v16 = v27;
    if (*((_QWORD *)&v27 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 16);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      v10 = (char *)v3[6];
      v5 = (char *)v3[7];
    }
    v19 = &v15[16 * v14];
    v9 = v16 + 16;
    if (v5 == v10)
    {
      v3[6] = v16;
      v3[7] = v9;
      v3[8] = v19;
    }
    else
    {
      do
      {
        v20 = *((_OWORD *)v5 - 1);
        v5 -= 16;
        *((_OWORD *)v16 - 1) = v20;
        v16 -= 16;
        *(_QWORD *)v5 = 0;
        *((_QWORD *)v5 + 1) = 0;
      }
      while (v5 != v10);
      v10 = (char *)v3[6];
      v21 = (char *)v3[7];
      v3[6] = v16;
      v3[7] = v9;
      v3[8] = v19;
      while (v21 != v10)
      {
        v22 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
        if (v22)
          std::__shared_weak_count::__release_weak(v22);
        v21 -= 16;
      }
    }
    if (v10)
      operator delete(v10);
  }
  else
  {
    v6 = v2[2];
    *(_QWORD *)v5 = v2[1];
    *((_QWORD *)v5 + 1) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 16);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = v5 + 16;
  }
  v3[7] = v9;
  v23 = (std::__shared_weak_count *)v2[2];
  if (v23)
    std::__shared_weak_count::__release_weak(v23);
  operator delete(v2);
  v24 = (std::__shared_weak_count *)a1[2];
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  operator delete(a1);
}

void sub_19EA095EC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v4 = (std::__shared_weak_count *)v2[2];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t qmi::QMuxServerAccepter::State::State(uint64_t a1, _QWORD *a2, NSObject **a3, __int128 *a4)
{
  NSObject *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  _BYTE v14[16];
  _BYTE v15[8];

  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v14, "com.apple.telephony.bb", "acceptor");
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v8 = *a3;
  *(_QWORD *)(a1 + 24) = *a3;
  if (v8)
    dispatch_retain(v8);
  *(_QWORD *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 40), (const ctu::OsLogLogger *)v15);
  MEMORY[0x1A1AEAED4](v15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v14);
  *(_QWORD *)a1 = off_1E4154360;
  *(_QWORD *)(a1 + 48) = *a2;
  v9 = a2[1];
  *(_QWORD *)(a1 + 56) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *a4;
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a4 + 2);
  *(_OWORD *)(a1 + 64) = v12;
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  *(_QWORD *)a4 = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  return a1;
}

void qmi::QMuxServerAccepter::State::~State(qmi::QMuxServerAccepter::State *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  qmi::QMuxServerAccepter::State *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  NSObject *v15;
  std::__shared_weak_count *v16;

  *(_QWORD *)this = off_1E4154360;
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    v3 = *((_QWORD *)this + 16);
    v4 = (void *)*((_QWORD *)this + 15);
    if (v3 == v2)
    {
LABEL_14:
      *((_QWORD *)this + 16) = v2;
      operator delete(v4);
      goto LABEL_15;
    }
    while (1)
    {
      v5 = *(std::__shared_weak_count **)(v3 - 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
          break;
      }
      v8 = *(std::__shared_weak_count **)(v3 - 24);
      if (v8)
        goto LABEL_10;
LABEL_4:
      v3 -= 32;
      if (v3 == v2)
      {
        v4 = (void *)*((_QWORD *)this + 15);
        goto LABEL_14;
      }
    }
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = *(std::__shared_weak_count **)(v3 - 24);
    if (!v8)
      goto LABEL_4;
LABEL_10:
    std::__shared_weak_count::__release_weak(v8);
    goto LABEL_4;
  }
LABEL_15:
  v9 = (qmi::QMuxServerAccepter::State *)*((_QWORD *)this + 14);
  if (v9 == (qmi::QMuxServerAccepter::State *)((char *)this + 88))
  {
    v10 = 4;
    v9 = (qmi::QMuxServerAccepter::State *)((char *)this + 88);
  }
  else
  {
    if (!v9)
      goto LABEL_20;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_20:
  if (*((char *)this + 87) < 0)
  {
    operator delete(*((void **)this + 8));
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
    if (!v11)
      goto LABEL_27;
  }
  else
  {
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
    if (!v11)
      goto LABEL_27;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
  {
LABEL_27:
    MEMORY[0x1A1AEAED4]((char *)this + 40);
    v14 = *((_QWORD *)this + 4);
    if (!v14)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  MEMORY[0x1A1AEAED4]((char *)this + 40);
  v14 = *((_QWORD *)this + 4);
  if (v14)
LABEL_28:
    dispatch_release(v14);
LABEL_29:
  v15 = *((_QWORD *)this + 3);
  if (v15)
    dispatch_release(v15);
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
}

{
  void *v1;

  qmi::QMuxServerAccepter::State::~State(this);
  operator delete(v1);
}

void qmi::QMuxServerAccepter::State::create(_QWORD *a1@<X0>, NSObject **a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v11;
  unint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::string __p;

  v8 = operator new(0x90uLL);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  qmi::QMuxServerAccepter::State::State((uint64_t)v8, a1, a2, (__int128 *)&__p);
  *a4 = v8;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  v9 = (std::__shared_weak_count *)operator new(0x20uLL);
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)off_1E4154560;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  a4[1] = v9;
  v11 = (std::__shared_weak_count *)*((_QWORD *)v8 + 2);
  if (v11)
  {
    if (v11->__shared_owners_ != -1)
      goto LABEL_16;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
    *((_QWORD *)v8 + 1) = v8;
    *((_QWORD *)v8 + 2) = v9;
    std::__shared_weak_count::__release_weak(v11);
  }
  else
  {
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    v16 = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    *((_QWORD *)v8 + 1) = v8;
    *((_QWORD *)v8 + 2) = v9;
  }
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (v18)
  {
LABEL_16:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_19;
}

void sub_19EA09A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  operator delete(v14);
  _Unwind_Resume(a1);
}

BOOL qmi::QMuxServerAccepter::State::accept(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[6];
  _QWORD *v7;
  uint64_t block;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  void *v11;
  char *v12;
  _QWORD *v13;
  char v14;

  v5[0] = a2;
  v5[1] = a1;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi18QMuxServerAccepter5StateEE20execute_wrapped_syncIZNS3_6acceptERKN3xpc4dictERKN8dispatch5queueEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSF__block_invoke;
  v6[3] = &__block_descriptor_tmp_10_1;
  v6[4] = a1 + 8;
  v6[5] = v5;
  v7 = v6;
  v3 = a1 + 24;
  v2 = *(NSObject **)(a1 + 24);
  if (*(_QWORD *)(v3 + 8))
  {
    v14 = -86;
    block = MEMORY[0x1E0C809B0];
    v9 = 0x40000000;
    v10 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke_1;
    v11 = &__block_descriptor_tmp_12_1;
    v12 = &v14;
    v13 = &v7;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    v14 = -86;
    block = MEMORY[0x1E0C809B0];
    v9 = 0x40000000;
    v10 = ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke_1;
    v11 = &__block_descriptor_tmp_11_1;
    v12 = &v14;
    v13 = &v7;
    dispatch_sync(v2, &block);
  }
  return v14 != 0;
}

BOOL qmi::QMuxServerAccepter::State::acceptLocal(uint64_t a1, xpc_object_t *a2, uint64_t *a3, uint64_t *a4)
{
  xpc_object_t value;
  uint64_t v9;
  void *v10;
  void *v11;
  int v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  void **v15;
  xpc_object_t v16;
  unsigned __int8 v17;
  xpc_object_t v18;
  NSObject *v19;
  _BOOL8 v20;
  std::string::size_type size;
  NSObject *v23;
  std::string *p_object;
  NSObject *v25;
  __int128 v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  __int128 v53;
  char *v54;
  char *v55;
  unint64_t *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  std::__shared_weak_count *v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  std::__shared_weak_count *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::string v67;
  std::string object;
  void *__s1[3];
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  unint64_t v75;
  void *__p[6];

  __p[5] = *(void **)MEMORY[0x1E0C80C00];
  memset(__s1, 170, sizeof(__s1));
  value = xpc_dictionary_get_value(*a2, "connect");
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value)
    xpc_retain(value);
  else
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(object.__r_.__value_.__l.__data_);
  v9 = HIBYTE(__s1[2]);
  if (SHIBYTE(__s1[2]) >= 0)
    v10 = (void *)HIBYTE(__s1[2]);
  else
    v10 = __s1[1];
  v11 = (void *)*(unsigned __int8 *)(a1 + 87);
  v12 = (char)v11;
  if ((char)v11 < 0)
    v11 = *(void **)(a1 + 72);
  if (v10 != v11)
    goto LABEL_30;
  v13 = (_QWORD *)(a1 + 64);
  if (v12 >= 0)
    v14 = (unsigned __int8 *)(a1 + 64);
  else
    v14 = *(unsigned __int8 **)(a1 + 64);
  if ((HIBYTE(__s1[2]) & 0x80) != 0)
  {
    if (!memcmp(__s1[0], v14, (size_t)__s1[1]))
      goto LABEL_20;
LABEL_30:
    v20 = 0;
    goto LABEL_31;
  }
  if (HIBYTE(__s1[2]))
  {
    v15 = __s1;
    while (*(unsigned __int8 *)v15 == *v14)
    {
      v15 = (void **)((char *)v15 + 1);
      ++v14;
      if (!--v9)
        goto LABEL_20;
    }
    goto LABEL_30;
  }
LABEL_20:
  v16 = xpc_dictionary_get_value(*a2, "svc_type");
  __p[0] = v16;
  if (v16)
    xpc_retain(v16);
  else
    __p[0] = xpc_null_create();
  v17 = xpc::dyn_cast_or_default();
  xpc_release(__p[0]);
  if (!v17)
  {
    v19 = *(NSObject **)(a1 + 40);
    v20 = 0;
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      goto LABEL_31;
    if (*(char *)(a1 + 87) < 0)
      v13 = (_QWORD *)*v13;
    LODWORD(__p[0]) = 136315394;
    *(void **)((char *)__p + 4) = v13;
    WORD2(__p[1]) = 1024;
    *(_DWORD *)((char *)&__p[1] + 6) = 0;
    _os_log_impl(&dword_19E9C8000, v19, OS_LOG_TYPE_DEFAULT, "#E QMux '%s' rejects incoming client due to bad service type 0x%x", (uint8_t *)__p, 0x12u);
    goto LABEL_30;
  }
  memset(&object, 170, sizeof(object));
  v18 = xpc_dictionary_get_value(*a2, "name");
  v67.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
  if (v18)
    xpc_retain(v18);
  else
    v67.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  xpc_release(v67.__r_.__value_.__l.__data_);
  size = HIBYTE(object.__r_.__value_.__r.__words[2]);
  if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = object.__r_.__value_.__l.__size_;
  v20 = size != 0;
  if (size)
  {
    std::string::append(&object, "::proxy", 7uLL);
    qmi::QMuxServerAccepter::State::tidyUp_sync((qmi::QMuxServerAccepter::State *)a1);
    v23 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a1 + 87) < 0)
        v13 = (_QWORD *)*v13;
      p_object = &object;
      if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_object = (std::string *)object.__r_.__value_.__r.__words[0];
      LODWORD(__p[0]) = 136315650;
      *(void **)((char *)__p + 4) = v13;
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = v17;
      WORD1(__p[2]) = 2080;
      *(void **)((char *)&__p[2] + 4) = p_object;
      _os_log_impl(&dword_19E9C8000, v23, OS_LOG_TYPE_DEFAULT, "#I QMux '%s' accepted client(svcType=0x%x, name='%s')", (uint8_t *)__p, 0x1Cu);
    }
    memset(&v67, 170, sizeof(v67));
    if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v67, object.__r_.__value_.__l.__data_, object.__r_.__value_.__l.__size_);
    else
      v67 = object;
    *(_QWORD *)&v26 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)__p = v26;
    *(_OWORD *)&__p[2] = v26;
    v27 = *a3;
    v28 = (std::__shared_weak_count *)a3[1];
    if (v28)
    {
      p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
      do
        v30 = __ldxr(p_shared_weak_owners);
      while (__stxr(v30 + 1, p_shared_weak_owners));
    }
    v31 = *a4;
    v32 = (std::__shared_weak_count *)a4[1];
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    v74 = 0xAAAAAAAAAAAAAAAALL;
    v75 = 0xAAAAAAAAAAAAAAAALL;
    v72 = v27;
    v73 = v28;
    if (v28)
    {
      v35 = (unint64_t *)&v28->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v70 = v31;
    v71 = v32;
    if (v32)
    {
      v37 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    qmi::create_client_proxy_gcd_state((uint64_t *)(a1 + 48), (__int128 *)&object, v17, &v72, &v70, (unint64_t *)&v74);
    if (v71)
      std::__shared_weak_count::__release_weak(v71);
    if (v73)
      std::__shared_weak_count::__release_weak(v73);
    qmi::ClientProxy::ClientProxy(__p, &v74);
    v39 = (std::__shared_weak_count *)v75;
    if (v75)
    {
      v40 = (unint64_t *)(v75 + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    if (v32)
      std::__shared_weak_count::__release_weak(v32);
    if (v28)
      std::__shared_weak_count::__release_weak(v28);
    v43 = *(char **)(a1 + 128);
    v42 = *(_QWORD *)(a1 + 136);
    if ((unint64_t)v43 >= v42)
    {
      v48 = *(char **)(a1 + 120);
      v49 = (v43 - v48) >> 5;
      v50 = v49 + 1;
      if ((unint64_t)(v49 + 1) >> 59)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v51 = v42 - (_QWORD)v48;
      if (v51 >> 4 > v50)
        v50 = v51 >> 4;
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFE0)
        v52 = 0x7FFFFFFFFFFFFFFLL;
      else
        v52 = v50;
      if (v52 >> 59)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v53 = *(_OWORD *)&__p[2];
      v54 = (char *)operator new(32 * v52);
      v55 = &v54[32 * v49];
      *(_QWORD *)v55 = 0;
      *((_QWORD *)v55 + 1) = 0;
      *((_OWORD *)v55 + 1) = v53;
      if (*((_QWORD *)&v53 + 1))
      {
        v56 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
        v48 = *(char **)(a1 + 120);
        v43 = *(char **)(a1 + 128);
      }
      v58 = &v54[32 * v52];
      v47 = v55 + 32;
      if (v43 == v48)
      {
        *(_QWORD *)(a1 + 120) = v55;
        *(_QWORD *)(a1 + 128) = v47;
        *(_QWORD *)(a1 + 136) = v58;
      }
      else
      {
        do
        {
          *((_QWORD *)v55 - 4) = 0;
          *((_QWORD *)v55 - 3) = 0;
          v55 -= 32;
          *((_OWORD *)v55 + 1) = *((_OWORD *)v43 - 1);
          *((_QWORD *)v43 - 2) = 0;
          *((_QWORD *)v43 - 1) = 0;
          v43 -= 32;
        }
        while (v43 != v48);
        v48 = *(char **)(a1 + 120);
        v59 = *(char **)(a1 + 128);
        *(_QWORD *)(a1 + 120) = v55;
        *(_QWORD *)(a1 + 128) = v47;
        *(_QWORD *)(a1 + 136) = v58;
        while (v59 != v48)
        {
          v60 = (std::__shared_weak_count *)*((_QWORD *)v59 - 1);
          if (v60)
          {
            p_shared_owners = (unint64_t *)&v60->__shared_owners_;
            do
              v62 = __ldaxr(p_shared_owners);
            while (__stlxr(v62 - 1, p_shared_owners));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
          v63 = (std::__shared_weak_count *)*((_QWORD *)v59 - 3);
          if (v63)
            std::__shared_weak_count::__release_weak(v63);
          v59 -= 32;
        }
      }
      if (v48)
        operator delete(v48);
    }
    else
    {
      *(_QWORD *)v43 = 0;
      *((_QWORD *)v43 + 1) = 0;
      *((void **)v43 + 2) = __p[2];
      v44 = (char *)__p[3];
      *((void **)v43 + 3) = __p[3];
      if (v44)
      {
        v45 = (unint64_t *)(v44 + 8);
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      v47 = v43 + 32;
    }
    *(_QWORD *)(a1 + 128) = v47;
    v64 = (std::__shared_weak_count *)__p[3];
    if (__p[3])
    {
      v65 = (unint64_t *)((char *)__p[3] + 8);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (__p[1])
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[1]);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
  }
  else
  {
    v25 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a1 + 87) < 0)
        v13 = (_QWORD *)*v13;
      LODWORD(__p[0]) = 136315394;
      *(void **)((char *)__p + 4) = v13;
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = v17;
      _os_log_impl(&dword_19E9C8000, v25, OS_LOG_TYPE_DEFAULT, "#E QMux '%s' rejects incoming client(svcType=0x%x) due to empty name", (uint8_t *)__p, 0x12u);
    }
  }
  if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
    operator delete(object.__r_.__value_.__l.__data_);
LABEL_31:
  if (SHIBYTE(__s1[2]) < 0)
    operator delete(__s1[0]);
  return v20;
}

void sub_19EA0A2C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,std::__shared_weak_count *a31,char a32,uint64_t a33,xpc_object_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void qmi::QMuxServerAccepter::State::tidyUp_sync(qmi::QMuxServerAccepter::State *this)
{
  qmi::ClientProxy *v2;
  qmi::ClientProxy *v3;
  char v4;
  qmi::ClientProxy *v5;
  qmi::ClientProxy *v6;
  qmi::ClientProxy *v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  qmi::ClientProxy *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  dispatch_time_t v25;
  NSObject *v26;
  unint64_t v27;
  _QWORD v28[5];
  std::__shared_weak_count *v29;

  v2 = (qmi::ClientProxy *)*((_QWORD *)this + 15);
  v3 = (qmi::ClientProxy *)*((_QWORD *)this + 16);
  if (v2 == v3)
  {
    v4 = 0;
    v12 = (qmi::ClientProxy *)*((_QWORD *)this + 16);
    if (v2 == v12)
      goto LABEL_26;
    while (1)
    {
LABEL_31:
      if (v12 == v2)
      {
        *((_QWORD *)this + 16) = v2;
        if (v4)
          goto LABEL_41;
        return;
      }
      v13 = (std::__shared_weak_count *)*((_QWORD *)v12 - 1);
      if (!v13)
        break;
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (v15)
        break;
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      v16 = (std::__shared_weak_count *)*((_QWORD *)v12 - 3);
      if (v16)
        goto LABEL_37;
LABEL_30:
      v12 = (qmi::ClientProxy *)((char *)v12 - 32);
    }
    v16 = (std::__shared_weak_count *)*((_QWORD *)v12 - 3);
    if (!v16)
      goto LABEL_30;
LABEL_37:
    std::__shared_weak_count::__release_weak(v16);
    goto LABEL_30;
  }
  v4 = 0;
  while (1)
  {
    if (!qmi::ClientProxy::isValid(v2) && !qmi::ClientProxy::isStopped(v2))
      v4 = 1;
    if (!qmi::ClientProxy::isValid(v2) && qmi::ClientProxy::isStopped(v2))
      break;
    v2 = (qmi::ClientProxy *)((char *)v2 + 32);
    if (v2 == v3)
    {
      v2 = v3;
      goto LABEL_25;
    }
  }
  if (v2 != v3)
  {
    v5 = (qmi::ClientProxy *)((char *)v2 + 32);
    if ((qmi::ClientProxy *)((char *)v2 + 32) != v3)
    {
      v6 = v2;
      do
      {
        v7 = v5;
        if (!qmi::ClientProxy::isValid(v5) && !qmi::ClientProxy::isStopped(v7))
          v4 = 1;
        if (qmi::ClientProxy::isValid(v7) || !qmi::ClientProxy::isStopped(v7))
        {
          v8 = *((_OWORD *)v6 + 3);
          *((_QWORD *)v6 + 6) = 0;
          *((_QWORD *)v6 + 7) = 0;
          v9 = (std::__shared_weak_count *)*((_QWORD *)v2 + 3);
          *((_OWORD *)v2 + 1) = v8;
          if (v9)
          {
            v10 = (unint64_t *)&v9->__shared_owners_;
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 - 1, v10));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
          v2 = (qmi::ClientProxy *)((char *)v2 + 32);
        }
        v5 = (qmi::ClientProxy *)((char *)v7 + 32);
        v6 = v7;
      }
      while ((qmi::ClientProxy *)((char *)v7 + 32) != v3);
    }
  }
LABEL_25:
  v12 = (qmi::ClientProxy *)*((_QWORD *)this + 16);
  if (v2 != v12)
    goto LABEL_31;
LABEL_26:
  if (v4)
  {
LABEL_41:
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (!v17 || (v18 = *((_QWORD *)this + 1), (v19 = std::__shared_weak_count::lock(v17)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v20 = v19;
    p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    v23 = (unint64_t *)&v19->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v20);
    }
    v25 = dispatch_time(0, 250000000);
    v26 = *((_QWORD *)this + 3);
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 1174405120;
    v28[2] = ___ZN3qmi18QMuxServerAccepter5State11tidyUp_syncEv_block_invoke;
    v28[3] = &__block_descriptor_tmp_8;
    v28[4] = v18;
    v29 = v20;
    do
      v27 = __ldxr(p_shared_weak_owners);
    while (__stxr(v27 + 1, p_shared_weak_owners));
    dispatch_after(v25, v26, v28);
    if (v29)
      std::__shared_weak_count::__release_weak(v29);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void ___ZN3qmi18QMuxServerAccepter5State11tidyUp_syncEv_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  qmi::QMuxServerAccepter::State *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(qmi::QMuxServerAccepter::State **)(a1 + 32);
      if (v5)
        qmi::QMuxServerAccepter::State::tidyUp_sync(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_19EA0A7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c55_ZTSNSt3__18weak_ptrIN3qmi18QMuxServerAccepter5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c55_ZTSNSt3__18weak_ptrIN3qmi18QMuxServerAccepter5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void qmi::QMuxServerAccepter::State::getAllClients(qmi::QMuxServerAccepter::State *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  NSObject *v3;
  char *v4;
  qmi::QMuxServerAccepter::State *v5;
  _QWORD v6[6];
  _QWORD *v7;
  uint64_t block;
  uint64_t v9;
  double (*v10)(uint64_t);
  void *v11;
  _QWORD *v12;
  _QWORD *v13;

  v2 = MEMORY[0x1E0C809B0];
  v5 = this;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi18QMuxServerAccepter5StateEE20execute_wrapped_syncIZNKS3_13getAllClientsEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v6[3] = &__block_descriptor_tmp_14_0;
  v6[4] = (char *)this + 8;
  v6[5] = &v5;
  v7 = v6;
  v4 = (char *)this + 24;
  v3 = *((_QWORD *)this + 3);
  if (*((_QWORD *)v4 + 1))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    block = v2;
    v9 = 0x40000000;
    v10 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFNSt3__16vectorIN3qmi11ClientProxyENS1_9allocatorIS4_EEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke;
    v11 = &__block_descriptor_tmp_16_0;
    v12 = a2;
    v13 = &v7;
    dispatch_async_and_wait(v3, &block);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    block = v2;
    v9 = 0x40000000;
    v10 = ___ZN8dispatch9sync_implIRU13block_pointerFNSt3__16vectorIN3qmi11ClientProxyENS1_9allocatorIS4_EEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke;
    v11 = &__block_descriptor_tmp_15_1;
    v12 = a2;
    v13 = &v7;
    dispatch_sync(v3, &block);
  }
}

void qmi::QMuxServerAccepter::State::setValidationStrategy(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  NSObject *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = v20;
  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      v21 = v20;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v20);
    }
    else
    {
      v21 = (_QWORD *)a2[3];
      a2[3] = 0;
    }
  }
  else
  {
    v21 = 0;
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5 || (v6 = a1[1], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = operator new(0x28uLL);
  v10 = v9;
  v11 = v21;
  *v9 = a1;
  if (v11)
  {
    if (v11 == v20)
    {
      v9[4] = v9 + 1;
      (*(void (**)(_QWORD *))(v20[0] + 24))(v20);
    }
    else
    {
      v9[4] = v11;
      v21 = 0;
    }
  }
  else
  {
    v9[4] = 0;
  }
  v12 = a1[3];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  v15 = operator new(0x18uLL);
  *v15 = v10;
  v15[1] = v6;
  v15[2] = v8;
  dispatch_async_f(v12, v15, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<qmi::QMuxServerAccepter::State>::execute_wrapped<qmi::QMuxServerAccepter::State::setValidationStrategy(std::function<BOOL ()(void *)> &&)::$_0>(qmi::QMuxServerAccepter::State::setValidationStrategy(std::function<BOOL ()(void *)> &&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::QMuxServerAccepter::State::setValidationStrategy(std::function<BOOL ()(void *)> &&)::$_0,std::default_delete<qmi::QMuxServerAccepter::State::setValidationStrategy(std::function<BOOL ()(void *)> &&)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v17 = v21;
    if (v21 != v20)
      goto LABEL_19;
LABEL_22:
    v18 = 4;
    goto LABEL_23;
  }
  v17 = v21;
  if (v21 == v20)
    goto LABEL_22;
LABEL_19:
  if (!v17)
    return;
  v18 = 5;
  v3 = v17;
LABEL_23:
  (*(void (**)(_QWORD *))(*v3 + 8 * v18))(v3);
}

void sub_19EA0AAC0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void qmi::QMuxServerAccepter::State::registerResponse(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  const void *v7;
  size_t v8;
  char *v9;
  _QWORD v10[5];
  std::string v11;
  void *__p;
  void *v13;
  char *v14;
  __int16 v15;

  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1174405120;
  v10[2] = ___ZN3qmi18QMuxServerAccepter5State16registerResponseENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEtNS2_6vectorIhNS6_IhEEEE_block_invoke;
  v10[3] = &__block_descriptor_tmp_4;
  v10[4] = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v15 = a3;
    v13 = 0;
    v14 = 0;
    __p = 0;
    v7 = *(const void **)a4;
    v8 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
    if (!v8)
      goto LABEL_7;
  }
  else
  {
    v11 = *(std::string *)a2;
    v15 = a3;
    v13 = 0;
    v14 = 0;
    __p = 0;
    v7 = *(const void **)a4;
    v8 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
    if (!v8)
      goto LABEL_7;
  }
  if ((v8 & 0x8000000000000000) != 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  __p = operator new(v8);
  v13 = __p;
  v9 = (char *)__p + v8;
  v14 = (char *)__p + v8;
  memcpy(__p, v7, v8);
  v13 = v9;
LABEL_7:
  ctu::SharedSynchronizable<qmi::QMuxServerAccepter::State>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v10);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_19EA0AC1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21)
{
  if (__p)
  {
    operator delete(__p);
    if ((a19 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a19 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a14);
  _Unwind_Resume(exception_object);
}

void ___ZN3qmi18QMuxServerAccepter5State16registerResponseENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEtNS2_6vectorIhNS6_IhEEEE_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  const void **v5;
  NSObject *v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  const void **v17;
  __int16 v18;
  _BYTE *v19;
  _BYTE *v20;
  size_t v21;
  char *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint8_t buf[4];
  const void *v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD **)(a1 + 32);
  v2 = v1[15];
  v3 = v1[16];
  if (v2 != v3)
  {
    v5 = (const void **)(a1 + 40);
    while (1)
    {
      v6 = v1[5];
      v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
      v8 = *(unsigned __int8 *)(a1 + 63);
      if (v7)
      {
        v23 = v5;
        if ((v8 & 0x80) != 0)
          v23 = (void *)*v5;
        v24 = *(_QWORD *)(v2 + 16);
        v27 = *(_QWORD *)(v24 + 48);
        v25 = v24 + 48;
        v26 = v27;
        if (*(char *)(v25 + 23) < 0)
          v25 = v26;
        *(_DWORD *)buf = 136315394;
        v32 = v23;
        v33 = 2080;
        v34 = v25;
        _os_log_debug_impl(&dword_19E9C8000, v6, OS_LOG_TYPE_DEBUG, "#D Register response - Checking whether the client name matches: '%s' - '%s'", buf, 0x16u);
        v8 = *(unsigned __int8 *)(a1 + 63);
      }
      v9 = *(_QWORD *)(v2 + 16);
      if ((v8 & 0x80u) == 0)
        v10 = v8;
      else
        v10 = *(_QWORD *)(a1 + 48);
      v11 = *(unsigned __int8 *)(v9 + 71);
      v12 = (char)v11;
      if ((v11 & 0x80u) != 0)
        v11 = *(_QWORD *)(v9 + 56);
      if (v10 != v11)
        goto LABEL_4;
      v15 = *(_QWORD *)(v9 + 48);
      v13 = v9 + 48;
      v14 = v15;
      v16 = (unsigned __int8 *)(v12 >= 0 ? v13 : v14);
      if (((char)v8 & 0x80000000) == 0)
        break;
      if (!memcmp(*v5, v16, *(_QWORD *)(a1 + 48)))
        goto LABEL_20;
LABEL_4:
      v2 += 32;
      if (v2 == v3)
        return;
    }
    if (v8)
    {
      v17 = v5;
      while (*(unsigned __int8 *)v17 == *v16)
      {
        v17 = (const void **)((char *)v17 + 1);
        ++v16;
        if (!--v8)
          goto LABEL_20;
      }
      goto LABEL_4;
    }
LABEL_20:
    v18 = *(_WORD *)(a1 + 88);
    v29 = 0;
    v30 = 0;
    v28 = 0;
    v20 = *(_BYTE **)(a1 + 64);
    v19 = *(_BYTE **)(a1 + 72);
    v21 = v19 - v20;
    if (v19 == v20)
    {
      v22 = 0;
    }
    else
    {
      if ((v21 & 0x8000000000000000) != 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v22 = (char *)operator new(v19 - v20);
      v28 = v22;
      v30 = &v22[v21];
      memcpy(v22, v20, v21);
      v29 = &v22[v21];
    }
    qmi::ClientProxy::registerResponse(v2, v18, (uint64_t)&v28);
    if (v22)
    {
      v29 = v22;
      operator delete(v22);
    }
    goto LABEL_4;
  }
}

void sub_19EA0AE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  size_t v7;
  _BYTE *v8;
  char *v9;
  char *v10;

  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    v6 = *(_BYTE **)(a2 + 64);
    v8 = *(_BYTE **)(a2 + 72);
    v7 = v8 - v6;
    if (v8 == v6)
      return;
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    v6 = *(_BYTE **)(a2 + 64);
    v5 = *(_BYTE **)(a2 + 72);
    v7 = v5 - v6;
    if (v5 == v6)
      return;
  }
  if ((v7 & 0x8000000000000000) != 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v9 = (char *)operator new(v7);
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v9;
  v10 = &v9[v7];
  *(_QWORD *)(a1 + 80) = &v9[v7];
  memcpy(v9, v6, v7);
  *(_QWORD *)(a1 + 72) = v10;
}

void sub_19EA0AF70(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 72) = v5;
    operator delete(v5);
    if ((*(char *)(v1 + 63) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 63) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void qmi::QMuxServerAccepter::State::deregisterResponse(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t *v4;
  _QWORD v5[5];
  std::string __p;
  __int16 v7;

  v4 = (uint64_t *)(a1 + 8);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 1174405120;
  v5[2] = ___ZN3qmi18QMuxServerAccepter5State18deregisterResponseENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEt_block_invoke;
  v5[3] = &__block_descriptor_tmp_5;
  v5[4] = a1;
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    __p = *(std::string *)a2;
    v7 = a3;
    ctu::SharedSynchronizable<qmi::QMuxServerAccepter::State>::execute_wrapped(v4, (uint64_t)v5);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  v7 = a3;
  ctu::SharedSynchronizable<qmi::QMuxServerAccepter::State>::execute_wrapped(v4, (uint64_t)v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_5;
}

void ___ZN3qmi18QMuxServerAccepter5State18deregisterResponseENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEt_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  const void **v5;
  uint64_t v6;
  __int16 v7;
  NSObject *v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  const void **v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE buf[24];
  void *v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD **)(a1 + 32);
  v2 = v1[15];
  v3 = v1[16];
  if (v2 != v3)
  {
    v5 = (const void **)(a1 + 40);
    v6 = MEMORY[0x1E0C809B0];
    do
    {
      v8 = v1[5];
      v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
      v10 = *(unsigned __int8 *)(a1 + 63);
      if (v9)
      {
        v17 = v5;
        if ((v10 & 0x80) != 0)
          v17 = (void *)*v5;
        v18 = *(_QWORD *)(v2 + 16);
        v21 = *(_QWORD *)(v18 + 48);
        v19 = v18 + 48;
        v20 = v21;
        if (*(char *)(v19 + 23) < 0)
          v19 = v20;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v17;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v19;
        _os_log_debug_impl(&dword_19E9C8000, v8, OS_LOG_TYPE_DEBUG, "#D Deregister response - Checking whether the client name matches: '%s' - '%s'", buf, 0x16u);
        v10 = *(unsigned __int8 *)(a1 + 63);
      }
      v11 = *(_QWORD *)(v2 + 16);
      if ((v10 & 0x80u) == 0)
        v12 = v10;
      else
        v12 = *(_QWORD *)(a1 + 48);
      v13 = *(unsigned __int8 *)(v11 + 71);
      v14 = (char)v13;
      if ((v13 & 0x80u) != 0)
        v13 = *(_QWORD *)(v11 + 56);
      if (v12 != v13)
        goto LABEL_4;
      if (v14 >= 0)
        v15 = (unsigned __int8 *)(v11 + 48);
      else
        v15 = *(unsigned __int8 **)(v11 + 48);
      if ((char)v10 < 0)
      {
        if (memcmp(*v5, v15, *(_QWORD *)(a1 + 48)))
          goto LABEL_4;
      }
      else if (v10)
      {
        v16 = v5;
        while (*(unsigned __int8 *)v16 == *v15)
        {
          v16 = (const void **)((char *)v16 + 1);
          ++v15;
          if (!--v10)
            goto LABEL_3;
        }
        goto LABEL_4;
      }
LABEL_3:
      v7 = *(_WORD *)(a1 + 64);
      *(_QWORD *)buf = v6;
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = ___ZN3qmi11ClientProxy5State18deregisterResponseEt_block_invoke;
      v23 = &__block_descriptor_tmp_31;
      v24 = v11;
      v25 = v7;
      ctu::SharedSynchronizable<qmi::ClientProxy::State>::execute_wrapped((uint64_t *)(v11 + 8), (uint64_t)buf);
LABEL_4:
      v2 += 32;
    }
    while (v2 != v3);
  }
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void qmi::QMuxServerAccepter::State::sendIndication(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v5;
  size_t v6;
  char *v7;
  _QWORD v8[5];
  std::string v9;
  void *__p;
  void *v11;
  char *v12;

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v8[2] = ___ZN3qmi18QMuxServerAccepter5State14sendIndicationENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_6vectorIhNS6_IhEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_6_1;
  v8[4] = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    __p = 0;
    v11 = 0;
    v12 = 0;
    v5 = *(const void **)a3;
    v6 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (!v6)
      goto LABEL_7;
  }
  else
  {
    v9 = *(std::string *)a2;
    __p = 0;
    v11 = 0;
    v12 = 0;
    v5 = *(const void **)a3;
    v6 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (!v6)
      goto LABEL_7;
  }
  if ((v6 & 0x8000000000000000) != 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  __p = operator new(v6);
  v11 = __p;
  v7 = (char *)__p + v6;
  v12 = (char *)__p + v6;
  memcpy(__p, v5, v6);
  v11 = v7;
LABEL_7:
  ctu::SharedSynchronizable<qmi::QMuxServerAccepter::State>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v8);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_19EA0B41C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22)
{
  if (__p)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void ___ZN3qmi18QMuxServerAccepter5State14sendIndicationENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_6vectorIhNS6_IhEEEE_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  const void **v5;
  NSObject *v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  const void **v17;
  _BYTE *v18;
  _BYTE *v19;
  size_t v20;
  char *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint8_t buf[4];
  const void *v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD **)(a1 + 32);
  v2 = v1[15];
  v3 = v1[16];
  if (v2 != v3)
  {
    v5 = (const void **)(a1 + 40);
    while (1)
    {
      v6 = v1[5];
      v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
      v8 = *(unsigned __int8 *)(a1 + 63);
      if (v7)
      {
        v22 = v5;
        if ((v8 & 0x80) != 0)
          v22 = (void *)*v5;
        v23 = *(_QWORD *)(v2 + 16);
        v26 = *(_QWORD *)(v23 + 48);
        v24 = v23 + 48;
        v25 = v26;
        if (*(char *)(v24 + 23) < 0)
          v24 = v25;
        *(_DWORD *)buf = 136315394;
        v31 = v22;
        v32 = 2080;
        v33 = v24;
        _os_log_debug_impl(&dword_19E9C8000, v6, OS_LOG_TYPE_DEBUG, "#D Send indication - Checking whether the client name matches: '%s' - '%s'", buf, 0x16u);
        v8 = *(unsigned __int8 *)(a1 + 63);
      }
      v9 = *(_QWORD *)(v2 + 16);
      if ((v8 & 0x80u) == 0)
        v10 = v8;
      else
        v10 = *(_QWORD *)(a1 + 48);
      v11 = *(unsigned __int8 *)(v9 + 71);
      v12 = (char)v11;
      if ((v11 & 0x80u) != 0)
        v11 = *(_QWORD *)(v9 + 56);
      if (v10 != v11)
        goto LABEL_4;
      v15 = *(_QWORD *)(v9 + 48);
      v13 = v9 + 48;
      v14 = v15;
      v16 = (unsigned __int8 *)(v12 >= 0 ? v13 : v14);
      if (((char)v8 & 0x80000000) == 0)
        break;
      if (!memcmp(*v5, v16, *(_QWORD *)(a1 + 48)))
        goto LABEL_20;
LABEL_4:
      v2 += 32;
      if (v2 == v3)
        return;
    }
    if (v8)
    {
      v17 = v5;
      while (*(unsigned __int8 *)v17 == *v16)
      {
        v17 = (const void **)((char *)v17 + 1);
        ++v16;
        if (!--v8)
          goto LABEL_20;
      }
      goto LABEL_4;
    }
LABEL_20:
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v19 = *(_BYTE **)(a1 + 64);
    v18 = *(_BYTE **)(a1 + 72);
    v20 = v18 - v19;
    if (v18 == v19)
    {
      v21 = 0;
    }
    else
    {
      if ((v20 & 0x8000000000000000) != 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v21 = (char *)operator new(v18 - v19);
      v27 = v21;
      v29 = &v21[v20];
      memcpy(v21, v19, v20);
      v28 = &v21[v20];
    }
    qmi::ClientProxy::sendIndication(v2, (uint64_t)&v27);
    if (v21)
    {
      v28 = v21;
      operator delete(v21);
    }
    goto LABEL_4;
  }
}

void sub_19EA0B660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t qmi::QMuxServerAccepter::State::shutdown_sync(uint64_t this)
{
  uint64_t v1;
  uint64_t i;

  v1 = *(_QWORD *)(this + 120);
  for (i = *(_QWORD *)(this + 128); v1 != i; v1 += 32)
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16));
  return this;
}

_QWORD *qmi::QMuxServerAccepter::QMuxServerAccepter(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = off_1E4154448;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = off_1E4154448;
  return this;
}

qmi::QMuxServerAccepter *qmi::QMuxServerAccepter::QMuxServerAccepter(qmi::QMuxServerAccepter *this, const QMux *a2, NSObject **a3)
{
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  std::string __p;
  NSObject *v16[3];

  *(_QWORD *)this = off_1E4154448;
  v5 = *a3;
  v16[0] = v5;
  if (v5)
    dispatch_retain(v5);
  v6 = *(_QWORD *)a2;
  v7 = *((_QWORD *)a2 + 1);
  v16[1] = *(NSObject **)a2;
  v16[2] = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7[1];
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  if (v6)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    if (*(char *)(v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v10, *(_QWORD *)(v10 + 8));
    }
    else
    {
      v11 = *(_OWORD *)v10;
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 16);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
    }
  }
  else
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&__p, "(empty QMux)");
  }
  if (v7)
  {
    v12 = (unint64_t *)&v7[1];
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      (*((void (**))v7->isa + 2))(v7);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v7);
    }
  }
  qmi::QMuxServerAccepter::State::create(a2, v16, (uint64_t)&__p, (_QWORD *)this + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v5)
    dispatch_release(v5);
  return this;
}

void sub_19EA0B838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  NSObject *v16;

  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (!v16)
    _Unwind_Resume(a1);
  dispatch_release(v16);
  _Unwind_Resume(a1);
}

_QWORD *qmi::QMuxServerAccepter::QMuxServerAccepter(_QWORD *a1, _QWORD *a2, NSObject **a3, uint64_t a4)
{
  _QWORD *v7;
  NSObject *v8;
  NSObject *v10;

  *a1 = off_1E4154448;
  v7 = a1 + 1;
  v8 = *a3;
  v10 = v8;
  if (v8)
    dispatch_retain(v8);
  qmi::QMuxServerAccepter::State::create(a2, &v10, a4, v7);
  if (v8)
    dispatch_release(v8);
  return a1;
}

{
  _QWORD *v7;
  NSObject *v8;
  NSObject *v10;

  *a1 = off_1E4154448;
  v7 = a1 + 1;
  v8 = *a3;
  v10 = v8;
  if (v8)
    dispatch_retain(v8);
  qmi::QMuxServerAccepter::State::create(a2, &v10, a4, v7);
  if (v8)
    dispatch_release(v8);
  return a1;
}

void sub_19EA0B908(_Unwind_Exception *exception_object)
{
  NSObject *v1;

  if (v1)
    dispatch_release(v1);
  _Unwind_Resume(exception_object);
}

void sub_19EA0B9A4(_Unwind_Exception *exception_object)
{
  NSObject *v1;

  if (v1)
    dispatch_release(v1);
  _Unwind_Resume(exception_object);
}

void qmi::QMuxServerAccepter::~QMuxServerAccepter(qmi::QMuxServerAccepter *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = off_1E4154448;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = off_1E4154448;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = off_1E4154448;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(this);
  }
  else
  {
LABEL_5:
    operator delete(this);
  }
}

void qmi::QMuxServerAccepter::listen(qmi::QMuxServerAccepter *this, uint64_t **a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v2 = *((_QWORD *)this + 1);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *a2;
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    v11 = v2;
    v12 = v3;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    qmi::Server::State::registerAccepter(v6, &v11);
    std::__shared_weak_count::__release_weak(v3);
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    v10 = *a2;
    v11 = v2;
    v12 = 0;
    qmi::Server::State::registerAccepter(v10, &v11);
  }
}

void qmi::QMuxServerAccepter::getAllClients(qmi::QMuxServerAccepter *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD v5[6];
  _QWORD *v6;
  uint64_t block;
  uint64_t v8;
  double (*v9)(uint64_t);
  void *v10;
  _QWORD *v11;
  _QWORD *v12;

  v2 = MEMORY[0x1E0C809B0];
  v4 = *((_QWORD *)this + 1);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi18QMuxServerAccepter5StateEE20execute_wrapped_syncIZNKS3_13getAllClientsEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v5[3] = &__block_descriptor_tmp_14_0;
  v5[4] = v4 + 8;
  v5[5] = &v4;
  v6 = v5;
  v3 = *(NSObject **)(v4 + 24);
  if (*(_QWORD *)(v4 + 32))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    block = v2;
    v8 = 0x40000000;
    v9 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFNSt3__16vectorIN3qmi11ClientProxyENS1_9allocatorIS4_EEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke;
    v10 = &__block_descriptor_tmp_16_0;
    v11 = a2;
    v12 = &v6;
    dispatch_async_and_wait(v3, &block);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    block = v2;
    v8 = 0x40000000;
    v9 = ___ZN8dispatch9sync_implIRU13block_pointerFNSt3__16vectorIN3qmi11ClientProxyENS1_9allocatorIS4_EEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke;
    v10 = &__block_descriptor_tmp_15_1;
    v11 = a2;
    v12 = &v6;
    dispatch_sync(v3, &block);
  }
}

void qmi::QMuxServerAccepter::setValidationStrategy(uint64_t a1, _QWORD *a2)
{
  qmi::QMuxServerAccepter::State::setValidationStrategy(*(_QWORD **)(a1 + 8), a2);
}

BOOL qmi::QMuxServerAccepter::acceptWithClientRef(uint64_t a1, xpc_object_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BOOL8 v11;
  uint64_t v13[2];
  uint64_t v14[2];

  v4 = *(_QWORD *)(a1 + 8);
  v5 = (std::__shared_weak_count *)a3[1];
  v14[0] = *a3;
  v14[1] = (uint64_t)v5;
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }
  v8 = (std::__shared_weak_count *)a4[1];
  v13[0] = *a4;
  v13[1] = (uint64_t)v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = qmi::QMuxServerAccepter::State::acceptLocal(v4, a2, v14, v13);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  return v11;
}

void sub_19EA0BD50(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;

  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    if (!v1)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v1)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(exception_object);
}

uint64_t qmi::QMuxServerAccepter::shutdown(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;

  v1 = *(_QWORD *)(this + 8);
  v2 = *(_QWORD *)(v1 + 120);
  for (i = *(_QWORD *)(v1 + 128); v2 != i; v2 += 32)
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 16) + 16))(*(_QWORD *)(v2 + 16));
  return this;
}

void std::__shared_ptr_pointer<qmi::QMuxServerAccepter::State *,std::shared_ptr<qmi::QMuxServerAccepter::State> ctu::SharedSynchronizable<qmi::QMuxServerAccepter::State>::make_shared_ptr<qmi::QMuxServerAccepter::State>(qmi::QMuxServerAccepter::State*)::{lambda(qmi::QMuxServerAccepter::State *)#1},std::allocator<qmi::QMuxServerAccepter::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<qmi::QMuxServerAccepter::State *,std::shared_ptr<qmi::QMuxServerAccepter::State> ctu::SharedSynchronizable<qmi::QMuxServerAccepter::State>::make_shared_ptr<qmi::QMuxServerAccepter::State>(qmi::QMuxServerAccepter::State*)::{lambda(qmi::QMuxServerAccepter::State *)#1},std::allocator<qmi::QMuxServerAccepter::State>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<qmi::QMuxServerAccepter::State> ctu::SharedSynchronizable<qmi::QMuxServerAccepter::State>::make_shared_ptr<qmi::QMuxServerAccepter::State>(qmi::QMuxServerAccepter::State*)::{lambda(qmi::QMuxServerAccepter::State*)#1}::operator() const(qmi::QMuxServerAccepter::State*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<qmi::QMuxServerAccepter::State *,std::shared_ptr<qmi::QMuxServerAccepter::State> ctu::SharedSynchronizable<qmi::QMuxServerAccepter::State>::make_shared_ptr<qmi::QMuxServerAccepter::State>(qmi::QMuxServerAccepter::State*)::{lambda(qmi::QMuxServerAccepter::State *)#1},std::allocator<qmi::QMuxServerAccepter::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN3qmi18QMuxServerAccepter5StateEE15make_shared_ptrIS3_EENSt3__110share"
                     "d_ptrIT_EEPS8_EUlPS3_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN3qmi18QMuxServerAccepter5StateEE15make_shared_ptrIS3_EENSt"
                                "3__110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN3qmi18QMuxServerAccepter5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN3qmi18QMuxServerAccepter5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<qmi::QMuxServerAccepter::State> ctu::SharedSynchronizable<qmi::QMuxServerAccepter::State>::make_shared_ptr<qmi::QMuxServerAccepter::State>(qmi::QMuxServerAccepter::State*)::{lambda(qmi::QMuxServerAccepter::State*)#1}::operator() const(qmi::QMuxServerAccepter::State*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

BOOL ___ZNK3ctu20SharedSynchronizableIN3qmi18QMuxServerAccepter5StateEE20execute_wrapped_syncIZNS3_6acceptERKN3xpc4dictERKN8dispatch5queueEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSF__block_invoke(uint64_t a1)
{
  void ***v1;
  void **v2;
  xpc_object_t value;
  uint64_t v4;
  void *v5;
  void *v6;
  int v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  void **v10;
  xpc_object_t v11;
  unsigned __int8 v12;
  xpc_object_t v13;
  NSObject *v14;
  _BOOL8 v15;
  std::string::size_type size;
  void *v18;
  xpc_object_t v19;
  xpc_object_t v20;
  NSObject *v21;
  const char *v22;
  NSObject *v23;
  uint32_t v24;
  NSObject *v25;
  std::string *v26;
  uint64_t v27;
  NSObject *v28;
  std::string *v29;
  uint64_t v30;
  _xpc_endpoint_s *v31;
  NSObject *v32;
  std::string *p_object;
  void *v34;
  xpc_object_t v35;
  xpc_object_t v36;
  __int128 v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  xpc_object_t v61;
  std::string object;
  void *__s1[3];
  __int128 v64;
  void *__p[6];

  __p[5] = *(void **)MEMORY[0x1E0C80C00];
  v1 = *(void ****)(a1 + 40);
  v2 = v1[1];
  memset(__s1, 170, sizeof(__s1));
  value = xpc_dictionary_get_value(**v1, "connect");
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value)
    xpc_retain(value);
  else
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(object.__r_.__value_.__l.__data_);
  v4 = HIBYTE(__s1[2]);
  if (SHIBYTE(__s1[2]) >= 0)
    v5 = (void *)HIBYTE(__s1[2]);
  else
    v5 = __s1[1];
  v6 = (void *)*((unsigned __int8 *)v2 + 87);
  v7 = (char)v6;
  if ((char)v6 < 0)
    v6 = v2[9];
  if (v5 != v6)
    goto LABEL_30;
  v8 = v2 + 8;
  if (v7 >= 0)
    v9 = (unsigned __int8 *)(v2 + 8);
  else
    v9 = (unsigned __int8 *)v2[8];
  if ((HIBYTE(__s1[2]) & 0x80) != 0)
  {
    if (!memcmp(__s1[0], v9, (size_t)__s1[1]))
      goto LABEL_20;
LABEL_30:
    v15 = 0;
    goto LABEL_31;
  }
  if (HIBYTE(__s1[2]))
  {
    v10 = __s1;
    while (*(unsigned __int8 *)v10 == *v9)
    {
      v10 = (void **)((char *)v10 + 1);
      ++v9;
      if (!--v4)
        goto LABEL_20;
    }
    goto LABEL_30;
  }
LABEL_20:
  v11 = xpc_dictionary_get_value(**v1, "svc_type");
  __p[0] = v11;
  if (v11)
    xpc_retain(v11);
  else
    __p[0] = xpc_null_create();
  v12 = xpc::dyn_cast_or_default();
  xpc_release(__p[0]);
  if (!v12)
  {
    v14 = v2[5];
    v15 = 0;
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      goto LABEL_31;
    if (*((char *)v2 + 87) < 0)
      v8 = (_QWORD *)*v8;
    LODWORD(__p[0]) = 136315394;
    *(void **)((char *)__p + 4) = v8;
    WORD2(__p[1]) = 1024;
    *(_DWORD *)((char *)&__p[1] + 6) = 0;
    _os_log_impl(&dword_19E9C8000, v14, OS_LOG_TYPE_DEFAULT, "#E QMux '%s' rejects incoming client due to bad service type 0x%x", (uint8_t *)__p, 0x12u);
    goto LABEL_30;
  }
  memset(&object, 170, sizeof(object));
  v13 = xpc_dictionary_get_value(**v1, "name");
  *(_QWORD *)&v64 = v13;
  if (v13)
    xpc_retain(v13);
  else
    *(_QWORD *)&v64 = xpc_null_create();
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  xpc_release((xpc_object_t)v64);
  size = HIBYTE(object.__r_.__value_.__r.__words[2]);
  if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = object.__r_.__value_.__l.__size_;
  if (!size)
  {
    v21 = v2[5];
    v15 = 0;
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      goto LABEL_118;
    if (*((char *)v2 + 87) < 0)
      v8 = (_QWORD *)*v8;
    LODWORD(__p[0]) = 136315394;
    *(void **)((char *)__p + 4) = v8;
    WORD2(__p[1]) = 1024;
    *(_DWORD *)((char *)&__p[1] + 6) = v12;
    v22 = "#E QMux '%s' rejects incoming client(svcType=0x%x) due to empty name";
    v23 = v21;
    v24 = 18;
    goto LABEL_54;
  }
  v18 = v2[14];
  if (!v18
    || (__p[0] = **v1, ((*(uint64_t (**)(void *, void **))(*(_QWORD *)v18 + 48))(v18, __p) & 1) != 0))
  {
    v19 = xpc_dictionary_get_value(**v1, "endpoint");
    v20 = v19;
    if (v19)
      xpc_retain(v19);
    else
      v20 = xpc_null_create();
    v27 = MEMORY[0x1A1AEB9A8](v20);
    v15 = v27 != MEMORY[0x1E0C81350];
    if (v27 == MEMORY[0x1E0C81350])
    {
      v32 = v2[5];
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)v2 + 87) < 0)
          v8 = (_QWORD *)*v8;
        p_object = &object;
        if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_object = (std::string *)object.__r_.__value_.__r.__words[0];
        LODWORD(__p[0]) = 136315650;
        *(void **)((char *)__p + 4) = v8;
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = v12;
        WORD1(__p[2]) = 2080;
        *(void **)((char *)&__p[2] + 4) = p_object;
        _os_log_impl(&dword_19E9C8000, v32, OS_LOG_TYPE_DEFAULT, "#E QMux '%s' rejects incoming client(svcType=0x%x, name='%s') because of a bad endpoint", (uint8_t *)__p, 0x1Cu);
      }
    }
    else
    {
      std::string::append(&object, "::proxy", 7uLL);
      qmi::QMuxServerAccepter::State::tidyUp_sync((qmi::QMuxServerAccepter::State *)v2);
      v28 = v2[5];
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)v2 + 87) < 0)
          v8 = (_QWORD *)*v8;
        v29 = &object;
        if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v29 = (std::string *)object.__r_.__value_.__r.__words[0];
        LODWORD(__p[0]) = 136315650;
        *(void **)((char *)__p + 4) = v8;
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = v12;
        WORD1(__p[2]) = 2080;
        *(void **)((char *)&__p[2] + 4) = v29;
        _os_log_impl(&dword_19E9C8000, v28, OS_LOG_TYPE_DEFAULT, "#I QMux '%s' accepted client(svcType=0x%x, name='%s')", (uint8_t *)__p, 0x1Cu);
      }
      v30 = MEMORY[0x1E0C81308];
      if (v20 && MEMORY[0x1A1AEB9A8](v20) == v30)
      {
        xpc_retain(v20);
        v31 = (_xpc_endpoint_s *)v20;
      }
      else
      {
        v31 = (_xpc_endpoint_s *)xpc_null_create();
      }
      v61 = xpc_null_create();
      if (MEMORY[0x1A1AEB9A8](v31) == v30)
      {
        v34 = xpc_connection_create_from_endpoint(v31);
        if (!v34)
          v34 = xpc_null_create();
        v35 = xpc_null_create();
        v36 = v61;
        v61 = v34;
        xpc_release(v36);
        xpc_release(v35);
      }
      *(_QWORD *)&v64 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v64 + 1) = 0xAAAAAAAAAAAAAAAALL;
      qmi::create_client_proxy_state((uint64_t *)v2 + 6, (__int128 *)&object, v12, (unint64_t *)&v64);
      __p[0] = 0;
      __p[1] = 0;
      v37 = v64;
      *(_OWORD *)&__p[2] = v64;
      if (*((_QWORD *)&v64 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      qmi::ClientProxy::State::init(v37, &v61);
      if (*((_QWORD *)&v37 + 1))
      {
        v40 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v37 + 1) + 16))(*((_QWORD *)&v37 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v37 + 1));
        }
      }
      v43 = (char *)v2[16];
      v42 = (unint64_t)v2[17];
      if ((unint64_t)v43 >= v42)
      {
        v45 = (char *)v2[15];
        v46 = (v43 - v45) >> 5;
        v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 59)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v48 = v42 - (_QWORD)v45;
        if (v48 >> 4 > v47)
          v47 = v48 >> 4;
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFE0)
          v49 = 0x7FFFFFFFFFFFFFFLL;
        else
          v49 = v47;
        if (v49 >> 59)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v50 = (char *)operator new(32 * v49);
        v51 = &v50[32 * v46];
        *(_QWORD *)v51 = 0;
        *((_QWORD *)v51 + 1) = 0;
        *((_OWORD *)v51 + 1) = *(_OWORD *)&__p[2];
        v52 = &v50[32 * v49];
        *(_OWORD *)&__p[2] = 0uLL;
        v44 = v51 + 32;
        if (v43 == v45)
        {
          v2[15] = v51;
          v2[16] = v44;
          v2[17] = v52;
        }
        else
        {
          do
          {
            *((_QWORD *)v51 - 4) = 0;
            *((_QWORD *)v51 - 3) = 0;
            v51 -= 32;
            *((_OWORD *)v51 + 1) = *((_OWORD *)v43 - 1);
            *((_QWORD *)v43 - 2) = 0;
            *((_QWORD *)v43 - 1) = 0;
            v43 -= 32;
          }
          while (v43 != v45);
          v43 = (char *)v2[15];
          v53 = (char *)v2[16];
          v2[15] = v51;
          v2[16] = v44;
          v2[17] = v52;
          while (v53 != v43)
          {
            v54 = (std::__shared_weak_count *)*((_QWORD *)v53 - 1);
            if (v54)
            {
              p_shared_owners = (unint64_t *)&v54->__shared_owners_;
              do
                v56 = __ldaxr(p_shared_owners);
              while (__stlxr(v56 - 1, p_shared_owners));
              if (!v56)
              {
                ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                std::__shared_weak_count::__release_weak(v54);
              }
            }
            v57 = (std::__shared_weak_count *)*((_QWORD *)v53 - 3);
            if (v57)
              std::__shared_weak_count::__release_weak(v57);
            v53 -= 32;
          }
        }
        if (v43)
          operator delete(v43);
      }
      else
      {
        *(_QWORD *)v43 = 0;
        *((_QWORD *)v43 + 1) = 0;
        *((_OWORD *)v43 + 1) = *(_OWORD *)&__p[2];
        *(_OWORD *)&__p[2] = 0uLL;
        v44 = v43 + 32;
      }
      v2[16] = v44;
      v58 = (std::__shared_weak_count *)__p[3];
      if (__p[3])
      {
        v59 = (unint64_t *)((char *)__p[3] + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      if (__p[1])
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[1]);
      xpc_release(v61);
      v61 = 0;
      xpc_release(v31);
    }
    xpc_release(v20);
    goto LABEL_118;
  }
  v25 = v2[5];
  v15 = 0;
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)v2 + 87) < 0)
      v8 = (_QWORD *)*v8;
    v26 = &object;
    if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v26 = (std::string *)object.__r_.__value_.__r.__words[0];
    LODWORD(__p[0]) = 136315650;
    *(void **)((char *)__p + 4) = v8;
    WORD2(__p[1]) = 1024;
    *(_DWORD *)((char *)&__p[1] + 6) = v12;
    WORD1(__p[2]) = 2080;
    *(void **)((char *)&__p[2] + 4) = v26;
    v22 = "#N QMux '%s' validation failed for incoming client(svcType=0x%x, name='%s')";
    v23 = v25;
    v24 = 28;
LABEL_54:
    _os_log_impl(&dword_19E9C8000, v23, OS_LOG_TYPE_DEFAULT, v22, (uint8_t *)__p, v24);
    v15 = 0;
  }
LABEL_118:
  if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
    operator delete(object.__r_.__value_.__l.__data_);
LABEL_31:
  if (SHIBYTE(__s1[2]) < 0)
    operator delete(__s1[0]);
  return v15;
}

void sub_19EA0C658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,xpc_object_t a23,uint64_t a24,xpc_object_t a25,std::__shared_weak_count *a26,int a27,__int16 a28,char a29,char a30)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke_1(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 40) + 16))();
  **(_BYTE **)(a1 + 32) = result;
  return result;
}

uint64_t ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke_1(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 40) + 16))();
  **(_BYTE **)(a1 + 32) = result;
  return result;
}

int64_t ___ZNK3ctu20SharedSynchronizableIN3qmi18QMuxServerAccepter5StateEE20execute_wrapped_syncIZNKS3_13getAllClientsEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke@<X0>(uint64_t a1@<X0>, int64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v3 = **(_QWORD **)(a1 + 40);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v4 = *(_QWORD *)(v3 + 120);
  v5 = *(_QWORD *)(v3 + 128);
  result = v5 - v4;
  if (v5 != v4)
  {
    if (result < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v7 = result >> 5;
    result = (int64_t)operator new(result);
    *a2 = result;
    a2[1] = result;
    a2[2] = result + 32 * v7;
    do
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v8 = *(_QWORD *)(v4 + 24);
      *(_QWORD *)(result + 16) = *(_QWORD *)(v4 + 16);
      *(_QWORD *)(result + 24) = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v4 += 32;
      result += 32;
    }
    while (v4 != v5);
    a2[1] = result;
  }
  return result;
}

double ___ZN8dispatch9sync_implIRU13block_pointerFNSt3__16vectorIN3qmi11ClientProxyENS1_9allocatorIS4_EEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  double result;
  __int128 v11;
  void *v12;

  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(a1 + 40) + 16))(&v11);
  v2 = *(void ***)(a1 + 32);
  v3 = (char *)*v2;
  if (*v2)
  {
    v4 = (char *)v2[1];
    v5 = *v2;
    if (v4 == v3)
    {
LABEL_14:
      v2[1] = v3;
      operator delete(v5);
      *v2 = 0;
      v2[1] = 0;
      v2[2] = 0;
      goto LABEL_15;
    }
    while (1)
    {
      v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
          break;
      }
      v9 = (std::__shared_weak_count *)*((_QWORD *)v4 - 3);
      if (v9)
        goto LABEL_10;
LABEL_4:
      v4 -= 32;
      if (v4 == v3)
      {
        v5 = *v2;
        goto LABEL_14;
      }
    }
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    v9 = (std::__shared_weak_count *)*((_QWORD *)v4 - 3);
    if (!v9)
      goto LABEL_4;
LABEL_10:
    std::__shared_weak_count::__release_weak(v9);
    goto LABEL_4;
  }
LABEL_15:
  result = *(double *)&v11;
  *(_OWORD *)v2 = v11;
  v2[2] = v12;
  return result;
}

double ___ZN8dispatch19async_and_wait_implIRU13block_pointerFNSt3__16vectorIN3qmi11ClientProxyENS1_9allocatorIS4_EEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  double result;
  __int128 v11;
  void *v12;

  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(a1 + 40) + 16))(&v11);
  v2 = *(void ***)(a1 + 32);
  v3 = (char *)*v2;
  if (*v2)
  {
    v4 = (char *)v2[1];
    v5 = *v2;
    if (v4 == v3)
    {
LABEL_14:
      v2[1] = v3;
      operator delete(v5);
      *v2 = 0;
      v2[1] = 0;
      v2[2] = 0;
      goto LABEL_15;
    }
    while (1)
    {
      v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
          break;
      }
      v9 = (std::__shared_weak_count *)*((_QWORD *)v4 - 3);
      if (v9)
        goto LABEL_10;
LABEL_4:
      v4 -= 32;
      if (v4 == v3)
      {
        v5 = *v2;
        goto LABEL_14;
      }
    }
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    v9 = (std::__shared_weak_count *)*((_QWORD *)v4 - 3);
    if (!v9)
      goto LABEL_4;
LABEL_10:
    std::__shared_weak_count::__release_weak(v9);
    goto LABEL_4;
  }
LABEL_15:
  result = *(double *)&v11;
  *(_OWORD *)v2 = v11;
  v2[2] = v12;
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<qmi::QMuxServerAccepter::State>::execute_wrapped<qmi::QMuxServerAccepter::State::setValidationStrategy(std::function<BOOL ()(void *)> &&)::$_0>(qmi::QMuxServerAccepter::State::setValidationStrategy(std::function<BOOL ()(void *)> &&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<qmi::QMuxServerAccepter::State::setValidationStrategy(std::function<BOOL ()(void *)> &&)::$_0,std::default_delete<qmi::QMuxServerAccepter::State::setValidationStrategy(std::function<BOOL ()(void *)> &&)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v2 = *a1;
  v3 = (uint64_t)(*a1 + 1);
  v4 = **a1;
  v7 = *(_QWORD **)(v4 + 112);
  v6 = (_QWORD *)(v4 + 112);
  v5 = v7;
  *v6 = 0;
  if (v7 == v6 - 3)
  {
    v8 = 4;
    v5 = v6 - 3;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v8))();
LABEL_6:
  v10 = v2 + 4;
  v9 = v2[4];
  if (!v9)
  {
LABEL_9:
    *v6 = 0;
    goto LABEL_11;
  }
  if (v9 != v3)
  {
    *v6 = v9;
    v6 = v2 + 4;
    goto LABEL_9;
  }
  *v6 = v6 - 3;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v10 + 24))(*v10, v6 - 3);
LABEL_11:
  v11 = (_QWORD *)*v10;
  if (*v10 == v3)
  {
    v12 = 4;
    v11 = (_QWORD *)v3;
    goto LABEL_15;
  }
  if (v11)
  {
    v12 = 5;
LABEL_15:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
  operator delete(v2);
  v13 = (std::__shared_weak_count *)a1[2];
  if (!v13)
    goto LABEL_20;
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    operator delete(a1);
  }
  else
  {
LABEL_20:
    operator delete(a1);
  }
}

void ctu::SharedSynchronizable<qmi::QMuxServerAccepter::State>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3qmi18QMuxServerAccepter5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &__block_descriptor_tmp_17;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN3qmi18QMuxServerAccepter5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __copy_helper_block_e8_32b40c59_ZTSNSt3__110shared_ptrIKN3qmi18QMuxServerAccepter5StateEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  _Block_object_assign(a1 + 4, *(const void **)(a2 + 32), 7);
  v4 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void __destroy_helper_block_e8_32b40c59_ZTSNSt3__110shared_ptrIKN3qmi18QMuxServerAccepter5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    _Block_object_dispose(*(const void **)(a1 + 32), 7);
  }
  else
  {
LABEL_5:
    _Block_object_dispose(*(const void **)(a1 + 32), 7);
  }
}

void QMIControl::QMIControl(QMIControl *this, const QMux *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  std::string *v12;
  std::string::size_type size;
  std::string::value_type *v14;
  int v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  dispatch_queue_t v19;
  pthread_mutex_t *v20;
  std::string __p;
  _DWORD v22[2];
  uint64_t v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)a2;
  v5 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
  v23 = *(_QWORD *)a2;
  v24 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (v4)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    if (*(char *)(v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *(_QWORD *)(v8 + 8));
    }
    else
    {
      v9 = *(_OWORD *)v8;
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 16);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
    }
  }
  else
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&__p, "(empty QMux)");
  }
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v12 = std::string::append(&__p, "::QMIControl", 0xCuLL);
  v14 = (std::string::value_type *)v12->__r_.__value_.__r.__words[0];
  size = v12->__r_.__value_.__l.__size_;
  v22[0] = v12->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v22 + 3) = *(_DWORD *)((char *)&v12->__r_.__value_.__r.__words[2] + 3);
  v15 = SHIBYTE(v12->__r_.__value_.__r.__words[2]);
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)this = &unk_1E41526B8;
  if ((v15 & 0x80000000) == 0)
  {
    *((_QWORD *)this + 1) = v14;
    *((_QWORD *)this + 2) = size;
    *((_DWORD *)this + 6) = v22[0];
    *(_DWORD *)((char *)this + 27) = *(_DWORD *)((char *)v22 + 3);
    *((_BYTE *)this + 31) = v15;
    *((_WORD *)this + 16) = -256;
    *(_QWORD *)((char *)this + 36) = 0x2FFFFFFFFLL;
    *((_BYTE *)this + 44) = 1;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
  std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), v14, size);
  *((_WORD *)this + 16) = -256;
  *(_QWORD *)((char *)this + 36) = 0x2FFFFFFFFLL;
  *((_BYTE *)this + 44) = 1;
  operator delete(v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_16:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_17:
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)this = off_1E41546A0;
  *((_QWORD *)this + 8) = ATCSLogger::getInstance((ATCSLogger *)v12);
  *((_QWORD *)this + 9) = *(_QWORD *)a2;
  v16 = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 10) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 16);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *((_QWORD *)this + 11) = dispatch_get_current_queue();
  v19 = dispatch_queue_create("com.apple.CommCenter.ATCS.QMIControl.Callbacks", 0);
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 12) = v19;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 14) = 0;
  *(_QWORD *)((char *)this + 117) = 0;
  v20 = (pthread_mutex_t *)operator new(0x48uLL);
  v20[1].__sig = 0;
  if ((initialized & 1) == 0)
  {
    pthread_key_create((pthread_key_t *)&threadInfoKey, 0);
    initialized = 1;
  }
  pthread_mutex_init(v20, 0);
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 16) = v20;
  *((_QWORD *)this + 17) = (char *)this + 144;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = (char *)this + 168;
  *((_DWORD *)this + 48) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 25) = (char *)this + 208;
  dispatch_retain(*((dispatch_object_t *)this + 11));
}

void sub_19EA0D0A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  void *v16;

  operator delete(v16);
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

QMIControl::ClientIdRequests *QMIControl::ClientIdRequests::ClientIdRequests(QMIControl::ClientIdRequests *this)
{
  pthread_mutex_t *v2;

  *(_QWORD *)this = 0;
  v2 = (pthread_mutex_t *)operator new(0x48uLL);
  v2[1].__sig = 0;
  if ((initialized & 1) == 0)
  {
    pthread_key_create((pthread_key_t *)&threadInfoKey, 0);
    initialized = 1;
  }
  pthread_mutex_init(v2, 0);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = v2;
  *((_QWORD *)this + 1) = (char *)this + 16;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = (char *)this + 40;
  return this;
}

{
  pthread_mutex_t *v2;

  *(_QWORD *)this = 0;
  v2 = (pthread_mutex_t *)operator new(0x48uLL);
  v2[1].__sig = 0;
  if ((initialized & 1) == 0)
  {
    pthread_key_create((pthread_key_t *)&threadInfoKey, 0);
    initialized = 1;
  }
  pthread_mutex_init(v2, 0);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = v2;
  *((_QWORD *)this + 1) = (char *)this + 16;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = (char *)this + 40;
  return this;
}

void QMIControl::~QMIControl(QMIControl *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  pthread_mutex_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;

  *(_QWORD *)this = off_1E41546A0;
  qmi::TransactionQueue::State::stop_sync(*((qmi::TransactionQueue::State **)this + 13));
  dispatch_release(*((dispatch_object_t *)this + 12));
  dispatch_release(*((dispatch_object_t *)this + 11));
  v2 = *((_QWORD *)this + 23);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *((_QWORD *)this + 23);
    *((_QWORD *)this + 23) = 0;
    if (v3)
      dispatch_release(v3);
  }
  std::__tree<std::__value_type<qmi::ServiceType,std::set<unsigned short>>,std::__map_value_compare<qmi::ServiceType,std::__value_type<qmi::ServiceType,std::set<unsigned short>>,std::less<qmi::ServiceType>,true>,std::allocator<std::__value_type<qmi::ServiceType,std::set<unsigned short>>>>::destroy(*((_QWORD **)this + 26));
  v4 = *((_QWORD *)this + 23);
  if (v4)
    dispatch_release(v4);
  std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(*((_QWORD **)this + 21));
  std::__tree<std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>,std::__map_value_compare<qmi::ServiceType,std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>,std::less<qmi::ServiceType>,true>,std::allocator<std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>>>::destroy(*((_QWORD **)this + 18));
  v5 = (pthread_mutex_t *)*((_QWORD *)this + 16);
  pthread_mutex_destroy(v5);
  if (v5)
    operator delete(v5);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)this = &unk_1E41526B8;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  void *v1;

  QMIControl::~QMIControl(this);
  operator delete(v1);
}

void QMIControl::ClientIdRequests::~ClientIdRequests(QMIControl::ClientIdRequests *this)
{
  _QWORD *v2;

  std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(*((_QWORD **)this + 5));
  std::__tree<std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>,std::__map_value_compare<qmi::ServiceType,std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>,std::less<qmi::ServiceType>,true>,std::allocator<std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>>>::destroy(*((_QWORD **)this + 2));
  v2 = *(_QWORD **)this;
  pthread_mutex_destroy(*(pthread_mutex_t **)this);
  if (v2)
    operator delete(v2);
}

{
  _QWORD *v2;

  std::__tree<std::pair<qmi::ServiceType const,unsigned short const>>::destroy(*((_QWORD **)this + 5));
  std::__tree<std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>,std::__map_value_compare<qmi::ServiceType,std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>,std::less<qmi::ServiceType>,true>,std::allocator<std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>>>::destroy(*((_QWORD **)this + 2));
  v2 = *(_QWORD **)this;
  pthread_mutex_destroy(*(pthread_mutex_t **)this);
  if (v2)
    operator delete(v2);
}

void QMIControl::Deleter::operator()(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = *(NSObject **)(a2 + 88);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN10QMIControl7DeleterclEPS__block_invoke;
  block[3] = &__block_descriptor_tmp_9;
  block[4] = a2;
  dispatch_async(v2, block);
}

uint64_t ___ZN10QMIControl7DeleterclEPS__block_invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void QMIControl::init_sync(QMIControl *this, const QMux *a2)
{
  dispatch_queue_t current_queue;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count_vtbl *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  const char *v22;
  dispatch_queue_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;

  current_queue = dispatch_get_current_queue();
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v5 || (v6 = *((_QWORD *)this + 6), (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v25 = v6;
  v26 = v7;
  v8 = (std::__shared_weak_count_vtbl *)operator new(0x110uLL);
  qmi::TransactionQueue::State::State((uint64_t)v8, (uint64_t)current_queue, (uint64_t)current_queue, a2, &v25);
  std::shared_ptr<qmi::TransactionQueue::State>::shared_ptr[abi:ne180100]<qmi::TransactionQueue::State,qmi::TransactionQueue::State::Deleter,void>(&v27, v8);
  v10 = v27;
  v9 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 13) = v10;
  *((_QWORD *)this + 14) = v9;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v28;
  if (v28)
  {
    v17 = (unint64_t *)&v28->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v26;
  if (v26)
  {
    v20 = (unint64_t *)&v26->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v23 = dispatch_get_current_queue();
  v24 = *((_QWORD *)this + 13);
  if (v23 != *(dispatch_queue_t *)(v24 + 16))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x22C, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v22);
    v24 = *((_QWORD *)this + 13);
  }
  *(_DWORD *)(v24 + 32) = 1;
  qmi::TransactionQueue::State::checkFlushNotifiers_sync((qmi::TransactionQueue::State *)v24);
}

void sub_19EA0D5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  operator delete(v11);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19EA0D5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QMIControl::create(QMIControl *this@<X0>, QMIControl **a2@<X8>)
{
  QMIControl *v5;

  *a2 = (QMIControl *)0xAAAAAAAAAAAAAAAALL;
  a2[1] = (QMIControl *)0xAAAAAAAAAAAAAAAALL;
  v5 = (QMIControl *)operator new(0xE0uLL);
  QMIControl::QMIControl(v5, this);
  std::shared_ptr<QMIControl>::shared_ptr[abi:ne180100]<QMIControl,QMIControl::Deleter,void>(a2, (uint64_t)v5);
  QMIControl::init_sync(*a2, this);
}

void sub_19EA0D648(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19EA0D65C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void QMIControl::revokeRegistration(qmi::TransactionQueue::State **this)
{
  const char *v2;
  dispatch_queue_t current_queue;
  qmi::TransactionQueue::State *v4;

  qmi::TransactionQueue::State::stop_sync(this[13]);
  std::__tree<std::__value_type<qmi::ServiceType,std::set<unsigned short>>,std::__map_value_compare<qmi::ServiceType,std::__value_type<qmi::ServiceType,std::set<unsigned short>>,std::less<qmi::ServiceType>,true>,std::allocator<std::__value_type<qmi::ServiceType,std::set<unsigned short>>>>::destroy(this[26]);
  this[25] = (qmi::TransactionQueue::State *)(this + 26);
  this[26] = 0;
  this[27] = 0;
  *((_WORD *)this + 61) = 0;
  *((_BYTE *)this + 124) = 0;
  current_queue = dispatch_get_current_queue();
  v4 = this[13];
  if (current_queue != *((dispatch_queue_t *)v4 + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x22C, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v2);
    v4 = this[13];
  }
  *((_DWORD *)v4 + 8) = 1;
  qmi::TransactionQueue::State::checkFlushNotifiers_sync(v4);
}

void QMIControl::revokeRegistration_sync(qmi::TransactionQueue::State **this)
{
  const char *v2;
  dispatch_queue_t current_queue;
  qmi::TransactionQueue::State *v4;

  qmi::TransactionQueue::State::stop_sync(this[13]);
  std::__tree<std::__value_type<qmi::ServiceType,std::set<unsigned short>>,std::__map_value_compare<qmi::ServiceType,std::__value_type<qmi::ServiceType,std::set<unsigned short>>,std::less<qmi::ServiceType>,true>,std::allocator<std::__value_type<qmi::ServiceType,std::set<unsigned short>>>>::destroy(this[26]);
  this[25] = (qmi::TransactionQueue::State *)(this + 26);
  this[26] = 0;
  this[27] = 0;
  *((_WORD *)this + 61) = 0;
  *((_BYTE *)this + 124) = 0;
  current_queue = dispatch_get_current_queue();
  v4 = this[13];
  if (current_queue != *((dispatch_queue_t *)v4 + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x22C, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v2);
    v4 = this[13];
  }
  *((_DWORD *)v4 + 8) = 1;
  qmi::TransactionQueue::State::checkFlushNotifiers_sync(v4);
}

void QMIControl::start_sync(QMIControl *this, char a2, NSObject *a3)
{
  NSObject *v6;
  const char *v7;
  dispatch_queue_t current_queue;
  qmi::TransactionQueue::State *v9;

  *((_DWORD *)this + 48) = 0;
  v6 = *((_QWORD *)this + 23);
  if (v6)
  {
    dispatch_source_cancel(v6);
    v6 = *((_QWORD *)this + 23);
    *((_QWORD *)this + 23) = 0;
    if (v6)
      dispatch_release(v6);
  }
  if ((capabilities::radio::supportsDataService((capabilities::radio *)v6) & 1) == 0)
    QMIControl::setDataFormat_sync(this, a2);
  QMIControl::setPowerMode_sync(this, 0);
  qmi::TransactionQueue::State::start_sync(*((qmi::TransactionQueue::State **)this + 13));
  current_queue = dispatch_get_current_queue();
  v9 = (qmi::TransactionQueue::State *)*((_QWORD *)this + 13);
  if (current_queue != *((dispatch_queue_t *)v9 + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x238, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v7);
    v9 = (qmi::TransactionQueue::State *)*((_QWORD *)this + 13);
  }
  qmi::TransactionQueue::State::flush_sync(v9, a3);
}

void QMIControl::setDataFormat_sync(QMIControl *this, char a2)
{
  std::__shared_weak_count *v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  const void **v9;
  _DWORD *v10;
  _BYTE *v11;
  _BYTE *v12;
  _DWORD *v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  const void **v33;
  char *v34;
  _DWORD *v35;
  char *v36;
  char *v37;
  int64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  _QWORD v74[5];
  std::__shared_weak_count *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  _QWORD v80[2];
  uint64_t (*v81)(uint64_t, _DWORD *);
  void *v82;
  char v83;
  void *__p[2];
  __int128 v85;
  uint64_t v86;
  std::__shared_weak_count *v87;

  v86 = 0;
  v87 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v4)
  {
    v87 = std::__shared_weak_count::lock(v4);
    if (v87)
      v86 = *((_QWORD *)this + 9);
  }
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v5;
  v85 = v5;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v6 = MEMORY[0x1E0C809B0];
  v80[0] = MEMORY[0x1E0C809B0];
  v80[1] = 0x40000000;
  v81 = ___ZN10QMIControl18setDataFormat_syncEb_block_invoke;
  v82 = &__block_descriptor_tmp_5_0;
  v83 = a2;
  v7 = (char *)__p[1];
  v8 = (char *)v85;
  v9 = (const void **)__p[1];
  if (__p[1] != (void *)v85)
  {
    v9 = (const void **)__p[1];
    while (*((_BYTE *)*v9 + 8) != 1)
    {
      if (++v9 == (const void **)v85)
        goto LABEL_12;
    }
  }
  if (v9 == (const void **)v85)
  {
LABEL_12:
    v11 = operator new(0x10uLL);
    v12 = v11;
    v11[8] = 1;
    *(_QWORD *)v11 = off_1E4154AE0;
    *((_DWORD *)v11 + 3) = 0;
    v13 = v11 + 12;
    if ((unint64_t)v8 < *((_QWORD *)&v85 + 1))
    {
      *(_QWORD *)v8 = v11;
      v14 = (uint64_t)(v8 + 8);
LABEL_34:
      *(_QWORD *)&v85 = v14;
      v81((uint64_t)v80, v13);
      goto LABEL_35;
    }
    v15 = v8 - v7;
    v16 = (v8 - v7) >> 3;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61)
      goto LABEL_96;
    v18 = *((_QWORD *)&v85 + 1) - (_QWORD)v7;
    if ((uint64_t)(*((_QWORD *)&v85 + 1) - (_QWORD)v7) >> 2 > v17)
      v17 = v18 >> 2;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 61)
        goto LABEL_97;
      v20 = operator new(8 * v19);
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v12;
      v14 = (uint64_t)(v21 + 1);
      if (v7 != v8)
      {
LABEL_23:
        if ((unint64_t)(v15 - 8) < 0x58)
          goto LABEL_100;
        if ((unint64_t)(v7 - v20) < 0x20)
          goto LABEL_100;
        v23 = ((unint64_t)(v15 - 8) >> 3) + 1;
        v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
        v25 = &v8[-v24];
        v21 = (_QWORD *)((char *)v21 - v24);
        v26 = &v20[8 * v16 - 16];
        v27 = v8 - 16;
        v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *(_OWORD *)v27;
          *(v26 - 1) = *((_OWORD *)v27 - 1);
          *v26 = v29;
          v26 -= 2;
          v27 -= 32;
          v28 -= 4;
        }
        while (v28);
        v8 = v25;
        if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_100:
          do
          {
            v30 = *((_QWORD *)v8 - 1);
            v8 -= 8;
            *--v21 = v30;
          }
          while (v8 != v7);
        }
        v7 = (char *)__p[1];
        __p[1] = v21;
        *(_QWORD *)&v85 = v14;
        *((_QWORD *)&v85 + 1) = v22;
        if (!v7)
          goto LABEL_34;
        goto LABEL_33;
      }
    }
    else
    {
      v20 = 0;
      v21 = (_QWORD *)(8 * v16);
      v22 = 0;
      *(_QWORD *)(8 * v16) = v12;
      v14 = 8 * v16 + 8;
      if (v7 != v8)
        goto LABEL_23;
    }
    __p[1] = v21;
    *(_QWORD *)&v85 = v14;
    *((_QWORD *)&v85 + 1) = v22;
    if (!v7)
      goto LABEL_34;
LABEL_33:
    operator delete(v7);
    goto LABEL_34;
  }
  if (!v10)
    goto LABEL_95;
  ___ZN10QMIControl18setDataFormat_syncEb_block_invoke((uint64_t)v80, v10 + 3);
LABEL_35:
  v31 = (char *)__p[1];
  v32 = (char *)v85;
  v33 = (const void **)__p[1];
  if (__p[1] != (void *)v85)
  {
    v33 = (const void **)__p[1];
    while (*((_BYTE *)*v33 + 8) != 16)
    {
      if (++v33 == (const void **)v85)
        goto LABEL_43;
    }
  }
  if (v33 == (const void **)v85)
  {
LABEL_43:
    v36 = (char *)operator new(0x10uLL);
    v37 = v36;
    v36[8] = 16;
    *(_QWORD *)v36 = off_1E4154B30;
    *((_DWORD *)v36 + 3) = 0;
    v35 = v36 + 12;
    if ((unint64_t)v32 < *((_QWORD *)&v85 + 1))
    {
      *(_QWORD *)v32 = v36;
      *(_QWORD *)&v85 = v32 + 8;
      goto LABEL_66;
    }
    v38 = v32 - v31;
    v39 = (v32 - v31) >> 3;
    v40 = v39 + 1;
    if (!((unint64_t)(v39 + 1) >> 61))
    {
      v41 = *((_QWORD *)&v85 + 1) - (_QWORD)v31;
      if ((uint64_t)(*((_QWORD *)&v85 + 1) - (_QWORD)v31) >> 2 > v40)
        v40 = v41 >> 2;
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
        v42 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v42 = v40;
      if (!v42)
      {
        v43 = 0;
        v44 = (_QWORD *)(8 * v39);
        v45 = 0;
        *(_QWORD *)(8 * v39) = v37;
        v46 = 8 * v39 + 8;
        if (v31 != v32)
          goto LABEL_54;
        goto LABEL_63;
      }
      if (!(v42 >> 61))
      {
        v43 = operator new(8 * v42);
        v44 = &v43[8 * v39];
        v45 = &v43[8 * v42];
        *v44 = v37;
        v46 = (uint64_t)(v44 + 1);
        if (v31 != v32)
        {
LABEL_54:
          if ((unint64_t)(v38 - 8) < 0x58)
            goto LABEL_101;
          if ((unint64_t)(v31 - v43) < 0x20)
            goto LABEL_101;
          v47 = ((unint64_t)(v38 - 8) >> 3) + 1;
          v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
          v49 = &v32[-v48];
          v44 = (_QWORD *)((char *)v44 - v48);
          v50 = &v43[8 * v39 - 16];
          v51 = v32 - 16;
          v52 = v47 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v53 = *(_OWORD *)v51;
            *(v50 - 1) = *((_OWORD *)v51 - 1);
            *v50 = v53;
            v50 -= 2;
            v51 -= 32;
            v52 -= 4;
          }
          while (v52);
          v32 = v49;
          if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_101:
            do
            {
              v54 = *((_QWORD *)v32 - 1);
              v32 -= 8;
              *--v44 = v54;
            }
            while (v32 != v31);
          }
          v31 = (char *)__p[1];
          __p[1] = v44;
          *(_QWORD *)&v85 = v46;
          *((_QWORD *)&v85 + 1) = v45;
          if (!v31)
            goto LABEL_65;
          goto LABEL_64;
        }
LABEL_63:
        __p[1] = v44;
        *(_QWORD *)&v85 = v46;
        *((_QWORD *)&v85 + 1) = v45;
        if (!v31)
        {
LABEL_65:
          *(_QWORD *)&v85 = v46;
          goto LABEL_66;
        }
LABEL_64:
        operator delete(v31);
        goto LABEL_65;
      }
LABEL_97:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_96:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  if (!v34)
LABEL_95:
    __cxa_bad_cast();
  v35 = v34 + 12;
LABEL_66:
  *v35 = 2;
  v56 = *((_QWORD *)this + 6);
  v55 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  v78 = v56;
  if (!v55 || (v57 = std::__shared_weak_count::lock(v55), (v79 = v57) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v74[0] = v6;
  v74[1] = 1174405120;
  v74[2] = ___ZN10QMIControl18setDataFormat_syncEb_block_invoke_3;
  v74[3] = &__block_descriptor_tmp_10_2;
  v74[4] = v56;
  v75 = v57;
  p_shared_owners = (unint64_t *)&v57->__shared_owners_;
  do
    v59 = __ldxr(p_shared_owners);
  while (__stxr(v59 + 1, p_shared_owners));
  v76 = v86;
  v77 = v87;
  if (v87)
  {
    v60 = (unint64_t *)&v87->__shared_owners_;
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
  }
  qmi::TransactionQueue::forceSend_sync((uint64_t *)this + 13, (qmi::MutableMessageBase *)__p, 25000, v74);
  v62 = v77;
  if (v77)
  {
    v63 = (unint64_t *)&v77->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = v75;
  if (v75)
  {
    v66 = (unint64_t *)&v75->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = v79;
  if (v79)
  {
    v69 = (unint64_t *)&v79->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  v71 = v87;
  if (v87)
  {
    v72 = (unint64_t *)&v87->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
}

void sub_19EA0DE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;
  QMux *v26;
  uint64_t v27;

  QMux::~QMux(v26);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v25);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a25);
  QMux::~QMux((QMux *)(v27 - 96));
  _Unwind_Resume(a1);
}

void sub_19EA0DE74(_Unwind_Exception *a1)
{
  uint64_t v1;

  QMux::~QMux((QMux *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_19EA0DE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  QMux::~QMux((QMux *)(v17 - 96));
  _Unwind_Resume(a1);
}

void QMIControl::setPowerMode_sync(_QWORD *a1, unsigned int a2)
{
  __int128 v4;
  char *v5;
  char *v6;
  const void **v7;
  char *v8;
  unsigned int *v9;
  char *v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  _OWORD *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  _QWORD v40[5];
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  __int128 v44;
  __int128 v45;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v44 = v4;
  v45 = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v44);
  v5 = (char *)*((_QWORD *)&v44 + 1);
  v6 = (char *)v45;
  v7 = (const void **)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1) != (_QWORD)v45)
  {
    v7 = (const void **)*((_QWORD *)&v44 + 1);
    while (*((_BYTE *)*v7 + 8) != 1)
    {
      if (++v7 == (const void **)v45)
        goto LABEL_10;
    }
  }
  if (v7 == (const void **)v45)
  {
LABEL_10:
    v10 = (char *)operator new(0x10uLL);
    v11 = v10;
    v10[8] = 1;
    *(_QWORD *)v10 = off_1E4154D10;
    *((_DWORD *)v10 + 3) = 0;
    v9 = (unsigned int *)(v10 + 12);
    if ((unint64_t)v6 < *((_QWORD *)&v45 + 1))
    {
      *(_QWORD *)v6 = v10;
      *(_QWORD *)&v45 = v6 + 8;
      if (a2 < 2)
        goto LABEL_12;
LABEL_25:
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIControl.cpp", (const char *)0x1B0, "profile", "==", "qmi::kQMIPower_Normal", (const char *)a2, 0);
      goto LABEL_26;
    }
    v12 = v6 - v5;
    v13 = (v6 - v5) >> 3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v15 = *((_QWORD *)&v45 + 1) - (_QWORD)v5;
    if ((uint64_t)(*((_QWORD *)&v45 + 1) - (_QWORD)v5) >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v17 = operator new(8 * v16);
      v18 = &v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v11;
      v20 = (uint64_t)(v18 + 1);
      if (v5 == v6)
      {
LABEL_22:
        *((_QWORD *)&v44 + 1) = v18;
        *(_QWORD *)&v45 = v20;
        *((_QWORD *)&v45 + 1) = v19;
        if (!v5)
          goto LABEL_24;
        goto LABEL_23;
      }
    }
    else
    {
      v17 = 0;
      v18 = (_QWORD *)(8 * v13);
      v19 = 0;
      *(_QWORD *)(8 * v13) = v11;
      v20 = 8 * v13 + 8;
      if (v5 == v6)
        goto LABEL_22;
    }
    if ((unint64_t)(v12 - 8) < 0x58)
      goto LABEL_56;
    if ((unint64_t)(v5 - v17) < 0x20)
      goto LABEL_56;
    v32 = ((unint64_t)(v12 - 8) >> 3) + 1;
    v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    v34 = &v6[-v33];
    v18 = (_QWORD *)((char *)v18 - v33);
    v35 = &v17[8 * v13 - 16];
    v36 = v6 - 16;
    v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v38 = *(_OWORD *)v36;
      *(v35 - 1) = *((_OWORD *)v36 - 1);
      *v35 = v38;
      v35 -= 2;
      v36 -= 32;
      v37 -= 4;
    }
    while (v37);
    v6 = v34;
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_56:
      do
      {
        v39 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v18 = v39;
      }
      while (v6 != v5);
    }
    v5 = (char *)*((_QWORD *)&v44 + 1);
    *((_QWORD *)&v44 + 1) = v18;
    *(_QWORD *)&v45 = v20;
    *((_QWORD *)&v45 + 1) = v19;
    if (!v5)
    {
LABEL_24:
      *(_QWORD *)&v45 = v20;
      if (a2 < 2)
        goto LABEL_12;
      goto LABEL_25;
    }
LABEL_23:
    operator delete(v5);
    goto LABEL_24;
  }
  if (!v8)
    __cxa_bad_cast();
  v9 = (unsigned int *)(v8 + 12);
  if (a2 >= 2)
    goto LABEL_25;
LABEL_12:
  *v9 = a2;
LABEL_26:
  v22 = a1[6];
  v21 = (std::__shared_weak_count *)a1[7];
  v42 = v22;
  if (!v21 || (v23 = std::__shared_weak_count::lock(v21), (v43 = v23) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v40[0] = MEMORY[0x1E0C809B0];
  v40[1] = 1174405120;
  v40[2] = ___ZN10QMIControl17setPowerMode_syncEN3qmi12PowerProfileE_block_invoke_2;
  v40[3] = &__block_descriptor_tmp_55;
  v40[4] = v22;
  v41 = v23;
  p_shared_owners = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldxr(p_shared_owners);
  while (__stxr(v25 + 1, p_shared_owners));
  qmi::TransactionQueue::forceSend_sync(a1 + 13, (qmi::MutableMessageBase *)&v44, 25000, v40);
  v26 = v41;
  if (v41)
  {
    v27 = (unint64_t *)&v41->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v43;
  if (v43)
  {
    v30 = (unint64_t *)&v43->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v44);
}

void sub_19EA0E22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v7);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_19EA0E250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_19EA0E264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN10QMIControl18setDataFormat_syncEb_block_invoke(uint64_t result, _DWORD *a2)
{
  *a2 = *(unsigned __int8 *)(result + 32);
  return result;
}

void ___ZN10QMIControl18setDataFormat_syncEb_block_invoke_3(_QWORD *a1, uint64_t a2)
{
  int v2;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t (*v10)(QMux *__hidden);
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v2 = *(_DWORD *)(a2 + 4);
  if (v2)
  {
    v5 = *(_QWORD *)(a1[4] + 64);
    v6 = (const char *)qmi::asString();
    v7 = a1[4];
    v8 = (const char *)(v7 + 8);
    if (*(char *)(v7 + 31) < 0)
      v8 = *(const char **)v8;
    (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v5 + 24))(v5, 6, "SetDataFormat::Response returned error 0x%x (%s) [%s]\n", v2, v6, v8);
    v9 = a1[6];
    v10 = QMux::BOOL_true_type;
    if (!v9)
      v10 = 0;
    if (v10)
    {
      v11 = (std::__shared_weak_count *)a1[7];
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      QMux::State::notifyControlMessageError_sync(v9, *(_DWORD *)(a2 + 4));
      if (v11)
      {
        v14 = (unint64_t *)&v11->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
  }
}

void sub_19EA0E38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_32c38_ZTSNSt3__110shared_ptrI10QMIControlEE48c9_ZTS4QMux(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[7];
  result[6] = a2[6];
  result[7] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_e8_32c38_ZTSNSt3__110shared_ptrI10QMIControlEE48c9_ZTS4QMux(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void QMIControl::add_sync(_QWORD *a1, _QWORD *a2)
{
  char v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  const char *v20;
  std::__shared_weak_count *v21;
  uint64_t (*v22)(QMux *__hidden);
  std::string::size_type v23;
  void *v24;
  std::string::size_type v25;
  std::string *p_dst;
  uint64_t v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  const void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  std::string *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  std::string __dst;
  _QWORD *v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  void *__p[2];
  __int128 v51;
  unint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  std::string v63;

  v4 = *(_BYTE *)(*a2 + 32);
  if (QMIControl::ClientIdRequests::addRequest((uint64_t)(a1 + 16), a2))
  {
    QMIControl::requestClientId_sync(a1, v4);
    return;
  }
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v52 = 0xAAAAAAAAAAAAAAAALL;
  v62 = v5;
  v61 = v5;
  v60 = v5;
  v59 = v5;
  v58 = v5;
  v57 = v5;
  v56 = v5;
  v55 = v5;
  v54 = v5;
  v51 = v5;
  v49 = v5;
  *(_OWORD *)__p = v5;
  v47 = v5;
  v48 = v5;
  v46 = v5;
  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v53 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v45 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v45 + *(_QWORD *)(v45 - 24)) = v9;
  v10 = (std::ios_base *)((char *)&v45 + *(_QWORD *)(v45 - 24));
  std::ios_base::init(v10, &v46);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v45 = v6 + 24;
  v53 = v7;
  std::streambuf::basic_streambuf();
  v11 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v46 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v51 = 0u;
  LODWORD(v52) = 16;
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"QMI client double request for ID", 32);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" client=", 8);
  v13 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" svc=", 5);
  v14 = (_QWORD *)std::ostream::operator<<();
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" [", 2);
  v16 = *(char *)(*a2 + 31);
  if (v16 >= 0)
    v17 = *a2 + 8;
  else
    v17 = *(_QWORD *)(*a2 + 8);
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(*a2 + 31);
  else
    v18 = *(_QWORD *)(*a2 + 16);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"]", 1);
  v43 = 0;
  v44 = 0;
  v21 = (std::__shared_weak_count *)a1[10];
  if (!v21
    || (v44 = std::__shared_weak_count::lock(v21)) == 0
    || ((v43 = (_QWORD *)a1[9]) != 0 ? (v22 = QMux::BOOL_true_type) : (v22 = 0), !v22))
  {
    if ((v52 & 0x10) != 0)
    {
      v33 = *((_QWORD *)&v51 + 1);
      if (*((_QWORD *)&v51 + 1) < (unint64_t)v49)
      {
        *((_QWORD *)&v51 + 1) = v49;
        v33 = v49;
      }
      v34 = (const void *)*((_QWORD *)&v48 + 1);
      v23 = v33 - *((_QWORD *)&v48 + 1);
      if ((unint64_t)(v33 - *((_QWORD *)&v48 + 1)) > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_67;
    }
    else
    {
      if ((v52 & 8) == 0)
      {
        v23 = 0;
        *((_BYTE *)&v63.__r_.__value_.__s + 23) = 0;
        v24 = &v63;
        goto LABEL_53;
      }
      v34 = (const void *)v47;
      v23 = v48 - v47;
      if ((_QWORD)v48 - (_QWORD)v47 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_67:
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v23 >= 0x17)
    {
      v36 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v23 | 7) != 0x17)
        v36 = v23 | 7;
      v37 = v36 + 1;
      v24 = operator new(v36 + 1);
      v63.__r_.__value_.__l.__size_ = v23;
      v63.__r_.__value_.__r.__words[2] = v37 | 0x8000000000000000;
      v63.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
    }
    else
    {
      *((_BYTE *)&v63.__r_.__value_.__s + 23) = v23;
      v24 = &v63;
      if (!v23)
        goto LABEL_53;
    }
    memmove(v24, v34, v23);
LABEL_53:
    *((_BYTE *)v24 + v23) = 0;
    v38 = &v63;
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v38 = (std::string *)v63.__r_.__value_.__r.__words[0];
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIControl.cpp", (const char *)0xBD, "false", "is not", "true", "%s", v20, v38);
    if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_58;
    v35 = (void *)v63.__r_.__value_.__r.__words[0];
    goto LABEL_57;
  }
  if ((v52 & 0x10) != 0)
  {
    v27 = *((_QWORD *)&v51 + 1);
    if (*((_QWORD *)&v51 + 1) < (unint64_t)v49)
    {
      *((_QWORD *)&v51 + 1) = v49;
      v27 = v49;
    }
    v28 = (const void *)*((_QWORD *)&v48 + 1);
    v25 = v27 - *((_QWORD *)&v48 + 1);
    if ((unint64_t)(v27 - *((_QWORD *)&v48 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_42;
  }
  else
  {
    if ((v52 & 8) == 0)
    {
      v25 = 0;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
      p_dst = &__dst;
      goto LABEL_32;
    }
    v28 = (const void *)v47;
    v25 = v48 - v47;
    if ((_QWORD)v48 - (_QWORD)v47 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_42:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v25 >= 0x17)
  {
    v29 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v29 = v25 | 7;
    v30 = v29 + 1;
    p_dst = (std::string *)operator new(v29 + 1);
    __dst.__r_.__value_.__l.__size_ = v25;
    __dst.__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_31;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v25;
  p_dst = &__dst;
  if (v25)
LABEL_31:
    memmove(p_dst, v28, v25);
LABEL_32:
  p_dst->__r_.__value_.__s.__data_[v25] = 0;
  v31 = v43;
  v32 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if (!v43)
    goto LABEL_45;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v63, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v63 = __dst;
  QMux::State::invokeReset(v31, (uint64_t)&v63);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v63.__r_.__value_.__l.__data_);
    if ((v32 & 0x80000000) == 0)
      goto LABEL_58;
  }
  else
  {
LABEL_45:
    if ((v32 & 0x80000000) == 0)
      goto LABEL_58;
  }
  v35 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_57:
  operator delete(v35);
LABEL_58:
  v39 = v44;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v45 = *v8;
  *(uint64_t *)((char *)&v45 + *(_QWORD *)(v45 - 24)) = v8[3];
  *(_QWORD *)&v46 = v11 + 16;
  if (SBYTE7(v51) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AEB300](&v53);
}

void sub_19EA0E9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16)
{
  operator delete(__p);
  QMux::~QMux((QMux *)&a14);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19EA0E9FC()
{
  JUMPOUT(0x19EA0EA04);
}

void sub_19EA0EA1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1A1AEB300](v1);
  _Unwind_Resume(a1);
}

uint64_t QMIControl::ClientIdRequests::addRequest(uint64_t a1, _QWORD *a2)
{
  pthread_mutex_t *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  unsigned int v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  _QWORD *v38;
  _QWORD *v39;
  __int128 v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  pthread_mutex_t *v43;
  __int128 v45;

  v4 = *(pthread_mutex_t **)a1;
  pthread_mutex_lock(*(pthread_mutex_t **)a1);
  v4[1].__sig = (uint64_t)pthread_self();
  v5 = *(unsigned __int8 *)(*a2 + 32);
  v7 = (uint64_t **)(a1 + 16);
  v6 = *(uint64_t **)(a1 + 16);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = v6;
        v9 = *((unsigned __int8 *)v6 + 32);
        if (v5 >= v9)
          break;
        v6 = (uint64_t *)*v8;
        v7 = (uint64_t **)v8;
        if (!*v8)
          goto LABEL_8;
      }
      if (v9 >= v5)
        break;
      v6 = (uint64_t *)v8[1];
      if (!v6)
      {
        v7 = (uint64_t **)(v8 + 1);
        goto LABEL_8;
      }
    }
    v10 = v8;
    v15 = v8 + 5;
    v13 = (uint64_t *)v8[5];
    v14 = (uint64_t *)v15[1];
    if (v13 != v14)
      goto LABEL_16;
  }
  else
  {
    v8 = (uint64_t *)(a1 + 16);
LABEL_8:
    v10 = operator new(0x40uLL);
    v10[32] = v5;
    *((_QWORD *)v10 + 6) = 0;
    *((_QWORD *)v10 + 7) = 0;
    *((_QWORD *)v10 + 5) = 0;
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = v8;
    *v7 = (uint64_t *)v10;
    v11 = **(_QWORD **)(a1 + 8);
    v12 = (uint64_t *)v10;
    if (v11)
    {
      *(_QWORD *)(a1 + 8) = v11;
      v12 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 16), v12);
    ++*(_QWORD *)(a1 + 24);
    v13 = (uint64_t *)*((_QWORD *)v10 + 5);
    v14 = (uint64_t *)*((_QWORD *)v10 + 6);
    if (v13 != v14)
    {
      do
      {
LABEL_16:
        v16 = (std::__shared_weak_count *)v13[1];
        if (v16)
        {
          v17 = std::__shared_weak_count::lock(v16);
          v18 = *a2;
          if (v17)
          {
            v19 = v17;
            v20 = *v13;
            p_shared_owners = (unint64_t *)&v17->__shared_owners_;
            do
              v22 = __ldaxr(p_shared_owners);
            while (__stlxr(v22 - 1, p_shared_owners));
            if (v22)
            {
              if (v18 == v20)
                goto LABEL_28;
            }
            else
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v19);
              if (v18 == v20)
                goto LABEL_28;
            }
          }
          else if (!v18)
          {
            goto LABEL_28;
          }
        }
        else if (!*a2)
        {
          goto LABEL_28;
        }
        v13 += 2;
      }
      while (v13 != v14);
      v13 = v14;
LABEL_28:
      if (v13 != *((uint64_t **)v10 + 6))
      {
        v23 = 0;
        goto LABEL_54;
      }
    }
  }
  v24 = *(_OWORD *)a2;
  v25 = a2[1];
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 16);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    v13 = (uint64_t *)*((_QWORD *)v10 + 6);
  }
  v28 = *((_QWORD *)v10 + 7);
  if ((unint64_t)v13 >= v28)
  {
    v30 = *((_QWORD *)v10 + 5);
    v31 = ((uint64_t)v13 - v30) >> 4;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v45 = v24;
    v32 = v28 - v30;
    v33 = v32 >> 3;
    if (v32 >> 3 <= (unint64_t)(v31 + 1))
      v33 = v31 + 1;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v33;
    if (v34 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v35 = (char *)operator new(16 * v34);
    v36 = &v35[16 * v31];
    v37 = &v35[16 * v34];
    *(_OWORD *)v36 = v45;
    v29 = v36 + 16;
    v38 = (_QWORD *)*((_QWORD *)v10 + 5);
    v39 = (_QWORD *)*((_QWORD *)v10 + 6);
    if (v39 == v38)
    {
      *((_QWORD *)v10 + 5) = v36;
      *((_QWORD *)v10 + 6) = v29;
      *((_QWORD *)v10 + 7) = v37;
    }
    else
    {
      do
      {
        v40 = *((_OWORD *)v39 - 1);
        v39 -= 2;
        *((_OWORD *)v36 - 1) = v40;
        v36 -= 16;
        *v39 = 0;
        v39[1] = 0;
      }
      while (v39 != v38);
      v39 = (_QWORD *)*((_QWORD *)v10 + 5);
      v41 = (_QWORD *)*((_QWORD *)v10 + 6);
      *((_QWORD *)v10 + 5) = v36;
      *((_QWORD *)v10 + 6) = v29;
      *((_QWORD *)v10 + 7) = v37;
      while (v41 != v39)
      {
        v42 = (std::__shared_weak_count *)*(v41 - 1);
        if (v42)
          std::__shared_weak_count::__release_weak(v42);
        v41 -= 2;
      }
    }
    if (v39)
      operator delete(v39);
  }
  else
  {
    *v13 = v24;
    v13[1] = v25;
    v29 = v13 + 2;
  }
  *((_QWORD *)v10 + 6) = v29;
  v23 = 1;
LABEL_54:
  v43 = *(pthread_mutex_t **)a1;
  pthread_self();
  v43[1].__sig = 0;
  pthread_mutex_unlock(v43);
  return v23;
}

void sub_19EA0ED40(_Unwind_Exception *a1)
{
  pthread_mutex_t **v1;
  pthread_mutex_t *v3;

  v3 = *v1;
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

void QMIControl::requestClientId_sync(_QWORD *a1, char a2)
{
  std::__shared_weak_count *v4;
  __int128 v5;
  char *v6;
  char *v7;
  const void **v8;
  char *v9;
  _BYTE *v10;
  _WORD *v11;
  _WORD *v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD v49[5];
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  char v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  void *__p[2];
  __int128 v57;
  uint64_t v58;
  std::__shared_weak_count *v59;

  v58 = 0;
  v59 = 0;
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
  {
    v59 = std::__shared_weak_count::lock(v4);
    if (v59)
      v58 = a1[9];
  }
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v5;
  v57 = v5;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v6 = (char *)__p[1];
  v7 = (char *)v57;
  v8 = (const void **)__p[1];
  if (__p[1] != (void *)v57)
  {
    v8 = (const void **)__p[1];
    while (*((_BYTE *)*v8 + 8) != 1)
    {
      if (++v8 == (const void **)v57)
        goto LABEL_12;
    }
  }
  if (v8 == (const void **)v57)
  {
LABEL_12:
    v11 = operator new(0x10uLL);
    v12 = v11;
    v11[4] = 1;
    *(_QWORD *)v11 = off_1E4154B80;
    if ((unint64_t)v7 < *((_QWORD *)&v57 + 1))
    {
      *(_QWORD *)v7 = v11;
      v13 = (uint64_t)(v7 + 8);
LABEL_34:
      v10 = (char *)v12 + 9;
      *(_QWORD *)&v57 = v13;
      goto LABEL_35;
    }
    v14 = v7 - v6;
    v15 = (v7 - v6) >> 3;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v17 = *((_QWORD *)&v57 + 1) - (_QWORD)v6;
    if ((uint64_t)(*((_QWORD *)&v57 + 1) - (_QWORD)v6) >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v19 = operator new(8 * v18);
      v20 = &v19[8 * v15];
      v21 = &v19[8 * v18];
      *v20 = v12;
      v13 = (uint64_t)(v20 + 1);
      if (v6 != v7)
      {
LABEL_23:
        if ((unint64_t)(v14 - 8) < 0x58)
          goto LABEL_69;
        if ((unint64_t)(v6 - v19) < 0x20)
          goto LABEL_69;
        v22 = ((unint64_t)(v14 - 8) >> 3) + 1;
        v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
        v24 = &v7[-v23];
        v20 = (_QWORD *)((char *)v20 - v23);
        v25 = &v19[8 * v15 - 16];
        v26 = v7 - 16;
        v27 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v7 = v24;
        if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_69:
          do
          {
            v29 = *((_QWORD *)v7 - 1);
            v7 -= 8;
            *--v20 = v29;
          }
          while (v7 != v6);
        }
        v6 = (char *)__p[1];
        __p[1] = v20;
        *(_QWORD *)&v57 = v13;
        *((_QWORD *)&v57 + 1) = v21;
        if (!v6)
          goto LABEL_34;
        goto LABEL_33;
      }
    }
    else
    {
      v19 = 0;
      v20 = (_QWORD *)(8 * v15);
      v21 = 0;
      *(_QWORD *)(8 * v15) = v12;
      v13 = 8 * v15 + 8;
      if (v6 != v7)
        goto LABEL_23;
    }
    __p[1] = v20;
    *(_QWORD *)&v57 = v13;
    *((_QWORD *)&v57 + 1) = v21;
    if (!v6)
      goto LABEL_34;
LABEL_33:
    operator delete(v6);
    goto LABEL_34;
  }
  if (!v9)
    __cxa_bad_cast();
  v10 = v9 + 9;
LABEL_35:
  *v10 = a2;
  v31 = a1[6];
  v30 = (std::__shared_weak_count *)a1[7];
  v54 = v31;
  if (!v30 || (v32 = std::__shared_weak_count::lock(v30), (v55 = v32) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v49[0] = MEMORY[0x1E0C809B0];
  v49[1] = 1174405120;
  v49[2] = ___ZN10QMIControl20requestClientId_syncEN3qmi11ServiceTypeE_block_invoke_2;
  v49[3] = &__block_descriptor_tmp_25_0;
  v49[4] = v31;
  v50 = v32;
  p_shared_owners = (unint64_t *)&v32->__shared_owners_;
  do
    v34 = __ldxr(p_shared_owners);
  while (__stxr(v34 + 1, p_shared_owners));
  v53 = a2;
  v51 = v58;
  v52 = v59;
  if (v59)
  {
    v35 = (unint64_t *)&v59->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  qmi::TransactionQueue::send_sync(a1 + 13, (qmi::MutableMessageBase *)__p, 25000, v49);
  v37 = v52;
  if (v52)
  {
    v38 = (unint64_t *)&v52->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v50;
  if (v50)
  {
    v41 = (unint64_t *)&v50->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v55;
  if (v55)
  {
    v44 = (unint64_t *)&v55->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  v46 = v59;
  if (v59)
  {
    v47 = (unint64_t *)&v59->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_19EA0F164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  uint64_t v21;
  QMux *v22;
  uint64_t v23;

  QMux::~QMux(v22);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v21);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  QMux::~QMux((QMux *)(v23 - 80));
  _Unwind_Resume(a1);
}

void sub_19EA0F198(_Unwind_Exception *a1)
{
  uint64_t v1;

  QMux::~QMux((QMux *)(v1 - 80));
  _Unwind_Resume(a1);
}

void sub_19EA0F1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  QMux::~QMux((QMux *)(v13 - 80));
  _Unwind_Resume(a1);
}

void QMIControl::remove_sync(_QWORD *a1, uint64_t *a2)
{
  int v4;
  char v5;
  int v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  const char *v22;
  std::__shared_weak_count *v23;
  uint64_t (*v24)(QMux *__hidden);
  std::string::size_type v25;
  void *v26;
  NSObject *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::string::size_type v34;
  std::string *p_dst;
  uint64_t v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  const void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  std::string *v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  std::string __dst;
  _QWORD *v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  void *__p[2];
  __int128 v60;
  unint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _QWORD block[5];
  std::__shared_weak_count *v73;
  std::string v74;

  v4 = *(unsigned __int8 *)(*a2 + 33);
  v5 = *(_BYTE *)(*a2 + 32);
  v6 = QMIControl::ClientIdRequests::removeRequestsForClient((uint64_t)(a1 + 16), a2);
  if (v4 != 255)
  {
    if (!v6)
    {
LABEL_74:
      QMIControl::releaseClientId_sync(a1, v5, v4);
      return;
    }
    *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v61 = 0xAAAAAAAAAAAAAAAALL;
    v71 = v7;
    v70 = v7;
    v69 = v7;
    v68 = v7;
    v67 = v7;
    v66 = v7;
    v65 = v7;
    v64 = v7;
    v63 = v7;
    v60 = v7;
    v58 = v7;
    *(_OWORD *)__p = v7;
    v56 = v7;
    v57 = v7;
    v55 = v7;
    v8 = MEMORY[0x1E0DE4FE0];
    v9 = MEMORY[0x1E0DE4FE0] + 64;
    v62 = MEMORY[0x1E0DE4FE0] + 64;
    v10 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v11 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v54 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    *(uint64_t *)((char *)&v54 + *(_QWORD *)(v54 - 24)) = v11;
    v12 = (std::ios_base *)((char *)&v54 + *(_QWORD *)(v54 - 24));
    std::ios_base::init(v12, &v55);
    v12[1].__vftable = 0;
    v12[1].__fmtflags_ = -1;
    v54 = v8 + 24;
    v62 = v9;
    std::streambuf::basic_streambuf();
    v13 = MEMORY[0x1E0DE4FB8];
    *(_QWORD *)&v55 = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v60 = 0u;
    LODWORD(v61) = 16;
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v54, (uint64_t)"QMI client has an ID and is waiting for one,", 44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" client=", 8);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" svc=", 5);
    v16 = (_QWORD *)std::ostream::operator<<();
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" [", 2);
    v18 = *(char *)(*a2 + 31);
    if (v18 >= 0)
      v19 = *a2 + 8;
    else
      v19 = *(_QWORD *)(*a2 + 8);
    if (v18 >= 0)
      v20 = *(unsigned __int8 *)(*a2 + 31);
    else
      v20 = *(_QWORD *)(*a2 + 16);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"]", 1);
    v52 = 0;
    v53 = 0;
    v23 = (std::__shared_weak_count *)a1[10];
    if (!v23
      || (v53 = std::__shared_weak_count::lock(v23)) == 0
      || ((v52 = (_QWORD *)a1[9]) != 0 ? (v24 = QMux::BOOL_true_type) : (v24 = 0), !v24))
    {
      if ((v61 & 0x10) != 0)
      {
        v42 = *((_QWORD *)&v60 + 1);
        if (*((_QWORD *)&v60 + 1) < (unint64_t)v58)
        {
          *((_QWORD *)&v60 + 1) = v58;
          v42 = v58;
        }
        v43 = (const void *)*((_QWORD *)&v57 + 1);
        v25 = v42 - *((_QWORD *)&v57 + 1);
        if ((unint64_t)(v42 - *((_QWORD *)&v57 + 1)) > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_77;
      }
      else
      {
        if ((v61 & 8) == 0)
        {
          v25 = 0;
          *((_BYTE *)&v74.__r_.__value_.__s + 23) = 0;
          v26 = &v74;
          goto LABEL_61;
        }
        v43 = (const void *)v56;
        v25 = v57 - v56;
        if ((_QWORD)v57 - (_QWORD)v56 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_77:
          std::string::__throw_length_error[abi:ne180100]();
      }
      if (v25 >= 0x17)
      {
        v45 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v25 | 7) != 0x17)
          v45 = v25 | 7;
        v46 = v45 + 1;
        v26 = operator new(v45 + 1);
        v74.__r_.__value_.__l.__size_ = v25;
        v74.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
        v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
      }
      else
      {
        *((_BYTE *)&v74.__r_.__value_.__s + 23) = v25;
        v26 = &v74;
        if (!v25)
          goto LABEL_61;
      }
      memmove(v26, v43, v25);
LABEL_61:
      *((_BYTE *)v26 + v25) = 0;
      v47 = &v74;
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v47 = (std::string *)v74.__r_.__value_.__r.__words[0];
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIControl.cpp", (const char *)0xE2, "false", "is not", "true", "%s", v22, v47);
      if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_66;
      v44 = (void *)v74.__r_.__value_.__r.__words[0];
LABEL_65:
      operator delete(v44);
LABEL_66:
      v48 = v53;
      if (v53)
      {
        p_shared_owners = (unint64_t *)&v53->__shared_owners_;
        do
          v50 = __ldaxr(p_shared_owners);
        while (__stlxr(v50 - 1, p_shared_owners));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v54 = *v10;
      *(uint64_t *)((char *)&v54 + *(_QWORD *)(v54 - 24)) = v10[3];
      *(_QWORD *)&v55 = v13 + 16;
      if (SBYTE7(v60) < 0)
        operator delete(__p[0]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1A1AEB300](&v62);
      goto LABEL_74;
    }
    if ((v61 & 0x10) != 0)
    {
      v36 = *((_QWORD *)&v60 + 1);
      if (*((_QWORD *)&v60 + 1) < (unint64_t)v58)
      {
        *((_QWORD *)&v60 + 1) = v58;
        v36 = v58;
      }
      v37 = (const void *)*((_QWORD *)&v57 + 1);
      v34 = v36 - *((_QWORD *)&v57 + 1);
      if ((unint64_t)(v36 - *((_QWORD *)&v57 + 1)) > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_51;
    }
    else
    {
      if ((v61 & 8) == 0)
      {
        v34 = 0;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
        p_dst = &__dst;
        goto LABEL_41;
      }
      v37 = (const void *)v56;
      v34 = v57 - v56;
      if ((_QWORD)v57 - (_QWORD)v56 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_51:
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v34 >= 0x17)
    {
      v38 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v34 | 7) != 0x17)
        v38 = v34 | 7;
      v39 = v38 + 1;
      p_dst = (std::string *)operator new(v38 + 1);
      __dst.__r_.__value_.__l.__size_ = v34;
      __dst.__r_.__value_.__r.__words[2] = v39 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v34;
      p_dst = &__dst;
      if (!v34)
      {
LABEL_41:
        p_dst->__r_.__value_.__s.__data_[v34] = 0;
        v40 = v52;
        v41 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
        if (v52)
        {
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v74, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
          else
            v74 = __dst;
          QMux::State::invokeReset(v40, (uint64_t)&v74);
          if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v74.__r_.__value_.__l.__data_);
        }
        if ((v41 & 0x80000000) == 0)
          goto LABEL_66;
        v44 = (void *)__dst.__r_.__value_.__r.__words[0];
        goto LABEL_65;
      }
    }
    memmove(p_dst, v37, v34);
    goto LABEL_41;
  }
  if (v6)
  {
    v27 = a1[12];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZN10QMIControl11remove_syncENSt3__110shared_ptrIN3qmi15QMuxClientIfaceEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_21_0;
    v28 = a2[1];
    block[4] = *a2;
    v73 = (std::__shared_weak_count *)v28;
    if (v28)
    {
      v29 = (unint64_t *)(v28 + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    dispatch_async(v27, block);
    v31 = v73;
    if (v73)
    {
      v32 = (unint64_t *)&v73->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_19EA0F770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16)
{
  operator delete(__p);
  QMux::~QMux((QMux *)&a14);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19EA0F7C4()
{
  JUMPOUT(0x19EA0F7CCLL);
}

void sub_19EA0F7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::ostream::~ostream();
  MEMORY[0x1A1AEB300](a10);
  _Unwind_Resume(a1);
}

uint64_t QMIControl::ClientIdRequests::removeRequestsForClient(uint64_t a1, uint64_t *a2)
{
  pthread_mutex_t *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  unsigned int v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  pthread_mutex_t *v29;

  v4 = *(pthread_mutex_t **)a1;
  pthread_mutex_lock(*(pthread_mutex_t **)a1);
  v4[1].__sig = (uint64_t)pthread_self();
  v5 = *(unsigned __int8 *)(*a2 + 32);
  v7 = (uint64_t **)(a1 + 16);
  v6 = *(uint64_t **)(a1 + 16);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = v6;
        v9 = *((unsigned __int8 *)v6 + 32);
        if (v5 >= v9)
          break;
        v6 = (uint64_t *)*v8;
        v7 = (uint64_t **)v8;
        if (!*v8)
          goto LABEL_8;
      }
      if (v9 >= v5)
        break;
      v6 = (uint64_t *)v8[1];
      if (!v6)
      {
        v7 = (uint64_t **)(v8 + 1);
        goto LABEL_8;
      }
    }
    v10 = v8;
    v15 = v8 + 5;
    v13 = (uint64_t *)v8[5];
    v14 = (uint64_t *)v15[1];
    if (v13 != v14)
      goto LABEL_16;
    goto LABEL_34;
  }
  v8 = (uint64_t *)(a1 + 16);
LABEL_8:
  v10 = operator new(0x40uLL);
  v10[32] = v5;
  *((_QWORD *)v10 + 6) = 0;
  *((_QWORD *)v10 + 7) = 0;
  *((_QWORD *)v10 + 5) = 0;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = v8;
  *v7 = (uint64_t *)v10;
  v11 = **(_QWORD **)(a1 + 8);
  v12 = (uint64_t *)v10;
  if (v11)
  {
    *(_QWORD *)(a1 + 8) = v11;
    v12 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 16), v12);
  ++*(_QWORD *)(a1 + 24);
  v13 = (uint64_t *)*((_QWORD *)v10 + 5);
  v14 = (uint64_t *)*((_QWORD *)v10 + 6);
  if (v13 == v14)
  {
LABEL_34:
    v27 = 0;
    goto LABEL_41;
  }
  do
  {
LABEL_16:
    v16 = (std::__shared_weak_count *)v13[1];
    if (v16)
    {
      v17 = std::__shared_weak_count::lock(v16);
      v18 = *a2;
      if (v17)
      {
        v19 = v17;
        v20 = *v13;
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (v22)
        {
          if (v18 == v20)
            goto LABEL_28;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v19);
          if (v18 == v20)
            goto LABEL_28;
        }
      }
      else if (!v18)
      {
        goto LABEL_28;
      }
    }
    else if (!*a2)
    {
      goto LABEL_28;
    }
    v13 += 2;
  }
  while (v13 != v14);
  v13 = v14;
LABEL_28:
  v23 = (uint64_t *)*((_QWORD *)v10 + 6);
  if (v13 == v23)
    goto LABEL_34;
  v24 = v13 + 2;
  if (v13 + 2 != v23)
  {
    do
    {
      v25 = *(_OWORD *)v24;
      *v24 = 0;
      v24[1] = 0;
      v26 = (std::__shared_weak_count *)*(v24 - 1);
      *((_OWORD *)v24 - 1) = v25;
      if (v26)
        std::__shared_weak_count::__release_weak(v26);
      v24 += 2;
    }
    while (v24 != v23);
    v23 = (uint64_t *)*((_QWORD *)v10 + 6);
    v13 = v24 - 2;
  }
  while (v23 != v13)
  {
    v28 = (std::__shared_weak_count *)*(v23 - 1);
    if (v28)
      std::__shared_weak_count::__release_weak(v28);
    v23 -= 2;
  }
  *((_QWORD *)v10 + 6) = v13;
  v27 = 1;
LABEL_41:
  v29 = *(pthread_mutex_t **)a1;
  pthread_self();
  v29[1].__sig = 0;
  pthread_mutex_unlock(v29);
  return v27;
}

void sub_19EA0FA50(_Unwind_Exception *a1)
{
  pthread_mutex_t **v1;
  pthread_mutex_t *v3;

  v3 = *v1;
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t ___ZN10QMIControl11remove_syncENSt3__110shared_ptrIN3qmi15QMuxClientIfaceEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), 65539);
}

uint64_t __copy_helper_block_e8_32c50_ZTSKNSt3__110shared_ptrIN3qmi15QMuxClientIfaceEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c50_ZTSKNSt3__110shared_ptrIN3qmi15QMuxClientIfaceEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void QMIControl::releaseClientId_sync(_QWORD *a1, char a2, char a3)
{
  std::__shared_weak_count *v6;
  __int128 v7;
  char *v8;
  char *v9;
  const void **v10;
  char *v11;
  _BYTE *v12;
  _WORD *v13;
  _WORD *v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _QWORD *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD v51[5];
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  void *__p[2];
  __int128 v58;
  uint64_t v59;
  std::__shared_weak_count *v60;

  v59 = 0;
  v60 = 0;
  v6 = (std::__shared_weak_count *)a1[10];
  if (v6)
  {
    v60 = std::__shared_weak_count::lock(v6);
    if (v60)
      v59 = a1[9];
  }
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v7;
  v58 = v7;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v8 = (char *)__p[1];
  v9 = (char *)v58;
  v10 = (const void **)__p[1];
  if (__p[1] != (void *)v58)
  {
    v10 = (const void **)__p[1];
    while (*((_BYTE *)*v10 + 8) != 1)
    {
      if (++v10 == (const void **)v58)
        goto LABEL_12;
    }
  }
  if (v10 == (const void **)v58)
  {
LABEL_12:
    v13 = operator new(0x10uLL);
    v14 = v13;
    v13[4] = 1;
    *(_QWORD *)v13 = off_1E4154BD0;
    *((_BYTE *)v13 + 10) = 0;
    if ((unint64_t)v9 < *((_QWORD *)&v58 + 1))
    {
      *(_QWORD *)v9 = v13;
      v15 = (uint64_t)(v9 + 8);
LABEL_34:
      v12 = (char *)v14 + 9;
      *(_QWORD *)&v58 = v15;
      goto LABEL_35;
    }
    v16 = v9 - v8;
    v17 = (v9 - v8) >> 3;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v19 = *((_QWORD *)&v58 + 1) - (_QWORD)v8;
    if ((uint64_t)(*((_QWORD *)&v58 + 1) - (_QWORD)v8) >> 2 > v18)
      v18 = v19 >> 2;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v21 = operator new(8 * v20);
      v22 = &v21[8 * v17];
      v23 = &v21[8 * v20];
      *v22 = v14;
      v15 = (uint64_t)(v22 + 1);
      if (v8 != v9)
      {
LABEL_23:
        if ((unint64_t)(v16 - 8) < 0x58)
          goto LABEL_69;
        if ((unint64_t)(v8 - v21) < 0x20)
          goto LABEL_69;
        v24 = ((unint64_t)(v16 - 8) >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v26 = &v9[-v25];
        v22 = (_QWORD *)((char *)v22 - v25);
        v27 = &v21[8 * v17 - 16];
        v28 = v9 - 16;
        v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v30 = *(_OWORD *)v28;
          *(v27 - 1) = *((_OWORD *)v28 - 1);
          *v27 = v30;
          v27 -= 2;
          v28 -= 32;
          v29 -= 4;
        }
        while (v29);
        v9 = v26;
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_69:
          do
          {
            v31 = *((_QWORD *)v9 - 1);
            v9 -= 8;
            *--v22 = v31;
          }
          while (v9 != v8);
        }
        v8 = (char *)__p[1];
        __p[1] = v22;
        *(_QWORD *)&v58 = v15;
        *((_QWORD *)&v58 + 1) = v23;
        if (!v8)
          goto LABEL_34;
        goto LABEL_33;
      }
    }
    else
    {
      v21 = 0;
      v22 = (_QWORD *)(8 * v17);
      v23 = 0;
      *(_QWORD *)(8 * v17) = v14;
      v15 = 8 * v17 + 8;
      if (v8 != v9)
        goto LABEL_23;
    }
    __p[1] = v22;
    *(_QWORD *)&v58 = v15;
    *((_QWORD *)&v58 + 1) = v23;
    if (!v8)
      goto LABEL_34;
LABEL_33:
    operator delete(v8);
    goto LABEL_34;
  }
  if (!v11)
    __cxa_bad_cast();
  v12 = v11 + 9;
LABEL_35:
  *v12 = a2;
  v12[1] = a3;
  v33 = a1[6];
  v32 = (std::__shared_weak_count *)a1[7];
  v55 = v33;
  if (!v32 || (v34 = std::__shared_weak_count::lock(v32), (v56 = v34) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v51[0] = MEMORY[0x1E0C809B0];
  v51[1] = 1174405120;
  v51[2] = ___ZN10QMIControl20releaseClientId_syncEN3qmi11ServiceTypeEh_block_invoke_2;
  v51[3] = &__block_descriptor_tmp_29_0;
  v51[4] = v33;
  v52 = v34;
  p_shared_owners = (unint64_t *)&v34->__shared_owners_;
  do
    v36 = __ldxr(p_shared_owners);
  while (__stxr(v36 + 1, p_shared_owners));
  v53 = v59;
  v54 = v60;
  if (v60)
  {
    v37 = (unint64_t *)&v60->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  qmi::TransactionQueue::send_sync(a1 + 13, (qmi::MutableMessageBase *)__p, 25000, v51);
  v39 = v54;
  if (v54)
  {
    v40 = (unint64_t *)&v54->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v52;
  if (v52)
  {
    v43 = (unint64_t *)&v52->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = v56;
  if (v56)
  {
    v46 = (unint64_t *)&v56->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  v48 = v60;
  if (v60)
  {
    v49 = (unint64_t *)&v60->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
}

void sub_19EA0FF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  uint64_t v19;
  QMux *v20;
  uint64_t v21;

  QMux::~QMux(v20);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v19);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a19);
  QMux::~QMux((QMux *)(v21 - 96));
  _Unwind_Resume(a1);
}

void sub_19EA0FF38(_Unwind_Exception *a1)
{
  uint64_t v1;

  QMux::~QMux((QMux *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_19EA0FF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  QMux::~QMux((QMux *)(v11 - 96));
  _Unwind_Resume(a1);
}

void ___ZN10QMIControl20requestClientId_syncEN3qmi11ServiceTypeE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(QMux *__hidden);
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(unsigned __int8 *)(a1 + 64);
  v6 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = *(_QWORD *)a2;
  v18 = v6;
  v7 = *(_QWORD *)(a2 + 16);
  v19 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)&v17);
  QMIControl::handleClientIdRequest_sync(v4, v5, (qmi::MessageBase *)&v17);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&v17);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = QMux::BOOL_true_type;
  if (!v10)
    v11 = 0;
  if (v11)
  {
    v12 = *(std::__shared_weak_count **)(a1 + 56);
    v17 = v10;
    v18 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    QMux::State::notifyControlMessageError_sync(v10, *(_DWORD *)(a2 + 4));
    if (v12)
    {
      v15 = (unint64_t *)&v12->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void sub_19EA10078(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19EA1008C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_19EA100A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void QMIControl::handleClientIdRequest_sync(uint64_t a1, unsigned int a2, qmi::MessageBase *a3)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  int v11;
  const char *v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t (*v15)(QMux *__hidden);
  const char *v16;
  _QWORD *v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  char v23;
  char v24;
  const char *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t TlvValue;
  uint64_t v31;
  const char *v32;
  const char *v33;
  const char *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD v54[2];
  void (*v55)(_QWORD *, uint64_t);
  void *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unsigned __int8 *v59;
  std::__shared_weak_count *v60;
  unsigned __int8 *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD v67[5];
  uint64_t v68;
  std::__shared_weak_count *v69;
  __int16 v70;

  v68 = 0;
  v69 = 0;
  v6 = *(std::__shared_weak_count **)(a1 + 80);
  if (v6)
  {
    v7 = std::__shared_weak_count::lock(v6);
    v69 = v7;
    if (v7)
    {
      v8 = *(_QWORD *)(a1 + 72);
      v68 = v8;
      if (*((_DWORD *)a3 + 1) != 31)
        goto LABEL_12;
      goto LABEL_7;
    }
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
  if (*((_DWORD *)a3 + 1) != 31)
    goto LABEL_12;
LABEL_7:
  QMIControl::ClientIdRequests::addFailedRequestForSvcType(a1 + 128, a2);
  v67[0] = MEMORY[0x1E0C809B0];
  v67[1] = 0x40000000;
  v67[2] = ___ZN10QMIControl26handleClientIdRequest_syncEN3qmi11ServiceTypeERKN3ctl11GetClientId8ResponseE_block_invoke;
  v67[3] = &__block_descriptor_tmp_69;
  v67[4] = a1;
  if (QMIControl::startRetryTimer_sync(a1, (uint64_t)v67))
  {
    v9 = (const char *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v9 = *(const char **)v9;
    v10 = *(_QWORD *)(a1 + 64);
    v11 = *((_DWORD *)a3 + 1);
    v12 = (const char *)qmi::asString();
    (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v10 + 24))(v10, 6, "[%s] Got error 0x%x (%s), will retry client request for svc type: %d in %d msec\n", v9, v11, v12, a2, 50);
    if (v7)
      goto LABEL_76;
    return;
  }
LABEL_12:
  v65 = 0xAAAAAAAAAAAAAAAALL;
  v66 = 0xAAAAAAAAAAAAAAAALL;
  QMIControl::ClientIdRequests::popClientForSvcType(a1 + 128, a2, &v65);
  v13 = (unsigned __int8 *)v65;
  v14 = *((_DWORD *)a3 + 1);
  if (v65)
  {
    v15 = QMux::BOOL_true_type;
    if (!v8)
      v15 = 0;
    if (v14)
    {
      if (v15)
      {
        if (v14 == 31 || v14 == 5)
        {
          v16 = (const char *)(a1 + 8);
          if (*(char *)(a1 + 31) < 0)
            v16 = *(const char **)v16;
          v17 = *(_QWORD **)(a1 + 64);
          v18 = qmi::asShortString(a2);
          v19 = (const char *)qmi::asString();
          v20 = 4;
        }
        else
        {
          v16 = (const char *)(a1 + 8);
          if (*(char *)(a1 + 31) < 0)
            v16 = *(const char **)v16;
          v17 = *(_QWORD **)(a1 + 64);
          v18 = qmi::asShortString(a2);
          v19 = (const char *)qmi::asString();
          v20 = 3;
        }
        (*(void (**)(_QWORD *, uint64_t, const char *, ...))(*v17 + 8 * v20))(v17, 6, "[%s] Baseband did not allocate client for svc type: %s, error: 0x%x [%s]\n", v16, v18, v14, v19);
        v63 = v68;
        v64 = v69;
        if (v69)
        {
          p_shared_owners = (unint64_t *)&v69->__shared_owners_;
          do
            v36 = __ldxr(p_shared_owners);
          while (__stxr(v36 + 1, p_shared_owners));
        }
        v37 = (std::__shared_weak_count *)v66;
        v61 = v13;
        v62 = v66;
        if (v66)
        {
          v38 = (unint64_t *)(v66 + 8);
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        (*(void (**)(unsigned __int8 *, _QWORD))(*(_QWORD *)v13 + 24))(v13, *((unsigned int *)a3 + 1));
        if (v37)
        {
          v40 = (unint64_t *)&v37->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        v42 = v64;
        if (v64)
        {
          v43 = (unint64_t *)&v64->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          goto LABEL_68;
        }
      }
      else
      {
        v31 = *(_QWORD *)(a1 + 64);
        v32 = (const char *)qmi::asString();
        v33 = (const char *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v33 = *(const char **)v33;
        (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v31 + 24))(v31, 6, "ERROR: handleClientIdRequest: 0x%x (%s) for type: %d. QMux dead; nothing happens now [%s]\n",
          v14,
          v32,
          v13[32],
          v33);
      }
    }
    else if (v15)
    {
      v54[0] = MEMORY[0x1E0C809B0];
      v54[1] = 1174405120;
      v55 = ___ZN10QMIControl26handleClientIdRequest_syncEN3qmi11ServiceTypeERKN3ctl11GetClientId8ResponseE_block_invoke_2;
      v56 = &__block_descriptor_tmp_73;
      v57 = v8;
      v58 = v7;
      if (v7)
      {
        v26 = (unint64_t *)&v7->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v59 = v13;
      v60 = (std::__shared_weak_count *)v66;
      if (v66)
      {
        v28 = (unint64_t *)(v66 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      TlvValue = qmi::MessageBase::findTlvValue(a3);
      if (TlvValue)
      {
        v63 = TlvValue;
        v70 = tlv::parseV<ctl::tlv::AssignedId>();
        v55(v54, (uint64_t)&v70);
      }
      v45 = v60;
      if (v60)
      {
        v46 = (unint64_t *)&v60->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v42 = v58;
      if (v58)
      {
        v48 = (unint64_t *)&v58->__shared_owners_;
        do
          v44 = __ldaxr(v48);
        while (__stlxr(v44 - 1, v48));
LABEL_68:
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
    }
    else
    {
      v34 = (const char *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v34 = *(const char **)v34;
      (*(void (**)(_QWORD, uint64_t, const char *, ...))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64), 6, "handleClientIdRequest received, but QMux is dead; dropping [%s]\n",
        v34);
    }
  }
  else if (!v14)
  {
    v21 = qmi::MessageBase::findTlvValue(a3);
    if (v21)
    {
      v63 = v21;
      v22 = tlv::parseV<ctl::tlv::AssignedId>();
      v23 = v22;
      v24 = HIBYTE(v22);
      v25 = (const char *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v25 = *(const char **)v25;
      (*(void (**)(_QWORD, uint64_t, const char *, ...))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64), 6, "Stale client id request received (no client still wants it: svc=%d new_id=%d); releasing it. [%s]\n",
        v22,
        HIBYTE(v22),
        v25);
      QMIControl::releaseClientId_sync((_QWORD *)a1, v23, v24);
    }
  }
  v49 = (std::__shared_weak_count *)v66;
  if (v66)
  {
    v50 = (unint64_t *)(v66 + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v7 = v69;
  if (v69)
  {
LABEL_76:
    v52 = (unint64_t *)&v7->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_19EA10638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  uint64_t v27;

  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  QMux::~QMux((QMux *)(v27 - 88));
  _Unwind_Resume(a1);
}

void sub_19EA10664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  QMux *v27;
  uint64_t v28;
  uint64_t v29;

  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v28);
  QMux::~QMux(v27);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  QMux::~QMux((QMux *)(v29 - 88));
  _Unwind_Resume(a1);
}

void sub_19EA10690(_Unwind_Exception *a1)
{
  uint64_t v1;

  QMux::~QMux((QMux *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_19EA106A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  QMux::~QMux((QMux *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_19EA106B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  QMux::~QMux((QMux *)(v27 - 88));
  _Unwind_Resume(a1);
}

void sub_19EA106D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  QMux::~QMux((QMux *)(v1 - 88));
  _Unwind_Resume(a1);
}

void ___ZN10QMIControl20releaseClientId_syncEN3qmi11ServiceTypeEh_block_invoke_2(_QWORD *a1, uint64_t a2)
{
  int v2;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t (*v10)(QMux *__hidden);
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v2 = *(_DWORD *)(a2 + 4);
  if (v2)
  {
    v5 = *(_QWORD *)(a1[4] + 64);
    v6 = (const char *)qmi::asString();
    v7 = a1[4];
    v8 = (const char *)(v7 + 8);
    if (*(char *)(v7 + 31) < 0)
      v8 = *(const char **)v8;
    (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v5 + 24))(v5, 6, "ReleaseClientId::Response returned error 0x%x (%s) during removeClient_sync [%s]\n", v2, v6, v8);
    v9 = a1[6];
    v10 = QMux::BOOL_true_type;
    if (!v9)
      v10 = 0;
    if (v10)
    {
      v11 = (std::__shared_weak_count *)a1[7];
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      QMux::State::notifyControlMessageError_sync(v9, *(_DWORD *)(a2 + 4));
      if (v11)
      {
        v14 = (unint64_t *)&v11->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
  }
}

void sub_19EA107F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void QMIControl::sendSync_sync(QMIControl *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  dispatch_queue_t current_queue;
  qmi::TransactionQueue::State *v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  std::__shared_weak_count *v21;
  __int16 v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD v34[5];
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  _BYTE v40[32];
  uint64_t v41;
  std::__shared_weak_count *v42;

  v41 = 0;
  v42 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v42 = v3;
    if (v3)
    {
      v4 = *((_QWORD *)this + 9);
      v41 = v4;
      if (!*((_WORD *)this + 60))
      {
LABEL_6:
        if (!*((_BYTE *)this + 124))
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    else
    {
      v4 = 0;
      if (!*((_WORD *)this + 60))
        goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
    if (!*((_WORD *)this + 60))
      goto LABEL_6;
  }
  memset(v40, 170, 24);
  qmi::MessageBase::MessageBase();
  v5 = *((unsigned __int16 *)this + 60);
  current_queue = dispatch_get_current_queue();
  v11 = (qmi::TransactionQueue::State *)*((_QWORD *)this + 13);
  if (current_queue != *((dispatch_queue_t *)v11 + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x221, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v8);
    v11 = (qmi::TransactionQueue::State *)*((_QWORD *)this + 13);
  }
  qmi::TransactionQueue::State::sendTransactionResponse_sync(v11, v5, (const qmi::ResponseBase *)v40, v6, v7, (uint64_t)v8, v9);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v40);
  if (*((_BYTE *)this + 124))
LABEL_12:
    (*(void (**)(QMIControl *))(*(_QWORD *)this + 48))(this);
LABEL_13:
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v40 = v12;
  *(_OWORD *)&v40[16] = v12;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v40);
  v14 = *((_QWORD *)this + 6);
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  v38 = v14;
  if (!v13 || (v15 = std::__shared_weak_count::lock(v13), (v39 = v15) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v34[0] = MEMORY[0x1E0C809B0];
  v34[1] = 1174405120;
  v34[2] = ___ZN10QMIControl13sendSync_syncEv_block_invoke;
  v34[3] = &__block_descriptor_tmp_30;
  v34[4] = v14;
  v35 = v15;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  v36 = v4;
  v37 = v3;
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = qmi::TransactionQueue::forceSend_sync((uint64_t *)this + 13, (qmi::MutableMessageBase *)v40, 2000, v34);
  *((_WORD *)this + 60) = v20;
  if (*((_WORD *)this + 61))
  {
    if (*((unsigned __int16 *)this + 61) == v20)
      *((_BYTE *)this + 124) = 1;
    v21 = v37;
    if (!v37)
      goto LABEL_34;
LABEL_30:
    v23 = (unint64_t *)&v21->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    goto LABEL_34;
  }
  v22 = v20 + 224;
  if (((v20 + 224) & 0xFF00) != 0)
    v22 = v20 - 32;
  if ((v22 & 0xFFFE) == 0)
    v22 = 1;
  *((_WORD *)this + 61) = v22;
  v21 = v37;
  if (v37)
    goto LABEL_30;
LABEL_34:
  v25 = v35;
  if (v35)
  {
    v26 = (unint64_t *)&v35->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v39;
  if (v39)
  {
    v29 = (unint64_t *)&v39->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v40);
  v31 = v42;
  if (v42)
  {
    v32 = (unint64_t *)&v42->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_19EA10B2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  QMux::~QMux((QMux *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_19EA10B40(_Unwind_Exception *a1)
{
  uint64_t v1;

  QMux::~QMux((QMux *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_19EA10B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  uint64_t v19;
  QMux *v20;
  uint64_t v21;

  QMux::~QMux(v20);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v19);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a19);
  QMux::~QMux((QMux *)(v21 - 64));
  _Unwind_Resume(a1);
}

void sub_19EA10B88(_Unwind_Exception *a1)
{
  uint64_t v1;

  QMux::~QMux((QMux *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_19EA10B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  QMux::~QMux((QMux *)(v11 - 64));
  _Unwind_Resume(a1);
}

void sub_19EA10BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  QMux::~QMux((QMux *)(v11 - 64));
  _Unwind_Resume(a1);
}

void ___ZN10QMIControl13sendSync_syncEv_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(QMux *__hidden);
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = a1[4];
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v16 = *(_QWORD *)a2;
  v17 = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v18 = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)&v16);
  QMIControl::handleSyncResponse_sync(v4, (uint64_t)&v16);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&v16);
  v9 = a1[6];
  v10 = QMux::BOOL_true_type;
  if (!v9)
    v10 = 0;
  if (v10)
  {
    v11 = (std::__shared_weak_count *)a1[7];
    v16 = v9;
    v17 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    QMux::State::notifyControlMessageError_sync(v9, *(_DWORD *)(a2 + 4));
    if (v11)
    {
      v14 = (unint64_t *)&v11->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_19EA10CD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19EA10CEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_19EA10D00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void QMIControl::handleSyncResponse_sync(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t (*v7)(QMux *__hidden);
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  const char *v13;
  unint64_t *v14;
  unint64_t v15;
  const char *v16;
  unint64_t *v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  unint64_t *v21;
  unint64_t v22;
  const char *v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;

  v27 = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v4)
    goto LABEL_38;
  v5 = std::__shared_weak_count::lock(v4);
  v27 = v5;
  if (!v5)
    goto LABEL_38;
  v6 = *(_QWORD *)(a1 + 72);
  v7 = QMux::BOOL_true_type;
  if (!v6)
    v7 = 0;
  if (!v7 || (v8 = *(_DWORD *)(a2 + 4), v8 == 65539))
  {
LABEL_38:
    v5 = v27;
    if (!v27)
      return;
    goto LABEL_39;
  }
  if (v8 != 65537)
  {
    if (!v8)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      QMux::State::notifySyncSuccess_sync((QMux::State *)v6);
      v11 = (unint64_t *)&v5->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(a1 + 64);
    v19 = (const char *)qmi::asString();
    v20 = (const char *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v20 = *(const char **)v20;
    (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v18 + 24))(v18, 6, "Unable to synchronize with baseband QMI: error=%d (%s); retrying. [%s]\n",
      v8,
      v19,
      v20);
    v21 = (unint64_t *)&v5->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    v23 = (const char *)*(unsigned int *)(v6 + 216);
    if ((_DWORD)v23 != 1)
    {
      if ((_DWORD)v23 == 5)
        goto LABEL_35;
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x2D2, "fMainState", "==", "kSync", v23, (const void *)1);
    }
    QMIControl::sendSync_sync(*(QMIControl **)(v6 + 64));
LABEL_35:
    v24 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldaxr(v24);
    while (__stlxr(v12 - 1, v24));
    goto LABEL_37;
  }
  v13 = (const char *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    v13 = *(const char **)v13;
  (*(void (**)(_QWORD, uint64_t, const char *, ...))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64), 6, "Timeout waiting for response to QMI_CTL_SYNC; retrying. [%s]\n",
    v13);
  v14 = (unint64_t *)&v5->__shared_owners_;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  v16 = (const char *)*(unsigned int *)(v6 + 216);
  if ((_DWORD)v16 != 1)
  {
    if ((_DWORD)v16 == 5)
      goto LABEL_24;
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMux.cpp", (const char *)0x2D2, "fMainState", "==", "kSync", v16, (const void *)1);
  }
  QMIControl::sendSync_sync(*(QMIControl **)(v6 + 64));
LABEL_24:
  v17 = (unint64_t *)&v5->__shared_owners_;
  do
    v12 = __ldaxr(v17);
  while (__stlxr(v12 - 1, v17));
LABEL_37:
  if (v12)
    goto LABEL_38;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
LABEL_39:
  v25 = (unint64_t *)&v5->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_19EA10FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  QMux::~QMux((QMux *)va1);
  _Unwind_Resume(a1);
}

void sub_19EA11008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  QMux::~QMux((QMux *)va);
  _Unwind_Resume(a1);
}

void QMIControl::configurePowerMode_sync(uint64_t a1, char *a2, unsigned int a3, char *a4)
{
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t **v14;
  char *v15;
  unsigned int v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  char *v23;
  BOOL v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD **v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t **v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  unsigned int v37;
  uint64_t *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *i;
  uint64_t ***v47;
  uint64_t *v48;
  uint64_t *v49;
  unsigned int v50;
  uint64_t **v51;
  uint64_t **v52;
  uint64_t **v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  const char *v57;
  __int128 v58;
  uint64_t v59;
  const void **v60;
  __int128 v61;
  uint64_t v62;
  const void **v63;
  void *v64;
  char *v65;
  char *v66;
  char *v67;
  const void **v68;
  void *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  size_t v73;
  char *v74;
  char *v75;
  char *v76;
  _BYTE *v77;
  _BYTE *v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  void *v90;
  char *v91;
  char *v92;
  char *v93;
  const void **v94;
  void *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  size_t v99;
  char *v100;
  char *v101;
  char *v102;
  _BYTE *v103;
  _BYTE *v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *p_shared_owners;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  int64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _BYTE *v119;
  _QWORD *v120;
  char *v121;
  uint64_t v122;
  int64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  _BYTE *v128;
  _QWORD *v129;
  char *v130;
  uint64_t v131;
  _QWORD *v132;
  unint64_t v133;
  uint64_t v134;
  char *v135;
  _OWORD *v136;
  char *v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  char *v143;
  _OWORD *v144;
  char *v145;
  uint64_t v146;
  __int128 v147;
  uint64_t v148;
  _QWORD *v149;
  _QWORD v150[5];
  std::__shared_weak_count *v151;
  _QWORD v152[2];
  uint64_t (*v153)(uint64_t, uint64_t);
  void *v154;
  char v155;
  _QWORD v156[5];
  std::__shared_weak_count *v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  _QWORD v160[2];
  uint64_t (*v161)(uint64_t, uint64_t);
  void *v162;
  char v163;
  __int128 v164;
  __int128 v165;

  if ((_DWORD)a2 != 1)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIControl.cpp", (const char *)0x163, "profile", "==", "qmi::kQMIPower_Low", (const char *)a2, (const void *)1);
  v8 = a1 + 208;
  v7 = *(unsigned __int8 **)(a1 + 208);
  if (v7)
  {
    v9 = a1 + 208;
    v10 = *(_QWORD *)(a1 + 208);
    do
    {
      v11 = *(unsigned __int8 *)(v10 + 32);
      v12 = v11 >= a3;
      if (v11 >= a3)
        v13 = (uint64_t *)v10;
      else
        v13 = (uint64_t *)(v10 + 8);
      if (v12)
        v9 = v10;
      v10 = *v13;
    }
    while (*v13);
    if (v9 != v8 && *(unsigned __int8 *)(v9 + 32) <= a3)
      goto LABEL_19;
  }
  v9 = a1 + 208;
  v14 = (uint64_t **)(a1 + 208);
  v15 = (char *)(a1 + 208);
  if (v7)
  {
LABEL_19:
    while (1)
    {
      while (1)
      {
        v15 = (char *)v7;
        v16 = v7[32];
        if (v16 <= a3)
          break;
        v7 = *(unsigned __int8 **)v15;
        v14 = (uint64_t **)v15;
        if (!*(_QWORD *)v15)
          goto LABEL_22;
      }
      if (v16 >= a3)
        break;
      v7 = (unsigned __int8 *)*((_QWORD *)v15 + 1);
      if (!v7)
      {
        v14 = (uint64_t **)(v15 + 8);
        goto LABEL_22;
      }
    }
  }
  else
  {
LABEL_22:
    v17 = v15;
    v15 = (char *)operator new(0x40uLL);
    v15[32] = a3;
    *((_QWORD *)v15 + 7) = 0;
    *((_QWORD *)v15 + 6) = 0;
    *((_QWORD *)v15 + 5) = v15 + 48;
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 2) = v17;
    *v14 = (uint64_t *)v15;
    v18 = **(_QWORD **)(a1 + 200);
    v19 = (uint64_t *)v15;
    if (v18)
    {
      *(_QWORD *)(a1 + 200) = v18;
      v19 = *v14;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 208), v19);
    ++*(_QWORD *)(a1 + 216);
  }
  if (v9 != v8 && *((_QWORD *)v15 + 7) == *((_QWORD *)a4 + 2))
  {
    v20 = (char *)*((_QWORD *)v15 + 5);
    if (v20 == v15 + 48)
      return;
    v21 = *(_QWORD **)a4;
    while (*((unsigned __int16 *)v20 + 13) == *((unsigned __int16 *)v21 + 13))
    {
      v22 = (char *)*((_QWORD *)v20 + 1);
      v23 = v20;
      if (v22)
      {
        do
        {
          v20 = v22;
          v22 = *(char **)v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v20 = (char *)*((_QWORD *)v23 + 2);
          v24 = *(_QWORD *)v20 == (_QWORD)v23;
          v23 = v20;
        }
        while (!v24);
      }
      v25 = (_QWORD *)v21[1];
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (_QWORD *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (_QWORD *)v21[2];
          v24 = *v26 == (_QWORD)v21;
          v21 = v26;
        }
        while (!v24);
      }
      v21 = v26;
      if (v20 == v15 + 48)
        return;
    }
  }
  v149 = (_QWORD *)a1;
  v27 = (_QWORD **)(v15 + 40);
  if (v15 + 40 != a4)
  {
    v29 = a4 + 8;
    v28 = *(_QWORD **)a4;
    if (!*((_QWORD *)v15 + 7))
      goto LABEL_83;
    v31 = (uint64_t **)(v15 + 48);
    v30 = *((_QWORD *)v15 + 6);
    v32 = *((_QWORD *)v15 + 5);
    *((_QWORD *)v15 + 5) = v15 + 48;
    *(_QWORD *)(v30 + 16) = 0;
    *((_QWORD *)v15 + 6) = 0;
    *((_QWORD *)v15 + 7) = 0;
    v33 = *(_QWORD *)(v32 + 8) ? *(_QWORD **)(v32 + 8) : (_QWORD *)v32;
    if (v33)
    {
      v34 = (_QWORD *)v33[2];
      if (v34)
      {
        v35 = (_QWORD *)*v34;
        if ((_QWORD *)*v34 == v33)
        {
          *v34 = 0;
          while (1)
          {
            v132 = (_QWORD *)v34[1];
            if (!v132)
              break;
            do
            {
              v34 = v132;
              v132 = (_QWORD *)*v132;
            }
            while (v132);
          }
        }
        else
        {
          for (v34[1] = 0; v35; v35 = (_QWORD *)v34[1])
          {
            do
            {
              v34 = v35;
              v35 = (_QWORD *)*v35;
            }
            while (v35);
          }
        }
      }
      if (v28 != v29)
      {
        while (1)
        {
          v36 = v34;
          v37 = *((unsigned __int16 *)v28 + 13);
          *((_WORD *)v33 + 13) = v37;
          v38 = *v31;
          v39 = v15 + 48;
          v40 = v15 + 48;
          if (*v31)
            break;
LABEL_59:
          *v33 = 0;
          v33[1] = 0;
          v33[2] = v39;
          *v40 = v33;
          v41 = (_QWORD *)**v27;
          if (v41)
            goto LABEL_60;
LABEL_61:
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v15 + 6), v33);
          ++*((_QWORD *)v15 + 7);
          if (v34)
          {
            v34 = (_QWORD *)v34[2];
            if (v34)
            {
              v44 = (_QWORD *)*v34;
              if ((_QWORD *)*v34 == v36)
              {
                *v34 = 0;
                while (1)
                {
                  v45 = (_QWORD *)v34[1];
                  if (!v45)
                    break;
                  do
                  {
                    v34 = v45;
                    v45 = (_QWORD *)*v45;
                  }
                  while (v45);
                }
              }
              else
              {
                for (v34[1] = 0; v44; v44 = (_QWORD *)v34[1])
                {
                  do
                  {
                    v34 = v44;
                    v44 = (_QWORD *)*v44;
                  }
                  while (v44);
                }
              }
            }
          }
          else
          {
            v34 = 0;
          }
          v42 = (_QWORD *)v28[1];
          if (v42)
          {
            do
            {
              v43 = v42;
              v42 = (_QWORD *)*v42;
            }
            while (v42);
          }
          else
          {
            do
            {
              v43 = (_QWORD *)v28[2];
              v24 = *v43 == (_QWORD)v28;
              v28 = v43;
            }
            while (!v24);
          }
          if (v36)
          {
            v33 = v36;
            v28 = v43;
            if (v43 != v29)
              continue;
          }
          goto LABEL_85;
        }
        do
        {
          while (1)
          {
            v39 = v38;
            if (v37 >= *((unsigned __int16 *)v38 + 13))
              break;
            v38 = (uint64_t *)*v38;
            v40 = v39;
            if (!*v39)
              goto LABEL_59;
          }
          v38 = (uint64_t *)v38[1];
        }
        while (v38);
        v40 = v39 + 1;
        *v33 = 0;
        v33[1] = 0;
        v33[2] = v39;
        v39[1] = v33;
        v41 = (_QWORD *)**v27;
        if (!v41)
          goto LABEL_61;
LABEL_60:
        *v27 = v41;
        v33 = (_QWORD *)*v40;
        goto LABEL_61;
      }
      v43 = v28;
      v36 = v33;
LABEL_85:
      std::__tree<unsigned short>::destroy((uint64_t)(v15 + 40), v36);
      if (v34)
      {
        for (i = (_QWORD *)v34[2]; i; i = (_QWORD *)i[2])
          v34 = i;
        std::__tree<unsigned short>::destroy((uint64_t)(v15 + 40), v34);
      }
    }
    else
    {
LABEL_83:
      v43 = v28;
    }
    if (v43 != v29)
    {
      v47 = (uint64_t ***)(v15 + 48);
      while (1)
      {
        v48 = (uint64_t *)operator new(0x20uLL);
        v49 = v48;
        v50 = *((unsigned __int16 *)v43 + 13);
        *((_WORD *)v48 + 13) = v50;
        v51 = *v47;
        v52 = (uint64_t **)(v15 + 48);
        v53 = (uint64_t **)(v15 + 48);
        if (*v47)
          break;
LABEL_97:
        *v48 = 0;
        v48[1] = 0;
        v48[2] = (uint64_t)v52;
        *v53 = v48;
        v54 = (_QWORD *)**v27;
        if (v54)
          goto LABEL_98;
LABEL_99:
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v15 + 6), v49);
        ++*((_QWORD *)v15 + 7);
        v55 = (_QWORD *)v43[1];
        if (v55)
        {
          do
          {
            v56 = v55;
            v55 = (_QWORD *)*v55;
          }
          while (v55);
        }
        else
        {
          do
          {
            v56 = (_QWORD *)v43[2];
            v24 = *v56 == (_QWORD)v43;
            v43 = v56;
          }
          while (!v24);
        }
        v43 = v56;
        if (v56 == v29)
          goto LABEL_107;
      }
      do
      {
        while (1)
        {
          v52 = v51;
          if (v50 >= *((unsigned __int16 *)v51 + 13))
            break;
          v51 = (uint64_t **)*v51;
          v53 = v52;
          if (!*v52)
            goto LABEL_97;
        }
        v51 = (uint64_t **)v51[1];
      }
      while (v51);
      v53 = v52 + 1;
      *v48 = 0;
      v48[1] = 0;
      v48[2] = (uint64_t)v52;
      v52[1] = v48;
      v54 = (_QWORD *)**v27;
      if (!v54)
        goto LABEL_99;
LABEL_98:
      *v27 = v54;
      v49 = *v53;
      goto LABEL_99;
    }
  }
LABEL_107:
  v57 = (const char *)*((_QWORD *)a4 + 2);
  if ((unint64_t)v57 > 0xA)
  {
    if ((unint64_t)v57 > 0xFF)
    {
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIControl.cpp", (const char *)0x19D, "indSet.size()", "<=", "255", v57, (const void *)0xFF);
      return;
    }
    *(_QWORD *)&v61 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v61 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v164 = v61;
    v165 = v61;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v164);
    v62 = MEMORY[0x1E0C809B0];
    v152[0] = MEMORY[0x1E0C809B0];
    v152[1] = 0x40000000;
    v153 = ___ZN10QMIControl23configurePowerMode_syncEN3qmi12PowerProfileENS0_11ServiceTypeERKNSt3__13setItNS3_4lessItEENS3_9allocatorItEEEE_block_invoke_43;
    v154 = &__block_descriptor_tmp_44_0;
    v155 = a3;
    v63 = (const void **)*((_QWORD *)&v164 + 1);
    if (*((_QWORD *)&v164 + 1) != (_QWORD)v165)
    {
      while (*((_BYTE *)*v63 + 8) != 1)
      {
        if (++v63 == (const void **)v165)
          goto LABEL_157;
      }
    }
    if (v63 == (const void **)v165)
    {
LABEL_157:
      v91 = qmi::MutableMessageBase::createTLV<ctl::tlv::PowerSaveDescriptor>(&v164);
      v153((uint64_t)v152, (uint64_t)v91);
    }
    else
    {
      if (!v90)
        goto LABEL_244;
      ___ZN10QMIControl23configurePowerMode_syncEN3qmi12PowerProfileENS0_11ServiceTypeERKNSt3__13setItNS3_4lessItEENS3_9allocatorItEEEE_block_invoke_43((uint64_t)v152, (uint64_t)v90 + 12);
    }
    v93 = (char *)*((_QWORD *)&v164 + 1);
    v92 = (char *)v165;
    v94 = (const void **)*((_QWORD *)&v164 + 1);
    if (*((_QWORD *)&v164 + 1) != (_QWORD)v165)
    {
      v94 = (const void **)*((_QWORD *)&v164 + 1);
      while (*((_BYTE *)*v94 + 8) != 16)
      {
        if (++v94 == (const void **)v165)
          goto LABEL_174;
      }
    }
    if (v94 != (const void **)v165)
    {
      if (v95)
      {
        v96 = (uint64_t)v95 + 16;
        v97 = (char *)*((_QWORD *)v15 + 5);
        v98 = v15 + 48;
        if (v97 != v15 + 48)
          goto LABEL_166;
        goto LABEL_176;
      }
LABEL_244:
      __cxa_bad_cast();
    }
LABEL_174:
    v103 = operator new(0x28uLL);
    v104 = v103;
    v103[8] = 16;
    *(_QWORD *)v103 = &off_1E4154CC0;
    *((_QWORD *)v103 + 2) = 0;
    v96 = (uint64_t)(v103 + 16);
    *((_QWORD *)v103 + 3) = 0;
    *((_QWORD *)v103 + 4) = 0;
    if ((unint64_t)v92 < *((_QWORD *)&v165 + 1))
    {
      *(_QWORD *)v92 = v103;
      *(_QWORD *)&v165 = v92 + 8;
      v97 = (char *)*((_QWORD *)v15 + 5);
      v98 = v15 + 48;
      if (v97 != v15 + 48)
      {
LABEL_166:
        v99 = 0;
        v100 = v97;
        do
        {
          v101 = (char *)*((_QWORD *)v100 + 1);
          if (v101)
          {
            do
            {
              v102 = v101;
              v101 = *(char **)v101;
            }
            while (v101);
          }
          else
          {
            do
            {
              v102 = (char *)*((_QWORD *)v100 + 2);
              v24 = *(_QWORD *)v102 == (_QWORD)v100;
              v100 = v102;
            }
            while (!v24);
          }
          ++v99;
          v100 = v102;
        }
        while (v102 != v98);
        goto LABEL_177;
      }
LABEL_176:
      v99 = 0;
LABEL_177:
      std::vector<unsigned short>::__assign_with_size[abi:ne180100]<std::__tree_const_iterator<unsigned short,std::__tree_node<unsigned short,void *> *,long>,std::__tree_const_iterator<unsigned short,std::__tree_node<unsigned short,void *> *,long>>(v96, v97, v98, v99);
      v106 = v149[6];
      v105 = (std::__shared_weak_count *)v149[7];
      v158 = v106;
      if (!v105 || (v107 = std::__shared_weak_count::lock(v105), (v159 = v107) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v150[0] = v62;
      v150[1] = 1174405120;
      v150[2] = ___ZN10QMIControl23configurePowerMode_syncEN3qmi12PowerProfileENS0_11ServiceTypeERKNSt3__13setItNS3_4lessItEENS3_9allocatorItEEEE_block_invoke_3_47;
      v150[3] = &__block_descriptor_tmp_48;
      v150[4] = v106;
      v151 = v107;
      p_shared_owners = (unint64_t *)&v107->__shared_owners_;
      do
        v109 = __ldxr(p_shared_owners);
      while (__stxr(v109 + 1, p_shared_owners));
      qmi::TransactionQueue::forceSend_sync(v149 + 13, (qmi::MutableMessageBase *)&v164, 25000, v150);
      v110 = v151;
      if (v151)
      {
        v111 = (unint64_t *)&v151->__shared_owners_;
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
      }
      v87 = v159;
      if (!v159)
        goto LABEL_191;
      v113 = (unint64_t *)&v159->__shared_owners_;
      do
        v89 = __ldaxr(v113);
      while (__stlxr(v89 - 1, v113));
      goto LABEL_189;
    }
    v123 = v92 - v93;
    v124 = (v92 - v93) >> 3;
    v125 = v124 + 1;
    if ((unint64_t)(v124 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v126 = *((_QWORD *)&v165 + 1) - (_QWORD)v93;
    if ((uint64_t)(*((_QWORD *)&v165 + 1) - (_QWORD)v93) >> 2 > v125)
      v125 = v126 >> 2;
    if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF8)
      v127 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v127 = v125;
    if (v127)
    {
      if (v127 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v128 = operator new(8 * v127);
      v129 = &v128[8 * v124];
      v130 = &v128[8 * v127];
      *v129 = v104;
      v131 = (uint64_t)(v129 + 1);
      if (v93 == v92)
      {
LABEL_237:
        *((_QWORD *)&v164 + 1) = v129;
        *(_QWORD *)&v165 = v131;
        *((_QWORD *)&v165 + 1) = v130;
        if (v93)
          operator delete(v93);
        *(_QWORD *)&v165 = v131;
        v97 = (char *)*((_QWORD *)v15 + 5);
        v98 = v15 + 48;
        if (v97 != v15 + 48)
          goto LABEL_166;
        goto LABEL_176;
      }
    }
    else
    {
      v128 = 0;
      v129 = (_QWORD *)(8 * v124);
      v130 = 0;
      *(_QWORD *)(8 * v124) = v104;
      v131 = 8 * v124 + 8;
      if (v93 == v92)
        goto LABEL_237;
    }
    if ((unint64_t)(v123 - 8) < 0x58)
      goto LABEL_251;
    if ((unint64_t)(v93 - v128) < 0x20)
      goto LABEL_251;
    v141 = ((unint64_t)(v123 - 8) >> 3) + 1;
    v142 = 8 * (v141 & 0x3FFFFFFFFFFFFFFCLL);
    v143 = &v92[-v142];
    v129 = (_QWORD *)((char *)v129 - v142);
    v144 = &v128[8 * v124 - 16];
    v145 = v92 - 16;
    v146 = v141 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v147 = *(_OWORD *)v145;
      *(v144 - 1) = *((_OWORD *)v145 - 1);
      *v144 = v147;
      v144 -= 2;
      v145 -= 32;
      v146 -= 4;
    }
    while (v146);
    v92 = v143;
    if (v141 != (v141 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_251:
      do
      {
        v148 = *((_QWORD *)v92 - 1);
        v92 -= 8;
        *--v129 = v148;
      }
      while (v92 != v93);
    }
    v93 = (char *)*((_QWORD *)&v164 + 1);
    goto LABEL_237;
  }
  *(_QWORD *)&v58 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v58 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v164 = v58;
  v165 = v58;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v164);
  v59 = MEMORY[0x1E0C809B0];
  v160[0] = MEMORY[0x1E0C809B0];
  v160[1] = 0x40000000;
  v161 = ___ZN10QMIControl23configurePowerMode_syncEN3qmi12PowerProfileENS0_11ServiceTypeERKNSt3__13setItNS3_4lessItEENS3_9allocatorItEEEE_block_invoke;
  v162 = &__block_descriptor_tmp_37_0;
  v163 = a3;
  v60 = (const void **)*((_QWORD *)&v164 + 1);
  if (*((_QWORD *)&v164 + 1) != (_QWORD)v165)
  {
    while (*((_BYTE *)*v60 + 8) != 1)
    {
      if (++v60 == (const void **)v165)
        goto LABEL_120;
    }
  }
  if (v60 == (const void **)v165)
  {
LABEL_120:
    v65 = qmi::MutableMessageBase::createTLV<ctl::tlv::PowerSaveDescriptor>(&v164);
    v161((uint64_t)v160, (uint64_t)v65);
  }
  else
  {
    if (!v64)
      goto LABEL_243;
    ___ZN10QMIControl23configurePowerMode_syncEN3qmi12PowerProfileENS0_11ServiceTypeERKNSt3__13setItNS3_4lessItEENS3_9allocatorItEEEE_block_invoke((uint64_t)v160, (uint64_t)v64 + 12);
  }
  v67 = (char *)*((_QWORD *)&v164 + 1);
  v66 = (char *)v165;
  v68 = (const void **)*((_QWORD *)&v164 + 1);
  if (*((_QWORD *)&v164 + 1) != (_QWORD)v165)
  {
    v68 = (const void **)*((_QWORD *)&v164 + 1);
    while (*((_BYTE *)*v68 + 8) != 17)
    {
      if (++v68 == (const void **)v165)
        goto LABEL_137;
    }
  }
  if (v68 != (const void **)v165)
  {
    if (v69)
    {
      v70 = (uint64_t)v69 + 16;
      v71 = (char *)*((_QWORD *)v15 + 5);
      v72 = v15 + 48;
      if (v71 != v15 + 48)
        goto LABEL_129;
      goto LABEL_139;
    }
LABEL_243:
    __cxa_bad_cast();
  }
LABEL_137:
  v77 = operator new(0x28uLL);
  v78 = v77;
  v77[8] = 17;
  *(_QWORD *)v77 = &off_1E4154C70;
  *((_QWORD *)v77 + 2) = 0;
  v70 = (uint64_t)(v77 + 16);
  *((_QWORD *)v77 + 3) = 0;
  *((_QWORD *)v77 + 4) = 0;
  if ((unint64_t)v66 >= *((_QWORD *)&v165 + 1))
  {
    v114 = v66 - v67;
    v115 = (v66 - v67) >> 3;
    v116 = v115 + 1;
    if ((unint64_t)(v115 + 1) >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v117 = *((_QWORD *)&v165 + 1) - (_QWORD)v67;
    if ((uint64_t)(*((_QWORD *)&v165 + 1) - (_QWORD)v67) >> 2 > v116)
      v116 = v117 >> 2;
    if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFF8)
      v118 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v118 = v116;
    if (v118)
    {
      if (v118 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v119 = operator new(8 * v118);
      v120 = &v119[8 * v115];
      v121 = &v119[8 * v118];
      *v120 = v78;
      v122 = (uint64_t)(v120 + 1);
      if (v67 == v66)
      {
LABEL_225:
        *((_QWORD *)&v164 + 1) = v120;
        *(_QWORD *)&v165 = v122;
        *((_QWORD *)&v165 + 1) = v121;
        if (v67)
          operator delete(v67);
        *(_QWORD *)&v165 = v122;
        v71 = (char *)*((_QWORD *)v15 + 5);
        v72 = v15 + 48;
        if (v71 != v15 + 48)
          goto LABEL_129;
        goto LABEL_139;
      }
    }
    else
    {
      v119 = 0;
      v120 = (_QWORD *)(8 * v115);
      v121 = 0;
      *(_QWORD *)(8 * v115) = v78;
      v122 = 8 * v115 + 8;
      if (v67 == v66)
        goto LABEL_225;
    }
    if ((unint64_t)(v114 - 8) < 0x58)
      goto LABEL_252;
    if ((unint64_t)(v67 - v119) < 0x20)
      goto LABEL_252;
    v133 = ((unint64_t)(v114 - 8) >> 3) + 1;
    v134 = 8 * (v133 & 0x3FFFFFFFFFFFFFFCLL);
    v135 = &v66[-v134];
    v120 = (_QWORD *)((char *)v120 - v134);
    v136 = &v119[8 * v115 - 16];
    v137 = v66 - 16;
    v138 = v133 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v139 = *(_OWORD *)v137;
      *(v136 - 1) = *((_OWORD *)v137 - 1);
      *v136 = v139;
      v136 -= 2;
      v137 -= 32;
      v138 -= 4;
    }
    while (v138);
    v66 = v135;
    if (v133 != (v133 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_252:
      do
      {
        v140 = *((_QWORD *)v66 - 1);
        v66 -= 8;
        *--v120 = v140;
      }
      while (v66 != v67);
    }
    v67 = (char *)*((_QWORD *)&v164 + 1);
    goto LABEL_225;
  }
  *(_QWORD *)v66 = v77;
  *(_QWORD *)&v165 = v66 + 8;
  v71 = (char *)*((_QWORD *)v15 + 5);
  v72 = v15 + 48;
  if (v71 != v15 + 48)
  {
LABEL_129:
    v73 = 0;
    v74 = v71;
    do
    {
      v75 = (char *)*((_QWORD *)v74 + 1);
      if (v75)
      {
        do
        {
          v76 = v75;
          v75 = *(char **)v75;
        }
        while (v75);
      }
      else
      {
        do
        {
          v76 = (char *)*((_QWORD *)v74 + 2);
          v24 = *(_QWORD *)v76 == (_QWORD)v74;
          v74 = v76;
        }
        while (!v24);
      }
      ++v73;
      v74 = v76;
    }
    while (v76 != v72);
    goto LABEL_140;
  }
LABEL_139:
  v73 = 0;
LABEL_140:
  std::vector<unsigned short>::__assign_with_size[abi:ne180100]<std::__tree_const_iterator<unsigned short,std::__tree_node<unsigned short,void *> *,long>,std::__tree_const_iterator<unsigned short,std::__tree_node<unsigned short,void *> *,long>>(v70, v71, v72, v73);
  v80 = v149[6];
  v79 = (std::__shared_weak_count *)v149[7];
  v158 = v80;
  if (!v79 || (v81 = std::__shared_weak_count::lock(v79), (v159 = v81) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v156[0] = v59;
  v156[1] = 1174405120;
  v156[2] = ___ZN10QMIControl23configurePowerMode_syncEN3qmi12PowerProfileENS0_11ServiceTypeERKNSt3__13setItNS3_4lessItEENS3_9allocatorItEEEE_block_invoke_3;
  v156[3] = &__block_descriptor_tmp_41_0;
  v156[4] = v80;
  v157 = v81;
  v82 = (unint64_t *)&v81->__shared_owners_;
  do
    v83 = __ldxr(v82);
  while (__stxr(v83 + 1, v82));
  qmi::TransactionQueue::forceSend_sync(v149 + 13, (qmi::MutableMessageBase *)&v164, 25000, v156);
  v84 = v157;
  if (v157)
  {
    v85 = (unint64_t *)&v157->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = v159;
  if (!v159)
    goto LABEL_191;
  v88 = (unint64_t *)&v159->__shared_owners_;
  do
    v89 = __ldaxr(v88);
  while (__stlxr(v89 - 1, v88));
LABEL_189:
  if (!v89)
  {
    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
    std::__shared_weak_count::__release_weak(v87);
  }
LABEL_191:
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v164);
}

void sub_19EA11D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  uint64_t v29;

  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v28);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v29 - 128));
  _Unwind_Resume(a1);
}

void sub_19EA11DC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_19EA11DD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_19EA11DEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_19EA11E00(_Unwind_Exception *a1)
{
  uint64_t v1;

  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v1 - 128));
  _Unwind_Resume(a1);
}

uint64_t ___ZN10QMIControl23configurePowerMode_syncEN3qmi12PowerProfileENS0_11ServiceTypeERKNSt3__13setItNS3_4lessItEENS3_9allocatorItEEEE_block_invoke(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = 1;
  *(_BYTE *)(a2 + 4) = *(_BYTE *)(result + 32);
  return result;
}

void ___ZN10QMIControl23configurePowerMode_syncEN3qmi12PowerProfileENS0_11ServiceTypeERKNSt3__13setItNS3_4lessItEENS3_9allocatorItEEEE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  const char *v2;

  if (*(_DWORD *)(a2 + 4))
  {
    if ((qmi::isInternalError() & 1) == 0)
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIControl.cpp", (const char *)0x182, "isInternalError(response.getError())", "is not", "true", v2);
  }
}

uint64_t __copy_helper_block_e8_32c38_ZTSNSt3__110shared_ptrI10QMIControlEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c38_ZTSNSt3__110shared_ptrI10QMIControlEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t ___ZN10QMIControl23configurePowerMode_syncEN3qmi12PowerProfileENS0_11ServiceTypeERKNSt3__13setItNS3_4lessItEENS3_9allocatorItEEEE_block_invoke_43(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = 1;
  *(_BYTE *)(a2 + 4) = *(_BYTE *)(result + 32);
  return result;
}

void ___ZN10QMIControl23configurePowerMode_syncEN3qmi12PowerProfileENS0_11ServiceTypeERKNSt3__13setItNS3_4lessItEENS3_9allocatorItEEEE_block_invoke_3_47(uint64_t a1, uint64_t a2)
{
  const char *v2;

  if (*(_DWORD *)(a2 + 4))
  {
    if ((qmi::isInternalError() & 1) == 0)
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIControl.cpp", (const char *)0x198, "isInternalError(response.getError())", "is not", "true", v2);
  }
}

void ___ZN10QMIControl17setPowerMode_syncEN3qmi12PowerProfileE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  const char *v2;

  if (*(_DWORD *)(a2 + 4))
  {
    if ((qmi::isInternalError() & 1) == 0)
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIControl.cpp", (const char *)0x1BA, "isInternalError(response.getError())", "is not", "true", v2);
  }
}

void QMIControl::enterPowerMode(uint64_t a1, NSObject *a2, int a3)
{
  const char *v5;
  dispatch_queue_t current_queue;
  qmi::TransactionQueue::State *v7;

  if (a3)
  {
    current_queue = dispatch_get_current_queue();
    v7 = *(qmi::TransactionQueue::State **)(a1 + 104);
    if (current_queue != *((dispatch_queue_t *)v7 + 2))
    {
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x232, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v5);
      v7 = *(qmi::TransactionQueue::State **)(a1 + 104);
    }
    qmi::TransactionQueue::State::stall_sync(v7, a2);
  }
  else
  {
    qmi::TransactionQueue::State::start_sync(*(qmi::TransactionQueue::State **)(a1 + 104));
  }
}

void QMIControl::enterPowerMode_sync(uint64_t a1, NSObject *a2, int a3)
{
  const char *v5;
  dispatch_queue_t current_queue;
  qmi::TransactionQueue::State *v7;

  if (a3)
  {
    current_queue = dispatch_get_current_queue();
    v7 = *(qmi::TransactionQueue::State **)(a1 + 104);
    if (current_queue != *((dispatch_queue_t *)v7 + 2))
    {
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x232, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v5);
      v7 = *(qmi::TransactionQueue::State **)(a1 + 104);
    }
    qmi::TransactionQueue::State::stall_sync(v7, a2);
  }
  else
  {
    qmi::TransactionQueue::State::start_sync(*(qmi::TransactionQueue::State **)(a1 + 104));
  }
}

void QMIControl::stall_sync(QMIControl *this, NSObject *a2)
{
  const char *v4;
  dispatch_queue_t current_queue;
  qmi::TransactionQueue::State *v6;

  current_queue = dispatch_get_current_queue();
  v6 = (qmi::TransactionQueue::State *)*((_QWORD *)this + 13);
  if (current_queue != *((dispatch_queue_t *)v6 + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x232, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v4);
    v6 = (qmi::TransactionQueue::State *)*((_QWORD *)this + 13);
  }
  qmi::TransactionQueue::State::stall_sync(v6, a2);
}

void QMIControl::appendPowerModeSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const char *a7)
{
  _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMIControl.cpp", (const char *)0x1E4, "false", "is not", "true", "QMIControl::appendPowerModeSet shouldnt have been called! It doesnt make any sense", a7);
}

void QMIControl::handleReceivedData(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  dispatch_queue_t current_queue;
  qmi::TransactionQueue::State *v11;
  _QWORD v12[3];

  memset(v12, 170, sizeof(v12));
  MEMORY[0x1A1AEB03C](v12, a3, a4);
  current_queue = dispatch_get_current_queue();
  v11 = *(qmi::TransactionQueue::State **)(a1 + 104);
  if (current_queue != *((dispatch_queue_t *)v11 + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x221, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v8);
    v11 = *(qmi::TransactionQueue::State **)(a1 + 104);
  }
  qmi::TransactionQueue::State::sendTransactionResponse_sync(v11, a2, (const qmi::ResponseBase *)v12, v6, v7, (uint64_t)v8, v9);
  if (*(unsigned __int16 *)(a1 + 120) == a2)
    *(_WORD *)(a1 + 120) = 0;
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v12);
}

void sub_19EA121D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void QMIControl::handleReceivedData_sync(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  dispatch_queue_t current_queue;
  qmi::TransactionQueue::State *v11;
  _QWORD v12[3];

  memset(v12, 170, sizeof(v12));
  MEMORY[0x1A1AEB03C](v12, a3, a4);
  current_queue = dispatch_get_current_queue();
  v11 = *(qmi::TransactionQueue::State **)(a1 + 104);
  if (current_queue != *((dispatch_queue_t *)v11 + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x221, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v8);
    v11 = *(qmi::TransactionQueue::State **)(a1 + 104);
  }
  qmi::TransactionQueue::State::sendTransactionResponse_sync(v11, a2, (const qmi::ResponseBase *)v12, v6, v7, (uint64_t)v8, v9);
  if (*(unsigned __int16 *)(a1 + 120) == a2)
    *(_WORD *)(a1 + 120) = 0;
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v12);
}

void sub_19EA12298(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void QMIControl::handleInd_sync(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = (const char *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    v3 = *(const char **)v3;
  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v2 + 24))(v2, 6, "Received ctl::Sync::Indication [%s]\n", v3);
  v9 = 0;
  v10 = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 80);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v10 = v5;
    if (v5)
    {
      v9 = *(_QWORD *)(a1 + 72);
      if (v9 ? QMux::BOOL_true_type : 0)
        QMux::restart((QMux *)&v9);
    }
  }
  else
  {
    v5 = 0;
  }
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void QMIControl::handleInd_sync(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v4;
  const char *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(QMux *__hidden);
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t TlvValue;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD v19[2];
  void (*v20)(uint64_t, unsigned __int8 *);
  void *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int16 v26;
  uint64_t v27;

  v4 = *(_QWORD *)(a1 + 64);
  v5 = (const char *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    v5 = *(const char **)v5;
  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v4 + 24))(v4, 6, "Received ctl::RevokeClientId::Indication [%s]\n", v5);
  v24 = 0;
  v25 = 0;
  v6 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v6)
    goto LABEL_18;
  v7 = std::__shared_weak_count::lock(v6);
  v25 = v7;
  if (!v7)
    goto LABEL_18;
  v8 = *(_QWORD *)(a1 + 72);
  v24 = v8;
  v9 = QMux::BOOL_true_type;
  if (!v8)
    v9 = 0;
  if (!v9)
    goto LABEL_18;
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 1174405120;
  v20 = ___ZN10QMIControl14handleInd_syncERKN3ctl14RevokeClientId10IndicationE_block_invoke;
  v21 = &__block_descriptor_tmp_60;
  v22 = v8;
  v23 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  TlvValue = qmi::MessageBase::findTlvValue(a2);
  if (TlvValue)
  {
    v27 = TlvValue;
    v26 = tlv::parseV<ctl::tlv::AssignedId>();
    v20((uint64_t)v19, (unsigned __int8 *)&v26);
  }
  v13 = v23;
  if (!v23)
    goto LABEL_18;
  v14 = (unint64_t *)&v23->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    v16 = v25;
    if (!v25)
      return;
  }
  else
  {
LABEL_18:
    v16 = v25;
    if (!v25)
      return;
  }
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
}

void sub_19EA1259C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  QMux *v17;

  QMux::~QMux(v17);
  QMux::~QMux((QMux *)&a17);
  _Unwind_Resume(a1);
}

void ___ZN10QMIControl14handleInd_syncERKN3ctl14RevokeClientId10IndicationE_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  QMux::State::revokeClient_sync(v3, *a2, a2[1]);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_19EA12650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c9_ZTS4QMux(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c9_ZTS4QMux(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void QMIControl::handleReceivedIndication_sync(uint64_t a1, const void *a2)
{
  unint64_t *v3;
  unint64_t v4;
  const char *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *v9;
  unint64_t v10;
  const char *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;
  std::__shared_weak_count *v19;

  memset(v17, 170, sizeof(v17));
  qmi::MessageBase::MessageBase((qmi::MessageBase *)v17, a2);
  if (LOWORD(v17[0]) == 36)
  {
    v14 = v17[0];
    v15 = v17[1];
    v16 = v17[2];
    if (v17[2])
    {
      v9 = (unint64_t *)(v17[2] + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)&v14);
    QMIControl::handleInd_sync(a1, (qmi::MessageBase *)&v14);
    goto LABEL_30;
  }
  if (LOWORD(v17[0]) == 39)
  {
    v14 = v17[0];
    v15 = v17[1];
    v16 = v17[2];
    if (v17[2])
    {
      v3 = (unint64_t *)(v17[2] + 8);
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 + 1, v3));
    }
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)&v14);
    v5 = (const char *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v5 = *(const char **)v5;
    (*(void (**)(_QWORD, uint64_t, const char *, ...))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64), 6, "Received ctl::Sync::Indication [%s]\n", v5);
    v18 = 0;
    v19 = 0;
    v6 = *(std::__shared_weak_count **)(a1 + 80);
    if (v6)
    {
      v7 = std::__shared_weak_count::lock(v6);
      v19 = v7;
      if (v7)
      {
        v18 = *(_QWORD *)(a1 + 72);
        if (v18 ? QMux::BOOL_true_type : 0)
          QMux::restart((QMux *)&v18);
      }
    }
    else
    {
      v7 = 0;
    }
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
LABEL_30:
    qmi::MessageBase::~MessageBase((qmi::MessageBase *)&v14);
    qmi::MessageBase::~MessageBase((qmi::MessageBase *)v17);
    return;
  }
  v11 = (const char *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    v11 = *(const char **)v11;
  (*(void (**)(_QWORD, uint64_t, const char *, ...))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64), 6, "Received unknown QMI CTL indication (0x%04x) [%s]\n", LOWORD(v17[0]), v11);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v17);
}

void sub_19EA128CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va1);
  _Unwind_Resume(a1);
}

void QMIControl::handleSentData(QMIControl *this, __int16 a2)
{
  const char *v4;
  dispatch_queue_t current_queue;
  qmi::TransactionQueue::State *v6;

  current_queue = dispatch_get_current_queue();
  v6 = (qmi::TransactionQueue::State *)*((_QWORD *)this + 13);
  if (current_queue != *((dispatch_queue_t *)v6 + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x21B, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v4);
    v6 = (qmi::TransactionQueue::State *)*((_QWORD *)this + 13);
  }
  qmi::TransactionQueue::State::startTimer_sync(v6, a2);
}

void QMIControl::handleSentData_sync(QMIControl *this, __int16 a2)
{
  const char *v4;
  dispatch_queue_t current_queue;
  qmi::TransactionQueue::State *v6;

  current_queue = dispatch_get_current_queue();
  v6 = (qmi::TransactionQueue::State *)*((_QWORD *)this + 13);
  if (current_queue != *((dispatch_queue_t *)v6 + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x21B, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v4);
    v6 = (qmi::TransactionQueue::State *)*((_QWORD *)this + 13);
  }
  qmi::TransactionQueue::State::startTimer_sync(v6, a2);
}

void QMIControl::handleTimeout(QMIControl *this, unsigned __int16 a2, int a3)
{
  uint64_t v4;
  const char *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t (*v8)(QMux *__hidden);
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  std::ios_base *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  std::string::size_type v29;
  std::string *p_dst;
  uint64_t v31;
  const void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::string __dst;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  void *__p[2];
  __int128 v47;
  unint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _QWORD *v59;
  std::__shared_weak_count *v60;
  std::string v61;

  if (!*((_BYTE *)this + 44))
    return;
  if (a3 == 39)
  {
    v4 = *((_QWORD *)this + 8);
    v5 = (char *)this + 8;
    if (*((char *)this + 31) < 0)
      v5 = *(const char **)v5;
    (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v4 + 24))(v4, 6, "ATCS_TIMEOUT was for a ctl::Sync message; this is expected sometimes [%s]\n",
      v5);
    return;
  }
  v59 = 0;
  v60 = 0;
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v6)
  {
    v7 = 0;
    goto LABEL_29;
  }
  v7 = std::__shared_weak_count::lock(v6);
  v60 = v7;
  if (!v7 || ((v59 = (_QWORD *)*((_QWORD *)this + 9)) != 0 ? (v8 = QMux::BOOL_true_type) : (v8 = 0), !v8))
  {
LABEL_29:
    v33 = (char *)this + 8;
    if (*((char *)this + 31) < 0)
      v33 = *(const char **)v33;
    (*(void (**)(_QWORD, uint64_t, const char *, ...))(**((_QWORD **)this + 8) + 24))(*((_QWORD *)this + 8), 6, "ATCS_TIMEOUT should invoke reset but QMux is no longer alive [%s]\n", v33);
    if (!v7)
      return;
LABEL_50:
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v48 = 0xAAAAAAAAAAAAAAAALL;
  v58 = v9;
  v57 = v9;
  v56 = v9;
  v55 = v9;
  v54 = v9;
  v53 = v9;
  v52 = v9;
  v51 = v9;
  v50 = v9;
  *(_OWORD *)__p = v9;
  v47 = v9;
  v44 = v9;
  v45 = v9;
  v42 = v9;
  v43 = v9;
  v10 = MEMORY[0x1E0DE4FE0];
  v11 = MEMORY[0x1E0DE4FE0] + 64;
  v49 = MEMORY[0x1E0DE4FE0] + 64;
  v12 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v13 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v41 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v41 + *(_QWORD *)(v41 - 24)) = v13;
  v14 = (std::ios_base *)((char *)&v41 + *(_QWORD *)(v41 - 24));
  std::ios_base::init(v14, &v42);
  v14[1].__vftable = 0;
  v14[1].__fmtflags_ = -1;
  v41 = v10 + 24;
  v49 = v11;
  std::streambuf::basic_streambuf();
  v15 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v42 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v47 = 0u;
  LODWORD(v48) = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"ATCS_TIMEOUT on message for svc=", 32);
  v16 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" client=", 8);
  v17 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" (txid=", 7);
  v18 = (_QWORD *)std::ostream::operator<<();
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" msgid=0x", 9);
  *(_DWORD *)((char *)v19 + *(_QWORD *)(*v19 - 24) + 8) = *(_DWORD *)((_BYTE *)v19 + *(_QWORD *)(*v19 - 24) + 8) & 0xFFFFFFB5 | 8;
  v20 = (_QWORD *)std::ostream::operator<<();
  *(_DWORD *)((char *)v20 + *(_QWORD *)(*v20 - 24) + 8) = *(_DWORD *)((_BYTE *)v20 + *(_QWORD *)(*v20 - 24) + 8) & 0xFFFFFFB5 | 2;
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)") [", 3);
  v24 = *((_QWORD *)this + 1);
  v23 = (char *)this + 8;
  v22 = v24;
  v25 = v23[23];
  if (v25 >= 0)
    v26 = (uint64_t)v23;
  else
    v26 = v22;
  if (v25 >= 0)
    v27 = v23[23];
  else
    v27 = *((_QWORD *)v23 + 1);
  v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v26, v27);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"]", 1);
  if ((v48 & 0x10) != 0)
  {
    v31 = *((_QWORD *)&v47 + 1);
    if (*((_QWORD *)&v47 + 1) < (unint64_t)v45)
    {
      *((_QWORD *)&v47 + 1) = v45;
      v31 = v45;
    }
    v32 = (const void *)*((_QWORD *)&v44 + 1);
    v29 = v31 - *((_QWORD *)&v44 + 1);
    if ((unint64_t)(v31 - *((_QWORD *)&v44 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_41;
  }
  else
  {
    if ((v48 & 8) == 0)
    {
      v29 = 0;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
      p_dst = &__dst;
      goto LABEL_37;
    }
    v32 = (const void *)v43;
    v29 = v44 - v43;
    if ((_QWORD)v44 - (_QWORD)v43 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_41:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v29 >= 0x17)
  {
    v34 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v34 = v29 | 7;
    v35 = v34 + 1;
    p_dst = (std::string *)operator new(v34 + 1);
    __dst.__r_.__value_.__l.__size_ = v29;
    __dst.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v29;
    p_dst = &__dst;
    if (!v29)
      goto LABEL_37;
  }
  memmove(p_dst, v32, v29);
LABEL_37:
  p_dst->__r_.__value_.__s.__data_[v29] = 0;
  v36 = v59;
  v37 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if (v59)
  {
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v61, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    else
      v61 = __dst;
    QMux::State::invokeReset(v36, (uint64_t)&v61);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
  }
  if (v37 < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v41 = *v12;
  *(uint64_t *)((char *)&v41 + *(_QWORD *)(v41 - 24)) = v12[3];
  *(_QWORD *)&v42 = v15 + 16;
  if (SBYTE7(v47) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1A1AEB300](&v49);
  v7 = v60;
  if (v60)
    goto LABEL_50;
}

void sub_19EA12E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a14);
  QMux::~QMux((QMux *)(v14 - 128));
  _Unwind_Resume(a1);
}

void sub_19EA12EBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::ostream::~ostream();
  MEMORY[0x1A1AEB300](v1);
  QMux::~QMux((QMux *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_19EA12EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  std::ostringstream::~ostringstream((uint64_t)va);
  QMux::~QMux((QMux *)(v6 - 128));
  _Unwind_Resume(a1);
}

uint64_t QMIControl::ClientIdRequests::addFailedRequestForSvcType(uint64_t a1, unsigned int a2)
{
  pthread_mutex_t *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t **v13;
  unsigned int v14;
  uint64_t *v15;
  unsigned int v16;
  uint64_t **v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t **v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  pthread_mutex_t *v30;

  v4 = *(pthread_mutex_t **)a1;
  pthread_mutex_lock(*(pthread_mutex_t **)a1);
  v4[1].__sig = (uint64_t)pthread_self();
  v6 = (uint64_t **)(a1 + 40);
  v5 = *(uint64_t **)(a1 + 40);
  if (v5)
  {
    v7 = a1 + 40;
    v8 = *(_QWORD *)(a1 + 40);
    do
    {
      v9 = *(unsigned __int8 *)(v8 + 28);
      v10 = v9 >= a2;
      if (v9 >= a2)
        v11 = (uint64_t *)v8;
      else
        v11 = (uint64_t *)(v8 + 8);
      if (v10)
        v7 = v8;
      v8 = *v11;
    }
    while (*v11);
    if ((uint64_t **)v7 == v6 || *(unsigned __int8 *)(v7 + 28) > a2)
    {
      while (1)
      {
        while (1)
        {
          v13 = (uint64_t **)v5;
          v14 = *((unsigned __int8 *)v5 + 28);
          if (v14 <= a2)
            break;
          v5 = *v13;
          v6 = v13;
          if (!*v13)
            goto LABEL_24;
        }
        if (v14 >= a2)
          break;
        v5 = v13[1];
        if (!v5)
        {
          v6 = v13 + 1;
          goto LABEL_24;
        }
      }
      v18 = v13;
      v21 = 1;
    }
    else
    {
      v12 = *(uint64_t **)(a1 + 40);
      do
      {
        while (1)
        {
          v15 = v12;
          v16 = *((unsigned __int8 *)v12 + 28);
          if (v16 > a2)
            break;
          if (v16 >= a2)
          {
            v25 = *((_DWORD *)v15 + 8);
            goto LABEL_35;
          }
          v12 = (uint64_t *)v15[1];
          if (!v12)
          {
            v17 = (uint64_t **)(v15 + 1);
            goto LABEL_29;
          }
        }
        v12 = (uint64_t *)*v15;
      }
      while (*v15);
      v17 = (uint64_t **)v15;
LABEL_29:
      v22 = operator new(0x28uLL);
      v22[28] = a2;
      *((_DWORD *)v22 + 8) = 0;
      *(_QWORD *)v22 = 0;
      *((_QWORD *)v22 + 1) = 0;
      *((_QWORD *)v22 + 2) = v15;
      *v17 = (uint64_t *)v22;
      v23 = **(_QWORD **)(a1 + 32);
      v24 = (uint64_t *)v22;
      if (v23)
      {
        *(_QWORD *)(a1 + 32) = v23;
        v24 = *v17;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 40), v24);
      v5 = *(uint64_t **)(a1 + 40);
      ++*(_QWORD *)(a1 + 48);
      v25 = *((_DWORD *)v22 + 8);
      v26 = (uint64_t **)(a1 + 40);
      if (v5)
      {
        while (1)
        {
LABEL_35:
          while (1)
          {
            v26 = (uint64_t **)v5;
            v27 = *((unsigned __int8 *)v5 + 28);
            if (v27 <= a2)
              break;
            v5 = *v26;
            v6 = v26;
            if (!*v26)
              goto LABEL_39;
          }
          if (v27 >= a2)
            break;
          v5 = v26[1];
          if (!v5)
          {
            v6 = v26 + 1;
            goto LABEL_39;
          }
        }
        v18 = v26;
      }
      else
      {
LABEL_39:
        v18 = operator new(0x28uLL);
        v18[28] = a2;
        *((_DWORD *)v18 + 8) = 0;
        *(_QWORD *)v18 = 0;
        *((_QWORD *)v18 + 1) = 0;
        *((_QWORD *)v18 + 2) = v26;
        *v6 = (uint64_t *)v18;
        v28 = **(_QWORD **)(a1 + 32);
        v29 = (uint64_t *)v18;
        if (v28)
        {
          *(_QWORD *)(a1 + 32) = v28;
          v29 = *v6;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 40), v29);
        ++*(_QWORD *)(a1 + 48);
      }
      v21 = v25 + 1;
    }
  }
  else
  {
    v13 = (uint64_t **)(a1 + 40);
LABEL_24:
    v18 = operator new(0x28uLL);
    v18[28] = a2;
    *((_DWORD *)v18 + 8) = 0;
    *(_QWORD *)v18 = 0;
    *((_QWORD *)v18 + 1) = 0;
    *((_QWORD *)v18 + 2) = v13;
    *v6 = (uint64_t *)v18;
    v19 = **(_QWORD **)(a1 + 32);
    v20 = (uint64_t *)v18;
    if (v19)
    {
      *(_QWORD *)(a1 + 32) = v19;
      v20 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 40), v20);
    ++*(_QWORD *)(a1 + 48);
    v21 = 1;
  }
  *((_DWORD *)v18 + 8) = v21;
  v30 = *(pthread_mutex_t **)a1;
  pthread_self();
  v30[1].__sig = 0;
  return pthread_mutex_unlock(v30);
}

void sub_19EA13184(_Unwind_Exception *a1)
{
  pthread_mutex_t **v1;
  pthread_mutex_t *v3;

  v3 = *v1;
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

BOOL QMIControl::startRetryTimer_sync(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  dispatch_time_t v17;
  uint64_t v18;
  const char *v19;
  BOOL v20;
  _BOOL8 v21;
  const char *v22;
  _QWORD handler[7];
  std::__shared_weak_count *v25;
  dispatch_object_t object;

  if (!*(_QWORD *)(a1 + 184))
  {
    v3 = *(_DWORD *)(a1 + 192);
    if (v3 <= 9)
    {
      *(_DWORD *)(a1 + 192) = v3 + 1;
      v5 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, *(dispatch_queue_t *)(a1 + 88));
      v6 = v5;
      if (v5)
        dispatch_retain(v5);
      v7 = *(NSObject **)(a1 + 184);
      *(_QWORD *)(a1 + 184) = v6;
      if (v7)
        dispatch_release(v7);
      if (v6)
      {
        v8 = *(std::__shared_weak_count **)(a1 + 56);
        if (!v8 || (v9 = *(_QWORD *)(a1 + 48), (v10 = std::__shared_weak_count::lock(v8)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v11 = v10;
        p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v11);
        }
        handler[0] = MEMORY[0x1E0C809B0];
        handler[1] = 1174405120;
        handler[2] = ___ZN10QMIControl20startRetryTimer_syncEU13block_pointerFvvE_block_invoke;
        handler[3] = &__block_descriptor_tmp_82;
        handler[5] = a1;
        handler[6] = v9;
        v25 = v11;
        do
          v16 = __ldxr(p_shared_weak_owners);
        while (__stxr(v16 + 1, p_shared_weak_owners));
        object = v6;
        dispatch_retain(v6);
        handler[4] = a2;
        dispatch_source_set_event_handler(v6, handler);
        v17 = dispatch_time(0, 50000000);
        dispatch_source_set_timer(v6, v17, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC20uLL);
        dispatch_activate(v6);
        if (object)
          dispatch_release(object);
        if (v25)
          std::__shared_weak_count::__release_weak(v25);
        std::__shared_weak_count::__release_weak(v11);
        dispatch_release(v6);
      }
    }
  }
  v18 = *(_QWORD *)(a1 + 184);
  v19 = (const char *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    v19 = *(const char **)v19;
  v20 = v18 == 0;
  v21 = v18 != 0;
  v22 = " not ";
  if (!v20)
    v22 = " ";
  (*(void (**)(_QWORD, uint64_t, const char *, ...))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64), 6, "[%s] Retry timer is%sactive, retry attempts %d of max %d\n", v19, v22, *(_DWORD *)(a1 + 192), 10);
  return v21;
}

void sub_19EA133B8(_Unwind_Exception *a1)
{
  NSObject *v1;

  dispatch_release(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN10QMIControl26handleClientIdRequest_syncEN3qmi11ServiceTypeERKN3ctl11GetClientId8ResponseE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  const char *v4;

  v1 = *(_QWORD *)(a1 + 32);
  for (result = QMIControl::ClientIdRequests::popFailedRequest((pthread_mutex_t **)(v1 + 128));
        (_DWORD)result != 255;
        result = QMIControl::ClientIdRequests::popFailedRequest((pthread_mutex_t **)(v1 + 128)))
  {
    v4 = (const char *)(v1 + 8);
    if (*(char *)(v1 + 31) < 0)
      v4 = *(const char **)(v1 + 8);
    v3 = result;
    (*(void (**)(_QWORD, uint64_t, const char *, ...))(**(_QWORD **)(v1 + 64) + 24))(*(_QWORD *)(v1 + 64), 6, "[%s] Retrying request for client, svc type: %d\n", v4, result);
    QMIControl::requestClientId_sync(v1, v3);
  }
  return result;
}

uint64_t QMIControl::ClientIdRequests::popFailedRequest(pthread_mutex_t **this)
{
  pthread_mutex_t *v2;
  pthread_mutex_t *v3;
  uint64_t v4;
  uint64_t **v5;
  pthread_mutex_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t **v10;
  unsigned int v11;
  _BYTE *v12;
  pthread_mutex_t *sig;
  uint64_t *v14;
  pthread_mutex_t *v15;
  char *v17;
  pthread_mutex_t *v18;
  unsigned int v19;
  BOOL v20;
  pthread_mutex_t **opaque;
  pthread_mutex_t *v22;
  pthread_mutex_t *v23;
  char *v24;
  BOOL v25;

  v2 = *this;
  pthread_mutex_lock(*this);
  v2[1].__sig = (uint64_t)pthread_self();
  v3 = this[6];
  if (v3)
  {
    v5 = (uint64_t **)(this + 5);
    v4 = (uint64_t)this[5];
    v6 = this[4];
    v7 = v6->__opaque[20];
    v8 = *(_DWORD *)&v6->__opaque[24];
    v9 = v8 - 1;
    if (v8 == 1)
    {
      if (v4)
      {
        v17 = (char *)(this + 5);
        v18 = this[5];
        do
        {
          v19 = v18->__opaque[20];
          v20 = v19 >= v7;
          if (v19 >= v7)
            opaque = (pthread_mutex_t **)v18;
          else
            opaque = (pthread_mutex_t **)v18->__opaque;
          if (v20)
            v17 = (char *)v18;
          v18 = *opaque;
        }
        while (*opaque);
        if (v17 != (char *)v5 && v7 >= v17[28])
        {
          v22 = (pthread_mutex_t *)*((_QWORD *)v17 + 1);
          if (v22)
          {
            do
            {
              v23 = v22;
              v22 = (pthread_mutex_t *)v22->__sig;
            }
            while (v22);
          }
          else
          {
            v24 = v17;
            do
            {
              v23 = (pthread_mutex_t *)*((_QWORD *)v24 + 2);
              v25 = v23->__sig == (_QWORD)v24;
              v24 = (char *)v23;
            }
            while (!v25);
          }
          if (v6 == (pthread_mutex_t *)v17)
            this[4] = v23;
          this[6] = (pthread_mutex_t *)((char *)v3 - 1);
          std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v4, (uint64_t *)v17);
          operator delete(v17);
        }
      }
    }
    else
    {
      v10 = (uint64_t **)(this + 5);
      if (v4)
      {
        while (1)
        {
          while (1)
          {
            v10 = (uint64_t **)v4;
            v11 = *(unsigned __int8 *)(v4 + 28);
            if (v7 >= v11)
              break;
            v4 = *(_QWORD *)v4;
            v5 = v10;
            if (!*v10)
              goto LABEL_10;
          }
          if (v11 >= v7)
            break;
          v4 = *(_QWORD *)(v4 + 8);
          if (!v4)
          {
            v5 = v10 + 1;
            goto LABEL_10;
          }
        }
        *(_DWORD *)(v4 + 32) = v9;
      }
      else
      {
LABEL_10:
        v12 = operator new(0x28uLL);
        v12[28] = v7;
        *((_DWORD *)v12 + 8) = 0;
        *(_QWORD *)v12 = 0;
        *((_QWORD *)v12 + 1) = 0;
        *((_QWORD *)v12 + 2) = v10;
        *v5 = (uint64_t *)v12;
        sig = (pthread_mutex_t *)this[4]->__sig;
        v14 = (uint64_t *)v12;
        if (sig)
        {
          this[4] = sig;
          v14 = *v5;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(&this[5]->__sig, v14);
        this[6] = (pthread_mutex_t *)((char *)this[6] + 1);
        *((_DWORD *)v12 + 8) = v9;
      }
    }
  }
  else
  {
    v7 = 255;
  }
  v15 = *this;
  pthread_self();
  v15[1].__sig = 0;
  pthread_mutex_unlock(v15);
  return v7;
}

void sub_19EA13624(_Unwind_Exception *a1)
{
  pthread_mutex_t **v1;
  pthread_mutex_t *v3;

  v3 = *v1;
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t QMIControl::ClientIdRequests::popClientForSvcType@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  pthread_mutex_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  unsigned int v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  pthread_mutex_t *v26;

  v6 = *(pthread_mutex_t **)a1;
  pthread_mutex_lock(*(pthread_mutex_t **)a1);
  v6[1].__sig = (uint64_t)pthread_self();
  v8 = (uint64_t **)(a1 + 16);
  v7 = *(uint64_t **)(a1 + 16);
  if (!v7)
  {
    v9 = (uint64_t **)(a1 + 16);
    goto LABEL_8;
  }
  do
  {
    while (1)
    {
      v9 = (uint64_t **)v7;
      v10 = *((unsigned __int8 *)v7 + 32);
      if (v10 <= a2)
        break;
      v7 = *v9;
      v8 = v9;
      if (!*v9)
        goto LABEL_8;
    }
    if (v10 >= a2)
    {
      v11 = v9;
      if (v9[5] != v9[6])
        goto LABEL_15;
      goto LABEL_37;
    }
    v7 = v9[1];
  }
  while (v7);
  v8 = v9 + 1;
LABEL_8:
  v11 = operator new(0x40uLL);
  v11[32] = a2;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 7) = 0;
  *((_QWORD *)v11 + 5) = 0;
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = v9;
  *v8 = (uint64_t *)v11;
  v12 = **(_QWORD **)(a1 + 8);
  v13 = (uint64_t *)v11;
  if (v12)
  {
    *(_QWORD *)(a1 + 8) = v12;
    v13 = *v8;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 16), v13);
  ++*(_QWORD *)(a1 + 24);
  while (*((_QWORD *)v11 + 5) != *((_QWORD *)v11 + 6))
  {
LABEL_15:
    *a3 = 0xAAAAAAAAAAAAAAAALL;
    a3[1] = 0xAAAAAAAAAAAAAAAALL;
    v14 = (uint64_t *)*((_QWORD *)v11 + 5);
    *a3 = 0;
    a3[1] = 0;
    v15 = (std::__shared_weak_count *)v14[1];
    if (v15)
    {
      v16 = std::__shared_weak_count::lock(v15);
      a3[1] = v16;
      if (v16)
      {
        v17 = *v14;
        *a3 = v17;
        v18 = (__int128 *)*((_QWORD *)v11 + 5);
        v19 = (__int128 *)*((_QWORD *)v11 + 6);
        v20 = v18 + 1;
        if (v18 + 1 != v19)
          goto LABEL_24;
      }
      else
      {
        v17 = 0;
        v18 = (__int128 *)*((_QWORD *)v11 + 5);
        v19 = (__int128 *)*((_QWORD *)v11 + 6);
        v20 = v18 + 1;
        if (v18 + 1 != v19)
        {
          do
          {
LABEL_24:
            v21 = *v20;
            *(_QWORD *)v20 = 0;
            *((_QWORD *)v20 + 1) = 0;
            v22 = (std::__shared_weak_count *)*((_QWORD *)v20 - 1);
            *(v20 - 1) = v21;
            if (v22)
              std::__shared_weak_count::__release_weak(v22);
            ++v20;
            ++v18;
          }
          while (v20 != v19);
          v20 = (__int128 *)*((_QWORD *)v11 + 6);
        }
      }
    }
    else
    {
      v16 = 0;
      v17 = 0;
      v18 = (__int128 *)*((_QWORD *)v11 + 5);
      v19 = (__int128 *)*((_QWORD *)v11 + 6);
      v20 = v18 + 1;
      if (v18 + 1 != v19)
        goto LABEL_24;
    }
    while (v20 != v18)
    {
      v23 = (std::__shared_weak_count *)*((_QWORD *)v20 - 1);
      if (v23)
        std::__shared_weak_count::__release_weak(v23);
      --v20;
    }
    *((_QWORD *)v11 + 6) = v18;
    if (v17)
      goto LABEL_38;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
LABEL_37:
  *a3 = 0;
  a3[1] = 0;
LABEL_38:
  v26 = *(pthread_mutex_t **)a1;
  pthread_self();
  v26[1].__sig = 0;
  return pthread_mutex_unlock(v26);
}

void sub_19EA13884(_Unwind_Exception *a1)
{
  pthread_mutex_t **v1;
  pthread_mutex_t *v3;

  v3 = *v1;
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

void ___ZN10QMIControl26handleClientIdRequest_syncEN3qmi11ServiceTypeERKN3ctl11GetClientId8ResponseE_block_invoke_2(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = a1[4];
  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  QMux::State::notifyClientAdded_sync(v3, a1 + 6, *(unsigned __int8 *)(a2 + 1));
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_19EA13944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_32c9_ZTS4QMux48c49_ZTSNSt3__110shared_ptrIN3qmi15QMuxClientIfaceEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[7];
  result[6] = a2[6];
  result[7] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_e8_32c9_ZTS4QMux48c49_ZTSNSt3__110shared_ptrIN3qmi15QMuxClientIfaceEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void QMIControl::join(dispatch_queue_t *this, dispatch_group_t group)
{
  dispatch_group_async(group, this[12], &__block_literal_global_79);
}

void QMIControl::join_sync(dispatch_queue_t *this, dispatch_group_t group)
{
  dispatch_group_async(group, this[12], &__block_literal_global_79);
}

void QMIControl::flush(QMIControl *this, NSObject *a2)
{
  const char *v4;
  dispatch_queue_t current_queue;
  qmi::TransactionQueue::State *v6;

  current_queue = dispatch_get_current_queue();
  v6 = (qmi::TransactionQueue::State *)*((_QWORD *)this + 13);
  if (current_queue != *((dispatch_queue_t *)v6 + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x238, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v4);
    v6 = (qmi::TransactionQueue::State *)*((_QWORD *)this + 13);
  }
  qmi::TransactionQueue::State::flush_sync(v6, a2);
}

void QMIControl::flush_sync(QMIControl *this, NSObject *a2)
{
  const char *v4;
  dispatch_queue_t current_queue;
  qmi::TransactionQueue::State *v6;

  current_queue = dispatch_get_current_queue();
  v6 = (qmi::TransactionQueue::State *)*((_QWORD *)this + 13);
  if (current_queue != *((dispatch_queue_t *)v6 + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x238, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v4);
    v6 = (qmi::TransactionQueue::State *)*((_QWORD *)this + 13);
  }
  qmi::TransactionQueue::State::flush_sync(v6, a2);
}

void QMIControl::dumpState_sync(QMIControl *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;
  std::string *v7;
  std::string::size_type size;
  char *v9;
  char *v10;
  const char *v11;
  uint64_t v12;
  pthread_mutex_t *v13;
  uint64_t v14;
  pthread_mutex_t *v15;
  const char *v16;
  dispatch_queue_t current_queue;
  qmi::TransactionQueue::State *v18;
  std::string::value_type *v19;
  std::string *p_p;
  std::string __p;
  std::string::value_type __s[8];
  _QWORD **v23;
  _QWORD *v24;
  uint64_t v25;
  std::string v26;

  v2 = (char *)*((_QWORD *)this + 25);
  v3 = (char *)this + 208;
  memset(&__p, 0, sizeof(__p));
  if (v2 != (char *)this + 208)
  {
    __s[0] = v2[32];
    v24 = 0;
    v25 = 0;
    v23 = &v24;
    std::set<unsigned short>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned short,std::__tree_node<unsigned short,void *> *,long>>((uint64_t *)&v23, *((unsigned __int16 **)v2 + 5), (unsigned __int16 *)v2 + 24);
    QMIControl::dumpState_sync(void)const::$_0::operator()(&v26, (unsigned __int8 *)__s);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v26;
    std::__tree<unsigned short>::destroy((uint64_t)&v23, v24);
    v4 = (char *)*((_QWORD *)v2 + 1);
    if (v4)
    {
      do
      {
        v5 = v4;
        v4 = *(char **)v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        v5 = (char *)*((_QWORD *)v2 + 2);
        v6 = *(_QWORD *)v5 == (_QWORD)v2;
        v2 = v5;
      }
      while (!v6);
    }
    if (v5 != v3)
    {
      do
      {
        HIBYTE(v24) = 2;
        strcpy(__s, ", ");
        std::string::append(&__p, __s, 2uLL);
        if (SHIBYTE(v24) < 0)
          operator delete(*(void **)__s);
        __s[0] = v5[32];
        v24 = 0;
        v25 = 0;
        v23 = &v24;
        std::set<unsigned short>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned short,std::__tree_node<unsigned short,void *> *,long>>((uint64_t *)&v23, *((unsigned __int16 **)v5 + 5), (unsigned __int16 *)v5 + 24);
        QMIControl::dumpState_sync(void)const::$_0::operator()(&v26, (unsigned __int8 *)__s);
        if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v7 = &v26;
        else
          v7 = (std::string *)v26.__r_.__value_.__r.__words[0];
        if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
        else
          size = v26.__r_.__value_.__l.__size_;
        std::string::append(&__p, (const std::string::value_type *)v7, size);
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v26.__r_.__value_.__l.__data_);
          std::__tree<unsigned short>::destroy((uint64_t)&v23, v24);
          v9 = (char *)*((_QWORD *)v5 + 1);
          if (v9)
          {
            do
            {
LABEL_24:
              v10 = v9;
              v9 = *(char **)v9;
            }
            while (v9);
            goto LABEL_11;
          }
        }
        else
        {
          std::__tree<unsigned short>::destroy((uint64_t)&v23, v24);
          v9 = (char *)*((_QWORD *)v5 + 1);
          if (v9)
            goto LABEL_24;
        }
        do
        {
          v10 = (char *)*((_QWORD *)v5 + 2);
          v6 = *(_QWORD *)v10 == (_QWORD)v5;
          v5 = v10;
        }
        while (!v6);
LABEL_11:
        v5 = v10;
      }
      while (v10 != v3);
    }
  }
  v11 = (char *)this + 8;
  if (*((char *)this + 31) < 0)
    v11 = *(const char **)v11;
  v12 = *((_QWORD *)this + 8);
  v13 = (pthread_mutex_t *)*((_QWORD *)this + 16);
  pthread_mutex_lock(v13);
  v13[1].__sig = (uint64_t)pthread_self();
  v14 = *((_QWORD *)this + 19);
  v15 = (pthread_mutex_t *)*((_QWORD *)this + 16);
  pthread_self();
  v15[1].__sig = 0;
  pthread_mutex_unlock(v15);
  current_queue = dispatch_get_current_queue();
  v18 = (qmi::TransactionQueue::State *)*((_QWORD *)this + 13);
  if (current_queue != *((dispatch_queue_t *)v18 + 2))
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/QMI/QMITransactionQueue.cpp", (const char *)0x253, "dispatch_get_current_queue()==fState->queue()", "is not", "true", v16);
    v18 = (qmi::TransactionQueue::State *)*((_QWORD *)this + 13);
  }
  qmi::TransactionQueue::State::dumpState_sync(v18, __s);
  if (SHIBYTE(v24) >= 0)
    v19 = __s;
  else
    v19 = *(std::string::value_type **)__s;
  p_p = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  (*(void (**)(uint64_t, uint64_t, const char *, ...))(*(_QWORD *)v12 + 24))(v12, 6, "[%s]   QMIControl(%zd clients pending) %s\n    ind_wake={%s}\n", v11, v14, v19, (const char *)p_p);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_42:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(*(void **)__s);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_42;
}

void sub_19EA13E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,_QWORD *a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  std::__tree<unsigned short>::destroy(v28, a21);
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

pthread_mutex_t *QMIControl::ClientIdRequests::count(pthread_mutex_t **this)
{
  pthread_mutex_t *v2;
  pthread_mutex_t *v3;
  pthread_mutex_t *v4;

  v2 = *this;
  pthread_mutex_lock(*this);
  v2[1].__sig = (uint64_t)pthread_self();
  v3 = this[3];
  v4 = *this;
  pthread_self();
  v4[1].__sig = 0;
  pthread_mutex_unlock(v4);
  return v3;
}

void ___ZN10QMIControl20startRetryTimer_syncEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (*(_QWORD *)(a1 + 48))
      {
        if (*(_QWORD *)(v3 + 184) == *(_QWORD *)(a1 + 64))
        {
          (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
          dispatch_source_cancel(*(dispatch_source_t *)(a1 + 64));
          v6 = *(NSObject **)(v3 + 184);
          *(_QWORD *)(v3 + 184) = 0;
          if (v6)
            dispatch_release(v6);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_19EA13FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32b48c35_ZTSNSt3__18weak_ptrI10QMIControlEE64c22_ZTSN8dispatch6sourceE(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;

  _Block_object_assign(a1 + 4, *(const void **)(a2 + 32), 7);
  v4 = *(_QWORD *)(a2 + 56);
  a1[6] = *(_QWORD *)(a2 + 48);
  a1[7] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(NSObject **)(a2 + 64);
  a1[8] = v7;
  if (v7)
    dispatch_retain(v7);
}

void __destroy_helper_block_e8_32b48c35_ZTSNSt3__18weak_ptrI10QMIControlEE64c22_ZTSN8dispatch6sourceE(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;

  v2 = *(NSObject **)(a1 + 64);
  if (v2)
    dispatch_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Block_object_dispose(*(const void **)(a1 + 32), 7);
}

uint64_t QMIControl::simSlot(QMIControl *this)
{
  return 0;
}

_WORD *std::vector<unsigned short>::__assign_with_size[abi:ne180100]<std::__tree_const_iterator<unsigned short,std::__tree_node<unsigned short,void *> *,long>,std::__tree_const_iterator<unsigned short,std::__tree_node<unsigned short,void *> *,long>>(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t __sz)
{
  _QWORD *v6;
  size_t v8;
  _WORD *v9;
  size_t v10;
  uint64_t v11;
  _WORD *result;
  _WORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  _QWORD *v22;
  _WORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v28;
  _WORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_WORD **)a1;
  if (__sz > (uint64_t)(v8 - *(_QWORD *)a1) >> 1)
  {
    if (v9)
    {
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v9);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if ((__sz & 0x8000000000000000) != 0)
      goto LABEL_66;
    if (v8 <= __sz)
      v10 = __sz;
    else
      v10 = v8;
    if (v8 >= 0x7FFFFFFFFFFFFFFELL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    if ((v10 & 0x8000000000000000) != 0)
LABEL_66:
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v11 = v10;
    result = operator new(2 * v10);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 16) = &result[v11];
    v13 = result;
    if (v6 != a3)
    {
      v13 = result;
      do
      {
        *v13 = *((_WORD *)v6 + 13);
        v14 = (_QWORD *)v6[1];
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (_QWORD *)v6[2];
            v16 = *v15 == (_QWORD)v6;
            v6 = v15;
          }
          while (!v16);
        }
        ++v13;
        v6 = v15;
      }
      while (v15 != a3);
    }
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  v17 = (_QWORD *)(a1 + 8);
  result = *(_WORD **)(a1 + 8);
  v18 = result - v9;
  if (v18 < __sz)
  {
    if ((char *)result - (char *)v9 <= -2)
    {
      v26 = a2;
      do
      {
        v28 = (_QWORD *)*v26;
        if (*v26)
        {
          do
          {
            v22 = v28;
            v28 = (_QWORD *)v28[1];
          }
          while (v28);
        }
        else
        {
          do
          {
            v22 = (_QWORD *)v26[2];
            v16 = *v22 == (_QWORD)v26;
            v26 = v22;
          }
          while (v16);
        }
        v26 = v22;
      }
      while (!__CFADD__(v18++, 1));
    }
    else
    {
      if (result == v9)
        goto LABEL_49;
      v19 = a2;
      do
      {
        v21 = (_QWORD *)v19[1];
        if (v21)
        {
          do
          {
            v22 = v21;
            v21 = (_QWORD *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            v22 = (_QWORD *)v19[2];
            v16 = *v22 == (_QWORD)v19;
            v19 = v22;
          }
          while (!v16);
        }
        v19 = v22;
      }
      while (v18-- > 1);
    }
    if (v22 != a2)
    {
      do
      {
        *v9 = *((_WORD *)v6 + 13);
        v32 = (_QWORD *)v6[1];
        if (v32)
        {
          do
          {
            v33 = v32;
            v32 = (_QWORD *)*v32;
          }
          while (v32);
        }
        else
        {
          do
          {
            v33 = (_QWORD *)v6[2];
            v16 = *v33 == (_QWORD)v6;
            v6 = v33;
          }
          while (!v16);
        }
        ++v9;
        v6 = v33;
      }
      while (v33 != v22);
      goto LABEL_50;
    }
LABEL_49:
    v22 = a2;
LABEL_50:
    v29 = result;
    if (v22 != a3)
    {
      do
      {
        *v29 = *((_WORD *)v22 + 13);
        v30 = (_QWORD *)v22[1];
        if (v30)
        {
          do
          {
            v31 = v30;
            v30 = (_QWORD *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            v31 = (_QWORD *)v22[2];
            v16 = *v31 == (_QWORD)v22;
            v22 = v31;
          }
          while (!v16);
        }
        ++v29;
        v22 = v31;
      }
      while (v31 != a3);
    }
    *v17 = v29;
    return result;
  }
  v23 = v9;
  if (a2 != a3)
  {
    do
    {
      *v23 = *((_WORD *)v6 + 13);
      v24 = (_QWORD *)v6[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (_QWORD *)v6[2];
          v16 = *v25 == (_QWORD)v6;
          v6 = v25;
        }
        while (!v16);
      }
      ++v23;
      v6 = v25;
    }
    while (v25 != a3);
  }
  *v17 = v23;
  return result;
}

void std::__tree<std::__value_type<qmi::ServiceType,std::set<unsigned short>>,std::__map_value_compare<qmi::ServiceType,std::__value_type<qmi::ServiceType,std::set<unsigned short>>,std::less<qmi::ServiceType>,true>,std::allocator<std::__value_type<qmi::ServiceType,std::set<unsigned short>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<qmi::ServiceType,std::set<unsigned short>>,std::__map_value_compare<qmi::ServiceType,std::__value_type<qmi::ServiceType,std::set<unsigned short>>,std::less<qmi::ServiceType>,true>,std::allocator<std::__value_type<qmi::ServiceType,std::set<unsigned short>>>>::destroy(*a1);
    std::__tree<std::__value_type<qmi::ServiceType,std::set<unsigned short>>,std::__map_value_compare<qmi::ServiceType,std::__value_type<qmi::ServiceType,std::set<unsigned short>>,std::less<qmi::ServiceType>,true>,std::allocator<std::__value_type<qmi::ServiceType,std::set<unsigned short>>>>::destroy(a1[1]);
    std::__tree<unsigned short>::destroy((uint64_t)(a1 + 5), (_QWORD *)a1[6]);
    operator delete(a1);
  }
}

_QWORD *std::shared_ptr<QMIControl>::shared_ptr[abi:ne180100]<QMIControl,QMIControl::Deleter,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E4154A68;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 56);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 48) = a2;
    *(_QWORD *)(a2 + 56) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 48) = a2;
    *(_QWORD *)(a2 + 56) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_19EA145AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t block, uint64_t a11, uint64_t (*a12)(uint64_t a1), void *a13, uint64_t a14)
{
  uint64_t v14;
  NSObject *v15;

  __cxa_begin_catch(a1);
  v15 = *(NSObject **)(v14 + 88);
  block = MEMORY[0x1E0C809B0];
  a11 = 0x40000000;
  a12 = ___ZN10QMIControl7DeleterclEPS__block_invoke;
  a13 = &__block_descriptor_tmp_9;
  a14 = v14;
  dispatch_async(v15, &block);
  __cxa_rethrow();
}

void sub_19EA145F4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<QMIControl *,QMIControl::Deleter,std::allocator<QMIControl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<QMIControl *,QMIControl::Deleter,std::allocator<QMIControl>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(NSObject **)(v1 + 88);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN10QMIControl7DeleterclEPS__block_invoke;
  block[3] = &__block_descriptor_tmp_9;
  block[4] = v1;
  dispatch_async(v2, block);
}

uint64_t std::__shared_ptr_pointer<QMIControl *,QMIControl::Deleter,std::allocator<QMIControl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000019EA1F7D6)
    return a1 + 24;
  if (((v3 & 0x800000019EA1F7D6 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000019EA1F7D6))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000019EA1F7D6 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::DataFormat>::getSize()
{
  return tlv::size<ctl::tlv::DataFormat>();
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::DataFormat>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<ctl::tlv::DataFormat>();
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<ctl::tlv::DataFormat>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E4154AE0;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::LinkLayerProtocol>::getSize()
{
  return tlv::size<ctl::tlv::LinkLayerProtocol>();
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::LinkLayerProtocol>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<ctl::tlv::LinkLayerProtocol>();
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<ctl::tlv::LinkLayerProtocol>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E4154B30;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::ServiceType>::getSize()
{
  return tlv::size<ctl::tlv::ServiceType>();
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::ServiceType>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<ctl::tlv::ServiceType>();
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<ctl::tlv::ServiceType>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E4154B80;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::AssignedId>::getSize()
{
  return tlv::size<ctl::tlv::AssignedId>();
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::AssignedId>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<ctl::tlv::AssignedId>();
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<ctl::tlv::AssignedId>::clone(uint64_t a1)
{
  char *result;

  result = (char *)operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E4154BD0;
  *(_WORD *)(result + 9) = *(_WORD *)(a1 + 9);
  return result;
}

char *qmi::MutableMessageBase::createTLV<ctl::tlv::PowerSaveDescriptor>(_QWORD *a1)
{
  _BYTE *v2;
  _BYTE *v3;
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v2 = operator new(0x18uLL);
  v3 = v2;
  v2[8] = 1;
  *((_DWORD *)v2 + 3) = 0;
  v4 = v2 + 12;
  *(_QWORD *)v2 = off_1E4154C20;
  v2[16] = 0;
  v6 = (char *)a1[2];
  v5 = a1[3];
  v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *(_QWORD *)v6 = v2;
    v8 = (uint64_t)(v6 + 8);
    goto LABEL_23;
  }
  v9 = (char *)a1[1];
  v10 = (v6 - v9) >> 3;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v12 = v5 - (_QWORD)v9;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v14 = (char *)operator new(8 * v13);
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = v3;
    v8 = (uint64_t)(v15 + 8);
    v17 = (char *)(v6 - v9);
    if (v6 == v9)
      goto LABEL_21;
    goto LABEL_14;
  }
  v14 = 0;
  v15 = (char *)(8 * v10);
  v16 = 0;
  *(_QWORD *)(8 * v10) = v3;
  v8 = 8 * v10 + 8;
  v17 = (char *)(v6 - v9);
  if (v6 != v9)
  {
LABEL_14:
    v18 = (unint64_t)(v17 - 8);
    if (v18 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v9 - v14) < 0x20)
      goto LABEL_28;
    v19 = (v18 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = &v6[-v20];
    v15 -= v20;
    v21 = &v14[8 * v10 - 16];
    v22 = (__int128 *)(v6 - 16);
    v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v25 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *((_QWORD *)v15 - 1) = v25;
        v15 -= 8;
      }
      while (v7 != v9);
    }
    v7 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v15;
  a1[2] = v8;
  a1[3] = v16;
  if (v7)
    operator delete(v7);
LABEL_23:
  a1[2] = v8;
  return v4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::PowerSaveDescriptor>::getSize()
{
  return tlv::size<ctl::tlv::PowerSaveDescriptor>();
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::PowerSaveDescriptor>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<ctl::tlv::PowerSaveDescriptor>();
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<ctl::tlv::PowerSaveDescriptor>::clone(uint64_t a1)
{
  char *result;

  result = (char *)operator new(0x18uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E4154C20;
  *(_QWORD *)(result + 12) = *(_QWORD *)(a1 + 12);
  return result;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<ctl::tlv::IndicationSet>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E4154C70;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<ctl::tlv::IndicationSet>::~TlvWrapper(_QWORD *__p)
{
  void *v2;

  *__p = &off_1E4154C70;
  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::IndicationSet>::getSize()
{
  return tlv::size<ctl::tlv::IndicationSet>();
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::IndicationSet>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<ctl::tlv::IndicationSet>();
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<ctl::tlv::IndicationSet>::clone(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = operator new(0x28uLL);
  v2[8] = *(_BYTE *)(a1 + 8);
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E4154C70;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = 0;
  v4 = *(_BYTE **)(a1 + 16);
  v3 = *(_BYTE **)(a1 + 24);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 2) = v6;
    v7 = &v6[2 * (v5 >> 1)];
    *((_QWORD *)v2 + 4) = v7;
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 3) = v7;
  }
  return v2;
}

void sub_19EA14D4C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<ctl::tlv::IndicationSetExt>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E4154CC0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<ctl::tlv::IndicationSetExt>::~TlvWrapper(_QWORD *__p)
{
  void *v2;

  *__p = &off_1E4154CC0;
  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::IndicationSetExt>::getSize()
{
  return tlv::size<ctl::tlv::IndicationSetExt>();
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::IndicationSetExt>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<ctl::tlv::IndicationSetExt>();
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<ctl::tlv::IndicationSetExt>::clone(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = operator new(0x28uLL);
  v2[8] = *(_BYTE *)(a1 + 8);
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E4154CC0;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = 0;
  v4 = *(_BYTE **)(a1 + 16);
  v3 = *(_BYTE **)(a1 + 24);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 2) = v6;
    v7 = &v6[2 * (v5 >> 1)];
    *((_QWORD *)v2 + 4) = v7;
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 3) = v7;
  }
  return v2;
}

void sub_19EA14EE0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::PowerSaveState>::getSize()
{
  return tlv::size<ctl::tlv::PowerSaveState>();
}

uint64_t qmi::MutableMessageBase::TlvWrapper<ctl::tlv::PowerSaveState>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<ctl::tlv::PowerSaveState>();
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<ctl::tlv::PowerSaveState>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E4154D10;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void QMIControl::dumpState_sync(void)const::$_0::operator()(std::string *a1, unsigned __int8 *a2)
{
  std::string *v4;
  __int128 v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  BOOL v10;
  std::string *v11;
  std::string::size_type size;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::string *p_p;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  std::string __p;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;

  std::to_string(&v21, *a2);
  v4 = std::string::append(&v21, ": [", 3uLL);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
  v7 = a2 + 16;
  memset(&__p, 0, sizeof(__p));
  if (v6 == v7)
    goto LABEL_30;
  std::to_string(&v24, *((unsigned __int16 *)v6 + 13));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    __p = v24;
    v8 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
    if (!v8)
      goto LABEL_8;
  }
  else
  {
    __p = v24;
    v8 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
    if (!v8)
    {
      do
      {
LABEL_8:
        v9 = (unsigned __int8 *)*((_QWORD *)v6 + 2);
        v10 = *(_QWORD *)v9 == (_QWORD)v6;
        v6 = v9;
      }
      while (!v10);
      goto LABEL_10;
    }
  }
  do
  {
    v9 = v8;
    v8 = *(unsigned __int8 **)v8;
  }
  while (v8);
LABEL_10:
  if (v9 != v7)
  {
    do
    {
      *((_BYTE *)&v24.__r_.__value_.__s + 23) = 1;
      LOWORD(v24.__r_.__value_.__l.__data_) = 44;
      std::string::append(&__p, (const std::string::value_type *)&v24, 1uLL);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      std::to_string(&v24, *((unsigned __int16 *)v9 + 13));
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = &v24;
      else
        v11 = (std::string *)v24.__r_.__value_.__r.__words[0];
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
      else
        size = v24.__r_.__value_.__l.__size_;
      std::string::append(&__p, (const std::string::value_type *)v11, size);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v24.__r_.__value_.__l.__data_);
        v13 = (unsigned __int8 *)*((_QWORD *)v9 + 1);
        if (v13)
        {
          do
          {
LABEL_25:
            v14 = v13;
            v13 = *(unsigned __int8 **)v13;
          }
          while (v13);
          goto LABEL_12;
        }
      }
      else
      {
        v13 = (unsigned __int8 *)*((_QWORD *)v9 + 1);
        if (v13)
          goto LABEL_25;
      }
      do
      {
        v14 = (unsigned __int8 *)*((_QWORD *)v9 + 2);
        v10 = *(_QWORD *)v14 == (_QWORD)v9;
        v9 = v14;
      }
      while (!v10);
LABEL_12:
      v9 = v14;
    }
    while (v14 != v7);
  }
LABEL_30:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v16 = __p.__r_.__value_.__l.__size_;
  v17 = std::string::append(&v22, (const std::string::value_type *)p_p, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v23, "]", 1uLL);
  *a1 = *v19;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v23.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_38:
      if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_39;
      goto LABEL_43;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_38;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_39:
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_44:
    operator delete(v21.__r_.__value_.__l.__data_);
    return;
  }
LABEL_43:
  operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_44;
}

void sub_19EA15244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>,std::__map_value_compare<qmi::ServiceType,std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>,std::less<qmi::ServiceType>,true>,std::allocator<std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>>>::destroy(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;

  if (a1)
  {
    std::__tree<std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>,std::__map_value_compare<qmi::ServiceType,std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>,std::less<qmi::ServiceType>,true>,std::allocator<std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>>>::destroy(*a1);
    std::__tree<std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>,std::__map_value_compare<qmi::ServiceType,std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>,std::less<qmi::ServiceType>,true>,std::allocator<std::__value_type<qmi::ServiceType,std::vector<std::weak_ptr<qmi::QMuxClientIface>>>>>::destroy(a1[1]);
    v2 = a1[5];
    if (v2)
    {
      v3 = a1[6];
      v4 = (void *)a1[5];
      if (v3 != v2)
      {
        do
        {
          v5 = *(std::__shared_weak_count **)(v3 - 8);
          if (v5)
            std::__shared_weak_count::__release_weak(v5);
          v3 -= 16;
        }
        while (v3 != v2);
        v4 = (void *)a1[5];
      }
      a1[6] = v2;
      operator delete(v4);
    }
    operator delete(a1);
  }
}

uint64_t *GetOsLogContext(void)
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1ED710240);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1ED710240))
  {
    qword_1ED710260 = 0;
    qword_1ED710258 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &qword_1ED710258, &dword_19E9C8000);
    __cxa_guard_release(&qword_1ED710240);
  }
  if (_MergedGlobals_1 != -1)
    dispatch_once(&_MergedGlobals_1, &__block_literal_global_0);
  return &qword_1ED710258;
}

void ___Z15GetOsLogContextv_block_invoke()
{
  _BYTE v0[16];

  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v0, "com.apple.telephony.abm", "global");
  ctu::OsLogContext::operator=();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v0);
}

void *GetGlobalLogger(uint64_t *a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[5];
  std::__shared_weak_count *v11;

  v2 = atomic_load((unsigned __int8 *)&qword_1ED710250);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1ED710250))
  {
    MEMORY[0x1A1AEAF1C](&unk_1ED710268);
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3788], &unk_1ED710268, &dword_19E9C8000);
    __cxa_guard_release(&qword_1ED710250);
  }
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1174405120;
  v10[2] = ___Z15GetGlobalLoggerNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v10[3] = &__block_descriptor_tmp_3;
  v3 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  v10[4] = v3;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (qword_1ED710248 != -1)
  {
    dispatch_once(&qword_1ED710248, v10);
    v4 = v11;
    if (v11)
      goto LABEL_7;
    return &unk_1ED710268;
  }
  if (!v4)
    return &unk_1ED710268;
LABEL_7:
  v7 = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return &unk_1ED710268;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return &unk_1ED710268;
}

void sub_19EA155A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ED710250);
  _Unwind_Resume(a1);
}

void ___Z15GetGlobalLoggerNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _BYTE v10[16];
  _BYTE v11[48];
  uint64_t v12;
  uint64_t v13;

  v2 = atomic_load((unsigned __int8 *)&qword_1ED710240);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1ED710240))
  {
    qword_1ED710260 = 0;
    qword_1ED710258 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &qword_1ED710258, &dword_19E9C8000);
    __cxa_guard_release(&qword_1ED710240);
  }
  if (_MergedGlobals_1 != -1)
    dispatch_once(&_MergedGlobals_1, &__block_literal_global_0);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v10, (const ctu::OsLogContext *)&qword_1ED710258);
  MEMORY[0x1A1AEAF10](v11, v10, a1 + 32);
  ctu::LoggerCommonBase::operator=();
  v4 = v12;
  v3 = v13;
  if (v13)
  {
    v5 = (unint64_t *)(v13 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)qword_1ED7102A0;
  qword_1ED710298 = v4;
  qword_1ED7102A0 = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  ctu::StaticLogger::~StaticLogger((ctu::StaticLogger *)v11);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
}

void sub_19EA156F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ATCSThreadedIPCDriver::ATCSThreadedIPCDriver(ATCSThreadedIPCDriver *this)
{
  pthread_mutex_t *v2;
  pthread_cond_t *v3;

  *((_BYTE *)this + 8) = 0;
  *(_QWORD *)this = off_1E4154DB8;
  *((_QWORD *)this + 2) = 0;
  v2 = (pthread_mutex_t *)operator new(0x48uLL);
  v2[1].__sig = 0;
  if ((initialized & 1) == 0)
  {
    pthread_key_create((pthread_key_t *)&threadInfoKey, 0);
    initialized = 1;
  }
  pthread_mutex_init(v2, 0);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = v2;
  v3 = (pthread_cond_t *)malloc(0x30uLL);
  *((_QWORD *)this + 5) = v3;
  pthread_cond_init(v3, 0);
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
}

void sub_19EA15828(_Unwind_Exception *a1)
{
  pthread_mutex_t **v1;

  ATCSMutex::~ATCSMutex(v1);
  _Unwind_Resume(a1);
}

uint64_t ATCSThreadedIPCDriver::bootstrapInternal(_opaque_pthread_t *this, int a2)
{
  pthread_mutex_t *v4;
  int v5;
  pthread_mutex_t *v7;

  v4 = *(pthread_mutex_t **)this->__opaque;
  pthread_mutex_lock(v4);
  v4[1].__sig = (uint64_t)pthread_self();
  if (a2)
  {
    v5 = *(_DWORD *)&this->__opaque[32] & 3 ^ 3;
    if ((*(_DWORD *)&this->__opaque[32] & 3) == 0 || v5 == 0)
      ATCSThreadedIPCDriver::startWorkersIfNeeded_nl(this, v5);
  }
  LOBYTE(this->__cleanup_stack) = 1;
  v7 = *(pthread_mutex_t **)this->__opaque;
  pthread_self();
  v7[1].__sig = 0;
  return pthread_mutex_unlock(v7);
}

void sub_19EA158B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  pthread_mutex_t *v3;

  v3 = *(pthread_mutex_t **)(v1 + 16);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

pthread_t ATCSThreadedIPCDriver::startRemainingWorkers_nl(pthread_t this)
{
  int v1;

  v1 = *(_DWORD *)&this->__opaque[32] & 3 ^ 3;
  if ((*(_DWORD *)&this->__opaque[32] & 3) == 0 || v1 == 0)
    return ATCSThreadedIPCDriver::startWorkersIfNeeded_nl(this, v1);
  return this;
}

uint64_t ATCSThreadedIPCDriver::tearDownInternal(ATCSThreadedIPCDriver *this)
{
  pthread_mutex_t *v2;
  pthread_mutex_t *v3;

  v2 = (pthread_mutex_t *)*((_QWORD *)this + 2);
  pthread_mutex_lock(v2);
  v2[1].__sig = (uint64_t)pthread_self();
  ATCSThreadedIPCDriver::stopWorkersInternal(this);
  v3 = (pthread_mutex_t *)*((_QWORD *)this + 2);
  pthread_self();
  v3[1].__sig = 0;
  return pthread_mutex_unlock(v3);
}

void sub_19EA1594C(_Unwind_Exception *a1)
{
  uint64_t v1;
  pthread_mutex_t *v3;

  v3 = *(pthread_mutex_t **)(v1 + 16);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

void ATCSThreadedIPCDriver::stopWorkersInternal(ATCSThreadedIPCDriver *this)
{
  pthread_mutex_t *v2;
  pthread_t v3;
  int v4;
  const char *v5;

  while (1)
  {
    v4 = *((_DWORD *)this + 12);
    *((_DWORD *)this + 14) = v4;
    if ((v4 & 3) == 0 && !*((_DWORD *)this + 13))
      break;
    (*(void (**)(ATCSThreadedIPCDriver *))(*(_QWORD *)this + 96))(this);
    (*(void (**)(ATCSThreadedIPCDriver *))(*(_QWORD *)this + 104))(this);
    v2 = (pthread_mutex_t *)*((_QWORD *)this + 2);
    v3 = pthread_self();
    v2[1].__sig = 0;
    pthread_cond_wait(*((pthread_cond_t **)this + 5), v2);
    v2[1].__sig = (uint64_t)v3;
  }
  pthread_join(*((pthread_t *)this + 3), 0);
  *((_QWORD *)this + 3) = 0;
  pthread_join(*((pthread_t *)this + 4), 0);
  *((_QWORD *)this + 4) = 0;
  v5 = (const char *)*((unsigned int *)this + 12);
  if ((_DWORD)v5)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSThreadedIPCDriver.cpp", (const char *)0x5D, "fRunningWorkers", "==", "kNobody", v5, 0);
}

pthread_t ATCSThreadedIPCDriver::startWorkersIfNeeded_nl(pthread_t result, int a2)
{
  uint64_t v2;
  const char *v3;
  pthread_mutex_t *v4;
  pthread_t v5;

  if (a2)
  {
    v2 = (uint64_t)result;
    v3 = (const char *)*(unsigned int *)&result->__opaque[32];
    if ((_DWORD)v3)
      _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSThreadedIPCDriver.cpp", (const char *)0x4A, "fRunningWorkers", "==", "kNobody", v3, 0);
    *(_DWORD *)(v2 + 52) = 3;
    *(_QWORD *)(v2 + 24) = ATCSThreadSpawn((uint64_t)"atcsfdipc reader", (uint64_t)ATCSThreadedIPCDriver::readWorkerStatic, v2, 0);
    result = ATCSThreadSpawn((uint64_t)"atcsfdipc writer", (uint64_t)ATCSThreadedIPCDriver::writeWorkerStatic, v2, 0);
    for (*(_QWORD *)(v2 + 32) = result; (*(_BYTE *)(v2 + 52) & 3) != 0; v4[1].__sig = (uint64_t)v5)
    {
      v4 = *(pthread_mutex_t **)(v2 + 16);
      v5 = pthread_self();
      v4[1].__sig = 0;
      result = (pthread_t)pthread_cond_wait(*(pthread_cond_t **)(v2 + 40), v4);
    }
  }
  return result;
}

uint64_t ATCSThreadedIPCDriver::startRemainingWorkers(_opaque_pthread_t *this)
{
  pthread_mutex_t *v2;
  int v3;
  pthread_mutex_t *v5;

  v2 = *(pthread_mutex_t **)this->__opaque;
  pthread_mutex_lock(v2);
  v2[1].__sig = (uint64_t)pthread_self();
  v3 = *(_DWORD *)&this->__opaque[32] & 3 ^ 3;
  if ((*(_DWORD *)&this->__opaque[32] & 3) == 0 || v3 == 0)
    ATCSThreadedIPCDriver::startWorkersIfNeeded_nl(this, v3);
  v5 = *(pthread_mutex_t **)this->__opaque;
  pthread_self();
  v5[1].__sig = 0;
  return pthread_mutex_unlock(v5);
}

void sub_19EA15B94(_Unwind_Exception *a1)
{
  uint64_t v1;
  pthread_mutex_t *v3;

  v3 = *(pthread_mutex_t **)(v1 + 16);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

pthread_t ATCSThreadedIPCDriver::startWorkersInternal(ATCSThreadedIPCDriver *this)
{
  const char *v2;
  pthread_t result;
  pthread_mutex_t *v4;
  pthread_t v5;

  v2 = (const char *)*((unsigned int *)this + 12);
  if ((_DWORD)v2)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSThreadedIPCDriver.cpp", (const char *)0x4A, "fRunningWorkers", "==", "kNobody", v2, 0);
  *((_DWORD *)this + 13) = 3;
  *((_QWORD *)this + 3) = ATCSThreadSpawn((uint64_t)"atcsfdipc reader", (uint64_t)ATCSThreadedIPCDriver::readWorkerStatic, (uint64_t)this, 0);
  result = ATCSThreadSpawn((uint64_t)"atcsfdipc writer", (uint64_t)ATCSThreadedIPCDriver::writeWorkerStatic, (uint64_t)this, 0);
  for (*((_QWORD *)this + 4) = result; (*((_BYTE *)this + 52) & 3) != 0; v4[1].__sig = (uint64_t)v5)
  {
    v4 = (pthread_mutex_t *)*((_QWORD *)this + 2);
    v5 = pthread_self();
    v4[1].__sig = 0;
    result = (pthread_t)pthread_cond_wait(*((pthread_cond_t **)this + 5), v4);
  }
  return result;
}

uint64_t ATCSThreadedIPCDriver::readWorkerStatic(ATCSThreadedIPCDriver *this, void *a2)
{
  ATCSThreadedIPCDriver::readWorker(this);
  return 0;
}

uint64_t ATCSThreadedIPCDriver::writeWorkerStatic(ATCSThreadedIPCDriver *this, void *a2)
{
  ATCSThreadedIPCDriver::writeWorker(this);
  return 0;
}

uint64_t ATCSThreadedIPCDriver::readWorker(ATCSThreadedIPCDriver *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  pthread_mutex_t *v4;

  v2 = (pthread_mutex_t *)*((_QWORD *)this + 2);
  pthread_mutex_lock(v2);
  v2[1].__sig = (uint64_t)pthread_self();
  LODWORD(v3) = *((_QWORD *)this + 6) | 1;
  HIDWORD(v3) = (*((_QWORD *)this + 6) & 0xFFFFFFFEFFFFFFFELL) >> 32;
  *((_QWORD *)this + 6) = v3;
  pthread_cond_broadcast(*((pthread_cond_t **)this + 5));
  (*(void (**)(ATCSThreadedIPCDriver *, uint64_t))(*(_QWORD *)this + 88))(this, 1);
  *((_DWORD *)this + 12) &= ~1u;
  *((_DWORD *)this + 14) &= ~1u;
  pthread_cond_broadcast(*((pthread_cond_t **)this + 5));
  v4 = (pthread_mutex_t *)*((_QWORD *)this + 2);
  pthread_self();
  v4[1].__sig = 0;
  pthread_mutex_unlock(v4);
  return 0;
}

void sub_19EA15D64(_Unwind_Exception *a1)
{
  uint64_t v1;
  pthread_mutex_t *v3;

  v3 = *(pthread_mutex_t **)(v1 + 16);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t ATCSThreadedIPCDriver::writeWorker(ATCSThreadedIPCDriver *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  pthread_mutex_t *v4;

  v2 = (pthread_mutex_t *)*((_QWORD *)this + 2);
  pthread_mutex_lock(v2);
  v2[1].__sig = (uint64_t)pthread_self();
  LODWORD(v3) = *((_QWORD *)this + 6) | 2;
  HIDWORD(v3) = (*((_QWORD *)this + 6) & 0xFFFFFFFDFFFFFFFDLL) >> 32;
  *((_QWORD *)this + 6) = v3;
  pthread_cond_broadcast(*((pthread_cond_t **)this + 5));
  (*(void (**)(ATCSThreadedIPCDriver *, uint64_t))(*(_QWORD *)this + 80))(this, 2);
  *((_DWORD *)this + 12) &= ~2u;
  *((_DWORD *)this + 14) &= ~2u;
  pthread_cond_broadcast(*((pthread_cond_t **)this + 5));
  v4 = (pthread_mutex_t *)*((_QWORD *)this + 2);
  pthread_self();
  v4[1].__sig = 0;
  pthread_mutex_unlock(v4);
  return 0;
}

void sub_19EA15E28(_Unwind_Exception *a1)
{
  uint64_t v1;
  pthread_mutex_t *v3;

  v3 = *(pthread_mutex_t **)(v1 + 16);
  pthread_self();
  v3[1].__sig = 0;
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

uint64_t *sGetWeakPtr(void)
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&_MergedGlobals_2);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&_MergedGlobals_2))
    return &qword_1ED7102B0;
  __cxa_atexit((void (*)(void *))std::weak_ptr<ATCSRouterIPCDriver>::~weak_ptr, &qword_1ED7102B0, &dword_19E9C8000);
  __cxa_guard_release(&_MergedGlobals_2);
  return &qword_1ED7102B0;
}

uint64_t std::weak_ptr<ATCSRouterIPCDriver>::~weak_ptr(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void ATCSRouterIPCDriver::create(uint64_t *a1@<X0>, std::__shared_weak_count **a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  NSObject *shared_owners;
  _QWORD block[5];

  v4 = (std::__shared_weak_count *)operator new(0x98uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E4155058;
  v6 = v4 + 1;
  ATCSRouterIPCDriver::ATCSRouterIPCDriver((uint64_t)&v4[1], a1);
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E41550A8;
  v7 = (std::__shared_weak_count *)v4[2].__vftable;
  if (v7)
  {
    if (v7->__shared_owners_ != -1)
      goto LABEL_14;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    v4[1].__shared_weak_owners_ = (uint64_t)v6;
    v4[2].__vftable = (std::__shared_weak_count_vtbl *)v4;
    std::__shared_weak_count::__release_weak(v7);
  }
  else
  {
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v12 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v4[1].__shared_weak_owners_ = (uint64_t)v6;
    v4[2].__vftable = (std::__shared_weak_count_vtbl *)v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_14:
  shared_owners = v4[2].__shared_owners_;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN19ATCSRouterIPCDriver4initEv_block_invoke;
  block[3] = &__block_descriptor_tmp_11;
  block[4] = v4 + 1;
  dispatch_sync(shared_owners, block);
  *a2 = v6;
  a2[1] = v4;
}

void sub_19EA16048(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void ATCSRouterIPCDriver::init(ATCSRouterIPCDriver *this)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *((_QWORD *)this + 4);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN19ATCSRouterIPCDriver4initEv_block_invoke;
  block[3] = &__block_descriptor_tmp_11;
  block[4] = this;
  dispatch_sync(v1, block);
}

uint64_t ATCSRouterIPCDriver::ATCSRouterIPCDriver(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  dispatch_queue_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = off_1E4154E70;
  v4 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  v5 = dispatch_queue_create("ATCSRouterIPCDriver", v4);
  v7 = *a2;
  v6 = a2[1];
  *(_QWORD *)(a1 + 40) = *a2;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v7 = *(_QWORD *)(a1 + 40);
  }
  v10 = **(unsigned int **)(v7 + 16);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  if ((_DWORD)v10)
  {
    v11 = (char *)operator new(8 * v10);
    *(_QWORD *)(a1 + 64) = v11;
    *(_QWORD *)(a1 + 80) = &v11[8 * v10];
    bzero(v11, 8 * v10);
    *(_QWORD *)(a1 + 72) = &v11[8 * v10];
  }
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  v16 = 0;
  v12 = (*(uint64_t (**)(_QWORD, unint64_t *))(**(_QWORD **)(v7 + 24) + 88))(*(_QWORD *)(v7 + 24), &v16);
  v13 = a2[2];
  v14 = v16;
  if (v13 < v16)
    v14 = a2[2];
  if (!v12)
    v13 = v14;
  *(_QWORD *)(a1 + 56) = v13;
  return a1;
}

void sub_19EA161E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v2);
  v4 = *(std::__shared_weak_count **)(v1 + 24);
  if (!v4)
    _Unwind_Resume(a1);
  std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(a1);
}

void ATCSRouterIPCDriver::~ATCSRouterIPCDriver(dispatch_object_t *this)
{
  ATCSRouterIPCDriver *v2;
  uint64_t v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *this = (dispatch_object_t)off_1E4154E70;
  dispatch_release(this[4]);
  v2 = (ATCSRouterIPCDriver *)this[14];
  if (v2 == (ATCSRouterIPCDriver *)(this + 11))
  {
    v3 = 4;
    v2 = (ATCSRouterIPCDriver *)(this + 11);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  v4 = this[8];
  if (v4)
  {
    this[9] = v4;
    operator delete(v4);
  }
  v5 = (std::__shared_weak_count *)this[6];
  if (!v5)
    goto LABEL_12;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = (std::__shared_weak_count *)this[3];
    if (!v8)
      return;
  }
  else
  {
LABEL_12:
    v8 = (std::__shared_weak_count *)this[3];
    if (!v8)
      return;
  }
  std::__shared_weak_count::__release_weak(v8);
}

{
  ATCSRouterIPCDriver *v2;
  uint64_t v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *this = (dispatch_object_t)off_1E4154E70;
  dispatch_release(this[4]);
  v2 = (ATCSRouterIPCDriver *)this[14];
  if (v2 == (ATCSRouterIPCDriver *)(this + 11))
  {
    v3 = 4;
    v2 = (ATCSRouterIPCDriver *)(this + 11);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  v4 = this[8];
  if (v4)
  {
    this[9] = v4;
    operator delete(v4);
  }
  v5 = (std::__shared_weak_count *)this[6];
  if (!v5)
    goto LABEL_12;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = (std::__shared_weak_count *)this[3];
    if (!v8)
      return;
  }
  else
  {
LABEL_12:
    v8 = (std::__shared_weak_count *)this[3];
    if (!v8)
      return;
  }
  std::__shared_weak_count::__release_weak(v8);
}

{
  ATCSRouterIPCDriver *v2;
  uint64_t v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *this = (dispatch_object_t)off_1E4154E70;
  dispatch_release(this[4]);
  v2 = (ATCSRouterIPCDriver *)this[14];
  if (v2 == (ATCSRouterIPCDriver *)(this + 11))
  {
    v3 = 4;
    v2 = (ATCSRouterIPCDriver *)(this + 11);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  v4 = this[8];
  if (v4)
  {
    this[9] = v4;
    operator delete(v4);
  }
  v5 = (std::__shared_weak_count *)this[6];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v8 = (std::__shared_weak_count *)this[3];
      if (!v8)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  v8 = (std::__shared_weak_count *)this[3];
  if (v8)
LABEL_13:
    std::__shared_weak_count::__release_weak(v8);
LABEL_14:
  operator delete(this);
}

void ___ZN19ATCSRouterIPCDriver4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  int v13;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = atomic_load((unsigned __int8 *)&_MergedGlobals_2);
  if ((v2 & 1) == 0)
  {
    v12 = *(_QWORD *)(a1 + 32);
    v13 = __cxa_guard_acquire(&_MergedGlobals_2);
    v1 = v12;
    if (v13)
    {
      __cxa_atexit((void (*)(void *))std::weak_ptr<ATCSRouterIPCDriver>::~weak_ptr, &qword_1ED7102B0, &dword_19E9C8000);
      __cxa_guard_release(&_MergedGlobals_2);
      v1 = v12;
    }
  }
  v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (!v3 || (v4 = *(_QWORD *)(v1 + 16), (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  v9 = (std::__shared_weak_count *)qword_1ED7102B8;
  qword_1ED7102B0 = v4;
  qword_1ED7102B8 = (uint64_t)v6;
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void ATCSRouterIPCDriver::setCallback_sync(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;

  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a3) = a2;
  v3 = mav_router_service_register_receive();
  if (v3)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSRouterIPCDriver.cpp", (const char *)0x52, "result", "==", "MAV_ROUTER_SUCCESS", (const char *)v3, 0);
  v4 = mav_router_service_register_error_handler();
  if (v4)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSRouterIPCDriver.cpp", (const char *)0x58, "result", "==", "MAV_ROUTER_SUCCESS", (const char *)v4, 0);
}

uint64_t ATCSRouterIPCDriver::handleError(int a1, int a2, char *__s)
{
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  std::__shared_weak_count *v10;
  NSObject *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v21[5];
  std::__shared_weak_count *v22;
  std::string __p;
  unint64_t v24;
  unint64_t v25;
  std::string __dst;

  memset(&__dst, 170, sizeof(__dst));
  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
    p_dst = &__dst;
    if (!v4)
      goto LABEL_9;
  }
  memcpy(p_dst, __s, v5);
LABEL_9:
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  v24 = 0xAAAAAAAAAAAAAAAALL;
  v25 = 0xAAAAAAAAAAAAAAAALL;
  v9 = atomic_load((unsigned __int8 *)&_MergedGlobals_2);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_2))
  {
    __cxa_atexit((void (*)(void *))std::weak_ptr<ATCSRouterIPCDriver>::~weak_ptr, &qword_1ED7102B0, &dword_19E9C8000);
    __cxa_guard_release(&_MergedGlobals_2);
  }
  v24 = 0;
  v25 = 0;
  if (qword_1ED7102B8)
  {
    v10 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_1ED7102B8);
    v25 = (unint64_t)v10;
    if (!v10)
      goto LABEL_29;
    v24 = qword_1ED7102B0;
    if (qword_1ED7102B0)
    {
      v11 = *(NSObject **)(qword_1ED7102B0 + 32);
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 1174405120;
      v21[2] = ___ZN19ATCSRouterIPCDriver11handleErrorEP24mav_router_context_tag_t20mav_router_channel_tPKcPv_block_invoke;
      v21[3] = &__block_descriptor_tmp_8_2;
      v21[4] = qword_1ED7102B0;
      v22 = v10;
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        __p = __dst;
      dispatch_async(v11, v21);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v14 = v22;
      if (v22)
      {
        v15 = (unint64_t *)&v22->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
  }
  v17 = (std::__shared_weak_count *)v25;
  if (v25)
  {
    v18 = (unint64_t *)(v25 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return 0;
      goto LABEL_32;
    }
  }
LABEL_29:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return 0;
LABEL_32:
  operator delete(__dst.__r_.__value_.__l.__data_);
  return 0;
}

void sub_19EA168FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  void *v11;
  va_list va;

  va_start(va, a10);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v10);
  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100]((uint64_t)va);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void ___ZN19ATCSRouterIPCDriver11handleErrorEP24mav_router_context_tag_t20mav_router_channel_tPKcPv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  size_t v4;
  void *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__dst[2];
  unint64_t v11;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 120) || !*(_QWORD *)(v1 + 112))
    return;
  v3 = (const char *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    v3 = *(const char **)v3;
  v4 = strlen(v3);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = v5;
    v11 = v8 | 0x8000000000000000;
    __dst[0] = v6;
  }
  else
  {
    HIBYTE(v11) = v4;
    v6 = __dst;
    if (!v4)
      goto LABEL_14;
  }
  memmove(v6, v3, (size_t)v5);
LABEL_14:
  *((_BYTE *)v5 + (_QWORD)v6) = 0;
  v9 = *(_QWORD *)(v1 + 112);
  if (!v9)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v9 + 48))(v9, __dst);
  if (SHIBYTE(v11) < 0)
    operator delete(__dst[0]);
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 120) = 1;
}

void sub_19EA16A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c47_ZTSNSt3__110shared_ptrI19ATCSRouterIPCDriverEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v2;
  unint64_t *v3;
  unint64_t v4;
  std::string *v5;
  __int128 v6;

  v2 = *(_QWORD *)(a2 + 40);
  a1[1].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 32);
  a1[1].__r_.__value_.__r.__words[2] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 48);
    v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_19EA16AD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<qmi::ClientProxy::State>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c47_ZTSNSt3__110shared_ptrI19ATCSRouterIPCDriverEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    v2 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v2)
      return;
  }
  else
  {
    v2 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v2)
      return;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void ATCSRouterIPCDriver::registerDispatcher(ATCSRouterIPCDriver *this, ATCSDispatcherCallback *a2, void *a3, void **a4)
{
  NSObject *v4;
  _QWORD block[7];

  *a4 = a3;
  v4 = *((_QWORD *)this + 4);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN19ATCSRouterIPCDriver18registerDispatcherEP22ATCSDispatcherCallbackPvRS2__block_invoke;
  block[3] = &__block_descriptor_tmp_9;
  block[4] = this;
  block[5] = a3;
  block[6] = a2;
  dispatch_sync(v4, block);
}

void ___ZN19ATCSRouterIPCDriver18registerDispatcherEP22ATCSDispatcherCallbackPvRS2__block_invoke(_QWORD *a1)
{
  unsigned int v1;
  unsigned int v2;

  *(_QWORD *)(*(_QWORD *)(a1[4] + 64) + 8 * a1[5]) = a1[6];
  v1 = mav_router_service_register_receive();
  if (v1)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSRouterIPCDriver.cpp", (const char *)0x52, "result", "==", "MAV_ROUTER_SUCCESS", (const char *)v1, 0);
  v2 = mav_router_service_register_error_handler();
  if (v2)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSRouterIPCDriver.cpp", (const char *)0x58, "result", "==", "MAV_ROUTER_SUCCESS", (const char *)v2, 0);
}

void ATCSRouterIPCDriver::unregisterDispatcher(ATCSRouterIPCDriver *this, ATCSDispatcherCallback *a2, void **a3)
{
  NSObject *v3;
  _QWORD v4[6];

  v3 = *((_QWORD *)this + 4);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZN19ATCSRouterIPCDriver20unregisterDispatcherEP22ATCSDispatcherCallbackRPv_block_invoke;
  v4[3] = &__block_descriptor_tmp_10_3;
  v4[4] = this;
  v4[5] = a3;
  dispatch_sync(v3, v4);
}

void ___ZN19ATCSRouterIPCDriver20unregisterDispatcherEP22ATCSDispatcherCallbackRPv_block_invoke(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 8 * **(_QWORD **)(a1 + 40)) = 0;
  v1 = mav_router_service_register_receive();
  if (v1)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSRouterIPCDriver.cpp", (const char *)0x52, "result", "==", "MAV_ROUTER_SUCCESS", (const char *)v1, 0);
  v2 = mav_router_service_register_error_handler();
  if (v2)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/Common/IPCDriver/ATCSRouterIPCDriver.cpp", (const char *)0x58, "result", "==", "MAV_ROUTER_SUCCESS", (const char *)v2, 0);
}

void ATCSRouterIPCDriver::setErrorHandler(uint64_t a1, _QWORD *a2)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v7[5];
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = *(NSObject **)(a1 + 32);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN19ATCSRouterIPCDriver15setErrorHandlerENSt3__18functionIFvNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_16_1;
  v7[4] = a1;
  v3 = v8;
  v4 = (_QWORD *)a2[3];
  if (!v4)
  {
    v9 = 0;
    dispatch_sync(v2, v7);
    v5 = v9;
    if (v9 != v8)
      goto LABEL_6;
LABEL_9:
    v6 = 4;
    goto LABEL_10;
  }
  if (v4 == a2)
  {
    v9 = v8;
    (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v8);
    dispatch_sync(v2, v7);
    v5 = v9;
    if (v9 != v8)
      goto LABEL_6;
    goto LABEL_9;
  }
  v9 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
  dispatch_sync(v2, v7);
  v5 = v9;
  if (v9 == v8)
    goto LABEL_9;
LABEL_6:
  if (!v5)
    return;
  v6 = 5;
  v3 = v5;
LABEL_10:
  (*(void (**)(_QWORD *))(*v3 + 8 * v6))(v3);
}

void sub_19EA17120(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t __copy_helper_block_e8_40c84_ZTSNSt3__18functionIFvNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a2 + 64);
  if (result)
  {
    if (result == a2 + 40)
    {
      *(_QWORD *)(a1 + 64) = a1 + 40;
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 64) + 24))(*(_QWORD *)(a2 + 64), a1 + 40);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(a1 + 64) = result;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 64) = 0;
  }
  return result;
}

uint64_t __destroy_helper_block_e8_40c84_ZTSNSt3__18functionIFvNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEE(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 40;
  result = *(_QWORD *)(a1 + 64);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t ATCSRouterIPCDriver::resetErrorState(uint64_t this)
{
  *(_BYTE *)(this + 120) = 0;
  return this;
}

void __copy_helper_block_e8_32r40r(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 32), *(const void **)(a2 + 32), 8);
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 8);
}

void __destroy_helper_block_e8_32r40r(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 8);
  _Block_object_dispose(*(const void **)(a1 + 32), 8);
}

void std::__shared_ptr_emplace<ATCSRouterIPCDriverWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E4155058;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ATCSRouterIPCDriverWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E4155058;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<ATCSRouterIPCDriverWrapper>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ATCSRouterIPCDriverWrapper::~ATCSRouterIPCDriverWrapper(dispatch_object_t *this)
{
  ATCSRouterIPCDriverWrapper *v2;
  uint64_t v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *this = (dispatch_object_t)off_1E4154E70;
  dispatch_release(this[4]);
  v2 = (ATCSRouterIPCDriverWrapper *)this[14];
  if (v2 == (ATCSRouterIPCDriverWrapper *)(this + 11))
  {
    v3 = 4;
    v2 = (ATCSRouterIPCDriverWrapper *)(this + 11);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  v4 = this[8];
  if (v4)
  {
    this[9] = v4;
    operator delete(v4);
  }
  v5 = (std::__shared_weak_count *)this[6];
  if (!v5)
    goto LABEL_12;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v8 = (std::__shared_weak_count *)this[3];
    if (!v8)
      return;
  }
  else
  {
LABEL_12:
    v8 = (std::__shared_weak_count *)this[3];
    if (!v8)
      return;
  }
  std::__shared_weak_count::__release_weak(v8);
}

{
  ATCSRouterIPCDriverWrapper *v2;
  uint64_t v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *this = (dispatch_object_t)off_1E4154E70;
  dispatch_release(this[4]);
  v2 = (ATCSRouterIPCDriverWrapper *)this[14];
  if (v2 == (ATCSRouterIPCDriverWrapper *)(this + 11))
  {
    v3 = 4;
    v2 = (ATCSRouterIPCDriverWrapper *)(this + 11);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  v4 = this[8];
  if (v4)
  {
    this[9] = v4;
    operator delete(v4);
  }
  v5 = (std::__shared_weak_count *)this[6];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v8 = (std::__shared_weak_count *)this[3];
      if (!v8)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  v8 = (std::__shared_weak_count *)this[3];
  if (v8)
LABEL_13:
    std::__shared_weak_count::__release_weak(v8);
LABEL_14:
  operator delete(this);
}

void ATCSCounted::ATCSCounted(ATCSCounted *this)
{
  *(_QWORD *)this = off_1E4155120;
  *((_DWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_1E4155120;
  *((_DWORD *)this + 2) = 0;
}

void ATCSCounted::~ATCSCounted(ATCSCounted *this)
{
  unsigned int *v1;
  unsigned int v2;
  signed int v3;

  *(_QWORD *)this = off_1E4155120;
  v1 = (unsigned int *)((char *)this + 8);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 - 1515870811, v1));
  if (v2)
  {
    do
      v3 = __ldxr(v1);
    while (__stxr(v3 - 1515870811, v1));
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x27, "atomicAdd(&fRefCount, (int) 0xa5a5a5a5)", "==", "0", (const char *)v3, 0);
  }
}

{
  unsigned int *v1;
  unsigned int v2;
  signed int v3;

  *(_QWORD *)this = off_1E4155120;
  v1 = (unsigned int *)((char *)this + 8);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 - 1515870811, v1));
  if (v2)
  {
    do
      v3 = __ldxr(v1);
    while (__stxr(v3 - 1515870811, v1));
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x27, "atomicAdd(&fRefCount, (int) 0xa5a5a5a5)", "==", "0", (const char *)v3, 0);
  }
}

{
  unsigned int *v2;
  unsigned int v3;
  signed int v4;

  *(_QWORD *)this = off_1E4155120;
  v2 = (unsigned int *)((char *)this + 8);
  do
    v3 = __ldxr(v2);
  while (__stxr(v3 - 1515870811, v2));
  if (v3)
  {
    do
      v4 = __ldxr(v2);
    while (__stxr(v4 - 1515870811, v2));
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x27, "atomicAdd(&fRefCount, (int) 0xa5a5a5a5)", "==", "0", (const char *)v4, 0);
  }
  operator delete(this);
}

void ATCSCounted::incRef(ATCSCounted *this)
{
  unsigned int *v1;
  signed int v2;

  v1 = (unsigned int *)((char *)this + 8);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  if (v2 < 0)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x33, "prevRefCount", ">=", "0", (const char *)v2, 0);
}

{
  unsigned int *v1;
  signed int v2;

  v1 = (unsigned int *)((char *)this + 8);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  if (v2 < 0)
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x33, "prevRefCount", ">=", "0", (const char *)v2, 0);
}

void ATCSCounted::decRef(ATCSCounted *this)
{
  unsigned int *v1;
  int v2;

  v1 = (unsigned int *)((char *)this + 8);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (v2 <= 0)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x3F, "prevRefCount", ">", "0", (const char *)v2, 0);
  }
  else if (this)
  {
    if (v2 == 1)
      (*(void (**)(ATCSCounted *))(*(_QWORD *)this + 8))(this);
  }
}

{
  unsigned int *v1;
  int v2;

  v1 = (unsigned int *)((char *)this + 8);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (v2 <= 0)
  {
    _ATCSException::triggerAssertion((_ATCSException *)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices/ATCommandStudio/AT/Interface/ATDispatcherSupport.cpp", (const char *)0x3F, "prevRefCount", ">", "0", (const char *)v2, 0);
  }
  else if (this)
  {
    if (v2 == 1)
      (*(void (**)(ATCSCounted *))(*(_QWORD *)this + 8))(this);
  }
}

void CallbacksHandler::registerSendCallback(uint64_t **a1, unsigned int a2, void *aBlock)
{
  void *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int v9;
  _WORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  const void *v13;

  if (aBlock)
  {
    v5 = _Block_copy(aBlock);
    v7 = (uint64_t *)(a1 + 1);
    v6 = a1[1];
    if (v6)
      goto LABEL_7;
    goto LABEL_5;
  }
  v5 = 0;
  v7 = (uint64_t *)(a1 + 1);
  v6 = a1[1];
  if (!v6)
  {
LABEL_5:
    v8 = v7;
LABEL_11:
    v10 = operator new(0x30uLL);
    v10[16] = a2;
    *((_QWORD *)v10 + 5) = 0;
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = v8;
    *v7 = (uint64_t)v10;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v10;
    if (v11)
    {
      *a1 = v11;
      v12 = (uint64_t *)*v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v13 = (const void *)*((_QWORD *)v10 + 5);
    *((_QWORD *)v10 + 5) = v5;
    if (!v13)
      return;
LABEL_16:
    _Block_release(v13);
    return;
  }
  while (1)
  {
LABEL_7:
    while (1)
    {
      v8 = v6;
      v9 = *((unsigned __int16 *)v6 + 16);
      if (v9 <= a2)
        break;
      v6 = (uint64_t *)*v8;
      v7 = v8;
      if (!*v8)
        goto LABEL_11;
    }
    if (v9 >= a2)
      break;
    v6 = (uint64_t *)v8[1];
    if (!v6)
    {
      v7 = v8 + 1;
      goto LABEL_11;
    }
  }
  v13 = (const void *)v8[5];
  v8[5] = (uint64_t)v5;
  if (v13)
    goto LABEL_16;
}

void sub_19EA17864(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    _Block_release(v1);
  _Unwind_Resume(exception_object);
}

void CallbacksHandler::deRegisterSendCallback(CallbacksHandler *this, unsigned int a2)
{
  uint64_t *v3;
  char *v4;
  char *v5;
  uint64_t *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t **v9;
  char *v10;
  char *v11;
  char *v12;
  BOOL v13;
  const void *v14;

  v4 = (char *)this + 8;
  v3 = (uint64_t *)*((_QWORD *)this + 1);
  if (v3)
  {
    v5 = v4;
    v6 = v3;
    do
    {
      v7 = *((unsigned __int16 *)v6 + 16);
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t **)v6;
      else
        v9 = (uint64_t **)(v6 + 1);
      if (v8)
        v5 = (char *)v6;
      v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && *((unsigned __int16 *)v5 + 16) <= a2)
    {
      v10 = (char *)*((_QWORD *)v5 + 1);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        v12 = v5;
        do
        {
          v11 = (char *)*((_QWORD *)v12 + 2);
          v13 = *(_QWORD *)v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if (*(char **)this == v5)
        *(_QWORD *)this = v11;
      --*((_QWORD *)this + 2);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v3, (uint64_t *)v5);
      v14 = (const void *)*((_QWORD *)v5 + 5);
      if (v14)
        _Block_release(v14);
      operator delete(v5);
    }
  }
}

void *CallbacksHandler::getSendCallback@<X0>(CallbacksHandler *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  char *v4;
  char **v5;
  char *v6;
  char *v7;
  unsigned int v8;
  BOOL v9;
  char **v10;
  void *result;

  v6 = (char *)*((_QWORD *)this + 1);
  v4 = (char *)this + 8;
  v5 = (char **)v6;
  if (!v6)
    goto LABEL_13;
  v7 = v4;
  do
  {
    v8 = *((unsigned __int16 *)v5 + 16);
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = v5;
    else
      v10 = v5 + 1;
    if (v9)
      v7 = (char *)v5;
    v5 = (char **)*v10;
  }
  while (*v10);
  if (v7 == v4)
  {
LABEL_13:
    result = 0;
    *a3 = 0;
  }
  else if (*((unsigned __int16 *)v7 + 16) <= a2)
  {
    result = (void *)*((_QWORD *)v7 + 5);
    if (result)
      result = _Block_copy(result);
    *a3 = result;
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

uint64_t TelephonyRadiosGetRadioVendor()
{
  return MEMORY[0x1E0DE3678]();
}

uint64_t TelephonyUtilIsCarrierBuild()
{
  return MEMORY[0x1E0DE36B0]();
}

uint64_t TelephonyUtilIsInternalBuild()
{
  return MEMORY[0x1E0DE36B8]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
  MEMORY[0x1E0C80940](a1, a2, *(_QWORD *)&a3);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

uint64_t capabilities::abs::shouldLogSIMSlot(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3038](this);
}

uint64_t capabilities::ipc::supportsPCI(capabilities::ipc *this)
{
  return MEMORY[0x1E0DE3250](this);
}

uint64_t capabilities::radio::supportsDataService(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3328](this);
}

uint64_t capabilities::radio::supportsQMuxSendWindow(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3348](this);
}

uint64_t capabilities::radio::QMuxPendingRequestLimitCount(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3360](this);
}

uint64_t ctu::OsLogLogger::OsLogLogger(ctu::OsLogLogger *this, os_log_s *a2)
{
  return MEMORY[0x1E0DE3728](this, a2);
}

uint64_t ctu::OsLogLogger::OsLogLogger(ctu::OsLogLogger *this, const char *a2, const char *a3)
{
  return MEMORY[0x1E0DE3730](this, a2, a3);
}

uint64_t ctu::OsLogLogger::OsLogLogger()
{
  return MEMORY[0x1E0DE3738]();
}

uint64_t ctu::OsLogLogger::OsLogLogger(ctu::OsLogLogger *this, const ctu::OsLogLogger *a2)
{
  return MEMORY[0x1E0DE3740](this, a2);
}

void ctu::OsLogLogger::~OsLogLogger(ctu::OsLogLogger *this)
{
  MEMORY[0x1E0DE3748](this);
}

uint64_t ctu::OsLogContext::OsLogContext(ctu::OsLogContext *this, const char *a2, const char *a3)
{
  return MEMORY[0x1E0DE3758](this, a2, a3);
}

uint64_t ctu::OsLogContext::OsLogContext(ctu::OsLogContext *this, const ctu::OsLogContext *a2)
{
  return MEMORY[0x1E0DE3760](this, a2);
}

void ctu::OsLogContext::~OsLogContext(ctu::OsLogContext *this)
{
  MEMORY[0x1E0DE3768](this);
}

uint64_t ctu::OsLogContext::operator=()
{
  return MEMORY[0x1E0DE3770]();
}

uint64_t ctu::StaticLogger::StaticLogger()
{
  return MEMORY[0x1E0DE3778]();
}

uint64_t ctu::StaticLogger::StaticLogger(ctu::StaticLogger *this)
{
  return MEMORY[0x1E0DE3780](this);
}

void ctu::StaticLogger::~StaticLogger(ctu::StaticLogger *this)
{
  MEMORY[0x1E0DE3788](this);
}

uint64_t ctu::XpcClientHelper::setServer_internal()
{
  return MEMORY[0x1E0DE37A8]();
}

uint64_t ctu::XpcClientHelper::setServer()
{
  return MEMORY[0x1E0DE37B0]();
}

void ctu::XpcClientHelper::~XpcClientHelper(ctu::XpcClientHelper *this)
{
  MEMORY[0x1E0DE37B8](this);
}

uint64_t ctu::XpcServerHelper::setListener()
{
  return MEMORY[0x1E0DE37C0]();
}

uint64_t ctu::XpcServerHelper::XpcServerHelper()
{
  return MEMORY[0x1E0DE37C8]();
}

void ctu::XpcServerHelper::~XpcServerHelper(ctu::XpcServerHelper *this)
{
  MEMORY[0x1E0DE37D0](this);
}

uint64_t ctu::LogMessageBuffer::str(ctu::LogMessageBuffer *this)
{
  return MEMORY[0x1E0DE37E8](this);
}

uint64_t ctu::LogMessageBuffer::vprintf(ctu::LogMessageBuffer *this, const char *a2, char *a3)
{
  return MEMORY[0x1E0DE37F0](this, a2, a3);
}

uint64_t ctu::LogMessageBuffer::LogMessageBuffer(ctu::LogMessageBuffer *this)
{
  return MEMORY[0x1E0DE37F8](this);
}

void ctu::LogMessageBuffer::~LogMessageBuffer(ctu::LogMessageBuffer *this)
{
  MEMORY[0x1E0DE3800](this);
}

uint64_t ctu::LogMessageBuffer::operator=()
{
  return MEMORY[0x1E0DE3808]();
}

uint64_t ctu::LoggerCommonBase::operator=()
{
  return MEMORY[0x1E0DE3830]();
}

uint64_t ctu::cf::convert_copy(ctu::cf *this, const __CFString **a2, const char *a3, uint64_t a4, const __CFAllocator *a5)
{
  return MEMORY[0x1E0DE3868](this, a2, a3, a4, a5);
}

uint64_t ctu::cf::convert_copy()
{
  return MEMORY[0x1E0DE3870]();
}

uint64_t ctu::hex(ctu *this, const void *a2)
{
  return MEMORY[0x1E0DE3980](this, a2);
}

uint64_t ctu::Gestalt::create_default_global(ctu::Gestalt *this)
{
  return MEMORY[0x1E0DE39C0](this);
}

uint64_t qmi::MessageBase::validateMsgId(qmi::MessageBase *this)
{
  return MEMORY[0x1E0DE2D20](this);
}

uint64_t qmi::MessageBase::MessageBase()
{
  return MEMORY[0x1E0DE2D38]();
}

{
  return MEMORY[0x1E0DE2D48]();
}

uint64_t qmi::MessageBase::MessageBase(qmi::MessageBase *this, const void *a2)
{
  return MEMORY[0x1E0DE2D40](this, a2);
}

void qmi::MessageBase::~MessageBase(qmi::MessageBase *this)
{
  MEMORY[0x1E0DE2D50](this);
}

uint64_t qmi::fixupHeader()
{
  return MEMORY[0x1E0DE2D58]();
}

uint64_t qmi::ResponseBase::ResponseBase(qmi::ResponseBase *this, const void *a2)
{
  return MEMORY[0x1E0DE2D60](this, a2);
}

uint64_t qmi::createRequest()
{
  return MEMORY[0x1E0DE2D78]();
}

uint64_t qmi::isInternalError()
{
  return MEMORY[0x1E0DE2D80]();
}

uint64_t qmi::MutableMessageBase::MutableMessageBase(qmi::MutableMessageBase *this)
{
  return MEMORY[0x1E0DE2DA0](this);
}

void qmi::MutableMessageBase::~MutableMessageBase(qmi::MutableMessageBase *this)
{
  MEMORY[0x1E0DE2DA8](this);
}

uint64_t qmi::parse()
{
  return MEMORY[0x1E0DE2DB8]();
}

{
  return MEMORY[0x1E0DE2DC0]();
}

uint64_t qmi::asString()
{
  return MEMORY[0x1E0DE2DC8]();
}

{
  return MEMORY[0x1E0DE2DD0]();
}

uint64_t tlv::size<ctl::tlv::AssignedId>()
{
  return MEMORY[0x1E0DE2DE8]();
}

uint64_t tlv::size<ctl::tlv::DataFormat>()
{
  return MEMORY[0x1E0DE2DF0]();
}

uint64_t tlv::size<ctl::tlv::ServiceType>()
{
  return MEMORY[0x1E0DE2DF8]();
}

uint64_t tlv::size<ctl::tlv::IndicationSet>()
{
  return MEMORY[0x1E0DE2E00]();
}

uint64_t tlv::size<ctl::tlv::PowerSaveState>()
{
  return MEMORY[0x1E0DE2E08]();
}

uint64_t tlv::size<ctl::tlv::IndicationSetExt>()
{
  return MEMORY[0x1E0DE2E10]();
}

uint64_t tlv::size<ctl::tlv::LinkLayerProtocol>()
{
  return MEMORY[0x1E0DE2E18]();
}

uint64_t tlv::size<ctl::tlv::PowerSaveDescriptor>()
{
  return MEMORY[0x1E0DE2E20]();
}

uint64_t tlv::parseV<ctl::tlv::AssignedId>()
{
  return MEMORY[0x1E0DE2E28]();
}

uint64_t tlv::writeV<ctl::tlv::AssignedId>()
{
  return MEMORY[0x1E0DE2E30]();
}

uint64_t tlv::writeV<ctl::tlv::DataFormat>()
{
  return MEMORY[0x1E0DE2E38]();
}

uint64_t tlv::writeV<ctl::tlv::ServiceType>()
{
  return MEMORY[0x1E0DE2E40]();
}

uint64_t tlv::writeV<ctl::tlv::IndicationSet>()
{
  return MEMORY[0x1E0DE2E48]();
}

uint64_t tlv::writeV<ctl::tlv::PowerSaveState>()
{
  return MEMORY[0x1E0DE2E50]();
}

uint64_t tlv::writeV<ctl::tlv::IndicationSetExt>()
{
  return MEMORY[0x1E0DE2E58]();
}

uint64_t tlv::writeV<ctl::tlv::LinkLayerProtocol>()
{
  return MEMORY[0x1E0DE2E60]();
}

uint64_t tlv::writeV<ctl::tlv::PowerSaveDescriptor>()
{
  return MEMORY[0x1E0DE2E68]();
}

uint64_t xpc::auto_reply::deleter()
{
  return MEMORY[0x1E0DE3A70]();
}

uint64_t xpc::dyn_cast_or_default()
{
  return MEMORY[0x1E0DE3A80]();
}

{
  return MEMORY[0x1E0DE3A90]();
}

{
  return MEMORY[0x1E0DE3AA0]();
}

{
  return MEMORY[0x1E0DE3AA8]();
}

{
  return MEMORY[0x1E0DE3AB8]();
}

uint64_t ctu::XpcServerHelper::getListener(ctu::XpcServerHelper *this)
{
  return MEMORY[0x1E0DE3AD0](this);
}

uint64_t qmi::MessageBase::findTlvValue(qmi::MessageBase *this)
{
  return MEMORY[0x1E0DE2E70](this);
}

uint64_t qmi::MutableMessageBase::serialize(qmi::MutableMessageBase *this)
{
  return MEMORY[0x1E0DE2E78](this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1E0DE4258](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x1E0DE44B8](this, __c);
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1E0DE46B0]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1E0DE46B8]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1E0DE46C8]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1E0DE46D0]();
}

{
  return MEMORY[0x1E0DE4700]();
}

{
  return MEMORY[0x1E0DE4708]();
}

{
  return MEMORY[0x1E0DE4718]();
}

{
  return MEMORY[0x1E0DE4728]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1E0DE47A8]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1E0DE47E0]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1E0DE47E8]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1E0DE48F8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x1E0DE4C50](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x1E0DE4C68](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x1E0DE4C80](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1E0DE4D28]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D58](retstr, *(_QWORD *)&__val);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x1E0DE4DD8](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

void operator delete[](void *__p)
{
  off_1E4151B70(__p);
}

void operator delete(void *__p)
{
  off_1E4151B78(__p);
}

void *__cdecl operator new[](size_t __sz)
{
  return (void *)off_1E4151B80(__sz);
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E4151B88(__sz);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1E0C80A98](lpfunc, obj, lpdso_handle);
}

void __cxa_bad_cast(void)
{
  MEMORY[0x1E0DE5070]();
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE50B0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x1E0DE50D0]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

int __darwin_check_fd_set_overflow(int a1, const void *a2, int a3)
{
  return MEMORY[0x1E0C80AA0](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1E0DE50E0](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C70](*(_QWORD *)&a1);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

void cfmakeraw(termios *a1)
{
  MEMORY[0x1E0C82610](a1);
}

int cfsetspeed(termios *a1, speed_t a2)
{
  return MEMORY[0x1E0C82618](a1, a2);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x1E0C82BC0](object);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BE8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C08](queue, block);
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82C18](queue, context, work);
}

void dispatch_barrier_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82C40](queue, context, work);
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C60](flags, block);
}

BOOL dispatch_data_apply(dispatch_data_t data, dispatch_data_applier_t applier)
{
  return MEMORY[0x1E0C82CA0](data, applier);
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x1E0C82CB0](buffer, size, queue, destructor);
}

size_t dispatch_data_get_size(dispatch_data_t data)
{
  return MEMORY[0x1E0C82CE8](data);
}

dispatch_queue_t dispatch_get_current_queue(void)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82CF8]();
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D10](group, queue, block);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D38](group, queue, block);
}

void dispatch_group_notify_f(dispatch_group_t group, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82D40](group, queue, context, work);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x1E0C82E98](object);
}

void dispatch_retain(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA8](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1E0C83C50]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1E0C83DB8](info);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E68](__size);
}

uint64_t mav_router_service_register_error_handler()
{
  return MEMORY[0x1E0DE6DB8]();
}

uint64_t mav_router_service_register_receive()
{
  return MEMORY[0x1E0DE6DC0]();
}

uint64_t mav_router_service_transmit()
{
  return MEMORY[0x1E0DE6DC8]();
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

void os_release(void *object)
{
  MEMORY[0x1E0C84910](object);
}

int pipe(int a1[2])
{
  return MEMORY[0x1E0C84B10](a1);
}

int pthread_attr_destroy(pthread_attr_t *a1)
{
  return MEMORY[0x1E0C84CB0](a1);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x1E0C84CC8](a1);
}

int pthread_attr_setdetachstate(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x1E0C84CD8](a1, *(_QWORD *)&a2);
}

int pthread_cond_broadcast(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D18](a1);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D20](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x1E0C84D28](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D30](a1);
}

int pthread_cond_timedwait_relative_np(pthread_cond_t *a1, pthread_mutex_t *a2, const timespec *a3)
{
  return MEMORY[0x1E0C84D40](a1, a2, a3);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1E0C84D48](a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1E0C84D50](a1, a2, a3, a4);
}

int pthread_equal(pthread_t a1, pthread_t a2)
{
  return MEMORY[0x1E0C84D80](a1, a2);
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x1E0C84DD8](a1, a2);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1E0C84DE0](a1, a2);
}

int pthread_kill(pthread_t a1, int a2)
{
  return MEMORY[0x1E0C84DF8](a1, *(_QWORD *)&a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1E0C84ED8]();
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1E0C84F18](a1, a2);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1E0C85000](*(_QWORD *)&a1, a2, a3);
}

int select(int a1, fd_set *a2, fd_set *a3, fd_set *a4, timeval *a5)
{
  return MEMORY[0x1E0C85280](*(_QWORD *)&a1, a2, a3, a4, a5);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1E0C855B0](__dst, __src, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1E0C855C0](__s1, __n);
}

int tcgetattr(int a1, termios *a2)
{
  return MEMORY[0x1E0C858B0](*(_QWORD *)&a1, a2);
}

int tcsetattr(int a1, int a2, const termios *a3)
{
  return MEMORY[0x1E0C858C0](*(_QWORD *)&a1, *(_QWORD *)&a2, a3);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1E0C85B98](__str, __size, __format, a4);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1E0C85D40](*(_QWORD *)&__fd, __buf, __nbyte);
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
  MEMORY[0x1E0C85DE0](xarray, value);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C85E00](objects, count);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1E0C85E30](xarray);
}

xpc_object_t xpc_array_get_value(xpc_object_t xarray, size_t index)
{
  return (xpc_object_t)MEMORY[0x1E0C85E90](xarray, index);
}

xpc_object_t xpc_BOOL_create(BOOL value)
{
  return (xpc_object_t)MEMORY[0x1E0C85EF0](value);
}

void xpc_connection_cancel(xpc_connection_t connection)
{
  MEMORY[0x1E0C85F68](connection);
}

xpc_connection_t xpc_connection_create(const char *name, dispatch_queue_t targetq)
{
  return (xpc_connection_t)MEMORY[0x1E0C85F90](name, targetq);
}

xpc_connection_t xpc_connection_create_from_endpoint(xpc_endpoint_t endpoint)
{
  return (xpc_connection_t)MEMORY[0x1E0C85FA0](endpoint);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1E0C85FB0](name, targetq, flags);
}

void xpc_connection_resume(xpc_connection_t connection)
{
  MEMORY[0x1E0C86018](connection);
}

void xpc_connection_send_barrier(xpc_connection_t connection, dispatch_block_t barrier)
{
  MEMORY[0x1E0C86020](connection, barrier);
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
  MEMORY[0x1E0C86030](connection, message);
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
  MEMORY[0x1E0C86038](connection, message, replyq, handler);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
  MEMORY[0x1E0C86080](connection, handler);
}

void xpc_connection_set_target_queue(xpc_connection_t connection, dispatch_queue_t targetq)
{
  MEMORY[0x1E0C860C8](connection, targetq);
}

void xpc_connection_suspend(xpc_connection_t connection)
{
  MEMORY[0x1E0C860E0](connection);
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x1E0C86108](object);
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x1E0C86178](bytes, length);
}

const void *__cdecl xpc_data_get_bytes_ptr(xpc_object_t xdata)
{
  return (const void *)MEMORY[0x1E0C86198](xdata);
}

size_t xpc_data_get_length(xpc_object_t xdata)
{
  return MEMORY[0x1E0C861A8](xdata);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C86208](keys, values, count);
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return (xpc_object_t)MEMORY[0x1E0C86228](original);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C86260](xdict, key);
}

size_t xpc_dictionary_get_count(xpc_object_t xdict)
{
  return MEMORY[0x1E0C86270](xdict);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C862A0](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1E0C862E0](xdict, key);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
  MEMORY[0x1E0C863B8](xdict, key, value);
}

xpc_endpoint_t xpc_endpoint_create(xpc_connection_t connection)
{
  return (xpc_endpoint_t)MEMORY[0x1E0C863F0](connection);
}

BOOL xpc_equal(xpc_object_t object1, xpc_object_t object2)
{
  return MEMORY[0x1E0C86420](object1, object2);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1E0C86520](object);
}

xpc_object_t xpc_int64_create(int64_t value)
{
  return (xpc_object_t)MEMORY[0x1E0C86568](value);
}

int64_t xpc_int64_get_value(xpc_object_t xint)
{
  return MEMORY[0x1E0C86570](xint);
}

xpc_object_t xpc_null_create(void)
{
  return (xpc_object_t)MEMORY[0x1E0C86628]();
}

void xpc_release(xpc_object_t object)
{
  MEMORY[0x1E0C86658](object);
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x1E0C86660](object);
}

