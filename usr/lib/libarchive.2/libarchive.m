uint64_t archive_read_next_header(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 48))();
}

uint64_t archive_entry_pathname_utf8(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0;
  if (!sub_1DB72D154(*a1, (uint64_t)(a1 + 62), &v2))
    return v2;
  if (*__error() == 12)
    sub_1DB730818(1, "No memory");
  return 0;
}

_QWORD *archive_read_new()
{
  _QWORD *v0;
  _QWORD *v1;

  v0 = malloc_type_calloc(1uLL, 0x9E8uLL, 0x10F00401216432EuLL);
  v1 = v0;
  if (v0)
  {
    *v0 = 0x100DEB0C5;
    v0[20] = archive_entry_new2((uint64_t)v0);
    if ((byte_1ECFF6D50 & 1) == 0)
    {
      qword_1ECFF6DA8 = (uint64_t)sub_1DB6F8324;
      unk_1ECFF6DB0 = sub_1DB6F8348;
      qword_1ECFF6DB8 = (uint64_t)sub_1DB6F836C;
      qword_1ECFF6D98 = (uint64_t)sub_1DB6E0500;
      unk_1ECFF6DA0 = sub_1DB6F8388;
      qword_1ECFF6D88 = (uint64_t)sub_1DB6DF554;
      unk_1ECFF6D90 = sub_1DB6E00A8;
      qword_1ECFF6D58 = (uint64_t)sub_1DB6DBEC8;
      unk_1ECFF6D60 = sub_1DB6E6744;
      byte_1ECFF6D50 = 1;
    }
    v1[1] = &qword_1ECFF6D58;
    v1[313] = v1 + 312;
  }
  return v1;
}

_DWORD *archive_entry_new2(uint64_t a1)
{
  _DWORD *result;

  result = malloc_type_calloc(1uLL, 0x4E0uLL, 0x10B0040FA1FE6CFuLL);
  if (result)
  {
    *(_QWORD *)result = a1;
    result[311] = 0;
  }
  return result;
}

uint64_t archive_read_free(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    sub_1DB6DC0F8();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 8) + 8))(v1);
  }
  return result;
}

size_t sub_1DB6DBB60(uint64_t a1, char *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (sub_1DB6E0594((int *)a1, -1073631035, 4, "archive_write_data_block", a5, a6, a7, a8) == -30)
    return -30;
  *(_QWORD *)(a1 + 536) = a4;
  if ((*(_BYTE *)(a1 + 521) & 0x80) != 0)
  {
    result = sub_1DB6FDAF0(a1, a2, a3, v12, v13, v14, v15, v16);
    if ((result & 0x8000000000000000) != 0)
      return result;
  }
  else
  {
    result = sub_1DB6DBC28(a1, a2, a3, v12, v13, v14, v15, v16);
    if ((result & 0x8000000000000000) != 0)
      return result;
  }
  if (result >= a3)
    return 0;
  archive_set_error((_DWORD *)a1, 0, "Too much data: Truncating file at %ju bytes", v18, v19, v20, v21, v22, *(char **)(a1 + 560));
  return -20;
}

uint64_t sub_1DB6DBC28(uint64_t a1, char *__buf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char *v13;
  int v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  off_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  int v25;
  ssize_t v26;
  ssize_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;

  v8 = a3;
  if (a3)
  {
    v9 = a1;
    v10 = *(_QWORD *)(a1 + 560);
    if (!v10 || (*(_DWORD *)(a1 + 532) & 0x80000000) != 0)
    {
      v13 = "Attempt to write to an empty file";
      v14 = 0;
LABEL_8:
      archive_set_error((_DWORD *)a1, v14, v13, a4, a5, a6, a7, a8, v34);
      return -20;
    }
    else
    {
      if ((*(_BYTE *)(a1 + 529) & 0x10) != 0)
      {
        v16 = sub_1DB6FD0E0(a1);
        if (v16)
          return v16;
        v12 = *(int *)(*(_QWORD *)(v9 + 440) + 112);
        v10 = *(_QWORD *)(v9 + 560);
        if (v10 < 0)
        {
LABEL_15:
          v18 = v8;
          while (1)
          {
            if (v12)
            {
              v19 = __buf;
              if (v18 >= 1)
              {
                v19 = __buf;
                do
                {
                  if (*v19)
                    break;
                  ++v19;
                }
                while (v19 < &__buf[v18]);
              }
              v20 = *(_QWORD *)(v9 + 536);
              v21 = v20 + v19 - __buf;
              *(_QWORD *)(v9 + 536) = v21;
              v22 = v18 - (v19 - __buf);
              if (v18 == v19 - __buf)
                return v8;
              v23 = v12 + v12 * (v21 / v12);
              if (v20 + v18 <= v23)
                v24 = v18 - (v19 - __buf);
              else
                v24 = v23 - v21;
              __buf = v19;
              v18 = v22;
            }
            else
            {
              v21 = *(_QWORD *)(v9 + 536);
              v24 = v18;
            }
            v25 = *(_DWORD *)(v9 + 532);
            if (v21 != *(_QWORD *)(v9 + 544))
            {
              if (lseek(v25, v21, 0) < 0)
              {
                v28 = __error();
                archive_set_error((_DWORD *)v9, *v28, "Seek failed", v29, v30, v31, v32, v33, v34);
                return -30;
              }
              *(_QWORD *)(v9 + 544) = *(_QWORD *)(v9 + 536);
              v25 = *(_DWORD *)(v9 + 532);
            }
            v26 = write(v25, __buf, v24);
            if (v26 < 0)
            {
              v14 = *__error();
              v13 = "Write failed";
              a1 = v9;
              goto LABEL_8;
            }
            __buf += v26;
            *(_QWORD *)(v9 + 552) += v26;
            v27 = *(_QWORD *)(v9 + 536) + v26;
            *(_QWORD *)(v9 + 536) = v27;
            *(_QWORD *)(v9 + 544) = v27;
            v18 -= v26;
            if (!v18)
              return v8;
          }
        }
      }
      else
      {
        v12 = 0;
        if (v10 < 0)
          goto LABEL_15;
      }
      v17 = *(_QWORD *)(v9 + 536);
      if (v17 + v8 <= v10)
        goto LABEL_15;
      v8 = v10 - v17;
      if (v10 != v17)
        goto LABEL_15;
    }
  }
  return v8;
}

uint64_t sub_1DB6DBDEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  DIR *v12;
  uint64_t v13;
  int v14;
  int v15;

  result = sub_1DB6E0594((int *)a1, 195932357, 0xFFFF, "archive_read_close", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    if (*(_DWORD *)(a1 + 4) != 0x8000)
      *(_DWORD *)(a1 + 4) = 32;
    v10 = *(_QWORD *)(a1 + 176);
    if (!v10)
      return 0;
    v11 = *(unsigned int *)(v10 + 536);
    if ((v11 & 0x80000000) == 0)
    {
      sub_1DB6F708C(v11, v10, v10 + 424);
      *(_DWORD *)(v10 + 536) = -1;
    }
    v12 = *(DIR **)(v10 + 16);
    if (v12)
    {
      closedir(v12);
      *(_QWORD *)(v10 + 16) = 0;
    }
    while (1)
    {
      v13 = *(_QWORD *)v10;
      if (!*(_QWORD *)v10)
        break;
      if ((*(_BYTE *)(v13 + 72) & 2) != 0)
        close(*(_DWORD *)(v13 + 80));
      sub_1DB6F719C(v10);
    }
    v14 = *(_DWORD *)(v10 + 120);
    if ((v14 & 0x80000000) == 0)
    {
      close(v14);
      *(_DWORD *)(v10 + 120) = -1;
    }
    v15 = *(_DWORD *)(v10 + 116);
    if (v15 < 0)
    {
      return 0;
    }
    else
    {
      close(v15);
      result = 0;
      *(_DWORD *)(v10 + 116) = -1;
    }
  }
  return result;
}

uint64_t sub_1DB6DBEC8(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594(a1, 14594245, 0xFFFF, "archive_read_close", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    if (a1[1] == 32)
    {
      return 0;
    }
    else
    {
      archive_clear_error((uint64_t)a1);
      a1[1] = 32;
      return sub_1DB6DBF70((uint64_t)a1);
    }
  }
  return result;
}

_QWORD *sub_1DB6DBF34(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;

  sub_1DB6DBF70(a1);
  result = *(_QWORD **)(a1 + 1032);
  if (result)
  {
    do
    {
      v3 = (_QWORD *)result[2];
      free(result);
      *(_QWORD *)(a1 + 1032) = v3;
      result = v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_1DB6DBF70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  int v5;

  v1 = *(_QWORD *)(a1 + 1032);
  if (!v1)
    return 0;
  v2 = 0;
  do
  {
    v3 = v1;
    v1 = *(_QWORD *)(v1 + 16);
    if (!*(_BYTE *)(v3 + 177))
    {
      v4 = *(uint64_t (**)(uint64_t))(v3 + 64);
      if (v4)
      {
        v5 = v4(v3);
        *(_BYTE *)(v3 + 177) = 1;
        if (v5 >= (int)v2)
          v2 = v2;
        else
          v2 = v5;
      }
    }
    free(*(void **)(v3 + 112));
    *(_QWORD *)(v3 + 112) = 0;
  }
  while (v1);
  return v2;
}

uint64_t sub_1DB6DBFE8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_QWORD *)(v2 + 224) || !*(_DWORD *)(v2 + 240))
    return 0;
  v3 = 0;
  LODWORD(v4) = 0;
  v5 = 16;
  do
  {
    v6 = (*(uint64_t (**)(uint64_t, _QWORD))(v2 + 224))(v2, *(_QWORD *)(*(_QWORD *)(v2 + 256) + v5));
    if ((int)v4 >= v6)
      v4 = v6;
    else
      v4 = v4;
    ++v3;
    v2 = *(_QWORD *)(a1 + 24);
    v5 += 24;
  }
  while (v3 < *(unsigned int *)(v2 + 240));
  return v4;
}

uint64_t sub_1DB6DC068(uint64_t a1, char *__s)
{
  size_t v4;

  if (__s)
  {
    v4 = strlen(__s);
    *(_DWORD *)(a1 + 96) = 1;
    *(_QWORD *)(a1 + 8) = 0;
    sub_1DB6E323C((uint64_t *)a1, __s, v4);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 56) = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 96) = 0;
  }
  return 0;
}

uint64_t archive_write_free(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    sub_1DB6DC0F8();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 8) + 8))(v1);
  }
  return result;
}

void sub_1DB6DC0F8()
{
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1ECFF6CD0);
  if (qword_1ECFF6C40)
  {
    CFRelease((CFTypeRef)qword_1ECFF6C40);
    qword_1ECFF6C40 = 0;
  }
  byte_1ECFF6BC0 = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ECFF6CD0);
  os_unfair_lock_lock(&stru_1ECFF6C4C);
  if (qword_1ECFF6BD0)
  {
    CFRelease((CFTypeRef)qword_1ECFF6BD0);
    qword_1ECFF6BD0 = 0;
  }
  byte_1ECFF6CD8 = 0;
  os_unfair_lock_unlock(&stru_1ECFF6C4C);
}

uint64_t archive_read_open_memory2(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v54;

  v8 = malloc_type_calloc(1uLL, 0x20uLL, 0x10500404B6A7EA7uLL);
  if (v8)
  {
    v15 = (uint64_t)v8;
    *v8 = a2;
    v8[1] = a2;
    v8[2] = a2 + a3;
    v8[3] = a4;
    archive_read_set_open_callback((uint64_t)a1, (uint64_t)sub_1DB70C364, v9, v10, v11, v12, v13, v14);
    archive_read_set_read_callback((uint64_t)a1, (uint64_t)sub_1DB70C36C, v16, v17, v18, v19, v20, v21);
    archive_read_set_seek_callback((uint64_t)a1, (uint64_t)sub_1DB70C394, v22, v23, v24, v25, v26, v27);
    archive_read_set_skip_callback((uint64_t)a1, (uint64_t)sub_1DB70C3F0, v28, v29, v30, v31, v32, v33);
    archive_read_set_close_callback((uint64_t)a1, (uint64_t)sub_1DB70C418, v34, v35, v36, v37, v38, v39);
    archive_read_set_callback_data((uint64_t)a1, v15, v40, v41, v42, v43, v44, v45);
    return archive_read_open1((uint64_t)a1, v46, v47, v48, v49, v50, v51, v52);
  }
  else
  {
    archive_set_error(a1, 12, "No memory", v10, v11, v12, v13, v14, v54);
    return 4294967266;
  }
}

uint64_t archive_read_open(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (sub_1DB6E0594((int *)a1, 14594245, 1, "archive_read_set_open_callback", a5, a6, a7, a8) != -30)
    *(_QWORD *)(a1 + 192) = a3;
  if (sub_1DB6E0594((int *)a1, 14594245, 1, "archive_read_set_read_callback", v13, v14, v15, v16) != -30)
    *(_QWORD *)(a1 + 200) = a4;
  if (sub_1DB6E0594((int *)a1, 14594245, 1, "archive_read_set_close_callback", v17, v18, v19, v20) != -30)
    *(_QWORD *)(a1 + 224) = a5;
  archive_read_set_callback_data2(a1, a2, 0, v21, v22, v23, v24, v25);
  return archive_read_open1(a1, v26, v27, v28, v29, v30, v31, v32);
}

uint64_t archive_read_set_callback_data2(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  void *v18;
  char *v19;
  _DWORD *v20;
  int v21;
  _QWORD *v22;
  char *v23;

  result = sub_1DB6E0594((int *)a1, 14594245, 1, "archive_read_set_callback_data2", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    v17 = *(_DWORD *)(a1 + 240);
    if (!v17)
    {
      v17 = 1;
      v18 = malloc_type_calloc(1uLL, 0x18uLL, 0x108004098BBCF0FuLL);
      *(_QWORD *)(a1 + 256) = v18;
      if (!v18)
      {
        v19 = "No memory.";
        v20 = (_DWORD *)a1;
        v21 = 12;
LABEL_9:
        archive_set_error(v20, v21, v19, v12, v13, v14, v15, v16, v23);
        return 4294967266;
      }
      *(_DWORD *)(a1 + 240) = 1;
    }
    if (v17 - 1 >= a3)
    {
      result = 0;
      v22 = (_QWORD *)(*(_QWORD *)(a1 + 256) + 24 * a3);
      *v22 = -1;
      v22[1] = -1;
      v22[2] = a2;
      return result;
    }
    v19 = "Invalid index specified.";
    v20 = (_DWORD *)a1;
    v21 = 22;
    goto LABEL_9;
  }
  return result;
}

uint64_t archive_read_set_skip_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594((int *)a1, 14594245, 1, "archive_read_set_skip_callback", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    result = 0;
    *(_QWORD *)(a1 + 208) = a2;
  }
  return result;
}

uint64_t archive_read_set_seek_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594((int *)a1, 14594245, 1, "archive_read_set_seek_callback", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    result = 0;
    *(_QWORD *)(a1 + 216) = a2;
  }
  return result;
}

uint64_t archive_read_set_read_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594((int *)a1, 14594245, 1, "archive_read_set_read_callback", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    result = 0;
    *(_QWORD *)(a1 + 200) = a2;
  }
  return result;
}

uint64_t archive_read_set_open_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594((int *)a1, 14594245, 1, "archive_read_set_open_callback", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    result = 0;
    *(_QWORD *)(a1 + 192) = a2;
  }
  return result;
}

uint64_t archive_read_set_close_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594((int *)a1, 14594245, 1, "archive_read_set_close_callback", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    result = 0;
    *(_QWORD *)(a1 + 224) = a2;
  }
  return result;
}

uint64_t archive_read_set_callback_data(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return archive_read_set_callback_data2(a1, a2, 0, a4, a5, a6, a7, a8);
}

uint64_t sub_1DB6DC574(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  const char *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  mode_t v42;
  int v43;
  __int16 v44;
  int v45;
  int v46;
  char *v47;
  char *v48;
  char *v49;
  unsigned int v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  char *i;
  size_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  _DWORD *v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  const char *v98;
  _DWORD *v99;
  const char *v100;
  _DWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  const char *v106;
  _DWORD *v107;
  uint64_t v108;
  uint64_t v109;
  const void *v110;
  const char *v111;
  _DWORD *v112;
  void *v113;
  const char *v114;
  _DWORD *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  size_t size;
  uint64_t v120;
  uint64_t v121;

  if (sub_1DB6E0594((int *)a1, -1073631035, 6, "archive_write_disk_header", a5, a6, a7, a8) == -30)
    return 4294967266;
  archive_clear_error(a1);
  if ((*(_BYTE *)(a1 + 4) & 4) != 0 && sub_1DB6E6D74(a1, v10, v11, v12, v13, v14, v15, v16) == -30)
    return 4294967266;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 524) = 0;
  v18 = *(void ***)(a1 + 448);
  if (v18)
  {
    archive_entry_free(v18);
    *(_QWORD *)(a1 + 448) = 0;
  }
  v19 = archive_entry_clone(a2);
  *(_QWORD *)(a1 + 448) = v19;
  *(_DWORD *)(a1 + 532) = -1;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_DWORD *)(a1 + 568) = -1;
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a1 + 184);
  *(_WORD *)(a1 + 572) = archive_entry_mode(v19);
  if (archive_entry_size_is_set(*(_QWORD *)(a1 + 448)))
    v20 = archive_entry_size(*(_QWORD *)(a1 + 448));
  else
    v20 = -1;
  *(_QWORD *)(a1 + 560) = v20;
  *(_QWORD *)(a1 + 472) = 0;
  v21 = (_BYTE *)archive_entry_pathname(*(uint64_t **)(a1 + 448));
  if (archive_entry_pathname(*(uint64_t **)(a1 + 448)))
  {
    v22 = (const char *)archive_entry_pathname(*(uint64_t **)(a1 + 448));
    v23 = strlen(v22);
  }
  else
  {
    v23 = 0;
  }
  sub_1DB6E323C((uint64_t *)(a1 + 464), v21, v23);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a1 + 464);
  archive_clear_error(a1);
  LODWORD(v118) = 0;
  v120 = 0;
  v121 = 0;
  size = 0;
  v28 = sub_1DB6DD404(*(char **)(a1 + 456), &v118, (void **)&size, *(unsigned int *)(a1 + 528), v24, v25, v26, v27);
  if ((_DWORD)v28)
  {
    v17 = v28;
    archive_set_error((_DWORD *)a1, v118, "%s", v29, v30, v31, v32, v33, (char *)size);
    sub_1DB6E7C3C((uint64_t)&size);
    return v17;
  }
  sub_1DB6E7C3C((uint64_t)&size);
  v35 = (const char *)archive_entry_hardlink(*(_QWORD *)(a1 + 448));
  if (v35)
  {
    v36 = *(char **)(a1 + 456);
    if (!strcmp(v36, v35))
    {
      archive_set_error((_DWORD *)a1, -1, "Skipping hardlink pointing to itself: %s", v37, v38, v39, v40, v41, v36);
      return 4294967276;
    }
  }
  v42 = umask(0);
  *(_WORD *)(a1 + 160) = v42;
  umask(v42);
  *(_DWORD *)(a1 + 520) = 0x20000000;
  v43 = *(_DWORD *)(a1 + 528);
  v44 = *(_WORD *)(a1 + 572);
  if ((v43 & 2) != 0)
  {
    if ((*(_WORD *)(a1 + 572) & 0x400) != 0)
      v45 = 1711276032;
    else
      v45 = 1610612736;
    *(_DWORD *)(a1 + 520) = v45;
    if ((v44 & 0x800) != 0)
    {
      v45 |= 0x18000000u;
      *(_DWORD *)(a1 + 520) = v45;
    }
  }
  else
  {
    *(_WORD *)(a1 + 572) = v44 & ~*(_WORD *)(a1 + 160) & 0xF1FF;
    v45 = 0x20000000;
  }
  if ((v43 & 5) != 0)
    *(_DWORD *)(a1 + 520) = v43 & 5 | v45;
  if ((v43 & 0x20) != 0)
  {
    size = 0;
    if ((v43 & 0x2000) == 0 || !archive_entry_mac_metadata(*(_QWORD *)(a1 + 448), &size) || !size)
    {
      if (archive_entry_filetype(*(_QWORD *)(a1 + 448)) == 0x4000)
        *(_DWORD *)(a1 + 524) |= 0x20u;
      else
        *(_DWORD *)(a1 + 520) |= 0x20u;
    }
    v43 = *(_DWORD *)(a1 + 528);
  }
  if ((v43 & 0x2000) != 0)
  {
    if (archive_entry_filetype(*(_QWORD *)(a1 + 448)) == 0x4000)
      *(_DWORD *)(a1 + 524) |= 0x2000u;
    else
      *(_DWORD *)(a1 + 520) |= 0x2000u;
  }
  v46 = *(_DWORD *)(a1 + 528);
  if ((v46 & 0x4000) == 0)
  {
    v118 = 0;
    size = 0;
    archive_entry_fflags(*(_QWORD *)(a1 + 448), &size, &v118);
    if ((size & ~(_DWORD)v118 & 0x20) != 0)
    {
      *(_DWORD *)(a1 + 520) |= 0x8000u;
      *(_DWORD *)(a1 + 632) = -1;
    }
    v46 = *(_DWORD *)(a1 + 528);
  }
  if ((v46 & 0x8000) != 0 && (*(_WORD *)(a1 + 572) & 0xF000) == 0x8000 && *(uint64_t *)(a1 + 560) >= 1)
  {
    *(_DWORD *)(a1 + 520) |= 0x8000u;
    *(_DWORD *)(a1 + 632) = -1;
  }
  v47 = *(char **)(a1 + 456);
  v48 = strrchr(v47, 47);
  if (v48)
    v49 = v48 + 1;
  else
    v49 = v47;
  if (*v49 == 46 && v49[1] == 95)
  {
    v50 = *(_DWORD *)(a1 + 520) & 0xFFFF7FFF;
    *(_DWORD *)(a1 + 520) = v50;
    if (*(uint64_t *)(a1 + 560) >= 1)
      *(_DWORD *)(a1 + 520) = v50 | 0x1000000;
  }
  if ((v46 & 0x80) != 0)
  {
    size = 0;
    if ((v46 & 0x2000) == 0 || !archive_entry_mac_metadata(*(_QWORD *)(a1 + 448), &size) || !size)
      *(_DWORD *)(a1 + 520) |= 0x80u;
    v46 = *(_DWORD *)(a1 + 528);
  }
  if ((v46 & 0x40) != 0)
    *(_DWORD *)(a1 + 520) |= 0x40u;
  v51 = *(const char **)(a1 + 456);
  if ((v46 & 0x100) != 0)
  {
    LODWORD(v118) = 0;
    v120 = 0;
    v121 = 0;
    size = 0;
    v52 = sub_1DB6DD57C(v51, (int *)&v118, (void **)&size, v46, 0);
    if ((_DWORD)v52)
    {
      v17 = v52;
      archive_set_error((_DWORD *)a1, v118, "%s", v53, v54, v55, v56, v57, (char *)size);
      sub_1DB6E7C3C((uint64_t)&size);
      *(_QWORD *)(a1 + 440) = 0;
      return v17;
    }
    sub_1DB6E7C3C((uint64_t)&size);
    *(_QWORD *)(a1 + 440) = 0;
    v51 = *(const char **)(a1 + 456);
  }
  if (strlen(v51) >= 0x400)
  {
    v58 = openat(-2, ".", 1091567616);
    *(_DWORD *)(a1 + 568) = v58;
    sub_1DB6DD880(v58);
    if ((*(_DWORD *)(a1 + 568) & 0x80000000) == 0 && strlen(v51) >= 0x400)
    {
      v59 = *(const char **)(a1 + 456);
LABEL_71:
      for (i = (char *)(v51 + 1016); i > v59; --i)
      {
        if (*i == 47)
        {
          *i = 0;
          if (sub_1DB6FD6D0(a1, *(char **)(a1 + 456)) || chdir(*(const char **)(a1 + 456)))
          {
            *i = 47;
          }
          else
          {
            *i = 47;
            v51 = i + 1;
            *(_QWORD *)(a1 + 456) = v51;
            v61 = strlen(v51);
            v59 = v51;
            if (v61 > 0x3FF)
              goto LABEL_71;
          }
          break;
        }
      }
    }
  }
  v62 = *(_DWORD *)(a1 + 528);
  if ((v62 & 0x10) != 0 && (*(_WORD *)(a1 + 572) & 0xF000) != 0x4000)
  {
    if ((v62 & 0x20000) != 0)
      sub_1DB6FD96C(a1);
    if (unlink(*(const char **)(a1 + 456)))
    {
      if (*__error() == 2)
        goto LABEL_89;
      if (rmdir(*(const char **)(a1 + 456)))
      {
        LODWORD(v63) = *__error();
        v69 = "Could not unlink";
LABEL_139:
        v82 = (_DWORD *)a1;
        goto LABEL_140;
      }
    }
    *(_QWORD *)(a1 + 440) = 0;
  }
LABEL_89:
  sub_1DB6DD0E0(a1);
  v63 = v70;
  if ((_DWORD)v70 == 20 || (_DWORD)v70 == 2)
  {
    if ((*(_BYTE *)(a1 + 529) & 4) == 0)
    {
      v72 = *(char **)(a1 + 456);
      v73 = strrchr(v72, 47);
      if (v73)
      {
        v74 = v73;
        *v73 = 0;
        sub_1DB6FD6D0(a1, v72);
        *v74 = 47;
      }
      sub_1DB6DD0E0(a1);
      v63 = v75;
    }
    if ((_DWORD)v63 == 2)
    {
      if (archive_entry_hardlink(*(_QWORD *)(a1 + 448)))
      {
        v117 = (char *)archive_entry_hardlink(*(_QWORD *)(a1 + 448));
        archive_set_error((_DWORD *)a1, 2, "Hard-link target '%s' does not exist.", v76, v77, v78, v79, v80, v117);
        goto LABEL_141;
      }
      LODWORD(v63) = 2;
LABEL_137:
      if (!*(_QWORD *)(a1 + 56))
      {
        v116 = *(char **)(a1 + 456);
        v69 = "Can't create '%s'";
        goto LABEL_139;
      }
LABEL_141:
      v17 = 4294967271;
      goto LABEL_142;
    }
  }
  if ((v63 | 4) != 0x15)
    goto LABEL_136;
  if ((*(_BYTE *)(a1 + 528) & 8) != 0)
  {
    if ((*(_WORD *)(a1 + 572) & 0xF000) == 0x4000)
      *(_DWORD *)(a1 + 520) = 0;
    goto LABEL_106;
  }
  if ((_DWORD)v63 != 17)
  {
    if ((_DWORD)v63 != 21)
      goto LABEL_137;
    if (rmdir(*(const char **)(a1 + 456)))
    {
      LODWORD(v63) = *__error();
      v69 = "Can't remove already-existing dir";
      goto LABEL_139;
    }
    goto LABEL_134;
  }
  v81 = *(_WORD *)(a1 + 572) & 0xF000;
  if (v81 != 0x4000)
  {
LABEL_111:
    if (v81 == 0x4000)
      goto LABEL_114;
    goto LABEL_112;
  }
  if (!stat(*(const char **)(a1 + 456), (stat *)(a1 + 296)))
  {
    v81 = *(_WORD *)(a1 + 572) & 0xF000;
    goto LABEL_111;
  }
LABEL_112:
  if (lstat(*(const char **)(a1 + 456), (stat *)(a1 + 296)))
  {
    LODWORD(v63) = *__error();
    v69 = "Can't stat existing object";
    goto LABEL_139;
  }
LABEL_114:
  if ((*(_BYTE *)(a1 + 529) & 8) == 0
    || (*(_WORD *)(a1 + 300) & 0xF000) == 0x4000
    || sub_1DB6FD9A4(a1 + 296, *(_QWORD *)(a1 + 448)))
  {
    if (*(_DWORD *)(a1 + 192)
      && *(_DWORD *)(a1 + 296) == *(_DWORD *)(a1 + 200)
      && *(_QWORD *)(a1 + 304) == *(_QWORD *)(a1 + 208))
    {
      v69 = "Refusing to overwrite archive";
      v82 = (_DWORD *)a1;
      LODWORD(v63) = 0;
LABEL_140:
      archive_set_error(v82, v63, v69, v64, v65, v66, v67, v68, v116);
      goto LABEL_141;
    }
    v83 = *(unsigned __int16 *)(a1 + 300);
    if ((v83 & 0xF000) == 0x4000)
    {
      v84 = *(unsigned __int16 *)(a1 + 572);
      if ((v84 & 0xF000) == 0x4000)
      {
        if (v84 != v83)
        {
          v85 = *(_DWORD *)(a1 + 520);
          if ((v85 & 0x40000000) != 0)
            *(_DWORD *)(a1 + 524) |= v85 & 0x34000000;
        }
        goto LABEL_188;
      }
      if ((*(_BYTE *)(a1 + 530) & 2) != 0)
        sub_1DB6FD96C(a1);
      if (rmdir(*(const char **)(a1 + 456)))
      {
        LODWORD(v63) = *__error();
        v69 = "Can't replace existing directory with non-directory";
        goto LABEL_139;
      }
      goto LABEL_135;
    }
    v86 = *(_DWORD *)(a1 + 528);
    if ((v86 & 0x20000) != 0)
    {
      sub_1DB6FD96C(a1);
      v86 = *(_DWORD *)(a1 + 528);
    }
    if ((v86 & 0x40000) != 0 && (*(_WORD *)(a1 + 300) & 0xF000) == 0x8000)
    {
      v87 = sub_1DB6FDA58(a1, v63, v71, v64, v65, v66, v67, v68);
      *(_DWORD *)(a1 + 532) = v87;
      if (v87 == -1)
      {
        LODWORD(v63) = *__error();
        v69 = "Can't create temporary file";
        goto LABEL_139;
      }
      goto LABEL_188;
    }
    if (unlink(*(const char **)(a1 + 456)))
    {
      LODWORD(v63) = *__error();
      v69 = "Can't unlink already-existing object";
      goto LABEL_139;
    }
LABEL_134:
    *(_QWORD *)(a1 + 440) = 0;
LABEL_135:
    sub_1DB6DD0E0(a1);
    LODWORD(v63) = v88;
LABEL_136:
    if ((_DWORD)v63)
      goto LABEL_137;
LABEL_188:
    v17 = 0;
    *(_QWORD *)(a1 + 440) = 0;
    goto LABEL_142;
  }
LABEL_106:
  archive_entry_unset_size(*(_QWORD *)(a1 + 448));
  v17 = 0;
LABEL_142:
  v89 = *(_DWORD *)(a1 + 532);
  if (v89 < 0 || fchflags(v89, 0x20u))
    *(_DWORD *)(a1 + 520) &= ~0x8000u;
  v90 = *(_DWORD *)(a1 + 568);
  if ((v90 & 0x80000000) == 0)
  {
    if (fchdir(v90))
    {
      v91 = __error();
      archive_set_error((_DWORD *)a1, *v91, "chdir() failure", v92, v93, v94, v95, v96, v116);
      v17 = 4294967266;
    }
    close(*(_DWORD *)(a1 + 568));
    *(_DWORD *)(a1 + 568) = -1;
  }
  v97 = *(_DWORD *)(a1 + 524);
  if ((v97 & 0x34000000) != 0)
  {
    v98 = (const char *)archive_entry_pathname(a2);
    v99 = *(_DWORD **)(a1 + 176);
    if (!v99)
    {
      v99 = sub_1DB6FD8E4(a1, v98);
      *(_QWORD *)(a1 + 176) = v99;
      if (!v99)
        return 4294967266;
    }
    *((_WORD *)v99 + 33) = archive_entry_filetype((uint64_t)a2);
    v99[40] |= 0x20000000u;
    *((_WORD *)v99 + 32) = *(_WORD *)(a1 + 572);
    v97 = *(_DWORD *)(a1 + 524);
  }
  if ((v97 & 4) != 0
    && (archive_entry_mtime_is_set((uint64_t)a2) || archive_entry_atime_is_set((uint64_t)a2)))
  {
    v100 = (const char *)archive_entry_pathname(a2);
    v101 = *(_DWORD **)(a1 + 176);
    if (!v101)
    {
      v101 = sub_1DB6FD8E4(a1, v100);
      *(_QWORD *)(a1 + 176) = v101;
      if (!v101)
        return 4294967266;
    }
    *((_WORD *)v101 + 33) = archive_entry_filetype((uint64_t)a2);
    *((_WORD *)v101 + 32) = *(_WORD *)(a1 + 572);
    v101[40] |= 4u;
    if (archive_entry_atime_is_set((uint64_t)a2))
    {
      *((_QWORD *)v101 + 9) = archive_entry_atime((uint64_t)a2);
      v102 = archive_entry_atime_nsec((uint64_t)a2);
    }
    else
    {
      v102 = 0;
      *((_QWORD *)v101 + 9) = *(_QWORD *)(a1 + 216);
    }
    *((_QWORD *)v101 + 13) = v102;
    if (archive_entry_mtime_is_set((uint64_t)a2))
    {
      *((_QWORD *)v101 + 11) = archive_entry_mtime((uint64_t)a2);
      v103 = archive_entry_mtime_nsec((uint64_t)a2);
    }
    else
    {
      v103 = 0;
      *((_QWORD *)v101 + 11) = *(_QWORD *)(a1 + 216);
    }
    *((_QWORD *)v101 + 15) = v103;
    if (archive_entry_birthtime_is_set((uint64_t)a2))
    {
      *((_QWORD *)v101 + 10) = archive_entry_birthtime((uint64_t)a2);
      v104 = archive_entry_birthtime_nsec((uint64_t)a2);
    }
    else
    {
      *((_QWORD *)v101 + 10) = *((_QWORD *)v101 + 11);
      v104 = *((_QWORD *)v101 + 15);
    }
    *((_QWORD *)v101 + 14) = v104;
  }
  v105 = *(_DWORD *)(a1 + 524);
  if ((v105 & 0x20) != 0)
  {
    v106 = (const char *)archive_entry_pathname(a2);
    v107 = *(_DWORD **)(a1 + 176);
    if (!v107)
    {
      v107 = sub_1DB6FD8E4(a1, v106);
      *(_QWORD *)(a1 + 176) = v107;
      if (!v107)
        return 4294967266;
    }
    *((_WORD *)v107 + 33) = archive_entry_filetype((uint64_t)a2);
    v107[40] |= 0x20u;
    v108 = archive_entry_acl((uint64_t)a2);
    sub_1DB6E4A60((_WORD *)v107 + 4, v108);
    v105 = *(_DWORD *)(a1 + 524);
  }
  if ((v105 & 0x2000) != 0)
  {
    size = 0;
    v109 = archive_entry_mac_metadata(*(_QWORD *)(a1 + 448), &size);
    if (v109 && size)
    {
      v110 = (const void *)v109;
      v111 = (const char *)archive_entry_pathname(a2);
      v112 = *(_DWORD **)(a1 + 176);
      if (!v112)
      {
        v112 = sub_1DB6FD8E4(a1, v111);
        *(_QWORD *)(a1 + 176) = v112;
        if (!v112)
          return 4294967266;
      }
      *((_WORD *)v112 + 33) = archive_entry_filetype((uint64_t)a2);
      v113 = malloc_type_malloc(size, 0x369CBD27uLL);
      *((_QWORD *)v112 + 19) = v113;
      if (v113)
      {
        memcpy(v113, v110, size);
        *((_QWORD *)v112 + 18) = size;
        v112[40] |= 0x2000u;
      }
    }
    v105 = *(_DWORD *)(a1 + 524);
  }
  if ((v105 & 0x40) != 0)
  {
    v114 = (const char *)archive_entry_pathname(a2);
    v115 = *(_DWORD **)(a1 + 176);
    if (v115 || (v115 = sub_1DB6FD8E4(a1, v114), (*(_QWORD *)(a1 + 176) = v115) != 0))
    {
      *((_WORD *)v115 + 33) = archive_entry_filetype((uint64_t)a2);
      v115[40] |= 0x40u;
      goto LABEL_184;
    }
    return 4294967266;
  }
LABEL_184:
  if ((int)v17 >= -20)
    *(_DWORD *)(a1 + 4) = 4;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) != 0)
  {
    archive_entry_set_size((uint64_t)a2, 0);
    *(_QWORD *)(a1 + 560) = 0;
  }
  return v17;
}

double sub_1DB6DD0E0(uint64_t a1)
{
  const char *v2;
  const char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  unsigned __int16 v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  mode_t v23;
  const char *v24;
  uint64_t v25;
  int v26;
  int v27;
  const char *v28;
  dev_t v29;
  int v30;
  void *v31[3];
  stat v32;

  memset(&v32, 0, sizeof(v32));
  v30 = 0;
  v2 = (const char *)archive_entry_hardlink(*(_QWORD *)(a1 + 448));
  if (!v2)
  {
    v16 = archive_entry_symlink(*(_QWORD *)(a1 + 448));
    if (v16)
    {
      v17 = (const char *)v16;
      if ((*(_BYTE *)(a1 + 530) & 4) != 0)
        unlink(*(const char **)(a1 + 456));
      if (!symlink(v17, *(const char **)(a1 + 456)))
        return result;
    }
    else
    {
      v18 = *(_WORD *)(a1 + 572);
      v19 = v18 & (unsigned __int16)~*(_WORD *)(a1 + 160) & 0x1FF;
      if (*(_QWORD *)(a1 + 184) && (*(_WORD *)(a1 + 520) & 0x8080) != 0)
        v19 |= 0x80u;
      v20 = v18 & 0xFFF;
      switch(((v18 & 0xF000u) - 4096) >> 12)
      {
        case 0u:
          v21 = mkfifo(*(const char **)(a1 + 456), v19);
          break;
        case 1u:
          v23 = v19 | 0x2000;
          goto LABEL_37;
        case 3u:
          LOWORD(v19) = v19 & 0xFE3D | 0x1C0;
          if (mkdir(*(const char **)(a1 + 456), v19))
            goto LABEL_39;
          v26 = *(_DWORD *)(a1 + 520);
          v27 = *(_DWORD *)(a1 + 524) | v26 & 4;
          *(_DWORD *)(a1 + 524) = v27;
          if (v20 != (unsigned __int16)v19 || (*(_BYTE *)(a1 + 528) & 2) != 0)
            *(_DWORD *)(a1 + 524) = v27 | v26 & 0x34000000;
          *(_DWORD *)(a1 + 520) = v26 & 0xCBFFFFFB;
          goto LABEL_41;
        case 5u:
          v23 = v19 | 0x6000;
LABEL_37:
          v28 = *(const char **)(a1 + 456);
          v29 = archive_entry_rdev(*(_DWORD **)(a1 + 448));
          v21 = mknod(v28, v23, v29);
          break;
        default:
          *(_QWORD *)(a1 + 488) = 0;
          v24 = *(const char **)(a1 + 456);
          if ((*(_DWORD *)(a1 + 528) & 0x100) != 0)
            v25 = open(v24, 553650689, v19);
          else
            v25 = open(v24, 16779777, v19);
          *(_DWORD *)(a1 + 532) = v25;
          sub_1DB6DD880(v25);
          v21 = *(_DWORD *)(a1 + 532) >> 31;
          break;
      }
      if (!v21)
      {
LABEL_41:
        if (v20 == (unsigned __int16)v19)
          *(_DWORD *)(a1 + 520) &= 0xCBFFFFFF;
        return result;
      }
    }
LABEL_39:
    __error();
    return result;
  }
  v3 = v2;
  memset(v31, 0, sizeof(v31));
  v4 = strdup(v2);
  if (!v4)
    return result;
  v10 = v4;
  if (sub_1DB6DD404(v4, &v30, v31, *(unsigned int *)(a1 + 528), v5, v6, v7, v8)
    || sub_1DB6DD57C(v10, &v30, v31, *(_DWORD *)(a1 + 528), 1))
  {
    archive_set_error((_DWORD *)a1, v30, "%s", v11, v12, v13, v14, v15, (char *)v31[0]);
    free(v10);
    sub_1DB6E7C3C((uint64_t)v31);
    return result;
  }
  free(v10);
  sub_1DB6E7C3C((uint64_t)v31);
  if ((*(_BYTE *)(a1 + 530) & 4) != 0)
    unlink(*(const char **)(a1 + 456));
  if (!linkat(-2, v3, -2, *(const char **)(a1 + 456), 0) || !*__error())
  {
    if (*(uint64_t *)(a1 + 560) <= 0)
    {
      result = 0.0;
      *(_QWORD *)(a1 + 520) = 0;
      return result;
    }
    if (lstat(*(const char **)(a1 + 456), &v32))
      goto LABEL_39;
    if ((v32.st_mode & 0xF000) == 0x8000)
    {
      v22 = open(*(const char **)(a1 + 456), 16778497);
      *(_DWORD *)(a1 + 532) = v22;
      sub_1DB6DD880(v22);
      if ((*(_DWORD *)(a1 + 532) & 0x80000000) != 0)
        goto LABEL_39;
    }
  }
  return result;
}

uint64_t sub_1DB6DD404(char *a1, _DWORD *a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  char *v9;
  int v10;
  char *v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  char v16;
  uint64_t result;

  if (*a1 == 47)
  {
    if ((a4 & 0x10000) != 0)
    {
      if (a2)
        *a2 = -1;
      if (!a3)
        return 4294967271;
      v8 = "Path is ";
      goto LABEL_40;
    }
    v9 = a1 + 1;
    v10 = 47;
LABEL_10:
    v11 = a1;
    while (1)
    {
LABEL_11:
      v12 = *v9;
      if (v12 == 46)
      {
        v14 = v9[1];
        if (v14 != 47)
        {
          if (v9[1])
          {
            if (v14 == 46 && (v9[2] == 47 || !v9[2]) && (a4 & 0x200) != 0)
            {
              if (a2)
                *a2 = -1;
              if (a3)
              {
                v8 = "Path contains ";
                goto LABEL_40;
              }
              return 4294967271;
            }
LABEL_24:
            if (v10)
              *v11++ = 47;
            while (1)
            {
              v15 = *v9++;
              if (!*(v9 - 1))
                break;
              if (v15 == 47)
              {
                v10 = 47;
                goto LABEL_11;
              }
              *v11++ = v15;
            }
          }
LABEL_30:
          if (v11 == a1)
          {
            if (v10)
              v16 = 47;
            else
              v16 = 46;
            *a1 = v16;
            v11 = a1 + 1;
          }
          result = 0;
          *v11 = 0;
          return result;
        }
        v13 = 2;
      }
      else
      {
        if (v12 != 47)
        {
          if (*v9)
            goto LABEL_24;
          goto LABEL_30;
        }
        v13 = 1;
      }
      v9 += v13;
    }
  }
  if (*a1)
  {
    v10 = 0;
    v9 = a1;
    goto LABEL_10;
  }
  if (a2)
    *a2 = -1;
  if (!a3)
    return 4294967271;
  v8 = "Invalid empty ";
LABEL_40:
  sub_1DB7303C0(a3, "%s%s", (uint64_t)a3, a4, a5, a6, a7, a8, v8);
  return 4294967271;
}

uint64_t sub_1DB6DD57C(const char *a1, int *a2, void **a3, __int16 a4, int a5)
{
  uint64_t v10;
  unsigned int v11;
  const char *v12;
  const char *v13;
  char *v14;
  int v15;
  int v16;
  int v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  char *v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int *v45;
  uint64_t v46;
  int v48;
  stat v49;

  if (!*a1)
    return 0;
  memset(&v49, 0, sizeof(v49));
  v10 = openat(-2, ".", 1091567616);
  v11 = v10;
  sub_1DB6DD880(v10);
  if ((v11 & 0x80000000) != 0)
  {
    v28 = __error();
    if (a2)
      *a2 = *v28;
    if (a3)
      sub_1DB7303C0(a3, "%s%s", v29, v30, v31, v32, v33, v34, "Could not open ");
    return 4294967266;
  }
  v48 = MEMORY[0x1DF0B3228](0xFFFFFFFFLL);
  v12 = a1 + 1;
  if (*a1 != 47)
    v12 = a1;
  v13 = a1;
  while (1)
  {
    v14 = (char *)(v12 - 1);
    do
    {
      v16 = *++v14;
      v15 = v16;
    }
    while (v16 == 47);
    while (v15)
    {
      if (v15 == 47)
      {
        v18 = v14[1] == 0;
        goto LABEL_14;
      }
      v17 = *++v14;
      v15 = v17;
    }
    v18 = 1;
LABEL_14:
    *v14 = 0;
    if (lstat(v13, &v49))
    {
LABEL_43:
      *v14 = v15;
      if (*__error() != 2)
      {
        v35 = __error();
        if (a2)
          *a2 = *v35;
        if (a3)
        {
          v36 = "Could not stat ";
          goto LABEL_70;
        }
        goto LABEL_71;
      }
      goto LABEL_44;
    }
    v25 = v49.st_mode & 0xF000;
    if (v25 == 40960)
      break;
    if (v25 != 0x4000)
      goto LABEL_31;
    if (v18)
    {
      v27 = 0;
      *v14 = v15;
      if (v15)
        ++v14;
      goto LABEL_72;
    }
LABEL_28:
    if (MEMORY[0x1DF0B321C](v13))
    {
      *v14 = v15;
      v37 = __error();
      if (a2)
        *a2 = *v37;
      if (a3)
        sub_1DB7303C0(a3, "%s%s", v38, v39, v40, v41, v42, v43, "Could not chdir ");
      v27 = 4294967266;
      goto LABEL_72;
    }
    v13 = v14 + 1;
LABEL_31:
    *v14 = v15;
    v12 = v14 + 1;
    if (!v15)
      v12 = v14;
    if (v18)
    {
      v27 = 0;
      if (v15)
        ++v14;
      goto LABEL_72;
    }
  }
  if (a5)
    v26 = v18;
  else
    v26 = 0;
  if (v26)
    goto LABEL_44;
  if (v18)
  {
    v44 = unlink(v13);
    *v14 = v15;
    if (v44)
    {
      v45 = __error();
      if (a2)
        *a2 = *v45;
      if (a3)
      {
        v36 = "Could not remove symlink ";
        goto LABEL_70;
      }
      goto LABEL_71;
    }
LABEL_44:
    v27 = 0;
    goto LABEL_72;
  }
  if ((a4 & 0x10) == 0)
  {
    if ((a4 & 0x100) != 0)
      goto LABEL_62;
    if (stat(v13, &v49))
      goto LABEL_43;
    if ((v49.st_mode & 0xF000) != 0x4000)
    {
LABEL_62:
      *v14 = v15;
      if (a2)
        *a2 = 0;
      if (a3)
      {
        v36 = "Cannot extract through symlink ";
        goto LABEL_70;
      }
      goto LABEL_71;
    }
    goto LABEL_28;
  }
  if (!unlink(v13))
    goto LABEL_31;
  *v14 = v15;
  if (a2)
    *a2 = 0;
  if (a3)
  {
    v36 = "Cannot remove intervening symlink ";
LABEL_70:
    sub_1DB7303C0(a3, "%s%s", v19, v20, v21, v22, v23, v24, v36);
  }
LABEL_71:
  v27 = 4294967271;
LABEL_72:
  *v14 = v15;
  if (v48)
    v46 = 0xFFFFFFFFLL;
  else
    v46 = v11;
  MEMORY[0x1DF0B3228](v46);
  close(v11);
  return v27;
}

uint64_t sub_1DB6DD880(uint64_t result)
{
  int v1;

  if ((result & 0x80000000) == 0)
  {
    v1 = result;
    result = fcntl(result, 1);
    if ((result & 1) == 0)
      return fcntl(v1, 2, result | 1);
  }
  return result;
}

uint64_t archive_read_open1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, _QWORD);
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _DWORD *v25;
  int v26;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, _QWORD);
  uint64_t v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  int v43;
  int v44;
  _QWORD *v45;
  _BOOL4 v47;
  char *v48;
  char *v49;
  uint64_t v50;

  if (sub_1DB6E0594((int *)a1, 14594245, 1, "archive_read_open", a5, a6, a7, a8) == -30)
    return 4294967266;
  archive_clear_error(a1);
  if (!*(_QWORD *)(a1 + 200))
  {
    v24 = "No reader function provided to archive_read_open";
    v25 = (_DWORD *)a1;
    v26 = 22;
LABEL_17:
    archive_set_error(v25, v26, v24, v9, v10, v11, v12, v13, v49);
    goto LABEL_18;
  }
  v14 = *(uint64_t (**)(uint64_t, _QWORD))(a1 + 192);
  if (!v14 || (v15 = v14(a1, *(_QWORD *)(*(_QWORD *)(a1 + 256) + 16)), !(_DWORD)v15))
  {
    v19 = malloc_type_calloc(1uLL, 0xB8uLL, 0x10F0040E7D2A449uLL);
    if (!v19)
      return 4294967266;
    v19[1] = 0;
    v19[2] = 0;
    v20 = *(_QWORD **)(a1 + 256);
    v19[3] = a1;
    v19[4] = sub_1DB6F7B58;
    v19[5] = sub_1DB6E3D54;
    v19[6] = sub_1DB6F7B78;
    v19[7] = sub_1DB6F7C74;
    v19[8] = sub_1DB6DBFE8;
    v19[9] = sub_1DB6E53F0;
    v19[11] = v20[2];
    v19[12] = "none";
    *((_DWORD *)v19 + 26) = 0;
    *v20 = 0;
    v21 = *(_QWORD *)(a1 + 1032);
    if (v21 && *(_DWORD *)(a1 + 1040))
    {
      v22 = *(_QWORD *)(a1 + 1032);
      do
      {
        v23 = v22;
        v22 = *(_QWORD *)(v22 + 16);
      }
      while (v22);
      *(_QWORD *)(v23 + 16) = v19;
LABEL_34:
      if (*(_QWORD *)(a1 + 2472))
      {
LABEL_35:
        *(_DWORD *)(a1 + 4) = 2;
        sub_1DB6E53F0(v21, 0);
        return 0;
      }
      v38 = 0;
      v39 = a1 + 1064;
      *(_QWORD *)(a1 + 2472) = a1 + 1064;
      v40 = -1;
      v41 = 0xFFFFFFFFLL;
      do
      {
        v42 = *(uint64_t (**)(uint64_t, uint64_t))(v39 + 16);
        if (v42)
        {
          v43 = v42(a1, v41);
          if (v43 == -30)
            goto LABEL_61;
          v44 = v43;
          v45 = *(_QWORD **)(a1 + 1032);
          if (*v45)
            sub_1DB6F8034((uint64_t)v45, 0, 0);
          v47 = v44 > (int)v41 || v40 < 0;
          if (v47)
            v41 = v44;
          else
            v41 = v41;
          if (v47)
            v40 = v38;
          v39 = *(_QWORD *)(a1 + 2472);
        }
        ++v38;
        v39 += 88;
        *(_QWORD *)(a1 + 2472) = v39;
      }
      while (v38 != 16);
      if (v40 < 0)
      {
        v48 = "No formats registered";
      }
      else
      {
        if ((int)v41 > 0)
        {
          *(_QWORD *)(a1 + 2472) = a1 + 88 * v40 + 1064;
          v21 = *(_QWORD *)(a1 + 1032);
          goto LABEL_35;
        }
        v48 = "Unrecognized archive format";
      }
      archive_set_error((_DWORD *)a1, 79, v48, v9, v10, v11, v12, v13, v49);
LABEL_61:
      sub_1DB6DBF70(a1);
    }
    else
    {
      v28 = 0;
      *(_QWORD *)(a1 + 1032) = v19;
      while (1)
      {
        v29 = 0;
        v30 = 0;
        v31 = 0;
        do
        {
          v32 = a1 + v29;
          v33 = *(uint64_t (**)(uint64_t, _QWORD))(a1 + v29 + 280);
          if (v33)
          {
            v34 = v32 + 264;
            v35 = v33(v32 + 264, *(_QWORD *)(a1 + 1032));
            if (v35 > v31)
            {
              v31 = v35;
              v30 = v34;
            }
          }
          v29 += 48;
        }
        while ((_DWORD)v29 != 768);
        if (!v30)
          break;
        v36 = malloc_type_calloc(1uLL, 0xB8uLL, 0x10F0040E7D2A449uLL);
        if (!v36)
          goto LABEL_18;
        v36[3] = a1;
        v37 = *(_QWORD *)(a1 + 1032);
        v36[1] = v30;
        v36[2] = v37;
        *(_QWORD *)(a1 + 1032) = v36;
        if ((*(unsigned int (**)(void))(v30 + 24))())
          goto LABEL_36;
        if (++v28 == 25)
        {
          v24 = "Input requires too many filters for decoding";
          v25 = (_DWORD *)a1;
          v26 = 79;
          goto LABEL_17;
        }
      }
      v50 = 0;
      sub_1DB6E22F4(*(_QWORD *)(a1 + 1032), 1uLL, &v50, v9, v10, v11, v12, v13);
      if ((v50 & 0x8000000000000000) == 0)
      {
        v21 = *(_QWORD *)(a1 + 1032);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(v21 + 96);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(v21 + 104);
        goto LABEL_34;
      }
LABEL_36:
      sub_1DB6DBF34(a1);
    }
LABEL_18:
    *(_DWORD *)(a1 + 4) = 0x8000;
    return 4294967266;
  }
  v16 = v15;
  if (*(_QWORD *)(a1 + 224) && *(_DWORD *)(a1 + 240))
  {
    v17 = 0;
    v18 = 16;
    do
    {
      (*(void (**)(uint64_t, _QWORD))(a1 + 224))(a1, *(_QWORD *)(*(_QWORD *)(a1 + 256) + v18));
      ++v17;
      v18 += 24;
    }
    while (v17 < *(unsigned int *)(a1 + 240));
  }
  return v16;
}

uint64_t archive_read_support_format_all(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  result = sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_format_all", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    archive_read_support_format_ar(a1);
    archive_read_support_format_cpio(a1);
    archive_read_support_format_empty(a1);
    archive_read_support_format_lha(a1);
    archive_read_support_format_mtree(a1);
    archive_read_support_format_tar(a1);
    archive_read_support_format_xar(a1, v10, v11, v12, v13, v14, v15, v16);
    archive_read_support_format_warc(a1, v17, v18, v19, v20, v21, v22, v23);
    archive_read_support_format_7zip(a1, v24, v25, v26, v27, v28, v29, v30);
    archive_read_support_format_cab(a1, v31, v32, v33, v34, v35, v36, v37);
    archive_read_support_format_rar(a1, v38, v39, v40, v41, v42, v43, v44);
    archive_read_support_format_rar5(a1, v45, v46, v47, v48, v49, v50, v51);
    archive_read_support_format_iso9660(a1, v52, v53, v54, v55, v56, v57, v58);
    archive_read_support_format_zip(a1, v59, v60, v61, v62, v63, v64, v65);
    archive_clear_error((uint64_t)a1);
    return 0;
  }
  return result;
}

uint64_t archive_read_support_format_tar(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  void *v9;
  char *v10;
  int *v11;
  int v12;
  char *v13;

  if (!sub_1DB6E4544("tar"))
  {
    v10 = "Format not allow-listed in entitlements";
    v11 = a1;
    v12 = -1;
LABEL_7:
    archive_set_error(v11, v12, v10, v2, v3, v4, v5, v6, v13);
    return 4294967266;
  }
  result = sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_format_tar", v3, v4, v5, v6);
  if ((_DWORD)result == -30)
    return result;
  v8 = malloc_type_calloc(1uLL, 0x1C8uLL, 0x1030040C7D48C63uLL);
  if (!v8)
  {
    v10 = "Can't allocate tar data";
    v11 = a1;
    v12 = 12;
    goto LABEL_7;
  }
  v9 = v8;
  *((_DWORD *)v8 + 110) = 1;
  result = sub_1DB6DE874(a1, (uint64_t)v8, "tar", (uint64_t)sub_1DB6E56DC, (uint64_t)sub_1DB7170D4, (uint64_t)sub_1DB6E0748, (uint64_t)sub_1DB6E2590, (uint64_t)sub_1DB6E3B1C, 0, (uint64_t)sub_1DB6E7B88, 0, 0);
  if ((_DWORD)result)
  {
    free(v9);
    return 0;
  }
  return result;
}

uint64_t archive_read_support_format_zip_seekable(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char *v17;

  result = sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_format_zip_seekable", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    v10 = (char *)malloc_type_calloc(1uLL, 0x21A0uLL, 0x10F00401908A625uLL);
    if (v10)
    {
      v16 = v10;
      *(_QWORD *)(v10 + 8012) = 0x100000001;
      *((_DWORD *)v10 + 14) = -1;
      *((_QWORD *)v10 + 22) = j__crc32;
      result = sub_1DB6DE874(a1, (uint64_t)v10, "zip", (uint64_t)sub_1DB6E5578, (uint64_t)sub_1DB7283E8, (uint64_t)sub_1DB728C88, (uint64_t)sub_1DB72878C, (uint64_t)sub_1DB7296A4, 0, (uint64_t)sub_1DB6E68A4, (uint64_t)sub_1DB7296B8, (uint64_t)sub_1DB728C64);
      if ((_DWORD)result)
      {
        free(v16);
        return 0;
      }
    }
    else
    {
      archive_set_error(a1, 12, "Can't allocate zip data", v11, v12, v13, v14, v15, v17);
      return 4294967266;
    }
  }
  return result;
}

uint64_t archive_read_support_format_zip(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = archive_read_support_format_zip_streamable(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)result)
    return archive_read_support_format_zip_seekable(a1, v10, v11, v12, v13, v14, v15, v16);
  return result;
}

uint64_t archive_read_support_format_zip_streamable(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char *v17;

  result = sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_format_zip", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    v10 = (char *)malloc_type_calloc(1uLL, 0x21A0uLL, 0x10F00401908A625uLL);
    if (v10)
    {
      v16 = v10;
      *(_QWORD *)(v10 + 8012) = 0;
      *((_DWORD *)v10 + 14) = -1;
      *((_QWORD *)v10 + 22) = j__crc32;
      result = sub_1DB6DE874(a1, (uint64_t)v10, "zip", (uint64_t)sub_1DB6E54B4, (uint64_t)sub_1DB7283E8, (uint64_t)sub_1DB728554, (uint64_t)sub_1DB72878C, (uint64_t)sub_1DB728A4C, 0, (uint64_t)sub_1DB6E68A4, (uint64_t)sub_1DB728C5C, (uint64_t)sub_1DB728C64);
      if ((_DWORD)result)
      {
        free(v16);
        return 0;
      }
    }
    else
    {
      archive_set_error(a1, 12, "Can't allocate zip data", v11, v12, v13, v14, v15, v17);
      return 4294967266;
    }
  }
  return result;
}

uint64_t archive_read_support_format_xar(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char *v18;

  if (sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_format_xar", a5, a6, a7, a8) == -30)
    return 4294967266;
  v9 = (char *)malloc_type_calloc(1uLL, 0x400uLL, 0x10F0040B321D4E6uLL);
  if (!v9)
  {
    archive_set_error(a1, 12, "Can't allocate xar data", v10, v11, v12, v13, v14, v18);
    return 4294967266;
  }
  v15 = v9;
  *(_OWORD *)(v9 + 856) = 0u;
  v16 = sub_1DB6DE874(a1, (uint64_t)v9, "xar", (uint64_t)sub_1DB6E4ABC, 0, (uint64_t)sub_1DB724A94, (uint64_t)sub_1DB725244, (uint64_t)sub_1DB7253A4, 0, (uint64_t)sub_1DB6E7878, 0, 0);
  if ((_DWORD)v16)
    free(v15);
  return v16;
}

uint64_t archive_read_support_format_warc(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char *v18;

  if (sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_format_warc", a5, a6, a7, a8) == -30)
    return 4294967266;
  v9 = malloc_type_calloc(1uLL, 0x48uLL, 0x10100403BD722C9uLL);
  if (!v9)
  {
    archive_set_error(a1, 12, "Can't allocate warc data", v10, v11, v12, v13, v14, v18);
    return 4294967266;
  }
  v15 = v9;
  v16 = sub_1DB6DE874(a1, (uint64_t)v9, "warc", (uint64_t)sub_1DB6E64D8, 0, (uint64_t)sub_1DB7373A8, (uint64_t)sub_1DB737A54, (uint64_t)sub_1DB737B34, 0, (uint64_t)sub_1DB6E8338, 0, 0);
  if ((_DWORD)v16)
    free(v15);
  return v16;
}

uint64_t archive_read_support_format_rar5(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;

  if (sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_format_rar5", a5, a6, a7, a8) == -30)
    return 4294967266;
  v9 = malloc_type_malloc(0x5330uLL, 0x105004069060638uLL);
  if (!v9)
  {
    archive_set_error(a1, 12, "Can't allocate rar5 data", v10, v11, v12, v13, v14, v25);
    return 4294967266;
  }
  v15 = v9;
  v16 = (char *)v9 + 19258;
  bzero(v9, 0x5330uLL);
  *((_WORD *)v16 + 2) = 0;
  *(_DWORD *)v16 = 536805376;
  v17 = malloc_type_malloc(0x10000uLL, 0x80040B8603338uLL);
  v15[2408] = v17;
  if (!v17)
  {
    archive_set_error(a1, 12, "Can't allocate rar5 filter buffer", v18, v19, v20, v21, v22, v25);
    free(v15);
    return 4294967266;
  }
  v23 = sub_1DB6DE874(a1, (uint64_t)v15, "rar5", (uint64_t)sub_1DB6E4D58, (uint64_t)sub_1DB71F418, (uint64_t)sub_1DB71F420, (uint64_t)sub_1DB71F4BC, (uint64_t)sub_1DB7208E8, (uint64_t)sub_1DB720994, (uint64_t)sub_1DB6E7A58, (uint64_t)sub_1DB72099C, (uint64_t)sub_1DB7209A4);
  if ((_DWORD)v23)
    sub_1DB6E7A58((uint64_t)a1);
  return v23;
}

uint64_t archive_read_support_format_rar(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char *v18;

  if (sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_format_rar", a5, a6, a7, a8) == -30)
    return 4294967266;
  v9 = malloc_type_calloc(0x4F20uLL, 1uLL, 0xFD92625DuLL);
  if (!v9)
  {
    archive_set_error(a1, 12, "Can't allocate rar data", v10, v11, v12, v13, v14, v18);
    return 4294967266;
  }
  v15 = v9;
  *((_DWORD *)v9 + 5062) = -1;
  v16 = sub_1DB6DE874(a1, (uint64_t)v9, "rar", (uint64_t)sub_1DB6E58E8, (uint64_t)sub_1DB746EA4, (uint64_t)sub_1DB746F3C, (uint64_t)sub_1DB74733C, (uint64_t)sub_1DB7480F4, (uint64_t)sub_1DB74818C, (uint64_t)sub_1DB6E7C68, (uint64_t)sub_1DB748468, (uint64_t)sub_1DB748470);
  if ((_DWORD)v16)
    free(v15);
  return v16;
}

uint64_t archive_read_support_format_mtree(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  void *v9;
  char *v10;
  int *v11;
  int v12;
  char *v13;

  if (!sub_1DB6E4544("mtree"))
  {
    v10 = "Format not allow-listed in entitlements";
    v11 = a1;
    v12 = -1;
LABEL_7:
    archive_set_error(v11, v12, v10, v2, v3, v4, v5, v6, v13);
    return 4294967266;
  }
  result = sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_format_mtree", v3, v4, v5, v6);
  if ((_DWORD)result == -30)
    return result;
  v8 = malloc_type_calloc(1uLL, 0xB8uLL, 0x10700405C4A5BC3uLL);
  if (!v8)
  {
    v10 = "Can't allocate mtree data";
    v11 = a1;
    v12 = 12;
    goto LABEL_7;
  }
  v9 = v8;
  *((_BYTE *)v8 + 176) = 0;
  *((_DWORD *)v8 + 12) = -1;
  sub_1DB6E8388((_QWORD *)v8 + 19, (uint64_t)off_1EA3217F0);
  result = sub_1DB6DE874(a1, (uint64_t)v9, "mtree", (uint64_t)sub_1DB6E4DE4, (uint64_t)sub_1DB7142A4, (uint64_t)sub_1DB714308, (uint64_t)sub_1DB714F7C, (uint64_t)sub_1DB715098, 0, (uint64_t)sub_1DB6DECC4, 0, 0);
  if ((_DWORD)result)
  {
    free(v9);
    return 0;
  }
  return result;
}

uint64_t archive_read_support_format_lha(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  char *v10;
  int *v11;
  int v12;
  char *v13;

  if (!sub_1DB6E4544("lha"))
  {
    v10 = "Format not allow-listed in entitlements";
    v11 = a1;
    v12 = -1;
LABEL_7:
    archive_set_error(v11, v12, v10, v2, v3, v4, v5, v6, v13);
    return 4294967266;
  }
  result = sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_format_lha", v3, v4, v5, v6);
  if ((_DWORD)result == -30)
    return result;
  v8 = malloc_type_calloc(1uLL, 0x1A8uLL, 0x1070040FEA8A56AuLL);
  if (!v8)
  {
    v10 = "Can't allocate lha data";
    v11 = a1;
    v12 = 12;
    goto LABEL_7;
  }
  v9 = v8;
  v8[34] = 0;
  v8[35] = 0;
  v8[36] = 0;
  result = sub_1DB6DE874(a1, (uint64_t)v8, "lha", (uint64_t)sub_1DB6E5A2C, (uint64_t)sub_1DB73EEAC, (uint64_t)sub_1DB73EF44, (uint64_t)sub_1DB73FA84, (uint64_t)sub_1DB740C00, 0, (uint64_t)sub_1DB6E7D74, 0, 0);
  if ((_DWORD)result)
  {
    free(v9);
    return 0;
  }
  return result;
}

uint64_t archive_read_support_format_iso9660(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char *v18;

  if (sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_format_iso9660", a5, a6, a7, a8) == -30)
    return 4294967266;
  v9 = (char *)malloc_type_calloc(1uLL, 0xA10uLL, 0x10B004091975EA2uLL);
  if (!v9)
  {
    archive_set_error(a1, 12, "Can't allocate iso9660 data", v10, v11, v12, v13, v14, v18);
    return 4294967266;
  }
  v15 = v9;
  *((_QWORD *)v9 + 16) = 0;
  *((_QWORD *)v9 + 18) = 0;
  *((_QWORD *)v9 + 17) = v9 + 128;
  *((_QWORD *)v9 + 19) = v9 + 144;
  *(_QWORD *)v9 = 0x196609660;
  *((_DWORD *)v9 + 2) = 1;
  v16 = sub_1DB6DE874(a1, (uint64_t)v9, "iso9660", (uint64_t)sub_1DB6E5C40, (uint64_t)sub_1DB711958, (uint64_t)sub_1DB711A4C, (uint64_t)sub_1DB71207C, (uint64_t)sub_1DB7125EC, 0, (uint64_t)sub_1DB6E7E08, 0, 0);
  if ((_DWORD)v16)
    free(v15);
  return v16;
}

uint64_t archive_read_support_format_empty(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v8;

  if (sub_1DB6DEC28("empty"))
  {
    if (sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_format_empty", v3, v4, v5, v6) != -30)
      return sub_1DB6DE874(a1, 0, "empty", (uint64_t)sub_1DB6E60E4, 0, (uint64_t)sub_1DB711934, (uint64_t)sub_1DB711950, 0, 0, 0, 0, 0);
  }
  else
  {
    archive_set_error(a1, -1, "Format not allow-listed in entitlements", v2, v3, v4, v5, v6, v8);
  }
  return 4294967266;
}

uint64_t sub_1DB6DE874(int *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int *v29;
  int v30;
  int *v31;
  char *v32;

  if (sub_1DB6DEC28(a3))
  {
    result = sub_1DB6E0594(a1, 14594245, 1, "__archive_read_register_format", v21, v22, v23, v24);
    if ((_DWORD)result != -30)
    {
      v26 = 286;
      while (1)
      {
        v27 = *(_QWORD *)&a1[v26 - 16];
        if (v27 == a4)
          return 4294967276;
        if (!v27)
          break;
        v26 += 22;
        if (v26 == 638)
        {
          v28 = "Not enough slots for format registration";
          v29 = a1;
          v30 = 12;
          goto LABEL_9;
        }
      }
      result = 0;
      v31 = &a1[v26];
      *((_QWORD *)v31 - 8) = a4;
      *((_QWORD *)v31 - 7) = a5;
      *((_QWORD *)v31 - 6) = a6;
      *((_QWORD *)v31 - 5) = a7;
      *((_QWORD *)v31 - 4) = a8;
      *((_QWORD *)v31 - 3) = a9;
      *((_QWORD *)v31 - 10) = a2;
      *((_QWORD *)v31 - 9) = a3;
      *((_QWORD *)v31 - 2) = a10;
      *((_QWORD *)v31 - 1) = a11;
      *(_QWORD *)v31 = a12;
    }
  }
  else
  {
    v28 = "Format not allow-listed in entitlements";
    v29 = a1;
    v30 = -1;
LABEL_9:
    archive_set_error(v29, v30, v28, v20, v21, v22, v23, v24, v32);
    return 4294967266;
  }
  return result;
}

BOOL sub_1DB6DE978(const char *a1, const char *a2, os_unfair_lock_t lock, __CFSet **a4, _BYTE *a5)
{
  __CFSet *Mutable;
  CFAllocatorRef *v11;
  CFAllocatorRef *v12;
  const __CFAllocator *v13;
  const __CFString *v14;
  __SecTask *v15;
  const __CFString *v16;
  CFTypeID TypeID;
  CFIndex Count;
  CFIndex v19;
  CFIndex i;
  const void *ValueAtIndex;
  CFTypeID v22;
  char *v23;
  CFTypeID v24;
  const __CFString *v25;
  CFStringRef v26;
  _BOOL8 v27;
  const char *v29;
  CFErrorRef error;

  os_unfair_lock_lock(lock);
  if (a4)
    Mutable = *a4;
  else
    Mutable = 0;
  v11 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  v12 = (CFAllocatorRef *)MEMORY[0x1E0C9AE20];
  if (a5 && *a5)
    goto LABEL_29;
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v14 = CFStringCreateWithCStringNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x600u, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  v15 = SecTaskCreateFromSelf(v13);
  error = 0;
  v16 = (const __CFString *)SecTaskCopyValueForEntitlement(v15, v14, &error);
  if (v14)
    CFRelease(v14);
  if (v15)
    CFRelease(v15);
  if (!v16)
  {
    if (!error)
    {
LABEL_28:
      Mutable = 0;
      goto LABEL_29;
    }
    v16 = CFErrorCopyDescription(error);
    v23 = (char *)sub_1DB7354E4(v16);
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Error discovering entitlements, error: %s", v23);
    if (!v16)
    {
LABEL_27:
      free(v23);
      goto LABEL_28;
    }
LABEL_26:
    CFRelease(v16);
    goto LABEL_27;
  }
  TypeID = CFArrayGetTypeID();
  if (TypeID != CFGetTypeID(v16))
  {
    v24 = CFGetTypeID(v16);
    v25 = CFCopyTypeIDDescription(v24);
    v23 = (char *)sub_1DB7354E4(v25);
    if (v25)
      CFRelease(v25);
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Error in type of entitlement expected: CFTypeArray got %s", v23);
    goto LABEL_26;
  }
  Mutable = CFSetCreateMutable(v13, 15, MEMORY[0x1E0C9B3B0]);
  if (Mutable)
  {
    v29 = a1;
    Count = CFArrayGetCount((CFArrayRef)v16);
    if (Count >= 1)
    {
      v19 = Count;
      for (i = 0; i != v19; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v16, i);
        v22 = CFGetTypeID(ValueAtIndex);
        if (v22 == CFStringGetTypeID())
          CFSetAddValue(Mutable, ValueAtIndex);
        else
          fwrite("Unexpected non-string types in entitlement", 0x2AuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      }
    }
    CFRelease(v16);
    a1 = v29;
    v11 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    v12 = (CFAllocatorRef *)MEMORY[0x1E0C9AE20];
  }
  else
  {
    CFRelease(v16);
  }
LABEL_29:
  if (Mutable)
  {
    v26 = CFStringCreateWithCStringNoCopy(*v11, a1, 0x8000100u, *v12);
    v27 = CFSetContainsValue(Mutable, v26) != 0;
    if (v26)
      CFRelease(v26);
  }
  else
  {
    v27 = 1;
  }
  *a4 = Mutable;
  *a5 = 1;
  os_unfair_lock_unlock(lock);
  return v27;
}

BOOL sub_1DB6DEC28(const char *a1)
{
  return sub_1DB6DE978(a1, "com.apple.libarchive.formats", (os_unfair_lock_t)&unk_1ECFF6CD0, (__CFSet **)&qword_1ECFF6C40, &byte_1ECFF6BC0);
}

void sub_1DB6DEC4C(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  char **v4;
  char *v5;
  BOOL v6;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 32);
    if (v2)
    {
      v3 = 0;
      v4 = (char **)(a1 + 48);
      do
      {
        v5 = *v4;
        if (*v4)
          v6 = v5 == "(noname)";
        else
          v6 = 1;
        if (!v6)
        {
          free(v5);
          v2 = *(_QWORD *)(a1 + 32);
        }
        ++v3;
        v4 += 2;
      }
      while (v3 < v2);
    }
    free(*(void **)(a1 + 8));
    free((void *)a1);
  }
}

uint64_t sub_1DB6DECC4(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(uint64_t **)(a1 + 2472);
  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 64);
  if (v4)
  {
    do
    {
      v5 = *(_QWORD *)(v4 + 32);
      free(*(void **)(v4 + 48));
      sub_1DB7150D0(*(void ***)(v4 + 40));
      free((void *)v4);
      v4 = v5;
    }
    while (v5);
  }
  sub_1DB6E7C3C(v3);
  sub_1DB6E7C3C(v3 + 96);
  sub_1DB6E7C3C(v3 + 120);
  archive_entry_linkresolver_free(*(uint64_t **)(v3 + 144));
  free(*(void **)(v3 + 32));
  free((void *)v3);
  **(_QWORD **)(a1 + 2472) = 0;
  return 0;
}

void sub_1DB6DED58(char *a1)
{
  uint64_t i;

  for (i = 0; i != 2032; i += 16)
    free(*(void **)&a1[i]);
  free(a1);
}

uint64_t sub_1DB6DED90(uint64_t a1, const char *a2, size_t a3)
{
  size_t v3;
  uint64_t result;
  _BYTE *v7;
  __int32 *v8;
  size_t v9;
  size_t v10;
  mbstate_t v11;
  uint64_t v12;

  v3 = a3;
  v12 = *MEMORY[0x1E0C80C00];
  memset(&v11, 0, sizeof(v11));
  if (!sub_1DB6E3190((void **)a1, 4 * (*(_QWORD *)(a1 + 8) + a3) + 4))
    return 0xFFFFFFFFLL;
  result = 0;
  v7 = *(_BYTE **)a1;
  v8 = (__int32 *)(*(_QWORD *)a1 + 4 * *(_QWORD *)(a1 + 8));
  if (v3 && *a2)
  {
    while (1)
    {
      v9 = mbrtowc(v8, a2, v3, &v11);
      if (v9 > 0xFFFFFFFFFFFFFFFDLL)
      {
        result = 0xFFFFFFFFLL;
        goto LABEL_12;
      }
      v10 = v9;
      if (v9 - 1 >= v3)
        break;
      result = 0;
      ++v8;
      v3 -= v10;
      if (v3)
      {
        a2 += v10;
        if (*a2)
          continue;
      }
      goto LABEL_12;
    }
    result = 0;
LABEL_12:
    v7 = *(_BYTE **)a1;
  }
  *(_QWORD *)(a1 + 8) = ((char *)v8 - v7) >> 2;
  *v8 = 0;
  return result;
}

void **archive_entry_clear(void **a1)
{
  if (a1)
  {
    sub_1DB6DEF44((uint64_t)(a1 + 21));
    sub_1DB6DEF44((uint64_t)(a1 + 36));
    sub_1DB6DEF44((uint64_t)(a1 + 49));
    sub_1DB6DEF44((uint64_t)(a1 + 62));
    sub_1DB6DEF44((uint64_t)(a1 + 101));
    sub_1DB6DEF44((uint64_t)(a1 + 75));
    sub_1DB6DEF44((uint64_t)(a1 + 88));
    free(a1[115]);
    *(_OWORD *)(a1 + 115) = 0u;
    sub_1DB6DF3C0((uint64_t)(a1 + 142));
    archive_entry_xattr_clear((uint64_t)a1);
    archive_entry_sparse_clear((uint64_t)a1);
    free(a1[1]);
    bzero(a1, 0x4E0uLL);
  }
  return a1;
}

void sub_1DB6DEF44(uint64_t a1)
{
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  free(*(void **)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  free(*(void **)a1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  free(*(void **)(a1 + 24));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  free(*(void **)(a1 + 72));
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 96) = 0;
}

uint64_t archive_entry_set_mtime(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a3 % 1000000000;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 160) |= 0x10u;
  if (a3 % 1000000000 < 0)
    LODWORD(v3) = a3 % 1000000000 + 1000000000;
  *(_QWORD *)(result + 56) = a3 / 1000000000 + a2 + ((a3 % 1000000000) >> 63);
  *(_DWORD *)(result + 64) = v3;
  return result;
}

uint64_t archive_entry_pathname_w(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0;
  if (!sub_1DB6DF324(*a1, (uint64_t)(a1 + 62), &v2))
    return v2;
  if (*__error() == 12)
    sub_1DB730818(1, "No memory");
  return 0;
}

void *archive_entry_xattr_add_entry(uint64_t a1, const char *a2, const void *a3, size_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  void *result;

  v8 = malloc_type_malloc(0x20uLL, 0x10B0040BDB88CC9uLL);
  if (!v8 || (v9 = v8, v10 = strdup(a2), (v9[1] = v10) == 0))
    sub_1DB730818(1, "Out of memory");
  result = malloc_type_malloc(a4, 0x4934648CuLL);
  v9[2] = result;
  if (result)
    result = memcpy(result, a3, a4);
  else
    a4 = 0;
  v9[3] = a4;
  *v9 = *(_QWORD *)(a1 + 1192);
  *(_QWORD *)(a1 + 1192) = v9;
  return result;
}

uint64_t archive_clear_error(uint64_t result)
{
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

uint64_t archive_entry_pathname(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0;
  if (!sub_1DB6DF424(*a1, (uint64_t)(a1 + 62), &v2))
    return v2;
  if (*__error() == 12)
    sub_1DB730818(1, "No memory");
  return 0;
}

void archive_entry_xattr_clear(uint64_t a1)
{
  uint64_t **v2;
  uint64_t *v3;

  v2 = *(uint64_t ***)(a1 + 1192);
  if (v2)
  {
    do
    {
      v3 = *v2;
      free(v2[1]);
      free(*(void **)(*(_QWORD *)(a1 + 1192) + 16));
      free(*(void **)(a1 + 1192));
      *(_QWORD *)(a1 + 1192) = v3;
      v2 = (uint64_t **)v3;
    }
    while (v3);
  }
  *(_QWORD *)(a1 + 1192) = 0;
}

_QWORD *archive_entry_sparse_clear(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;

  result = *(_QWORD **)(a1 + 1208);
  if (result)
  {
    do
    {
      v3 = (_QWORD *)*result;
      free(result);
      *(_QWORD *)(a1 + 1208) = v3;
      result = v3;
    }
    while (v3);
  }
  *(_QWORD *)(a1 + 1216) = 0;
  return result;
}

uint64_t archive_entry_set_size(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 112) = a2;
  *(_DWORD *)(result + 160) |= 0x40u;
  return result;
}

uint64_t archive_entry_set_ino(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 160) |= 0x80u;
  *(_QWORD *)(result + 96) = a2;
  return result;
}

_DWORD *archive_entry_set_dev(_DWORD *result, int a2)
{
  result[4] = 0;
  result[40] |= 0x100u;
  result[32] = 0;
  result[33] = a2;
  return result;
}

uint64_t archive_entry_filetype(uint64_t a1)
{
  return *(_WORD *)(a1 + 1136) & 0xF000;
}

uint64_t archive_entry_set_uid(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 120) = a2;
  return result;
}

uint64_t archive_entry_set_mode(uint64_t result, __int16 a2)
{
  *(_DWORD *)(result + 16) = 0;
  *(_WORD *)(result + 1136) = a2;
  return result;
}

uint64_t archive_entry_set_gid(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 88) = a2;
  return result;
}

uint64_t archive_entry_set_filetype(uint64_t result, __int16 a2)
{
  *(_DWORD *)(result + 16) = 0;
  *(_WORD *)(result + 1136) = a2 & 0xF000 | *(_WORD *)(result + 1136) & 0xFFF;
  return result;
}

uint64_t archive_read_data_skip(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t (*v10)(uint64_t);

  result = sub_1DB6E0594((int *)a1, 14594245, 4, "archive_read_data_skip", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 2472) + 48);
    if (v10)
    {
      LODWORD(result) = v10(a1);
    }
    else
    {
      do
        LODWORD(result) = archive_read_data_block(a1);
      while (!(_DWORD)result);
    }
    if ((_DWORD)result == 1)
      result = 0;
    else
      result = result;
    *(_DWORD *)(a1 + 4) = 2;
  }
  return result;
}

uint64_t sub_1DB6DF324(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;

  v5 = *(_DWORD *)(a2 + 96);
  if ((v5 & 4) != 0)
  {
    v7 = (_QWORD *)(a2 + 48);
  }
  else
  {
    *a3 = 0;
    if ((v5 & 1) == 0)
    {
      sub_1DB6DF424(a1, a2, &v8);
      if ((*(_BYTE *)(a2 + 96) & 1) == 0)
        return 0;
    }
    v7 = (_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 56) = 0;
    if (sub_1DB6DED90(a2 + 48, *(const char **)a2, *(_QWORD *)(a2 + 8)))
      return 0xFFFFFFFFLL;
    *(_DWORD *)(a2 + 96) |= 4u;
  }
  result = 0;
  *a3 = *v7;
  return result;
}

void sub_1DB6DF3C0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_1DB6DEF44((uint64_t)(v2 + 3));
      free(*(void **)(a1 + 8));
      *(_QWORD *)(a1 + 8) = v3;
      v2 = v3;
    }
    while (v3);
  }
  free(*(void **)(a1 + 32));
  *(_QWORD *)(a1 + 32) = 0;
  free(*(void **)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_1DB6DF424(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v5;
  uint64_t result;
  int v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  int v14;

  v5 = *(_DWORD *)(a2 + 96);
  if ((v5 & 1) != 0)
  {
    result = 0;
    *a3 = *(_QWORD *)a2;
    return result;
  }
  *a3 = 0;
  if ((v5 & 4) != 0)
  {
    *(_QWORD *)(a2 + 8) = 0;
    result = sub_1DB72CED8(a2, *(__int32 **)(a2 + 48), *(_QWORD *)(a2 + 56));
    *a3 = *(_QWORD *)a2;
    v8 = *(_DWORD *)(a2 + 96);
    if (!(_DWORD)result)
    {
LABEL_14:
      *(_DWORD *)(a2 + 96) = v8 | 1;
      return result;
    }
    result = 0xFFFFFFFFLL;
    if ((v8 & 2) == 0)
      return result;
LABEL_8:
    *(_QWORD *)(a2 + 8) = 0;
    v9 = (char *)sub_1DB6E3AC4(a1);
    v10 = sub_1DB6E370C(a1, "UTF-8", v9, 6);
    if (!v10)
      return 0xFFFFFFFFLL;
    v11 = (uint64_t)v10;
    v12 = *(char **)(a2 + 24);
    v13 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 8) = 0;
    v14 = sub_1DB6E2F80(a2, v12, v13, (uint64_t)v10);
    if (!a1)
      sub_1DB6E7ABC(v11);
    *a3 = *(_QWORD *)a2;
    if (v14)
      return 0xFFFFFFFFLL;
    result = 0;
    v8 = *(_DWORD *)(a2 + 96);
    goto LABEL_14;
  }
  result = 0;
  if ((v5 & 2) != 0)
    goto LABEL_8;
  return result;
}

uint64_t sub_1DB6DF520(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  *a2 = 0;
  result = sub_1DB6DF588(a1, *(void ***)(a1 + 160), a3, a4, a5, a6, a7, a8);
  *a2 = *(_QWORD *)(a1 + 160);
  return result;
}

uint64_t sub_1DB6DF554(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  *a2 = 0;
  result = sub_1DB6E00A8(a1, *(void ***)(a1 + 160), a3, a4, a5, a6, a7, a8);
  *a2 = *(_QWORD *)(a1 + 160);
  return result;
}

uint64_t sub_1DB6DF588(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  _DWORD *v40;
  char *v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  stat *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t matched;
  void (*v61)(uint64_t, _QWORD, void **);
  int v62;
  int v63;
  uint64_t v64;
  stat *v65;
  _QWORD *v66;
  uint64_t st_dev;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  int v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  _BOOL4 v83;
  int v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  int v89;
  BOOL v90;
  const char *v91;
  uint64_t v92;
  uint64_t f_bsize;
  uint64_t f_iosize;
  uint32_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  stat *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *disk_uname;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *disk_gname;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int (*v134)(uint64_t, _QWORD, void **);
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int disk_entry_from_file;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t *v175;
  int v176;
  uint64_t v177;
  char *v179;
  int v180;
  int v181;
  uint64_t v182;
  stat *v183;
  int v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  statfs v188;
  uint64_t v189;

  v189 = *MEMORY[0x1E0C80C00];
  if (sub_1DB6E0594((int *)a1, 195932357, 6, "archive_read_next_header2", a5, a6, a7, a8) == -30)
    return 4294967266;
  v11 = *(_QWORD *)(a1 + 176);
  v12 = *(unsigned int *)(v11 + 536);
  if ((v12 & 0x80000000) == 0)
  {
    sub_1DB6F708C(v12, *(_QWORD *)(a1 + 176), v11 + 424);
    *(_DWORD *)(v11 + 536) = -1;
  }
  archive_entry_clear(a2);
  while (2)
  {
    v18 = 0;
    v19 = 0;
    v185 = 0;
    v186 = 0;
    v187 = 0;
    v20 = 1;
    *(_DWORD *)(v11 + 416) = 0;
    do
    {
      while (1)
      {
LABEL_7:
        v21 = *(_QWORD *)v11;
        if (!*(_QWORD *)v11)
        {
          v23 = 0;
LABEL_18:
          *(_DWORD *)(v11 + 52) = v23;
          goto LABEL_19;
        }
        if (*(_QWORD *)(v11 + 16))
          goto LABEL_15;
        v22 = *(_DWORD *)(v21 + 72);
        if ((v22 & 4) != 0)
        {
          *(_QWORD *)(v11 + 8) = v21;
          sub_1DB6F74C0((uint64_t *)v11, *(_BYTE **)(v21 + 24), *(_QWORD *)(v21 + 32));
          *(_DWORD *)(*(_QWORD *)v11 + 72) &= ~4u;
          v23 = 1;
          goto LABEL_18;
        }
        if ((v22 & 8) != 0)
        {
          *(_QWORD *)(v11 + 8) = v21;
          sub_1DB6F74C0((uint64_t *)v11, *(_BYTE **)(v21 + 24), *(_QWORD *)(v21 + 32));
          v32 = *(_QWORD *)v11;
          *(_DWORD *)(v32 + 72) = *(_DWORD *)(*(_QWORD *)v11 + 72) & 0xFFFFFFF7;
          *(_QWORD *)(v11 + 96) = *(_QWORD *)(v11 + 72);
          v33 = openat(*(_DWORD *)(v11 + 120), *(const char **)(v32 + 24), 17825792);
          v34 = v33;
          sub_1DB6DD880(v33);
          if (v34 < 0)
          {
            *(_DWORD *)(v11 + 56) = *__error();
            sub_1DB6F719C(v11);
            v23 = -1;
          }
          else
          {
            ++*(_DWORD *)(v11 + 104);
            v35 = *(_DWORD *)(v11 + 120);
            if ((*(_BYTE *)(*(_QWORD *)v11 + 72) & 2) != 0)
            {
              *(_DWORD *)(*(_QWORD *)v11 + 80) = v35;
              v37 = *(_DWORD *)(v11 + 108);
              v38 = *(_DWORD *)(v11 + 112);
              *(_DWORD *)(v11 + 108) = v37 + 1;
              if (v37 >= v38)
                *(_DWORD *)(v11 + 112) = v37 + 1;
            }
            else
            {
              close(v35);
            }
            *(_DWORD *)(v11 + 120) = v34;
            *(_DWORD *)(v11 + 48) &= ~0x40u;
            v23 = 2;
          }
          goto LABEL_18;
        }
        if ((v22 & 0x10) != 0)
          break;
        if ((v22 & 0x20) != 0)
        {
          v36 = sub_1DB6F7588((_DWORD *)v11);
          sub_1DB6F719C(v11);
          if (v36)
            v23 = v36;
          else
            v23 = 3;
          goto LABEL_18;
        }
        sub_1DB6F719C(v11);
        *(_DWORD *)(v11 + 48) &= 0xFFFFFFCF;
      }
      *(_DWORD *)(v21 + 72) = v22 & 0xFFFFFFEF;
LABEL_15:
      v23 = sub_1DB6F72FC(v11);
    }
    while (!v23);
LABEL_19:
    switch(v23)
    {
      case -2:
        v39 = *(_DWORD *)(v11 + 56);
        v179 = *(char **)(v11 + 64);
        v40 = (_DWORD *)a1;
        v41 = "%s: Unable to continue traversing directory tree";
        goto LABEL_39;
      case -1:
        archive_set_error((_DWORD *)a1, -1, "%s: Couldn't visit directory", v13, v14, v15, v16, v17, *(char **)(v11 + 64));
        goto LABEL_42;
      case 0:
        sub_1DB6F7214(v11);
        v10 = 1;
        goto LABEL_44;
      case 1:
        v24 = sub_1DB6F7254(v11);
        if (v24)
        {
          v49 = (stat *)v24;
          v50 = *(char **)(v11 + 64);
          if ((*(_BYTE *)(a1 + 208) & 4) != 0)
          {
            v51 = strrchr(*(char **)(v11 + 64), 47);
            v52 = v51 ? v51 + 1 : v50;
            if (*v52 == 46 && v52[1] == 95)
            {
              v10 = 4294967286;
              goto LABEL_44;
            }
          }
          archive_entry_copy_pathname((uint64_t)a2, v50);
          v59 = *(_QWORD *)(a1 + 280);
          if (v59)
          {
            matched = archive_match_path_excluded(v59, (uint64_t *)a2, v53, v54, v55, v56, v57, v58);
            v10 = matched;
            if ((matched & 0x80000000) != 0)
              goto LABEL_136;
            if ((_DWORD)matched)
              goto LABEL_59;
          }
          v62 = *(char *)(v11 + 497);
          if (v62 != 76)
          {
            if (v62 != 72)
              goto LABEL_70;
            *(_BYTE *)(v11 + 497) = 80;
          }
          v63 = sub_1DB6F6D34(v11);
          *(_WORD *)(a1 + 168) = 332;
          v64 = sub_1DB6F72A8(v11);
          if (v64)
          {
            v65 = (stat *)v64;
            v66 = *(_QWORD **)(*(_QWORD *)(v11 + 8) + 16);
            if (!v66)
            {
LABEL_69:
              v184 = v63;
LABEL_71:
              st_dev = v65->st_dev;
              v68 = *(_QWORD *)(a1 + 176);
              v69 = *(_QWORD **)(v68 + 504);
              if (v69 && *v69 == st_dev)
                goto LABEL_111;
              v70 = *(unsigned int *)(v68 + 528);
              if ((int)v70 >= 1)
              {
                v71 = 0;
                v72 = *(_QWORD **)(v68 + 512);
                while (*v72 != st_dev)
                {
                  ++v71;
                  v72 += 11;
                  if (v70 == v71)
                    goto LABEL_77;
                }
                *(_DWORD *)(v68 + 524) = v71;
                *(_QWORD *)(v68 + 504) = v72;
                goto LABEL_111;
              }
LABEL_77:
              v183 = v65;
              v73 = v70 + 1;
              *(_DWORD *)(v68 + 528) = v70 + 1;
              if ((int)v70 >= *(_DWORD *)(v68 + 532))
              {
                v181 = 2 * v73;
                v74 = (char *)malloc_type_realloc(*(void **)(v68 + 512), 176 * v73, 0x1010040DD722C57uLL);
                if (!v74)
                {
                  archive_set_error((_DWORD *)a1, 12, "Can't allocate tar data", v76, v77, v78, v79, v80, v179);
LABEL_40:
                  *(_DWORD *)(a1 + 4) = 0x8000;
                  sub_1DB6F7214(v11);
                  v10 = 4294967266;
                  goto LABEL_44;
                }
                *(_QWORD *)(v68 + 512) = v74;
                *(_DWORD *)(v68 + 532) = v181;
                v75 = *(_QWORD *)(a1 + 176);
              }
              else
              {
                v74 = *(char **)(v68 + 512);
                v75 = v68;
              }
              *(_DWORD *)(v68 + 524) = v70;
              v81 = &v74[88 * (int)v70];
              *(_QWORD *)(v68 + 504) = v81;
              *(_QWORD *)v81 = st_dev;
              *((_QWORD *)v81 + 8) = 0;
              *((_QWORD *)v81 + 9) = 0;
              memset(&v188, 0, 512);
              *(_QWORD *)(*(_QWORD *)(v75 + 504) + 8) = -1;
              v82 = v75;
              v83 = sub_1DB6F76B0(v75);
              v84 = *(_DWORD *)(v82 + 120);
              if (v83)
              {
                v85 = openat(v84, *(const char **)(v82 + 88), 0x1000000);
                v86 = v85;
                sub_1DB6DD880(v85);
                if (v86 < 0)
                {
                  v91 = "openat failed";
                  goto LABEL_105;
                }
                v180 = fstatfs(v86, &v188);
                v182 = v82;
                if (v180)
                  v87 = 0;
                else
                  v87 = sub_1DB6F7724(v82, v86);
                close(v86);
                v90 = v180 == -1;
                v89 = v87;
                v82 = v182;
              }
              else
              {
                v88 = fstatfs(v84, &v188);
                if (v88 == -1)
                  goto LABEL_101;
                if (v88)
                {
                  v92 = *(_QWORD *)(v82 + 504);
LABEL_103:
                  v95 = (v188.f_flags >> 28) & 1;
                  *(_DWORD *)(v92 + 12) = ((v188.f_flags >> 12) & 1) == 0;
                  *(_DWORD *)(v92 + 16) = v95;
                  if (sub_1DB6F76B0(v82))
                  {
                    v91 = "fchdir failed";
                    if (sub_1DB6F6798(v82))
                    {
LABEL_105:
                      v39 = *__error();
                      v40 = (_DWORD *)a1;
                      v41 = (char *)v91;
LABEL_39:
                      archive_set_error(v40, v39, v41, v13, v14, v15, v16, v17, v179);
                      goto LABEL_40;
                    }
                    v96 = pathconf(*(const char **)(v82 + 88), 4);
                  }
                  else
                  {
                    v96 = fpathconf(*(_DWORD *)(v82 + 120), 4);
                  }
                  v97 = 255;
                  if (v96 != -1)
                    v97 = v96;
                  *(_QWORD *)(*(_QWORD *)(v82 + 504) + 24) = v97;
                  v65 = v183;
LABEL_111:
                  v98 = *(_DWORD *)(v11 + 520);
                  if (v98 == -1)
                  {
                    v98 = *(_DWORD *)(v11 + 524);
                    *(_DWORD *)(v11 + 520) = v98;
                  }
                  v99 = *(_DWORD *)(a1 + 208);
                  v100 = v184;
                  if ((v99 & 8) != 0 && v98 != *(_DWORD *)(v11 + 524))
                    v100 = 0;
                  *(_DWORD *)(v11 + 416) = v100;
                  if ((v99 & 2) != 0 && (v65->st_flags & 1) != 0)
                    goto LABEL_135;
                  v101 = v65;
                  archive_entry_copy_stat(a2, (uint64_t)v65);
                  *(_QWORD *)(v11 + 432) = archive_entry_mtime((uint64_t)a2);
                  *(_QWORD *)(v11 + 440) = archive_entry_mtime_nsec((uint64_t)a2);
                  *(_QWORD *)(v11 + 448) = archive_entry_atime((uint64_t)a2);
                  *(_QWORD *)(v11 + 456) = archive_entry_atime_nsec((uint64_t)a2);
                  *(_WORD *)(v11 + 464) = archive_entry_filetype((uint64_t)a2);
                  *(_DWORD *)(v11 + 468) = *(_DWORD *)(*(_QWORD *)(v11 + 504) + 16);
                  v108 = *(_QWORD *)(a1 + 280);
                  if (v108)
                  {
                    v109 = archive_match_time_excluded(v108, (uint64_t *)a2, v102, v103, v104, v105, v106, v107);
                    v10 = v109;
                    if ((v109 & 0x80000000) != 0)
                      goto LABEL_136;
                    if ((_DWORD)v109)
                      goto LABEL_59;
                  }
                  v110 = archive_entry_uid((uint64_t)a2);
                  disk_uname = (char *)archive_read_disk_uname(a1, v110, v111, v112, v113, v114, v115, v116);
                  if (disk_uname)
                    archive_entry_copy_uname((uint64_t)a2, disk_uname);
                  v118 = archive_entry_gid((uint64_t)a2);
                  disk_gname = (char *)archive_read_disk_gname(a1, v118, v119, v120, v121, v122, v123, v124);
                  if (disk_gname)
                    archive_entry_copy_gname((uint64_t)a2, disk_gname);
                  v132 = *(_QWORD *)(a1 + 280);
                  if (!v132)
                  {
LABEL_128:
                    v134 = *(unsigned int (**)(uint64_t, _QWORD, void **))(a1 + 264);
                    if (!v134 || v134(a1, *(_QWORD *)(a1 + 272), a2))
                    {
                      archive_entry_copy_sourcepath((uint64_t)a2, *(char **)(v11 + 88));
                      disk_entry_from_file = archive_read_disk_entry_from_file((int *)a1, (uint64_t *)a2, *(_DWORD *)(v11 + 536), v101, v135, v136, v137, v138);
                      if (disk_entry_from_file)
                        v146 = disk_entry_from_file;
                      else
                        v146 = 0;
                      if ((disk_entry_from_file != 0) | v20 & 1)
                      {
                        v18 = v146;
                      }
                      else
                      {
                        sub_1DB7303C0((void **)&v185, ": %s", v140, v141, v142, v143, v144, v145, "File removed before we read it");
                        archive_set_error((_DWORD *)a1, v19, "%s", v154, v155, v156, v157, v158, v185);
                      }
                      sub_1DB6E7C3C((uint64_t)&v185);
                      v10 = v18;
                      goto LABEL_44;
                    }
                    goto LABEL_135;
                  }
                  v133 = archive_match_owner_excluded(v132, (uint64_t *)a2, v126, v127, v128, v129, v130, v131);
                  v10 = v133;
                  if ((v133 & 0x80000000) == 0)
                  {
                    if (!(_DWORD)v133)
                      goto LABEL_128;
LABEL_59:
                    v61 = *(void (**)(uint64_t, _QWORD, void **))(a1 + 288);
                    if (v61)
                      v61(a1, *(_QWORD *)(a1 + 296), a2);
LABEL_135:
                    v10 = 4294967286;
                    goto LABEL_44;
                  }
LABEL_136:
                  v147 = *__error();
                  v148 = archive_error_string(*(_QWORD *)(a1 + 280));
                  archive_set_error((_DWORD *)a1, v147, "Failed : %s", v149, v150, v151, v152, v153, v148);
                  goto LABEL_44;
                }
                v89 = sub_1DB6F7724(v82, *(_DWORD *)(v82 + 120));
                v90 = 0;
              }
              if (!v90)
              {
                v91 = "statfs failed";
                if (v89 == -1)
                  goto LABEL_105;
                v92 = *(_QWORD *)(v82 + 504);
                if (v89 == 1)
                {
                  f_bsize = v188.f_bsize;
                  f_iosize = v188.f_iosize;
                  if (!v188.f_bsize)
                    f_bsize = -1;
                  if (v188.f_iosize <= 0)
                    f_iosize = -1;
                  *(_QWORD *)(v92 + 48) = f_iosize;
                  *(_QWORD *)(v92 + 56) = f_bsize;
                  *(_QWORD *)(v92 + 32) = f_iosize;
                  *(_QWORD *)(v92 + 40) = -1;
                }
                goto LABEL_103;
              }
LABEL_101:
              v91 = "statfs failed";
              goto LABEL_105;
            }
            while (v66[7] != *(_DWORD *)v64 || v66[8] != *(_QWORD *)(v64 + 8))
            {
              v66 = (_QWORD *)v66[2];
              if (!v66)
                goto LABEL_69;
            }
          }
LABEL_70:
          v184 = sub_1DB6F6BD4(v11);
          *(_WORD *)(a1 + 168) = 80;
          v65 = v49;
          goto LABEL_71;
        }
        if (*__error() == 2 && *(int *)(v11 + 104) >= 1)
        {
          v19 = *__error();
          if (v186)
            v31 = " %s";
          else
            v31 = "%s";
          sub_1DB7303C0((void **)&v185, v31, v25, v26, v27, v28, v29, v30, *(char **)(v11 + 64));
          v20 = 0;
          v18 = 4294967276;
          goto LABEL_7;
        }
        v43 = *__error();
        archive_set_error((_DWORD *)a1, v43, "%s: Cannot stat", v44, v45, v46, v47, v48, *(char **)(v11 + 64));
LABEL_42:
        sub_1DB6F7214(v11);
        v10 = 4294967271;
LABEL_44:
        v42 = *(_DWORD *)(v11 + 536);
        if ((v42 & 0x80000000) == 0)
        {
          close(v42);
          *(_DWORD *)(v11 + 536) = -1;
        }
        if ((_DWORD)v10 == -10)
        {
          archive_entry_clear(a2);
          continue;
        }
        sub_1DB6F7214(v11);
        if ((v10 & 0x80000000) == 0)
        {
          if ((_DWORD)v10 != 1)
          {
            if ((_DWORD)v10)
              goto LABEL_163;
            goto LABEL_145;
          }
          v176 = 16;
          goto LABEL_162;
        }
        if ((_DWORD)v10 == -30)
        {
          v176 = 0x8000;
          goto LABEL_162;
        }
        if ((_DWORD)v10 != -20)
        {
LABEL_163:
          sub_1DB6F7F30(a1);
          return v10;
        }
LABEL_145:
        archive_entry_copy_sourcepath((uint64_t)a2, *(char **)(v11 + 64));
        *(_QWORD *)(v11 + 552) = 0;
        if (archive_entry_filetype((uint64_t)a2) != 0x8000)
        {
          *(_QWORD *)(v11 + 544) = 0;
          *(_DWORD *)(v11 + 540) = 1;
          goto LABEL_161;
        }
        *(_DWORD *)(v11 + 420) = archive_entry_nlink((uint64_t)a2);
        v159 = archive_entry_size((uint64_t)a2);
        *(_QWORD *)(v11 + 544) = v159;
        *(_DWORD *)(v11 + 540) = v159 == 0;
        if (!v159)
          goto LABEL_161;
        v160 = *(_QWORD *)(a1 + 176);
        v161 = archive_entry_sparse_reset((uint64_t)a2);
        *(_DWORD *)(v160 + 488) = v161;
        if (v161 < *(_DWORD *)(v160 + 492))
          goto LABEL_150;
        free(*(void **)(v160 + 472));
        v162 = *(int *)(v160 + 488) + 1;
        *(_DWORD *)(v160 + 492) = v162;
        v163 = malloc_type_malloc(16 * v162, 0x1000040451B5BE8uLL);
        *(_QWORD *)(v160 + 472) = v163;
        if (v163)
        {
          v161 = *(_DWORD *)(v160 + 488);
LABEL_150:
          *(_QWORD *)&v188.f_bsize = 0;
          v185 = 0;
          if (v161 < 1)
          {
            v171 = *(_QWORD *)(v160 + 472);
          }
          else
          {
            v169 = 0;
            v170 = 0;
            do
            {
              archive_entry_sparse_next((uint64_t)a2, &v185, (uint64_t **)&v188);
              v171 = *(_QWORD *)(v160 + 472);
              v172 = (_QWORD *)(v171 + v169 * 8);
              v172[1] = v185;
              *v172 = *(_QWORD *)&v188.f_bsize;
              ++v170;
              v169 += 2;
            }
            while (v170 < *(int *)(v160 + 488));
            if (v169 * 8)
            {
              v173 = archive_entry_size((uint64_t)a2);
              v174 = *(uint64_t **)(v160 + 472);
              v175 = &v174[v169];
              *v175 = 0;
              v175[1] = v173;
              goto LABEL_160;
            }
          }
          *(_QWORD *)(v171 + 8) = 0;
          v177 = archive_entry_size((uint64_t)a2);
          v174 = *(uint64_t **)(v160 + 472);
          *v174 = v177;
LABEL_160:
          *(_QWORD *)(v160 + 480) = v174;
LABEL_161:
          v176 = 4;
LABEL_162:
          *(_DWORD *)(a1 + 4) = v176;
          goto LABEL_163;
        }
        *(_DWORD *)(v160 + 492) = 0;
        archive_set_error((_DWORD *)a1, 12, "Can't allocate data", v164, v165, v166, v167, v168, v179);
        *(_DWORD *)(a1 + 4) = 0x8000;
        return 4294967266;
      default:
        goto LABEL_7;
    }
  }
}

uint64_t sub_1DB6E00A8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int data_skip;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  char *v27;

  result = sub_1DB6E0594((int *)a1, 14594245, 6, "archive_read_next_header", a5, a6, a7, a8);
  if ((_DWORD)result == -30)
    return result;
  archive_entry_clear(a2);
  archive_clear_error(a1);
  if (*(_DWORD *)(a1 + 4) == 4)
  {
    data_skip = archive_read_data_skip(a1, v11, v12, v13, v14, v15, v16, v17);
    if (data_skip == -30)
    {
LABEL_6:
      *(_DWORD *)(a1 + 4) = 0x8000;
      return 4294967266;
    }
    v24 = data_skip;
    if (data_skip == 1)
    {
      archive_set_error((_DWORD *)a1, 5, "Premature end-of-file.", v19, v20, v21, v22, v23, v27);
      goto LABEL_6;
    }
  }
  else
  {
    v24 = 0;
  }
  *(_QWORD *)(a1 + 1048) = **(_QWORD **)(a1 + 1032);
  ++*(_DWORD *)(a1 + 48);
  LODWORD(result) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)(a1 + 2472) + 32))(a1, a2);
  if ((result & 0x80000000) != 0)
  {
    if ((_DWORD)result == -30)
    {
      v25 = 0x8000;
      goto LABEL_17;
    }
    if ((_DWORD)result != -20)
      goto LABEL_18;
  }
  else if ((_DWORD)result)
  {
    if ((_DWORD)result == 1)
    {
      *(_DWORD *)(a1 + 4) = 16;
      --*(_DWORD *)(a1 + 48);
    }
    goto LABEL_18;
  }
  v25 = 4;
LABEL_17:
  *(_DWORD *)(a1 + 4) = v25;
LABEL_18:
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_BYTE *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 1056) = *(_DWORD *)(a1 + 244);
  if ((_DWORD)result == 1 || (int)result < v24)
    return result;
  else
    return v24;
}

uint64_t sub_1DB6E01EC(uint64_t a1, _QWORD *a2, ssize_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  ssize_t v31;
  uint64_t v32;
  ssize_t *v33;
  off_t v34;
  ssize_t v35;
  ssize_t v36;
  uint64_t v37;
  ssize_t v38;
  _QWORD *v39;
  ssize_t v40;
  BOOL v41;
  int v42;
  char *v43;
  _DWORD *v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;

  v12 = *(_QWORD *)(a1 + 176);
  if (sub_1DB6E0594((int *)a1, 195932357, 4, "archive_read_data_block", a5, a6, a7, a8) == -30)
    return 4294967266;
  if (*(_DWORD *)(v12 + 540) || *(uint64_t *)(v12 + 544) < 1)
  {
    v13 = 1;
    goto LABEL_5;
  }
  if ((*(_DWORD *)(v12 + 536) & 0x80000000) != 0)
  {
    v16 = openat(*(_DWORD *)(v12 + 120), *(const char **)(v12 + 88), 0x1000000);
    *(_DWORD *)(v12 + 536) = v16;
    sub_1DB6DD880(v16);
    if ((*(_DWORD *)(v12 + 536) & 0x80000000) != 0)
    {
      v45 = __error();
      archive_set_error((_DWORD *)a1, *v45, "Couldn't open %s", v46, v47, v48, v49, v50, *(char **)(v12 + 64));
      sub_1DB6F7214(v12);
      v13 = 4294967271;
LABEL_5:
      *a2 = 0;
      *a3 = 0;
      *a4 = *(_QWORD *)(v12 + 552);
      v14 = *(unsigned int *)(v12 + 536);
      if ((v14 & 0x80000000) == 0)
      {
        sub_1DB6F708C(v14, v12, v12 + 424);
        *(_DWORD *)(v12 + 536) = -1;
      }
      return v13;
    }
    sub_1DB6F7214(v12);
  }
  v17 = *(_QWORD **)(v12 + 504);
  if (!v17[8])
  {
    v18 = *(_QWORD **)(*(_QWORD *)(a1 + 176) + 504);
    if (!v18[8])
    {
      if (v18[7] == -1)
        v19 = 4096;
      else
        v19 = v18[7];
      v20 = v18[5];
      if (v20 == -1)
      {
        v21 = v18[4];
        v22 = v18[6];
        if (v21 < 0)
          v21 = v18[6];
        v23 = v22 < 0;
        if (v22 < 0)
          v22 = v19;
        if (v23)
          v21 = v19;
        v20 = v22 - v21;
        do
          v20 += v21;
        while (v20 < 0x10000);
      }
      v24 = (unint64_t)malloc_type_malloc(v20 + v19, 0x5A4EBACAuLL);
      v18[8] = v24;
      if (!v24)
      {
        v43 = "Couldn't allocate memory";
        v44 = (_DWORD *)a1;
        v42 = 12;
        goto LABEL_51;
      }
      if (v24 % v19)
        v30 = v19 - v24 % v19;
      else
        v30 = 0;
      v18[9] = v24 + v30;
      v18[10] = v20;
      v17 = *(_QWORD **)(v12 + 504);
    }
  }
  v32 = v17[9];
  v31 = v17[10];
  *(_QWORD *)(v12 + 560) = v32;
  *(_QWORD *)(v12 + 568) = v31;
  v33 = *(ssize_t **)(v12 + 480);
  v35 = *v33;
  v34 = v33[1];
  if (v31 >= *v33)
    v36 = *v33;
  else
    v36 = v31;
  if (v34 > *(_QWORD *)(v12 + 552))
  {
    if (lseek(*(_DWORD *)(v12 + 536), v34, 0) < 0)
    {
      v42 = *__error();
      v43 = "Seek error";
      goto LABEL_50;
    }
    v37 = *(_QWORD *)(*(_QWORD *)(v12 + 480) + 8);
    *(_QWORD *)(v12 + 544) += *(_QWORD *)(v12 + 552) - v37;
    *(_QWORD *)(v12 + 552) = v37;
  }
  if (v36)
  {
    v36 = read(*(_DWORD *)(v12 + 536), *(void **)(v12 + 560), v36);
    if (v36 < 0)
    {
      v42 = *__error();
      v43 = "Read error";
LABEL_50:
      v44 = (_DWORD *)a1;
LABEL_51:
      archive_set_error(v44, v42, v43, v25, v26, v27, v28, v29, v51);
      *(_DWORD *)(a1 + 4) = 0x8000;
      v13 = 4294967266;
      goto LABEL_5;
    }
  }
  if (v35 && !v36)
  {
    v13 = 1;
    *(_DWORD *)(v12 + 540) = 1;
    goto LABEL_5;
  }
  *a2 = *(_QWORD *)(v12 + 560);
  *a3 = v36;
  *a4 = *(_QWORD *)(v12 + 552);
  *(_QWORD *)(v12 + 552) += v36;
  v38 = *(_QWORD *)(v12 + 544) - v36;
  *(_QWORD *)(v12 + 544) = v38;
  if (!v38)
  {
    sub_1DB6F708C(*(unsigned int *)(v12 + 536), v12, v12 + 424);
    *(_QWORD *)(v12 + 536) = 0x1FFFFFFFFLL;
  }
  v39 = *(_QWORD **)(v12 + 480);
  v40 = v39[1] + v36;
  v41 = *v39 == v36;
  *v39 -= v36;
  v39[1] = v40;
  if (!v41 || *(_DWORD *)(v12 + 540))
    return 0;
  v13 = 0;
  *(_QWORD *)(v12 + 480) = v39 + 2;
  return v13;
}

uint64_t sub_1DB6E0500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v18;

  if (sub_1DB6E0594((int *)a1, 14594245, 4, "archive_read_data_block", a5, a6, a7, a8) != -30)
  {
    v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 2472) + 40);
    if (v16)
      return v16(a1, a2, a3, a4);
    archive_set_error((_DWORD *)a1, 22, "Internal error: No format->read_data function registered", v12, 0, v13, v14, v15, v18);
  }
  return 4294967266;
}

uint64_t sub_1DB6E0594(int *a1, int a2, int a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  int v12;
  _DWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20[64];
  char __s1[64];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v11 = *a1;
  if (*a1 > 14594244)
  {
    if (v11 == 212668873 || v11 == 195932357 || v11 == 14594245)
      goto LABEL_8;
LABEL_15:
    sub_1DB6E86C0("PROGRAMMER ERROR: Function ");
    sub_1DB6E86C0(a4);
    sub_1DB6E86C0(" invoked with invalid archive handle.\n");
    sub_1DB6E870C();
  }
  if (v11 != -1329217314 && v11 != -1073631035)
    goto LABEL_15;
LABEL_8:
  if (v11 == a2)
  {
    v13 = a1 + 1;
    v12 = a1[1];
    if ((v12 & a3) != 0)
      return 0;
    if (v12 != 0x8000)
    {
      sub_1DB6E8718(__s1, v12);
      sub_1DB6E8718(v20, a3);
      archive_set_error(a1, -1, "INTERNAL ERROR: Function '%s' invoked with archive structure in state '%s', should be in state '%s'", v15, v16, v17, v18, v19, a4);
    }
  }
  else
  {
    archive_set_error(a1, -1, "PROGRAMMER ERROR: Function '%s' invoked on '%s' archive object, which is not supported.", (uint64_t)a4, a5, a6, a7, a8, a4);
    v13 = a1 + 1;
  }
  *v13 = 0x8000;
  return 4294967266;
}

uint64_t sub_1DB6E0748(uint64_t a1, int8x16_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  const __int32 *v22;
  const __int32 *v23;
  size_t v24;
  __int32 v25;
  const char *v26;
  const char *v27;
  size_t v28;
  uint64_t v30;

  v30 = 0;
  archive_entry_set_dev(a2, dword_1F02F76B8 + 1);
  v4 = ++dword_1ECFF6D4C;
  archive_entry_set_ino((uint64_t)a2, v4);
  if (dword_1ECFF6D4C >= 0xFFFF)
  {
    ++dword_1F02F76B8;
    dword_1ECFF6D4C = 0;
  }
  v9 = *(uint64_t **)(a1 + 2472);
  v10 = *v9;
  *(_QWORD *)(*v9 + 288) = 0;
  while (1)
  {
    v11 = *(_QWORD **)(v10 + 328);
    if (!v11)
      break;
    *(_QWORD *)(v10 + 328) = *v11;
    free(v11);
  }
  *(_QWORD *)(v10 + 336) = 0;
  *(_QWORD *)(v10 + 312) = -1;
  *(_DWORD *)(v10 + 448) = 0;
  *(_DWORD *)(v10 + 272) = 0;
  v12 = *(_QWORD *)(v10 + 400);
  *(_QWORD *)(v10 + 408) = v12;
  if (!v12)
  {
    if (*(_DWORD *)(v10 + 432))
    {
      v13 = *(_QWORD *)(v10 + 424);
    }
    else
    {
      v13 = sub_1DB6E54AC();
      *(_QWORD *)(v10 + 424) = v13;
      *(_DWORD *)(v10 + 432) = 1;
    }
    *(_QWORD *)(v10 + 408) = v13;
  }
  v20 = sub_1DB6E1B5C(a1, (unsigned __int8 **)v10, a2, &v30, v5, v6, v7, v8);
  if (v30)
    sub_1DB6E26F0(a1, v30, v14, v15, v16, v17, v18, v19);
  v21 = *(uint64_t **)(v10 + 328);
  if (v21)
  {
    do
    {
      if (!*((_DWORD *)v21 + 6))
        archive_entry_sparse_add_entry(a2, v21[1], v21[2]);
      v21 = (uint64_t *)*v21;
    }
    while (v21);
  }
  else if (sub_1DB6E091C((_DWORD *)a1, v10, 0, *(_QWORD *)(v10 + 280)))
  {
    return 4294967266;
  }
  if (!(_DWORD)v20)
  {
    if (archive_entry_filetype((uint64_t)a2) == 0x8000)
    {
      v22 = (const __int32 *)archive_entry_pathname_w(a2->i64);
      if (v22)
      {
        v23 = v22;
        v24 = wcslen(v22);
        if (v24)
        {
          v25 = v23[v24 - 1];
          goto LABEL_27;
        }
      }
      else
      {
        v26 = (const char *)archive_entry_pathname(a2->i64);
        if (v26)
        {
          v27 = v26;
          v28 = strlen(v26);
          if (v28)
          {
            v25 = v27[v28 - 1];
LABEL_27:
            if (v25 == 47)
              archive_entry_set_filetype((uint64_t)a2, 0x4000);
          }
        }
      }
    }
    return 0;
  }
  return v20;
}

uint64_t sub_1DB6E091C(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  _DWORD *v17;
  int v18;
  char *v20;

  v8 = malloc_type_calloc(1uLL, 0x20uLL, 0x1020040FA731AC5uLL);
  if (!v8)
  {
    v16 = "Out of memory";
    v17 = a1;
    v18 = 12;
LABEL_9:
    archive_set_error(v17, v18, v16, v9, v10, v11, v12, v13, v20);
    return 4294967266;
  }
  v14 = *(_QWORD **)(a2 + 336);
  if (!v14)
    v14 = (_QWORD *)(a2 + 328);
  *v14 = v8;
  *(_QWORD *)(a2 + 336) = v8;
  if ((a4 | a3) < 0 || (a4 ^ 0x7FFFFFFFFFFFFFFFLL) < a3)
  {
    v16 = "Malformed sparse map data";
    v17 = a1;
    v18 = -1;
    goto LABEL_9;
  }
  v15 = 0;
  v8[1] = a3;
  v8[2] = a4;
  return v15;
}

uint64_t sub_1DB6E09D4(_DWORD *a1, uint64_t a2, int8x16_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char **v18;
  int v19;
  _QWORD *v20;
  const char *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t *v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  unint64_t v40;
  uint64_t v41;
  size_t v42;
  unint64_t v43;
  uint64_t v44;
  size_t v45;
  unint64_t v46;
  size_t v47;
  size_t v48;
  size_t v49;
  size_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  size_t v62;
  int v63;
  uint64_t *v64;
  const char *v65;
  const char *v66;
  int v67;
  uint64_t *v68;
  size_t v69;
  size_t v70;
  size_t v71;
  unint64_t v72;
  size_t v73;
  size_t v74;
  unint64_t v75;
  size_t v76;
  unint64_t v77;
  _DWORD *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  uint64_t v82;
  BOOL v84;
  size_t v85;
  int v86;
  size_t v87;
  int v88;
  size_t v89;
  int v90;
  size_t v91;
  unint64_t v92;
  size_t v93;
  int v94;
  size_t v95;
  unint64_t v96;
  uint64_t v97;
  char **v98;
  int v99;
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  int v107;
  uint64_t *v108;
  int8x16_t *v109;
  int8x16_t *v110;
  unsigned __int8 *__s;
  _QWORD *v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;

  v9 = sub_1DB6E1A78(a1, a2 + 192, a4, a5);
  if ((_DWORD)v9)
    return v9;
  v11 = sub_1DB6E1B5C(a1, a2, a3, a5);
  v9 = v11;
  if ((_DWORD)v11)
  {
    if ((_DWORD)v11 != -20)
      return v9;
  }
  v13 = *(_QWORD *)(a2 + 192);
  v12 = *(_QWORD *)(a2 + 200);
  *(_DWORD *)(a2 + 264) = 0;
  v14 = (uint64_t *)(a2 + 120);
  *(_QWORD *)(a2 + 128) = 0;
  v15 = (uint64_t *)(a2 + 72);
  *(_QWORD *)(a2 + 80) = 0;
  v16 = a2 + 24;
  *(_QWORD *)(a2 + 32) = 0;
  v17 = a2 + 48;
  *(_QWORD *)(a2 + 56) = 0;
  v18 = (char **)(a2 + 96);
  *(_QWORD *)(a2 + 104) = 0;
  if (!v12)
  {
    v97 = (uint64_t)a3;
    v98 = (char **)(a2 + 120);
    v114 = (uint64_t *)(a2 + 72);
    v99 = 0;
LABEL_143:
    v100 = sub_1DB6E3A78((uint64_t)a1, "UTF-8", 1);
    if (!v100)
      goto LABEL_178;
    v101 = (uint64_t)v100;
    if (*(_DWORD *)(a2 + 436))
      sub_1DB72D0F0((uint64_t)v100, 1);
    goto LABEL_146;
  }
  v19 = 0;
  v20 = (_QWORD *)(a2 + 344);
  v21 = "hdrcharset";
  do
  {
    v22 = 0;
    v23 = 0;
    v24 = (char *)(v13 + v12);
    while (1)
    {
      v25 = *(char *)(v13 + v22);
      if (v25 == 32)
        break;
      if ((v25 - 58) <= 0xF5u)
      {
        v105 = "Ignoring malformed pax extended attributes";
        goto LABEL_166;
      }
      v23 = (v25 - 48) + 10 * v23;
      if (v23 >= 0xF4240)
      {
        v105 = "Rejecting pax extended attribute > 1MB";
        goto LABEL_166;
      }
      if (v12 == ++v22)
        goto LABEL_14;
    }
    v24 = (char *)(v13 + v22 + 1);
LABEL_14:
    v26 = v23 - 1;
    if (v23 - 1 >= v12 || *(_BYTE *)(v13 + v26) != 10)
    {
      v105 = "Ignoring malformed pax extended attribute";
      goto LABEL_166;
    }
    *(_BYTE *)(v13 + v26) = 0;
    v27 = *v24;
    if (v27 == 61)
    {
      v99 = -1;
      goto LABEL_167;
    }
    v28 = 0;
    if (!*v24)
    {
LABEL_165:
      v105 = "Invalid pax extended attributes";
LABEL_166:
      archive_set_error(a1, -1, v105, (uint64_t)"atime", (uint64_t)"ctime", (uint64_t)"gid", (uint64_t)v21, (uint64_t)"linkpath", v106);
      v99 = -20;
      goto LABEL_167;
    }
    while (v27 != 61)
    {
      v27 = v24[++v28];
      if (!v27)
        goto LABEL_165;
    }
    v112 = v20;
    v113 = (uint64_t *)v18;
    v29 = 0;
    v24[v28] = 0;
    __s = (unsigned __int8 *)&v24[v28 + 1];
    v13 += v23;
    v30 = v13 - (_QWORD)v24 - v28 - 2;
    v115 = 0;
    v116 = 0;
    v31 = *v24;
    v114 = v15;
    if (v31 > 82)
    {
      switch(*v24)
      {
        case 'a':
          v107 = v19;
          v32 = v14;
          if (!strcmp(v24, "atime"))
          {
            sub_1DB6E29A8(__s, &v116, &v115);
            archive_entry_set_atime((uint64_t)a3, v116, v115);
          }
          goto LABEL_105;
        case 'b':
        case 'd':
        case 'e':
        case 'f':
        case 'i':
        case 'j':
        case 'k':
        case 'n':
        case 'o':
        case 'q':
        case 'r':
        case 't':
          goto LABEL_130;
        case 'c':
          v107 = v19;
          v32 = v14;
          if (!strcmp(v24, "ctime"))
          {
            sub_1DB6E29A8(__s, &v116, &v115);
            archive_entry_set_ctime((uint64_t)a3, v116, v115);
          }
          goto LABEL_105;
        case 'g':
          v107 = v19;
          v32 = v14;
          if (!strcmp(v24, "gid"))
          {
            v74 = strlen((const char *)__s);
            v75 = sub_1DB6E3608((uint64_t)__s, v74, 0xAu);
            archive_entry_set_gid((uint64_t)a3, v75);
            goto LABEL_105;
          }
          if (strcmp(v24, "gname"))
            goto LABEL_105;
          *(_QWORD *)(a2 + 128) = 0;
          v62 = strlen((const char *)__s);
          sub_1DB6E323C(v32, __s, v62);
          v14 = v32;
          v29 = 0;
          v15 = v114;
          goto LABEL_106;
        case 'h':
          v109 = a3;
          v63 = v19;
          v64 = v14;
          v65 = v24;
          v66 = v21;
          if (strcmp(v65, v21))
            goto LABEL_81;
          if (!strcmp((const char *)__s, "BINARY"))
          {
            v29 = 0;
            *(_DWORD *)(a2 + 264) = 1;
          }
          else if (!strcmp((const char *)__s, "ISO-IR 10646 2000 UTF-8"))
          {
            v29 = 0;
            *(_DWORD *)(a2 + 264) = 0;
          }
          else
          {
LABEL_81:
            v29 = 0;
          }
          v15 = v114;
          v14 = v64;
          v19 = v63;
          a3 = v109;
          v20 = v112;
          v21 = v66;
          goto LABEL_130;
        case 'l':
          v110 = a3;
          v67 = v19;
          v68 = v14;
          if (strcmp(v24, "linkpath"))
            goto LABEL_89;
          *(_QWORD *)(a2 + 80) = 0;
          v69 = strlen((const char *)__s);
          sub_1DB6E323C(v114, __s, v69);
          v15 = v114;
          v29 = 0;
          goto LABEL_90;
        case 'm':
          v107 = v19;
          v32 = v14;
          if (!strcmp(v24, "mtime"))
          {
            sub_1DB6E29A8(__s, &v116, &v115);
            archive_entry_set_mtime((uint64_t)a3, v116, v115);
          }
          goto LABEL_105;
        case 'p':
          v110 = a3;
          v67 = v19;
          v68 = v14;
          if (!strcmp(v24, "path"))
          {
            *(_QWORD *)(a2 + 32) = 0;
            v70 = strlen((const char *)__s);
            sub_1DB6E323C((uint64_t *)(a2 + 24), __s, v70);
          }
LABEL_89:
          v29 = 0;
          v15 = v114;
LABEL_90:
          v14 = v68;
          v19 = v67;
          a3 = v110;
          goto LABEL_129;
        case 's':
          v107 = v19;
          v32 = v14;
          if (strcmp(v24, "size"))
            goto LABEL_105;
          v71 = strlen((const char *)__s);
          v72 = sub_1DB6E3608((uint64_t)__s, v71, 0xAu);
          if ((v72 & 0x8000000000000000) != 0)
          {
            v106 = "Invalid entry size";
LABEL_177:
            archive_set_error(a1, -1, v106, v34, v35, v36, v37, v38, v106);
LABEL_178:
            v99 = -30;
            goto LABEL_167;
          }
          *(_QWORD *)(a2 + 280) = v72;
          v21 = "hdrcharset";
          if (*(_DWORD *)(a2 + 448))
          {
            v14 = v32;
            v29 = 0;
          }
          else
          {
            archive_entry_set_size((uint64_t)a3, v72);
            v21 = "hdrcharset";
            v14 = v32;
            v29 = 0;
            *(_QWORD *)(a2 + 312) = *(_QWORD *)(a2 + 280);
          }
          v15 = v114;
          v19 = v107;
          v20 = v112;
          break;
        case 'u':
          v107 = v19;
          v32 = v14;
          if (!strcmp(v24, "uid"))
          {
            v76 = strlen((const char *)__s);
            v77 = sub_1DB6E3608((uint64_t)__s, v76, 0xAu);
            archive_entry_set_uid((uint64_t)a3, v77);
          }
          else if (!strcmp(v24, "uname"))
          {
            *(_QWORD *)(a2 + 104) = 0;
            v73 = strlen((const char *)__s);
            sub_1DB6E323C(v113, __s, v73);
          }
          goto LABEL_105;
        default:
          if (v31 != 83)
            goto LABEL_130;
          v106 = (char *)v30;
          v108 = v14;
          if (!strcmp(v24, "SCHILY.acl.access"))
          {
            v78 = a1;
            v79 = a2;
            v80 = (uint64_t)a3;
            v81 = __s;
            v82 = 256;
            goto LABEL_126;
          }
          if (!strcmp(v24, "SCHILY.acl.default"))
          {
            v78 = a1;
            v79 = a2;
            v80 = (uint64_t)a3;
            v81 = __s;
            v82 = 512;
            goto LABEL_126;
          }
          if (!strcmp(v24, "SCHILY.acl.ace"))
          {
            v78 = a1;
            v79 = a2;
            v80 = (uint64_t)a3;
            v81 = __s;
            v82 = 15360;
LABEL_126:
            if (sub_1DB7177C8(v78, v79, v80, v81, (char *)v82, v53, v54, v55) == -30)
              goto LABEL_178;
            goto LABEL_127;
          }
          if (!strcmp(v24, "SCHILY.devmajor"))
          {
            v85 = strlen((const char *)__s);
            v86 = sub_1DB6E3608((uint64_t)__s, v85, 0xAu);
            archive_entry_set_rdevmajor(a3, v86);
            goto LABEL_127;
          }
          if (!strcmp(v24, "SCHILY.devminor"))
          {
            v87 = strlen((const char *)__s);
            v88 = sub_1DB6E3608((uint64_t)__s, v87, 0xAu);
            archive_entry_set_rdevminor(a3, v88);
            goto LABEL_127;
          }
          if (!strcmp(v24, "SCHILY.fflags"))
          {
            archive_entry_copy_fflags_text(a3, (char *)__s);
            goto LABEL_127;
          }
          if (!strcmp(v24, "SCHILY.dev"))
          {
            v89 = strlen((const char *)__s);
            v90 = sub_1DB6E3608((uint64_t)__s, v89, 0xAu);
            archive_entry_set_dev(a3, v90);
            goto LABEL_127;
          }
          if (!strcmp(v24, "SCHILY.ino"))
          {
            v91 = strlen((const char *)__s);
            v92 = sub_1DB6E3608((uint64_t)__s, v91, 0xAu);
            archive_entry_set_ino((uint64_t)a3, v92);
            goto LABEL_127;
          }
          if (!strcmp(v24, "SCHILY.nlink"))
          {
            v93 = strlen((const char *)__s);
            v94 = sub_1DB6E3608((uint64_t)__s, v93, 0xAu);
            archive_entry_set_nlink((uint64_t)a3, v94);
            goto LABEL_127;
          }
          if (!strcmp(v24, "SCHILY.realsize"))
          {
            v95 = strlen((const char *)__s);
            v96 = sub_1DB6E3608((uint64_t)__s, v95, 0xAu);
            *(_QWORD *)(a2 + 312) = v96;
            *(_DWORD *)(a2 + 448) = 1;
            archive_entry_set_size((uint64_t)a3, v96);
            goto LABEL_127;
          }
          if (!strncmp(v24, "SCHILY.xattr.", 0xDuLL))
          {
            sub_1DB6E3D6C((uint64_t)a3, v24, __s, (size_t)v106);
            goto LABEL_127;
          }
          if (!strcmp(v24, "SUN.holesdata"))
          {
            v56 = sub_1DB7178F8(a1, a2, __s);
            if (v56 < 0)
            {
              v29 = v56;
              if (v56 == -30)
                goto LABEL_178;
              archive_set_error(a1, -1, "Parse error: SUN.holesdata", v57, v58, v59, v60, v61, v106);
              goto LABEL_128;
            }
          }
          goto LABEL_127;
      }
      goto LABEL_130;
    }
    if (v31 == 71)
    {
      v106 = "Non-regular file cannot be sparse";
      v108 = v14;
      if (!strncmp(v24, "GNU.sparse", 0xAuLL) && !*(_DWORD *)(a2 + 320))
        goto LABEL_177;
      if (!strcmp(v24, "GNU.sparse.numblocks"))
      {
        *v112 = -1;
        v112[1] = -1;
        *(_QWORD *)(a2 + 360) = 0;
      }
      if (!strcmp(v24, "GNU.sparse.offset"))
      {
        v39 = strlen((const char *)__s);
        v40 = sub_1DB6E3608((uint64_t)__s, v39, 0xAu);
        *(_QWORD *)(a2 + 344) = v40;
        v41 = *(_QWORD *)(a2 + 352);
        if (v41 != -1)
        {
          if (sub_1DB6E091C(a1, a2, v40, v41))
            goto LABEL_178;
          *v112 = -1;
          v112[1] = -1;
        }
      }
      if (!strcmp(v24, "GNU.sparse.numbytes"))
      {
        v42 = strlen((const char *)__s);
        v43 = sub_1DB6E3608((uint64_t)__s, v42, 0xAu);
        *(_QWORD *)(a2 + 352) = v43;
        v44 = *(_QWORD *)(a2 + 344);
        if (v44 != -1)
        {
          if (sub_1DB6E091C(a1, a2, v44, v43))
            goto LABEL_178;
          *v112 = -1;
          v112[1] = -1;
        }
      }
      if (!strcmp(v24, "GNU.sparse.size"))
      {
        v45 = strlen((const char *)__s);
        v46 = sub_1DB6E3608((uint64_t)__s, v45, 0xAu);
        *(_QWORD *)(a2 + 312) = v46;
        archive_entry_set_size((uint64_t)a3, v46);
        *(_DWORD *)(a2 + 448) = 1;
      }
      if (!strcmp(v24, "GNU.sparse.map")
        && (*(_QWORD *)(a2 + 360) = 0x100000000, sub_1DB717704(a1, a2, (uint64_t)__s)))
      {
        v29 = -20;
      }
      else
      {
        if (!strcmp(v24, "GNU.sparse.major"))
        {
          v47 = strlen((const char *)__s);
          *(_DWORD *)(a2 + 360) = sub_1DB6E3608((uint64_t)__s, v47, 0xAu);
          *(_BYTE *)(a2 + 368) = 1;
        }
        if (!strcmp(v24, "GNU.sparse.minor"))
        {
          v48 = strlen((const char *)__s);
          *(_DWORD *)(a2 + 364) = sub_1DB6E3608((uint64_t)__s, v48, 0xAu);
          *(_BYTE *)(a2 + 368) = 1;
        }
        if (!strcmp(v24, "GNU.sparse.name"))
        {
          *(_QWORD *)(a2 + 56) = 0;
          v49 = strlen((const char *)__s);
          sub_1DB6E323C((uint64_t *)(a2 + 48), __s, v49);
        }
        if (!strcmp(v24, "GNU.sparse.realsize"))
        {
          v50 = strlen((const char *)__s);
          v51 = sub_1DB6E3608((uint64_t)__s, v50, 0xAu);
          *(_QWORD *)(a2 + 312) = v51;
          archive_entry_set_size((uint64_t)a3, v51);
          v29 = 0;
          *(_DWORD *)(a2 + 448) = 1;
        }
        else
        {
LABEL_127:
          v29 = 0;
        }
      }
LABEL_128:
      v15 = v114;
      v14 = v108;
LABEL_129:
      v20 = v112;
      v21 = "hdrcharset";
      goto LABEL_130;
    }
    if (v31 != 76)
    {
      if (v31 != 82)
        goto LABEL_130;
      v33 = v30;
      v107 = v19;
      v32 = v14;
      if (!strcmp(v24, "RHT.security.selinux"))
        archive_entry_xattr_add_entry((uint64_t)a3, "security.selinux", __s, v33);
LABEL_105:
      v29 = 0;
      v15 = v114;
      v14 = v32;
LABEL_106:
      v19 = v107;
      goto LABEL_129;
    }
    v108 = v14;
    if (!strcmp(v24, "LIBARCHIVE.creationtime"))
    {
      sub_1DB6E29A8(__s, &v116, &v115);
      archive_entry_set_birthtime((uint64_t)a3, v116, v115);
    }
    if (!strcmp(v24, "LIBARCHIVE.symlinktype"))
    {
      if (!strcmp((const char *)__s, "file"))
      {
        v52 = 1;
        goto LABEL_109;
      }
      if (!strcmp((const char *)__s, "dir"))
      {
        v52 = 2;
LABEL_109:
        archive_entry_set_symlink_type((uint64_t)a3, v52);
      }
    }
    if (strlen(v24) < 0x12)
      goto LABEL_127;
    v84 = *(_QWORD *)v24 == 0x494843524142494CLL && *((_QWORD *)v24 + 1) == 0x72747461782E4556 && v24[16] == 46;
    v15 = v114;
    v14 = v108;
    v20 = v112;
    v21 = "hdrcharset";
    if (v84)
    {
      sub_1DB6E2A84((uint64_t)a3, v24, (const char *)__s);
      v21 = "hdrcharset";
      v20 = v112;
      v14 = v108;
      v15 = v114;
    }
    v29 = 0;
LABEL_130:
    if (v19 >= v29)
      v19 = v29;
    v12 -= v23;
    v18 = (char **)v113;
  }
  while (v12);
  v97 = (uint64_t)a3;
  v99 = v19;
  if (!*(_DWORD *)(a2 + 264))
  {
    v98 = (char **)v14;
    v16 = a2 + 24;
    v17 = a2 + 48;
    goto LABEL_143;
  }
  v98 = (char **)v14;
  v101 = *(_QWORD *)(a2 + 400);
  v16 = a2 + 24;
  v17 = a2 + 48;
LABEL_146:
  v102 = *(_QWORD *)(a2 + 128);
  if (v102 && sub_1DB6E3BD8(v97, *v98, v102, v101))
  {
    v99 = sub_1DB71767C(a1, v101, "Gname");
    if (v99 == -30)
      goto LABEL_167;
    archive_entry_copy_gname(v97, *v98);
  }
  v103 = *(_QWORD *)(a2 + 80);
  if (v103 && sub_1DB6E9C14(v97, (char *)*v114, v103, v101))
  {
    v99 = sub_1DB71767C(a1, v101, "Linkname");
    if (v99 == -30)
      goto LABEL_167;
    archive_entry_copy_link(v97, (char *)*v114);
  }
  if (*(_QWORD *)(a2 + 56) || (v17 = v16, *(_QWORD *)(a2 + 32)))
  {
    if (sub_1DB6E3BD0(v97, *(char **)v17, *(_QWORD *)(v17 + 8), v101))
    {
      v99 = sub_1DB71767C(a1, v101, "Pathname");
      if (v99 == -30)
        goto LABEL_167;
      archive_entry_copy_pathname(v97, *(char **)v17);
    }
  }
  v104 = *(_QWORD *)(a2 + 104);
  if (v104)
  {
    if (sub_1DB6E3BC8(v97, *v18, v104, v101))
    {
      v99 = sub_1DB71767C(a1, v101, "Uname");
      if (v99 != -30)
        archive_entry_copy_uname(v97, *v18);
    }
  }
LABEL_167:
  if ((int)v9 >= v99)
    result = v99;
  else
    result = v9;
  *(_QWORD *)(a2 + 296) = -*(_DWORD *)(a2 + 280) & 0x1FFLL;
  return result;
}

uint64_t sub_1DB6E1A78(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  const void *v21;
  uint64_t result;
  char *v23;

  v7 = (char *)sub_1DB6E3568((char *)(a3 + 124), 0xCuLL);
  v13 = (size_t)v7;
  if ((unint64_t)v7 <= 0x200000)
  {
    if (sub_1DB6E3190((void **)a2, (size_t)(v7 + 1)))
    {
      if (*a4)
        sub_1DB6E26F0((uint64_t)a1, *a4, v14, v15, v16, v17, v18, v19);
      v20 = (v13 + 511) & 0xFFFFFFFFFFFFFE00;
      *a4 = v20;
      v21 = (const void *)sub_1DB6E2588((uint64_t)a1, v20, 0, v15, v16, v17, v18, v19);
      if (v21)
      {
        memcpy(*(void **)a2, v21, v13);
        result = 0;
        *(_BYTE *)(*(_QWORD *)a2 + v13) = 0;
        *(_QWORD *)(a2 + 8) = v13;
        return result;
      }
      *a4 = 0;
    }
    else
    {
      archive_set_error(a1, 12, "No memory", v15, v16, v17, v18, v19, v23);
    }
  }
  else
  {
    archive_set_error(a1, 22, "Special header too large: %llu", v8, v9, v10, v11, v12, v7);
  }
  return 4294967266;
}

uint64_t sub_1DB6E1B5C(uint64_t a1, unsigned __int8 **a2, int8x16_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  _DWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _DWORD *v53;
  int v54;
  _BOOL4 v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  char *v73;
  _BYTE *v74;
  _BYTE *v75;
  uint64_t v76;
  unint64_t v77;
  BOOL v79;
  unsigned __int8 *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  _DWORD *v88;
  int v89;
  char *v90;
  unint64_t v91;

  v91 = 0;
  v12 = *a4;
  while (1)
  {
    if (v12)
    {
      sub_1DB6E26F0(a1, v12, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      *a4 = 0;
    }
    v13 = (_BYTE *)sub_1DB6E2588(a1, 0x200uLL, &v91, (uint64_t)a4, a5, a6, a7, a8);
    v14 = v91;
    if ((v91 & 0x8000000000000000) != 0)
      return v14;
    if (!v91)
      return 1;
    if (v91 <= 0x1FF)
    {
      v52 = "Truncated tar archive";
      v53 = (_DWORD *)a1;
      v54 = 79;
LABEL_95:
      archive_set_error(v53, v54, v52, (uint64_t)a4, a5, a6, a7, a8, v90);
      return 4294967266;
    }
    v15 = (uint64_t)v13;
    *a4 = 512;
    if (*v13)
      break;
    v16 = 1;
    while ((_DWORD)v16 != 512)
    {
      if (v13[v16++])
        goto LABEL_21;
    }
    if (!*(_QWORD *)(a1 + 24))
    {
      *(_DWORD *)(a1 + 16) = 196608;
      *(_QWORD *)(a1 + 24) = "tar";
    }
    v12 = 512;
    if (!*((_DWORD *)a2 + 111))
    {
      sub_1DB6E26F0(a1, 512, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      *a4 = 0;
      v23 = (_BYTE *)sub_1DB6E2588(a1, 0x200uLL, 0, v18, v19, v20, v21, v22);
      if (v23 && !*v23)
      {
        v30 = 1;
        while ((_DWORD)v30 != 512)
        {
          if (v23[v30++])
            goto LABEL_104;
        }
        sub_1DB6E26F0(a1, 512, v24, v25, v26, v27, v28, v29);
      }
LABEL_104:
      archive_clear_error(a1);
      return 1;
    }
  }
LABEL_21:
  if (!sub_1DB6E28C0((uint64_t)v13))
  {
    sub_1DB6E26F0(a1, 512, v32, v33, v34, v35, v36, v37);
    *a4 = 0;
    archive_set_error((_DWORD *)a1, 22, "Damaged tar archive", v42, v43, v44, v45, v46, v90);
    return 4294967286;
  }
  v38 = *((_DWORD *)a2 + 67);
  *((_DWORD *)a2 + 67) = v38 + 1;
  if (v38 >= 32)
  {
    sub_1DB6E26F0(a1, 512, v32, v33, v34, v35, v36, v37);
    *a4 = 0;
    v39 = "Too many special headers";
    v40 = (_DWORD *)a1;
    v41 = 22;
    goto LABEL_24;
  }
  v47 = *(char *)(v15 + 156);
  if (v47 > 85)
  {
    if (v47 <= 102)
    {
      if (v47 == 86)
      {
        v14 = sub_1DB6E1B5C(a1, a2, a3, a4);
        v55 = v14 != 1;
        goto LABEL_77;
      }
      if (v47 == 88)
      {
        *(_DWORD *)(a1 + 16) = 196610;
        v48 = "POSIX pax interchange format (Sun variant)";
LABEL_42:
        *(_QWORD *)(a1 + 24) = v48;
        v49 = sub_1DB6E09D4((_DWORD *)a1, (uint64_t)a2, a3, v15, a4);
        goto LABEL_75;
      }
      goto LABEL_65;
    }
    if (v47 != 103)
    {
      if (v47 == 120)
      {
        *(_DWORD *)(a1 + 16) = 196610;
        v48 = "POSIX pax interchange format";
        goto LABEL_42;
      }
LABEL_65:
      if (*(_QWORD *)(v15 + 257) == 0x20207261747375)
      {
        *(_DWORD *)(a1 + 16) = 196612;
        *(_QWORD *)(a1 + 24) = "GNU tar format";
        v49 = sub_1DB717218((_DWORD *)a1, (uint64_t)a2, a3, (char *)v15, a4);
      }
      else if (*(_DWORD *)(v15 + 257) == 1635021685 && *(_BYTE *)(v15 + 261) == 114)
      {
        if (*(_DWORD *)(a1 + 16) != 196610)
        {
          *(_DWORD *)(a1 + 16) = 196609;
          *(_QWORD *)(a1 + 24) = "POSIX ustar format";
        }
        v49 = sub_1DB6E2D80((_DWORD *)a1, (uint64_t)a2, a3, (char *)v15);
      }
      else
      {
        *(_DWORD *)(a1 + 16) = 196608;
        *(_QWORD *)(a1 + 24) = "tar (non-POSIX)";
        v49 = sub_1DB7174A8((_DWORD *)a1, (uint64_t)a2, (uint64_t)a3, (char *)v15);
      }
      goto LABEL_75;
    }
    *(_DWORD *)(a1 + 16) = 196610;
    *(_QWORD *)(a1 + 24) = "POSIX pax interchange format";
    v49 = sub_1DB6E1A78((_DWORD *)a1, (uint64_t)(a2 + 27), v15, a4);
    if (!(_DWORD)v49)
    {
      v66 = sub_1DB6E1B5C(a1, a2, a3, a4);
      v14 = 1;
      if ((_DWORD)v66 != 1)
      {
        v55 = 1;
        v14 = v66;
        goto LABEL_77;
      }
      return v14;
    }
LABEL_75:
    v14 = v49;
    goto LABEL_76;
  }
  if (v47 != 65)
  {
    if (v47 == 75)
    {
      v49 = sub_1DB6E1A78((_DWORD *)a1, (uint64_t)(a2 + 18), v15, a4);
      if ((_DWORD)v49)
        goto LABEL_75;
      v65 = sub_1DB6E1B5C(a1, a2, a3, a4);
      if ((_DWORD)v65)
      {
        v14 = v65;
        if ((_DWORD)v65 != -20)
          goto LABEL_76;
      }
      archive_entry_copy_link((uint64_t)a3, (char *)a2[18]);
      v14 = 0;
    }
    else
    {
      if (v47 != 76)
        goto LABEL_65;
      v49 = sub_1DB6E1A78((_DWORD *)a1, (uint64_t)(a2 + 21), v15, a4);
      if ((_DWORD)v49)
        goto LABEL_75;
      v51 = sub_1DB6E1B5C(a1, a2, a3, a4);
      v14 = v51;
      if ((_DWORD)v51 && (_DWORD)v51 != -20)
        goto LABEL_76;
      if (sub_1DB6E3BD0((uint64_t)a3, (char *)a2[21], (unint64_t)a2[22], (uint64_t)a2[51]))
      {
        v49 = sub_1DB71767C((_DWORD *)a1, (uint64_t)a2[51], "Pathname");
        goto LABEL_75;
      }
    }
LABEL_126:
    v55 = 1;
    goto LABEL_78;
  }
  *(_DWORD *)(a1 + 16) = 196610;
  *(_QWORD *)(a1 + 24) = "Solaris tar";
  v56 = sub_1DB6E3568((char *)(v15 + 124), 0xCuLL);
  v49 = sub_1DB6E1A78((_DWORD *)a1, (uint64_t)a2, v15, a4);
  if ((_DWORD)v49)
    goto LABEL_75;
  v57 = sub_1DB6E1B5C(a1, a2, a3, a4);
  if ((_DWORD)v57)
  {
    v14 = v57;
    if ((_DWORD)v57 != -20)
      goto LABEL_76;
  }
  v58 = 0;
  v59 = *a2;
  v60 = **a2;
  if (!**a2 || v56 < 1)
  {
LABEL_102:
    archive_set_error((_DWORD *)a1, -1, "Malformed Solaris ACL attribute (unsupported type %o)", (uint64_t)a4, a5, a6, a7, a8, (char *)v58);
LABEL_125:
    v14 = 4294967276;
    goto LABEL_126;
  }
  v58 = 0;
  v61 = (unint64_t)&v59[v56];
  v62 = (unint64_t)*a2;
  do
  {
    v63 = v62;
    if ((v60 - 56) <= 0xFFFFFFF7)
    {
      v73 = "Malformed Solaris ACL attribute (invalid digit)";
LABEL_124:
      archive_set_error((_DWORD *)a1, -1, v73, (uint64_t)a4, a5, a6, a7, a8, v90);
      goto LABEL_125;
    }
    v58 = (v60 - 48) + 8 * v58;
    if (v58 >= 0x1000000)
    {
      v73 = "Malformed Solaris ACL attribute (count too large)";
      goto LABEL_124;
    }
    ++v62;
    v60 = *(unsigned __int8 *)(v63 + 1);
  }
  while (*(_BYTE *)(v63 + 1) && v62 < v61);
  if ((v58 & 0xFFFC0000) == 0x40000)
  {
    v64 = 256;
  }
  else
  {
    if ((v58 & 0xFFFC0000) != 0xC0000)
      goto LABEL_102;
    v64 = 15360;
  }
  v74 = (_BYTE *)(v63 + 2);
  if (v63 + 2 >= v61)
  {
    v73 = "Malformed Solaris ACL attribute (body overflow)";
    goto LABEL_124;
  }
  v75 = &v59[v56];
  v76 = 1;
  do
  {
    v77 = v62 + v76;
    if (*(unsigned __int8 *)(v62 + v76++))
      v79 = v77 >= (unint64_t)v75;
    else
      v79 = 1;
  }
  while (!v79);
  if (!a2[52])
  {
    v80 = (unsigned __int8 *)sub_1DB6E3A78(a1, "UTF-8", 1);
    a2[52] = v80;
    if (!v80)
      return 4294967266;
  }
  a2[48] = 0;
  sub_1DB6E323C((uint64_t *)a2 + 47, v74, v76 - 2);
  v81 = archive_entry_acl((uint64_t)a3);
  v14 = sub_1DB719DD8(v81, a2[47], v64, (uint64_t)a2[52]);
  if (!(_DWORD)v14)
    goto LABEL_126;
  if (*__error() == 12)
  {
    v87 = "Can't allocate memory for ACL";
    v88 = (_DWORD *)a1;
    v89 = 12;
  }
  else
  {
    v87 = "Malformed Solaris ACL attribute (unparsable)";
    v88 = (_DWORD *)a1;
    v89 = -1;
  }
  archive_set_error(v88, v89, v87, v82, v83, v84, v85, v86, v90);
LABEL_76:
  v55 = 1;
LABEL_77:
  if ((_DWORD)v14 == -30)
    return 4294967266;
LABEL_78:
  if (*a4)
  {
    sub_1DB6E26F0(a1, *a4, v50, (uint64_t)a4, a5, a6, a7, a8);
    *a4 = 0;
  }
  v68 = *((_DWORD *)a2 + 67) - 1;
  *((_DWORD *)a2 + 67) = v68;
  if ((!(_DWORD)v14 || (_DWORD)v14 == -20) && !v68 && *((_DWORD *)a2 + 110))
  {
    v69 = *((_DWORD *)a2 + 68);
    *((_DWORD *)a2 + 68) = v69 + 1;
    if (v69 > 0)
      return 0;
    v70 = sub_1DB6E3BE0(a1, (uint64_t)a2, a3->i64, (unint64_t *)a4);
    --*((_DWORD *)a2 + 68);
    if (v70 >= (int)v14)
      v14 = v14;
    else
      v14 = v70;
  }
  if ((_DWORD)v14 != -20)
  {
    if ((_DWORD)v14 != 1)
    {
      if (!(_DWORD)v14)
        goto LABEL_86;
      return 4294967266;
    }
    if (v55)
    {
      v52 = "Damaged tar archive";
      v53 = (_DWORD *)a1;
      v54 = 22;
      goto LABEL_95;
    }
    return 1;
  }
LABEL_86:
  if (*((_BYTE *)a2 + 368))
  {
    if (*((_DWORD *)a2 + 90) == 1 && !*((_DWORD *)a2 + 91))
    {
      *((_BYTE *)a2 + 368) = 0;
      v71 = sub_1DB71754C((_DWORD *)a1, a2, a4, (uint64_t)a4, a5, a6, a7, a8);
      if (v71 < 0)
      {
        return v71;
      }
      else
      {
        a2[35] -= v71;
        *((_BYTE *)a2 + 368) = 0;
      }
    }
    else
    {
      v39 = "Unrecognized GNU sparse file format";
      v40 = (_DWORD *)a1;
      v41 = -1;
LABEL_24:
      archive_set_error(v40, v41, v39, (uint64_t)a4, a5, a6, a7, a8, v90);
      return 4294967276;
    }
  }
  return v14;
}

size_t sub_1DB6E22F4(uint64_t a1, size_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t result;
  uint64_t v10;
  size_t v13;
  BOOL v14;
  _OWORD *v16;
  size_t v17;
  size_t v18;
  char *v20;
  char *v21;
  size_t v22;
  size_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  size_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  size_t v32;
  size_t v33;
  size_t v34;
  size_t v35;
  size_t v36;
  int v37;
  char *v38;

  if (*(_BYTE *)(a1 + 178))
  {
    if (!a3)
      return 0;
LABEL_3:
    result = 0;
    v10 = -30;
LABEL_4:
    *a3 = v10;
    return result;
  }
  v13 = *(_QWORD *)(a1 + 136);
  v14 = v13 == 0;
  if (v13 >= a2 && v13 != 0)
  {
LABEL_47:
    if (a3)
      *a3 = v13;
    return *(_QWORD *)(a1 + 128);
  }
  v16 = (_OWORD *)(a1 + 144);
  while (1)
  {
    v17 = *(_QWORD *)(a1 + 168);
    v18 = v17 + v13;
    if (*(_QWORD *)(a1 + 152) >= v17 + v13 && v18 >= a2)
    {
      result = *(_QWORD *)(a1 + 160) - v13;
      *(_QWORD *)(a1 + 160) = result;
      *(_QWORD *)(a1 + 168) = v18;
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 112);
      *(_QWORD *)(a1 + 136) = 0;
      if (a3)
        *a3 = v18;
      return result;
    }
    v20 = *(char **)(a1 + 128);
    v21 = *(char **)(a1 + 112);
    if (v20 > v21 && &v20[a2] > &v21[*(_QWORD *)(a1 + 120)])
    {
      if (!v14)
      {
        memmove(v21, *(const void **)(a1 + 128), v13);
        v21 = *(char **)(a1 + 112);
        v17 = *(_QWORD *)(a1 + 168);
      }
      *(_QWORD *)(a1 + 128) = v21;
      v20 = v21;
    }
    if (v17)
    {
      v22 = *(_QWORD *)(a1 + 120);
      if (v22 >= a2)
      {
        v23 = *(_QWORD *)(a1 + 120);
      }
      else
      {
        if (v22)
          v23 = *(_QWORD *)(a1 + 120);
        else
          v23 = a2;
        while (v23 < a2)
        {
          v22 *= 2;
          v24 = v22 > v23;
          v23 = v22;
          if (!v24)
            goto LABEL_50;
        }
        v27 = (char *)malloc_type_malloc(v23, 0xCDA3626BuLL);
        if (!v27)
        {
LABEL_50:
          archive_set_error(*(_DWORD **)(a1 + 24), 12, "Unable to allocate copy buffer", a4, a5, a6, a7, a8, v38);
          goto LABEL_51;
        }
        v20 = v27;
        v28 = *(_QWORD *)(a1 + 136);
        if (v28)
          memmove(v27, *(const void **)(a1 + 128), v28);
        free(*(void **)(a1 + 112));
        *(_QWORD *)(a1 + 120) = v23;
        *(_QWORD *)(a1 + 128) = v20;
        *(_QWORD *)(a1 + 112) = v20;
        v21 = v20;
        v17 = *(_QWORD *)(a1 + 168);
      }
      v29 = &v21[v23];
      v30 = *(_QWORD *)(a1 + 136);
      v31 = &v20[v30];
      v32 = v29 - &v20[v30];
      v33 = v32 + v30;
      v34 = a2 - v30;
      if (v33 > a2)
        v32 = v34;
      if (v32 >= v17)
        v35 = v17;
      else
        v35 = v32;
      memcpy(v31, *(const void **)(a1 + 160), v35);
      v36 = *(_QWORD *)(a1 + 168) - v35;
      *(_QWORD *)(a1 + 160) += v35;
      *(_QWORD *)(a1 + 168) = v36;
      *(_QWORD *)(a1 + 136) += v35;
      goto LABEL_45;
    }
    if (*(_BYTE *)(a1 + 176))
    {
      if (!a3)
        return 0;
      result = 0;
      *a3 = 0;
      return result;
    }
    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 40))(a1, a1 + 144);
    if (v25 < 0)
      break;
    if (v25)
    {
      v26 = *(_QWORD *)(a1 + 144);
      *(_QWORD *)(a1 + 152) = v25;
      *(_QWORD *)(a1 + 160) = v26;
      *(_QWORD *)(a1 + 168) = v25;
    }
    else
    {
      v37 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 244);
      if (v37 == *(_DWORD *)(*(_QWORD *)(a1 + 24) + 240) - 1 || sub_1DB6E53F0(a1, v37 + 1))
      {
        *v16 = 0u;
        *(_OWORD *)(a1 + 160) = 0u;
        *(_BYTE *)(a1 + 176) = 1;
        if (!a3)
          return 0;
        result = 0;
        v10 = *(_QWORD *)(a1 + 136);
        goto LABEL_4;
      }
    }
LABEL_45:
    v13 = *(_QWORD *)(a1 + 136);
    v14 = v13 == 0;
    if (v13 >= a2 && v13)
      goto LABEL_47;
  }
  *v16 = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
LABEL_51:
  *(_BYTE *)(a1 + 178) = 1;
  if (a3)
    goto LABEL_3;
  return 0;
}

size_t sub_1DB6E2588(uint64_t a1, size_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1DB6E22F4(*(_QWORD *)(a1 + 1032), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1DB6E2590(uint64_t a1, size_t *a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  uint64_t v23;

  v23 = 0;
  v12 = *(_QWORD *)(a1 + 2472);
  v13 = *(_QWORD **)v12;
  v14 = *(_QWORD **)(*(_QWORD *)v12 + 328);
  while (1)
  {
    for (; v14; v14 = (_QWORD *)v13[41])
    {
      if (v14[2])
        break;
      v13[41] = *v14;
      free(v14);
    }
    v15 = v13[38];
    if (v15)
    {
      sub_1DB6E26F0(a1, v15, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      v13[38] = 0;
      v14 = (_QWORD *)v13[41];
    }
    if (!v14 || !v13[35])
      break;
    v16 = sub_1DB6E2588(a1, 1uLL, &v23, (uint64_t)a4, a5, a6, a7, a8);
    *a2 = v16;
    v17 = v23;
    if (v23 < 0)
      return 4294967266;
    if (!v16)
    {
      archive_set_error((_DWORD *)a1, -1, "Truncated tar archive", (uint64_t)a4, a5, a6, a7, a8, v22);
      return 4294967266;
    }
    v18 = v13[35];
    if (v23 > v18)
    {
      v23 = v13[35];
      v17 = v18;
    }
    v14 = (_QWORD *)v13[41];
    v19 = v14[2];
    if (v19 < v17)
    {
      v23 = v14[2];
      v17 = v19;
    }
    *a3 = v17;
    *a4 = v14[1];
    v20 = v14[2] - v17;
    v14[1] += v17;
    v14[2] = v20;
    v13[35] -= v17;
    v13[38] = v17;
    if (!*((_DWORD *)v14 + 6))
      return 0;
  }
  if ((sub_1DB6E26F0(a1, v13[37], (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8) & 0x8000000000000000) == 0)
  {
    v13[37] = 0;
    *a2 = 0;
    *a3 = 0;
    *a4 = v13[39];
    return 1;
  }
  return 4294967266;
}

uint64_t sub_1DB6E26F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1DB6E26F8(*(_QWORD *)(a1 + 1032), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1DB6E26F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  int v18;

  if (a2 < 0)
    return -30;
  v8 = (char *)a2;
  if (a2)
  {
    if (*(_BYTE *)(a1 + 178))
    {
      v10 = -1;
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 136);
      if (v12)
      {
        if (v12 >= a2)
          v10 = a2;
        else
          v10 = *(_QWORD *)(a1 + 136);
        *(_QWORD *)(a1 + 128) += v10;
        *(_QWORD *)(a1 + 136) = v12 - v10;
        v13 = a2 - v10;
        *(_QWORD *)a1 += v10;
      }
      else
      {
        v10 = 0;
        v13 = a2;
      }
      v14 = *(_QWORD *)(a1 + 168);
      if (v14)
      {
        if (v13 >= v14)
          v15 = *(_QWORD *)(a1 + 168);
        else
          v15 = v13;
        *(_QWORD *)(a1 + 160) += v15;
        *(_QWORD *)(a1 + 168) = v14 - v15;
        v13 -= v15;
        *(_QWORD *)a1 += v15;
        v10 += v15;
      }
      if (v13)
      {
        v16 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 48);
        if (!v16)
          goto LABEL_24;
        v17 = v16(a1, v13);
        if (v17 < 0)
        {
LABEL_33:
          *(_BYTE *)(a1 + 178) = 1;
          v10 = v17;
        }
        else
        {
          *(_QWORD *)a1 += v17;
          v10 += v17;
          v13 -= v17;
          if (v13)
          {
            while (1)
            {
              while (1)
              {
LABEL_24:
                v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 40))(a1, a1 + 144);
                if (v17 < 0)
                {
                  *(_QWORD *)(a1 + 144) = 0;
                  goto LABEL_33;
                }
                if (v17)
                  break;
                v18 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 244);
                if (v18 == *(_DWORD *)(*(_QWORD *)(a1 + 24) + 240) - 1 || sub_1DB6E53F0(a1, v18 + 1))
                {
                  *(_QWORD *)(a1 + 144) = 0;
                  *(_BYTE *)(a1 + 176) = 1;
                  goto LABEL_5;
                }
              }
              if (v17 >= v13)
                break;
              *(_QWORD *)a1 += v17;
              v10 += v17;
              v13 -= v17;
            }
            *(_QWORD *)(a1 + 160) = *(_QWORD *)(a1 + 144) + v13;
            *(_QWORD *)(a1 + 168) = v17 - v13;
            *(_QWORD *)(a1 + 152) = v17;
            v10 += v13;
            *(_QWORD *)a1 += v13;
          }
        }
      }
    }
LABEL_5:
    if ((char *)v10 != v8)
    {
      archive_set_error(*(_DWORD **)(a1 + 24), -1, "Truncated input file (needed %jd bytes, only %jd available)", a4, a5, a6, a7, a8, v8);
      return -30;
    }
  }
  return (uint64_t)v8;
}

BOOL sub_1DB6E28C0(uint64_t a1)
{
  uint64_t i;
  int v3;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t j;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t k;

  for (i = 0; i != 8; ++i)
  {
    v3 = *(unsigned __int8 *)(a1 + 148 + i);
    if ((v3 - 48) >= 8 && v3 != 32 && v3 != 0)
      return 0;
  }
  v5 = sub_1DB6E3568((char *)(a1 + 148), 8uLL);
  v6 = 0;
  v7 = 0;
  do
    v7 += *(unsigned __int8 *)(a1 + v6++);
  while (v6 != 148);
  v8 = v7 + 256;
  for (j = 156; j != 512; ++j)
    v8 += *(unsigned __int8 *)(a1 + j);
  if (v8 == v5)
    return 1;
  v10 = 0;
  v11 = 0;
  do
    v11 += *(char *)(a1 + v10++);
  while (v10 != 148);
  v12 = v11 + 256;
  for (k = 156; k != 512; ++k)
    v12 += *(char *)(a1 + k);
  return v12 == v5;
}

unsigned __int8 *sub_1DB6E29A8(unsigned __int8 *result, uint64_t *a2, _QWORD *a3)
{
  _BYTE *v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  int v13;
  int v14;
  BOOL v15;

  v3 = result + 1;
  v4 = *result;
  if (v4 != 45)
    v3 = result;
  v5 = *v3;
  if ((v5 - 48) > 9)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    while (1)
    {
      v7 = v5 - 48;
      if (v6 > 0xCCCCCCCCCCCCCCCLL || v6 == 0xCCCCCCCCCCCCCCCLL && v7 > 7u)
        break;
      v6 = 10 * v6 + v7;
      v8 = *++v3;
      LOBYTE(v5) = v8;
      if ((v8 - 48) >= 0xA)
        goto LABEL_12;
    }
    v6 = 0x7FFFFFFFFFFFFFFFLL;
  }
LABEL_12:
  if (v4 == 45)
    v9 = -v6;
  else
    v9 = v6;
  *a2 = v9;
  *a3 = 0;
  if (*v3 == 46)
  {
    v10 = 0;
    v11 = v3 + 1;
    v12 = 100000000;
    do
    {
      v14 = *v11++;
      v13 = v14;
      if ((v14 - 48) > 9)
        break;
      v10 += (v13 - 48) * v12;
      *a3 = v10;
      v15 = v12 > 9;
      v12 /= 0xAuLL;
    }
    while (v15);
  }
  return result;
}

void sub_1DB6E2A84(uint64_t a1, char *__s, const char *a3)
{
  BOOL v6;
  char *v8;
  size_t v9;
  char *v10;
  char *v11;
  char *i;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  size_t v24;
  size_t v25;
  uint64_t v26;
  __int128 v27;
  void *v28;
  void *v29;
  _BYTE *v30;
  unsigned int v31;
  int v32;
  const char *v33;
  size_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  int v38;
  size_t v39;

  if (strlen(__s) < 0x12)
    return;
  v6 = *(_QWORD *)__s == 0x494843524142494CLL && *((_QWORD *)__s + 1) == 0x72747461782E4556;
  if (!v6 || __s[16] != 46)
    return;
  v8 = __s + 17;
  v9 = strlen(__s + 17);
  v10 = (char *)malloc_type_malloc(v9 + 1, 0xCC6303F3uLL);
  if (!v10)
    return;
  v11 = v10;
  for (i = v10; ; ++i)
  {
    v13 = *v8;
    if (v13 != 37)
      break;
    v14 = v8[1];
    if (v8[1])
    {
      v15 = v8[2];
      if (v8[2])
      {
        v16 = v14 - 48;
        v17 = v14 - 65;
        if ((v14 - 97) >= 6)
          v18 = -1;
        else
          v18 = v14 - 87;
        v19 = v14 - 55;
        if (v17 > 5)
          v19 = v18;
        if (v16 < 0xA)
          v19 = v16;
        v20 = v15 - 48;
        v21 = v15 - 65;
        if ((v15 - 97) >= 6)
          v22 = -1;
        else
          v22 = v15 - 87;
        v23 = v15 - 55;
        if (v21 > 5)
          v23 = v22;
        if (v20 < 0xA)
          v23 = v20;
        if ((v19 & 0x80000000) == 0 && (v23 & 0x80000000) == 0)
        {
          v8 += 3;
          LOBYTE(v13) = v23 | (16 * v19);
          goto LABEL_35;
        }
      }
    }
LABEL_34:
    ++v8;
LABEL_35:
    *i = v13;
  }
  if (*v8)
    goto LABEL_34;
  *i = 0;
  v24 = strlen(a3);
  v25 = v24;
  if (byte_1ECFF6C92 != 1)
  {
    v26 = 0;
    *(_QWORD *)&v27 = -1;
    *((_QWORD *)&v27 + 1) = -1;
    xmmword_1ECFF6CB0 = v27;
    unk_1ECFF6CC0 = v27;
    unk_1ECFF6C90 = v27;
    unk_1ECFF6CA0 = v27;
    xmmword_1ECFF6C70 = v27;
    unk_1ECFF6C80 = v27;
    xmmword_1ECFF6C50 = v27;
    unk_1ECFF6C60 = v27;
    do
    {
      *((_BYTE *)&xmmword_1ECFF6C50 + aAbcdefghijklmn[v26]) = v26;
      ++v26;
    }
    while (v26 != 64);
  }
  v28 = malloc_type_malloc(v24 - (v24 >> 2) + 1, 0xA4B0AC2uLL);
  if (v28)
  {
    v29 = v28;
    if (v25)
    {
      v30 = v28;
      while (1)
      {
        v31 = 0;
        v32 = 0;
        v33 = a3;
LABEL_43:
        v34 = 1 - v25;
        a3 = v33;
        while (1)
        {
          v35 = *(unsigned __int8 *)a3;
          if ((_DWORD)v35 == 61 || (_DWORD)v35 == 95)
            break;
          if ((char)v35 >= 32)
          {
            v36 = *((unsigned __int8 *)&xmmword_1ECFF6C50 + v35);
            if (v36 != 255)
            {
              v33 = a3 + 1;
              v32 = v36 | (v32 << 6);
              v37 = v31 + 1;
              if (v31 > 2 || (v25 = -(uint64_t)v34, ++v31, !v34))
              {
                v25 = -(uint64_t)v34;
                v31 = v37;
                ++a3;
                goto LABEL_54;
              }
              goto LABEL_43;
            }
          }
          ++a3;
          if (++v34 == 1)
          {
            a3 = &v33[v25];
            break;
          }
        }
        v25 = 0;
LABEL_54:
        v38 = v32 << (6 * (4 - v31));
        if (v31 == 2)
          goto LABEL_59;
        if (v31 == 3)
          goto LABEL_58;
        if (v31 == 4)
          break;
LABEL_60:
        v30 += (int)(3 * v31) / 4;
        if (!v25)
        {
          v39 = v30 - (_BYTE *)v28;
          goto LABEL_64;
        }
      }
      v30[2] = v38;
LABEL_58:
      v30[1] = BYTE1(v38);
LABEL_59:
      *v30 = BYTE2(v38);
      goto LABEL_60;
    }
    v39 = 0;
LABEL_64:
    archive_entry_xattr_add_entry(a1, v11, v28, v39);
    free(v11);
    free(v29);
  }
  else
  {
    free(v11);
  }
}

uint64_t sub_1DB6E2D80(_DWORD *a1, uint64_t a2, _DWORD *a3, char *a4)
{
  uint64_t *v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;

  v8 = (uint64_t *)(a2 + 24);
  v9 = a4[345];
  *(_QWORD *)(a2 + 32) = 0;
  if (v9)
  {
    sub_1DB6E323C(v8, a4 + 345, 0x9BuLL);
    if (*(_BYTE *)(*(_QWORD *)(a2 + 32) + *(_QWORD *)(a2 + 24) - 1) != 47)
      sub_1DB72CE60(v8, 47);
  }
  sub_1DB6E323C(v8, a4, 0x64uLL);
  if (sub_1DB6E3BD0((uint64_t)a3, *(char **)(a2 + 24), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 408)))
  {
    v10 = sub_1DB71767C(a1, *(_QWORD *)(a2 + 408), "Pathname");
    if ((_DWORD)v10 == -30)
      return v10;
  }
  else
  {
    LODWORD(v10) = 0;
  }
  v11 = sub_1DB6E3288(a1, a2, (uint64_t)a3, a4);
  if (v11 == -30)
    return 4294967266;
  if (v11 >= (int)v10)
    v10 = v10;
  else
    v10 = v11;
  if (!sub_1DB6E3BC8((uint64_t)a3, a4 + 265, 0x20uLL, *(_QWORD *)(a2 + 408))
    || (v10 = sub_1DB71767C(a1, *(_QWORD *)(a2 + 408), "Uname"), (_DWORD)v10 != -30))
  {
    if (!sub_1DB6E3BD8((uint64_t)a3, a4 + 297, 0x20uLL, *(_QWORD *)(a2 + 408))
      || (v10 = sub_1DB71767C(a1, *(_QWORD *)(a2 + 408), "Gname"), (_DWORD)v10 != -30))
    {
      if (a4[156] - 51 <= 1)
      {
        v12 = sub_1DB6E3568(a4 + 329, 8uLL);
        archive_entry_set_rdevmajor(a3, v12);
        v13 = sub_1DB6E3568(a4 + 337, 8uLL);
        archive_entry_set_rdevminor(a3, v13);
      }
      *(_QWORD *)(a2 + 296) = -*(_DWORD *)(a2 + 280) & 0x1FFLL;
    }
  }
  return v10;
}

uint64_t sub_1DB6E2F34(uint64_t a1, char *a2, unint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    result = sub_1DB6E2F80(a1, a2, a3, a4);
    if (!(_DWORD)result)
    {
      *(_DWORD *)(a1 + 96) = 1;
      return result;
    }
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 96) = 0;
  return result;
}

uint64_t sub_1DB6E2F80(uint64_t a1, char *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  size_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t result;

  v4 = a4;
  if (!a2 || !a3)
  {
LABEL_26:
    if (a4)
    {
      LODWORD(v4) = (*(_DWORD *)(a4 + 36) & 0x1400) != 0;
      v13 = 1;
      if ((*(_DWORD *)(a4 + 36) & 0x1400) != 0)
        v13 = 2;
    }
    else
    {
      v13 = 1;
    }
    if (!sub_1DB6E3190((void **)a1, *(_QWORD *)(a1 + 8) + v13))
      return 0xFFFFFFFFLL;
    v9 = 0;
    *(_BYTE *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 8)) = 0;
    if ((_DWORD)v4)
    {
      v9 = 0;
      *(_BYTE *)(*(_QWORD *)(a1 + 8) + *(_QWORD *)a1 + 1) = 0;
    }
    return v9;
  }
  if (a4 && (*(_BYTE *)(a4 + 37) & 0x28) != 0)
  {
    if (a3 >= 2)
    {
      v7 = 0;
      v12 = a2 + 1;
      while (*(v12 - 1) || *v12)
      {
        ++v7;
        v12 += 2;
        if (a3 >> 1 == v7)
        {
          v7 = a3 >> 1;
          break;
        }
      }
    }
    else
    {
      v7 = 0;
    }
    v8 = 2 * v7;
    if (!(2 * v7))
      goto LABEL_26;
  }
  else
  {
    v8 = 0;
    while (a2[v8])
    {
      if (a3 == ++v8)
      {
        v8 = a3;
        break;
      }
    }
    if (!v8)
      goto LABEL_26;
  }
  if (!a4)
  {
    if (sub_1DB6E311C((uint64_t *)a1, a2, v8))
      return 0;
    else
      return 0xFFFFFFFFLL;
  }
  if (*(int *)(a4 + 96) >= 2)
  {
    *(_QWORD *)(a4 + 64) = 0;
    v9 = (*(uint64_t (**)(uint64_t))(a4 + 80))(a4 + 56);
    if (!(_DWORD)v9 || *__error() != 12)
    {
      v10 = v9 & ((int)v9 >> 31);
      a2 = *(char **)(v4 + 56);
      v8 = *(_QWORD *)(v4 + 64);
      v11 = 1;
      goto LABEL_37;
    }
    return v9;
  }
  v11 = 0;
  v10 = 0;
LABEL_37:
  LODWORD(result) = (*(uint64_t (**)(uint64_t, char *, size_t, uint64_t))(v4 + 8 * v11 + 80))(a1, a2, v8, v4);
  if (v10 >= (int)result)
    return result;
  else
    return v10;
}

uint64_t *sub_1DB6E311C(uint64_t *a1, const void *a2, size_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  size_t v7;

  v5 = a1;
  if (!sub_1DB6E3190((void **)a1, a3 + a1[1] + 1))
    return 0;
  if (a3)
    memmove((void *)(*v5 + v5[1]), a2, a3);
  v6 = *v5;
  v7 = v5[1] + a3;
  v5[1] = v7;
  *(_BYTE *)(v6 + v7) = 0;
  return v5;
}

void **sub_1DB6E3190(void **a1, size_t a2)
{
  void **v2;
  void *v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  size_t v7;
  void *v8;

  v2 = a1;
  v3 = *a1;
  v4 = (unint64_t)v2[2];
  if (v3)
    v5 = v4 >= a2;
  else
    v5 = 0;
  if (!v5)
  {
    if (v4 >= 0x20)
    {
      if (v4 >> 13)
      {
        v5 = __CFADD__(v4, v4 >> 2);
        v6 = v4 + (v4 >> 2);
        if (v5)
        {
          v2[1] = 0;
          v2[2] = 0;
          goto LABEL_18;
        }
      }
      else
      {
        v6 = 2 * v4;
      }
    }
    else
    {
      v6 = 32;
    }
    if (v6 <= a2)
      v7 = a2;
    else
      v7 = v6;
    v8 = malloc_type_realloc(v3, v7, 0xFC99DD6AuLL);
    if (v8)
    {
      *v2 = v8;
      v2[2] = (void *)v7;
      return v2;
    }
    v2[1] = 0;
    v2[2] = 0;
    v3 = *v2;
LABEL_18:
    free(v3);
    *v2 = 0;
    v2 = 0;
    *__error() = 12;
  }
  return v2;
}

uint64_t *sub_1DB6E323C(uint64_t *a1, _BYTE *a2, size_t a3)
{
  size_t v3;
  uint64_t *result;

  if (a3)
  {
    v3 = a3;
    a3 = 0;
    while (a2[a3])
    {
      if (v3 == ++a3)
      {
        a3 = v3;
        break;
      }
    }
  }
  result = sub_1DB6E311C(a1, a2, a3);
  if (!result)
    sub_1DB730818(1, "Out of memory");
  return result;
}

uint64_t sub_1DB6E3288(_DWORD *a1, uint64_t a2, uint64_t a3, char *a4)
{
  __int16 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char *v34;

  if (a4[157])
  {
    *(_QWORD *)(a2 + 80) = 0;
    sub_1DB6E323C((uint64_t *)(a2 + 72), a4 + 157, 0x64uLL);
  }
  else
  {
    *(_QWORD *)(a2 + 80) = 0;
  }
  v8 = sub_1DB6E3568(a4 + 100, 8uLL);
  archive_entry_set_mode(a3, v8);
  v9 = sub_1DB6E3568(a4 + 108, 8uLL);
  archive_entry_set_uid(a3, v9);
  v10 = sub_1DB6E3568(a4 + 116, 8uLL);
  archive_entry_set_gid(a3, v10);
  v11 = sub_1DB6E3568(a4 + 124, 0xCuLL);
  *(_QWORD *)(a2 + 280) = v11;
  if ((v11 & 0x8000000000000000) != 0)
  {
    *(_QWORD *)(a2 + 280) = 0;
    v17 = "Tar entry has negative size";
    goto LABEL_8;
  }
  if (v11 == 0x7FFFFFFFFFFFFFFFLL)
  {
    *(_QWORD *)(a2 + 280) = 0;
    v17 = "Tar entry size overflow";
LABEL_8:
    archive_set_error(a1, -1, v17, v12, v13, v14, v15, v16, v34);
    return 4294967266;
  }
  *(_QWORD *)(a2 + 312) = v11;
  archive_entry_set_size(a3, v11);
  v20 = sub_1DB6E3568(a4 + 136, 0xCuLL);
  archive_entry_set_mtime(a3, v20, 0);
  v21 = a4[156];
  if (v21 > 67)
  {
    if (v21 > 77)
    {
      if (v21 == 83)
LABEL_20:
        *(_DWORD *)(a2 + 320) = 1;
    }
    else
    {
      if (v21 == 68)
      {
        v22 = a3;
        v23 = 0x4000;
        goto LABEL_31;
      }
      if (v21 == 77)
        return 0;
    }
LABEL_21:
    v22 = a3;
    v23 = 0x8000;
LABEL_31:
    archive_entry_set_filetype(v22, v23);
    return 0;
  }
  switch(a4[156])
  {
    case '0':
      goto LABEL_20;
    case '1':
      if (sub_1DB6E9970(a3, *(char **)(a2 + 72), *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 408)))
      {
        v18 = sub_1DB71767C(a1, *(_QWORD *)(a2 + 408), "Linkname");
        if ((_DWORD)v18 == -30)
          return v18;
      }
      else
      {
        v18 = 0;
      }
      if (archive_entry_size(a3) >= 1)
        archive_entry_set_filetype(a3, 0x8000);
      if (archive_entry_size(a3))
      {
        v33 = a1[4];
        if (v33 == 196612
          || v33 != 196610
          && (v33 == 196608 || (int)sub_1DB6E56DC((uint64_t)a1, v26, v27, v28, v29, v30, v31, v32) >= 51))
        {
          archive_entry_set_size(a3, 0);
LABEL_29:
          *(_QWORD *)(a2 + 280) = 0;
        }
      }
      break;
    case '2':
      archive_entry_set_filetype(a3, 40960);
      archive_entry_set_size(a3, 0);
      *(_QWORD *)(a2 + 280) = 0;
      if (!sub_1DB6E9E80(a3, *(char **)(a2 + 72), *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 408)))
        return 0;
      return sub_1DB71767C(a1, *(_QWORD *)(a2 + 408), "Linkname");
    case '3':
      v24 = a3;
      v25 = 0x2000;
      goto LABEL_28;
    case '4':
      v24 = a3;
      v25 = 24576;
      goto LABEL_28;
    case '5':
      v24 = a3;
      v25 = 0x4000;
      goto LABEL_28;
    case '6':
      v24 = a3;
      v25 = 4096;
LABEL_28:
      archive_entry_set_filetype(v24, v25);
      archive_entry_set_size(a3, 0);
      v18 = 0;
      goto LABEL_29;
    default:
      goto LABEL_21;
  }
  return v18;
}

unint64_t sub_1DB6E3568(char *a1, unint64_t a2)
{
  int v2;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  v2 = *a1;
  if ((v2 & 0x80000000) == 0)
    return sub_1DB6E3608((uint64_t)a1, a2, 8u);
  v4 = v2 & 0x40;
  v5 = v2 & 0x7F;
  if ((v2 & 0x40) != 0)
    v6 = -1;
  else
    v6 = 0;
  LODWORD(v7) = v5 | (2 * v4);
  if (v4)
    v8 = 255;
  else
    v8 = 0;
  if (a2 >= 9)
  {
    v9 = (unsigned __int8 *)(a1 + 1);
    v10 = a2;
    while (v8 == (_DWORD)v7)
    {
      --v10;
      v11 = *v9++;
      LODWORD(v7) = v11;
      if (v10 <= 8)
        goto LABEL_13;
    }
    goto LABEL_20;
  }
LABEL_13:
  if ((v8 ^ v7) > 0x7F)
  {
LABEL_20:
    if (v4)
      return 0x8000000000000000;
    else
      return 0x7FFFFFFFFFFFFFFFLL;
  }
  v12 = 8;
  if (a2 > 8)
    v12 = a2;
  v13 = &a1[v12];
  v14 = -7;
  do
  {
    v6 = v7 | (unint64_t)(v6 << 8);
    v7 = v13[v14];
  }
  while (!__CFADD__(v14++, 1));
  return v7 | (v6 << 8);
}

unint64_t sub_1DB6E3608(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int v7;
  unint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int64_t v14;
  char *v15;
  uint64_t v16;
  _BOOL4 v18;
  int v20;

  if (!a2)
    return 0;
  v4 = 0;
  v5 = 0x7FFFFFFFFFFFFFFFuLL / a3;
  v6 = (v5 * a3) ^ 0x7FFFFFFFFFFFFFFFLL;
  while (1)
  {
    v7 = *(unsigned __int8 *)(a1 + v4);
    if (v7 != 9 && v7 != 32)
      break;
    if (a2 == ++v4)
      return 0;
  }
  if (v7 != 45)
  {
    v13 = 0;
    v9 = a2 - v4;
    v11 = a1 + v4;
    result = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_12;
  }
  if (a2 - 1 == v4)
    return 0;
  v9 = ~v4 + a2;
  result = 0x8000000000000000;
  v6 = (uint64_t)0x8000000000000000 / a3 * a3 + 0x8000000000000000;
  v5 = -((uint64_t)0x8000000000000000 / a3);
  v10 = a1 + v4;
  v12 = *(unsigned __int8 *)(v10 + 1);
  v11 = v10 + 1;
  v7 = v12;
  v13 = 1;
LABEL_12:
  if ((char)v7 < 48)
  {
    v14 = 0;
    if (v13)
      return -v14;
  }
  else
  {
    v14 = 0;
    v15 = (char *)(v11 + 1);
    do
    {
      v16 = (v7 - 48);
      v18 = v9-- != 0;
      if ((int)v16 >= (int)a3 || !v18)
        break;
      if (v14 > v5 || v14 == v5 && v6 <= v16)
        return result;
      v14 = v16 + v14 * a3;
      v20 = *v15++;
      v7 = v20;
    }
    while (v20 > 47);
    if (v13)
      return -v14;
  }
  return v14;
}

_QWORD *sub_1DB6E370C(uint64_t a1, char *__s, char *a3, int a4)
{
  _QWORD *v8;
  int v9;
  const char *v10;
  const char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  int v22;
  _BOOL4 v23;
  int v24;
  int v25;
  int v26;
  int v28;
  BOOL v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  char *v40;
  char *v41;

  if (!a1)
  {
    v9 = -1;
LABEL_8:
    v10 = sub_1DB6E48A8(__s);
    v11 = sub_1DB6E48A8(a3);
    v12 = malloc_type_calloc(1uLL, 0x68uLL, 0x10B0040BB514045uLL);
    if (v12)
    {
      v8 = v12;
      *v12 = 0;
      v18 = strdup(v10);
      v8[1] = v18;
      if (v18)
      {
        v19 = v18;
        v20 = strdup(v11);
        v8[2] = v20;
        if (v20)
        {
          v8[7] = 0;
          v8[8] = 0;
          v8[9] = 0;
          if ((a4 & 1) != 0)
          {
            *((_DWORD *)v8 + 6) = v9;
            *((_DWORD *)v8 + 7) = -1;
          }
          else if ((a4 & 2) != 0)
          {
            *((_DWORD *)v8 + 6) = -1;
            *((_DWORD *)v8 + 7) = v9;
          }
          v23 = 1;
          if (strcmp(v10, v11))
          {
            v22 = *((_DWORD *)v8 + 6);
            if (v22 == -1 || v22 != *((_DWORD *)v8 + 7))
              v23 = 0;
          }
          *((_DWORD *)v8 + 8) = v23;
          if (!strcmp(v11, "UTF-8"))
          {
            v24 = a4 | 0x100;
          }
          else if (!strcmp(v11, "UTF-16BE"))
          {
            v24 = a4 | 0x400;
          }
          else if (!strcmp(v11, "UTF-16LE"))
          {
            v24 = a4 | 0x1000;
          }
          else
          {
            v24 = a4;
          }
          if (!strcmp(v10, "UTF-8"))
          {
            v26 = v24 | 0x200;
          }
          else if (!strcmp(v10, "UTF-16BE"))
          {
            v26 = v24 | 0x800;
          }
          else
          {
            v25 = strcmp(v10, "UTF-16LE");
            v26 = v24 | 0x2000;
            if (v25)
              v26 = v24;
          }
          if ((v26 & 2) != 0 && (v26 & 0x2A00) != 0)
          {
            if ((v26 & 0x100) != 0)
              v26 |= 0x80u;
            else
              v26 |= 0x40u;
          }
          if ((v26 & 0x2A00) != 0 && (v26 & 0x1501) == 1)
            v26 |= 0x40u;
          if ((v26 & 0x2B02) == 0x102)
            v28 = v26 | 0x80;
          else
            v28 = v26;
          v8[6] = -1;
          v29 = (v28 & 0x2A00) == 0 || (v28 & 0x1500) == 0;
          if ((v28 & 8) != 0 || !v29)
          {
            v8[5] = -1;
          }
          else
          {
            v30 = MEMORY[0x1DF0B2F34](v11, v10);
            v8[5] = v30;
            if (v30 != -1 || (*((_BYTE *)v8 + 36) & 4) == 0)
              goto LABEL_63;
            if (!strcmp(v11, "CP932"))
            {
              v32 = "SJIS";
              v31 = v10;
              goto LABEL_75;
            }
            if (!strcmp(v10, "CP932"))
            {
              v31 = "SJIS";
              v32 = v11;
LABEL_75:
              v8[5] = MEMORY[0x1DF0B2F34](v32, v31);
            }
          }
LABEL_63:
          *((_DWORD *)v8 + 9) = v28;
          sub_1DB6E4B38((uint64_t)v8);
          if (*((_DWORD *)v8 + 24))
          {
            if (a1)
            {
              v38 = (_QWORD *)(a1 + 104);
              do
              {
                v39 = v38;
                v38 = (_QWORD *)*v38;
              }
              while (v38);
              *v39 = v8;
            }
            return v8;
          }
          if (a1)
          {
            if ((a4 & 1) != 0)
              v40 = a3;
            else
              v40 = __s;
          }
          sub_1DB6E7ABC((uint64_t)v8);
          return 0;
        }
        free(v19);
      }
      free(v8);
    }
    if (a1)
      archive_set_error((_DWORD *)a1, 12, "Could not allocate memory for a string conversion object", v13, v14, v15, v16, v17, v41);
    return 0;
  }
  v8 = *(_QWORD **)(a1 + 104);
  if (!v8)
  {
LABEL_6:
    v9 = *(_DWORD *)(a1 + 96);
    goto LABEL_8;
  }
  while (strcmp((const char *)v8[1], __s) || strcmp((const char *)v8[2], a3))
  {
    v8 = (_QWORD *)*v8;
    if (!v8)
      goto LABEL_6;
  }
  return v8;
}

_QWORD *sub_1DB6E3A78(uint64_t a1, char *a2, int a3)
{
  int v5;
  char *v6;

  if (a3)
    v5 = 6;
  else
    v5 = 2;
  v6 = (char *)sub_1DB6E3AC4(a1);
  return sub_1DB6E370C(a1, a2, v6, v5);
}

const char *sub_1DB6E3AC4(uint64_t a1)
{
  const char *v1;
  _BYTE *v3;

  v1 = "UTF-8";
  if (a1)
  {
    v3 = *(_BYTE **)(a1 + 88);
    if (v3)
    {
      if (*v3)
        return *(const char **)(a1 + 88);
    }
    else
    {
      *(_QWORD *)(a1 + 88) = strdup("UTF-8");
      *(_QWORD *)(a1 + 96) = -1;
    }
  }
  return v1;
}

uint64_t sub_1DB6E3B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t result;

  v8 = *(_QWORD *)(a1 + 2472);
  v9 = *(_QWORD **)v8;
  v10 = *(uint64_t **)(*(_QWORD *)v8 + 328);
  if (v10)
  {
    v11 = 0;
    do
    {
      if (!*((_DWORD *)v10 + 6))
      {
        v12 = v10[2];
        if (v12 >= (v11 ^ 0x7FFFFFFFFFFFFFFFLL))
          return 4294967266;
        v11 += v12;
      }
      v10 = (uint64_t *)*v10;
    }
    while (v10);
  }
  else
  {
    v11 = 0;
  }
  if (v11 >= v9[35])
    v11 = v9[35];
  if (sub_1DB6E26F0(a1, v11 + v9[37] + v9[38], a3, a4, a5, a6, a7, a8) < 0)
    return 4294967266;
  v9[35] = 0;
  v9[37] = 0;
  v9[38] = 0;
  while (1)
  {
    v13 = (_QWORD *)v9[41];
    if (!v13)
      break;
    v9[41] = *v13;
    free(v13);
  }
  result = 0;
  v9[42] = 0;
  return result;
}

uint64_t sub_1DB6E3BC8(uint64_t a1, char *a2, unint64_t a3, uint64_t a4)
{
  return sub_1DB6E2F34(a1 + 704, a2, a3, a4);
}

uint64_t sub_1DB6E3BD0(uint64_t a1, char *a2, unint64_t a3, uint64_t a4)
{
  return sub_1DB6E2F34(a1 + 496, a2, a3, a4);
}

uint64_t sub_1DB6E3BD8(uint64_t a1, char *a2, unint64_t a3, uint64_t a4)
{
  return sub_1DB6E2F34(a1 + 288, a2, a3, a4);
}

uint64_t sub_1DB6E3BE0(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  _DWORD *v8;
  _DWORD *i;
  int v10;
  _BYTE *v11;
  _BYTE *j;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v8 = (_DWORD *)archive_entry_pathname_w(a3);
  if (v8)
  {
    for (i = v8 + 1; ; ++i)
    {
      v10 = *(i - 1);
      if (v10 == 47)
      {
        if (*i)
          v8 = i;
      }
      else if (!v10)
      {
        if (*v8 != 46 || v8[1] != 95 || !v8[2])
          return 0;
LABEL_24:
        v13 = archive_entry_size((uint64_t)a3);
        v19 = (const void *)sub_1DB6E2588(a1, v13, 0, v14, v15, v16, v17, v18);
        if (v19)
        {
          archive_entry_copy_mac_metadata((uint64_t)a3, v19, v13);
          v26 = (v13 + 511) & 0xFFFFFFFFFFFFFE00;
          *a4 = v26;
          if (v26)
          {
            sub_1DB6E26F0(a1, v26, v20, v21, v22, v23, v24, v25);
            *a4 = 0;
          }
          return sub_1DB6E1B5C(a1, a2, a3, a4);
        }
        else
        {
          *a4 = 0;
          return 4294967266;
        }
      }
    }
  }
  v11 = (_BYTE *)archive_entry_pathname(a3);
  if (!v11)
    return 4294967271;
  for (j = v11 + 1; *(j - 1) == 47; ++j)
  {
    if (*j)
      v11 = j;
LABEL_20:
    ;
  }
  if (*(j - 1))
    goto LABEL_20;
  if (*v11 == 46 && v11[1] == 95 && v11[2])
    goto LABEL_24;
  return 0;
}

uint64_t sub_1DB6E3D54(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 24) + 200))(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 88), a2);
}

void *sub_1DB6E3D6C(uint64_t a1, char *__s, const void *a3, size_t a4)
{
  void *result;

  result = (void *)strlen(__s);
  if ((unint64_t)result >= 0xE
    && *(_QWORD *)__s == 0x782E594C49484353
    && *(_QWORD *)(__s + 5) == 0x2E72747461782E59)
  {
    return archive_entry_xattr_add_entry(a1, __s + 13, a3, a4);
  }
  return result;
}

void archive_entry_free(void **a1)
{
  void **v1;

  v1 = archive_entry_clear(a1);
  free(v1);
}

uint64_t archive_entry_size(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

uint64_t archive_entry_hardlink(uint64_t a1)
{
  uint64_t v2;

  if ((*(_BYTE *)(a1 + 160) & 1) != 0)
  {
    v2 = 0;
    if (!sub_1DB6DF424(*(_QWORD *)a1, a1 + 392, &v2))
      return v2;
    if (*__error() == 12)
      sub_1DB730818(1, "No memory");
  }
  return 0;
}

uint64_t archive_write_disk_set_standard_lookup(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = malloc_type_calloc(0x7FuLL, 0x10uLL, 0x1010040FDD9F14CuLL);
  v3 = malloc_type_calloc(0x7FuLL, 0x10uLL, 0x1010040FDD9F14CuLL);
  v8 = v3;
  if (v2 && v3)
  {
    archive_write_disk_set_group_lookup(a1, (uint64_t)v3, (uint64_t)sub_1DB733AAC, (uint64_t)sub_1DB6DED58, v4, v5, v6, v7);
    archive_write_disk_set_user_lookup(a1, (uint64_t)v2, (uint64_t)sub_1DB733C4C, (uint64_t)sub_1DB6DED58, v9, v10, v11, v12);
    return 0;
  }
  else
  {
    free(v2);
    free(v8);
    return 4294967266;
  }
}

uint64_t archive_write_disk_set_user_lookup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  void (*v13)(void);

  result = sub_1DB6E0594((int *)a1, -1073631035, 0x7FFF, "archive_write_disk_set_user_lookup", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    v13 = *(void (**)(void))(a1 + 256);
    if (v13)
    {
      if (*(_QWORD *)(a1 + 264))
        v13();
    }
    result = 0;
    *(_QWORD *)(a1 + 248) = a3;
    *(_QWORD *)(a1 + 256) = a4;
    *(_QWORD *)(a1 + 264) = a2;
  }
  return result;
}

uint64_t archive_write_disk_set_group_lookup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  void (*v13)(void);

  result = sub_1DB6E0594((int *)a1, -1073631035, 0x7FFF, "archive_write_disk_set_group_lookup", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    v13 = *(void (**)(void))(a1 + 232);
    if (v13)
    {
      if (*(_QWORD *)(a1 + 240))
        v13();
    }
    result = 0;
    *(_QWORD *)(a1 + 224) = a3;
    *(_QWORD *)(a1 + 232) = a4;
    *(_QWORD *)(a1 + 240) = a2;
  }
  return result;
}

uint64_t archive_entry_symlink(uint64_t a1)
{
  uint64_t v2;

  if ((*(_BYTE *)(a1 + 160) & 2) != 0)
  {
    v2 = 0;
    if (!sub_1DB6DF424(*(_QWORD *)a1, a1 + 600, &v2))
      return v2;
    if (*__error() == 12)
      sub_1DB730818(1, "No memory");
  }
  return 0;
}

uint64_t archive_entry_size_is_set(uint64_t a1)
{
  return *(_DWORD *)(a1 + 160) & 0x40;
}

uint64_t archive_entry_mode(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 1136);
}

uint64_t archive_entry_fflags(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  *a2 = *(_QWORD *)(result + 272);
  *a3 = *(_QWORD *)(result + 280);
  return result;
}

uint64_t archive_entry_clone(uint64_t *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t **i;
  _QWORD *j;

  v2 = *a1;
  v3 = (char *)malloc_type_calloc(1uLL, 0x4E0uLL, 0x10B0040FA1FE6CFuLL);
  v4 = (uint64_t)v3;
  if (v3)
  {
    *(_QWORD *)v3 = v2;
    *((_DWORD *)v3 + 311) = 0;
    *(_OWORD *)(v3 + 24) = *(_OWORD *)(a1 + 3);
    v5 = *(_OWORD *)(a1 + 5);
    v6 = *(_OWORD *)(a1 + 7);
    v7 = *(_OWORD *)(a1 + 9);
    *(_OWORD *)(v3 + 88) = *(_OWORD *)(a1 + 11);
    *(_OWORD *)(v3 + 72) = v7;
    *(_OWORD *)(v3 + 56) = v6;
    *(_OWORD *)(v3 + 40) = v5;
    v8 = *(_OWORD *)(a1 + 13);
    v9 = *(_OWORD *)(a1 + 15);
    v10 = *(_OWORD *)(a1 + 17);
    *((_QWORD *)v3 + 19) = a1[19];
    *(_OWORD *)(v3 + 136) = v10;
    *(_OWORD *)(v3 + 120) = v9;
    *(_OWORD *)(v3 + 104) = v8;
    *((_OWORD *)v3 + 17) = *((_OWORD *)a1 + 17);
    sub_1DB6E4338((uint64_t)(v3 + 168), (uint64_t)(a1 + 21));
    sub_1DB6E4338(v4 + 288, (uint64_t)(a1 + 36));
    sub_1DB6E4338(v4 + 392, (uint64_t)(a1 + 49));
    sub_1DB6E4338(v4 + 496, (uint64_t)(a1 + 62));
    sub_1DB6E4338(v4 + 808, (uint64_t)(a1 + 101));
    sub_1DB6E4338(v4 + 600, (uint64_t)(a1 + 75));
    *(_DWORD *)(v4 + 160) = *((_DWORD *)a1 + 40);
    sub_1DB6E4338(v4 + 704, (uint64_t)(a1 + 88));
    *(_DWORD *)(v4 + 1244) = *((_DWORD *)a1 + 311);
    *(_BYTE *)(v4 + 912) = *((_BYTE *)a1 + 912);
    *(_OWORD *)(v4 + 936) = *(_OWORD *)(a1 + 117);
    v11 = *(_OWORD *)(a1 + 119);
    *(_DWORD *)(v4 + 968) = *((_DWORD *)a1 + 242);
    *(_OWORD *)(v4 + 952) = v11;
    v12 = *(_OWORD *)((char *)a1 + 972);
    *(_DWORD *)(v4 + 988) = *((_DWORD *)a1 + 247);
    *(_OWORD *)(v4 + 972) = v12;
    v13 = *((_OWORD *)a1 + 63);
    *(_OWORD *)(v4 + 992) = *((_OWORD *)a1 + 62);
    *(_OWORD *)(v4 + 1008) = v13;
    v14 = *((_OWORD *)a1 + 64);
    v15 = *((_OWORD *)a1 + 65);
    *(_OWORD *)(v4 + 1056) = *((_OWORD *)a1 + 66);
    *(_OWORD *)(v4 + 1040) = v15;
    *(_OWORD *)(v4 + 1024) = v14;
    v16 = *((_OWORD *)a1 + 67);
    v17 = *((_OWORD *)a1 + 68);
    v18 = *((_OWORD *)a1 + 69);
    *(_OWORD *)(v4 + 1120) = *((_OWORD *)a1 + 70);
    *(_OWORD *)(v4 + 1104) = v18;
    *(_OWORD *)(v4 + 1088) = v17;
    *(_OWORD *)(v4 + 1072) = v16;
    sub_1DB6E4A60((_WORD *)(v4 + 1136), (uint64_t)(a1 + 142));
    archive_entry_copy_mac_metadata(v4, (const void *)a1[115], a1[116]);
    for (i = (uint64_t **)a1[149]; i; i = (uint64_t **)*i)
      archive_entry_xattr_add_entry(v4, (const char *)i[1], i[2], (size_t)i[3]);
    for (j = (_QWORD *)a1[151]; j; j = (_QWORD *)*j)
      archive_entry_sparse_add_entry((_QWORD *)v4, j[1], j[2]);
  }
  return v4;
}

uint64_t *sub_1DB6E4290(uint64_t *a1, uint64_t a2)
{
  uint64_t *result;

  result = sub_1DB6E42C0(a1, *(const __int32 **)a2, *(_QWORD *)(a2 + 8));
  if (!result)
    sub_1DB730818(1, "Out of memory");
  return result;
}

uint64_t *sub_1DB6E42C0(uint64_t *a1, const __int32 *a2, size_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  size_t v7;

  v5 = a1;
  if (!sub_1DB6E3190((void **)a1, 4 * (a1[1] + a3) + 4))
    return 0;
  if (a3)
    wmemmove((__int32 *)(*v5 + 4 * v5[1]), a2, a3);
  v6 = *v5;
  v7 = v5[1] + a3;
  v5[1] = v7;
  *(_DWORD *)(v6 + 4 * v7) = 0;
  return v5;
}

uint64_t *sub_1DB6E4338(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 8) = 0;
  sub_1DB6E4384((uint64_t *)a1, a2);
  *(_QWORD *)(a1 + 32) = 0;
  sub_1DB6E4384((uint64_t *)(a1 + 24), a2 + 24);
  *(_QWORD *)(a1 + 56) = 0;
  return sub_1DB6E4290((uint64_t *)(a1 + 48), a2 + 48);
}

uint64_t *sub_1DB6E4384(uint64_t *a1, uint64_t a2)
{
  uint64_t *result;

  result = sub_1DB6E311C(a1, *(const void **)a2, *(_QWORD *)(a2 + 8));
  if (!result)
    sub_1DB730818(1, "Out of memory");
  return result;
}

void archive_entry_copy_mac_metadata(uint64_t a1, const void *a2, size_t a3)
{
  void *v6;

  free(*(void **)(a1 + 920));
  if (a2 && a3)
  {
    *(_QWORD *)(a1 + 928) = a3;
    v6 = malloc_type_malloc(a3, 0x9E8C9C96uLL);
    *(_QWORD *)(a1 + 920) = v6;
    if (!v6)
      abort();
    memcpy(v6, a2, a3);
  }
  else
  {
    *(_QWORD *)(a1 + 920) = 0;
    *(_QWORD *)(a1 + 928) = 0;
  }
}

uint64_t archive_read_support_format_cpio(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _DWORD *v8;
  void *v9;
  char *v10;
  int *v11;
  int v12;
  char *v13;

  if (!sub_1DB6E4544("cpio"))
  {
    v10 = "Format not allow-listed in entitlements";
    v11 = a1;
    v12 = -1;
LABEL_7:
    archive_set_error(v11, v12, v10, v2, v3, v4, v5, v6, v13);
    return 4294967266;
  }
  result = sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_format_cpio", v3, v4, v5, v6);
  if ((_DWORD)result == -30)
    return result;
  v8 = malloc_type_calloc(1uLL, 0x50uLL, 0x10A0040D81D3FF9uLL);
  if (!v8)
  {
    v10 = "Can't allocate cpio data";
    v11 = a1;
    v12 = 12;
    goto LABEL_7;
  }
  v9 = v8;
  *v8 = 320083222;
  result = sub_1DB6DE874(a1, (uint64_t)v8, "cpio", (uint64_t)sub_1DB6E6120, (uint64_t)sub_1DB70D9A8, (uint64_t)sub_1DB70DA9C, (uint64_t)sub_1DB70DDC4, (uint64_t)sub_1DB70DEC4, 0, (uint64_t)sub_1DB6E7F10, 0, 0);
  if ((_DWORD)result)
  {
    free(v9);
    return 0;
  }
  return result;
}

BOOL sub_1DB6E4544(const char *a1)
{
  return sub_1DB6DE978(a1, "com.apple.libarchive.filters", &stru_1ECFF6C4C, (__CFSet **)&qword_1ECFF6BD0, &byte_1ECFF6CD8);
}

uint64_t archive_read_support_format_cab(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  char *v17;

  result = sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_format_cab", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    v10 = (void **)malloc_type_calloc(1uLL, 0x1C0uLL, 0x10F00403258FFA1uLL);
    if (v10)
    {
      v16 = v10;
      v10[16] = 0;
      v10[17] = 0;
      v10[15] = 0;
      sub_1DB6E54A4(v10 + 15, 256);
      result = sub_1DB6DE874(a1, (uint64_t)v16, "cab", (uint64_t)sub_1DB6E622C, (uint64_t)sub_1DB6EBF80, (uint64_t)sub_1DB6EC018, (uint64_t)sub_1DB6ECA50, (uint64_t)sub_1DB6ECC58, 0, (uint64_t)sub_1DB6E7F78, 0, 0);
      if ((_DWORD)result)
      {
        free(v16);
        return 0;
      }
    }
    else
    {
      archive_set_error(a1, 12, "Can't allocate CAB data", v11, v12, v13, v14, v15, v17);
      return 4294967266;
    }
  }
  return result;
}

uint64_t archive_read_support_format_ar(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  char *v10;
  int *v11;
  int v12;
  char *v14;

  if (!sub_1DB6DEC28("ar"))
  {
    v10 = "Format not allow-listed in entitlements";
    v11 = a1;
    v12 = -1;
LABEL_7:
    archive_set_error(v11, v12, v10, v2, v3, v4, v5, v6, v14);
    return 4294967266;
  }
  if (sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_format_ar", v3, v4, v5, v6) == -30)
    return 4294967266;
  v7 = malloc_type_calloc(1uLL, 0x38uLL, 0x10100402A43CA8AuLL);
  if (!v7)
  {
    v10 = "Can't allocate ar data";
    v11 = a1;
    v12 = 12;
    goto LABEL_7;
  }
  v8 = v7;
  *((_QWORD *)v7 + 4) = 0;
  v9 = sub_1DB6DE874(a1, (uint64_t)v7, "ar", (uint64_t)sub_1DB6E6334, 0, (uint64_t)sub_1DB70C958, (uint64_t)sub_1DB70CF40, (uint64_t)sub_1DB70D064, 0, (uint64_t)sub_1DB6E80D0, 0, 0);
  if ((_DWORD)v9)
    free(v8);
  return v9;
}

uint64_t archive_read_support_format_7zip(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char *v17;

  result = sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_format_7zip", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    v10 = malloc_type_calloc(1uLL, 0x5100uLL, 0x10F004033C6904CuLL);
    if (v10)
    {
      v16 = v10;
      *((_DWORD *)v10 + 5182) = -1;
      result = sub_1DB6DE874(a1, (uint64_t)v10, "7zip", (uint64_t)sub_1DB6E637C, 0, (uint64_t)sub_1DB6F1D78, (uint64_t)sub_1DB6F25D0, (uint64_t)sub_1DB6F2750, 0, (uint64_t)sub_1DB6E8110, (uint64_t)sub_1DB6F2858, (uint64_t)sub_1DB6F2860);
      if ((_DWORD)result)
      {
        free(v16);
        return 0;
      }
    }
    else
    {
      archive_set_error(a1, 12, "Can't allocate 7zip data", v11, v12, v13, v14, v15, v17);
      return 4294967266;
    }
  }
  return result;
}

void archive_entry_linkresolver_free(uint64_t *a1)
{
  _QWORD *v2;

  if (a1)
  {
    while (1)
    {
      v2 = sub_1DB6EF740(a1, 3);
      if (!v2)
        break;
      archive_entry_free((void **)v2[3]);
    }
    free((void *)*a1);
    free(a1);
  }
}

const char *sub_1DB6E48A8(char *__s)
{
  char *v1;
  char v2;
  uint64_t v3;
  char v4;
  BOOL v5;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;

  v1 = __s;
  v9 = *MEMORY[0x1E0C80C00];
  if (__s)
  {
    v2 = *__s;
    if (*__s)
    {
      if (strlen(__s) <= 0xF)
      {
        v3 = 0;
        do
        {
          if ((v2 - 97) >= 0x1Au)
            v4 = v2;
          else
            v4 = v2 - 32;
          *((_BYTE *)&v7 + v3) = v4;
          v2 = v1[++v3];
        }
        while (v2);
        *((_BYTE *)&v7 + v3) = 0;
        v5 = (_DWORD)v7 == 759583829 && WORD2(v7) == 56;
        if (v5 || !(v7 ^ 0x38465455 | BYTE4(v7)))
        {
          return "UTF-8";
        }
        else if (!(v7 ^ 0x454236312D465455 | v8) || v7 == 0x45423631465455)
        {
          return "UTF-16BE";
        }
        else if (!(v7 ^ 0x454C36312D465455 | v8) || v7 == 0x454C3631465455)
        {
          return "UTF-16LE";
        }
        else if (!(v7 ^ 0x33395043 | WORD2(v7) ^ 0x32))
        {
          return "CP932";
        }
      }
    }
  }
  return v1;
}

void sub_1DB6E4A60(_WORD *a1, uint64_t a2)
{
  uint64_t *i;
  _DWORD *v5;

  sub_1DB6DF3C0((uint64_t)a1);
  *a1 = *(_WORD *)a2;
  for (i = *(uint64_t **)(a2 + 8); i; i = (uint64_t *)*i)
  {
    v5 = sub_1DB717CC8((uint64_t)a1, *((_DWORD *)i + 2), *((_DWORD *)i + 4), *((_DWORD *)i + 3), *((_DWORD *)i + 5));
    if (v5)
      sub_1DB6E4338((uint64_t)(v5 + 6), (uint64_t)(i + 3));
  }
}

uint64_t sub_1DB6E4ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v8;

  v8 = sub_1DB6E2588(a1, 0x1CuLL, 0, a4, a5, a6, a7, a8);
  if (!v8)
    return 0xFFFFFFFFLL;
  if (bswap32(*(_DWORD *)v8) != 2019652129
    || __rev16(*(unsigned __int16 *)(v8 + 4)) != 28
    || __rev16(*(unsigned __int16 *)(v8 + 6)) != 1)
  {
    return 0;
  }
  if (bswap32(*(_DWORD *)(v8 + 24)) >= 3)
    return 0;
  return 96;
}

uint64_t sub_1DB6E4B38(uint64_t result)
{
  uint64_t v1;
  int v2;
  void *v3;
  unsigned int v4;
  uint64_t v5;
  void *v6;
  uint64_t (*v7)(char **, unsigned __int8 *, unint64_t, uint64_t);
  void *v8;
  uint64_t (*v9)(char **, unsigned __int8 *, unint64_t, uint64_t);
  uint64_t v10;

  v1 = result;
  *(_DWORD *)(result + 96) = 0;
  v2 = *(_DWORD *)(result + 36);
  if ((v2 & 0x10) != 0)
  {
    *(_DWORD *)(result + 96) = 1;
    v3 = sub_1DB72D548;
    goto LABEL_14;
  }
  if ((v2 & 0x1400) == 0)
  {
    if ((v2 & 0x2800) != 0)
    {
      if ((v2 & 0x80) != 0)
      {
        v9 = sub_1DB72DBA8;
      }
      else
      {
        if ((v2 & 0x40) == 0)
        {
          v4 = 0;
          if ((v2 & 0x100) != 0)
          {
LABEL_11:
            if ((v2 & 0xC0) != 0)
              return result;
            *(_DWORD *)(result + 96) = v4 + 1;
            v5 = result + 8 * v4;
            v6 = sub_1DB72D6E8;
LABEL_28:
            *(_QWORD *)(v5 + 80) = v6;
            return result;
          }
          goto LABEL_26;
        }
        v9 = sub_1DB72E64C;
      }
      v4 = 1;
      *(_DWORD *)(result + 96) = 1;
      *(_QWORD *)(result + 80) = v9;
      if ((v2 & 0x100) != 0)
        goto LABEL_11;
LABEL_26:
      if (*(_QWORD *)(result + 40) != -1)
      {
        *(_DWORD *)(result + 96) = v4 + 1;
        v5 = result + 8 * v4;
        v6 = sub_1DB72D90C;
        goto LABEL_28;
      }
      if ((~v2 & 0x804) == 0)
      {
        v8 = sub_1DB72F8AC;
        return sub_1DB6E6498(v1, (uint64_t)v8);
      }
      if ((~v2 & 0x2004) == 0)
      {
        v8 = sub_1DB72F8B4;
        return sub_1DB6E6498(v1, (uint64_t)v8);
      }
LABEL_47:
      *(_DWORD *)(v1 + 96) = 0;
      return result;
    }
    if ((v2 & 0x200) == 0)
      goto LABEL_34;
    if ((v2 & 0x80) != 0)
    {
      v7 = sub_1DB72DBA8;
    }
    else
    {
      if ((v2 & 0x40) == 0)
        goto LABEL_33;
      v7 = sub_1DB72E64C;
    }
    result = sub_1DB6E6498(result, (uint64_t)v7);
LABEL_33:
    v2 = *(_DWORD *)(v1 + 36);
    if ((v2 & 0x100) != 0)
    {
      if ((v2 & 0xC0) != 0)
        return result;
      v8 = sub_1DB72F8BC;
      return sub_1DB6E6498(v1, (uint64_t)v8);
    }
LABEL_34:
    if (*(_QWORD *)(v1 + 40) == -1)
    {
      if ((v2 & 4) != 0 || *(_DWORD *)(v1 + 32))
      {
        v8 = sub_1DB72FAC4;
        return sub_1DB6E6498(v1, (uint64_t)v8);
      }
      goto LABEL_47;
    }
    v10 = *(int *)(v1 + 96);
    if ((int)v10 >= 2)
      sub_1DB730818(1, "Programming error");
    *(_DWORD *)(v1 + 96) = v10 + 1;
    *(_QWORD *)(v1 + 8 * v10 + 80) = sub_1DB72D90C;
    if ((~v2 & 0x182) != 0)
      return result;
    v8 = sub_1DB72DBA8;
    return sub_1DB6E6498(v1, (uint64_t)v8);
  }
  if ((v2 & 0x200) != 0)
  {
    *(_DWORD *)(result + 96) = 1;
    v3 = sub_1DB72D6E8;
    goto LABEL_14;
  }
  if (*(_QWORD *)(result + 40) != -1)
  {
    *(_DWORD *)(result + 96) = 1;
    v3 = sub_1DB72D90C;
LABEL_14:
    *(_QWORD *)(result + 80) = v3;
    return result;
  }
  if ((v2 & 4) != 0)
  {
    if ((v2 & 0x400) != 0)
      v8 = sub_1DB72DB98;
    else
      v8 = sub_1DB72DBA0;
    return sub_1DB6E6498(v1, (uint64_t)v8);
  }
  return result;
}

uint64_t sub_1DB6E4D58(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a2 <= 30
    && (v11 = 0x1071A21726152, v10 = -1, (v8 = (_QWORD *)sub_1DB6E2588(a1, 8uLL, &v10, a4, a5, a6, a7, a8)) != 0)
    && v11 == *v8)
  {
    return 30;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_1DB6E4DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v9 = sub_1DB6E2588(a1, 6uLL, 0, a4, a5, a6, a7, a8);
  if (!v9)
    return 0xFFFFFFFFLL;
  if (*(_DWORD *)v9 == 1920232739 && *(_WORD *)(v9 + 4) == 25957)
    return 48;
  else
    return sub_1DB6E4E50(a1, 0, v10, v11, v12, v13, v14, v15);
}

uint64_t sub_1DB6E4E50(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  signed __int8 *v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  size_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  BOOL v35;
  int v36;
  int v38;
  BOOL v39;
  int v40;
  signed __int8 *v42;
  uint64_t v43;
  int v44;
  const char *v45;
  int v46;
  signed __int8 *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  BOOL v51;
  int v52;
  const char *v53;
  unsigned __int8 *v54;
  int v55;
  unsigned __int8 *v56;
  int v57;
  int v58;
  unsigned int v59;
  uint64_t i;
  unsigned __int8 *v61;
  int v62;
  const char *v63;
  int v64;
  int v65;
  int v66;
  char v67;
  uint64_t result;
  _DWORD *v69;
  int v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;

  if (a2)
    *a2 = 0;
  v73 = 0;
  v74 = 0;
  v10 = sub_1DB6E2588(a1, 1uLL, &v74, a4, a5, a6, a7, a8);
  if (!v10)
    return 0xFFFFFFFFLL;
  v16 = (signed __int8 *)v10;
  v71 = a2;
  v72 = 0;
  v70 = 0;
  v17 = v74;
  v18 = v74;
  if (v74)
  {
    while (1)
    {
      v19 = sub_1DB6E535C((uint64_t)v16, v17, &v73);
      v20 = v73;
      if (!v73)
        goto LABEL_8;
      v21 = v17;
LABEL_21:
      if (v19 < 1)
        goto LABEL_119;
      if (!HIDWORD(v72))
        break;
      if ((int)sub_1DB715108(v16, v19, 0, 0) < 1)
        goto LABEL_117;
      v38 = v16[v19 + ~v20];
      v39 = v38 == 92;
      if (v38 == 92)
        v40 = HIDWORD(v72);
      else
        v40 = 0;
      if (!v39 && HIDWORD(v72) == 1)
      {
        if ((int)v72 > 1)
          goto LABEL_126;
        v72 = (v72 + 1);
      }
      else
      {
        HIDWORD(v72) = v40;
      }
      v16 += v19;
LABEL_40:
      v17 = v21 - v19;
      v74 = v21 - v19;
      if (v21 == v19)
        goto LABEL_7;
    }
    v32 = &v16[v19];
    do
    {
      v33 = *v16;
      if ((_DWORD)v33 != 32 && v33 != 9)
      {
        v36 = 1;
        v32 = v16;
        goto LABEL_32;
      }
      ++v16;
      v74 = --v21;
      v35 = v19-- <= 1;
    }
    while (!v35);
    v19 = 0;
    v36 = 0;
    v33 = *(unsigned __int8 *)v32;
LABEL_32:
    if (v33 > 34)
    {
      if (v33 == 35)
      {
LABEL_39:
        v16 = (signed __int8 *)&v32[v19];
        goto LABEL_40;
      }
      if (v33 == 47)
      {
        if ((unint64_t)v19 < 5)
          goto LABEL_119;
        if (!strncmp(v32, "/set", 4uLL))
        {
          v42 = (signed __int8 *)(v32 + 4);
          v43 = v19 - 4;
          v44 = 0;
        }
        else
        {
          if ((unint64_t)v19 < 7 || strncmp(v32, "/unset", 6uLL))
            goto LABEL_117;
          v42 = (signed __int8 *)(v32 + 6);
          v43 = v19 - 6;
          v44 = 1;
        }
        if ((int)sub_1DB715108(v42, v43, v44, 0) < 1)
          goto LABEL_117;
        v62 = 2 * (v32[v19 + ~v20] == 92);
        goto LABEL_89;
      }
    }
    else if (v33 == 10 || v33 == 13)
    {
      goto LABEL_39;
    }
    v45 = &v32[v19];
    if (v36)
    {
      v46 = algn_1DB74CB57[v33];
      v47 = (signed __int8 *)v32;
      if (algn_1DB74CB57[v33])
      {
        v47 = (signed __int8 *)(v32 + 1);
        v48 = v19 - 1;
        while (v47 < v45)
        {
          v49 = *v47++;
          v33 = v49;
          --v48;
          if (!algn_1DB74CB57[v49])
          {
            --v47;
            goto LABEL_66;
          }
        }
        v52 = 0;
        goto LABEL_92;
      }
LABEL_66:
      v35 = (unint64_t)v33 > 0x20;
      v50 = (1 << v33) & 0x100002600;
      v51 = v35 || v50 == 0;
      if (!v51 && v46)
      {
        v52 = 0;
        v48 = v45 - v47;
LABEL_92:
        v64 = 1;
        goto LABEL_98;
      }
    }
    v53 = &v45[-v20];
    v54 = (unsigned __int8 *)&v45[-v20 - 2];
    if (v54 >= (unsigned __int8 *)v32 && *(v53 - 1) == 92)
    {
      v55 = *v54;
      if (v55 == 9 || v55 == 32)
        goto LABEL_119;
    }
    v56 = (unsigned __int8 *)(v53 - 1);
    if (v56 < (unsigned __int8 *)v32)
      goto LABEL_119;
    v57 = *v56;
    if (v57 == 92)
      goto LABEL_119;
    v58 = 0;
    v59 = 0;
    for (i = v19 - v20; ; --i)
    {
      if (v57 == 9 || v57 == 32)
      {
        v63 = &v32[i];
        goto LABEL_94;
      }
      if (!algn_1DB74CB57[v57])
        goto LABEL_119;
      if (v57 == 47)
        v58 = 1;
      v61 = (unsigned __int8 *)&v32[i - 2];
      if (v61 < (unsigned __int8 *)v32)
        break;
      v57 = *v61;
      ++v59;
    }
    v63 = &v32[i - 1];
    ++v59;
LABEL_94:
    if (!v59 || !v58 || *v63 == 47)
      goto LABEL_119;
    v64 = 0;
    v48 = v19 - (v20 + v59);
    v52 = 1;
    v47 = (signed __int8 *)v32;
LABEL_98:
    v65 = sub_1DB715108(v47, v48, 0, v52);
    if (v65 < 0)
      goto LABEL_119;
    if (v70 == 1)
    {
      if (v65)
        v67 = v64;
      else
        v67 = 0;
      if ((v67 & 1) != 0)
      {
        v70 = 1;
        goto LABEL_119;
      }
    }
    else if (!v70)
    {
      if (!v64)
      {
        v70 = 1;
        goto LABEL_114;
      }
      if (v65)
        v66 = -1;
      else
        v66 = 0;
      v70 = v66;
LABEL_111:
      if (v32[v19 + ~v20] == 92)
      {
        v62 = 1;
LABEL_89:
        HIDWORD(v72) = v62;
        goto LABEL_39;
      }
LABEL_114:
      if ((int)v72 > 1)
      {
LABEL_126:
        v69 = v71;
        goto LABEL_122;
      }
      v72 = (v72 + 1);
      goto LABEL_39;
    }
    if (!v64)
      goto LABEL_114;
    goto LABEL_111;
  }
LABEL_7:
  v19 = 0;
  v73 = 0;
LABEL_8:
  if (v19 == v17)
  {
    while (v17 < 0x100000)
    {
      v27 = sub_1DB6E2588(a1, (unint64_t)(((_DWORD)v18 + 1023) & 0xFFFFFC00) << ((((_DWORD)v18 + 1023) & 0xFFFFFC00) < (unint64_t)(v18 + 160)), &v74, v11, v12, v13, v14, v15);
      v28 = v27;
      if (!v27)
      {
        if (v18 >= v74)
        {
          v19 = 0;
          goto LABEL_119;
        }
        v28 = sub_1DB6E2588(a1, v74, &v74, v22, v23, v24, v25, v26);
      }
      v29 = v74;
      v21 = v74 - (v18 - v17);
      v74 = v21;
      v30 = sub_1DB6E535C(v28 + v18, v21 - v17, &v73);
      if (v30 >= 0)
        v31 = v17;
      else
        v31 = 0;
      v19 = v31 + v30;
      v20 = v73;
      if (v73)
      {
        v16 = (signed __int8 *)(v28 + v18 - v17);
        v18 = v29;
        goto LABEL_21;
      }
      if (v27)
      {
        v17 = v21;
        v18 = v29;
        if (v19 == v21)
          continue;
      }
      goto LABEL_119;
    }
LABEL_117:
    v19 = 1;
  }
LABEL_119:
  v69 = v71;
  if ((int)v72 > 2 || (result = 0, (int)v72 >= 1) && !v19)
  {
LABEL_122:
    result = 32;
    if (v69)
    {
      if (v70 == 1)
        *v69 = 1;
    }
  }
  return result;
}

uint64_t sub_1DB6E535C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;

  if (a2 < 1)
  {
LABEL_7:
    if (a3)
      *a3 = 0;
  }
  else
  {
    v3 = 0;
    while (1)
    {
      v4 = *(char *)(a1 + v3);
      if (v4 == 13)
        break;
      if (v4 == 10)
        goto LABEL_14;
      if (!*(_BYTE *)(a1 + v3))
      {
        if (a3)
          *a3 = 0;
        return -1;
      }
      if (a2 == ++v3)
        goto LABEL_7;
    }
    if (a2 - v3 < 2 || *(_BYTE *)(a1 + v3 + 1) != 10)
    {
LABEL_14:
      if (a3)
        *a3 = 1;
      return v3 + 1;
    }
    if (a3)
      *a3 = 2;
    return v3 + 2;
  }
  return a2;
}

uint64_t sub_1DB6E53F0(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t (*v6)(void);
  int v7;
  uint64_t (*v8)(void);
  uint64_t (*v9)(void);

  v3 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(v3 + 244) == a2)
    return 0;
  *(_DWORD *)(v3 + 244) = a2;
  v5 = *(_QWORD *)(*(_QWORD *)(v3 + 256) + 24 * a2 + 16);
  v6 = *(uint64_t (**)(void))(v3 + 232);
  if (v6)
  {
    LODWORD(result) = v6();
    v7 = result;
    *(_QWORD *)(a1 + 88) = v5;
  }
  else
  {
    v8 = *(uint64_t (**)(void))(v3 + 224);
    if (v8)
    {
      v7 = v8();
      v3 = *(_QWORD *)(a1 + 24);
    }
    else
    {
      v7 = 0;
    }
    *(_QWORD *)(a1 + 88) = v5;
    v9 = *(uint64_t (**)(void))(v3 + 192);
    if (v9)
      LODWORD(result) = v9();
    else
      LODWORD(result) = 0;
  }
  if (v7 >= (int)result)
    return result;
  else
    return v7;
}

void **sub_1DB6E54A4(void **a1, uint64_t a2)
{
  return sub_1DB6E3190(a1, 4 * a2);
}

uint64_t sub_1DB6E54AC()
{
  return 0;
}

uint64_t sub_1DB6E54B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v8;

  v8 = (_BYTE *)sub_1DB6E2588(a1, 4uLL, 0, a4, a5, a6, a7, a8);
  if (!v8)
    return 0xFFFFFFFFLL;
  if (*v8 != 80 || v8[1] != 75)
    return 0;
  switch(v8[2])
  {
    case 1:
      if (v8[3] != 2)
        return 0;
      break;
    case 2:
    case 4:
      return 0;
    case 3:
      if (v8[3] != 4)
        return 0;
      break;
    case 5:
    case 6:
      if (v8[3] != 6)
        return 0;
      break;
    case 7:
      if (v8[3] != 8)
        return 0;
      break;
    default:
      if (v8[2] != 48 || v8[3] != 48)
        return 0;
      break;
  }
  return 29;
}

uint64_t sub_1DB6E5578(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  int v19;
  BOOL v20;
  uint64_t result;
  uint64_t v22;
  int v23;

  if (a2 > 32)
    return 0xFFFFFFFFLL;
  v4 = **(_QWORD **)(a1 + 2472);
  v5 = sub_1DB6F802C(a1, 0, 2);
  if (v5 < 1)
    return 0;
  v6 = v5 >= 0x4000 ? 0x4000 : v5;
  v7 = sub_1DB6F802C(a1, -(int)v6, 2);
  if (v7 < 0)
    return 0;
  v13 = v7;
  v14 = sub_1DB6E2588(a1, v6, 0, v8, v9, v10, v11, v12);
  v2 = 0;
  if (!v14 || v6 < 0x17)
    return v2;
  v15 = v6 - 22;
  while (1)
  {
    v16 = v15;
    v17 = (_DWORD *)(v14 + v15);
    v18 = *(char *)v17;
    if (v18 > 74)
      break;
    if (v18 == 5)
    {
      v19 = -2;
      goto LABEL_21;
    }
    if (v18 != 6)
      goto LABEL_18;
    v19 = -3;
LABEL_21:
    v20 = __OFADD__((_DWORD)v16, v19);
    v15 = v16 + v19;
    if ((v15 < 0) ^ v20 | (v15 == 0))
      return 0;
  }
  if (v18 == 75)
  {
    v19 = -1;
    goto LABEL_21;
  }
  if (v18 != 80 || *v17 != 101010256)
  {
LABEL_18:
    v19 = -4;
    goto LABEL_21;
  }
  v2 = sub_1DB72C454(v4, (uint64_t)v17, v13 + v16);
  if (v16 < 0x14)
    return v2;
  v23 = *(v17 - 5);
  v22 = (uint64_t)(v17 - 5);
  if (v23 != 117853008)
    return v2;
  LODWORD(result) = sub_1DB72C498(a1, v4, v22);
  if (result <= v2)
    return v2;
  else
    return result;
}

uint64_t sub_1DB6E56DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t result;
  BOOL v13;
  int v14;
  BOOL v15;
  int v16;

  v8 = (_BYTE *)sub_1DB6E2588(a1, 0x200uLL, 0, a4, a5, a6, a7, a8);
  if (!v8)
    return 0xFFFFFFFFLL;
  v9 = v8;
  if (*v8)
  {
LABEL_6:
    result = sub_1DB6E28C0((uint64_t)v8);
    if ((_DWORD)result)
    {
      v13 = *(_DWORD *)(v9 + 257) == 1635021685 && *(_WORD *)(v9 + 261) == 114;
      v14 = 48;
      if (v13)
      {
        if (*(_WORD *)(v9 + 263) == 12336)
          v14 = 104;
        else
          v14 = 48;
      }
      v15 = *(_DWORD *)(v9 + 257) == 1635021685 && *(_WORD *)(v9 + 261) == 8306;
      if (v15 && *(_WORD *)(v9 + 263) == 32)
        v14 += 56;
      v16 = v9[156];
      if (((v16 & 0xFFFFFFDF) - 65 < 0x1A || !v9[156] || (v16 - 48) <= 9)
        && sub_1DB6E5848(v9 + 100, 8uLL)
        && sub_1DB6E5848(v9 + 108, 8uLL)
        && sub_1DB6E5848(v9 + 116, 8uLL)
        && sub_1DB6E5848(v9 + 136, 0xCuLL)
        && sub_1DB6E5848(v9 + 124, 0xCuLL)
        && sub_1DB6E5848(v9 + 329, 8uLL)
        && sub_1DB6E5848(v9 + 337, 8uLL))
      {
        return (v14 + 2);
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    v10 = 1;
    while ((_DWORD)v10 != 512)
    {
      if (v8[v10++])
        goto LABEL_6;
    }
    return 10;
  }
  return result;
}

uint64_t sub_1DB6E5848(_BYTE *a1, unint64_t a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  int v7;

  v2 = *a1;
  v3 = 1;
  if (*a1 && v2 != 128 && v2 != 255)
  {
    v4 = 0;
    if (a2)
    {
      while (a1[v4] == 32)
      {
        if (a2 == ++v4)
          return 1;
      }
    }
    if (v4 < a2)
    {
      while ((a1[v4] & 0xF8) == 0x30)
      {
        if (a2 == ++v4)
          return 1;
      }
    }
    v5 = a2 - v4;
    if (a2 <= v4)
    {
      return 1;
    }
    else
    {
      v6 = &a1[v4];
      while (1)
      {
        v7 = *v6++;
        if ((v7 | 0x20) != 0x20)
          break;
        if (!--v5)
          return 1;
      }
      return 0;
    }
  }
  return v3;
}

uint64_t sub_1DB6E58E8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  size_t v22;
  _DWORD *v23;
  _DWORD *v25;
  char *v26;
  _QWORD v27[9];

  if (a2 > 30)
    return 0xFFFFFFFFLL;
  v27[7] = v8;
  v27[8] = v9;
  v12 = sub_1DB6E2588(a1, 7uLL, 0, a4, a5, a6, a7, a8);
  if (!v12)
    return 0xFFFFFFFFLL;
  if (*(_DWORD *)v12 == 561144146 && *(_DWORD *)(v12 + 3) == 465441)
    return 30;
  if ((*(_BYTE *)v12 != 77 || *(_BYTE *)(v12 + 1) != 90) && *(_DWORD *)v12 != 1179403647)
    return 0;
  v27[0] = 0;
  v19 = 0x10000;
  v20 = 4096;
  v21 = 69632;
  while (1)
  {
    v22 = sub_1DB6E2588(a1, v21, v27, v13, v14, v15, v16, v17);
    if (!v22)
    {
      if (v20 < 128)
        return 0;
      v20 = (unint64_t)v20 >> 1;
      goto LABEL_25;
    }
    v23 = (_DWORD *)(v22 + v19);
    if (v22 + v19 + 7 < v22 + v27[0])
      break;
LABEL_22:
    v19 = (uint64_t)v23 - v22;
LABEL_25:
    v21 = v20 + v19;
    if (v20 + v19 > 0x20000)
      return 0;
  }
  while (*v23 != 561144146 || *(_DWORD *)((char *)v23 + 3) != 465441)
  {
    v25 = v23 + 4;
    v26 = (char *)v23 + 23;
    v23 += 4;
    if ((unint64_t)v26 >= v22 + v27[0])
    {
      v23 = v25;
      goto LABEL_22;
    }
  }
  return 30;
}

uint64_t sub_1DB6E5A2C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  size_t v21;
  BOOL v22;
  size_t v23;
  _BYTE *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD v27[9];

  if (a2 > 30)
    return 0xFFFFFFFFLL;
  v27[7] = v8;
  v27[8] = v9;
  v12 = (_BYTE *)sub_1DB6E2588(a1, 0x16uLL, 0, a4, a5, a6, a7, a8);
  if (!v12)
    return 0xFFFFFFFFLL;
  v13 = v12;
  if (!sub_1DB6E5B30(v12))
    return 30;
  v27[0] = 0;
  if (*v13 != 77 || v13[1] != 90)
    return 0;
  v19 = 0;
  v20 = 4096;
  do
  {
    while (1)
    {
      v21 = sub_1DB6E2588(a1, v20 + v19, v27, v14, v15, v16, v17, v18);
      if (v21)
        break;
      v22 = v20 >= 0x32;
      v20 >>= 1;
      if (!v22)
        return 0;
    }
    v23 = v21;
    v24 = (_BYTE *)(v21 + v19);
    v25 = v21 + v27[0];
    while ((unint64_t)(v24 + 22) < v25)
    {
      v26 = sub_1DB6E5B30(v24);
      if (!v26)
        return 30;
      v24 += v26;
    }
    result = 0;
    v19 = (uint64_t)&v24[-v23];
  }
  while (v19 < 20480);
  return result;
}

uint64_t sub_1DB6E5B30(_BYTE *a1)
{
  int v2;
  int v3;
  uint64_t result;

  v2 = a1[5];
  if (v2 > 0x63)
  {
    result = 1;
    if (v2 <= 107)
    {
      if (v2 != 100)
      {
        if (v2 != 104)
          return 4;
        return result;
      }
    }
    else
    {
      if (v2 == 108)
        return 2;
      if (v2 == 122)
        return result;
      if (v2 != 115)
        return 4;
    }
  }
  else if ((v2 - 48) >= 8)
  {
    if (v2 == 45)
      return 3;
    return 4;
  }
  if (!*a1 || a1[2] != 45 || a1[3] != 108 || a1[6] != 45)
    return 4;
  v3 = a1[4];
  if (v3 != 122)
  {
    if (v3 == 104 && v2 != 115 && (!a1[20] || a1[20] <= 3u && a1[19] == 32))
      return 0;
    return 4;
  }
  if (a1[20])
    return 4;
  result = 4;
  if ((v2 - 52) <= 0x3F && ((1 << (v2 - 52)) & 0x8000000000000003) != 0)
    return 0;
  return result;
}

uint64_t sub_1DB6E5C40(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t i;
  unsigned int v22;
  BOOL v27;
  BOOL v28;
  int v30;
  char v31;
  BOOL v32;
  BOOL v33;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _DWORD *v40;
  _DWORD *v41;
  int v42;
  int v43;
  signed int v44;
  int v45;
  int v46;
  signed int v47;
  unsigned int v48;
  uint64_t v49;
  int *v50;
  _QWORD v51[13];

  if (a2 > 48)
    return 0xFFFFFFFFLL;
  v51[11] = v8;
  v51[12] = v9;
  v51[0] = 0;
  v11 = **(_QWORD **)(a1 + 2472);
  v12 = sub_1DB6E2588(a1, 0xC000uLL, v51, a4, a5, a6, a7, a8);
  if (v12)
  {
    v13 = v51[0];
    v51[0] -= 0x8000;
    if (v13 < 34817)
      return 0;
    v14 = (_QWORD *)(v11 + 528);
    v50 = (int *)(v11 + 188);
    _X26 = v12 + 35697;
    for (i = v13 - 34816; ; i -= 2048)
    {
      _X8 = _X26 - 881;
      __asm { PRFM            #0, [X8] }
      v22 = *(unsigned __int8 *)(_X26 - 2929);
      if (v22 >= 4 && v22 != 255)
        return 0;
      if (*(_DWORD *)(_X26 - 2928) != 808469571 || *(_BYTE *)(_X26 - 2924) != 49)
        return 0;
      _X8 = _X26 - 752;
      __asm
      {
        PRFM            #0, [X8]
        PRFM            #0, [X26]
      }
      if (v22 == 1 && *(_BYTE *)(_X26 - 2923) == 1 && !*(_BYTE *)(_X26 - 2922) && *v14 == *(_QWORD *)(_X26 - 2857))
      {
        v27 = *v14 == *(_QWORD *)(_X26 - 2841) && *(_QWORD *)(v11 + 536) == *(_QWORD *)(_X26 - 2833);
        v28 = v27 && *(_QWORD *)(v11 + 544) == *(_QWORD *)(_X26 - 2825);
        if (v28 && *(_QWORD *)(v11 + 552) == *(_QWORD *)(_X26 - 2817))
        {
          if (*(_WORD *)(_X26 - 2801))
          {
            v42 = *(_DWORD *)(_X26 - 2849);
            if (v42 >= 21 && *(_BYTE *)(_X26 - 2048) == 1)
            {
              v43 = *(_DWORD *)(_X26 - 2789);
              if (v43 >= 18 && v43 < v42)
              {
                v44 = bswap32(*(_DWORD *)(_X26 - 2781));
                if (v44 < v42
                  && (v44 - 18) <= 0xFFFFFFEE
                  && (*(unsigned __int8 *)(_X26 - 2047) | 0x20) == 0x20)
                {
                  v48 = *(_DWORD *)(_X26 - 2849);
                  v49 = *(unsigned __int16 *)(_X26 - 2801);
                  if (!memcmp((const void *)(v11 + 528), (const void *)(_X26 - 1534), 0x28DuLL)
                    && *(_BYTE *)(_X26 - 2773) == 34)
                  {
                    break;
                  }
                }
              }
            }
          }
        }
      }
      if (!*(_DWORD *)(v11 + 196)
        && sub_1DB7125F4(v11, _X26 - 2929)
        && *(_BYTE *)(_X26 - 2841) == 37
        && *(_BYTE *)(_X26 - 2840) == 47)
      {
        v30 = *(unsigned __int8 *)(_X26 - 2839);
        switch(v30)
        {
          case '@':
            v31 = 1;
            goto LABEL_67;
          case 'E':
            v31 = 3;
LABEL_67:
            *(_BYTE *)(v11 + 42) = v31;
            v37 = *(unsigned __int16 *)(_X26 - 2801);
            v38 = *(_DWORD *)(_X26 - 2849);
            *(_QWORD *)(v11 + 168) = v37;
            *(_DWORD *)(v11 + 184) = v38;
            v39 = (int)v37 * (uint64_t)v38;
            v40 = (_DWORD *)(v11 + 196);
            v41 = (_DWORD *)(v11 + 200);
LABEL_68:
            *(_QWORD *)(v11 + 176) = v39;
            *v40 = *(_DWORD *)(_X26 - 2771);
            *v41 = *(_DWORD *)(_X26 - 2763);
            goto LABEL_61;
          case 'C':
            v31 = 2;
            goto LABEL_67;
        }
      }
      if (v22 == 2)
      {
        if (*(_BYTE *)(_X26 - 2923) == 2 && !*(_BYTE *)(_X26 - 2922) && *v14 == *(_QWORD *)(_X26 - 2857))
        {
          v32 = *v14 == *(_QWORD *)(_X26 - 2841) && *(_QWORD *)(v11 + 536) == *(_QWORD *)(_X26 - 2833);
          v33 = v32 && *(_QWORD *)(v11 + 544) == *(_QWORD *)(_X26 - 2825);
          if (v33 && *(_QWORD *)(v11 + 552) == *(_QWORD *)(_X26 - 2817))
          {
            if (*(_WORD *)(_X26 - 2801))
            {
              v45 = *(_DWORD *)(_X26 - 2849);
              if (v45 >= 21 && *(_BYTE *)(_X26 - 2048) == 2)
              {
                v46 = *(_DWORD *)(_X26 - 2789);
                if (v46 >= 18 && v46 < v45)
                {
                  v47 = bswap32(*(_DWORD *)(_X26 - 2781));
                  if (v47 < v45
                    && (v47 - 18) <= 0xFFFFFFEE
                    && *(unsigned __int8 *)v14 == *(unsigned __int8 *)(_X26 - 2047)
                    && !memcmp((const void *)(v11 + 528), (const void *)(_X26 - 1534), 0x28DuLL)
                    && *(_BYTE *)(_X26 - 2773) == 34)
                  {
                    goto LABEL_61;
                  }
                }
              }
            }
          }
        }
      }
      else if (!v22 && *(_BYTE *)(_X26 - 2923) == 1)
      {
        goto LABEL_61;
      }
      if (!sub_1DB7125F4(v11, _X26 - 2929))
      {
        if (v22 != 3
          || *(_BYTE *)(_X26 - 2923) != 1
          || *(_BYTE *)(_X26 - 2922)
          || (v35 = *(_DWORD *)(_X26 - 2857), v35 < 17)
          || v35 >= *(_DWORD *)(v11 + 184)
          || v35 != bswap32(*(_DWORD *)(_X26 - 2853)))
        {
          result = sub_1DB7126C0(v11, (unsigned __int8 *)(_X26 - 2929));
          if (!(_DWORD)result)
            return result;
          if (*v50 > 16)
            return 48;
          return 0;
        }
      }
LABEL_61:
      v51[0] = i;
      _X26 += 2048;
      v36 = i + 2048;
      if (v36 <= 4096)
        return 0;
    }
    if (*v50)
      goto LABEL_61;
    *(_QWORD *)(v11 + 168) = v49;
    *(_DWORD *)(v11 + 184) = v48;
    v39 = v48 * (unint64_t)v49;
    v41 = (_DWORD *)(v11 + 192);
    v40 = (_DWORD *)(v11 + 188);
    goto LABEL_68;
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_1DB6E60E4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (a2 > 0)
    return 0xFFFFFFFFLL;
  v8 = 1;
  if (sub_1DB6E2588(a1, 1uLL, 0, a4, a5, a6, a7, a8))
    return 0xFFFFFFFFLL;
  return v8;
}

uint64_t sub_1DB6E6120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int8 *v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  int v14;
  int v15;
  uint64_t result;
  uint64_t (*v17)(uint64_t, uint64_t, _DWORD *, unint64_t *, _QWORD *, uint64_t, uint64_t, uint64_t);

  v8 = **(_QWORD **)(a1 + 2472);
  v9 = (unsigned __int8 *)sub_1DB6E2588(a1, 6uLL, 0, a4, a5, a6, a7, a8);
  if (!v9)
    return 0xFFFFFFFFLL;
  v10 = *(_DWORD *)v9 == 925906736 && *((_WORD *)v9 + 2) == 14128;
  if (v10 || (*(_DWORD *)v9 == 925906736 ? (v11 = *((unsigned __int16 *)v9 + 2) == 14130) : (v11 = 0), v11))
  {
    result = 48;
    v17 = sub_1DB70DF28;
    goto LABEL_23;
  }
  v12 = *(_DWORD *)v9 == 925906736 && *((_WORD *)v9 + 2) == 12592;
  if (v12 || (*(_DWORD *)v9 == 925906736 ? (v13 = *((unsigned __int16 *)v9 + 2) == 12848) : (v13 = 0), v13))
  {
    result = 48;
    v17 = sub_1DB70E808;
    goto LABEL_23;
  }
  v14 = *v9;
  v15 = v9[1];
  if ((v15 | (v14 << 8)) == 0x71C7)
  {
    result = 16;
    v17 = sub_1DB70EFB4;
LABEL_23:
    *(_QWORD *)(v8 + 8) = v17;
    return result;
  }
  if ((v14 | (v15 << 8)) == 0x71C7)
  {
    result = 16;
    v17 = sub_1DB70F14C;
    goto LABEL_23;
  }
  return 4294967276;
}

uint64_t sub_1DB6E622C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  _QWORD v25[9];

  if (a2 > 64)
    return 0xFFFFFFFFLL;
  v25[7] = v8;
  v25[8] = v9;
  v12 = sub_1DB6E2588(a1, 8uLL, 0, a4, a5, a6, a7, a8);
  if (!v12)
    return 0xFFFFFFFFLL;
  if (*(_QWORD *)v12 == 1178817357)
    return 64;
  v25[0] = 0;
  if (*(_BYTE *)v12 != 77 || *(_BYTE *)(v12 + 1) != 90)
    return 0;
  v18 = 0;
  v19 = 4096;
  do
  {
    v20 = sub_1DB6E2588(a1, v19 + v18, v25, v13, v14, v15, v16, v17);
    if (v20)
    {
      v21 = v20;
      v22 = v20 + v18;
      v23 = v20 + v25[0];
      while (v22 + 8 < v23)
      {
        v24 = sub_1DB6ECD44(v22);
        v22 += v24;
        if (!v24)
          return 64;
      }
      v18 = v22 - v21;
    }
    else
    {
      if (v19 < 256)
        return 0;
      v19 = (unint64_t)v19 >> 1;
    }
    result = 0;
  }
  while (v18 < 0x20000);
  return result;
}

uint64_t sub_1DB6E6334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8 = (_QWORD *)sub_1DB6E2588(a1, 8uLL, 0, a4, a5, a6, a7, a8);
  if (!v8)
    return 0xFFFFFFFFLL;
  if (*v8 == 0xA3E686372613C21)
    return 64;
  return 0xFFFFFFFFLL;
}

size_t sub_1DB6E637C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  size_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  size_t v21;
  size_t v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD v25[7];

  if (a2 > 32)
    return 0xFFFFFFFFLL;
  v25[5] = v8;
  v25[6] = v9;
  result = sub_1DB6E2588(a1, 6uLL, 0, a4, a5, a6, a7, a8);
  if (result)
  {
    if (*(_DWORD *)result == -1346602441 && *(_WORD *)(result + 4) == 7207)
    {
      return 48;
    }
    else
    {
      if (*(_BYTE *)result == 77 && *(_BYTE *)(result + 1) == 90 || *(_DWORD *)result == 1179403647)
      {
        v18 = 159744;
        v25[0] = 0;
        v19 = 163840;
        v20 = 4096;
        do
        {
          v21 = sub_1DB6E2588(a1, v19, v25, v12, v13, v14, v15, v16);
          if (v21)
          {
            v22 = v21;
            v23 = v21 + v18;
            while (v23 + 32 < v22 + v25[0])
            {
              v24 = sub_1DB6F2888(v23);
              v23 += v24;
              if (!v24)
                return 48;
            }
            v18 = v23 - v22;
          }
          else
          {
            if (v20 < 128)
              return 0;
            v20 = (unint64_t)v20 >> 1;
          }
          v19 = v20 + v18;
        }
        while (v20 + v18 <= 393216);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1DB6E6498(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (!result || (v2 = *(int *)(result + 96), (int)v2 >= 2))
    sub_1DB730818(1, "Programming error");
  *(_DWORD *)(result + 96) = v2 + 1;
  *(_QWORD *)(result + 8 * v2 + 80) = a2;
  return result;
}

uint64_t sub_1DB6E64D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v8;
  int64_t v10;

  v10 = 0;
  v8 = sub_1DB6E2588(a1, 0xCuLL, &v10, a4, a5, a6, a7, a8);
  if (!v8 || v10 < 12)
    return 0xFFFFFFFFLL;
  if (sub_1DB6E6534(v8, v10) - 10001 < 0xFFFFDD9F)
    return 0xFFFFFFFFLL;
  return 64;
}

uint64_t sub_1DB6E6534(uint64_t a1, unint64_t a2)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  _BOOL8 v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;

  if (a2 < 0xC)
    return 0;
  if (*(_DWORD *)a1 != 1129464151 || *(_BYTE *)(a1 + 4) != 47)
    return 0;
  v3 = *(unsigned __int8 *)(a1 + 5);
  if ((v3 - 48) > 9)
    return 0;
  if (*(_BYTE *)(a1 + 6) != 46)
    return 0;
  v4 = *(unsigned __int8 *)(a1 + 7);
  if ((v4 - 48) > 9)
    return 0;
  v5 = (char)v4;
  v7 = *(unsigned __int8 *)(a1 + 8);
  v6 = a1 + 8;
  v8 = (v7 - 48) < 0xA;
  v9 = 10000 * (char)v3;
  v10 = v9 + 100 * v5 - 484800;
  LODWORD(v11) = v9 + 1000 * v5 + 100 * (char)v7 - 532800;
  if ((v7 - 48) <= 9)
    v11 = v11;
  else
    v11 = v10;
  if (v11 >= 0x4B0)
  {
    if (*(_WORD *)(v6 + v8) == 2573)
      return v11;
    else
      return 0;
  }
  v12 = *(unsigned __int8 *)(v6 + v8);
  if (v12 != 9 && v12 != 32)
    return 0;
  return v11;
}

uint64_t sub_1DB6E6610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(void);
  void (*v21)(void);

  if (!a1)
    return 0;
  if (sub_1DB6E0594((int *)a1, 195932357, 0xFFFF, "archive_read_free", a5, a6, a7, a8) == -30)
    return 4294967266;
  if (*(_DWORD *)(a1 + 4) == 32)
    v16 = 0;
  else
    v16 = sub_1DB6DBDEC(a1, v9, v10, v11, v12, v13, v14, v15);
  v17 = *(_QWORD *)(a1 + 176);
  if (v17)
  {
    sub_1DB6E7C3C(v17 + 64);
    free(*(void **)(v17 + 32));
    free(*(void **)(v17 + 472));
    if (*(int *)(v17 + 528) >= 1)
    {
      v18 = 0;
      v19 = 64;
      do
      {
        free(*(void **)(*(_QWORD *)(v17 + 512) + v19));
        ++v18;
        v19 += 88;
      }
      while (v18 < *(int *)(v17 + 528));
    }
    free(*(void **)(v17 + 512));
    free((void *)v17);
  }
  v20 = *(void (**)(void))(a1 + 224);
  if (v20 && *(_QWORD *)(a1 + 232))
    v20();
  v21 = *(void (**)(void))(a1 + 248);
  if (v21 && *(_QWORD *)(a1 + 256))
    v21();
  sub_1DB6E7C3C(a1 + 64);
  archive_entry_free(*(void ***)(a1 + 160));
  *(_DWORD *)a1 = 0;
  sub_1DB6E781C(a1);
  free((void *)a1);
  return v16;
}

uint64_t sub_1DB6E6744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t close;
  int v10;
  uint64_t (*v11)(uint64_t);
  uint64_t i;
  void (*v13)(uint64_t);
  uint64_t j;
  uint64_t (*v15)(uint64_t);
  int v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;

  if (!a1)
    return 0;
  if (sub_1DB6E0594((int *)a1, 14594245, 0xFFFF, "archive_read_free", a5, a6, a7, a8) == -30)
    return 4294967266;
  close = 0;
  v10 = *(_DWORD *)(a1 + 4);
  if (v10 != 32 && v10 != 0x8000)
    close = archive_read_close(a1);
  v11 = *(uint64_t (**)(uint64_t))(a1 + 2488);
  if (v11)
    close = v11(a1);
  for (i = 0; i != 1408; i += 88)
  {
    *(_QWORD *)(a1 + 2472) = a1 + i + 1064;
    v13 = *(void (**)(uint64_t))(a1 + i + 1128);
    if (v13)
      v13(a1);
  }
  sub_1DB6DBF34(a1);
  for (j = 0; j != 768; j += 48)
  {
    v15 = *(uint64_t (**)(uint64_t))(a1 + j + 304);
    if (v15)
    {
      v16 = v15(a1 + j + 264);
      if (v16 >= (int)close)
        close = close;
      else
        close = v16;
    }
  }
  v17 = *(_QWORD *)(a1 + 2496);
  if (v17)
  {
    do
    {
      v18 = *(_QWORD *)(v17 + 8);
      v19 = strlen(*(const char **)v17);
      bzero(*(void **)v17, v19);
      free(*(void **)v17);
      free((void *)v17);
      v17 = v18;
    }
    while (v18);
  }
  sub_1DB6E7C3C(a1 + 64);
  archive_entry_free(*(void ***)(a1 + 160));
  *(_DWORD *)a1 = 0;
  sub_1DB6E781C(a1);
  free(*(void **)(a1 + 256));
  free((void *)a1);
  return close;
}

uint64_t sub_1DB6E68A4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = **(_QWORD **)(a1 + 2472);
  if (*(_BYTE *)(v2 + 320))
    inflateEnd((z_streamp)(v2 + 208));
  if (*(_BYTE *)(v2 + 464))
    lzma_end();
  if (*(_BYTE *)(v2 + 552))
    BZ2_bzDecompressEnd((bz_stream *)(v2 + 472));
  free(*(void **)(v2 + 192));
  if (*(_BYTE *)(v2 + 7976))
    sub_1DB70F548(v2 + 584);
  v3 = *(_QWORD **)(v2 + 64);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)v3[3];
      sub_1DB6E7C3C((uint64_t)(v3 + 9));
      free(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = *(_QWORD **)(v2 + 72);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)v5[3];
      free(v5);
      v5 = v6;
    }
    while (v6);
  }
  free(*(void **)(v2 + 8024));
  if (*(_BYTE *)(v2 + 8160))
    sub_1DB6E8A6C(v2 + 8080);
  if (*(_BYTE *)(v2 + 8548))
    sub_1DB70C920((_OWORD *)(v2 + 8164));
  free(*(void **)(v2 + 8584));
  free(*(void **)(v2 + 8592));
  free(*(void **)(v2 + 8600));
  sub_1DB6E7C3C(v2);
  free((void *)v2);
  **(_QWORD **)(a1 + 2472) = 0;
  return 0;
}

uint64_t sub_1DB6E69EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v31;

  if (!a1)
    return 0;
  if (sub_1DB6E0594((int *)a1, -1073631035, 0xFFFF, "archive_write_disk_free", a5, a6, a7, a8) == -30)
    return 4294967266;
  v16 = sub_1DB6E6AFC(a1, v9, v10, v11, v12, v13, v14, v15);
  archive_write_disk_set_group_lookup(a1, 0, 0, 0, v17, v18, v19, v20);
  archive_write_disk_set_user_lookup(a1, 0, 0, 0, v21, v22, v23, v24);
  archive_entry_free(*(void ***)(a1 + 448));
  sub_1DB6E7C3C(a1 + 464);
  sub_1DB6E7C3C(a1 + 496);
  sub_1DB6E7C3C(a1 + 64);
  sub_1DB6E7C3C(a1 + 272);
  *(_DWORD *)a1 = 0;
  sub_1DB6E781C(a1);
  free(*(void **)(a1 + 600));
  free(*(void **)(a1 + 616));
  free(*(void **)(a1 + 648));
  free(*(void **)(a1 + 680));
  if (*(_DWORD *)(a1 + 816) && deflateEnd((z_streamp)(a1 + 704)))
  {
    archive_set_error((_DWORD *)a1, -1, "Failed to clean up compressor", v25, v26, v27, v28, v29, v31);
    v16 = 4294967266;
  }
  free((void *)a1);
  return v16;
}

uint64_t sub_1DB6E6AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  void **v20;
  const char *v21;
  const char *v22;
  const char *v23;
  int v24;
  int i;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  stat v32;

  memset(&v32, 0, sizeof(v32));
  if (sub_1DB6E0594((int *)a1, -1073631035, 6, "archive_write_disk_close", a5, a6, a7, a8) != -30)
  {
    v16 = sub_1DB6E6D74(a1, v9, v10, v11, v12, v13, v14, v15);
    v17 = sub_1DB6E76F0(*(_QWORD ****)(a1 + 168));
    if (!v17)
    {
LABEL_42:
      *(_QWORD *)(a1 + 168) = 0;
      return v16;
    }
    v18 = (unsigned __int16 *)v17;
    while (1)
    {
      v19 = 0;
      v20 = (void **)v18;
      *(_QWORD *)(a1 + 440) = 0;
      v21 = (const char *)*((_QWORD *)v18 + 21);
      v22 = v21 - 2;
      do
      {
        v23 = v22;
        v24 = v21[v19++];
        ++v22;
      }
      while (v24);
      if (v19 != 1)
      {
        for (i = v21[v19 - 2]; i == 47; i = v26)
        {
          *((_BYTE *)v23 + 1) = 0;
          v21 = (const char *)*((_QWORD *)v18 + 21);
          if (v23 + 1 == v21)
          {
            v21 = v23 + 1;
            break;
          }
          v26 = *(unsigned __int8 *)v23--;
        }
      }
      if (!*((_DWORD *)v18 + 40))
      {
        v28 = -1;
        goto LABEL_35;
      }
      if (v18[33] == 0x4000)
        v27 = open(v21, 17826048);
      else
        v27 = open(v21, 16777472);
      v28 = v27;
      if (v27 == -1)
        goto LABEL_22;
      if (v18[33] != 0x4000)
        break;
LABEL_24:
      v29 = *((_DWORD *)v18 + 40);
      if ((v29 & 4) != 0)
      {
        sub_1DB6FCD68((_DWORD *)a1, v28, *((char **)v18 + 21), *((_QWORD *)v18 + 9), *((_QWORD *)v18 + 13), *((_QWORD *)v18 + 10), *((_QWORD *)v18 + 14), *((_QWORD *)v18 + 11), *((_QWORD *)v18 + 15));
        v29 = *((_DWORD *)v18 + 40);
      }
      if ((v29 & 0x20000000) != 0)
      {
        if (v28 < 0)
          lchmod(*((const char **)v18 + 21), v18[32] & 0xFFF);
        else
          fchmod(v28, v18[32] & 0xFFF);
      }
      v30 = *((_DWORD *)v18 + 40);
      if ((v30 & 0x20) != 0)
      {
        sub_1DB73C2E8((_DWORD *)a1, v28, *((const char **)v18 + 21), v18 + 4);
        v30 = *((_DWORD *)v18 + 40);
        if ((v30 & 0x40) != 0)
        {
LABEL_40:
          sub_1DB6FCE30(a1, v28, *((const char **)v18 + 21), *((_QWORD *)v18 + 17), 0);
          if ((*((_DWORD *)v18 + 40) & 0x2000) == 0)
            goto LABEL_35;
LABEL_34:
          sub_1DB6FCF04(a1, *((char **)v18 + 21), *((const void **)v18 + 19), *((_QWORD *)v18 + 18));
          goto LABEL_35;
        }
      }
      else if ((v30 & 0x40) != 0)
      {
        goto LABEL_40;
      }
      if ((v30 & 0x2000) != 0)
        goto LABEL_34;
LABEL_35:
      v18 = *(unsigned __int16 **)v18;
      sub_1DB6DF3C0((uint64_t)(v20 + 1));
      free(v20[19]);
      free(v20[21]);
      if ((v28 & 0x80000000) == 0)
        close(v28);
      free(v20);
      if (!v18)
        goto LABEL_42;
    }
    if (v27 >= 1 && (fstat(v27, &v32) || !sub_1DB6FCCE0(v32.st_mode, v18[33])))
      goto LABEL_35;
LABEL_22:
    if (lstat(*((const char **)v18 + 21), &v32) || !sub_1DB6FCCE0(v32.st_mode, v18[33]))
      goto LABEL_35;
    goto LABEL_24;
  }
  return 4294967266;
}

uint64_t sub_1DB6E6D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  off_t v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  __int16 v57;
  char *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  size_t v67;
  size_t v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  int v73;
  int v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  __int16 v82;
  __int16 v83;
  _DWORD *v84;
  int v85;
  int v86;
  uint64_t v87;
  int is_set;
  __darwin_time_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  const void *v95;
  char *v96;
  int v97;
  int v98;
  const char *v99;
  unsigned __int16 *v100;
  int v101;
  int v102;
  std::error_code *v103;
  const std::__fs::filesystem::path *v104;
  int v105;
  int *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  char *to[3];
  stat __buf;
  unsigned int v141[2];
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  if (sub_1DB6E0594((int *)a1, -1073631035, 6, "archive_write_finish_entry", a5, a6, a7, a8) == -30)
    return 4294967266;
  if ((*(_BYTE *)(a1 + 4) & 2) != 0)
    return 0;
  archive_clear_error(a1);
  v15 = *(_DWORD *)(a1 + 532);
  if (v15 < 0 || (v16 = *(_QWORD *)(a1 + 560), v16 < 0) || *(_QWORD *)(a1 + 544) == v16)
  {
LABEL_7:
    if ((*(_BYTE *)(a1 + 523) & 1) == 0)
    {
LABEL_25:
      v9 = 0;
      goto LABEL_26;
    }
    v17 = *(char **)(a1 + 456);
    memset(&__buf, 0, sizeof(__buf));
    memset(to, 0, sizeof(to));
    v18 = strrchr(v17, 47);
    if (v18)
      v19 = v18 + 1;
    else
      v19 = v17;
    if (*v19 == 46 && v19[1] == 95)
    {
      sub_1DB6E323C((uint64_t *)to, v17, v19 - v17);
      sub_1DB72CE50((uint64_t *)to, v19 + 2);
      if (lstat(to[0], &__buf) != -1)
      {
        v20 = __buf.st_mode & 0xF000;
        if (v20 == 0x8000 || v20 == 0x4000)
        {
          v21 = open(v17, 0x1000000);
          v22 = v21;
          sub_1DB6DD880(v21);
          if (v22 == -1)
          {
            v113 = __error();
            archive_set_error((_DWORD *)a1, *v113, "Failed to open a restoring file", v114, v115, v116, v117, v118, v138);
          }
          else
          {
            if (read(v22, v141, 8uLL) != -1)
            {
              close(v22);
              if (bswap32(v141[0]) == 333319 && bswap32(v141[1]) == 0x20000)
              {
                v23 = sub_1DB6FD298((_DWORD *)a1, v17, to[0], __buf.st_flags & 0x20);
                if (!v23)
                {
                  unlink(v17);
                  sub_1DB6E7C3C((uint64_t)to);
                  v9 = 0;
                  goto LABEL_151;
                }
                v24 = v23;
                sub_1DB6E7C3C((uint64_t)to);
                v9 = v24 & (v24 >> 31);
                if (v24 == 1)
                {
LABEL_151:
                  v102 = *(_DWORD *)(a1 + 532);
                  if ((v102 & 0x80000000) == 0)
                  {
                    close(v102);
                    *(_DWORD *)(a1 + 532) = -1;
                    v104 = *(const std::__fs::filesystem::path **)(a1 + 488);
                    if (v104)
                    {
                      rename(v104, *(const std::__fs::filesystem::path **)(a1 + 456), v103);
                      if (v105 == -1)
                      {
                        v106 = __error();
                        archive_set_error((_DWORD *)a1, *v106, "Failed to rename temporary file", v107, v108, v109, v110, v111, v138);
                        unlink(*(const char **)(a1 + 488));
                        v9 = 4294967271;
                      }
                      *(_QWORD *)(a1 + 488) = 0;
                    }
                  }
                  archive_entry_free(*(void ***)(a1 + 448));
                  *(_QWORD *)(a1 + 448) = 0;
                  *(_DWORD *)(a1 + 4) = 2;
                  return v9;
                }
LABEL_26:
                v25 = *(_DWORD *)(a1 + 520);
                if ((v25 & 0x14000001) != 0)
                {
                  v26 = archive_entry_uname(*(uint64_t **)(a1 + 448));
                  v27 = archive_entry_uid(*(_QWORD *)(a1 + 448));
                  *(_QWORD *)(a1 + 576) = archive_write_disk_uid(a1, v26, v27, v28, v29, v30, v31, v32);
                  v25 = *(_DWORD *)(a1 + 520);
                  if ((v25 & 0x14000001) != 0)
                  {
                    v33 = archive_entry_gname(*(uint64_t **)(a1 + 448));
                    v34 = archive_entry_gid(*(_QWORD *)(a1 + 448));
                    *(_QWORD *)(a1 + 584) = archive_write_disk_gid(a1, v33, v34, v35, v36, v37, v38, v39);
                    v25 = *(_DWORD *)(a1 + 520);
                  }
                }
                if ((v25 & 1) == 0)
                {
LABEL_51:
                  if (*(_QWORD *)(a1 + 184) && (v25 & 0x80) != 0)
                  {
                    v56 = sub_1DB6FDC88(a1);
                    if (v56 >= (int)v9)
                      v9 = v9;
                    else
                      v9 = v56;
                    v25 = *(_DWORD *)(a1 + 520);
                  }
                  if ((v25 & 0x34000000) == 0)
                  {
LABEL_100:
                    if (!*(_QWORD *)(a1 + 184) && (v25 & 0x80) != 0)
                    {
                      v81 = sub_1DB6FDC88(a1);
                      if (v81 >= (int)v9)
                        v9 = v9;
                      else
                        v9 = v81;
                      v25 = *(_DWORD *)(a1 + 520);
                    }
                    if ((v25 & 0x40) == 0)
                    {
                      if ((v25 & 4) == 0)
                        goto LABEL_108;
                      goto LABEL_123;
                    }
                    v82 = archive_entry_mode(*(_QWORD *)(a1 + 448));
                    if ((*(_BYTE *)(a1 + 520) & 0x40) != 0)
                    {
                      v83 = v82;
                      *(_QWORD *)&__buf.st_dev = 0;
                      to[0] = 0;
                      archive_entry_fflags(*(_QWORD *)(a1 + 448), &__buf, to);
                      if ((*(_QWORD *)&__buf.st_dev & 0x60006) != 0)
                      {
                        v84 = *(_DWORD **)(a1 + 176);
                        if (!v84)
                        {
                          v84 = sub_1DB6FD8E4(a1, *(const char **)(a1 + 456));
                          *(_QWORD *)(a1 + 176) = v84;
                          if (!v84)
                          {
                            v86 = -30;
LABEL_119:
                            if (v86 >= (int)v9)
                              v9 = v9;
                            else
                              v9 = v86;
                            v25 = *(_DWORD *)(a1 + 520);
                            if ((v25 & 4) == 0)
                            {
LABEL_108:
                              if ((v25 & 0x2000) == 0)
                                goto LABEL_109;
                              goto LABEL_142;
                            }
LABEL_123:
                            v87 = *(_QWORD *)(a1 + 216);
                            if (archive_entry_atime_is_set(*(_QWORD *)(a1 + 448))
                              || archive_entry_birthtime_is_set(*(_QWORD *)(a1 + 448))
                              || (is_set = archive_entry_mtime_is_set(*(_QWORD *)(a1 + 448))) != 0)
                            {
                              if (archive_entry_atime_is_set(*(_QWORD *)(a1 + 448)))
                              {
                                v89 = archive_entry_atime(*(_QWORD *)(a1 + 448));
                                v90 = archive_entry_atime_nsec(*(_QWORD *)(a1 + 448));
                              }
                              else
                              {
                                v90 = 0;
                                v89 = v87;
                              }
                              if (archive_entry_birthtime_is_set(*(_QWORD *)(a1 + 448)))
                              {
                                v91 = archive_entry_birthtime(*(_QWORD *)(a1 + 448));
                                v92 = archive_entry_birthtime_nsec(*(_QWORD *)(a1 + 448));
                              }
                              else
                              {
                                v92 = 0;
                                v91 = v87;
                              }
                              if (archive_entry_mtime_is_set(*(_QWORD *)(a1 + 448)))
                              {
                                v87 = archive_entry_mtime(*(_QWORD *)(a1 + 448));
                                v93 = archive_entry_mtime_nsec(*(_QWORD *)(a1 + 448));
                              }
                              else
                              {
                                v93 = 0;
                              }
                              if (archive_entry_ctime_is_set(*(_QWORD *)(a1 + 448)))
                              {
                                archive_entry_ctime(*(_QWORD *)(a1 + 448));
                                archive_entry_ctime_nsec(*(_QWORD *)(a1 + 448));
                              }
                              is_set = sub_1DB6FCD68((_DWORD *)a1, *(_DWORD *)(a1 + 532), *(char **)(a1 + 456), v89, v90, v91, v92, v87, v93);
                            }
                            if (is_set >= (int)v9)
                              v9 = v9;
                            else
                              v9 = is_set;
                            v25 = *(_DWORD *)(a1 + 520);
                            if ((v25 & 0x2000) == 0)
                            {
LABEL_109:
                              if ((v25 & 0x20) == 0)
                                goto LABEL_151;
LABEL_148:
                              v98 = *(_DWORD *)(a1 + 532);
                              v99 = (const char *)archive_entry_pathname(*(uint64_t **)(a1 + 448));
                              v100 = (unsigned __int16 *)archive_entry_acl(*(_QWORD *)(a1 + 448));
                              archive_entry_mode(*(_QWORD *)(a1 + 448));
                              v101 = sub_1DB73C2E8((_DWORD *)a1, v98, v99, v100);
                              if (v101 >= (int)v9)
                                v9 = v9;
                              else
                                v9 = v101;
                              goto LABEL_151;
                            }
LABEL_142:
                            *(_QWORD *)&__buf.st_dev = 0;
                            v94 = archive_entry_mac_metadata(*(_QWORD *)(a1 + 448), &__buf);
                            if (v94 && *(_QWORD *)&__buf.st_dev)
                            {
                              v95 = (const void *)v94;
                              v96 = (char *)archive_entry_pathname(*(uint64_t **)(a1 + 448));
                              v97 = sub_1DB6FCF04(a1, v96, v95, *(size_t *)&__buf.st_dev);
                              if (v97 >= (int)v9)
                                v9 = v9;
                              else
                                v9 = v97;
                            }
                            if ((*(_DWORD *)(a1 + 520) & 0x20) == 0)
                              goto LABEL_151;
                            goto LABEL_148;
                          }
                        }
                        *((_WORD *)v84 + 33) = archive_entry_filetype(*(_QWORD *)(a1 + 448));
                        v85 = v84[40];
                        v84[40] = v85 | 0x40;
                        *((_QWORD *)v84 + 17) = *(_QWORD *)&__buf.st_dev;
                        if ((v85 & 0x34000000) == 0)
                          *((_WORD *)v84 + 32) = v83;
                      }
                      else
                      {
                        v86 = sub_1DB6FCE30(a1, *(_DWORD *)(a1 + 532), *(const char **)(a1 + 456), *(uint64_t *)&__buf.st_dev, (uint64_t)to[0]);
                        if (v86)
                          goto LABEL_119;
                      }
                    }
                    v86 = 0;
                    goto LABEL_119;
                  }
                  v57 = *(_WORD *)(a1 + 572);
                  v58 = (char *)(v57 & 0xFFF);
                  if ((v25 & 0x2000000) != 0)
                  {
                    v59 = sub_1DB6FD0E0(a1);
                    if (v59)
                      goto LABEL_96;
                    v65 = *(_QWORD *)(a1 + 440);
                    if (*(_QWORD *)(a1 + 584) != *(_DWORD *)(v65 + 20)
                      && (v58 = (char *)(v57 & 0xBFF), (*(_BYTE *)(a1 + 528) & 1) != 0))
                    {
                      archive_set_error((_DWORD *)a1, -1, "Can't restore SGID bit", v60, v61, v62, v63, v64, v138);
                      v65 = *(_QWORD *)(a1 + 440);
                      v59 = -20;
                    }
                    else
                    {
                      v59 = 0;
                    }
                    v70 = *(unsigned int *)(v65 + 16);
                    v71 = *(_DWORD *)(a1 + 520);
                    if (*(_QWORD *)(a1 + 576) != v70 && (v71 & 0x10000000) != 0)
                    {
                      v58 = (char *)((unsigned __int16)v58 & 0x7FF);
                      if ((*(_BYTE *)(a1 + 528) & 1) != 0)
                      {
                        archive_set_error((_DWORD *)a1, -1, "Can't restore SUID bit", v60, v61, v62, v63, v64, v138);
                        v71 = *(_DWORD *)(a1 + 520);
                        v59 = -20;
                      }
                    }
                    v69 = v71 & 0xF5FFFFFF;
                  }
                  else
                  {
                    if ((v25 & 0x8000000) == 0)
                    {
                      v59 = 0;
                      goto LABEL_85;
                    }
                    if (*(_QWORD *)(a1 + 184) != *(_QWORD *)(a1 + 576)
                      && (v58 = (char *)(*(_WORD *)(a1 + 572) & 0x7FF), (*(_BYTE *)(a1 + 528) & 1) != 0))
                    {
                      archive_set_error((_DWORD *)a1, -1, "Can't make file SUID", v10, v11, v12, v13, v14, v138);
                      v25 = *(_DWORD *)(a1 + 520);
                      v59 = -20;
                    }
                    else
                    {
                      v59 = 0;
                    }
                    v69 = v25 & 0xF7FFFFFF;
                  }
                  *(_DWORD *)(a1 + 520) = v69;
                  v57 = *(_WORD *)(a1 + 572);
LABEL_85:
                  if ((v57 & 0xF000) != 0x4000)
                  {
                    if ((v57 & 0xF000) != 0xA000)
                    {
                      v73 = *(_DWORD *)(a1 + 532);
                      if (v73 < 0)
                        v74 = chmod(*(const char **)(a1 + 456), (mode_t)v58);
                      else
                        v74 = fchmod(v73, (mode_t)v58);
                      if (!v74)
                        goto LABEL_96;
                      goto LABEL_95;
                    }
                    if (lchmod(*(const char **)(a1 + 456), (mode_t)v58))
                    {
                      v72 = *__error() - 45;
                      if (v72 > 0x39 || ((1 << v72) & 0x200000200000001) == 0)
                      {
LABEL_95:
                        v75 = __error();
                        archive_set_error((_DWORD *)a1, *v75, "Can't set permissions to 0%o", v76, v77, v78, v79, v80, v58);
                        v59 = -20;
                      }
                    }
                  }
LABEL_96:
                  if (v59 >= (int)v9)
                    v9 = v9;
                  else
                    v9 = v59;
                  v25 = *(_DWORD *)(a1 + 520);
                  goto LABEL_100;
                }
                v40 = *(_QWORD *)(a1 + 184);
                if (v40 && v40 != *(_QWORD *)(a1 + 576))
                {
                  v50 = *__error();
                  archive_set_error((_DWORD *)a1, v50, "Can't set UID=%jd", v51, v52, v53, v54, v55, *(char **)(a1 + 576));
                }
                else
                {
                  v41 = *(_DWORD *)(a1 + 532);
                  if ((v41 & 0x80000000) == 0 && !fchown(v41, *(_DWORD *)(a1 + 576), *(_DWORD *)(a1 + 584))
                    || !lchown(*(const char **)(a1 + 456), *(_DWORD *)(a1 + 576), *(_DWORD *)(a1 + 584)))
                  {
                    v49 = 0;
                    *(_DWORD *)(a1 + 520) &= 0xF5FFFFFE;
LABEL_47:
                    if (v49 >= (int)v9)
                      v9 = v9;
                    else
                      v9 = v49;
                    v25 = *(_DWORD *)(a1 + 520);
                    goto LABEL_51;
                  }
                  v42 = *__error();
                  archive_set_error((_DWORD *)a1, v42, "Can't set user=%jd/group=%jd for %s", v43, v44, v45, v46, v47, *(char **)(a1 + 576));
                }
                v49 = -20;
                goto LABEL_47;
              }
              goto LABEL_24;
            }
            v125 = __error();
            archive_set_error((_DWORD *)a1, *v125, "Failed to read a restoring file", v126, v127, v128, v129, v130, v138);
            close(v22);
          }
          sub_1DB6E7C3C((uint64_t)to);
          v9 = 4294967276;
          goto LABEL_26;
        }
      }
    }
LABEL_24:
    sub_1DB6E7C3C((uint64_t)to);
    goto LABEL_25;
  }
  if ((*(_BYTE *)(a1 + 521) & 0x80) != 0)
  {
    if (*(_QWORD *)(a1 + 696))
      bzero(&__buf, 0x400uLL);
    while (1)
    {
      v66 = *(_QWORD *)(a1 + 696);
      if (!v66)
        break;
      if (v66 >= 0x400)
        v67 = 1024;
      else
        v67 = *(_QWORD *)(a1 + 696);
      v68 = sub_1DB6FDAF0(a1, (char *)&__buf, v67, v10, v11, v12, v13, v14);
      if ((v68 & 0x8000000000000000) != 0)
        return v68;
    }
    goto LABEL_7;
  }
  if (ftruncate(v15, v16) == -1 && !*(_QWORD *)(a1 + 560))
  {
    v119 = __error();
    archive_set_error((_DWORD *)a1, *v119, "File size could not be restored", v120, v121, v122, v123, v124, v138);
    return 4294967271;
  }
  *(_QWORD *)(a1 + 440) = 0;
  v9 = sub_1DB6FD0E0(a1);
  if (!(_DWORD)v9)
  {
    v48 = *(_QWORD *)(a1 + 560);
    if (*(_QWORD *)(a1 + 392) >= v48)
      goto LABEL_7;
    LOBYTE(__buf.st_dev) = 0;
    if (lseek(*(_DWORD *)(a1 + 532), v48 - 1, 0) < 0)
    {
      v131 = *__error();
      v137 = "Seek failed";
    }
    else
    {
      if ((write(*(_DWORD *)(a1 + 532), &__buf, 1uLL) & 0x8000000000000000) == 0)
      {
        *(_QWORD *)(a1 + 440) = 0;
        goto LABEL_7;
      }
      v131 = *__error();
      v137 = "Write to restore size failed";
    }
    archive_set_error((_DWORD *)a1, v131, v137, v132, v133, v134, v135, v136, v138);
    return 4294967266;
  }
  return v9;
}

uint64_t sub_1DB6E76F0(_QWORD ***a1)
{
  uint64_t v1;
  _QWORD **v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  _BOOL4 v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = (uint64_t)a1;
  if (a1)
  {
    v2 = *a1;
    if (*a1)
    {
      v3 = *v2;
      v4 = a1;
      if (*v2)
      {
        v4 = a1;
        while (1)
        {
          v5 = (_QWORD **)*v3;
          if (!v5)
            break;
          v3 = *v5;
          v4 = (_QWORD *)*v4;
          if (!v3)
            goto LABEL_9;
        }
        v4 = (_QWORD *)*v4;
LABEL_9:
        v2 = (_QWORD **)*v4;
      }
      *v4 = 0;
      v1 = sub_1DB6E76F0(a1);
      v6 = sub_1DB6E76F0(v2);
      if (strcmp(*(const char **)(v1 + 168), *(const char **)(v6 + 168)) < 1)
      {
        v8 = *(_QWORD *)v6;
        v7 = v1;
        v1 = v6;
      }
      else
      {
        v7 = *(_QWORD *)v1;
        v8 = v6;
      }
      v9 = v7 != 0;
      v10 = v8 != 0;
      if (v7 && v8)
      {
        v11 = (_QWORD *)v1;
        do
        {
          if (strcmp(*(const char **)(v7 + 168), *(const char **)(v8 + 168)) < 1)
          {
            *v11 = v8;
            v11 = (_QWORD *)v8;
            v8 = *(_QWORD *)v8;
          }
          else
          {
            *v11 = v7;
            v11 = (_QWORD *)v7;
            v7 = *(_QWORD *)v7;
          }
          v9 = v7 != 0;
          v10 = v8 != 0;
        }
        while (v7 && v8);
      }
      else
      {
        v11 = (_QWORD *)v1;
      }
      if (v9 || v10)
      {
        if (v10)
          v12 = v8;
        else
          v12 = v7;
        *v11 = v12;
      }
    }
  }
  return v1;
}

uint64_t sub_1DB6E781C(uint64_t a1)
{
  sub_1DB6E7834(a1);
  return 0;
}

void sub_1DB6E7834(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)(a1 + 104);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_1DB6E7ABC((uint64_t)v2);
      v2 = v3;
    }
    while (v3);
  }
  *(_QWORD *)(a1 + 104) = 0;
  free(*(void **)(a1 + 88));
  *(_QWORD *)(a1 + 88) = 0;
}

uint64_t sub_1DB6E7878(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  void *i;
  _QWORD *v21;
  char *v23[4];

  v23[3] = *(char **)MEMORY[0x1E0C80C00];
  v2 = **(_QWORD **)(a1 + 2472);
  v3 = *(_DWORD *)(v2 + 452);
  if (v3 == 2)
  {
    sub_1DB733920((CC_MD5_CTX *)(v2 + 456), (unsigned __int8 *)v23 + 4);
  }
  else if (v3 == 1)
  {
    sub_1DB73398C((CC_SHA1_CTX *)(v2 + 548), (unsigned __int8 *)v23 + 4);
  }
  v4 = *(_DWORD *)(v2 + 644);
  if (v4 == 2)
  {
    sub_1DB733920((CC_MD5_CTX *)(v2 + 648), (unsigned __int8 *)v23 + 4);
  }
  else if (v4 == 1)
  {
    sub_1DB73398C((CC_SHA1_CTX *)(v2 + 740), (unsigned __int8 *)v23 + 4);
  }
  v5 = **(_QWORD **)(a1 + 2472);
  if (*(_DWORD *)(v5 + 216) && inflateEnd((z_streamp)(v5 + 104)))
  {
    archive_set_error((_DWORD *)a1, -1, "Failed to clean up zlib decompressor", v6, v7, v8, v9, v10, v23[0]);
    v11 = 4294967266;
  }
  else
  {
    v11 = 0;
  }
  if (*(_DWORD *)(v5 + 304) && BZ2_bzDecompressEnd((bz_stream *)(v5 + 224)))
  {
    archive_set_error((_DWORD *)a1, -1, "Failed to clean up bzip2 decompressor", v12, v13, v14, v15, v16, v23[0]);
    v11 = 4294967266;
  }
  if (*(_DWORD *)(v5 + 448))
    lzma_end();
  v17 = *(_QWORD **)(v2 + 880);
  if (v17)
  {
    do
    {
      v18 = (_QWORD *)*v17;
      free(v17);
      v17 = v18;
    }
    while (v18);
  }
  if (*(int *)(v2 + 868) >= 1)
  {
    v19 = 0;
    do
      sub_1DB725408(*(_QWORD **)(*(_QWORD *)(v2 + 856) + 8 * v19++));
    while (v19 < *(int *)(v2 + 868));
  }
  for (i = *(void **)(v2 + 856); ; i = v21)
  {
    free(i);
    v21 = *(_QWORD **)(v2 + 48);
    if (!v21)
      break;
    *(_QWORD *)(v2 + 48) = *v21;
    sub_1DB6E7C3C((uint64_t)(v21 + 1));
  }
  free(*(void **)(v2 + 32));
  free((void *)v2);
  **(_QWORD **)(a1 + 2472) = 0;
  return v11;
}

uint64_t sub_1DB6E7A58(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;

  v2 = *(uint64_t **)(a1 + 2472);
  v3 = *v2;
  free(*(void **)(*v2 + 80));
  free(*(void **)(v3 + 88));
  free(*(void **)(v3 + 21280));
  sub_1DB6E7B1C(v3);
  v4 = *(void **)(v3 + 19264);
  if (v4)
    free(v4);
  free((void *)v3);
  **(_QWORD **)(a1 + 2472) = 0;
  return 0;
}

void sub_1DB6E7ABC(uint64_t a1)
{
  free(*(void **)(a1 + 8));
  free(*(void **)(a1 + 16));
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  free(*(void **)(a1 + 56));
  *(_QWORD *)(a1 + 56) = 0;
  if (*(_QWORD *)(a1 + 40) != -1)
    MEMORY[0x1DF0B2F28]();
  if (*(_QWORD *)(a1 + 48) != -1)
    MEMORY[0x1DF0B2F28]();
  free((void *)a1);
}

double sub_1DB6E7B1C(uint64_t a1)
{
  unsigned __int16 *v2;
  unsigned __int16 v3;
  uint64_t v4;
  void *v5;
  double result;

  v2 = (unsigned __int16 *)(a1 + 19256);
  while (1)
  {
    v3 = v2[3];
    if (!v3)
      break;
    v4 = *v2;
    v5 = *(void **)(*(_QWORD *)(a1 + 19264) + 8 * v4);
    *v2 = v2[2] & (v4 + 1);
    v2[3] = v3 - 1;
    free(v5);
  }
  v2[3] = 0;
  *(_DWORD *)v2 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 19272) = 0u;
  return result;
}

uint64_t sub_1DB6E7B88(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = **(_QWORD ***)(a1 + 2472);
  while (1)
  {
    v3 = (_QWORD *)v2[41];
    if (!v3)
      break;
    v2[41] = *v3;
    free(v3);
  }
  v2[42] = 0;
  sub_1DB6E7C3C((uint64_t)v2);
  sub_1DB6E7C3C((uint64_t)(v2 + 3));
  sub_1DB6E7C3C((uint64_t)(v2 + 6));
  sub_1DB6E7C3C((uint64_t)(v2 + 9));
  sub_1DB6E7C3C((uint64_t)(v2 + 12));
  sub_1DB6E7C3C((uint64_t)(v2 + 15));
  sub_1DB6E7C3C((uint64_t)(v2 + 30));
  sub_1DB6E7C3C((uint64_t)(v2 + 27));
  sub_1DB6E7C3C((uint64_t)(v2 + 24));
  sub_1DB6E7C3C((uint64_t)(v2 + 21));
  sub_1DB6E7C3C((uint64_t)(v2 + 18));
  sub_1DB6E7C3C((uint64_t)(v2 + 47));
  free(v2);
  **(_QWORD **)(a1 + 2472) = 0;
  return 0;
}

void sub_1DB6E7C3C(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  free(*(void **)a1);
  *(_QWORD *)a1 = 0;
}

uint64_t sub_1DB6E7C68(uint64_t a1)
{
  void **v2;

  v2 = **(void ****)(a1 + 2472);
  sub_1DB6E7CE0(a1);
  free(v2[9]);
  free(v2[10]);
  free(v2[32]);
  free(v2[28]);
  free(v2[106]);
  sub_1DB6E8390((uint64_t)(v2 + 116));
  free(v2);
  **(_QWORD **)(a1 + 2472) = 0;
  return 0;
}

double sub_1DB6E7CE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v1 = **(_QWORD **)(a1 + 2472);
  v2 = v1 + 280;
  free(*(void **)v2);
  free(*(void **)(v1 + 320));
  free(*(void **)(v1 + 360));
  free(*(void **)(v1 + 400));
  free(*(void **)(v1 + 312));
  free(*(void **)(v1 + 352));
  free(*(void **)(v1 + 392));
  free(*(void **)(v1 + 432));
  *(_QWORD *)(v1 + 312) = 0;
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v1 + 320) = 0u;
  *(_OWORD *)(v1 + 336) = 0u;
  *(_QWORD *)(v1 + 352) = 0;
  *(_OWORD *)(v1 + 360) = 0u;
  *(_OWORD *)(v1 + 376) = 0u;
  *(_QWORD *)(v1 + 392) = 0;
  *(_OWORD *)(v1 + 400) = 0u;
  *(_OWORD *)(v1 + 416) = 0u;
  *(_QWORD *)(v1 + 432) = 0;
  return result;
}

uint64_t sub_1DB6E7D74(uint64_t a1)
{
  void **v2;
  void **v3;

  v2 = **(void ****)(a1 + 2472);
  v3 = (void **)v2[52];
  if (v3)
  {
    free(v3[2]);
    sub_1DB741D10((void **)v2[52] + 7);
    sub_1DB741D10((void **)v2[52] + 23);
    free(v2[52]);
    v2[52] = 0;
  }
  sub_1DB6E7C3C((uint64_t)(v2 + 28));
  sub_1DB6E7C3C((uint64_t)(v2 + 31));
  sub_1DB6E7C3C((uint64_t)(v2 + 18));
  sub_1DB6E7C3C((uint64_t)(v2 + 21));
  sub_1DB6E7C3C((uint64_t)(v2 + 34));
  free(v2);
  **(_QWORD **)(a1 + 2472) = 0;
  return 0;
}

uint64_t sub_1DB6E7E08(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  void **v4;
  void **v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v15;

  v2 = *(uint64_t **)(a1 + 2472);
  v3 = *v2;
  v4 = *(void ***)(*v2 + 104);
  if (v4)
  {
    do
    {
      v5 = (void **)*v4;
      sub_1DB6E7C3C((uint64_t)(v4 + 21));
      sub_1DB6E7C3C((uint64_t)(v4 + 27));
      free(v4[24]);
      v6 = v4[34];
      if (v6)
      {
        do
        {
          v7 = (_QWORD *)v6[2];
          free(v6);
          v6 = v7;
        }
        while (v7);
      }
      free(v4);
      v4 = v5;
    }
    while (v5);
  }
  free(*(void **)(v3 + 56));
  sub_1DB6E7C3C(v3 + 16);
  sub_1DB6E7C3C(v3 + 80);
  free(*(void **)(v3 + 112));
  free(*(void **)(v3 + 256));
  free(*(void **)(v3 + 312));
  if (*(_DWORD *)(v3 + 472) && inflateEnd((z_streamp)(v3 + 360)))
  {
    archive_set_error((_DWORD *)a1, -1, "Failed to clean up zlib decompressor", v8, v9, v10, v11, v12, v15);
    v13 = 4294967266;
  }
  else
  {
    v13 = 0;
  }
  free(*(void **)(v3 + 496));
  free(*(void **)(v3 + 512));
  free((void *)v3);
  **(_QWORD **)(a1 + 2472) = 0;
  return v13;
}

uint64_t sub_1DB6E7F10(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = **(void ****)(a1 + 2472);
  v3 = (void **)v2[2];
  if (v3)
  {
    do
    {
      v4 = *v3;
      free(v3[4]);
      free(v2[2]);
      v2[2] = v4;
      v3 = (void **)v4;
    }
    while (v4);
  }
  free(v2);
  **(_QWORD **)(a1 + 2472) = 0;
  return 0;
}

uint64_t sub_1DB6E7F78(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(uint64_t **)(a1 + 2472);
  v3 = *v2;
  v4 = *(void **)(*v2 + 96);
  if (v4)
  {
    if (*(_WORD *)(v3 + 80))
    {
      v5 = 0;
      v6 = 56;
      do
      {
        free(*(void **)(*(_QWORD *)(v3 + 96) + v6));
        ++v5;
        v6 += 96;
      }
      while (v5 < *(unsigned __int16 *)(v3 + 80));
      v4 = *(void **)(v3 + 96);
    }
    free(v4);
  }
  v7 = *(void **)(v3 + 104);
  if (v7)
  {
    if (*(_WORD *)(v3 + 82))
    {
      v8 = 0;
      v9 = 24;
      do
      {
        sub_1DB6E7C3C(*(_QWORD *)(v3 + 104) + v9);
        ++v8;
        v9 += 48;
      }
      while (v8 < *(unsigned __int16 *)(v3 + 82));
      v7 = *(void **)(v3 + 104);
    }
    free(v7);
  }
  if (*(_BYTE *)(v3 + 384))
    inflateEnd((z_streamp)(v3 + 272));
  v10 = *(_QWORD *)(v3 + 440);
  if (v10)
  {
    free(*(void **)(v10 + 16));
    free(*(void **)(*(_QWORD *)(v3 + 440) + 96));
    v11 = *(_QWORD *)(v3 + 440);
    free(*(void **)(v11 + 192));
    free(*(void **)(v11 + 216));
    v12 = *(_QWORD *)(v3 + 440);
    free(*(void **)(v12 + 504));
    free(*(void **)(v12 + 528));
    v13 = *(_QWORD *)(v3 + 440);
    free(*(void **)(v13 + 400));
    free(*(void **)(v13 + 424));
    v14 = *(_QWORD *)(v3 + 440);
    free(*(void **)(v14 + 296));
    free(*(void **)(v14 + 320));
    free(*(void **)(v3 + 440));
    *(_QWORD *)(v3 + 440) = 0;
  }
  sub_1DB6E7C3C(v3 + 120);
  free(*(void **)(v3 + 160));
  free((void *)v3);
  **(_QWORD **)(a1 + 2472) = 0;
  return 0;
}

uint64_t sub_1DB6E80D0(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 2472);
  v3 = *(void **)v2;
  free(*(void **)(*(_QWORD *)v2 + 32));
  free(v3);
  **(_QWORD **)(a1 + 2472) = 0;
  return 0;
}

uint64_t sub_1DB6E8110(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v14;

  v2 = **(_QWORD **)(a1 + 2472);
  sub_1DB6E8220(v2);
  free(*(void **)(v2 + 160));
  free(*(void **)(v2 + 176));
  if (*(_DWORD *)(v2 + 448))
    lzma_end();
  if (*(_DWORD *)(v2 + 536))
  {
    if (BZ2_bzDecompressEnd((bz_stream *)(v2 + 456)))
      archive_set_error((_DWORD *)a1, -1, "Failed to clean up bzip2 decompressor", v3, v4, v5, v6, v7, v14);
    *(_DWORD *)(v2 + 536) = 0;
  }
  if (*(_DWORD *)(v2 + 656))
  {
    if (inflateEnd((z_streamp)(v2 + 544)))
      archive_set_error((_DWORD *)a1, -1, "Failed to clean up zlib decompressor", v8, v9, v10, v11, v12, v14);
    *(_DWORD *)(v2 + 656) = 0;
  }
  if (*(_DWORD *)(v2 + 19968))
  {
    sub_1DB6E8390(v2 + 664);
    *(_DWORD *)(v2 + 19968) = 0;
  }
  free(*(void **)(v2 + 216));
  free(*(void **)(v2 + 20016));
  free(*(void **)(v2 + 20024));
  free(*(void **)(v2 + 20032));
  free(*(void **)(v2 + 20088));
  free((void *)v2);
  **(_QWORD **)(a1 + 2472) = 0;
  return 0;
}

void sub_1DB6E8220(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  void **v8;
  uint64_t v9;
  unsigned int v10;
  void **v12;

  free(*(void **)(a1 + 16));
  free(*(void **)(a1 + 40));
  free(*(void **)(a1 + 24));
  free(*(void **)(a1 + 32));
  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 48))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        v5 = *(_QWORD *)(a1 + 56);
        v6 = (_QWORD *)(v5 + 104 * v3);
        v8 = (void **)(v6 + 1);
        v7 = (void *)v6[1];
        if (v7)
        {
          if (*v6)
          {
            v9 = 0;
            v10 = 1;
            do
            {
              free(*((void **)*v8 + 5 * v9 + 4));
              v9 = v10;
            }
            while (*v6 > (unint64_t)v10++);
            v7 = *v8;
          }
          free(v7);
        }
        v12 = (void **)(v5 + 104 * v3);
        free(v12[3]);
        free(v12[5]);
        free(v12[8]);
        v3 = ++v4;
      }
      while (*(_QWORD *)(a1 + 48) > (unint64_t)v4);
      v2 = *(void **)(a1 + 56);
    }
    free(v2);
  }
  free(*(void **)(a1 + 80));
  free(*(void **)(a1 + 88));
  free(*(void **)(a1 + 96));
}

uint64_t sub_1DB6E8338(uint64_t a1)
{
  uint64_t v2;

  v2 = **(_QWORD **)(a1 + 2472);
  if (*(_QWORD *)(v2 + 24))
    free(*(void **)(v2 + 32));
  sub_1DB6E7C3C(v2 + 48);
  free((void *)v2);
  **(_QWORD **)(a1 + 2472) = 0;
  return 0;
}

_QWORD *sub_1DB6E8388(_QWORD *result, uint64_t a2)
{
  *result = 0;
  result[1] = a2;
  return result;
}

void sub_1DB6E8390(uint64_t a1)
{
  free(*(void **)(a1 + 64));
  *(_DWORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 64) = 0;
}

uint64_t archive_entry_set_pathname(uint64_t a1, char *a2)
{
  return sub_1DB6DC068(a1 + 496, a2);
}

uint64_t archive_write_disk_set_options(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 528) = a2;
  return 0;
}

uint64_t archive_write_finish_entry(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 24))();
}

uint64_t archive_write_close(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 8))();
}

uint64_t archive_read_close(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 8))();
}

uint64_t archive_write_header(uint64_t a1)
{
  ++*(_DWORD *)(a1 + 48);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t archive_read_data_block(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 64))();
}

uint64_t archive_write_data_block(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v9)(uint64_t);
  char *v11;

  v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40);
  if (v9)
    return v9(a1);
  archive_set_error((_DWORD *)a1, -1, "archive_write_data_block not supported", a4, 0, a6, a7, a8, v11);
  *(_DWORD *)(a1 + 4) = 0x8000;
  return -30;
}

uint64_t archive_read_open_memory(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  return archive_read_open_memory2(a1, a2, a3, a3);
}

_QWORD *archive_write_disk_new()
{
  _QWORD *v0;
  _QWORD *v1;
  mode_t v2;

  v0 = malloc_type_calloc(1uLL, 0x338uLL, 0x10F004021A8D685uLL);
  v1 = v0;
  if (v0)
  {
    *v0 = 0x2C001B0C5;
    if ((byte_1ECFF6D48 & 1) == 0)
    {
      qword_1ECFF6D30 = (uint64_t)sub_1DB6FCC34;
      qword_1ECFF6CE0 = (uint64_t)sub_1DB6E6AFC;
      *(_QWORD *)algn_1ECFF6CE8 = sub_1DB6E69EC;
      qword_1ECFF6CF0 = (uint64_t)sub_1DB6DC574;
      unk_1ECFF6CF8 = sub_1DB6E6D74;
      qword_1ECFF6D00 = (uint64_t)sub_1DB6FCC50;
      unk_1ECFF6D08 = sub_1DB6DBB60;
      byte_1ECFF6D48 = 1;
    }
    v0[1] = &qword_1ECFF6CE0;
    v0[27] = time(0);
    v2 = umask(0);
    *((_WORD *)v1 + 80) = v2;
    umask(v2);
    v1[23] = geteuid();
    if (sub_1DB6E3190((void **)v1 + 34, 0x200uLL))
    {
      *((_DWORD *)v1 + 205) = 5;
    }
    else
    {
      free(v1);
      return 0;
    }
  }
  return v1;
}

void archive_read_support_filter_by_code(int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_filter_by_code", a5, a6, a7, a8);
  switch(a2)
  {
    case 0:
      archive_read_support_filter_none(a1, v10, v11, v12, v13, v14, v15, v16);
      break;
    case 1:
      archive_read_support_filter_gzip(a1);
      break;
    case 2:
      archive_read_support_filter_bzip2(a1);
      break;
    case 3:
      archive_read_support_filter_compress(a1);
      break;
    case 5:
      archive_read_support_filter_lzma(a1);
      break;
    case 6:
      archive_read_support_filter_xz(a1);
      break;
    case 7:
      archive_read_support_filter_uu(a1);
      break;
    case 8:
      archive_read_support_filter_rpm(a1);
      break;
    case 9:
      archive_read_support_filter_lzip(a1);
      break;
    case 10:
      archive_read_support_filter_lrzip(a1);
      break;
    case 11:
      archive_read_support_filter_lzop(a1);
      break;
    case 12:
      archive_read_support_filter_grzip(a1);
      break;
    case 13:
      archive_read_support_filter_lz4(a1);
      break;
    case 14:
      archive_read_support_filter_zstd(a1);
      break;
    default:
      return;
  }
}

uint64_t sub_1DB6E86C0(const char *a1)
{
  const char *v1;
  uint64_t result;
  size_t v3;

  v1 = a1;
  result = strlen(a1);
  if (result)
  {
    v3 = result;
    do
    {
      result = write(2, v1, v3);
      v1 += result;
      v3 -= result;
    }
    while (result >= 1 && v3 != 0);
  }
  return result;
}

void sub_1DB6E870C()
{
  abort();
}

char *sub_1DB6E8718(char *__s1, int a2)
{
  int v3;
  int v4;
  const char *v5;

  *__s1 = 0;
  v3 = -a2 & a2;
  if (v3)
  {
    v4 = a2;
    do
    {
      if (v3 > 15)
      {
        switch(v3)
        {
          case 0x10:
            v5 = "eof";
            break;
          case 0x20:
            v5 = "closed";
            break;
          case 0x8000:
            v5 = "fatal";
            break;
          default:
LABEL_16:
            v5 = "??";
            break;
        }
      }
      else
      {
        switch(v3)
        {
          case 1:
            v5 = "new";
            break;
          case 2:
            v5 = "header";
            break;
          case 4:
            v5 = "data";
            break;
          default:
            goto LABEL_16;
        }
      }
      v4 ^= v3;
      strcat(__s1, v5);
      if (v4)
        *(_WORD *)&__s1[strlen(__s1)] = 47;
      v3 = v4 & -v4;
    }
    while (v3);
  }
  return __s1;
}

uint64_t sub_1DB6E883C(char *password, size_t passwordLen, uint8_t *salt, size_t saltLen, unsigned int rounds, uint8_t *derivedKey, size_t derivedKeyLen)
{
  CCKeyDerivationPBKDF(2u, password, passwordLen, salt, saltLen, 1u, rounds, derivedKey, derivedKeyLen);
  return 0;
}

uint64_t sub_1DB6E8884(uint64_t a1, const void *a2, size_t a3)
{
  *(_DWORD *)(a1 + 40) = a3;
  memcpy((void *)(a1 + 8), a2, a3);
  *(_QWORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 76) = 16;
  if (CCCryptorCreateWithMode(0, 1u, 0, 0, 0, a2, a3, 0, 0, 0, 0, (CCCryptorRef *)a1))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t sub_1DB6E8908(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5)
{
  unsigned int v7;
  unint64_t v8;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  char v14;
  BOOL v15;
  uint64_t i;
  uint64_t v17;
  char v18;
  uint64_t result;

  v7 = *(_DWORD *)(a1 + 76);
  if (*a5 >= a3)
    LODWORD(v8) = a3;
  else
    v8 = *a5;
  if ((_DWORD)v8)
  {
    v11 = 0;
    v12 = *(_DWORD *)(a1 + 76);
    while (1)
    {
      if (v12 == 16)
      {
        v13 = 44;
        do
        {
          v14 = *(_BYTE *)(a1 + v13) + 1;
          *(_BYTE *)(a1 + v13) = v14;
          if (v14)
            break;
          v15 = v13++ == 51;
        }
        while (!v15);
        if (sub_1DB6E8AB0((CCCryptorRef *)a1))
          return 0xFFFFFFFFLL;
        while (v8 - v11 >= 0x10)
        {
          for (i = 0; i != 16; ++i)
            *(_BYTE *)(a4 + v11 + i) = *(_BYTE *)(a1 + i + 60) ^ *(_BYTE *)(a2 + v11 + i);
          v17 = 44;
          do
          {
            v18 = *(_BYTE *)(a1 + v17) + 1;
            *(_BYTE *)(a1 + v17) = v18;
            if (v18)
              break;
            v15 = v17++ == 51;
          }
          while (!v15);
          v11 += 16;
          if (sub_1DB6E8AB0((CCCryptorRef *)a1))
            return 0xFFFFFFFFLL;
        }
        v12 = 0;
        v7 = 0;
        if (v8 <= v11)
          goto LABEL_26;
      }
      v7 = v12 + 1;
      *(_BYTE *)(a4 + v11) = *(_BYTE *)(a1 + 60 + v12) ^ *(_BYTE *)(a2 + v11);
      ++v11;
      ++v12;
      if (v11 >= v8)
        goto LABEL_26;
    }
  }
  v11 = 0;
LABEL_26:
  result = 0;
  *(_DWORD *)(a1 + 76) = v7;
  *a5 = v11;
  return result;
}

uint64_t sub_1DB6E8A6C(uint64_t a1)
{
  bzero((void *)(a1 + 8), *(unsigned int *)(a1 + 40));
  *(_QWORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 44) = 0;
  if (*(_QWORD *)a1)
  {
    CCCryptorRelease(*(CCCryptorRef *)a1);
    *(_QWORD *)a1 = 0;
  }
  return 0;
}

uint64_t sub_1DB6E8AB0(CCCryptorRef *a1)
{
  _CCCryptor *v2;
  CCCryptorStatus v3;
  BOOL v4;

  v2 = *a1;
  v3 = CCCryptorReset(*a1, 0);
  if (v3)
    v4 = v3 == -4305;
  else
    v4 = 1;
  if (!v4)
    return 0xFFFFFFFFLL;
  if (CCCryptorUpdate(v2, (char *)a1 + 44, 0x10uLL, (char *)a1 + 60, 0x10uLL, 0))
    return 0xFFFFFFFFLL;
  return 0;
}

uint64_t archive_entry_mac_metadata(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(a1 + 928);
  return *(_QWORD *)(a1 + 920);
}

_DWORD *archive_entry_new()
{
  _DWORD *result;

  result = malloc_type_calloc(1uLL, 0x4E0uLL, 0x10B0040FA1FE6CFuLL);
  if (result)
  {
    *(_QWORD *)result = 0;
    result[311] = 0;
  }
  return result;
}

uint64_t archive_entry_atime(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t archive_entry_atime_nsec(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t archive_entry_atime_is_set(uint64_t a1)
{
  return *(_DWORD *)(a1 + 160) & 4;
}

uint64_t archive_entry_birthtime(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t archive_entry_birthtime_nsec(uint64_t a1)
{
  return *(unsigned int *)(a1 + 80);
}

uint64_t archive_entry_birthtime_is_set(uint64_t a1)
{
  return *(_DWORD *)(a1 + 160) & 0x20;
}

uint64_t archive_entry_ctime(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t archive_entry_ctime_is_set(uint64_t a1)
{
  return *(_DWORD *)(a1 + 160) & 8;
}

uint64_t archive_entry_ctime_nsec(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t archive_entry_dev(_DWORD *a1)
{
  if (a1[32])
    return (a1[35] | (a1[34] << 24));
  else
    return a1[33];
}

uint64_t archive_entry_dev_is_set(uint64_t a1)
{
  return *(_DWORD *)(a1 + 160) & 0x100;
}

uint64_t archive_entry_devmajor(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 128))
    return *(unsigned int *)(a1 + 136);
  else
    return *(unsigned __int8 *)(a1 + 135);
}

uint64_t archive_entry_devminor(_DWORD *a1)
{
  if (a1[32])
    return a1[35];
  else
    return a1[33] & 0xFFFFFF;
}

char *archive_entry_fflags_text(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  const char *v7;
  char **v8;
  unint64_t v9;
  char *v10;
  char *result;
  char *v12;
  char **v13;
  char *v14;
  const char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  const char *v20;
  char *v21;

  v21 = 0;
  v2 = (uint64_t)(a1 + 21);
  if (sub_1DB6DF424(*a1, (uint64_t)(a1 + 21), &v21))
  {
    if (*__error() == 12)
      goto LABEL_26;
  }
  else
  {
    result = v21;
    if (v21)
      return result;
  }
  v3 = a1[34];
  v4 = a1[35];
  if (*((_OWORD *)a1 + 17) == 0)
    return 0;
  v5 = 0;
  v6 = v4 | v3;
  v7 = "nosappnd";
  v8 = &off_1EA322030;
  do
  {
    v9 = (unint64_t)*(v8 - 1) | (unint64_t)*(v8 - 2);
    if ((v9 & v6) != 0)
    {
      v5 += strlen(v7) + 1;
      v6 &= ~v9;
    }
    v10 = *v8;
    v8 += 4;
    v7 = v10;
  }
  while (v10);
  if (!v5)
    return 0;
  result = (char *)malloc_type_malloc(v5, 0x3786E4E8uLL);
  if (result)
  {
    v12 = result;
    v13 = &off_1EA322010;
    v14 = result;
    v15 = "nosappnd";
    while (1)
    {
      v16 = (unint64_t)v13[2];
      v17 = (unint64_t)v13[3];
      if (v16 & v3 | v17 & v4)
        break;
      if (v17 & v3 | v16 & v4)
        goto LABEL_15;
LABEL_19:
      v20 = v13[4];
      v13 += 4;
      v15 = v20;
      if (!v20)
      {
        *v14 = 0;
        sub_1DB6DC068(v2, result);
        free(v12);
        if (sub_1DB6DF424(*a1, v2, &v21))
        {
          if (*__error() != 12)
            return 0;
LABEL_26:
          sub_1DB730818(1, "No memory");
        }
        return v21;
      }
    }
    v15 += 2;
LABEL_15:
    if (v14 > result)
      *v14++ = 44;
    v18 = v17 | v16;
    v3 &= ~v18;
    v4 &= ~v18;
    --v14;
    do
    {
      v19 = *(unsigned __int8 *)v15++;
      *++v14 = v19;
    }
    while (v19);
    goto LABEL_19;
  }
  return result;
}

uint64_t archive_entry_gid(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

uint64_t archive_entry_gname(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0;
  if (!sub_1DB6DF424(*a1, (uint64_t)(a1 + 36), &v2))
    return v2;
  if (*__error() == 12)
    sub_1DB730818(1, "No memory");
  return 0;
}

uint64_t archive_entry_gname_utf8(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0;
  if (!sub_1DB72D154(*a1, (uint64_t)(a1 + 36), &v2))
    return v2;
  if (*__error() == 12)
    sub_1DB730818(1, "No memory");
  return 0;
}

uint64_t archive_entry_gname_w(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0;
  if (!sub_1DB6DF324(*a1, (uint64_t)(a1 + 36), &v2))
    return v2;
  if (*__error() == 12)
    sub_1DB730818(1, "No memory");
  return 0;
}

uint64_t sub_1DB6E8EE0(uint64_t *a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  return sub_1DB72D240(*a1, (uint64_t)(a1 + 36), a2, a3, a4);
}

uint64_t archive_entry_hardlink_utf8(uint64_t a1)
{
  uint64_t v2;

  if ((*(_BYTE *)(a1 + 160) & 1) != 0)
  {
    v2 = 0;
    if (!sub_1DB72D154(*(_QWORD *)a1, a1 + 392, &v2))
      return v2;
    if (*__error() == 12)
      sub_1DB730818(1, "No memory");
  }
  return 0;
}

uint64_t archive_entry_hardlink_w(uint64_t a1)
{
  uint64_t v2;

  if ((*(_BYTE *)(a1 + 160) & 1) != 0)
  {
    v2 = 0;
    if (!sub_1DB6DF324(*(_QWORD *)a1, a1 + 392, &v2))
      return v2;
    if (*__error() == 12)
      sub_1DB730818(1, "No memory");
  }
  return 0;
}

uint64_t sub_1DB6E8FCC(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  if ((*(_BYTE *)(a1 + 160) & 1) != 0)
    return sub_1DB72D240(*(_QWORD *)a1, a1 + 392, a2, a3, a4);
  *a2 = 0;
  *a3 = 0;
  return 0;
}

uint64_t archive_entry_ino(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96);
}

uint64_t archive_entry_ino_is_set(uint64_t a1)
{
  return *(_DWORD *)(a1 + 160) & 0x80;
}

uint64_t archive_entry_ino64(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96);
}

uint64_t archive_entry_mtime(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t archive_entry_mtime_nsec(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t archive_entry_mtime_is_set(uint64_t a1)
{
  return *(_DWORD *)(a1 + 160) & 0x10;
}

uint64_t archive_entry_nlink(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t sub_1DB6E9040(uint64_t *a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  return sub_1DB72D240(*a1, (uint64_t)(a1 + 62), a2, a3, a4);
}

uint64_t archive_entry_perm(uint64_t a1)
{
  return *(_WORD *)(a1 + 1136) & 0xFFF;
}

uint64_t archive_entry_rdev(_DWORD *a1)
{
  if (a1[36])
    return (a1[39] | (a1[38] << 24));
  else
    return a1[37];
}

uint64_t archive_entry_rdevmajor(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 144))
    return *(unsigned int *)(a1 + 152);
  else
    return *(unsigned __int8 *)(a1 + 151);
}

uint64_t archive_entry_rdevminor(_DWORD *a1)
{
  if (a1[36])
    return a1[39];
  else
    return a1[37] & 0xFFFFFF;
}

uint64_t archive_entry_sourcepath(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0;
  if (!sub_1DB6DF424(*a1, (uint64_t)(a1 + 101), &v2))
    return v2;
  if (*__error() == 12)
    sub_1DB730818(1, "No memory");
  return 0;
}

uint64_t archive_entry_sourcepath_w(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0;
  if (sub_1DB6DF324(*a1, (uint64_t)(a1 + 101), &v2))
    return 0;
  else
    return v2;
}

uint64_t archive_entry_symlink_type(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1244);
}

uint64_t archive_entry_symlink_utf8(uint64_t a1)
{
  uint64_t v2;

  if ((*(_BYTE *)(a1 + 160) & 2) != 0)
  {
    v2 = 0;
    if (!sub_1DB72D154(*(_QWORD *)a1, a1 + 600, &v2))
      return v2;
    if (*__error() == 12)
      sub_1DB730818(1, "No memory");
  }
  return 0;
}

uint64_t archive_entry_symlink_w(uint64_t a1)
{
  uint64_t v2;

  if ((*(_BYTE *)(a1 + 160) & 2) != 0)
  {
    v2 = 0;
    if (!sub_1DB6DF324(*(_QWORD *)a1, a1 + 600, &v2))
      return v2;
    if (*__error() == 12)
      sub_1DB730818(1, "No memory");
  }
  return 0;
}

uint64_t sub_1DB6E922C(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  if ((*(_BYTE *)(a1 + 160) & 2) != 0)
    return sub_1DB72D240(*(_QWORD *)a1, a1 + 600, a2, a3, a4);
  *a2 = 0;
  *a3 = 0;
  return 0;
}

uint64_t archive_entry_uid(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120);
}

uint64_t archive_entry_uname(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0;
  if (!sub_1DB6DF424(*a1, (uint64_t)(a1 + 88), &v2))
    return v2;
  if (*__error() == 12)
    sub_1DB730818(1, "No memory");
  return 0;
}

uint64_t archive_entry_uname_utf8(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0;
  if (!sub_1DB72D154(*a1, (uint64_t)(a1 + 88), &v2))
    return v2;
  if (*__error() == 12)
    sub_1DB730818(1, "No memory");
  return 0;
}

uint64_t archive_entry_uname_w(uint64_t *a1)
{
  uint64_t v2;

  v2 = 0;
  if (!sub_1DB6DF324(*a1, (uint64_t)(a1 + 88), &v2))
    return v2;
  if (*__error() == 12)
    sub_1DB730818(1, "No memory");
  return 0;
}

uint64_t sub_1DB6E9388(uint64_t *a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  return sub_1DB72D240(*a1, (uint64_t)(a1 + 88), a2, a3, a4);
}

uint64_t archive_entry_is_data_encrypted(uint64_t a1)
{
  return *(_BYTE *)(a1 + 912) & 1;
}

uint64_t archive_entry_is_metadata_encrypted(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 912) >> 1) & 1;
}

uint64_t archive_entry_is_encrypted(uint64_t a1)
{
  return *(_BYTE *)(a1 + 912) & 3;
}

void archive_entry_set_fflags(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1DB6DEF44(a1 + 168);
  *(_QWORD *)(a1 + 272) = a2;
  *(_QWORD *)(a1 + 280) = a3;
}

char *archive_entry_copy_fflags_text(int8x16_t *a1, char *a2)
{
  char *v2;
  unsigned int v3;
  char *v4;
  size_t v5;
  char *v6;
  int8x16_t *v7;
  const char *v8;
  size_t v9;
  char v10;
  int8x16_t v11;
  int8x16_t v15;

  v2 = a2;
  sub_1DB6DC068((uint64_t)&a1[10].i64[1], a2);
  while (1)
  {
    v3 = *v2;
    if (v3 <= 0x1F)
      break;
    if (v3 != 32 && v3 != 44)
      goto LABEL_10;
LABEL_7:
    ++v2;
  }
  if (v3 == 9)
    goto LABEL_7;
  if (!*v2)
  {
    v4 = 0;
    v15 = 0u;
    goto LABEL_33;
  }
LABEL_10:
  v4 = 0;
  v15 = 0u;
  do
  {
    v5 = 0;
    v6 = v2;
    while (v3 > 0x2C || ((1 << v3) & 0x100100000201) == 0)
      v3 = v2[++v5];
    v2 += v5;
    v7 = (int8x16_t *)&xmmword_1EA322020;
    v8 = "nosappnd";
    while (1)
    {
      v9 = strlen(v8);
      if (v9 == v5 && !memcmp(v6, v8, v5))
      {
        v10 = 0;
        v11 = vextq_s8(*v7, *v7, 8uLL);
        goto LABEL_24;
      }
      if (v9 - 2 == v5 && !memcmp(v6, v8 + 2, v5))
        break;
      v8 = (const char *)v7[1].i64[0];
      v7 += 2;
      if (!v8)
      {
        v10 = 1;
        goto LABEL_25;
      }
    }
    v10 = 0;
    v11 = *v7;
LABEL_24:
    v15 = vorrq_s8(v11, v15);
LABEL_25:
    while (1)
    {
      v3 = *v2;
      if (v3 > 0x2C || ((1 << v3) & 0x100100000200) == 0)
        break;
      ++v2;
    }
    if ((v10 & (v4 == 0)) != 0)
      v4 = v6;
  }
  while (*v2);
LABEL_33:
  a1[17] = v15;
  return v4;
}

const __int32 *archive_entry_copy_fflags_text_w(int8x16_t *a1, __int32 *a2)
{
  __int32 *v2;
  unsigned int v3;
  const __int32 *v4;
  uint64_t v5;
  const __int32 *v6;
  size_t v7;
  const __int32 **v8;
  const __int32 *v9;
  size_t v10;
  const __int32 *v11;
  char v12;
  int8x16_t v13;
  int8x16_t v17;

  v2 = a2;
  sub_1DB72D34C((uint64_t)&a1[10].i64[1], a2);
  while (1)
  {
    v3 = *v2;
    if (*v2 <= 31)
      break;
    if (v3 != 32 && v3 != 44)
      goto LABEL_10;
LABEL_7:
    ++v2;
  }
  if (v3 == 9)
    goto LABEL_7;
  if (!v3)
  {
    v4 = 0;
    v17 = 0u;
    goto LABEL_33;
  }
LABEL_10:
  v4 = 0;
  v17 = 0u;
  do
  {
    v5 = 0;
    v6 = v2;
    while (v3 > 0x2C || ((1 << v3) & 0x100100000201) == 0)
      v3 = v2[++v5];
    v7 = (v5 * 4) >> 2;
    v2 = (__int32 *)((char *)v2 + v5 * 4);
    v8 = (const __int32 **)&off_1EA322038;
    v9 = (const __int32 *)&unk_1DB74BD74;
    while (1)
    {
      v10 = wcslen(v9);
      if (v7 == v10 && !wmemcmp(v6, v9, v7))
      {
        v12 = 0;
        v13 = vextq_s8(*(int8x16_t *)(v8 - 3), *(int8x16_t *)(v8 - 3), 8uLL);
        goto LABEL_24;
      }
      if (v7 == v10 - 2 && !wmemcmp(v6, v9 + 2, v7))
        break;
      v11 = *v8;
      v8 += 4;
      v9 = v11;
      if (!v11)
      {
        v12 = 1;
        goto LABEL_25;
      }
    }
    v12 = 0;
    v13 = *(int8x16_t *)(v8 - 3);
LABEL_24:
    v17 = vorrq_s8(v13, v17);
LABEL_25:
    while (1)
    {
      v3 = *v2;
      if (*v2 > 0x2C || ((1 << *v2) & 0x100100000200) == 0)
        break;
      ++v2;
    }
    if ((v12 & (v4 == 0)) != 0)
      v4 = v6;
  }
  while (v3);
LABEL_33:
  a1[17] = v17;
  return v4;
}

uint64_t archive_entry_set_gname(uint64_t a1, char *a2)
{
  return sub_1DB6DC068(a1 + 288, a2);
}

char *archive_entry_set_gname_utf8(uint64_t a1, char *a2)
{
  return sub_1DB72D3E8(a1 + 288, a2);
}

uint64_t archive_entry_copy_gname(uint64_t a1, char *a2)
{
  return sub_1DB6DC068(a1 + 288, a2);
}

uint64_t archive_entry_copy_gname_w(uint64_t a1, __int32 *a2)
{
  return sub_1DB72D34C(a1 + 288, a2);
}

uint64_t archive_entry_update_gname_utf8(uint64_t *a1, char *__s)
{
  if (!sub_1DB72D450(*a1, (uint64_t)(a1 + 36), __s))
    return 1;
  if (*__error() == 12)
    sub_1DB730818(1, "No memory");
  return 0;
}

uint64_t archive_entry_set_ino64(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 160) |= 0x80u;
  *(_QWORD *)(result + 96) = a2;
  return result;
}

uint64_t archive_entry_set_hardlink(uint64_t a1, char *a2)
{
  uint64_t result;

  result = sub_1DB6DC068(a1 + 392, a2);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a1 + 160) & 0xFFFFFFFE | (a2 != 0);
  return result;
}

char *archive_entry_set_hardlink_utf8(uint64_t a1, char *a2)
{
  char *result;

  result = sub_1DB72D3E8(a1 + 392, a2);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a1 + 160) & 0xFFFFFFFE | (a2 != 0);
  return result;
}

uint64_t archive_entry_copy_hardlink(uint64_t a1, char *a2)
{
  uint64_t result;

  result = sub_1DB6DC068(a1 + 392, a2);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a1 + 160) & 0xFFFFFFFE | (a2 != 0);
  return result;
}

uint64_t archive_entry_copy_hardlink_w(uint64_t a1, __int32 *a2)
{
  uint64_t result;

  result = sub_1DB72D34C(a1 + 392, a2);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a1 + 160) & 0xFFFFFFFE | (a2 != 0);
  return result;
}

uint64_t archive_entry_update_hardlink_utf8(uint64_t a1, char *__s)
{
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a1 + 160) & 0xFFFFFFFE | (__s != 0);
  if (!sub_1DB72D450(*(_QWORD *)a1, a1 + 392, __s))
    return 1;
  if (*__error() == 12)
    sub_1DB730818(1, "No memory");
  return 0;
}

uint64_t sub_1DB6E9970(uint64_t a1, char *a2, unint64_t a3, uint64_t a4)
{
  uint64_t result;
  BOOL v7;
  int v8;

  result = sub_1DB6E2F34(a1 + 392, a2, a3, a4);
  if (a2)
    v7 = (_DWORD)result == 0;
  else
    v7 = 0;
  v8 = v7;
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a1 + 160) & 0xFFFFFFFE | v8;
  return result;
}

uint64_t archive_entry_set_atime(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a3 % 1000000000;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 160) |= 4u;
  if (a3 % 1000000000 < 0)
    LODWORD(v3) = a3 % 1000000000 + 1000000000;
  *(_QWORD *)(result + 24) = a3 / 1000000000 + a2 + ((a3 % 1000000000) >> 63);
  *(_DWORD *)(result + 32) = v3;
  return result;
}

uint64_t archive_entry_unset_atime(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 16) = 0;
  v1 = *(_DWORD *)(result + 160);
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 160) = v1 & 0xFFFFFFFB;
  return result;
}

uint64_t archive_entry_set_birthtime(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a3 % 1000000000;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 160) |= 0x20u;
  if (a3 % 1000000000 < 0)
    LODWORD(v3) = a3 % 1000000000 + 1000000000;
  *(_QWORD *)(result + 72) = a3 / 1000000000 + a2 + ((a3 % 1000000000) >> 63);
  *(_DWORD *)(result + 80) = v3;
  return result;
}

uint64_t archive_entry_unset_birthtime(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 16) = 0;
  v1 = *(_DWORD *)(result + 160);
  *(_QWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 80) = 0;
  *(_DWORD *)(result + 160) = v1 & 0xFFFFFFDF;
  return result;
}

uint64_t archive_entry_set_ctime(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a3 % 1000000000;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 160) |= 8u;
  if (a3 % 1000000000 < 0)
    LODWORD(v3) = a3 % 1000000000 + 1000000000;
  *(_QWORD *)(result + 40) = a3 / 1000000000 + a2 + ((a3 % 1000000000) >> 63);
  *(_DWORD *)(result + 48) = v3;
  return result;
}

uint64_t archive_entry_unset_ctime(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 16) = 0;
  v1 = *(_DWORD *)(result + 160);
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = v1 & 0xFFFFFFF7;
  return result;
}

_DWORD *archive_entry_set_devmajor(_DWORD *result, int a2)
{
  result[4] = 0;
  result[40] |= 0x100u;
  result[32] = 1;
  result[34] = a2;
  return result;
}

_DWORD *archive_entry_set_devminor(_DWORD *result, int a2)
{
  result[4] = 0;
  result[40] |= 0x100u;
  result[32] = 1;
  result[35] = a2;
  return result;
}

uint64_t archive_entry_set_link(uint64_t a1, char *a2)
{
  uint64_t v2;

  if ((*(_DWORD *)(a1 + 160) & 2) != 0)
    v2 = a1 + 600;
  else
    v2 = a1 + 392;
  return sub_1DB6DC068(v2, a2);
}

char *archive_entry_set_link_utf8(uint64_t a1, char *a2)
{
  uint64_t v2;

  if ((*(_DWORD *)(a1 + 160) & 2) != 0)
    v2 = a1 + 600;
  else
    v2 = a1 + 392;
  return sub_1DB72D3E8(v2, a2);
}

uint64_t archive_entry_copy_link(uint64_t a1, char *a2)
{
  uint64_t v2;

  if ((*(_DWORD *)(a1 + 160) & 2) != 0)
    v2 = a1 + 600;
  else
    v2 = a1 + 392;
  return sub_1DB6DC068(v2, a2);
}

uint64_t archive_entry_copy_link_w(uint64_t a1, __int32 *a2)
{
  uint64_t v2;

  if ((*(_DWORD *)(a1 + 160) & 2) != 0)
    v2 = a1 + 600;
  else
    v2 = a1 + 392;
  return sub_1DB72D34C(v2, a2);
}

uint64_t archive_entry_update_link_utf8(uint64_t a1, char *__s)
{
  uint64_t v3;

  if ((*(_DWORD *)(a1 + 160) & 2) != 0)
    v3 = a1 + 600;
  else
    v3 = a1 + 392;
  if (!sub_1DB72D450(*(_QWORD *)a1, v3, __s))
    return 1;
  if (*__error() == 12)
    sub_1DB730818(1, "No memory");
  return 0;
}

uint64_t sub_1DB6E9C14(uint64_t a1, char *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if ((*(_DWORD *)(a1 + 160) & 2) != 0)
    v4 = a1 + 600;
  else
    v4 = a1 + 392;
  return sub_1DB6E2F34(v4, a2, a3, a4);
}

uint64_t archive_entry_unset_mtime(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 16) = 0;
  v1 = *(_DWORD *)(result + 160);
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(_DWORD *)(result + 160) = v1 & 0xFFFFFFEF;
  return result;
}

uint64_t archive_entry_set_nlink(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 104) = a2;
  return result;
}

char *archive_entry_set_pathname_utf8(uint64_t a1, char *a2)
{
  return sub_1DB72D3E8(a1 + 496, a2);
}

uint64_t archive_entry_copy_pathname(uint64_t a1, char *a2)
{
  return sub_1DB6DC068(a1 + 496, a2);
}

uint64_t archive_entry_copy_pathname_w(uint64_t a1, __int32 *a2)
{
  return sub_1DB72D34C(a1 + 496, a2);
}

uint64_t archive_entry_update_pathname_utf8(uint64_t *a1, char *__s)
{
  if (!sub_1DB72D450(*a1, (uint64_t)(a1 + 62), __s))
    return 1;
  if (*__error() == 12)
    sub_1DB730818(1, "No memory");
  return 0;
}

uint64_t archive_entry_set_perm(uint64_t result, __int16 a2)
{
  *(_DWORD *)(result + 16) = 0;
  *(_WORD *)(result + 1136) = *(_WORD *)(result + 1136) & 0xF000 | a2 & 0xFFF;
  return result;
}

_DWORD *archive_entry_set_rdev(_DWORD *result, int a2)
{
  result[4] = 0;
  result[36] = 0;
  result[37] = a2;
  return result;
}

_DWORD *archive_entry_set_rdevmajor(_DWORD *result, int a2)
{
  result[4] = 0;
  result[36] = 1;
  result[38] = a2;
  return result;
}

_DWORD *archive_entry_set_rdevminor(_DWORD *result, int a2)
{
  result[4] = 0;
  result[36] = 1;
  result[39] = a2;
  return result;
}

uint64_t archive_entry_unset_size(uint64_t result)
{
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_DWORD *)(result + 160) &= ~0x40u;
  return result;
}

uint64_t archive_entry_copy_sourcepath(uint64_t a1, char *a2)
{
  return sub_1DB6DC068(a1 + 808, a2);
}

uint64_t archive_entry_copy_sourcepath_w(uint64_t a1, __int32 *a2)
{
  return sub_1DB72D34C(a1 + 808, a2);
}

uint64_t archive_entry_set_symlink(uint64_t a1, char *a2)
{
  BOOL v3;
  uint64_t result;

  v3 = a2 != 0;
  result = sub_1DB6DC068(a1 + 600, a2);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a1 + 160) & 0xFFFFFFFD | (2 * v3);
  return result;
}

uint64_t archive_entry_set_symlink_type(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1244) = a2;
  return result;
}

char *archive_entry_set_symlink_utf8(uint64_t a1, char *a2)
{
  BOOL v3;
  char *result;

  v3 = a2 != 0;
  result = sub_1DB72D3E8(a1 + 600, a2);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a1 + 160) & 0xFFFFFFFD | (2 * v3);
  return result;
}

uint64_t archive_entry_copy_symlink(uint64_t a1, char *a2)
{
  BOOL v3;
  uint64_t result;

  v3 = a2 != 0;
  result = sub_1DB6DC068(a1 + 600, a2);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a1 + 160) & 0xFFFFFFFD | (2 * v3);
  return result;
}

uint64_t archive_entry_copy_symlink_w(uint64_t a1, __int32 *a2)
{
  BOOL v3;
  uint64_t result;

  v3 = a2 != 0;
  result = sub_1DB72D34C(a1 + 600, a2);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a1 + 160) & 0xFFFFFFFD | (2 * v3);
  return result;
}

uint64_t archive_entry_update_symlink_utf8(uint64_t a1, char *__s)
{
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a1 + 160) & 0xFFFFFFFD | (2 * (__s != 0));
  if (!sub_1DB72D450(*(_QWORD *)a1, a1 + 600, __s))
    return 1;
  if (*__error() == 12)
    sub_1DB730818(1, "No memory");
  return 0;
}

uint64_t sub_1DB6E9E80(uint64_t a1, char *a2, unint64_t a3, uint64_t a4)
{
  uint64_t result;
  BOOL v7;
  int v8;

  result = sub_1DB6E2F34(a1 + 600, a2, a3, a4);
  if ((_DWORD)result)
    v7 = 1;
  else
    v7 = a2 == 0;
  if (v7)
    v8 = 0;
  else
    v8 = 2;
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a1 + 160) & 0xFFFFFFFD | v8;
  return result;
}

uint64_t archive_entry_set_uname(uint64_t a1, char *a2)
{
  return sub_1DB6DC068(a1 + 704, a2);
}

char *archive_entry_set_uname_utf8(uint64_t a1, char *a2)
{
  return sub_1DB72D3E8(a1 + 704, a2);
}

uint64_t archive_entry_copy_uname(uint64_t a1, char *a2)
{
  return sub_1DB6DC068(a1 + 704, a2);
}

uint64_t archive_entry_copy_uname_w(uint64_t a1, __int32 *a2)
{
  return sub_1DB72D34C(a1 + 704, a2);
}

uint64_t archive_entry_update_uname_utf8(uint64_t *a1, char *__s)
{
  if (!sub_1DB72D450(*a1, (uint64_t)(a1 + 88), __s))
    return 1;
  if (*__error() == 12)
    sub_1DB730818(1, "No memory");
  return 0;
}

uint64_t archive_entry_set_is_data_encrypted(uint64_t result, int a2)
{
  *(_BYTE *)(result + 912) = *(_BYTE *)(result + 912) & 0xFE | (a2 != 0);
  return result;
}

uint64_t archive_entry_set_is_metadata_encrypted(uint64_t result, int a2)
{
  *(_BYTE *)(result + 912) = *(_BYTE *)(result + 912) & 0xFD | (2 * (a2 != 0));
  return result;
}

uint64_t archive_entry_digest(uint64_t a1, int a2)
{
  uint64_t result;

  switch(a2)
  {
    case 1:
      result = a1 + 936;
      break;
    case 2:
      result = a1 + 952;
      break;
    case 3:
      result = a1 + 972;
      break;
    case 4:
      result = a1 + 992;
      break;
    case 5:
      result = a1 + 1024;
      break;
    case 6:
      result = a1 + 1072;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

__n128 sub_1DB6E9FD0(uint64_t a1, int a2, uint64_t a3, __n128 result)
{
  __n128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  switch(a2)
  {
    case 1:
      result = *(__n128 *)a3;
      *(_OWORD *)(a1 + 936) = *(_OWORD *)a3;
      break;
    case 2:
      v4 = (__n128 *)(a1 + 952);
      result = *(__n128 *)a3;
      *(_DWORD *)(a1 + 968) = *(_DWORD *)(a3 + 16);
      goto LABEL_5;
    case 3:
      v4 = (__n128 *)(a1 + 972);
      result = *(__n128 *)a3;
      *(_DWORD *)(a1 + 988) = *(_DWORD *)(a3 + 16);
LABEL_5:
      *v4 = result;
      break;
    case 4:
      result = *(__n128 *)a3;
      v5 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a1 + 992) = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 1008) = v5;
      break;
    case 5:
      result = *(__n128 *)a3;
      v6 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(a1 + 1056) = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a1 + 1040) = v6;
      *(__n128 *)(a1 + 1024) = result;
      break;
    case 6:
      result = *(__n128 *)a3;
      v7 = *(_OWORD *)(a3 + 16);
      v8 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a1 + 1120) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a1 + 1104) = v8;
      *(_OWORD *)(a1 + 1088) = v7;
      *(__n128 *)(a1 + 1072) = result;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t archive_entry_acl(uint64_t a1)
{
  return a1 + 1136;
}

void archive_entry_acl_clear(uint64_t a1)
{
  sub_1DB6DF3C0(a1 + 1136);
}

uint64_t archive_entry_acl_add_entry(uint64_t a1, int a2, unsigned int a3, int a4, int a5, char *a6)
{
  return sub_1DB717E7C((_WORD *)(a1 + 1136), a2, a3, a4, a5, a6);
}

uint64_t archive_entry_acl_add_entry_w(uint64_t a1, int a2, unsigned int a3, int a4, int a5, __int32 *a6)
{
  _WORD *v11;
  size_t v12;

  v11 = (_WORD *)(a1 + 1136);
  v12 = wcslen(a6);
  return sub_1DB717F84(v11, a2, a3, a4, a5, a6, v12);
}

uint64_t archive_entry_acl_types(uint64_t a1)
{
  return sub_1DB71806C(a1 + 1136);
}

uint64_t archive_entry_acl_count(uint64_t a1, int a2)
{
  return sub_1DB71802C(a1 + 1136, a2);
}

uint64_t archive_entry_acl_reset(uint64_t a1, int a2)
{
  return sub_1DB718074(a1 + 1136, a2);
}

uint64_t archive_entry_acl_next(uint64_t a1, int a2, _DWORD *a3, int *a4, _DWORD *a5, _DWORD *a6, _QWORD *a7)
{
  uint64_t v7;

  v7 = sub_1DB7180D8(*(_QWORD *)a1, (unsigned __int16 *)(a1 + 1136), a2, a3, a4, a5, a6, a7);
  if ((_DWORD)v7 == -30 && *__error() == 12)
    sub_1DB730818(1, "No memory");
  return v7;
}

__int32 *archive_entry_acl_to_text_w(uint64_t *a1, int64_t *a2, __int16 a3)
{
  return sub_1DB718250((uint64_t)(a1 + 142), a2, a3, *a1);
}

char *archive_entry_acl_to_text(uint64_t a1, int64_t *a2, __int16 a3)
{
  return sub_1DB718B14(a1 + 1136, a2, a3, 0);
}

char *sub_1DB6EA1B4(uint64_t a1, int64_t *a2, __int16 a3, uint64_t a4)
{
  return sub_1DB718B14(a1 + 1136, a2, a3, a4);
}

uint64_t archive_entry_acl_from_text_w(uint64_t a1, unsigned int *a2, int a3)
{
  return sub_1DB71921C((_WORD *)(a1 + 1136), a2, a3);
}

uint64_t archive_entry_acl_from_text(uint64_t a1, unsigned __int8 *a2, int a3)
{
  return sub_1DB719DD8(a1 + 1136, a2, a3, 0);
}

__int32 *archive_entry_acl_text_w(uint64_t a1, unsigned int a2)
{
  __int32 *result;

  free(*(void **)(a1 + 1168));
  *(_QWORD *)(a1 + 1168) = 0;
  if ((a2 & 0x300) == 0)
    return 0;
  result = sub_1DB718250(a1 + 1136, 0, (a2 >> 10) & 3 | a2 | 8, *(_QWORD *)a1);
  *(_QWORD *)(a1 + 1168) = result;
  return result;
}

char *archive_entry_acl_text(uint64_t a1, unsigned int a2)
{
  char *result;

  free(*(void **)(a1 + 1176));
  *(_QWORD *)(a1 + 1176) = 0;
  if ((a2 & 0x300) == 0)
    return 0;
  result = sub_1DB718B14(a1 + 1136, 0, (a2 >> 10) & 3 | a2 | 8, 0);
  *(_QWORD *)(a1 + 1176) = result;
  return result;
}

uint64_t archive_write_add_filter_lrzip(int *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;

  v2 = sub_1DB7321E4((uint64_t)a1);
  result = sub_1DB6E0594(a1, -1329217314, 1, "archive_write_add_filter_lrzip", v3, v4, v5, v6);
  if ((_DWORD)result != -30)
  {
    v8 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040EDED9539uLL);
    if (v8)
    {
      v14 = v8;
      v15 = sub_1DB6EBA88("lrzip");
      *v14 = v15;
      if (v15)
      {
        v2[8] = v14;
        v2[9] = "lrzip";
        *((_DWORD *)v2 + 20) = 10;
        v2[3] = sub_1DB6EA448;
        v2[4] = sub_1DB6EA390;
        v2[5] = sub_1DB6EA568;
        v2[6] = sub_1DB6EA57C;
        v2[7] = sub_1DB6EA588;
        archive_set_error(a1, -1, "Using external lrzip program for lrzip compression", v16, v17, v18, v19, v20, v21);
        return 4294967276;
      }
      free(v14);
    }
    archive_set_error(a1, 12, "Can't allocate memory", v9, v10, v11, v12, v13, v21);
    return 4294967266;
  }
  return result;
}

uint64_t sub_1DB6EA390(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v6[3];

  v2 = *(_QWORD *)(a1 + 64);
  memset(v6, 0, sizeof(v6));
  sub_1DB6E323C(v6, "lrzip -q", 8uLL);
  v3 = *(_DWORD *)(v2 + 12) - 1;
  if (v3 <= 4)
    sub_1DB72CE50(v6, (&off_1EA322290)[v3]);
  if (*(int *)(v2 + 8) >= 1)
  {
    sub_1DB72CE50(v6, " -L ");
    sub_1DB72CE60(v6, *(_BYTE *)(v2 + 8) + 48);
  }
  v4 = sub_1DB6EBB98(a1, *(_QWORD *)v2, (char *)v6[0]);
  sub_1DB6E7C3C((uint64_t)v6);
  return v4;
}

uint64_t sub_1DB6EA448(uint64_t a1, char *__s1, const char *a3)
{
  uint64_t v5;
  int v6;
  uint64_t result;
  int v8;
  int v9;

  v5 = *(_QWORD *)(a1 + 64);
  if (!strcmp(__s1, "compression"))
  {
    if (a3)
    {
      result = strcmp(a3, "bzip2");
      if ((_DWORD)result)
      {
        result = strcmp(a3, "gzip");
        if ((_DWORD)result)
        {
          result = strcmp(a3, "lzo");
          if ((_DWORD)result)
          {
            result = strcmp(a3, "none");
            if ((_DWORD)result)
            {
              result = strcmp(a3, "zpaq");
              if ((_DWORD)result)
                return 4294967276;
              v9 = 5;
            }
            else
            {
              v9 = 4;
            }
          }
          else
          {
            v9 = 3;
          }
        }
        else
        {
          v9 = 2;
        }
      }
      else
      {
        v9 = 1;
      }
      *(_DWORD *)(v5 + 12) = v9;
      return result;
    }
    return 4294967276;
  }
  v6 = strcmp(__s1, "compression-level");
  result = 4294967276;
  if (a3)
  {
    if (!v6)
    {
      v8 = *a3;
      if ((v8 - 49) <= 8 && !a3[1])
      {
        result = 0;
        *(_DWORD *)(v5 + 8) = v8 - 48;
      }
    }
  }
  return result;
}

uint64_t sub_1DB6EA568(uint64_t a1, char *__buf, uint64_t __nbyte, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1DB6EBC40(a1, **(_QWORD **)(a1 + 64), __buf, __nbyte, a5, a6, a7, a8);
}

uint64_t sub_1DB6EA57C(uint64_t a1)
{
  return sub_1DB6EBE0C(a1, **(_QWORD **)(a1 + 64));
}

uint64_t sub_1DB6EA588(uint64_t a1)
{
  void ***v1;

  v1 = *(void ****)(a1 + 64);
  sub_1DB6EBB5C(*v1);
  free(v1);
  return 0;
}

uint64_t archive_write_set_format_v7tar(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  void (*v10)(uint64_t);
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char *v18;

  result = sub_1DB6E0594((int *)a1, -1329217314, 1, "archive_write_set_format_v7tar", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    v10 = *(void (**)(uint64_t))(a1 + 328);
    if (v10)
      v10(a1);
    v11 = malloc_type_calloc(1uLL, 0x28uLL, 0x10200404DE2C876uLL);
    if (v11)
    {
      v17 = v11;
      result = 0;
      *(_QWORD *)(a1 + 304) = sub_1DB6EA740;
      *(_QWORD *)(a1 + 312) = sub_1DB6EAE5C;
      *(_QWORD *)(a1 + 320) = sub_1DB6EAEA4;
      *(_QWORD *)(a1 + 328) = sub_1DB6EAEAC;
      *(_QWORD *)(a1 + 288) = sub_1DB6EA69C;
      *(_QWORD *)(a1 + 296) = sub_1DB6EAED8;
      *(_DWORD *)(a1 + 16) = 196608;
      *(_QWORD *)(a1 + 264) = v17;
      *(_QWORD *)(a1 + 272) = "tar (non-POSIX)";
      *(_QWORD *)(a1 + 24) = "tar (non-POSIX)";
    }
    else
    {
      archive_set_error((_DWORD *)a1, 12, "Can't allocate v7tar data", v12, v13, v14, v15, v16, v18);
      return 4294967266;
    }
  }
  return result;
}

uint64_t sub_1DB6EA69C(uint64_t a1, char *__s1, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;

  v5 = *(_QWORD *)(a1 + 264);
  if (strcmp(__s1, "hdrcharset"))
    return 4294967276;
  if (a3 && *a3)
  {
    v12 = sub_1DB72D08C(a1, a3, 0);
    *(_QWORD *)(v5 + 16) = v12;
    if (v12)
      return 0;
    else
      return 4294967266;
  }
  else
  {
    archive_set_error((_DWORD *)a1, -1, "%s: hdrcharset option needs a character-set name", v6, v7, v8, v9, v10, *(char **)(a1 + 272));
    return 4294967271;
  }
}

uint64_t sub_1DB6EA740(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  unsigned int i;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  unsigned int j;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  unsigned int k;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unsigned int m;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unsigned int n;
  unint64_t v101;
  uint64_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  uint8x16_t v107;
  uint16x8_t v108;
  uint16x8_t v109;
  unint64_t v110;
  char *v111;
  unsigned int ii;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  char *v119;
  char *v120;
  char *v121;
  unint64_t v122;
  void *__dst[65];

  __dst[64] = *(void **)MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 264);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
  {
    if (*(_DWORD *)(v4 + 32))
    {
      v5 = *(_QWORD *)(v4 + 24);
    }
    else
    {
      v5 = sub_1DB6E54AC();
      *(_QWORD *)(v4 + 24) = v5;
      *(_DWORD *)(v4 + 32) = 1;
    }
  }
  if (!archive_entry_pathname(a2))
  {
    archive_set_error((_DWORD *)a1, -1, "Can't record entry in tar file without pathname", v6, v7, v8, v9, v10, v119);
    return 4294967271;
  }
  if (archive_entry_hardlink((uint64_t)a2)
    || archive_entry_symlink((uint64_t)a2)
    || archive_entry_filetype((uint64_t)a2) != 0x8000)
  {
    archive_entry_set_size((uint64_t)a2, 0);
  }
  if (archive_entry_filetype((uint64_t)a2) == 0x4000)
  {
    v11 = (const char *)archive_entry_pathname(a2);
    if (v11)
    {
      v12 = (char *)v11;
      if (*v11)
      {
        if (v11[strlen(v11) - 1] != 47)
        {
          memset(__dst, 0, 24);
          v13 = strlen(v12);
          if (!sub_1DB6E3190(__dst, v13 + 2))
          {
            archive_set_error((_DWORD *)a1, 12, "Can't allocate v7tar data", v14, v15, v16, v17, v18, v119);
            sub_1DB6E7C3C((uint64_t)__dst);
            return 4294967266;
          }
          __dst[1] = 0;
          sub_1DB6E323C((uint64_t *)__dst, v12, v13);
          sub_1DB72CE60((uint64_t *)__dst, 47);
          archive_entry_copy_pathname((uint64_t)a2, (char *)__dst[0]);
          sub_1DB6E7C3C((uint64_t)__dst);
        }
      }
    }
  }
  v121 = 0;
  v122 = 0;
  v120 = 0;
  memcpy(__dst, &unk_1DB74C050, 0x200uLL);
  if (sub_1DB6E9040(a2, &v120, &v122, v5))
  {
    if (*__error() == 12)
    {
      v29 = "Can't allocate memory for Pathname";
LABEL_33:
      archive_set_error((_DWORD *)a1, 12, v29, v24, v25, v26, v27, v28, v119);
      v30 = 4294967266;
LABEL_90:
      archive_entry_free(0);
      return v30;
    }
    v31 = v120;
    sub_1DB72D0D4(v5);
    archive_set_error((_DWORD *)a1, 79, "Can't translate pathname '%s' to %s", v32, v33, v34, v35, v36, v31);
    v30 = 4294967276;
  }
  else
  {
    v30 = 0;
  }
  if (v122 > 0x63)
  {
    archive_set_error((_DWORD *)a1, 63, "Pathname too long", v19, v20, v21, v22, v23, v119);
    v30 = 4294967271;
  }
  else
  {
    __memcpy_chk();
  }
  if (sub_1DB6E8FCC((uint64_t)a2, &v121, &v122, v5))
  {
    if (*__error() == 12)
    {
LABEL_32:
      v29 = "Can't allocate memory for Linkname";
      goto LABEL_33;
    }
    v42 = v121;
    sub_1DB72D0D4(v5);
    archive_set_error((_DWORD *)a1, 79, "Can't translate linkname '%s' to %s", v43, v44, v45, v46, v47, v42);
    v30 = 4294967276;
  }
  v48 = v122;
  if (!v122)
  {
    if (sub_1DB6E922C((uint64_t)a2, &v121, &v122, v5))
    {
      if (*__error() == 12)
        goto LABEL_32;
      v51 = v121;
      sub_1DB72D0D4(v5);
      archive_set_error((_DWORD *)a1, 79, "Can't translate linkname '%s' to %s", v52, v53, v54, v55, v56, v51);
      v30 = 4294967276;
    }
    v50 = v122;
    v49 = -1;
    if (!v122)
      goto LABEL_39;
    goto LABEL_36;
  }
  v49 = 49;
  v50 = v122;
LABEL_36:
  if (v50 >= 0x64)
  {
    archive_set_error((_DWORD *)a1, 63, "Link contents too long", v37, v38, v39, v40, v41, v119);
    v122 = 100;
    v30 = 4294967271;
  }
  __memcpy_chk();
LABEL_39:
  v62 = archive_entry_mode((uint64_t)a2) & 0xFFF;
  v63 = (char *)&__dst[13] + 2;
  for (i = 7; i > 1; --i)
  {
    v65 = v62;
    *--v63 = v62 & 7 | 0x30;
    v62 >>= 3;
  }
  if (v65 >= 8)
  {
    *((_WORD *)v63 + 2) = 14135;
    *(_DWORD *)v63 = 926365495;
    archive_set_error((_DWORD *)a1, 34, "Numeric mode too large", v57, v58, v59, v60, v61, v119);
    v30 = 4294967271;
  }
  v66 = archive_entry_uid((uint64_t)a2);
  if ((v66 & 0x8000000000000000) != 0)
  {
    memset((char *)&__dst[13] + 4, 48, 6);
    goto LABEL_49;
  }
  v72 = (char *)&__dst[14] + 2;
  for (j = 7; j > 1; --j)
  {
    v74 = v66;
    *--v72 = v66 & 7 | 0x30;
    v66 >>= 3;
  }
  if (v74 >= 8)
  {
    *((_WORD *)v72 + 2) = 14135;
    *(_DWORD *)v72 = 926365495;
LABEL_49:
    archive_set_error((_DWORD *)a1, 34, "Numeric user ID too large", v67, v68, v69, v70, v71, v119);
    v30 = 4294967271;
  }
  v75 = archive_entry_gid((uint64_t)a2);
  if ((v75 & 0x8000000000000000) != 0)
  {
    memset((char *)&__dst[14] + 4, 48, 6);
    goto LABEL_56;
  }
  v81 = (char *)&__dst[15] + 2;
  for (k = 7; k > 1; --k)
  {
    v83 = v75;
    *--v81 = v75 & 7 | 0x30;
    v75 >>= 3;
  }
  if (v83 >= 8)
  {
    *((_WORD *)v81 + 2) = 14135;
    *(_DWORD *)v81 = 926365495;
LABEL_56:
    archive_set_error((_DWORD *)a1, 34, "Numeric group ID too large", v76, v77, v78, v79, v80, v119);
    v30 = 4294967271;
  }
  v84 = archive_entry_size((uint64_t)a2);
  if ((v84 & 0x8000000000000000) != 0)
  {
    memset((char *)&__dst[15] + 4, 48, 11);
    goto LABEL_63;
  }
  v90 = (char *)&__dst[16] + 7;
  for (m = 12; m > 1; --m)
  {
    v92 = v84;
    *--v90 = v84 & 7 | 0x30;
    v84 >>= 3;
  }
  if (v92 >= 8)
  {
    memset(v90, 55, 11);
LABEL_63:
    archive_set_error((_DWORD *)a1, 34, "File size out of range", v85, v86, v87, v88, v89, v119);
    v30 = 4294967271;
  }
  v93 = archive_entry_mtime((uint64_t)a2);
  if ((v93 & 0x8000000000000000) != 0)
  {
    memset(&__dst[17], 48, 11);
  }
  else
  {
    v99 = (char *)&__dst[18] + 3;
    for (n = 12; n > 1; --n)
    {
      v101 = v93;
      *--v99 = v93 & 7 | 0x30;
      v93 >>= 3;
    }
    if (v101 < 8)
      goto LABEL_71;
    memset(v99, 55, 11);
  }
  archive_set_error((_DWORD *)a1, 34, "File modification time too large", v94, v95, v96, v97, v98, v119);
  v30 = 4294967271;
LABEL_71:
  if (v48)
  {
    BYTE4(__dst[19]) = v49;
  }
  else
  {
    v116 = archive_entry_filetype((uint64_t)a2);
    if (v116 != 0x4000 && v116 != 0x8000)
    {
      if (v116 == 40960)
      {
        BYTE4(__dst[19]) = 50;
      }
      else
      {
        sub_1DB7355D0((_DWORD *)a1, a2);
        v30 = 4294967271;
      }
    }
  }
  v102 = 0;
  v103 = 0uLL;
  v104 = 0uLL;
  v105 = 0uLL;
  v106 = 0uLL;
  do
  {
    v107 = *(uint8x16_t *)&__dst[v102];
    v108 = vmovl_u8(*(uint8x8_t *)v107.i8);
    v109 = vmovl_high_u8(v107);
    v106 = (int32x4_t)vaddw_high_u16((uint32x4_t)v106, v109);
    v105 = (int32x4_t)vaddw_u16((uint32x4_t)v105, *(uint16x4_t *)v109.i8);
    v104 = (int32x4_t)vaddw_high_u16((uint32x4_t)v104, v108);
    v103 = (int32x4_t)vaddw_u16((uint32x4_t)v103, *(uint16x4_t *)v108.i8);
    v102 += 2;
  }
  while (v102 != 64);
  v110 = vaddvq_s32(vaddq_s32(vaddq_s32(v103, v105), vaddq_s32(v104, v106)));
  v111 = (char *)&__dst[19] + 2;
  for (ii = 7; ii > 1; --ii)
  {
    v113 = v110;
    *--v111 = v110 & 7 | 0x30;
    v110 >>= 3;
  }
  if (v113 >= 8)
  {
    *((_WORD *)v111 + 2) = 14135;
    *(_DWORD *)v111 = 926365495;
  }
  BYTE2(__dst[19]) = 0;
  if ((int)v30 <= -21)
    goto LABEL_90;
  v114 = sub_1DB7322A8(a1, (uint64_t)__dst, 512);
  v115 = v114;
  if ((int)v114 > -21)
  {
    if ((int)v114 >= (int)v30)
      v30 = v30;
    else
      v30 = v114;
    v117 = archive_entry_size((uint64_t)a2);
    *(_QWORD *)v4 = v117;
    *(_QWORD *)(v4 + 8) = -(int)v117 & 0x1FFLL;
    goto LABEL_90;
  }
  archive_entry_free(0);
  return v115;
}

uint64_t sub_1DB6EAE5C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(uint64_t **)(a1 + 264);
  if (*v3 >= a3)
    v4 = a3;
  else
    v4 = *v3;
  LODWORD(result) = sub_1DB7322A8(a1, a2, v4);
  *v3 -= v4;
  if ((_DWORD)result)
    return (int)result;
  else
    return v4;
}

uint64_t sub_1DB6EAEA4(_QWORD *a1)
{
  return sub_1DB732308(a1, 0x400uLL);
}

uint64_t sub_1DB6EAEAC(uint64_t a1)
{
  free(*(void **)(a1 + 264));
  *(_QWORD *)(a1 + 264) = 0;
  return 0;
}

uint64_t sub_1DB6EAED8(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t result;

  v1 = (_QWORD *)a1[33];
  result = sub_1DB732308(a1, v1[1] + *v1);
  *v1 = 0;
  v1[1] = 0;
  return result;
}

uint64_t archive_write_add_filter_uuencode(int *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  char *v15;

  v2 = sub_1DB7321E4((uint64_t)a1);
  result = sub_1DB6E0594(a1, -1329217314, 1, "archive_write_add_filter_uu", v3, v4, v5, v6);
  if ((_DWORD)result != -30)
  {
    v8 = malloc_type_calloc(1uLL, 0x78uLL, 0x1010040A33E50F3uLL);
    if (v8)
    {
      v14 = v8;
      *((_QWORD *)v8 + 2) = 0;
      sub_1DB6E323C((uint64_t *)v8 + 1, "-", 1uLL);
      result = 0;
      *v14 = 420;
      v2[8] = v14;
      v2[9] = "uuencode";
      *((_DWORD *)v2 + 20) = 7;
      v2[3] = sub_1DB6EB0C0;
      v2[4] = sub_1DB6EAFF8;
      v2[5] = sub_1DB6EB1BC;
      v2[6] = sub_1DB6EB2E8;
      v2[7] = sub_1DB6EB340;
    }
    else
    {
      archive_set_error((_DWORD *)v2[1], 12, "Can't allocate data for uuencode filter", v9, v10, v11, v12, v13, v15);
      return 4294967266;
    }
  }
  return result;
}

uint64_t sub_1DB6EAFF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  _DWORD *v10;
  signed int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char *v20;

  v9 = *(unsigned int **)(a1 + 64);
  v10 = *(_DWORD **)(a1 + 8);
  if (*v10 != -1329217314)
    goto LABEL_5;
  v11 = archive_write_get_bytes_per_block((uint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  v12 = v11;
  if (v11 > 0x10000)
    goto LABEL_6;
  if (v11)
    v12 = 0x10000uLL / v11 * v11;
  else
LABEL_5:
    v12 = 0x10000;
LABEL_6:
  *((_QWORD *)v9 + 7) = v12;
  if (sub_1DB6E3190((void **)v9 + 4, v12 + 512))
  {
    sub_1DB7303C0((void **)v9 + 4, "begin %o %s\n", v13, v14, v15, v16, v17, v18, (char *)*v9);
    result = 0;
    *(_QWORD *)(a1 + 64) = v9;
  }
  else
  {
    archive_set_error(*(_DWORD **)(a1 + 8), 12, "Can't allocate data for uuencode buffer", v14, v15, v16, v17, v18, v20);
    return 4294967266;
  }
  return result;
}

uint64_t sub_1DB6EB0C0(uint64_t a1, char *__s1, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  size_t v13;
  __int16 i;
  __int16 v15;
  size_t v16;
  _DWORD *v17;
  char *v18;
  char *v19;

  v6 = *(_QWORD *)(a1 + 64);
  if (strcmp(__s1, "mode"))
  {
    if (strcmp(__s1, "name"))
      return 4294967276;
    if (a3)
    {
      *(_QWORD *)(v6 + 16) = 0;
      v16 = strlen(a3);
      sub_1DB6E323C((uint64_t *)(v6 + 8), a3, v16);
      return 0;
    }
    v17 = *(_DWORD **)(a1 + 8);
    v18 = "name option requires a string";
    goto LABEL_13;
  }
  if (!a3)
  {
    v17 = *(_DWORD **)(a1 + 8);
    v18 = "mode option requires octal digits";
LABEL_13:
    archive_set_error(v17, -1, v18, v7, v8, v9, v10, v11, v19);
    return 4294967271;
  }
  v13 = strlen(a3);
  for (i = 0; v13; --v13)
  {
    v15 = *a3;
    if ((v15 & 0xF8) != 0x30)
      break;
    ++a3;
    i = (v15 - 48) | (8 * i);
  }
  result = 0;
  *(_DWORD *)v6 = i & 0x1FF;
  return result;
}

uint64_t sub_1DB6EB1BC(uint64_t a1, unsigned __int8 *__src, size_t __n)
{
  size_t v3;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  if (!__n)
    return 0;
  v3 = __n;
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(v6 + 64);
  if (!v7)
    goto LABEL_11;
  if (v7 <= 0x2C)
  {
    do
    {
      v8 = *__src++;
      *(_QWORD *)(v6 + 64) = v7 + 1;
      *(_BYTE *)(v6 + v7 + 72) = v8;
      v7 = *(_QWORD *)(v6 + 64);
    }
    while (v7 <= 0x2C && v3-- != 1);
    if (v7 < 0x2D)
      return 0;
  }
  sub_1DB6EB378((uint64_t *)(v6 + 32), (unsigned __int8 *)(v6 + 72), 0x2DuLL);
  *(_QWORD *)(v6 + 64) = 0;
LABEL_11:
  if (v3 >= 0x2D)
  {
    do
    {
      sub_1DB6EB378((uint64_t *)(v6 + 32), __src, 0x2DuLL);
      v3 -= 45;
      __src += 45;
    }
    while (v3 > 0x2C);
  }
  if (v3)
  {
    memcpy((void *)(v6 + 72), __src, v3);
    *(_QWORD *)(v6 + 64) = v3;
  }
  v10 = *(_QWORD *)(v6 + 56);
  if (*(_QWORD *)(v6 + 40) < v10)
    return 0;
  do
  {
    v11 = sub_1DB732248(*(_QWORD *)(a1 + 16), *(_QWORD *)(v6 + 32), v10);
    memmove(*(void **)(v6 + 32), (const void *)(*(_QWORD *)(v6 + 32) + *(_QWORD *)(v6 + 56)), *(_QWORD *)(v6 + 40) - *(_QWORD *)(v6 + 56));
    v10 = *(_QWORD *)(v6 + 56);
    v12 = *(_QWORD *)(v6 + 40) - v10;
    *(_QWORD *)(v6 + 40) = v12;
  }
  while (v12 >= v10);
  return v11;
}

uint64_t sub_1DB6EB2E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v18;

  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(v9 + 64);
  if (v10)
    sub_1DB6EB378((uint64_t *)(v9 + 32), (unsigned __int8 *)(v9 + 72), v10);
  archive_write_set_bytes_in_last_block(*(int **)(a1 + 8), 1, v11, v12, v13, v14, v15, v16);
  return sub_1DB732248(*(_QWORD *)(a1 + 16), *(_QWORD *)(v9 + 32), *(_QWORD *)(v9 + 40));
}

uint64_t sub_1DB6EB340(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 64);
  sub_1DB6E7C3C((uint64_t)v1 + 8);
  sub_1DB6E7C3C((uint64_t)v1 + 32);
  free(v1);
  return 0;
}

uint64_t *sub_1DB6EB378(uint64_t *a1, unsigned __int8 *a2, unint64_t a3)
{
  unint64_t v3;
  char v6;
  char v7;
  unsigned int v8;
  char v9;
  unsigned int v10;
  char v11;
  char v12;
  char v13;
  char v14;
  int v15;
  char v16;
  int v17;
  char v18;

  v3 = a3;
  v6 = a3 + 32;
  if (!(_DWORD)a3)
    v6 = 96;
  sub_1DB72CE60(a1, v6);
  if (v3 >= 3)
  {
    do
    {
      if (*a2 >= 4u)
        v7 = (*a2 >> 2) + 32;
      else
        v7 = 96;
      sub_1DB72CE60(a1, v7);
      v8 = (a2[1] >> 4) & 0xFFFFFFCF | (16 * (*a2 & 3));
      if (v8)
        v9 = v8 + 32;
      else
        v9 = 96;
      sub_1DB72CE60(a1, v9);
      v10 = (a2[2] >> 6) & 0xFFFFFFC3 | (4 * (a2[1] & 0xF));
      if (v10)
        v11 = v10 + 32;
      else
        v11 = 96;
      sub_1DB72CE60(a1, v11);
      if ((a2[2] & 0x3F) != 0)
        v12 = (a2[2] & 0x3F) + 32;
      else
        v12 = 96;
      sub_1DB72CE60(a1, v12);
      a2 += 3;
      v3 -= 3;
    }
    while (v3 > 2);
  }
  if (v3)
  {
    v13 = 96;
    if (*a2 >= 4u)
      v14 = (*a2 >> 2) + 32;
    else
      v14 = 96;
    sub_1DB72CE60(a1, v14);
    v15 = 16 * (*a2 & 3);
    if (v3 == 1)
    {
      if (v15)
        v16 = v15 + 32;
      else
        v16 = 96;
      sub_1DB72CE60(a1, v16);
    }
    else
    {
      v17 = v15 | (a2[1] >> 4);
      if (v17)
        v18 = v17 + 32;
      else
        v18 = 96;
      sub_1DB72CE60(a1, v18);
      if (((4 * a2[1]) & 0x3C) != 0)
        v13 = ((4 * a2[1]) & 0x3C) + 32;
      else
        v13 = 96;
    }
    sub_1DB72CE60(a1, v13);
    sub_1DB72CE60(a1, 96);
  }
  return sub_1DB72CE60(a1, 10);
}

uint64_t sub_1DB6EB4EC(int *a1, char *a2, unint64_t a3, unint64_t a4, uint64_t a5, char *a6, uint64_t (*a7)(int *, char *, unint64_t, unint64_t), uint64_t a8)
{
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  const char *v20;
  char *v21;

  result = sub_1DB6E0594(a1, a5, 1, a6, a5, (uint64_t)a6, (uint64_t)a7, a8);
  if ((_DWORD)result != -30)
  {
    if (a2 && !*a2)
      a2 = 0;
    if (a3 && !*(_BYTE *)a3)
      a3 = 0;
    if (a4 && !*(_BYTE *)a4)
      a4 = 0;
    if (!(a3 | a4))
      return 0;
    if (a3)
    {
      result = a7(a1, a2, a3, a4);
      if ((_DWORD)result != -20)
      {
        if ((_DWORD)result != -21)
          return result;
        return 4294967271;
      }
      v20 = "!";
      if (a4)
        v20 = "";
      v21 = (char *)v20;
    }
    else
    {
      v19 = "Empty option";
    }
    archive_set_error(a1, -1, v19, v14, v15, v16, v17, v18, v21);
    return 4294967271;
  }
  return result;
}

uint64_t sub_1DB6EB62C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t result;

  if (a3 | a4)
    v6 = 4294967271;
  else
    v6 = 0;
  if (!a3)
    return v6;
  v6 = a5();
  if ((_DWORD)v6 == -30)
    return v6;
  result = a6(a1, a2, a3, a4);
  if ((_DWORD)result == -30)
    return result;
  if ((_DWORD)result == -21)
    return v6;
  if ((int)v6 <= (int)result)
    return result;
  else
    return v6;
}

uint64_t sub_1DB6EB6C4(int *a1, const char *a2, int a3, char *a4, uint64_t (*a5)(int *, char *, char *, const char *), uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  const char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  char *v36;
  char *v37;

  result = sub_1DB6E0594(a1, a3, 1, a4, (uint64_t)a5, a6, a7, a8);
  if ((_DWORD)result == -30)
    return result;
  if (!a2 || !*a2)
    return 0;
  v12 = strdup(a2);
  if (v12)
  {
    v18 = v12;
    v19 = 0;
    v20 = 0;
    v21 = 1;
    v22 = v12;
    while (1)
    {
      v23 = v22;
      v24 = strchr(v22, 44);
      v22 = v24;
      if (v24)
      {
        *v24 = 0;
        v22 = v24 + 1;
      }
      if (!*v23)
      {
        v27 = 0;
        v23 = 0;
LABEL_21:
        v26 = 0;
        goto LABEL_22;
      }
      v25 = strchr(v23, 58);
      if (v25)
      {
        *v25 = 0;
        v26 = v23;
        v23 = v25 + 1;
      }
      else
      {
        v26 = 0;
      }
      v28 = strchr(v23, 61);
      if (v28)
      {
        *v28 = 0;
        v27 = v28 + 1;
        if (!v26)
          goto LABEL_20;
LABEL_22:
        v29 = a5(a1, v26, v23, v27);
        if (v29 == -30)
        {
          free(v18);
          return 4294967266;
        }
        if (v26 && v29 == -25)
          goto LABEL_53;
        if (v29 == -21)
        {
          if (!v20)
          {
LABEL_53:
            free(v18);
            return 4294967271;
          }
          v20 = 1;
          if (!v22)
            goto LABEL_38;
        }
        else if (v29)
        {
          if (v29 == -20)
          {
            if (v26)
              v36 = v26;
            else
              v36 = "";
            goto LABEL_53;
          }
          v21 = 0;
          if (!v22)
            goto LABEL_38;
        }
        else
        {
          v19 = 1;
          if (!v22)
            goto LABEL_38;
        }
      }
      else
      {
        if (*v23 == 33)
        {
          ++v23;
          v27 = 0;
        }
        else
        {
          v27 = "1";
        }
        if (v26)
          goto LABEL_22;
LABEL_20:
        if (strcmp("__ignore_wrong_module_name__", v23))
          goto LABEL_21;
        if (v27)
        {
          v19 = 1;
          v20 = 1;
        }
        if (!v22)
        {
LABEL_38:
          free(v18);
          if (v19)
            v35 = -20;
          else
            v35 = -25;
          if (v21)
            return 0;
          else
            return v35;
        }
      }
    }
  }
  archive_set_error(a1, 12, "Out of memory adding file to list", v13, v14, v15, v16, v17, v37);
  return 4294967266;
}

uint64_t archive_write_set_compression_program(int *a1, char *a2)
{
  sub_1DB732988((uint64_t)a1);
  return archive_write_add_filter_program(a1, a2);
}

uint64_t archive_write_add_filter_program(int *a1, char *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;

  v4 = sub_1DB7321E4((uint64_t)a1);
  result = sub_1DB6E0594(a1, -1329217314, 1, "archive_write_add_filter_program", v5, v6, v7, v8);
  if ((_DWORD)result != -30)
  {
    v10 = malloc_type_calloc(1uLL, 0x28uLL, 0x1030040A4690949uLL);
    v4[8] = v10;
    if (v10
      && (v11 = v10, v12 = strdup(a2), (v11[4] = v12) != 0)
      && (v13 = sub_1DB6EBA88(a2), (*v11 = v13) != 0)
      && (v14 = strlen(a2), sub_1DB6E3190((void **)v11 + 1, v14 + 10)))
    {
      v11[2] = 0;
      sub_1DB6E323C(v11 + 1, "Program: ", 9uLL);
      sub_1DB72CE50(v11 + 1, a2);
      result = 0;
      v4[9] = v11[1];
      *((_DWORD *)v4 + 20) = 4;
      v4[4] = sub_1DB6EBAE0;
      v4[5] = sub_1DB6EBAF0;
      v4[6] = sub_1DB6EBB04;
      v4[7] = sub_1DB6EBB10;
    }
    else
    {
      sub_1DB6EBB10((uint64_t)v4);
      archive_set_error(a1, 12, "Can't allocate memory for filter program", v15, v16, v17, v18, v19, v20);
      return 4294967266;
    }
  }
  return result;
}

_QWORD *sub_1DB6EBA88(const char *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = malloc_type_calloc(1uLL, 0x30uLL, 0x10100405A4032B0uLL);
  v3 = v2;
  if (v2)
  {
    *(_QWORD *)((char *)v2 + 4) = -1;
    v2[5] = strdup(a1);
  }
  return v3;
}

uint64_t sub_1DB6EBAE0(uint64_t a1)
{
  return sub_1DB6EBB98(a1, **(_QWORD **)(a1 + 64), *(char **)(*(_QWORD *)(a1 + 64) + 32));
}

uint64_t sub_1DB6EBAF0(uint64_t a1, char *__buf, uint64_t __nbyte, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1DB6EBC40(a1, **(_QWORD **)(a1 + 64), __buf, __nbyte, a5, a6, a7, a8);
}

uint64_t sub_1DB6EBB04(uint64_t a1)
{
  return sub_1DB6EBE0C(a1, **(_QWORD **)(a1 + 64));
}

uint64_t sub_1DB6EBB10(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    free(*(void **)(v1 + 32));
    sub_1DB6E7C3C(v1 + 8);
    sub_1DB6EBB5C(*(void ***)v1);
    free((void *)v1);
    *(_QWORD *)(a1 + 64) = 0;
  }
  return 0;
}

uint64_t sub_1DB6EBB5C(void **a1)
{
  if (a1)
  {
    free(a1[5]);
    free(a1[2]);
    free(a1);
  }
  return 0;
}

uint64_t sub_1DB6EBB98(uint64_t a1, uint64_t a2, char *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;

  if (*(_QWORD *)(a2 + 16)
    || (*(_OWORD *)(a2 + 24) = xmmword_1DB74C250,
        v6 = malloc_type_malloc(0x10000uLL, 0x3A684551uLL),
        (*(_QWORD *)(a2 + 16) = v6) != 0))
  {
    result = sub_1DB70D400((uint64_t)a3, (_DWORD *)(a2 + 4), (_DWORD *)(a2 + 8), (pid_t *)a2);
    if (!(_DWORD)result)
      return result;
    archive_set_error(*(_DWORD **)(a1 + 8), 22, "Can't launch external program: %s", v13, v14, v15, v16, v17, a3);
  }
  else
  {
    archive_set_error(*(_DWORD **)(a1 + 8), 12, "Can't allocate compression buffer", v7, v8, v9, v10, v11, v18);
  }
  return 4294967266;
}

uint64_t sub_1DB6EBC40(uint64_t a1, uint64_t a2, char *__buf, uint64_t __nbyte, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v8;
  uint64_t v9;
  size_t v10;
  ssize_t v14;
  ssize_t v15;
  uint64_t v16;

  if (*(_DWORD *)a2)
    v8 = __nbyte == 0;
  else
    v8 = 1;
  if (v8)
    return 0;
  v10 = __nbyte;
LABEL_7:
  if (*(_DWORD *)(a2 + 4) == -1)
    goto LABEL_28;
  while (1)
  {
LABEL_8:
    while (1)
    {
      v14 = write(*(_DWORD *)(a2 + 4), __buf, v10);
      if (v14 != -1)
        break;
      if (*__error() != 4)
      {
        if (*__error() != 35)
          goto LABEL_28;
        goto LABEL_14;
      }
    }
    if (v14 > 0)
    {
      v9 = 0;
      __buf += v14;
      v10 -= v14;
      if (!v10)
        return v9;
      goto LABEL_7;
    }
    if (!v14)
    {
      close(*(_DWORD *)(a2 + 4));
      *(_DWORD *)(a2 + 4) = -1;
      fcntl(*(_DWORD *)(a2 + 8), 4, 0);
      goto LABEL_28;
    }
LABEL_14:
    if (*(_DWORD *)(a2 + 8) != -1)
      break;
    fcntl(*(_DWORD *)(a2 + 4), 4, 0);
LABEL_23:
    sub_1DB70D664(*(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8));
  }
  do
  {
    v15 = read(*(_DWORD *)(a2 + 8), (void *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 32));
    if (v15 != -1)
    {
      if (!v15)
        goto LABEL_21;
      v16 = *(_QWORD *)(a2 + 32) + v15;
      *(_QWORD *)(a2 + 32) = v16;
      if (sub_1DB732248(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), v16))
        goto LABEL_28;
      *(_QWORD *)(a2 + 32) = 0;
      goto LABEL_8;
    }
  }
  while (*__error() == 4);
  if (*__error() == 32)
  {
LABEL_21:
    close(*(_DWORD *)(a2 + 8));
    *(_DWORD *)(a2 + 8) = -1;
    fcntl(*(_DWORD *)(a2 + 4), 4, 0);
    goto LABEL_8;
  }
  if (*__error() == 35)
    goto LABEL_23;
LABEL_28:
  archive_set_error(*(_DWORD **)(a1 + 8), 5, "Can't write to program: %s", __nbyte, a5, a6, a7, a8, *(char **)(a2 + 40));
  return 4294967266;
}

uint64_t sub_1DB6EBE0C(uint64_t a1, uint64_t a2)
{
  ssize_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;

  v22 = 0;
  if (!*(_DWORD *)a2)
    return 0;
  close(*(_DWORD *)(a2 + 4));
  *(_DWORD *)(a2 + 4) = -1;
  fcntl(*(_DWORD *)(a2 + 8), 4, 0);
  do
  {
    while (1)
    {
      v4 = read(*(_DWORD *)(a2 + 8), (void *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(a2 + 32)), *(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 32));
      if (v4 == -1)
        break;
      if (!v4)
        goto LABEL_9;
      v5 = *(_QWORD *)(a2 + 32) + v4;
      *(_QWORD *)(a2 + 32) = v5;
      if (sub_1DB732248(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16), v5))
        goto LABEL_12;
      *(_QWORD *)(a2 + 32) = 0;
    }
  }
  while (*__error() == 4);
  if (*__error() == 32)
  {
LABEL_9:
    v6 = 0;
    goto LABEL_13;
  }
  v7 = *(_DWORD **)(a1 + 8);
  v8 = __error();
  archive_set_error(v7, *v8, "Error reading from program: %s", v9, v10, v11, v12, v13, *(char **)(a2 + 40));
LABEL_12:
  v6 = 4294967266;
LABEL_13:
  v14 = *(_DWORD *)(a2 + 4);
  if (v14 != -1)
    close(v14);
  v15 = *(_DWORD *)(a2 + 8);
  if (v15 != -1)
    close(v15);
  while (waitpid(*(_DWORD *)a2, &v22, 0) == -1 && *__error() == 4)
    ;
  *(_DWORD *)a2 = 0;
  if (v22)
  {
    archive_set_error(*(_DWORD **)(a1 + 8), 5, "Error closing program: %s", v16, v17, v18, v19, v20, *(char **)(a2 + 40));
    return 4294967266;
  }
  return v6;
}

uint64_t sub_1DB6EBF80(uint64_t a1, char *__s1, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  char *v13;

  v5 = **(_QWORD **)(a1 + 2472);
  if (strcmp(__s1, "hdrcharset"))
    return 4294967276;
  if (a3 && *a3)
  {
    v12 = sub_1DB6E3A78(a1, a3, 0);
    *(_QWORD *)(v5 + 184) = v12;
    if (v12)
      return 0;
    else
      return 4294967266;
  }
  else
  {
    archive_set_error((_DWORD *)a1, -1, "cab: hdrcharset option needs a character-set name", v6, v7, v8, v9, v10, v13);
    return 4294967271;
  }
}

uint64_t sub_1DB6EC018(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  size_t v27;
  uint64_t v28;
  size_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  _BYTE *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  char **v41;
  int v42;
  unint64_t v43;
  int v44;
  int v45;
  BOOL v46;
  char *v47;
  _DWORD *v48;
  int v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const __int32 *v56;
  const __int32 *v57;
  size_t v58;
  __int32 *v59;
  uint64_t v60;
  _DWORD *v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  __int16 v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  unsigned int v76;
  size_t v77;
  uint64_t v78;
  size_t v79;
  uint64_t v80;
  size_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  __int16 v87;
  unsigned int v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  unint64_t v102;
  uint64_t v103;
  size_t v104;
  size_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  size_t v112;
  size_t v113;
  _BYTE *v114;
  int64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  unsigned int v126;
  size_t v127;
  uint64_t v128;
  size_t v129;
  uint64_t v130;
  char *v132;
  unsigned int *v133;
  uint64_t v134;
  int v135;
  uint64_t v136;

  v10 = **(_QWORD **)(a1 + 2472);
  if (*(_BYTE *)(v10 + 144))
  {
    v11 = 0;
    goto LABEL_3;
  }
  *(_DWORD *)(a1 + 16) = 786432;
  if (!*(_QWORD *)(a1 + 24))
    *(_QWORD *)(a1 + 24) = "CAB";
  v18 = sub_1DB6E2588(a1, 0x2AuLL, 0, a4, a5, a6, a7, a8);
  if (!v18)
    goto LABEL_166;
  v25 = **(_QWORD **)(a1 + 2472);
  if (!*(_BYTE *)(v25 + 144) && *(_BYTE *)v18 == 77 && *(_BYTE *)(v18 + 1) == 90)
  {
    v136 = 0;
    v26 = 4096;
    while (1)
    {
      while (1)
      {
        v27 = sub_1DB6E2588(a1, v26, &v136, v20, v21, v22, v23, v24);
        if (v27)
          break;
        v46 = v26 > 0xFF;
        v26 >>= 1;
        if (!v46)
          goto LABEL_80;
      }
      v29 = v27;
      if (v136 >= 9)
        break;
      v31 = v27;
LABEL_22:
      sub_1DB6E26F0(a1, v31 - v29, v28, v20, v21, v22, v23, v24);
    }
    v30 = v27 + v136;
    v31 = v27;
    while (1)
    {
      v32 = sub_1DB6ECD44(v31);
      if (!v32)
        break;
      v31 += v32;
      if (v31 + 8 >= v30)
        goto LABEL_22;
    }
    sub_1DB6E26F0(a1, v31 - v29, v28, v20, v21, v22, v23, v24);
    v18 = sub_1DB6E2588(a1, 0x2AuLL, 0, v64, v65, v66, v67, v68);
    if (!v18)
      goto LABEL_166;
  }
  *(_QWORD *)(v25 + 64) = 0;
  if (*(_BYTE *)v18 != 77 || *(_BYTE *)(v18 + 1) != 83 || *(_BYTE *)(v18 + 2) != 67 || *(_BYTE *)(v18 + 3) != 70)
  {
LABEL_80:
    v47 = "Couldn't find out CAB header";
LABEL_167:
    v48 = (_DWORD *)a1;
    goto LABEL_168;
  }
  *(_DWORD *)(v25 + 72) = *(_DWORD *)(v18 + 8);
  *(_DWORD *)(v25 + 76) = *(_DWORD *)(v18 + 16);
  *(_BYTE *)(v25 + 91) = *(_BYTE *)(v18 + 24);
  *(_BYTE *)(v25 + 90) = *(_BYTE *)(v18 + 25);
  v69 = *(unsigned __int16 *)(v18 + 26);
  *(_WORD *)(v25 + 80) = v69;
  if (!v69)
    goto LABEL_175;
  v70 = *(unsigned __int16 *)(v18 + 28);
  *(_WORD *)(v25 + 82) = v70;
  if (!v70)
    goto LABEL_175;
  v71 = *(unsigned __int8 *)(v18 + 30);
  v72 = *(_BYTE *)(v18 + 30);
  *(_WORD *)(v25 + 84) = v71 | (*(unsigned __int8 *)(v18 + 31) << 8);
  *(_WORD *)(v25 + 86) = *(_WORD *)(v18 + 32);
  *(_WORD *)(v25 + 88) = *(_WORD *)(v18 + 34);
  if ((v71 & 4) == 0)
  {
    *(_BYTE *)(v25 + 92) = 0;
    v73 = 36;
    goto LABEL_83;
  }
  v74 = *(unsigned __int16 *)(v18 + 36);
  if (v74 > 0xEA60)
  {
LABEL_175:
    v47 = "Invalid CAB header";
    goto LABEL_167;
  }
  *(_BYTE *)(v25 + 92) = *(_BYTE *)(v18 + 38);
  *(_BYTE *)(v25 + 93) = *(_BYTE *)(v18 + 39);
  v73 = v74 + 40;
LABEL_83:
  if ((v71 & 1) == 0)
  {
    if ((v72 & 2) == 0)
      goto LABEL_85;
    goto LABEL_155;
  }
  v77 = sub_1DB6E2588(a1, v73 + 256, 0, v20, v21, v22, v23, v24);
  if (!v77)
    goto LABEL_166;
  v78 = 0;
  while (*(_BYTE *)(v77 + v73 + v78))
  {
    if (++v78 == 256)
      goto LABEL_175;
  }
  if (!v78)
    goto LABEL_175;
  v79 = sub_1DB6E2588(a1, v73 + v78 + 257, 0, v20, v21, v22, v23, v24);
  if (!v79)
  {
LABEL_166:
    v47 = "Truncated CAB header";
    goto LABEL_167;
  }
  v80 = 0;
  while (*(_BYTE *)(v79 + v73 + v80 + v78 + 1))
  {
    if (++v80 == 256)
      goto LABEL_175;
  }
  if (!v80)
    goto LABEL_175;
  v73 += v78 + v80 + 2;
  if ((*(_WORD *)(v25 + 84) & 2) == 0)
    goto LABEL_85;
LABEL_155:
  v127 = sub_1DB6E2588(a1, v73 + 256, 0, v20, v21, v22, v23, v24);
  if (!v127)
    goto LABEL_166;
  v128 = 0;
  while (*(_BYTE *)(v127 + v73 + v128))
  {
    if (++v128 == 256)
      goto LABEL_175;
  }
  if (!v128)
    goto LABEL_175;
  v129 = sub_1DB6E2588(a1, v73 + v128 + 257, 0, v20, v21, v22, v23, v24);
  if (!v129)
    goto LABEL_166;
  v130 = 0;
  while (*(_BYTE *)(v129 + v73 + v130 + v128 + 1))
  {
    if (++v130 == 256)
      goto LABEL_175;
  }
  if (!v130)
    goto LABEL_175;
  v73 += v128 + v130 + 2;
LABEL_85:
  sub_1DB6E26F0(a1, v73, v19, v20, v21, v22, v23, v24);
  *(_QWORD *)(v25 + 64) += v73;
  v75 = malloc_type_calloc(*(unsigned __int16 *)(v25 + 80), 0x60uLL, 0x10D004043342C3BuLL);
  *(_QWORD *)(v25 + 96) = v75;
  if (!v75)
    goto LABEL_152;
  if ((*(_WORD *)(v25 + 84) & 4) != 0)
    v76 = *(unsigned __int8 *)(v25 + 92) + 8;
  else
    v76 = 8;
  v81 = sub_1DB6E2588(a1, v76 * (unint64_t)*(unsigned __int16 *)(v25 + 80), 0, v20, v21, v22, v23, v24);
  if (!v81)
    goto LABEL_166;
  v83 = *(unsigned __int16 *)(v25 + 80);
  if (*(_WORD *)(v25 + 80))
  {
    v84 = 0;
    v85 = 0;
    v86 = *(_QWORD *)(v25 + 96);
    v87 = *(_WORD *)(v25 + 84);
    while (1)
    {
      v88 = *(_DWORD *)v81;
      *(_DWORD *)v86 = *(_DWORD *)v81;
      *(_WORD *)(v86 + 4) = *(_WORD *)(v81 + 4);
      v89 = *(_BYTE *)(v81 + 6) & 0xF;
      *(_WORD *)(v86 + 6) = v89;
      *(_WORD *)(v86 + 8) = *(unsigned __int8 *)(v81 + 7);
      v90 = "UNKNOWN";
      if (v89 <= 3)
        v90 = (&off_1EA3222B8)[v89];
      *(_QWORD *)(v86 + 16) = v90;
      v81 += 8;
      v85 += 8;
      if ((v87 & 4) != 0)
      {
        v91 = *(unsigned __int8 *)(v25 + 92);
        v81 += v91;
        v85 += v91;
      }
      if (v84 >= v88)
        goto LABEL_175;
      *(_BYTE *)(v86 + 92) = 0;
      v86 += 96;
      v84 = v88;
      if (!--v83)
        goto LABEL_111;
    }
  }
  v85 = 0;
  v88 = 0;
LABEL_111:
  sub_1DB6E26F0(a1, v85, v82, v20, v21, v22, v23, v24);
  v98 = *(_QWORD *)(v25 + 64) + v85;
  *(_QWORD *)(v25 + 64) = v98;
  v99 = *(unsigned int *)(v25 + 76);
  v100 = v99 - v98;
  if (v99 - v98 < 0)
  {
    archive_set_error((_DWORD *)a1, -1, "Invalid offset of CFFILE %jd < %jd", v93, v94, v95, v96, v97, (char *)*(unsigned int *)(v25 + 76));
    return 4294967266;
  }
  if (v99 != v98)
  {
    sub_1DB6E26F0(a1, v99 - v98, v92, v93, v94, v95, v96, v97);
    *(_QWORD *)(v25 + 64) += v100;
  }
  v101 = malloc_type_calloc(*(unsigned __int16 *)(v25 + 82), 0x30uLL, 0x10100402A02C140uLL);
  *(_QWORD *)(v25 + 104) = v101;
  if (!v101)
  {
LABEL_152:
    v47 = "Can't allocate memory for CAB data";
    v48 = (_DWORD *)a1;
    goto LABEL_55;
  }
  if (!*(_WORD *)(v25 + 82))
  {
LABEL_148:
    if (*(_WORD *)(v25 + 88) || (*(_WORD *)(v25 + 84) & 3) != 0)
    {
      archive_set_error((_DWORD *)a1, 79, "Multivolume cabinet file is unsupported", v20, v21, v22, v23, v24, v132);
      v11 = 4294967276;
    }
    else
    {
      v11 = 0;
    }
    *(_BYTE *)(v10 + 144) = 1;
LABEL_3:
    v12 = *(_DWORD *)(v10 + 112);
    if (v12 >= *(unsigned __int16 *)(v10 + 82))
    {
      v11 = 1;
      *(_BYTE *)(v10 + 145) = 1;
      return v11;
    }
    v134 = a1;
    v13 = *(_QWORD *)(v10 + 104);
    *(_DWORD *)(v10 + 112) = v12 + 1;
    v14 = (unsigned int *)(v13 + 48 * v12);
    *(_WORD *)(v10 + 146) = 0;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 48) = v14;
    v15 = *(_QWORD *)(v10 + 40);
    v16 = *((unsigned __int16 *)v14 + 8);
    switch(v16)
    {
      case 0xFFFF:
        goto LABEL_7;
      case 0xFFFE:
        v17 = *(_QWORD *)(v10 + 96) + 96 * *(unsigned __int16 *)(v10 + 80) - 96;
        break;
      case 0xFFFD:
LABEL_7:
        v17 = *(_QWORD *)(v10 + 96);
        break;
      default:
        v17 = *(_QWORD *)(v10 + 96) + 96 * *((unsigned __int16 *)v14 + 8);
        break;
    }
    *(_QWORD *)(v10 + 40) = v17;
    if (v15 != v17)
      *(_QWORD *)(v10 + 56) = 0;
    v33 = v13 + 48 * v12;
    v35 = *(char *)(v33 + 18);
    v34 = (_BYTE *)(v33 + 18);
    if (v35 < 0)
    {
      v36 = *(_QWORD *)(v10 + 200);
      if (!v36)
      {
        v36 = (uint64_t)sub_1DB6E3A78(v134, "UTF-8", 1);
        *(_QWORD *)(v10 + 200) = v36;
        if (!v36)
          return 4294967266;
      }
    }
    else
    {
      v36 = *(_QWORD *)(v10 + 184);
      if (!v36)
      {
        if (*(_DWORD *)(v10 + 176))
        {
          v36 = *(_QWORD *)(v10 + 192);
        }
        else
        {
          v36 = sub_1DB6E54AC();
          *(_QWORD *)(v10 + 192) = v36;
          *(_DWORD *)(v10 + 176) = 1;
        }
      }
    }
    v37 = v13 + 48 * v12;
    v40 = *(_QWORD *)(v37 + 32);
    v38 = (unint64_t *)(v37 + 32);
    v39 = v40;
    v41 = (char **)(v38 - 1);
    if (v40)
    {
      v42 = 0;
      v43 = 0;
      v44 = (char)*v34;
      do
      {
        v45 = (*v41)[v43];
        if (v45 == 92)
        {
          if (v42)
            break;
          (*v41)[v43] = 47;
          v39 = *v38;
        }
        else
        {
          v46 = v44 >= 0 && v45 < 0;
          v42 = v46;
        }
        ++v43;
      }
      while (v43 < v39);
    }
    else
    {
      v43 = 0;
    }
    if (sub_1DB6E3BD0((uint64_t)a2, *v41, v39, v36))
    {
      if (*__error() == 12)
      {
        v47 = "Can't allocate memory for Pathname";
        v48 = (_DWORD *)v134;
LABEL_55:
        v49 = 12;
        goto LABEL_169;
      }
      v50 = (char *)sub_1DB72D0D4(v36);
      archive_set_error((_DWORD *)v134, 79, "Pathname cannot be converted from %s to current locale.", v51, v52, v53, v54, v55, v50);
      v11 = 4294967276;
    }
    if (v43 != v39)
    {
      v56 = (const __int32 *)archive_entry_pathname_w(a2);
      if (v56)
      {
        v57 = v56;
        *(_QWORD *)(v10 + 128) = 0;
        v58 = wcslen(v56);
        sub_1DB72CE04((uint64_t *)(v10 + 120), v57, v58);
        v59 = *(__int32 **)(v10 + 120);
        v60 = *(_QWORD *)(v10 + 128);
        if (v60)
        {
          v61 = *(_DWORD **)(v10 + 120);
          do
          {
            if (*v61 == 92)
              *v61 = 47;
            ++v61;
            --v60;
          }
          while (v60);
        }
        archive_entry_copy_pathname_w((uint64_t)a2, v59);
      }
    }
    archive_entry_set_size((uint64_t)a2, *v14);
    if ((*v34 & 1) != 0)
      v62 = -32403;
    else
      v62 = -32330;
    archive_entry_set_mode((uint64_t)a2, v62);
    archive_entry_set_mtime((uint64_t)a2, *(_QWORD *)(v13 + 48 * v12 + 8), 0);
    v63 = *v14;
    *(_QWORD *)v10 = 0;
    *(_QWORD *)(v10 + 8) = v63;
    if (!(_DWORD)v63)
      *(_WORD *)(v10 + 146) = 257;
    __sprintf_chk((char *)(v10 + 208), 0, 0x40uLL, "CAB %d.%d (%s)", *(unsigned __int8 *)(v10 + 90), *(unsigned __int8 *)(v10 + 91), *(const char **)(*(_QWORD *)(v10 + 40) + 16));
    *(_QWORD *)(v134 + 24) = v10 + 208;
    return v11;
  }
  v102 = 0;
  v135 = -1;
  while (1)
  {
    v103 = *(_QWORD *)(v25 + 104);
    v136 = 0;
    v104 = sub_1DB6E2588(a1, 0x10uLL, 0, v20, v21, v22, v23, v24);
    if (!v104)
      break;
    v105 = v104;
    v133 = (unsigned int *)(v103 + 48 * v102);
    *v133 = *(_DWORD *)v104;
    v133[1] = *(_DWORD *)(v104 + 4);
    *((_WORD *)v133 + 8) = *(_WORD *)(v104 + 8);
    *((_QWORD *)v133 + 1) = sub_1DB6ECDB8((unsigned __int8 *)(v104 + 10));
    *((_BYTE *)v133 + 18) = *(_BYTE *)(v105 + 14);
    sub_1DB6E26F0(a1, 16, v106, v107, v108, v109, v110, v111);
    *(_QWORD *)(v25 + 64) += 16;
    v112 = 256;
    do
    {
      v113 = sub_1DB6E2588(a1, v112, &v136, v20, v21, v22, v23, v24);
      v114 = (_BYTE *)v113;
      --v112;
    }
    while (!v113 && v112);
    if (!v113)
      break;
    v115 = 0;
    while (*(_BYTE *)(v113 + v115))
    {
      if (++v115 > (unint64_t)(v136 - 1))
        goto LABEL_175;
    }
    if (v115 < 1)
      goto LABEL_175;
    v116 = (uint64_t *)(v103 + 48 * v102);
    v116[3] = 0;
    v116[4] = 0;
    v116 += 3;
    v116[2] = 0;
    sub_1DB6E323C(v116, v114, v115);
    sub_1DB6E26F0(a1, v115 + 1, v117, v118, v119, v120, v121, v122);
    *(_QWORD *)(v25 + 64) += v115 + 1;
    v123 = *v133;
    if (v123 > 0x7FFF8000)
      goto LABEL_175;
    v124 = v133[1];
    if ((unint64_t)(v124 + v123) > 0x7FFF8000)
      goto LABEL_175;
    v125 = *((unsigned __int16 *)v133 + 8);
    switch(v125)
    {
      case 0xFFFD:
        if (v102)
          goto LABEL_175;
LABEL_138:
        v135 = 0;
        v125 = 0;
        v88 = v133[1];
        goto LABEL_141;
      case 0xFFFF:
        if (v102 || *(_WORD *)(v25 + 82) != 1)
          goto LABEL_175;
        goto LABEL_138;
      case 0xFFFE:
        if (v102 != *(unsigned __int16 *)(v25 + 82) - 1)
          goto LABEL_175;
        v125 = *(unsigned __int16 *)(v25 + 80) - 1;
        break;
      default:
        if (v125 >= *(unsigned __int16 *)(v25 + 80))
          goto LABEL_175;
        break;
    }
    if (v125 < v135)
      goto LABEL_175;
LABEL_141:
    if (v125 == v135)
      v126 = v88;
    else
      v126 = 0;
    if (v126 != (_DWORD)v124 || (_DWORD)v123 && !*(_WORD *)(*(_QWORD *)(v25 + 96) + 96 * v125 + 4))
      goto LABEL_175;
    v88 = v124 + v123;
    ++v102;
    v135 = v125;
    if (v102 >= *(unsigned __int16 *)(v25 + 82))
      goto LABEL_148;
  }
  v47 = "Truncated CAB header";
  v48 = (_DWORD *)a1;
LABEL_168:
  v49 = 79;
LABEL_169:
  archive_set_error(v48, v49, v47, v20, v21, v22, v23, v24, v132);
  return 4294967266;
}

uint64_t sub_1DB6ECA50(uint64_t a1, size_t *a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v12 = **(_QWORD **)(a1 + 2472);
  if (*(unsigned __int16 *)(*(_QWORD *)(v12 + 48) + 16) >= 0xFFFDu)
  {
    *a2 = 0;
    *a3 = 0;
    *a4 = 0;
    archive_clear_error(a1);
    archive_set_error((_DWORD *)a1, 79, "Cannot restore this file split in multivolume.", v13, v14, v15, v16, v17, v31);
    return 4294967271;
  }
  if (!*(_BYTE *)(v12 + 148))
  {
    v19 = *(_QWORD *)(v12 + 152);
    if (v19)
    {
      if (!*(_QWORD *)(v12 + 56))
      {
        result = sub_1DB6ECE2C(a1, v19, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        if ((result & 0x80000000) != 0)
          return result;
        v19 = *(_QWORD *)(v12 + 152);
      }
      if (sub_1DB6ED0DC(a1, v19, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8) < 0)
        return 4294967266;
      *(_QWORD *)(v12 + 152) = 0;
    }
    *(_BYTE *)(v12 + 148) = 1;
  }
  v20 = *(_QWORD *)(v12 + 16);
  if (v20)
  {
    result = sub_1DB6ED0DC(a1, v20, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    *(_QWORD *)(v12 + 16) = 0;
    if ((result & 0x80000000) != 0)
      return result;
  }
  if (*(_BYTE *)(v12 + 145) || *(_BYTE *)(v12 + 146))
  {
    if (!*(_BYTE *)(v12 + 147))
      *(_BYTE *)(v12 + 147) = 1;
    *a4 = *(_QWORD *)v12;
    *a3 = 0;
    *a2 = 0;
    return 1;
  }
  v21 = **(uint64_t ***)(a1 + 2472);
  v32 = 0;
  if (!v21[1])
  {
    result = 0;
    *a2 = 0;
    *a3 = 0;
    *a4 = *v21;
    *((_BYTE *)v21 + 146) = 1;
    return result;
  }
  *a2 = sub_1DB6ED4E4(a1, (uint64_t)&v32, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  result = v32;
  if (v32 <= 0)
  {
    *a2 = 0;
    *a3 = 0;
    *a4 = 0;
    if (result || *(_WORD *)(v21[7] + 8))
      return result;
    archive_set_error((_DWORD *)a1, 79, "Invalid CFDATA", v22, v23, v24, v25, v26, v31);
    return 4294967266;
  }
  v28 = *v21;
  v27 = v21[1];
  if (v32 < v27)
    v27 = v32;
  *a3 = v27;
  *a4 = v28;
  v29 = v21[1] - v27;
  *v21 += v27;
  v21[1] = v29;
  if (!v29)
    *((_BYTE *)v21 + 146) = 1;
  v21[2] = v27;
  if (*(_WORD *)(v21[5] + 6))
    return 0;
  v30 = v21[7];
  if (*(_QWORD *)(v30 + 16) <= v27)
    return 0;
  result = 0;
  *(_QWORD *)(v30 + 16) = v27;
  return result;
}

uint64_t sub_1DB6ECC58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;

  v8 = **(_QWORD **)(a1 + 2472);
  if (*(_BYTE *)(v8 + 145))
    return 1;
  if (!*(_BYTE *)(v8 + 148))
  {
    *(_QWORD *)(v8 + 152) += *(_QWORD *)(v8 + 8);
    *(_QWORD *)(v8 + 8) = 0;
    *(_BYTE *)(v8 + 146) = 1;
    v12 = (_BYTE *)(v8 + 147);
LABEL_17:
    result = 0;
    *v12 = 1;
    return result;
  }
  v11 = *(_QWORD *)(v8 + 16);
  if (v11)
  {
    result = sub_1DB6ED0DC(a1, v11, a3, a4, a5, a6, a7, a8);
    *(_QWORD *)(v8 + 16) = 0;
    if ((result & 0x80000000) != 0)
      return result;
    goto LABEL_10;
  }
  if (*(_QWORD *)(v8 + 56) || (result = sub_1DB6ECE2C(a1, 0, a3, a4, a5, a6, a7, a8), (result & 0x80000000) == 0))
  {
LABEL_10:
    v12 = (_BYTE *)(v8 + 147);
    if (*(_BYTE *)(v8 + 147))
      return 0;
    if (sub_1DB6ED0DC(a1, *(_QWORD *)(v8 + 8), a3, a4, a5, a6, a7, a8) < 0)
      return 4294967266;
    if (!*(_WORD *)(*(_QWORD *)(v8 + 40) + 6))
    {
      v13 = *(_QWORD *)(v8 + 56);
      if (v13)
        *(_QWORD *)(v13 + 16) = 0;
    }
    *(_BYTE *)(v8 + 146) = 1;
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_1DB6ECD44(uint64_t a1)
{
  int v1;

  v1 = *(char *)(a1 + 4);
  if (v1 > 69)
  {
    switch(v1)
    {
      case 'F':
        return 1;
      case 'M':
        return 4;
      case 'S':
        return 3;
    }
    return 5;
  }
  if (*(_BYTE *)(a1 + 4))
  {
    if (v1 == 67)
      return 2;
    return 5;
  }
  if (*(_QWORD *)a1 == 1178817357)
    return 0;
  else
    return 5;
}

time_t sub_1DB6ECDB8(unsigned __int8 *a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;
  int v4;
  tm v6;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[3];
  v4 = a1[2];
  memset(&v6.tm_wday, 0, 32);
  v6.tm_mon = (((v2 | (v1 << 8)) >> 5) & 0xF) - 1;
  v6.tm_year = (v1 >> 1) + 80;
  v6.tm_hour = v3 >> 3;
  v6.tm_mday = v2 & 0x1F;
  v6.tm_sec = 2 * (v4 & 0x1F);
  v6.tm_min = ((v4 | (v3 << 8)) >> 5) & 0x3F;
  v6.tm_isdst = -1;
  return mktime(&v6);
}

uint64_t sub_1DB6ECE2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  char *v18;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  uint64_t v29;
  char *v30;
  _DWORD *v31;
  int v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;

  v9 = *(uint64_t **)(a1 + 2472);
  v10 = *v9;
  v11 = *(_QWORD *)(*v9 + 56);
  if (v11)
  {
    if (*(_WORD *)(v11 + 10))
      return 0;
    v13 = *(unsigned int **)(v10 + 40);
  }
  else
  {
    v13 = *(unsigned int **)(v10 + 40);
    v13[22] = 0;
    v14 = *v13;
    v15 = *(_QWORD *)(v10 + 64);
    if (v14 - v15 < 0)
    {
      v18 = (char *)*(unsigned __int16 *)(*(_QWORD *)(v10 + 48) + 16);
      if ((_DWORD)v18 == 65533 || (_DWORD)v18 == 0xFFFF)
      {
        v18 = 0;
      }
      else if ((_DWORD)v18 == 65534)
      {
        v18 = (char *)(*(unsigned __int16 *)(v10 + 80) - 1);
      }
      archive_set_error((_DWORD *)a1, -1, "Invalid offset of CFDATA in folder(%d) %jd < %jd", a4, a5, a6, a7, a8, v18);
      return 4294967266;
    }
    if (v14 != v15)
    {
      if (sub_1DB6E26F0(a1, v14 - v15, a3, a4, a5, a6, a7, a8) < 0)
        return 4294967266;
      v13 = *(unsigned int **)(v10 + 40);
      *(_QWORD *)(v10 + 64) = *v13;
    }
  }
  v16 = v13[22];
  if (v16 >= *((unsigned __int16 *)v13 + 2))
  {
    result = 0;
    if (*((_WORD *)v13 + 2))
    {
      *(_QWORD *)(v11 + 4) = 0;
    }
    else
    {
      *(_QWORD *)(v10 + 56) = v13 + 6;
      *(_OWORD *)(v13 + 18) = 0u;
      *(_OWORD *)(v13 + 14) = 0u;
      *(_OWORD *)(v13 + 10) = 0u;
      *(_OWORD *)(v13 + 6) = 0u;
    }
  }
  else
  {
    v13[22] = v16 + 1;
    *(_QWORD *)(v10 + 56) = v13 + 6;
    v13[16] = 0;
    v13[18] = 0;
    *((_QWORD *)v13 + 10) = 0;
    if ((*(_BYTE *)(v10 + 84) & 4) != 0)
      v17 = *(unsigned __int8 *)(v10 + 93) + 8;
    else
      v17 = 8;
    v20 = sub_1DB6E2588(a1, v17, 0, a4, a5, a6, a7, a8);
    if (!v20)
    {
      v30 = "Truncated CAB header";
LABEL_38:
      v31 = (_DWORD *)a1;
      v32 = 79;
LABEL_39:
      archive_set_error(v31, v32, v30, v21, v22, v23, v24, v25, v40);
      return 4294967266;
    }
    v26 = (const void *)v20;
    v13[6] = *(_DWORD *)v20;
    v27 = *(_WORD *)(v20 + 4);
    *((_WORD *)v13 + 14) = v27;
    *((_WORD *)v13 + 15) = v27;
    v28 = *(_WORD *)(v20 + 6);
    *((_WORD *)v13 + 16) = v28;
    *((_WORD *)v13 + 17) = v28;
    v13[9] = 0;
    *((_QWORD *)v13 + 5) = 0;
    if ((unsigned __int16)((unsigned __int16)(v27 + 26623) >> 11) < 0xDu || v28 > 0x8000u)
      goto LABEL_37;
    if (v28)
    {
      v29 = *(_QWORD *)(v10 + 40);
      if (*(_DWORD *)(v29 + 88) < (int)*(unsigned __int16 *)(v29 + 4) && v28 != 0x8000)
        goto LABEL_37;
    }
    else
    {
      if (*(unsigned __int16 *)(*(_QWORD *)(v10 + 48) + 16) <= 0xFFFDu)
        goto LABEL_37;
      v29 = *(_QWORD *)(v10 + 40);
      if (*(_DWORD *)(v29 + 88) < (int)*(unsigned __int16 *)(v29 + 4))
        goto LABEL_37;
    }
    if (!*(_WORD *)(v29 + 6) && v27 != v28)
    {
LABEL_37:
      v30 = "Invalid CFDATA";
      goto LABEL_38;
    }
    v33 = (void *)*((_QWORD *)v13 + 7);
    if (*((_QWORD *)v13 + 6) < v17)
    {
      free(v33);
      v33 = malloc_type_malloc(v17, 0xE0658A1uLL);
      *((_QWORD *)v13 + 7) = v33;
      if (!v33)
      {
        v30 = "Can't allocate memory for CAB data";
        v31 = (_DWORD *)a1;
        v32 = 12;
        goto LABEL_39;
      }
      *((_QWORD *)v13 + 6) = v17;
    }
    memcpy(v33, v26, v17);
    sub_1DB6E26F0(a1, v17, v34, v35, v36, v37, v38, v39);
    result = 0;
    *(_QWORD *)(v10 + 64) += v17;
  }
  return result;
}

uint64_t sub_1DB6ED0DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char *v41;
  uint64_t v42;

  v8 = a2;
  v10 = **(_QWORD ***)(a1 + 2472);
  v11 = sub_1DB6ED28C(a1, a2, a3, a4, a5, a6, a7, a8);
  if (v11 < 0)
    return -30;
  v18 = v11;
  if (v11)
  {
    v19 = (unsigned __int16 *)v10[7];
    do
    {
      v42 = 0;
      v20 = v19[2];
      if (!v19[2])
      {
        archive_set_error((_DWORD *)a1, 79, "Invalid CFDATA", v13, v14, v15, v16, v17, v41);
        return -30;
      }
      v21 = v19[5];
      if (v18 >= v21)
        v22 = v19[5];
      else
        v22 = v18;
      v23 = v22;
      if (v19[6] || (*(unsigned __int16 *)(v10[6] + 16) | 2) != 0xFFFF)
      {
        if (v22)
        {
          while (1)
          {
            sub_1DB6ED4E4(a1, (uint64_t)&v42, v12, v13, v14, v15, v16, v17);
            v30 = v42;
            if (v42 < 1)
              return -30;
            if (v42 > v23)
            {
              v42 = v23;
              v30 = v23;
            }
            if (sub_1DB6ED28C(a1, v30, v24, v25, v26, v27, v28, v29) < 0)
              return -30;
            v31 = (uint64_t)v23 <= v42;
            v23 -= v42;
            if (v31)
              goto LABEL_26;
          }
        }
        v39 = sub_1DB6ECE2C(a1, v20, v12, v13, v14, v15, v16, v17);
        if (v39 < 0)
          return v39;
        v19 = (unsigned __int16 *)v10[7];
        if (!v19[4] && *(unsigned __int16 *)(v10[6] + 16) > 0xFFFCu)
          return -30;
      }
      else
      {
        if (v18 < v21)
        {
          v19[7] += v22;
          v19[5] = v21 - v22;
          return v8;
        }
        sub_1DB6E26F0(a1, v20, v12, v13, v14, v15, v16, v17);
        v10[8] += v19[2];
        v19[3] = 0;
        v19[5] = 0;
        v39 = sub_1DB6ECE2C(a1, v32, v33, v34, v35, v36, v37, v38);
        if (v39 < 0)
          return v39;
        v19 = (unsigned __int16 *)v10[7];
        if (!v19[4] && *(unsigned __int16 *)(v10[6] + 16) > 0xFFFCu)
          return v8;
      }
LABEL_26:
      v31 = (uint64_t)v18 <= v22;
      v18 -= v22;
    }
    while (!v31);
  }
  return v8;
}

uint64_t sub_1DB6ED28C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int *v26;
  int v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  int *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v8 = a2;
  v10 = **(_QWORD ***)(a1 + 2472);
  v11 = v10[7];
  if (!*(_WORD *)(v10[5] + 6))
  {
    v15 = *(_QWORD *)(v11 + 16);
    if (v15 >= a2)
      v14 = a2;
    else
      v14 = *(_QWORD *)(v11 + 16);
    v8 = a2 - v14;
    *(_WORD *)(v11 + 14) += v14;
    *(_WORD *)(v11 + 10) -= v14;
    *(_QWORD *)(v11 + 16) = v15 - v14;
    if (!v14)
      return v8;
LABEL_12:
    if (!*(_DWORD *)v11 || (v16 = *(char **)(v11 + 56)) == 0)
    {
LABEL_37:
      sub_1DB6E26F0(a1, v14, a3, a4, a5, a6, a7, a8);
      v10[8] += v14;
      v28 = *(unsigned __int16 *)(v11 + 6);
      *(_WORD *)(v11 + 6) = v28 - v14;
      if (v28 == (unsigned __int16)v14)
      {
        v29 = *(uint64_t **)(a1 + 2472);
        v30 = *v29;
        v31 = *(int **)(*v29 + 56);
        v32 = *v31;
        if (*v31)
        {
          v33 = v31[12];
          if ((_DWORD)v33)
          {
            v31[10] = sub_1DB6EED00(v31 + 11, v33, v31[10]);
            v31[12] = 0;
          }
          if ((*(_WORD *)(v30 + 84) & 4) != 0)
            v34 = *(unsigned __int8 *)(v30 + 93) + 4;
          else
            v34 = 4;
          v35 = sub_1DB6EED00((int *)(*((_QWORD *)v31 + 4) + 4), v34, v31[10]);
          v31[10] = v35;
          if (v35 != v32)
          {
            archive_set_error((_DWORD *)a1, 79, "Checksum error CFDATA[%d] %x:%x in %d bytes", v36, v37, v38, v39, v40, (char *)(*(_DWORD *)(*(_QWORD *)(v30 + 40) + 88) - 1));
            return -25;
          }
        }
      }
      return v8;
    }
    v17 = *(_DWORD *)(v11 + 48);
    if (v17)
    {
      if (v17 > 3)
      {
        v20 = v14;
      }
      else
      {
        v18 = v14;
        do
        {
          v19 = *v16++;
          *(_DWORD *)(v11 + 48) = v17 + 1;
          *(_BYTE *)(v11 + v17 + 44) = v19;
          v20 = v18 - 1;
          v17 = *(_DWORD *)(v11 + 48);
        }
        while (v17 <= 3 && v18-- != 1);
      }
      if (v17 == 4)
      {
        *(_DWORD *)(v11 + 40) ^= *(_DWORD *)(v11 + 44);
        *(_DWORD *)(v11 + 48) = 0;
      }
      if (!v20)
        goto LABEL_36;
    }
    else
    {
      v20 = v14;
    }
    v22 = v20 & 3;
    v23 = v20 & 0xFFFFFFFC;
    if ((v20 & 0xFFFFFFFFFFFFFFFCLL) != 0)
    {
      v24 = *(_DWORD *)(v11 + 40);
      if (v23)
      {
        v25 = v23 >> 2;
        v26 = (int *)v16;
        do
        {
          v27 = *v26++;
          v24 ^= v27;
          --v25;
        }
        while (v25);
      }
      *(_DWORD *)(v11 + 40) = v24;
    }
    if ((v20 & 3) != 0)
      memcpy((void *)(v11 + 44), &v16[v20 - (v20 & 3)], v20 & 3);
    *(_DWORD *)(v11 + 48) = v22;
LABEL_36:
    *(_QWORD *)(v11 + 56) = 0;
    goto LABEL_37;
  }
  v12 = *(unsigned __int16 *)(v11 + 14);
  v13 = *(unsigned __int16 *)(v11 + 12) - v12;
  if (v13 >= 1)
  {
    if (v13 >= a2)
      v13 = a2;
    v8 = a2 - v13;
    *(_WORD *)(v11 + 14) = v12 + v13;
    *(_WORD *)(v11 + 10) -= v13;
  }
  v14 = *(_QWORD *)(v11 + 16);
  if (v14)
  {
    *(_QWORD *)(v11 + 16) = 0;
    goto LABEL_12;
  }
  return v8;
}

size_t sub_1DB6ED4E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  size_t result;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  _BYTE *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  unsigned int v91;
  int v92;
  int v93;
  uint64_t v94;
  int v95;
  signed int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  unint64_t v105;
  int v106;
  int v107;
  signed int v108;
  unsigned int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  unsigned int v114;
  size_t v115;
  char *v116;
  uint64_t v117;
  int v118;
  _BYTE *v120;
  _BYTE *v121;
  size_t v122;
  char v123;
  int v124;
  int v125;
  int v126;
  int v127;
  unsigned int v128;
  int v129;
  int v130;
  unint64_t v131;
  int v132;
  uint64_t v133;
  int v134;
  char v135;
  uint64_t v136;
  _BYTE *v137;
  int v138;
  int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  int v149;
  uint64_t v150;
  unsigned int v151;
  unint64_t v152;
  unint64_t v153;
  unsigned __int8 *v154;
  uint64_t v155;
  unint64_t v156;
  unsigned __int8 *v157;
  unint64_t v158;
  int v159;
  int v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  _DWORD *v166;
  int v167;
  size_t v168;
  size_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  int v175;
  void *v176;
  char *v177;
  int v178;
  int v179;
  uint64_t v180;
  int v181;
  int *v182;
  int v183;
  uint64_t v184;
  void *v185;
  void *v187;
  void *v188;
  uint64_t i;
  uint64_t v190;
  int v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  int v196;
  int *v197;
  z_stream *v198;
  int v199;
  size_t v200;
  size_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  int v214;
  _QWORD *v215;
  uint64_t v216;
  _OWORD *v217;
  unsigned int v218;
  uint64_t v219;
  unsigned int v220;
  uint64_t v221;
  unsigned __int8 *v222;
  unsigned int v223;
  int v224;
  unsigned int v225;
  int v226;
  signed int v227;
  unint64_t v228;
  unsigned int v229;
  int v230;
  unsigned int v231;
  _BYTE *v232;
  uint64_t v233;
  uint64_t v234;
  unsigned __int8 **v235;
  uint64_t v236;
  uint64_t v237;
  _OWORD v238[5];
  uint64_t v239;

  v8 = (_QWORD *)a2;
  v239 = *MEMORY[0x1E0C80C00];
  v10 = **(_QWORD **)(a1 + 2472);
  v11 = sub_1DB6ECE2C(a1, a2, a3, a4, a5, a6, a7, a8);
  if (v11 < 0)
  {
    LODWORD(v23) = v11;
    result = 0;
    v23 = (int)v23;
    goto LABEL_385;
  }
  v17 = *(_QWORD *)(v10 + 40);
  v18 = *(unsigned __int16 *)(v17 + 6);
  if (v18 == 3)
  {
    v24 = *(uint64_t **)(a1 + 2472);
    v25 = *v24;
    v26 = *(_QWORD *)(*v24 + 56);
    v27 = *(void **)(*v24 + 160);
    if (!v27)
    {
      *(_QWORD *)(v25 + 168) = 0x8000;
      v27 = malloc_type_malloc(0x8000uLL, 0x5E883D19uLL);
      *(_QWORD *)(v25 + 160) = v27;
      if (!v27)
        goto LABEL_315;
    }
    v28 = *(unsigned __int16 *)(v26 + 12);
    LODWORD(v29) = *(unsigned __int16 *)(v26 + 8);
    if ((_DWORD)v28 == (_DWORD)v29)
    {
      v30 = *(unsigned __int16 *)(v26 + 14);
      result = (size_t)v27 + v30;
      v23 = v28 - v30;
      goto LABEL_385;
    }
    v37 = *(_QWORD *)(v25 + 40);
    if (*(_BYTE *)(v37 + 92))
      goto LABEL_20;
    v181 = *(unsigned __int16 *)(v37 + 8);
    v182 = *(int **)(v25 + 440);
    if (!v182)
    {
      v182 = (int *)malloc_type_calloc(1uLL, 0x220uLL, 0x1030040BBC8BCA4uLL);
      *(_QWORD *)(v25 + 440) = v182;
      if (!v182)
        goto LABEL_360;
    }
    v182[135] = -25;
    if ((v181 - 22) < 0xFFFFFFF9)
      goto LABEL_360;
    v182[135] = -30;
    v183 = v182[1];
    v184 = dword_1DB74C298[v181 - 15];
    v182[1] = 1 << v181;
    v182[2] = (1 << v181) - 1;
    v185 = (void *)*((_QWORD *)v182 + 2);
    if (!v185 || v183 != 1 << v181)
    {
      free(v185);
      v187 = malloc_type_malloc(v182[1], 0x3F207F4CuLL);
      *((_QWORD *)v182 + 2) = v187;
      if (!v187)
        goto LABEL_360;
      free(*((void **)v182 + 12));
      v188 = malloc_type_malloc(8 * v184, 0x100004000313F17uLL);
      *((_QWORD *)v182 + 12) = v188;
      if (!v188)
        goto LABEL_360;
    }
    for (i = 0; i != 18; ++i)
      *((_DWORD *)v238 + i) = 1 << i;
    v190 = 0;
    v191 = 0;
    v192 = 0;
    v193 = *((_QWORD *)v182 + 12);
    if ((int)v184 <= 1)
      v194 = 1;
    else
      v194 = v184;
    while (v191)
    {
      v192 += *((_DWORD *)v238 + v191);
      if (v191 <= 16)
        goto LABEL_351;
LABEL_355:
      v197 = (int *)(v193 + 8 * v190);
      *v197 = v192;
      v197[1] = v191;
      if (++v190 == v194)
      {
        v182[6] = 0;
        *v182 = 0;
        *((_QWORD *)v182 + 13) = 0;
        v182[28] = 0;
        v182[18] = 1;
        *((_QWORD *)v182 + 8) = 0x100000001;
        if (sub_1DB6EED68((uint64_t)(v182 + 30), 8uLL, 8)
          || sub_1DB6EED68((uint64_t)(v182 + 108), 0x14uLL, 10)
          || sub_1DB6EED68((uint64_t)(v182 + 82), 8 * (int)v184 + 256, 16)
          || sub_1DB6EED68((uint64_t)(v182 + 56), 0xF9uLL, 16))
        {
LABEL_360:
          v165 = "Can't initialize LZX decompression.";
          goto LABEL_382;
        }
        v182[135] = 0;
        *(_BYTE *)(*(_QWORD *)(v25 + 40) + 92) = 1;
        LODWORD(v29) = *(unsigned __int16 *)(v26 + 8);
LABEL_20:
        v38 = *(_QWORD *)(v25 + 440);
        *(_DWORD *)(v38 + 112) = 0;
        *(_BYTE *)(v38 + 117) = 0;
        *(_QWORD *)(v25 + 432) = v28;
        if (v28 >= v29)
          goto LABEL_317;
        v29 = v29;
        v235 = (unsigned __int8 **)(v25 + 392);
        v215 = v8;
LABEL_22:
        v237 = 0;
        *(_QWORD *)(v25 + 416) = *(_QWORD *)(v25 + 160) + v28;
        *(_QWORD *)(v25 + 424) = v29 - v28;
        v39 = (unsigned __int8 *)sub_1DB6E2588(a1, 1uLL, &v237, v12, v13, v14, v15, v16);
        v41 = v237;
        if (v237 <= 0)
        {
          v165 = "Truncated CAB file data";
          goto LABEL_377;
        }
        v42 = v39;
        v43 = *(unsigned __int16 *)(v26 + 6);
        if (v237 > v43)
        {
          v237 = *(unsigned __int16 *)(v26 + 6);
          v41 = v43;
        }
        *(_QWORD *)(v25 + 392) = v39;
        *(_QWORD *)(v25 + 400) = v41;
        *(_QWORD *)(v25 + 408) = 0;
        v44 = *(unsigned int **)(v25 + 440);
        v45 = v44[135];
        if ((_DWORD)v45)
        {
          v46 = 0;
          goto LABEL_279;
        }
        v228 = v43;
        if (v41)
        {
          v47 = v44[28];
          v48 = *((_BYTE *)v44 + 117) && (int)(v47 - 65) <= -17;
          if (v48)
          {
            *((_QWORD *)v44 + 13) = (*((_QWORD *)v44 + 13) << 16) | ((unint64_t)*v39 << 8) | *((unsigned __int8 *)v44 + 116);
            *(_QWORD *)(v25 + 392) = v39 + 1;
            *(_QWORD *)(v25 + 400) = v41 - 1;
            v44[28] = v47 + 16;
            *((_BYTE *)v44 + 117) = 0;
          }
        }
        v233 = v41;
        v49 = *v44;
        if ((int)v49 <= 17)
        {
LABEL_35:
          v50 = *(_QWORD *)(v25 + 440);
          v52 = v50 + 104;
          v51 = *(_DWORD *)v50;
          while (1)
          {
            switch(v51)
            {
              case 0:
                v53 = *(_DWORD *)(v50 + 112);
                if (v53 <= 0)
                {
                  v54 = sub_1DB6EEE24(v235, v52);
                  v53 = *(_DWORD *)(v50 + 112);
                  if (!v54 && v53 <= 0)
                  {
                    v45 = 0;
                    *(_DWORD *)v50 = 0;
                    if (v233 == v228)
                      goto LABEL_266;
                    goto LABEL_278;
                  }
                }
                v55 = v53 - 1;
                v56 = (*(_QWORD *)(v50 + 104) >> v55) & 1;
                *(_BYTE *)(v50 + 40) = v56;
                *(_DWORD *)(v50 + 112) = v55;
LABEL_42:
                if ((_DWORD)v56)
                {
                  if (v55 <= 31)
                  {
                    v57 = sub_1DB6EEE24(v235, v52);
                    v55 = *(_DWORD *)(v50 + 112);
                    if (!v57 && v55 <= 31)
                    {
                      *(_DWORD *)v50 = 1;
                      goto LABEL_265;
                    }
                  }
                  v58 = *(_QWORD *)(v50 + 104);
                  v59 = v58 >> (v55 - 16);
                  v55 -= 32;
                  *(_DWORD *)(v50 + 36) = (unsigned __int16)(v58 >> v55) | ((unsigned __int16)v59 << 16);
                  *(_DWORD *)(v50 + 112) = v55;
                }
LABEL_48:
                if (v55 <= 2)
                {
                  v60 = sub_1DB6EEE24(v235, v52);
                  v55 = *(_DWORD *)(v50 + 112);
                  if (!v60 && v55 <= 2)
                  {
                    v147 = 2;
                    goto LABEL_264;
                  }
                }
                v61 = v55 - 3;
                v62 = (*(_QWORD *)(v50 + 104) >> v61) & 7;
                *(_BYTE *)(v50 + 41) = v62;
                *(_DWORD *)(v50 + 112) = v61;
                if ((v62 - 1) > 2)
                  goto LABEL_266;
LABEL_54:
                if (v61 <= 23)
                {
                  v63 = sub_1DB6EEE24(v235, v52);
                  v61 = *(_DWORD *)(v50 + 112);
                  if (!v63 && v61 <= 23)
                  {
                    v147 = 3;
                    goto LABEL_264;
                  }
                }
                v64 = *(_QWORD *)(v50 + 104);
                v65 = v64 >> (v61 - 8);
                v66 = v61 - 24;
                v67 = (unsigned __int16)(v64 >> v66) | ((unint64_t)v65 << 16);
                *(_QWORD *)(v50 + 48) = v67;
                *(_DWORD *)(v50 + 112) = v66;
                if (!v67)
                  goto LABEL_266;
                *(_QWORD *)(v50 + 56) = v67;
                v68 = *(unsigned __int8 *)(v50 + 41);
                if (v68 == 1)
                {
                  v51 = 11;
                }
                else
                {
                  if (v68 == 3)
                  {
LABEL_207:
                    if ((v66 & 0xF) != 0)
                    {
                      v128 = v66 & 0xFFFFFFF0;
                      goto LABEL_212;
                    }
                    if (v66 <= 15)
                    {
                      v149 = sub_1DB6EEE24(v235, v52);
                      v66 = *(_DWORD *)(v50 + 112);
                      if (!v149 && v66 < 16)
                      {
                        v147 = 4;
                        goto LABEL_264;
                      }
                    }
                    v128 = v66 - 16;
LABEL_212:
                    *(_DWORD *)(v50 + 112) = v128;
                    *(_DWORD *)(v50 + 80) = 0;
                    *(_DWORD *)v50 = 5;
LABEL_213:
                    while (2)
                    {
                      v129 = *(_DWORD *)(v50 + 112);
                      v130 = v129 - 32;
                      if (v129 >= 32)
                      {
                        v131 = *(_QWORD *)(v50 + 104);
                        *(_WORD *)(v50 + 76) = v131 >> (v129 - 16);
                        *(_DWORD *)(v50 + 112) = v130;
                        *(_WORD *)(v50 + 78) = v131 >> v130;
                        goto LABEL_223;
                      }
                      v132 = v129 - 16;
                      if (v129 < 16)
                      {
                        v134 = *(_DWORD *)(v50 + 80);
                        if (v134 <= 3)
                          goto LABEL_218;
LABEL_223:
                        *(_DWORD *)(v50 + 80) = 0;
                        v138 = *(_DWORD *)v50;
                        if (*(_DWORD *)v50 == 5)
                        {
                          v139 = *(_DWORD *)(v50 + 76);
                          *(_DWORD *)(v50 + 64) = v139;
                          if (v139 < 0)
                            goto LABEL_266;
                          v138 = 6;
                        }
                        else
                        {
                          if (v138 != 6)
                          {
                            if (v138 == 7)
                            {
                              v148 = *(_DWORD *)(v50 + 76);
                              *(_DWORD *)(v50 + 72) = v148;
                              if (v148 < 0)
                                goto LABEL_266;
                              *(_DWORD *)v50 = 8;
LABEL_233:
                              v141 = *(_QWORD *)(v50 + 56);
                              if (v141)
                              {
                                v142 = *(_QWORD *)(v25 + 424);
                                while (v142 >= 1)
                                {
                                  v143 = *(_QWORD *)(v25 + 400);
                                  if (v143 <= 0)
                                    goto LABEL_265;
                                  if (*(_DWORD *)(v50 + 4) - *(_DWORD *)(v50 + 24) < (int)v141)
                                    LODWORD(v141) = *(_DWORD *)(v50 + 4) - *(_DWORD *)(v50 + 24);
                                  if (v142 >= (int)v141)
                                    LODWORD(v142) = v141;
                                  if (v143 >= (int)v142)
                                    v144 = v142;
                                  else
                                    v144 = *(_QWORD *)(v25 + 400);
                                  memcpy(*(void **)(v25 + 416), *(const void **)(v25 + 392), v144);
                                  memcpy((void *)(*(_QWORD *)(v50 + 16) + *(int *)(v50 + 24)), *(const void **)(v25 + 392), v144);
                                  v145 = *(_QWORD *)(v25 + 400) - v144;
                                  *(_QWORD *)(v25 + 392) += v144;
                                  *(_QWORD *)(v25 + 400) = v145;
                                  v142 = *(_QWORD *)(v25 + 424) - v144;
                                  *(_QWORD *)(v25 + 416) += v144;
                                  *(_QWORD *)(v25 + 424) = v142;
                                  *(_QWORD *)(v25 + 432) += v144;
                                  *(_DWORD *)(v50 + 24) = (*(_DWORD *)(v50 + 24) + v144) & *(_DWORD *)(v50 + 8);
                                  v141 = *(_QWORD *)(v50 + 56) - v144;
                                  *(_QWORD *)(v50 + 56) = v141;
                                  if (!v141)
                                    goto LABEL_245;
                                }
                                goto LABEL_271;
                              }
LABEL_245:
                              if ((*(_BYTE *)(v50 + 48) & 1) != 0)
                              {
                                v146 = *(_QWORD *)(v25 + 400);
                                if (v146 <= 0)
                                {
                                  v147 = 9;
LABEL_264:
                                  *(_DWORD *)v50 = v147;
                                  goto LABEL_265;
                                }
                                ++*(_QWORD *)(v25 + 392);
                                *(_QWORD *)(v25 + 400) = v146 - 1;
                              }
                              *(_DWORD *)v50 = 2;
                              v45 = 1;
                              goto LABEL_278;
                            }
                            goto LABEL_232;
                          }
                          v140 = *(_DWORD *)(v50 + 76);
                          *(_DWORD *)(v50 + 68) = v140;
                          if (v140 < 0)
                            goto LABEL_266;
                          v138 = 7;
                        }
                        *(_DWORD *)v50 = v138;
LABEL_232:
                        if (v138 == 8)
                          goto LABEL_233;
                        continue;
                      }
                      break;
                    }
                    v133 = *(_QWORD *)(v50 + 104) >> v132;
                    *(_DWORD *)(v50 + 112) = v132;
                    *(_WORD *)(v50 + 76) = v133;
                    v134 = 2;
                    *(_DWORD *)(v50 + 80) = 2;
LABEL_218:
                    if (*(_BYTE *)(v50 + 117))
                    {
                      v135 = *(_BYTE *)(v50 + 116);
                      *(_DWORD *)(v50 + 80) = v134 + 1;
                      *(_BYTE *)(v50 + v134 + 76) = v135;
                      *(_BYTE *)(v50 + 117) = 0;
                      v134 = *(_DWORD *)(v50 + 80);
                      if (v134 > 3)
                        goto LABEL_223;
                    }
                    v136 = *(_QWORD *)(v25 + 400);
                    while (v136 > 0)
                    {
                      v137 = *(_BYTE **)(v25 + 392);
                      *(_QWORD *)(v25 + 392) = v137 + 1;
                      LOBYTE(v137) = *v137;
                      *(_DWORD *)(v50 + 80) = v134 + 1;
                      *(_BYTE *)(v50 + v134 + 76) = (_BYTE)v137;
                      v136 = *(_QWORD *)(v25 + 400) - 1;
                      *(_QWORD *)(v25 + 400) = v136;
                      v134 = *(_DWORD *)(v50 + 80);
                      if (v134 >= 4)
                        goto LABEL_223;
                    }
LABEL_265:
                    if (v233 == v228)
                    {
LABEL_266:
                      v45 = 4294967271;
                      *(_DWORD *)(v50 + 540) = -25;
                      goto LABEL_278;
                    }
LABEL_271:
                    v45 = 0;
LABEL_278:
                    v46 = v233 - *(_QWORD *)(v25 + 400) + *(_QWORD *)(v25 + 408);
                    *(_QWORD *)(v25 + 408) = v46;
LABEL_279:
                    if (v45 >= 2)
                    {
                      v205 = v45;
                      v165 = "LZX decompression failed (%d)";
                      goto LABEL_382;
                    }
                    *(_QWORD *)(v26 + 16) = v46;
                    *(_QWORD *)(v26 + 56) = v42;
                    if (sub_1DB6ED28C(a1, v46, v40, v12, v13, v14, v15, v16) < 0)
                      goto LABEL_384;
                    v28 = *(_QWORD *)(v25 + 432);
                    v29 = *(unsigned __int16 *)(v26 + 8);
                    if (v28 >= v29)
                    {
LABEL_317:
                      v168 = *(unsigned __int16 *)(v26 + 6);
                      if (!*(_WORD *)(v26 + 6))
                      {
LABEL_321:
                        v172 = *(_QWORD *)(v25 + 160);
                        if (v29 >= 0xB)
                        {
                          v173 = *(_QWORD *)(v25 + 440);
                          if (*(_BYTE *)(v173 + 40))
                          {
                            v174 = v172 + v29 - 10;
                            v175 = *(_DWORD *)(*(_QWORD *)(v25 + 40) + 88) << 15;
                            v176 = *(void **)(v25 + 160);
                            do
                            {
                              v177 = (char *)memchr(v176, 232, v174 - (_QWORD)v176);
                              if (!v177)
                                break;
                              v178 = v172 - (_DWORD)v177 - v175 + 0x8000;
                              v179 = *(_DWORD *)(v177 + 1);
                              if (v179 >= v178 && v179 < *(_DWORD *)(v173 + 36))
                              {
                                if (v179 < 0)
                                  v178 = *(_DWORD *)(v173 + 36);
                                *(_DWORD *)(v177 + 1) = v178 + v179;
                              }
                              v176 = v177 + 5;
                            }
                            while ((unint64_t)v176 < v174);
                            v172 = *(_QWORD *)(v25 + 160);
                          }
                        }
                        v180 = *(unsigned __int16 *)(v26 + 14);
                        result = v172 + v180;
                        *v8 = (unsigned __int16)v28 - v180;
                        *(_WORD *)(v26 + 12) = v28;
                        return result;
                      }
                      *(_QWORD *)&v238[0] = 0;
                      v169 = sub_1DB6E2588(a1, v168, v238, v12, v13, v14, v15, v16);
                      if (*(uint64_t *)&v238[0] > 0)
                      {
                        v171 = *(unsigned __int16 *)(v26 + 6);
                        *(_QWORD *)(v26 + 16) = v171;
                        *(_QWORD *)(v26 + 56) = v169;
                        if (sub_1DB6ED28C(a1, v171, v170, v12, v13, v14, v15, v16) < 0)
                          goto LABEL_384;
                        LODWORD(v29) = *(unsigned __int16 *)(v26 + 8);
                        goto LABEL_321;
                      }
LABEL_376:
                      v165 = "Truncated CAB header";
LABEL_377:
                      v166 = (_DWORD *)a1;
                      v167 = 79;
                      goto LABEL_383;
                    }
                    goto LABEL_22;
                  }
                  v51 = 10;
                }
                *(_DWORD *)v50 = v51;
                break;
              case 1:
                LODWORD(v56) = *(unsigned __int8 *)(v50 + 40);
                v55 = *(_DWORD *)(v50 + 112);
                goto LABEL_42;
              case 2:
                v55 = *(_DWORD *)(v50 + 112);
                goto LABEL_48;
              case 3:
                v61 = *(_DWORD *)(v50 + 112);
                goto LABEL_54;
              case 4:
                v66 = *(_DWORD *)(v50 + 112);
                goto LABEL_207;
              case 5:
              case 6:
              case 7:
                goto LABEL_213;
              case 8:
                goto LABEL_233;
              case 9:
                goto LABEL_245;
              case 10:
                if (*(_DWORD *)(v50 + 112) < 3 * *(_DWORD *)(v50 + 120)
                  && !sub_1DB6EEE24(v235, v52)
                  && *(_DWORD *)(v50 + 112) < 3 * *(_DWORD *)(v50 + 120))
                {
                  *(_DWORD *)v50 = 10;
                  if (v233 == v228)
                    goto LABEL_266;
                  goto LABEL_271;
                }
                *(_DWORD *)(v50 + 188) = 0;
                *(_OWORD *)(v50 + 172) = 0u;
                *(_OWORD *)(v50 + 156) = 0u;
                *(_OWORD *)(v50 + 140) = 0u;
                *(_OWORD *)(v50 + 124) = 0u;
                if (*(int *)(v50 + 120) >= 1)
                {
                  v69 = 0;
                  v70 = *(_DWORD *)(v50 + 112);
                  v71 = *(_QWORD *)(v50 + 192);
                  do
                  {
                    *(_BYTE *)(v71 + v69) = (*(_QWORD *)(v50 + 104) >> (v70 - 3)) & 7;
                    v72 = *(int *)(v50 + 120);
                    v71 = *(_QWORD *)(v50 + 192);
                    v73 = v50 + 120 + 4 * *(unsigned __int8 *)(v71 + v69);
                    ++*(_DWORD *)(v73 + 4);
                    v70 = *(_DWORD *)(v50 + 112) - 3;
                    *(_DWORD *)(v50 + 112) = v70;
                    ++v69;
                  }
                  while (v69 < v72);
                }
                if (!sub_1DB6EEF90((unsigned int *)(v50 + 120)))
                  goto LABEL_266;
LABEL_70:
                *(_DWORD *)(v50 + 536) = 0;
LABEL_71:
                if (!sub_1DB6EF11C((uint64_t)v235))
                {
                  v147 = 12;
                  goto LABEL_264;
                }
                if (!sub_1DB6EEF90((unsigned int *)(v50 + 432)))
                  goto LABEL_266;
                *(_DWORD *)(v50 + 536) = 0;
LABEL_74:
                v74 = sub_1DB6EF20C((uint64_t)v235, (int *)(v50 + 328), 256);
                if (v74 < 0)
                  goto LABEL_266;
                if (!v74)
                {
                  v147 = 13;
                  goto LABEL_264;
                }
                *(_DWORD *)(v50 + 536) = 0;
LABEL_77:
                if (!sub_1DB6EF11C((uint64_t)v235))
                {
                  v147 = 14;
                  goto LABEL_264;
                }
                if (!sub_1DB6EEF90((unsigned int *)(v50 + 432)))
                  goto LABEL_266;
                *(_DWORD *)(v50 + 536) = 256;
LABEL_80:
                v75 = sub_1DB6EF20C((uint64_t)v235, (int *)(v50 + 328), -1);
                if (v75 < 0)
                  goto LABEL_266;
                if (!v75)
                {
                  v147 = 15;
                  goto LABEL_264;
                }
                if (!sub_1DB6EEF90((unsigned int *)(v50 + 328)))
                  goto LABEL_266;
                *(_DWORD *)(v50 + 536) = 0;
LABEL_84:
                if (!sub_1DB6EF11C((uint64_t)v235))
                {
                  v147 = 16;
                  goto LABEL_264;
                }
                if (!sub_1DB6EEF90((unsigned int *)(v50 + 432)))
                  goto LABEL_266;
                *(_DWORD *)(v50 + 536) = 0;
LABEL_87:
                v76 = sub_1DB6EF20C((uint64_t)v235, (int *)(v50 + 224), -1);
                if (v76 < 0)
                  goto LABEL_266;
                if (!v76)
                {
                  v147 = 17;
                  goto LABEL_264;
                }
                if (!sub_1DB6EEF90((unsigned int *)(v50 + 224)))
                  goto LABEL_266;
                *(_DWORD *)v50 = 18;
                if ((int)*v44 < 18)
                  goto LABEL_35;
                v222 = v42;
                v44 = *(unsigned int **)(v25 + 440);
                v49 = *v44;
                goto LABEL_93;
              case 11:
                goto LABEL_70;
              case 12:
                goto LABEL_71;
              case 13:
                goto LABEL_74;
              case 14:
                goto LABEL_77;
              case 15:
                goto LABEL_80;
              case 16:
                goto LABEL_84;
              case 17:
                goto LABEL_87;
              default:
                continue;
            }
          }
        }
        v222 = v39;
LABEL_93:
        v238[0] = *(_OWORD *)(v44 + 26);
        v213 = *((_QWORD *)v44 + 12);
        v77 = *(_BYTE **)(v25 + 416);
        v219 = *(_QWORD *)(v25 + 424);
        v78 = (unint64_t)&v77[v219];
        v79 = *((_QWORD *)v44 + 2);
        v210 = *((_QWORD *)v44 + 24);
        v216 = *((_QWORD *)v44 + 37);
        v217 = v44 + 26;
        v236 = *((_QWORD *)v44 + 50);
        v80 = *((_QWORD *)v44 + 7);
        v211 = (int)v44[50];
        v81 = (int)v44[102];
        v82 = v44[7];
        v83 = v44[6];
        v84 = v44[2];
        v223 = v44[1];
        v214 = v44[23];
        v224 = v44[21];
        v227 = v44[22];
        v85 = v44[16];
        v220 = v44[17];
        v218 = v44[18];
        v212 = *((unsigned __int8 *)v44 + 41);
        v232 = &v77[v219];
        v234 = v79;
        v229 = v44[8];
        v231 = v84;
        v221 = (int)v44[76];
        while (2)
        {
          v86 = v85;
          v87 = v49;
LABEL_95:
          v85 = v86;
          v88 = v86;
LABEL_96:
          v49 = v87;
          v225 = v82;
          switch((int)v87)
          {
            case 18:
              if (!v80)
                goto LABEL_205;
              while (1)
              {
                if ((unint64_t)v77 >= v78)
                {
LABEL_202:
                  LODWORD(v49) = 18;
                  goto LABEL_203;
                }
                v89 = DWORD2(v238[0]);
                if (SDWORD2(v238[0]) < (int)v81)
                {
                  v90 = sub_1DB6EEE24(v235, (uint64_t)v238);
                  v89 = DWORD2(v238[0]);
                  if (v90)
                  {
                    v78 = (unint64_t)v232;
                    v85 = v88;
                    v79 = v234;
                    v84 = v231;
                  }
                  else
                  {
                    v78 = (unint64_t)v232;
                    v85 = v88;
                    v79 = v234;
                    v84 = v231;
                    if ((int)v81 > SDWORD2(v238[0]))
                    {
                      if (v233 != v228)
                        goto LABEL_202;
                      v91 = *(unsigned __int16 *)(*((_QWORD *)v44 + 53)
                                                + 2
                                                * (dword_1DB74C2C4[v81] & (*(_QWORD *)&v238[0] << (v81 - BYTE8(v238[0])))));
                      if ((int)v44[82] <= (int)v91)
                        v91 = 0;
                      DWORD2(v238[0]) -= *(unsigned __int8 *)(v236 + v91);
                      if (SDWORD2(v238[0]) < 0)
                        goto LABEL_275;
                      goto LABEL_111;
                    }
                  }
                }
                v91 = *(unsigned __int16 *)(*((_QWORD *)v44 + 53)
                                          + 2
                                          * (dword_1DB74C2C4[v81] & (*(_QWORD *)&v238[0] >> (v89 - v81))));
                if ((int)v44[82] <= (int)v91)
                  v91 = 0;
                DWORD2(v238[0]) = v89 - *(unsigned __int8 *)(v236 + v91);
LABEL_111:
                if (v91 > 0xFF)
                {
                  v224 = v91 & 7;
                  v227 = (v91 - 256) >> 3;
                  goto LABEL_115;
                }
                *(_BYTE *)(v79 + v83) = v91;
                v83 = (v83 + 1) & v84;
                *v77++ = v91;
                if (!--v80)
                {
LABEL_205:
                  *v44 = 2;
                  *v217 = v238[0];
                  *((_QWORD *)v44 + 7) = 0;
                  v44[21] = v224;
                  v44[22] = v227;
                  v44[16] = v85;
                  v44[17] = v220;
                  v44[18] = v218;
                  v44[7] = v225;
                  v44[8] = v229;
                  v44[6] = v83;
                  v45 = 1;
                  *(_QWORD *)(v25 + 424) = v78 - (_QWORD)v77;
                  goto LABEL_276;
                }
              }
            case 19:
LABEL_115:
              v92 = v224;
              if (v224 != 7)
                goto LABEL_129;
              v93 = DWORD2(v238[0]);
              v94 = v221;
              if (SDWORD2(v238[0]) >= (int)v221)
                goto LABEL_125;
              v95 = sub_1DB6EEE24(v235, (uint64_t)v238);
              v93 = DWORD2(v238[0]);
              if (v95)
              {
                v78 = (unint64_t)v232;
                v85 = v88;
                v79 = v234;
                v94 = v221;
                v84 = v231;
              }
              else
              {
                v94 = v221;
                v78 = (unint64_t)v232;
                v85 = v88;
                v79 = v234;
                v84 = v231;
                if ((int)v221 > SDWORD2(v238[0]))
                {
                  if (v233 != v228)
                  {
                    LODWORD(v49) = 19;
                    v224 = 7;
LABEL_203:
                    v8 = v215;
LABEL_204:
                    v45 = 0;
                    *v217 = v238[0];
                    *((_QWORD *)v44 + 7) = v80;
                    v44[21] = v224;
                    v44[22] = v227;
                    v44[23] = v214;
                    v44[16] = v85;
                    v44[17] = v220;
                    v44[18] = v218;
                    *v44 = v49;
                    v44[7] = v225;
                    v44[8] = v229;
                    v44[6] = v83;
                    *(_QWORD *)(v25 + 424) = v78 - (_QWORD)v77;
                    goto LABEL_277;
                  }
                  v96 = *(unsigned __int16 *)(*((_QWORD *)v44 + 40)
                                            + 2
                                            * (dword_1DB74C2C4[v221] & (*(_QWORD *)&v238[0] << (v221 - BYTE8(v238[0])))));
                  if ((int)v44[56] <= v96)
                    v96 = 0;
                  DWORD2(v238[0]) -= *(unsigned __int8 *)(v216 + v96);
                  if (SDWORD2(v238[0]) < 0)
                    goto LABEL_275;
LABEL_128:
                  v92 = v96 + 7;
LABEL_129:
                  v229 = v92 + 2;
                  if (v80 < v92 + 2)
                    goto LABEL_275;
                  v87 = 21;
                  v82 = v85;
                  if (v227)
                  {
                    if (v227 == 2)
                    {
                      v87 = 21;
                      v227 = 2;
                      v86 = v218;
                      v82 = v218;
                      v218 = v85;
                    }
                    else
                    {
                      if (v227 != 1)
                      {
                        v97 = *(_DWORD *)(v213 + 8 * v227 + 4);
LABEL_137:
                        v214 = v97;
                        if (v212 != 2 || (v98 = v97 - 3, v97 < 3))
                        {
                          v102 = DWORD2(v238[0]);
                          if (SDWORD2(v238[0]) < v97)
                          {
                            v103 = sub_1DB6EEE24(v235, (uint64_t)v238);
                            v102 = DWORD2(v238[0]);
                            if (v103)
                            {
                              v78 = (unint64_t)v232;
                              v97 = v214;
                              LODWORD(v85) = v88;
                              v79 = v234;
                              v84 = v231;
                            }
                            else
                            {
                              v97 = v214;
                              v78 = (unint64_t)v232;
                              LODWORD(v85) = v88;
                              v79 = v234;
                              v84 = v231;
                              if (SDWORD2(v238[0]) < v214)
                              {
                                if (v233 == v228)
                                  goto LABEL_275;
LABEL_273:
                                LODWORD(v49) = 20;
                                goto LABEL_203;
                              }
                            }
                          }
                          v110 = v97;
                          v111 = v102 - v97;
                          v109 = dword_1DB74C2C4[v110] & (*(_QWORD *)&v238[0] >> v111);
                          DWORD2(v238[0]) = v111;
                          goto LABEL_164;
                        }
                        v206 = v26;
                        v99 = DWORD2(v238[0]);
                        if (SDWORD2(v238[0]) < v98)
                        {
                          v100 = v98;
                          v101 = sub_1DB6EEE24(v235, (uint64_t)v238);
                          v99 = DWORD2(v238[0]);
                          if (v101)
                          {
                            v78 = (unint64_t)v232;
                            LODWORD(v85) = v88;
                            v79 = v234;
                            v84 = v231;
                            v98 = v100;
                          }
                          else
                          {
                            v98 = v100;
                            v78 = (unint64_t)v232;
                            LODWORD(v85) = v88;
                            v79 = v234;
                            v84 = v231;
                            if (SDWORD2(v238[0]) < v100)
                            {
                              v26 = v206;
                              if (v233 != v228)
                                goto LABEL_273;
LABEL_275:
                              v45 = 4294967271;
                              v44[135] = -25;
LABEL_276:
                              v8 = v215;
LABEL_277:
                              v150 = v219 - *(_QWORD *)(v25 + 424);
                              *(_QWORD *)(v25 + 416) += v150;
                              *(_QWORD *)(v25 + 432) += v150;
                              v42 = v222;
                              goto LABEL_278;
                            }
                          }
                        }
                        v105 = *(_QWORD *)&v238[0];
                        v106 = v99 - v98;
                        v225 = 8
                             * (dword_1DB74C2C4[v98] & (*(_QWORD *)&v238[0] >> (v99
                                                                              - v98)));
                        v107 = v98 + v211;
                        if (v99 >= v98 + (int)v211)
                          goto LABEL_158;
                        v208 = v98;
                        if (sub_1DB6EEE24(v235, (uint64_t)v238) || SDWORD2(v238[0]) >= v107)
                        {
                          v105 = *(_QWORD *)&v238[0];
                          v106 = DWORD2(v238[0]) - v208;
                          v78 = (unint64_t)v232;
                          LODWORD(v85) = v88;
                          v79 = v234;
                          v84 = v231;
LABEL_158:
                          v108 = *(unsigned __int16 *)(*((_QWORD *)v44 + 27)
                                                     + 2
                                                     * (dword_1DB74C2C4[v211] & (v105 >> (v106 - v211))));
                          if ((int)v44[30] <= v108)
                            v108 = 0;
                          DWORD2(v238[0]) = v106 - *(unsigned __int8 *)(v210 + v108);
                          v26 = v206;
                          goto LABEL_161;
                        }
                        if (v233 != v228)
                        {
                          LODWORD(v49) = 20;
                          v8 = v215;
                          v26 = v206;
                          v78 = (unint64_t)v232;
                          LODWORD(v85) = v88;
                          goto LABEL_204;
                        }
                        v108 = *(unsigned __int16 *)(*((_QWORD *)v44 + 27)
                                                   + 2
                                                   * (dword_1DB74C2C4[v211] & (*(_QWORD *)&v238[0] << (v211 - (BYTE8(v238[0]) - v208)))));
                        if ((int)v44[30] <= v108)
                          v108 = 0;
                        DWORD2(v238[0]) = DWORD2(v238[0]) - v208 - *(unsigned __int8 *)(v210 + v108);
                        v26 = v206;
                        v78 = (unint64_t)v232;
                        LODWORD(v85) = v88;
                        v79 = v234;
                        v84 = v231;
                        if (SDWORD2(v238[0]) < 0)
                          goto LABEL_275;
LABEL_161:
                        v109 = v108 + v225;
LABEL_164:
                        v82 = v109 + *(_DWORD *)(v213 + 8 * v227) - 2;
                        v218 = v220;
                        v220 = v85;
                        v85 = v82;
LABEL_165:
                        v207 = v26;
                        v104 = (v83 - v82) & v84;
LABEL_166:
                        v112 = v229;
                        v209 = v85;
                        while (2)
                        {
                          v226 = v49;
                          if (v104 <= v83)
                            v113 = v83;
                          else
                            v113 = v104;
                          v114 = v223 - v113;
                          v230 = v112;
                          if (v112 < (int)v114)
                            v114 = v112;
                          if ((unint64_t)&v77[v114] >= v78)
                            v115 = (v78 - (_DWORD)v77);
                          else
                            v115 = v114;
                          v116 = (char *)(v79 + v104);
                          if ((int)v115 < 8)
                          {
                            v118 = v104;
                            if ((int)v115 >= 1)
                            {
                              v117 = v83;
                              goto LABEL_184;
                            }
                          }
                          else
                          {
                            v117 = v83;
                            v118 = v104;
                            if ((int)v115 + v104 < v83 || (int)v115 + v83 < v104)
                            {
                              memcpy((void *)(v234 + v83), (const void *)(v79 + v104), v115);
                              memcpy(v77, v116, v115);
                              v84 = v231;
                              v79 = v234;
                              v85 = v209;
                              v78 = (unint64_t)v232;
                            }
                            else
                            {
LABEL_184:
                              v120 = (_BYTE *)(v79 + v117);
                              v121 = v77;
                              v122 = v115;
                              do
                              {
                                v123 = *v116++;
                                *v120++ = v123;
                                *v121++ = v123;
                                --v122;
                              }
                              while (v122);
                            }
                          }
                          v77 += (int)v115;
                          v104 = (v115 + v118) & v84;
                          v83 = (v115 + v83) & v84;
                          v80 -= (int)v115;
                          LODWORD(v49) = v226;
                          if ((unint64_t)v77 >= v78)
                            v124 = 22;
                          else
                            v124 = v226;
                          if ((unint64_t)v77 >= v78)
                            v125 = 7;
                          else
                            v125 = 0;
                          if (v230 <= (int)v115)
                            v126 = 0;
                          else
                            v126 = v115;
                          if (v230 <= (int)v115)
                          {
                            v127 = 10;
                          }
                          else
                          {
                            LODWORD(v49) = v124;
                            v127 = v125;
                          }
                          v112 = v230 - v126;
                          if (!v127)
                            continue;
                          break;
                        }
                        v225 = v104;
                        v229 = v230 - v126;
                        if (v127 == 7)
                        {
                          v8 = v215;
                          v26 = v207;
                          goto LABEL_204;
                        }
                        v26 = v207;
                        v49 = 18;
LABEL_201:
                        v82 = v225;
                        continue;
                      }
                      v87 = 21;
                      v227 = 1;
                      v86 = v220;
                      v82 = v220;
                      v220 = v85;
                    }
                    goto LABEL_95;
                  }
                  goto LABEL_96;
                }
              }
LABEL_125:
              v96 = *(unsigned __int16 *)(*((_QWORD *)v44 + 40)
                                        + 2
                                        * (dword_1DB74C2C4[v94] & (*(_QWORD *)&v238[0] >> (v93 - v94))));
              if ((int)v44[56] <= v96)
                v96 = 0;
              DWORD2(v238[0]) = v93 - *(unsigned __int8 *)(v216 + v96);
              goto LABEL_128;
            case 20:
              v97 = v214;
              goto LABEL_137;
            case 21:
              goto LABEL_165;
            case 22:
              v207 = v26;
              v104 = v82;
              goto LABEL_166;
            default:
              goto LABEL_201;
          }
        }
      }
    }
    v192 = v190;
LABEL_351:
    v195 = -2;
    if (v192)
    {
      v196 = v192;
      do
      {
        ++v195;
        v48 = v196 > 1;
        v196 >>= 1;
      }
      while (v48);
    }
    v191 = v195 & ~(v195 >> 31);
    goto LABEL_355;
  }
  if (v18 != 1)
  {
    if (*(_WORD *)(v17 + 6))
    {
      archive_set_error((_DWORD *)a1, 79, "Unsupported CAB compression : %s", v12, v13, v14, v15, v16, *(char **)(v17 + 16));
      result = 0;
      v23 = -25;
      goto LABEL_385;
    }
    v19 = *(_QWORD *)(**(_QWORD **)(a1 + 2472) + 56);
    result = sub_1DB6E2588(a1, 1uLL, v8, v12, v13, v14, v15, v16);
    v21 = *v8;
    if ((uint64_t)*v8 > 0)
    {
      v22 = *(unsigned __int16 *)(v19 + 10);
      if (v21 > v22)
      {
        *v8 = v22;
        v21 = v22;
      }
      *(_WORD *)(v19 + 12) = *(_WORD *)(v19 + 8);
      *(_QWORD *)(v19 + 16) = v21;
      *(_QWORD *)(v19 + 56) = result;
      return result;
    }
    goto LABEL_376;
  }
  v31 = *(uint64_t **)(a1 + 2472);
  v32 = *v31;
  v33 = *(_QWORD *)(*v31 + 56);
  v34 = *(void **)(*v31 + 160);
  if (!v34)
  {
    *(_QWORD *)(v32 + 168) = 0x8000;
    v34 = malloc_type_malloc(0x8000uLL, 0x8DA62905uLL);
    *(_QWORD *)(v32 + 160) = v34;
    if (!v34)
    {
LABEL_315:
      v165 = "No memory for CAB reader";
LABEL_316:
      v166 = (_DWORD *)a1;
      v167 = 12;
      goto LABEL_383;
    }
  }
  v35 = *(unsigned __int16 *)(v33 + 12);
  if ((_DWORD)v35 == *(unsigned __int16 *)(v33 + 8))
  {
    v36 = *(unsigned __int16 *)(v33 + 14);
    result = (size_t)v34 + v36;
    v23 = v35 - v36;
    goto LABEL_385;
  }
  if (!*(_BYTE *)(*(_QWORD *)(v32 + 40) + 92))
  {
    v198 = (z_stream *)(v32 + 272);
    *(_QWORD *)(v32 + 272) = 0;
    *(_DWORD *)(v32 + 280) = 0;
    *(_QWORD *)(v32 + 312) = 0;
    *(_QWORD *)(v32 + 288) = 0;
    *(_QWORD *)(v32 + 296) = 0;
    *(_DWORD *)(v32 + 304) = 0;
    if (*(_BYTE *)(v32 + 384))
      v199 = inflateReset(v198);
    else
      v199 = inflateInit2_(v198, -15, "1.2.12", 112);
    if (v199)
    {
      v165 = "Can't initialize deflate decompression.";
      goto LABEL_382;
    }
    *(_BYTE *)(v32 + 384) = 1;
    *(_BYTE *)(*(_QWORD *)(v32 + 40) + 92) = 1;
  }
  v151 = 2 * (*(unsigned __int16 *)(v33 + 6) == *(unsigned __int16 *)(v33 + 4));
  *(_QWORD *)(v32 + 312) = v35;
  while (1)
  {
    v152 = *(_QWORD *)(v32 + 312);
    v153 = *(unsigned __int16 *)(v33 + 8);
    if (v153 <= v152)
      break;
    *(_QWORD *)&v238[0] = 0;
    *(_QWORD *)(v32 + 296) = *(_QWORD *)(v32 + 160) + v152;
    *(_DWORD *)(v32 + 304) = v153 - v152;
    v154 = (unsigned __int8 *)sub_1DB6E2588(a1, 1uLL, v238, v12, v13, v14, v15, v16);
    v156 = *(_QWORD *)&v238[0];
    if (*(uint64_t *)&v238[0] <= 0)
      goto LABEL_376;
    v157 = v154;
    v158 = *(unsigned __int16 *)(v33 + 6);
    if (*(_QWORD *)&v238[0] > v158)
    {
      *(_QWORD *)&v238[0] = *(unsigned __int16 *)(v33 + 6);
      v156 = v158;
    }
    *(_QWORD *)(v32 + 272) = v154;
    *(_DWORD *)(v32 + 280) = v156;
    *(_QWORD *)(v32 + 288) = 0;
    if ((int)v151 < 1)
      goto LABEL_307;
    if (!v156)
      goto LABEL_363;
    if (v156 > v151)
    {
      if (v151 == 2)
      {
        if (*v154 != 67)
          goto LABEL_363;
        v159 = v154[1];
LABEL_305:
        if (v159 != 75)
        {
LABEL_363:
          v165 = "CFDATA incorrect(no MSZIP signature)";
          goto LABEL_382;
        }
      }
      else if (v151 == 1)
      {
        v159 = *v154;
        goto LABEL_305;
      }
      *(_QWORD *)(v32 + 272) = &v154[v151];
      *(_DWORD *)(v32 + 280) = v156 - v151;
      *(_QWORD *)(v32 + 288) = v151;
      v151 = 0;
LABEL_307:
      v162 = (char *)inflate((z_streamp)(v32 + 272), 0);
      v161 = (uint64_t)v162;
      if ((_DWORD)v162)
      {
        if ((_DWORD)v162 != 1)
          goto LABEL_374;
        LODWORD(v161) = 1;
      }
      v164 = *(_QWORD *)(v32 + 288);
      *(_QWORD *)(v33 + 16) = v164;
      *(_QWORD *)(v33 + 56) = v157;
      if (sub_1DB6ED28C(a1, v164, v163, v12, v13, v14, v15, v16) < 0)
        goto LABEL_384;
      goto LABEL_311;
    }
    v160 = *v154;
    if (v151 != 2)
      goto LABEL_300;
    if (v160 != 67)
      goto LABEL_363;
    if (v156 >= 2)
    {
      v160 = v154[1];
LABEL_300:
      if (v160 != 75)
        goto LABEL_363;
    }
    *(_QWORD *)(v33 + 16) = v156;
    *(_QWORD *)(v33 + 56) = v154;
    if (sub_1DB6ED28C(a1, v156, v155, v12, v13, v14, v15, v16) < 0)
      goto LABEL_384;
    LODWORD(v161) = 0;
    v151 -= LODWORD(v238[0]);
LABEL_311:
    if ((_DWORD)v161)
    {
      v152 = *(_QWORD *)(v32 + 312);
      LODWORD(v153) = *(unsigned __int16 *)(v33 + 8);
      break;
    }
  }
  if ((unsigned __int16)v152 < v153)
  {
    v205 = (unsigned __int16)v152;
    v165 = "Invalid uncompressed size (%d < %d)";
    goto LABEL_382;
  }
  v200 = *(unsigned __int16 *)(v33 + 6);
  if (*(_WORD *)(v33 + 6))
  {
    *(_QWORD *)&v238[0] = 0;
    v201 = sub_1DB6E2588(a1, v200, v238, v12, v13, v14, v15, v16);
    if (*(uint64_t *)&v238[0] <= 0)
      goto LABEL_376;
    v203 = *(unsigned __int16 *)(v33 + 6);
    *(_QWORD *)(v33 + 16) = v203;
    *(_QWORD *)(v33 + 56) = v201;
    if (sub_1DB6ED28C(a1, v203, v202, v12, v13, v14, v15, v16) < 0)
      goto LABEL_384;
  }
  if (*(_DWORD *)(*(_QWORD *)(v32 + 40) + 88) >= (int)*(unsigned __int16 *)(*(_QWORD *)(v32 + 40) + 4)
    || (v161 = inflateReset((z_streamp)(v32 + 272)), !(_DWORD)v161)
    && (v161 = inflateSetDictionary((z_streamp)(v32 + 272), *(const Bytef **)(v32 + 160), *(unsigned __int16 *)(v33 + 8)), !(_DWORD)v161))
  {
    v204 = *(unsigned __int16 *)(v33 + 14);
    result = *(_QWORD *)(v32 + 160) + v204;
    *v8 = (unsigned __int16)v152 - v204;
    *(_WORD *)(v33 + 12) = v152;
    return result;
  }
LABEL_374:
  if ((_DWORD)v161 == -4)
  {
    v165 = "Out of memory for deflate decompression";
    goto LABEL_316;
  }
  v205 = v161;
  v165 = "Deflate decompression failed (%d)";
LABEL_382:
  v166 = (_DWORD *)a1;
  v167 = -1;
LABEL_383:
  archive_set_error(v166, v167, v165, v12, v13, v14, v15, v16, (char *)v205);
LABEL_384:
  result = 0;
  v23 = -30;
LABEL_385:
  *v8 = v23;
  return result;
}

uint64_t sub_1DB6EED00(int *a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  int *v4;
  int v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  int v10;

  if (a2 >= 4)
  {
    v3 = a2 >> 2;
    v4 = a1;
    do
    {
      v5 = *v4++;
      a3 ^= v5;
      --v3;
    }
    while (v3);
  }
  v6 = 0;
  v7 = (unsigned __int8 *)a1 + (a2 & 0xFFFFFFFFFFFFFFFCLL);
  v8 = a2 & 3;
  switch(v8)
  {
    case 1:
      goto LABEL_9;
    case 2:
LABEL_8:
      v10 = *v7++;
      v6 |= v10 << 8;
LABEL_9:
      v6 |= *v7;
      return v6 ^ a3;
    case 3:
      v9 = *v7++;
      v6 = v9 << 16;
      goto LABEL_8;
  }
  return v6 ^ a3;
}

uint64_t sub_1DB6EED68(uint64_t a1, size_t a2, int a3)
{
  void *v6;
  void *v7;
  uint64_t result;
  void *v9;

  v6 = *(void **)(a1 + 72);
  if (v6 && *(_DWORD *)a1 == (_DWORD)a2)
  {
    bzero(v6, a2);
  }
  else
  {
    free(v6);
    v7 = malloc_type_calloc(a2, 1uLL, 0x100004077774924uLL);
    *(_QWORD *)(a1 + 72) = v7;
    if (!v7)
      return 4294967266;
    *(_DWORD *)a1 = a2;
  }
  if (*(_QWORD *)(a1 + 96))
    return 0;
  v9 = malloc_type_malloc(2 << a3, 0x1000040BDFB0063uLL);
  *(_QWORD *)(a1 + 96) = v9;
  if (v9)
  {
    result = 0;
    *(_DWORD *)(a1 + 84) = a3;
    return result;
  }
  return 4294967266;
}

uint64_t sub_1DB6EEE24(unsigned __int8 **a1, uint64_t a2)
{
  int v2;
  int v3;
  int i;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_DWORD *)(a2 + 8);
  v3 = 64 - v2;
  for (i = v2 + 48; ; i += 16)
  {
    v5 = v3 >> 4;
    if (v3 >> 4 == 3)
    {
      v6 = (uint64_t)a1[1];
      v7 = (unsigned __int8 *)(v6 - 6);
      if (v6 < 6)
        goto LABEL_9;
      v12 = (uint64_t)*a1;
      *(_QWORD *)a2 = (*(_QWORD *)a2 << 48) | ((unint64_t)(*a1)[1] << 40) | ((unint64_t)**a1 << 32) | ((unint64_t)(*a1)[3] << 24) | ((unint64_t)(*a1)[2] << 16) | ((unint64_t)(*a1)[5] << 8) | (*a1)[4];
      *a1 = (unsigned __int8 *)(v12 + 6);
      a1[1] = v7;
LABEL_14:
      *(_DWORD *)(a2 + 8) = i;
      return 1;
    }
    if (v5 == 4)
    {
      v6 = (uint64_t)a1[1];
      if (v6 < 8)
        goto LABEL_9;
      v11 = (uint64_t)*a1;
      *(_QWORD *)a2 = ((unint64_t)(*a1)[1] << 56) | ((unint64_t)**a1 << 48) | ((unint64_t)(*a1)[3] << 40) | ((unint64_t)(*a1)[2] << 32) | ((unint64_t)(*a1)[5] << 24) | ((unint64_t)(*a1)[4] << 16) | ((unint64_t)(*a1)[7] << 8) | (*a1)[6];
      *a1 = (unsigned __int8 *)(v11 + 8);
      a1[1] = (unsigned __int8 *)(v6 - 8);
      i += 16;
      goto LABEL_14;
    }
    if (!v5)
      return 1;
    v6 = (uint64_t)a1[1];
LABEL_9:
    if (v6 <= 1)
      break;
    v8 = (uint64_t)*a1;
    *(_QWORD *)a2 = **a1 | (*(_QWORD *)a2 << 16) | ((unint64_t)(*a1)[1] << 8);
    *a1 = (unsigned __int8 *)(v8 + 2);
    a1[1] = (unsigned __int8 *)(v6 - 2);
    *(_DWORD *)(a2 + 8) = i - 32;
    v3 -= 16;
  }
  v9 = 0;
  if (v6 == 1)
  {
    v10 = (*a1)++;
    *(_BYTE *)(a2 + 12) = *v10;
    a1[1] = 0;
    *(_BYTE *)(a2 + 13) = 1;
  }
  return v9;
}

uint64_t sub_1DB6EEF90(unsigned int *a1)
{
  uint64_t v1;
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  char v9;
  uint64_t v10;
  int *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE v23[4];
  _DWORD v24[17];
  _DWORD v25[16];
  uint64_t v26;

  v1 = 0;
  v2 = 0;
  v3 = 0;
  v26 = *MEMORY[0x1E0C80C00];
  v4 = 0x8000;
  do
  {
    v25[v1] = v2;
    v24[v1] = v4;
    v5 = a1[v1++ + 2];
    if (v5)
      v3 = v1;
    v2 += v5 * v4;
    v4 >>= 1;
  }
  while (v1 != 16);
  if ((_WORD)v2)
    return 0;
  v6 = a1[21];
  if (v3 > v6)
    return 0;
  a1[20] = v3;
  if (v3 <= 15 && v3 >= 1)
  {
    v9 = 16 - v3;
    v10 = (v3 + 1);
    v11 = v24;
    v12 = v25;
    v13 = v10 - 1;
    do
    {
      *v12++ >>= v9;
      *v11++ >>= v9;
      --v13;
    }
    while (v13);
  }
  v7 = 1;
  v14 = *((_QWORD *)a1 + 12);
  v15 = *((_QWORD *)a1 + 9);
  v16 = *a1;
  a1[22] = 0;
  if ((int)v16 >= 1)
  {
    v17 = 0;
    v18 = 1 << v6;
    do
    {
      if (*(_BYTE *)(v15 + v17))
      {
        if (v18 < *(unsigned __int8 *)(v15 + v17))
          return 0;
        v19 = (int)v24[*(unsigned __int8 *)(v15 + v17) + 16];
        v20 = *(unsigned int *)&v23[4 * *(unsigned __int8 *)(v15 + v17)];
        v24[*(unsigned __int8 *)(v15 + v17) + 16] = v20 + v19;
        if ((int)v20 + (int)v19 > v18)
          return 0;
        if ((int)v20 >= 1)
        {
          v21 = v14 + 2 * v19;
          v22 = v20 + 1;
          do
            *(_WORD *)(v21 + 2 * (v22-- - 2)) = v17;
          while (v22 > 1);
        }
      }
      ++v17;
    }
    while (v17 != v16);
    return 1;
  }
  return v7;
}

uint64_t sub_1DB6EF11C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 48);
  LODWORD(v3) = *(_DWORD *)(v2 + 536);
  if (!(_DWORD)v3)
  {
    *(_DWORD *)(v2 + 500) = 0;
    *(_OWORD *)(v2 + 484) = 0u;
    *(_OWORD *)(v2 + 468) = 0u;
    *(_OWORD *)(v2 + 452) = 0u;
    *(_OWORD *)(v2 + 436) = 0u;
  }
  if ((int)v3 >= *(_DWORD *)(v2 + 432))
  {
    result = 1;
  }
  else
  {
    v3 = (int)v3;
    v4 = *(_DWORD *)(v2 + 112);
    while (1)
    {
      if (v4 <= 3)
      {
        v5 = sub_1DB6EEE24((unsigned __int8 **)a1, v2 + 104);
        v4 = *(_DWORD *)(v2 + 112);
        if (!v5 && v4 < 4)
          break;
      }
      *(_BYTE *)(*(_QWORD *)(v2 + 504) + v3) = (*(_QWORD *)(v2 + 104) >> (v4 - 4)) & 0xF;
      v6 = v2 + 432 + 4 * *(unsigned __int8 *)(*(_QWORD *)(v2 + 504) + v3);
      ++*(_DWORD *)(v6 + 4);
      v4 = *(_DWORD *)(v2 + 112) - 4;
      *(_DWORD *)(v2 + 112) = v4;
      if (++v3 >= *(int *)(v2 + 432))
      {
        result = 1;
        goto LABEL_12;
      }
    }
    result = 0;
  }
LABEL_12:
  *(_DWORD *)(v2 + 536) = v3;
  return result;
}

uint64_t sub_1DB6EF20C(uint64_t a1, int *a2, int a3)
{
  int v3;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  size_t v38;
  int v39;
  uint64_t result;

  v3 = a3;
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_DWORD *)(v6 + 536);
  if (v7)
  {
    if ((a3 & 0x80000000) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  a2[17] = 0;
  *(_OWORD *)(a2 + 13) = 0u;
  *(_OWORD *)(a2 + 9) = 0u;
  *(_OWORD *)(a2 + 5) = 0u;
  *(_OWORD *)(a2 + 1) = 0u;
  if (a3 < 0)
LABEL_3:
    v3 = *a2;
LABEL_4:
  if (v7 >= v3)
  {
LABEL_41:
    result = 1;
  }
  else
  {
    while (1)
    {
      *(_DWORD *)(v6 + 536) = v7;
      v8 = *(_DWORD *)(v6 + 112);
      v9 = *(_DWORD *)(v6 + 512);
      if (v8 < v9)
      {
        v10 = sub_1DB6EEE24((unsigned __int8 **)a1, v6 + 104);
        v8 = *(_DWORD *)(v6 + 112);
        v9 = *(_DWORD *)(v6 + 512);
        if (!v10 && v8 < v9)
          break;
      }
      v11 = *(unsigned __int16 *)(*(_QWORD *)(v6 + 528)
                                + 2
                                * (dword_1DB74C2C4[v9] & (*(_QWORD *)(v6 + 104) >> (v8
                                                                                                - v9))));
      if (*(_DWORD *)(v6 + 432) <= (signed int)v11)
        v11 = 0;
      switch(v11)
      {
        case 0x13u:
          v15 = *(_QWORD *)(v6 + 504);
          v16 = *(unsigned __int8 *)(v15 + 19);
          if (v8 < v9 + v16 + 1)
          {
            v17 = sub_1DB6EEE24((unsigned __int8 **)a1, v6 + 104);
            v15 = *(_QWORD *)(v6 + 504);
            if (v17)
            {
              v16 = *(unsigned __int8 *)(v15 + 19);
              v8 = *(_DWORD *)(v6 + 112);
            }
            else
            {
              v8 = *(_DWORD *)(v6 + 112);
              v16 = *(unsigned __int8 *)(v15 + 19);
              if (v8 < v16 + *(_DWORD *)(v6 + 512) + 1)
                goto LABEL_46;
            }
          }
          v28 = v8 - v16;
          *(_DWORD *)(v6 + 112) = v28;
          v29 = *(_QWORD *)(v6 + 104);
          v30 = v28 - 1;
          v31 = (v29 >> (v28 - 1)) & 1 | 4;
          if (v31 + v7 > v3)
            return 0xFFFFFFFFLL;
          *(_DWORD *)(v6 + 112) = v30;
          v32 = *(unsigned __int16 *)(*(_QWORD *)(v6 + 528)
                                    + 2
                                    * (dword_1DB74C2C4[*(int *)(v6 + 512)] & (v29 >> (v30
                                                                                                  - *(_DWORD *)(v6 + 512)))));
          if (*(_DWORD *)(v6 + 432) <= (signed int)v32)
            v32 = 0;
          *(_DWORD *)(v6 + 112) = v30 - *(unsigned __int8 *)(v15 + v32);
          v33 = (int)(*(unsigned __int8 *)(*((_QWORD *)a2 + 9) + v7) - v32 + 17) % 17;
          if (v33 < 0)
            return 0xFFFFFFFFLL;
          v34 = v7;
          v35 = v31;
          do
          {
            v7 = v34 + 1;
            *(_BYTE *)(*((_QWORD *)a2 + 9) + v34++) = v33;
            --v35;
          }
          while (v35);
          a2[v33 + 1] += v31;
          break;
        case 0x12u:
          v18 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 504) + 18);
          if (v8 < v18 + 5)
          {
            v19 = sub_1DB6EEE24((unsigned __int8 **)a1, v6 + 104);
            v20 = *(_QWORD *)(v6 + 504);
            if (v19)
            {
              v18 = *(unsigned __int8 *)(v20 + 18);
              v8 = *(_DWORD *)(v6 + 112);
            }
            else
            {
              v8 = *(_DWORD *)(v6 + 112);
              v18 = *(unsigned __int8 *)(v20 + 18);
              if (v8 < v18 + 5)
                goto LABEL_46;
            }
          }
          v36 = v8 - v18;
          *(_DWORD *)(v6 + 112) = v36;
          v37 = v36 - 5;
          v38 = ((*(_QWORD *)(v6 + 104) >> v37) & 0x1F) + 20;
          v39 = v38 + v7;
          if ((int)v38 + v7 > v3)
            return 0xFFFFFFFFLL;
          *(_DWORD *)(v6 + 112) = v37;
          bzero((void *)(*((_QWORD *)a2 + 9) + v7), v38);
          v7 = v39;
          break;
        case 0x11u:
          v12 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 504) + 17);
          if (v8 < v12 + 4)
          {
            v13 = sub_1DB6EEE24((unsigned __int8 **)a1, v6 + 104);
            v14 = *(_QWORD *)(v6 + 504);
            if (v13)
            {
              v12 = *(unsigned __int8 *)(v14 + 17);
              v8 = *(_DWORD *)(v6 + 112);
            }
            else
            {
              v8 = *(_DWORD *)(v6 + 112);
              v12 = *(unsigned __int8 *)(v14 + 17);
              if (v8 < v12 + 4)
                goto LABEL_46;
            }
          }
          v24 = v8 - v12;
          *(_DWORD *)(v6 + 112) = v24;
          v25 = v24 - 4;
          v26 = ((*(_QWORD *)(v6 + 104) >> (v24 - 4)) & 0xF) + 4;
          if (v26 + v7 > v3)
            return 0xFFFFFFFFLL;
          *(_DWORD *)(v6 + 112) = v25;
          v27 = v7;
          do
          {
            v7 = v27 + 1;
            *(_BYTE *)(*((_QWORD *)a2 + 9) + v27++) = 0;
            --v26;
          }
          while (v26);
          break;
        default:
          *(_DWORD *)(v6 + 112) = v8 - *(unsigned __int8 *)(*(_QWORD *)(v6 + 504) + v11);
          v21 = *((_QWORD *)a2 + 9);
          v22 = (int)(*(unsigned __int8 *)(v21 + v7) - v11 + 17) % 17;
          if (v22 < 0)
            return 0xFFFFFFFFLL;
          v23 = v7;
          ++a2[v22 + 1];
          ++v7;
          *(_BYTE *)(v21 + v23) = v22;
          break;
      }
      if (v7 >= v3)
        goto LABEL_41;
    }
LABEL_46:
    result = 0;
  }
  *(_DWORD *)(v6 + 536) = v7;
  return result;
}

uint64_t archive_entry_copy_stat(_DWORD *a1, uint64_t a2)
{
  archive_entry_set_atime((uint64_t)a1, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40));
  archive_entry_set_ctime((uint64_t)a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72));
  archive_entry_set_mtime((uint64_t)a1, *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 56));
  archive_entry_set_birthtime((uint64_t)a1, *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 88));
  archive_entry_set_dev(a1, *(_DWORD *)a2);
  archive_entry_set_gid((uint64_t)a1, *(unsigned int *)(a2 + 20));
  archive_entry_set_uid((uint64_t)a1, *(unsigned int *)(a2 + 16));
  archive_entry_set_ino((uint64_t)a1, *(_QWORD *)(a2 + 8));
  archive_entry_set_nlink((uint64_t)a1, *(unsigned __int16 *)(a2 + 6));
  archive_entry_set_rdev(a1, *(_DWORD *)(a2 + 24));
  archive_entry_set_size((uint64_t)a1, *(_QWORD *)(a2 + 96));
  return archive_entry_set_mode((uint64_t)a1, *(_WORD *)(a2 + 4));
}

_QWORD *archive_entry_linkresolver_new()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;

  v0 = malloc_type_calloc(1uLL, 0x28uLL, 0x10A004050C3A8F3uLL);
  v1 = v0;
  if (v0)
  {
    v0[3] = 1024;
    v2 = malloc_type_calloc(0x400uLL, 8uLL, 0x2004093837F09uLL);
    *v1 = v2;
    if (!v2)
    {
      free(v1);
      return 0;
    }
  }
  return v1;
}

uint64_t archive_entry_linkresolver_set_strategy(uint64_t result, unsigned int a2)
{
  int v2;

  switch(((a2 & 0xFF0000) - 0x10000) >> 16)
  {
    case 0u:
      if (a2 >> 1 != 32770)
        goto LABEL_5;
      v2 = 3;
      goto LABEL_6;
    case 1u:
    case 2u:
    case 3u:
    case 9u:
      *(_DWORD *)(result + 32) = 0;
      return result;
    case 7u:
      v2 = 1;
      goto LABEL_6;
    default:
LABEL_5:
      v2 = 2;
LABEL_6:
      *(_DWORD *)(result + 32) = v2;
      return result;
  }
}

_QWORD *sub_1DB6EF740(uint64_t *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v4 = a1[1];
  if (v4)
  {
    archive_entry_free(*(void ***)(v4 + 16));
    archive_entry_free(*(void ***)(a1[1] + 24));
    free((void *)a1[1]);
    a1[1] = 0;
  }
  v5 = a1[3];
  if (!v5)
    return 0;
  v6 = 0;
  v7 = *a1;
  while (1)
  {
    result = *(_QWORD **)(v7 + 8 * v6);
    if (result)
      break;
LABEL_15:
    if (++v6 == v5)
      return 0;
  }
  while (1)
  {
    v9 = result[3];
    v10 = v9 == 0;
    v11 = !v9 && (a2 & 2) == 0;
    v12 = !v10 && (a2 & 1) == 0;
    v13 = (_QWORD *)*result;
    if (!v12 && !v11)
      break;
    result = (_QWORD *)*result;
    if (!v13)
      goto LABEL_15;
  }
  v14 = (_QWORD *)(v7 + 8 * v6);
  if (v13)
    v13[1] = result[1];
  if (result[1])
    v14 = (_QWORD *)result[1];
  *v14 = v13;
  v15 = a1[2] - 1;
  a1[1] = (uint64_t)result;
  a1[2] = v15;
  return result;
}

_QWORD *archive_entry_linkify(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  _QWORD *result;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char **v20;

  *a3 = 0;
  if (*a2)
  {
    result = (_QWORD *)archive_entry_nlink(*a2);
    if ((_DWORD)result != 1)
    {
      result = (_QWORD *)archive_entry_filetype(*a2);
      if ((_DWORD)result != 0x4000)
      {
        result = (_QWORD *)archive_entry_filetype(*a2);
        if ((_DWORD)result != 24576)
        {
          result = (_QWORD *)archive_entry_filetype(*a2);
          if ((_DWORD)result != 0x2000)
          {
            v7 = *(_DWORD *)(a1 + 32);
            switch(v7)
            {
              case 3:
                v13 = sub_1DB6EF9B0(a1, (_DWORD *)*a2);
                v14 = (uint64_t *)*a2;
                if (v13)
                {
                  v15 = v13;
                  *a2 = v13[3];
                  v13[3] = (uint64_t)v14;
                  archive_entry_unset_size(*a2);
                  v16 = *a2;
                  v17 = (char *)archive_entry_pathname((uint64_t *)v15[2]);
                  result = (_QWORD *)archive_entry_copy_hardlink(v16, v17);
                  if (!*((_DWORD *)v15 + 10))
                  {
                    *a3 = v15[3];
                    v15[3] = 0;
                  }
                }
                else
                {
                  result = sub_1DB6EFAC8((char **)a1, v14);
                  if (result)
                  {
                    result[3] = *a2;
                    *a2 = 0;
                  }
                }
                break;
              case 1:
                v18 = sub_1DB6EF9B0(a1, (_DWORD *)*a2);
                v11 = *a2;
                if (v18)
                {
                  v12 = (uint64_t *)v18[2];
                  goto LABEL_19;
                }
                v20 = (char **)a1;
                v9 = (uint64_t *)v11;
                return sub_1DB6EFAC8(v20, v9);
              case 0:
                v8 = sub_1DB6EF9B0(a1, (_DWORD *)*a2);
                v9 = (uint64_t *)*a2;
                if (v8)
                {
                  v10 = v8;
                  archive_entry_unset_size(*a2);
                  v11 = *a2;
                  v12 = (uint64_t *)v10[2];
LABEL_19:
                  v19 = (char *)archive_entry_pathname(v12);
                  return (_QWORD *)archive_entry_copy_hardlink(v11, v19);
                }
                v20 = (char **)a1;
                return sub_1DB6EFAC8(v20, v9);
            }
          }
        }
      }
    }
  }
  else
  {
    result = sub_1DB6EF740((uint64_t *)a1, 1);
    if (result)
    {
      *a2 = result[3];
      result[3] = 0;
    }
  }
  return result;
}

uint64_t *sub_1DB6EF9B0(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    archive_entry_free(*(void ***)(v4 + 16));
    archive_entry_free(*(void ***)(*(_QWORD *)(a1 + 8) + 24));
    free(*(void **)(a1 + 8));
    *(_QWORD *)(a1 + 8) = 0;
  }
  v5 = archive_entry_dev(a2);
  v6 = archive_entry_ino64((uint64_t)a2);
  v7 = v6 ^ v5;
  v8 = (*(_QWORD *)(a1 + 24) - 1) & v7;
  v9 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v8);
  if (v9)
  {
    v10 = v6;
    while (v9[4] != v7 || v5 != archive_entry_dev((_DWORD *)v9[2]) || v10 != archive_entry_ino64(v9[2]))
    {
      v9 = (uint64_t *)*v9;
      if (!v9)
        return v9;
    }
    v12 = *((_DWORD *)v9 + 10) - 1;
    *((_DWORD *)v9 + 10) = v12;
    if (!v12)
    {
      v13 = (uint64_t *)v9[1];
      if (v13)
        *v13 = *v9;
      v14 = (uint64_t *)*v9;
      if (*v9)
        v14[1] = (uint64_t)v13;
      if (*(uint64_t **)(*(_QWORD *)a1 + 8 * v8) == v9)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = v14;
      v15 = *(_QWORD *)(a1 + 16) - 1;
      *(_QWORD *)(a1 + 8) = v9;
      *(_QWORD *)(a1 + 16) = v15;
    }
  }
  return v9;
}

_QWORD *sub_1DB6EFAC8(char **a1, uint64_t *a2)
{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *i;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;

  v4 = malloc_type_calloc(1uLL, 0x30uLL, 0x102004063BC1FCFuLL);
  if (v4)
  {
    v4[2] = archive_entry_clone(a2);
    v5 = a1[3];
    if (((unint64_t)v5 & 0x8000000000000000) == 0)
    {
      v6 = 2 * (_QWORD)v5;
      if ((unint64_t)a1[2] > 2 * (uint64_t)v5)
      {
        v7 = (char *)malloc_type_calloc(2 * (_QWORD)v5, 8uLL, 0x2004093837F09uLL);
        if (v7)
        {
          v8 = v7;
          v9 = a1[3];
          v10 = *a1;
          if (v9)
          {
            for (i = 0; i != v9; ++i)
            {
              while (1)
              {
                v12 = &v10[8 * (_QWORD)i];
                v13 = *(_QWORD **)v12;
                if (!*(_QWORD *)v12)
                  break;
                *(_QWORD *)v12 = *v13;
                v14 = v13[4] & (v6 - 1);
                v15 = *(_QWORD *)&v8[8 * v14];
                if (v15)
                {
                  *(_QWORD *)(v15 + 8) = v13;
                  v15 = *(_QWORD *)&v8[8 * v14];
                }
                *v13 = v15;
                v13[1] = 0;
                *(_QWORD *)&v8[8 * v14] = v13;
                v10 = *a1;
              }
            }
          }
          free(v10);
          *a1 = v8;
          a1[3] = (char *)v6;
        }
      }
    }
    v16 = (int)archive_entry_dev(a2);
    v17 = archive_entry_ino64((uint64_t)a2) ^ v16;
    v18 = (unint64_t)(a1[3] - 1) & v17;
    v19 = *a1;
    v20 = *(_QWORD *)&(*a1)[8 * v18];
    if (v20)
    {
      *(_QWORD *)(v20 + 8) = v4;
      v20 = *(_QWORD *)&v19[8 * v18];
    }
    ++a1[2];
    *v4 = v20;
    v4[1] = 0;
    *(_QWORD *)&v19[8 * v18] = v4;
    v4[4] = v17;
    *((_DWORD *)v4 + 10) = archive_entry_nlink((uint64_t)a2) - 1;
  }
  return v4;
}

uint64_t archive_entry_partial_links(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    archive_entry_free(*(void ***)(v4 + 16));
    archive_entry_free(*(void ***)(*(_QWORD *)(a1 + 8) + 24));
    free(*(void **)(a1 + 8));
    *(_QWORD *)(a1 + 8) = 0;
  }
  v5 = sub_1DB6EF740((uint64_t *)a1, 2);
  if (v5)
  {
    v6 = v5;
    result = v5[2];
    if (a2)
      *a2 = *((_DWORD *)v6 + 10);
    v6[2] = 0;
  }
  else
  {
    result = 0;
    if (a2)
      *a2 = 0;
  }
  return result;
}

uint64_t archive_read_support_compression_none(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_filter_none", a5, a6, a7, a8) == -30)
    return 4294967266;
  else
    return 0;
}

uint64_t archive_read_support_filter_none(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_filter_none", a5, a6, a7, a8) == -30)
    return 4294967266;
  else
    return 0;
}

uint64_t archive_write_set_compression_compress(int *a1)
{
  sub_1DB732988((uint64_t)a1);
  return archive_write_add_filter_compress(a1);
}

uint64_t archive_write_add_filter_compress(int *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = sub_1DB7321E4((uint64_t)a1);
  result = sub_1DB6E0594(a1, -1329217314, 1, "archive_write_add_filter_compress", v3, v4, v5, v6);
  if ((_DWORD)result != -30)
  {
    result = 0;
    v2[4] = sub_1DB6EFDA0;
    *((_DWORD *)v2 + 20) = 3;
    v2[9] = "compress";
  }
  return result;
}

uint64_t sub_1DB6EFDA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _DWORD *v10;
  size_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t result;
  char *v20;

  *(_DWORD *)(a1 + 80) = 3;
  *(_QWORD *)(a1 + 72) = "compress";
  v9 = malloc_type_calloc(1uLL, 0x65190uLL, 0x10100404BA02100uLL);
  v10 = *(_DWORD **)(a1 + 8);
  if (!v9)
  {
    archive_set_error(v10, 12, "Can't allocate data for compression", v4, v5, v6, v7, v8, v20);
    return 4294967266;
  }
  if (*v10 != -1329217314)
    goto LABEL_7;
  v11 = (int)archive_write_get_bytes_per_block((uint64_t)v10, v2, v3, v4, v5, v6, v7, v8);
  if (v11 <= 0x10000)
  {
    if ((_DWORD)v11)
    {
      v11 = 0x10000uLL / (int)v11 * (int)v11;
      goto LABEL_8;
    }
LABEL_7:
    v11 = 0x10000;
  }
LABEL_8:
  v9[51760] = v11;
  v12 = malloc_type_malloc(v11, 0x18A7FB14uLL);
  v9[51759] = v12;
  if (v12)
  {
    v18 = v12;
    *(_QWORD *)(a1 + 40) = sub_1DB6EFF40;
    *(_QWORD *)(a1 + 48) = sub_1DB6F0154;
    *(_QWORD *)(a1 + 56) = sub_1DB6F01E0;
    *((_DWORD *)v9 + 8) = 0x10000;
    *((_BYTE *)v9 + 414064) = 0;
    *((_DWORD *)v9 + 103515) = 0;
    *(_OWORD *)v9 = xmmword_1DB74C370;
    v9[2] = 10000;
    v9[3] = 0x1FF00000009;
    *(_QWORD *)((char *)v9 + 414044) = 257;
    memset((char *)v9 + 36, 255, 0x43624uLL);
    result = 0;
    *v18 = 31;
    *(_BYTE *)(v9[51759] + 1) = -99;
    *(_BYTE *)(v9[51759] + 2) = -112;
    v9[51761] = 3;
    *(_QWORD *)(a1 + 64) = v9;
    return result;
  }
  archive_set_error(*(_DWORD **)(a1 + 8), 12, "Can't allocate data for compression buffer", v13, v14, v15, v16, v17, v20);
  free(v9);
  return 4294967266;
}

uint64_t sub_1DB6EFF40(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (!a3)
    return 0;
  v3 = a3;
  v4 = a2;
  v6 = *(_QWORD *)(a1 + 64);
  v7 = (int *)(v6 + 414044);
  if (*(_QWORD *)v6 || (v4 = a2 + 1, *(_DWORD *)(v6 + 414052) = *a2, *(_QWORD *)v6 = 1, v3 = a3 - 1, a3 != 1))
  {
    do
    {
      v9 = *v4++;
      v8 = v9;
      ++*(_QWORD *)v6;
      v10 = *(_DWORD *)(v6 + 414052);
      v11 = v10 + (v9 << 16);
      *(_DWORD *)(v6 + 414056) = v11;
      v12 = v10 ^ (v9 << 8);
      v13 = *(_DWORD *)(v6 + 4 * v12 + 36);
      if (v13 == v11)
        goto LABEL_5;
      if ((v13 & 0x80000000) == 0)
      {
        v14 = v12 - 69001;
        if (!v12)
          v14 = -1;
        while (1)
        {
          v12 += v12 + v14 >= 0 ? v14 : v14 + 69001;
          v15 = *(_DWORD *)(v6 + 4 * v12 + 36);
          if (v15 == v11)
            break;
          if (v15 < 0)
            goto LABEL_16;
        }
LABEL_5:
        *(_DWORD *)(v6 + 414052) = *(unsigned __int16 *)(v6 + 2 * v12 + 276040);
        goto LABEL_6;
      }
LABEL_16:
      result = sub_1DB6F0218(a1, v10);
      if ((_DWORD)result)
        return result;
      *(_DWORD *)(v6 + 414052) = v8;
      v17 = *v7;
      if (*v7 < *(_DWORD *)(v6 + 32))
      {
        *v7 = v17 + 1;
        *(_WORD *)(v6 + 2 * v12 + 276040) = v17;
        *(_DWORD *)(v6 + 4 * v12 + 36) = *(_DWORD *)(v6 + 414056);
        goto LABEL_6;
      }
      v18 = *(_QWORD *)v6;
      if (*(_QWORD *)v6 < *(_QWORD *)(v6 + 16))
        goto LABEL_6;
      *(_QWORD *)(v6 + 16) = v18 + 10000;
      v19 = *(_QWORD *)(v6 + 8);
      if (v18 >= 0x800000)
      {
        v21 = v19 / 256;
        if ((_DWORD)v21)
        {
          v20 = v18 / (int)v21;
          goto LABEL_26;
        }
      }
      else if (v19)
      {
        v20 = (v18 << 8) / v19;
        goto LABEL_26;
      }
      LODWORD(v20) = 0x7FFFFFFF;
LABEL_26:
      if ((int)v20 <= *(_DWORD *)(v6 + 414048))
      {
        memset((void *)(v6 + 36), 255, 0x43624uLL);
        *(_QWORD *)v7 = 257;
        result = sub_1DB6F0218(a1, 256);
        if ((_DWORD)result)
          return result;
      }
      else
      {
        *(_DWORD *)(v6 + 414048) = v20;
      }
LABEL_6:
      --v3;
    }
    while (v3);
  }
  return 0;
}

uint64_t sub_1DB6F0154(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int v5;

  v2 = *(_QWORD *)(a1 + 64) + 414052;
  result = sub_1DB6F0218(a1, *(_DWORD *)v2);
  if (!(_DWORD)result)
  {
    v4 = *(_QWORD *)(a1 + 64);
    if (*(int *)(v4 + 414060) <= 0)
      v5 = -(-*(_BYTE *)(v4 + 414060) & 7);
    else
      v5 = *(_DWORD *)(v4 + 414060) & 7;
    if (!v5)
      return sub_1DB732248(*(_QWORD *)(a1 + 16), *(_QWORD *)(v2 + 20), *(_QWORD *)(v2 + 36));
    *(_DWORD *)(v4 + 24) = (v5 + 7) >> 3;
    result = sub_1DB6F0398(a1, *(_BYTE *)(v4 + 414064));
    if (!(_DWORD)result)
      return sub_1DB732248(*(_QWORD *)(a1 + 16), *(_QWORD *)(v2 + 20), *(_QWORD *)(v2 + 36));
  }
  return result;
}

uint64_t sub_1DB6F01E0(uint64_t a1)
{
  void **v1;

  v1 = *(void ***)(a1 + 64);
  free(v1[51759]);
  free(v1);
  return 0;
}

uint64_t sub_1DB6F0218(uint64_t a1, int a2)
{
  uint64_t v4;
  int v5;
  char v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  char v12;
  uint64_t result;
  int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(a1 + 64);
  if (*(int *)(v4 + 414060) <= 0)
    v5 = -(-*(_BYTE *)(v4 + 414060) & 7);
  else
    v5 = *(_DWORD *)(v4 + 414060) & 7;
  v6 = *(_BYTE *)(v4 + 414064);
  *(_BYTE *)(v4 + 414064) = v6 | ((_BYTE)a2 << v5);
  sub_1DB6F0398(a1, v6 | ((_BYTE)a2 << v5));
  v7 = *(_DWORD *)(v4 + 24);
  v8 = v7 - (8 - v5);
  v9 = a2 >> (8 - v5);
  v10 = v8 - 8;
  if (v8 >= 8)
  {
    sub_1DB6F0398(a1, v9);
    v9 >>= 8;
    v7 = *(_DWORD *)(v4 + 24);
    v8 = v10;
  }
  v11 = *(_DWORD *)(v4 + 414060) + v7;
  *(_DWORD *)(v4 + 414060) = v11;
  v12 = byte_1DB74C390[v8] & v9;
  *(_BYTE *)(v4 + 414064) = v12;
  if (v11 == 8 * v7)
  {
    v11 = 0;
    *(_DWORD *)(v4 + 414060) = 0;
  }
  if (a2 != 256 && *(_DWORD *)(v4 + 414044) <= *(_DWORD *)(v4 + 28))
    return 0;
  if (v11 >= 1 && v11 < 8 * v7)
  {
    while (1)
    {
      result = sub_1DB6F0398(a1, v12);
      if ((_DWORD)result)
        break;
      v12 = 0;
      v15 = *(_DWORD *)(v4 + 414060) + 8;
      *(_DWORD *)(v4 + 414060) = v15;
      *(_BYTE *)(v4 + 414064) = 0;
      v7 = *(_DWORD *)(v4 + 24);
      if (v15 >= 8 * v7)
        goto LABEL_17;
    }
  }
  else
  {
LABEL_17:
    *(_BYTE *)(v4 + 414064) = 0;
    *(_DWORD *)(v4 + 414060) = 0;
    if (a2 == 256)
    {
      result = 0;
      *(_QWORD *)(v4 + 24) = 0x1FF00000009;
    }
    else
    {
      v16 = v7 + 1;
      *(_DWORD *)(v4 + 24) = v16;
      result = 0;
      if (v16 == 16)
        v17 = *(_DWORD *)(v4 + 32);
      else
        v17 = ~(-1 << v16);
      *(_DWORD *)(v4 + 28) = v17;
    }
  }
  return result;
}

uint64_t sub_1DB6F0398(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = *(_QWORD **)(a1 + 64);
  v3 = v2 + 51759;
  v4 = v2[51759];
  v5 = v2[51761];
  v2[51761] = v5 + 1;
  *(_BYTE *)(v4 + v5) = a2;
  ++v2[1];
  v6 = v2[51760];
  if (v6 != v2[51761])
    return 0;
  result = sub_1DB732248(*(_QWORD *)(a1 + 16), *v3, v6);
  if ((_DWORD)result)
    return 4294967266;
  v3[2] = 0;
  return result;
}

uint64_t archive_read_support_filter_lrzip(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;

  if (sub_1DB6E4544("lrzip"))
  {
    result = sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_filter_lrzip", v3, v4, v5, v6);
    if ((_DWORD)result == -30)
      return result;
    v22 = 0;
    sub_1DB6F7FD0(a1, &v22, v8, v9, v10, v11, v12, v13);
    if (!v19)
    {
      *v22 = 0;
      v20 = v22;
      v22[1] = "lrzip";
      v20[2] = sub_1DB6F04E0;
      v20[3] = sub_1DB6F0558;
      v20[4] = 0;
      v20[5] = sub_1DB6F0594;
      archive_set_error(a1, -1, "Using external lrzip program for lrzip decompression", v14, v15, v16, v17, v18, v21);
      return 4294967276;
    }
  }
  else
  {
    archive_set_error(a1, -1, "Format not allow-listed in entitlements", v2, v3, v4, v5, v6, v21);
  }
  return 4294967266;
}

uint64_t sub_1DB6F04E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v8;
  uint64_t v9;
  uint64_t v11;

  v11 = 0;
  v8 = sub_1DB6E22F4(a2, 6uLL, &v11, a4, a5, a6, a7, a8);
  v9 = 0;
  if (v8 && v11)
  {
    if (*(_DWORD *)v8 == 1230656076 && !*(_BYTE *)(v8 + 4))
    {
      if (*(unsigned __int8 *)(v8 + 5) - 11 >= 0xFFFFFFFB)
        return 6;
      else
        return 0;
    }
    else
    {
      return 0;
    }
  }
  return v9;
}

uint64_t sub_1DB6F0558(uint64_t a1)
{
  uint64_t result;

  result = sub_1DB6FE79C(a1, "lrzip -d -q");
  *(_DWORD *)(a1 + 104) = 10;
  *(_QWORD *)(a1 + 96) = "lrzip";
  return result;
}

uint64_t sub_1DB6F0594()
{
  return 0;
}

uint64_t archive_read_append_filter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int support_filter_lrzip;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  _DWORD *v15;
  int v16;
  _QWORD *v18;
  uint64_t v19;
  char *v20[4];

  v20[3] = *(char **)MEMORY[0x1E0C80C00];
  v9 = a2;
  switch(a2)
  {
    case 0:
      goto LABEL_30;
    case 1:
      strcpy((char *)v20, "gzip");
      archive_read_support_filter_gzip((int *)a1);
      goto LABEL_15;
    case 2:
      strcpy((char *)v20, "bzip2");
      archive_read_support_filter_bzip2((int *)a1);
      goto LABEL_15;
    case 3:
      strcpy((char *)v20, "compress (.Z)");
      archive_read_support_filter_compress((int *)a1);
      goto LABEL_15;
    case 4:
      v11 = "Cannot append program filter using archive_read_append_filter";
      goto LABEL_24;
    case 5:
      strcpy((char *)v20, "lzma");
      archive_read_support_filter_lzma((int *)a1);
      goto LABEL_15;
    case 6:
      strcpy((char *)v20, "xz");
      archive_read_support_filter_xz((int *)a1);
      goto LABEL_15;
    case 7:
      strcpy((char *)v20, "uu");
      archive_read_support_filter_uu((int *)a1);
      goto LABEL_15;
    case 8:
      strcpy((char *)v20, "rpm");
      archive_read_support_filter_rpm((int *)a1);
      goto LABEL_15;
    case 9:
      strcpy((char *)v20, "lzip");
      archive_read_support_filter_lzip((int *)a1);
      goto LABEL_15;
    case 10:
      strcpy((char *)v20, "lrzip");
      support_filter_lrzip = archive_read_support_filter_lrzip((int *)a1);
      goto LABEL_15;
    case 13:
      strcpy((char *)v20, "lz4");
      support_filter_lrzip = archive_read_support_filter_lz4((int *)a1);
      goto LABEL_15;
    case 14:
      strcpy((char *)v20, "zstd");
      support_filter_lrzip = archive_read_support_filter_zstd((int *)a1);
LABEL_15:
      v9 = support_filter_lrzip;
      v12 = 0;
      v13 = a1 + 1032;
      break;
    default:
      v11 = "Invalid filter code specified";
      goto LABEL_24;
  }
  do
  {
    v14 = *(const char **)(a1 + v12 + 272);
    if (!v14)
      goto LABEL_23;
    if (!strcmp(*(const char **)(a1 + v12 + 272), (const char *)v20))
    {
      v13 = a1 + v12 + 264;
      goto LABEL_22;
    }
    v12 += 48;
  }
  while ((_DWORD)v12 != 768);
  v14 = *(const char **)(a1 + 1040);
  if (!v14)
    goto LABEL_23;
LABEL_22:
  if (strcmp(v14, (const char *)v20))
  {
LABEL_23:
    v11 = "Internal error: Unable to append filter";
LABEL_24:
    v15 = (_DWORD *)a1;
    v16 = 22;
    goto LABEL_25;
  }
  v18 = malloc_type_calloc(1uLL, 0xB8uLL, 0x10F0040E7D2A449uLL);
  if (!v18)
  {
    v11 = "Out of memory";
    v15 = (_DWORD *)a1;
    v16 = 12;
LABEL_25:
    archive_set_error(v15, v16, v11, a4, a5, a6, a7, a8, v20[0]);
    return 4294967266;
  }
  v18[1] = v13;
  v18[3] = a1;
  v18[2] = *(_QWORD *)(a1 + 1032);
  *(_QWORD *)(a1 + 1032) = v18;
  if ((*(unsigned int (**)(_QWORD *, uint64_t))(v13 + 24))(v18, v19))
  {
    sub_1DB6DBF34(a1);
    return 4294967266;
  }
LABEL_30:
  *(_DWORD *)(a1 + 1040) = 1;
  return v9 & (v9 >> 31);
}

uint64_t archive_read_append_filter_program(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return archive_read_append_filter_program_signature(a1, a2, 0, 0, a5, a6, a7, a8);
}

uint64_t archive_read_append_filter_program_signature(uint64_t a1, const char *a2, const void *a3, size_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _DWORD *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  char *v22;

  if (archive_read_support_filter_program_signature((_DWORD *)a1, a2, a3, a4, a5, a6, a7, a8))
    return 4294967266;
  v14 = 0;
  v15 = a1 + 1032;
  do
  {
    if (*(_QWORD *)(a1 + v14 + 264) && !*(_QWORD *)(a1 + v14 + 272))
    {
      v15 = a1 + v14 + 264;
      goto LABEL_9;
    }
    v14 += 48;
  }
  while ((_DWORD)v14 != 768);
  if (!*(_QWORD *)v15)
  {
    v16 = "Internal error: Unable to append program filter";
    v17 = (_DWORD *)a1;
    v18 = 22;
LABEL_13:
    archive_set_error(v17, v18, v16, v9, v10, v11, v12, v13, v22);
    return 4294967266;
  }
LABEL_9:
  v19 = malloc_type_calloc(1uLL, 0xB8uLL, 0x10F0040E7D2A449uLL);
  if (!v19)
  {
    v16 = "Out of memory";
    v17 = (_DWORD *)a1;
    v18 = 12;
    goto LABEL_13;
  }
  v19[3] = a1;
  v20 = *(_QWORD *)(a1 + 1032);
  v19[1] = v15;
  v19[2] = v20;
  *(_QWORD *)(a1 + 1032) = v19;
  result = (*(uint64_t (**)(void))(v15 + 24))();
  if ((_DWORD)result)
  {
    sub_1DB6DBF34(a1);
    return 4294967266;
  }
  *(_QWORD *)(v15 + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 1032) + 96);
  *(_DWORD *)(a1 + 1040) = 1;
  return result;
}

uint64_t archive_write_add_filter_b64encode(int *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  char *v15;

  v2 = sub_1DB7321E4((uint64_t)a1);
  result = sub_1DB6E0594(a1, -1329217314, 1, "archive_write_add_filter_uu", v3, v4, v5, v6);
  if ((_DWORD)result != -30)
  {
    v8 = malloc_type_calloc(1uLL, 0x88uLL, 0x1010040D0CB9195uLL);
    if (v8)
    {
      v14 = v8;
      *((_QWORD *)v8 + 2) = 0;
      sub_1DB6E323C((uint64_t *)v8 + 1, "-", 1uLL);
      result = 0;
      *v14 = 420;
      v2[8] = v14;
      v2[9] = "b64encode";
      *((_DWORD *)v2 + 20) = 7;
      v2[3] = sub_1DB6F0B14;
      v2[4] = sub_1DB6F0A4C;
      v2[5] = sub_1DB6F0C10;
      v2[6] = sub_1DB6F0D3C;
      v2[7] = sub_1DB6F0D94;
    }
    else
    {
      archive_set_error((_DWORD *)v2[1], 12, "Can't allocate data for b64encode filter", v9, v10, v11, v12, v13, v15);
      return 4294967266;
    }
  }
  return result;
}

uint64_t sub_1DB6F0A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  _DWORD *v10;
  signed int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char *v20;

  v9 = *(unsigned int **)(a1 + 64);
  v10 = *(_DWORD **)(a1 + 8);
  if (*v10 != -1329217314)
    goto LABEL_5;
  v11 = archive_write_get_bytes_per_block((uint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  v12 = v11;
  if (v11 > 0x10000)
    goto LABEL_6;
  if (v11)
    v12 = 0x10000uLL / v11 * v11;
  else
LABEL_5:
    v12 = 0x10000;
LABEL_6:
  *((_QWORD *)v9 + 7) = v12;
  if (sub_1DB6E3190((void **)v9 + 4, v12 + 512))
  {
    sub_1DB7303C0((void **)v9 + 4, "begin-base64 %o %s\n", v13, v14, v15, v16, v17, v18, (char *)*v9);
    result = 0;
    *(_QWORD *)(a1 + 64) = v9;
  }
  else
  {
    archive_set_error(*(_DWORD **)(a1 + 8), 12, "Can't allocate data for b64encode buffer", v14, v15, v16, v17, v18, v20);
    return 4294967266;
  }
  return result;
}

uint64_t sub_1DB6F0B14(uint64_t a1, char *__s1, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  size_t v13;
  __int16 i;
  __int16 v15;
  size_t v16;
  _DWORD *v17;
  char *v18;
  char *v19;

  v6 = *(_QWORD *)(a1 + 64);
  if (strcmp(__s1, "mode"))
  {
    if (strcmp(__s1, "name"))
      return 4294967276;
    if (a3)
    {
      *(_QWORD *)(v6 + 16) = 0;
      v16 = strlen(a3);
      sub_1DB6E323C((uint64_t *)(v6 + 8), a3, v16);
      return 0;
    }
    v17 = *(_DWORD **)(a1 + 8);
    v18 = "name option requires a string";
    goto LABEL_13;
  }
  if (!a3)
  {
    v17 = *(_DWORD **)(a1 + 8);
    v18 = "mode option requires octal digits";
LABEL_13:
    archive_set_error(v17, -1, v18, v7, v8, v9, v10, v11, v19);
    return 4294967271;
  }
  v13 = strlen(a3);
  for (i = 0; v13; --v13)
  {
    v15 = *a3;
    if ((v15 & 0xF8) != 0x30)
      break;
    ++a3;
    i = (v15 - 48) | (8 * i);
  }
  result = 0;
  *(_DWORD *)v6 = i & 0x1FF;
  return result;
}

uint64_t sub_1DB6F0C10(uint64_t a1, unsigned __int8 *__src, size_t __n)
{
  size_t v3;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  if (!__n)
    return 0;
  v3 = __n;
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(v6 + 64);
  if (!v7)
    goto LABEL_11;
  if (v7 <= 0x38)
  {
    do
    {
      v8 = *__src++;
      *(_QWORD *)(v6 + 64) = v7 + 1;
      *(_BYTE *)(v6 + v7 + 72) = v8;
      v7 = *(_QWORD *)(v6 + 64);
    }
    while (v7 <= 0x38 && v3-- != 1);
    if (v7 < 0x39)
      return 0;
  }
  sub_1DB6F0DCC((uint64_t *)(v6 + 32), (unsigned __int8 *)(v6 + 72), 0x39uLL);
  *(_QWORD *)(v6 + 64) = 0;
LABEL_11:
  if (v3 >= 0x39)
  {
    do
    {
      sub_1DB6F0DCC((uint64_t *)(v6 + 32), __src, 0x39uLL);
      v3 -= 57;
      __src += 57;
    }
    while (v3 > 0x38);
  }
  if (v3)
  {
    memcpy((void *)(v6 + 72), __src, v3);
    *(_QWORD *)(v6 + 64) = v3;
  }
  v10 = *(_QWORD *)(v6 + 56);
  if (*(_QWORD *)(v6 + 40) < v10)
    return 0;
  do
  {
    v11 = sub_1DB732248(*(_QWORD *)(a1 + 16), *(_QWORD *)(v6 + 32), v10);
    memmove(*(void **)(v6 + 32), (const void *)(*(_QWORD *)(v6 + 32) + *(_QWORD *)(v6 + 56)), *(_QWORD *)(v6 + 40) - *(_QWORD *)(v6 + 56));
    v10 = *(_QWORD *)(v6 + 56);
    v12 = *(_QWORD *)(v6 + 40) - v10;
    *(_QWORD *)(v6 + 40) = v12;
  }
  while (v12 >= v10);
  return v11;
}

uint64_t sub_1DB6F0D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v18;

  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(v9 + 64);
  if (v10)
    sub_1DB6F0DCC((uint64_t *)(v9 + 32), (unsigned __int8 *)(v9 + 72), v10);
  sub_1DB7303C0((void **)(v9 + 32), "====\n", v10, a4, a5, a6, a7, a8, v18);
  archive_write_set_bytes_in_last_block(*(int **)(a1 + 8), 1, v11, v12, v13, v14, v15, v16);
  return sub_1DB732248(*(_QWORD *)(a1 + 16), *(_QWORD *)(v9 + 32), *(_QWORD *)(v9 + 40));
}

uint64_t sub_1DB6F0D94(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 64);
  sub_1DB6E7C3C((uint64_t)v1 + 8);
  sub_1DB6E7C3C((uint64_t)v1 + 32);
  free(v1);
  return 0;
}

uint64_t *sub_1DB6F0DCC(uint64_t *a1, unsigned __int8 *a2, unint64_t a3)
{
  unint64_t v3;
  char v6;

  v3 = a3;
  if (a3 >= 3)
  {
    do
    {
      sub_1DB72CE60(a1, byte_1DB74C3A8[(unint64_t)*a2 >> 2]);
      sub_1DB72CE60(a1, byte_1DB74C3A8[((unint64_t)a2[1] >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (*a2 & 3))]);
      sub_1DB72CE60(a1, byte_1DB74C3A8[((unint64_t)a2[2] >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (a2[1] & 0xF))]);
      sub_1DB72CE60(a1, byte_1DB74C3A8[a2[2] & 0x3F]);
      a2 += 3;
      v3 -= 3;
    }
    while (v3 > 2);
  }
  if (v3)
  {
    sub_1DB72CE60(a1, byte_1DB74C3A8[(unint64_t)*a2 >> 2]);
    if (v3 == 1)
    {
      sub_1DB72CE60(a1, byte_1DB74C3A8[16 * (*a2 & 3)]);
      v6 = 61;
    }
    else
    {
      sub_1DB72CE60(a1, byte_1DB74C3A8[(16 * (*a2 & 3u)) | ((unint64_t)a2[1] >> 4)]);
      v6 = byte_1DB74C3A8[4 * (a2[1] & 0xF)];
    }
    sub_1DB72CE60(a1, v6);
    sub_1DB72CE60(a1, 61);
  }
  return sub_1DB72CE60(a1, 10);
}

uint64_t archive_write_set_format_raw(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  void (*v10)(uint64_t);
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  char *v18;

  result = sub_1DB6E0594((int *)a1, -1329217314, 1, "archive_write_set_format_raw", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    v10 = *(void (**)(uint64_t))(a1 + 328);
    if (v10)
      v10(a1);
    v11 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
    if (v11)
    {
      v17 = v11;
      result = 0;
      *v17 = 0;
      *(_QWORD *)(a1 + 264) = v17;
      *(_QWORD *)(a1 + 272) = "raw";
      *(_QWORD *)(a1 + 304) = sub_1DB6F0FD0;
      *(_QWORD *)(a1 + 312) = sub_1DB6F1040;
      *(_QWORD *)(a1 + 320) = 0;
      *(_QWORD *)(a1 + 328) = sub_1DB6F106C;
      *(_DWORD *)(a1 + 16) = 589824;
      *(_QWORD *)(a1 + 24) = "RAW";
      *(_QWORD *)(a1 + 288) = 0;
      *(_QWORD *)(a1 + 296) = 0;
    }
    else
    {
      archive_set_error((_DWORD *)a1, 12, "Can't allocate raw data", v12, v13, v14, v15, v16, v18);
      return 4294967266;
    }
  }
  return result;
}

uint64_t sub_1DB6F0FD0(uint64_t a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  char *v11;

  v3 = *(int **)(a1 + 264);
  if (archive_entry_filetype(a2) != 0x8000)
  {
    v9 = "Raw format only supports filetype AE_IFREG";
    goto LABEL_5;
  }
  if (*v3 >= 1)
  {
    v9 = "Raw format only supports one entry per archive";
LABEL_5:
    archive_set_error((_DWORD *)a1, 34, v9, v4, v5, v6, v7, v8, v11);
    return 4294967266;
  }
  result = 0;
  ++*v3;
  return result;
}

uint64_t sub_1DB6F1040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  LODWORD(result) = sub_1DB7322A8(a1, a2, a3);
  if ((int)result >= 0)
    return a3;
  else
    return (int)result;
}

uint64_t sub_1DB6F106C(uint64_t a1)
{
  free(*(void **)(a1 + 264));
  *(_QWORD *)(a1 + 264) = 0;
  return 0;
}

uint64_t archive_write_set_compression_lzip(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1DB732988((uint64_t)a1);
  return archive_write_add_filter_lzip(a1, v2, v3, v4, v5, v6, v7, v8);
}

uint64_t archive_write_add_filter_lzip(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  _QWORD *v10;

  result = sub_1DB6E0594(a1, -1329217314, 1, "archive_write_add_filter_lzip", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    v10 = sub_1DB7321E4((uint64_t)a1);
    result = sub_1DB6F1230(v10);
    if (!(_DWORD)result)
    {
      *((_DWORD *)v10 + 20) = 9;
      v10[9] = "lzip";
    }
  }
  return result;
}

uint64_t archive_write_set_compression_lzma(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1DB732988((uint64_t)a1);
  return archive_write_add_filter_lzma(a1, v2, v3, v4, v5, v6, v7, v8);
}

uint64_t archive_write_add_filter_lzma(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  _QWORD *v10;

  result = sub_1DB6E0594(a1, -1329217314, 1, "archive_write_add_filter_lzma", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    v10 = sub_1DB7321E4((uint64_t)a1);
    result = sub_1DB6F1230(v10);
    if (!(_DWORD)result)
    {
      *((_DWORD *)v10 + 20) = 5;
      v10[9] = "lzma";
    }
  }
  return result;
}

uint64_t archive_write_set_compression_xz(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1DB732988((uint64_t)a1);
  return archive_write_add_filter_xz(a1, v2, v3, v4, v5, v6, v7, v8);
}

uint64_t archive_write_add_filter_xz(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  _QWORD *v10;

  result = sub_1DB6E0594(a1, -1329217314, 1, "archive_write_add_filter_xz", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    v10 = sub_1DB7321E4((uint64_t)a1);
    result = sub_1DB6F1230(v10);
    if (!(_DWORD)result)
    {
      *((_DWORD *)v10 + 20) = 6;
      v10[9] = "xz";
    }
  }
  return result;
}

uint64_t sub_1DB6F1230(_QWORD *a1)
{
  _DWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  char *v11;

  v2 = (_DWORD *)a1[1];
  v3 = malloc_type_calloc(1uLL, 0x148uLL, 0x10F0040FB0E8E87uLL);
  if (v3)
  {
    v9 = v3;
    result = 0;
    a1[8] = v9;
    *v9 = 0x100000006;
    a1[6] = sub_1DB6F15B0;
    a1[7] = sub_1DB6F1664;
    a1[3] = sub_1DB6F169C;
    a1[4] = sub_1DB6F12CC;
  }
  else
  {
    archive_set_error(v2, 12, "Out of memory", v4, v5, v6, v7, v8, v11);
    return 4294967266;
  }
  return result;
}

uint64_t sub_1DB6F12CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v9;
  _BYTE *v10;
  _DWORD *v11;
  size_t v12;
  int v13;
  char *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t result;
  _DWORD *v19;
  char *v20;
  int v21;
  unsigned int v22;
  int v24;
  char v25;
  int v26;
  int v27;
  uint64_t v28;
  char *v29;

  v9 = *(int **)(a1 + 64);
  v10 = (_BYTE *)*((_QWORD *)v9 + 37);
  if (v10)
    goto LABEL_8;
  v11 = *(_DWORD **)(a1 + 8);
  if (*v11 != -1329217314)
    goto LABEL_6;
  v12 = (int)archive_write_get_bytes_per_block((uint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  if (v12 > 0x10000)
    goto LABEL_7;
  if ((_DWORD)v12)
    v12 = 0x10000uLL / (int)v12 * (int)v12;
  else
LABEL_6:
    v12 = 0x10000;
LABEL_7:
  *((_QWORD *)v9 + 38) = v12;
  v10 = malloc_type_malloc(v12, 0x9245E3B0uLL);
  *((_QWORD *)v9 + 37) = v10;
  if (!v10)
  {
    v19 = *(_DWORD **)(a1 + 8);
    v20 = "Can't allocate data for compression buffer";
    goto LABEL_32;
  }
LABEL_8:
  *(_QWORD *)(a1 + 40) = sub_1DB6F1780;
  if (*(_DWORD *)(a1 + 80) == 9)
  {
    v13 = *v9;
    v14 = (char *)&unk_1DB74C400 + 12 * *v9;
    v9[44] = *(_DWORD *)v14;
    *((_QWORD *)v9 + 23) = 0;
    *((_OWORD *)v9 + 12) = xmmword_1DB74C3F0;
    if (v13 <= 2)
      v15 = 1;
    else
      v15 = 2;
    v9[52] = v15;
    *(_QWORD *)(v9 + 53) = *(_QWORD *)(v14 + 4);
    v9[55] = 0;
    *((_QWORD *)v9 + 18) = 0x4000000000000001;
    *((_QWORD *)v9 + 19) = v9 + 44;
    *((_QWORD *)v9 + 20) = -1;
  }
  else
  {
    if (lzma_lzma_preset())
      archive_set_error(*(_DWORD **)(a1 + 8), -1, "Internal error initializing compression library", a4, a5, a6, a7, a8, v29);
    *((_QWORD *)v9 + 18) = 33;
    *((_QWORD *)v9 + 19) = v9 + 44;
    *((_QWORD *)v9 + 20) = -1;
    v10 = (_BYTE *)*((_QWORD *)v9 + 37);
  }
  *(_OWORD *)(v9 + 2) = 0u;
  *(_OWORD *)(v9 + 6) = 0u;
  *(_OWORD *)(v9 + 10) = 0u;
  *((_QWORD *)v9 + 17) = 0;
  *(_OWORD *)(v9 + 26) = 0u;
  *(_OWORD *)(v9 + 30) = 0u;
  *(_OWORD *)(v9 + 18) = 0u;
  *(_OWORD *)(v9 + 22) = 0u;
  *(_OWORD *)(v9 + 14) = 0u;
  v16 = *((_QWORD *)v9 + 38);
  *((_QWORD *)v9 + 4) = v10;
  *((_QWORD *)v9 + 5) = v16;
  v17 = *(_DWORD *)(a1 + 80);
  if (v17 != 5)
  {
    if (v17 == 6)
    {
      result = lzma_stream_encoder();
      if (!(_DWORD)result)
        goto LABEL_38;
    }
    else
    {
      v21 = v9[44];
      if ((v21 - 4096) > 0x7FFF000)
      {
        v19 = *(_DWORD **)(a1 + 8);
        v29 = (char *)v9[44];
        v20 = "Unacceptable dictionary size for lzip: %d";
        goto LABEL_34;
      }
      v22 = 27;
      while (((v21 >> v22) & 1) == 0)
      {
        if (v22-- <= 0xC)
        {
          LOBYTE(v22) = 11;
          break;
        }
      }
      if (v21 <= 1 << v22)
      {
        LOBYTE(v26) = 0;
      }
      else
      {
        v24 = 2 << v22;
        v25 = v22 - 3;
        LOBYTE(v22) = v22 + 1;
        v26 = 32 * (((v24 - v21) / (1 << v25)) & 7);
      }
      v9[80] = 0;
      *v10 = 76;
      *(_BYTE *)(*((_QWORD *)v9 + 37) + 1) = 90;
      *(_BYTE *)(*((_QWORD *)v9 + 37) + 2) = 73;
      *(_BYTE *)(*((_QWORD *)v9 + 37) + 3) = 80;
      *(_BYTE *)(*((_QWORD *)v9 + 37) + 4) = 1;
      *(_BYTE *)(*((_QWORD *)v9 + 37) + 5) = v26 | v22 & 0x1F;
      v28 = *((_QWORD *)v9 + 5) - 6;
      *((_QWORD *)v9 + 4) += 6;
      *((_QWORD *)v9 + 5) = v28;
      result = lzma_raw_encoder();
      if (!(_DWORD)result)
        goto LABEL_38;
    }
LABEL_21:
    if ((_DWORD)result == 5)
    {
      v19 = *(_DWORD **)(a1 + 8);
      v20 = "Internal error initializing compression library: Cannot allocate memory";
LABEL_32:
      v27 = 12;
LABEL_35:
      archive_set_error(v19, v27, v20, a4, a5, a6, a7, a8, v29);
      return 4294967266;
    }
    v19 = *(_DWORD **)(a1 + 8);
    v20 = "Internal error initializing compression library: It's a bug in liblzma";
LABEL_34:
    v27 = -1;
    goto LABEL_35;
  }
  result = lzma_alone_encoder();
  if ((_DWORD)result)
    goto LABEL_21;
LABEL_38:
  *(_QWORD *)(a1 + 64) = v9;
  return result;
}

uint64_t sub_1DB6F15B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = sub_1DB6F17EC(a1, (_QWORD *)v2, 1);
  if (!(_DWORD)v3)
  {
    v4 = *(_QWORD *)(v2 + 296);
    v5 = *(_QWORD *)(v2 + 304) - *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v2 + 312) += v5;
    v6 = sub_1DB732248(*(_QWORD *)(a1 + 16), v4, v5);
    v3 = v6;
    if (*(_DWORD *)(a1 + 80) == 9 && (_DWORD)v6 == 0)
    {
      **(_DWORD **)(v2 + 296) = *(_DWORD *)(v2 + 320);
      *(_QWORD *)(*(_QWORD *)(v2 + 296) + 4) = *(_QWORD *)(v2 + 288);
      *(_QWORD *)(*(_QWORD *)(v2 + 296) + 12) = *(_QWORD *)(v2 + 312) + 20;
      v3 = sub_1DB732248(*(_QWORD *)(a1 + 16), *(_QWORD *)(v2 + 296), 20);
    }
  }
  lzma_end();
  return v3;
}

uint64_t sub_1DB6F1664(uint64_t a1)
{
  void **v2;

  v2 = *(void ***)(a1 + 64);
  free(v2[37]);
  free(v2);
  *(_QWORD *)(a1 + 64) = 0;
  return 0;
}

uint64_t sub_1DB6F169C(uint64_t a1, char *__s1, const char *a3)
{
  unsigned int *v5;
  uint64_t result;
  unsigned int v7;
  char *__endptr;

  v5 = *(unsigned int **)(a1 + 64);
  if (!strcmp(__s1, "compression-level"))
  {
    if (a3)
    {
      v7 = *a3 - 48;
      if (v7 <= 9 && !a3[1])
      {
        result = 0;
        *v5 = v7;
        return result;
      }
    }
    return 4294967276;
  }
  if (strcmp(__s1, "threads"))
    return 4294967276;
  __endptr = 0;
  if (!a3)
    return 4294967276;
  *__error() = 0;
  v5[1] = strtoul(a3, &__endptr, 10);
  if (*__error() || *__endptr)
  {
    result = 4294967276;
LABEL_7:
    v5[1] = 1;
    return result;
  }
  result = 0;
  if (!v5[1])
    goto LABEL_7;
  return result;
}

uint64_t sub_1DB6F1780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(v6 + 288) += a3;
  if (*(_DWORD *)(a1 + 80) == 9)
    *(_DWORD *)(v6 + 320) = lzma_crc32();
  *(_QWORD *)(v6 + 8) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  return sub_1DB6F17EC(a1, (_QWORD *)v6, 0);
}

uint64_t sub_1DB6F17EC(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;

  while (1)
  {
    if (a2[5])
    {
      if (a3)
        goto LABEL_7;
LABEL_6:
      result = 0;
      if (!a2[2])
        return result;
      goto LABEL_7;
    }
    v6 = a2[38];
    v7 = a2[37];
    a2[39] += v6;
    if (sub_1DB732248(*(_QWORD *)(a1 + 16), v7, v6))
      return 4294967266;
    v8 = a2[38];
    a2[4] = a2[37];
    a2[5] = v8;
    if (!a3)
      goto LABEL_6;
LABEL_7:
    v10 = (char *)lzma_code();
    if ((_DWORD)v10)
      break;
    if (!a3 && !a2[2])
      return 0;
  }
  if ((_DWORD)v10 == 1)
  {
    if (a3)
      return 0;
    archive_set_error(*(_DWORD **)(a1 + 8), -1, "lzma compression data error", v11, v12, v13, v14, v15, v22);
  }
  else if ((_DWORD)v10 == 6)
  {
    v16 = *(_DWORD **)(a1 + 8);
    v23 = (char *)((unint64_t)(lzma_memusage() + 0xFFFFF) >> 20);
    archive_set_error(v16, 12, "lzma compression error: %ju MiB would have been needed", v17, v18, v19, v20, v21, v23);
  }
  else
  {
    archive_set_error(*(_DWORD **)(a1 + 8), -1, "lzma compression failed: lzma_code() call returned status %d", v11, v12, v13, v14, v15, v10);
  }
  return 4294967266;
}

_QWORD *archive_entry_stat(uint64_t a1)
{
  _QWORD *v2;

  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    if (!*(_DWORD *)(a1 + 16))
      goto LABEL_6;
  }
  else
  {
    v2 = malloc_type_calloc(1uLL, 0x90uLL, 0x1000040B72DA15FuLL);
    *(_QWORD *)(a1 + 8) = v2;
    if (v2)
    {
      *(_DWORD *)(a1 + 16) = 0;
LABEL_6:
      v2[4] = archive_entry_atime(a1);
      v2[10] = archive_entry_birthtime(a1);
      v2[8] = archive_entry_ctime(a1);
      v2[6] = archive_entry_mtime(a1);
      *(_DWORD *)v2 = archive_entry_dev((_DWORD *)a1);
      *((_DWORD *)v2 + 5) = archive_entry_gid(a1);
      *((_DWORD *)v2 + 4) = archive_entry_uid(a1);
      v2[1] = archive_entry_ino64(a1);
      *((_WORD *)v2 + 3) = archive_entry_nlink(a1);
      *((_DWORD *)v2 + 6) = archive_entry_rdev((_DWORD *)a1);
      v2[12] = archive_entry_size(a1);
      *((_WORD *)v2 + 2) = archive_entry_mode(a1);
      v2[5] = archive_entry_atime_nsec(a1);
      v2[9] = archive_entry_ctime_nsec(a1);
      v2[7] = archive_entry_mtime_nsec(a1);
      v2[11] = archive_entry_birthtime_nsec(a1);
      *(_DWORD *)(a1 + 16) = 1;
    }
  }
  return v2;
}

_QWORD *archive_entry_sparse_add_entry(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  if (((a3 | a2) & 0x8000000000000000) == 0 && (a3 ^ 0x7FFFFFFFFFFFFFFFLL) >= a2)
  {
    v5 = result;
    v6 = a3 + a2;
    result = (_QWORD *)archive_entry_size((uint64_t)result);
    if (v6 <= (uint64_t)result)
    {
      v7 = v5[152];
      if (!v7)
        goto LABEL_9;
      v8 = *(_QWORD *)(v7 + 16);
      v9 = v8 + *(_QWORD *)(v7 + 8);
      if (v9 > a2)
        return result;
      if (v9 == a2)
      {
        if ((v6 & 0x8000000000000000) == 0)
          *(_QWORD *)(v7 + 16) = v8 + a3;
      }
      else
      {
LABEL_9:
        result = malloc_type_malloc(0x18uLL, 0x102004024DAA5DEuLL);
        if (result)
        {
          result[1] = a2;
          result[2] = a3;
          *result = 0;
          if (v5[151])
          {
            v10 = (_QWORD *)v5[152];
            if (v10)
              *v10 = result;
            v5[152] = result;
          }
          else
          {
            v5[152] = result;
            v5[151] = result;
          }
        }
      }
    }
  }
  return result;
}

uint64_t archive_entry_sparse_count(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = result;
  v2 = (_QWORD *)(result + 1208);
  LODWORD(result) = -1;
  v3 = v2;
  do
  {
    v3 = (_QWORD *)*v3;
    result = (result + 1);
  }
  while (v3);
  if ((_DWORD)result == 1)
  {
    if (*(_QWORD *)(*v2 + 8))
      return 1;
    v4 = *(_QWORD *)(*v2 + 16);
    if (v4 < archive_entry_size(v1))
    {
      return 1;
    }
    else
    {
      v5 = (_QWORD *)*v2;
      if (*v2)
      {
        do
        {
          v6 = (_QWORD *)*v5;
          free(v5);
          *v2 = v6;
          v5 = v6;
        }
        while (v6);
      }
      result = 0;
      *(_QWORD *)(v1 + 1216) = 0;
    }
  }
  return result;
}

uint64_t archive_entry_sparse_reset(uint64_t result)
{
  *(_QWORD *)(result + 1224) = *(_QWORD *)(result + 1208);
  return archive_entry_sparse_count(result);
}

uint64_t archive_entry_sparse_next(uint64_t a1, _QWORD *a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v6;

  v3 = *(uint64_t **)(a1 + 1224);
  if (v3)
  {
    result = 0;
    v6 = *v3;
    *a2 = v3[1];
    v3 = (uint64_t *)v3[2];
    *(_QWORD *)(a1 + 1224) = v6;
  }
  else
  {
    *a2 = 0;
    result = 4294967276;
  }
  *a3 = v3;
  return result;
}

char *archive_entry_strmode(char *a1)
{
  char *v2;
  unsigned __int16 v3;
  unsigned int v4;
  unint64_t v5;
  char v6;
  uint64_t i;
  char v8;
  char v10;
  char v11;

  v2 = a1 + 1232;
  strcpy(a1 + 1232, "?rwxrwxrwx ");
  v3 = archive_entry_mode((uint64_t)a1);
  HIDWORD(v5) = archive_entry_filetype((uint64_t)a1);
  LODWORD(v5) = HIDWORD(v5) - 4096;
  v4 = v5 >> 12;
  if (v4 < 0xC && ((0xAABu >> v4) & 1) != 0)
  {
    v6 = aPcDBLS[v4];
    goto LABEL_6;
  }
  if (archive_entry_hardlink((uint64_t)a1))
  {
    v6 = 104;
LABEL_6:
    *v2 = v6;
  }
  for (i = 0; i != 9; ++i)
  {
    if ((word_1DB74C478[i] & v3) == 0)
      a1[i + 1233] = 45;
  }
  if ((v3 & 0x800) == 0)
  {
    if ((v3 & 0x400) == 0)
      goto LABEL_13;
LABEL_25:
    if ((v3 & 8) != 0)
      v11 = 115;
    else
      v11 = 83;
    a1[1238] = v11;
    if ((v3 & 0x200) == 0)
      goto LABEL_18;
    goto LABEL_14;
  }
  if ((v3 & 0x40) != 0)
    v10 = 115;
  else
    v10 = 83;
  a1[1235] = v10;
  if ((v3 & 0x400) != 0)
    goto LABEL_25;
LABEL_13:
  if ((v3 & 0x200) != 0)
  {
LABEL_14:
    if ((v3 & 1) != 0)
      v8 = 116;
    else
      v8 = 84;
    a1[1241] = v8;
  }
LABEL_18:
  if (archive_entry_acl_types((uint64_t)a1))
    a1[1242] = 43;
  return v2;
}

uint64_t archive_entry_xattr_count(uint64_t result)
{
  _QWORD *v1;

  v1 = (_QWORD *)(result + 1192);
  LODWORD(result) = -1;
  do
  {
    v1 = (_QWORD *)*v1;
    result = (result + 1);
  }
  while (v1);
  return result;
}

uint64_t archive_entry_xattr_reset(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  v1 = *(_QWORD **)(a1 + 1192);
  *(_QWORD *)(a1 + 1200) = v1;
  for (result = 0; v1; v1 = (_QWORD *)*v1)
    result = (result + 1);
  return result;
}

uint64_t archive_entry_xattr_next(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t result;
  _QWORD *v7;

  v4 = *(_QWORD *)(a1 + 1200);
  if (v4)
  {
    result = 0;
    *a2 = *(_QWORD *)(v4 + 8);
    *a3 = *(_QWORD *)(*(_QWORD *)(a1 + 1200) + 16);
    v7 = *(_QWORD **)(a1 + 1200);
    v4 = v7[3];
    *(_QWORD *)(a1 + 1200) = *v7;
  }
  else
  {
    *a2 = 0;
    *a3 = 0;
    result = 4294967276;
  }
  *a4 = v4;
  return result;
}

uint64_t sub_1DB6F1D78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  char *v23;
  uint64_t v24;
  size_t v25;
  size_t v26;
  uint64_t v27;
  size_t v28;
  _DWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  _DWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  const Bytef *v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const Bytef *v77;
  BOOL v78;
  _QWORD *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  size_t v112;
  char *v113;
  char *v114;
  unsigned int v115;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  void *__src[2];
  void *v129[2];
  void *v130;
  uint64_t v131;
  unint64_t v132;

  v10 = **(_QWORD **)(a1 + 2472);
  v11 = (_DWORD *)(v10 + 20728);
  if (*(_DWORD *)(v10 + 20728) == -1)
    *v11 = 0;
  *(_DWORD *)(a1 + 16) = 917504;
  if (!*(_QWORD *)(a1 + 24))
    *(_QWORD *)(a1 + 24) = "7-Zip";
  if (*(_QWORD *)(v10 + 160))
  {
    v12 = *(_QWORD *)(v10 + 168) + 88;
    *(_QWORD *)(v10 + 168) = v12;
    v13 = *(_QWORD *)(v10 + 144);
    goto LABEL_73;
  }
  v130 = 0;
  *(_OWORD *)__src = 0u;
  *(_OWORD *)v129 = 0u;
  v131 = 0;
  v14 = (_BYTE *)sub_1DB6E2588(a1, 0x20uLL, &v131, a4, a5, a6, a7, a8);
  if (!v14)
    goto LABEL_70;
  v21 = (size_t)v14;
  if ((*v14 != 77 || v14[1] != 90) && *(_DWORD *)v14 != 1179403647)
    goto LABEL_11;
  v132 = 0;
  if (v131 <= 159744)
  {
    if (sub_1DB6F802C(a1, 159744, 0) < 0)
      goto LABEL_70;
  }
  else
  {
    sub_1DB6E26F0(a1, 159744, v15, v16, v17, v18, v19, v20);
  }
  v24 = 0;
  v25 = 1;
  while (1)
  {
    while (1)
    {
      v26 = sub_1DB6E2588(a1, v25, &v132, v16, v17, v18, v19, v20);
      if (!v26)
      {
        if (v25 < 0x80)
          goto LABEL_36;
        v25 >>= 1;
        goto LABEL_25;
      }
      if ((uint64_t)v132 >= 6)
        break;
      v25 = 4096;
LABEL_25:
      if (v25 + v24 >= 0x39001)
        goto LABEL_36;
    }
    v28 = v26;
    v29 = v11;
    v30 = a2;
    if (v132 >= 0x21)
      break;
    v32 = v26;
LABEL_33:
    v34 = v32 - v28;
    sub_1DB6E26F0(a1, v34, v27, v16, v17, v18, v19, v20);
    v24 += v34;
    if (v25 == 1)
      v25 = 4096;
    a2 = v30;
    v11 = v29;
    if (v24 + v25 >= 0x39001)
    {
LABEL_36:
      v23 = "Couldn't find out 7-Zip header";
      goto LABEL_37;
    }
  }
  v31 = v26 + v132;
  v32 = v26;
  while (1)
  {
    v33 = sub_1DB6F2888(v32);
    if (!v33)
      break;
    v32 += v33;
    if (v32 + 32 >= v31)
      goto LABEL_33;
  }
  v47 = **(_QWORD **)(a1 + 2472);
  sub_1DB6E26F0(a1, v32 - v28, v27, v16, v17, v18, v19, v20);
  *(_QWORD *)(v47 + 136) = v24 + 159744 + v32 - v28;
  v21 = sub_1DB6E2588(a1, 0x20uLL, &v131, v48, v49, v50, v51, v52);
  a2 = v30;
  v11 = v29;
  if (!v21)
  {
LABEL_70:
    v53 = 0;
    v54 = 4294967266;
    goto LABEL_71;
  }
LABEL_11:
  *(_QWORD *)(v10 + 136) += 32;
  if (*(_DWORD *)v21 != -1346602441 || *(_WORD *)(v21 + 4) != 7207)
  {
    v23 = "Not 7-Zip archive file";
    goto LABEL_68;
  }
  if (crc32(0, (const Bytef *)(v21 + 12), 0x14u) != *(_DWORD *)(v21 + 8))
  {
    v23 = "Header CRC error";
LABEL_68:
    v35 = (_DWORD *)a1;
    v36 = -1;
LABEL_69:
    archive_set_error(v35, v36, v23, v16, v17, v18, v19, v20, v126);
    goto LABEL_70;
  }
  v38 = *(_QWORD *)(v21 + 20);
  if (!v38)
  {
    v53 = 0;
    v54 = 1;
    goto LABEL_71;
  }
  v39 = *(_QWORD *)(v21 + 12);
  if (v39 < 0)
  {
LABEL_67:
    v23 = "Malformed 7-Zip archive";
    goto LABEL_68;
  }
  v40 = *(unsigned int *)(v21 + 28);
  sub_1DB6E26F0(a1, 32, v37, v16, v17, v18, v19, v20);
  if (v39)
  {
    if (v131 >= v39)
    {
      sub_1DB6E26F0(a1, v39, v41, v42, v43, v44, v45, v46);
    }
    else if (sub_1DB6F802C(a1, *(_QWORD *)(v10 + 136) + v39, 0) < 0)
    {
      goto LABEL_70;
    }
  }
  *(_QWORD *)(v10 + 248) = v39;
  *(_QWORD *)(v10 + 120) = 0;
  *(_QWORD *)(v10 + 128) = v39;
  *(_QWORD *)(v10 + 112) = v38;
  *(_QWORD *)(v10 + 104) = 1;
  *v11 = 0;
  v55 = sub_1DB6F2954(a1, 1uLL, v41, v42, v43, v44, v45, v46);
  if (!v55)
  {
    v23 = "Truncated 7-Zip file body";
LABEL_37:
    v35 = (_DWORD *)a1;
    v36 = 79;
    goto LABEL_69;
  }
  v56 = *v55;
  if (v56 == 1)
    goto LABEL_64;
  if (v56 != 23)
  {
    v126 = (char *)*v55;
    v23 = "Unexpected Property ID = %X";
    goto LABEL_68;
  }
  v57 = sub_1DB6F2A2C(a1, v10);
  if (v57)
  {
    v64 = v57;
    goto LABEL_61;
  }
  if (*(_QWORD *)(v10 + 120) == v40)
  {
    v65 = *(_QWORD *)(v10 + 56);
    if (*(_BYTE *)(v65 + 72))
    {
      LODWORD(v40) = *(_DWORD *)(v65 + 76);
      v56 = 1;
    }
    else
    {
      v56 = 0;
    }
    if (*(_QWORD *)(v10 + 288))
    {
      sub_1DB6F2AF8(a1, v65, v58, v59, v60, v61, v62, v63);
      v65 = *(_QWORD *)(v10 + 56);
    }
    v118 = sub_1DB6F2B38(a1, v65, 1);
    if (!v118)
    {
      *(_QWORD *)(v10 + 112) = *(_QWORD *)(v10 + 264);
      v118 = sub_1DB6F30DC(a1, v119, v120, v121, v122, v123, v124, v125);
    }
    v64 = v118;
  }
  else
  {
    v64 = -1;
    archive_set_error((_DWORD *)a1, -1, "Damaged 7-Zip archive", v59, v60, v61, v62, v63, v126);
LABEL_61:
    v56 = 1;
  }
  sub_1DB6E8220(v10);
  *(_QWORD *)(v10 + 96) = 0;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  if (v64 < 0)
    goto LABEL_70;
  *(_DWORD *)(v10 + 108) = 1;
  *(_QWORD *)(v10 + 120) = 0;
LABEL_64:
  *__error() = 0;
  if ((sub_1DB6F3174(a1, (unint64_t *)__src, *(unsigned int *)(v10 + 108), v66, v67, v68, v69, v70) & 0x80000000) != 0)
  {
    if (*__error() == 12)
      v23 = "Couldn't allocate memory";
    else
      v23 = "Damaged 7-Zip archive";
    goto LABEL_68;
  }
  v77 = sub_1DB6F2954(a1, 1uLL, v71, v72, v73, v74, v75, v76);
  if (!v77 || *v77 || v56 && *(_QWORD *)(v10 + 120) != v40)
    goto LABEL_67;
  v54 = 0;
  *(_QWORD *)(v10 + 240) = 0;
  *(_QWORD *)(v10 + 288) = 0;
  *(_DWORD *)(v10 + 104) = 0;
  v53 = 1;
  *(_QWORD *)(v10 + 264) = 0;
  *(_QWORD *)(v10 + 272) = 0;
LABEL_71:
  free(__src[1]);
  free(v129[0]);
  free(v129[1]);
  free(v130);
  if (!v53)
    return v54;
  v13 = *(_QWORD *)(v10 + 152);
  v12 = *(_QWORD *)(v10 + 160);
  *(_QWORD *)(v10 + 144) = v13;
  *(_QWORD *)(v10 + 168) = v12;
LABEL_73:
  if (v13)
    v78 = v12 == 0;
  else
    v78 = 1;
  if (v78)
    return 1;
  *(_QWORD *)(v10 + 144) = v13 - 1;
  *(_QWORD *)(v10 + 184) = 0;
  *(_BYTE *)(v10 + 208) = 0;
  *(_QWORD *)(v10 + 200) = crc32(0, 0, 0);
  if (!*(_QWORD *)(v10 + 20656))
  {
    v79 = sub_1DB6E3A78(a1, "UTF-16LE", 1);
    *(_QWORD *)(v10 + 20656) = v79;
    if (!v79)
      return 4294967266;
  }
  v127 = a1;
  v80 = *(unsigned int *)(v12 + 16);
  if (*(_QWORD *)(v10 + 48) > v80)
  {
    v81 = *(_QWORD *)(v10 + 56);
    if (v81)
    {
      v82 = (unint64_t *)(v81 + 104 * v80);
      if (*v82)
      {
        v83 = 0;
        v84 = 0;
        v85 = (_QWORD *)(v81 + 104 * v80 + 8);
        do
        {
          v86 = *(_QWORD *)(*v85 + v83);
          if (v86 == 116457729 || v86 == 116459265 || v86 == 116458243)
          {
            archive_entry_set_is_data_encrypted(a2, 1);
            *v11 = 1;
          }
          ++v84;
          v83 += 40;
        }
        while (v84 < *v82);
      }
    }
  }
  if (*v11 == -1)
    *v11 = 0;
  v89 = a2;
  if (!sub_1DB6E3BD0(a2, *(char **)(v12 + 8), *(_QWORD *)v12, *(_QWORD *)(v10 + 20656)))
  {
    v54 = 0;
    goto LABEL_104;
  }
  if (*__error() != 12)
  {
    v96 = (char *)sub_1DB72D0D4(*(_QWORD *)(v10 + 20656));
    archive_set_error((_DWORD *)v127, 79, "Pathname cannot be converted from %s to current locale.", v97, v98, v99, v100, v101, v96);
    v54 = 4294967276;
LABEL_104:
    archive_entry_set_mode(a2, *(_WORD *)(v12 + 80));
    v102 = *(_DWORD *)(v12 + 24);
    if ((v102 & 1) != 0)
    {
      archive_entry_set_mtime(a2, *(_QWORD *)(v12 + 32), *(_QWORD *)(v12 + 56));
      v102 = *(_DWORD *)(v12 + 24);
      if ((v102 & 4) == 0)
      {
LABEL_106:
        if ((v102 & 2) == 0)
          goto LABEL_108;
        goto LABEL_107;
      }
    }
    else if ((v102 & 4) == 0)
    {
      goto LABEL_106;
    }
    archive_entry_set_ctime(a2, *(_QWORD *)(v12 + 48), *(_QWORD *)(v12 + 72));
    if ((*(_DWORD *)(v12 + 24) & 2) == 0)
    {
LABEL_108:
      v103 = *(unsigned int *)(v12 + 20);
      if ((_DWORD)v103 == -1)
        v104 = 0;
      else
        v104 = *(_QWORD *)(*(_QWORD *)(v10 + 80) + 8 * v103);
      *(_QWORD *)(v10 + 192) = v104;
      archive_entry_set_size(a2, v104);
      if (*(_QWORD *)(v10 + 192))
      {
        if ((*(_DWORD *)(v12 + 80) & 0xF000) == 0xA000)
        {
          v109 = 0;
          v110 = 0;
          do
          {
            __src[0] = 0;
            v132 = 0;
            v111 = sub_1DB6F25D0(v127, (size_t *)__src, (uint64_t *)&v132, &v131, v105, v106, v107, v108);
            if ((int)v111 <= -21)
            {
              v117 = v111;
              free(v110);
              return v117;
            }
            v112 = v132;
            v113 = (char *)malloc_type_realloc(v110, v109 + v132 + 1, 0x59E5A342uLL);
            if (!v113)
            {
              free(v110);
              v95 = "Can't allocate memory for Symname";
              goto LABEL_100;
            }
            v114 = v113;
            memcpy(&v113[v109], __src[0], v112);
            v109 += v112;
            v110 = v114;
          }
          while (*(_QWORD *)(v10 + 192));
          if (v109)
          {
            v114[v109] = 0;
            v89 = a2;
            archive_entry_copy_symlink(a2, v114);
            goto LABEL_125;
          }
          v89 = a2;
          goto LABEL_124;
        }
      }
      else
      {
        *(_BYTE *)(v10 + 208) = 1;
        if ((*(_DWORD *)(v12 + 80) & 0xF000) == 0xA000)
        {
          v114 = 0;
LABEL_124:
          v115 = *(_DWORD *)(v12 + 80) & 0xFFFF0FFF | 0x8000;
          *(_DWORD *)(v12 + 80) = v115;
          archive_entry_set_mode(v89, v115);
LABEL_125:
          free(v114);
          archive_entry_set_size(v89, 0);
        }
      }
      __sprintf_chk((char *)(v10 + 20664), 0, 0x40uLL, "7-Zip");
      *(_QWORD *)(v127 + 24) = v10 + 20664;
      return v54;
    }
LABEL_107:
    archive_entry_set_atime(a2, *(_QWORD *)(v12 + 40), *(_QWORD *)(v12 + 64));
    goto LABEL_108;
  }
  v95 = "Can't allocate memory for Pathname";
LABEL_100:
  archive_set_error((_DWORD *)v127, 12, v95, v90, v91, v92, v93, v94, v126);
  return 4294967266;
}

uint64_t sub_1DB6F25D0(uint64_t a1, size_t *a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;

  v12 = **(_QWORD **)(a1 + 2472);
  if (*(_DWORD *)(v12 + 20728) == -1)
    *(_DWORD *)(v12 + 20728) = 0;
  if (*(_QWORD *)(v12 + 288))
    sub_1DB6F2AF8(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  *a4 = *(_QWORD *)(v12 + 184);
  *a3 = 0;
  *a2 = 0;
  if (*(_BYTE *)(v12 + 208))
    return 1;
  if (*(_QWORD *)(v12 + 192) >= 0x1000000uLL)
    v14 = 0x1000000;
  else
    v14 = *(_QWORD *)(v12 + 192);
  result = sub_1DB6F3868(a1, a2, v14, 0, a5, a6, a7, a8);
  v20 = result;
  if ((result & 0x8000000000000000) == 0)
  {
    if (result)
    {
      v21 = *(_QWORD *)(v12 + 192) - result;
      *(_QWORD *)(v12 + 192) = v21;
      if (!v21)
        *(_BYTE *)(v12 + 208) = 1;
      if ((*(_BYTE *)(*(_QWORD *)(v12 + 168) + 24) & 8) != 0)
        *(_QWORD *)(v12 + 200) = crc32(*(_QWORD *)(v12 + 200), (const Bytef *)*a2, result);
      if (*(_BYTE *)(v12 + 208)
        && (v22 = *(_QWORD *)(v12 + 168), (*(_BYTE *)(v22 + 24) & 8) != 0)
        && *(_QWORD *)(v12 + 200) != *(_DWORD *)(*(_QWORD *)(v12 + 96) + 4 * *(unsigned int *)(v22 + 20)))
      {
        archive_set_error((_DWORD *)a1, -1, "7-Zip bad CRC: 0x%lx should be 0x%lx", v15, v16, v17, v18, v19, *(char **)(v12 + 200));
        result = 4294967276;
      }
      else
      {
        result = 0;
      }
      *a3 = v20;
      *a4 = *(_QWORD *)(v12 + 184);
      *(_QWORD *)(v12 + 184) += v20;
    }
    else
    {
      archive_set_error((_DWORD *)a1, 79, "Truncated 7-Zip file body", v15, v16, v17, v18, v19, v23);
      return 4294967266;
    }
  }
  return result;
}

uint64_t sub_1DB6F2750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  size_t v21;

  v9 = **(_QWORD **)(a1 + 2472);
  if (*(_QWORD *)(v9 + 288))
    sub_1DB6F2AF8(a1, a2, a3, a4, a5, a6, a7, a8);
  if (*(_BYTE *)(v9 + 208))
    return 0;
  v11 = *(_QWORD *)(v9 + 192);
  v12 = **(_QWORD **)(a1 + 2472);
  if (*(_DWORD *)(v12 + 256))
  {
    if (v11)
    {
      v13 = *(_QWORD *)(v9 + 192);
      while (1)
      {
        v14 = sub_1DB6F3868(a1, &v21, v13, 0, a5, a6, a7, a8);
        if (v14 < 0)
          return 4294967266;
        v18 = v14;
        if (!v14)
        {
          archive_set_error((_DWORD *)a1, 79, "Truncated 7-Zip file body", v17, a5, a6, a7, a8, v20);
          return 4294967266;
        }
        if (*(_QWORD *)(v12 + 288))
          sub_1DB6F2AF8(a1, v15, v16, v17, a5, a6, a7, a8);
        v13 -= v18;
        if (!v13)
        {
          if ((v11 & 0x8000000000000000) == 0)
            break;
          return 4294967266;
        }
      }
    }
LABEL_16:
    result = 0;
    *(_QWORD *)(v9 + 192) = 0;
    *(_BYTE *)(v9 + 208) = 1;
    return result;
  }
  v19 = *(_QWORD *)(v12 + 56) + 104 * *(unsigned int *)(*(_QWORD *)(v12 + 168) + 16);
  *(_QWORD *)(v19 + 96) += v11;
  if ((v11 & 0x8000000000000000) == 0)
    goto LABEL_16;
  return 4294967266;
}

uint64_t sub_1DB6F2858()
{
  return 3;
}

uint64_t sub_1DB6F2860(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  if (a1 && (v1 = *(uint64_t **)(a1 + 2472)) != 0 && (v2 = *v1) != 0)
    return *(unsigned int *)(v2 + 20728);
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_1DB6F2888(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  BOOL v3;

  v1 = *(unsigned __int8 *)(a1 + 5);
  if (v1 > 0x79)
  {
    switch(v1)
    {
      case 0x7Au:
        return 4;
      case 0xAFu:
        return 2;
      case 0xBCu:
        return 3;
    }
    return 6;
  }
  if (v1 != 28)
  {
    if (v1 == 39)
      return 1;
    if (v1 == 55)
      return 5;
    return 6;
  }
  v3 = *(_DWORD *)a1 == -1346602441 && *(_WORD *)(a1 + 4) == 7207;
  v2 = 6;
  if (v3)
  {
    if (crc32(0, (const Bytef *)(a1 + 12), 0x14u) == *(_DWORD *)(a1 + 8))
      return 0;
    else
      return 6;
  }
  return v2;
}

const Bytef *sub_1DB6F2954(uint64_t a1, size_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  const Bytef *v9;
  uint64_t v12;
  Bytef *buf;

  v8 = **(_QWORD **)(a1 + 2472);
  if (*(_QWORD *)(v8 + 112) < a2)
    return 0;
  if (*(_QWORD *)(v8 + 288))
    sub_1DB6F2AF8(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(v8 + 108))
  {
    v9 = (const Bytef *)sub_1DB6E2588(a1, a2, 0, a4, a5, a6, a7, a8);
    if (!v9)
      return v9;
    *(_QWORD *)(v8 + 112) -= a2;
    *(_QWORD *)(v8 + 288) = a2;
LABEL_10:
    *(_QWORD *)(v8 + 120) = crc32(*(_QWORD *)(v8 + 120), v9, a2);
    return v9;
  }
  buf = 0;
  v12 = sub_1DB6F3868(a1, (size_t *)&buf, a2, a2, a5, a6, a7, a8);
  if (v12 >= 1)
  {
    *(_QWORD *)(v8 + 112) -= v12;
    v9 = buf;
    goto LABEL_10;
  }
  return 0;
}

uint64_t sub_1DB6F2A2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  char *v21;

  v4 = **(_QWORD **)(a1 + 2472);
  *__error() = 0;
  if ((sub_1DB6F4ACC(a1, a2, v5, v6, v7, v8, v9, v10) & 0x80000000) != 0)
  {
    if (*__error() == 12)
      v16 = "Couldn't allocate memory";
    else
      v16 = "Malformed 7-Zip archive";
  }
  else if (*(_QWORD *)(a2 + 8) && *(_QWORD *)(a2 + 48))
  {
    v16 = "Malformed Header offset";
    if ((*(_QWORD *)a2 & 0x8000000000000000) == 0)
    {
      v17 = **(_QWORD **)(a2 + 16);
      v18 = v17 + *(_QWORD *)a2;
      v19 = v17 && *(_QWORD *)(v4 + 128) >= v18;
      if (v19 && (v18 & 0x8000000000000000) == 0)
        return 0;
    }
  }
  else
  {
    v16 = "Malformed 7-Zip archive";
  }
  archive_set_error((_DWORD *)a1, -1, v16, v11, v12, v13, v14, v15, v21);
  return 4294967266;
}

uint64_t sub_1DB6F2AF8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *(uint64_t **)(result + 2472);
  v9 = *v8;
  v10 = *(_QWORD *)(*v8 + 288);
  if (v10)
  {
    result = sub_1DB6E26F0(result, v10, a3, a4, a5, a6, a7, a8);
    *(_QWORD *)(v9 + 248) += *(_QWORD *)(v9 + 288);
    *(_QWORD *)(v9 + 288) = 0;
  }
  return result;
}

uint64_t sub_1DB6F2B38(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t i;
  const char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v24;
  char *v25;
  BOOL v26;
  char **v27;
  char **v28;
  char **v29;
  char **v30;
  _QWORD *v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  char *v69;
  _DWORD *v70;
  int v71;
  char *v73;
  void *__src;
  uint64_t v75;
  int v76;
  _QWORD v77[3];
  uint64_t v78;
  int8x16_t v79;
  void *v80;
  void *v81;
  void *v82;
  __int128 v83;
  char **v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v6 = **(_QWORD **)(a1 + 2472);
  for (i = 2502; i != 2505; ++i)
  {
    free(*(void **)(v6 + 8 * i));
    *(_QWORD *)(v6 + 8 * i) = 0;
  }
  if (a3)
    v8 = "archive header";
  else
    v8 = "file content";
  v9 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(v6 + 276) = v9;
  *(_DWORD *)(v6 + 272) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(v6 + 264) = sub_1DB6F5A40(a2);
  *(_QWORD *)(v6 + 240) = 0;
  v17 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v18 = 0;
    v19 = 0;
    v20 = 1;
    while (1)
    {
      v21 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 40 * v18);
      if (v21 > 116457728)
      {
        if (v21 == 116457729 || v21 == 116459265 || v21 == 116458243)
        {
          *(_DWORD *)(v6 + 20728) = 1;
          v24 = *(_QWORD *)(a1 + 160);
          if (v24)
          {
            archive_entry_set_is_data_encrypted(v24, 1);
            archive_entry_set_is_metadata_encrypted(*(_QWORD *)(a1 + 160), 1);
          }
          v73 = (char *)v8;
          v25 = "The %s is encrypted, but currently not supported";
          goto LABEL_82;
        }
      }
      else if (v21 == 50528539)
      {
        ++v19;
      }
      v18 = v20;
      v26 = v17 > v20++;
      if (!v26)
        goto LABEL_24;
    }
  }
  v19 = 0;
LABEL_24:
  if (*(_DWORD *)(v6 + 20728) == -1)
    *(_DWORD *)(v6 + 20728) = 0;
  if (v19)
    v26 = 0;
  else
    v26 = v17 > 2;
  if (v26 || v19 >= 2)
  {
    v73 = (char *)v8;
    v25 = "The %s is encoded with many filters, but currently not supported";
    goto LABEL_82;
  }
  v27 = *(char ***)(a2 + 8);
  v28 = v27 + 5;
  if (v17 == 2)
    v29 = v27 + 5;
  else
    v29 = 0;
  if (!v19)
  {
    v28 = v29;
LABEL_45:
    if (sub_1DB6F5AA8(a1, v6, (uint64_t)v27, v28, v13, v14, v15, v16))
      return 4294967266;
    else
      return 0;
  }
  v83 = xmmword_1EA3222D8;
  v84 = (char **)&unk_1DB74C4E0;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v79.i64[0] = -1;
  v79.i64[1] = -1;
  v78 = -1;
  memset(v77, 0, sizeof(v77));
  v76 = 2;
  __src = 0;
  v75 = 0x100000000;
  if (v17 == 4)
  {
    v30 = v27 + 15;
    if (v27[15] == (char *)50528539 && *(_QWORD *)(a2 + 48) == 7 && *(_QWORD *)(a2 + 56) == 4 && v9 == 4)
    {
      if (**(_QWORD **)(a2 + 24) == 5)
      {
        v75 = 0x200000001;
        v76 = 0;
        *((_QWORD *)&v83 + 1) = v27 + 5;
        v84 = v27;
        v79 = vextq_s8(*(int8x16_t *)*(_QWORD *)(a2 + 64), *(int8x16_t *)*(_QWORD *)(a2 + 64), 8uLL);
        v28 = v27 + 10;
        goto LABEL_42;
      }
      v69 = v27[5];
      if (*v27)
      {
        if (!v69)
        {
          v28 = v27;
          if (!v27[10])
            goto LABEL_42;
        }
      }
      else
      {
        if (!v69)
        {
          v28 = v27 + 10;
          goto LABEL_42;
        }
        if (!v27[10])
        {
LABEL_42:
          v31 = (_QWORD *)(*(_QWORD *)(a2 + 64) + 16);
          v27 = v28;
          v28 = v30;
          goto LABEL_54;
        }
      }
    }
    goto LABEL_81;
  }
  if (v17 != 2 || *v28 != (char *)50528539 || v9 != 4 || *(_QWORD *)(a2 + 48) != 5 || *(_QWORD *)(a2 + 56) != 2)
  {
LABEL_81:
    v25 = "Unsupported form of BCJ2 streams";
LABEL_82:
    v70 = (_DWORD *)a1;
    v71 = -1;
LABEL_83:
    archive_set_error(v70, v71, v25, v12, v13, v14, v15, v16, v73);
    return 4294967266;
  }
  v31 = *(_QWORD **)(a2 + 64);
LABEL_54:
  *(_QWORD *)(v6 + 20008) = *v31;
  v33 = sub_1DB6F30DC(a1, v10, v11, v12, v13, v14, v15, v16);
  if ((v33 & 0x80000000) != 0)
    return v33;
  *(_QWORD *)(v6 + 288) = *(_QWORD *)(v6 + 280);
  sub_1DB6F2AF8(a1, v34, v35, v36, v37, v38, v39, v40);
  v48 = 0;
  while (1)
  {
    v49 = *((_QWORD *)&v83 + v48);
    v50 = sub_1DB6F30DC(a1, v41, v42, v43, v44, v45, v46, v47);
    if ((v50 & 0x80000000) != 0)
      break;
    v55 = *(&v78 + v48);
    if (v55 == -1)
      v55 = *(_QWORD *)(v6 + 280);
    *(_QWORD *)(v6 + 264) = v55;
    if (sub_1DB6F5AA8(a1, v6, v49, 0, v51, v52, v53, v54))
    {
      free(v80);
      free(v81);
      free(v82);
      return 4294967266;
    }
    v56 = (char *)malloc_type_malloc(*(_QWORD *)(v6 + 264), 0x3784629EuLL);
    *(&v80 + v48) = v56;
    if (!v56)
    {
      free(v80);
      free(v81);
      free(v82);
LABEL_91:
      v25 = "No memory for 7-Zip decompression";
      v70 = (_DWORD *)a1;
      v71 = 12;
      goto LABEL_83;
    }
    v57 = v56;
    while (*(_QWORD *)(v6 + 280))
    {
      v32 = sub_1DB6F3A58(a1, 0, v42, v43, v44, v45, v46, v47);
      if ((v32 & 0x80000000) != 0)
        goto LABEL_88;
      v32 = sub_1DB6F4454(a1, (size_t *)&__src, *(_QWORD *)(v6 + 240), 0, v58, v59, v60, v61);
      if ((v32 & 0x8000000000000000) != 0)
        goto LABEL_88;
      v62 = v77[v48];
      memcpy(&v57[v62], __src, v32);
      v77[v48] = v62 + v32;
      if (*(_QWORD *)(v6 + 288))
        sub_1DB6F2AF8(a1, v41, v42, v43, v44, v45, v46, v47);
    }
    if (++v48 == 3)
    {
      v63 = 0;
      v64 = (_QWORD *)(v6 + 20016);
      do
      {
        v65 = *(int *)((char *)&v75 + v63);
        v66 = (uint64_t)*(&v80 + v65);
        v67 = v77[v65];
        *v64 = v66;
        v64[3] = v67;
        v64[6] = v67;
        v63 += 4;
        ++v64;
      }
      while (v63 != 12);
      if (*(_QWORD *)(v6 + 20088)
        || (*(_QWORD *)(v6 + 20096) = 0x8000,
            v68 = malloc_type_malloc(0x8000uLL, 0xC42BF17CuLL),
            (*(_QWORD *)(v6 + 20088) = v68) != 0))
      {
        *(_QWORD *)(v6 + 19976) = 0;
        *(_QWORD *)(v6 + 20648) = 0;
        *(_OWORD *)(v6 + 20104) = 0u;
        *(_DWORD *)(v6 + 276) = 1;
        *(_DWORD *)(v6 + 272) = *(_DWORD *)(a2 + 88);
        *(_QWORD *)(v6 + 264) = sub_1DB6F5A40(a2);
        *(_QWORD *)(v6 + 240) = 0;
        goto LABEL_45;
      }
      goto LABEL_91;
    }
  }
  v32 = v50;
LABEL_88:
  free(v80);
  free(v81);
  free(v82);
  return v32;
}

uint64_t sub_1DB6F30DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char *v13;

  v8 = **(_QWORD **)(a1 + 2472);
  v9 = *(_DWORD *)(v8 + 276);
  if (v9)
  {
    v10 = *(unsigned int *)(v8 + 272);
    *(_QWORD *)(v8 + 280) = *(_QWORD *)(*(_QWORD *)(v8 + 16) + 8 * v10);
    v11 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8 * v10);
    if (*(_QWORD *)(v8 + 248) == v11)
    {
LABEL_5:
      result = 0;
      *(_DWORD *)(v8 + 272) = v10 + 1;
      *(_DWORD *)(v8 + 276) = v9 - 1;
      return result;
    }
    if ((sub_1DB6F802C(a1, *(_QWORD *)(v8 + 136) + v11, 0) & 0x8000000000000000) == 0)
    {
      *(_QWORD *)(v8 + 248) = v11;
      LODWORD(v10) = *(_DWORD *)(v8 + 272);
      v9 = *(_DWORD *)(v8 + 276);
      goto LABEL_5;
    }
  }
  else
  {
    archive_set_error((_DWORD *)a1, -1, "Damaged 7-Zip archive", a4, a5, a6, a7, a8, v13);
  }
  return 4294967266;
}

uint64_t sub_1DB6F3174(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  const Bytef *v11;
  const Bytef *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  const Bytef *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const Bytef *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const Bytef *v34;
  size_t *v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  const Bytef *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  size_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  unint64_t v77;
  size_t v78;
  const Bytef *v79;
  unint64_t v80;
  uint64_t v81;
  unsigned int v82;
  _QWORD *v83;
  uint64_t i;
  const Bytef *v85;
  int v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  size_t v93;
  unint64_t v94;
  uint64_t v95;
  unsigned int v96;
  const Bytef *v97;
  uint64_t v99;
  int v100;
  int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  unint64_t v106;
  int v107;
  char *v108;
  char *v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int *v112;
  int *v113;
  unint64_t v114;
  int v115;
  _BOOL4 v116;
  uint64_t v118;
  char *v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  unint64_t v125;
  uint64_t v126;
  size_t v127;

  v10 = **(_QWORD ***)(a1 + 2472);
  if ((_DWORD)a3)
  {
    v11 = sub_1DB6F2954(a1, 1uLL, a3, a4, a5, a6, a7, a8);
    if (!v11 || *v11 != 1)
      return 0xFFFFFFFFLL;
  }
  v12 = sub_1DB6F2954(a1, 1uLL, a3, a4, a5, a6, a7, a8);
  if (!v12)
    return 0xFFFFFFFFLL;
  result = *v12;
  if ((_DWORD)result == 2)
  {
    while (1)
    {
      v127 = 0;
      v20 = sub_1DB6F2954(a1, 1uLL, v13, v14, v15, v16, v17, v18);
      if (!v20)
        return 0xFFFFFFFFLL;
      if (!*v20)
        break;
      if ((sub_1DB6F57D0(a1, &v127, v21, v22, v23, v24, v25, v26) & 0x80000000) != 0)
        return 0xFFFFFFFFLL;
    }
    v27 = sub_1DB6F2954(a1, 1uLL, v21, v22, v23, v24, v25, v26);
    if (!v27)
      return 0xFFFFFFFFLL;
    result = *v27;
  }
  if ((_DWORD)result == 4)
  {
    if ((sub_1DB6F4ACC(a1, (uint64_t)v10, v13, v14, v15, v16, v17, v18) & 0x80000000) != 0)
      return 0xFFFFFFFFLL;
    v34 = sub_1DB6F2954(a1, 1uLL, v28, v29, v30, v31, v32, v33);
    if (!v34)
      return 0xFFFFFFFFLL;
    result = *v34;
  }
  if (!(_DWORD)result)
    return result;
  if ((_DWORD)result == 5)
  {
    v35 = v10 + 19;
    if ((sub_1DB6F57D0(a1, v10 + 19, v13, v14, v15, v16, v17, v18) & 0x80000000) == 0 && *v35 <= 0x5F5E100)
    {
      v36 = malloc_type_calloc(*v35, 0x58uLL, 0x1010040723F4071uLL);
      v10[20] = v36;
      if (v36)
      {
        v43 = v36;
        v127 = 0;
        v44 = sub_1DB6F2954(a1, 1uLL, v37, v38, v39, v40, v41, v42);
        if (v44)
        {
          v51 = 0;
          while (2)
          {
            v52 = *v44;
            if (*v44)
            {
              if ((sub_1DB6F57D0(a1, &v127, v45, v46, v47, v48, v49, v50) & 0x80000000) == 0)
              {
                v59 = v127;
                if (v10[14] >= v127)
                {
                  switch(v52)
                  {
                    case 14:
                      if (a2[1])
                        return 0xFFFFFFFFLL;
                      v60 = malloc_type_calloc(*v35, 1uLL, 0x100004077774924uLL);
                      a2[1] = (unint64_t)v60;
                      if (!v60 || (sub_1DB6F59A8(a1, (uint64_t)v60, *v35, v61, v62, v63, v64, v65) & 0x80000000) != 0)
                        return 0xFFFFFFFFLL;
                      if (*v35)
                      {
                        v66 = 0;
                        v51 = 0;
                        do
                        {
                          if (*(_BYTE *)(a2[1] + v66))
                            ++v51;
                          ++v66;
                        }
                        while (*v35 > v66);
                      }
                      else
                      {
                        v51 = 0;
                      }
                      goto LABEL_77;
                    case 15:
                      if (v51 <= 0)
                        goto LABEL_76;
                      if (a2[2])
                        return 0xFFFFFFFFLL;
                      v67 = v51;
                      v68 = malloc_type_calloc(v51, 1uLL, 0x100004077774924uLL);
                      a2[2] = (unint64_t)v68;
                      if (!v68)
                        return 0xFFFFFFFFLL;
                      goto LABEL_45;
                    case 16:
                      if (v51 <= 0)
                        goto LABEL_76;
                      if (a2[3])
                        return 0xFFFFFFFFLL;
                      v67 = v51;
                      v68 = malloc_type_calloc(v51, 1uLL, 0x100004077774924uLL);
                      a2[3] = (unint64_t)v68;
                      if (!v68)
                        return 0xFFFFFFFFLL;
LABEL_45:
                      if ((sub_1DB6F59A8(a1, (uint64_t)v68, v67, v69, v70, v71, v72, v73) & 0x80000000) != 0)
                        return 0xFFFFFFFFLL;
                      goto LABEL_77;
                    case 17:
                      if (!sub_1DB6F2954(a1, 1uLL, v53, v54, v55, v56, v57, v58))
                        return 0xFFFFFFFFLL;
                      v74 = v59 - 1;
                      if ((((_DWORD)v59 - 1) & 1) != 0)
                        return 0xFFFFFFFFLL;
                      if (v74 < 4 * *v35)
                        return 0xFFFFFFFFLL;
                      if (v10[22])
                        return 0xFFFFFFFFLL;
                      v75 = (char *)malloc_type_malloc(v59 - 1, 0xB52FDC5AuLL);
                      v10[22] = v75;
                      if (!v75)
                        return 0xFFFFFFFFLL;
                      v76 = v75;
                      if (v59 == 1)
                        goto LABEL_60;
                      v77 = v59 - 1;
                      do
                      {
                        if (v77 >= 0x10000)
                          v78 = 0x10000;
                        else
                          v78 = v77;
                        v79 = sub_1DB6F2954(a1, v78, v53, v54, v55, v56, v57, v58);
                        if (!v79)
                          return 0xFFFFFFFFLL;
                        memcpy(v76, v79, v78);
                        v76 += v78;
                        v77 -= v78;
                      }
                      while (v77);
                      v76 = (char *)v10[22];
LABEL_60:
                      v80 = *v35;
                      if (!*v35)
                        goto LABEL_77;
                      v81 = 0;
                      v82 = 0;
                      while (1)
                      {
                        v83 = &v43[22 * v81];
                        v83[1] = v76;
                        if (v74 < 2)
                          return 0xFFFFFFFFLL;
                        for (i = 0; v76[i] || v76[i + 1]; i += 2)
                        {
                          v74 -= 2;
                          if (v74 <= 1)
                            return 0xFFFFFFFFLL;
                        }
                        *v83 = i;
                        v76 += i + 2;
                        v74 -= 2;
                        v81 = ++v82;
                        if (v80 <= v82)
                          goto LABEL_77;
                      }
                    case 18:
                    case 19:
                    case 20:
                      if ((sub_1DB6F6274(a1, a2, v52) & 0x80000000) != 0)
                        return 0xFFFFFFFFLL;
                      goto LABEL_77;
                    case 21:
                      v85 = sub_1DB6F2954(a1, 2uLL, v53, v54, v55, v56, v57, v58);
                      if (!v85)
                        return 0xFFFFFFFFLL;
                      if (a2[4])
                        return 0xFFFFFFFFLL;
                      v86 = *v85;
                      v87 = malloc_type_calloc(*v35, 1uLL, 0x100004077774924uLL);
                      a2[4] = (unint64_t)v87;
                      if (!v87)
                        return 0xFFFFFFFFLL;
                      v93 = *v35;
                      if (v86)
                      {
                        memset(v87, 1, v93);
                      }
                      else if ((sub_1DB6F59A8(a1, (uint64_t)v87, v93, v88, v89, v90, v91, v92) & 0x80000000) != 0)
                      {
                        return 0xFFFFFFFFLL;
                      }
                      v94 = *v35;
                      if (*v35)
                      {
                        v95 = 0;
                        v96 = 1;
                        do
                        {
                          if (*(_BYTE *)(a2[4] + v95))
                          {
                            v97 = sub_1DB6F2954(a1, 4uLL, v53, v54, v55, v56, v57, v58);
                            if (!v97)
                              return 0xFFFFFFFFLL;
                            v43[22 * v95 + 21] = *(_DWORD *)v97;
                            v94 = *v35;
                          }
                          v95 = v96;
                        }
                        while (v94 > v96++);
                      }
LABEL_77:
                      v127 = 0;
                      v44 = sub_1DB6F2954(a1, 1uLL, v53, v54, v55, v56, v57, v58);
                      if (!v44)
                        return 0xFFFFFFFFLL;
                      continue;
                    case 25:
                      if (v127)
                        goto LABEL_76;
                      goto LABEL_77;
                    default:
LABEL_76:
                      if (sub_1DB6F2954(a1, v127, v53, v54, v55, v56, v57, v58))
                        goto LABEL_77;
                      return 0xFFFFFFFFLL;
                  }
                }
              }
              return 0xFFFFFFFFLL;
            }
            break;
          }
          if (!v10[19])
            return 0;
          v99 = 0;
          v100 = 0;
          v101 = 0;
          v102 = 0;
          v103 = 0;
          v104 = 0;
          v105 = v10[7];
          while (1)
          {
            v106 = a2[1];
            if (v106 && *(_BYTE *)(v106 + v99))
            {
              v107 = v43[22 * v99 + 6];
            }
            else
            {
              v108 = (char *)&v43[22 * v99];
              v107 = *((_DWORD *)v108 + 6) | 0x10;
              *((_DWORD *)v108 + 6) = v107;
            }
            v109 = (char *)&v43[22 * v99];
            v110 = *((_DWORD *)v109 + 21);
            v111 = HIWORD(v110);
            *((_DWORD *)v109 + 20) = HIWORD(v110);
            v112 = (unsigned int *)(v109 + 80);
            v113 = (int *)(v109 + 24);
            if ((v107 & 0x10) == 0)
              break;
            if (v10[9] <= (unint64_t)v100)
              return 0xFFFFFFFFLL;
            if (!v111)
              *v112 = 33206;
            if (*(_BYTE *)(v10[11] + v100))
              *v113 = v107 | 8;
            v43[22 * v99 + 5] = v100++;
LABEL_119:
            if ((v110 & 1) != 0)
              *v112 &= 0xFFFFFF6D;
            v124 = *v113;
            if (v124 & 0x10 | v103)
            {
              if (!v103)
              {
                v125 = v10[6];
                if (v125 <= v104)
                  return 0xFFFFFFFFLL;
                v126 = v104;
                while (!*(_QWORD *)(v105 + 104 * v126 + 80))
                {
                  result = 0xFFFFFFFFLL;
                  v126 = ++v104;
                  if (v125 <= v104)
                    return result;
                }
              }
              v43[22 * v99 + 4] = v104;
              if ((v124 & 0x10) != 0)
              {
                if (*(_QWORD *)(v105 + 104 * v104 + 80) > (unint64_t)(v103 + 1))
                {
                  ++v103;
                }
                else
                {
                  ++v104;
                  v103 = 0;
                }
              }
            }
            else
            {
              v103 = 0;
              v43[22 * v99 + 4] = -1;
            }
            result = 0;
            v99 = ++v102;
            if (*v35 <= v102)
              return result;
          }
          v114 = a2[2];
          if (v114)
          {
            v115 = *(unsigned __int8 *)(v114 + v101);
            v116 = *(_BYTE *)(v114 + v101++) == 0;
            if (v110 < 0x10000)
            {
              if (v115)
              {
                *v112 = 33206;
LABEL_118:
                v43[22 * v99 + 5] = -1;
                goto LABEL_119;
              }
              goto LABEL_106;
            }
          }
          else
          {
            if (v110 < 0x10000)
            {
LABEL_106:
              *v112 = 16895;
LABEL_114:
              v118 = *(_QWORD *)v109;
              if (*(_QWORD *)v109 >= 2uLL)
              {
                v119 = (char *)&v43[22 * v99];
                v122 = *((_QWORD *)v119 + 1);
                v120 = v119 + 8;
                v121 = v122;
                v123 = v118 + v122;
                if (*(_BYTE *)(v118 + v122 - 2) != 47 || *(_BYTE *)(v123 - 1))
                {
                  *(_BYTE *)(v121 + v118) = 47;
                  *(_BYTE *)(*(_QWORD *)v109 + *v120 + 1) = 0;
                  *(_QWORD *)v109 += 2;
                  v110 = *((_DWORD *)v109 + 21);
                }
              }
              goto LABEL_118;
            }
            v116 = 1;
          }
          if (v110 >> 28 != 4 && v116)
          {
            v111 = HIWORD(v110) & 0xFFF | 0x4000;
            *v112 = v111;
          }
          if ((v111 & 0xF000) != 0x4000)
            goto LABEL_118;
          goto LABEL_114;
        }
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_1DB6F3868(uint64_t a1, size_t *a2, unint64_t a3, size_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  unsigned int v28;
  BOOL v29;
  char *v30;

  v11 = a1;
  v12 = **(_QWORD **)(a1 + 2472);
  if (*(_QWORD *)(v12 + 240))
    return sub_1DB6F4454(v11, a2, a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v12 + 280) || *(_QWORD *)(v12 + 264))
  {
    v13 = sub_1DB6F3A58(a1, 0, a3, a4, a5, a6, a7, a8);
    if ((v13 & 0x8000000000000000) == 0)
      return sub_1DB6F4454(v11, a2, a3, a4, a5, a6, a7, a8);
    return v13;
  }
  if (!*(_DWORD *)(v12 + 276))
  {
    if (*(_DWORD *)(v12 + 104))
    {
      v26 = "Malformed 7-Zip archive";
      v27 = -1;
      goto LABEL_24;
    }
    v28 = *(_DWORD *)(v12 + 256);
    if (!v28)
    {
      v28 = *(_DWORD *)(*(_QWORD *)(v12 + 168) + 16);
      v15 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 104 * v28 + 96);
      if (v28)
        v29 = 0;
      else
        v29 = v15 == 0;
      if (!v29)
      {
        *(_DWORD *)(v12 + 256) = v28;
LABEL_35:
        if (*(_QWORD *)(v12 + 48) <= (unint64_t)v28)
        {
          v25 = 0;
          *a2 = 0;
          return v25;
        }
        if (sub_1DB6F2B38(a1, *(_QWORD *)(v12 + 56) + 104 * v28, 0))
          return -30;
        ++*(_DWORD *)(v12 + 256);
        goto LABEL_8;
      }
      v28 = 0;
    }
    v15 = 0;
    goto LABEL_35;
  }
  v15 = 0;
LABEL_8:
  v16 = sub_1DB6F30DC(v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (v16 < 0)
    return v16;
  v13 = sub_1DB6F3A58(v11, 0, v17, v18, v19, v20, v21, v22);
  if (v13 < 0)
    return v13;
  if (!v15)
    return sub_1DB6F4454(v11, a2, a3, a4, a5, a6, a7, a8);
  while (*(_QWORD *)(v12 + 240))
  {
LABEL_15:
    v25 = sub_1DB6F4454(v11, a2, v15, 0, a5, a6, a7, a8);
    if (v25 < 0)
      return v25;
    if (*(_QWORD *)(v12 + 288))
      sub_1DB6F2AF8(v11, v24, v23, a4, a5, a6, a7, a8);
    v15 -= v25;
    if (!v15)
      return sub_1DB6F4454(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  if (*(_QWORD *)(v12 + 280) || *(_QWORD *)(v12 + 264))
  {
    v13 = sub_1DB6F3A58(v11, 0, v23, a4, a5, a6, a7, a8);
    if (v13 < 0)
      return v13;
    goto LABEL_15;
  }
  v26 = "Truncated 7-Zip file body";
  a1 = v11;
  v27 = 79;
LABEL_24:
  archive_set_error((_DWORD *)a1, v27, v26, a4, a5, a6, a7, a8, v30);
  return -30;
}

uint64_t sub_1DB6F3A58(uint64_t a1, size_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v8;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  char *v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  const void *v25;
  int64x2_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  size_t v32;
  uint64_t v33;
  _BYTE *v35;
  unint64_t v36;
  uint64_t v37;
  size_t v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  size_t v55;
  unint64_t v56;
  int v57;
  _BOOL4 v58;
  size_t v59;
  int v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  int v64;
  _BYTE *v65;
  int64x2_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  unsigned __int8 *v78;
  int v79;
  unsigned int v81;
  int v82;
  int v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t result;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  bz_stream *strm;
  size_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v8 = a2;
  v10 = **(_QWORD **)(a1 + 2472);
  v104 = 0;
  if (!*(_QWORD *)(v10 + 296) && *(_QWORD *)(v10 + 304) == -1)
  {
    if (a2 <= 1)
      a2 = 1;
    if (sub_1DB6E2588(a1, a2, &v104, a4, a5, a6, a7, a8))
    {
      v94 = v104;
      if (v104 > 0)
      {
        result = 0;
        v96 = *(_QWORD *)(v10 + 280);
        if (v104 >= v96)
          v94 = *(_QWORD *)(v10 + 280);
        *(_QWORD *)(v10 + 280) = v96 - v94;
        v97 = *(_QWORD *)(v10 + 264);
        if (v94 >= v97)
          v94 = *(_QWORD *)(v10 + 264);
        *(_QWORD *)(v10 + 264) = v97 - v94;
        *(_QWORD *)(v10 + 240) = v94;
        return result;
      }
    }
    goto LABEL_182;
  }
  v11 = *(char **)(v10 + 216);
  if (!v11)
  {
    if (a2 <= 0x10000)
      v15 = 0x10000;
    else
      v15 = (a2 + 1023) & 0xFFFFFFFFFFFFFC00;
    *(_QWORD *)(v10 + 232) = v15;
    v16 = malloc_type_malloc(v15, 0xD0C035BFuLL);
    *(_QWORD *)(v10 + 216) = v16;
    if (!v16)
      goto LABEL_14;
LABEL_19:
    *(_QWORD *)(v10 + 240) = 0;
    goto LABEL_20;
  }
  if (*(_QWORD *)(v10 + 232) >= a2)
  {
    if (*(_QWORD *)(v10 + 240) < a2)
    {
      v20 = *(_QWORD *)(v10 + 224);
      if (!v20)
        goto LABEL_20;
      v14 = v20 - (_QWORD)v11;
      if (!v14)
        goto LABEL_20;
LABEL_18:
      memmove(v11, &v11[v14], *(_QWORD *)(v10 + 240));
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  v12 = *(_QWORD *)(v10 + 224);
  v13 = (char *)malloc_type_realloc(*(void **)(v10 + 216), (a2 + 1023) & 0xFFFFFFFFFFFFFC00, 0x9454361FuLL);
  if (!v13)
  {
LABEL_14:
    v17 = "No memory for 7-Zip decompression";
    v18 = (_DWORD *)a1;
    v19 = 12;
LABEL_187:
    archive_set_error(v18, v19, v17, a4, a5, a6, a7, a8, v98);
    return -30;
  }
  v14 = v12 - (_QWORD)v11;
  if (!v12)
    v14 = 0;
  *(_QWORD *)(v10 + 216) = v13;
  *(_QWORD *)(v10 + 232) = (v8 + 1023) & 0xFFFFFFFFFFFFFC00;
  v11 = v13;
  if (v14)
    goto LABEL_18;
LABEL_20:
  v100 = v8;
  *(_QWORD *)(v10 + 224) = 0;
  v21 = sub_1DB6E2588(a1, 1uLL, &v104, a4, a5, a6, a7, a8);
  v24 = v104;
  if (v104 < 1)
  {
LABEL_182:
    v17 = "Truncated 7-Zip file body";
LABEL_183:
    v18 = (_DWORD *)a1;
    v19 = 79;
    goto LABEL_187;
  }
  v25 = (const void *)v21;
  v26 = (int64x2_t *)(v10 + 19944);
  v103 = v10 + 19848;
  strm = (bz_stream *)(v10 + 456);
  while (1)
  {
    v27 = *(_QWORD *)(v10 + 232);
    v28 = *(_QWORD *)(v10 + 240);
    v29 = *(_QWORD *)(v10 + 216) + v28;
    v30 = v27 - v28;
    v31 = *(_QWORD *)(v10 + 280);
    v32 = v24 >= v31 ? *(_QWORD *)(v10 + 280) : v24;
    v33 = *(_QWORD *)(v10 + 304);
    if (*(_QWORD *)(v10 + 296) != 33 && v33 == 50528515)
    {
      v37 = *(_QWORD *)(v10 + 19976);
      if (!v32 || v30 > 4)
      {
        if (!v37 || v27 == v28)
        {
          v35 = (_BYTE *)(*(_QWORD *)(v10 + 216) + v28);
          v36 = v27 - v28;
        }
        else
        {
          v44 = (char *)(v10 + 19984);
          v45 = v27 - v28;
          v35 = (_BYTE *)(*(_QWORD *)(v10 + 216) + v28);
          do
          {
            v46 = *v44++;
            *v35++ = v46;
            v36 = v45 - 1;
            v47 = *(_QWORD *)(v10 + 19976) - 1;
            *(_QWORD *)(v10 + 19976) = v47;
            if (v47)
              v48 = v45 == 1;
            else
              v48 = 1;
            --v45;
          }
          while (!v48);
        }
      }
      else
      {
        v35 = (_BYTE *)(*(_QWORD *)(v10 + 216) + v28);
        v36 = v27 - v28;
        if (v37)
        {
          v40 = 0;
          v41 = 0;
          v42 = 0;
          v43 = *(_QWORD *)(v10 + 264);
          goto LABEL_160;
        }
      }
      if (!v32 || !v36)
      {
        v40 = 0;
        v41 = v32 == 0;
        v42 = v30 - v36;
        goto LABEL_157;
      }
      v33 = *(_QWORD *)(v10 + 304);
    }
    else
    {
      v35 = (_BYTE *)(*(_QWORD *)(v10 + 216) + v28);
      v36 = v27 - v28;
    }
    if (v33 == 50528539)
    {
      v49 = *(_QWORD *)(v10 + 20112);
      if (v49)
      {
        v50 = sub_1DB6F4560((_QWORD *)v10, (uint64_t)v35, v36);
        if (v50 < 0)
          goto LABEL_192;
        v51 = *(_QWORD *)(v10 + 20112);
        *(_QWORD *)(v10 + 20008) += v51 - v49;
        v36 -= v50;
        if (!v32 || !v36)
        {
          v42 = v30 - v36;
          v58 = v51 != 0;
          if (v32)
            v41 = 0;
          else
            v41 = v58;
          v40 = 0;
          goto LABEL_157;
        }
        v35 += v50;
      }
      v52 = v36;
      v101 = (uint64_t)v35;
      v35 = *(_BYTE **)(v10 + 20088);
      v36 = *(_QWORD *)(v10 + 20096);
    }
    else
    {
      v101 = (uint64_t)v35;
      v52 = v36;
    }
    v53 = *(_QWORD *)(v10 + 296);
    v102 = v52;
    if (v53 <= 197632)
    {
      if (!v53)
      {
        if (v32 >= v36)
          v59 = v36;
        else
          v59 = v32;
        memcpy(v35, v25, v59);
        v55 = v32 - v59;
        v56 = v36 - v59;
        v41 = v32 == 0;
        goto LABEL_105;
      }
      if (v53 == 33 || v53 == 196865)
      {
        *(_QWORD *)(v10 + 312) = v25;
        *(_QWORD *)(v10 + 320) = v32;
        *(_QWORD *)(v10 + 336) = v35;
        *(_QWORD *)(v10 + 344) = v36;
        v54 = lzma_code();
        v41 = v54;
        if (!(_DWORD)v54)
        {
LABEL_66:
          v55 = *(_QWORD *)(v10 + 320);
          v56 = *(_QWORD *)(v10 + 344);
          goto LABEL_105;
        }
        if ((_DWORD)v54 == 1)
        {
          lzma_end();
          *(_DWORD *)(v10 + 448) = 0;
          goto LABEL_66;
        }
        v98 = (char *)v54;
        v17 = "Decompression failed(%d)";
        goto LABEL_186;
      }
LABEL_193:
      v17 = "Decompression internal error";
      goto LABEL_186;
    }
    if (v53 != 197633)
    {
      if (v53 == 262408)
      {
        *(_QWORD *)(v10 + 544) = v25;
        *(_DWORD *)(v10 + 552) = v32;
        *(_QWORD *)(v10 + 568) = v35;
        *(_DWORD *)(v10 + 576) = v36;
        v62 = (char *)inflate((z_streamp)(v10 + 544), 0);
        v41 = v62;
        if (v62 < 2)
        {
          v55 = *(unsigned int *)(v10 + 552);
          v56 = *(unsigned int *)(v10 + 576);
          goto LABEL_105;
        }
        v98 = v62;
        v17 = "File decompression failed (%d)";
        goto LABEL_186;
      }
      if (v53 == 262658)
      {
        *(_QWORD *)(v10 + 456) = v25;
        *(_DWORD *)(v10 + 464) = v32;
        *(_QWORD *)(v10 + 480) = v35;
        *(_DWORD *)(v10 + 488) = v36;
        v57 = BZ2_bzDecompress(strm);
        v41 = v57;
        if (v57)
        {
          if (v57 != 4)
          {
            v17 = "bzip decompression failed";
            goto LABEL_186;
          }
          if (BZ2_bzDecompressEnd(strm))
          {
            v17 = "Failed to clean up decompressor";
            goto LABEL_186;
          }
          *(_DWORD *)(v10 + 536) = 0;
          v41 = 1;
        }
        v55 = *(unsigned int *)(v10 + 464);
        v56 = *(unsigned int *)(v10 + 488);
        goto LABEL_105;
      }
      goto LABEL_193;
    }
    if (!*(_DWORD *)(v10 + 19968))
      goto LABEL_193;
    v60 = *(_DWORD *)(v10 + 660);
    if (v60 < 0 || !v36)
      goto LABEL_193;
    *(_QWORD *)(v10 + 19912) = v25;
    *(_QWORD *)(v10 + 19920) = v32;
    *(_QWORD *)(v10 + 19936) = v35;
    *(_QWORD *)(v10 + 19944) = v36;
    if (v60)
    {
      if (v32)
        goto LABEL_89;
    }
    else
    {
      *(_QWORD *)(v10 + 19896) = a1;
      *(_QWORD *)(v10 + 19904) = sub_1DB6F4A58;
      *(_QWORD *)(v10 + 19888) = v10 + 19896;
      if (!sub_1DB722CF8(v103))
      {
        *(_DWORD *)(v10 + 660) = -1;
        v17 = "Failed to initialize PPMd range decoder";
        goto LABEL_186;
      }
      if (*(_DWORD *)(v10 + 19960))
      {
LABEL_190:
        *(_DWORD *)(v10 + 660) = -1;
        return -30;
      }
      *(_DWORD *)(v10 + 660) = 1;
      if (v32)
      {
LABEL_89:
        v61 = 0;
        goto LABEL_96;
      }
    }
    v61 = *(_QWORD *)(v10 + 264);
    do
    {
LABEL_96:
      v63 = v61;
      v64 = sub_1DB722D68((unsigned __int16 **)(v10 + 664), v103);
      if (v64 < 0)
      {
        *(_DWORD *)(v10 + 660) = -1;
        v17 = "Failed to decode PPMd";
        goto LABEL_183;
      }
      if (*(_DWORD *)(v10 + 19960))
        goto LABEL_190;
      v65 = *(_BYTE **)(v10 + 19936);
      *(_QWORD *)(v10 + 19936) = v65 + 1;
      *v65 = v64;
      v66 = vaddq_s64(*v26, (int64x2_t)xmmword_1DB74C510);
      *v26 = v66;
      v56 = v66.i64[0];
      v55 = *(_QWORD *)(v10 + 19920);
      if (!v66.i64[0])
        goto LABEL_104;
      v61 = v63 - 1;
      if (!v63)
        v61 = 0;
    }
    while (v55 || v63 > 1);
    v55 = 0;
LABEL_104:
    v41 = 0;
LABEL_105:
    v42 = v30 - v56;
    if (*(_QWORD *)(v10 + 296) == 33)
      goto LABEL_149;
    v67 = *(_QWORD *)(v10 + 304);
    if (v67 == 50528515)
    {
      if (v42 < 5)
      {
        v68 = 0;
        goto LABEL_143;
      }
      v69 = *(_QWORD *)(v10 + 19992);
      LODWORD(v70) = *(_DWORD *)(v10 + 20000);
      v71 = v29 + v42 - 4;
      if (v71 > v29)
      {
        v72 = *(_DWORD *)(v10 + 20004);
        v73 = v29;
        v74 = *(_QWORD *)(v10 + 19992);
        while (1)
        {
          v75 = 0;
          while ((*(_BYTE *)(v73 + v75) & 0xFE) != 0xE8)
          {
            ++v75;
            if (v73 + v75 >= v71)
            {
              v69 = v74;
              v73 += v75;
              goto LABEL_142;
            }
          }
          v76 = v73 - v29 + v75;
          v69 = v73 - v29 - v74 + v75;
          if (v69 > 3)
            break;
          v70 = ((_DWORD)v70 << (~(_BYTE)v29 + v73 - v74 + v75)) & 7;
          if (!(_DWORD)v70)
            goto LABEL_124;
          if (((0xE8uLL >> v70) & 1) != 0)
          {
            v22 = v73 - v29 + v75 + 1;
            v69 = v73 - v29 + v75;
            LODWORD(v70) = (2 * (v70 & 3)) | 1;
          }
          else
          {
            v77 = *(unsigned __int8 *)(v73 - byte_1DB74C4D1[v70] + v75 + 4);
            if (!*(_BYTE *)(v73 - byte_1DB74C4D1[v70] + v75 + 4) || v77 == 255)
            {
              v69 = v73 - v29 + v75;
              v76 = v69 + 1;
              LODWORD(v70) = (2 * (v70 & 3)) | 1;
            }
            if (v77)
            {
              v22 = v76;
              if (v77 != 255)
                goto LABEL_124;
            }
            else
            {
              v22 = v76;
            }
          }
LABEL_139:
          v73 = v29 + v22;
          v74 = v69;
          if (v29 + v22 >= v71)
            goto LABEL_142;
        }
        LODWORD(v70) = 0u;
LABEL_124:
        v78 = (unsigned __int8 *)(v73 + v75);
        v79 = v78[4];
        if (v79 == 255 || v79 == 0)
        {
          v81 = ((v79 << 24) | (v78[3] << 16) | (v78[2] << 8) | v78[1]) - (v72 + v76);
          if ((_DWORD)v70)
          {
            while (1)
            {
              v82 = (v81 >> (24 - 8 * byte_1DB74C4D1[v70]));
              if (v82 != 255 && v82 != 0)
                break;
              v81 = ((-1 << (-8 * byte_1DB74C4D1[v70])) ^ ~v81) - (v72 + v76);
            }
          }
          v78[4] = (int)(v81 << 7) >> 31;
          v78[3] = BYTE2(v81);
          *(_WORD *)(v78 + 1) = v81;
          v22 = v76 + 5;
          v69 = v76;
        }
        else
        {
          v22 = v76 + 1;
          v69 = v76;
          LODWORD(v70) = (2 * (v70 & 3)) | 1;
        }
        goto LABEL_139;
      }
      v73 = v29;
LABEL_142:
      v68 = v73 - v29;
      *(_QWORD *)(v10 + 19992) = v69;
      v84 = *(_DWORD *)(v10 + 20004) + v73 - v29;
      *(_DWORD *)(v10 + 20000) = v70;
      *(_DWORD *)(v10 + 20004) = v84;
LABEL_143:
      v23 = v42 - v68;
      *(_QWORD *)(v10 + 19976) = v42 - v68;
      if (v42 == v68 || v41 == 1 || v23 > 4 || !v32)
      {
        *(_QWORD *)(v10 + 19976) = 0;
      }
      else
      {
        memcpy((void *)(v10 + 19984), (const void *)(v29 + v68), v23);
        v42 = v68;
      }
LABEL_149:
      v67 = *(_QWORD *)(v10 + 304);
    }
    if (v67 == 50528539)
    {
      v85 = *(_QWORD *)(v10 + 20096) - v56;
      if (v85 >= *(_QWORD *)(v10 + 20008))
        v85 = *(_QWORD *)(v10 + 20008);
      *(_QWORD *)(v10 + 20104) = v85;
      *(_QWORD *)(v10 + 20112) = v85;
      v86 = sub_1DB6F4560((_QWORD *)v10, v101, v102);
      if ((v86 & 0x8000000000000000) == 0)
      {
        *(_QWORD *)(v10 + 20008) += *(_QWORD *)(v10 + 20112) - *(_QWORD *)(v10 + 20104);
        v42 = v30 - v102 + v86;
        goto LABEL_155;
      }
LABEL_192:
      v17 = "BCJ2 conversion Failed";
LABEL_186:
      v18 = (_DWORD *)a1;
      v19 = -1;
      goto LABEL_187;
    }
LABEL_155:
    if (v41 > 1)
      return -30;
    v40 = v32 - v55;
LABEL_157:
    v31 = *(_QWORD *)(v10 + 280) - v40;
    *(_QWORD *)(v10 + 280) = v31;
    v43 = *(_QWORD *)(v10 + 264);
    if (v42 >= v43)
      v42 = *(_QWORD *)(v10 + 264);
    v27 = *(_QWORD *)(v10 + 232);
    v28 = *(_QWORD *)(v10 + 240);
LABEL_160:
    *(_QWORD *)(v10 + 264) = v43 - v42;
    v87 = v28 + v42;
    *(_QWORD *)(v10 + 240) = v87;
    *(_QWORD *)(v10 + 288) = v40;
    if (v87 == v27)
      break;
    if (*(_QWORD *)(v10 + 304) == 50528515 && v87 + 5 > v27 && *(_QWORD *)(v10 + 19976) != 0)
      break;
    if (!v31 && v43 == v42)
      break;
    if (v41 || !(v42 | v40))
      goto LABEL_185;
    sub_1DB6F2AF8(a1, v22, v23, a4, a5, a6, a7, a8);
    v25 = (const void *)sub_1DB6E2588(a1, 1uLL, &v104, v89, v90, v91, v92, v93);
    v24 = v104;
    if (v104 < 1)
      goto LABEL_182;
  }
  if (v87 < v100)
  {
LABEL_185:
    v17 = "Damaged 7-Zip archive";
    goto LABEL_186;
  }
  result = 0;
  *(_QWORD *)(v10 + 224) = *(_QWORD *)(v10 + 216);
  return result;
}

uint64_t sub_1DB6F4454(uint64_t a1, size_t *a2, unint64_t a3, size_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  uint64_t result;
  char *v15;
  int v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;

  v10 = a1;
  v11 = **(_QWORD ***)(a1 + 2472);
  if (!v11[37] && v11[38] == -1)
  {
    v19 = 0;
    *a2 = sub_1DB6E2588(a1, a4, &v19, a4, a5, a6, a7, a8);
    v17 = v19;
    if (v19 > 0)
    {
      v13 = v11[30];
      if (v19 >= v13)
        v17 = v11[30];
      if (v17 >= a3)
        result = a3;
      else
        result = v17;
      v11[36] = result;
      goto LABEL_11;
    }
    v15 = "Truncated 7-Zip file data";
    a1 = v10;
    v16 = 79;
    goto LABEL_13;
  }
  v12 = v11[28];
  if (!v12)
  {
    v15 = "Damaged 7-Zip archive";
    v16 = -1;
LABEL_13:
    archive_set_error((_DWORD *)a1, v16, v15, a4, a5, a6, a7, a8, v18);
    return -30;
  }
  v13 = v11[30];
  if (v13 >= a4)
  {
LABEL_7:
    if (v13 >= a3)
      result = a3;
    else
      result = v13;
    *a2 = v12;
    v11[28] += result;
LABEL_11:
    v11[30] = v13 - result;
    return result;
  }
  if ((sub_1DB6F3A58(a1, a4, a3, a4, a5, a6, a7, a8) & 0x8000000000000000) == 0)
  {
    v13 = v11[30];
    v12 = v11[28];
    goto LABEL_7;
  }
  return -30;
}

uint64_t sub_1DB6F4560(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  _WORD *v30;
  _WORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  char v38;
  int v40;
  _WORD *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned __int8 *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v58;
  _QWORD *v59;
  _WORD *v60;
  _WORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  char *__dst;
  unsigned __int8 *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int16 __src;
  char v74;
  char v75;

  v6 = a1[2514];
  v7 = (char *)a1 + 19972;
  v8 = a1[2511];
  v9 = a1[2513];
  v10 = a1[2508];
  v11 = a1[2502];
  v12 = a1[2505];
  v13 = a1[2509];
  v14 = (char *)a1[2503];
  v15 = a1[2506];
  v16 = a1[2510];
  v17 = (unsigned __int8 *)(a1[2504] + a1[2507]);
  v18 = &v17[-v16];
  if (*(_DWORD *)v7)
  {
LABEL_6:
    if (a1[2497] && a3)
    {
      v22 = 0;
      do
      {
        v23 = v22 + 1;
        *(_BYTE *)(a2 + v22) = *((_BYTE *)a1 + v22 + 19984);
        v24 = a1[2497] - 1;
        a1[2497] = v24;
        if (v24)
          v25 = v23 >= a3;
        else
          v25 = 1;
        v22 = v23;
      }
      while (!v25);
    }
    else
    {
      v23 = 0;
      if (!a3)
      {
        v33 = a1 + 2581;
LABEL_74:
        *v33 += v23;
        return v23;
      }
    }
    v26 = 0;
    v27 = v8 + v9 - v6;
    v28 = (unsigned int *)(v11 + v12 - v10);
    v29 = (unsigned int *)&v14[v15 - v13];
    v30 = v7 + 662;
    v31 = v7 + 660;
    v32 = a1 + 2515;
    v33 = a1 + 2581;
    v34 = v8 + v9 - v6;
    while (1)
    {
      v35 = v6 - v26;
      if (a3 - v23 < v6 - v26)
        v35 = a3 - v23;
      if (v35)
        v36 = *(_DWORD *)v7 == 1;
      else
        v36 = 0;
      if (v36)
      {
        v37 = 0;
        while (1)
        {
          v38 = *(_BYTE *)(v34 + v26 + v37);
          *(_BYTE *)(a2 + v23 + v37) = v38;
          if ((v38 & 0xFE) == 0xE8)
            break;
          if ((v38 & 0xF0) == 0x80 && v7[664] == 15)
            break;
          v7[664] = v38;
          if (v35 == ++v37)
          {
            v23 += v37;
            v26 += v37;
            goto LABEL_72;
          }
        }
        *(_DWORD *)v7 = 2;
        v23 += v37 + 1;
        v26 += v37;
        v35 -= v37;
      }
      if (v23 == a3 || !v35)
      {
LABEL_72:
        a1[2514] -= v26;
        a1[2508] = v10;
        a1[2509] = v13;
        a1[2510] = v17 - v18;
        goto LABEL_74;
      }
      *(_DWORD *)v7 = 1;
      v40 = *(unsigned __int8 *)(v27 + v26);
      if (v40 == 232)
      {
        v41 = (_WORD *)v32 + v7[664];
      }
      else if (v40 == 233)
      {
        v41 = v31;
      }
      else
      {
        v41 = v30;
      }
      v42 = (unsigned __int16)*v41;
      v43 = *((_DWORD *)v7 + 167);
      v44 = (v43 >> 11) * v42;
      v45 = *((_DWORD *)v7 + 168);
      v46 = v45 - v44;
      if (v45 < v44)
      {
        *((_DWORD *)v7 + 167) = v44;
        *v41 = v42 + ((2048 - v42) >> 5);
        if (!HIBYTE(v44))
        {
          if (v18 == v17)
            return -25;
          *((_DWORD *)v7 + 167) = v44 << 8;
          v47 = *v18++;
          *((_DWORD *)v7 + 168) = v47 | (v45 << 8);
        }
        v48 = 0;
        v7[664] = v40;
        goto LABEL_69;
      }
      *((_DWORD *)v7 + 167) = v43 - v44;
      *((_DWORD *)v7 + 168) = v46;
      *v41 = v42 - (v42 >> 5);
      if (!((v43 - v44) >> 24))
      {
        if (v18 == v17)
        {
          v48 = 1;
          v50 = v28;
          v51 = v29;
          v18 = v17;
          goto LABEL_68;
        }
        *((_DWORD *)v7 + 167) = (v43 - v44) << 8;
        v49 = *v18++;
        *((_DWORD *)v7 + 168) = v49 | (v46 << 8);
      }
      if (v40 == 232)
      {
        if (v10 < 4)
          goto LABEL_52;
        v50 = v28 + 1;
        v51 = v29;
        v10 -= 4;
      }
      else
      {
        if (v13 < 4)
        {
LABEL_52:
          v48 = 1;
          v50 = v28;
          v51 = v29;
          goto LABEL_68;
        }
        v51 = v29 + 1;
        v50 = v28;
        v13 -= 4;
        v28 = v29;
      }
      v58 = v34;
      v59 = v32;
      v60 = v31;
      v61 = v30;
      v70 = v13;
      v72 = v6;
      v63 = v33;
      v65 = v10;
      v52 = bswap32(*v28) - (v23 + *(_DWORD *)v33) - 4;
      __src = v52;
      v74 = BYTE2(v52);
      v52 >>= 24;
      v7[664] = v52;
      v75 = v52;
      v68 = v27;
      v53 = v17;
      if (v23 >= a3)
        break;
      v54 = ~v23 + a3;
      if (v54 >= 3)
        v54 = 3;
      memcpy((void *)(a2 + v23), &__src, v54 + 1);
      v55 = 0;
      do
        v56 = v55++;
      while (v56 <= 2 && v55 + v23 < a3);
      v23 += v55;
      v17 = v53;
      v6 = v72;
      v27 = v68;
      if (v56 <= 2)
      {
        a1[2497] = 4 - v55;
        if (v55 <= 3)
        {
          v55 = v55;
          goto LABEL_64;
        }
        v48 = 11;
        v33 = v63;
        v10 = v65;
        v13 = v70;
        v31 = v60;
        v30 = v61;
        v34 = v58;
        v32 = v59;
LABEL_68:
        v28 = v50;
        v29 = v51;
        goto LABEL_69;
      }
      v48 = 0;
      v28 = v50;
      v29 = v51;
      v33 = v63;
      v10 = v65;
      v13 = v70;
      v31 = v60;
      v30 = v61;
      v34 = v58;
      v32 = v59;
LABEL_69:
      ++v26;
      if (v48)
      {
        if (v48 != 11)
          return -25;
        goto LABEL_72;
      }
    }
    v55 = 0;
    a1[2497] = 4;
LABEL_64:
    memcpy(a1 + 2498, (char *)&__src + v55, 4 - v55);
    v48 = 11;
    v33 = v63;
    v10 = v65;
    v17 = v53;
    v13 = v70;
    v6 = v72;
    v27 = v68;
    v31 = v60;
    v30 = v61;
    v34 = v58;
    v32 = v59;
    goto LABEL_68;
  }
  v62 = v15;
  v64 = v11;
  __dst = v14;
  v67 = v17;
  v69 = v13;
  v71 = v6;
  v19 = v10;
  v7[664] = 0;
  memset_pattern16(a1 + 2515, &unk_1DB74C520, 0x204uLL);
  v20 = 0;
  v21 = 0;
  a1[2580] = 0xFFFFFFFFLL;
  while (v16 != v20)
  {
    v21 = v18[v20] | (v21 << 8);
    *((_DWORD *)v7 + 168) = v21;
    if ((_DWORD)++v20 == 5)
    {
      *(_DWORD *)v7 = 1;
      v18 += v20;
      v10 = v19;
      v17 = v67;
      v13 = v69;
      v6 = v71;
      v11 = v64;
      v14 = __dst;
      v15 = v62;
      goto LABEL_6;
    }
  }
  return -25;
}

uint64_t sub_1DB6F4A58(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t result;
  char *v13;

  v8 = *a1;
  v9 = **(_QWORD **)(v8 + 2472);
  v10 = *(_QWORD *)(v9 + 19920);
  if (v10)
  {
    v11 = *(unsigned __int8 **)(v9 + 19912);
    *(_QWORD *)(v9 + 19912) = v11 + 1;
    result = *v11;
    *(_QWORD *)(v9 + 19920) = v10 - 1;
    ++*(_QWORD *)(v9 + 19928);
  }
  else
  {
    archive_set_error((_DWORD *)v8, 79, "Truncated RAR file data", a4, a5, a6, a7, a8, v13);
    result = 0;
    *(_DWORD *)(v9 + 19960) = 1;
  }
  return result;
}

uint64_t sub_1DB6F4ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  const Bytef *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const Bytef *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t result;
  uint64_t v47;
  unsigned int v48;
  const Bytef *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const Bytef *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int v62;
  const Bytef *v63;
  size_t *v64;
  const Bytef *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const Bytef *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  const Bytef *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  Bytef v109;
  size_t v110;
  const Bytef *v111;
  unint64_t v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  const Bytef *v129;
  const Bytef *v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  size_t v134;
  uint64_t v135;
  unint64_t *v136;
  unint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t **v145;
  unint64_t v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD **v159;
  unint64_t v160;
  uint64_t v161;
  unsigned int i;
  uint64_t v163;
  unsigned int v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  const Bytef *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int v176;
  uint64_t v177;
  _QWORD *v178;
  void *v179;
  _QWORD *v180;
  uint64_t v181;
  unsigned int v182;
  const Bytef *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unsigned int v195;
  uint64_t v196;
  const Bytef *v197;
  unint64_t v198;
  _QWORD *v199;
  unsigned int v200;
  const Bytef *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  size_t v209;
  uint64_t v210;
  unsigned int v211;
  unint64_t *v212;
  BOOL v213;
  const Bytef *v214;
  void *v215;
  void *v216;
  uint64_t v217;
  unsigned int v218;
  unint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unsigned int v223;
  unint64_t v224;
  const Bytef *v225;
  uint64_t v226;
  unsigned int v227;
  _QWORD *v228;
  unsigned int v229;
  _DWORD *v230;
  _BYTE *v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  unint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  const Bytef *v246;
  const Bytef *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  _BYTE *v256;
  _DWORD *v257;
  _DWORD *v258;
  const Bytef *v259;
  char *v260;
  unsigned int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  unint64_t v266;
  uint64_t v267;
  void *v268;
  void *v269;

  v10 = **(_QWORD **)(a1 + 2472);
  *(_QWORD *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v11 = sub_1DB6F2954(a1, 1uLL, a3, a4, a5, a6, a7, a8);
  if (!v11)
    return 0xFFFFFFFFLL;
  v18 = *v11;
  if (v18 == 6)
  {
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    if ((sub_1DB6F57D0(a1, (unint64_t *)a2, v12, v13, v14, v15, v16, v17) & 0x80000000) != 0)
      return 0xFFFFFFFFLL;
    v25 = (_QWORD *)(a2 + 8);
    if ((sub_1DB6F57D0(a1, (unint64_t *)(a2 + 8), v19, v20, v21, v22, v23, v24) & 0x80000000) != 0)
      return 0xFFFFFFFFLL;
    if ((unint64_t)(*v25 - 100000001) < 0xFFFFFFFFFA0A1F00)
      return 0xFFFFFFFFLL;
    v32 = sub_1DB6F2954(a1, 1uLL, v26, v27, v28, v29, v30, v31);
    if (!v32)
      return 0xFFFFFFFFLL;
    if (*v32)
    {
      if (*v32 != 9)
        return 0xFFFFFFFFLL;
      *(_QWORD *)(a2 + 16) = malloc_type_calloc(*(_QWORD *)(a2 + 8), 8uLL, 0x100004000313F17uLL);
      v45 = malloc_type_calloc(*(_QWORD *)(a2 + 8), 8uLL, 0x100004000313F17uLL);
      *(_QWORD *)(a2 + 40) = v45;
      result = 0xFFFFFFFFLL;
      if (!*(_QWORD *)(a2 + 16) || !v45)
        return result;
      if (*v25)
      {
        v47 = 0;
        v48 = 1;
        do
        {
          if ((sub_1DB6F57D0(a1, (unint64_t *)(*(_QWORD *)(a2 + 16) + 8 * v47), v39, v40, v41, v42, v43, v44) & 0x80000000) != 0)
            return 0xFFFFFFFFLL;
          v47 = v48;
          v213 = *v25 > (unint64_t)v48++;
        }
        while (v213);
      }
      v49 = sub_1DB6F2954(a1, 1uLL, v39, v40, v41, v42, v43, v44);
      if (!v49)
        return 0xFFFFFFFFLL;
      if (*v49)
      {
        if (*v49 != 10)
          return 0xFFFFFFFFLL;
        if ((sub_1DB6F589C(a1, a2 + 24, *(_QWORD *)(a2 + 8)) & 0x80000000) != 0)
          return 0xFFFFFFFFLL;
        v56 = sub_1DB6F2954(a1, 1uLL, v50, v51, v52, v53, v54, v55);
        if (!v56 || *v56)
          return 0xFFFFFFFFLL;
      }
      else
      {
        *(_QWORD *)(a2 + 24) = malloc_type_calloc(*(_QWORD *)(a2 + 8), 1uLL, 0x100004077774924uLL);
        v57 = malloc_type_calloc(*(_QWORD *)(a2 + 8), 4uLL, 0x100004052888210uLL);
        *(_QWORD *)(a2 + 32) = v57;
        result = 0xFFFFFFFFLL;
        if (!*(_QWORD *)(a2 + 24) || !v57)
          return result;
      }
    }
    v58 = *(_QWORD *)(a2 + 40);
    if (!v58)
      return 0xFFFFFFFFLL;
    v59 = *(_QWORD *)(a2 + 16);
    if (!v59)
      return 0xFFFFFFFFLL;
    if (*v25)
    {
      v60 = 0;
      v61 = *(_QWORD *)a2;
      v62 = 1;
      do
      {
        *(_QWORD *)(v58 + 8 * v60) = v61;
        v61 += *(_QWORD *)(v59 + 8 * v60);
        if (v61 > *(_QWORD *)(v10 + 128))
          return 0xFFFFFFFFLL;
        v60 = v62;
        v213 = *v25 > (unint64_t)v62++;
      }
      while (v213);
    }
    v63 = sub_1DB6F2954(a1, 1uLL, v33, v34, v35, v36, v37, v38);
    if (!v63)
      return 0xFFFFFFFFLL;
    v18 = *v63;
  }
  if (v18 == 7)
  {
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    v64 = (size_t *)(a2 + 48);
    *(_QWORD *)(a2 + 64) = 0;
    v268 = 0;
    v269 = 0;
    v65 = sub_1DB6F2954(a1, 1uLL, v12, v13, v14, v15, v16, v17);
    if (!v65
      || *v65 != 11
      || (sub_1DB6F57D0(a1, (unint64_t *)(a2 + 48), v66, v67, v68, v69, v70, v71) & 0x80000000) != 0)
    {
      goto LABEL_194;
    }
    if (*v64 > 0x5F5E100)
      return 0xFFFFFFFFLL;
    v78 = sub_1DB6F2954(a1, 1uLL, v72, v73, v74, v75, v76, v77);
    if (!v78)
      goto LABEL_194;
    if (*v78 == 1)
    {
      if ((sub_1DB6F57D0(a1, (unint64_t *)(a2 + 64), v79, v80, v81, v82, v83, v84) & 0x80000000) != 0
        || *(_QWORD *)(a2 + 64) > 0x5F5E100uLL)
      {
        return 0xFFFFFFFFLL;
      }
      if (!*v64)
        goto LABEL_105;
    }
    else if (!*v78)
    {
      v85 = malloc_type_calloc(*(_QWORD *)(a2 + 48), 0x68uLL, 0x103004078E7D124uLL);
      *(_QWORD *)(a2 + 56) = v85;
      if (!v85)
        return 0xFFFFFFFFLL;
      if (*v64)
      {
        v87 = 0;
        v261 = 0;
        v88 = 0uLL;
        do
        {
          v263 = v87;
          v264 = *(_QWORD *)(a2 + 56);
          v89 = v264 + 104 * v87;
          v262 = **(_QWORD **)(a1 + 2472);
          *(_QWORD *)(v89 + 96) = 0;
          *(_OWORD *)(v89 + 64) = v88;
          *(_OWORD *)(v89 + 80) = v88;
          *(_OWORD *)(v89 + 32) = v88;
          *(_OWORD *)(v89 + 48) = v88;
          *(_OWORD *)v89 = v88;
          *(_OWORD *)(v89 + 16) = v88;
          if ((sub_1DB6F57D0(a1, (unint64_t *)v89, v86, v80, v81, v82, v83, v84) & 0x80000000) != 0)
            goto LABEL_194;
          if (*(_QWORD *)v89 > 4uLL)
            goto LABEL_194;
          v90 = malloc_type_calloc(*(_QWORD *)v89, 0x28uLL, 0x10100403A7DB3B5uLL);
          v97 = v264 + 104 * v263;
          *(_QWORD *)(v97 + 8) = v90;
          v98 = (uint64_t *)(v97 + 8);
          if (!v90 || !*(_QWORD *)v89)
            goto LABEL_194;
          v99 = 0;
          v100 = 0;
          v101 = 0;
          v266 = 0;
          do
          {
            v102 = sub_1DB6F2954(a1, 1uLL, v91, v92, v93, v94, v95, v96);
            if (!v102)
              goto LABEL_194;
            v109 = *v102;
            if ((*v102 & 0x80) != 0)
              goto LABEL_194;
            v110 = v109 & 0xF;
            v111 = sub_1DB6F2954(a1, v110, v103, v104, v105, v106, v107, v108);
            if (!v111)
              goto LABEL_194;
            v112 = 0;
            if ((_DWORD)v110)
            {
              do
              {
                v113 = *v111++;
                v112 = v113 | (v112 << 8);
                --v110;
              }
              while (v110);
            }
            v114 = *v98;
            v115 = (unint64_t *)(*v98 + 40 * v99);
            *v115 = v112;
            v116 = v115 + 1;
            if ((v109 & 0x10) != 0)
            {
              if ((sub_1DB6F57D0(a1, v116, v91, v92, v93, v94, v95, v96) & 0x80000000) != 0)
                goto LABEL_194;
              if (*(_QWORD *)(*v98 + 40 * v99 + 8) > 0x5F5E100uLL)
                goto LABEL_194;
              if ((sub_1DB6F57D0(a1, (unint64_t *)(*v98 + 40 * v99 + 16), v117, v118, v119, v120, v121, v122) & 0x80000000) != 0)
                goto LABEL_194;
              v114 = *v98;
              if (*(_QWORD *)(*v98 + 40 * v99 + 16) > 0x5F5E100uLL)
                goto LABEL_194;
            }
            else
            {
              *(int64x2_t *)v116 = vdupq_n_s64(1uLL);
            }
            if ((v109 & 0x20) != 0)
            {
              if ((sub_1DB6F57D0(a1, (unint64_t *)(v114 + 40 * v99 + 24), v91, v92, v93, v94, v95, v96) & 0x80000000) != 0)
                goto LABEL_194;
              v129 = sub_1DB6F2954(a1, *(_QWORD *)(*v98 + 40 * v99 + 24), v123, v124, v125, v126, v127, v128);
              if (!v129)
                goto LABEL_194;
              v130 = v129;
              v131 = malloc_type_malloc(*(_QWORD *)(*v98 + 40 * v99 + 24), 0xFE44278CuLL);
              v132 = *v98;
              *(_QWORD *)(*v98 + 40 * v99 + 32) = v131;
              if (!v131)
                goto LABEL_194;
              memcpy(v131, v130, *(_QWORD *)(v132 + 40 * v99 + 24));
              v114 = *v98;
            }
            v133 = v114 + 40 * v99;
            v266 += *(_QWORD *)(v133 + 8);
            v101 += *(_QWORD *)(v133 + 16);
            v99 = ++v100;
          }
          while (*(_QWORD *)v89 > (unint64_t)v100);
          if (!v101)
            goto LABEL_194;
          v134 = v101 - 1;
          if (v266 < v101 - 1)
            goto LABEL_194;
          v135 = v264 + 104 * v263;
          *(_QWORD *)(v135 + 16) = v134;
          v136 = (unint64_t *)(v135 + 16);
          if (*(_QWORD *)(v262 + 112) < v134)
            goto LABEL_194;
          if (v101 == 1)
          {
            v146 = 0;
            v155 = v263;
            *(_QWORD *)(v264 + 104 * v263 + 24) = 0;
          }
          else
          {
            v137 = (unint64_t *)malloc_type_calloc(v134, 0x10uLL, 0x1000040451B5BE8uLL);
            v144 = v264 + 104 * v263;
            *(_QWORD *)(v144 + 24) = v137;
            v145 = (unint64_t **)(v144 + 24);
            if (!v137)
              goto LABEL_194;
            v146 = *v136;
            if (*v136)
            {
              v147 = 0;
              v148 = 1;
              while ((sub_1DB6F57D0(a1, &v137[2 * v147], v138, v139, v140, v141, v142, v143) & 0x80000000) == 0)
              {
                if ((*v145)[2 * v147] > 0x5F5E100)
                  break;
                if ((sub_1DB6F57D0(a1, &(*v145)[2 * v147 + 1], v149, v150, v151, v152, v153, v154) & 0x80000000) != 0)
                  break;
                v137 = *v145;
                if ((*v145)[2 * v147 + 1] > 0x5F5E100)
                  break;
                v147 = v148;
                v146 = *v136;
                v213 = *v136 > v148++;
                if (!v213)
                  goto LABEL_77;
              }
LABEL_194:
              free(v268);
              free(v269);
              return 0xFFFFFFFFLL;
            }
LABEL_77:
            v155 = v263;
          }
          v156 = v264 + 104 * v155;
          *(_QWORD *)(v156 + 32) = v266 - v146;
          v157 = (_QWORD *)(v156 + 32);
          v158 = malloc_type_calloc(v266 - v146, 8uLL, 0x100004000313F17uLL);
          *(_QWORD *)(v156 + 40) = v158;
          v159 = (_QWORD **)(v156 + 40);
          if (!v158)
            goto LABEL_194;
          if (*v157)
          {
            if (*v157 != 1)
            {
              v165 = 0;
              v166 = 1;
              while ((sub_1DB6F57D0(a1, &v158[v165], v86, v80, v81, v82, v83, v84) & 0x80000000) == 0)
              {
                v158 = *v159;
                if ((*v159)[v165] > 0x5F5E100uLL)
                  break;
                v165 = v166;
                v213 = *v157 > (unint64_t)v166++;
                if (!v213)
                  goto LABEL_99;
              }
              goto LABEL_194;
            }
            if (!v266)
              goto LABEL_194;
            v160 = *v136;
            if (*v136)
            {
              v161 = 0;
              for (i = 0; i < v266; v161 = ++i)
              {
                v163 = 0;
                v164 = 1;
                do
                {
                  if (*(_QWORD *)(*(_QWORD *)(v264 + 104 * v263 + 24) + 16 * v163) == v161)
                    break;
                  v163 = v164;
                  v213 = v160 > v164++;
                }
                while (v213);
                if (v160 == v163)
                  break;
              }
              if (v266 == v161)
                goto LABEL_194;
            }
            else
            {
              v161 = 0;
            }
            *v158 = v161;
          }
LABEL_99:
          v167 = v264 + 104 * v263;
          *(_QWORD *)(v167 + 48) = v266;
          *(_QWORD *)(v167 + 56) = v101;
          v87 = ++v261;
          v88 = 0uLL;
        }
        while (*v64 > v261);
      }
LABEL_105:
      v168 = sub_1DB6F2954(a1, 1uLL, v86, v80, v81, v82, v83, v84);
      if (!v168 || *v168 != 12)
        goto LABEL_194;
      if (*v64)
      {
        v175 = 0;
        v176 = 0;
        while (1)
        {
          v177 = *(_QWORD *)(a2 + 56) + 104 * v175;
          v178 = (_QWORD *)(v177 + 56);
          v179 = malloc_type_calloc(*(_QWORD *)(v177 + 56), 8uLL, 0x100004000313F17uLL);
          *(_QWORD *)(v177 + 64) = v179;
          v180 = (_QWORD *)(v177 + 64);
          if (!v179)
            goto LABEL_194;
          if (*v178)
            break;
LABEL_114:
          v175 = ++v176;
          if (*v64 <= v176)
            goto LABEL_115;
        }
        v181 = 0;
        v182 = 1;
        while ((sub_1DB6F57D0(a1, (unint64_t *)(*v180 + 8 * v181), v169, v170, v171, v172, v173, v174) & 0x80000000) == 0)
        {
          v181 = v182;
          v213 = *v178 > (unint64_t)v182++;
          if (!v213)
            goto LABEL_114;
        }
        goto LABEL_194;
      }
LABEL_115:
      v183 = sub_1DB6F2954(a1, 1uLL, v169, v170, v171, v172, v173, v174);
      if (!v183)
        goto LABEL_194;
      if (*v183 == 10)
      {
        if ((sub_1DB6F589C(a1, (uint64_t)&v268, *v64) & 0x80000000) != 0)
          goto LABEL_194;
        v254 = *v64;
        if (*v64)
        {
          v255 = 0;
          v256 = v268;
          v257 = v269;
          v258 = (_DWORD *)(*(_QWORD *)(a2 + 56) + 76);
          do
          {
            *((_BYTE *)v258 - 4) = v256[v255];
            *v258 = v257[v255];
            v258 += 26;
            ++v255;
          }
          while (v254 > v255);
        }
        v259 = sub_1DB6F2954(a1, 1uLL, v248, v249, v250, v251, v252, v253);
        if (!v259 || *v259)
          goto LABEL_194;
        free(v268);
        free(v269);
      }
      else if (*v183)
      {
        goto LABEL_194;
      }
      v190 = *(_QWORD *)(a2 + 48);
      if (v190)
      {
        v191 = 0;
        LODWORD(v192) = 0;
        v193 = *(_QWORD *)(a2 + 56);
        v194 = *(_QWORD *)(a2 + 8);
        v195 = 1;
        do
        {
          v196 = v193 + 104 * v191;
          *(_DWORD *)(v196 + 88) = v192;
          v192 = (v192 + *(_DWORD *)(v196 + 32));
          if (v194 < v192)
            return 0xFFFFFFFFLL;
          v191 = v195;
          v213 = v190 > v195++;
        }
        while (v213);
      }
      v197 = sub_1DB6F2954(a1, 1uLL, v184, v185, v186, v187, v188, v189);
      if (v197)
      {
        v18 = *v197;
        goto LABEL_124;
      }
      return 0xFFFFFFFFLL;
    }
    archive_set_error((_DWORD *)a1, -1, "Malformed 7-Zip archive", v80, v81, v82, v83, v84, v260);
    goto LABEL_194;
  }
LABEL_124:
  if (v18 != 8)
  {
LABEL_185:
    if (v18)
      return 0xFFFFFFFFLL;
    else
      return 0;
  }
  *(_OWORD *)(a2 + 72) = 0u;
  v198 = *(_QWORD *)(a2 + 48);
  v267 = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a2 + 88) = 0u;
  if (v198)
  {
    v199 = (_QWORD *)(v267 + 80);
    v200 = 1;
    do
    {
      *v199 = 1;
      v199 += 13;
      v213 = v198 > v200++;
    }
    while (v213);
  }
  v201 = sub_1DB6F2954(a1, 1uLL, v12, v13, v14, v15, v16, v17);
  if (!v201)
    return 0xFFFFFFFFLL;
  v208 = *v201;
  v209 = v198;
  if (v208 == 13)
  {
    if (v198)
    {
      v210 = 0;
      v209 = 0;
      v211 = 1;
      do
      {
        v212 = (unint64_t *)(v267 + 104 * v210 + 80);
        if ((sub_1DB6F57D0(a1, v212, v202, v203, v204, v205, v206, v207) & 0x80000000) != 0)
          return 0xFFFFFFFFLL;
        v213 = *v212 > 0x5F5E100 || v209 > 0xFFFFFFFFFA0A1EFFLL;
        if (v213)
          return 0xFFFFFFFFLL;
        v209 += *v212;
        v210 = v211;
        v213 = v198 > v211++;
      }
      while (v213);
    }
    else
    {
      v209 = 0;
    }
    v214 = sub_1DB6F2954(a1, 1uLL, v202, v203, v204, v205, v206, v207);
    if (!v214)
      return 0xFFFFFFFFLL;
    v208 = *v214;
  }
  *(_QWORD *)(a2 + 72) = v209;
  if (!v209)
    goto LABEL_146;
  *(_QWORD *)(a2 + 80) = malloc_type_calloc(v209, 8uLL, 0x100004000313F17uLL);
  *(_QWORD *)(a2 + 88) = malloc_type_calloc(v209, 1uLL, 0x100004077774924uLL);
  v215 = malloc_type_calloc(v209, 4uLL, 0x100004052888210uLL);
  *(_QWORD *)(a2 + 96) = v215;
  if (!*(_QWORD *)(a2 + 80))
    return 0xFFFFFFFFLL;
  v216 = v215;
  result = 0xFFFFFFFFLL;
  if (*(_QWORD *)(a2 + 88))
  {
    if (v216)
    {
LABEL_146:
      if (v198)
      {
        v217 = 0;
        v218 = 0;
        v219 = *(unint64_t **)(a2 + 80);
        v265 = v208;
        do
        {
          v220 = v267 + 104 * v217;
          v221 = *(_QWORD *)(v220 + 80);
          if (v221)
          {
            v222 = 0;
            if (v208 == 9 && v221 != 1)
            {
              v222 = 0;
              v223 = 2;
              while ((sub_1DB6F57D0(a1, v219, v202, v203, v204, v205, v206, v207) & 0x80000000) == 0)
              {
                v224 = *v219++;
                v222 += v224;
                v213 = *(_QWORD *)(v220 + 80) > (unint64_t)v223++;
                if (!v213)
                  goto LABEL_154;
              }
              return 0xFFFFFFFFLL;
            }
LABEL_154:
            *v219++ = sub_1DB6F5A40(v220) - v222;
            v208 = v265;
          }
          v217 = ++v218;
        }
        while (v198 > v218);
      }
      if (v208 == 9)
      {
        v225 = sub_1DB6F2954(a1, 1uLL, v202, v203, v204, v205, v206, v207);
        if (!v225)
          return 0xFFFFFFFFLL;
        v208 = *v225;
      }
      if (v209)
      {
        v226 = 0;
        do
        {
          *(_BYTE *)(*(_QWORD *)(a2 + 88) + v226) = 0;
          *(_DWORD *)(*(_QWORD *)(a2 + 96) + 4 * v226++) = 0;
        }
        while (v209 > v226);
      }
      v227 = 0;
      if (v198)
      {
        v228 = (_QWORD *)(v267 + 80);
        v229 = 1;
        do
        {
          if (*v228 != 1 || !*((_BYTE *)v228 - 8))
            v227 += *v228;
          v228 += 13;
          v213 = v198 > v229++;
        }
        while (v213);
      }
      if (v208 == 10)
      {
        v231 = *(_BYTE **)(a2 + 88);
        v230 = *(_DWORD **)(a2 + 96);
        v268 = 0;
        v269 = 0;
        if ((sub_1DB6F589C(a1, (uint64_t)&v268, v227) & 0x80000000) != 0)
          goto LABEL_194;
        if (v198)
        {
          v232 = 0;
          v233 = 0;
          do
          {
            v234 = v267 + 104 * v232;
            v237 = *(_QWORD *)(v234 + 80);
            v235 = (unint64_t *)(v234 + 80);
            v236 = v237;
            if (v237)
            {
              if (v236 == 1 && *(_BYTE *)(v267 + 104 * v232 + 72))
              {
                *v231++ = 1;
                *v230++ = *(_DWORD *)(v267 + 104 * v232 + 76);
              }
              else
              {
                LODWORD(v238) = 0;
                v239 = v233;
                do
                {
                  *v231++ = *((_BYTE *)v268 + v239);
                  *v230++ = *((_DWORD *)v269 + v239);
                  v238 = (v238 + 1);
                  ++v239;
                }
                while (*v235 > v238);
                v233 += v238;
              }
            }
            ++v232;
          }
          while (v198 > v232);
        }
        free(v268);
        free(v269);
        v246 = sub_1DB6F2954(a1, 1uLL, v240, v241, v242, v243, v244, v245);
        if (!v246)
          return 0xFFFFFFFFLL;
        v208 = *v246;
      }
      if (v208)
        return 0xFFFFFFFFLL;
      v247 = sub_1DB6F2954(a1, 1uLL, v202, v203, v204, v205, v206, v207);
      if (!v247)
        return 0xFFFFFFFFLL;
      v18 = *v247;
      goto LABEL_185;
    }
  }
  return result;
}

uint64_t sub_1DB6F57D0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const Bytef *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t result;
  unsigned int v23;
  const Bytef *v24;
  unsigned int v25;
  BOOL v26;

  v10 = sub_1DB6F2954(a1, 1uLL, a3, a4, a5, a6, a7, a8);
  if (!v10)
    return 0xFFFFFFFFLL;
  v17 = *(char *)v10;
  *a2 = 0;
  v18 = v17;
  if (v17 < 0)
  {
    v20 = 0;
    v23 = 128;
    while (1)
    {
      v24 = sub_1DB6F2954(a1, 1uLL, v11, v12, v13, v14, v15, v16);
      if (!v24)
        return 0xFFFFFFFFLL;
      v19 = ((unint64_t)*v24 << v20) | *a2;
      *a2 = v19;
      v20 += 8;
      if (v20 == 64)
        return 0;
      v25 = v23 >> 1;
      v26 = (v18 & (v23 >> 1)) == 0;
      v23 >>= 1;
      if (v26)
      {
        v21 = v25 + 255;
        goto LABEL_4;
      }
    }
  }
  v19 = 0;
  LOBYTE(v20) = 0;
  v21 = 383;
LABEL_4:
  result = 0;
  *a2 = v19 + ((unint64_t)(v21 & v18) << v20);
  return result;
}

uint64_t sub_1DB6F589C(uint64_t a1, uint64_t a2, size_t size)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const Bytef *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  unsigned int v28;
  const Bytef *v29;

  if (!size)
    return 0xFFFFFFFFLL;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v6 = malloc_type_malloc(size, 0x39D32F19uLL);
  *(_QWORD *)a2 = v6;
  if (!v6)
    return 0xFFFFFFFFLL;
  v13 = sub_1DB6F2954(a1, 1uLL, v7, v8, v9, v10, v11, v12);
  if (!v13)
    return 0xFFFFFFFFLL;
  if (*v13)
  {
    memset(*(void **)a2, 1, size);
  }
  else if ((sub_1DB6F59A8(a1, *(_QWORD *)a2, size, v14, v15, v16, v17, v18) & 0x80000000) != 0)
  {
    return 0xFFFFFFFFLL;
  }
  v20 = malloc_type_calloc(size, 4uLL, 0x100004052888210uLL);
  *(_QWORD *)(a2 + 8) = v20;
  if (!v20)
    return 0xFFFFFFFFLL;
  v27 = 0;
  v28 = 1;
  do
  {
    if (*(_BYTE *)(*(_QWORD *)a2 + v27))
    {
      v29 = sub_1DB6F2954(a1, 4uLL, v21, v22, v23, v24, v25, v26);
      if (!v29)
        return 0xFFFFFFFFLL;
      *(_DWORD *)(*(_QWORD *)(a2 + 8) + 4 * v27) = *(_DWORD *)v29;
    }
    v27 = v28++;
  }
  while (v27 < size);
  return 0;
}

uint64_t sub_1DB6F59A8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  const Bytef *v15;

  if (!a3)
    return 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 1;
  while (v13)
  {
LABEL_6:
    *(_BYTE *)(a2 + v11) = (v12 & v13) != 0;
    v13 >>= 1;
    v11 = v14++;
    if (v11 >= a3)
      return 0;
  }
  v15 = sub_1DB6F2954(a1, 1uLL, a3, a4, a5, a6, a7, a8);
  if (v15)
  {
    v12 = *v15;
    v13 = 128;
    goto LABEL_6;
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_1DB6F5A40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  if ((int)*(_QWORD *)(a1 + 56) < 1)
    return 0;
  v1 = *(_QWORD *)(a1 + 56);
  while (*(_DWORD *)(a1 + 16))
  {
    v2 = (v1 - 1);
    v3 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 8);
    v4 = *(unsigned int *)(a1 + 16);
    while (1)
    {
      v5 = *v3;
      v3 += 2;
      if (v5 == v2)
        break;
      if (!--v4)
        return *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v2);
    }
    if (v1-- < 2)
      return 0;
  }
  v2 = (v1 - 1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v2);
}

uint64_t sub_1DB6F5AA8(uint64_t a1, uint64_t a2, uint64_t a3, char **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v10;
  char *v11;
  uint64_t v12;
  char **v13;
  unsigned __int16 v15;
  char *v16;
  uint64_t result;
  char *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  uint64_t v28;
  z_stream *v29;
  unsigned __int8 *v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  void **v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  _DWORD *v48;
  uint64_t *v49;
  int v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  __int128 *v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v10 = (_DWORD *)(a2 + 19960);
  v11 = *(char **)a3;
  *(_QWORD *)(a2 + 296) = *(_QWORD *)a3;
  *(_QWORD *)(a2 + 304) = -1;
  if ((uint64_t)v11 > 50528538)
  {
    if ((uint64_t)v11 > 50530048)
    {
      if ((uint64_t)v11 > 116457728)
      {
        if (v11 == (char *)116457729 || v11 == (char *)116458243 || v11 == (char *)116459265)
        {
          v12 = *(_QWORD *)(a1 + 160);
          if (v12)
          {
            archive_entry_set_is_metadata_encrypted(v12, 1);
            archive_entry_set_is_data_encrypted(*(_QWORD *)(a1 + 160), 1);
            v10[192] = 1;
            v11 = *(char **)(a2 + 296);
          }
          archive_set_error((_DWORD *)a1, -1, "Crypto codec not supported yet (ID: 0x%lX)", (uint64_t)a4, a5, a6, a7, a8, v11);
          return 4294967271;
        }
        goto LABEL_64;
      }
      if (v11 == (char *)50530049)
        goto LABEL_32;
      v15 = 2053;
LABEL_31:
      if (v11 == (char *)(v15 | 0x3030000u))
        goto LABEL_32;
LABEL_64:
      archive_set_error((_DWORD *)a1, -1, "Unknown codec ID: %lX", (uint64_t)a4, a5, a6, a7, a8, v11);
      return 4294967271;
    }
    if ((uint64_t)v11 > 50529280)
    {
      if (v11 != (char *)50529281)
      {
        v15 = 1281;
        goto LABEL_31;
      }
    }
    else if (v11 != (char *)50528539)
    {
      v15 = 517;
      goto LABEL_31;
    }
LABEL_32:
    v51 = v11;
    v16 = "Unexpected codec ID: %lX";
LABEL_33:
    archive_set_error((_DWORD *)a1, -1, v16, (uint64_t)a4, a5, a6, a7, a8, v51);
    return 4294967271;
  }
  v13 = a4;
  if ((uint64_t)v11 > 197632)
  {
    if ((uint64_t)v11 > 262657)
    {
      if (v11 != (char *)262658)
      {
        v15 = 259;
        goto LABEL_31;
      }
    }
    else if (v11 != (char *)197633 && v11 != (char *)262408)
    {
      goto LABEL_64;
    }
    goto LABEL_36;
  }
  if ((uint64_t)v11 > 32)
  {
    if (v11 != (char *)33 && v11 != (char *)196865)
      goto LABEL_64;
    v54 = 0;
    v52 = 0u;
    v53 = 0u;
    if (*(_DWORD *)(a2 + 448))
    {
      lzma_end();
      *(_DWORD *)(a2 + 448) = 0;
    }
    if (!v13)
      goto LABEL_90;
    v11 = *v13;
    *(_QWORD *)(a2 + 304) = *v13;
    v56 = 0;
    if ((uint64_t)v11 > 50529280)
    {
      if ((uint64_t)v11 > 50530048)
      {
        if (v11 == (char *)50530049)
        {
          v28 = 8;
        }
        else
        {
          if (v11 != (char *)50530309)
            goto LABEL_32;
          v28 = 9;
        }
      }
      else if (v11 == (char *)50529281)
      {
        v28 = 6;
      }
      else
      {
        if (v11 != (char *)50529537)
          goto LABEL_32;
        v28 = 7;
      }
    }
    else
    {
      if ((uint64_t)v11 <= 50528538)
      {
        if (v11 != (char *)3)
        {
          if (v11 != (char *)50528515)
            goto LABEL_32;
          if (*(_QWORD *)(a2 + 296) == 33)
          {
            v55 = 4;
            LODWORD(v13) = 1;
            v19 = 33;
LABEL_92:
            *(&v55 + 2 * v13) = v19;
            v38 = &v55 + 2 * v13;
            v38[1] = 0;
            v39 = (void **)(v38 + 1);
            v40 = lzma_properties_decode();
            if (v40)
            {
              v47 = v40;
              v48 = (_DWORD *)a1;
            }
            else
            {
              v49 = &v55 + 2 * ((_DWORD)v13 + 1);
              *v49 = -1;
              v49[1] = 0;
              v50 = lzma_raw_decoder();
              free(*v39);
              if (!v50)
              {
                result = 0;
                *(_DWORD *)(a2 + 448) = 1;
                *(_QWORD *)(a2 + 328) = 0;
                *(_QWORD *)(a2 + 352) = 0;
                return result;
              }
              v48 = (_DWORD *)a1;
              v47 = v50;
            }
            sub_1DB6F61F0(v48, v47, v41, v42, v43, v44, v45, v46, v51);
            return 4294967271;
          }
          LODWORD(v13) = 0;
          v10[3] = 0;
          *(_QWORD *)(a2 + 19992) = -1;
          *(_QWORD *)(a2 + 20000) = 0x500000000;
LABEL_90:
          v19 = *(_QWORD *)(a2 + 296);
          if (v19 != 33)
            v19 = 0x4000000000000001;
          goto LABEL_92;
        }
        if (v13[3] != (char *)1)
        {
          v16 = "Invalid Delta parameter";
          goto LABEL_33;
        }
        v54 = 0;
        v55 = 3;
        v52 = 0u;
        v53 = 0u;
        DWORD1(v52) = *v13[4] + 1;
        v56 = &v52;
LABEL_89:
        LODWORD(v13) = 1;
        goto LABEL_90;
      }
      if (v11 == (char *)50528539)
      {
        LODWORD(v13) = 0;
        v10[3] = 0;
        goto LABEL_90;
      }
      if (v11 != (char *)50528773)
        goto LABEL_32;
      v28 = 5;
    }
    v55 = v28;
    goto LABEL_89;
  }
  if (v11)
  {
    if (v11 != (char *)3)
      goto LABEL_64;
    goto LABEL_32;
  }
LABEL_36:
  if (a4)
  {
    v18 = *a4;
    if (*a4 != (char *)50528515 && v18 != (char *)50528539)
    {
      archive_set_error((_DWORD *)a1, -1, "Unsupported filter %lx for %lx", (uint64_t)a4, a5, a6, a7, a8, *a4);
      return 4294967271;
    }
    *(_QWORD *)(a2 + 304) = v18;
    *(_DWORD *)(a2 + 19972) = 0;
    if (v18 == (char *)50528515)
    {
      *(_QWORD *)(a2 + 19992) = -1;
      *(_QWORD *)(a2 + 20000) = 0x500000000;
    }
  }
  if ((uint64_t)v11 <= 196864)
    return 0;
  if ((uint64_t)v11 > 262407)
  {
    if (v11 != (char *)262408)
    {
      if (*(_DWORD *)(a2 + 536))
      {
        BZ2_bzDecompressEnd((bz_stream *)(a2 + 456));
        *(_DWORD *)(a2 + 536) = 0;
      }
      v20 = BZ2_bzDecompressInit((bz_stream *)(a2 + 456), 0, 0);
      if (v20 == -3)
        v20 = BZ2_bzDecompressInit((bz_stream *)(a2 + 456), 0, 1);
      v26 = "??";
      v27 = -1;
      switch(v20)
      {
        case -9:
          v26 = "mis-compiled library";
          goto LABEL_106;
        case -3:
          v26 = "out of memory";
          v27 = 12;
          goto LABEL_106;
        case -2:
          v26 = "invalid setup parameter";
          goto LABEL_106;
        case 0:
          result = 0;
          *(_DWORD *)(a2 + 536) = 1;
          *(_QWORD *)(a2 + 468) = 0;
          *(_QWORD *)(a2 + 492) = 0;
          return result;
        default:
LABEL_106:
          archive_set_error((_DWORD *)a1, v27, "Internal error initializing decompressor: %s", v21, v22, v23, v24, v25, v26);
          *(_DWORD *)(a2 + 536) = 0;
          break;
      }
      return 4294967271;
    }
    v29 = (z_stream *)(a2 + 544);
    if (*(_DWORD *)(a2 + 656))
      result = inflateReset(v29);
    else
      result = inflateInit2_(v29, -15, "1.2.12", 112);
    if (!(_DWORD)result)
    {
      *(_DWORD *)(a2 + 656) = 1;
      *(_QWORD *)(a2 + 560) = 0;
      *(_QWORD *)(a2 + 584) = 0;
      return result;
    }
    v16 = "Couldn't initialize zlib stream.";
    goto LABEL_33;
  }
  if (*(_DWORD *)(a2 + 19968))
  {
    sub_1DB6E8390(a2 + 664);
    v10[2] = 0;
  }
  if (*(_QWORD *)(a3 + 24) <= 4uLL
    || (v30 = *(unsigned __int8 **)(a3 + 32), v31 = *v30, (v31 - 65) < 0xFFFFFFC1)
    || (v32 = *(_DWORD *)(v30 + 1), v32 < 0x800)
    || v32 >= 0xFFFFFFDC)
  {
    v16 = "Malformed PPMd parameter";
    goto LABEL_33;
  }
  sub_1DB722AE4(a2 + 664);
  if (sub_1DB722C00(a2 + 664, v32))
  {
    sub_1DB722C84(a2 + 664, v31);
    sub_1DB722CB0((_QWORD *)(a2 + 19848));
    result = 0;
    v10[2] = 1;
    *(_DWORD *)(a2 + 660) = 0;
    *v10 = 0;
    *(_QWORD *)(a2 + 19928) = 0;
    *(_QWORD *)(a2 + 19952) = 0;
  }
  else
  {
    archive_set_error((_DWORD *)a1, 12, "Coludn't allocate memory for PPMd", v33, v34, v35, v36, v37, v51);
    return 4294967266;
  }
  return result;
}

_DWORD *sub_1DB6F61F0(_DWORD *result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
  char *v9;
  int v10;

  switch(a2)
  {
    case 0:
    case 1:
      return result;
    case 5:
      v9 = "Lzma library error: Cannot allocate memory";
      goto LABEL_5;
    case 6:
      v9 = "Lzma library error: Out of memory";
LABEL_5:
      v10 = 12;
      return archive_set_error(result, v10, v9, a4, a5, a6, a7, a8, a9);
    case 7:
      v9 = "Lzma library error: format not recognized";
      goto LABEL_11;
    case 8:
      v9 = "Lzma library error: Invalid options";
      goto LABEL_11;
    case 9:
      v9 = "Lzma library error: Corrupted input data";
      goto LABEL_11;
    case 10:
      v9 = "Lzma library error:  No progress is possible";
      goto LABEL_11;
    default:
      v9 = "Lzma decompression failed:  Unknown error";
LABEL_11:
      v10 = -1;
      return archive_set_error(result, v10, v9, a4, a5, a6, a7, a8, a9);
  }
}

uint64_t sub_1DB6F6274(uint64_t a1, unint64_t *a2, int a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const Bytef *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const Bytef *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  unsigned int v40;
  const Bytef *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;

  v6 = *(uint64_t **)(a1 + 2472);
  v7 = *v6;
  v8 = *(_QWORD *)(*v6 + 160);
  v9 = malloc_type_calloc(*(_QWORD *)(*v6 + 152), 1uLL, 0x100004077774924uLL);
  if (v9)
  {
    v16 = v9;
    v17 = sub_1DB6F2954(a1, 1uLL, v10, v11, v12, v13, v14, v15);
    if (v17)
    {
      v23 = *(_QWORD *)(v7 + 152);
      if (*v17)
      {
        memset(v16, 1, v23);
        goto LABEL_7;
      }
      if ((sub_1DB6F59A8(a1, (uint64_t)v16, v23, v18, v19, v20, v21, v22) & 0x80000000) == 0)
      {
LABEL_7:
        v31 = sub_1DB6F2954(a1, 1uLL, v24, v25, v26, v27, v28, v29);
        if (!v31
          || *v31 && ((sub_1DB6F57D0(a1, a2, v32, v33, v34, v35, v36, v37) & 0x80000000) != 0 || *a2 > 0x5F5E100))
        {
          goto LABEL_11;
        }
        if (!*(_QWORD *)(v7 + 152))
        {
LABEL_35:
          v30 = 0;
          goto LABEL_12;
        }
        v39 = 0;
        v40 = 1;
        while (1)
        {
          if (*((_BYTE *)v16 + v39))
          {
            v41 = sub_1DB6F2954(a1, 8uLL, v32, v33, v34, v35, v36, v37);
            if (!v41)
              break;
            switch(a3)
            {
              case 20:
                v46 = *(_QWORD *)v41;
                if (*(_QWORD *)v41 <= 0x19DB1DED53E7FFFuLL)
                {
                  v48 = 0;
                  v49 = 0;
                }
                else
                {
                  v47 = v46 - 116444736000000000;
                  v48 = (v46 - 116444736000000000) / 0x989680uLL;
                  v49 = 100 * (v47 - 10000000 * v48);
                }
                v56 = v8 + 88 * v39;
                *(_QWORD *)(v56 + 32) = v48;
                *(_QWORD *)(v56 + 56) = v49;
                v55 = 1;
                goto LABEL_33;
              case 19:
                v50 = *(_QWORD *)v41;
                if (*(_QWORD *)v41 <= 0x19DB1DED53E7FFFuLL)
                {
                  v52 = 0;
                  v53 = 0;
                }
                else
                {
                  v51 = v50 - 116444736000000000;
                  v52 = (v50 - 116444736000000000) / 0x989680uLL;
                  v53 = 100 * (v51 - 10000000 * v52);
                }
                v57 = v8 + 88 * v39;
                *(_QWORD *)(v57 + 40) = v52;
                *(_QWORD *)(v57 + 64) = v53;
                v55 = 2;
                goto LABEL_33;
              case 18:
                v42 = *(_QWORD *)v41;
                if (*(_QWORD *)v41 <= 0x19DB1DED53E7FFFuLL)
                {
                  v44 = 0;
                  v45 = 0;
                }
                else
                {
                  v43 = v42 - 116444736000000000;
                  v44 = (v42 - 116444736000000000) / 0x989680uLL;
                  v45 = 100 * (v43 - 10000000 * v44);
                }
                v54 = v8 + 88 * v39;
                *(_QWORD *)(v54 + 48) = v44;
                *(_QWORD *)(v54 + 72) = v45;
                v55 = 4;
LABEL_33:
                *(_DWORD *)(v8 + 88 * v39 + 24) |= v55;
                break;
            }
          }
          v39 = v40;
          if (*(_QWORD *)(v7 + 152) <= (unint64_t)v40++)
            goto LABEL_35;
        }
      }
    }
LABEL_11:
    v30 = 0xFFFFFFFFLL;
LABEL_12:
    free(v16);
    return v30;
  }
  return 0xFFFFFFFFLL;
}

uint64_t archive_read_disk_gname(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v11)(_QWORD, uint64_t);

  if (sub_1DB6E0594((int *)a1, 195932357, 0x7FFF, "archive_read_disk_gname", a5, a6, a7, a8))
    return 0;
  v11 = *(uint64_t (**)(_QWORD, uint64_t))(a1 + 216);
  if (!v11)
    return 0;
  else
    return v11(*(_QWORD *)(a1 + 232), a2);
}

uint64_t archive_read_disk_uname(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v11)(_QWORD, uint64_t);

  if (sub_1DB6E0594((int *)a1, 195932357, 0x7FFF, "archive_read_disk_uname", a5, a6, a7, a8))
    return 0;
  v11 = *(uint64_t (**)(_QWORD, uint64_t))(a1 + 240);
  if (!v11)
    return 0;
  else
    return v11(*(_QWORD *)(a1 + 256), a2);
}

uint64_t archive_read_disk_set_gname_lookup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  void (*v13)(void);

  result = sub_1DB6E0594((int *)a1, 195932357, 0x7FFF, "archive_read_disk_set_gname_lookup", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    v13 = *(void (**)(void))(a1 + 224);
    if (v13)
    {
      if (*(_QWORD *)(a1 + 232))
        v13();
    }
    result = 0;
    *(_QWORD *)(a1 + 216) = a3;
    *(_QWORD *)(a1 + 224) = a4;
    *(_QWORD *)(a1 + 232) = a2;
  }
  return result;
}

uint64_t archive_read_disk_set_uname_lookup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  void (*v13)(void);

  result = sub_1DB6E0594((int *)a1, 195932357, 0x7FFF, "archive_read_disk_set_uname_lookup", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    v13 = *(void (**)(void))(a1 + 248);
    if (v13)
    {
      if (*(_QWORD *)(a1 + 256))
        v13();
    }
    result = 0;
    *(_QWORD *)(a1 + 240) = a3;
    *(_QWORD *)(a1 + 248) = a4;
    *(_QWORD *)(a1 + 256) = a2;
  }
  return result;
}

_QWORD *archive_read_disk_new()
{
  _QWORD *v0;
  _QWORD *v1;

  v0 = malloc_type_calloc(1uLL, 0x130uLL, 0x10F004047A4F2DEuLL);
  v1 = v0;
  if (v0)
  {
    *v0 = 0x10BADB0C5;
    if ((byte_1ECFF6BB8 & 1) == 0)
    {
      qword_1ECFF6B50 = (uint64_t)sub_1DB6DBDEC;
      *(_QWORD *)algn_1ECFF6B58 = sub_1DB6E6610;
      qword_1ECFF6B90 = (uint64_t)sub_1DB6E01EC;
      qword_1ECFF6B80 = (uint64_t)sub_1DB6DF520;
      unk_1ECFF6B88 = sub_1DB6DF588;
      byte_1ECFF6BB8 = 1;
    }
    v0[1] = &qword_1ECFF6B50;
    v0[20] = archive_entry_new2((uint64_t)v0);
    v1[30] = sub_1DB6F6778;
    v1[27] = sub_1DB6F6780;
    *((_DWORD *)v1 + 52) = 4;
    v1[23] = sub_1DB6F6788;
    v1[24] = sub_1DB6F6790;
    v1[25] = sub_1DB6F6798;
  }
  return v1;
}

uint64_t sub_1DB6F6778()
{
  return 0;
}

uint64_t sub_1DB6F6780()
{
  return 0;
}

uint64_t sub_1DB6F6788(uint64_t a1, const char *a2, int a3)
{
  return openat(*(_DWORD *)(a1 + 120), a2, a3);
}

uint64_t sub_1DB6F6790(uint64_t a1)
{
  return *(unsigned int *)(a1 + 120);
}

uint64_t sub_1DB6F6798(uint64_t a1)
{
  uint64_t result;

  if (*(int *)(a1 + 104) < 1 || (*(_BYTE *)(a1 + 48) & 0x40) != 0)
    return 0;
  result = fchdir(*(_DWORD *)(a1 + 120));
  if (!(_DWORD)result)
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a1 + 48) & 0xFFFFFEBF | 0x40;
  return result;
}

uint64_t archive_read_disk_set_symlink_logical(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;

  result = sub_1DB6E0594((int *)a1, 195932357, 0x7FFF, "archive_read_disk_set_symlink_logical", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    *(_WORD *)(a1 + 168) = 332;
    v10 = *(_QWORD *)(a1 + 176);
    result = 0;
    if (v10)
      *(_WORD *)(v10 + 496) = 19532;
  }
  return result;
}

uint64_t archive_read_disk_set_symlink_physical(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;

  result = sub_1DB6E0594((int *)a1, 195932357, 0x7FFF, "archive_read_disk_set_symlink_physical", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    *(_WORD *)(a1 + 168) = 80;
    v10 = *(_QWORD *)(a1 + 176);
    result = 0;
    if (v10)
      *(_WORD *)(v10 + 496) = 20560;
  }
  return result;
}

uint64_t archive_read_disk_set_symlink_hybrid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;

  result = sub_1DB6E0594((int *)a1, 195932357, 0x7FFF, "archive_read_disk_set_symlink_hybrid", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    *(_WORD *)(a1 + 168) = 328;
    v10 = *(_QWORD *)(a1 + 176);
    result = 0;
    if (v10)
      *(_WORD *)(v10 + 496) = 18504;
  }
  return result;
}

uint64_t archive_read_disk_set_atime_restored(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;

  result = sub_1DB6E0594((int *)a1, 195932357, 0x7FFF, "archive_read_disk_restore_atime", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    *(_DWORD *)(a1 + 208) |= 1u;
    v10 = *(_QWORD *)(a1 + 176);
    result = 0;
    if (v10)
      *(_DWORD *)(v10 + 48) |= 0x80u;
  }
  return result;
}

uint64_t archive_read_disk_set_behavior(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = sub_1DB6E0594((int *)a1, 195932357, 0x7FFF, "archive_read_disk_honor_nodump", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    *(_DWORD *)(a1 + 208) = a2;
    if ((a2 & 1) != 0)
    {
      return archive_read_disk_set_atime_restored(a1, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      v18 = *(_QWORD *)(a1 + 176);
      result = 0;
      if (v18)
        *(_DWORD *)(v18 + 48) &= ~0x80u;
    }
  }
  return result;
}

uint64_t archive_read_disk_set_matching(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594((int *)a1, 195932357, 0x7FFF, "archive_read_disk_set_matching", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    result = 0;
    *(_QWORD *)(a1 + 280) = a2;
    *(_QWORD *)(a1 + 288) = a3;
    *(_QWORD *)(a1 + 296) = a4;
  }
  return result;
}

uint64_t archive_read_disk_set_metadata_filter_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594((int *)a1, 195932357, 0x7FFF, "archive_read_disk_set_metadata_filter_callback", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    result = 0;
    *(_QWORD *)(a1 + 264) = a2;
    *(_QWORD *)(a1 + 272) = a3;
  }
  return result;
}

uint64_t archive_read_disk_can_descend(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t result;

  v8 = *(_QWORD *)(a1 + 176);
  result = sub_1DB6E0594((int *)a1, 195932357, 6, "archive_read_disk_can_descend", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
    return *(_DWORD *)(v8 + 52) == 1 && *(_DWORD *)(v8 + 416) != 0;
  return result;
}

uint64_t archive_read_disk_descend(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t result;
  __n128 *v10;
  int v11;
  int v12;

  v8 = *(_QWORD *)(a1 + 176);
  result = sub_1DB6E0594((int *)a1, 195932357, 6, "archive_read_disk_descend", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    if (*(_DWORD *)(v8 + 52) != 1 || !*(_DWORD *)(v8 + 416))
      return 0;
    if (sub_1DB6F6BD4(v8))
    {
      sub_1DB6F6C38((__n128 **)v8, *(char **)(v8 + 88), *(_DWORD *)(v8 + 524), *(int *)(v8 + 128), *(_QWORD *)(v8 + 136), v8 + 424);
      v10 = *(__n128 **)v8;
      v11 = *(_DWORD *)(*(_QWORD *)v8 + 72);
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 16) + 16))
      {
        v12 = v11 | 1;
LABEL_11:
        v10[4].n128_u32[2] = v12;
        goto LABEL_12;
      }
    }
    else
    {
      if (!sub_1DB6F6D34(v8))
      {
LABEL_12:
        result = 0;
        *(_DWORD *)(v8 + 416) = 0;
        return result;
      }
      sub_1DB6F6C38((__n128 **)v8, *(char **)(v8 + 88), *(_DWORD *)(v8 + 524), *(int *)(v8 + 272), *(_QWORD *)(v8 + 280), v8 + 424);
      v10 = *(__n128 **)v8;
      v11 = *(_DWORD *)(*(_QWORD *)v8 + 72);
    }
    v12 = v11 | 2;
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_1DB6F6BD4(uint64_t a1)
{
  uint64_t result;

  if ((*(_BYTE *)(a1 + 48) & 0x10) == 0)
    goto LABEL_4;
  result = sub_1DB6F72A8(a1);
  if (!result)
    return result;
  if ((*(_WORD *)(result + 4) & 0xF000) != 0x4000)
    return 0;
LABEL_4:
  result = sub_1DB6F7254(a1);
  if (result)
    return (*(_WORD *)(result + 4) & 0xF000) == 0x4000;
  return result;
}

__n128 sub_1DB6F6C38(__n128 **a1, char *a2, unsigned __int32 a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  __n128 *v12;
  __n128 *v13;
  __n128 *v14;
  size_t v15;
  __n128 result;

  v12 = (__n128 *)malloc_type_calloc(1uLL, 0x88uLL, 0x10700402F4187EFuLL);
  v13 = v12;
  v14 = a1[1];
  v12->n128_u64[1] = (unint64_t)*a1;
  v12[1].n128_u64[0] = (unint64_t)v14;
  if (v14)
    v12->n128_u32[0] = v14->n128_u32[0] + 1;
  *a1 = v12;
  v12[1].n128_u64[1] = 0;
  v12[2].n128_u64[0] = 0;
  v12[2].n128_u64[1] = 0;
  v12[5].n128_u32[0] = -1;
  if (a2)
    v15 = strlen(a2);
  else
    v15 = 0;
  sub_1DB6E323C(&v13[1].n128_i64[1], a2, v15);
  v13[4].n128_u32[2] = 56;
  v13[4].n128_u32[3] = a3;
  v13[4].n128_u64[0] = a5;
  v13[3].n128_u64[0] = (unint64_t)a1[12];
  v13[3].n128_u64[1] = a4;
  v13[5].n128_u64[1] = v13[1].n128_u64[1];
  if (a6)
  {
    v13[6] = *(__n128 *)(a6 + 8);
    result = *(__n128 *)(a6 + 24);
    v13[7] = result;
    v13[8].n128_u16[0] = *(_WORD *)(a6 + 40);
    v13[8].n128_u32[1] = *(_DWORD *)(a6 + 44);
  }
  return result;
}

uint64_t sub_1DB6F6D34(uint64_t a1)
{
  uint64_t result;
  int v3;

  if ((*(_BYTE *)(a1 + 48) & 0x20) != 0)
  {
    result = sub_1DB6F7254(a1);
    if (!result)
      return result;
    v3 = *(_WORD *)(result + 4) & 0xF000;
    if (v3 == 0x4000)
      return 1;
    if (v3 != 40960)
      return 0;
  }
  result = sub_1DB6F72A8(a1);
  if (result)
    return (*(_WORD *)(result + 4) & 0xF000) == 0x4000;
  return result;
}

uint64_t archive_read_disk_open(int *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594(a1, 195932357, 33, "archive_read_disk_open", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    archive_clear_error((uint64_t)a1);
    return sub_1DB6F6E04((uint64_t)a1, a2);
  }
  return result;
}

uint64_t sub_1DB6F6E04(uint64_t a1, char *a2)
{
  char *v2;
  void **v4;
  int v5;
  uint64_t v6;
  char v7;
  int v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  int v16;
  char *v17;

  v2 = a2;
  v4 = *(void ***)(a1 + 176);
  if (v4)
  {
    v5 = *(_DWORD *)(a1 + 208) & 1;
    v6 = *(_QWORD *)(a1 + 176);
  }
  else
  {
    v7 = *(_BYTE *)(a1 + 168);
    v8 = *(_DWORD *)(a1 + 208);
    v9 = (void **)malloc_type_calloc(1uLL, 0x240uLL, 0x10700401185A2C1uLL);
    if (!v9)
    {
      *(_QWORD *)(a1 + 176) = 0;
      archive_set_error((_DWORD *)a1, 12, "Can't allocate tar data", v10, v11, v12, v13, v14, v17);
      result = 4294967266;
      v16 = 0x8000;
      goto LABEL_6;
    }
    v4 = v9;
    v9[9] = 0;
    v9[10] = 0;
    v9[8] = 0;
    sub_1DB6E3190(v9 + 8, 0x1FuLL);
    *((_BYTE *)v4 + 496) = v7;
    v6 = (uint64_t)v4;
    a2 = v2;
    v5 = v8 & 1;
  }
  sub_1DB6F77DC(v6, a2, v5);
  result = 0;
  *(_QWORD *)(a1 + 176) = v4;
  v16 = 2;
LABEL_6:
  *(_DWORD *)(a1 + 4) = v16;
  return result;
}

uint64_t archive_read_disk_open_w(int *a1, __int32 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  int v19;
  char *v21;
  char *v22[3];

  if (sub_1DB6E0594(a1, 195932357, 33, "archive_read_disk_open_w", a5, a6, a7, a8) == -30)
    return 4294967266;
  archive_clear_error((uint64_t)a1);
  memset(v22, 0, sizeof(v22));
  v11 = wcslen(a2);
  if (sub_1DB72CED8((uint64_t)v22, a2, v11))
  {
    if (*__error() == 12)
    {
      v17 = "Can't allocate memory";
      v18 = a1;
      v19 = 12;
    }
    else
    {
      v17 = "Can't convert a path to a char string";
      v18 = a1;
      v19 = -1;
    }
    archive_set_error(v18, v19, v17, v12, v13, v14, v15, v16, v21);
    a1[1] = 0x8000;
    v10 = 4294967266;
  }
  else
  {
    v10 = sub_1DB6F6E04((uint64_t)a1, v22[0]);
  }
  sub_1DB6E7C3C((uint64_t)v22);
  return v10;
}

uint64_t archive_read_disk_current_filesystem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594((int *)a1, 195932357, 4, "archive_read_disk_current_filesystem", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
    return *(unsigned int *)(*(_QWORD *)(a1 + 176) + 524);
  return result;
}

uint64_t archive_read_disk_current_filesystem_is_synthetic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594((int *)a1, 195932357, 4, "archive_read_disk_current_filesystem", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
    return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 504) + 8);
  return result;
}

uint64_t archive_read_disk_current_filesystem_is_remote(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594((int *)a1, 195932357, 4, "archive_read_disk_current_filesystem", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
    return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 504) + 12);
  return result;
}

uint64_t sub_1DB6F708C(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  timeval v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v3 = result;
  v11 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a2 + 48) & 0x80) != 0 && !*(_DWORD *)(a3 + 44))
  {
    v5 = *(_QWORD *)(a3 + 16);
    v9 = *(_QWORD *)(a3 + 8);
    v10 = (int)v5 / 1000;
    v6 = *(_QWORD *)(a3 + 32);
    v8.tv_sec = *(_QWORD *)(a3 + 24);
    v8.tv_usec = (int)v6 / 1000;
    v7 = futimes(result, &v8);
    result = close(v3);
    if (v7)
      return lutimes(*(const char **)a3, &v8);
  }
  else if ((result & 0x80000000) == 0)
  {
    return close(result);
  }
  return result;
}

void sub_1DB6F719C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  *(_BYTE *)(*(_QWORD *)(a1 + 64) + *(_QWORD *)(a1 + 96)) = 0;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 96);
  v2 = *(_QWORD **)a1;
  v1 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v1 && v1 != 0)
    *(_QWORD *)(a1 + 8) = v2[2];
  *(_QWORD *)a1 = v2[1];
  v4 = v2[6];
  *(_QWORD *)(a1 + 96) = v4;
  v5 = (unsigned __int8 *)(*(_QWORD *)(a1 + 64) + v4);
  do
  {
    *(_QWORD *)(a1 + 88) = v5;
    v6 = *v5++;
  }
  while (v6 == 47);
  sub_1DB6E7C3C((uint64_t)(v2 + 3));
  free(v2);
}

uint64_t sub_1DB6F7214(uint64_t result)
{
  uint64_t v1;

  if ((*(_BYTE *)(result + 49) & 1) == 0)
  {
    v1 = result;
    result = fchdir(*(_DWORD *)(result + 116));
    if (!(_DWORD)result)
      *(_DWORD *)(v1 + 48) = *(_DWORD *)(v1 + 48) & 0xFFFFFEBF | 0x100;
  }
  return result;
}

uint64_t sub_1DB6F7254(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 48) & 0x20) == 0)
  {
    if (fstatat(*(_DWORD *)(a1 + 120), *(const char **)(a1 + 88), (stat *)(a1 + 128), 32))
      return 0;
    *(_DWORD *)(a1 + 48) |= 0x20u;
  }
  return a1 + 128;
}

uint64_t sub_1DB6F72A8(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 48) & 0x10) == 0)
  {
    if (fstatat(*(_DWORD *)(a1 + 120), *(const char **)(a1 + 88), (stat *)(a1 + 272), 0))
      return 0;
    *(_DWORD *)(a1 + 48) |= 0x10u;
  }
  return a1 + 272;
}

uint64_t sub_1DB6F72FC(uint64_t a1)
{
  uint64_t *v2;
  int v3;
  uint64_t result;
  size_t v5;
  int v6;
  uint64_t v7;
  int v8;
  DIR *v9;
  size_t v10;
  void *v11;
  void *v12;
  unsigned int v13;
  int v14;

  if (*(_QWORD *)(a1 + 16))
    goto LABEL_2;
  v8 = sub_1DB6F7644(*(_DWORD *)(a1 + 120));
  v9 = fdopendir(v8);
  *(_QWORD *)(a1 + 16) = v9;
  if (!v9)
  {
    v13 = sub_1DB6F7588((_DWORD *)a1);
    sub_1DB6F719C(a1);
    v14 = *__error();
    if (v13)
      result = v13;
    else
      result = 0xFFFFFFFFLL;
    *(_DWORD *)(a1 + 56) = v14;
LABEL_22:
    *(_DWORD *)(a1 + 52) = result;
    return result;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 512) + 88 * *(int *)(*(_QWORD *)(a1 + 8) + 76) + 24) + 22;
  v11 = *(void **)(a1 + 32);
  if (v11)
  {
    if (*(_QWORD *)(a1 + 40) >= v10)
    {
LABEL_2:
      *__error() = 0;
      v2 = (uint64_t *)(a1 + 24);
      v3 = readdir_r(*(DIR **)(a1 + 16), *(dirent **)(a1 + 32), (dirent **)(a1 + 24));
      if (!v3)
      {
        do
        {
          v7 = *v2;
          if (!*v2)
          {
            closedir(*(DIR **)(a1 + 16));
            result = 0;
            *(_QWORD *)(a1 + 16) = 0;
            return result;
          }
          v5 = strlen((const char *)(v7 + 21));
          *(_DWORD *)(a1 + 48) &= 0xFFFFFFCF;
          if (*(_BYTE *)(v7 + 21) != 46)
          {
LABEL_17:
            sub_1DB6F74C0((uint64_t *)a1, (_BYTE *)(v7 + 21), v5);
            result = 1;
            goto LABEL_22;
          }
          if (*(_BYTE *)(v7 + 22) == 46)
          {
            if (*(_BYTE *)(v7 + 23))
              goto LABEL_17;
          }
          else if (*(_BYTE *)(v7 + 22))
          {
            goto LABEL_17;
          }
          *__error() = 0;
          v6 = readdir_r(*(DIR **)(a1 + 16), *(dirent **)(a1 + 32), (dirent **)(a1 + 24));
        }
        while (!v6);
        v3 = v6;
      }
      closedir(*(DIR **)(a1 + 16));
      *(_QWORD *)(a1 + 16) = 0;
      result = 0xFFFFFFFFLL;
      *(_DWORD *)(a1 + 56) = v3;
      goto LABEL_22;
    }
  }
  free(v11);
  v12 = malloc_type_malloc(v10, 0x66209681uLL);
  *(_QWORD *)(a1 + 32) = v12;
  if (v12)
  {
    *(_QWORD *)(a1 + 40) = v10;
    goto LABEL_2;
  }
  closedir(*(DIR **)(a1 + 16));
  *(_QWORD *)(a1 + 16) = 0;
  sub_1DB6F7588((_DWORD *)a1);
  sub_1DB6F719C(a1);
  *(_QWORD *)(a1 + 52) = 0xCFFFFFFFFLL;
  return 0xFFFFFFFFLL;
}

uint64_t *sub_1DB6F74C0(uint64_t *a1, _BYTE *a2, unint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *result;

  v5 = a1 + 8;
  *(_BYTE *)(a1[8] + a1[12]) = 0;
  v6 = a1[12];
  a1[9] = v6;
  v7 = a3 != 0;
  while (a3 >= 2)
  {
    v8 = a3 - 1;
    v9 = a2[--a3];
    if (v9 != 47)
    {
      v7 = v8 + 1;
      break;
    }
  }
  sub_1DB6E3190((void **)a1 + 8, v6 + v7 + 2);
  v10 = a1[8];
  v11 = a1[9];
  if (a1[12] && *(_BYTE *)(v11 + v10 - 1) != 47)
  {
    sub_1DB72CE60(v5, 47);
    v10 = a1[8];
    v11 = a1[9];
  }
  a1[11] = v10 + v11;
  result = sub_1DB6E323C(v5, a2, v7);
  a1[53] = a1[11];
  return result;
}

uint64_t sub_1DB6F7588(_DWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  v3 = a1[30];
  if ((*(_BYTE *)(*(_QWORD *)a1 + 72) & 2) != 0)
  {
    v5 = *(_DWORD *)(v2 + 80);
    if ((v5 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_7:
    a1[14] = *__error();
    return 4294967294;
  }
  v4 = openat(a1[30], "..", 0x1000000);
  v5 = v4;
  sub_1DB6DD880(v4);
  if (v5 < 0)
    goto LABEL_7;
LABEL_3:
  a1[30] = v5;
  a1[12] &= ~0x40u;
  sub_1DB6F708C(v3, (uint64_t)a1, v2 + 88);
  if ((*(_BYTE *)(v2 + 72) & 2) != 0)
  {
    --a1[27];
    *(_DWORD *)(v2 + 80) = -1;
  }
  result = 0;
  --a1[26];
  return result;
}

uint64_t sub_1DB6F7644(int a1)
{
  uint64_t v2;

  if (!dword_1F02F76A0)
    goto LABEL_4;
  v2 = fcntl(a1, 67, 0);
  if ((_DWORD)v2 == -1)
  {
    dword_1F02F76A0 = 0;
LABEL_4:
    v2 = dup(a1);
    sub_1DB6DD880(v2);
  }
  return v2;
}

BOOL sub_1DB6F76B0(uint64_t a1)
{
  int *v2;
  _BOOL8 result;
  uint64_t v4;

  qword_1F02F76A8 = sub_1DB6F7254(a1);
  v2 = (int *)sub_1DB6F72A8(a1);
  result = 0;
  qword_1F02F76B0 = (uint64_t)v2;
  if (v2 && qword_1F02F76A8)
  {
    v4 = *v2;
    return **(_QWORD **)(a1 + 504) == v4 && (_DWORD)v4 != *(_DWORD *)qword_1F02F76A8;
  }
  return result;
}

uint64_t sub_1DB6F7724(uint64_t a1, int a2)
{
  uint64_t v4;

  *(_QWORD *)(*(_QWORD *)(a1 + 504) + 56) = -1;
  *__error() = 0;
  if (a2 < 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 504) + 56);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 504) + 32) = fpathconf(a2, 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 504) + 40) = fpathconf(a2, 21);
    *(_QWORD *)(*(_QWORD *)(a1 + 504) + 48) = fpathconf(a2, 22);
    v4 = fpathconf(a2, 23);
    *(_QWORD *)(*(_QWORD *)(a1 + 504) + 56) = v4;
  }
  if (v4 != -1)
    return 0;
  if (*__error() == 22)
    return 1;
  return 0xFFFFFFFFLL;
}

uint64_t sub_1DB6F77DC(uint64_t a1, char *a2, int a3)
{
  int v4;
  uint64_t v5;

  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  if (a3)
    v4 = 384;
  else
    v4 = 256;
  *(_DWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 497) = *(_BYTE *)(a1 + 496);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 536) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 520) = -1;
  sub_1DB6F6C38((__n128 **)a1, a2, 0, 0, 0, 0);
  *(_DWORD *)(*(_QWORD *)a1 + 72) = 4;
  *(_QWORD *)(a1 + 108) = 0x100000001;
  v5 = open(".", 0x1000000);
  *(_DWORD *)(a1 + 116) = v5;
  if ((v5 & 0x80000000) != 0)
  {
    v5 = open(".", 1091567616);
    *(_DWORD *)(a1 + 116) = v5;
  }
  sub_1DB6DD880(v5);
  *(_DWORD *)(a1 + 120) = sub_1DB6F7644(*(_DWORD *)(a1 + 116));
  return a1;
}

uint64_t archive_read_extract_set_skip_file(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594((int *)a1, 14594245, 0x7FFF, "archive_read_extract_set_skip_file", a5, a6, a7, a8);
  if (!(_DWORD)result)
  {
    *(_DWORD *)(a1 + 168) = 1;
    *(_QWORD *)(a1 + 176) = a2;
    *(_QWORD *)(a1 + 184) = a3;
  }
  return result;
}

uint64_t archive_read_open2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  archive_read_set_callback_data2(a1, a2, 0, a4, a5, a6, a7, a8);
  if (sub_1DB6E0594((int *)a1, 14594245, 1, "archive_read_set_open_callback", v13, v14, v15, v16) != -30)
    *(_QWORD *)(a1 + 192) = a3;
  if (sub_1DB6E0594((int *)a1, 14594245, 1, "archive_read_set_read_callback", v17, v18, v19, v20) != -30)
    *(_QWORD *)(a1 + 200) = a4;
  if (sub_1DB6E0594((int *)a1, 14594245, 1, "archive_read_set_skip_callback", v21, v22, v23, v24) != -30)
    *(_QWORD *)(a1 + 208) = a5;
  if (sub_1DB6E0594((int *)a1, 14594245, 1, "archive_read_set_close_callback", v25, v26, v27, v28) != -30)
    *(_QWORD *)(a1 + 224) = a6;
  return archive_read_open1(a1, v29, v30, v31, v32, v33, v34, v35);
}

uint64_t archive_read_set_switch_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594((int *)a1, 14594245, 1, "archive_read_set_switch_callback", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    result = 0;
    *(_QWORD *)(a1 + 232) = a2;
  }
  return result;
}

uint64_t archive_read_add_callback_data(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  char *v17;
  _DWORD *v18;
  int v19;
  void *v20;
  unsigned int v21;
  char *v22;
  int v23;
  unsigned int v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v31;

  if (sub_1DB6E0594((int *)a1, 14594245, 1, "archive_read_add_callback_data", a5, a6, a7, a8) == -30)
    return 4294967266;
  v16 = *(_DWORD *)(a1 + 240);
  if (v16 < a3)
  {
    v17 = "Invalid index specified.";
    v18 = (_DWORD *)a1;
    v19 = 22;
LABEL_10:
    archive_set_error(v18, v19, v17, v11, v12, v13, v14, v15, v31);
    return 4294967266;
  }
  v20 = *(void **)(a1 + 256);
  v21 = v16 + 1;
  *(_DWORD *)(a1 + 240) = v21;
  v22 = (char *)malloc_type_realloc(v20, 24 * v21, 0x108004098BBCF0FuLL);
  if (!v22)
  {
    v17 = "No memory.";
    v18 = (_DWORD *)a1;
    v19 = 12;
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 256) = v22;
  v23 = *(_DWORD *)(a1 + 240);
  v24 = v23 - 1;
  if (v23 - 1 > a3)
  {
    v25 = &v22[24 * (v23 - 2) + 16];
    v26 = &v22[24 * v24 + 16];
    do
    {
      v27 = *(_QWORD *)v25;
      v25 -= 24;
      *((_QWORD *)v26 - 1) = -1;
      *(_QWORD *)v26 = v27;
      *((_QWORD *)v26 - 2) = -1;
      v26 -= 24;
      --v24;
    }
    while (v24 > a3);
  }
  v28 = 0;
  v29 = &v22[24 * a3];
  *(_QWORD *)v29 = -1;
  *((_QWORD *)v29 + 1) = -1;
  *((_QWORD *)v29 + 2) = a2;
  return v28;
}

uint64_t archive_read_append_callback_data(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return archive_read_add_callback_data(a1, a2, *(_DWORD *)(a1 + 240), a4, a5, a6, a7, a8);
}

uint64_t archive_read_prepend_callback_data(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return archive_read_add_callback_data(a1, a2, 0, a4, a5, a6, a7, a8);
}

uint64_t sub_1DB6F7B58(uint64_t a1)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 24) + 192);
  if (v1)
    return v1();
  else
    return 0;
}

uint64_t sub_1DB6F7B78(uint64_t *a1, unint64_t a2)
{
  int64_t v2;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  uint64_t v13;

  if ((a2 & 0x8000000000000000) != 0)
    sub_1DB730818(1, "Negative skip requested.");
  v2 = a2;
  if (!a2)
    return 0;
  v4 = a1[3];
  v5 = *(uint64_t (**)(void))(v4 + 208);
  if (v5)
  {
    v6 = v5();
    v7 = v6;
    if (v6)
      v8 = v6 == v2;
    else
      v8 = 1;
    if (!v8)
    {
      while (1)
      {
        v9 = v2 < v6;
        v2 -= v6;
        if (v9)
          break;
        v6 = (*(uint64_t (**)(void))(a1[3] + 208))();
        v7 += v6;
        if (v6)
          v10 = v6 == v2;
        else
          v10 = 1;
        if (v10)
          return v7;
      }
      return -30;
    }
  }
  else
  {
    v7 = 0;
    if (a2 > 0x10000)
    {
      v11 = *(uint64_t (**)(void))(v4 + 216);
      if (v11)
      {
        v12 = *a1;
        v13 = v11();
        if (v13 == v12 + v2)
          return v13 - v12;
        else
          return -30;
      }
    }
  }
  return v7;
}

uint64_t sub_1DB6F7C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t (*v9)(void);
  char *vars0;

  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(uint64_t (**)(void))(v8 + 216);
  if (v9)
    return v9();
  archive_set_error((_DWORD *)v8, -1, "Current client reader does not support seeking a device", a4, 0, a6, a7, a8, vars0);
  return -25;
}

uint64_t sub_1DB6F7CBC(uint64_t a1)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 1032) + 80);
  if (v1)
    return v1();
  else
    return 0;
}

uint64_t archive_read_header_position(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (sub_1DB6E0594((int *)a1, 14594245, 0x7FFF, "archive_read_header_position", a5, a6, a7, a8) == -30)
    return -30;
  else
    return *(_QWORD *)(a1 + 1048);
}

uint64_t archive_read_has_encrypted_entries(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t (*v5)(uint64_t);

  if (!a1)
    return 4294967294;
  v2 = *(_QWORD *)(a1 + 2472);
  if (!v2)
    return 4294967294;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 72);
  if (!v3 || (v3(a1) & 3) == 0)
    return 4294967294;
  v4 = *(_QWORD *)(a1 + 2472);
  if (v4 && (v5 = *(uint64_t (**)(uint64_t))(v4 + 80)) != 0)
    return v5(a1);
  else
    return 0xFFFFFFFFLL;
}

uint64_t archive_read_format_capabilities(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(void);

  if (a1 && (v1 = *(_QWORD *)(a1 + 2472)) != 0 && (v2 = *(uint64_t (**)(void))(v1 + 72)) != 0)
    return v2();
  else
    return 0;
}

uint64_t archive_read_data(uint64_t a1, char *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v9;
  uint64_t v11;
  int64_t *v12;
  size_t *v13;
  int64_t v14;
  int64_t v15;
  int64_t v16;
  int data_block;
  int64_t v18;
  BOOL v19;
  uint64_t v20;
  size_t v21;
  size_t v22;
  uint64_t v23;
  size_t v24;
  size_t v25;
  char *v27;
  uint64_t v28;

  if (a3)
  {
    v9 = a3;
    v11 = 0;
    v12 = (int64_t *)(a1 + 120);
    v13 = (size_t *)(a1 + 136);
    v14 = *(_QWORD *)(a1 + 128);
    while (1)
    {
      v15 = *v12;
      if (*v12 == v14)
      {
        v16 = v14;
        if (*v13)
          goto LABEL_9;
        v28 = *(_QWORD *)(a1 + 112);
        *(_BYTE *)(a1 + 144) = 1;
        *(_QWORD *)(a1 + 152) = v9;
        data_block = archive_read_data_block(a1);
        *(_QWORD *)(a1 + 112) = v28;
        if (data_block == 1)
          return v11;
        if (data_block < 0)
          return data_block;
        v15 = *(_QWORD *)(a1 + 120);
        v14 = *(_QWORD *)(a1 + 128);
      }
      v16 = v14;
      v14 = v15;
      if (v15 < v16)
      {
        archive_set_error((_DWORD *)a1, 79, "Encountered out-of-order sparse blocks", a4, a5, a6, a7, a8, v27);
        return -10;
      }
LABEL_9:
      v18 = v16 + v9;
      v19 = __OFSUB__(v14, v16);
      v20 = v14 - v16;
      if ((v20 < 0) ^ v19 | (v20 == 0))
        v20 = 0;
      if (v18 >= v14)
        v21 = v20;
      else
        v21 = v9;
      bzero(a2, v21);
      v14 = *(_QWORD *)(a1 + 128) + v21;
      *(_QWORD *)(a1 + 128) = v14;
      v11 += v21;
      v9 -= v21;
      if (v9)
      {
        a2 += v21;
        v22 = *v13 >= v9 ? v9 : *v13;
        if (v22)
        {
          memcpy(a2, *(const void **)(a1 + 112), v22);
          v9 -= v22;
          v23 = *(_QWORD *)(a1 + 120);
          v24 = *(_QWORD *)(a1 + 112) + v22;
          v25 = *(_QWORD *)(a1 + 136) - v22;
          v14 = *(_QWORD *)(a1 + 128) + v22;
          *(_QWORD *)(a1 + 128) = v14;
          *(_QWORD *)(a1 + 136) = v25;
          *(_QWORD *)(a1 + 112) = v24;
          *(_QWORD *)(a1 + 120) = v23 + v22;
          a2 += v22;
          v11 += v22;
        }
        if (v9)
          continue;
      }
      goto LABEL_24;
    }
  }
  v11 = 0;
LABEL_24:
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  return v11;
}

double sub_1DB6F7F30(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_BYTE *)(a1 + 144) = 0;
  return result;
}

uint64_t archive_seek_data(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  char *v17;

  if (sub_1DB6E0594((int *)a1, 14594245, 4, "archive_seek_data_block", a5, a6, a7, a8) != -30)
  {
    v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 2472) + 56);
    if (v15)
      return v15(a1, a2, a3);
    archive_set_error((_DWORD *)a1, 22, "Internal error: No format_seek_data_block function registered", 0, v11, v12, v13, v14, v17);
  }
  return -30;
}

double sub_1DB6F7FD0(_DWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _DWORD *v9;
  double result;
  char *vars0;

  v8 = 0;
  while (1)
  {
    v9 = &a1[v8];
    if (!*(_QWORD *)&a1[v8 + 70])
      break;
    v8 += 12;
    if (v8 == 192)
    {
      archive_set_error(a1, 12, "Not enough slots for filter registration", a4, a5, a6, a7, a8, vars0);
      return result;
    }
  }
  result = 0.0;
  *(_OWORD *)(v9 + 70) = 0u;
  *(_OWORD *)(v9 + 74) = 0u;
  *(_OWORD *)(v9 + 66) = 0u;
  *a2 = v9 + 66;
  return result;
}

uint64_t sub_1DB6F802C(uint64_t a1, uint64_t a2, int a3)
{
  return sub_1DB6F8034(*(_QWORD *)(a1 + 1032), a2, a3);
}

uint64_t sub_1DB6F8034(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t j;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;

  if (*(_BYTE *)(a1 + 177) || *(_BYTE *)(a1 + 178))
    return -30;
  if (!*(_QWORD *)(a1 + 56))
    return -25;
  v5 = a2;
  v6 = *(_QWORD *)(a1 + 24);
  if (!a3)
    goto LABEL_17;
  if (a3 == 1)
  {
    v5 = *(_QWORD *)a1 + a2;
LABEL_17:
    v14 = *(uint64_t **)(v6 + 256);
    v15 = *v14;
    if (*v14 < 0 || (v16 = v14[1], v16 < 0))
    {
      v10 = 0;
    }
    else
    {
      v10 = 0;
      v17 = v14 + 4;
      do
      {
        v15 += v16;
        if (v15 - 1 > v5)
          break;
        if (v10 + 1 >= *(_DWORD *)(v6 + 240))
          break;
        *(v17 - 1) = v15;
        v18 = *v17;
        v17 += 3;
        v16 = v18;
        ++v10;
      }
      while ((v18 & 0x8000000000000000) == 0);
    }
    LODWORD(result) = sub_1DB6E53F0(a1, v10);
    if ((_DWORD)result)
      return (int)result;
    for (i = 24 * (v10 + 1); ; i += 24)
    {
      result = sub_1DB6F7C74(a1, 0, 2, v19, v20, v21, v22, v23);
      v30 = result;
      if (result < 0)
        break;
      v31 = *(_QWORD *)(v6 + 256);
      v32 = (uint64_t *)(v31 + 24 * v10);
      v32[1] = result;
      v33 = *v32;
      v34 = *v32 + result;
      if (v34 - 1 > v5 || v10 + 1 >= *(_DWORD *)(v6 + 240))
      {
        result = -30;
        v40 = v5 - v33;
        if (v5 - v33 >= 0 && v40 <= v30)
        {
LABEL_52:
          result = sub_1DB6F7C74(a1, v40, 0, v25, v26, v27, v28, v29);
          if ((result & 0x8000000000000000) == 0)
          {
            result += *(_QWORD *)(*(_QWORD *)(v6 + 256) + 24 * v10);
            if (result >= 0)
            {
              *(_QWORD *)(a1 + 168) = 0;
              *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 112);
              *(_QWORD *)(a1 + 136) = 0;
              *(_QWORD *)a1 = result;
              *(_BYTE *)(a1 + 176) = 0;
            }
          }
        }
        return result;
      }
      *(_QWORD *)(v31 + i) = v34;
      LODWORD(result) = sub_1DB6E53F0(a1, ++v10);
      if ((_DWORD)result)
        return (int)result;
    }
    return result;
  }
  if (a3 != 2)
    return -30;
  v7 = *(uint64_t **)(v6 + 256);
  v8 = *v7;
  if (*v7 < 0 || (v9 = v7[1], v9 < 0))
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    v11 = *(_DWORD *)(v6 + 240);
    v12 = v7 + 4;
    do
    {
      if (v10 + 1 >= v11)
        break;
      v8 += v9;
      *(v12 - 1) = v8;
      v13 = *v12;
      v12 += 3;
      v9 = v13;
      ++v10;
    }
    while ((v13 & 0x8000000000000000) == 0);
  }
  LODWORD(result) = sub_1DB6E53F0(a1, v10);
  if ((_DWORD)result)
    return (int)result;
  v41 = 24 * v10 + 8;
  for (j = 24 * (v10 + 1); ; j += 24)
  {
    result = sub_1DB6F7C74(a1, 0, 2, v35, v36, v37, v38, v39);
    if (result < 0)
      break;
    v43 = *(_QWORD *)(v6 + 256);
    *(_QWORD *)(v43 + v41) = result;
    v44 = *(_QWORD *)(v43 + v41 - 8);
    v45 = v44 + result;
    if (v10 + 1 >= *(_DWORD *)(v6 + 240))
    {
      if (v45 + v5 < v44)
      {
        v5 += result;
        if (v10)
        {
          --v10;
          while (1)
          {
            v46 = (uint64_t *)(v43 + 24 * v10);
            v44 = *v46;
            v47 = v46[1];
            v45 = v47 + v44;
            if (v47 + v44 + v5 >= v44)
              break;
            v5 += v47;
            if (--v10 == -1)
            {
              v10 = 0;
              break;
            }
          }
        }
      }
      LODWORD(result) = sub_1DB6E53F0(a1, v10);
      if (!(_DWORD)result)
      {
        v40 = v45 - v44 + v5;
        goto LABEL_52;
      }
      return (int)result;
    }
    *(_QWORD *)(v43 + j) = v45;
    LODWORD(result) = sub_1DB6E53F0(a1, v10 + 1);
    v41 += 24;
    ++v10;
    if ((_DWORD)result)
      return (int)result;
  }
  return result;
}

uint64_t sub_1DB6F8324(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = sub_1DB6F83AC(a1, a2);
  if (v2)
    return *(_QWORD *)v2;
  else
    return -1;
}

uint64_t sub_1DB6F8348(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = sub_1DB6F83AC(a1, a2);
  if (v2)
    return *(unsigned int *)(v2 + 104);
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_1DB6F836C(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  result = sub_1DB6F83AC(a1, a2);
  if (result)
    return *(_QWORD *)(result + 96);
  return result;
}

uint64_t sub_1DB6F8388(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 1032);
  if (!v1)
    return 0;
  LODWORD(result) = 0;
  do
  {
    result = (result + 1);
    v1 = *(_QWORD *)(v1 + 16);
  }
  while (v1);
  return result;
}

uint64_t sub_1DB6F83AC(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 1032);
  if (a2 == -1 && v2)
  {
    do
    {
      result = v2;
      v2 = *(_QWORD *)(v2 + 16);
    }
    while (v2);
  }
  else if ((a2 & 0x80000000) != 0)
  {
    return 0;
  }
  else if (a2 && v2)
  {
    result = *(_QWORD *)(a1 + 1032);
    do
    {
      result = *(_QWORD *)(result + 16);
      if (a2 < 2)
        break;
      --a2;
    }
    while (result);
  }
  else
  {
    return *(_QWORD *)(a1 + 1032);
  }
  return result;
}

uint64_t archive_read_support_filter_grzip(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;

  if (sub_1DB6E4544("grzip"))
  {
    result = sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_filter_grzip", v3, v4, v5, v6);
    if ((_DWORD)result == -30)
      return result;
    v22 = 0;
    sub_1DB6F7FD0(a1, &v22, v8, v9, v10, v11, v12, v13);
    if (!v19)
    {
      *v22 = 0;
      v20 = v22;
      v22[2] = sub_1DB6F84D0;
      v20[3] = sub_1DB6F8548;
      v20[4] = 0;
      v20[5] = sub_1DB6F8584;
      archive_set_error(a1, -1, "Using external grzip program for grzip decompression", v14, v15, v16, v17, v18, v21);
      return 4294967276;
    }
  }
  else
  {
    archive_set_error(a1, -1, "Filter not allow-listed in entitlements", v2, v3, v4, v5, v6, v21);
  }
  return 4294967266;
}

uint64_t sub_1DB6F84D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v8;
  uint64_t result;
  uint64_t v10;

  v10 = 0;
  v8 = sub_1DB6E22F4(a2, 0xCuLL, &v10, a4, a5, a6, a7, a8);
  result = 0;
  if (v8 && v10)
  {
    if (*(_QWORD *)v8 ^ 0x494970695A5247 | *(unsigned int *)(v8 + 8) ^ 0x293A0402)
      return 0;
    else
      return 96;
  }
  return result;
}

uint64_t sub_1DB6F8548(uint64_t a1)
{
  uint64_t result;

  result = sub_1DB6FE79C(a1, "grzip -d");
  *(_DWORD *)(a1 + 104) = 12;
  *(_QWORD *)(a1 + 96) = "grzip";
  return result;
}

uint64_t sub_1DB6F8584()
{
  return 0;
}

uint64_t archive_read_data_into_fd(int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  void *v11;
  BOOL v12;
  uint64_t data_block;
  stat v15;

  if (sub_1DB6E0594(a1, 14594245, 4, "archive_read_data_into_fd", a5, a6, a7, a8) == -30)
    return 4294967266;
  memset(&v15, 0, sizeof(v15));
  v11 = 0;
  if (fstat(a2, &v15))
    v12 = 0;
  else
    v12 = (v15.st_mode & 0xF000) == 0x8000;
  if (!v12)
    v11 = malloc_type_calloc(1uLL, 0x4000uLL, 0x89359FF2uLL);
  do
    data_block = archive_read_data_block((uint64_t)a1);
  while (!(_DWORD)data_block);
  v10 = data_block;
  if ((_DWORD)data_block == 1)
    v10 = 0;
  free(v11);
  return v10;
}

uint64_t sub_1DB6F8760(_DWORD *a1, int __fd, int a3, void *__buf, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v19;
  ssize_t v20;
  char *v21;

  v6 = a6;
  if (a3)
  {
    if (lseek(__fd, a5 - a6, 1) != a5)
    {
      v10 = "Seek error";
LABEL_4:
      v11 = __error();
      archive_set_error(a1, *v11, v10, v12, v13, v14, v15, v16, v21);
      return 4294967266;
    }
  }
  else if (a5 > a6)
  {
    v10 = "Write error";
    while (1)
    {
      v19 = v6 + 0x4000 <= a5 ? 0x4000 : a5 - v6;
      v20 = write(__fd, __buf, v19);
      if (v20 < 0)
        break;
      v6 += v20;
      if (v6 >= a5)
        return 0;
    }
    goto LABEL_4;
  }
  return 0;
}

uint64_t archive_write_set_format_xar(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  void (*v10)(uint64_t);
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  int v20;
  char *v21;

  result = sub_1DB6E0594((int *)a1, -1329217314, 1, "archive_write_set_format_xar", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    v10 = *(void (**)(uint64_t))(a1 + 328);
    if (v10)
      v10(a1);
    v11 = (char *)malloc_type_calloc(1uLL, 0x10318uLL, 0x10F00406A1018FBuLL);
    if (v11)
    {
      v17 = v11;
      v18 = v11 + 66296;
      *(_DWORD *)v11 = -1;
      *((_QWORD *)v11 + 8287) = 0;
      *((_QWORD *)v11 + 8288) = v11 + 66296;
      sub_1DB6E8388((_QWORD *)v11 + 8289, (uint64_t)off_1EA321A40);
      *((_OWORD *)v17 + 6) = 0u;
      *((_OWORD *)v17 + 7) = 0u;
      *((_OWORD *)v17 + 5) = 0u;
      v19 = sub_1DB6F89D0(a1, "");
      *((_QWORD *)v17 + 3) = v19;
      if (v19)
      {
        v19[11] = v19;
        v20 = *((_DWORD *)v17 + 4);
        *((_DWORD *)v17 + 4) = v20 + 1;
        *((_DWORD *)v19 + 6) = v20;
        v19[7] = 0;
        **((_QWORD **)v18 + 1) = v19;
        *((_QWORD *)v18 + 1) = v19 + 7;
        *((_QWORD *)v17 + 4) = *((_QWORD *)v17 + 3);
        *((_QWORD *)v17 + 6) = 0;
        *((_QWORD *)v17 + 7) = 0;
        *((_QWORD *)v17 + 5) = 0;
        sub_1DB6E3190((void **)v17 + 5, 1uLL);
        result = 0;
        **((_BYTE **)v17 + 5) = 0;
        *((_DWORD *)v17 + 36) = 1;
        *((_OWORD *)v17 + 8) = xmmword_1DB74C560;
        *(_QWORD *)(a1 + 304) = sub_1DB6F8CDC;
        *(_QWORD *)(a1 + 312) = sub_1DB6F9394;
        *(_QWORD *)(a1 + 288) = sub_1DB6F8A24;
        *(_QWORD *)(a1 + 296) = sub_1DB6F9700;
        *(_QWORD *)(a1 + 264) = v17;
        *(_QWORD *)(a1 + 272) = "xar";
        *(_QWORD *)(a1 + 320) = sub_1DB6F9790;
        *(_QWORD *)(a1 + 328) = sub_1DB6FA4CC;
        *(_DWORD *)(a1 + 16) = 655360;
        *(_QWORD *)(a1 + 24) = "xar";
        return result;
      }
      free(v17);
    }
    archive_set_error((_DWORD *)a1, 12, "Can't allocate xar data", v12, v13, v14, v15, v16, v21);
    return 4294967266;
  }
  return result;
}

_QWORD *sub_1DB6F89D0(uint64_t a1, char *a2)
{
  _QWORD *v3;
  _QWORD *v4;

  v3 = sub_1DB6FA5B4(a1, 0);
  v4 = v3;
  if (v3)
  {
    archive_entry_set_pathname(v3[4], a2);
    archive_entry_set_mode(v4[4], 16749);
    *((_BYTE *)v4 + 360) |= 3u;
  }
  return v4;
}

uint64_t sub_1DB6F8A24(uint64_t a1, char *__s1, char *a3)
{
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  char *__endptr;

  v6 = *(_DWORD **)(a1 + 264);
  if (!strcmp(__s1, "checksum"))
  {
    if (a3)
    {
      result = strcmp(a3, "none");
      if ((_DWORD)result)
      {
        result = strcmp(a3, "sha1");
        if ((_DWORD)result)
        {
          result = strcmp(a3, "md5");
          if ((_DWORD)result)
          {
LABEL_11:
            return 4294967271;
          }
          v25 = 2;
        }
        else
        {
          v25 = 1;
        }
        v6[33] = v25;
        return result;
      }
    }
    else
    {
      result = 0;
    }
    v6[33] = 0;
    return result;
  }
  if (strcmp(__s1, "compression"))
  {
    if (!strcmp(__s1, "compression-level"))
    {
      if (a3)
      {
        v23 = *a3 - 48;
        if (v23 <= 9 && !a3[1])
        {
          result = 0;
          v6[35] = v23;
          return result;
        }
      }
LABEL_36:
      return 4294967271;
    }
    if (strcmp(__s1, "toc-checksum"))
    {
      if (strcmp(__s1, "threads"))
        return 4294967276;
      __endptr = 0;
      if (!a3)
        return 4294967271;
      *__error() = 0;
      v6[36] = strtoul(a3, &__endptr, 10);
      if (!*__error() && !*__endptr)
      {
        if (!v6[36])
          v6[36] = 1;
        return 4294967276;
      }
      v6[36] = 1;
      goto LABEL_36;
    }
    if (a3)
    {
      result = strcmp(a3, "none");
      if ((_DWORD)result)
      {
        result = strcmp(a3, "sha1");
        if (!(_DWORD)result)
        {
          v24 = 1;
          goto LABEL_47;
        }
        result = strcmp(a3, "md5");
        if (!(_DWORD)result)
        {
          v24 = 2;
LABEL_47:
          v6[32] = v24;
          return result;
        }
        goto LABEL_11;
      }
    }
    else
    {
      result = 0;
    }
    v6[32] = 0;
    return result;
  }
  if (!a3)
  {
    result = 0;
    goto LABEL_31;
  }
  result = strcmp(a3, "none");
  if (!(_DWORD)result)
  {
LABEL_31:
    v6[34] = 0;
    return result;
  }
  result = strcmp(a3, "gzip");
  if ((_DWORD)result)
  {
    result = strcmp(a3, "bzip2");
    if ((_DWORD)result)
    {
      result = strcmp(a3, "lzma");
      if ((_DWORD)result)
      {
        result = strcmp(a3, "xz");
        if ((_DWORD)result)
        {
          return 4294967271;
        }
        v26 = 4;
      }
      else
      {
        v26 = 3;
      }
    }
    else
    {
      v26 = 2;
    }
  }
  else
  {
    v26 = 1;
  }
  v6[34] = v26;
  return result;
}

uint64_t sub_1DB6F8CDC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  char *v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int v35;
  _QWORD **v36;
  char *v37;
  _QWORD *v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  _DWORD *v52;
  int v53;
  int v54;
  int v55;
  uint64_t *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  unsigned int v65;
  off_t v66;
  int v67;
  char *v68;
  char *v69;
  unsigned int v70;
  uint64_t *v71;
  void **v72;
  uint64_t *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE v78[256];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  if (!*(_QWORD *)(v4 + 616))
  {
    v5 = sub_1DB72D08C(a1, "UTF-8", 1);
    *(_QWORD *)(v4 + 616) = v5;
    if (!v5)
      return 4294967266;
  }
  v6 = sub_1DB6FA5B4(a1, a2);
  if (!v6)
  {
    v15 = "Can't allocate data";
    v16 = (_DWORD *)a1;
    v17 = 12;
    goto LABEL_7;
  }
  v12 = (uint64_t)v6;
  v13 = sub_1DB6FA694(a1, (uint64_t)v6);
  if ((int)v13 < -20)
    return v13;
  v18 = *(_QWORD *)(v12 + 120);
  if (v18)
  {
    v71 = (uint64_t *)(v4 + 64);
    v20 = (uint64_t *)(v12 + 32);
    v19 = *(_QWORD *)(v12 + 32);
    v21 = *(char **)(v12 + 112);
  }
  else
  {
    if (!*(_QWORD *)(v12 + 144))
    {
      sub_1DB6FAAC4(v12);
      return v13;
    }
    v71 = (uint64_t *)(v4 + 64);
    v20 = (uint64_t *)(v12 + 32);
    v19 = *(_QWORD *)(v12 + 32);
    v21 = "";
  }
  v22 = *(_QWORD *)(a1 + 264);
  v23 = *(_QWORD **)(v22 + 24);
  if (*(_QWORD *)(v22 + 48) == v18 && !strcmp(*(const char **)(v22 + 40), v21))
  {
    v42 = *(_QWORD *)(v22 + 32);
    if (sub_1DB733364(v42 + 40, (_QWORD *)v12))
    {
      *(_QWORD *)(v12 + 64) = 0;
      **(_QWORD **)(v42 + 104) = v12;
      *(_QWORD *)(v42 + 104) = v12 + 64;
      *(_QWORD *)(v12 + 88) = v42;
      goto LABEL_62;
    }
    v44 = (uint64_t *)(*(_QWORD *)(v22 + 32) + 40);
    v43 = *(_QWORD *)(v12 + 136);
  }
  else
  {
    v73 = v20;
    v74 = v19;
    v29 = sub_1DB6FB2B8(v78, v21);
    v72 = (void **)(v22 + 40);
    v30 = v21;
    if (v29)
    {
      while ((v29 & 0x80000000) == 0)
      {
        v31 = sub_1DB73322C(v23 + 5, (uint64_t)v78);
        if (!v31)
          goto LABEL_26;
        v32 = v31;
        if (!*v30)
        {
          v20 = v73;
          v19 = v74;
          goto LABEL_60;
        }
        if ((*(_BYTE *)(v31 + 360) & 2) == 0)
        {
          v45 = (char *)archive_entry_pathname(*(uint64_t **)(v31 + 32));
          archive_entry_pathname(*(uint64_t **)(v12 + 32));
          goto LABEL_74;
        }
        v33 = &v30[v29];
        v35 = *v33;
        v34 = v33 + 1;
        if (v35 == 47)
          v30 = v34;
        else
          v30 += v29;
        v29 = sub_1DB6FB2B8(v78, v30);
        v23 = (_QWORD *)v32;
        if (!v29)
        {
          v23 = (_QWORD *)v32;
          goto LABEL_26;
        }
      }
      goto LABEL_56;
    }
LABEL_26:
    v70 = v13;
    if (*v30)
    {
      v36 = (_QWORD **)(v22 + 66304);
      while (1)
      {
        v75 = 0;
        v76 = 0;
        v77 = 0;
        sub_1DB6E323C((uint64_t *)&v75, v21, (size_t)&v30[v29 - (_QWORD)v21]);
        v37 = v75;
        if (v75[v76 - 1] == 47)
        {
          v75[v76 - 1] = 0;
          v37 = v75;
          --v76;
        }
        v38 = sub_1DB6F89D0(a1, v37);
        sub_1DB6E7C3C((uint64_t)&v75);
        if (!v38)
        {
          v51 = "Can't allocate memory";
          v52 = (_DWORD *)a1;
          v53 = 12;
          goto LABEL_57;
        }
        if ((int)sub_1DB6FA694(a1, (uint64_t)v38) < -24)
          return 4294967266;
        if (sub_1DB733364((unint64_t)(v23 + 5), v38))
        {
          v38[8] = 0;
          *(_QWORD *)v23[13] = v38;
          v23[13] = v38 + 8;
          v38[11] = v23;
        }
        v39 = *(_DWORD *)(v22 + 16);
        *(_DWORD *)(v22 + 16) = v39 + 1;
        *((_DWORD *)v38 + 6) = v39;
        v38[7] = 0;
        **v36 = v38;
        *v36 = v38 + 7;
        v30 += v30[v29] == 47 ? v29 + 1 : v29;
        v40 = sub_1DB6FB2B8(v78, v30);
        if ((v40 & 0x80000000) != 0)
          break;
        v29 = v40;
        v23 = v38;
        if (!*v30)
          goto LABEL_41;
      }
      sub_1DB6E7C3C((uint64_t)&v75);
LABEL_56:
      v51 = "A name buffer is too small";
      v52 = (_DWORD *)a1;
      v53 = -1;
LABEL_57:
      archive_set_error(v52, v53, v51, v24, v25, v26, v27, v28, v68);
      sub_1DB6FAAC4(v12);
      return 4294967266;
    }
    v38 = v23;
LABEL_41:
    *(_QWORD *)(v22 + 32) = v38;
    *(_QWORD *)(v22 + 48) = 0;
    sub_1DB6E3190(v72, v38[15] + v38[18] + 2);
    v41 = v38[15];
    if (v41 + v38[18])
    {
      v13 = v70;
      v20 = v73;
      v19 = v74;
      if (v41)
      {
        *(_QWORD *)(v22 + 48) = 0;
        sub_1DB6E4384((uint64_t *)v72, (uint64_t)(v38 + 14));
        sub_1DB72CE60((uint64_t *)v72, 47);
      }
      sub_1DB6E4384((uint64_t *)v72, (uint64_t)(v38 + 17));
    }
    else
    {
      *(_BYTE *)*v72 = 0;
      v13 = v70;
      v20 = v73;
      v19 = v74;
    }
    if (sub_1DB733364((unint64_t)(v38 + 5), (_QWORD *)v12))
    {
      *(_QWORD *)(v12 + 64) = 0;
      *(_QWORD *)v38[13] = v12;
      v38[13] = v12 + 64;
      *(_QWORD *)(v12 + 88) = v38;
      goto LABEL_62;
    }
    v43 = *(_QWORD *)(v12 + 136);
    v44 = v38 + 5;
  }
  v32 = sub_1DB73322C(v44, v43);
LABEL_60:
  v54 = archive_entry_filetype(*(_QWORD *)(v32 + 32));
  v55 = archive_entry_filetype(*v20);
  v56 = *(uint64_t **)(v32 + 32);
  if (v54 == v55)
  {
    *(_QWORD *)(v32 + 32) = *(_QWORD *)(v12 + 32);
    *(_QWORD *)(v12 + 32) = v56;
    *(_BYTE *)(v32 + 360) &= ~1u;
    sub_1DB6FAAC4(v12);
    v12 = v32;
LABEL_62:
    if (*(_QWORD *)(v12 + 32) != v19)
      return v13;
    if (!*(_DWORD *)(v12 + 24))
    {
      v57 = *(_DWORD *)(v4 + 16);
      *(_DWORD *)(v4 + 16) = v57 + 1;
      *(_DWORD *)(v12 + 24) = v57;
      *(_QWORD *)(v12 + 56) = 0;
      **(_QWORD **)(v4 + 66304) = v12;
      *(_QWORD *)(v4 + 66304) = v12 + 56;
    }
    if ((*(_BYTE *)(v12 + 360) & 1) != 0)
      return v13;
    if (*(_DWORD *)v4 != -1)
    {
LABEL_67:
      if (archive_entry_hardlink(*(_QWORD *)(v12 + 32)) || !sub_1DB6FAB24(a1, v12))
      {
        if (archive_entry_filetype(*(_QWORD *)(v12 + 32)) != 0x8000)
          return v13;
        *v71 = v12;
        if (archive_entry_nlink(*(_QWORD *)(v12 + 32)) >= 2)
        {
          result = sub_1DB6FAE74(a1, v12);
          if ((_DWORD)result)
            return result;
          if (archive_entry_hardlink(*(_QWORD *)(v12 + 32)))
          {
            archive_entry_unset_size(*(_QWORD *)(v12 + 32));
            return v13;
          }
        }
        *(_QWORD *)(v12 + 224) = *(_QWORD *)(v4 + 8);
        *(_QWORD *)(v12 + 240) = archive_entry_size(*(_QWORD *)(v12 + 32));
        *(_DWORD *)(v12 + 248) = *(_DWORD *)(v4 + 136);
        *(_QWORD *)(v4 + 72) = archive_entry_size(*(_QWORD *)(v12 + 32));
        v67 = *(_DWORD *)(v4 + 132);
        *(_DWORD *)(v4 + 148) = v67;
        if (v67 == 2)
        {
          sub_1DB7338F0((CC_MD5_CTX *)(v4 + 152));
        }
        else
        {
          if (v67 != 1)
          {
LABEL_93:
            *(_DWORD *)(v4 + 340) = v67;
            if (v67 == 2)
            {
              sub_1DB7338F0((CC_MD5_CTX *)(v4 + 344));
            }
            else if (v67 == 1)
            {
              sub_1DB73395C((CC_SHA1_CTX *)(v4 + 436));
            }
            LODWORD(result) = sub_1DB6FAF58(a1);
            if ((_DWORD)result)
              return result;
            else
              return v13;
          }
          sub_1DB73395C((CC_SHA1_CTX *)(v4 + 244));
        }
        v67 = *(_DWORD *)(v4 + 132);
        goto LABEL_93;
      }
      return 4294967266;
    }
    *(_QWORD *)(v4 + 8) = 0;
    v63 = sub_1DB730874(0);
    *(_DWORD *)v4 = v63;
    if (v63 < 0)
    {
      v17 = *__error();
      v15 = "Couldn't create temporary file";
    }
    else
    {
      v64 = *(_DWORD *)(v4 + 128);
      if (v64 == 1)
        v65 = 20;
      else
        v65 = 0;
      if (v64 == 2)
        v66 = 16;
      else
        v66 = v65;
      if (!(_DWORD)v66)
        goto LABEL_67;
      if ((lseek(v63, v66, 0) & 0x8000000000000000) == 0)
      {
        *(_QWORD *)(v4 + 8) = v66;
        goto LABEL_67;
      }
      v17 = *__error();
      v15 = "lseek failed";
    }
    v16 = (_DWORD *)a1;
LABEL_7:
    archive_set_error(v16, v17, v15, v7, v8, v9, v10, v11, v68);
    return 4294967266;
  }
  v69 = (char *)archive_entry_pathname(v56);
LABEL_74:
  sub_1DB6FAAC4(v12);
  return 4294967271;
}

uint64_t sub_1DB6F9394(uint64_t a1, _BYTE *a2, size_t a3)
{
  uint64_t v3;
  size_t v4;
  size_t v5;
  uint64_t v6;
  _BYTE *v7;
  size_t v10;
  _BOOL8 v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  size_t v32;

  v3 = *(_QWORD *)(a1 + 264);
  v4 = *(_QWORD *)(v3 + 72);
  if (v4 >= a3)
    v5 = a3;
  else
    v5 = *(_QWORD *)(v3 + 72);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v3 + 64);
  if (!v6)
    return 0;
  v7 = a2;
  if (!*(_DWORD *)(v6 + 248))
  {
    v16 = *(_DWORD *)(v3 + 340);
    if (v16 == 2)
    {
      sub_1DB733908((CC_MD5_CTX *)(v3 + 344), a2, v5);
    }
    else if (v16 == 1)
    {
      sub_1DB733974((CC_SHA1_CTX *)(v3 + 436), a2, v5);
    }
    v18 = *(_DWORD *)(v3 + 148);
    if (v18 == 2)
    {
      sub_1DB733908((CC_MD5_CTX *)(v3 + 152), v7, v5);
    }
    else if (v18 == 1)
    {
      sub_1DB733974((CC_SHA1_CTX *)(v3 + 244), v7, v5);
    }
    v15 = v5;
    goto LABEL_37;
  }
  v10 = 0;
  v32 = v5;
  *(_QWORD *)(v3 + 536) = a2;
  *(_QWORD *)(v3 + 544) = v5;
  v11 = v4 > a3;
  while (1)
  {
    if (*(_DWORD *)(v3 + 584))
    {
      v12 = (*(uint64_t (**)(uint64_t, uint64_t, _BOOL8))(v3 + 600))(a1, v3 + 536, v11);
      if (v12 > 1)
        return -30;
    }
    else
    {
      v12 = 0;
    }
    v13 = *(_QWORD *)(v3 + 568);
    if (v4 > a3)
    {
      if (v13)
        break;
    }
    v10 = 0x10000 - v13;
    v14 = *(_DWORD *)(v3 + 148);
    if (v14 == 2)
    {
      sub_1DB733908((CC_MD5_CTX *)(v3 + 152), (const void *)(v3 + 624), v10);
    }
    else if (v14 == 1)
    {
      sub_1DB733974((CC_SHA1_CTX *)(v3 + 244), (const void *)(v3 + 624), v10);
    }
    *(_QWORD *)(*(_QWORD *)(v3 + 64) + 232) += v10;
    if (sub_1DB6FB3B4(a1, (char *)(v3 + 624), v10))
      return -30;
    if (v12)
      break;
    *(_QWORD *)(v3 + 560) = v3 + 624;
    *(_QWORD *)(v3 + 568) = 0x10000;
  }
  v15 = v32 - *(_QWORD *)(v3 + 544);
  v17 = *(_DWORD *)(v3 + 340);
  if (v17 == 2)
  {
    v7 = a2;
    sub_1DB733908((CC_MD5_CTX *)(v3 + 344), a2, v32 - *(_QWORD *)(v3 + 544));
    goto LABEL_35;
  }
  if (v17 == 1)
  {
    v7 = a2;
    sub_1DB733974((CC_SHA1_CTX *)(v3 + 436), a2, v32 - *(_QWORD *)(v3 + 544));
LABEL_35:
    v5 = v10;
    goto LABEL_37;
  }
  v5 = v10;
  v7 = a2;
LABEL_37:
  v19 = *(_QWORD *)(v3 + 72);
  v20 = archive_entry_size(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 32));
  v21 = *(_QWORD *)(v3 + 64);
  if (v19 == v20)
  {
    *(_QWORD *)(v21 + 344) = 0;
    if (v15 >= 3 && *v7 == 35 && v7[1] == 33)
    {
      v22 = 2;
      if (v7[2] == 32)
        v22 = 3;
      v23 = v22 | 0x400;
      if (v15 - v22 <= 0x400)
        v23 = v15;
      if (v22 >= v23)
      {
        v25 = v22;
      }
      else
      {
        v24 = 1024;
        if (v15 - v22 < 0x400)
          v24 = v15 - v22;
        v25 = v22;
        while (1)
        {
          v26 = v7[v25];
          v27 = v26 > 0x20;
          v28 = (1 << v26) & 0x100002601;
          if (!v27 && v28 != 0)
            break;
          ++v25;
          if (!--v24)
          {
            v25 = v23;
            break;
          }
        }
      }
      sub_1DB6E323C((uint64_t *)(v21 + 336), &v7[v22], v25 - v22);
      v21 = *(_QWORD *)(v3 + 64);
    }
  }
  if (!*(_DWORD *)(v21 + 248))
  {
    if (sub_1DB6FB3B4(a1, v7, v5))
      return -30;
    *(_QWORD *)(*(_QWORD *)(v3 + 64) + 232) += v5;
  }
  *(_QWORD *)(v3 + 72) -= v15;
  return v15;
}

uint64_t sub_1DB6F9700(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  size_t v5;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 264);
  v2 = *(_QWORD *)(v1 + 64);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v1 + 72);
  if (v3)
  {
    while (1)
    {
      v5 = v3 >= *(_QWORD *)(a1 + 192) ? *(_QWORD *)(a1 + 192) : v3;
      result = sub_1DB6F9394(a1, *(_BYTE **)(a1 + 184), v5);
      if (result < 1)
        break;
      v3 = *(_QWORD *)(v1 + 72) - result;
      *(_QWORD *)(v1 + 72) = v3;
      if (!v3)
      {
        v2 = *(_QWORD *)(v1 + 64);
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    sub_1DB6FB334((unsigned int *)(v1 + 340), v2 + 296);
    sub_1DB6FB334((unsigned int *)(v1 + 148), v2 + 256);
    result = 0;
    *(_QWORD *)(v1 + 64) = 0;
  }
  return result;
}

uint64_t sub_1DB6F9790(uint64_t a1)
{
  uint64_t v1;
  size_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *i;
  uint64_t v8;
  xmlBuffer *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  xmlBuffer *v15;
  xmlTextWriter *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  xmlTextWriter *v22;
  char *started;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  time_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  const char *v36;
  const xmlChar *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  int v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t v59;
  const xmlChar *v60;
  const char *v61;
  int v62;
  int v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  time_t v108;
  time_t v109;
  time_t v110;
  char *v111;
  char *v112;
  uint64_t j;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  _DWORD *v117;
  int v118;
  int v119;
  size_t *v120;
  off_t v121;
  unint64_t v122;
  size_t v123;
  size_t v124;
  uint64_t v125;
  _QWORD *v126;
  off_t v127;
  uint64_t v128;
  _QWORD *v129;
  char *v131;
  int v132;
  unsigned int v133;
  unsigned int v134;
  uint64_t v135;
  size_t v136;
  int v137;
  char *v138;
  uint64_t v139;
  _OWORD *v140;
  uint64_t v141;
  uint64_t v142;
  const xmlChar *v143;
  int inlen;
  int outlen;
  uint64_t v146;
  const xmlChar *v147;
  const xmlChar *v148;
  uint64_t v149;
  uint64_t v150;

  v1 = *(_QWORD *)(a1 + 264);
  if (!*(_QWORD *)(*(_QWORD *)(v1 + 24) + 96))
    return 0;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = sub_1DB733688((unint64_t *)(v1 + 66312), 0, 0);
  if (v4)
  {
    v5 = v4;
    do
    {
      v6 = *(uint64_t **)(v5 + 32);
      archive_entry_set_nlink(v6[4], *(_DWORD *)(v5 + 24));
      if (*(int *)(v5 + 24) >= 2)
        v6[10] = (uint64_t)v6;
      for (i = (uint64_t *)v6[9]; i; i = (uint64_t *)i[9])
      {
        i[10] = (uint64_t)v6;
        archive_entry_set_nlink(i[4], *(_DWORD *)(v5 + 24));
      }
      v5 = sub_1DB733688((unint64_t *)(v1 + 66312), v5, 1u);
    }
    while (v5);
  }
  v8 = *(_QWORD *)(a1 + 264);
  v9 = xmlBufferCreate();
  if (!v9)
  {
    archive_set_error((_DWORD *)a1, 12, "xmlBufferCreate() couldn't create xml buffer", v10, v11, v12, v13, v14, v138);
    return 4294967266;
  }
  v15 = v9;
  v16 = xmlNewTextWriterMemory(v9, 0);
  if (!v16)
  {
    archive_set_error((_DWORD *)a1, -1, "xmlNewTextWriterMemory() couldn't create xml writer", v17, v18, v19, v20, v21, v138);
    xmlBufferFree(v15);
    return 4294967266;
  }
  v22 = v16;
  started = (char *)xmlTextWriterStartDocument(v16, "1.0", "UTF-8", 0);
  if ((started & 0x80000000) != 0)
    goto LABEL_121;
  v29 = (char *)xmlTextWriterSetIndent(v22, 4);
  if ((v29 & 0x80000000) != 0)
  {
    v138 = v29;
    v116 = "xmlTextWriterSetIndent() failed: %d";
    goto LABEL_124;
  }
  v30 = (char *)xmlTextWriterStartElement(v22, (const xmlChar *)"xar");
  if ((v30 & 0x80000000) != 0)
    goto LABEL_123;
  started = (char *)xmlTextWriterStartElement(v22, (const xmlChar *)"toc");
  if ((started & 0x80000000) != 0)
  {
LABEL_121:
    v138 = started;
    v116 = "xmlTextWriterStartDocument() failed: %d";
    goto LABEL_124;
  }
  v31 = time(0);
  if ((sub_1DB6FBA08((_DWORD *)a1, v22, (xmlChar *)"creation-time", v31, 0) & 0x80000000) != 0)
    goto LABEL_126;
  v32 = *(_DWORD *)(v8 + 128);
  if (v32 == 1)
    v33 = 20;
  else
    v33 = 0;
  if (v32 == 2)
    v34 = 16;
  else
    v34 = v33;
  if ((_DWORD)v34)
  {
    v30 = (char *)xmlTextWriterStartElement(v22, (const xmlChar *)"checksum");
    if ((v30 & 0x80000000) != 0)
    {
LABEL_123:
      v138 = v30;
      v116 = "xmlTextWriterStartElement() failed: %d";
      goto LABEL_124;
    }
    v35 = *(_DWORD *)(v8 + 128);
    v36 = "sha1";
    if (v35 != 1)
      v36 = 0;
    if (v35 == 2)
      v37 = (const xmlChar *)"md5";
    else
      v37 = (const xmlChar *)v36;
    v38 = (char *)xmlTextWriterWriteAttribute(v22, (const xmlChar *)"style", v37);
    if ((v38 & 0x80000000) != 0)
    {
LABEL_139:
      v138 = v38;
      v116 = "xmlTextWriterWriteAttribute() failed: %d";
      goto LABEL_124;
    }
    if ((sub_1DB6FBAE0((_DWORD *)a1, v22, (xmlChar *)"offset", (const xmlChar *)"0") & 0x80000000) != 0
      || (sub_1DB6FBB90(a1, v22, (xmlChar *)"size", "%d", v39, v40, v41, v42, (char *)v34) & 0x80000000) != 0)
    {
      goto LABEL_126;
    }
    v43 = (char *)xmlTextWriterEndElement(v22);
    if ((v43 & 0x80000000) != 0)
    {
LABEL_140:
      v138 = v43;
      v116 = "xmlTextWriterEndElement() failed: %d";
      goto LABEL_124;
    }
  }
  v140 = (_OWORD *)(v8 + 568);
  v44 = *(_QWORD *)(v8 + 24);
  v45 = *(_QWORD *)(v44 + 88);
  do
  {
    if (v44 == v45)
      goto LABEL_107;
    v46 = *(_QWORD *)(a1 + 264);
    inlen = *(_QWORD *)(v44 + 144);
    outlen = inlen;
    v47 = (unsigned __int8 *)malloc_type_malloc(inlen, 0x754B305DuLL);
    if (!v47)
    {
      v116 = "Can't allocate memory";
      goto LABEL_142;
    }
    v48 = v47;
    v148 = 0;
    v149 = 0;
    v150 = 0;
    v146 = 0;
    v147 = 0;
    v49 = UTF8Toisolat1(v47, &outlen, *(const unsigned __int8 **)(v44 + 136), &inlen);
    free(v48);
    if (v49 < 0)
    {
      v30 = (char *)xmlTextWriterStartElement(v22, (const xmlChar *)"name");
      if ((v30 & 0x80000000) != 0)
        goto LABEL_123;
      v38 = (char *)xmlTextWriterWriteAttribute(v22, (const xmlChar *)"enctype", (const xmlChar *)"base64");
      if ((v38 & 0x80000000) != 0)
        goto LABEL_139;
      v50 = (char *)xmlTextWriterWriteBase64(v22, *(const char **)(v44 + 136), 0, *(_DWORD *)(v44 + 144));
      if ((v50 & 0x80000000) != 0)
      {
        v138 = v50;
        v116 = "xmlTextWriterWriteBase64() failed: %d";
        goto LABEL_124;
      }
      v43 = (char *)xmlTextWriterEndElement(v22);
      if ((v43 & 0x80000000) != 0)
        goto LABEL_140;
    }
    else if ((sub_1DB6FBAE0((_DWORD *)a1, v22, (xmlChar *)"name", *(const xmlChar **)(v44 + 136)) & 0x80000000) != 0)
    {
      goto LABEL_126;
    }
    v148 = 0;
    v149 = 0;
    v150 = 0;
    HIDWORD(v58) = archive_entry_filetype(*(_QWORD *)(v44 + 32));
    LODWORD(v58) = HIDWORD(v58) - 4096;
    v57 = v58 >> 12;
    if (v57 < 0xC && ((0xA2Bu >> v57) & 1) != 0)
    {
      v60 = 0;
      v61 = (&off_1EA3225B0)[v57];
    }
    else
    {
      v59 = *(_QWORD *)(v44 + 80);
      if (v59)
      {
        if (v59 == v44)
        {
          v149 = 0;
          sub_1DB6E323C((uint64_t *)&v148, "original", 8uLL);
        }
        else
        {
          sub_1DB7303C0((void **)&v148, "%d", v51, v52, v53, v54, v55, v56, (char *)*(unsigned int *)(v59 + 24));
        }
        v61 = "hardlink";
        v60 = (const xmlChar *)"link";
      }
      else
      {
        v60 = 0;
        v61 = "file";
      }
    }
    v62 = sub_1DB6FBBF8((_DWORD *)a1, v22, (xmlChar *)"type", (const xmlChar *)v61, v60, v148);
    sub_1DB6E7C3C((uint64_t)&v148);
    if (v62 < 0)
      goto LABEL_126;
    if ((*(_BYTE *)(v44 + 360) & 1) != 0)
      goto LABEL_107;
    v63 = archive_entry_filetype(*(_QWORD *)(v44 + 32));
    if (v63 == 0x2000 || v63 == 24576)
    {
      v30 = (char *)xmlTextWriterStartElement(v22, (const xmlChar *)"device");
      if ((v30 & 0x80000000) != 0)
        goto LABEL_123;
      v64 = (char *)archive_entry_rdevmajor(*(_QWORD *)(v44 + 32));
      if ((sub_1DB6FBB90(a1, v22, (xmlChar *)"major", "%d", v65, v66, v67, v68, v64) & 0x80000000) != 0)
        goto LABEL_126;
      v69 = (char *)archive_entry_rdevminor(*(_DWORD **)(v44 + 32));
      if ((sub_1DB6FBB90(a1, v22, (xmlChar *)"minor", "%d", v70, v71, v72, v73, v69) & 0x80000000) != 0)
        goto LABEL_126;
      v43 = (char *)xmlTextWriterEndElement(v22);
      if ((v43 & 0x80000000) != 0)
        goto LABEL_140;
    }
    else if (v63 == 40960
           && (sub_1DB6FBBF8((_DWORD *)a1, v22, (xmlChar *)"link", *(const xmlChar **)(v44 + 160), (const xmlChar *)"type", (const xmlChar *)"broken") & 0x80000000) != 0)
    {
      goto LABEL_126;
    }
    v74 = (char *)archive_entry_ino64(*(_QWORD *)(v44 + 32));
    if ((sub_1DB6FBB90(a1, v22, (xmlChar *)"inode", "%jd", v75, v76, v77, v78, v74) & 0x80000000) != 0)
      goto LABEL_126;
    if (archive_entry_dev(*(_DWORD **)(v44 + 32)))
    {
      v79 = (char *)archive_entry_dev(*(_DWORD **)(v44 + 32));
      if ((sub_1DB6FBB90(a1, v22, (xmlChar *)"deviceno", "%d", v80, v81, v82, v83, v79) & 0x80000000) != 0)
        goto LABEL_126;
    }
    v84 = archive_entry_mode(*(_QWORD *)(v44 + 32));
    LOBYTE(v143) = 48;
    BYTE1(v143) = (v84 >> 6) & 7 | 0x30;
    BYTE2(v143) = (v84 >> 3) & 7 | 0x30;
    *(_WORD *)((char *)&v143 + 3) = v84 & 7 | 0x30;
    if ((sub_1DB6FBAE0((_DWORD *)a1, v22, (xmlChar *)"mode", (const xmlChar *)&v143) & 0x80000000) != 0)
      goto LABEL_126;
    v85 = (char *)archive_entry_uid(*(_QWORD *)(v44 + 32));
    if ((sub_1DB6FBB90(a1, v22, (xmlChar *)"uid", "%d", v86, v87, v88, v89, v85) & 0x80000000) != 0)
      goto LABEL_126;
    if (sub_1DB6E9388(*(uint64_t **)(v44 + 32), &v147, &v146, *(_QWORD *)(v46 + 616)))
    {
      if (*__error() != 12)
      {
        v90 = (char *)archive_entry_uname(*(uint64_t **)(v44 + 32));
        archive_set_error((_DWORD *)a1, 79, "Can't translate uname '%s' to UTF-8", v91, v92, v93, v94, v95, v90);
        v96 = -20;
        goto LABEL_73;
      }
      v116 = "Can't allocate memory for Uname";
LABEL_142:
      v117 = (_DWORD *)a1;
      v118 = 12;
      goto LABEL_125;
    }
    v96 = 0;
LABEL_73:
    if (v146 && (sub_1DB6FBAE0((_DWORD *)a1, v22, (xmlChar *)"user", v147) & 0x80000000) != 0)
      goto LABEL_126;
    v97 = (char *)archive_entry_gid(*(_QWORD *)(v44 + 32));
    if ((sub_1DB6FBB90(a1, v22, (xmlChar *)"gid", "%d", v98, v99, v100, v101, v97) & 0x80000000) != 0)
      goto LABEL_126;
    if (!sub_1DB6E8EE0(*(uint64_t **)(v44 + 32), &v147, &v146, *(_QWORD *)(v46 + 616)))
      goto LABEL_79;
    if (*__error() == 12)
    {
      v116 = "Can't allocate memory for Gname";
      goto LABEL_142;
    }
    v102 = (char *)archive_entry_gname(*(uint64_t **)(v44 + 32));
    archive_set_error((_DWORD *)a1, 79, "Can't translate gname '%s' to UTF-8", v103, v104, v105, v106, v107, v102);
    v96 = -20;
LABEL_79:
    if (v146 && (sub_1DB6FBAE0((_DWORD *)a1, v22, (xmlChar *)"group", v147) & 0x80000000) != 0)
      goto LABEL_126;
    if (archive_entry_ctime_is_set(*(_QWORD *)(v44 + 32)))
    {
      v108 = archive_entry_ctime(*(_QWORD *)(v44 + 32));
      if ((sub_1DB6FBA08((_DWORD *)a1, v22, (xmlChar *)"ctime", v108, 1) & 0x80000000) != 0)
        goto LABEL_126;
    }
    if (archive_entry_mtime_is_set(*(_QWORD *)(v44 + 32)))
    {
      v109 = archive_entry_mtime(*(_QWORD *)(v44 + 32));
      if ((sub_1DB6FBA08((_DWORD *)a1, v22, (xmlChar *)"mtime", v109, 1) & 0x80000000) != 0)
        goto LABEL_126;
    }
    if (archive_entry_atime_is_set(*(_QWORD *)(v44 + 32)))
    {
      v110 = archive_entry_atime(*(_QWORD *)(v44 + 32));
      if ((sub_1DB6FBA08((_DWORD *)a1, v22, (xmlChar *)"atime", v110, 1) & 0x80000000) != 0)
        goto LABEL_126;
    }
    v111 = archive_entry_fflags_text(*(uint64_t **)(v44 + 32));
    if (v111)
    {
      v112 = v111;
      if ((sub_1DB6FBCDC((_DWORD *)a1, v22, "flags", v111) & 0x80000000) != 0
        || (sub_1DB6FBCDC((_DWORD *)a1, v22, "ext2", v112) & 0x80000000) != 0)
      {
        goto LABEL_126;
      }
    }
    archive_entry_xattr_reset(*(_QWORD *)(v44 + 32));
    for (j = *(_QWORD *)(v44 + 192); j; j = *(_QWORD *)(j + 8))
    {
      v142 = 0;
      v143 = 0;
      v141 = 0;
      archive_entry_xattr_next(*(_QWORD *)(v44 + 32), &v143, &v142, &v141);
      v30 = (char *)xmlTextWriterStartElement(v22, (const xmlChar *)"ea");
      if ((v30 & 0x80000000) != 0)
        goto LABEL_123;
      v38 = (char *)xmlTextWriterWriteFormatAttribute(v22, (const xmlChar *)"id", "%d", *(_DWORD *)j);
      if ((v38 & 0x80000000) != 0)
        goto LABEL_139;
      if ((sub_1DB6FBE38((_DWORD *)a1, v22, j, v24, v25, v26, v27, v28) & 0x80000000) != 0
        || (sub_1DB6FBAE0((_DWORD *)a1, v22, (xmlChar *)"name", v143) & 0x80000000) != 0)
      {
        goto LABEL_126;
      }
      v43 = (char *)xmlTextWriterEndElement(v22);
      if ((v43 & 0x80000000) != 0)
        goto LABEL_140;
    }
    if (*(_QWORD *)(v44 + 232))
    {
      v30 = (char *)xmlTextWriterStartElement(v22, (const xmlChar *)"data");
      if ((v30 & 0x80000000) != 0)
        goto LABEL_123;
      if ((sub_1DB6FBE38((_DWORD *)a1, v22, v44 + 208, v24, v25, v26, v27, v28) & 0x80000000) != 0)
        goto LABEL_126;
      v43 = (char *)xmlTextWriterEndElement(v22);
      if ((v43 & 0x80000000) != 0)
        goto LABEL_140;
    }
    if (*(_QWORD *)(v44 + 344))
    {
      v30 = (char *)xmlTextWriterStartElement(v22, (const xmlChar *)"content");
      if ((v30 & 0x80000000) != 0)
        goto LABEL_123;
      if ((sub_1DB6FBAE0((_DWORD *)a1, v22, (xmlChar *)"interpreter", *(const xmlChar **)(v44 + 336)) & 0x80000000) != 0
        || (sub_1DB6FBAE0((_DWORD *)a1, v22, (xmlChar *)"type", (const xmlChar *)"script") & 0x80000000) != 0)
      {
        goto LABEL_126;
      }
      v43 = (char *)xmlTextWriterEndElement(v22);
      if ((v43 & 0x80000000) != 0)
        goto LABEL_140;
    }
    if (v96)
      goto LABEL_126;
LABEL_107:
    if ((*(_BYTE *)(v44 + 360) & 2) != 0 && (v114 = *(_QWORD *)(v44 + 96)) != 0)
    {
LABEL_109:
      v30 = (char *)xmlTextWriterStartElement(v22, (const xmlChar *)"file");
      if ((v30 & 0x80000000) != 0)
        goto LABEL_123;
      v38 = (char *)xmlTextWriterWriteFormatAttribute(v22, (const xmlChar *)"id", "%d", *(_DWORD *)(v114 + 24));
      v44 = v114;
      if ((v38 & 0x80000000) != 0)
        goto LABEL_139;
    }
    else
    {
      while (v44 != *(_QWORD *)(v44 + 88))
      {
        v43 = (char *)xmlTextWriterEndElement(v22);
        if ((v43 & 0x80000000) != 0)
          goto LABEL_140;
        v114 = *(_QWORD *)(v44 + 64);
        if (v114)
          goto LABEL_109;
        v44 = *(_QWORD *)(v44 + 88);
      }
    }
    v45 = *(_QWORD *)(v44 + 88);
  }
  while (v44 != v45);
  v131 = (char *)xmlTextWriterEndDocument(v22);
  if ((v131 & 0x80000000) == 0)
  {
    v132 = *(_DWORD *)(v8 + 128);
    *(_DWORD *)(v8 + 148) = v132;
    *(_QWORD *)(v8 + 66184) = *(_QWORD *)(v8 + 8);
    *(_QWORD *)(v8 + 66200) = v15->use;
    if (v132 == 2)
    {
      sub_1DB7338F0((CC_MD5_CTX *)(v8 + 152));
    }
    else if (v132 == 1)
    {
      sub_1DB73395C((CC_SHA1_CTX *)(v8 + 244));
    }
    v139 = v8 + 536;
    if (!sub_1DB6FB440((_DWORD *)a1, v8 + 536, 6))
    {
      *(_QWORD *)(v8 + 536) = v15->content;
      *(_QWORD *)(v8 + 544) = v15->use;
      *(_QWORD *)(v8 + 552) = 0;
      *(_QWORD *)(v8 + 560) = v8 + 624;
      *v140 = xmmword_1DB74C250;
      while (1)
      {
        if (*(_DWORD *)(v8 + 584))
        {
          v133 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v8 + 600))(a1, v139, 0);
          if (v133 > 1)
            goto LABEL_126;
          v134 = v133;
          v135 = *(_QWORD *)v140;
        }
        else
        {
          v134 = 0;
          v135 = 0x10000;
        }
        v136 = 0x10000 - v135;
        v137 = *(_DWORD *)(v8 + 148);
        if (v137 == 2)
        {
          sub_1DB733908((CC_MD5_CTX *)(v8 + 152), (const void *)(v8 + 624), v136);
        }
        else if (v137 == 1)
        {
          sub_1DB733974((CC_SHA1_CTX *)(v8 + 244), (const void *)(v8 + 624), v136);
        }
        if (sub_1DB6FB3B4(a1, (char *)(v8 + 624), v136))
          break;
        if (v134)
        {
          if (!*(_DWORD *)(v8 + 584) || !(*(unsigned int (**)(uint64_t, uint64_t))(v8 + 608))(a1, v139))
          {
            *(_QWORD *)(v8 + 66192) = *(_QWORD *)(v8 + 576);
            v119 = 1;
            *(_DWORD *)(v8 + 66208) = 1;
            sub_1DB6FB334((unsigned int *)(v8 + 148), v8 + 66216);
            v115 = 0;
            goto LABEL_127;
          }
          goto LABEL_126;
        }
        *(_QWORD *)(v8 + 560) = v8 + 624;
        *(_QWORD *)(v8 + 568) = 0x10000;
      }
    }
    goto LABEL_126;
  }
  v138 = v131;
  v116 = "xmlTextWriterEndDocument() failed: %d";
LABEL_124:
  v117 = (_DWORD *)a1;
  v118 = -1;
LABEL_125:
  archive_set_error(v117, v118, v116, v24, v25, v26, v27, v28, v138);
LABEL_126:
  v119 = 0;
  v115 = 4294967266;
LABEL_127:
  xmlFreeTextWriter(v22);
  xmlBufferFree(v15);
  if (v119)
  {
    v120 = (size_t *)(v1 + 66160);
    v121 = *(_QWORD *)(v1 + 66184);
    v122 = *(_QWORD *)(v1 + 66192);
    *(_QWORD *)(v1 + 632) = bswap64(v122);
    *(_QWORD *)(v1 + 640) = bswap64(*(_QWORD *)(v1 + 66200));
    *(_DWORD *)(v1 + 648) = bswap32(*(_DWORD *)(v1 + 66216));
    *(_QWORD *)(v1 + 66160) = 65508;
    *(_QWORD *)(v1 + 624) = 0x1001C0021726178;
    v115 = sub_1DB6FB8E0(a1, v121, v122);
    if (!(_DWORD)v115)
    {
      v123 = *(_QWORD *)(v1 + 66224);
      if (!v123)
      {
        v127 = 0;
        goto LABEL_135;
      }
      v124 = *v120;
      if (*v120 >= v123)
        goto LABEL_133;
      v125 = *(_QWORD *)(a1 + 264);
      v126 = (_QWORD *)(v125 + 66160);
      v115 = sub_1DB7322A8(a1, v125 + 624, 0x10000 - *(_QWORD *)(v125 + 66160));
      if (!(_DWORD)v115)
      {
        *v126 = 0x10000;
        v124 = *v120;
        v123 = *(_QWORD *)(v1 + 66224);
LABEL_133:
        memcpy((void *)(v1 + 624 - v124 + 0x10000), (const void *)(v1 + 66232), v123);
        v127 = *(_QWORD *)(v1 + 66224);
        *v120 -= v127;
LABEL_135:
        v115 = sub_1DB6FB8E0(a1, v127, v3);
        if (!(_DWORD)v115)
        {
          v128 = *(_QWORD *)(a1 + 264);
          v129 = (_QWORD *)(v128 + 66160);
          v115 = sub_1DB7322A8(a1, v128 + 624, 0x10000 - *(_QWORD *)(v128 + 66160));
          if (!(_DWORD)v115)
            *v129 = 0x10000;
        }
      }
    }
  }
  return v115;
}

uint64_t sub_1DB6FA4CC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 264);
  if ((*(_DWORD *)v2 & 0x80000000) == 0)
    close(*(_DWORD *)v2);
  sub_1DB6E7C3C(v2 + 40);
  sub_1DB6E7C3C(v2 + 80);
  sub_1DB6E7C3C(v2 + 104);
  v3 = sub_1DB733688((unint64_t *)(v2 + 66312), 0, 0);
  if (v3)
  {
    v4 = (_QWORD *)v3;
    do
    {
      v5 = sub_1DB733688((unint64_t *)(v2 + 66312), (unint64_t)v4, 1u);
      sub_1DB7334FC(v2 + 66312, v4);
      free(v4);
      v4 = (_QWORD *)v5;
    }
    while (v5);
  }
  v6 = *(_QWORD *)(v2 + 66296);
  if (v6)
  {
    do
    {
      v7 = *(_QWORD *)(v6 + 56);
      sub_1DB6FAAC4(v6);
      v6 = v7;
    }
    while (v7);
  }
  if (*(_DWORD *)(v2 + 584))
    (*(void (**)(uint64_t, uint64_t))(v2 + 608))(a1, v2 + 536);
  free((void *)v2);
  return 0;
}

_QWORD *sub_1DB6FA5B4(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = malloc_type_calloc(1uLL, 0x170uLL, 0x10F0040A750FA63uLL);
  if (v4)
  {
    if (a2)
      v5 = archive_entry_clone(a2);
    else
      v5 = (uint64_t)archive_entry_new2(a1);
    v4[4] = v5;
    if (v5)
    {
      sub_1DB6E8388(v4 + 5, (uint64_t)off_1EA321A50);
      v4[12] = 0;
      v4[13] = v4 + 12;
      v4[24] = 0;
      v4[25] = v4 + 24;
      *((_OWORD *)v4 + 7) = 0u;
      *((_OWORD *)v4 + 8) = 0u;
      *((_OWORD *)v4 + 9) = 0u;
      *((_OWORD *)v4 + 10) = 0u;
      v4[22] = 0;
      v4[43] = 0;
      v4[44] = 0;
      v4[42] = 0;
      if (a2 && archive_entry_filetype((uint64_t)a2) == 0x4000)
        *((_BYTE *)v4 + 360) |= 2u;
    }
    else
    {
      free(v4);
      return 0;
    }
  }
  return v4;
}

uint64_t sub_1DB6FA694(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *i;
  int v21;
  int v22;
  size_t v23;
  size_t v24;
  size_t v25;
  BOOL v26;
  char *j;
  const char *v28;
  int v29;
  size_t v30;
  char *v31;
  const void *v32;
  int v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  char *v44;
  size_t v45;
  char *v47;
  size_t v48;
  size_t v49;
  _BYTE *v50;

  v2 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  if (*(_QWORD *)(a2 + 88) == a2)
    return 0;
  v49 = 0;
  v50 = 0;
  if (sub_1DB6E9040(*(uint64_t **)(a2 + 32), &v50, &v49, *(_QWORD *)(v2 + 616)))
  {
    if (*__error() == 12)
    {
      v10 = "Can't allocate memory for Pathname";
LABEL_58:
      archive_set_error((_DWORD *)a1, 12, v10, v5, v6, v7, v8, v9, v47);
      return 4294967266;
    }
    v12 = (char *)archive_entry_pathname(*(uint64_t **)(a2 + 32));
    archive_set_error((_DWORD *)a1, 79, "Can't translate pathname '%s' to UTF-8", v13, v14, v15, v16, v17, v12);
    v11 = 4294967276;
  }
  else
  {
    v11 = 0;
  }
  *(_QWORD *)(a2 + 120) = 0;
  sub_1DB6E323C((uint64_t *)(a2 + 112), v50, v49);
  v19 = *(unsigned __int8 **)(a2 + 112);
  v18 = *(_QWORD *)(a2 + 120);
  v49 = v18;
  for (i = v19; ; i += 3)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v21 = *i;
          if (v21 == 46)
            break;
          if (v21 != 47)
            goto LABEL_20;
          ++i;
          v49 = --v18;
        }
        v22 = i[1];
        if (i[1])
          break;
        v49 = --v18;
        ++i;
      }
      if (v22 != 47)
      {
        if (v22 != 46)
          goto LABEL_20;
        if (i[2])
          break;
      }
      i += 2;
      v18 -= 2;
      v49 = v18;
    }
    if (i[2] != 47)
      break;
    v18 -= 3;
    v49 = v18;
  }
LABEL_20:
  if (i != v19)
  {
    memmove(v19, i, v18 + 1);
    v18 = v49;
  }
  do
  {
    if (!v18)
      break;
    v23 = v18;
    if (v19[v18 - 1] == 47)
    {
      v19[v18 - 1] = 0;
      v23 = --v49;
    }
    v24 = v23 - 2;
    if (v23 >= 2)
    {
      if (v19[v24] == 47 && v19[v23 - 1] == 46)
      {
        v19[v24] = 0;
        v23 = v49 - 2;
        v49 -= 2;
      }
      v25 = v23 - 3;
      if (v23 >= 3 && v19[v25] == 47 && v19[v23 - 2] == 46 && v19[v23 - 1] == 46)
      {
        v19[v25] = 0;
        v23 = v49 - 3;
        v49 -= 3;
      }
    }
    v26 = v18 == v23;
    v18 = v23;
  }
  while (!v26);
LABEL_36:
  for (j = (char *)v19; ; ++j)
  {
    while (1)
    {
      v28 = j;
      if (*j != 47)
        break;
      ++j;
      v29 = *((unsigned __int8 *)v28 + 1);
      if (v29 == 46)
      {
        v33 = *((unsigned __int8 *)v28 + 2);
        if (v33 == 46)
        {
          if (v28[3] == 47)
          {
            v34 = (char *)(v28 - 1);
            do
            {
              j = v34;
              if (v34 < (char *)v19)
                break;
              --v34;
            }
            while (*j != 47);
            if (j <= (char *)v19)
            {
              strcpy((char *)v19, v28 + 4);
              goto LABEL_36;
            }
            strcpy(j, v28 + 3);
          }
        }
        else if (v33 == 47)
        {
          v30 = strlen(v28 + 2) + 1;
          v31 = (char *)v28;
          v32 = v28 + 2;
LABEL_46:
          memmove(v31, v32, v30);
          j = (char *)v28;
        }
      }
      else if (v29 == 47)
      {
        v30 = strlen(v28 + 1) + 1;
        v31 = (char *)v28;
        v32 = v28 + 1;
        goto LABEL_46;
      }
    }
    if (!*j)
      break;
  }
  v49 = strlen((const char *)v19);
  if (archive_entry_filetype(*(_QWORD *)(a2 + 32)) == 40960)
  {
    v48 = 0;
    if (sub_1DB6E922C(*(_QWORD *)(a2 + 32), &v50, &v48, *(_QWORD *)(v2 + 616)))
    {
      if (*__error() == 12)
      {
        v10 = "Can't allocate memory for Linkname";
        goto LABEL_58;
      }
      v35 = (char *)archive_entry_symlink(*(_QWORD *)(a2 + 32));
      archive_set_error((_DWORD *)a1, 79, "Can't translate symlink '%s' to UTF-8", v36, v37, v38, v39, v40, v35);
      v11 = 4294967276;
    }
    *(_QWORD *)(a2 + 168) = 0;
    sub_1DB6E323C((uint64_t *)(a2 + 160), v50, v48);
  }
  v41 = 0;
  v42 = v19;
  while (2)
  {
    if (*v42 == 47)
    {
      v41 = v42;
      goto LABEL_66;
    }
    if (*v42)
    {
LABEL_66:
      ++v42;
      continue;
    }
    break;
  }
  if (v41)
  {
    v43 = v41 - v19;
    *v41 = 0;
    v44 = (char *)(v41 + 1);
    *(_QWORD *)(a2 + 120) = v43;
    *(_QWORD *)(a2 + 144) = 0;
    v45 = strlen(v44);
    sub_1DB6E323C((uint64_t *)(a2 + 136), v44, v45);
  }
  else
  {
    *(_QWORD *)(a2 + 120) = v49;
    *(_QWORD *)(a2 + 144) = 0;
    sub_1DB6E4384((uint64_t *)(a2 + 136), a2 + 112);
    *(_QWORD *)(a2 + 120) = 0;
    **(_BYTE **)(a2 + 112) = 0;
  }
  return v11;
}

void sub_1DB6FAAC4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)(a1 + 192);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)v2[1];
      free(v2);
      v2 = v3;
    }
    while (v3);
  }
  sub_1DB6E7C3C(a1 + 112);
  sub_1DB6E7C3C(a1 + 136);
  sub_1DB6E7C3C(a1 + 160);
  sub_1DB6E7C3C(a1 + 336);
  archive_entry_free(*(void ***)(a1 + 32));
  free((void *)a1);
}

uint64_t sub_1DB6FAB24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  char *v17;
  CC_LONG v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unsigned int *v23;
  CC_MD5_CTX *v24;
  CC_SHA1_CTX *v25;
  unsigned int *v26;
  CC_MD5_CTX *v27;
  CC_SHA1_CTX *v28;
  size_t __nbyte;
  char *v30;
  uint64_t v31;

  v4 = *(_QWORD *)(a1 + 264);
  result = archive_entry_xattr_reset(*(_QWORD *)(a2 + 32));
  if (!(_DWORD)result)
    return result;
  v6 = result;
  v30 = 0;
  v31 = 0;
  __nbyte = 0;
  v7 = (unsigned int *)(v4 + 148);
  v27 = (CC_MD5_CTX *)(v4 + 152);
  v28 = (CC_SHA1_CTX *)(v4 + 244);
  v24 = (CC_MD5_CTX *)(v4 + 344);
  v25 = (CC_SHA1_CTX *)(v4 + 436);
  v26 = (unsigned int *)(v4 + 340);
  v23 = (unsigned int *)(v4 + 148);
  while (1)
  {
    archive_entry_xattr_next(*(_QWORD *)(a2 + 32), &v31, &v30, &__nbyte);
    v8 = *(_DWORD *)(v4 + 132);
    *(_DWORD *)(v4 + 148) = v8;
    if (v8 == 2)
    {
      sub_1DB7338F0(v27);
    }
    else
    {
      if (v8 != 1)
        goto LABEL_8;
      sub_1DB73395C(v28);
    }
    v8 = *(_DWORD *)(v4 + 132);
LABEL_8:
    *v26 = v8;
    if (v8 == 2)
    {
      sub_1DB7338F0(v24);
    }
    else if (v8 == 1)
    {
      sub_1DB73395C(v25);
    }
    v9 = malloc_type_calloc(1uLL, 0x80uLL, 0x1020040EB626CC2uLL);
    if (!v9)
      break;
    v15 = v9;
    v16 = *(_DWORD *)(a2 + 184);
    *(_DWORD *)(a2 + 184) = v16 + 1;
    *(_DWORD *)v9 = v16;
    v9[2] = *(_QWORD *)(v4 + 8);
    v18 = __nbyte;
    v17 = v30;
    v9[4] = __nbyte;
    *((_DWORD *)v9 + 10) = *(_DWORD *)(v4 + 136);
    v19 = *(_DWORD *)(v4 + 340);
    if (v19 == 2)
    {
      sub_1DB733908(v24, v17, v18);
    }
    else if (v19 == 1)
    {
      sub_1DB733974(v25, v17, v18);
    }
    sub_1DB6FB334(v26, (uint64_t)(v15 + 11));
    if (*((_DWORD *)v15 + 10))
    {
      if (!sub_1DB6FAF58(a1))
      {
        *(_QWORD *)(v4 + 536) = v30;
        *(_QWORD *)(v4 + 544) = __nbyte;
        while (1)
        {
          if (*(_DWORD *)(v4 + 584))
          {
            v20 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v4 + 600))(a1, v4 + 536, 0);
            if (v20 >= 2)
              break;
          }
          else
          {
            v20 = 0;
          }
          v21 = 0x10000 - *(_QWORD *)(v4 + 568);
          __nbyte = v21;
          v22 = *(_DWORD *)(v4 + 148);
          if (v22 == 2)
          {
            sub_1DB733908(v27, (const void *)(v4 + 624), v21);
          }
          else if (v22 == 1)
          {
            sub_1DB733974(v28, (const void *)(v4 + 624), v21);
          }
          if (sub_1DB6FB3B4(a1, (char *)(v4 + 624), __nbyte))
            break;
          if (v20)
          {
            v7 = (unsigned int *)(v4 + 148);
            sub_1DB6FB334(v23, (uint64_t)(v15 + 6));
            v15[3] = *(_QWORD *)(v4 + 576);
            v15[1] = 0;
            **(_QWORD **)(a2 + 200) = v15;
            *(_QWORD *)(a2 + 200) = v15 + 1;
            if (!*(_DWORD *)(v4 + 584) || !(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 608))(a1, v4 + 536))
              goto LABEL_40;
            return 4294967266;
          }
          *(_QWORD *)(v4 + 560) = v4 + 624;
          *(_QWORD *)(v4 + 568) = 0x10000;
        }
      }
LABEL_42:
      free(v15);
      return 4294967266;
    }
    if (*v7 == 2)
    {
      sub_1DB733908(v27, v30, __nbyte);
    }
    else if (*v7 == 1)
    {
      sub_1DB733974(v28, v30, __nbyte);
    }
    sub_1DB6FB334(v7, (uint64_t)(v15 + 6));
    if (sub_1DB6FB3B4(a1, v30, __nbyte))
      goto LABEL_42;
    v15[3] = __nbyte;
    v15[1] = 0;
    **(_QWORD **)(a2 + 200) = v15;
    *(_QWORD *)(a2 + 200) = v15 + 1;
LABEL_40:
    if (!--v6)
      return 0;
  }
  archive_set_error((_DWORD *)a1, 12, "Can't allocate memory for xattr", v10, v11, v12, v13, v14, (char *)v23);
  return 4294967266;
}

uint64_t sub_1DB6FAE74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v14;

  v4 = *(_QWORD *)(a1 + 264);
  archive_entry_set_nlink(*(_QWORD *)(a2 + 32), 1);
  v5 = archive_entry_hardlink(*(_QWORD *)(a2 + 32));
  if (v5)
  {
    v6 = sub_1DB73322C((uint64_t *)(v4 + 66312), v5);
    if (v6)
    {
      *(_QWORD *)(a2 + 72) = 0;
      **(_QWORD **)(v6 + 40) = a2;
      *(_QWORD *)(v6 + 40) = a2 + 72;
      ++*(_DWORD *)(v6 + 24);
    }
    archive_entry_unset_size(*(_QWORD *)(a2 + 32));
    return 0;
  }
  v7 = malloc_type_malloc(0x30uLL, 0x10A004051F4DB44uLL);
  if (v7)
  {
    v7[6] = 1;
    *(_QWORD *)(a2 + 72) = 0;
    *((_QWORD *)v7 + 4) = a2;
    *((_QWORD *)v7 + 5) = a2 + 72;
    sub_1DB733364(v4 + 66312, v7);
    return 0;
  }
  archive_set_error((_DWORD *)a1, 12, "Can't allocate memory", v8, v9, v10, v11, v12, v14);
  return 4294967266;
}

uint64_t sub_1DB6FAF58(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  _OWORD *v22;
  char *v23;
  _DWORD *v24;
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v1 = *(_QWORD *)(a1 + 264);
  switch(*(_DWORD *)(v1 + 136))
  {
    case 1:
      result = sub_1DB6FB440((_DWORD *)a1, v1 + 536, *(_DWORD *)(v1 + 140));
      goto LABEL_32;
    case 2:
      v4 = *(_DWORD *)(v1 + 140);
      if (*(_DWORD *)(v1 + 584))
        (*(void (**)(uint64_t, uint64_t))(v1 + 608))(a1, v1 + 536);
      v5 = (char *)malloc_type_calloc(1uLL, 0x50uLL, 0x10900403A81BCDDuLL);
      if (!v5)
      {
        v12 = "Can't allocate memory for bzip2 stream";
        v13 = (_DWORD *)a1;
        v14 = 12;
        goto LABEL_22;
      }
      v11 = v5;
      *(_QWORD *)v5 = *(_QWORD *)(v1 + 536);
      *((_DWORD *)v5 + 2) = *(_QWORD *)(v1 + 544);
      *(_QWORD *)(v5 + 12) = *(_QWORD *)(v1 + 552);
      *((_QWORD *)v5 + 3) = *(_QWORD *)(v1 + 560);
      *((_DWORD *)v5 + 8) = *(_QWORD *)(v1 + 568);
      *(_QWORD *)(v5 + 36) = *(_QWORD *)(v1 + 576);
      if (BZ2_bzCompressInit((bz_stream *)v5, v4, 0, 30))
      {
        free(v11);
        *(_QWORD *)(v1 + 592) = 0;
        v12 = "Internal error initializing compression library";
        v13 = (_DWORD *)a1;
        v14 = -1;
LABEL_22:
        archive_set_error(v13, v14, v12, v6, v7, v8, v9, v10, (char *)v26);
        return 4294967266;
      }
      *(_QWORD *)(v1 + 592) = v11;
      *(_DWORD *)(v1 + 584) = 1;
      *(_QWORD *)(v1 + 600) = sub_1DB6FB670;
      *(_QWORD *)(v1 + 608) = sub_1DB6FB74C;
      goto LABEL_33;
    case 3:
      if (*(_DWORD *)(v1 + 584))
        (*(void (**)(uint64_t, uint64_t))(v1 + 608))(a1, v1 + 536);
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v26 = 0u;
      if (lzma_lzma_preset())
        goto LABEL_20;
      v20 = malloc_type_calloc(1uLL, 0x88uLL, 0x10F00405178BF3FuLL);
      if (!v20)
      {
        v23 = "Can't allocate memory for lzma stream";
        goto LABEL_30;
      }
      v21 = v20;
      *((_QWORD *)v20 + 16) = 0;
      v20[6] = 0u;
      v20[7] = 0u;
      v20[4] = 0u;
      v20[5] = 0u;
      v20[2] = 0u;
      v20[3] = 0u;
      *v20 = 0u;
      v20[1] = 0u;
      result = lzma_alone_encoder();
      if ((_DWORD)result == 5)
        goto LABEL_29;
      if (!(_DWORD)result)
        goto LABEL_14;
      goto LABEL_27;
    case 4:
      if (*(_DWORD *)(v1 + 584))
        (*(void (**)(uint64_t, uint64_t))(v1 + 608))(a1, v1 + 536);
      v22 = malloc_type_calloc(1uLL, 0xA8uLL, 0x8F0CD571uLL);
      if (!v22)
      {
        v23 = "Can't allocate memory for xz stream";
LABEL_30:
        v24 = (_DWORD *)a1;
        v25 = 12;
        goto LABEL_31;
      }
      v21 = v22;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v26 = 0u;
      if (lzma_lzma_preset())
      {
        free(v21);
LABEL_20:
        *(_QWORD *)(v1 + 592) = 0;
        v23 = "Internal error initializing compression library";
        goto LABEL_30;
      }
      *((_QWORD *)v21 + 17) = 33;
      *((_QWORD *)v21 + 18) = &v26;
      *((_QWORD *)v21 + 19) = -1;
      *v21 = 0u;
      v21[1] = 0u;
      v21[2] = 0u;
      v21[3] = 0u;
      v21[4] = 0u;
      v21[5] = 0u;
      v21[6] = 0u;
      v21[7] = 0u;
      *((_QWORD *)v21 + 16) = 0;
      result = lzma_stream_encoder();
      if ((_DWORD)result == 5)
      {
LABEL_29:
        free(v21);
        *(_QWORD *)(v1 + 592) = 0;
        v23 = "Internal error initializing compression library: Cannot allocate memory";
        goto LABEL_30;
      }
      if (!(_DWORD)result)
      {
LABEL_14:
        *(_QWORD *)(v1 + 592) = v21;
        *(_DWORD *)(v1 + 584) = 1;
        *(_QWORD *)(v1 + 600) = sub_1DB6FB7B8;
        *(_QWORD *)(v1 + 608) = sub_1DB6FB8A4;
        goto LABEL_32;
      }
LABEL_27:
      free(v21);
      *(_QWORD *)(v1 + 592) = 0;
      v23 = "Internal error initializing compression library: It's a bug in liblzma";
      v24 = (_DWORD *)a1;
      v25 = -1;
LABEL_31:
      archive_set_error(v24, v25, v23, v15, v16, v17, v18, v19, (char *)v26);
      result = 4294967266;
LABEL_32:
      if (!(_DWORD)result)
      {
LABEL_33:
        result = 0;
        *(_QWORD *)(v1 + 552) = 0;
        *(_QWORD *)(v1 + 560) = v1 + 624;
        *(_QWORD *)(v1 + 568) = 0x10000;
        *(_QWORD *)(v1 + 576) = 0;
      }
      return result;
    default:
      goto LABEL_33;
  }
}

uint64_t sub_1DB6FB2A4(uint64_t a1, uint64_t a2)
{
  return strcmp(*(const char **)(a1 + 136), *(const char **)(a2 + 136));
}

uint64_t sub_1DB6FB2B0(uint64_t a1, const char *a2)
{
  return strcmp(*(const char **)(a1 + 136), a2);
}

size_t sub_1DB6FB2B8(void *a1, char *__s)
{
  char *v4;
  size_t v5;

  v4 = strchr(__s, 47);
  if (v4)
  {
    v5 = ((_DWORD)v4 - (_DWORD)__s);
  }
  else
  {
    v5 = strlen(__s);
    if (!(_DWORD)v5)
      return v5;
  }
  if ((int)v5 > 255)
    return 0xFFFFFFFFLL;
  memcpy(a1, __s, (int)v5);
  *((_BYTE *)a1 + (int)v5) = 0;
  return v5;
}

unsigned int *sub_1DB6FB334(unsigned int *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;

  v3 = result;
  v4 = *result;
  switch((_DWORD)v4)
  {
    case 0:
      goto LABEL_6;
    case 2:
      result = (unsigned int *)sub_1DB733920((CC_MD5_CTX *)(result + 1), (unsigned __int8 *)(a2 + 16));
      v4 = 16;
      goto LABEL_6;
    case 1:
      result = (unsigned int *)sub_1DB73398C((CC_SHA1_CTX *)result + 1, (unsigned __int8 *)(a2 + 16));
      v4 = 20;
LABEL_6:
      *(_QWORD *)(a2 + 8) = v4;
      break;
  }
  *(_DWORD *)a2 = *v3;
  return result;
}

uint64_t sub_1DB6FB3B4(uint64_t a1, char *__buf, size_t __nbyte)
{
  size_t v3;
  uint64_t v6;
  ssize_t v7;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;

  if (!__nbyte)
    return 0;
  v3 = __nbyte;
  v6 = *(_QWORD *)(a1 + 264);
  while (1)
  {
    v7 = write(*(_DWORD *)v6, __buf, v3);
    if (v7 < 0)
      break;
    __buf += v7;
    *(_QWORD *)(v6 + 8) += v7;
    v3 -= v7;
    if (!v3)
      return 0;
  }
  v9 = __error();
  archive_set_error((_DWORD *)a1, *v9, "fwrite function failed", v10, v11, v12, v13, v14, v15);
  return 4294967266;
}

uint64_t sub_1DB6FB440(_DWORD *a1, uint64_t a2, int a3)
{
  z_stream *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  z_stream *v12;
  uint64_t v13;
  Bytef *v14;
  uLong v15;
  uint64_t result;
  char *v17;
  _DWORD *v18;
  int v19;
  char *v20;

  if (*(_DWORD *)(a2 + 48))
    (*(void (**)(_DWORD *, uint64_t))(a2 + 72))(a1, a2);
  v6 = (z_stream *)malloc_type_calloc(1uLL, 0x70uLL, 0x10B0040E8CA615DuLL);
  if (!v6)
  {
    v17 = "Can't allocate memory for gzip stream";
    v18 = a1;
    v19 = 12;
    goto LABEL_7;
  }
  v12 = v6;
  v13 = *(_QWORD *)(a2 + 8);
  v6->next_in = *(Bytef **)a2;
  v6->avail_in = v13;
  v14 = *(Bytef **)(a2 + 24);
  v6->total_in = *(_QWORD *)(a2 + 16);
  v6->next_out = v14;
  v15 = *(_QWORD *)(a2 + 40);
  v6->avail_out = *(_QWORD *)(a2 + 32);
  v6->total_out = v15;
  result = deflateInit2_(v6, a3, 8, 15, 8, 0, "1.2.12", 112);
  if ((_DWORD)result)
  {
    free(v12);
    *(_QWORD *)(a2 + 56) = 0;
    v17 = "Internal error initializing compression library";
    v18 = a1;
    v19 = -1;
LABEL_7:
    archive_set_error(v18, v19, v17, v7, v8, v9, v10, v11, v20);
    return 4294967266;
  }
  *(_DWORD *)(a2 + 48) = 1;
  *(_QWORD *)(a2 + 56) = v12;
  *(_QWORD *)(a2 + 64) = sub_1DB6FB54C;
  *(_QWORD *)(a2 + 72) = sub_1DB6FB604;
  return result;
}

uint64_t sub_1DB6FB54C(_DWORD *a1, Bytef **a2, int a3)
{
  z_stream *v5;
  Bytef *v6;
  Bytef *v7;
  uLong v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Bytef *avail_in;
  Bytef *next_out;
  uLong total_out;

  v5 = (z_stream *)a2[7];
  v6 = a2[1];
  v5->next_in = *a2;
  v5->avail_in = v6;
  v7 = a2[3];
  v5->total_in = (uLong)a2[2];
  v5->next_out = v7;
  v8 = (uLong)a2[5];
  v5->avail_out = a2[4];
  v5->total_out = v8;
  result = deflate(v5, 4 * (a3 == 0));
  avail_in = (Bytef *)v5->avail_in;
  *a2 = v5->next_in;
  a2[1] = avail_in;
  next_out = v5->next_out;
  a2[2] = (Bytef *)v5->total_in;
  a2[3] = next_out;
  total_out = v5->total_out;
  a2[4] = (Bytef *)v5->avail_out;
  a2[5] = (Bytef *)total_out;
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 1)
    {
      return 1;
    }
    else
    {
      archive_set_error(a1, -1, "GZip compression failed: deflate() call returned status %d", v10, v11, v12, v13, v14, (char *)result);
      return 4294967266;
    }
  }
  return result;
}

uint64_t sub_1DB6FB604(_DWORD *a1, uint64_t a2)
{
  z_stream *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;

  v4 = *(z_stream **)(a2 + 56);
  v5 = deflateEnd(v4);
  free(v4);
  *(_QWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a2 + 48) = 0;
  if (!v5)
    return 0;
  archive_set_error(a1, -1, "Failed to clean up compressor", v6, v7, v8, v9, v10, v12);
  return 4294967266;
}

uint64_t sub_1DB6FB670(_DWORD *a1, _QWORD *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;

  v5 = a2[7];
  v6 = a2[1];
  *(_QWORD *)v5 = *a2;
  *(_DWORD *)(v5 + 8) = v6;
  *(_QWORD *)(v5 + 12) = a2[2];
  v7 = a2[4];
  *(_QWORD *)(v5 + 24) = a2[3];
  *(_DWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 36) = a2[5];
  v13 = (char *)BZ2_bzCompress((bz_stream *)v5, 2 * (a3 == 0));
  result = 0;
  v15 = *(unsigned int *)(v5 + 8);
  *a2 = *(_QWORD *)v5;
  a2[1] = v15;
  v16 = *(_QWORD *)(v5 + 24);
  a2[2] = *(_QWORD *)(v5 + 12);
  a2[3] = v16;
  a2[4] = *(unsigned int *)(v5 + 32);
  a2[5] = *(_QWORD *)(v5 + 36);
  if ((_DWORD)v13 != 1 && (_DWORD)v13 != 3)
  {
    if ((_DWORD)v13 == 4)
    {
      return 1;
    }
    else
    {
      archive_set_error(a1, -1, "Bzip2 compression failed: BZ2_bzCompress() call returned status %d", v8, v9, v10, v11, v12, v13);
      return 4294967266;
    }
  }
  return result;
}

uint64_t sub_1DB6FB74C(_DWORD *a1, uint64_t a2)
{
  bz_stream *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;

  v4 = *(bz_stream **)(a2 + 56);
  v5 = BZ2_bzCompressEnd(v4);
  free(v4);
  *(_QWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a2 + 48) = 0;
  if (!v5)
    return 0;
  archive_set_error(a1, -1, "Failed to clean up compressor", v6, v7, v8, v9, v10, v12);
  return 4294967266;
}

uint64_t sub_1DB6FB7B8(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;

  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)v4 = *(_QWORD *)a2;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a2 + 32);
  result = lzma_code();
  *(_QWORD *)a2 = *(_QWORD *)v4;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(v4 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(v4 + 24);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v4 + 32);
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 6)
    {
      v16 = (char *)((unint64_t)(lzma_memusage() + 0xFFFFF) >> 20);
      archive_set_error(a1, 12, "lzma compression error: %ju MiB would have been needed", v11, v12, v13, v14, v15, v16);
    }
    else
    {
      if ((_DWORD)result == 1)
        return 1;
      archive_set_error(a1, -1, "lzma compression failed: lzma_code() call returned status %d", v6, v7, v8, v9, v10, (char *)result);
    }
    return 4294967266;
  }
  return result;
}

uint64_t sub_1DB6FB8A4(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 56);
  lzma_end();
  free(v3);
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return 0;
}

uint64_t sub_1DB6FB8E0(uint64_t a1, off_t a2, size_t a3)
{
  int *v5;
  size_t *v6;
  size_t v7;
  ssize_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  ssize_t v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t result;
  int v19;
  char *v20;
  _DWORD *v21;
  char *v22;

  v5 = *(int **)(a1 + 264);
  if (lseek(*v5, a2, 0) < 0)
  {
    v19 = *__error();
    v20 = "lseek failed";
LABEL_17:
    v21 = (_DWORD *)a1;
  }
  else
  {
    if (!a3)
      return 0;
    v6 = (size_t *)(v5 + 16540);
    while (1)
    {
      if (a3 >= *v6)
        v7 = *v6;
      else
        v7 = a3;
      v8 = read(*v5, (char *)v5 - *v6 + 66160, v7);
      v14 = v8;
      if (v8 < 0)
      {
        v19 = *__error();
        v22 = (char *)v14;
        v20 = "Can't read temporary file(%jd)";
        goto LABEL_17;
      }
      if (!v8)
        break;
      v15 = *v6 == v8;
      *v6 -= v8;
      if (v15)
      {
        v16 = *(_QWORD *)(a1 + 264);
        v17 = (_QWORD *)(v16 + 66160);
        result = sub_1DB7322A8(a1, v16 + 624, 0x10000 - *(_QWORD *)(v16 + 66160));
        if ((_DWORD)result)
          return result;
        *v17 = 0x10000;
      }
      a3 -= v14;
      if (!a3)
        return 0;
    }
    v20 = "Truncated xar archive";
    v21 = (_DWORD *)a1;
    v19 = 0;
  }
  archive_set_error(v21, v19, v20, v9, v10, v11, v12, v13, v22);
  return 4294967266;
}

uint64_t sub_1DB6FBA08(_DWORD *a1, xmlTextWriter *a2, xmlChar *a3, time_t a4, int a5)
{
  tm v10;
  time_t v11;
  char v12[16];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v11 = a4;
  memset(&v10, 0, sizeof(v10));
  gmtime_r(&v11, &v10);
  *(_OWORD *)v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0;
  strftime(v12, 0x64uLL, "%Y-%m-%dT%H:%M:%S", &v10);
  if (a5)
    __strcat_chk();
  return sub_1DB6FBAE0(a1, a2, a3, (const xmlChar *)v12);
}

uint64_t sub_1DB6FBAE0(_DWORD *a1, xmlTextWriterPtr writer, xmlChar *name, const xmlChar *a4)
{
  char *started;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (!a4)
    return 0;
  started = (char *)xmlTextWriterStartElement(writer, name);
  if ((started & 0x80000000) != 0)
  {
    archive_set_error(a1, -1, "xmlTextWriterStartElement() failed: %d", v8, v9, v10, v11, v12, started);
  }
  else
  {
    v13 = (char *)xmlTextWriterWriteString(writer, a4);
    if ((v13 & 0x80000000) != 0)
    {
      archive_set_error(a1, -1, "xmlTextWriterWriteString() failed: %d", v14, v15, v16, v17, v18, v13);
    }
    else
    {
      v19 = (char *)xmlTextWriterEndElement(writer);
      if ((v19 & 0x80000000) == 0)
        return 0;
      archive_set_error(a1, -1, "xmlTextWriterEndElement() failed: %d", v20, v21, v22, v23, v24, v19);
    }
  }
  return 4294967266;
}

uint64_t sub_1DB6FBB90(uint64_t a1, xmlTextWriter *a2, xmlChar *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
  uint64_t v12;

  v12 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(v12 + 112) = 0;
  sub_1DB7303E8((void **)(v12 + 104), a4, &a9);
  return sub_1DB6FBAE0((_DWORD *)a1, a2, a3, *(const xmlChar **)(v12 + 104));
}

uint64_t sub_1DB6FBBF8(_DWORD *a1, xmlTextWriterPtr writer, xmlChar *name, const xmlChar *a4, const xmlChar *a5, const xmlChar *a6)
{
  char *started;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  started = (char *)xmlTextWriterStartElement(writer, name);
  if ((started & 0x80000000) != 0)
  {
    archive_set_error(a1, -1, "xmlTextWriterStartElement() failed: %d", v12, v13, v14, v15, v16, started);
  }
  else if (a5
         && a6
         && (v17 = (char *)xmlTextWriterWriteAttribute(writer, a5, a6), (v17 & 0x80000000) != 0))
  {
    archive_set_error(a1, -1, "xmlTextWriterWriteAttribute() failed: %d", v18, v19, v20, v21, v22, v17);
  }
  else if (a4 && (v23 = (char *)xmlTextWriterWriteString(writer, a4), (v23 & 0x80000000) != 0))
  {
    archive_set_error(a1, -1, "xmlTextWriterWriteString() failed: %d", v24, v25, v26, v27, v28, v23);
  }
  else
  {
    v29 = (char *)xmlTextWriterEndElement(writer);
    if ((v29 & 0x80000000) == 0)
      return 0;
    archive_set_error(a1, -1, "xmlTextWriterEndElement() failed: %d", v30, v31, v32, v33, v34, v29);
  }
  return 4294967266;
}

uint64_t sub_1DB6FBCDC(_DWORD *a1, xmlTextWriter *a2, char *__s1, char *a4)
{
  int v8;
  char **v9;
  char **v10;
  const char *v11;
  char *v12;
  char *v13;
  const char **v14;
  const char *v15;
  const char *v16;
  char *started;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v8 = 0;
  if (!strcmp(__s1, "ext2"))
    v9 = off_1EA322430;
  else
    v9 = off_1EA3222F0;
  v12 = *v9;
  v10 = v9 + 2;
  v11 = v12;
  do
  {
    v13 = strchr(a4, 44);
    if (v13)
    {
      if (!v11)
        goto LABEL_14;
    }
    else
    {
      v13 = &a4[strlen(a4)];
      if (!v11)
        goto LABEL_14;
    }
    v14 = (const char **)v10;
    v15 = v11;
    while (v15[v13 - a4] || *a4 != *v15 || strncmp(a4, v15, v13 - a4))
    {
      v16 = *v14;
      v14 += 2;
      v15 = v16;
      if (!v16)
        goto LABEL_14;
    }
    ++v8;
LABEL_14:
    a4 = v13 + 1;
  }
  while (*v13 == 44);
  if (v8 < 1)
    return 0;
  started = (char *)xmlTextWriterStartElement(a2, (const xmlChar *)__s1);
  if ((started & 0x80000000) != 0)
  {
    archive_set_error(a1, -1, "xmlTextWriterStartElement() failed: %d", v18, v19, v20, v21, v22, started);
  }
  else
  {
    v23 = (char *)xmlTextWriterEndElement(a2);
    if ((v23 & 0x80000000) == 0)
      return 0;
    archive_set_error(a1, -1, "xmlTextWriterEndElement() failed: %d", v24, v25, v26, v27, v28, v23);
  }
  return 4294967266;
}

uint64_t sub_1DB6FBE38(_DWORD *a1, xmlTextWriter *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  const xmlChar *v20;
  uint64_t v21;

  if ((sub_1DB6FBB90((uint64_t)a1, a2, (xmlChar *)"length", "%ju", a5, a6, a7, a8, *(char **)(a3 + 24)) & 0x80000000) != 0
    || (sub_1DB6FBB90((uint64_t)a1, a2, (xmlChar *)"offset", "%ju", v11, v12, v13, v14, *(char **)(a3 + 16)) & 0x80000000) != 0
    || (sub_1DB6FBB90((uint64_t)a1, a2, (xmlChar *)"size", "%ju", v15, v16, v17, v18, *(char **)(a3 + 32)) & 0x80000000) != 0)
  {
    return 4294967266;
  }
  v19 = *(_DWORD *)(a3 + 40) - 1;
  v20 = (const xmlChar *)(v19 > 3 ? "application/octet-stream" : (&off_1EA322610)[v19]);
  if ((sub_1DB6FBBF8(a1, a2, (xmlChar *)"encoding", 0, (const xmlChar *)"style", v20) & 0x80000000) != 0)
    return 4294967266;
  v21 = 4294967266;
  if ((sub_1DB6FBF70(a1, a2, (xmlChar *)"archived-checksum", (int *)(a3 + 48)) & 0x80000000) == 0)
    return ((int)sub_1DB6FBF70(a1, a2, (xmlChar *)"extracted-checksum", (int *)(a3 + 88)) >> 31) & 0xFFFFFFE2;
  return v21;
}

uint64_t sub_1DB6FBF70(_DWORD *a1, xmlTextWriter *a2, xmlChar *a3, int *a4)
{
  int v4;
  const char *v5;
  int v6;
  const xmlChar *v7;
  int v8;
  unsigned __int8 *v9;
  xmlChar *v10;
  unsigned int v11;
  xmlChar *v12;
  xmlChar v14[41];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)a4 + 1))
    return 0;
  v4 = *a4;
  v5 = "sha1";
  if (*a4 != 1)
    v5 = 0;
  v6 = v4 == 1 ? 20 : 0;
  v7 = v4 == 2 ? (const xmlChar *)"md5" : (const xmlChar *)v5;
  v8 = v4 == 2 ? 16 : v6;
  if (!v7)
    return 0;
  if (v8)
  {
    v9 = (unsigned __int8 *)(a4 + 4);
    v10 = v14;
    do
    {
      v11 = *v9++;
      *v10 = a0123456789abcd[(unint64_t)v11 >> 4];
      v12 = v10 + 2;
      v10[1] = a0123456789abcd[v11 & 0xF];
      v10 += 2;
      --v8;
    }
    while (v8);
  }
  else
  {
    v12 = v14;
  }
  *v12 = 0;
  if ((sub_1DB6FBBF8(a1, a2, a3, v14, (const xmlChar *)"style", v7) & 0x80000000) != 0)
    return 4294967266;
  else
    return 0;
}

uint64_t sub_1DB6FC060(uint64_t a1, uint64_t a2)
{
  const char *v3;
  const char *v4;

  v3 = (const char *)archive_entry_pathname(*(uint64_t **)(*(_QWORD *)(a1 + 32) + 32));
  v4 = (const char *)archive_entry_pathname(*(uint64_t **)(*(_QWORD *)(a2 + 32) + 32));
  return strcmp(v3, v4);
}

uint64_t sub_1DB6FC0A0(uint64_t a1, const char *a2)
{
  const char *v3;

  v3 = (const char *)archive_entry_pathname(*(uint64_t **)(*(_QWORD *)(a1 + 32) + 32));
  return strcmp(v3, a2);
}

void archive_read_support_filter_xz(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;

  if (sub_1DB6E4544("xz"))
  {
    if (sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_filter_xz", v3, v4, v5, v6) != -30)
    {
      v16 = 0;
      sub_1DB6F7FD0(a1, &v16, v7, v8, v9, v10, v11, v12);
      if (!v13)
      {
        *v16 = 0;
        v14 = v16;
        v16[1] = "xz";
        v14[2] = sub_1DB6FC184;
        v14[4] = 0;
        v14[5] = 0;
        v14[3] = sub_1DB6FC1E0;
      }
    }
  }
  else
  {
    archive_set_error(a1, -1, "Filter not allow-listed in entitlement", v2, v3, v4, v5, v6, v15);
  }
}

size_t sub_1DB6FC184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t result;
  uint64_t v9;

  v9 = 0;
  result = sub_1DB6E22F4(a2, 6uLL, &v9, a4, a5, a6, a7, a8);
  if (result)
  {
    if (*(_DWORD *)result ^ 0x587A37FD | *(unsigned __int16 *)(result + 4) ^ 0x5A)
      return 0;
    else
      return 48;
  }
  return result;
}

uint64_t sub_1DB6FC1E0(uint64_t a1)
{
  *(_DWORD *)(a1 + 104) = 6;
  *(_QWORD *)(a1 + 96) = "xz";
  return sub_1DB6FC580(a1);
}

void archive_read_support_filter_lzma(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;

  if (sub_1DB6E4544("lzma"))
  {
    if (sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_filter_lzma", v3, v4, v5, v6) != -30)
    {
      v16 = 0;
      sub_1DB6F7FD0(a1, &v16, v7, v8, v9, v10, v11, v12);
      if (!v13)
      {
        *v16 = 0;
        v14 = v16;
        v16[1] = "lzma";
        v14[2] = sub_1DB6FC2B0;
        v14[4] = 0;
        v14[5] = 0;
        v14[3] = sub_1DB6FC424;
      }
    }
  }
  else
  {
    archive_set_error(a1, -1, "Filter not allow-listed in entitlement", v2, v3, v4, v5, v6, v15);
  }
}

size_t sub_1DB6FC2B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t result;
  unsigned int v9;
  _BOOL4 v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;

  v14 = 0;
  result = sub_1DB6E22F4(a2, 0xEuLL, &v14, a4, a5, a6, a7, a8);
  if (!result)
    return result;
  v9 = *(unsigned __int8 *)result;
  if (v9 > 0xE0)
    return 0;
  v10 = v9 - 93 < 2;
  if (*(_QWORD *)(result + 5) == -1)
    v11 = (8 * v10) | 0x40;
  else
    v11 = 8 * v10;
  v12 = *(_DWORD *)(result + 1);
  if (v12 < 0x100000)
  {
    if (v12 >= 0x10000)
    {
      if (v12 >= 0x40000)
      {
        if (v12 != 0x40000 && v12 != 0x80000)
          goto LABEL_39;
      }
      else if (v12 != 0x10000 && v12 != 0x20000)
      {
        goto LABEL_39;
      }
    }
    else if (v12 >= 0x4000)
    {
      if (v12 != 0x4000 && v12 != 0x8000)
        goto LABEL_39;
    }
    else if (v12 != 4096 && v12 != 0x2000)
    {
      goto LABEL_39;
    }
    return v11 | 0x20u;
  }
  if (v12 <= 0xFFFFFF)
  {
    if (v12 >= 0x400000)
    {
      if (v12 != 0x400000 && v12 != 0x800000)
        goto LABEL_39;
    }
    else if (v12 != 0x100000 && v12 != 0x200000)
    {
      goto LABEL_39;
    }
    return v11 | 0x20u;
  }
  if (v12 > 0x3FFFFFF)
  {
    if (v12 == 0x8000000)
      return v11 | 0x20u;
    v13 = 0x4000000;
  }
  else
  {
    if (v12 == 0x1000000)
      return v11 | 0x20u;
    v13 = 0x2000000;
  }
  if (v12 == v13)
    return v11 | 0x20u;
LABEL_39:
  if ((v12 - 3145728) > 0x3C00000)
    return 0;
  result = 0;
  if ((v12 & 0xFFFFF) == 0 && v11 == 72)
    return 104;
  return result;
}

uint64_t sub_1DB6FC424(uint64_t a1)
{
  *(_DWORD *)(a1 + 104) = 5;
  *(_QWORD *)(a1 + 96) = "lzma";
  return sub_1DB6FC580(a1);
}

void archive_read_support_filter_lzip(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;

  if (sub_1DB6E4544("lzip"))
  {
    if (sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_filter_lzip", v3, v4, v5, v6) != -30)
    {
      v16 = 0;
      sub_1DB6F7FD0(a1, &v16, v7, v8, v9, v10, v11, v12);
      if (!v13)
      {
        *v16 = 0;
        v14 = v16;
        v16[1] = "lzip";
        v14[2] = sub_1DB6FC4F4;
        v14[4] = 0;
        v14[5] = 0;
        v14[3] = sub_1DB6FC4FC;
      }
    }
  }
  else
  {
    archive_set_error(a1, -1, "Format not allow-listed in entitlement", v2, v3, v4, v5, v6, v15);
  }
}

size_t sub_1DB6FC4F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1DB6FC514(a2, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1DB6FC4FC(uint64_t a1)
{
  *(_DWORD *)(a1 + 104) = 9;
  *(_QWORD *)(a1 + 96) = "lzip";
  return sub_1DB6FC580(a1);
}

size_t sub_1DB6FC514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t result;
  uint64_t v9;

  v9 = 0;
  result = sub_1DB6E22F4(a1, 6uLL, &v9, a4, a5, a6, a7, a8);
  if (result)
  {
    if (*(_DWORD *)result == 1346984524 && *(unsigned __int8 *)(result + 4) <= 1u)
    {
      if ((*(_BYTE *)(result + 5) & 0x1Cu) - 28 >= 0xFFFFFFF0)
        return 48;
      else
        return 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1DB6FC580(uint64_t a1)
{
  void **v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t result;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;

  v2 = (void **)malloc_type_calloc(0xB8uLL, 1uLL, 0xB398FE16uLL);
  v3 = malloc_type_malloc(0x10000uLL, 0x460D7681uLL);
  v9 = v3;
  if (!v2 || !v3)
  {
    archive_set_error(*(_DWORD **)(a1 + 24), 12, "Can't allocate data for xz decompression", v4, v5, v6, v7, v8, v19);
    free(v9);
    free(v2);
    return 4294967266;
  }
  *(_QWORD *)(a1 + 88) = v2;
  v2[17] = v3;
  v2[18] = (void *)0x10000;
  *(_QWORD *)(a1 + 40) = sub_1DB6FC6A0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = sub_1DB6FCA08;
  v2[1] = 0;
  v2[3] = v3;
  v2[4] = (void *)0x10000;
  *((_DWORD *)v2 + 41) = 0;
  v10 = *(_DWORD *)(a1 + 104);
  if (v10 == 9)
  {
    result = 0;
    *((_BYTE *)v2 + 161) = 0;
    return result;
  }
  *((_BYTE *)v2 + 161) = 1;
  if (v10 == 6)
    v12 = lzma_stream_decoder();
  else
    v12 = lzma_alone_decoder();
  if (v12)
  {
    sub_1DB6FCA40((_DWORD *)a1, v12, v13, v14, v15, v16, v17, v18, v19);
    free(v2[17]);
    free(v2);
    *(_QWORD *)(a1 + 88) = 0;
    return 4294967266;
  }
  return 0;
}

uint64_t sub_1DB6FC6A0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  int v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  char *v54;
  _DWORD *v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v64 = 0;
  v10 = *(_QWORD *)(a1 + 88);
  v11 = *(_QWORD *)(v10 + 136);
  v12 = *(_QWORD *)(v10 + 144);
  *(_QWORD *)(v10 + 24) = v11;
  *(_QWORD *)(v10 + 32) = v12;
  if (v12)
  {
    while (1)
    {
      if (*(_BYTE *)(v10 + 160))
      {
LABEL_18:
        v37 = *(_QWORD *)(v10 + 24);
        v11 = *(_QWORD *)(v10 + 136);
        goto LABEL_20;
      }
      if (!*(_BYTE *)(v10 + 161))
      {
        v65 = 0;
        v13 = *(_QWORD *)(a1 + 88);
        v14 = sub_1DB6E22F4(*(_QWORD *)(a1 + 16), 6uLL, &v65, a4, a5, a6, a7, a8);
        if (!v14)
          return -30;
        *(_BYTE *)(v13 + 162) = *(_BYTE *)(v14 + 4);
        v66 = 93;
        v21 = *(unsigned __int8 *)(v14 + 5);
        v22 = v21 & 0x1F;
        if (v22 - 28 < 0xFFFFFFF0)
          return -30;
        v23 = 1 << v22;
        v24 = ((1 << v22) >> 4) * (v21 >> 5);
        if (v22 <= 0xC)
          v25 = 0;
        else
          v25 = v24;
        v67 = v23 - v25;
        sub_1DB6E26F8(*(_QWORD *)(a1 + 16), 6, v15, v16, v17, v18, v19, v20);
        *(_QWORD *)(v13 + 168) = 6;
        v68 = 0x4000000000000001;
        v69 = 0;
        v70 = -1;
        v71 = 0;
        v26 = lzma_properties_decode();
        if (v26)
        {
          v28 = v26;
LABEL_38:
          v55 = (_DWORD *)a1;
          v36 = v28;
LABEL_39:
          sub_1DB6FCA40(v55, v36, v27, a4, a5, a6, a7, a8, v64);
          return -30;
        }
        v28 = lzma_raw_decoder();
        free(v69);
        if (v28)
          goto LABEL_38;
        *(_BYTE *)(v10 + 161) = 1;
      }
      v29 = sub_1DB6E22F4(*(_QWORD *)(a1 + 16), 1uLL, &v64, a4, a5, a6, a7, a8);
      *(_QWORD *)v10 = v29;
      if (!v29 && ((unint64_t)v64 & 0x8000000000000000) != 0)
      {
        archive_set_error(*(_DWORD **)(a1 + 24), -1, "truncated input", v30, v31, v32, v33, v34, v64);
        return -30;
      }
      *(_QWORD *)(v10 + 8) = v64;
      v35 = lzma_code();
      if (v35)
      {
        v36 = v35;
        if (v35 != 1)
        {
          v55 = (_DWORD *)a1;
          goto LABEL_39;
        }
        *(_BYTE *)(v10 + 160) = 1;
      }
      sub_1DB6E26F8(*(_QWORD *)(a1 + 16), (uint64_t)&v64[-*(_QWORD *)(v10 + 8)], v27, a4, a5, a6, a7, a8);
      *(_QWORD *)(v10 + 168) += &v64[-*(_QWORD *)(v10 + 8)];
      if (!*(_QWORD *)(v10 + 32))
        goto LABEL_18;
    }
  }
  v37 = v11;
LABEL_20:
  v38 = v37 - v11;
  *(_QWORD *)(v10 + 152) += v37 - v11;
  *(_QWORD *)(v10 + 176) += v37 - v11;
  if (v37 == v11)
  {
    *a2 = 0;
    return v38;
  }
  *a2 = v11;
  if (*(_DWORD *)(a1 + 104) == 9)
  {
    *(_DWORD *)(v10 + 164) = lzma_crc32();
    if (*(_BYTE *)(v10 + 160))
    {
      v68 = 0;
      v44 = *(_QWORD *)(a1 + 88);
      if (*(_BYTE *)(v44 + 162))
        v45 = 20;
      else
        v45 = 12;
      v46 = sub_1DB6E22F4(*(_QWORD *)(a1 + 16), v45, &v68, v39, v40, v41, v42, v43);
      if (!v46 && v68 < 0)
        return -30;
      if (v46)
        v53 = v68 < v45;
      else
        v53 = 1;
      if (v53)
      {
        v54 = "Lzip: Remaining data is less bytes";
      }
      else if (*(_DWORD *)(v44 + 164) == *(_DWORD *)v46)
      {
        if (*(_QWORD *)(v44 + 176) == *(_QWORD *)(v46 + 4))
        {
          if (*(_BYTE *)(v44 + 162) != 1 || *(_QWORD *)(v44 + 168) + v45 == *(_QWORD *)(v46 + 12))
          {
            sub_1DB6E26F8(*(_QWORD *)(a1 + 16), v45, v47, v48, v49, v50, v51, v52);
            if (sub_1DB6FC514(*(_QWORD *)(a1 + 16), v57, v58, v59, v60, v61, v62, v63))
            {
              *(_WORD *)(v44 + 160) = 0;
              *(_QWORD *)(v44 + 164) = 0;
              *(_QWORD *)(v44 + 172) = 0;
              *(_DWORD *)(v44 + 180) = 0;
            }
            return v38;
          }
          v54 = "Lzip: Member size error";
        }
        else
        {
          v54 = "Lzip: Uncompressed size error";
        }
      }
      else
      {
        v54 = "Lzip: CRC32 error";
      }
      archive_set_error(*(_DWORD **)(a1 + 24), -1, v54, v48, v49, v50, v51, v52, v64);
      return -25;
    }
  }
  return v38;
}

uint64_t sub_1DB6FCA08(uint64_t a1)
{
  void **v1;

  v1 = *(void ***)(a1 + 88);
  lzma_end();
  free(v1[17]);
  free(v1);
  return 0;
}

_DWORD *sub_1DB6FCA40(_DWORD *result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
  _DWORD *v9;
  char *v10;
  int v11;

  switch(a2)
  {
    case 0:
    case 1:
      return result;
    case 5:
      v9 = (_DWORD *)*((_QWORD *)result + 3);
      v10 = "Lzma library error: Cannot allocate memory";
      goto LABEL_5;
    case 6:
      v9 = (_DWORD *)*((_QWORD *)result + 3);
      v10 = "Lzma library error: Out of memory";
LABEL_5:
      v11 = 12;
      return archive_set_error(v9, v11, v10, a4, a5, a6, a7, a8, a9);
    case 7:
      v9 = (_DWORD *)*((_QWORD *)result + 3);
      v10 = "Lzma library error: format not recognized";
      goto LABEL_11;
    case 8:
      v9 = (_DWORD *)*((_QWORD *)result + 3);
      v10 = "Lzma library error: Invalid options";
      goto LABEL_11;
    case 9:
      v9 = (_DWORD *)*((_QWORD *)result + 3);
      v10 = "Lzma library error: Corrupted input data";
      goto LABEL_11;
    case 10:
      v9 = (_DWORD *)*((_QWORD *)result + 3);
      v10 = "Lzma library error:  No progress is possible";
      goto LABEL_11;
    default:
      v9 = (_DWORD *)*((_QWORD *)result + 3);
      v10 = "Lzma decompression failed:  Unknown error";
LABEL_11:
      v11 = -1;
      return archive_set_error(v9, v11, v10, a4, a5, a6, a7, a8, a9);
  }
}

uint64_t archive_write_disk_set_skip_file(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594((int *)a1, -1073631035, 0x7FFF, "archive_write_disk_set_skip_file", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    result = 0;
    *(_DWORD *)(a1 + 192) = 1;
    *(_QWORD *)(a1 + 200) = a2;
    *(_QWORD *)(a1 + 208) = a3;
  }
  return result;
}

uint64_t archive_write_disk_gid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v11)(_QWORD, uint64_t, uint64_t);

  if (sub_1DB6E0594((int *)a1, -1073631035, 0x7FFF, "archive_write_disk_gid", a5, a6, a7, a8) == -30)
    return -30;
  v11 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t))(a1 + 224);
  if (v11)
    return v11(*(_QWORD *)(a1 + 240), a2, a3);
  return a3;
}

uint64_t archive_write_disk_uid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v11)(_QWORD, uint64_t, uint64_t);

  if (sub_1DB6E0594((int *)a1, -1073631035, 0x7FFF, "archive_write_disk_uid", a5, a6, a7, a8) == -30)
    return -30;
  v11 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t))(a1 + 248);
  if (v11)
    return v11(*(_QWORD *)(a1 + 264), a2, a3);
  return a3;
}

uint64_t sub_1DB6FCC34(uint64_t a1, int a2)
{
  if ((a2 + 1) > 1)
    return -1;
  else
    return *(_QWORD *)(a1 + 552);
}

size_t sub_1DB6FCC50(uint64_t a1, char *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (sub_1DB6E0594((int *)a1, -1073631035, 4, "archive_write_data", a5, a6, a7, a8) == -30)
    return -30;
  if ((*(_BYTE *)(a1 + 521) & 0x80) != 0)
    return sub_1DB6FDAF0(a1, a2, a3, v11, v12, v13, v14, v15);
  return sub_1DB6DBC28(a1, a2, a3, v11, v12, v13, v14, v15);
}

uint64_t sub_1DB6FCCE0(__int16 a1, int a2)
{
  uint64_t result;
  unint64_t v4;
  BOOL v5;

  result = 0;
  HIDWORD(v4) = a2;
  LODWORD(v4) = a2 - 4096;
  switch((v4 >> 12))
  {
    case 0u:
      v5 = (a1 & 0xF000) == 4096;
      goto LABEL_9;
    case 1u:
      v5 = (a1 & 0xF000) == 0x2000;
      goto LABEL_9;
    case 3u:
      v5 = (a1 & 0xF000) == 0x4000;
      goto LABEL_9;
    case 5u:
      v5 = (a1 & 0xF000) == 24576;
      goto LABEL_9;
    case 7u:
      v5 = (a1 & 0xF000) == 0x8000;
      goto LABEL_9;
    case 9u:
      v5 = (a1 & 0xF000) == 40960;
      goto LABEL_9;
    case 0xBu:
      v5 = (a1 & 0xF000) == 49152;
LABEL_9:
      result = v5;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1DB6FCD68(_DWORD *a1, int a2, char *a3, __darwin_time_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  BOOL v15;
  uint64_t result;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;

  if (a6 < a8 || (v15 = 0, a6 == a8) && a7 < a9)
    v15 = sub_1DB6FD03C(a2, a3, a4, a5, a6, a7) != 0;
  result = sub_1DB6FD03C(a2, a3, a4, a5, a8, a9);
  if (v15 || (_DWORD)result)
  {
    v17 = __error();
    archive_set_error(a1, *v17, "Can't restore time", v18, v19, v20, v21, v22, v23);
    return 4294967276;
  }
  return result;
}

uint64_t sub_1DB6FCE30(uint64_t a1, int a2, const char *a3, uint64_t a4, uint64_t a5)
{
  int v5;
  int v6;
  uint64_t result;
  __uint32_t v11;
  int v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;

  if (!(a5 | a4))
    return 0;
  v5 = a5;
  v6 = a4;
  result = sub_1DB6FD0E0(a1);
  if (!(_DWORD)result)
  {
    v11 = *(_DWORD *)(a1 + 412) & ~v5 | v6;
    *(_DWORD *)(a1 + 412) = v11;
    if (*(_QWORD *)(a1 + 184))
    {
      v11 &= 0xFFE8FFFF;
      *(_DWORD *)(a1 + 412) = v11;
    }
    if ((v11 & 0x20) != 0)
    {
      v12 = sub_1DB6FD15C((_DWORD *)a1);
      v11 = *(_DWORD *)(a1 + 412);
      if (v12 == -20)
      {
        v11 &= ~0x20u;
        *(_DWORD *)(a1 + 412) = v11;
      }
    }
    if ((a2 & 0x80000000) == 0)
    {
      result = fchflags(a2, v11);
      if (!(_DWORD)result)
        return result;
      v11 = *(_DWORD *)(a1 + 412);
    }
    result = lchflags(a3, v11);
    if ((_DWORD)result)
    {
      v13 = __error();
      archive_set_error((_DWORD *)a1, *v13, "Failed to set file flags", v14, v15, v16, v17, v18, v19);
      return 4294967276;
    }
  }
  return result;
}

uint64_t sub_1DB6FCF04(uint64_t a1, char *__s, const void *a3, size_t a4)
{
  size_t v8;
  int v9;
  int v10;
  ssize_t v11;
  int v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v27;
  char *from[3];

  memset(from, 0, sizeof(from));
  if (__s)
    v8 = strlen(__s);
  else
    v8 = 0;
  sub_1DB6E323C((uint64_t *)from, __s, v8);
  sub_1DB72CE50((uint64_t *)from, ".XXXXXX");
  v9 = mkstemp(from[0]);
  if (v9 < 0)
  {
    v14 = __error();
    archive_set_error((_DWORD *)a1, *v14, "Failed to restore metadata", v15, v16, v17, v18, v19, v27);
    v13 = 4294967276;
  }
  else
  {
    v10 = v9;
    v11 = write(v9, a3, a4);
    close(v10);
    if (v11 == a4)
    {
      if ((*(_BYTE *)(a1 + 521) & 0x80) != 0 && !sub_1DB6FD0E0(a1))
        v12 = *(_DWORD *)(a1 + 412) & 0x20;
      else
        v12 = 0;
      v13 = sub_1DB6FD298((_DWORD *)a1, from[0], __s, v12);
    }
    else
    {
      v20 = __error();
      archive_set_error((_DWORD *)a1, *v20, "Failed to restore metadata", v21, v22, v23, v24, v25, v27);
      v13 = 4294967276;
    }
    unlink(from[0]);
  }
  sub_1DB6E7C3C((uint64_t)from);
  return v13;
}

uint64_t sub_1DB6FD03C(int a1, char *a2, __darwin_time_t a3, int a4, uint64_t a5, int a6)
{
  timeval v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v7.tv_sec = a3;
  v7.tv_usec = a4 / 1000;
  v8 = a5;
  v9 = a6 / 1000;
  if (a1 < 0)
    return lutimes(a2, &v7);
  else
    return futimes(a1, &v7);
}

uint64_t sub_1DB6FD0E0(uint64_t a1)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;

  if (*(_QWORD *)(a1 + 440))
    return 0;
  v3 = *(_DWORD *)(a1 + 532);
  if ((v3 < 0 || (v4 = a1 + 296, result = fstat(v3, (stat *)(a1 + 296)), (_DWORD)result))
    && (v4 = a1 + 296, result = lstat(*(const char **)(a1 + 456), (stat *)(a1 + 296)), (_DWORD)result))
  {
    v5 = __error();
    archive_set_error((_DWORD *)a1, *v5, "Couldn't stat file", v6, v7, v8, v9, v10, v11);
    return 4294967276;
  }
  else
  {
    *(_QWORD *)(a1 + 440) = v4;
  }
  return result;
}

uint64_t sub_1DB6FD15C(_DWORD *a1)
{
  uint64_t result;
  unsigned int i;
  int v4;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __uint32_t v12;
  char *v13[2];

  memset(v13, 0, 12);
  result = sub_1DB6FD0E0((uint64_t)a1);
  if ((_DWORD)result)
    return result;
  for (i = 0; ; ++i)
  {
    LODWORD(v13[0]) = a1[103];
    *(char **)((char *)v13 + 4) = (char *)0xFFFFFFFF00000020;
    *__error() = 0;
    v4 = ffsctl(a1[133], 0xC00C4114uLL, v13, 0);
    if (!v4)
    {
      if (LODWORD(v13[0]) == LODWORD(v13[1]))
      {
        getenv("FORCE_UF_COMPRESS_FFSCTL");
        return 0;
      }
      goto LABEL_13;
    }
    if (v4 < 0)
      break;
LABEL_13:
    if (i > 2)
      goto LABEL_16;
LABEL_14:
    result = sub_1DB6FD0E0((uint64_t)a1);
    if ((_DWORD)result)
      return result;
  }
  if (*__error() == 35 && i < 3)
    goto LABEL_14;
LABEL_16:
  if (getenv("FORCE_UF_COMPRESS_FFSCTL"))
  {
LABEL_17:
    v6 = __error();
    archive_set_error(a1, *v6, "Failed to set UF_COMPRESSED file flag", v7, v8, v9, v10, v11, v13[0]);
    return 4294967276;
  }
  result = sub_1DB6FD0E0((uint64_t)a1);
  if (!(_DWORD)result)
  {
    v12 = a1[103] | 0x20;
    a1[103] = v12;
    result = fchflags(a1[133], v12);
    if ((_DWORD)result)
    {
      if (*__error() != 45)
        goto LABEL_17;
      return 0;
    }
  }
  return result;
}

uint64_t sub_1DB6FD298(_DWORD *a1, char *from, char *to, int a4)
{
  int v7;
  int v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  ssize_t v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  ssize_t v25;
  ssize_t v26;
  ssize_t v27;
  void *v28;
  ssize_t v29;
  size_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const void *v37;
  ssize_t v38;
  uint64_t v39;
  int v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _acl *fd;
  _acl *v73;
  _acl *v74;
  acl_type_t v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *toa[3];

  if (!a4)
  {
    if ((copyfile(from, to, 0, 0x8C0005u) & 0x80000000) == 0)
      return 0;
    v47 = __error();
    archive_set_error(a1, *v47, "Failed to restore metadata", v48, v49, v50, v51, v52, v100);
    return 4294967276;
  }
  memset(toa, 0, sizeof(toa));
  sub_1DB6E323C((uint64_t *)toa, "tar.md.XXXXXX", 0xDuLL);
  v7 = mkstemp(toa[0]);
  if (v7 < 0)
  {
    v41 = __error();
    archive_set_error(a1, *v41, "Failed to mkstemp", v42, v43, v44, v45, v46, v100);
    sub_1DB6E7C3C((uint64_t)toa);
    return 4294967276;
  }
  v8 = v7;
  if (copyfile(from, toa[0], 0, 0x8C0005u) < 0)
  {
    v9 = __error();
    archive_set_error(a1, *v9, "Failed to restore metadata", v10, v11, v12, v13, v14, v100);
    close(v8);
    v8 = -1;
  }
  unlink(toa[0]);
  sub_1DB6E7C3C((uint64_t)toa);
  if (v8 == -1)
    return 4294967276;
  v15 = open(to, 0);
  if (v15 == -1)
  {
    v53 = __error();
    archive_set_error(a1, *v53, "Failed to open the data fork for metadata", v54, v55, v56, v57, v58, v100);
    close(v8);
    return 4294967276;
  }
  v16 = v15;
  v17 = flistxattr(v8, 0, 0, 0);
  if (v17 == -1)
  {
    v60 = __error();
    archive_set_error(a1, *v60, "Failed to read metadata(xattr)", v61, v62, v63, v64, v65, v100);
    v24 = 0;
    goto LABEL_28;
  }
  v18 = v17;
  v24 = (char *)malloc_type_malloc(v17, 0x42F7DDC9uLL);
  if (!v24)
  {
    archive_set_error(a1, 12, "Can't allocate memory for metadata(xattr)", v19, v20, v21, v22, v23, v100);
    v28 = 0;
    v40 = 0;
    v39 = 4294967266;
    goto LABEL_30;
  }
  v25 = flistxattr(v8, v24, v18, 0);
  if (v25 == -1)
  {
    v66 = __error();
    archive_set_error(a1, *v66, "Failed to read metadata(xattr)", v67, v68, v69, v70, v71, v100);
LABEL_28:
    v28 = 0;
LABEL_29:
    v40 = 0;
    v39 = 4294967276;
    goto LABEL_30;
  }
  v26 = v25;
  if (v25 >= 1)
  {
    v27 = 0;
    v28 = 0;
    while (1)
    {
      v29 = fgetxattr(v8, &v24[v27], 0, 0, 0, 0);
      if (v29 == -1)
      {
        v94 = __error();
        archive_set_error(a1, *v94, "Failed to get metadata(xattr)", v95, v96, v97, v98, v99, v100);
        goto LABEL_29;
      }
      v30 = v29;
      v31 = malloc_type_realloc(v28, v29, 0xE53B3490uLL);
      if (!v31)
        break;
      v37 = v31;
      v38 = fgetxattr(v8, &v24[v27], v31, v30, 0, 0);
      if (v38 == -1 || fsetxattr(v16, &v24[v27], v37, v38, 0, 0) == -1)
      {
        v88 = __error();
        archive_set_error(a1, *v88, "Failed to get metadata(xattr)", v89, v90, v91, v92, v93, v100);
        v40 = 0;
        v39 = 4294967276;
        goto LABEL_43;
      }
      v27 = (int)(v27 + strlen(&v24[v27]) + 1);
      v28 = (void *)v37;
      if (v27 >= v26)
      {
        v39 = 0;
        v40 = 1;
LABEL_43:
        v28 = (void *)v37;
        goto LABEL_30;
      }
    }
    archive_set_error(a1, 12, "Failed to get metadata(xattr)", v32, v33, v34, v35, v36, v100);
    free(v28);
    goto LABEL_28;
  }
  v28 = 0;
  v39 = 0;
  v40 = 1;
LABEL_30:
  free(v24);
  free(v28);
  if (v40)
  {
    fd = acl_get_fd(v8);
    if (fd)
    {
      v73 = fd;
      v74 = acl_dup(fd);
      if (acl_set_fd_np(v16, v74, v75) == -1)
      {
        v76 = __error();
        archive_set_error(a1, *v76, "Failed to get metadata(acl)", v77, v78, v79, v80, v81, v100);
        v39 = 4294967276;
      }
      else
      {
        v39 = 0;
      }
      acl_free(v73);
      if (v74)
        acl_free(v74);
    }
    else if (*__error() == 2)
    {
      v39 = 0;
    }
    else
    {
      v82 = __error();
      archive_set_error(a1, *v82, "Failed to get metadata(acl)", v83, v84, v85, v86, v87, v100);
      v39 = 4294967276;
    }
  }
  close(v8);
  close(v16);
  return v39;
}

uint64_t sub_1DB6FD6D0(uint64_t a1, char *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  char *v14;
  int v15;
  int v16;
  int v17;
  _DWORD *v18;
  int v19;
  _DWORD *v20;
  _DWORD *v21;
  char *v22;
  stat v23;

  memset(&v23, 0, sizeof(v23));
  v4 = strrchr(a2, 47);
  v5 = v4;
  if (v4)
    v6 = v4 + 1;
  else
    v6 = a2;
  if (!*v6 || *v6 == 46 && (!v6[1] || v6[1] == 46 && !v6[2]))
  {
    if (v4)
    {
      *v4 = 0;
      result = sub_1DB6FD6D0(a1, a2);
      *v5 = 47;
      return result;
    }
    return 0;
  }
  if (stat(a2, &v23))
  {
    if (*__error() != 2 && *__error() != 20)
    {
      v13 = *__error();
      v22 = a2;
      v14 = "Can't test directory '%s'";
      goto LABEL_26;
    }
    if (v5)
    {
      *v5 = 0;
      result = sub_1DB6FD6D0(a1, a2);
      *v5 = 47;
      if ((_DWORD)result)
        return result;
    }
  }
  else
  {
    if ((v23.st_mode & 0xF000) == 0x4000)
      return 0;
    if ((*(_BYTE *)(a1 + 528) & 8) != 0)
    {
      v22 = a2;
      v14 = "Can't create directory '%s'";
      v18 = (_DWORD *)a1;
      v13 = 17;
      goto LABEL_30;
    }
    if (unlink(a2))
    {
      v13 = *__error();
      v22 = a2;
      v14 = "Can't create directory '%s': Conflicting file cannot be removed";
LABEL_26:
      v18 = (_DWORD *)a1;
LABEL_30:
      archive_set_error(v18, v13, v14, v7, v8, v9, v10, v11, v22);
      return 4294967271;
    }
  }
  v15 = *(unsigned __int16 *)(a1 + 160);
  v16 = ~v15 & 0x3D;
  v17 = v16 | 0x1C0;
  if (mkdir(a2, v16 | 0x1C0))
  {
    if (stat(a2, &v23) || (v23.st_mode & 0xF000) != 0x4000)
    {
      v13 = *__error();
      v22 = a2;
      v14 = "Failed to create dir '%s'";
      goto LABEL_26;
    }
    return 0;
  }
  v19 = ~v15 & 0x1FF;
  if (v17 == v19)
    return 0;
  v20 = sub_1DB6FD8E4(a1, a2);
  if (!v20)
    return 4294967266;
  v21 = v20;
  result = 0;
  v21[40] |= 0x20000000u;
  *((_WORD *)v21 + 32) = v19;
  return result;
}

_DWORD *sub_1DB6FD8E4(uint64_t a1, const char *a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  char *v12;

  v4 = malloc_type_calloc(1uLL, 0xB0uLL, 0x10B004017AD3FEEuLL);
  v10 = v4;
  if (v4)
  {
    *(_QWORD *)v4 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 168) = v4;
    v4[40] = 0;
    *((_WORD *)v4 + 33) = 0;
    *((_QWORD *)v4 + 21) = strdup(a2);
  }
  else
  {
    archive_set_error((_DWORD *)a1, 12, "Can't allocate memory for a fixup", v5, v6, v7, v8, v9, v12);
  }
  return v10;
}

uint64_t sub_1DB6FD96C(uint64_t a1)
{
  archive_entry_mode(*(_QWORD *)(a1 + 448));
  return sub_1DB6FCE30(a1, *(_DWORD *)(a1 + 532), *(const char **)(a1 + 456), 0, 393222);
}

BOOL sub_1DB6FD9A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = archive_entry_mtime(a2);
  v6 = archive_entry_mtime(a2);
  if ((v5 & 0x8000000000000000) == 0)
  {
    if (v6 < 0)
      v6 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v6 = archive_entry_mtime(a2);
  }
  if (v4 < v6)
    return 1;
  v8 = *(_QWORD *)(a1 + 48);
  v9 = archive_entry_mtime(a2);
  v10 = archive_entry_mtime(a2);
  if ((v9 & 0x8000000000000000) == 0)
  {
    if (v10 < 0)
      goto LABEL_12;
    v10 = archive_entry_mtime(a2);
  }
  if (v8 > v10)
    return 0;
LABEL_12:
  v11 = *(_QWORD *)(a1 + 56);
  return v11 < archive_entry_mtime_nsec(a2);
}

uint64_t sub_1DB6FDA58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  *(_QWORD *)(a1 + 504) = 0;
  sub_1DB7303C0((void **)(a1 + 496), "%s.XXXXXX", a3, a4, a5, a6, a7, a8, *(char **)(a1 + 456));
  v9 = *(char **)(a1 + 496);
  *(_QWORD *)(a1 + 488) = v9;
  v10 = sub_1DB730938(v9);
  v11 = v10;
  if ((_DWORD)v10 != -1 && fchmod(v10, *(_WORD *)(a1 + 572) & ~*(_WORD *)(a1 + 160) & 0x1FF) == -1)
  {
    v12 = *__error();
    close(v11);
    *__error() = v12;
    return 0xFFFFFFFFLL;
  }
  return v11;
}

size_t sub_1DB6FDAF0(uint64_t a1, char *__src, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  size_t v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  size_t v19;
  char *v20;
  int v21;
  char *v23;
  _BYTE __srca[1024];
  uint64_t v25;

  v8 = a3;
  v25 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v9 = a1;
    v10 = *(_QWORD *)(a1 + 560);
    if (!v10 || (*(_DWORD *)(a1 + 532) & 0x80000000) != 0)
    {
      v20 = "Attempt to write to an empty file";
      v21 = 0;
      goto LABEL_23;
    }
    if (v10 < 0 || (v12 = *(_QWORD *)(a1 + 536), (uint64_t)(v12 + a3) <= v10) || (v8 = v10 - v12, v10 != v12))
    {
      v13 = *(_QWORD *)(a1 + 536);
      v14 = *(_QWORD *)(a1 + 544);
      v15 = v8;
      do
      {
        v16 = v13 - v14;
        if (v13 < v14)
        {
          archive_set_error((_DWORD *)v9, -1, "Seek failed", a4, a5, a6, a7, a8, v23);
          return -30;
        }
        if (v13 > v14)
        {
          bzero(__srca, 0x400uLL);
          if (v16 >= 1)
          {
            while (1)
            {
              v17 = (unint64_t)v16 >= 0x400 ? 1024 : v16;
              v18 = sub_1DB6FDDF0(v9, __srca, v17);
              if ((v18 & 0x8000000000000000) != 0)
                break;
              v16 -= v18;
              if (v16 < 1)
              {
                v13 = *(_QWORD *)(v9 + 536);
                goto LABEL_17;
              }
            }
            v21 = *__error();
            v20 = "Write failed";
            a1 = v9;
LABEL_23:
            archive_set_error((_DWORD *)a1, v21, v20, a4, a5, a6, a7, a8, v23);
            return -20;
          }
LABEL_17:
          *(_QWORD *)(v9 + 544) = v13;
        }
        v19 = sub_1DB6FDDF0(v9, __src, v15);
        if ((v19 & 0x8000000000000000) != 0)
          return v19;
        __src += v19;
        *(_QWORD *)(v9 + 552) += v19;
        v14 = *(_QWORD *)(v9 + 536) + v19;
        *(_QWORD *)(v9 + 536) = v14;
        *(_QWORD *)(v9 + 544) = v14;
        v13 = v14;
        v15 -= v19;
      }
      while (v15);
    }
  }
  return v8;
}

uint64_t sub_1DB6FDC88(uint64_t a1)
{
  uint64_t *v2;
  int v3;
  int v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  const char *v14;
  uint64_t v15;
  char *v17;
  size_t size;
  const void *v19;
  char *name;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(uint64_t **)(a1 + 448);
  v3 = archive_entry_xattr_reset((uint64_t)v2);
  v22 = 0;
  v23 = 0;
  v21 = 0;
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    v6 = 0;
    do
    {
      v19 = 0;
      name = 0;
      size = 0;
      archive_entry_xattr_next((uint64_t)v2, &name, &v19, &size);
      if (name)
      {
        v12 = *(_DWORD *)(a1 + 532);
        if (v12 < 0)
        {
          v14 = (const char *)archive_entry_pathname(v2);
          v13 = setxattr(v14, name, v19, size, 0, 1);
        }
        else
        {
          v13 = fsetxattr(v12, name, v19, size, 0, 0);
        }
        if (v13 == -1)
        {
          sub_1DB72CE50((uint64_t *)&v21, name);
          sub_1DB72CE60((uint64_t *)&v21, 32);
          if (*__error() != 45 && *__error() != 78)
            v5 = 1;
          v6 = 4294967276;
        }
      }
      --v4;
    }
    while (v4);
    if ((_DWORD)v6 == -20)
    {
      if (v5 && (v15 = v22) != 0)
      {
        --v22;
        v21[v15 - 1] = 0;
        archive_set_error((_DWORD *)a1, -1, "Cannot restore extended attributes: %s", v7, v8, v9, v10, v11, v21);
      }
      else
      {
        archive_set_error((_DWORD *)a1, -1, "Cannot restore extended attributes on this file system.", v7, v8, v9, v10, v11, v17);
      }
      v6 = 4294967276;
    }
  }
  else
  {
    v6 = 0;
  }
  sub_1DB6E7C3C((uint64_t)&v21);
  return v6;
}

size_t sub_1DB6FDDF0(uint64_t a1, void *__src, size_t a3)
{
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  size_t v21;
  size_t v22;
  size_t v23;
  size_t v24;
  size_t v25;
  size_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _DWORD *v34;
  int v35;
  int v36;
  char *v37;
  size_t v38;
  size_t v39;
  char *v40;
  char *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  size_t v53;
  char *v54;
  const void *v55;
  unint64_t v56;
  uint64_t v57;
  size_t v58;
  size_t v59;
  unsigned int v60;
  char *v62;

  if (*(_DWORD *)(a1 + 632) == -1)
  {
    v6 = *(_DWORD **)(a1 + 600);
    if (!v6)
    {
      v6 = malloc_type_malloc(0xEDEuLL, 0xAB44DC34uLL);
      if (!v6)
        goto LABEL_36;
      *(_QWORD *)(a1 + 600) = v6;
    }
    *(_DWORD *)(a1 + 592) = 16;
    *v6 = 1668116582;
    *(_DWORD *)(*(_QWORD *)(a1 + 600) + 4) = 4;
    *(_QWORD *)(*(_QWORD *)(a1 + 600) + 8) = *(_QWORD *)(a1 + 560);
    v12 = *(_QWORD *)(a1 + 560);
    v14 = v12 + 0xFFFF;
    v13 = v12 < -65535;
    v15 = v12 + 131070;
    if (!v13)
      v15 = v14;
    v16 = v15 >> 16;
    v17 = 8 * (v15 >> 16) + 314;
    if (v17 > *(_QWORD *)(a1 + 624))
    {
      v18 = malloc_type_realloc(*(void **)(a1 + 616), v17, 0x8E696786uLL);
      if (!v18)
      {
        v40 = "Can't allocate memory for ResourceFork";
        goto LABEL_38;
      }
      *(_QWORD *)(a1 + 624) = v17;
      *(_QWORD *)(a1 + 616) = v18;
    }
    if (*(_QWORD *)(a1 + 680))
    {
LABEL_13:
      *(_QWORD *)(a1 + 688) = 0x10000;
      *(_QWORD *)(a1 + 696) = *(_QWORD *)(a1 + 560);
      *(_QWORD *)(a1 + 664) = *(_QWORD *)(a1 + 656);
      *(_DWORD *)(a1 + 608) = 2;
      v20 = *(_QWORD *)(a1 + 616);
      *(_QWORD *)(a1 + 640) = v20 + 264;
      *(_WORD *)(v20 + 260) = v16;
      *(_BYTE *)(v20 + 262) = BYTE2(v16);
      *(_BYTE *)(v20 + 263) = BYTE3(v16);
      LODWORD(v20) = 8 * v16 + 264;
      *(_DWORD *)(a1 + 672) = v20;
      *(_DWORD *)(a1 + 676) = v20;
      *(_DWORD *)(a1 + 632) = v16;
      goto LABEL_14;
    }
    v19 = malloc_type_malloc(0x10000uLL, 0x917A90DCuLL);
    if (v19)
    {
      *(_QWORD *)(a1 + 680) = v19;
      goto LABEL_13;
    }
LABEL_36:
    v40 = "Can't allocate memory for decmpfs";
LABEL_38:
    archive_set_error((_DWORD *)a1, 12, v40, v7, v8, v9, v10, v11, v62);
    return -30;
  }
LABEL_14:
  v21 = *(_QWORD *)(a1 + 696);
  if (!v21)
    return a3;
  v22 = *(_QWORD *)(a1 + 688);
  if (v22 >= a3)
    v23 = a3;
  else
    v23 = *(_QWORD *)(a1 + 688);
  if (v23 >= v21)
    v24 = *(_QWORD *)(a1 + 696);
  else
    v24 = v23;
  if (v24 != 0x10000)
  {
    memcpy((void *)(*(_QWORD *)(a1 + 680) - v22 + 0x10000), __src, v24);
    __src = *(void **)(a1 + 680);
    v22 = *(_QWORD *)(a1 + 688);
    v21 = *(_QWORD *)(a1 + 696);
  }
  v25 = v21 - v24;
  v26 = v22 - v24;
  *(_QWORD *)(a1 + 688) = v22 - v24;
  *(_QWORD *)(a1 + 696) = v21 - v24;
  if (v22 == v24 || v21 == v24)
  {
    if (*(_DWORD *)(a1 + 816))
    {
      if (deflateReset((z_streamp)(a1 + 704)))
      {
LABEL_30:
        v33 = "Failed to initialize compressor";
        v34 = (_DWORD *)a1;
        v35 = -1;
LABEL_31:
        archive_set_error(v34, v35, v33, v28, v29, v30, v31, v32, v62);
        return -30;
      }
    }
    else if (deflateInit_((z_streamp)(a1 + 704), *(_DWORD *)(a1 + 820), "1.2.12", 112))
    {
      goto LABEL_30;
    }
    *(_DWORD *)(a1 + 816) = 1;
    v37 = *(char **)(a1 + 648);
    if (v37)
    {
      v38 = *(_QWORD *)(a1 + 656);
      v39 = *(_QWORD *)(a1 + 664);
    }
    else
    {
      v39 = compressBound(0x10000uLL) + 65586;
      v37 = (char *)malloc_type_malloc(v39, 0x35D4634AuLL);
      *(_QWORD *)(a1 + 648) = v37;
      if (!v37)
      {
        v33 = "Can't allocate memory for Resource Fork";
        v34 = (_DWORD *)a1;
        v35 = 12;
        goto LABEL_31;
      }
      *(_QWORD *)(a1 + 656) = v39;
      *(_QWORD *)(a1 + 664) = v39;
      v38 = v39;
    }
    *(_QWORD *)(a1 + 704) = __src;
    *(_DWORD *)(a1 + 712) = 0x10000 - v26;
    v41 = &v37[v38 - v39];
    *(_QWORD *)(a1 + 728) = v41;
    *(_DWORD *)(a1 + 736) = v39;
    do
    {
      v42 = deflate((z_streamp)(a1 + 704), 4);
      if (v42 >= 2)
      {
        archive_set_error((_DWORD *)a1, -1, "Failed to compress data", v43, v44, v45, v46, v47, v62);
        return -25;
      }
    }
    while (!v42);
    v48 = *(_QWORD *)(a1 + 664);
    v49 = v48 - *(unsigned int *)(a1 + 736);
    if (v49 > 0x10000 - v26)
    {
      *v41 = -1;
      memcpy(v41 + 1, __src, 0x10000 - v26);
      v49 = 65537 - v26;
      v48 = *(_QWORD *)(a1 + 664);
    }
    *(_QWORD *)(a1 + 664) = v48 - v49;
    if (*(_DWORD *)(a1 + 632) == 1 && v49 + *(unsigned int *)(a1 + 592) <= 0xEDA)
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 600) + 4) = 3;
      memcpy((void *)(*(_QWORD *)(a1 + 600) + 16), v41, v49);
      *(_DWORD *)(a1 + 592) += v49;
      *(_QWORD *)(a1 + 664) = *(_QWORD *)(a1 + 656);
    }
    else
    {
      v50 = *(_DWORD **)(a1 + 640);
      *(_QWORD *)(a1 + 640) = v50 + 1;
      *v50 = *(_DWORD *)(a1 + 676) - 260;
      v51 = *(_QWORD *)(a1 + 640);
      *(_QWORD *)(a1 + 640) = v51 + 4;
      *(_WORD *)v51 = v49;
      *(_BYTE *)(v51 + 2) = BYTE2(v49);
      *(_BYTE *)(v51 + 3) = BYTE3(v49);
      *(_DWORD *)(a1 + 676) += v49;
      v52 = *(_QWORD *)(a1 + 656);
      v53 = v52 - *(_QWORD *)(a1 + 664);
      if (v53 >= 0x10000)
      {
        while (1)
        {
          v36 = sub_1DB6FE5B4((_DWORD *)a1, *(void **)(a1 + 648), 0x10000uLL, *(_DWORD *)(a1 + 672));
          if (v36)
            return v36;
          *(_DWORD *)(a1 + 672) += 0x10000;
          v53 -= 0x10000;
          v54 = *(char **)(a1 + 648);
          v55 = v54 + 0x10000;
          if (v53 <= 0x10000)
            memcpy(v54, v55, v53);
          else
            memmove(v54, v55, v53);
          if (!(v53 >> 16))
          {
            v52 = *(_QWORD *)(a1 + 656);
            break;
          }
        }
      }
      v56 = v52 - v53;
      *(_QWORD *)(a1 + 664) = v56;
      v25 = *(_QWORD *)(a1 + 696);
      if (v25)
        goto LABEL_70;
      if (v56 >= 0x32)
      {
        v58 = *(_QWORD *)(a1 + 648) + v53;
        *(_OWORD *)v58 = xmmword_1DB74C5B2;
        *(_OWORD *)(v58 + 16) = unk_1DB74C5C2;
        *(_OWORD *)(v58 + 32) = xmmword_1DB74C5D2;
        *(_WORD *)(v58 + 48) = 0;
        v57 = 50;
      }
      else
      {
        v57 = 0;
      }
      v59 = v57 + v53;
      v36 = sub_1DB6FE5B4((_DWORD *)a1, *(void **)(a1 + 648), v59, *(_DWORD *)(a1 + 672));
      v60 = *(_DWORD *)(a1 + 672);
      if (!v36)
      {
        v60 += v59;
        *(_DWORD *)(a1 + 672) = v60;
      }
      *(_QWORD *)(a1 + 664) = *(_QWORD *)(a1 + 656);
      if ((uint64_t)((v60 >> 12) + ((unint64_t)(v60 >> 12) >> 7)) > *(uint64_t *)(a1 + 560) >> 12)
      {
        v36 = sub_1DB6FE3A8(a1);
LABEL_68:
        if (v36 < 0)
          return v36;
        v25 = *(_QWORD *)(a1 + 696);
LABEL_70:
        *(_QWORD *)(a1 + 688) = 0x10000;
        goto LABEL_71;
      }
      if (v36)
        return v36;
      v36 = sub_1DB6FE518(a1);
      if (v36)
        return v36;
    }
    v36 = sub_1DB6FE310(a1);
    if (v36)
      return v36;
    v36 = sub_1DB6FD15C((_DWORD *)a1);
    goto LABEL_68;
  }
LABEL_71:
  if (v25)
    return v24;
  return a3;
}

uint64_t sub_1DB6FE310(uint64_t a1)
{
  int v2;
  uint64_t result;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = fsetxattr(*(_DWORD *)(a1 + 532), "com.apple.decmpfs", *(const void **)(a1 + 600), *(unsigned int *)(a1 + 592), 0, 0);
  result = 0;
  if (v2 < 0)
  {
    v4 = __error();
    archive_set_error((_DWORD *)a1, *v4, "Cannot restore xattr:%s", v5, v6, v7, v8, v9, "com.apple.decmpfs");
    if (*(_DWORD *)(*(_QWORD *)(a1 + 600) + 4) == 4)
      fremovexattr(*(_DWORD *)(a1 + 532), "com.apple.ResourceFork", 32);
    return 4294967276;
  }
  return result;
}

uint64_t sub_1DB6FE3A8(uint64_t a1)
{
  uint64_t v2;
  int v3;
  _DWORD *v4;
  size_t v5;
  ssize_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const Bytef *v12;
  int64_t v13;
  char *v14;
  ssize_t v15;
  BOOL v16;
  int v17;
  uint64_t result;
  int v19;
  char *v20;
  _DWORD *v21;
  char *v22;
  uLongf destLen;

  v2 = *(_QWORD *)(a1 + 616);
  v3 = *(_DWORD *)(v2 + 260);
  if (!v3)
  {
LABEL_12:
    v17 = fremovexattr(*(_DWORD *)(a1 + 532), "com.apple.ResourceFork", 0);
    result = 0;
    if (v17 != -1)
      return result;
    v19 = *__error();
    v20 = "Failed to remove resource fork";
    goto LABEL_15;
  }
  v4 = (_DWORD *)(v2 + 264);
  while (2)
  {
    v5 = v4[1];
    v6 = fgetxattr(*(_DWORD *)(a1 + 532), "com.apple.ResourceFork", *(void **)(a1 + 648), v5, *v4 + 260, 0);
    if (v6 == v5)
    {
      --v3;
      v4 += 2;
      v12 = *(const Bytef **)(a1 + 648);
      if (*v12 != 255)
      {
        destLen = 0x10000;
        if (!uncompress(*(Bytef **)(a1 + 680), &destLen, v12, v5))
        {
          v13 = destLen;
          v14 = *(char **)(a1 + 680);
          goto LABEL_8;
        }
        v20 = "Failed to decompress resource fork";
        v21 = (_DWORD *)a1;
        v19 = -1;
        goto LABEL_16;
      }
      v13 = (v5 - 1);
      v14 = (char *)(v12 + 1);
      do
      {
LABEL_8:
        v15 = write(*(_DWORD *)(a1 + 532), v14, v13);
        if (v15 < 0)
        {
          v19 = *__error();
          v20 = "Write failed";
          goto LABEL_15;
        }
        v14 += v15;
        v16 = v13 <= v15;
        v13 -= v15;
      }
      while (!v16);
      if (v3)
        continue;
      goto LABEL_12;
    }
    break;
  }
  if (v6 < 0)
    v19 = *__error();
  else
    v19 = -1;
  v20 = "Failed to read resource fork";
LABEL_15:
  v21 = (_DWORD *)a1;
LABEL_16:
  archive_set_error(v21, v19, v20, v7, v8, v9, v10, v11, v22);
  return 4294967276;
}

uint64_t sub_1DB6FE518(uint64_t a1)
{
  _BYTE *v1;
  int v2;
  size_t v3;

  v1 = *(_BYTE **)(a1 + 616);
  v2 = *(_DWORD *)(a1 + 672);
  v3 = (8 * *(_DWORD *)(a1 + 632) + 264);
  *(_DWORD *)v1 = 0x10000;
  v1[4] = (v2 - 50) >> 24;
  v1[5] = (v2 - 50) >> 16;
  v1[6] = (unsigned __int16)(v2 - 50) >> 8;
  v1[7] = v2 - 50;
  v1[8] = (v2 - 306) >> 24;
  v1[9] = (v2 - 306) >> 16;
  v1[10] = (unsigned __int16)(v2 - 306) >> 8;
  v1[11] = v2 - 50;
  *((_DWORD *)v1 + 3) = 838860800;
  *((_OWORD *)v1 + 1) = 0u;
  *((_OWORD *)v1 + 2) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  *((_OWORD *)v1 + 11) = 0u;
  *((_OWORD *)v1 + 12) = 0u;
  *((_OWORD *)v1 + 13) = 0u;
  *((_OWORD *)v1 + 14) = 0u;
  *((_OWORD *)v1 + 15) = 0u;
  *((_DWORD *)v1 + 64) = bswap32(v2 - 310);
  return sub_1DB6FE5B4((_DWORD *)a1, v1, v3, 0);
}

uint64_t sub_1DB6FE5B4(_DWORD *a1, void *value, size_t size, u_int32_t position)
{
  uint64_t result;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (fsetxattr(a1[133], "com.apple.ResourceFork", value, size, position, a1[152]) < 0)
  {
    v6 = __error();
    archive_set_error(a1, *v6, "Cannot restore xattr: %s at %u pos %u bytes", v7, v8, v9, v10, v11, "com.apple.ResourceFork");
    return 4294967276;
  }
  else
  {
    result = 0;
    a1[152] &= ~2u;
  }
  return result;
}

uint64_t archive_read_support_compression_program(_DWORD *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return archive_read_support_filter_program_signature(a1, a2, 0, 0, a5, a6, a7, a8);
}

uint64_t archive_read_support_filter_program(_DWORD *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return archive_read_support_filter_program_signature(a1, a2, 0, 0, a5, a6, a7, a8);
}

uint64_t archive_read_support_filter_program_signature(_DWORD *a1, const char *a2, const void *a3, size_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  void **v13;
  char *v14;
  void ***v15;
  void *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void ***v24;

  v24 = 0;
  sub_1DB6F7FD0(a1, &v24, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (v12)
    return 4294967266;
  v13 = (void **)malloc_type_calloc(1uLL, 0x28uLL, 0x1090040CBB9B1E3uLL);
  if (!v13 || (v14 = strdup(a2), (v13[1] = v14) == 0))
  {
    sub_1DB6FE764(v13);
    archive_set_error(a1, 12, "Can't allocate memory", v18, v19, v20, v21, v22, v23);
    return 4294967266;
  }
  v15 = v24;
  if (a3)
  {
    if (a4)
    {
      v13[3] = (void *)a4;
      v16 = malloc_type_malloc(a4, 0x80A1A4D9uLL);
      v13[2] = v16;
      memcpy(v16, a3, a4);
    }
  }
  result = 0;
  *v15 = v13;
  v15[2] = (void **)sub_1DB6FEB8C;
  v15[3] = (void **)sub_1DB6FEBF8;
  v15[4] = 0;
  v15[5] = (void **)sub_1DB6FEC08;
  return result;
}

void sub_1DB6FE764(void **a1)
{
  if (a1)
  {
    free(a1[1]);
    free(a1[2]);
    free(a1);
  }
}

uint64_t sub_1DB6FE79C(uint64_t a1, char *__s)
{
  size_t v4;
  pid_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;

  v4 = strlen(__s);
  v5 = (pid_t *)malloc_type_calloc(1uLL, 0x40uLL, 0x1010040EF3A7E9FuLL);
  v6 = malloc_type_malloc(0x10000uLL, 0x20CE736uLL);
  v12 = v6;
  if (!v5 || !v6)
  {
    archive_set_error(*(_DWORD **)(a1 + 24), 12, "Can't allocate input data", v7, v8, v9, v10, v11, v24);
    if (!v5)
      goto LABEL_10;
    goto LABEL_9;
  }
  if (!sub_1DB6E3190((void **)v5, v4 + 10))
  {
    archive_set_error(*(_DWORD **)(a1 + 24), 12, "Can't allocate input data", v13, v14, v15, v16, v17, v24);
LABEL_9:
    sub_1DB6E7C3C((uint64_t)v5);
    free(v5);
LABEL_10:
    free(v12);
    return 4294967266;
  }
  *((_QWORD *)v5 + 1) = 0;
  sub_1DB6E323C((uint64_t *)v5, "Program: ", 9uLL);
  sub_1DB72CE50((uint64_t *)v5, __s);
  *(_DWORD *)(a1 + 104) = 4;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)v5;
  *((_QWORD *)v5 + 6) = v12;
  *((_QWORD *)v5 + 7) = 0x10000;
  result = sub_1DB70D400((uint64_t)__s, v5 + 9, v5 + 10, v5 + 6);
  if ((_DWORD)result)
  {
    free(*((void **)v5 + 6));
    sub_1DB6E7C3C((uint64_t)v5);
    free(v5);
    archive_set_error(*(_DWORD **)(a1 + 24), 22, "Can't initialize filter; unable to run program \"%s\"",
      v19,
      v20,
      v21,
      v22,
      v23,
      __s);
    return 4294967266;
  }
  *(_QWORD *)(a1 + 88) = v5;
  *(_QWORD *)(a1 + 40) = sub_1DB6FE920;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = sub_1DB6FEB48;
  return result;
}

uint64_t sub_1DB6FE920(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  pid_t *v10;
  size_t v11;
  ssize_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  ssize_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  size_t __nbyte;

  v3 = *(_QWORD *)(a1 + 88);
  if (*(_DWORD *)(v3 + 40) != -1)
  {
    v5 = 0;
    v6 = *(char **)(v3 + 48);
LABEL_3:
    v7 = *(_QWORD *)(v3 + 56);
    v8 = v7 > v5;
    v9 = v7 - v5;
    if (!v8)
      goto LABEL_33;
    v10 = *(pid_t **)(a1 + 88);
    __nbyte = 0;
    if (v9 >= 0x7FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    while (1)
    {
LABEL_8:
      while (1)
      {
        v12 = read(v10[10], v6, v11);
        if (v12 == -1)
          break;
        if (v12 > 0)
        {
          v5 += v12;
          v6 += v12;
          if (*(_DWORD *)(v3 + 40) != -1)
            goto LABEL_3;
          goto LABEL_33;
        }
        if (!v12)
          goto LABEL_32;
LABEL_15:
        if (v10[9] == -1)
        {
          sub_1DB70D664(-1, v10[10]);
        }
        else
        {
          v19 = (const void *)sub_1DB6E22F4(*(_QWORD *)(a1 + 16), 1uLL, &__nbyte, v14, v15, v16, v17, v18);
          if (v19)
          {
            do
            {
              v20 = write(v10[9], v19, __nbyte);
              if (v20 != -1)
              {
                if (v20 < 1)
                {
                  close(v10[9]);
                  v10[9] = -1;
                  fcntl(v10[10], 4, 0);
                }
                else
                {
                  sub_1DB6E26F8(*(_QWORD *)(a1 + 16), v20, v21, v22, v23, v24, v25, v26);
                }
                goto LABEL_8;
              }
            }
            while (*__error() == 4);
            v27 = *__error();
            v28 = v10[9];
            if (v27 == 35)
            {
              sub_1DB70D664(v28, v10[10]);
              continue;
            }
            close(v28);
            v10[9] = -1;
            fcntl(v10[10], 4, 0);
            if (*__error() != 32)
              return -30;
          }
          else
          {
            close(v10[9]);
            v10[9] = -1;
            fcntl(v10[10], 4, 0);
            if ((__nbyte & 0x8000000000000000) != 0)
              return -30;
          }
        }
      }
      if (*__error() != 4)
      {
        if (*__error() == 32)
        {
LABEL_32:
          if ((sub_1DB6FEC24(a1, v10, v13, v14, v15, v16, v17, v18) & 0x80000000) == 0)
            goto LABEL_33;
          return -30;
        }
        if (*__error() != 35)
          return -30;
        goto LABEL_15;
      }
    }
  }
  v5 = 0;
LABEL_33:
  *a2 = *(_QWORD *)(v3 + 48);
  return v5;
}

uint64_t sub_1DB6FEB48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(a1 + 88);
  v9 = sub_1DB6FEC24(a1, (pid_t *)v8, a3, a4, a5, a6, a7, a8);
  free(*(void **)(v8 + 48));
  sub_1DB6E7C3C(v8);
  free((void *)v8);
  return v9;
}

size_t sub_1DB6FEB8C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  size_t v9;
  size_t result;
  const void *v11;
  size_t v12;

  v8 = *a1;
  v9 = *(_QWORD *)(*a1 + 24);
  if (v9)
  {
    result = sub_1DB6E22F4(a2, v9, 0, a4, a5, a6, a7, a8);
    if (!result)
      return result;
    v11 = *(const void **)(v8 + 16);
    v12 = *(_QWORD *)(v8 + 24);
    if (!memcmp((const void *)result, v11, v12))
      return (8 * v12);
    return 0;
  }
  if (*(_DWORD *)(v8 + 32))
    return 0;
  *(_DWORD *)(v8 + 32) = 1;
  return 0x7FFFFFFFLL;
}

uint64_t sub_1DB6FEBF8(uint64_t a1)
{
  return sub_1DB6FE79C(a1, *(char **)(**(_QWORD **)(a1 + 8) + 8));
}

uint64_t sub_1DB6FEC08(void ***a1)
{
  sub_1DB6FE764(*a1);
  return 0;
}

uint64_t sub_1DB6FEC24(uint64_t a1, pid_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int v11;
  pid_t v12;
  pid_t v13;
  int v14;
  _DWORD *v15;
  char *v16;
  char *v18;

  v10 = a2[9];
  if (v10 != -1)
  {
    close(v10);
    a2[9] = -1;
  }
  v11 = a2[10];
  if (v11 != -1)
  {
    close(v11);
    a2[10] = -1;
  }
  if (a2[6])
  {
    do
    {
      v12 = waitpid(a2[6], a2 + 7, 0);
      a2[8] = v12;
    }
    while (v12 == -1 && *__error() == 4);
    a2[6] = 0;
  }
  if (a2[8] < 0)
  {
    v15 = *(_DWORD **)(a1 + 24);
    v16 = "Child process exited badly";
    goto LABEL_17;
  }
  v13 = a2[7];
  v14 = v13 & 0x7F;
  if ((v13 & 0x7F) == 0)
  {
    if (!BYTE1(v13))
      return 0;
    v15 = *(_DWORD **)(a1 + 24);
    v18 = (char *)BYTE1(v13);
    v16 = "Child process exited with status %d";
LABEL_17:
    archive_set_error(v15, -1, v16, a4, a5, a6, a7, a8, v18);
    return 4294967276;
  }
  if (v14 != 13)
  {
    if (v14 != 127)
      archive_set_error(*(_DWORD **)(a1 + 24), -1, "Child process exited with signal %d", a4, a5, a6, a7, a8, (char *)(v13 & 0x7F));
    return 4294967276;
  }
  return 0;
}

uint64_t sub_1DB6FED34(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v15;

  v6 = archive_entry_sourcepath(a2);
  if (!v6 || (v7 = v6, *(_QWORD *)(a1 + 176)) && (*(unsigned int (**)(void))(a1 + 200))())
  {
    v7 = archive_entry_pathname(a2);
    if (!v7)
    {
      archive_set_error((_DWORD *)a1, -1, "Couldn't determine path", v8, v9, v10, v11, v12, v15);
      return v7;
    }
  }
  if (a3)
  {
    if ((*a3 & 0x80000000) != 0)
    {
      v13 = *(_QWORD *)(a1 + 176);
      if (v13)
      {
        if (*(_BYTE *)(a1 + 169))
        {
LABEL_11:
          *a3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 184))(v13, v7, 4);
          return v7;
        }
        if (archive_entry_filetype((uint64_t)a2) != 40960)
        {
          v13 = *(_QWORD *)(a1 + 176);
          goto LABEL_11;
        }
      }
    }
  }
  return v7;
}

uint64_t archive_read_disk_entry_from_file(int *a1, uint64_t *a2, int a3, stat *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *disk_uname;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *disk_gname;
  uint64_t st_flags;
  size_t st_size;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  ssize_t v43;
  size_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  _DWORD *v52;
  int v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  ssize_t v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  ssize_t v70;
  const char *v71;
  int v72;
  int64_t v73;
  size_t v74;
  void *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _DWORD *v82;
  char *v83;
  ssize_t v84;
  int *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  const char *v92;
  int v93;
  int v94;
  int *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  size_t v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  int *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  int v121;
  char *v122;
  off_t v123;
  uint64_t v124;
  off_t v125;
  off_t v126;
  off_t v127;
  uint64_t v128;
  off_t v129;
  BOOL v130;
  uint64_t v131;
  off_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  int *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *path;
  stat v155;
  int fd;
  char *to[3];
  stat v158;

  v11 = (uint64_t)a1;
  fd = a3;
  if (sub_1DB6E0594(a1, 195932357, 0x7FFF, "archive_read_disk_entry_from_file", a5, a6, a7, a8) == -30)
    return 4294967266;
  archive_clear_error(v11);
  v12 = (const char *)archive_entry_sourcepath(a2);
  if (!v12)
    v12 = (const char *)archive_entry_pathname(a2);
  memset(&v155, 0, sizeof(v155));
  if (!*(_QWORD *)(v11 + 176))
  {
    if (a4)
    {
LABEL_7:
      archive_entry_copy_stat(a2, (uint64_t)a4);
      goto LABEL_8;
    }
    if (a3 < 0)
    {
      if (*(_BYTE *)(v11 + 169))
      {
        a4 = &v155;
        if (!stat(v12, &v155))
          goto LABEL_7;
        v53 = *__error();
        v153 = (char *)v12;
        v51 = "Can't stat %s";
      }
      else
      {
        a4 = &v155;
        if (!lstat(v12, &v155))
          goto LABEL_7;
        v53 = *__error();
        v153 = (char *)v12;
        v51 = "Can't lstat %s";
      }
    }
    else
    {
      a4 = &v155;
      if (!fstat(a3, &v155))
        goto LABEL_7;
      v53 = *__error();
      v51 = "Can't fstat";
    }
    v52 = (_DWORD *)v11;
    goto LABEL_52;
  }
LABEL_8:
  v13 = archive_entry_uid((uint64_t)a2);
  disk_uname = (char *)archive_read_disk_uname(v11, v13, v14, v15, v16, v17, v18, v19);
  if (disk_uname)
    archive_entry_copy_uname((uint64_t)a2, disk_uname);
  v21 = archive_entry_gid((uint64_t)a2);
  disk_gname = (char *)archive_read_disk_gname(v11, v21, v22, v23, v24, v25, v26, v27);
  if (disk_gname)
    archive_entry_copy_gname((uint64_t)a2, disk_gname);
  if ((*(_BYTE *)(v11 + 208) & 0x40) == 0)
  {
    st_flags = a4->st_flags;
    if ((_DWORD)st_flags)
      archive_entry_set_fflags((uint64_t)a2, st_flags, 0);
  }
  if ((a4->st_mode & 0xF000) == 0xA000)
  {
    st_size = a4->st_size;
    v31 = (char *)malloc_type_malloc(st_size + 1, 0x99265E7DuLL);
    if (v31)
    {
      v37 = v31;
      if (*(_QWORD *)(v11 + 176))
      {
        v38 = (*(uint64_t (**)(void))(v11 + 192))();
        v39 = readlinkat(v38, v12, v37, st_size);
        if ((v39 & 0x80000000) == 0)
        {
LABEL_19:
          v37[v39] = 0;
          archive_entry_set_symlink((uint64_t)a2, v37);
          free(v37);
          goto LABEL_20;
        }
      }
      else
      {
        v39 = readlink(v12, v31, st_size);
        if ((v39 & 0x80000000) == 0)
          goto LABEL_19;
      }
      v54 = __error();
      archive_set_error((_DWORD *)v11, *v54, "Couldn't read link data", v55, v56, v57, v58, v59, v153);
      free(v37);
      return 4294967271;
    }
    v51 = "Couldn't read link data";
    v52 = (_DWORD *)v11;
    v53 = 12;
LABEL_52:
    archive_set_error(v52, v53, v51, v32, v33, v34, v35, v36, v153);
    return 4294967271;
  }
LABEL_20:
  v40 = *(_DWORD *)(v11 + 208);
  if ((v40 & 0x20) != 0)
  {
    v41 = 0;
    if ((v40 & 0x10) != 0)
      goto LABEL_81;
  }
  else
  {
    v41 = sub_1DB73BD94(v11, a2, &fd);
    v40 = *(_DWORD *)(v11 + 208);
    if ((v40 & 0x10) != 0)
      goto LABEL_81;
  }
  v42 = fd;
  if ((fd & 0x80000000) == 0)
  {
    path = 0;
LABEL_26:
    v43 = flistxattr(v42, 0, 0, 0);
    goto LABEL_27;
  }
  path = (char *)sub_1DB6FED34(v11, a2, &fd);
  if (!path)
    goto LABEL_77;
  v42 = fd;
  if ((fd & 0x80000000) == 0)
    goto LABEL_26;
  v43 = listxattr(path, 0, 0, *(_BYTE *)(v11 + 169) == 0);
LABEL_27:
  v44 = v43;
  if (!v43)
    goto LABEL_75;
  if (v43 == -1)
  {
    if (*__error() != 45 && *__error() != 78)
    {
      v45 = __error();
      archive_set_error((_DWORD *)v11, *v45, "Couldn't list extended attributes", v46, v47, v48, v49, v50, v153);
LABEL_77:
      v69 = -20;
      goto LABEL_78;
    }
    goto LABEL_75;
  }
  v60 = (char *)malloc_type_malloc(v43, 0x4D24EF72uLL);
  if (v60)
  {
    v61 = v60;
    if (fd < 0)
      v62 = listxattr(path, v60, v44, *(_BYTE *)(v11 + 169) == 0);
    else
      v62 = flistxattr(fd, v60, v44, 0);
    v70 = v62;
    if (v62 == -1)
    {
      v85 = __error();
      archive_set_error((_DWORD *)v11, *v85, "Couldn't retrieve extended attributes", v86, v87, v88, v89, v90, v153);
      free(v61);
      goto LABEL_77;
    }
    if (v62 >= 1)
    {
      v71 = v61;
      while (1)
      {
        v72 = fd;
        v73 = fd < 0 ? getxattr(path, v71, 0, 0, 0, *(_BYTE *)(v11 + 169) == 0) : fgetxattr(fd, v71, 0, 0, 0, 0);
        v74 = v73;
        if (v73 == -1)
          break;
        if (v73 < 1)
        {
          v75 = 0;
        }
        else
        {
          v75 = malloc_type_malloc(v73, 0x2EEC70EEuLL);
          if (!v75)
          {
            v76 = *__error();
            v82 = (_DWORD *)v11;
            v83 = "Out of memory";
LABEL_72:
            archive_set_error(v82, v76, v83, v77, v78, v79, v80, v81, v153);
            goto LABEL_73;
          }
        }
        if (v72 < 0)
          v84 = getxattr(path, v71, v75, v74, 0, *(_BYTE *)(v11 + 169) == 0);
        else
          v84 = fgetxattr(v72, v71, v75, v74, 0, 0);
        if (v84 == -1)
        {
          v76 = *__error();
          v82 = (_DWORD *)v11;
          v83 = "Couldn't read extended attribute";
          goto LABEL_72;
        }
        archive_entry_xattr_add_entry((uint64_t)a2, v71, v75, v84);
        free(v75);
LABEL_73:
        v71 += strlen(v71) + 1;
        if (v71 - v61 >= v70)
          goto LABEL_74;
      }
      v76 = *__error();
      v82 = (_DWORD *)v11;
      v83 = "Couldn't query extended attribute";
      goto LABEL_72;
    }
LABEL_74:
    free(v61);
LABEL_75:
    v69 = 0;
    goto LABEL_78;
  }
  v63 = __error();
  archive_set_error((_DWORD *)v11, *v63, "Out of memory", v64, v65, v66, v67, v68, v153);
  v69 = -30;
LABEL_78:
  if (v69 < v41)
    v41 = v69;
  v40 = *(_DWORD *)(v11 + 208);
LABEL_81:
  if ((v40 & 4) == 0)
    goto LABEL_105;
  v91 = (const char *)sub_1DB6FED34(v11, a2, 0);
  if (!v91)
    goto LABEL_86;
  v92 = v91;
  memset(&v158, 0, sizeof(v158));
  v93 = copyfile(v91, 0, 0, 0xD0005u);
  v94 = v93;
  if (!v93)
    goto LABEL_103;
  if (v93 == -1)
  {
    v95 = __error();
    archive_set_error((_DWORD *)v11, *v95, "Could not check extended attributes", v96, v97, v98, v99, v100, v153);
LABEL_86:
    v94 = -20;
    goto LABEL_103;
  }
  if (issetugid())
    v101 = 0;
  else
    v101 = getenv("TMPDIR");
  if (v101)
    v102 = v101;
  else
    v102 = "/tmp/";
  memset(to, 0, sizeof(to));
  v103 = strlen(v102);
  sub_1DB6E323C((uint64_t *)to, v102, v103);
  sub_1DB72CE50((uint64_t *)to, "tar.md.XXXXXX");
  v104 = mkstemp(to[0]);
  if ((v104 & 0x80000000) == 0)
  {
    v105 = v104;
    sub_1DB6DD880(v104);
    if (copyfile(v92, to[0], 0, 0x4C0005u))
    {
      v106 = *__error();
      v112 = "Could not pack extended attributes";
    }
    else
    {
      if (!fstat(v105, &v158))
      {
        v119 = malloc_type_malloc(v158.st_size, 0x25ABE08BuLL);
        if (v119)
        {
          v132 = v158.st_size;
          if (v132 == read(v105, v119, v158.st_size))
          {
            archive_entry_copy_mac_metadata((uint64_t)a2, v119, v158.st_size);
            v94 = 0;
            goto LABEL_101;
          }
          v140 = *__error();
          v146 = "Could not read extended attributes into memory";
        }
        else
        {
          v140 = *__error();
          v146 = "Could not allocate memory for extended attributes";
        }
        archive_set_error((_DWORD *)v11, v140, v146, v141, v142, v143, v144, v145, v153);
LABEL_100:
        v94 = -20;
LABEL_101:
        close(v105);
        unlink(to[0]);
        goto LABEL_102;
      }
      v106 = *__error();
      v112 = "Could not check size of extended attributes";
    }
    archive_set_error((_DWORD *)v11, v106, v112, v107, v108, v109, v110, v111, v153);
    v119 = 0;
    goto LABEL_100;
  }
  v113 = __error();
  archive_set_error((_DWORD *)v11, *v113, "Could not open extended attribute file", v114, v115, v116, v117, v118, v153);
  v119 = 0;
  v94 = -20;
LABEL_102:
  sub_1DB6E7C3C((uint64_t)to);
  free(v119);
LABEL_103:
  if (v94 < v41)
    v41 = v94;
LABEL_105:
  if (archive_entry_filetype((uint64_t)a2) != 0x8000
    || archive_entry_size((uint64_t)a2) < 1
    || archive_entry_hardlink((uint64_t)a2))
  {
    goto LABEL_108;
  }
  v121 = fd;
  if (fd < 0)
  {
    v122 = (char *)sub_1DB6FED34(v11, a2, &fd);
    v121 = fd;
    if (fd < 0)
    {
      if (v122)
      {
        if (pathconf(v122, 27) < 1)
          goto LABEL_108;
        v131 = open(v122, 16777220);
        fd = v131;
        if ((v131 & 0x80000000) == 0)
        {
          sub_1DB6DD880(v131);
          v123 = 0;
LABEL_120:
          v124 = archive_entry_size((uint64_t)a2);
          if (v124 >= 1)
          {
            v125 = v124;
            v126 = 0;
            while (1)
            {
              v127 = lseek(fd, v126, 4);
              if (v127 == -1)
                break;
              v128 = v127;
              v129 = lseek(fd, v127, 3);
              if (v129 == -1)
              {
                if (*__error() == 6 && lseek(fd, 0, 2) != -1)
                  goto LABEL_141;
                v133 = *__error();
                v139 = "lseek(SEEK_DATA) failed";
LABEL_148:
                archive_set_error((_DWORD *)v11, v133, v139, v134, v135, v136, v137, v138, v153);
                LODWORD(v11) = -25;
                goto LABEL_142;
              }
              v126 = v129;
              if (v128)
                v130 = 0;
              else
                v130 = v129 == v125;
              if (!v130)
              {
                archive_entry_sparse_add_entry(a2, v128, v129 - v128);
                if (v126 < v125)
                  continue;
              }
              goto LABEL_141;
            }
            if (*__error() == 6)
            {
              if (!archive_entry_sparse_count((uint64_t)a2)
                && !lseek(fd, 0, 3)
                && lseek(fd, 0, 2) == v125)
              {
                archive_entry_sparse_add_entry(a2, 0, 0);
              }
              goto LABEL_141;
            }
            v133 = *__error();
            v139 = "lseek(SEEK_HOLE) failed";
            goto LABEL_148;
          }
LABEL_141:
          LODWORD(v11) = 0;
LABEL_142:
          lseek(fd, v123, 0);
          goto LABEL_109;
        }
        v147 = __error();
      }
      LODWORD(v11) = -25;
      goto LABEL_109;
    }
  }
  if (fpathconf(v121, 27) >= 1)
  {
    v123 = lseek(fd, 0, 1);
    if (v123)
      lseek(fd, 0, 0);
    goto LABEL_120;
  }
LABEL_108:
  LODWORD(v11) = 0;
LABEL_109:
  if ((int)v11 >= v41)
    v11 = v41;
  else
    v11 = v11;
  if (fd != a3)
    close(fd);
  return v11;
}

uint64_t archive_write_set_format_warc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  void (*v10)(uint64_t);
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  time_t v18;
  char *v19;

  result = sub_1DB6E0594((int *)a1, -1329217314, 1, "archive_write_set_format_warc", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    v10 = *(void (**)(uint64_t))(a1 + 328);
    if (v10)
      v10(a1);
    v11 = malloc_type_malloc(0x20uLL, 0x100004060DA0407uLL);
    if (v11)
    {
      v17 = v11;
      *v11 &= ~1u;
      v18 = time(0);
      result = 0;
      *((_QWORD *)v17 + 1) = v18;
      *((_WORD *)v17 + 8) = 0;
      *((_DWORD *)v17 + 5) = v18;
      *(_QWORD *)(a1 + 304) = sub_1DB6FF994;
      *(_QWORD *)(a1 + 312) = sub_1DB6FFB50;
      *(_QWORD *)(a1 + 320) = sub_1DB6FFB9C;
      *(_QWORD *)(a1 + 328) = sub_1DB6FFBA4;
      *(_QWORD *)(a1 + 288) = sub_1DB6FF92C;
      *(_QWORD *)(a1 + 296) = sub_1DB6FFBD0;
      *(_DWORD *)(a1 + 16) = 983040;
      *(_QWORD *)(a1 + 264) = v17;
      *(_QWORD *)(a1 + 272) = "WARC/1.0";
      *(_QWORD *)(a1 + 24) = "WARC/1.0";
    }
    else
    {
      archive_set_error((_DWORD *)a1, 12, "Can't allocate warc data", v12, v13, v14, v15, v16, v19);
      return 4294967266;
    }
  }
  return result;
}

uint64_t sub_1DB6FF92C(uint64_t a1, char *__s1, const char *a3)
{
  _BYTE *v4;
  uint64_t result;

  v4 = *(_BYTE **)(a1 + 264);
  if (strcmp(__s1, "omit-warcinfo") || a3 && strcmp(a3, "true"))
    return 4294967276;
  result = 0;
  *v4 |= 1u;
  return result;
}

uint64_t sub_1DB6FF994(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v18;
  _DWORD *v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *(_QWORD *)(a1 + 264);
  v26 = 0;
  v27 = 0;
  v28 = 0;
  if ((*(_BYTE *)v4 & 1) == 0)
  {
    v5 = *(_QWORD *)(v4 + 8);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v21 = xmmword_1EA322630;
    v22 = 0;
    v23 = v5;
    v24 = v5;
    v25 = unk_1EA322658;
    if ((sub_1DB6FFC14(&v26, (unsigned int *)&v21) & 0x8000000000000000) == 0)
    {
      sub_1DB6E323C(&v26, "software: libarchive/3.5.3\r\nformat: WARC file version 1.0\r\n", 0x3BuLL);
      sub_1DB6E323C(&v26, "\r\n\r\n", 4uLL);
      sub_1DB7322A8(a1, v26, v27);
    }
    *(_BYTE *)v4 |= 1u;
    sub_1DB6E7C3C((uint64_t)&v26);
  }
  if (archive_entry_pathname(a2))
  {
    v11 = archive_entry_filetype((uint64_t)a2);
    *(_WORD *)(v4 + 16) = v11;
    *(_QWORD *)(v4 + 24) = 0;
    if (v11 != 0x8000)
    {
      sub_1DB7355D0((_DWORD *)a1, a2);
      return 4294967271;
    }
    v12 = archive_entry_pathname(a2);
    v13 = *(_QWORD *)(v4 + 8);
    v14 = archive_entry_mtime((uint64_t)a2);
    v15 = archive_entry_size((uint64_t)a2);
    v27 = 0;
    v28 = 0;
    *((_QWORD *)&v25 + 1) = v15;
    v26 = 0;
    *(_QWORD *)&v21 = 3;
    *((_QWORD *)&v21 + 1) = v12;
    v22 = 0;
    v23 = v13;
    v24 = v14;
    *(_QWORD *)&v25 = 0;
    v16 = sub_1DB6FFC14(&v26, (unsigned int *)&v21);
    if ((v16 & 0x8000000000000000) == 0)
    {
      sub_1DB7322A8(a1, v26, v16);
      *(_QWORD *)(v4 + 24) = v15;
      sub_1DB6E7C3C((uint64_t)&v26);
      return 0;
    }
    v18 = "cannot archive file";
    v19 = (_DWORD *)a1;
    v20 = 79;
  }
  else
  {
    v18 = "Invalid filename";
    v19 = (_DWORD *)a1;
    v20 = 22;
  }
  archive_set_error(v19, v20, v18, v6, v7, v8, v9, v10, (char *)v21);
  return 4294967276;
}

uint64_t sub_1DB6FFB50(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;

  v3 = a3;
  v4 = *(_QWORD *)(a1 + 264);
  if (*(__int16 *)(v4 + 16) == -32768)
  {
    v5 = *(_QWORD *)(v4 + 24);
    if (v5 < a3)
      v3 = v5;
    v6 = sub_1DB7322A8(a1, a2, v3);
    if (v6)
      return v6;
  }
  return v3;
}

uint64_t sub_1DB6FFB9C()
{
  return 0;
}

uint64_t sub_1DB6FFBA4(uint64_t a1)
{
  free(*(void **)(a1 + 264));
  *(_QWORD *)(a1 + 264) = 0;
  return 0;
}

uint64_t sub_1DB6FFBD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 264);
  if (*(__int16 *)(v1 + 16) != -32768 || (result = sub_1DB7322A8(a1, (uint64_t)"\r\n\r\n", 4), !(_DWORD)result))
  {
    result = 0;
    *(_WORD *)(v1 + 16) = 0;
  }
  return result;
}

uint64_t sub_1DB6FFC14(uint64_t *a1, unsigned int *a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unsigned int v26;
  unsigned __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char __str[48];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (*a2 - 4 < 0xFFFFFFFD)
    return -1;
  a1[1] = 0;
  sub_1DB6E323C(a1, "WARC/1.0\r\n", 0xAuLL);
  sub_1DB7303C0((void **)a1, "WARC-Type: %s\r\n", v5, v6, v7, v8, v9, v10, *((char **)&unk_1EA322668 + *a2));
  if (*((_QWORD *)a2 + 1))
  {
    v11 = strchr(*((char **)a2 + 1), 58);
    if (v11 && v11[1] == 47 && v11[2] == 47)
      v18 = (char *)&unk_1DB74C63C;
    else
      v18 = "file://";
    sub_1DB7303C0((void **)a1, "WARC-Target-URI: %s%s\r\n", v12, v13, v14, v15, v16, v17, v18);
  }
  sub_1DB6FFE14(a1, "WARC-Date: %Y-%m-%dT%H:%M:%SZ\r\n", *((_QWORD *)a2 + 3));
  sub_1DB6FFE14(a1, "Last-Modified: %Y-%m-%dT%H:%M:%SZ\r\n", *((_QWORD *)a2 + 4));
  v25 = (char *)*((_QWORD *)a2 + 2);
  if (!v25)
  {
    v34 = 0;
    v35 = 0;
    sub_1DB746CE8(&v34, 0x10uLL);
    v26 = HIDWORD(v34);
    v27 = v35;
    HIDWORD(v34) = HIDWORD(v34) & 0xFFFF0FFF | 0x4000;
    LODWORD(v35) = v35 & 0x3FFFFFFF | 0x80000000;
    v25 = __str;
    snprintf(__str, 0x30uLL, "<urn:uuid:%08x-%04x-%04x-%04x-%04x%08x>", v34, HIWORD(v26), WORD2(v34), WORD1(v35), v27, HIDWORD(v35));
    *((_QWORD *)a2 + 2) = __str;
  }
  sub_1DB7303C0((void **)a1, "WARC-Record-ID: %s\r\n", v19, v20, v21, v22, v23, v24, v25);
  if (*((_QWORD *)a2 + 5))
    sub_1DB7303C0((void **)a1, "Content-Type: %s\r\n", v28, v29, v30, v31, v32, v33, *((char **)a2 + 5));
  sub_1DB7303C0((void **)a1, "Content-Length: %ju\r\n", v28, v29, v30, v31, v32, v33, *((char **)a2 + 6));
  sub_1DB6E323C(a1, "\r\n", 2uLL);
  if ((unint64_t)a1[1] > 0x1FF)
    return -1;
  else
    return a1[1];
}

tm *sub_1DB6FFE14(uint64_t *a1, const char *a2, time_t a3)
{
  tm *result;
  size_t v6;
  tm v7;
  time_t v8;
  char v9[100];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  memset(&v7, 0, sizeof(v7));
  result = gmtime_r(&v8, &v7);
  if (result)
  {
    v6 = strftime(v9, 0x63uLL, a2, result);
    return (tm *)sub_1DB6E323C(a1, v9, v6);
  }
  return result;
}

uint64_t archive_write_set_format_iso9660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  void (*v10)(uint64_t);
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  const char *v20;
  size_t v21;
  char *v22;
  unsigned int v23;
  _QWORD *v24;
  char *v25;

  result = sub_1DB6E0594((int *)a1, -1329217314, 1, "archive_write_set_format_iso9660", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    v10 = *(void (**)(uint64_t))(a1 + 328);
    if (v10)
      v10(a1);
    v11 = malloc_type_calloc(1uLL, 0x10378uLL, 0x10F004021E729E2uLL);
    if (v11)
    {
      v17 = (uint64_t)v11;
      *(_QWORD *)v11 = 0;
      v18 = (char *)(v11 + 16568);
      v11[2] = -1;
      *((_QWORD *)v11 + 2) = 0;
      v11[52] = 0;
      v11[48] = 0;
      *((_QWORD *)v11 + 25) = 0;
      *((_QWORD *)v11 + 29) = 0;
      v11[64] = 0;
      v11[60] = 1;
      *((_QWORD *)v11 + 17) = 0;
      *((_QWORD *)v11 + 18) = v11 + 34;
      *((_QWORD *)v11 + 19) = 0;
      *((_QWORD *)v11 + 20) = v11 + 38;
      *((_QWORD *)v11 + 31) = 0;
      sub_1DB6E8388((_QWORD *)v11 + 21, (uint64_t)off_1EA321B90);
      *(_QWORD *)(v17 + 720) = 0;
      *(_DWORD *)(v17 + 728) = 1;
      *(_QWORD *)v18 = 0x10000;
      *((_DWORD *)v18 + 2) = 1;
      *(_OWORD *)(v17 + 72) = 0u;
      *(_OWORD *)(v17 + 88) = 0u;
      *(_OWORD *)(v17 + 104) = 0u;
      *(_QWORD *)(v17 + 304) = 0;
      *(_QWORD *)(v17 + 312) = 0;
      *(_QWORD *)(v17 + 296) = 0;
      *(_QWORD *)(v17 + 66296) = 0;
      *(_QWORD *)(v17 + 66304) = 0;
      *(_QWORD *)(v17 + 66288) = 0;
      sub_1DB6E323C((uint64_t *)(v17 + 296), "CDROM", 5uLL);
      *(_OWORD *)(v17 + 320) = 0u;
      *(_OWORD *)(v17 + 336) = 0u;
      *(_OWORD *)(v17 + 352) = 0u;
      *(_OWORD *)(v17 + 368) = 0u;
      *(_QWORD *)(v17 + 384) = 0;
      v19 = (char *)archive_version_string();
      if (archive_version_string())
      {
        v20 = archive_version_string();
        v21 = strlen(v20);
      }
      else
      {
        v21 = 0;
      }
      sub_1DB6E323C((uint64_t *)(v17 + 368), v19, v21);
      *(_OWORD *)(v17 + 392) = 0u;
      *(_OWORD *)(v17 + 408) = 0u;
      *(_OWORD *)(v17 + 424) = 0u;
      *(_OWORD *)(v17 + 440) = 0u;
      *(_QWORD *)(v17 + 456) = 0;
      *(_OWORD *)(v17 + 66312) = 0u;
      *(_OWORD *)(v17 + 66328) = 0u;
      sub_1DB6E323C((uint64_t *)(v17 + 66312), "boot.catalog", 0xCuLL);
      *(_DWORD *)(v18 + 138) = 0x40000;
      *(_OWORD *)(v17 + 66344) = 0u;
      *(_OWORD *)(v17 + 66360) = 0u;
      *(_BYTE *)(v17 + 66376) = 0;
      *(_QWORD *)(v17 + 66392) = 0;
      *(_QWORD *)(v17 + 66400) = 0;
      *(_QWORD *)(v17 + 66384) = 0;
      *(_DWORD *)(v17 + 696) = 0;
      *(_QWORD *)(v17 + 552) = 0;
      *(_QWORD *)(v17 + 544) = 0;
      *(_DWORD *)(v17 + 712) = 9;
      *(_OWORD *)(v17 + 584) = 0u;
      *(_OWORD *)(v17 + 600) = 0u;
      *(_OWORD *)(v17 + 616) = 0u;
      *(_OWORD *)(v17 + 632) = 0u;
      *(_OWORD *)(v17 + 648) = 0u;
      *(_OWORD *)(v17 + 664) = 0u;
      v23 = *((_DWORD *)v18 + 36) & 0xFFFFE000;
      *(_OWORD *)(v17 + 680) = 0u;
      *((_DWORD *)v18 + 36) = v23 & 0xF8003FFB | 0x13A4004;
      v24 = sub_1DB70018C(a1, v17, "");
      *(_QWORD *)(v17 + 184) = v24;
      if (v24)
      {
        v24[4] = v24;
        *(_QWORD *)(v17 + 24) = v24;
        *(_QWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 32) = 0;
        sub_1DB6E3190((void **)(v17 + 32), 1uLL);
        result = 0;
        **(_BYTE **)(v17 + 32) = 0;
        *(_QWORD *)(v17 + 120) = 0;
        *(_QWORD *)(v17 + 128) = 0;
        *(_QWORD *)(a1 + 264) = v17;
        *(_QWORD *)(a1 + 272) = "iso9660";
        *(_QWORD *)(a1 + 304) = sub_1DB700980;
        *(_QWORD *)(a1 + 312) = sub_1DB700BDC;
        *(_QWORD *)(a1 + 288) = sub_1DB700278;
        *(_QWORD *)(a1 + 296) = sub_1DB700C5C;
        *(_QWORD *)(a1 + 320) = sub_1DB700E30;
        *(_QWORD *)(a1 + 328) = sub_1DB7022BC;
        *(_DWORD *)(a1 + 16) = 0x40000;
        *(_QWORD *)(a1 + 24) = "ISO9660";
        return result;
      }
      free((void *)v17);
      v22 = "Can't allocate memory";
    }
    else
    {
      v22 = "Can't allocate iso9660 data";
    }
    archive_set_error((_DWORD *)a1, 12, v22, v12, v13, v14, v15, v16, v25);
    return 4294967266;
  }
  return result;
}

_QWORD *sub_1DB70018C(uint64_t a1, uint64_t a2, char *a3)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uid_t v9;
  uint64_t v10;
  gid_t v11;

  result = sub_1DB70264C(a1, 0);
  if (result)
  {
    v7 = result;
    archive_entry_set_pathname(result[4], a3);
    archive_entry_unset_mtime(v7[4]);
    archive_entry_unset_atime(v7[4]);
    archive_entry_unset_ctime(v7[4]);
    v8 = v7[4];
    v9 = getuid();
    archive_entry_set_uid(v8, v9);
    v10 = v7[4];
    v11 = getgid();
    archive_entry_set_gid(v10, v11);
    archive_entry_set_mode(v7[4], 16749);
    archive_entry_set_nlink(v7[4], 2);
    if ((int)sub_1DB7026F0(a1, (uint64_t)v7) > -21)
    {
      *v7 = 0;
      **(_QWORD **)(a2 + 144) = v7;
      *(_QWORD *)(a2 + 144) = v7;
      result = sub_1DB702C54((uint64_t)v7);
      if (result)
        *((_BYTE *)result + 232) |= 3u;
    }
    else
    {
      sub_1DB702BF4((uint64_t)v7);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1DB700278(uint64_t a1, char *__s1, unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t result;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  size_t v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  int v31;
  int v32;

  v6 = *(_QWORD *)(a1 + 264);
  result = 4294967276;
  switch(*__s1)
  {
    case 'a':
      if (!strcmp(__s1, "abstract-file"))
      {
        result = sub_1DB7024C8((_DWORD *)a1, (uint64_t *)(v6 + 416), (char *)0x25, (int)__s1, (char *)a3);
        v10 = *(_DWORD *)(v6 + 66416) & 0xFFFFFFFE | ((_DWORD)result == 0);
        goto LABEL_71;
      }
      if (!strcmp(__s1, "application-id"))
      {
        result = sub_1DB7024C8((_DWORD *)a1, (uint64_t *)(v6 + 368), (char *)0x80, (int)__s1, (char *)a3);
        v8 = *(_DWORD *)(v6 + 66416) & 0xFFFFFFFD | (2 * ((_DWORD)result == 0));
      }
      else
      {
        result = strcmp(__s1, "allow-vernum");
        if ((_DWORD)result)
          return 4294967276;
        v8 = *(_DWORD *)(v6 + 66416) & 0xFFFFFFFB | (4 * (a3 != 0));
      }
      goto LABEL_67;
    case 'b':
      if (!strcmp(__s1, "biblio-file"))
      {
        result = sub_1DB7024C8((_DWORD *)a1, (uint64_t *)(v6 + 440), (char *)0x25, (int)__s1, (char *)a3);
        v8 = *(_DWORD *)(v6 + 66416) & 0xFFFFFFF7 | (8 * ((_DWORD)result == 0));
        goto LABEL_67;
      }
      if (strcmp(__s1, "boot"))
      {
        if (!strcmp(__s1, "boot-catalog"))
        {
          result = sub_1DB7024C8((_DWORD *)a1, (uint64_t *)(v6 + 66312), (char *)0x400, (int)__s1, (char *)a3);
          v8 = *(_DWORD *)(v6 + 66416) & 0xFFFFFFDF | (32 * ((_DWORD)result == 0));
          goto LABEL_67;
        }
        result = strcmp(__s1, "boot-info-table");
        if (!(_DWORD)result)
        {
          v8 = *(_DWORD *)(v6 + 66416) & 0xFFFFFFBF | ((a3 != 0) << 6);
          goto LABEL_67;
        }
        if (strcmp(__s1, "boot-load-seg"))
        {
          if (strcmp(__s1, "boot-load-size"))
          {
            if (strcmp(__s1, "boot-type"))
              return 4294967276;
            if (!a3)
            {
LABEL_91:
              return 4294967271;
            }
            result = strcmp((const char *)a3, "no-emulation");
            if ((_DWORD)result)
            {
              result = strcmp((const char *)a3, "fd");
              if ((_DWORD)result)
              {
                result = strcmp((const char *)a3, "hard-disk");
                if ((_DWORD)result)
                  goto LABEL_91;
                v10 = *(_DWORD *)(v6 + 66416) | 0x600;
              }
              else
              {
                v10 = *(_DWORD *)(v6 + 66416) & 0xFFFFF9FF | 0x400;
              }
            }
            else
            {
              v10 = *(_DWORD *)(v6 + 66416) & 0xFFFFF9FF | 0x200;
            }
            goto LABEL_71;
          }
          v32 = 0;
          result = sub_1DB702568((_DWORD *)a1, &v32, __s1, a3, v16, v17, v18, v19);
          *(_DWORD *)(v6 + 66416) = *(_DWORD *)(v6 + 66416) & 0xFFFFFEFF | (((_DWORD)result == 0) << 8);
          if (!(_DWORD)result)
          {
            *(_WORD *)(v6 + 66412) = v32;
            return result;
          }
          return 4294967266;
        }
        v24 = *(_DWORD *)(v6 + 66416);
        *(_DWORD *)(v6 + 66416) = v24 & 0xFFFFFF7F;
        if (!a3)
          goto LABEL_91;
        v25 = *a3;
        if (v25 == 48)
        {
          if ((a3[1] | 0x20) != 0x78)
          {
            LOBYTE(v25) = 48;
LABEL_81:
            v27 = 0;
            v28 = a3 + 1;
            while (1)
            {
              v29 = (char)v25;
              if ((v25 - 65) >= 6u)
              {
                if (((char)v25 - 97) >= 6)
                {
                  if (((char)v25 - 48) > 9)
                    goto LABEL_91;
                  v30 = -48;
                }
                else
                {
                  v30 = -87;
                }
              }
              else
              {
                v30 = -55;
              }
              v27 = v30 + v29 + 16 * v27;
              if (v27 >= 0x10000)
                break;
              v31 = *v28++;
              LOBYTE(v25) = v31;
              if (!v31)
                goto LABEL_90;
            }
            return 4294967266;
          }
          v26 = a3[2];
          a3 += 2;
          v25 = v26;
        }
        if (!v25)
        {
          LOWORD(v27) = 0;
LABEL_90:
          result = 0;
          *(_WORD *)(v6 + 66410) = v27;
          v10 = v24 | 0x80;
          goto LABEL_71;
        }
        goto LABEL_81;
      }
      v22 = *(_DWORD *)(v6 + 66416);
      if (a3)
      {
        *(_DWORD *)(v6 + 66416) = v22 | 0x10;
        *(_QWORD *)(v6 + 66352) = 0;
        v23 = strlen((const char *)a3);
        sub_1DB6E323C((uint64_t *)(v6 + 66344), a3, v23);
        return 0;
      }
      result = 0;
      v10 = v22 & 0xFFFFFFEF;
      goto LABEL_71;
    case 'c':
      if (strcmp(__s1, "compression-level"))
      {
        if (strcmp(__s1, "copyright-file"))
          return 4294967276;
        result = sub_1DB7024C8((_DWORD *)a1, (uint64_t *)(v6 + 392), (char *)0x25, (int)__s1, (char *)a3);
        v8 = *(_DWORD *)(v6 + 66416) & 0xFFFFEFFF | (((_DWORD)result == 0) << 12);
        goto LABEL_67;
      }
      if (a3)
      {
        v21 = (char)*a3 - 48;
        if (v21 <= 9 && !a3[1])
        {
          result = 0;
          *(_DWORD *)(v6 + 712) = v21;
          v10 = *(_DWORD *)(v6 + 66416) | 0x800;
          goto LABEL_71;
        }
      }
      goto LABEL_91;
    case 'd':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'k':
    case 'm':
    case 'n':
    case 'o':
    case 'q':
    case 's':
    case 't':
    case 'u':
      return result;
    case 'i':
      if (strcmp(__s1, "iso-level"))
        return 4294967276;
      if (!a3)
        goto LABEL_91;
      if (a3[1])
        goto LABEL_91;
      v20 = *a3;
      if ((v20 - 49) > 3)
        goto LABEL_91;
      result = 0;
      v8 = *(_DWORD *)(v6 + 66416) & 0xFFFE3FFF | ((v20 & 7) << 14);
      goto LABEL_67;
    case 'j':
      if (strcmp(__s1, "joliet"))
        return 4294967276;
      if (a3)
      {
        result = strcmp((const char *)a3, "1");
        if ((_DWORD)result)
        {
          result = strcmp((const char *)a3, "long");
          if ((_DWORD)result)
            goto LABEL_91;
          v10 = *(_DWORD *)(v6 + 66416) & 0xFFF9FFFF | 0x40000;
        }
        else
        {
          v10 = *(_DWORD *)(v6 + 66416) & 0xFFF9FFFF | 0x20000;
        }
      }
      else
      {
        result = 0;
        v10 = *(_DWORD *)(v6 + 66416) & 0xFFF9FFFF;
      }
      goto LABEL_71;
    case 'l':
      result = strcmp(__s1, "limit-depth");
      if ((_DWORD)result)
      {
        result = strcmp(__s1, "limit-dirs");
        if ((_DWORD)result)
          return 4294967276;
        v8 = *(_DWORD *)(v6 + 66416) & 0xFFEFFFFF | ((a3 != 0) << 20);
      }
      else
      {
        v8 = *(_DWORD *)(v6 + 66416) & 0xFFF7FFFF | ((a3 != 0) << 19);
      }
      goto LABEL_67;
    case 'p':
      result = strcmp(__s1, "pad");
      if ((_DWORD)result)
      {
        if (strcmp(__s1, "publisher"))
          return 4294967276;
        result = sub_1DB7024C8((_DWORD *)a1, (uint64_t *)(v6 + 320), (char *)0x80, (int)__s1, (char *)a3);
        v8 = *(_DWORD *)(v6 + 66416) & 0xFFBFFFFF | (((_DWORD)result == 0) << 22);
      }
      else
      {
        v8 = *(_DWORD *)(v6 + 66416) & 0xFFDFFFFF | ((a3 != 0) << 21);
      }
LABEL_67:
      *(_DWORD *)(v6 + 66416) = v8;
      return result;
    case 'r':
      if (strcmp(__s1, "rockridge") && strcmp(__s1, "Rockridge"))
        return 4294967276;
      if (a3)
      {
        result = strcmp((const char *)a3, "1");
        if (!(_DWORD)result)
        {
LABEL_47:
          v10 = *(_DWORD *)(v6 + 66416) & 0xFE7FFFFF | 0x1000000;
          goto LABEL_71;
        }
        result = strcmp((const char *)a3, "strict");
        if ((_DWORD)result)
        {
          result = strcmp((const char *)a3, "useful");
          if ((_DWORD)result)
            goto LABEL_91;
          goto LABEL_47;
        }
        v10 = *(_DWORD *)(v6 + 66416) & 0xFE7FFFFF | 0x800000;
      }
      else
      {
        result = 0;
        v10 = *(_DWORD *)(v6 + 66416) & 0xFE7FFFFF;
      }
LABEL_71:
      *(_DWORD *)(v6 + 66416) = v10;
      return result;
    case 'v':
      if (strcmp(__s1, "volume-id"))
        return 4294967276;
      result = sub_1DB7024C8((_DWORD *)a1, (uint64_t *)(v6 + 296), (char *)0x20, (int)__s1, (char *)a3);
      v8 = *(_DWORD *)(v6 + 66416) & 0xFDFFFFFF | (((_DWORD)result == 0) << 25);
      goto LABEL_67;
    default:
      if (*__s1 != 122)
        return result;
      if (strcmp(__s1, "zisofs"))
        return 4294967276;
      v9 = *(_DWORD *)(v6 + 66416);
      result = 0;
      if (a3)
        v10 = v9 | 0x4000000;
      else
        v10 = v9 & 0xFBFFFFFF;
      goto LABEL_71;
  }
}

uint64_t sub_1DB700980(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  char *v26;
  _DWORD *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;

  v4 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_DWORD *)(v4 + 64) = 0;
  if (archive_entry_filetype((uint64_t)a2) == 40960 && (*(_WORD *)(v4 + 66418) & 0x180) == 0)
  {
    archive_set_error((_DWORD *)a1, -1, "Ignore symlink file.", v5, v6, v7, v8, v9, v33);
    goto LABEL_8;
  }
  if (archive_entry_filetype((uint64_t)a2) == 0x8000 && archive_entry_size((uint64_t)a2) >= 0x100000000)
  {
    if (((*(_DWORD *)(v4 + 66416) >> 14) & 7u) <= 2)
    {
      archive_set_error((_DWORD *)a1, -1, "Ignore over %lld bytes file. This file too large.", v10, v11, v12, v13, v14, (char *)0x100000000);
LABEL_8:
      *(_QWORD *)(v4 + 16) = 0;
      return 4294967276;
    }
    *(_DWORD *)(v4 + 64) = 1;
  }
  v16 = sub_1DB70264C(a1, a2);
  if (!v16)
    goto LABEL_21;
  v22 = v16;
  v23 = sub_1DB7026F0(a1, (uint64_t)v16);
  if ((int)v23 <= -21 || !*((_QWORD *)v22 + 6) && !*((_QWORD *)v22 + 9))
  {
    sub_1DB702BF4((uint64_t)v22);
    return v23;
  }
  *(_QWORD *)v22 = 0;
  **(_QWORD **)(v4 + 144) = v22;
  *(_QWORD *)(v4 + 144) = v22;
  v24 = sub_1DB702C54((uint64_t)v22);
  v34 = v24;
  if (!v24)
  {
LABEL_21:
    v26 = "Can't allocate data";
    v27 = (_DWORD *)a1;
    v28 = 12;
    goto LABEL_22;
  }
  v25 = *(_DWORD *)(v24[3] + 136);
  if (v25 > *(_DWORD *)(v4 + 728))
    *(_DWORD *)(v4 + 728) = v25;
  result = sub_1DB702CEC(a1, (uint64_t *)&v34);
  if (!(_DWORD)result)
  {
    if ((char *)v34[3] != v22)
      return 0;
    v29 = archive_entry_filetype(*((_QWORD *)v22 + 4));
    result = v23;
    if (v29 == 0x8000)
    {
      *(_QWORD *)(v4 + 16) = v22;
      if (archive_entry_nlink(*((_QWORD *)v22 + 4)) >= 2 && sub_1DB7030A8(a1, (uint64_t)v22))
        return 4294967266;
      if ((*(_DWORD *)(v4 + 8) & 0x80000000) == 0
        || (v30 = sub_1DB730874(0), *(_DWORD *)(v4 + 8) = v30, (v30 & 0x80000000) == 0))
      {
        *((_QWORD *)v22 + 18) = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 66288)
                              - *(_QWORD *)(*(_QWORD *)(a1 + 264) + 66272)
                              + 0x10000;
        *((_QWORD *)v22 + 22) = v22 + 144;
        v31 = sub_1DB703184(a1, (uint64_t)v22);
        if (v31 >= (int)v23)
          v32 = v23;
        else
          v32 = v31;
        *(_QWORD *)(v4 + 56) = archive_entry_size(*((_QWORD *)v22 + 4));
        return v32;
      }
      v28 = *__error();
      v26 = "Couldn't create temporary file";
      v27 = (_DWORD *)a1;
LABEL_22:
      archive_set_error(v27, v28, v26, v17, v18, v19, v20, v21, v33);
      return 4294967266;
    }
  }
  return result;
}

int64_t sub_1DB700BDC(uint64_t a1, unsigned int *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  int64_t result;

  v3 = *(_QWORD *)(a1 + 264);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4 || archive_entry_filetype(*(_QWORD *)(v4 + 32)) != 0x8000)
    return 0;
  v13 = *(_QWORD *)(v3 + 56) >= a3 ? a3 : *(_QWORD *)(v3 + 56);
  if (!v13)
    return 0;
  result = sub_1DB70379C(a1, a2, v13, v8, v9, v10, v11, v12);
  if (result >= 1)
    *(_QWORD *)(v3 + 56) -= result;
  return result;
}

uint64_t sub_1DB700C5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t i;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t __buf;
  int v33;
  __int16 v34;
  __int16 v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 264);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2
    || archive_entry_filetype(*(_QWORD *)(v2 + 32)) != 0x8000
    || !*(_QWORD *)(*(_QWORD *)(v1 + 16) + 152))
  {
    return 0;
  }
  for (i = *(_QWORD *)(v1 + 56); i; *(_QWORD *)(v1 + 56) = i)
  {
    v10 = i >= *(_QWORD *)(a1 + 192) ? *(_QWORD *)(a1 + 192) : i;
    if ((sub_1DB70379C(a1, *(unsigned int **)(a1 + 184), v10, v4, v5, v6, v7, v8) & 0x8000000000000000) != 0)
      return 4294967266;
    i = *(_QWORD *)(v1 + 56) - v10;
  }
  if ((*(_BYTE *)(v1 + 472) & 2) != 0)
  {
    v16 = *(_QWORD *)(a1 + 264);
    v17 = *(_QWORD *)(v16 + 16);
    archive_entry_set_size(*(_QWORD *)(v17 + 32), *(_QWORD *)(v16 + 568));
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 66288);
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 66272);
    __buf = 0x7D6DBC99653E437;
    v33 = *(_DWORD *)(v17 + 196);
    v34 = *(_WORD *)(v17 + 192);
    v35 = 0;
    sub_1DB703E74(a1, *(_QWORD *)(v17 + 144), v20, v21, v22, v23, v24, v25);
    if (sub_1DB703D94(a1, (char *)&__buf, 0x10uLL)
      || sub_1DB703D94(a1, *(char **)(v16 + 544), 4 * *(int *)(v16 + 560)))
    {
      return 4294967266;
    }
    sub_1DB703E74(a1, v18 - v19 + 0x10000, v26, v27, v28, v29, v30, v31);
  }
  v11 = *(_QWORD *)(v1 + 16);
  v12 = *(_QWORD *)(v11 + 176);
  v13 = *(_QWORD *)(v12 + 8);
  if (v13 <= 0)
    v14 = -(-v13 & 0x7FF);
  else
    v14 = *(_QWORD *)(v12 + 8) & 0x7FFLL;
  if (!v14)
    goto LABEL_17;
  if (!sub_1DB703514(a1, (char *)(2048 - v14)))
  {
    v11 = *(_QWORD *)(v1 + 16);
    v12 = *(_QWORD *)(v11 + 176);
    v13 = *(_QWORD *)(v12 + 8);
LABEL_17:
    result = 0;
    *(_DWORD *)(v12 + 16) = (unint64_t)(v13 + 2047) >> 11;
    *(_QWORD *)(v11 + 8) = 0;
    **(_QWORD **)(v1 + 160) = v11;
    *(_QWORD *)(v1 + 160) = v11 + 8;
    return result;
  }
  return 4294967266;
}

uint64_t sub_1DB700E30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  off_t v27;
  unint64_t v28;
  size_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  off_t v34;
  size_t v35;
  uint64_t v36;
  ssize_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char *v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  const void *v50;
  size_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  BOOL v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  size_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t i;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int *v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  _QWORD *j;
  int v112;
  int v113;
  int v114;
  _QWORD *v115;
  _QWORD *v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  uint64_t v125;
  int v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  char *v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  int v141;
  _DWORD *v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  BOOL v146;
  uint64_t v147;
  uint64_t v148;
  _DWORD *v149;
  int v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uid_t v154;
  uint64_t v155;
  gid_t v156;
  _QWORD *v157;
  int v158;
  int v159;
  int v160;
  _BOOL4 v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  int v174;
  int v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  char *v181;
  unsigned int v182;
  size_t v183;
  ssize_t v184;
  char *v185;
  ssize_t k;
  BOOL v187;
  int v188;
  uint64_t v189;
  int v190;
  int v191;
  int v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  z_streamp strm;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  int v232[2];
  int v233;
  uint64_t v234;
  uint64_t v235;
  __int128 __buf;
  __int128 v237;
  void *v238[2];
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  uint64_t v248;

  v0 = MEMORY[0x1E0C80A78]();
  v1 = v0;
  v248 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(v0 + 264);
  v235 = v2 + 66272;
  if (*(_QWORD *)(v2 + 66272))
  {
    v3 = sub_1DB703668(v0);
    if ((v3 & 0x80000000) != 0)
      return v3;
  }
  time((time_t *)v2);
  v4 = *(_DWORD *)(v2 + 66416);
  if ((v4 & 0x10) == 0)
  {
    if ((v4 & 0x60000) != 0)
    {
      v5 = 0;
      v6 = *(_QWORD *)(v2 + 184);
      while (1)
      {
        v7 = sub_1DB702C54(*(_QWORD *)(v6 + 24));
        if (!v7)
          goto LABEL_206;
        v13 = v7;
        if (v5)
        {
          sub_1DB703328(v5, (uint64_t)v7);
        }
        else
        {
          *(_QWORD *)(v2 + 232) = v7;
          v7[4] = v7;
          v5 = (uint64_t)v7;
        }
        if ((*(_BYTE *)(v6 + 232) & 2) == 0 || (v14 = *(_QWORD *)(v6 + 40)) == 0)
        {
          v15 = *(_QWORD *)(v6 + 32);
          if (v6 == v15)
          {
            v14 = v6;
            v13 = (_QWORD *)v5;
          }
          else
          {
            v13 = (_QWORD *)v5;
            v14 = v6;
            while (!*(_QWORD *)(v14 + 112))
            {
              v14 = v15;
              v13 = (_QWORD *)v13[4];
              v15 = *(_QWORD *)(v15 + 32);
              if (v14 == v15)
                goto LABEL_19;
            }
            v14 = *(_QWORD *)(v14 + 112);
          }
        }
LABEL_19:
        v6 = v14;
        v5 = (uint64_t)v13;
        if (v14 == *(_QWORD *)(v14 + 32))
        {
          if (*(_QWORD *)(v2 + 120))
            break;
          v115 = sub_1DB72D08C(v1, "UTF-16BE", 1);
          *(_QWORD *)(v2 + 120) = v115;
          if (v115)
          {
            v116 = sub_1DB6E3A78(v1, "UTF-16BE", 1);
            *(_QWORD *)(v2 + 128) = v116;
            if (v116)
              break;
          }
          return 4294967266;
        }
      }
    }
    v234 = v2;
    v16 = *(_QWORD *)(v1 + 264);
    LODWORD(__buf) = 0;
    v17 = *(_DWORD *)(v16 + 728);
    if (v17 >= 8 && ((v18 = *(_DWORD *)(v16 + 66416), (v18 & 0x80000) == 0) || (v18 & 0x1C000) == 0x10000))
    {
      v19 = v16 + 184;
      v21 = v17 + 1;
      v20 = (_DWORD *)v1;
    }
    else
    {
      v19 = v16 + 184;
      v20 = (_DWORD *)v1;
      v21 = 8;
    }
    v54 = sub_1DB705594(v20, v19, v21);
    if ((v54 & 0x80000000) != 0)
      return v54;
    v76 = (int *)(v16 + 66416);
    if ((*(_BYTE *)(v16 + 66418) & 6) == 0
      || (v3 = sub_1DB705594((_DWORD *)v1, v16 + 232, *(_DWORD *)(v16 + 728) + 1), (v3 & 0x80000000) == 0))
    {
      sub_1DB70561C(v16 + 184, 0, 0);
      v77 = *v76;
      if ((*v76 & 0x60000) != 0)
      {
        sub_1DB70561C(v16 + 232, 0, 0);
        v77 = *v76;
      }
      if ((v77 & 0x1800000) != 0)
      {
        v78 = *(_QWORD *)(v1 + 264);
        v79 = *(_QWORD *)(v78 + 200);
        if (*(_DWORD *)(v79 + 248))
        {
          v80 = v78 + 184;
          v81 = *(_QWORD *)(v78 + 184);
          v82 = sub_1DB73322C((uint64_t *)(v81 + 64), (uint64_t)"rr_moved");
          v83 = v82;
          if (v82)
          {
            v84 = *(_QWORD *)(v81 + 40);
            if (v82 != v84)
            {
              do
              {
                v85 = v84;
                v84 = *(_QWORD *)(v84 + 112);
              }
              while (v84 != v82);
              v86 = *(_QWORD *)(v82 + 112);
              *(_QWORD *)(v85 + 112) = v86;
              v87 = v85 + 112;
              if (!v86)
                *(_QWORD *)(v81 + 48) = v87;
              --*(_DWORD *)(v81 + 56);
              if ((*(_BYTE *)(v82 + 232) & 2) != 0)
              {
                v88 = *(_QWORD *)(v81 + 80);
                do
                {
                  v89 = v88;
                  v88 = *(_QWORD *)(v88 + 120);
                }
                while (v88 != v82);
                v90 = *(_QWORD *)(v82 + 120);
                *(_QWORD *)(v89 + 120) = v90;
                v91 = v89 + 120;
                if (!v90)
                  *(_QWORD *)(v81 + 88) = v91;
                --*(_DWORD *)(v81 + 96);
              }
              sub_1DB7334FC(v81 + 64, (_QWORD *)v82);
              sub_1DB705B40(v81, v83);
            }
          }
          if (*(_QWORD *)(v79 + 224))
          {
            v92 = *(_QWORD *)(v79 + 224);
            v229 = v79;
LABEL_107:
            *(_QWORD *)v232 = *(_QWORD *)(v79 + 232) - 128;
            while (1)
            {
              if ((*(_BYTE *)(v92 + 232) & 2) != 0)
              {
                v93 = *(_QWORD *)(v92 + 80);
                if (v93)
                  break;
              }
LABEL_121:
              v92 = *(_QWORD *)(v92 + 128);
              if (!v92)
              {
                v79 = v229;
                v92 = *(_QWORD *)(*(_QWORD *)v232 + 128);
                if (!v92)
                  goto LABEL_125;
                if (*(_QWORD *)(v229 + 224))
                  goto LABEL_107;
                *(_QWORD *)v232 = 0;
              }
            }
            while (1)
            {
              if (!v83)
              {
                v94 = *(_QWORD *)(v1 + 264);
                v95 = *(_QWORD *)(v94 + 184);
                v96 = sub_1DB70018C(v1, v94, "rr_moved");
                if (!v96)
                  goto LABEL_206;
                v83 = (uint64_t)v96;
                sub_1DB705B40(v95, (uint64_t)v96);
                v97 = *(_QWORD *)(*(_QWORD *)(v95 + 24) + 32);
                v98 = archive_entry_nlink(v97);
                archive_entry_set_nlink(v97, v98 + 1);
                v99 = *(_QWORD *)(v94 + 200);
                *(_QWORD *)(v83 + 128) = 0;
                **(_QWORD **)(v99 + 40) = v83;
                *(_QWORD *)(v99 + 40) = v83 + 128;
                ++*(_DWORD *)(v99 + 56);
              }
              v100 = sub_1DB702C54(*(_QWORD *)(v93 + 24));
              if (!v100)
                goto LABEL_206;
              v101 = v100;
              v102 = *(_QWORD *)(v93 + 40);
              v100[24] = *(_QWORD *)(v93 + 32);
              *(_QWORD *)(v93 + 200) = v100;
              if (v102)
              {
                *(_QWORD *)v100[6] = v102;
                v100[6] = *(_QWORD *)(v93 + 48);
              }
              for (i = v100[5]; i; i = *(_QWORD *)(i + 112))
                *(_QWORD *)(i + 32) = v100;
              v104 = *(_QWORD *)(v93 + 80);
              *((_DWORD *)v100 + 14) = *(_DWORD *)(v93 + 56);
              *(_DWORD *)(v93 + 56) = 0;
              *(_QWORD *)(v93 + 40) = 0;
              *(_QWORD *)(v93 + 48) = v93 + 40;
              if (v104)
              {
                *(_QWORD *)v100[11] = v104;
                v100[11] = *(_QWORD *)(v93 + 88);
              }
              *((_DWORD *)v100 + 24) = *(_DWORD *)(v93 + 96);
              *(_DWORD *)(v93 + 96) = 0;
              *(_QWORD *)(v93 + 80) = 0;
              *(_QWORD *)(v93 + 88) = v93 + 80;
              sub_1DB703328(v83, (uint64_t)v100);
              v105 = *(_QWORD *)(*(_QWORD *)(v83 + 24) + 32);
              v106 = archive_entry_nlink(v105);
              archive_entry_set_nlink(v105, v106 + 1);
              *(_BYTE *)(v93 + 232) &= ~2u;
              sub_1DB70561C(v80, v101, 2);
              v93 = *(_QWORD *)(v93 + 120);
              if (!v93)
                goto LABEL_121;
            }
          }
        }
      }
LABEL_125:
      v107 = (int *)(v16 + 66416);
      v108 = sub_1DB733688((unint64_t *)(v16 + 168), 0, 0);
      if (v108)
      {
        v109 = v108;
        do
        {
          v110 = *(_QWORD *)(v109 + 32);
          archive_entry_set_nlink(*(_QWORD *)(v110 + 32), *(_DWORD *)(v109 + 24));
          for (j = *(_QWORD **)(v110 + 16); j; j = (_QWORD *)j[2])
          {
            j[3] = v110;
            archive_entry_set_nlink(j[4], *(_DWORD *)(v109 + 24));
          }
          v109 = sub_1DB733688((unint64_t *)(v16 + 168), v109, 1u);
        }
        while (v109);
      }
      v3 = sub_1DB70569C(v1, v16 + 184);
      if ((v3 & 0x80000000) == 0)
      {
        if ((*(_BYTE *)(v16 + 66418) & 6) == 0 || (v3 = sub_1DB70569C(v1, v16 + 232), (v3 & 0x80000000) == 0))
        {
          LODWORD(__buf) = 1;
          if (*(int *)(v16 + 208) < 1)
          {
LABEL_137:
            v113 = *v107;
            if ((*v107 & 0x60000) != 0 && (LODWORD(__buf) = 1, *(int *)(v16 + 256) >= 1))
            {
              v114 = 0;
              while (1)
              {
                v3 = sub_1DB70598C((_DWORD *)v1, v16 + 232, v114, &__buf);
                if ((v3 & 0x80000000) != 0)
                  break;
                if (++v114 >= *(_DWORD *)(v16 + 256))
                {
                  v113 = *v107;
                  goto LABEL_143;
                }
              }
            }
            else
            {
LABEL_143:
              if ((v113 & 0x100000) != 0 && (int)__buf >= 0x10000)
              {
                v223 = (char *)__buf;
                v75 = "Too many directories(%d) over 65535.";
                goto LABEL_194;
              }
              sub_1DB705AA8(v16 + 184);
              if ((*(_BYTE *)(v16 + 66418) & 6) != 0)
                sub_1DB705AA8(v16 + 232);
              v117 = *(_DWORD *)(v235 + 144);
              if ((v117 & 0x10) != 0)
                v118 = 20;
              else
                v118 = 19;
              v119 = v117 & 0x60000;
              if ((v117 & 0x60000) != 0)
                ++v118;
              if ((v117 & 0x1C000) == 0x10000)
                v120 = v118 + 1;
              else
                v120 = v118;
              v121 = *(_DWORD *)(v234 + 212);
              *(_DWORD *)(v234 + 220) = v120;
              *(_DWORD *)(v234 + 224) = v120 + v121;
              v122 = v120 + v121 + v121;
              if (v119)
              {
                *(_DWORD *)(v234 + 268) = v122;
                v123 = *(_DWORD *)(v234 + 260);
                *(_DWORD *)(v234 + 272) = v123 + v122;
                v122 += v123 + v123;
              }
              sub_1DB703FE4((_DWORD *)v234, v122, v234 + 184);
              v124 = *(_DWORD *)(v234 + 228) + v122;
              v125 = v235;
              v126 = *(_DWORD *)(v235 + 144);
              if ((v126 & 0x60000) != 0)
              {
                sub_1DB703FE4((_DWORD *)v234, v124, v234 + 232);
                v125 = v235;
                v124 += *(_DWORD *)(v234 + 276);
                v126 = *(_DWORD *)(v235 + 144);
              }
              if ((v126 & 0x1800000) != 0)
                *(_DWORD *)(v234 + 464) = v124++;
              *(_DWORD *)(v234 + 288) = 0;
              v127 = *(_QWORD *)(v125 + 64);
              if (v127)
              {
                v128 = *(_QWORD *)(v127 + 24);
                *(_DWORD *)(v128 + 164) = v124;
                v129 = archive_entry_size(*(_QWORD *)(v128 + 32));
                v125 = v235;
                v127 = (unint64_t)(v129 + 2047) >> 11;
                v130 = v124 + v127;
                LODWORD(v127) = *(_DWORD *)(v234 + 288) + v127;
                *(_DWORD *)(v234 + 288) = v127;
              }
              else
              {
                v130 = v124;
              }
              v138 = *(_QWORD *)(v125 + 96);
              v230 = v234 + 184;
              v233 = v124;
              if (v138)
              {
                v139 = *(_QWORD *)(v138 + 24);
                *(_DWORD *)(v139 + 164) = v130;
                v140 = *(unsigned __int8 *)(v125 + 136);
                switch(v140)
                {
                  case 1:
                    v141 = 600;
                    break;
                  case 3:
                    v141 = 1440;
                    break;
                  case 2:
                    v141 = 720;
                    break;
                  default:
                    v158 = archive_entry_size(*(_QWORD *)(v139 + 32));
                    v125 = v235;
                    v141 = (v158 + 2047) >> 11;
                    LODWORD(v127) = *(_DWORD *)(v234 + 288);
                    v139 = *(_QWORD *)(v138 + 24);
                    break;
                }
                v130 += v141;
                *(_DWORD *)(v234 + 288) = v141 + v127;
                *(_DWORD *)(v139 + 160) = v141;
              }
              v159 = 0;
              v160 = *(_DWORD *)(v125 + 144);
              v161 = (v160 & 0x60000) == 0 || (v160 & 0x1800000) != 0;
              strm = (z_streamp)(v234 + 232);
              v162 = 232;
              if (v161)
                v162 = 184;
              v163 = *(_QWORD *)(v234 + v162);
              v164 = -16;
              do
              {
                if (*(int *)(v163 + 56) > 0)
                {
                  v165 = 0;
                  v166 = *(_QWORD *)(v163 + 104);
                  do
                  {
                    v167 = *(_QWORD *)(v166 + 8 * v165);
                    if ((*(_BYTE *)(v167 + 232) & 2) == 0 && v167 != *(_QWORD *)(v125 + 96))
                    {
                      v168 = *(_QWORD *)(v167 + 24);
                      if (!*(_DWORD *)(v168 + 188) && !*(_QWORD *)(v168 + 24))
                      {
                        if (archive_entry_filetype(*(_QWORD *)(v168 + 32)) == 40960
                          || !*(_QWORD *)(v168 + 152))
                        {
                          *(_DWORD *)(v168 + 164) = v164--;
                        }
                        else
                        {
                          *(_DWORD *)(v168 + 184) = 1;
                        }
                        v125 = v235;
                      }
                    }
                    ++v165;
                  }
                  while (v165 < *(int *)(v163 + 56));
                }
                if (!*(_QWORD *)(v163 + 80)
                  || v161
                  && ((*(_WORD *)(v125 + 146) & 0x180) == 0 ? (v169 = v159 + 2) : (v169 = v159 + 1),
                      v169 >= *(_DWORD *)(v234 + 208)))
                {
                  while (v163 != *(_QWORD *)(v163 + 32))
                  {
                    if (*(_QWORD *)(v163 + 120))
                    {
                      v163 = *(_QWORD *)(v163 + 120);
                      break;
                    }
                    v163 = *(_QWORD *)(v163 + 32);
                    --v159;
                  }
                }
                else
                {
                  ++v159;
                  v163 = *(_QWORD *)(v163 + 80);
                }
              }
              while (v163 != *(_QWORD *)(v163 + 32));
              v170 = v234;
              v171 = *(_QWORD *)(v234 + 152);
              if (v171)
              {
                v172 = 0;
                do
                {
                  if (*(_DWORD *)(v171 + 184))
                  {
                    v173 = v171 + 144;
                    do
                    {
                      *(_DWORD *)(v173 + 20) = v130;
                      v174 = *(_DWORD *)(v173 + 16);
                      v130 += v174;
                      v172 += v174;
                      v173 = *(_QWORD *)(v173 + 24);
                    }
                    while (v173);
                    *(_QWORD *)(v171 + 176) = 0;
                  }
                  v171 = *(_QWORD *)(v171 + 8);
                }
                while (v171);
              }
              else
              {
                v172 = 0;
              }
              v175 = *(_DWORD *)(v234 + 288) + v172;
              *(_DWORD *)(v234 + 288) = v175;
              v176 = *(_DWORD *)(v125 + 144);
              if ((~v176 & 0x50) == 0)
              {
                v177 = *(_QWORD *)(v1 + 264);
                v178 = *(_QWORD *)(v177 + 66368);
                lseek(*(_DWORD *)(v177 + 8), *(_QWORD *)(*(_QWORD *)(v178 + 24) + 144) + 64, 0);
                v179 = archive_entry_size(*(_QWORD *)(*(_QWORD *)(v178 + 24) + 32));
                v180 = v179 - 64;
                if (v179 <= 64)
                {
                  v181 = (char *)v179;
                  v150 = *__error();
                  v223 = v181;
                  v75 = "Boot file(%jd) is too small";
LABEL_270:
                  v149 = (_DWORD *)v1;
                  goto LABEL_207;
                }
                v182 = 0;
                do
                {
                  if (v180 >= 0x1000)
                    v183 = 4096;
                  else
                    v183 = v180;
                  v184 = read(*(_DWORD *)(v177 + 8), &__buf, v183);
                  v185 = (char *)v184;
                  if (v184 < 1)
                  {
                    v150 = *__error();
                    v223 = v185;
                    v75 = "Can't read temporary file(%jd)";
                    goto LABEL_270;
                  }
                  for (k = 0; k < v184; k += 4)
                    v182 += *(_DWORD *)((char *)&__buf + k);
                  v187 = (uint64_t)v180 <= v184;
                  v180 -= v184;
                }
                while (!v187);
                v188 = 1228800;
                LODWORD(__buf) = 16;
                v189 = *(_QWORD *)(v178 + 24);
                DWORD1(__buf) = *(_DWORD *)(v189 + 164);
                v190 = *(unsigned __int8 *)(v177 + 66408);
                if (v190 == 1)
                {
                  v170 = v234;
                }
                else
                {
                  v170 = v234;
                  if (v190 == 3)
                  {
                    v188 = 2949120;
                  }
                  else if (v190 == 2)
                  {
                    v188 = 1474560;
                  }
                  else
                  {
                    v188 = archive_entry_size(*(_QWORD *)(v189 + 32));
                    v189 = *(_QWORD *)(v178 + 24);
                  }
                }
                *((_QWORD *)&__buf + 1) = __PAIR64__(v182, v188);
                v237 = 0u;
                *(_OWORD *)v238 = 0u;
                *(_QWORD *)&v239 = 0;
                lseek(*(_DWORD *)(v177 + 8), *(_QWORD *)(v189 + 144) + 8, 0);
                v3 = sub_1DB70371C(v1, (char *)&__buf, 0x38uLL);
                if ((v3 & 0x80000000) != 0)
                  return v3;
                v125 = v235;
                v176 = *(_DWORD *)(v235 + 144);
              }
              if ((v176 & 0x200000) != 0)
                v191 = v175 + v233 + 150;
              else
                v191 = v175 + v233;
              *(_DWORD *)(v170 + 280) = v191;
              *(_DWORD *)(v170 + 284) = 1;
              *(_QWORD *)v125 = 0x10000;
              *(_DWORD *)(v125 + 8) = 0;
              *(_QWORD *)(v170 + 66296) = 0;
              *(_QWORD *)(v170 + 66304) = 0;
              *(_QWORD *)(v170 + 66288) = 0;
              if (sub_1DB703514(v1, (char *)0x8000) || sub_1DB7041D0(v1, v230))
                return 4294967266;
              v192 = *(_DWORD *)(v235 + 144);
              if ((v192 & 0x10) != 0)
              {
                if (sub_1DB70468C(v1))
                  return 4294967266;
                v192 = *(_DWORD *)(v235 + 144);
              }
              if ((v192 & 0x1C000) == 0x10000)
              {
                *(_DWORD *)(v170 + 192) = 2;
                v193 = sub_1DB7041D0(v1, v230);
                *(_DWORD *)(v170 + 192) = 0;
                if (v193)
                  return 4294967266;
                v192 = *(_DWORD *)(v235 + 144);
              }
              if ((v192 & 0x60000) != 0 && sub_1DB7041D0(v1, (uint64_t)strm)
                || sub_1DB704730(v1)
                || sub_1DB70479C(v1)
                || sub_1DB704CB4(v1, 0, v230, v194, v195, v196, v197, v198)
                || sub_1DB704CB4(v1, 1, v230, v199, v200, v201, v202, v203)
                || (*(_BYTE *)(v235 + 146) & 6) != 0
                && (sub_1DB704CB4(v1, 0, (uint64_t)strm, v204, v205, v206, v207, v208)
                 || sub_1DB704CB4(v1, 1, (uint64_t)strm, v209, v210, v211, v212, v213))
                || sub_1DB704F08(v1, v230))
              {
                return 4294967266;
              }
              v214 = *(_DWORD *)(v235 + 144);
              if ((v214 & 0x60000) != 0)
              {
                if (sub_1DB704F08(v1, (uint64_t)strm))
                  return 4294967266;
                v214 = *(_DWORD *)(v235 + 144);
              }
              if ((v214 & 0x1800000) != 0 && sub_1DB7051E4(v1)
                || sub_1DB7052C8(v1)
                || (*(_BYTE *)(v235 + 146) & 0x20) != 0 && sub_1DB703514(v1, (char *)0x4B000))
              {
                return 4294967266;
              }
              v215 = *(_QWORD *)(v234 + 720);
              if (v215)
              {
                v216 = (char *)archive_entry_pathname(*(uint64_t **)(*(_QWORD *)(v215 + 24) + 32));
                archive_set_error((_DWORD *)v1, -1, "%s: Directories too deep.", v217, v218, v219, v220, v221, v216);
                return 4294967276;
              }
              return sub_1DB703668(v1);
            }
          }
          else
          {
            v112 = 0;
            while (1)
            {
              v3 = sub_1DB70598C((_DWORD *)v1, v16 + 184, v112, &__buf);
              if ((v3 & 0x80000000) != 0)
                break;
              if (++v112 >= *(_DWORD *)(v16 + 208))
                goto LABEL_137;
            }
          }
        }
      }
    }
    return v3;
  }
  v22 = *(_QWORD *)(v1 + 264) + 66344;
  v23 = sub_1DB7054E8(*(_QWORD *)(v2 + 184), *(char **)v22);
  *(_QWORD *)(v22 + 24) = v23;
  if (!v23)
  {
    v223 = *(char **)v22;
    goto LABEL_194;
  }
  *(_DWORD *)(*(_QWORD *)(v23 + 24) + 188) = 2;
  v24 = *(_QWORD *)(v1 + 264);
  v25 = *(_QWORD *)(*(_QWORD *)(v24 + 66368) + 24);
  if (!*(_BYTE *)(v25 + 192))
  {
LABEL_197:
    if (*(_QWORD *)(v24 + 66272))
    {
      v3 = sub_1DB703668(v1);
      if ((v3 & 0x80000000) != 0)
        return v3;
      v24 = *(_QWORD *)(v1 + 264);
    }
    v151 = sub_1DB70264C(v1, 0);
    if (v151)
    {
      v152 = (uint64_t)v151;
      archive_entry_set_pathname(*((_QWORD *)v151 + 4), *(char **)(v24 + 66312));
      archive_entry_set_size(*(_QWORD *)(v152 + 32), 2048);
      archive_entry_set_mtime(*(_QWORD *)(v152 + 32), *(_QWORD *)v24, 0);
      archive_entry_set_atime(*(_QWORD *)(v152 + 32), *(_QWORD *)v24, 0);
      archive_entry_set_ctime(*(_QWORD *)(v152 + 32), *(_QWORD *)v24, 0);
      v153 = *(_QWORD *)(v152 + 32);
      v154 = getuid();
      archive_entry_set_uid(v153, v154);
      v155 = *(_QWORD *)(v152 + 32);
      v156 = getgid();
      archive_entry_set_gid(v155, v156);
      archive_entry_set_mode(*(_QWORD *)(v152 + 32), 33060);
      archive_entry_set_nlink(*(_QWORD *)(v152 + 32), 1);
      if ((int)sub_1DB7026F0(v1, v152) <= -21)
      {
        sub_1DB702BF4(v152);
        return 4294967266;
      }
      *(_DWORD *)(v152 + 188) = 1;
      *(_QWORD *)(v152 + 152) = 2048;
      *(_QWORD *)v152 = 0;
      **(_QWORD **)(v24 + 144) = v152;
      *(_QWORD *)(v24 + 144) = v152;
      v157 = sub_1DB702C54(v152);
      *(_QWORD *)&__buf = v157;
      if (v157)
      {
        *((_BYTE *)v157 + 232) |= 1u;
        if (!sub_1DB702CEC(v1, (uint64_t *)&__buf))
        {
          *(_QWORD *)(v24 + 66336) = __buf;
          __asm { BR              X10 }
        }
        return 4294967266;
      }
    }
LABEL_206:
    v75 = "Can't allocate memory";
    v149 = (_DWORD *)v1;
    v150 = 12;
    goto LABEL_207;
  }
  v246 = 0u;
  v247 = 0u;
  v244 = 0u;
  v245 = 0u;
  v242 = 0u;
  v243 = 0u;
  v240 = 0u;
  v241 = 0u;
  *(_OWORD *)v238 = 0u;
  v239 = 0u;
  __buf = 0u;
  v237 = 0u;
  *((_QWORD *)&__buf + 1) = *(unsigned int *)(v25 + 196);
  LODWORD(__buf) = *(unsigned __int8 *)(v25 + 193);
  v231 = *(_DWORD *)(v24 + 8);
  v26 = *(_QWORD *)(v24 + 66288);
  v27 = *(_QWORD *)(v25 + 144);
  v28 = *(_QWORD *)(v25 + 152);
  if (v28 >= 0x8000)
    v29 = 0x8000;
  else
    v29 = *(_QWORD *)(v25 + 152);
  v30 = *(_QWORD *)(v24 + 66272);
  v228 = v29;
  v31 = malloc_type_malloc(v29, 0xD8172B26uLL);
  if (!v31)
    goto LABEL_206;
  v32 = v31;
  v225 = v30;
  v226 = v26;
  v33 = v231;
  if (!v28)
    goto LABEL_186;
  v224 = (char *)(v31 + 2);
  while (1)
  {
    v34 = lseek(v33, 0, 1);
    lseek(v33, v27, 0);
    if (v228 >= v28)
      v35 = v28;
    else
      v35 = v228;
    v36 = v24;
    v37 = read(*(_DWORD *)(v24 + 8), v32, v35);
    if (v37 <= 0)
    {
      v132 = *__error();
      archive_set_error((_DWORD *)v1, v132, "Can't read temporary file(%jd)", v133, v134, v135, v136, v137, (char *)v37);
      goto LABEL_183;
    }
    lseek(v33, v34, 0);
    v43 = BYTE8(v237);
    v44 = (char *)v32;
    v45 = v37;
    if ((BYTE8(v237) & 1) != 0)
      goto LABEL_59;
    v46 = __buf;
    v47 = 1 << __buf;
    v48 = (char *)v238[0];
    v49 = 4 * ((unint64_t)(*((_QWORD *)&__buf + 1) + (1 << __buf) - 1) >> __buf) + 4;
    if (!v238[0])
    {
      v48 = (char *)malloc_type_malloc((v49 & 0xFFFFFFFFFFFFFC00) + 1024, 0xE6153957uLL);
      v238[0] = v48;
      if (!v48)
      {
        v131 = "No memory for zisofs decompression";
        v142 = (_DWORD *)v1;
        v143 = 12;
        goto LABEL_182;
      }
      v46 = __buf;
      v47 = 1 << __buf;
      v43 = BYTE8(v237);
    }
    v238[1] = (void *)(4 * ((unint64_t)(*((_QWORD *)&__buf + 1) + (1 << __buf) - 1) >> __buf) + 4);
    *(_QWORD *)&v237 = v47;
    if ((v43 & 2) != 0)
    {
      v45 = v37;
      v50 = v32;
    }
    else
    {
      if ((unint64_t)v37 <= 0xF
        || __PAIR128__(*((unint64_t *)&__buf + 1), 0x7D6DBC99653E437) != __PAIR128__(*((unsigned int *)v32 + 2), *v32)|| *((_BYTE *)v32 + 12) != 4|| v46 != *((unsigned __int8 *)v32 + 13))
      {
        v131 = "Illegal zisofs file body";
        goto LABEL_179;
      }
      v45 = v37 - 16;
      v43 |= 2u;
      BYTE8(v237) = v43;
      v50 = v224;
    }
    if (v49 > (unint64_t)v239)
      break;
LABEL_56:
    if ((v43 & 1) == 0)
    {
      HIDWORD(v237) += v37;
      v33 = v231;
      goto LABEL_75;
    }
    v44 = (char *)v32 + v37 - v45;
LABEL_59:
    v52 = v240;
    if ((_DWORD)v240)
      goto LABEL_69;
    if ((void *)(*((_QWORD *)&v239 + 1) + 4) >= v238[1])
      goto LABEL_171;
    v53 = *(unsigned int *)((char *)v238[0] + *((_QWORD *)&v239 + 1));
    v54 = v37 - v45;
    if (v37 - v45 + HIDWORD(v237) != v53)
    {
      v131 = "Illegal zisofs block pointers(cannot seek)";
LABEL_179:
      v142 = (_DWORD *)v1;
      v143 = 79;
      goto LABEL_182;
    }
    v55 = *(_DWORD *)((char *)v238[0] + *((_QWORD *)&v239 + 1) + 4);
    v56 = v55 >= v53;
    v57 = v55 - v53;
    if (!v56)
    {
LABEL_171:
      v131 = "Illegal zisofs block pointers";
      goto LABEL_179;
    }
    LODWORD(v240) = v57;
    *((_QWORD *)&v239 + 1) += 4;
    if (DWORD2(v247))
      v58 = inflateReset((z_streamp)((char *)&v240 + 8));
    else
      v58 = inflateInit_((z_streamp)((char *)&v240 + 8), "1.2.12", 112);
    if (v58)
    {
      v131 = "Can't initialize zisofs decompression.";
LABEL_181:
      v142 = (_DWORD *)v1;
      v143 = -1;
LABEL_182:
      archive_set_error(v142, v143, v131, v38, v39, v40, v41, v42, v223);
LABEL_183:
      v54 = 4294967266;
      goto LABEL_191;
    }
    DWORD2(v247) = 1;
    *((_QWORD *)&v241 + 1) = 0;
    *(_QWORD *)&v243 = 0;
    v52 = v240;
    if ((_DWORD)v240)
    {
LABEL_69:
      *((_QWORD *)&v240 + 1) = v44;
      if (v45 <= v52)
        v52 = v45;
      LODWORD(v241) = v52;
      v59 = *(_QWORD *)(v1 + 264);
      v60 = *(_QWORD *)(v59 + 66272);
      *(_QWORD *)&v242 = v59 - v60 + 66268;
      DWORD2(v242) = v60;
      v61 = (char *)inflate((z_streamp)((char *)&v240 + 8), 0);
      if (v61 >= 2)
      {
        v223 = v61;
        v131 = "zisofs decompression failed (%d)";
        goto LABEL_181;
      }
      v63 = *((_QWORD *)&v240 + 1) - (_QWORD)v44;
      LODWORD(v240) = v240 - v63;
      v64 = sub_1DB7035FC(v1, (char *)(*(_QWORD *)(*(_QWORD *)(v1 + 264) + 66272) - DWORD2(v242)), v62, v38, v39, v40, v41, v42);
      if ((v64 & 0x80000000) != 0)
        goto LABEL_149;
      v54 = v37 - v45 + v63;
    }
    else
    {
      v65 = v237;
      if ((_QWORD)v237)
      {
        while (1)
        {
          v66 = *(_QWORD *)(v1 + 264);
          v67 = *(_QWORD *)(v66 + 66272);
          v68 = v65 >= v67 ? *(_QWORD *)(v66 + 66272) : v65;
          bzero((void *)(v66 - v67 + 66268), v68);
          v64 = sub_1DB7035FC(v1, (char *)v68, v69, v70, v71, v72, v73, v74);
          if ((v64 & 0x80000000) != 0)
            break;
          v65 -= v68;
          if (!v65)
            goto LABEL_74;
        }
LABEL_149:
        v54 = v64;
        goto LABEL_191;
      }
    }
LABEL_74:
    HIDWORD(v237) += v37;
    v33 = v231;
    if (v54 < 0)
      goto LABEL_185;
LABEL_75:
    v27 += v37;
    v28 -= v37;
    v24 = v36;
    if (!v28)
      goto LABEL_186;
  }
  if (v45 >= v49 - (unint64_t)v239)
    v51 = v49 - v239;
  else
    v51 = v45;
  memcpy(&v48[v239], v50, v51);
  *(_QWORD *)&v239 = v239 + v51;
  if ((void *)v239 == v238[1])
  {
    *((_QWORD *)&v239 + 1) = 0;
    LODWORD(v240) = 0;
    BYTE8(v237) |= 1u;
  }
  v45 -= v51;
  if ((v45 & 0x8000000000000000) == 0)
  {
    v43 = BYTE8(v237);
    goto LABEL_56;
  }
  v54 = v45;
LABEL_185:
  if (!(_DWORD)v54)
  {
LABEL_186:
    v144 = *(unsigned int *)(v25 + 196);
    *(_QWORD *)(v25 + 144) = v226 - v225 + 0x10000;
    *(_QWORD *)(v25 + 152) = v144;
    archive_entry_set_size(*(_QWORD *)(v25 + 32), v144);
    *(_WORD *)(v25 + 192) = 0;
    *(_DWORD *)(v25 + 196) = 0;
    v145 = *(_QWORD *)(v25 + 152);
    v146 = -v145 < 0;
    v147 = -v145 & 0x7FF;
    v148 = v145 & 0x7FF;
    if (!v146)
      v148 = -v147;
    if (v148)
      v54 = ((int)sub_1DB703514(v1, (char *)(2048 - v148)) >> 31) & 0xFFFFFFE2;
    else
      v54 = 0;
  }
LABEL_191:
  free(v32);
  free(v238[0]);
  if (DWORD2(v247) && inflateEnd((z_streamp)((char *)&v240 + 8)))
  {
    v75 = "Failed to clean up compressor";
LABEL_194:
    v149 = (_DWORD *)v1;
    v150 = -1;
LABEL_207:
    archive_set_error(v149, v150, v75, v8, v9, v10, v11, v12, v223);
    return 4294967266;
  }
  if ((v54 & 0x80000000) == 0)
  {
    v24 = *(_QWORD *)(v1 + 264);
    goto LABEL_197;
  }
  return v54;
}

uint64_t sub_1DB7022BC(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  char *v21;

  v2 = *(_QWORD *)(a1 + 264);
  v3 = *(_DWORD *)(v2 + 8);
  v4 = v2;
  if ((v3 & 0x80000000) == 0)
  {
    close(v3);
    v4 = *(_QWORD *)(a1 + 264);
  }
  free(*(void **)(v4 + 544));
  if (*(_DWORD *)(v4 + 696) && deflateEnd((z_streamp)(v4 + 584)))
  {
    archive_set_error((_DWORD *)a1, -1, "Failed to clean up compressor", v5, v6, v7, v8, v9, v21);
    v10 = 4294967266;
  }
  else
  {
    v10 = 0;
  }
  *(_QWORD *)(v4 + 544) = 0;
  *(_DWORD *)(v4 + 696) = 0;
  sub_1DB708928(*(_QWORD *)(v2 + 184));
  if (*(int *)(v2 + 208) >= 1)
  {
    v11 = 0;
    v12 = 16;
    do
    {
      free(*(void **)(*(_QWORD *)(v2 + 200) + v12));
      ++v11;
      v12 += 32;
    }
    while (v11 < *(int *)(v2 + 208));
  }
  free(*(void **)(v2 + 200));
  if ((*(_BYTE *)(v2 + 66418) & 6) != 0)
  {
    sub_1DB708928(*(_QWORD *)(v2 + 232));
    if (*(int *)(v2 + 256) >= 1)
    {
      v13 = 0;
      v14 = 16;
      do
      {
        free(*(void **)(*(_QWORD *)(v2 + 248) + v14));
        ++v13;
        v14 += 32;
      }
      while (v13 < *(int *)(v2 + 256));
    }
    free(*(void **)(v2 + 248));
  }
  v15 = *(_QWORD **)(v2 + 136);
  if (v15)
  {
    do
    {
      v16 = (_QWORD *)*v15;
      sub_1DB702BF4((uint64_t)v15);
      v15 = v16;
    }
    while (v16);
  }
  v17 = sub_1DB733688((unint64_t *)(v2 + 168), 0, 0);
  if (v17)
  {
    v18 = (_QWORD *)v17;
    do
    {
      v19 = sub_1DB733688((unint64_t *)(v2 + 168), (unint64_t)v18, 1u);
      sub_1DB7334FC(v2 + 168, v18);
      free(v18);
      v18 = (_QWORD *)v19;
    }
    while (v19);
  }
  sub_1DB6E7C3C(v2 + 32);
  sub_1DB6E7C3C(v2 + 296);
  sub_1DB6E7C3C(v2 + 320);
  sub_1DB6E7C3C(v2 + 344);
  sub_1DB6E7C3C(v2 + 368);
  sub_1DB6E7C3C(v2 + 392);
  sub_1DB6E7C3C(v2 + 416);
  sub_1DB6E7C3C(v2 + 440);
  sub_1DB6E7C3C(v2 + 66312);
  sub_1DB6E7C3C(v2 + 66344);
  sub_1DB6E7C3C(v2 + 66384);
  sub_1DB6E7C3C(v2 + 72);
  sub_1DB6E7C3C(v2 + 96);
  free((void *)v2);
  *(_QWORD *)(a1 + 264) = 0;
  return v10;
}

uint64_t sub_1DB7024C8(_DWORD *a1, uint64_t *a2, char *a3, int a4, char *__s)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v15;

  if (strlen(__s) <= (unint64_t)a3)
  {
    a2[1] = 0;
    if (__s)
      v15 = strlen(__s);
    else
      v15 = 0;
    sub_1DB6E323C(a2, __s, v15);
    return 0;
  }
  else
  {
    return 4294967266;
  }
}

uint64_t sub_1DB702568(_DWORD *a1, int *a2, char *a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BYTE *v9;
  int v10;
  int v11;
  unsigned __int8 *v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  uint64_t result;
  int v17;

  if (!a4)
  {
    return 4294967266;
  }
  v9 = a4 + 1;
  v8 = *a4;
  if (v8 != 45)
    v9 = a4;
  v10 = *v9;
  if (*v9)
  {
    v11 = 0;
    v12 = &a4[(v8 == 45) + 1];
    while (1)
    {
      if ((v10 - 48) > 9)
      {
        return 4294967266;
      }
      v13 = v10 + 10 * v11;
      if (v13 > 0x1002F)
      {
        return 4294967266;
      }
      v14 = __OFSUB__(v13, 48);
      v11 = v13 - 48;
      if ((v11 < 0) ^ v14 | (v11 == 0))
        break;
      v15 = *v12++;
      v10 = v15;
      if (!v15)
        goto LABEL_13;
    }
    return 4294967266;
  }
  v11 = 0;
LABEL_13:
  result = 0;
  if (v8 == 45)
    v17 = -v11;
  else
    v17 = v11;
  *a2 = v17;
  return result;
}

char *sub_1DB70264C(uint64_t a1, uint64_t *a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)malloc_type_calloc(1uLL, 0xC8uLL, 0x1030040A3FBD8EDuLL);
  if (v4)
  {
    if (a2)
      v5 = archive_entry_clone(a2);
    else
      v5 = (uint64_t)archive_entry_new2(a1);
    *((_QWORD *)v4 + 4) = v5;
    if (v5)
    {
      *(_OWORD *)(v4 + 120) = 0u;
      *(_OWORD *)(v4 + 104) = 0u;
      *(_OWORD *)(v4 + 88) = 0u;
      *(_OWORD *)(v4 + 72) = 0u;
      *(_OWORD *)(v4 + 56) = 0u;
      *(_OWORD *)(v4 + 40) = 0u;
      *((_QWORD *)v4 + 22) = v4 + 144;
    }
    else
    {
      free(v4);
      return 0;
    }
  }
  return v4;
}

uint64_t sub_1DB7026F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  size_t v22;
  size_t v23;
  char *v24;
  unint64_t v25;
  unsigned __int8 *v26;
  int v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  char *v34;
  const char *v35;
  int v36;
  size_t v37;
  char *v38;
  const void *v39;
  int v40;
  char *v41;
  size_t v42;
  const char *v43;
  char *v44;
  size_t v45;
  int v46;
  char *v47;
  char *v48;
  int64_t v49;
  char *v50;
  size_t v51;
  char *v52;
  char *v53;

  v4 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  v5 = (char *)archive_entry_pathname(*(uint64_t **)(a2 + 32));
  if (!v5 || (v6 = v5, !*v5))
  {
    v10 = 0;
    *(_DWORD *)(a2 + 136) = 0;
    return v10;
  }
  if ((*(_BYTE *)(v4 + 66418) & 6) != 0)
  {
    v52 = 0;
    v53 = 0;
    v7 = *(_QWORD *)(v4 + 120);
    if (!v7)
    {
      v8 = sub_1DB72D08C(a1, "UTF-16BE", 1);
      *(_QWORD *)(v4 + 120) = v8;
      if (!v8)
        return 4294967266;
      v9 = sub_1DB6E3A78(a1, "UTF-16BE", 1);
      *(_QWORD *)(v4 + 128) = v9;
      if (!v9)
        return 4294967266;
      v7 = *(_QWORD *)(v4 + 120);
    }
    if ((sub_1DB6E9040(*(uint64_t **)(a2 + 32), &v53, &v52, v7) & 0x80000000) != 0)
    {
      if (*__error() == 12)
      {
LABEL_77:
        archive_set_error((_DWORD *)a1, 12, "Can't allocate memory for UTF-16BE", v12, v13, v14, v15, v16, v52);
        return 4294967266;
      }
      archive_set_error((_DWORD *)a1, -1, "A filename cannot be converted to UTF-16BE;You should disable making Joliet extension",
        v12,
        v13,
        v14,
        v15,
        v16,
        v52);
      v10 = 4294967276;
    }
    else
    {
      v10 = 0;
    }
    v17 = v52;
    v18 = v53;
    if ((unint64_t)v52 < 2)
    {
LABEL_19:
      v19 = 0;
      v52 = 0;
    }
    else
    {
      while (!v17[(_QWORD)v53 - 2] && v17[(_QWORD)v53 - 1] == 47)
      {
        v17 -= 2;
        v52 = v17;
        if ((unint64_t)v17 <= 1)
          goto LABEL_19;
      }
      v19 = (unint64_t)v17 >> 1;
      v52 = (char *)v19;
      v20 = (char *)(v19 - 1);
      v21 = v53 + 2;
      do
      {
        if (!*(v21 - 2) && *(v21 - 1) == 47)
        {
          v18 = v21;
          v19 = (unint64_t)v20;
        }
        v52 = v20;
        v53 = v21;
        --v20;
        v21 += 2;
      }
      while (v20 != (char *)-1);
    }
    v22 = 2 * v19;
    if (sub_1DB6E3190((void **)(a2 + 88), 2 * v19))
    {
      memcpy(*(void **)(a2 + 88), v18, v22);
      *(_QWORD *)(a2 + 96) = v22;
      goto LABEL_27;
    }
    goto LABEL_77;
  }
  v10 = 0;
LABEL_27:
  *(_QWORD *)(a2 + 48) = 0;
  v23 = strlen(v6);
  sub_1DB6E323C((uint64_t *)(a2 + 40), v6, v23);
  v24 = *(char **)(a2 + 40);
  v25 = *(_QWORD *)(a2 + 48);
  v26 = (unsigned __int8 *)v24;
  while (1)
  {
    v27 = *v26;
    if (v27 == 46)
      break;
    if (v27 != 47)
      goto LABEL_40;
    ++v26;
    v28 = -1;
LABEL_39:
    v25 += v28;
  }
  v29 = v26[1];
  if (!v26[1])
  {
    v28 = -1;
    ++v26;
    goto LABEL_39;
  }
  if (v29 == 47)
    goto LABEL_37;
  if (v29 != 46)
    goto LABEL_40;
  if (!v26[2])
  {
LABEL_37:
    v26 += 2;
    v28 = -2;
    goto LABEL_39;
  }
  if (v26[2] == 47)
  {
    v26 += 3;
    v28 = -3;
    goto LABEL_39;
  }
LABEL_40:
  if (v26 != (unsigned __int8 *)v24)
    memmove(*(void **)(a2 + 40), v26, v25 + 1);
  do
  {
    if (!v25)
      break;
    v30 = v25;
    if (v24[v25 - 1] == 47)
    {
      v24[v25 - 1] = 0;
      v30 = v25 - 1;
    }
    v31 = v30 - 2;
    if (v30 >= 2)
    {
      if (v24[v31] == 47 && v24[v30 - 1] == 46)
      {
        v24[v31] = 0;
        v30 -= 2;
      }
      v32 = v30 - 3;
      if (v30 >= 3 && v24[v32] == 47 && v24[v30 - 2] == 46 && v24[v30 - 1] == 46)
      {
        v24[v32] = 0;
        v30 -= 3;
      }
    }
    v33 = v25 == v30;
    v25 = v30;
  }
  while (!v33);
LABEL_56:
  v34 = v24;
  while (2)
  {
    while (1)
    {
      v35 = v34;
      if (*v34 != 47)
        break;
      ++v34;
      v36 = *((unsigned __int8 *)v35 + 1);
      if (v36 != 46)
      {
        if (v36 != 47)
          continue;
        v37 = strlen(v35 + 1) + 1;
        v38 = (char *)v35;
        v39 = v35 + 1;
LABEL_66:
        memmove(v38, v39, v37);
        v34 = (char *)v35;
        continue;
      }
      v40 = *((unsigned __int8 *)v35 + 2);
      if (v40 != 46)
      {
        if (v40 != 47)
          continue;
        v37 = strlen(v35 + 2) + 1;
        v38 = (char *)v35;
        v39 = v35 + 2;
        goto LABEL_66;
      }
      if (v35[3] == 47)
      {
        v41 = (char *)(v35 - 1);
        do
        {
          v34 = v41;
          if (v41 < v24)
            break;
          --v41;
        }
        while (*v34 != 47);
        if (v34 <= v24)
        {
          strcpy(v24, v35 + 4);
          goto LABEL_56;
        }
        strcpy(v34, v35 + 3);
      }
    }
    if (*v34)
    {
      ++v34;
      continue;
    }
    break;
  }
  v42 = strlen(v24);
  if (archive_entry_filetype(*(_QWORD *)(a2 + 32)) == 40960)
  {
    v43 = (const char *)archive_entry_symlink(*(_QWORD *)(a2 + 32));
    v44 = (char *)v43;
    *(_QWORD *)(a2 + 120) = 0;
    if (v43)
      v45 = strlen(v43);
    else
      v45 = 0;
    sub_1DB6E323C((uint64_t *)(a2 + 112), v44, v45);
  }
  v46 = 0;
  v47 = 0;
  *(_DWORD *)(a2 + 136) = 0;
  v48 = v24;
  while (2)
  {
    if (*v48 == 47)
    {
      *(_DWORD *)(a2 + 136) = ++v46;
      v47 = v48;
      goto LABEL_86;
    }
    if (*v48)
    {
LABEL_86:
      ++v48;
      continue;
    }
    break;
  }
  if (v47)
  {
    v49 = v47 - v24;
    *v47 = 0;
    v50 = v47 + 1;
    *(_QWORD *)(a2 + 48) = v49;
    *(_QWORD *)(a2 + 72) = 0;
    v51 = strlen(v50);
    sub_1DB6E323C((uint64_t *)(a2 + 64), v50, v51);
    if (archive_entry_filetype(*(_QWORD *)(a2 + 32)) == 0x4000)
      ++*(_DWORD *)(a2 + 136);
  }
  else
  {
    *(_QWORD *)(a2 + 48) = v42;
    *(_QWORD *)(a2 + 72) = 0;
    sub_1DB6E4384((uint64_t *)(a2 + 64), a2 + 40);
    *(_QWORD *)(a2 + 48) = 0;
    **(_BYTE **)(a2 + 40) = 0;
  }
  return v10;
}

void sub_1DB702BF4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)(a1 + 168);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)v2[3];
      free(v2);
      v2 = v3;
    }
    while (v3);
  }
  archive_entry_free(*(void ***)(a1 + 32));
  sub_1DB6E7C3C(a1 + 40);
  sub_1DB6E7C3C(a1 + 64);
  sub_1DB6E7C3C(a1 + 88);
  sub_1DB6E7C3C(a1 + 112);
  free((void *)a1);
}

_QWORD *sub_1DB702C54(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = malloc_type_calloc(1uLL, 0xF0uLL, 0x10F00408C37FF92uLL);
  v3 = v2;
  if (v2)
  {
    v2[3] = a1;
    v2[5] = 0;
    v2[6] = v2 + 5;
    sub_1DB6E8388(v2 + 8, (uint64_t)off_1EA321B80);
    v3[10] = 0;
    v3[11] = v3 + 10;
    v3[26] = 0;
    v3[27] = v3 + 26;
    v3[28] = 0;
    if (archive_entry_filetype(*(_QWORD *)(a1 + 32)) == 0x4000)
      *((_BYTE *)v3 + 232) |= 2u;
  }
  return v3;
}

uint64_t sub_1DB702CEC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  const char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _DWORD *v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[256];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 264);
  v5 = *a2;
  v6 = *(_QWORD *)(*a2 + 24);
  v7 = *(_QWORD *)(v6 + 48);
  if (v7)
    v8 = *(char **)(v6 + 40);
  else
    v8 = "";
  v9 = *(_QWORD *)(v4 + 184);
  v10 = (const char **)(v4 + 32);
  if (*(_QWORD *)(v4 + 40) == v7 && !strcmp(*v10, v8))
  {
    if (sub_1DB703328(*(_QWORD *)(v4 + 24), v5))
      return 0;
    v34 = (uint64_t *)(*(_QWORD *)(v4 + 24) + 64);
LABEL_39:
    v19 = sub_1DB73322C(v34, *(_QWORD *)(*(_QWORD *)(v5 + 24) + 64));
LABEL_40:
    v36 = *(_QWORD *)(v19 + 24);
    v37 = *(_QWORD *)(v5 + 24);
    v38 = archive_entry_filetype(*(_QWORD *)(v36 + 32));
    if (v38 == archive_entry_filetype(*(_QWORD *)(v37 + 32)))
    {
      *(_QWORD *)(v19 + 24) = v37;
      *(_QWORD *)(v5 + 24) = v36;
      *(_BYTE *)(v19 + 232) &= ~1u;
      sub_1DB703420(v5);
      result = 0;
      *a2 = v19;
      return result;
    }
    v54 = (char *)archive_entry_pathname(*(uint64_t **)(v36 + 32));
    goto LABEL_49;
  }
  v16 = sub_1DB7033A8(v58, v8);
  v17 = v8;
  if (v16)
  {
    while (1)
    {
      if ((v16 & 0x80000000) != 0)
      {
        archive_set_error((_DWORD *)a1, -1, "A name buffer is too small", v11, v12, v13, v14, v15, v53);
        sub_1DB703420(v5);
        return 4294967266;
      }
      v18 = sub_1DB73322C((uint64_t *)(v9 + 64), (uint64_t)v58);
      if (!v18)
        goto LABEL_16;
      v19 = v18;
      if (!*v17)
        goto LABEL_40;
      if ((*(_BYTE *)(v18 + 232) & 2) == 0)
        break;
      v20 = &v17[v16];
      v22 = *v20;
      v21 = v20 + 1;
      if (v22 == 47)
        v17 = v21;
      else
        v17 += v16;
      v16 = sub_1DB7033A8(v58, v17);
      v9 = v19;
      if (!v16)
      {
        v9 = v19;
        goto LABEL_16;
      }
    }
    v47 = (char *)archive_entry_pathname(*(uint64_t **)(*(_QWORD *)(v18 + 24) + 32));
    archive_entry_pathname(*(uint64_t **)(*(_QWORD *)(v5 + 24) + 32));
LABEL_49:
    sub_1DB703420(v5);
    *a2 = 0;
    return 4294967271;
  }
LABEL_16:
  if (!*v17)
  {
    v24 = (_QWORD *)v9;
LABEL_29:
    *(_QWORD *)(v4 + 24) = v24;
    *(_QWORD *)(v4 + 40) = 0;
    sub_1DB6E3190((void **)(v4 + 32), *(_QWORD *)(v24[3] + 48) + *(_QWORD *)(v24[3] + 72) + 2);
    v32 = v24[3];
    v33 = *(_QWORD *)(v32 + 48);
    if (v33 + *(_QWORD *)(v32 + 72))
    {
      if (v33)
      {
        *(_QWORD *)(v4 + 40) = 0;
        sub_1DB6E4384((uint64_t *)(v4 + 32), v32 + 40);
        sub_1DB72CE60((uint64_t *)(v4 + 32), 47);
        v32 = v24[3];
      }
      sub_1DB6E4384((uint64_t *)(v4 + 32), v32 + 64);
    }
    else
    {
      **v10 = 0;
    }
    if (sub_1DB703328((uint64_t)v24, v5))
      return 0;
    v34 = v24 + 8;
    goto LABEL_39;
  }
  while (1)
  {
    v55 = 0;
    v56 = 0;
    v57 = 0;
    sub_1DB6E323C((uint64_t *)&v55, v8, v17 - v8 + v16);
    v23 = v55;
    if (v55[v56 - 1] == 47)
    {
      v55[v56 - 1] = 0;
      v23 = v55;
      --v56;
    }
    v24 = sub_1DB70018C(a1, v4, v23);
    sub_1DB6E7C3C((uint64_t)&v55);
    if (!v24)
    {
      v44 = "Can't allocate memory";
      v45 = (_DWORD *)a1;
      v46 = 12;
      goto LABEL_46;
    }
    v30 = *(_DWORD *)(v24[3] + 136);
    if (v30 > *(_DWORD *)(v4 + 728))
      *(_DWORD *)(v4 + 728) = v30;
    sub_1DB703328(v9, (uint64_t)v24);
    v17 += v17[v16] == 47 ? v16 + 1 : v16;
    v31 = sub_1DB7033A8(v58, v17);
    if ((v31 & 0x80000000) != 0)
      break;
    v16 = v31;
    v9 = (uint64_t)v24;
    if (!*v17)
      goto LABEL_29;
  }
  sub_1DB6E7C3C((uint64_t)&v55);
  v44 = "A name buffer is too small";
  v45 = (_DWORD *)a1;
  v46 = -1;
LABEL_46:
  archive_set_error(v45, v46, v44, v25, v26, v27, v28, v29, v53);
  sub_1DB703420(v5);
  *a2 = 0;
  return 4294967266;
}

uint64_t sub_1DB7030A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v14;

  v4 = *(_QWORD *)(a1 + 264);
  archive_entry_set_nlink(*(_QWORD *)(a2 + 32), 1);
  v5 = archive_entry_hardlink(*(_QWORD *)(a2 + 32));
  if (v5)
  {
    v6 = sub_1DB73322C((uint64_t *)(v4 + 168), v5);
    if (v6)
    {
      *(_QWORD *)(a2 + 16) = 0;
      **(_QWORD **)(v6 + 40) = a2;
      *(_QWORD *)(v6 + 40) = a2 + 16;
      ++*(_DWORD *)(v6 + 24);
    }
    archive_entry_unset_size(*(_QWORD *)(a2 + 32));
    return 0;
  }
  v7 = malloc_type_malloc(0x30uLL, 0x10A004051F4DB44uLL);
  if (v7)
  {
    v7[6] = 1;
    *(_QWORD *)(a2 + 16) = 0;
    *((_QWORD *)v7 + 4) = a2;
    *((_QWORD *)v7 + 5) = a2 + 16;
    sub_1DB733364(v4 + 168, v7);
    return 0;
  }
  archive_set_error((_DWORD *)a1, 12, "Can't allocate memory", v8, v9, v10, v11, v12, v14);
  return 4294967266;
}

uint64_t sub_1DB703184(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  BOOL v6;
  uint64_t v9;
  char v10;
  uint64_t result;
  unsigned int v12;
  unsigned int v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v2 = *(_QWORD *)(a1 + 264);
  *(_BYTE *)(v2 + 472) &= 0xFCu;
  v3 = *(_DWORD *)(v2 + 66416);
  v4 = v3 & 0x1800000;
  v5 = v3 & 0x4000000;
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
    return 0;
  if (archive_entry_size(*(_QWORD *)(a2 + 32)) <= 23)
  {
    if ((*(_BYTE *)(v2 + 472) & 1) == 0)
      return 0;
  }
  else
  {
    v9 = archive_entry_size(*(_QWORD *)(a2 + 32));
    v10 = *(_BYTE *)(v2 + 472);
    if (v9 <= 0xFFFFFFFFLL)
    {
      v10 |= 1u;
      *(_BYTE *)(v2 + 472) = v10;
      *(_DWORD *)(v2 + 540) = 0;
    }
    if ((v10 & 1) == 0)
      return 0;
  }
  if (archive_entry_size(*(_QWORD *)(a2 + 32)) < 2049)
    return 0;
  if (sub_1DB703468(a1))
    return 4294967266;
  *(_WORD *)(a2 + 192) = 3844;
  v12 = archive_entry_size(*(_QWORD *)(a2 + 32));
  *(_DWORD *)(a2 + 196) = v12;
  v13 = (((unint64_t)v12 + 0x7FFF) >> *(_BYTE *)(a2 + 193)) + 1;
  *(_QWORD *)(v2 + 560) = v13;
  v14 = 4 * (int)v13;
  if (*(_QWORD *)(v2 + 552) < v14)
  {
    free(*(void **)(v2 + 544));
    v15 = malloc_type_malloc(v14, 0xB96CD51BuLL);
    *(_QWORD *)(v2 + 544) = v15;
    if (!v15)
    {
      archive_set_error((_DWORD *)a1, 12, "Can't allocate data", v16, v17, v18, v19, v20, v22);
      return 4294967266;
    }
    *(_QWORD *)(v2 + 552) = v14;
  }
  v21 = (char *)(v14 + 16);
  result = sub_1DB703514(a1, v21);
  if (!(_DWORD)result)
  {
    **(_DWORD **)(v2 + 544) = (_DWORD)v21;
    *(_QWORD *)(v2 + 704) = *(unsigned int *)(a2 + 196);
    *(_BYTE *)(v2 + 472) |= 6u;
    *(_QWORD *)(v2 + 576) = v21;
    *(_QWORD *)(v2 + 568) = v21;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 176) + 8) = v21;
    return result;
  }
  return 4294967266;
}

uint64_t sub_1DB703308(uint64_t a1, uint64_t a2)
{
  return strcmp(*(const char **)(*(_QWORD *)(a1 + 24) + 64), *(const char **)(*(_QWORD *)(a2 + 24) + 64));
}

uint64_t sub_1DB70331C(uint64_t a1, const char *a2)
{
  return strcmp(*(const char **)(*(_QWORD *)(a1 + 24) + 64), a2);
}

uint64_t sub_1DB703328(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1DB733364(a1 + 64, (_QWORD *)a2);
  if ((_DWORD)result)
  {
    *(_QWORD *)(a2 + 112) = 0;
    **(_QWORD **)(a1 + 48) = a2;
    *(_QWORD *)(a1 + 48) = a2 + 112;
    ++*(_DWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(a2 + 32) = a1;
    if ((*(_BYTE *)(a2 + 232) & 2) != 0)
    {
      **(_QWORD **)(a1 + 88) = a2;
      *(_QWORD *)(a1 + 88) = a2 + 120;
      ++*(_DWORD *)(a1 + 96);
      *(_QWORD *)(a2 + 32) = a1;
    }
    return 1;
  }
  return result;
}

size_t sub_1DB7033A8(void *a1, char *__s)
{
  char *v4;
  size_t v5;

  v4 = strchr(__s, 47);
  if (v4)
  {
    v5 = v4 - __s;
  }
  else
  {
    v5 = strlen(__s);
    if (!v5)
      return v5;
  }
  if (v5 > 0xFF)
    return 0xFFFFFFFFLL;
  memcpy(a1, __s, v5);
  *((_BYTE *)a1 + v5) = 0;
  return v5;
}

void sub_1DB703420(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  free(*(void **)(a1 + 104));
  free(*(void **)(a1 + 168));
  v2 = *(_QWORD **)(a1 + 208);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)v2[257];
      free(v2);
      v2 = v3;
    }
    while (v3);
  }
  free((void *)a1);
}

uint64_t sub_1DB703468(uint64_t a1)
{
  uint64_t v2;
  z_stream *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _DWORD *v11;
  int v12;
  char *v13;

  v2 = *(_QWORD *)(a1 + 264);
  v3 = (z_stream *)(v2 + 584);
  *(_QWORD *)(v2 + 584) = 0;
  *(_DWORD *)(v2 + 592) = 0;
  *(_QWORD *)(v2 + 600) = 0;
  *(_QWORD *)(v2 + 624) = 0;
  if (*(_DWORD *)(v2 + 696))
  {
    result = deflateReset(v3);
  }
  else
  {
    result = deflateInit_(v3, *(_DWORD *)(v2 + 712), "1.2.12", 112);
    *(_DWORD *)(v2 + 696) = 1;
  }
  switch((_DWORD)result)
  {
    case 0xFFFFFFFA:
      v10 = "Internal error initializing compression library: invalid library version";
      break;
    case 0xFFFFFFFC:
      v10 = "Internal error initializing compression library";
      v11 = (_DWORD *)a1;
      v12 = 12;
      goto LABEL_11;
    case 0:
      return result;
    default:
      v10 = "Internal error initializing compression library: invalid setup parameter";
      break;
  }
  v11 = (_DWORD *)a1;
  v12 = -1;
LABEL_11:
  archive_set_error(v11, v12, v10, v5, v6, v7, v8, v9, v13);
  return 4294967266;
}

uint64_t sub_1DB703514(uint64_t a1, char *a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *(_QWORD *)(a1 + 264);
  v4 = *(char **)(v3 + 66272);
  v5 = v3 - (_QWORD)v4 + 0x10000;
  v6 = v5 + 732;
  v7 = (char *)(a2 - v4);
  if (a2 <= v4)
  {
    bzero((void *)(v5 + 732), (size_t)a2);
    return sub_1DB7035FC(a1, a2, v25, v26, v27, v28, v29, v30);
  }
  else
  {
    bzero((void *)(v5 + 732), (size_t)v4);
    result = sub_1DB7035FC(a1, v4, v8, v9, v10, v11, v12, v13);
    if (!(_DWORD)result)
    {
      v15 = (void *)(*(_QWORD *)(a1 + 264) - *(_QWORD *)(*(_QWORD *)(a1 + 264) + 66272) + 66268);
      bzero(v15, v6 - (_QWORD)v15);
      v22 = *(char **)(*(_QWORD *)(a1 + 264) + 66272);
      while (v7)
      {
        if (v7 >= v22)
          v23 = v22;
        else
          v23 = v7;
        result = sub_1DB7035FC(a1, v23, v16, v17, v18, v19, v20, v21);
        v7 -= (uint64_t)v23;
        if ((_DWORD)result)
          return result;
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1DB7035FC(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v8;
  unint64_t v9;

  v8 = (unint64_t *)(*(_QWORD *)(a1 + 264) + 66272);
  v9 = *v8 - (_QWORD)a2;
  if (*v8 < (unint64_t)a2 || *v8 == 0)
  {
    archive_set_error((_DWORD *)a1, -1, "Internal Programming error: iso9660:wb_consume() size=%jd, wbuff_remaining=%jd", a4, a5, a6, a7, a8, a2);
    return 4294967266;
  }
  else
  {
    *v8 = v9;
    if (v9 > 0x7FF)
      return 0;
    else
      return sub_1DB703668(a1);
  }
}

uint64_t sub_1DB703668(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;

  v1 = *(_QWORD *)(a1 + 264);
  v2 = (_QWORD *)(v1 + 66272);
  v3 = 0x10000 - *(_QWORD *)(v1 + 66272);
  v4 = -*(_WORD *)(v1 + 66272) & 0x7FF;
  v5 = (char *)(v1 + 732);
  v6 = (char *)(v1 + 732);
  v7 = v3 & 0xFFFFFFFFFFFFF800;
  if (*(_DWORD *)(v1 + 66280))
    v8 = sub_1DB70371C(a1, v6, v7);
  else
    v8 = sub_1DB7322A8(a1, (uint64_t)v6, v7);
  v9 = v8;
  v10 = v2[3];
  v11 = v2[2] + (v3 & 0xFFFFFFFFFFFFF800);
  v2[2] = v11;
  if (v11 > v10)
    v2[3] = v11;
  *v2 = 0x10000;
  if (v4)
  {
    *v2 = 0x10000 - v4;
    memmove(v5, &v5[v3 - v4], v3 & 0x7FF);
  }
  return v9;
}

uint64_t sub_1DB70371C(uint64_t a1, char *__buf, size_t __nbyte)
{
  size_t v3;
  uint64_t v6;
  ssize_t v7;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;

  if (!__nbyte)
    return 0;
  v3 = __nbyte;
  v6 = *(_QWORD *)(a1 + 264);
  while (1)
  {
    v7 = write(*(_DWORD *)(v6 + 8), __buf, v3);
    if (v7 < 0)
      break;
    __buf += v7;
    v3 -= v7;
    if (!v3)
      return 0;
  }
  v9 = __error();
  archive_set_error((_DWORD *)a1, *v9, "Can't write to temporary file", v10, v11, v12, v13, v14, v15);
  return 4294967266;
}

size_t sub_1DB70379C(uint64_t a1, unsigned int *__buf, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  size_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  char v18;
  char *v19;
  int v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  char *v25;

  v8 = a1;
  v9 = *(_QWORD *)(a1 + 264);
  if ((*(_DWORD *)(v9 + 8) & 0x80000000) != 0)
  {
    v19 = "Couldn't create temporary file";
    v20 = -1;
LABEL_16:
    archive_set_error((_DWORD *)a1, v20, v19, a4, a5, a6, a7, a8, v25);
    return -30;
  }
  v10 = a3;
  v11 = (unsigned __int8 *)__buf;
  if (!*(_DWORD *)(v9 + 64)
    || (v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 176) + 8), v12 + a3 < 0xFFFFF800))
  {
    v17 = a3;
    goto LABEL_10;
  }
  v13 = 4294965248 - v12;
  v14 = *(_BYTE *)(v9 + 472);
  if ((v14 & 1) != 0)
  {
    sub_1DB70399C(a1, __buf, v13);
    v14 = *(_BYTE *)(v9 + 472);
  }
  if ((v14 & 2) != 0)
  {
    if (sub_1DB703B44(v8, v11, v13, a4, a5, a6, a7, a8))
      return -30;
    v15 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + 176);
    v16 = *(_QWORD *)(v15 + 8);
  }
  else
  {
    if (sub_1DB703D94(v8, (char *)v11, v13))
      return -30;
    v15 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + 176);
    v16 = *(_QWORD *)(v15 + 8) + v13;
    *(_QWORD *)(v15 + 8) = v16;
  }
  if (v16 <= 0)
    v21 = -(-v16 & 0x7FF);
  else
    v21 = v16 & 0x7FF;
  if (v21)
  {
    if (sub_1DB703514(v8, (char *)(2048 - v21)))
      return -30;
    v15 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + 176);
    v16 = *(_QWORD *)(v15 + 8);
  }
  *(_DWORD *)(v15 + 16) = (unint64_t)(v16 + 2047) >> 11;
  v23 = malloc_type_calloc(1uLL, 0x20uLL, 0x1020040A5B76CDFuLL);
  if (!v23)
  {
    v19 = "Can't allocate content data";
    a1 = v8;
    v20 = 12;
    goto LABEL_16;
  }
  v11 += v13;
  v17 = v10 - v13;
  *v23 = *(_QWORD *)(*(_QWORD *)(v8 + 264) + 66288) - *(_QWORD *)(*(_QWORD *)(v8 + 264) + 66272) + 0x10000;
  v24 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(*(_QWORD *)(v24 + 176) + 24) = v23;
  *(_QWORD *)(v24 + 176) = v23;
  *(_QWORD *)(v9 + 576) = 0;
LABEL_10:
  v18 = *(_BYTE *)(v9 + 472);
  if ((v18 & 1) != 0)
  {
    sub_1DB70399C(v8, (unsigned int *)v11, v17);
    v18 = *(_BYTE *)(v9 + 472);
  }
  if ((v18 & 2) != 0)
  {
    if (!sub_1DB703B44(v8, v11, v17, a4, a5, a6, a7, a8))
      return v10;
    return -30;
  }
  if (sub_1DB703D94(v8, (char *)v11, v17))
    return -30;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 176) + 8) += v17;
  return v10;
}

uint64_t sub_1DB70399C(uint64_t a1, unsigned int *a2, size_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v5 = *(_QWORD *)(a1 + 264);
  v6 = *(_QWORD *)(v5 + 16);
  result = archive_entry_size(*(_QWORD *)(v6 + 32));
  v8 = result;
  if (result >= 64)
    v9 = 64;
  else
    v9 = result;
  v10 = *(int *)(v5 + 540);
  if ((_DWORD)v10)
    v11 = 1;
  else
    v11 = (int)v9 > a3;
  if (v11)
  {
    if ((int)v10 < (int)v9)
    {
      if (64 - v10 < a3)
        a3 = 64 - v10;
      result = (uint64_t)memcpy((void *)(v5 + v10 + 473), a2, a3);
      v12 = *(_DWORD *)(v5 + 540) + a3;
      *(_DWORD *)(v5 + 540) = v12;
      if (v12 < (int)v9)
        return result;
    }
    a2 = (unsigned int *)(v5 + 473);
  }
  *(_BYTE *)(v5 + 472) &= ~1u;
  if (*(_QWORD *)a2 == 0x7D6DBC99653E437)
  {
    v13 = a2[2];
    if (v13 >= 0x18 && *((_BYTE *)a2 + 12) == 4)
    {
      v14 = *((unsigned __int8 *)a2 + 13);
      if (v14 <= 0x1E && v14 >= 7)
      {
        v15 = (unint64_t)(v13 + (1 << v14) - 1) >> v14;
        v16 = 4 * v15 + 20;
        if (v8 >= v16)
        {
          if (v15 && v9 << 32 >= 0x1700000001)
          {
            v17 = a2[4];
            v18 = v15 - 1;
            v19 = (unint64_t)(a2 + 7);
            while (v16 == v17)
            {
              v20 = *(unsigned int *)(v19 - 8);
              v21 = v20 >= v17;
              v22 = v20 - v17;
              if (!v21 || v8 < v20)
                break;
              v21 = v18-- != 0;
              if (v21)
              {
                v16 += v22;
                v17 = *(_DWORD *)(v19 - 8);
                v11 = v19 > (unint64_t)a2 + (int)v9;
                v19 += 4;
                if (!v11)
                  continue;
              }
              goto LABEL_33;
            }
          }
          else
          {
LABEL_33:
            *(_DWORD *)(v6 + 196) = v13;
            *(_BYTE *)(v6 + 192) = 4;
            *(_BYTE *)(v6 + 193) = v14;
            *(_BYTE *)(v5 + 472) &= ~2u;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1DB703B44(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  BOOL v17;
  int v18;
  char v19;
  unsigned __int8 *v20;
  uint64_t v22;
  _QWORD *v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v8 = a3;
  v11 = *(_QWORD *)(a1 + 264);
  v12 = *(_QWORD *)(v11 + 16);
  v13 = *(_QWORD *)(v11 + 66272);
  *(_QWORD *)(v11 + 608) = v11 - v13 + 66268;
  *(_DWORD *)(v11 + 616) = v13;
  while (1)
  {
    v14 = *(_QWORD *)(v11 + 600);
    if (v8 >= 0x8000 - v14)
      v15 = 0x8000 - v14;
    else
      v15 = v8;
    v16 = *(_QWORD *)(v11 + 704) - v15;
    *(_QWORD *)(v11 + 704) = v16;
    v17 = v16 > 0 && v8 < 0x8000 - v14;
    if (v17)
      v18 = 0;
    else
      v18 = 4;
    *(_QWORD *)(v11 + 584) = a2;
    *(_DWORD *)(v11 + 592) = v15;
    v19 = *(_BYTE *)(v11 + 472);
    if ((v19 & 4) != 0)
    {
      v20 = a2;
      while (v20 < &a2[v15])
      {
        if (*v20++)
        {
          v19 &= ~4u;
          *(_BYTE *)(v11 + 472) = v19;
          break;
        }
      }
    }
    if (v17 || (v19 & 4) == 0 || v14 + v15 != 0x8000)
      break;
    v22 = *(_QWORD *)(v11 + 576);
    v23 = *(_QWORD **)(v12 + 176);
    if (v22 != v23[1])
    {
      result = sub_1DB703E74(a1, *v23 + v22, a3, a4, a5, a6, a7, a8);
      if ((_DWORD)result)
        return result;
      v25 = *(_QWORD *)(v12 + 176);
      v26 = *(_QWORD *)(v11 + 576);
      v27 = v26 - *(_QWORD *)(v25 + 8);
      *(_QWORD *)(v25 + 8) = v26;
      *(_QWORD *)(v11 + 568) += v27;
    }
    *(_DWORD *)(v11 + 592) = 0;
LABEL_24:
    v41 = *(int *)(v11 + 564) + 1;
    *(_DWORD *)(v11 + 564) = v41;
    *(_DWORD *)(*(_QWORD *)(v11 + 544) + 4 * v41) = *(_QWORD *)(v11 + 568);
    if (sub_1DB703468(a1))
      return 4294967266;
    *(_BYTE *)(v11 + 472) |= 4u;
    *(_QWORD *)(v11 + 576) = *(_QWORD *)(*(_QWORD *)(v12 + 176) + 8);
LABEL_26:
    a2 += v15;
    v8 -= v15;
    if (!v8)
      return 0;
  }
  v28 = v12;
  if (!(_DWORD)v15)
  {
LABEL_23:
    v12 = v28;
    if (v17)
      goto LABEL_26;
    goto LABEL_24;
  }
  while (1)
  {
    v29 = *(_QWORD *)(v11 + 624);
    v30 = (char *)deflate((z_streamp)(v11 + 584), v18);
    if (v30 > 1)
      break;
    v37 = (char *)(*(_QWORD *)(v11 + 624) - v29);
    if (sub_1DB7035FC(a1, v37, v31, v32, v33, v34, v35, v36))
      return 4294967266;
    v38 = &v37[*(_QWORD *)(v11 + 568)];
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 176) + 8) += v37;
    v39 = *(_QWORD *)(a1 + 264);
    v40 = *(_QWORD *)(v39 + 66272);
    *(_QWORD *)(v11 + 568) = v38;
    *(_QWORD *)(v11 + 608) = v39 - v40 + 66268;
    *(_DWORD *)(v11 + 616) = v40;
    if (!*(_DWORD *)(v11 + 592))
      goto LABEL_23;
  }
  archive_set_error((_DWORD *)a1, -1, "Compression failed: deflate() call returned status %d", v32, v33, v34, v35, v36, v30);
  return 4294967266;
}

uint64_t sub_1DB703D94(uint64_t a1, char *__buf, unint64_t a3)
{
  size_t v3;
  char *v4;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = a3;
  v4 = __buf;
  if (a3 > 0x4000 && *(_QWORD *)(*(_QWORD *)(a1 + 264) + 66272) == 0x10000)
  {
    v6 = a3 & 0xFFFFFFFFFFFFF800;
    *(_QWORD *)(*(_QWORD *)(a1 + 264) + 66288) += a3 & 0xFFFFFFFFFFFFF800;
    if (sub_1DB70371C(a1, __buf, a3 & 0xFFFFFFFFFFFFF800))
      return 4294967266;
    v3 &= 0x7FFu;
    if (v3)
    {
      v4 += v6;
      goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    while (v3)
    {
      v7 = *(_QWORD *)(a1 + 264);
      v8 = *(_QWORD *)(v7 + 66272);
      if (v3 >= v8)
        v9 = *(_QWORD *)(v7 + 66272);
      else
        v9 = v3;
      memcpy((void *)(v7 - v8 + 66268), v4, v9);
      v3 -= v9;
      v4 += v9;
      if (sub_1DB7035FC(a1, (char *)v9, v10, v11, v12, v13, v14, v15))
        return 4294967266;
    }
  }
  return 0;
}

uint64_t sub_1DB703E74(uint64_t a1, off_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v10;
  int64_t v12;
  off_t v13;
  off_t v14;
  off_t v15;
  uint64_t v17;
  off_t v18;
  char *v19;
  char *v20;

  v9 = *(_QWORD *)(a1 + 264);
  v10 = (_QWORD *)(v9 + 66272);
  if (*(_DWORD *)(v9 + 66280) != 1)
  {
    archive_set_error((_DWORD *)a1, -1, "Internal Programming error: iso9660:wb_set_offset()", a4, a5, a6, a7, a8, v20);
    return 4294967266;
  }
  v12 = 0x10000 - *v10;
  v13 = *(_QWORD *)(v9 + 66288);
  v14 = *(_QWORD *)(v9 + 66304);
  if (v13 + v12 > v14)
  {
    *(_QWORD *)(v9 + 66304) = v13 + v12;
    v14 = v13 + v12;
  }
  v15 = *(_QWORD *)(v9 + 66296);
  if (v13 >= v15)
  {
    if (v13 <= a2)
      goto LABEL_16;
    if (v12 >= 1 && sub_1DB703668(a1))
      return 4294967266;
LABEL_15:
    lseek(*(_DWORD *)(v9 + 8), a2, 0);
    *(_QWORD *)(v9 + 66288) = a2;
    v17 = 0x10000;
    goto LABEL_22;
  }
  if (v12 >= 1)
  {
    if (sub_1DB70371C(a1, (char *)(v9 + 732), v12))
      return 4294967266;
    v15 = *(_QWORD *)(v9 + 66296);
  }
  *(_QWORD *)(v9 + 66288) = v15;
  lseek(*(_DWORD *)(v9 + 8), v15, 0);
  *v10 = 0x10000;
  v13 = *(_QWORD *)(v9 + 66288);
  if (v13 > a2)
    goto LABEL_15;
  v14 = *(_QWORD *)(v9 + 66304);
LABEL_16:
  v18 = a2 - v14;
  if (a2 > v14)
  {
    v19 = (char *)(v13 - v14 + 0x10000);
    *v10 = v19;
    while (v18 >= (uint64_t)v19)
    {
      if (sub_1DB703514(a1, v19))
        return 4294967266;
      v19 = (char *)*v10;
      v18 -= *v10;
    }
    if (v18 < 1 || !sub_1DB703514(a1, (char *)v18))
      return 0;
    return 4294967266;
  }
  v17 = v13 - a2 + 0x10000;
LABEL_22:
  *v10 = v17;
  return 0;
}

size_t sub_1DB703FE4(_DWORD *a1, int a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  size_t result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  _QWORD *v21;
  int i;
  unsigned int v23;
  _DWORD *v24;
  int v25;

  v6 = 0;
  *(_DWORD *)(a3 + 44) = 0;
  v7 = *(_QWORD *)a3;
  v24 = a1 + 16604;
  do
  {
    v8 = 1;
    v9 = sub_1DB706BB4(0, 0xFFFFFFFFFFFFFFFFLL, v7, a1, 1u, *(_DWORD *)(a3 + 8));
    result = sub_1DB706BB4(0, 0xFFFFFFFFFFFFFFFFLL, v7, a1, 2u, *(_DWORD *)(a3 + 8));
    v25 = a2;
    if (*(int *)(v7 + 56) >= 1
      && (*(_DWORD *)(a3 + 8) == 1 || (*((_WORD *)v24 + 1) & 0x180) != 0 || v6 + 1 < *(_DWORD *)(a3 + 24)))
    {
      v11 = 0;
      v12 = result + v9;
      v13 = *(_QWORD *)(v7 + 104);
      do
      {
        v14 = *(_QWORD *)(v13 + 8 * v11);
        v15 = *(_QWORD *)(v14 + 24);
        if (*(_QWORD *)(v15 + 24))
          v16 = *(_QWORD *)(v15 + 24);
        else
          v16 = *(_QWORD *)(v14 + 24);
        *(_QWORD *)(v16 + 176) = v16 + 144;
        do
        {
          result = sub_1DB706BB4(0, 0xFFFFFFFFFFFFFFFFLL, v14, a1, 3u, *(_DWORD *)(a3 + 8));
          v17 = result + v12;
          if ((int)result + v12 <= 2048)
            v12 += result;
          else
            v12 = result;
          if (v17 > 2048)
            ++v8;
          v18 = *(_QWORD *)(*(_QWORD *)(v16 + 176) + 24);
          *(_QWORD *)(v16 + 176) = v18;
        }
        while (v18);
        ++v11;
      }
      while (v11 < *(int *)(v7 + 56));
    }
    v19 = *(_DWORD *)(a3 + 44);
    *(_DWORD *)(v7 + 156) = v25;
    *(_DWORD *)(v7 + 160) = v8;
    v20 = v8 + v25;
    v21 = *(_QWORD **)(v7 + 208);
    *(_QWORD *)(v7 + 224) = v21;
    for (i = 0; v21; v21 = (_QWORD *)v21[257])
    {
      v23 = v20 + i++;
      *v21 = v23;
    }
    *(_DWORD *)(a3 + 44) = i + v19 + v8;
    if (*(_QWORD *)(v7 + 80) && v6 + 1 < *(_DWORD *)(a3 + 24))
    {
      v7 = *(_QWORD *)(v7 + 80);
      ++v6;
    }
    else
    {
      while (v7 != *(_QWORD *)(v7 + 32))
      {
        if (*(_QWORD *)(v7 + 120))
        {
          v7 = *(_QWORD *)(v7 + 120);
          break;
        }
        v7 = *(_QWORD *)(v7 + 32);
        --v6;
      }
    }
    a2 = i + v20;
  }
  while (v7 != *(_QWORD *)(v7 + 32));
  return result;
}

uint64_t sub_1DB7041D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  int v12;
  int v13;
  int v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char __dst[256];
  utsname v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 264);
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 == 1)
  {
    v7 = 1;
    LOBYTE(v5) = 2;
    v6 = 2;
  }
  else if (v5 == 2)
  {
    v6 = 1;
    v7 = 2;
  }
  else
  {
    v6 = 0;
    LOBYTE(v5) = 1;
    v7 = 1;
  }
  v8 = v4 - *(_QWORD *)(v4 + 66272);
  v9 = v8 + 66268;
  *(_BYTE *)(v8 + 66268) = v5;
  *(_DWORD *)(v8 + 66269) = 808469571;
  *(_BYTE *)(v8 + 66273) = 49;
  v10 = v8 + 66267;
  *(_BYTE *)(v8 + 66274) = v7;
  *(_BYTE *)(v8 + 66275) = 0;
  memset(&v24, 0, 512);
  uname(&v24);
  strncpy(__dst, v24.sysname, 0xFFuLL);
  __dst[255] = 0;
  result = sub_1DB707FA4(a1, v10, 9u, 40, __dst, v6);
  if (!(_DWORD)result)
  {
    result = sub_1DB708030(a1, v10, 0x29u, 72, *(char **)(v4 + 296), v6);
    if (!(_DWORD)result)
    {
      *(_QWORD *)(v9 + 72) = 0;
      v12 = *(_DWORD *)(v4 + 280);
      *(_DWORD *)(v9 + 80) = v12;
      *(_BYTE *)(v9 + 84) = HIBYTE(v12);
      *(_BYTE *)(v9 + 85) = BYTE2(v12);
      *(_BYTE *)(v9 + 86) = BYTE1(v12);
      *(_BYTE *)(v9 + 87) = v12;
      if (*(_DWORD *)(a2 + 8) == 1)
      {
        *(_WORD *)(v9 + 88) = 12069;
        *(_BYTE *)(v9 + 90) = 69;
        *(_QWORD *)(v9 + 91) = 0;
        *(_QWORD *)(v9 + 107) = 0;
        *(_QWORD *)(v9 + 99) = 0;
        *(_QWORD *)(v9 + 112) = 0;
      }
      else
      {
        *(_OWORD *)(v9 + 88) = 0u;
        *(_OWORD *)(v9 + 104) = 0u;
      }
      *(_DWORD *)(v9 + 120) = 16777217;
      v13 = *(_DWORD *)(v4 + 284);
      *(_WORD *)(v9 + 124) = v13;
      *(_BYTE *)(v9 + 126) = BYTE1(v13);
      *(_BYTE *)(v9 + 127) = v13;
      *(_DWORD *)(v9 + 128) = 526336;
      v14 = *(_DWORD *)(a2 + 32);
      *(_DWORD *)(v9 + 132) = v14;
      *(_BYTE *)(v9 + 136) = HIBYTE(v14);
      *(_BYTE *)(v9 + 137) = BYTE2(v14);
      *(_BYTE *)(v9 + 138) = BYTE1(v14);
      *(_BYTE *)(v9 + 139) = v14;
      *(_DWORD *)(v9 + 140) = *(_DWORD *)(a2 + 36);
      *(_DWORD *)(v9 + 144) = 0;
      v15 = *(_DWORD *)(a2 + 40);
      *(_BYTE *)(v9 + 148) = HIBYTE(v15);
      *(_BYTE *)(v9 + 149) = BYTE2(v15);
      *(_BYTE *)(v9 + 150) = BYTE1(v15);
      *(_BYTE *)(v9 + 151) = v15;
      *(_DWORD *)(v9 + 152) = 0;
      sub_1DB706BB4(v9 + 156, 0x22uLL, *(_QWORD *)a2, (_DWORD *)v4, 0, *(_DWORD *)(a2 + 8));
      result = sub_1DB708030(a1, v10, 0xBFu, 318, "", v6);
      if (!(_DWORD)result)
      {
        result = sub_1DB7080BC(v10, 0x13Fu, 446, v6, (_DWORD *)a1, a2, v4 + 320, "Publisher File", 1, 0);
        if (!(_DWORD)result)
        {
          result = sub_1DB7080BC(v10, 0x1BFu, 574, v6, (_DWORD *)a1, a2, v4 + 344, "Data Preparer File", 1, 0);
          if (!(_DWORD)result)
          {
            result = sub_1DB7080BC(v10, 0x23Fu, 702, v6, (_DWORD *)a1, a2, v4 + 368, "Application File", 1, 0);
            if (!(_DWORD)result)
            {
              result = sub_1DB7080BC(v10, 0x2BFu, 739, v6, (_DWORD *)a1, a2, v4 + 392, "Copyright File", 0, 1);
              if (!(_DWORD)result)
              {
                result = sub_1DB7080BC(v10, 0x2E4u, 776, v6, (_DWORD *)a1, a2, v4 + 416, "Abstract File", 0, 1);
                if (!(_DWORD)result)
                {
                  result = sub_1DB7080BC(v10, 0x309u, 813, v6, (_DWORD *)a1, a2, v4 + 440, "Bibliongraphic File", 0, 1);
                  if (!(_DWORD)result)
                  {
                    sub_1DB708330(v9 + 813, *(_QWORD *)v4);
                    sub_1DB708330(v9 + 830, *(_QWORD *)v4);
                    strcpy((char *)(v9 + 847), "0000000000000000");
                    sub_1DB708330(v9 + 864, *(_QWORD *)v4);
                    *(_BYTE *)(v9 + 881) = v7;
                    *(_BYTE *)(v9 + 882) = 0;
                    *(_QWORD *)&v16 = 0x2020202020202020;
                    *((_QWORD *)&v16 + 1) = 0x2020202020202020;
                    *(_OWORD *)(v9 + 883) = v16;
                    *(_OWORD *)(v9 + 899) = v16;
                    *(_OWORD *)(v9 + 915) = v16;
                    *(_OWORD *)(v9 + 931) = v16;
                    *(_OWORD *)(v9 + 947) = v16;
                    *(_OWORD *)(v9 + 963) = v16;
                    *(_OWORD *)(v9 + 979) = v16;
                    *(_OWORD *)(v9 + 995) = v16;
                    *(_OWORD *)(v9 + 1011) = v16;
                    *(_OWORD *)(v9 + 1027) = v16;
                    *(_OWORD *)(v9 + 1043) = v16;
                    *(_OWORD *)(v9 + 1059) = v16;
                    *(_OWORD *)(v9 + 1075) = v16;
                    *(_OWORD *)(v9 + 1091) = v16;
                    *(_OWORD *)(v9 + 1107) = v16;
                    *(_OWORD *)(v9 + 1123) = v16;
                    *(_OWORD *)(v9 + 1139) = v16;
                    *(_OWORD *)(v9 + 1155) = v16;
                    *(_OWORD *)(v9 + 1171) = v16;
                    *(_OWORD *)(v9 + 1187) = v16;
                    *(_OWORD *)(v9 + 1203) = v16;
                    *(_OWORD *)(v9 + 1219) = v16;
                    *(_OWORD *)(v9 + 1235) = v16;
                    *(_OWORD *)(v9 + 1251) = v16;
                    *(_OWORD *)(v9 + 1267) = v16;
                    *(_OWORD *)(v9 + 1283) = v16;
                    *(_OWORD *)(v9 + 1299) = v16;
                    *(_OWORD *)(v9 + 1315) = v16;
                    *(_OWORD *)(v9 + 1331) = v16;
                    *(_OWORD *)(v9 + 1347) = v16;
                    *(_OWORD *)(v9 + 1363) = v16;
                    *(_OWORD *)(v9 + 1379) = v16;
                    bzero((void *)(v9 + 1395), 0x28DuLL);
                    return sub_1DB7035FC(a1, (char *)0x800, v17, v18, v19, v20, v21, v22);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1DB70468C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 264);
  v3 = v2 + 66272;
  v4 = v2 - *(_QWORD *)(v2 + 66272);
  *(_BYTE *)(v4 + 66268) = 0;
  *(_DWORD *)(v4 + 66269) = 808469571;
  *(_WORD *)(v4 + 66273) = 305;
  strcpy((char *)(v4 + 66275), "EL TORITO SPECIFICATION");
  *(_BYTE *)(v4 + 66299) = 0;
  *(_WORD *)(v4 + 66300) = 0;
  *(_DWORD *)(v4 + 66302) = 0;
  *(_BYTE *)(v4 + 66306) = 0;
  *(_OWORD *)(v4 + 66307) = 0u;
  *(_OWORD *)(v4 + 66323) = 0u;
  *(_DWORD *)(v4 + 66339) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 24) + 164);
  bzero((void *)(v4 + 66343), 0x7B5uLL);
  return sub_1DB7035FC(a1, (char *)0x800, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1DB704730(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 264) - *(_QWORD *)(*(_QWORD *)(a1 + 264) + 66272);
  *(_BYTE *)(v2 + 66268) = -1;
  *(_DWORD *)(v2 + 66269) = 808469571;
  *(_WORD *)(v2 + 66273) = 305;
  bzero((void *)(v2 + 66275), 0x7F9uLL);
  return sub_1DB7035FC(a1, (char *)0x800, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_1DB70479C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void *__src[3];
  int v34;
  char v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 264);
  if (*(_QWORD *)(v2 + 66272) <= 0x7FFuLL)
  {
    result = sub_1DB703668(a1);
    if ((_DWORD)result)
      return result;
  }
  memset(__src, 0, sizeof(__src));
  if (!sub_1DB6E3190(__src, 0x800uLL))
  {
    archive_set_error((_DWORD *)a1, 12, "Can't allocate memory", v4, v5, v6, v7, v8, v32);
    return 4294967266;
  }
  bzero(__src[0], 0x800uLL);
  v34 = 0;
  ctime_r((const time_t *)v2, v35);
  archive_version_string();
  sub_1DB7303C0(__src, "INFO %s%s", v9, v10, v11, v12, v13, v14, v35);
  v19 = *(_DWORD *)(v2 + 66416);
  if ((v19 & 1) != 0)
  {
    sub_1DB70874C(__src, &v34, (uint64_t)"abstract-file", 1, v15, v16, v17, v18);
    v19 = *(_DWORD *)(v2 + 66416);
    if ((v19 & 2) == 0)
    {
LABEL_6:
      if ((v19 & 4) != 0)
        goto LABEL_7;
      goto LABEL_27;
    }
  }
  else if ((v19 & 2) == 0)
  {
    goto LABEL_6;
  }
  sub_1DB70874C(__src, &v34, (uint64_t)"application-id", 1, v15, v16, v17, v18);
  v19 = *(_DWORD *)(v2 + 66416);
  if ((v19 & 4) != 0)
  {
LABEL_7:
    if ((v19 & 8) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  sub_1DB70874C(__src, &v34, (uint64_t)"allow-vernum", 0, v15, v16, v17, v18);
  v19 = *(_DWORD *)(v2 + 66416);
  if ((v19 & 8) == 0)
  {
LABEL_8:
    if ((v19 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  sub_1DB70874C(__src, &v34, (uint64_t)"biblio-file", 1, v15, v16, v17, v18);
  v19 = *(_DWORD *)(v2 + 66416);
  if ((v19 & 0x10) == 0)
  {
LABEL_9:
    if ((v19 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  sub_1DB70874C(__src, &v34, (uint64_t)"boot", 1, v15, v16, v17, v18);
  v19 = *(_DWORD *)(v2 + 66416);
  if ((v19 & 0x20) == 0)
  {
LABEL_10:
    if ((v19 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  sub_1DB70874C(__src, &v34, (uint64_t)"boot-catalog", 1, v15, v16, v17, v18);
  v19 = *(_DWORD *)(v2 + 66416);
  if ((v19 & 0x40) == 0)
  {
LABEL_11:
    if ((v19 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  sub_1DB70874C(__src, &v34, (uint64_t)"boot-info-table", 0, v15, v16, v17, v18);
  v19 = *(_DWORD *)(v2 + 66416);
  if ((v19 & 0x80) == 0)
  {
LABEL_12:
    if ((v19 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_32:
  sub_1DB70874C(__src, &v34, (uint64_t)"boot-load-seg", 3, v15, v16, v17, v18);
  v19 = *(_DWORD *)(v2 + 66416);
  if ((v19 & 0x100) != 0)
  {
LABEL_13:
    sub_1DB70874C(__src, &v34, (uint64_t)"boot-load-size", 2, v15, v16, v17, v18);
    v19 = *(_DWORD *)(v2 + 66416);
  }
LABEL_14:
  if ((v19 >> 9) & 3)
  {
    sub_1DB70874C(__src, &v34, (uint64_t)"boot-type", 1, v15, v16, v17, v18);
    v19 = *(_DWORD *)(v2 + 66416);
  }
  if ((v19 & 0x800) != 0)
  {
    sub_1DB70874C(__src, &v34, (uint64_t)"compression-level", 2, v15, v16, v17, v18);
    v19 = *(_DWORD *)(v2 + 66416);
  }
  if ((v19 & 0x1000) != 0)
  {
    sub_1DB70874C(__src, &v34, (uint64_t)"copyright-file", 1, v15, v16, v17, v18);
    v19 = *(_DWORD *)(v2 + 66416);
  }
  if (((v19 >> 14) & 7) != 1)
  {
    sub_1DB70874C(__src, &v34, (uint64_t)"iso-level", 2, v15, v16, v17, v18);
    v19 = *(_DWORD *)(v2 + 66416);
  }
  v21 = (v19 >> 17) & 3;
  if (v21 != 1)
    sub_1DB70874C(__src, &v34, (uint64_t)"joliet", v21 == 2, v15, v16, v17, v18);
  v22 = *(_DWORD *)(v2 + 66416);
  if ((v22 & 0x80000) != 0)
  {
    if ((v22 & 0x100000) != 0)
      goto LABEL_36;
  }
  else
  {
    sub_1DB70874C(__src, &v34, (uint64_t)"limit-depth", 0, v15, v16, v17, v18);
    v22 = *(_DWORD *)(v2 + 66416);
    if ((v22 & 0x100000) != 0)
    {
LABEL_36:
      if ((v22 & 0x200000) != 0)
        goto LABEL_37;
      goto LABEL_44;
    }
  }
  sub_1DB70874C(__src, &v34, (uint64_t)"limit-dirs", 0, v15, v16, v17, v18);
  v22 = *(_DWORD *)(v2 + 66416);
  if ((v22 & 0x200000) != 0)
  {
LABEL_37:
    if ((v22 & 0x400000) == 0)
      goto LABEL_39;
    goto LABEL_38;
  }
LABEL_44:
  sub_1DB70874C(__src, &v34, (uint64_t)"pad", 0, v15, v16, v17, v18);
  v22 = *(_DWORD *)(v2 + 66416);
  if ((v22 & 0x400000) != 0)
  {
LABEL_38:
    sub_1DB70874C(__src, &v34, (uint64_t)"publisher", 1, v15, v16, v17, v18);
    v22 = *(_DWORD *)(v2 + 66416);
  }
LABEL_39:
  v23 = (v22 >> 23) & 3;
  if (v23 == 1)
  {
    v24 = 1;
    goto LABEL_47;
  }
  if (!v23)
  {
    v24 = 0;
LABEL_47:
    sub_1DB70874C(__src, &v34, (uint64_t)"rockridge", v24, v15, v16, v17, v18);
  }
  v25 = *(_DWORD *)(v2 + 66416);
  if ((v25 & 0x2000000) != 0)
  {
    sub_1DB70874C(__src, &v34, (uint64_t)"volume-id", 1, v15, v16, v17, v18);
    v25 = *(_DWORD *)(v2 + 66416);
  }
  if ((v25 & 0x4000000) != 0)
    sub_1DB70874C(__src, &v34, (uint64_t)"zisofs", 0, v15, v16, v17, v18);
  memcpy((void *)(*(_QWORD *)(a1 + 264) - *(_QWORD *)(*(_QWORD *)(a1 + 264) + 66272) + 66268), __src[0], 0x800uLL);
  sub_1DB6E7C3C((uint64_t)__src);
  return sub_1DB7035FC(a1, (char *)0x800, v26, v27, v28, v29, v30, v31);
}

uint64_t sub_1DB704CB4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  char *v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  const void *v32;
  _BYTE *v33;
  uint64_t v35;

  v8 = *(_DWORD *)(a3 + 24);
  if (v8 >= 1)
  {
    v9 = a1;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = *(_QWORD *)(a3 + 16) + 32 * v10;
      v13 = *(_DWORD *)(v12 + 24);
      if (v13)
      {
        v35 = v11;
        v14 = *(_QWORD *)(v9 + 264);
        v15 = *(_QWORD *)(v14 + 66272);
        v16 = v14 - v15;
        v17 = v16 + 66268;
        v18 = v16 + 66267;
        if (v13 >= 1)
        {
          v19 = 0;
          LODWORD(v20) = 0;
          v21 = *(_QWORD *)(v12 + 16);
          while (1)
          {
            v22 = *(_QWORD *)(v21 + 8 * v19);
            if (*(_QWORD *)(v22 + 168))
              v23 = *(int *)(v22 + 184);
            else
              v23 = 1;
            v24 = (char *)(v18 - v17 + 1);
            v25 = v23 + 9;
            if (v15 - (uint64_t)v24 < v23 + 9)
            {
              v26 = sub_1DB7035FC(a1, v24, a3, a4, a5, a6, a7, a8);
              if ((v26 & 0x80000000) != 0)
                return v26;
              v27 = *(_QWORD *)(a1 + 264);
              v15 = *(_QWORD *)(v27 + 66272);
              v28 = v27 - v15;
              v17 = v28 + 66268;
              v18 = v28 + 66267;
            }
            *(_BYTE *)(v18 + 1) = v23;
            *(_BYTE *)(v18 + 2) = 0;
            v29 = *(_DWORD *)(v22 + 156);
            if (a2)
            {
              *(_DWORD *)(v18 + 3) = bswap32(v29);
              v30 = *(_DWORD *)(*(_QWORD *)(v22 + 32) + 136);
              v31 = v30 >> 8;
            }
            else
            {
              *(_DWORD *)(v18 + 3) = v29;
              v31 = *(_DWORD *)(*(_QWORD *)(v22 + 32) + 136);
              v30 = v31 >> 8;
            }
            *(_BYTE *)(v18 + 7) = v31;
            *(_BYTE *)(v18 + 8) = v30;
            v32 = *(const void **)(v22 + 168);
            v33 = (_BYTE *)(v18 + 9);
            if (!v32)
              break;
            memcpy(v33, v32, v23);
            if ((v23 & 1) != 0)
              goto LABEL_17;
LABEL_18:
            v20 = (v20 + v23 + 8);
            v18 += v23 + 8;
            if (++v19 >= *(int *)(*(_QWORD *)(a3 + 16) + 32 * v10 + 24))
              goto LABEL_24;
          }
          *v33 = 0;
          if ((v23 & 1) == 0)
            goto LABEL_18;
LABEL_17:
          ++v23;
          *(_BYTE *)(v18 + v25) = 0;
          goto LABEL_18;
        }
        v20 = 0;
LABEL_24:
        v9 = a1;
        if (v18 + 1 > v17)
        {
          v26 = sub_1DB7035FC(a1, (char *)(v18 + 1 - v17), a3, a4, a5, a6, a7, a8);
          if ((v26 & 0x80000000) != 0)
            return v26;
        }
        if ((v20 & 0x80000000) != 0)
          return v20;
        v8 = *(_DWORD *)(a3 + 24);
        v11 = v35;
      }
      else
      {
        v20 = 0;
      }
      v11 += v20;
      if (++v10 >= v8)
      {
        if ((v11 & 0xFFF) == 0)
          return v20;
        return sub_1DB703514(v9, (char *)(4096 - (v11 & 0xFFF)));
      }
    }
  }
  return 0;
}

uint64_t sub_1DB704F08(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = 0;
  v5 = *(_QWORD *)a2;
  while (1)
  {
    v6 = *(_QWORD *)(a1 + 264);
    v7 = v6 - *(_QWORD *)(v6 + 66272) + 66268;
    v8 = sub_1DB706BB4(v7, 0x800uLL, v5, (_DWORD *)v6, 1u, *(_DWORD *)(a2 + 8));
    v9 = (char *)(v7 + v8 + (int)sub_1DB706BB4(v7 + v8, 2048 - v8, v5, (_DWORD *)v6, 2u, *(_DWORD *)(a2 + 8)));
    if (*(int *)(v5 + 56) >= 1
      && (*(_DWORD *)(a2 + 8) == 1 || (*(_WORD *)(v6 + 66418) & 0x180) != 0 || v4 + 1 < *(_DWORD *)(a2 + 24)))
    {
      v10 = 0;
      v37 = *(_QWORD *)(v5 + 104);
      do
      {
        v11 = *(_QWORD *)(v37 + 8 * v10);
        v12 = *(_QWORD *)(v11 + 24);
        if (*(_QWORD *)(v12 + 24))
          v13 = *(_QWORD *)(v12 + 24);
        else
          v13 = *(_QWORD *)(v11 + 24);
        *(_QWORD *)(v13 + 176) = v13 + 144;
        do
        {
          v14 = sub_1DB706BB4((uint64_t)v9, v7 - (_QWORD)v9 + 2048, v11, (_DWORD *)v6, 3u, *(_DWORD *)(a2 + 8));
          if (!v14)
          {
            bzero(v9, v7 - (_QWORD)v9 + 2048);
            result = sub_1DB7035FC(a1, (char *)0x800, v15, v16, v17, v18, v19, v20);
            if ((result & 0x80000000) != 0)
              return result;
            v9 = (char *)(*(_QWORD *)(a1 + 264) - *(_QWORD *)(*(_QWORD *)(a1 + 264) + 66272) + 66268);
            v14 = sub_1DB706BB4((uint64_t)v9, 0x800uLL, v11, (_DWORD *)v6, 3u, *(_DWORD *)(a2 + 8));
            v7 = (uint64_t)v9;
          }
          v9 += v14;
          v22 = *(_QWORD *)(*(_QWORD *)(v13 + 176) + 24);
          *(_QWORD *)(v13 + 176) = v22;
        }
        while (v22);
        ++v10;
      }
      while (v10 < *(int *)(v5 + 56));
    }
    bzero(v9, v7 - (_QWORD)v9 + 2048);
    result = sub_1DB7035FC(a1, (char *)0x800, v23, v24, v25, v26, v27, v28);
    if ((result & 0x80000000) != 0)
      return result;
    if (*(_DWORD *)(a2 + 8) != 1)
    {
      for (i = *(_QWORD *)(v5 + 208); i; i = *(_QWORD *)(i + 2056))
      {
        v30 = (char *)(*(_QWORD *)(a1 + 264) - *(_QWORD *)(*(_QWORD *)(a1 + 264) + 66272) + 66268);
        memcpy(v30, (const void *)(i + 8), *(int *)(i + 4));
        bzero(&v30[*(int *)(i + 4)], 2048 - *(int *)(i + 4));
        result = sub_1DB7035FC(a1, (char *)0x800, v31, v32, v33, v34, v35, v36);
        if ((result & 0x80000000) != 0)
          return result;
      }
    }
    if (*(_QWORD *)(v5 + 80) && v4 + 1 < *(_DWORD *)(a2 + 24))
    {
      v5 = *(_QWORD *)(v5 + 80);
      ++v4;
    }
    else
    {
      while (v5 != *(_QWORD *)(v5 + 32))
      {
        if (*(_QWORD *)(v5 + 120))
        {
          v5 = *(_QWORD *)(v5 + 120);
          break;
        }
        v5 = *(_QWORD *)(v5 + 32);
        --v4;
      }
    }
    if (v5 == *(_QWORD *)(v5 + 32))
      return 0;
  }
}

uint64_t sub_1DB7051E4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (_QWORD *)(*(_QWORD *)(a1 + 264) - *(_QWORD *)(*(_QWORD *)(a1 + 264) + 66272) + 66268);
  bzero(v2, 0x800uLL);
  *v2 = 0x187540A01ED5245;
  qmemcpy(v2 + 1, "RRIP_1991ATHE ROCK RIDGE INTERCHANGE PROTOCOL PROVIDES SUPPORT FOR POSIX FILE SYSTEM SEMANTICSPLEASE CONTACT DISC PUBLISHER FOR SPECIFICATION SOURCE.  SEE PUBLISHER IDENTIFIER IN PRIMARY VOLUME DESCRIPTOR FOR CONTACT INFORMATION.", 229);
  return sub_1DB7035FC(a1, (char *)0x800, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_1DB7052C8(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  __int16 *v11;
  __int16 v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  off_t v20;
  uint64_t v21;
  off_t v22;
  uint64_t v23;

  v2 = *(_QWORD *)(a1 + 264);
  if (!*(_QWORD *)(v2 + 66336))
    goto LABEL_12;
  v3 = (_BYTE *)(v2 - *(_QWORD *)(v2 + 66272) + 66268);
  bzero(v3, 0x800uLL);
  *v3 = 1;
  v3[1] = *(_BYTE *)(v2 + 66376);
  *((_WORD *)v3 + 1) = 0;
  if (*(_QWORD *)(v2 + 66392))
    strncpy(v3 + 4, *(const char **)(v2 + 66384), 0x17uLL);
  v10 = 0;
  *(_DWORD *)(v3 + 27) = 1426063360;
  v3[31] = -86;
  v11 = (__int16 *)v3;
  do
  {
    v12 = *v11++;
    v10 += v12;
  }
  while (v11 < (__int16 *)v3 + 16);
  LOBYTE(v13) = 0;
  LOBYTE(v14) = 0;
  *((_WORD *)v3 + 14) = -v10;
  v3[32] = -120;
  v3[33] = *(_BYTE *)(v2 + 66408);
  if (!*(_BYTE *)(v2 + 66408))
  {
    v13 = *(unsigned __int16 *)(v2 + 66410);
    v14 = v13 >> 8;
  }
  v3[34] = v13;
  v3[35] = v14;
  v3[36] = *(_BYTE *)(v2 + 66409);
  v3[37] = 0;
  if (*(_BYTE *)(v2 + 66408))
  {
    LOBYTE(v15) = 0;
    LOBYTE(v16) = 1;
  }
  else
  {
    v16 = *(unsigned __int16 *)(v2 + 66412);
    v15 = v16 >> 8;
  }
  v3[38] = v16;
  v3[39] = v15;
  *((_DWORD *)v3 + 10) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 66368) + 24) + 164);
  *(_QWORD *)(v3 + 52) = 0;
  *(_QWORD *)(v3 + 44) = 0;
  *((_DWORD *)v3 + 15) = 0;
  result = sub_1DB7035FC(a1, (char *)0x800, v4, v5, v6, v7, v8, v9);
  if ((result & 0x80000000) == 0)
  {
LABEL_12:
    v18 = *(_QWORD *)(v2 + 66368);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 24);
      v18 = *(int *)(v19 + 160);
      v20 = *(_QWORD *)(v19 + 144);
      if (v20)
      {
        result = sub_1DB708860(a1, v20, v18 << 11);
        if ((result & 0x80000000) != 0)
          return result;
        v18 = 0;
      }
    }
    v21 = *(_QWORD *)(v2 + 152);
    if (v21)
    {
      v22 = 0;
      do
      {
        if (*(_DWORD *)(v21 + 184))
        {
          v23 = v21 + 144;
          if (v22 + (v18 << 11) < *(_QWORD *)(v21 + 144))
          {
            if (v18 < 1)
            {
              v18 = 0;
              v22 = *(_QWORD *)(v21 + 144);
            }
            else
            {
              result = sub_1DB708860(a1, v22, v18 << 11);
              if ((result & 0x80000000) != 0)
                return result;
              v18 = 0;
              v22 = *(_QWORD *)v23;
            }
          }
          do
          {
            v18 += *(int *)(v23 + 16);
            v23 = *(_QWORD *)(v23 + 24);
          }
          while (v23);
          *(_QWORD *)(v21 + 176) = 0;
        }
        v21 = *(_QWORD *)(v21 + 8);
      }
      while (v21);
    }
    else
    {
      v22 = 0;
    }
    if (v18 < 1)
      return 0;
    result = sub_1DB708860(a1, v22, v18 << 11);
    if ((result & 0x80000000) == 0)
      return 0;
  }
  return result;
}

uint64_t sub_1DB7054E8(uint64_t a1, char *__s)
{
  int v4;
  char *v5;
  char *v6;
  int v7;
  uint64_t v8;
  _BYTE v10[256];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  do
  {
    v4 = sub_1DB7033A8(v10, __s);
    if (!v4)
      break;
    v5 = &__s[v4];
    v7 = *v5;
    v6 = v5 + 1;
    if (v7 == 47)
      __s = v6;
    else
      __s += v4;
    v8 = sub_1DB73322C((uint64_t *)(a1 + 64), (uint64_t)v10);
    a1 = v8;
    if (!v8 || !*__s)
      return a1;
  }
  while ((*(_BYTE *)(v8 + 232) & 2) != 0);
  return 0;
}

uint64_t sub_1DB705594(_DWORD *a1, uint64_t a2, int a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v13;

  *(_DWORD *)(a2 + 24) = a3;
  v5 = malloc_type_malloc(32 * a3, 0x10A0040D98738FAuLL);
  *(_QWORD *)(a2 + 16) = v5;
  if (v5)
  {
    v11 = *(unsigned int *)(a2 + 24);
    if ((int)v11 >= 1)
    {
      do
      {
        *v5 = 0;
        v5[1] = v5;
        v5[2] = 0;
        *((_DWORD *)v5 + 6) = 0;
        v5 += 4;
        --v11;
      }
      while (v11);
    }
    return 0;
  }
  else
  {
    archive_set_error(a1, 12, "Can't allocate memory", v6, v7, v8, v9, v10, v13);
    return 4294967266;
  }
}

uint64_t sub_1DB70561C(uint64_t result, _QWORD *a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  if (!a2)
    a2 = *(_QWORD **)result;
  v3 = a2;
  while (1)
  {
    v4 = *(_QWORD *)(result + 16);
    v3[16] = 0;
    v5 = v4 + 32 * a3;
    **(_QWORD **)(v5 + 8) = v3;
    *(_QWORD *)(v5 + 8) = v3 + 16;
    ++*(_DWORD *)(v5 + 24);
    v6 = (_QWORD *)v3[10];
    if (!v6 || a3 + 1 >= *(_DWORD *)(result + 24))
      break;
    ++a3;
LABEL_10:
    v3 = v6;
    if (v6 == a2)
      return result;
  }
  while (v3 != a2)
  {
    v6 = (_QWORD *)v3[15];
    if (v6)
      goto LABEL_10;
    v3 = (_QWORD *)v3[4];
    --a3;
  }
  return result;
}

uint64_t sub_1DB70569C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v20[2];
  __int128 v21;
  __int128 v22;
  _BYTE v23[136];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 264);
  memset(v23, 0, sizeof(v23));
  v21 = 0u;
  v22 = 0u;
  *(_OWORD *)v20 = 0u;
  if (*(_DWORD *)(a2 + 8) == 1)
  {
    v5 = sub_1DB705BCC;
  }
  else if ((*(_BYTE *)(v4 + 66418) & 1) != 0)
  {
    *(_OWORD *)&v23[56] = unk_1DB74C6AA;
    *(_OWORD *)&v23[104] = xmmword_1DB74C6DA;
    *(_OWORD *)&v23[120] = unk_1DB74C6EA;
    *(_OWORD *)&v23[72] = xmmword_1DB74C6BA;
    *(_OWORD *)&v23[88] = unk_1DB74C6CA;
    memset(&v23[8], 0, 33);
    *(_QWORD *)&v23[41] = 0x101010101010101;
    *(_QWORD *)&v23[48] = 0x101010101010101;
    *(_QWORD *)&v23[66] = 0x101010101010101;
    *(_DWORD *)&v23[99] = 16843009;
    v23[104] = 1;
    v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1DB705ED4;
    *(_DWORD *)&v23[131] = 16843009;
  }
  else
  {
    *(_OWORD *)&v23[72] = xmmword_1DB74C73A;
    *(_OWORD *)&v23[88] = unk_1DB74C74A;
    memset(&v23[104], 0, 32);
    memset(&v23[8], 0, 48);
    v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1DB705ED4;
    *(_OWORD *)&v23[56] = unk_1DB74C72A;
  }
  v6 = 0;
  v7 = *(_QWORD *)a2;
  while (1)
  {
    if ((*(_BYTE *)(v7 + 232) & 1) != 0
      && !archive_entry_mtime_is_set(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 32)))
    {
      archive_entry_set_mtime(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 32), *(_QWORD *)v4, 0);
      archive_entry_set_atime(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 32), *(_QWORD *)v4, 0);
      archive_entry_set_ctime(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 32), *(_QWORD *)v4, 0);
    }
    if (!*(_QWORD *)(v7 + 40))
    {
LABEL_25:
      while (v7 != *(_QWORD *)(v7 + 32))
      {
        if (*(_QWORD *)(v7 + 120))
        {
          v7 = *(_QWORD *)(v7 + 120);
          goto LABEL_28;
        }
        v7 = *(_QWORD *)(v7 + 32);
        --v6;
      }
      goto LABEL_28;
    }
    if (*(_DWORD *)(a2 + 8) != 1 && (*(_WORD *)(v4 + 66418) & 0x180) == 0 && v6 + 1 >= *(_DWORD *)(a2 + 24))
    {
      if (*(int *)(v7 + 56) >= 1)
        *(_QWORD *)(v4 + 720) = v7;
      goto LABEL_25;
    }
    v8 = v5(a1, v7, (uint64_t)v20);
    if ((v8 & 0x80000000) != 0)
    {
      v18 = v8;
      goto LABEL_32;
    }
    v9 = malloc_type_malloc(8 * *(int *)(v7 + 56), 0x2004093837F09uLL);
    if (!v9)
      break;
    v15 = v9;
    *(_QWORD *)(v7 + 104) = v9;
    v16 = sub_1DB733688((unint64_t *)&v20[1], 0, 0);
    if (v16)
    {
      v17 = v16;
      do
      {
        *v15++ = *(_QWORD *)(v17 + 40);
        v17 = sub_1DB733688((unint64_t *)&v20[1], v17, 1u);
      }
      while (v17);
    }
    if (!*(_QWORD *)(v7 + 80) || v6 + 1 >= *(_DWORD *)(a2 + 24))
      goto LABEL_25;
    v7 = *(_QWORD *)(v7 + 80);
    ++v6;
LABEL_28:
    if (v7 == *(_QWORD *)(v7 + 32))
    {
      v18 = 0;
      goto LABEL_32;
    }
  }
  archive_set_error((_DWORD *)a1, 12, "Can't allocate memory", v10, v11, v12, v13, v14, (char *)v20[0]);
  v18 = 4294967266;
LABEL_32:
  free(v20[0]);
  return v18;
}

uint64_t sub_1DB70598C(_DWORD *a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int *v8;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t result;
  char *v26;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = a3;
  v6 = (uint64_t *)(v4 + 32 * a3);
  v8 = (int *)(v6 + 3);
  v7 = *((int *)v6 + 6);
  if ((_DWORD)v7)
  {
    v12 = malloc_type_malloc(8 * v7, 0x2004093837F09uLL);
    if (v12)
    {
      v18 = v12;
      v19 = v4 + 32 * v5;
      *(_QWORD *)(v19 + 16) = v12;
      v20 = (_QWORD **)(v19 + 16);
      v21 = *v6;
      if (*v6)
      {
        do
        {
          *v18++ = v21;
          v21 = *(_QWORD *)(v21 + 128);
        }
        while (v21);
        v18 = *v20;
      }
      v22 = *(int *)(a2 + 8);
      if (v22 <= 2)
        qsort(v18, *v8, 8uLL, (int (__cdecl *)(const void *, const void *))off_1EA3226B0[v22]);
      if (*v8 >= 1)
      {
        v23 = 0;
        do
        {
          v24 = (*a4)++;
          *(_DWORD *)(v18[v23++] + 136) = v24;
        }
        while (v23 < *v8);
      }
      return 0;
    }
    else
    {
      archive_set_error(a1, 12, "Can't allocate memory", v13, v14, v15, v16, v17, v26);
      return 4294967266;
    }
  }
  else
  {
    result = 0;
    v6[2] = 0;
  }
  return result;
}

uint64_t sub_1DB705AA8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  v1 = *(unsigned int *)(result + 24);
  if ((int)v1 < 1)
  {
    v3 = 0;
  }
  else
  {
    v2 = 0;
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(result + 16) + 32 * v2;
      v5 = *(unsigned int *)(v4 + 24);
      if (!(_DWORD)v5)
        break;
      if ((int)v5 >= 1)
      {
        v6 = *(_QWORD *)(v4 + 16);
        do
        {
          if (*(_QWORD *)(*(_QWORD *)v6 + 168))
            v7 = *(_DWORD *)(*(_QWORD *)v6 + 184);
          else
            v7 = 1;
          v3 += v7 + (v7 & 1) + 8;
          v6 += 8;
          --v5;
        }
        while (v5);
      }
      ++v2;
    }
    while (v2 != v1);
  }
  v8 = v3 + 4095;
  if (v3 < -4095)
    v8 = v3 + 8190;
  *(_DWORD *)(result + 28) = 2 * (v8 >> 12);
  *(_DWORD *)(result + 32) = v3;
  return result;
}

uint64_t sub_1DB705B40(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1DB733364(a1 + 64, (_QWORD *)a2);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a2 + 112) = v5;
    if (!v5)
      *(_QWORD *)(a1 + 48) = a2 + 112;
    *(_QWORD *)(a1 + 40) = a2;
    ++*(_DWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 32) = a1;
    if ((*(_BYTE *)(a2 + 232) & 2) != 0)
    {
      v6 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a2 + 120) = v6;
      if (!v6)
        *(_QWORD *)(a1 + 88) = a2 + 120;
      *(_QWORD *)(a1 + 80) = a2;
      ++*(_DWORD *)(a1 + 96);
      *(_QWORD *)(a2 + 32) = a1;
    }
    else
    {
      *(_QWORD *)(a2 + 120) = 0;
    }
  }
  return result;
}

uint64_t sub_1DB705BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  size_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unsigned __int8 *v24;
  size_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  BOOL v31;
  unsigned __int8 *v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  char *v39;
  _DWORD *v40;
  int v41;
  char *v42;
  size_t v43;
  size_t v44;
  uint64_t *v45;
  uint64_t v46;

  v4 = *(_DWORD *)(a2 + 56);
  if (!v4)
    return 0;
  v46 = *(_QWORD *)(a1 + 264);
  if ((*(_DWORD *)(v46 + 66416) & 0x60000) == 0x40000)
    v7 = 206;
  else
    v7 = 128;
  result = sub_1DB7063FC((_DWORD *)a1, a3, v4, 6, 2, (uint64_t)off_1EA321B70);
  if ((result & 0x80000000) != 0)
    return result;
  v9 = *(_QWORD *)(a2 + 32);
  v10 = 1;
  if (v9 != a2)
  {
    v11 = a2;
    do
    {
      v12 = v9;
      v10 += *(int *)(v11 + 188) + 1;
      v9 = *(_QWORD *)(v9 + 32);
      v11 = v12;
    }
    while (v9 != v12);
  }
  if (!*(_QWORD *)(a2 + 40))
  {
LABEL_48:
    sub_1DB706544(a3, (void (*)(uint64_t))sub_1DB706614);
    return 0;
  }
  v44 = v7 - 2;
  v45 = (uint64_t *)a3;
  v43 = v7 - 4;
  v13 = *(_QWORD *)(a2 + 40);
  while (1)
  {
    v14 = *(_QWORD *)(v13 + 24);
    v15 = *(_QWORD *)(v14 + 96);
    v16 = v7;
    if (v15 < v7)
      v7 = *(_QWORD *)(v14 + 96);
    v17 = (char *)malloc_type_malloc(2 * (v7 + 1), 0x3B970FCCuLL);
    if (!v17)
    {
      v39 = "Can't allocate memory";
      v40 = (_DWORD *)a1;
      v41 = 12;
      goto LABEL_52;
    }
    v23 = v17;
    memcpy(v17, *(const void **)(*(_QWORD *)(v13 + 24) + 88), v7);
    v24 = (unsigned __int8 *)&v23[v7];
    v23[v7] = 0;
    v23[v7 + 1] = 0;
    *(_QWORD *)(v13 + 168) = v23;
    if (v7)
    {
      v25 = v7;
      do
      {
        v26 = v23[1];
        v27 = v26 | (*v23 << 8);
        if (v27 >= 0x20
          && ((v28 = v27 - 42, v29 = v28 > 0x32, v30 = (1 << v28) & 0x4000000230021, !v29)
            ? (v31 = v30 == 0)
            : (v31 = 1),
              v31))
        {
          if (v26 == 46)
            v32 = (unsigned __int8 *)v23;
          else
            v32 = v24;
          if (!*v23)
            v24 = v32;
        }
        else
        {
          *(_WORD *)v23 = 24320;
        }
        v23 += 2;
        v25 -= 2;
      }
      while (v25);
      v23 = *(char **)(v13 + 168);
    }
    v33 = (_DWORD)v24 - (_DWORD)v23;
    *(_DWORD *)(v13 + 176) = (_DWORD)v24 - (_DWORD)v23;
    *(_DWORD *)(v13 + 180) = v7 - ((_DWORD)v24 - (_DWORD)v23);
    *(_DWORD *)(v13 + 184) = v7;
    v34 = *(_QWORD *)(v13 + 24);
    if (*(_QWORD *)(v34 + 96) <= v16)
    {
      v36 = 0;
      v35 = *(_DWORD *)(v34 + 72);
      *(_DWORD *)(v13 + 188) = v35;
      goto LABEL_37;
    }
    if (sub_1DB72D14C(v46 + 96, v23, v7, *(_QWORD *)(v46 + 128)) && *__error() == 12)
      break;
    v35 = *(_DWORD *)(v46 + 104);
    *(_DWORD *)(v13 + 188) = v35;
    v34 = *(_QWORD *)(v13 + 24);
    if (v35 == *(_DWORD *)(v34 + 72))
      v36 = 0;
    else
      v36 = v35;
LABEL_37:
    if (v10 > 0xF0 || v35 > 240 || v10 + v35 >= 0xF1)
    {
      v42 = (char *)archive_entry_pathname(*(uint64_t **)(v34 + 32));
      v40 = (_DWORD *)a1;
      v41 = -1;
      goto LABEL_52;
    }
    v37 = v33 - 2;
    if (v7 != v43)
      v37 = v33;
    if (v7 == v44)
      v37 = v33 - 4;
    v7 = v16;
    if (v16 <= v15)
      v38 = v33 - 6;
    else
      v38 = v37;
    a3 = (uint64_t)v45;
    sub_1DB7064B0(v45, v13, v36, v38);
    v13 = *(_QWORD *)(v13 + 112);
    if (!v13)
      goto LABEL_48;
  }
  v41 = *__error();
  v39 = "No memory";
  v40 = (_DWORD *)a1;
LABEL_52:
  archive_set_error(v40, v41, v39, v18, v19, v20, v21, v22, v42);
  return 4294967266;
}

uint64_t sub_1DB705ED4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v4;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int v28;
  char *v29;
  char *v30;
  char *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  _WORD *v45;
  char *v46;
  _DWORD *v47;
  int v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;

  v4 = *(_DWORD *)(a2 + 56);
  if (!v4)
    return 0;
  v54 = (_DWORD *)(*(_QWORD *)(a1 + 264) + 66416);
  v7 = (*v54 >> 14) & 7;
  if ((*v54 & 0x1800000) != 0)
    v8 = 193;
  else
    v8 = 207;
  if (v7 == 1)
    v9 = 8;
  else
    v9 = 30;
  if (v7 == 1)
    v10 = 12;
  else
    v10 = 31;
  if (v7 == 1)
    v11 = 8;
  else
    v11 = 31;
  if (v7 <= 3)
    v12 = (*v54 >> 2) & 1;
  else
    v12 = 0;
  if (v7 <= 3)
    v13 = v9;
  else
    v13 = v8;
  v52 = v13;
  if (v7 <= 3)
    v14 = v10;
  else
    v14 = v8;
  v51 = v14;
  if (v7 <= 3)
    v15 = v11;
  else
    v15 = v8;
  v53 = v15;
  result = sub_1DB7063FC((_DWORD *)a1, (uint64_t)a3, v4, 3, 1, (uint64_t)off_1EA321B60);
  if ((result & 0x80000000) == 0)
  {
    v47 = (_DWORD *)a1;
    v48 = v12;
    v49 = a2;
    v17 = *(_QWORD *)(a2 + 40);
    v18 = v53;
    if (v17)
    {
      v19 = a3 + 7;
      HIDWORD(v46) = v52 - 1;
      v50 = a3;
      do
      {
        v20 = *(_QWORD *)(*(_QWORD *)(v17 + 24) + 72);
        v21 = (char *)malloc_type_malloc(((v20 << 32) + 0x2200000000) >> 32, 0xC548453FuLL);
        if (!v21)
        {
          archive_set_error(v47, 12, "Can't allocate memory", v22, v23, v24, v25, v26, v46);
          return 4294967266;
        }
        v27 = v21;
        memcpy(v21, *(const void **)(*(_QWORD *)(v17 + 24) + 64), (int)v20);
        v27[(int)v20] = 0;
        *(_QWORD *)(v17 + 168) = v27;
        if (v7 <= 3)
        {
          v28 = *v27;
          if (v28 != 46)
            goto LABEL_34;
          *v27++ = 95;
        }
        v28 = *v27;
LABEL_34:
        if (!v28)
        {
          v33 = *(_QWORD *)(v17 + 168);
LABEL_59:
          if ((*(_BYTE *)(v17 + 232) & 2) != 0)
            v35 = v18;
          else
            v35 = v52;
          if (v35 >= (int)v20)
          {
            v35 = -1;
          }
          else
          {
            *(_BYTE *)(v33 + v35) = 0;
            LODWORD(v20) = v35;
          }
          goto LABEL_90;
        }
        v29 = 0;
        v30 = 0;
        do
        {
          v31 = v30;
          if ((v28 & 0x80) != 0)
          {
            *v27 = 95;
          }
          else if (*((_BYTE *)v19 + v28))
          {
            if (v28 == 46)
            {
              v30 = v27;
              v29 = v31;
            }
          }
          else if ((v28 - 97) > 0x19u)
          {
            if (v7 >= 4 && v28 == 46)
            {
              v30 = v27;
              v29 = v31;
            }
            else
            {
              if (v28 == 46)
              {
                v29 = v30;
                v30 = v27;
              }
              *v27 = 95;
            }
          }
          else
          {
            *v27 = v28 - 32;
          }
          v32 = *++v27;
          LOBYTE(v28) = v32;
        }
        while (v32);
        v33 = *(_QWORD *)(v17 + 168);
        if (!v30)
        {
          v18 = v53;
          goto LABEL_59;
        }
        *v30 = 46;
        v34 = (uint64_t)&v30[-v33];
        if ((*v54 & 0x1C000) != 0x4000)
        {
          if ((*(_BYTE *)(v17 + 232) & 2) == 0)
          {
            if ((int)v51 >= (int)v20)
            {
              v35 = -1;
              LODWORD(v20) = (_DWORD)v30 - v33;
            }
            else
            {
              v36 = strlen(v30);
              v37 = (_DWORD)v29 - v33;
              if (!v29)
                v37 = 0;
              if (v36 < 2 || v37 >= SHIDWORD(v46))
              {
                *(_BYTE *)(v33 + v52) = 0;
                LODWORD(v20) = v52;
                v35 = v52;
              }
              else
              {
                if ((int)v51 >= v36)
                  v38 = v36;
                else
                  v38 = v51;
                if ((int)v51 <= v36)
                  LODWORD(v20) = 1;
                else
                  LODWORD(v20) = v51 - v38;
                memmove((void *)(v33 + (int)v20), v30, v38 - ((int)v51 <= v36));
                *(_BYTE *)(v33 + v51) = 0;
                v35 = v20;
              }
            }
            goto LABEL_89;
          }
          v18 = v53;
          if ((int)v53 < (int)v20)
          {
            *(_BYTE *)(v33 + v53) = 0;
            if ((int)v53 >= (int)v34)
              LODWORD(v20) = (_DWORD)v30 - v33;
            else
              LODWORD(v20) = v53;
            v35 = v53;
            goto LABEL_86;
          }
LABEL_84:
          v35 = -1;
          goto LABEL_85;
        }
        if (v34 > 8)
        {
          *(_BYTE *)(v33 + 8) = 46;
          *(_BYTE *)(v33 + 9) = v30[1];
          *(_BYTE *)(v33 + 10) = v30[2];
          *(_WORD *)(v33 + 11) = v30[3];
          LODWORD(v20) = 8;
          v35 = 8;
LABEL_89:
          a3 = v50;
          v18 = v53;
          goto LABEL_90;
        }
        v18 = v53;
        if (strlen(v30) < 5)
          goto LABEL_84;
        v35 = 0;
        v30[4] = 0;
LABEL_85:
        LODWORD(v20) = (_DWORD)v30 - v33;
LABEL_86:
        a3 = v50;
LABEL_90:
        *(_DWORD *)(v17 + 176) = v20;
        v39 = strlen((const char *)(v33 + (int)v20));
        v40 = v20 + v39;
        *(_DWORD *)(v17 + 180) = v39;
        *(_DWORD *)(v17 + 184) = v20 + v39;
        if ((*v54 & 0x1C000) == 0x4000)
        {
          if ((int)v20 >= 5)
            v41 = 5;
          else
            v41 = v20;
        }
        else if (v40 == (_DWORD)v51)
        {
          v41 = v20 - 3;
        }
        else if (v40 == (_DWORD)v51 - 1)
        {
          v41 = v20 - 2;
        }
        else
        {
          v41 = v20 - (v40 == (_DWORD)v51 - 2);
        }
        sub_1DB7064B0(a3, v17, v35, v41);
        v17 = *(_QWORD *)(v17 + 112);
      }
      while (v17);
    }
    sub_1DB706544((uint64_t)a3, (void (*)(uint64_t))sub_1DB706830);
    v42 = *(_QWORD *)(v49 + 40);
    if (v42)
    {
      while ((*(_BYTE *)(v42 + 232) & 2) != 0 || *(_QWORD *)(v42 + 200))
      {
        v43 = *(_DWORD *)(v42 + 180) + *(_DWORD *)(v42 + 176);
        *(_DWORD *)(v42 + 184) = v43;
LABEL_104:
        *(_DWORD *)(v42 + 188) = v43;
        v42 = *(_QWORD *)(v42 + 112);
        if (!v42)
          return 0;
      }
      v44 = *(int *)(v42 + 180);
      v45 = (_WORD *)(*(_QWORD *)(v42 + 168) + *(int *)(v42 + 176) + v44);
      if (v7 > 3 || (_DWORD)v44)
      {
        if (v7 < 4 || (_DWORD)v44 != 1)
        {
LABEL_113:
          *(_DWORD *)(v42 + 184) = v44 + *(_DWORD *)(v42 + 176);
          if (v48)
          {
            *v45++ = 12603;
            *(_DWORD *)(v42 + 184) += 2;
          }
          *(_BYTE *)v45 = 0;
          v43 = *(_DWORD *)(v42 + 184);
          goto LABEL_104;
        }
        LODWORD(v44) = 0;
        *((_BYTE *)v45 - 1) = 0;
        v45 = (_WORD *)((char *)v45 - 1);
      }
      else
      {
        *(_BYTE *)v45 = 46;
        v45 = (_WORD *)((char *)v45 + 1);
        LODWORD(v44) = 1;
      }
      *(_DWORD *)(v42 + 180) = v44;
      goto LABEL_113;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1DB7063DC(uint64_t a1, uint64_t a2)
{
  return sub_1DB7066A4(*(_QWORD *)(a2 + 40), *(_QWORD *)(a1 + 40));
}

uint64_t sub_1DB7063EC(uint64_t a1, uint64_t a2)
{
  return sub_1DB7066A4(a2, *(_QWORD *)(a1 + 40));
}

uint64_t sub_1DB7063FC(_DWORD *a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  signed int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char *v20;

  if (*(_DWORD *)(a2 + 40) >= a3)
    goto LABEL_4;
  v11 = (a3 + 127) & 0xFFFFFF80;
  v12 = malloc_type_realloc(*(void **)a2, (uint64_t)v11 << 6, 0x1020040BDA28855uLL);
  if (v12)
  {
    *(_QWORD *)a2 = v12;
    *(_DWORD *)(a2 + 40) = v11;
LABEL_4:
    sub_1DB6E8388((_QWORD *)(a2 + 8), a6);
    result = 0;
    *(_QWORD *)(a2 + 24) = 0;
    v19 = a2 + 24;
    *(_QWORD *)(v19 + 8) = v19;
    *(_DWORD *)(v19 + 20) = 0;
    *(_DWORD *)(v19 + 24) = a4;
    *(_DWORD *)(v19 + 28) = a5;
    return result;
  }
  archive_set_error(a1, 12, "Can't allocate memory", v13, v14, v15, v16, v17, v20);
  return 4294967266;
}

uint64_t sub_1DB7064B0(uint64_t *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t result;

  v5 = *a1;
  v6 = *((int *)a1 + 11);
  *((_DWORD *)a1 + 11) = v6 + 1;
  v7 = v5 + (v6 << 6);
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 40) = a2;
  *(_DWORD *)(v7 + 48) = a3;
  *(_DWORD *)(v7 + 52) = a4;
  *(_DWORD *)(v7 + 56) = 0;
  v8 = a1 + 1;
  result = sub_1DB733364((unint64_t)(a1 + 1), (_QWORD *)v7);
  if (!(_DWORD)result)
  {
    result = sub_1DB73322C(v8, *(_QWORD *)(v7 + 40));
    if (result)
    {
      *(_QWORD *)(v7 + 32) = result;
      *(_QWORD *)a1[4] = v7;
      a1[4] = v7 + 24;
    }
  }
  return result;
}

uint64_t sub_1DB706544(uint64_t result, void (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = *(_QWORD *)(result + 24);
  if (v2)
  {
    v4 = result;
    v5 = result + 8;
    do
    {
      v6 = *(int *)(v4 + 48);
      v7 = *(_QWORD *)(v2 + 40);
      v8 = *(int *)(v7 + 176);
      v9 = *(_DWORD *)(v2 + 52);
      if (v9 + (_DWORD)v6 != (_DWORD)v8)
      {
        memmove((void *)(*(_QWORD *)(v7 + 168) + v9 + v6), (const void *)(*(_QWORD *)(v7 + 168) + v8), *(int *)(v7 + 180) + (uint64_t)*(int *)(v4 + 52));
        v9 = *(_DWORD *)(v2 + 52);
        v7 = *(_QWORD *)(v2 + 40);
        *(_DWORD *)(v7 + 176) = v9 + v6;
        *(_DWORD *)(v7 + 184) = *(_DWORD *)(v7 + 180) + v9 + v6;
      }
      v10 = *(_QWORD *)(v7 + 168) + v9;
      do
      {
        ++*(_DWORD *)(*(_QWORD *)(v2 + 32) + 56);
        a2(v10);
        result = sub_1DB733364(v5, (_QWORD *)v2);
      }
      while (!(_DWORD)result);
      v2 = *(_QWORD *)(v2 + 24);
    }
    while (v2);
  }
  return result;
}

_BYTE *sub_1DB706614(_BYTE *result, int a2)
{
  int v2;
  __int16 v3;
  __int16 v4;

  v2 = a2 % 0xB640uLL;
  v3 = word_1DB74C77A[(25891 * v2) >> 25];
  *result = HIBYTE(v3);
  result[1] = v3;
  LOWORD(v2) = (unsigned __int16)v2 % 0x510u;
  v4 = word_1DB74C77A[(unsigned __int16)v2 / 0x24u];
  result[2] = HIBYTE(v4);
  result[3] = v4;
  LOWORD(v2) = word_1DB74C77A[(unsigned __int16)v2 % 0x24u];
  result[4] = BYTE1(v2);
  result[5] = v2;
  return result;
}

uint64_t sub_1DB7066A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  unsigned __int8 *v11;
  int j;
  int v13;
  int v14;
  unsigned __int8 *v15;
  int i;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  size_t v20;
  char *v21;
  char *v22;
  unsigned int v23;
  char *v24;
  int v25;
  char *v26;
  unsigned int k;
  unsigned int v28;

  v4 = *(_QWORD *)(a1 + 168);
  v5 = *(_QWORD *)(a2 + 168);
  v6 = *(int *)(a1 + 176);
  v7 = *(int *)(a2 + 176);
  if ((int)v6 >= (int)v7)
    v8 = *(_DWORD *)(a2 + 176);
  else
    v8 = *(_DWORD *)(a1 + 176);
  v9 = v8;
  result = memcmp(*(const void **)(a1 + 168), *(const void **)(a2 + 168), v8);
  if ((_DWORD)result)
    return result;
  if ((int)v6 >= (int)v7)
  {
    if ((int)v6 > (int)v7)
    {
      v15 = (unsigned __int8 *)(v4 + v9);
      for (i = v7 - v6; i; ++i)
      {
        v17 = *v15++;
        result = v17;
        if (v17)
          return result;
      }
    }
  }
  else
  {
    v11 = (unsigned __int8 *)(v5 + v9);
    for (j = v6 - v7; j; ++j)
    {
      v14 = *v11++;
      v13 = v14;
      if (v14)
        return -v13;
    }
  }
  v18 = *(_DWORD *)(a1 + 180);
  if (v18 == 2)
  {
    if (*(_DWORD *)(a2 + 180) == 2)
      return 0;
    return 0xFFFFFFFFLL;
  }
  if (!v18)
  {
    if (!*(_DWORD *)(a2 + 180))
      return 0;
    return 0xFFFFFFFFLL;
  }
  if ((int)v18 < 3)
    return 0xFFFFFFFFLL;
  v19 = *(_DWORD *)(a2 + 180);
  if ((int)v19 < 3)
    return 1;
  if (v18 >= v19)
    v20 = v19;
  else
    v20 = v18;
  v21 = (char *)(v4 + v6);
  v22 = (char *)(v5 + v7);
  result = memcmp(v21, v22, v20);
  if (!(_DWORD)result)
  {
    v23 = v18 - v19;
    if (v18 >= v19)
    {
      if (v18 > v19)
      {
        v26 = &v21[v20];
        for (k = v19 - v18; k; ++k)
        {
          v28 = *v26++;
          result = v28;
          if (v28)
            return result;
        }
      }
    }
    else
    {
      v24 = &v22[v20];
      while (v23)
      {
        v25 = *v24++;
        v13 = v25;
        ++v23;
        if (v25)
          return -v13;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_1DB706810(uint64_t a1, uint64_t a2)
{
  return sub_1DB7068A8(*(_QWORD *)(a2 + 40), *(_QWORD *)(a1 + 40));
}

uint64_t sub_1DB706820(uint64_t a1, uint64_t a2)
{
  return sub_1DB7068A8(a2, *(_QWORD *)(a1 + 40));
}

_BYTE *sub_1DB706830(_BYTE *result, int a2)
{
  int v2;

  v2 = a2 % 0xB640uLL;
  *result = a0123456789abcd_3[(25891 * v2) >> 25];
  LOWORD(v2) = (unsigned __int16)v2 % 0x510u;
  result[1] = a0123456789abcd_3[(unsigned __int16)v2 / 0x24u];
  result[2] = a0123456789abcd_3[(unsigned __int16)v2 % 0x24u];
  return result;
}

uint64_t sub_1DB7068A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  unsigned __int8 *v11;
  int j;
  int v13;
  int v14;
  unsigned __int8 *v15;
  int i;
  int v17;
  unsigned int v18;
  unsigned int v19;
  size_t v20;
  char *v21;
  char *v22;
  unsigned int v23;
  char *v24;
  int v25;
  char *v26;
  unsigned int k;
  int v28;

  v4 = *(_QWORD *)(a1 + 168);
  v5 = *(_QWORD *)(a2 + 168);
  v6 = *(int *)(a1 + 176);
  v7 = *(int *)(a2 + 176);
  if ((int)v6 >= (int)v7)
    v8 = *(_DWORD *)(a2 + 176);
  else
    v8 = *(_DWORD *)(a1 + 176);
  v9 = v8;
  result = memcmp(*(const void **)(a1 + 168), *(const void **)(a2 + 168), v8);
  if ((_DWORD)result)
    return result;
  if ((int)v6 >= (int)v7)
  {
    if ((int)v6 > (int)v7)
    {
      v15 = (unsigned __int8 *)(v4 + v9);
      for (i = v7 - v6; i; ++i)
      {
        v17 = *v15++;
        result = (v17 - 32);
        if (v17 != 32)
          return result;
      }
    }
  }
  else
  {
    v11 = (unsigned __int8 *)(v5 + v9);
    for (j = v6 - v7; j; ++j)
    {
      v14 = *v11++;
      v13 = v14;
      if (v14 != 32)
        return (32 - v13);
    }
  }
  v18 = *(_DWORD *)(a1 + 180);
  if (v18 == 1)
  {
    if (*(_DWORD *)(a2 + 180) == 1)
      return 0;
    return 0xFFFFFFFFLL;
  }
  if (!v18)
  {
    if (!*(_DWORD *)(a2 + 180))
      return 0;
    return 0xFFFFFFFFLL;
  }
  if ((int)v18 < 2)
    return 0xFFFFFFFFLL;
  v19 = *(_DWORD *)(a2 + 180);
  if ((int)v19 < 2)
    return 1;
  if (v18 >= v19)
    v20 = v19;
  else
    v20 = v18;
  v21 = (char *)(v4 + v6);
  v22 = (char *)(v5 + v7);
  result = memcmp(v21, v22, v20);
  if (!(_DWORD)result)
  {
    v23 = v18 - v19;
    if (v18 >= v19)
    {
      if (v18 > v19)
      {
        v26 = &v21[v20];
        for (k = v19 - v18; k; ++k)
        {
          v28 = *v26++;
          result = (v28 - 32);
          if (v28 != 32)
            return result;
        }
      }
    }
    else
    {
      v24 = &v22[v20];
      while (v23)
      {
        v25 = *v24++;
        v13 = v25;
        ++v23;
        if (v25 != 32)
          return (32 - v13);
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_1DB706A28(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t result;
  const char *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  const char *v17;
  int i;
  int v19;

  v2 = *a1;
  v3 = *a2;
  v4 = *(_DWORD *)(*(_QWORD *)(*a1 + 32) + 136);
  v5 = *(_DWORD *)(*(_QWORD *)(*a2 + 32) + 136);
  result = (v4 - v5);
  if (v4 == v5)
  {
    v7 = *(const char **)(v2 + 168);
    v8 = *(_QWORD *)(v3 + 168);
    v9 = *(_DWORD *)(v2 + 176);
    v10 = *(_DWORD *)(v3 + 176);
    v11 = v9 >= v10 ? *(_DWORD *)(v3 + 176) : *(_DWORD *)(v2 + 176);
    v12 = v11;
    result = strncmp(v7, *(const char **)(v3 + 168), v11);
    if (!(_DWORD)result)
    {
      v13 = v9 - v10;
      if (v9 >= v10)
      {
        if (v9 > v10)
        {
          v17 = &v7[v12];
          for (i = v10 - v9; i; ++i)
          {
            v19 = *(unsigned __int8 *)v17++;
            result = (v19 - 32);
            if (v19 != 32)
              return result;
          }
        }
      }
      else
      {
        v14 = (unsigned __int8 *)(v8 + v12);
        while (v13)
        {
          v16 = *v14++;
          v15 = v16;
          ++v13;
          if (v16 != 32)
            return (32 - v15);
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1DB706AF4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t result;
  char *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  char *v17;
  int i;
  unsigned int v19;

  v2 = *a1;
  v3 = *a2;
  v4 = *(_DWORD *)(*(_QWORD *)(*a1 + 32) + 136);
  v5 = *(_DWORD *)(*(_QWORD *)(*a2 + 32) + 136);
  result = (v4 - v5);
  if (v4 == v5)
  {
    v7 = *(char **)(v2 + 168);
    v8 = *(_QWORD *)(v3 + 168);
    v9 = *(_DWORD *)(v2 + 176);
    v10 = *(_DWORD *)(v3 + 176);
    v11 = v9 >= v10 ? *(_DWORD *)(v3 + 176) : *(_DWORD *)(v2 + 176);
    v12 = v11;
    result = memcmp(v7, *(const void **)(v3 + 168), v11);
    if (!(_DWORD)result)
    {
      v13 = v9 - v10;
      if (v9 >= v10)
      {
        if (v9 > v10)
        {
          v17 = &v7[v12];
          for (i = v10 - v9; i; ++i)
          {
            v19 = *v17++;
            result = v19;
            if (v19)
              return result;
          }
        }
      }
      else
      {
        v14 = (unsigned __int8 *)(v8 + v12);
        while (v13)
        {
          v16 = *v14++;
          v15 = v16;
          ++v13;
          if (v16)
            return -v15;
        }
      }
      return 0;
    }
  }
  return result;
}

size_t sub_1DB706BB4(uint64_t a1, unint64_t a2, uint64_t a3, _DWORD *a4, unsigned int a5, int a6)
{
  uint64_t v9;
  int *v11;
  int *v12;
  int *v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int *v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  time_t v26;
  int v27;
  const void *v28;
  _BYTE *v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t *v34;
  char v35;
  char v36;
  uint64_t v37;
  int v38;
  size_t v39;
  char *v40;
  uint64_t *v41;
  unint64_t v42;
  size_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  uint64_t *v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  char v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  unsigned __int8 *v62;
  int v63;
  int v64;
  int v65;
  _BYTE *v67;
  int v68;
  char *v69;
  _WORD *v70;
  _WORD *v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  int is_set;
  uint64_t v82;
  uint64_t v83;
  char v84;
  time_t v85;
  time_t v86;
  int v87;
  time_t v88;
  time_t v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t *v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  char v116;
  uint64_t *v117;
  char v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;

  v9 = a3;
  if (a1)
  {
    v11 = (int *)(a3 + 148);
    v12 = (int *)(a3 + 144);
    v13 = (int *)(a3 + 152);
    if (!a5)
      v13 = (int *)(a3 + 140);
    if (a5 != 1)
      v12 = v13;
    if (a5 != 2)
      v11 = v12;
    if (*v11 > a2)
      return 0;
  }
  if (a5 == 3 && *(_QWORD *)(a3 + 168))
  {
    v15 = *(int *)(a3 + 184);
    if (!a1)
    {
LABEL_13:
      if (((v15 + 33) & 1) != 0)
        v14 = v15 + 34;
      else
        v14 = v15 + 33;
      if (!a5)
      {
        *(_DWORD *)(a3 + 140) = v14;
        return v14;
      }
      v16 = 0;
      goto LABEL_46;
    }
  }
  else
  {
    v15 = 1;
    if (!a1)
      goto LABEL_13;
  }
  v17 = a3;
  if (a5 == 2)
    v17 = *(_QWORD *)(a3 + 32);
  v18 = *(_QWORD *)(a3 + 24);
  if (*(_QWORD *)(v18 + 24))
    v18 = *(_QWORD *)(v18 + 24);
  if ((*(_BYTE *)(v17 + 232) & 2) != 0)
  {
    v19 = 2;
  }
  else if (*(_QWORD *)(*(_QWORD *)(v18 + 176) + 24))
  {
    v19 = 0x80;
  }
  else
  {
    v19 = 0;
  }
  *(_BYTE *)(a1 + 1) = 0;
  if ((*(_BYTE *)(v17 + 232) & 2) != 0)
    v20 = (int *)(v17 + 156);
  else
    v20 = (int *)(*(_QWORD *)(v18 + 176) + 20);
  v21 = *v20;
  *(_DWORD *)(a1 + 2) = v21;
  *(_BYTE *)(a1 + 6) = HIBYTE(v21);
  *(_BYTE *)(a1 + 7) = BYTE2(v21);
  *(_BYTE *)(a1 + 8) = BYTE1(v21);
  *(_BYTE *)(a1 + 9) = v21;
  if ((*(_BYTE *)(v17 + 232) & 2) != 0)
  {
    LOBYTE(v22) = 0;
    LODWORD(v25) = *(_DWORD *)(v17 + 160);
    LOBYTE(v23) = 8 * v25;
    LOBYTE(v24) = v25 >> 5;
    LOBYTE(v25) = v25 >> 13;
  }
  else
  {
    v22 = *(_QWORD *)(*(_QWORD *)(v18 + 176) + 8);
    v23 = v22 >> 8;
    v24 = v22 >> 16;
    v25 = v22 >> 24;
  }
  v16 = a1 - 1;
  *(_BYTE *)(a1 + 10) = v22;
  *(_BYTE *)(a1 + 11) = v23;
  *(_BYTE *)(a1 + 12) = v24;
  *(_BYTE *)(a1 + 13) = v25;
  *(_BYTE *)(a1 + 14) = v25;
  *(_BYTE *)(a1 + 15) = v24;
  *(_BYTE *)(a1 + 16) = v23;
  *(_BYTE *)(a1 + 17) = v22;
  v26 = archive_entry_mtime(*(_QWORD *)(*(_QWORD *)(v17 + 24) + 32));
  sub_1DB707C40(a1 + 18, v26);
  *(_BYTE *)(a1 + 25) = v19;
  *(_WORD *)(a1 + 26) = 0;
  v27 = a4[71];
  *(_WORD *)(a1 + 28) = v27;
  *(_BYTE *)(a1 + 30) = BYTE1(v27);
  *(_BYTE *)(a1 + 31) = v27;
  *(_BYTE *)(a1 + 32) = v15;
  if (a5 < 2)
  {
    *(_BYTE *)(a1 + 33) = 0;
  }
  else if (a5 == 2)
  {
    *(_BYTE *)(a1 + 33) = 1;
  }
  else if (a5 == 3)
  {
    v28 = *(const void **)(v9 + 168);
    v29 = (_BYTE *)(a1 + 33);
    if (v28)
      memcpy(v29, v28, v15);
    else
      *v29 = 0;
  }
  v14 = v15 + 33;
  if ((((_DWORD)v15 + 33) & 1) != 0)
  {
    v14 = v15 + 34;
    *(_BYTE *)(v16 + v15 + 34) = 0;
  }
  if (!a5)
    goto LABEL_310;
LABEL_46:
  if (a6 == 1)
    goto LABEL_309;
  v30 = a4 + 16604;
  if ((a4[16604] & 0x1800000) == 0)
    goto LABEL_309;
  v119 = 0u;
  v120 = 0u;
  v121 = 0u;
  v122 = 0;
  if (v16)
    v31 = v16 + (int)v14;
  else
    v31 = 0;
  *((_QWORD *)&v119 + 1) = v16;
  *(_QWORD *)&v120 = v9;
  LODWORD(v121) = v14;
  *(_QWORD *)((char *)&v121 + 4) = v14 | 0xE200000000;
  if (a5 == 2)
  {
    v114 = 0;
    v32 = *(_QWORD *)(v9 + 192);
    v33 = v32 == 0;
    v111 = *(_QWORD *)(v9 + 32);
    v112 = v32;
    if (!v32)
      v32 = *(_QWORD *)(v9 + 32);
    v113 = v32;
    v34 = *(uint64_t **)(v32 + 24);
    if (v33)
      v35 = -127;
    else
      v35 = -95;
  }
  else
  {
    v34 = *(uint64_t **)(v9 + 24);
    if (a5 == 1)
    {
      if (*(_QWORD *)(v9 + 32) == v9)
      {
        if (v31)
        {
          *(_BYTE *)(v31 + 7) = 0;
          v31 += 7;
          *(_DWORD *)(v31 - 6) = 17256531;
          *(_WORD *)(v31 - 2) = -4162;
        }
        v112 = 0;
        LODWORD(v14) = v14 + 7;
        LODWORD(v121) = v14;
      }
      else
      {
        v112 = 0;
      }
      v35 = -127;
      v114 = 1;
    }
    else if (a5 == 3)
    {
      if (archive_entry_filetype(v34[4]) == 40960)
        v36 = -115;
      else
        v36 = -119;
      if (*(_QWORD *)(v9 + 192))
        v36 |= 0x40u;
      if (*(_QWORD *)(v9 + 200))
        v35 = v36 | 0x10;
      else
        v35 = v36;
      if (archive_entry_filetype(v34[4]) == 0x2000
        || archive_entry_filetype(v34[4]) == 24576)
      {
        v114 = 0;
        v112 = 0;
        v35 |= 2u;
      }
      else
      {
        v114 = 0;
        v112 = 0;
      }
    }
    else
    {
      v114 = 0;
      v112 = 0;
      v35 = -127;
    }
    v113 = v9;
    v111 = v9;
  }
  if ((int)v14 >= 222)
    v31 = sub_1DB707CD4((uint64_t)&v119, 5);
  if (v31)
  {
    *(_BYTE *)(v31 + 5) = v35;
    v31 += 5;
    *(_DWORD *)(v31 - 4) = 17125970;
  }
  if ((_DWORD)v119)
  {
    v37 = *(_QWORD *)(*(_QWORD *)(v120 + 32) + 224);
    if (v37)
      *(_DWORD *)(v37 + 4) += 5;
  }
  v38 = v121 + 5;
  LODWORD(v121) = v121 + 5;
  v116 = v35;
  v117 = v34;
  v115 = v9;
  if ((v35 & 8) != 0)
  {
    v41 = v34 + 8;
    v40 = (char *)v34[8];
    v39 = v41[1];
    if (DWORD2(v121) - v38 <= 5)
      v31 = sub_1DB707CD4((uint64_t)&v119, 6);
    if (v31)
    {
      *(_WORD *)(v31 + 1) = 19790;
      *(_BYTE *)(v31 + 4) = 1;
    }
    if ((DWORD2(v121) - v121) >= 0xFF)
      v42 = 255;
    else
      v42 = (DWORD2(v121) - v121);
    for (; v39 + 5 > v42; v40 += v43)
    {
      if (v31)
      {
        *(_BYTE *)(v31 + 3) = v42;
        *(_BYTE *)(v31 + 5) = 1;
        v43 = (uint64_t)((v42 << 32) - 0x500000000) >> 32;
        memcpy((void *)(v31 + 6), v40, v43);
        v31 += v42;
      }
      else
      {
        v43 = (uint64_t)((v42 << 32) - 0x500000000) >> 32;
      }
      if ((_DWORD)v119)
      {
        v44 = *(_QWORD *)(*(_QWORD *)(v120 + 32) + 224);
        if (v44)
          *(_DWORD *)(v44 + 4) += v42;
      }
      LODWORD(v121) = v121 + v42;
      if (DWORD2(v121) - (int)v121 <= 5)
      {
        v31 = sub_1DB707CD4((uint64_t)&v119, 6);
        if ((DWORD2(v121) - v121) >= 0xFF)
          v42 = 255;
        else
          v42 = (DWORD2(v121) - v121);
      }
      if (v31)
      {
        *(_WORD *)(v31 + 1) = 19790;
        *(_BYTE *)(v31 + 4) = 1;
      }
      v39 -= v43;
    }
    v45 = v39 + 5;
    if (v31)
    {
      *(_BYTE *)(v31 + 3) = v45;
      *(_BYTE *)(v31 + 5) = 0;
      memcpy((void *)(v31 + 6), v40, v39);
      v31 += v45;
    }
    v34 = v117;
    if ((_DWORD)v119)
    {
      v46 = *(_QWORD *)(*(_QWORD *)(v120 + 32) + 224);
      if (v46)
        *(_DWORD *)(v46 + 4) += v45;
    }
    v38 = v121 + v45;
    LODWORD(v121) = v121 + v45;
    v30 = a4 + 16604;
  }
  if ((v35 & 1) != 0)
  {
    if (DWORD2(v121) - v38 <= 43)
      v31 = sub_1DB707CD4((uint64_t)&v119, 44);
    if (v31)
    {
      v47 = archive_entry_mode(v34[4]);
      v48 = archive_entry_uid(v34[4]);
      v49 = v34;
      v50 = v48;
      v51 = archive_entry_gid(v49[4]);
      if ((*v30 & 0x1800000) == 0x1000000)
      {
        if ((v47 & 0x49) != 0)
          v52 = 365;
        else
          v52 = 292;
        v53 = v52 | v47 & 0xF049;
        v54 = v52 | v47 & 0x49;
        v55 = v53 >> 8;
      }
      else
      {
        v54 = v47;
        v55 = v47 >> 8;
      }
      *(_DWORD *)(v31 + 1) = 19683408;
      *(_BYTE *)(v31 + 5) = v54;
      *(_BYTE *)(v31 + 6) = v55;
      *(_DWORD *)(v31 + 7) = 0;
      *(_BYTE *)(v31 + 11) = v55;
      *(_BYTE *)(v31 + 12) = v54;
      v56 = archive_entry_nlink(v117[4]);
      *(_DWORD *)(v31 + 13) = v56;
      *(_BYTE *)(v31 + 17) = HIBYTE(v56);
      *(_BYTE *)(v31 + 18) = BYTE2(v56);
      *(_BYTE *)(v31 + 19) = BYTE1(v56);
      *(_BYTE *)(v31 + 20) = v56;
      *(_DWORD *)(v31 + 21) = v50;
      *(_BYTE *)(v31 + 25) = HIBYTE(v50);
      *(_BYTE *)(v31 + 26) = BYTE2(v50);
      *(_BYTE *)(v31 + 27) = BYTE1(v50);
      *(_BYTE *)(v31 + 28) = v50;
      *(_DWORD *)(v31 + 29) = v51;
      *(_BYTE *)(v31 + 33) = HIBYTE(v51);
      *(_BYTE *)(v31 + 34) = BYTE2(v51);
      *(_BYTE *)(v31 + 35) = BYTE1(v51);
      *(_BYTE *)(v31 + 36) = v51;
      if ((*(_BYTE *)(v111 + 232) & 2) != 0)
      {
        v59 = *(_DWORD *)(v111 + 156);
        *(_DWORD *)(v31 + 37) = v59;
        *(_BYTE *)(v31 + 41) = HIBYTE(v59);
        *(_BYTE *)(v31 + 42) = BYTE2(v59);
        *(_BYTE *)(v31 + 43) = BYTE1(v59);
        *(_BYTE *)(v31 + 44) = v59;
        v34 = v117;
      }
      else
      {
        v57 = v117[3];
        v34 = v117;
        if (v57)
          v58 = *(_QWORD *)(v57 + 176);
        else
          v58 = v117[22];
        v60 = *(_DWORD *)(v58 + 20);
        *(_DWORD *)(v31 + 37) = v60;
        *(_BYTE *)(v31 + 41) = HIBYTE(v60);
        *(_BYTE *)(v31 + 42) = BYTE2(v60);
        *(_BYTE *)(v31 + 43) = BYTE1(v60);
        *(_BYTE *)(v31 + 44) = v60;
      }
      v31 += 44;
    }
    if ((_DWORD)v119)
    {
      v61 = *(_QWORD *)(*(_QWORD *)(v120 + 32) + 224);
      if (v61)
        *(_DWORD *)(v61 + 4) += 44;
    }
    v38 = v121 + 44;
    LODWORD(v121) = v121 + 44;
  }
  if ((v35 & 4) != 0)
  {
    if (DWORD2(v121) - v38 <= 6)
      v31 = sub_1DB707CD4((uint64_t)&v119, 7);
    v62 = (unsigned __int8 *)v34[14];
    if (v31)
    {
      *(_WORD *)(v31 + 1) = 19539;
      *(_BYTE *)(v31 + 4) = 1;
    }
    v63 = 0;
    while (1)
    {
      v118 = 0;
      v64 = DWORD2(v121) - (int)v121 >= 255 ? 255 : DWORD2(v121) - v121;
      v65 = *v62;
      if (*v62 && v64 >= 12)
        break;
      v67 = 0;
      v68 = 0;
LABEL_208:
      v74 = v68 + 5;
      if (!v65)
      {
        if (v31)
        {
          *(_BYTE *)(v31 + 3) = v74;
          *(_BYTE *)(v31 + 5) = 0;
          v31 += v74;
        }
        v9 = v115;
        v34 = v117;
        if ((_DWORD)v119)
        {
          v76 = *(_QWORD *)(*(_QWORD *)(v120 + 32) + 224);
          if (v76)
            *(_DWORD *)(v76 + 4) += v74;
        }
        LODWORD(v121) = v121 + v74;
        goto LABEL_224;
      }
      if (v31)
      {
        *v67 |= 1u;
        *(_BYTE *)(v31 + 3) = v74;
        *(_BYTE *)(v31 + 5) = 1;
        v31 += (int)v74;
      }
      if ((_DWORD)v119)
      {
        v75 = *(_QWORD *)(*(_QWORD *)(v120 + 32) + 224);
        if (v75)
          *(_DWORD *)(v75 + 4) += v74;
      }
      LODWORD(v121) = v121 + v74;
      if (DWORD2(v121) - (int)v121 <= 10)
        v31 = sub_1DB707CD4((uint64_t)&v119, 11);
      if (v31)
      {
        *(_WORD *)(v31 + 1) = 19539;
        *(_BYTE *)(v31 + 4) = 1;
      }
    }
    v68 = 0;
    v69 = 0;
    v67 = 0;
    v70 = (_WORD *)(v31 + 6);
    if (!v31)
      v70 = 0;
    while (1)
    {
      if (v65 == 47 && !v63)
      {
        if (v70)
        {
          *v70 = 8;
          v71 = v70 + 1;
          v67 = v70;
        }
        else
        {
          v71 = 0;
        }
        v69 = 0;
        v68 += 2;
        ++v62;
        v65 = 47;
        goto LABEL_204;
      }
      if ((v63 == 47 || !v63) && v65 == 46)
      {
        if (v62[1] == 46 && (!v62[2] || v62[2] == 47))
          goto LABEL_168;
      }
      else if (v65 == 47 && v62[1] == 46 && v62[2] == 46 && (v62[3] == 47 || !v62[3]))
      {
LABEL_168:
        if (v70)
        {
          *v70 = 4;
          v71 = v70 + 1;
          v65 = *v62;
          v67 = v70;
        }
        else
        {
          v71 = 0;
        }
        v69 = 0;
        v68 += 2;
        if (v65 == 47)
          v72 = 3;
        else
          v72 = 2;
        goto LABEL_203;
      }
      if ((v63 == 47 || !v63) && v65 == 46)
      {
        if (!v62[1] || v62[1] == 47)
          goto LABEL_180;
      }
      else if (v65 == 47)
      {
        if (v62[1] == 46 && (v62[2] == 47 || !v62[2]))
        {
LABEL_180:
          if (v70)
          {
            *v70 = 2;
            v71 = v70 + 1;
            v65 = *v62;
            v67 = v70;
          }
          else
          {
            v71 = 0;
          }
          v69 = 0;
          v68 += 2;
          if (v65 == 47)
            v72 = 2;
          else
            v72 = 1;
LABEL_203:
          v62 += v72;
          v65 = 46;
          goto LABEL_204;
        }
        goto LABEL_187;
      }
      if (v69)
      {
        if (!v70)
          goto LABEL_193;
        goto LABEL_186;
      }
LABEL_187:
      if (v70)
      {
        v69 = (char *)v70 + 1;
        *v70 = 0;
        v71 = v70 + 1;
        v65 = *v62;
        v67 = v70;
      }
      else
      {
        v71 = 0;
        v69 = &v118;
      }
      v68 += 2;
      if (v65 != 47)
      {
        v70 = v71;
        if (!v71)
        {
LABEL_193:
          v71 = 0;
          goto LABEL_194;
        }
LABEL_186:
        *(_BYTE *)v70 = v65;
        ++*v69;
        v71 = (_WORD *)((char *)v70 + 1);
LABEL_194:
        ++v62;
        ++v68;
        goto LABEL_204;
      }
      ++v62;
LABEL_204:
      v63 = v65;
      v65 = *v62;
      if (*v62)
        v73 = v68 + 11 < v64;
      else
        v73 = 0;
      v70 = v71;
      if (!v73)
        goto LABEL_208;
    }
  }
LABEL_224:
  v77 = 5;
  if (archive_entry_birthtime_is_set(v34[4]))
  {
    v78 = archive_entry_birthtime(v34[4]);
    v79 = archive_entry_mtime(v34[4]);
    v80 = v78 <= v79;
    if (v78 > v79)
      v77 = 5;
    else
      v77 = 12;
  }
  else
  {
    v80 = 0;
  }
  if (archive_entry_mtime_is_set(v34[4]))
  {
    v77 += 7;
    v80 |= 2u;
  }
  if (archive_entry_atime_is_set(v34[4]))
  {
    v77 += 7;
    v80 |= 4u;
  }
  is_set = archive_entry_ctime_is_set(v34[4]);
  if (is_set)
    v82 = v77 + 7;
  else
    v82 = v77;
  if (is_set)
    v80 |= 8u;
  if (DWORD2(v121) - (int)v121 < (int)v82)
    v31 = sub_1DB707CD4((uint64_t)&v119, v82);
  if (v31)
  {
    *(_BYTE *)(v31 + 5) = v80;
    v83 = v31 + 5;
    *(_WORD *)(v31 + 1) = 18004;
    *(_BYTE *)(v31 + 3) = v82;
    *(_BYTE *)(v31 + 4) = 1;
    v84 = v80;
    if ((v80 & 1) != 0)
    {
      v85 = archive_entry_birthtime(v117[4]);
      sub_1DB707C40(v31 + 6, v85);
      v83 = v31 + 12;
    }
    if ((v80 & 2) != 0)
    {
      v86 = archive_entry_mtime(v117[4]);
      sub_1DB707C40(v83 + 1, v86);
      v83 += 7;
    }
    v87 = v114;
    if ((v84 & 4) != 0)
    {
      v88 = archive_entry_atime(v117[4]);
      sub_1DB707C40(v83 + 1, v88);
      v83 += 7;
    }
    if ((v84 & 8) != 0)
    {
      v89 = archive_entry_ctime(v117[4]);
      sub_1DB707C40(v83 + 1, v89);
      v83 += 7;
    }
  }
  else
  {
    v83 = 0;
    v87 = v114;
  }
  v90 = v119;
  if ((_DWORD)v119)
  {
    v91 = *(_QWORD *)(*(_QWORD *)(v120 + 32) + 224);
    if (v91)
      *(_DWORD *)(v91 + 4) += v82;
  }
  v92 = v121 + v82;
  LODWORD(v121) = v121 + v82;
  if ((v116 & 0x40) == 0)
  {
    v93 = v117;
    if ((v116 & 0x20) == 0)
      goto LABEL_272;
    goto LABEL_264;
  }
  if (DWORD2(v121) - v92 <= 3)
    v83 = sub_1DB707CD4((uint64_t)&v119, 4);
  if (v83)
  {
    *(_DWORD *)(v83 + 1) = 17057106;
    v83 += 4;
  }
  v93 = v117;
  v90 = v119;
  if ((_DWORD)v119)
  {
    v94 = *(_QWORD *)(*(_QWORD *)(v120 + 32) + 224);
    if (v94)
      *(_DWORD *)(v94 + 4) += 4;
  }
  v92 = v121 + 4;
  LODWORD(v121) = v121 + 4;
  if ((v116 & 0x20) != 0)
  {
LABEL_264:
    if (DWORD2(v121) - v92 <= 11)
      v83 = sub_1DB707CD4((uint64_t)&v119, 12);
    if (v83)
    {
      *(_DWORD *)(v83 + 1) = 17583184;
      v95 = *(_DWORD *)(v112 + 156);
      *(_BYTE *)(v83 + 12) = v95;
      v83 += 12;
      *(_BYTE *)(v83 - 7) = v95;
      v96 = v95 >> 8;
      *(_BYTE *)(v83 - 6) = BYTE1(v95);
      v97 = HIWORD(v95);
      *(_BYTE *)(v83 - 5) = BYTE2(v95);
      v95 >>= 24;
      *(_BYTE *)(v83 - 4) = v95;
      *(_BYTE *)(v83 - 3) = v95;
      *(_BYTE *)(v83 - 2) = v97;
      *(_BYTE *)(v83 - 1) = v96;
    }
    v90 = v119;
    if ((_DWORD)v119)
    {
      v98 = *(_QWORD *)(*(_QWORD *)(v120 + 32) + 224);
      if (v98)
        *(_DWORD *)(v98 + 4) += 12;
    }
    v92 = v121 + 12;
    LODWORD(v121) = v121 + 12;
  }
LABEL_272:
  if ((v116 & 0x10) != 0)
  {
    if (DWORD2(v121) - v92 <= 11)
      v83 = sub_1DB707CD4((uint64_t)&v119, 12);
    if (v83)
    {
      *(_DWORD *)(v83 + 1) = 17583171;
      v99 = *(_DWORD *)(*(_QWORD *)(v113 + 200) + 156);
      v100 = v99 >> 8;
      *(_BYTE *)(v83 + 12) = v99;
      v83 += 12;
      *(_WORD *)(v83 - 7) = v99;
      v101 = HIWORD(v99);
      *(_BYTE *)(v83 - 5) = BYTE2(v99);
      v99 >>= 24;
      *(_BYTE *)(v83 - 4) = v99;
      *(_BYTE *)(v83 - 3) = v99;
      *(_BYTE *)(v83 - 2) = v101;
      *(_BYTE *)(v83 - 1) = v100;
    }
    v90 = v119;
    if ((_DWORD)v119)
    {
      v102 = *(_QWORD *)(*(_QWORD *)(v120 + 32) + 224);
      if (v102)
        *(_DWORD *)(v102 + 4) += 12;
    }
    v92 = v121 + 12;
    LODWORD(v121) = v121 + 12;
    if ((v116 & 2) == 0)
      goto LABEL_291;
    goto LABEL_283;
  }
  if ((v116 & 2) != 0)
  {
LABEL_283:
    if (DWORD2(v121) - v92 <= 19)
      v83 = sub_1DB707CD4((uint64_t)&v119, 20);
    if (v83)
    {
      *(_DWORD *)(v83 + 1) = 18107984;
      v103 = archive_entry_rdev((_DWORD *)v93[4]);
      *(_BYTE *)(v83 + 20) = v103;
      v83 += 20;
      *(_QWORD *)(v83 - 15) = 0x101010101010101 * (v103 >> 31);
      *(_DWORD *)(v83 - 7) = v103;
      *(_BYTE *)(v83 - 3) = HIBYTE(v103);
      *(_BYTE *)(v83 - 2) = BYTE2(v103);
      *(_BYTE *)(v83 - 1) = BYTE1(v103);
    }
    v90 = v119;
    if ((_DWORD)v119)
    {
      v104 = *(_QWORD *)(*(_QWORD *)(v120 + 32) + 224);
      if (v104)
        *(_DWORD *)(v104 + 4) += 20;
    }
    v92 = v121 + 20;
    LODWORD(v121) = v121 + 20;
  }
LABEL_291:
  if (*((_BYTE *)v93 + 192))
  {
    if (DWORD2(v121) - v92 <= 15)
      v83 = sub_1DB707CD4((uint64_t)&v119, 16);
    if (v83)
    {
      *(_DWORD *)(v83 + 1) = 17843802;
      *(_WORD *)(v83 + 5) = 31344;
      *(_BYTE *)(v83 + 7) = *((_BYTE *)v93 + 192);
      *(_BYTE *)(v83 + 8) = *((_BYTE *)v93 + 193);
      v105 = *((_DWORD *)v93 + 49);
      *(_BYTE *)(v83 + 16) = v105;
      v83 += 16;
      *(_BYTE *)(v83 - 7) = v105;
      v106 = v105 >> 8;
      *(_BYTE *)(v83 - 6) = BYTE1(v105);
      v107 = HIWORD(v105);
      *(_BYTE *)(v83 - 5) = BYTE2(v105);
      v105 >>= 24;
      *(_BYTE *)(v83 - 4) = v105;
      *(_BYTE *)(v83 - 3) = v105;
      *(_BYTE *)(v83 - 2) = v107;
      *(_BYTE *)(v83 - 1) = v106;
    }
    v90 = v119;
    if ((_DWORD)v119)
    {
      v108 = *(_QWORD *)(*(_QWORD *)(v120 + 32) + 224);
      if (v108)
        *(_DWORD *)(v108 + 4) += 16;
    }
    LODWORD(v121) = v121 + 16;
  }
  if (v87 && v113 == *(_QWORD *)(v113 + 32))
  {
    if (v83)
    {
      sub_1DB707D78(v83 + 1, a4[116], 0, 237);
      v90 = v119;
    }
    if (v90)
    {
      v109 = *(_QWORD *)(*(_QWORD *)(v120 + 32) + 224);
      if (v109)
        *(_DWORD *)(v109 + 4) += 28;
    }
    LODWORD(v121) = v121 + 28;
  }
  sub_1DB707E0C((uint64_t)&v119, 0);
  v14 = DWORD1(v121);
LABEL_309:
  if (a1)
  {
LABEL_310:
    *(_BYTE *)a1 = v14;
    return v14;
  }
  switch(a5)
  {
    case 3u:
      *(_DWORD *)(v9 + 152) = v14;
      break;
    case 2u:
      *(_DWORD *)(v9 + 148) = v14;
      break;
    case 1u:
      *(_DWORD *)(v9 + 144) = v14;
      break;
  }
  return v14;
}

int8x8_t sub_1DB707C40(uint64_t a1, time_t a2)
{
  int16x8_t v3;
  int8x8_t result;
  tm v5;
  time_t v6;

  v6 = a2;
  memset(&v5, 0, sizeof(v5));
  tzset();
  localtime_r(&v6, &v5);
  *(_BYTE *)a1 = v5.tm_year;
  *(_BYTE *)(a1 + 1) = LOBYTE(v5.tm_mon) + 1;
  v3.i64[1] = *(_QWORD *)&v5.tm_hour;
  *(int16x4_t *)v3.i8 = vrev64_s16(vmovn_s32(*(int32x4_t *)&v5.tm_sec));
  result = vmovn_s16(v3);
  *(_DWORD *)(a1 + 2) = result.i32[0];
  *(_BYTE *)(a1 + 6) = ((((unsigned __int128)(v5.tm_gmtoff * (__int128)0x48D159E26AF37C05) >> 64) & 0x8000000000000000) != 0)
                     + ((unsigned __int16)((unsigned __int128)(v5.tm_gmtoff * (__int128)0x48D159E26AF37C05) >> 64) >> 8);
  return result;
}

uint64_t sub_1DB707CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(int *)(a1 + 32);
  sub_1DB707E0C(a1, 28);
  *(_DWORD *)a1 = 1;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    *(_QWORD *)(a1 + 24) = v4 + v5 + 1;
    *(_QWORD *)(a1 + 8) = sub_1DB707EA4(*(_QWORD *)(a1 + 16), (_DWORD *)(a1 + 40), (_DWORD *)(a1 + 44), (_DWORD *)(a1 + 48))- 1;
  }
  else
  {
    sub_1DB707EA4(*(_QWORD *)(a1 + 16), (_DWORD *)(a1 + 40), 0, 0);
  }
  *(_DWORD *)(a1 + 32) = 0;
  if (*(_DWORD *)(a1 + 40) < (int)a2)
    sub_1DB707CD4(a1, a2);
  return *(_QWORD *)(a1 + 8);
}

double sub_1DB707D78(uint64_t a1, int a2, int a3, int a4)
{
  double result;

  *(_QWORD *)&result = 18629955;
  *(_DWORD *)a1 = 18629955;
  *(_DWORD *)(a1 + 4) = a2;
  *(_BYTE *)(a1 + 8) = HIBYTE(a2);
  *(_BYTE *)(a1 + 9) = BYTE2(a2);
  *(_BYTE *)(a1 + 10) = BYTE1(a2);
  *(_BYTE *)(a1 + 11) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_BYTE *)(a1 + 16) = HIBYTE(a3);
  *(_BYTE *)(a1 + 17) = BYTE2(a3);
  *(_BYTE *)(a1 + 18) = BYTE1(a3);
  *(_BYTE *)(a1 + 19) = a3;
  *(_DWORD *)(a1 + 20) = a4;
  *(_BYTE *)(a1 + 24) = HIBYTE(a4);
  *(_BYTE *)(a1 + 25) = BYTE2(a4);
  *(_BYTE *)(a1 + 26) = BYTE1(a4);
  *(_BYTE *)(a1 + 27) = a4;
  return result;
}

void sub_1DB707E0C(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  if (a2 <= 0)
  {
    v3 = *(_DWORD *)(a1 + 32);
    if ((v3 & 1) == 0)
    {
LABEL_6:
      v4 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    if (*(_DWORD *)a1)
    {
      v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + 224);
      if (v2)
        *(_DWORD *)(v2 + 4) += a2;
    }
    v3 = *(_DWORD *)(a1 + 32) + a2;
    *(_DWORD *)(a1 + 32) = v3;
    if ((v3 & 1) == 0)
      goto LABEL_6;
  }
  v5 = v3 + 1;
  *(_DWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
    *(_BYTE *)(v6 + v5) = 0;
  v4 = -1;
LABEL_11:
  if (*(_DWORD *)a1)
  {
    if (*(_QWORD *)(a1 + 24))
      sub_1DB707D78(*(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 44), *(_DWORD *)(a1 + 32) + v4);
  }
  else
  {
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a1 + 32);
  }
}

char *sub_1DB707EA4(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  _QWORD *v7;
  char *result;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  int v12;
  int v13;

  v7 = *(_QWORD **)(a1 + 32);
  if (a3)
  {
    result = (char *)v7[28];
    if (*((int *)result + 1) >= 2021)
      result = (char *)*((_QWORD *)result + 257);
  }
  else if (v7[26] && (v9 = v7[27], *(int *)(v9 - 2052) < 2021))
  {
    result = (char *)(v9 - 2056);
  }
  else
  {
    result = (char *)malloc_type_malloc(0x810uLL, 0x1020040A4C74593uLL);
    if (!result)
      return result;
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 257) = 0;
    v10 = (_QWORD *)v7[27];
    if (!v10)
      v10 = v7 + 26;
    *v10 = result;
    v7[27] = result + 2056;
  }
  v11 = *((_DWORD *)result + 1);
  v12 = 2020 - v11;
  v13 = 2019 - v11;
  if ((v12 & 1) == 0)
    v13 = v12;
  *a2 = v13;
  if (a3)
    *a3 = *((_DWORD *)result + 1);
  if (a4)
    *a4 = *(_DWORD *)result;
  v7[28] = result;
  result += *((int *)result + 1) + 8;
  return result;
}

uint64_t sub_1DB707FA4(uint64_t a1, uint64_t a2, unsigned int a3, int a4, char *a5, int a6)
{
  unsigned __int8 *v6;
  size_t v7;
  char *v8;

  if ((a6 - 2) < 2)
    return sub_1DB7085C4(a1, (_WORD *)(a2 + a3), a5, (int)(a4 - a3 + 1), a6);
  if (a6 == 1)
  {
    v6 = (unsigned __int8 *)(a2 + a3);
    v7 = (int)(a4 - a3 + 1);
    v8 = "";
    goto LABEL_7;
  }
  if (!a6)
  {
    v6 = (unsigned __int8 *)(a2 + a3);
    v7 = (int)(a4 - a3 + 1);
    v8 = (char *)&unk_1DB74C866;
LABEL_7:
    sub_1DB70853C(v6, a5, v7, (uint64_t)v8);
    return 0;
  }
  return 4294967266;
}

uint64_t sub_1DB708030(uint64_t a1, uint64_t a2, unsigned int a3, int a4, char *a5, int a6)
{
  unsigned __int8 *v6;
  size_t v7;
  __int128 *v8;

  if ((a6 - 2) < 2)
    return sub_1DB7085C4(a1, (_WORD *)(a2 + a3), a5, (int)(a4 - a3 + 1), a6);
  if (a6 == 1)
  {
    v6 = (unsigned __int8 *)(a2 + a3);
    v7 = (int)(a4 - a3 + 1);
    v8 = (__int128 *)algn_1DB74C67A;
    goto LABEL_7;
  }
  if (!a6)
  {
    v6 = (unsigned __int8 *)(a2 + a3);
    v7 = (int)(a4 - a3 + 1);
    v8 = &xmmword_1DB74C6FA;
LABEL_7:
    sub_1DB70853C(v6, a5, v7, (uint64_t)v8);
    return 0;
  }
  return 4294967266;
}

uint64_t sub_1DB7080BC(uint64_t a1, unsigned int a2, int a3, int a4, _DWORD *a5, uint64_t a6, uint64_t a7, char *a8, int a9, int a10)
{
  uint64_t v17;
  BOOL v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  char v42[256];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v17 = *(_QWORD *)(a7 + 8);
  if (a9)
    v18 = v17 == 0;
  else
    v18 = 1;
  if (v18)
  {
    if (v17)
    {
      v19 = *(char **)a7;
      goto LABEL_9;
    }
    if (a10)
    {
      v34 = (uint64_t)a5;
      v35 = a1;
      v36 = a2;
      v37 = a3;
      v19 = 0;
      return sub_1DB708030(v34, v35, v36, v37, v19, a4);
    }
    v38 = (uint64_t)a5;
    v39 = a1;
    v40 = a2;
    v41 = a3;
    v19 = 0;
    return sub_1DB707FA4(v38, v39, v40, v41, v19, a4);
  }
  v19 = *(char **)a7;
  if (**(_BYTE **)a7 != 95)
  {
    if (a10)
    {
      v34 = (uint64_t)a5;
      v35 = a1;
      v36 = a2;
      v37 = a3;
      return sub_1DB708030(v34, v35, v36, v37, v19, a4);
    }
    v38 = (uint64_t)a5;
    v39 = a1;
    v40 = a2;
    v41 = a3;
    return sub_1DB707FA4(v38, v39, v40, v41, v19, a4);
  }
LABEL_9:
  if (a9)
    v20 = v19 + 1;
  else
    v20 = v19;
  v21 = sub_1DB7054E8(*(_QWORD *)a6, v20);
  if (v21)
  {
    v27 = *(int *)(v21 + 180);
    v28 = v27 + *(int *)(v21 + 176);
    v29 = *(_DWORD *)(a6 + 8);
    v30 = 254;
    if (v29 != 1)
      v30 = 255;
    if (v30 >= v28)
      v31 = v27 + *(int *)(v21 + 176);
    else
      v31 = v30;
    __memcpy_chk();
    v42[v31] = 0;
    if (v29 == 1)
    {
      v32 = 254;
      if (v28 < 0xFE)
        v32 = v28;
      v42[v32 + 1] = 0;
      a4 = 3;
    }
    if (a10)
      return sub_1DB708030((uint64_t)a5, a1, a2, a3, v42, a4);
    else
      return sub_1DB707FA4((uint64_t)a5, a1, a2, a3, v42, a4);
  }
  else
  {
    return 4294967266;
  }
}

tm *sub_1DB708330(uint64_t a1, time_t a2)
{
  tm *result;
  int v4;
  uint64_t i;
  int v6;
  uint64_t j;
  uint64_t v8;
  int tm_mday;
  uint64_t v10;
  int tm_hour;
  uint64_t v12;
  int tm_min;
  uint64_t v14;
  int tm_sec;
  tm v16;
  time_t v17;

  v17 = a2;
  memset(&v16, 0, sizeof(v16));
  tzset();
  result = localtime_r(&v17, &v16);
  v4 = v16.tm_year + 1900;
  for (i = 3; i != -1; --i)
  {
    *(_BYTE *)(a1 + i) = (char)v4 % 10 + 48;
    v4 /= 10;
  }
  v6 = v16.tm_mon + 1;
  for (j = 5; j != 3; --j)
  {
    *(_BYTE *)(a1 + j) = (char)v6 % 10 + 48;
    v6 /= 10;
  }
  v8 = 0;
  tm_mday = v16.tm_mday;
  do
  {
    *(_BYTE *)(a1 + 7 + v8--) = (char)tm_mday % 10 + 48;
    tm_mday /= 10;
  }
  while (v8 != -2);
  v10 = 0;
  tm_hour = v16.tm_hour;
  do
  {
    *(_BYTE *)(a1 + 9 + v10--) = (char)tm_hour % 10 + 48;
    tm_hour /= 10;
  }
  while (v10 != -2);
  v12 = 0;
  tm_min = v16.tm_min;
  do
  {
    *(_BYTE *)(a1 + 11 + v12--) = (char)tm_min % 10 + 48;
    tm_min /= 10;
  }
  while (v12 != -2);
  v14 = 0;
  tm_sec = v16.tm_sec;
  do
  {
    *(_BYTE *)(a1 + 13 + v14--) = (char)tm_sec % 10 + 48;
    tm_sec /= 10;
  }
  while (v14 != -2);
  *(_WORD *)(a1 + 14) = 12336;
  *(_BYTE *)(a1 + 16) = ((((unsigned __int128)(v16.tm_gmtoff * (__int128)0x48D159E26AF37C05) >> 64) & 0x8000000000000000) != 0)
                      + ((unsigned __int16)((unsigned __int128)(v16.tm_gmtoff * (__int128)0x48D159E26AF37C05) >> 64) >> 8);
  return result;
}

unsigned __int8 *sub_1DB70853C(unsigned __int8 *result, const char *a2, size_t a3, uint64_t a4)
{
  const char *v4;
  unsigned __int8 v5;
  _BOOL4 v6;
  BOOL v7;
  unsigned __int8 *v8;
  unsigned int v9;
  size_t v10;
  int v11;
  BOOL v12;

  if (a2)
    v4 = a2;
  else
    v4 = "";
  v5 = *v4;
  v6 = a3 != 0;
  if (*v4)
    v7 = a3 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    v8 = (unsigned __int8 *)(v4 + 1);
    do
    {
      if ((v5 & 0x80) != 0 || !*(_BYTE *)(a4 + v5))
      {
        v9 = (v5 - 97);
        v5 -= 32;
        if (v9 >= 0x1A)
          v5 = 95;
      }
      *result++ = v5;
      v10 = a3 - 1;
      v11 = *v8++;
      v5 = v11;
      v6 = a3 != 1;
      if (v11)
        v12 = a3 == 1;
      else
        v12 = 1;
      --a3;
    }
    while (!v12);
    a3 = v10;
  }
  if (v6)
    return (unsigned __int8 *)memset(result, 32, a3);
  return result;
}

uint64_t sub_1DB7085C4(uint64_t a1, _WORD *__dst, char *a3, uint64_t a4, int a5)
{
  char v5;
  _WORD *v6;
  char *v7;
  unint64_t v8;
  _QWORD *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  size_t v19;
  int v20;
  char *v21;
  size_t v22;
  void *v23;
  size_t i;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  size_t v30;
  char *v31;

  v5 = a4;
  v6 = __dst;
  if (a3)
    v7 = a3;
  else
    v7 = "";
  v8 = a4 & 0xFFFFFFFFFFFFFFFELL;
  if (a5 == 2)
  {
    v10 = *(_QWORD **)(a1 + 264);
    v11 = strlen(v7);
    if (sub_1DB72D14C((uint64_t)(v10 + 9), v7, v11, v10[15]) && *__error() == 12)
    {
      archive_set_error((_DWORD *)a1, 12, "Can't allocate memory for UTF-16BE", v12, v13, v14, v15, v16, v31);
      return 4294967266;
    }
    v21 = (char *)v10[9];
    if (v10[10] >= v8)
      v22 = v8;
    else
      v22 = v10[10];
    v23 = v6;
  }
  else
  {
    if (*(_WORD *)v7)
    {
      v18 = 0;
      do
      {
        v19 = v18 + 2;
        v20 = *(unsigned __int16 *)&v7[v18 + 2];
        v18 += 2;
      }
      while (v20);
    }
    else
    {
      v19 = 0;
    }
    if (v19 >= v8)
      v22 = a4 & 0xFFFFFFFFFFFFFFFELL;
    else
      v22 = v19;
    v23 = __dst;
    v21 = v7;
  }
  memcpy(v23, v21, v22);
  if (v22)
  {
    for (i = 0; i < v22; i += 2)
    {
      v25 = __rev16((unsigned __int16)v6[i / 2]);
      if (v25 >= 0x20)
      {
        v26 = v25 - 42;
        v27 = v26 > 0x32;
        v28 = (1 << v26) & 0x4000000230021;
        if (v27 || v28 == 0)
          continue;
      }
      LOBYTE(v6[i / 2]) = 0;
      HIBYTE(v6[i / 2]) = 95;
    }
    v6 = (_WORD *)((char *)v6 + i);
  }
  if (v8 != v22)
  {
    v30 = v22 - v8;
    do
    {
      *v6++ = 0x2000;
      v30 += 2;
    }
    while (v30);
  }
  result = 0;
  if ((v5 & 1) != 0)
    *(_BYTE *)v6 = 0;
  return result;
}

void **sub_1DB70874C(void **result, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  if (*a2)
    v9 = 44;
  else
    v9 = 32;
  switch((int)a4)
  {
    case 0:
      result = (void **)sub_1DB7303C0(result, "%c%s%s", a3, a4, a5, a6, a7, a8, (char *)v9);
      break;
    case 1:
      result = (void **)sub_1DB7303C0(result, "%c%s=%s", a3, a4, a5, a6, a7, a8, (char *)v9);
      break;
    case 2:
      result = (void **)sub_1DB7303C0(result, "%c%s=%d", a3, a4, a5, a6, a7, a8, (char *)v9);
      break;
    case 3:
      result = (void **)sub_1DB7303C0(result, "%c%s=%x", a3, a4, a5, a6, a7, a8, (char *)v9);
      break;
    default:
      break;
  }
  *a2 = 1;
  return result;
}

uint64_t sub_1DB708860(uint64_t a1, off_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  ssize_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_QWORD *)(a1 + 264);
  lseek(*(_DWORD *)(v5 + 8), a2, 0);
  while (1)
  {
    if (!a3)
      return 0;
    v6 = *(_QWORD *)(a1 + 264);
    v7 = *(_QWORD *)(v6 + 66272);
    v8 = v7 >= a3 ? a3 : *(_QWORD *)(v6 + 66272);
    v9 = read(*(_DWORD *)(v5 + 8), (void *)(v6 - v7 + 66268), v8);
    v16 = (char *)v9;
    if (v9 <= 0)
      break;
    a3 -= v9;
    result = sub_1DB7035FC(a1, (char *)v9, v10, v11, v12, v13, v14, v15);
    if ((result & 0x80000000) != 0)
      return result;
  }
  v18 = __error();
  archive_set_error((_DWORD *)a1, *v18, "Can't read temporary file(%jd)", v19, v20, v21, v22, v23, v16);
  return 4294967266;
}

void sub_1DB708928(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  if (a1)
  {
    v1 = a1;
    while (1)
    {
      do
      {
        v2 = v1;
        if ((*(_BYTE *)(v1 + 232) & 2) == 0)
          break;
        v1 = *(_QWORD *)(v1 + 40);
      }
      while (v1);
      while (1)
      {
        v1 = *(_QWORD *)(v2 + 112);
        if (v1)
          break;
        v3 = *(_QWORD *)(v2 + 32);
        sub_1DB703420(v2);
        v4 = v3 == v2;
        v2 = v3;
        if (v4)
          return;
      }
      sub_1DB703420(v2);
    }
  }
}

uint64_t sub_1DB70898C(uint64_t a1, uint64_t a2)
{
  const char *v3;
  const char *v4;

  v3 = (const char *)archive_entry_pathname(*(uint64_t **)(*(_QWORD *)(a1 + 32) + 32));
  v4 = (const char *)archive_entry_pathname(*(uint64_t **)(*(_QWORD *)(a2 + 32) + 32));
  return strcmp(v3, v4);
}

uint64_t sub_1DB7089CC(uint64_t a1, const char *a2)
{
  const char *v3;

  v3 = (const char *)archive_entry_pathname(*(uint64_t **)(*(_QWORD *)(a1 + 32) + 32));
  return strcmp(v3, a2);
}

uint64_t archive_read_disk_set_standard_lookup(_DWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v19;

  v2 = malloc_type_malloc(0x818uLL, 0x107004094202FE0uLL);
  v3 = malloc_type_malloc(0x818uLL, 0x107004094202FE0uLL);
  v9 = v3;
  if (v2 && v3)
  {
    bzero(v2 + 1, 0x810uLL);
    *v2 = a1;
    v2[4] = 127;
    bzero(v9 + 1, 0x810uLL);
    *v9 = a1;
    v9[4] = 127;
    archive_read_disk_set_gname_lookup((uint64_t)a1, (uint64_t)v9, (uint64_t)sub_1DB708AF0, (uint64_t)sub_1DB6DEC4C, v10, v11, v12, v13);
    archive_read_disk_set_uname_lookup((uint64_t)a1, (uint64_t)v2, (uint64_t)sub_1DB708B00, (uint64_t)sub_1DB6DEC4C, v14, v15, v16, v17);
    return 0;
  }
  else
  {
    archive_set_error(a1, 12, "Can't allocate uname/gname lookup cache", v4, v5, v6, v7, v8, v19);
    free(v2);
    free(v9);
    return 4294967266;
  }
}

char *sub_1DB708AF0(uint64_t a1, uint64_t a2)
{
  return sub_1DB708B10(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1DB708CE4, a2);
}

char *sub_1DB708B00(uint64_t a1, uint64_t a2)
{
  return sub_1DB708B10(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1DB708BE0, a2);
}

char *sub_1DB708B10(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  char *result;
  char **v8;
  char *v9;
  char **v10;

  ++*(_DWORD *)(a1 + 24);
  v6 = a1 + 16 * (int)((unint64_t)a3 % *(_QWORD *)(a1 + 32));
  v9 = *(char **)(v6 + 48);
  v8 = (char **)(v6 + 48);
  result = v9;
  v10 = v8 - 1;
  if (v9)
  {
    if (*(_DWORD *)v10 == (_DWORD)a3)
    {
      ++*(_DWORD *)(a1 + 28);
      if (result == "(noname)")
        return 0;
      return result;
    }
    if (result != "(noname)")
      free(result);
    *v8 = 0;
  }
  result = (char *)a2(a1, a3);
  if (result)
    *v8 = result;
  else
    *v8 = "(noname)";
  *(_DWORD *)v10 = a3;
  return result;
}

char *sub_1DB708BE0(uint64_t a1, char *a2)
{
  char *v4;
  size_t i;
  int v6;
  char *v7;
  _DWORD *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  passwd *v16;
  passwd v17;

  if (*(_QWORD *)(a1 + 16))
  {
    v4 = *(char **)(a1 + 8);
    if (!v4)
      return 0;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 256;
    v4 = (char *)malloc_type_malloc(0x100uLL, 0xD74B6447uLL);
    *(_QWORD *)(a1 + 8) = v4;
    if (!v4)
      return 0;
  }
  memset(&v17, 0, sizeof(v17));
  for (i = *(_QWORD *)(a1 + 16); ; *(_QWORD *)(a1 + 16) = i)
  {
    v16 = &v17;
    v6 = getpwuid_r((uid_t)a2, &v17, v4, i, &v16);
    if (v6 != 34)
      break;
    i = 2 * *(_QWORD *)(a1 + 16);
    v7 = (char *)malloc_type_realloc(*(void **)(a1 + 8), i, 0xC3EB2B98uLL);
    if (!v7)
      goto LABEL_12;
    v4 = v7;
    *(_QWORD *)(a1 + 8) = v7;
  }
  if (v6)
  {
LABEL_12:
    v9 = *(_DWORD **)a1;
    v10 = __error();
    archive_set_error(v9, *v10, "Can't lookup user for id %d", v11, v12, v13, v14, v15, a2);
    return 0;
  }
  if (!v16)
    return 0;
  return strdup(v16->pw_name);
}

char *sub_1DB708CE4(uint64_t a1, char *a2)
{
  char *v4;
  size_t i;
  int v6;
  char *v7;
  _DWORD *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  group *v16;
  group v17;

  if (*(_QWORD *)(a1 + 16))
  {
    v4 = *(char **)(a1 + 8);
    if (!v4)
      return 0;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 256;
    v4 = (char *)malloc_type_malloc(0x100uLL, 0xAF8BC13EuLL);
    *(_QWORD *)(a1 + 8) = v4;
    if (!v4)
      return 0;
  }
  memset(&v17, 0, sizeof(v17));
  for (i = *(_QWORD *)(a1 + 16); ; *(_QWORD *)(a1 + 16) = i)
  {
    v16 = &v17;
    v6 = getgrgid_r((gid_t)a2, &v17, v4, i, &v16);
    if (v6 != 34)
      break;
    i = 2 * *(_QWORD *)(a1 + 16);
    v7 = (char *)malloc_type_realloc(*(void **)(a1 + 8), i, 0x60914F2uLL);
    if (!v7)
      goto LABEL_12;
    v4 = v7;
    *(_QWORD *)(a1 + 8) = v7;
  }
  if (v6)
  {
LABEL_12:
    v9 = *(_DWORD **)a1;
    v10 = __error();
    archive_set_error(v9, *v10, "Can't lookup group for id %d", v11, v12, v13, v14, v15, a2);
    return 0;
  }
  if (!v16)
    return 0;
  return strdup(v16->gr_name);
}

uint64_t archive_write_add_filter_grzip(int *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;

  v2 = sub_1DB7321E4((uint64_t)a1);
  result = sub_1DB6E0594(a1, -1329217314, 1, "archive_write_add_filter_grzip", v3, v4, v5, v6);
  if ((_DWORD)result != -30)
  {
    v8 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    if (v8)
    {
      v14 = v8;
      v15 = sub_1DB6EBA88("grzip");
      *v14 = v15;
      if (v15)
      {
        v2[8] = v14;
        v2[9] = "grzip";
        *((_DWORD *)v2 + 20) = 12;
        v2[3] = sub_1DB708EFC;
        v2[4] = sub_1DB708EE8;
        v2[5] = sub_1DB708F04;
        v2[6] = sub_1DB708F18;
        v2[7] = sub_1DB708F24;
        archive_set_error(a1, -1, "Using external grzip program for grzip compression", v16, v17, v18, v19, v20, v21);
        return 4294967276;
      }
      free(v14);
    }
    archive_set_error(a1, 12, "Can't allocate memory", v9, v10, v11, v12, v13, v21);
    return 4294967266;
  }
  return result;
}

uint64_t sub_1DB708EE8(uint64_t a1)
{
  return sub_1DB6EBB98(a1, **(_QWORD **)(a1 + 64), "grzip");
}

uint64_t sub_1DB708EFC()
{
  return 4294967276;
}

uint64_t sub_1DB708F04(uint64_t a1, char *__buf, uint64_t __nbyte, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1DB6EBC40(a1, **(_QWORD **)(a1 + 64), __buf, __nbyte, a5, a6, a7, a8);
}

uint64_t sub_1DB708F18(uint64_t a1)
{
  return sub_1DB6EBE0C(a1, **(_QWORD **)(a1 + 64));
}

uint64_t sub_1DB708F24(uint64_t a1)
{
  void ***v1;

  v1 = *(void ****)(a1 + 64);
  sub_1DB6EBB5C(*v1);
  free(v1);
  return 0;
}

void archive_read_support_filter_rpm(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;

  if (sub_1DB6E4544("rpm"))
  {
    if (sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_filter_rpm", v3, v4, v5, v6) != -30)
    {
      v16 = 0;
      sub_1DB6F7FD0(a1, &v16, v7, v8, v9, v10, v11, v12);
      if (!v13)
      {
        *v16 = 0;
        v14 = v16;
        v16[1] = "rpm";
        v14[2] = sub_1DB70900C;
        v14[4] = 0;
        v14[5] = 0;
        v14[3] = sub_1DB709080;
      }
    }
  }
  else
  {
    archive_set_error(a1, -1, "Format not allow-listed in entitlement", v2, v3, v4, v5, v6, v15);
  }
}

size_t sub_1DB70900C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t result;
  uint64_t v9;

  v9 = 0;
  result = sub_1DB6E22F4(a2, 8uLL, &v9, a4, a5, a6, a7, a8);
  if (result)
  {
    if (*(_DWORD *)result == -605115411
      && *(unsigned __int8 *)(result + 4) - 3 <= 1
      && !*(_BYTE *)(result + 6))
    {
      if (*(unsigned __int8 *)(result + 7) >= 2u)
        return 0;
      else
        return 56;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1DB709080(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t result;
  char *v10;

  *(_DWORD *)(a1 + 104) = 8;
  *(_QWORD *)(a1 + 96) = "rpm";
  *(_QWORD *)(a1 + 40) = sub_1DB70910C;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = sub_1DB709410;
  v2 = malloc_type_calloc(0x30uLL, 1uLL, 0x66C7B7F9uLL);
  if (v2)
  {
    v8 = v2;
    result = 0;
    *(_QWORD *)(a1 + 88) = v8;
    v8[10] = 0;
  }
  else
  {
    archive_set_error(*(_DWORD **)(a1 + 24), 12, "Can't allocate data for rpm", v3, v4, v5, v6, v7, v10);
    return 4294967266;
  }
  return result;
}

unint64_t sub_1DB70910C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v26;
  uint64_t v27;

  v10 = 0;
  v11 = 0;
  v12 = *(_QWORD *)(a1 + 88);
  *a2 = 0;
  v27 = 0;
  v13 = (_QWORD *)(v12 + 8);
  v14 = (unsigned __int8 *)(v12 + 24);
  while (2)
  {
    if (!v10)
    {
      v10 = (_BYTE *)sub_1DB6E22F4(*(_QWORD *)(a1 + 16), 1uLL, &v27, a4, a5, a6, a7, a8);
      if (!v10)
        return (v27 >> 63) & 0xFFFFFFFFFFFFFFE2;
    }
    switch(*(_DWORD *)(v12 + 40))
    {
      case 0:
        v15 = v27;
        v16 = 0;
        if (v27 + *(_QWORD *)v12 > 95)
        {
          v24 = 96 - *(_QWORD *)v12;
          v11 += v24;
          v10 += v24;
          *v13 = 0;
          *(_QWORD *)(v12 + 16) = 0;
          *(_QWORD *)(v12 + 40) = 0x100000001;
        }
        else
        {
          v11 += v27;
        }
        goto LABEL_31;
      case 1:
        v15 = v27;
        if (16 - *v13 >= v27 - v11)
          v17 = v27 - v11;
        else
          v17 = 16 - *v13;
        memcpy(&v14[*v13], v10, v17);
        v10 += v17;
        v11 += v17;
        v18 = *v13 + v17;
        *v13 = v18;
        if (v18 != 16)
          goto LABEL_25;
        if (*v14 == 142
          && *(unsigned __int8 *)(v12 + 25) == 173
          && *(unsigned __int8 *)(v12 + 26) == 232
          && *(_BYTE *)(v12 + 27) == 1)
        {
          v16 = 0;
          HIDWORD(v19) = *(unsigned __int8 *)(v12 + 37);
          LODWORD(v19) = bswap32(*(unsigned __int16 *)(v12 + 38));
          *(_QWORD *)(v12 + 16) = ((16 * *(unsigned __int8 *)(v12 + 35)) | (*(unsigned __int8 *)(v12 + 34) << 12) | (*(unsigned __int8 *)(v12 + 33) << 20) | (*(unsigned __int8 *)(v12 + 32) << 28))
                                + ((v19 >> 16) | (*(unsigned __int8 *)(v12 + 36) << 24))
                                + 16;
          *(_QWORD *)(v12 + 40) = 2;
        }
        else
        {
          if (*(_DWORD *)(v12 + 44))
          {
            archive_set_error(*(_DWORD **)(a1 + 24), 79, "Unrecognized rpm header", a4, a5, a6, a7, a8, v26);
            return -30;
          }
          *(_DWORD *)(v12 + 40) = 4;
          *a2 = v14;
          v16 = 16;
        }
LABEL_31:
        if (v11 == v15)
        {
LABEL_32:
          *(_QWORD *)v12 += v15;
          sub_1DB6E26F8(*(_QWORD *)(a1 + 16), v15, a3, a4, a5, a6, a7, a8);
          v10 = 0;
          v11 = 0;
          v15 = v27;
        }
        if (!v16 && v15 > 0)
          continue;
        if (v11 && v10)
        {
          *(_QWORD *)v12 += v11;
          sub_1DB6E26F8(*(_QWORD *)(a1 + 16), v11, a3, a4, a5, a6, a7, a8);
        }
        break;
      case 2:
        v21 = *(_QWORD *)(v12 + 8);
        v20 = *(_QWORD *)(v12 + 16);
        v22 = v20 - v21;
        v15 = v27;
        if (v20 - v21 >= v27 - v11)
          v22 = v27 - v11;
        v10 += v22;
        v11 += v22;
        v23 = v22 + v21;
        *(_QWORD *)(v12 + 8) = v23;
        if (v23 != v20)
          goto LABEL_25;
        v16 = 0;
        *(_DWORD *)(v12 + 40) = 3;
        goto LABEL_31;
      case 3:
        v15 = v27;
        if (v11 >= v27)
        {
LABEL_25:
          v16 = 0;
        }
        else
        {
          while (!*v10)
          {
            ++v10;
            if (v27 == ++v11)
            {
              v16 = 0;
              goto LABEL_32;
            }
          }
          v16 = 0;
          *(_DWORD *)(v12 + 40) = 1;
          *v13 = 0;
          *(_QWORD *)(v12 + 16) = 0;
        }
        goto LABEL_31;
      case 4:
        *a2 = v10;
        v16 = v27;
        v15 = v27;
        goto LABEL_32;
      default:
        v16 = 0;
        v15 = v27;
        goto LABEL_31;
    }
    return v16;
  }
}

uint64_t sub_1DB709410(uint64_t a1)
{
  free(*(void **)(a1 + 88));
  return 0;
}

uint64_t archive_read_extract(_DWORD *a1, uint64_t a2, int a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;

  v6 = (uint64_t *)sub_1DB743D68((uint64_t)a1);
  if (v6)
  {
    v7 = v6;
    v8 = *v6;
    if (v8)
    {
LABEL_5:
      archive_write_disk_set_options(v8, a3);
      return archive_read_extract2((uint64_t)a1, a2, *v7, v15, v16, v17, v18, v19);
    }
    v9 = archive_write_disk_new();
    *v7 = (uint64_t)v9;
    if (v9)
    {
      archive_write_disk_set_standard_lookup((uint64_t)v9);
      v8 = *v7;
      goto LABEL_5;
    }
    archive_set_error(a1, 12, "Can't extract", v10, v11, v12, v13, v14, v21);
  }
  return 4294967266;
}

uint64_t sub_1DB7094BC(int a1, _QWORD *a2, const char **a3)
{
  unint64_t v3;
  uint64_t result;
  const char *v5;

  if (a1 == 2)
  {
    v3 = a2[1];
    result = v3 | (*a2 << 24);
    if (*a2 == (v3 | (*(_DWORD *)a2 << 24)) >> 24)
    {
      if (!(v3 >> 24))
        return result;
      v5 = "invalid minor number";
    }
    else
    {
      v5 = "invalid major number";
    }
  }
  else
  {
    result = 0;
    v5 = "too many fields for format";
  }
  *a3 = v5;
  return result;
}

_QWORD *sub_1DB70950C(const void *a1)
{
  _QWORD *result;

  result = bsearch(a1, &off_1EA321A60, 0x10uLL, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_1DB709540);
  if (result)
    return (_QWORD *)result[1];
  return result;
}

uint64_t sub_1DB709540(const char *a1, const char **a2)
{
  return strcmp(a1, *a2);
}

uint64_t sub_1DB709548(int a1, _QWORD *a2, const char **a3)
{
  unint64_t v3;
  uint64_t result;
  const char *v6;

  if (a1 != 2)
  {
    result = 0;
    v6 = "too many fields for format";
LABEL_10:
    *a3 = v6;
    return result;
  }
  v3 = a2[1];
  result = (unsigned __int16)((unsigned __int16)*a2 << 8) | v3;
  if (v3 > 0xFF || *a2 != *a2)
  {
    if (v3 <= 0xFF)
      v6 = "invalid major number";
    else
      v6 = "invalid minor number";
    goto LABEL_10;
  }
  return result;
}

unint64_t sub_1DB7095A0(int a1, _QWORD *a2, const char **a3)
{
  uint64_t v3;
  unint64_t result;
  const char *v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;

  if (a1 == 3)
  {
    v7 = a2[1];
    v8 = a2[2];
    result = (*a2 << 20) | ((v7 & 0xFFF) << 8) | v8;
    if ((v7 | *a2) > 0xFFF || v8 > 0xFF)
    {
      if (v7 <= 0xFFF)
        v9 = "invalid major number";
      else
        v9 = "invalid unit number";
      if (v8 <= 0xFF)
        v6 = v9;
      else
        v6 = "invalid subunit number";
      goto LABEL_20;
    }
  }
  else
  {
    if (a1 != 2)
    {
      result = 0;
      v6 = "too many fields for format";
LABEL_20:
      *a3 = v6;
      return result;
    }
    v3 = a2[1] >> 20;
    result = a2[1] & 0xFFFFF | ((unsigned __int16)*a2 << 20);
    if (*a2 > 0xFFFuLL || v3 != 0)
    {
      if (v3)
        v6 = "invalid minor number";
      else
        v6 = "invalid major number";
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t sub_1DB709654(int a1, _QWORD *a2, const char **a3)
{
  uint64_t v3;
  int v4;
  uint64_t result;
  const char *v7;

  if (a1 != 2)
  {
    result = 0;
    v7 = "too many fields for format";
LABEL_10:
    *a3 = v7;
    return result;
  }
  v3 = a2[1];
  v4 = v3 & 0xFFFF00FF;
  result = v3 & 0xFFFF00FF | (*a2 << 8);
  if (*a2 > 0xFFuLL || v4 != v3)
  {
    if (v4 == v3)
      v7 = "invalid major number";
    else
      v7 = "invalid minor number";
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_1DB7096B0(int a1, _QWORD *a2, const char **a3)
{
  uint64_t v3;
  uint64_t result;
  const char *v6;

  if (a1 != 2)
  {
    result = 0;
    v6 = "too many fields for format";
LABEL_10:
    *a3 = v6;
    return result;
  }
  v3 = a2[1] >> 24;
  result = a2[1] & 0xFFFFFF | (*a2 << 24);
  if (*a2 > 0xFFuLL || v3 != 0)
  {
    if (v3)
      v6 = "invalid minor number";
    else
      v6 = "invalid major number";
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_1DB709704(int a1, _QWORD *a2, const char **a3)
{
  unint64_t v3;
  uint64_t result;
  const char *v5;

  if (a1 == 2)
  {
    v3 = a2[1];
    result = v3 | ((*a2 & 0xFFF) << 8) & 0xFFFFF | ((unsigned __int16)(v3 >> 8) << 20);
    if (*a2 > 0xFFFuLL)
    {
      v5 = "invalid major number";
    }
    else
    {
      if (v3 < 0x100000)
        return result;
      v5 = "invalid minor number";
    }
  }
  else
  {
    result = 0;
    v5 = "too many fields for format";
  }
  *a3 = v5;
  return result;
}

unint64_t sub_1DB70975C(int a1, _QWORD *a2, const char **a3)
{
  unint64_t v3;
  unint64_t result;
  const char *v5;

  if (a1 != 2)
  {
    result = 0;
    v5 = "too many fields for format";
LABEL_9:
    *a3 = v5;
    return result;
  }
  v3 = a2[1];
  result = v3 & 0xFFFFF | ((unsigned __int16)*a2 << 20);
  if (*a2 > 0xFFFuLL || v3 >= 0x100000)
  {
    if (v3 >> 20)
      v5 = "invalid minor number";
    else
      v5 = "invalid major number";
    goto LABEL_9;
  }
  return result;
}

unint64_t sub_1DB7097B8(int a1, _QWORD *a2, const char **a3)
{
  unint64_t v3;
  unint64_t result;
  const char *v5;

  if (a1 != 2)
  {
    result = 0;
    v5 = "too many fields for format";
LABEL_9:
    *a3 = v5;
    return result;
  }
  v3 = a2[1];
  result = v3 & 0x3FFFF | ((unsigned __int16)*a2 << 18);
  if (*a2 >> 14 || v3 >= 0x40000)
  {
    if (v3 >> 18)
      v5 = "invalid minor number";
    else
      v5 = "invalid major number";
    goto LABEL_9;
  }
  return result;
}

uint64_t archive_read_open_fd(_DWORD *a1, char *a2, size_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v53;
  stat v54;

  memset(&v54, 0, sizeof(v54));
  archive_clear_error((uint64_t)a1);
  if (fstat((int)a2, &v54))
  {
    v6 = __error();
    archive_set_error(a1, *v6, "Can't stat fd %d", v7, v8, v9, v10, v11, a2);
    return 4294967266;
  }
  v12 = malloc_type_calloc(1uLL, 0x20uLL, 0x1080040E8018C35uLL);
  v13 = malloc_type_malloc(a3, 0xE6DB263AuLL);
  v20 = v13;
  if (!v12 || !v13)
  {
    archive_set_error(a1, 12, "No memory", v15, v16, v17, v18, v19, v53);
    free(v12);
    free(v20);
    return 4294967266;
  }
  *((_QWORD *)v12 + 1) = a3;
  *((_QWORD *)v12 + 3) = v13;
  *v12 = (_DWORD)a2;
  if ((v54.st_mode & 0xF000) == 0x8000)
  {
    archive_read_extract_set_skip_file((uint64_t)a1, v54.st_dev, v54.st_ino, v15, v16, v17, v18, v19);
    *((_BYTE *)v12 + 16) = 1;
  }
  archive_read_set_read_callback((uint64_t)a1, (uint64_t)sub_1DB70998C, v14, v15, v16, v17, v18, v19);
  archive_read_set_skip_callback((uint64_t)a1, (uint64_t)sub_1DB709A10, v21, v22, v23, v24, v25, v26);
  archive_read_set_seek_callback((uint64_t)a1, (uint64_t)sub_1DB709AC4, v27, v28, v29, v30, v31, v32);
  archive_read_set_close_callback((uint64_t)a1, (uint64_t)sub_1DB709B54, v33, v34, v35, v36, v37, v38);
  archive_read_set_callback_data((uint64_t)a1, (uint64_t)v12, v39, v40, v41, v42, v43, v44);
  return archive_read_open1((uint64_t)a1, v45, v46, v47, v48, v49, v50, v51);
}

ssize_t sub_1DB70998C(_DWORD *a1, unsigned int *a2, _QWORD *a3)
{
  ssize_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a3 = *((_QWORD *)a2 + 3);
  while (1)
  {
    v5 = read(*a2, *((void **)a2 + 3), *((_QWORD *)a2 + 1));
    if ((v5 & 0x8000000000000000) == 0)
      break;
    if (*__error() != 4)
    {
      v6 = __error();
      archive_set_error(a1, *v6, "Error reading fd %d", v7, v8, v9, v10, v11, (char *)*a2);
      return v5;
    }
  }
  return v5;
}

uint64_t sub_1DB709A10(_DWORD *a1, uint64_t a2, unint64_t a3)
{
  off_t v6;
  off_t v7;
  off_t v8;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;

  if (!*(_BYTE *)(a2 + 16) || a3 % *(_QWORD *)(a2 + 8) == a3)
    return 0;
  v6 = lseek(*(_DWORD *)a2, 0, 1);
  if ((v6 & 0x8000000000000000) == 0)
  {
    v7 = v6;
    v8 = lseek(*(_DWORD *)a2, a3, 1);
    if ((v8 & 0x8000000000000000) == 0)
      return v8 - v7;
  }
  *(_BYTE *)(a2 + 16) = 0;
  if (*__error() == 29)
    return 0;
  v10 = __error();
  archive_set_error(a1, *v10, "Error seeking", v11, v12, v13, v14, v15, v16);
  return -1;
}

off_t sub_1DB709AC4(_DWORD *a1, int *a2, off_t a3, int a4)
{
  off_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;

  v6 = lseek(*a2, a3, a4);
  if (v6 < 0)
  {
    v7 = *__error();
    v8 = *__error();
    if (v7 == 29)
      v14 = "A file descriptor(%d) is not seekable(PIPE)";
    else
      v14 = "Error seeking in a file descriptor(%d)";
    if (v7 == 29)
      v6 = -25;
    else
      v6 = -30;
    archive_set_error(a1, v8, v14, v9, v10, v11, v12, v13, (char *)*a2);
  }
  return v6;
}

uint64_t sub_1DB709B54(uint64_t a1, void **a2)
{
  free(a2[3]);
  free(a2);
  return 0;
}

uint64_t archive_write_add_filter_lzop(int *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;

  v2 = sub_1DB7321E4((uint64_t)a1);
  result = sub_1DB6E0594(a1, -1329217314, 1, "archive_write_add_filter_lzop", v3, v4, v5, v6);
  if ((_DWORD)result != -30)
  {
    v8 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040D5A9D86FuLL);
    if (v8)
    {
      v14 = v8;
      v2[8] = v8;
      v2[9] = "lzop";
      *((_DWORD *)v2 + 20) = 11;
      v2[3] = sub_1DB709D28;
      v2[4] = sub_1DB709C8C;
      v2[5] = sub_1DB709D90;
      v2[6] = sub_1DB709DA4;
      v2[7] = sub_1DB709DB0;
      v15 = sub_1DB6EBA88("lzop");
      v14[1] = v15;
      if (v15)
      {
        *(_DWORD *)v14 = 0;
        archive_set_error(a1, -1, "Using external lzop program for lzop compression", v16, v17, v18, v19, v20, v21);
        return 4294967276;
      }
      free(v14);
    }
    archive_set_error(a1, 12, "Can't allocate memory", v9, v10, v11, v12, v13, v21);
    return 4294967266;
  }
  return result;
}

uint64_t sub_1DB709C8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5[3];

  v2 = *(_QWORD *)(a1 + 64);
  memset(v5, 0, sizeof(v5));
  sub_1DB6E323C(v5, "lzop", 4uLL);
  if (*(int *)v2 >= 1)
  {
    sub_1DB72CE60(v5, 32);
    sub_1DB72CE60(v5, 45);
    sub_1DB72CE60(v5, *(_BYTE *)v2 + 48);
  }
  v3 = sub_1DB6EBB98(a1, *(_QWORD *)(v2 + 8), (char *)v5[0]);
  sub_1DB6E7C3C((uint64_t)v5);
  return v3;
}

uint64_t sub_1DB709D28(uint64_t a1, char *__s1, char *a3)
{
  _DWORD *v4;
  int v5;
  uint64_t result;
  int v7;

  v4 = *(_DWORD **)(a1 + 64);
  v5 = strcmp(__s1, "compression-level");
  result = 4294967276;
  if (a3)
  {
    if (!v5)
    {
      v7 = *a3;
      if ((v7 - 49) <= 8 && !a3[1])
      {
        result = 0;
        *v4 = v7 - 48;
      }
    }
  }
  return result;
}

uint64_t sub_1DB709D90(uint64_t a1, char *__buf, uint64_t __nbyte, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1DB6EBC40(a1, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8), __buf, __nbyte, a5, a6, a7, a8);
}

uint64_t sub_1DB709DA4(uint64_t a1)
{
  return sub_1DB6EBE0C(a1, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8));
}

uint64_t sub_1DB709DB0(uint64_t a1)
{
  void ***v1;

  v1 = *(void ****)(a1 + 64);
  sub_1DB6EBB5C(v1[1]);
  free(v1);
  return 0;
}

uint64_t archive_read_open_FILE(_DWORD *a1, FILE *a2)
{
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  stat v46;

  archive_clear_error((uint64_t)a1);
  v4 = malloc_type_malloc(0x20uLL, 0x10A00406E3BE4FBuLL);
  v5 = malloc_type_malloc(0x20000uLL, 0x48B9EF72uLL);
  v11 = v5;
  if (v4 && v5)
  {
    memset(&v46, 0, sizeof(v46));
    v4[1] = 0x20000;
    v4[2] = v5;
    *v4 = a2;
    v12 = fileno(a2);
    if (fstat(v12, &v46) || (v46.st_mode & 0xF000) != 0x8000)
    {
      v19 = 0;
    }
    else
    {
      archive_read_extract_set_skip_file((uint64_t)a1, v46.st_dev, v46.st_ino, v14, v15, v16, v17, v18);
      v19 = 1;
    }
    *((_BYTE *)v4 + 24) = v19;
    archive_read_set_read_callback((uint64_t)a1, (uint64_t)sub_1DB709F24, v13, v14, v15, v16, v17, v18);
    archive_read_set_skip_callback((uint64_t)a1, (uint64_t)sub_1DB709F9C, v21, v22, v23, v24, v25, v26);
    archive_read_set_close_callback((uint64_t)a1, (uint64_t)sub_1DB709FF0, v27, v28, v29, v30, v31, v32);
    archive_read_set_callback_data((uint64_t)a1, (uint64_t)v4, v33, v34, v35, v36, v37, v38);
    return archive_read_open1((uint64_t)a1, v39, v40, v41, v42, v43, v44, v45);
  }
  else
  {
    archive_set_error(a1, 12, "No memory", v6, v7, v8, v9, v10, *(char **)&v46.st_dev);
    free(v4);
    free(v11);
    return 4294967266;
  }
}

size_t sub_1DB709F24(_DWORD *a1, uint64_t a2, _QWORD *a3)
{
  size_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v13;

  *a3 = *(_QWORD *)(a2 + 16);
  v5 = fread(*(void **)(a2 + 16), 1uLL, *(_QWORD *)(a2 + 8), *(FILE **)a2);
  if (v5 < *(_QWORD *)(a2 + 8) && ferror(*(FILE **)a2))
  {
    v6 = __error();
    archive_set_error(a1, *v6, "Error reading file", v7, v8, v9, v10, v11, v13);
  }
  return v5;
}

uint64_t sub_1DB709F9C(int a1, uint64_t a2, off_t a3)
{
  uint64_t result;
  int v6;

  result = 0;
  if (a3 && *(_BYTE *)(a2 + 24))
  {
    v6 = fseeko(*(FILE **)a2, a3, 1);
    result = a3;
    if (v6)
    {
      result = 0;
      *(_BYTE *)(a2 + 24) = 0;
    }
  }
  return result;
}

uint64_t sub_1DB709FF0(uint64_t a1, void **a2)
{
  free(a2[2]);
  free(a2);
  return 0;
}

uint64_t sub_1DB70A020(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;

  v2 = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)a1 = xmmword_1DB74CA8C;
  *(_OWORD *)(a1 + 16) = unk_1DB74CA9C;
  do
  {
    *(_DWORD *)(a1 + v2) ^= *(_DWORD *)&a2[v2];
    v2 += 4;
  }
  while (v2 != 32);
  *(_QWORD *)(a1 + 120) = *a2;
  return 0;
}

uint64_t sub_1DB70A074(uint64_t a1, int *__src, unint64_t a3)
{
  int *v3;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  if (a3)
  {
    v3 = __src;
    v5 = *(_QWORD *)(a1 + 112);
    v6 = 64 - v5;
    v7 = a3 - (64 - v5);
    if (a3 <= 64 - v5)
    {
      v7 = a3;
    }
    else
    {
      *(_QWORD *)(a1 + 112) = 0;
      memcpy((void *)(a1 + 48 + v5), __src, 64 - v5);
      v8 = *(_DWORD *)(a1 + 32);
      v9 = v8 + 64;
      if (v8 <= 0xFFFFFFBF)
        v10 = *(_DWORD *)(a1 + 36);
      else
        v10 = *(_DWORD *)(a1 + 36) + 1;
      *(_DWORD *)(a1 + 32) = v9;
      *(_DWORD *)(a1 + 36) = v10;
      sub_1DB70A160((__int128 *)a1, (int *)(a1 + 48));
      v3 = (int *)((char *)v3 + v6);
      if (v7 >= 0x41)
      {
        do
        {
          v11 = *(_DWORD *)(a1 + 32);
          v12 = v11 + 64;
          if (v11 <= 0xFFFFFFBF)
            v13 = *(_DWORD *)(a1 + 36);
          else
            v13 = *(_DWORD *)(a1 + 36) + 1;
          *(_DWORD *)(a1 + 32) = v12;
          *(_DWORD *)(a1 + 36) = v13;
          sub_1DB70A160((__int128 *)a1, v3);
          v3 += 16;
          v7 -= 64;
        }
        while (v7 > 0x40);
      }
    }
    memcpy((void *)(a1 + *(_QWORD *)(a1 + 112) + 48), v3, v7);
    *(_QWORD *)(a1 + 112) += v7;
  }
  return 0;
}

int8x16_t sub_1DB70A160(__int128 *a1, int *a2)
{
  unint64_t v2;
  __int128 v3;
  int v4;
  int v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  unint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  unint64_t v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  unint64_t v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  unint64_t v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  unint64_t v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  unint64_t v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  unint64_t v269;
  int v270;
  int v271;
  int v272;
  int v273;
  int v274;
  int v275;
  int v276;
  int v277;
  int v278;
  int v279;
  int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  int v285;
  int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  int v294;
  int v295;
  int v296;
  int v297;
  int v298;
  int v299;
  int v300;
  int v301;
  int v302;
  unint64_t v303;
  int v304;
  int v305;
  int v306;
  int v307;
  int v308;
  int v309;
  int v310;
  int v311;
  int v312;
  int v313;
  int v314;
  int v315;
  int v316;
  int v317;
  int v318;
  int v319;
  int v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  int v327;
  int v328;
  int v329;
  int v330;
  int v331;
  int v332;
  int v333;
  int v334;
  int v335;
  int v336;
  unint64_t v337;
  int v338;
  int v339;
  int v340;
  int v341;
  int v342;
  int v343;
  int v344;
  int v345;
  int v346;
  int v347;
  int v348;
  int v349;
  int v350;
  int v351;
  int v352;
  int v353;
  int v354;
  int v355;
  int v356;
  int v357;
  int v358;
  int v359;
  int v360;
  int v361;
  int v362;
  int v363;
  int v364;
  int v365;
  int v366;
  int v367;
  int v368;
  int v369;
  int v370;
  unint64_t v371;
  int v372;
  int v373;
  int v374;
  int v375;
  int v376;
  int v377;
  int v378;
  int v379;
  int v380;
  int v381;
  int v382;
  int v383;
  int v384;
  int v385;
  int v386;
  int v387;
  int v388;
  int v389;
  int v390;
  int v391;
  int v392;
  int v393;
  int v394;
  int v395;
  int v396;
  int v397;
  int v398;
  int v399;
  int v400;
  int v401;
  int v402;
  int v403;
  int v404;
  int v405;
  int v406;
  int v407;
  int v408;
  int v409;
  int v410;
  int v411;
  int v412;
  int v413;
  int v414;
  int v415;
  int v416;
  unint64_t v417;
  int v418;
  int v419;
  int v420;
  int v421;
  int v422;
  int v423;
  int v424;
  int v425;
  int v426;
  unint64_t v427;
  int v428;
  int v429;
  int v430;
  int v431;
  int v432;
  int v433;
  int v434;
  int v435;
  int v436;
  int v437;
  int v438;
  int v439;
  int v440;
  unint64_t v441;
  int v442;
  int v443;
  int v444;
  int v445;
  int v446;
  int v447;
  int v448;
  int v449;
  int v450;
  int v451;
  int v452;
  int v453;
  int v454;
  int v455;
  int v456;
  int v457;
  int v458;
  int v459;
  int v460;
  int v461;
  int v462;
  int v463;
  int v464;
  int v465;
  int v466;
  int v467;
  int v468;
  int v469;
  int v470;
  int v471;
  int v472;
  int v473;
  int v474;
  int v475;
  int v476;
  int v477;
  int v478;
  int v479;
  int v480;
  int v481;
  int v482;
  int v483;
  int v484;
  int v485;
  int v486;
  int v487;
  int v488;
  int v489;
  int v490;
  int v491;
  int v492;
  unsigned int v493;
  unint64_t v494;
  int v495;
  int v496;
  unint64_t v497;
  int v498;
  int v499;
  int v500;
  int v501;
  int v502;
  int v503;
  int v504;
  int v505;
  int v506;
  int v507;
  int v508;
  int v509;
  int v510;
  int v511;
  int v512;
  int v513;
  int v514;
  int v515;
  int v516;
  int v517;
  int v518;
  int v519;
  int v520;
  int v521;
  int v522;
  int v523;
  int v524;
  int v525;
  int v526;
  int v527;
  int v528;
  int v529;
  int v530;
  int v531;
  int v532;
  int v533;
  int v534;
  int v535;
  int v536;
  int v537;
  int v538;
  int v539;
  int v540;
  int v541;
  int v542;
  int v543;
  int v544;
  int v545;
  int v546;
  int v547;
  int v548;
  int v549;
  int v550;
  unint64_t v551;
  int v552;
  int v553;
  int v554;
  int v555;
  unint64_t v556;
  int v557;
  int v558;
  int v559;
  int v560;
  int v561;
  int v562;
  int v563;
  int v564;
  int v565;
  int v566;
  int v567;
  int v568;
  int v569;
  int v570;
  unint64_t v571;
  int v572;
  int v573;
  int v574;
  int v575;
  int v576;
  int v577;
  int v578;
  int v579;
  int v580;
  int v581;
  int v582;
  int v583;
  int v584;
  int v585;
  int v586;
  int v587;
  int v588;
  int v589;
  int v590;
  int v591;
  int v592;
  int v593;
  int v594;
  int v595;
  int v596;
  int v597;
  int v598;
  int v599;
  int v600;
  int v601;
  int v602;
  int v603;
  int v604;
  int v605;
  int v606;
  int v607;
  int v608;
  int v609;
  int v610;
  int v611;
  int v612;
  int v613;
  int v614;
  unsigned int v615;
  unint64_t v616;
  int v617;
  int v618;
  int v619;
  int v620;
  int v621;
  int v622;
  int v623;
  unint64_t v624;
  int v625;
  int v626;
  int v627;
  int v628;
  int v629;
  int v630;
  int v631;
  int v632;
  int v633;
  int v634;
  int v635;
  int v636;
  int v637;
  int v638;
  int v639;
  int v640;
  int v641;
  int v642;
  int v643;
  int v644;
  int v645;
  int v646;
  int v647;
  int v648;
  int v649;
  int v650;
  int v651;
  int v652;
  int v653;
  int v654;
  int v655;
  int v656;
  int v657;
  int v658;
  int v659;
  int v660;
  int v661;
  int v662;
  int v663;
  int v664;
  int v665;
  int v666;
  int v667;
  unsigned int v668;
  int v669;
  int v670;
  int v671;
  int v672;
  unint64_t v673;
  int v674;
  int v675;
  int v676;
  int v677;
  int v678;
  int v679;
  int v680;
  int v681;
  int v682;
  int v683;
  int v684;
  unsigned int v685;
  int8x16_t result;
  int v687;
  int v688;
  int v689;
  int v690;
  int v691;
  int v692;
  int v693;
  int v694;
  int v695;
  int v696;
  int v697;
  int v698;
  int v699;
  int v700;
  int v701;
  int v702;
  int v703;
  __int128 v704;
  __int128 v705;
  _DWORD v706[5];
  int v707;
  int v708;
  int v709;
  uint64_t v710;

  v2 = 0;
  v710 = *MEMORY[0x1E0C80C00];
  v701 = *a2;
  v703 = a2[1];
  v3 = a1[1];
  v704 = *a1;
  v705 = v3;
  v4 = v3 + v704 + v701;
  v5 = *((_DWORD *)a1 + 8) ^ 0x510E527F ^ v4;
  HIDWORD(v6) = v5;
  LODWORD(v6) = v5;
  v7 = (v6 >> 16) + 1779033703;
  v8 = v7 ^ v3;
  HIDWORD(v6) = v7 ^ v3;
  LODWORD(v6) = v7 ^ v3;
  v9 = v703 + v4 + (v6 >> 12);
  v10 = v9 ^ __ROR4__(v5, 16);
  v692 = a2[2];
  v699 = a2[3];
  v11 = DWORD1(v3) + DWORD1(v704) + v692;
  HIDWORD(v6) = *((_DWORD *)a1 + 9) ^ 0x9B05688C ^ v11;
  LODWORD(v6) = HIDWORD(v6);
  v12 = (v6 >> 16) - 1150833019;
  HIDWORD(v6) = v12 ^ DWORD1(v3);
  LODWORD(v6) = v12 ^ DWORD1(v3);
  v13 = v699 + v11 + (v6 >> 12);
  LODWORD(v6) = v13 ^ __ROR4__(*((_DWORD *)a1 + 9) ^ 0x9B05688C ^ v11, 16);
  v14 = v6;
  HIDWORD(v6) = v6;
  v15 = (v6 >> 8) + v12;
  LODWORD(v6) = v15 ^ __ROR4__(v12 ^ DWORD1(v3), 12);
  v16 = v6;
  HIDWORD(v6) = v6;
  v17 = v6 >> 7;
  v18 = a2[4];
  v698 = a2[5];
  v19 = DWORD2(v3) + DWORD2(v704) + v18;
  HIDWORD(v6) = *((_DWORD *)a1 + 10) ^ 0x1F83D9AB ^ v19;
  LODWORD(v6) = HIDWORD(v6);
  v20 = (v6 >> 16) + 1013904242;
  HIDWORD(v6) = v20 ^ DWORD2(v3);
  LODWORD(v6) = v20 ^ DWORD2(v3);
  v21 = v698 + v19 + (v6 >> 12);
  LODWORD(v6) = v21 ^ __ROR4__(*((_DWORD *)a1 + 10) ^ 0x1F83D9AB ^ v19, 16);
  v22 = v6;
  HIDWORD(v6) = v6;
  v23 = v6 >> 8;
  v697 = a2[6];
  v693 = a2[7];
  v24 = HIDWORD(v3) + HIDWORD(v704) + v697;
  HIDWORD(v6) = *((_DWORD *)a1 + 11) ^ 0x5BE0CD19 ^ v24;
  LODWORD(v6) = HIDWORD(v6);
  v25 = (v6 >> 16) - 1521486534;
  HIDWORD(v6) = v25 ^ HIDWORD(v3);
  LODWORD(v6) = v25 ^ HIDWORD(v3);
  v26 = v23 + v20;
  v27 = v26 ^ __ROR4__(v20 ^ DWORD2(v3), 12);
  v28 = v693 + v24 + (v6 >> 12);
  v29 = v28 ^ __ROR4__(*((_DWORD *)a1 + 11) ^ 0x5BE0CD19 ^ v24, 16);
  v30 = a2[8];
  v31 = v17 + v9 + v30;
  LODWORD(v6) = v31 ^ __ROR4__(v29, 8);
  v32 = v6;
  HIDWORD(v6) = v6;
  v33 = (v6 >> 16) + v26;
  HIDWORD(v6) = v10;
  LODWORD(v6) = v10;
  v34 = v6 >> 8;
  v691 = a2[9];
  LODWORD(v6) = v33 ^ __ROR4__(v16, 7);
  v35 = v6;
  HIDWORD(v6) = v6;
  v36 = v691 + v31 + (v6 >> 12);
  HIDWORD(v6) = v29;
  LODWORD(v6) = v29;
  v37 = v6 >> 8;
  LODWORD(v6) = v36 ^ __ROR4__(v32, 16);
  v38 = v6;
  HIDWORD(v6) = v6;
  v39 = v34 + v7;
  v40 = v37 + v25;
  v41 = (v6 >> 8) + v33;
  v702 = a2[11];
  v696 = a2[10];
  HIDWORD(v6) = v27;
  LODWORD(v6) = v27;
  v42 = (v6 >> 7) + v13 + v696;
  LODWORD(v6) = v42 ^ __ROR4__(v10, 8);
  v43 = v6;
  HIDWORD(v6) = v6;
  v44 = v40 ^ __ROR4__(v25 ^ HIDWORD(v3), 12);
  v45 = (v6 >> 16) + v40;
  LODWORD(v6) = v45 ^ __ROR4__(v27, 7);
  v46 = v6;
  HIDWORD(v6) = v6;
  v47 = v702 + v42 + (v6 >> 12);
  LODWORD(v6) = v47 ^ __ROR4__(v43, 16);
  v48 = v6;
  HIDWORD(v6) = v6;
  v49 = (v6 >> 8) + v45;
  v50 = a2[12];
  HIDWORD(v6) = v44;
  LODWORD(v6) = v44;
  v51 = (v6 >> 7) + v21 + v50;
  v52 = v39 ^ __ROR4__(v8, 12);
  LODWORD(v6) = v51 ^ __ROR4__(v14, 8);
  v53 = v6;
  HIDWORD(v6) = v6;
  v54 = (v6 >> 16) + v39;
  v700 = a2[13];
  LODWORD(v6) = v54 ^ __ROR4__(v44, 7);
  v55 = v6;
  HIDWORD(v6) = v6;
  v56 = v700 + v51 + (v6 >> 12);
  v57 = a2[15];
  v694 = a2[14];
  HIDWORD(v6) = v52;
  LODWORD(v6) = v52;
  v58 = v28 + v694 + (v6 >> 7);
  LODWORD(v6) = v58 ^ __ROR4__(v22, 8);
  v59 = v6;
  HIDWORD(v6) = v6;
  v60 = (v6 >> 16) + v15;
  LODWORD(v6) = v60 ^ __ROR4__(v52, 7);
  v61 = v6;
  HIDWORD(v6) = v6;
  v62 = v57 + v58 + (v6 >> 12);
  LODWORD(v6) = __ROR4__(v53, 16);
  v63 = v56 ^ v6;
  v65 = __PAIR64__(v56 ^ v6, __ROR4__(v59, 16));
  v64 = v62 ^ v65;
  LODWORD(v65) = v63;
  v66 = v65 >> 8;
  HIDWORD(v65) = v64;
  LODWORD(v65) = v64;
  v67 = v66 + v54;
  v68 = (v65 >> 8) + v60;
  LODWORD(v65) = v68 ^ __ROR4__(v61, 12);
  v69 = v65;
  HIDWORD(v65) = v65;
  v70 = v694 + v36 + (v65 >> 7);
  v71 = v67 ^ __ROR4__(v55, 12);
  LODWORD(v65) = v70 ^ __ROR4__(v48, 8);
  v72 = v65;
  HIDWORD(v65) = v65;
  v73 = (v65 >> 16) + v67;
  LODWORD(v65) = v73 ^ __ROR4__(v69, 7);
  v74 = v65;
  HIDWORD(v65) = v65;
  v75 = v70 + v696 + (v65 >> 12);
  LODWORD(v65) = v75 ^ __ROR4__(v72, 16);
  v76 = v65;
  HIDWORD(v65) = v65;
  v77 = (v65 >> 8) + v73;
  LODWORD(v65) = v41 ^ __ROR4__(v35, 12);
  v78 = v65;
  HIDWORD(v65) = v65;
  v79 = (v65 >> 7) + v18 + v47;
  LODWORD(v65) = v79 ^ __ROR4__(v63, 8);
  v80 = v65;
  HIDWORD(v65) = v65;
  v81 = v68 + (v65 >> 16);
  v689 = v30;
  v690 = v57;
  LODWORD(v65) = v81 ^ __ROR4__(v78, 7);
  v82 = v65;
  HIDWORD(v65) = v65;
  v83 = v79 + v30 + (v65 >> 12);
  LODWORD(v65) = v83 ^ __ROR4__(v80, 16);
  v84 = v65;
  HIDWORD(v65) = v65;
  v85 = (v65 >> 8) + v81;
  LODWORD(v65) = v49 ^ __ROR4__(v46, 12);
  v86 = v65;
  HIDWORD(v65) = v65;
  v87 = (v65 >> 7) + v691 + v56;
  LODWORD(v65) = v87 ^ __ROR4__(v64, 8);
  v88 = v65;
  HIDWORD(v65) = v65;
  v89 = (v65 >> 16) + v41;
  LODWORD(v65) = v89 ^ __ROR4__(v86, 7);
  v90 = v65;
  HIDWORD(v65) = v65;
  v91 = v57 + v87 + (v65 >> 12);
  HIDWORD(v65) = v71;
  LODWORD(v65) = v71;
  v92 = (v65 >> 7) + v700 + v62;
  LODWORD(v65) = v92 ^ __ROR4__(v38, 8);
  v93 = v65;
  HIDWORD(v65) = v65;
  v94 = (v65 >> 16) + v49;
  LODWORD(v65) = v94 ^ __ROR4__(v71, 7);
  v95 = v65;
  HIDWORD(v65) = v65;
  v96 = v92 + v697 + (v65 >> 12);
  LODWORD(v65) = __ROR4__(v88, 16);
  v97 = v91 ^ v65;
  v99 = __PAIR64__(v91 ^ v65, __ROR4__(v93, 16));
  v98 = v96 ^ v99;
  LODWORD(v99) = v97;
  v100 = v99 >> 8;
  HIDWORD(v99) = v98;
  LODWORD(v99) = v98;
  v101 = v100 + v89;
  v102 = (v99 >> 8) + v94;
  LODWORD(v99) = v85 ^ __ROR4__(v82, 12);
  v103 = v99;
  HIDWORD(v99) = v99;
  v104 = (v99 >> 7) + v703 + v75;
  v105 = v101 ^ __ROR4__(v90, 12);
  LODWORD(v99) = v104 ^ __ROR4__(v98, 8);
  v106 = v99;
  HIDWORD(v99) = v99;
  v107 = (v99 >> 16) + v101;
  v695 = v50;
  LODWORD(v99) = v107 ^ __ROR4__(v103, 7);
  v108 = v99;
  HIDWORD(v99) = v99;
  v109 = v104 + v50 + (v99 >> 12);
  LODWORD(v99) = v109 ^ __ROR4__(v106, 16);
  v110 = v99;
  HIDWORD(v99) = v99;
  v111 = (v99 >> 8) + v107;
  HIDWORD(v99) = v105;
  LODWORD(v99) = v105;
  v112 = (v99 >> 7) + v83 + v701;
  v113 = v102 ^ __ROR4__(v95, 12);
  LODWORD(v99) = v112 ^ __ROR4__(v76, 8);
  v114 = v99;
  HIDWORD(v99) = v99;
  v115 = (v99 >> 16) + v102;
  LODWORD(v99) = v115 ^ __ROR4__(v105, 7);
  v116 = v99;
  HIDWORD(v99) = v99;
  v117 = v692 + v112 + (v99 >> 12);
  LODWORD(v99) = v117 ^ __ROR4__(v114, 16);
  v118 = v99;
  HIDWORD(v99) = v99;
  v119 = (v99 >> 8) + v115;
  HIDWORD(v99) = v113;
  LODWORD(v99) = v113;
  v120 = v91 + v702 + (v99 >> 7);
  v121 = v77 ^ __ROR4__(v74, 12);
  LODWORD(v99) = v120 ^ __ROR4__(v84, 8);
  v122 = v99;
  HIDWORD(v99) = v99;
  v123 = (v99 >> 16) + v77;
  LODWORD(v99) = v123 ^ __ROR4__(v113, 7);
  v124 = v99;
  HIDWORD(v99) = v99;
  v125 = v120 + v693 + (v99 >> 12);
  HIDWORD(v99) = v121;
  LODWORD(v99) = v121;
  v126 = (v99 >> 7) + v96 + v698;
  LODWORD(v99) = v126 ^ __ROR4__(v97, 8);
  v127 = v99;
  HIDWORD(v99) = v99;
  v128 = (v99 >> 16) + v85;
  LODWORD(v99) = v128 ^ __ROR4__(v121, 7);
  v129 = v99;
  HIDWORD(v99) = v99;
  v130 = v699 + v126 + (v99 >> 12);
  LODWORD(v99) = __ROR4__(v122, 16);
  v131 = v125 ^ v99;
  v133 = __PAIR64__(v125 ^ v99, __ROR4__(v127, 16));
  v132 = v130 ^ v133;
  LODWORD(v133) = v131;
  v134 = v133 >> 8;
  HIDWORD(v133) = v132;
  LODWORD(v133) = v132;
  v135 = v134 + v123;
  v136 = (v133 >> 8) + v128;
  LODWORD(v133) = v136 ^ __ROR4__(v129, 12);
  v137 = v133;
  HIDWORD(v133) = v133;
  v138 = v109 + v702 + (v133 >> 7);
  v139 = v135 ^ __ROR4__(v124, 12);
  LODWORD(v133) = v138 ^ __ROR4__(v118, 8);
  v140 = v133;
  HIDWORD(v133) = v133;
  v141 = (v133 >> 16) + v135;
  LODWORD(v133) = v141 ^ __ROR4__(v137, 7);
  v142 = v133;
  HIDWORD(v133) = v133;
  v143 = v138 + v30 + (v133 >> 12);
  LODWORD(v133) = v143 ^ __ROR4__(v140, 16);
  v144 = v133;
  HIDWORD(v133) = v133;
  v145 = (v133 >> 8) + v141;
  LODWORD(v133) = v111 ^ __ROR4__(v108, 12);
  v146 = v133;
  HIDWORD(v133) = v133;
  v147 = (v133 >> 7) + v50 + v117;
  LODWORD(v133) = v147 ^ __ROR4__(v131, 8);
  v148 = v133;
  HIDWORD(v133) = v133;
  v149 = v136 + (v133 >> 16);
  LODWORD(v133) = v149 ^ __ROR4__(v146, 7);
  v150 = v133;
  HIDWORD(v133) = v133;
  v151 = v147 + v701 + (v133 >> 12);
  LODWORD(v133) = v151 ^ __ROR4__(v148, 16);
  v152 = v133;
  HIDWORD(v133) = v133;
  v153 = (v133 >> 8) + v149;
  LODWORD(v133) = v119 ^ __ROR4__(v116, 12);
  v154 = v133;
  HIDWORD(v133) = v133;
  v155 = (v133 >> 7) + v125 + v698;
  LODWORD(v133) = v155 ^ __ROR4__(v132, 8);
  v156 = v133;
  HIDWORD(v133) = v133;
  v157 = (v133 >> 16) + v111;
  LODWORD(v133) = v157 ^ __ROR4__(v154, 7);
  v158 = v133;
  HIDWORD(v133) = v133;
  v159 = v155 + v692 + (v133 >> 12);
  HIDWORD(v133) = v139;
  LODWORD(v133) = v139;
  v160 = (v133 >> 7) + v57 + v130;
  LODWORD(v133) = v160 ^ __ROR4__(v110, 8);
  v161 = v133;
  HIDWORD(v133) = v133;
  v162 = (v133 >> 16) + v119;
  LODWORD(v133) = v162 ^ __ROR4__(v139, 7);
  v163 = v133;
  HIDWORD(v133) = v133;
  v164 = (v133 >> 12) + v160 + v700;
  LODWORD(v133) = __ROR4__(v156, 16);
  v165 = v159 ^ v133;
  v167 = __PAIR64__(v159 ^ v133, __ROR4__(v161, 16));
  v166 = v164 ^ v167;
  LODWORD(v167) = v165;
  v168 = v167 >> 8;
  HIDWORD(v167) = v166;
  LODWORD(v167) = v166;
  v169 = v168 + v157;
  v170 = (v167 >> 8) + v162;
  LODWORD(v167) = v153 ^ __ROR4__(v150, 12);
  v171 = v167;
  HIDWORD(v167) = v167;
  v172 = v143 + v696 + (v167 >> 7);
  v173 = v169 ^ __ROR4__(v158, 12);
  LODWORD(v167) = v172 ^ __ROR4__(v166, 8);
  v174 = v167;
  HIDWORD(v167) = v167;
  v175 = (v167 >> 16) + v169;
  LODWORD(v167) = v175 ^ __ROR4__(v171, 7);
  v176 = v167;
  HIDWORD(v167) = v167;
  v177 = v694 + v172 + (v167 >> 12);
  LODWORD(v167) = v177 ^ __ROR4__(v174, 16);
  v178 = v167;
  HIDWORD(v167) = v167;
  v179 = (v167 >> 8) + v175;
  HIDWORD(v167) = v173;
  LODWORD(v167) = v173;
  v180 = v151 + v699 + (v167 >> 7);
  v181 = v170 ^ __ROR4__(v163, 12);
  LODWORD(v167) = v180 ^ __ROR4__(v144, 8);
  v182 = v167;
  HIDWORD(v167) = v167;
  v183 = v170 + (v167 >> 16);
  LODWORD(v167) = v183 ^ __ROR4__(v173, 7);
  v184 = v167;
  HIDWORD(v167) = v167;
  v185 = (v167 >> 12) + v180 + v697;
  LODWORD(v167) = v185 ^ __ROR4__(v182, 16);
  v186 = v167;
  HIDWORD(v167) = v167;
  v187 = (v167 >> 8) + v183;
  HIDWORD(v167) = v181;
  LODWORD(v167) = v181;
  v188 = (v167 >> 7) + v159 + v693;
  v189 = v145 ^ __ROR4__(v142, 12);
  LODWORD(v167) = v188 ^ __ROR4__(v152, 8);
  v190 = v167;
  HIDWORD(v167) = v167;
  v191 = (v167 >> 16) + v145;
  LODWORD(v167) = v191 ^ __ROR4__(v181, 7);
  v192 = v167;
  HIDWORD(v167) = v167;
  v193 = v703 + v188 + (v167 >> 12);
  HIDWORD(v167) = v189;
  LODWORD(v167) = v189;
  v194 = v164 + v691 + (v167 >> 7);
  LODWORD(v167) = v194 ^ __ROR4__(v165, 8);
  v195 = v167;
  HIDWORD(v167) = v167;
  v196 = (v167 >> 16) + v153;
  LODWORD(v167) = v196 ^ __ROR4__(v189, 7);
  v197 = v167;
  HIDWORD(v167) = v167;
  v198 = v18 + v194 + (v167 >> 12);
  LODWORD(v167) = __ROR4__(v190, 16);
  v199 = v193 ^ v167;
  v201 = __PAIR64__(v193 ^ v167, __ROR4__(v195, 16));
  v200 = v198 ^ v201;
  LODWORD(v201) = v199;
  v202 = v201 >> 8;
  HIDWORD(v201) = v200;
  LODWORD(v201) = v200;
  v203 = v202 + v191;
  v204 = (v201 >> 8) + v196;
  LODWORD(v201) = v204 ^ __ROR4__(v197, 12);
  v205 = v201;
  HIDWORD(v201) = v201;
  v206 = v693 + v177 + (v201 >> 7);
  v207 = v203 ^ __ROR4__(v192, 12);
  LODWORD(v201) = v206 ^ __ROR4__(v186, 8);
  v208 = v201;
  HIDWORD(v201) = v201;
  v209 = (v201 >> 16) + v203;
  LODWORD(v201) = v209 ^ __ROR4__(v205, 7);
  v210 = v201;
  HIDWORD(v201) = v201;
  v211 = v206 + v691 + (v201 >> 12);
  LODWORD(v201) = v211 ^ __ROR4__(v208, 16);
  v212 = v201;
  HIDWORD(v201) = v201;
  v213 = (v201 >> 8) + v209;
  LODWORD(v201) = v179 ^ __ROR4__(v176, 12);
  v214 = v201;
  HIDWORD(v201) = v201;
  v215 = (v201 >> 7) + v699 + v185;
  LODWORD(v201) = v215 ^ __ROR4__(v199, 8);
  v216 = v201;
  HIDWORD(v201) = v201;
  v217 = v204 + (v201 >> 16);
  LODWORD(v201) = v217 ^ __ROR4__(v214, 7);
  v218 = v201;
  HIDWORD(v201) = v201;
  v219 = v703 + v215 + (v201 >> 12);
  LODWORD(v201) = v219 ^ __ROR4__(v216, 16);
  v220 = v201;
  HIDWORD(v201) = v201;
  v221 = (v201 >> 8) + v217;
  LODWORD(v201) = v187 ^ __ROR4__(v184, 12);
  v222 = v201;
  HIDWORD(v201) = v201;
  v223 = (v201 >> 7) + v700 + v193;
  LODWORD(v201) = v223 ^ __ROR4__(v200, 8);
  v224 = v201;
  HIDWORD(v201) = v201;
  v225 = (v201 >> 16) + v179;
  LODWORD(v201) = v225 ^ __ROR4__(v222, 7);
  v226 = v201;
  HIDWORD(v201) = v201;
  v227 = (v201 >> 12) + v223 + v50;
  HIDWORD(v201) = v207;
  LODWORD(v201) = v207;
  v228 = v198 + v702 + (v201 >> 7);
  LODWORD(v201) = v228 ^ __ROR4__(v178, 8);
  v229 = v201;
  HIDWORD(v201) = v201;
  v230 = (v201 >> 16) + v187;
  LODWORD(v201) = v230 ^ __ROR4__(v207, 7);
  v231 = v201;
  HIDWORD(v201) = v201;
  v232 = v228 + v694 + (v201 >> 12);
  LODWORD(v201) = __ROR4__(v224, 16);
  v233 = v227 ^ v201;
  v235 = __PAIR64__(v227 ^ v201, __ROR4__(v229, 16));
  v234 = v232 ^ v235;
  LODWORD(v235) = v233;
  v236 = v235 >> 8;
  HIDWORD(v235) = v234;
  LODWORD(v235) = v234;
  v237 = v236 + v225;
  v238 = (v235 >> 8) + v230;
  LODWORD(v235) = v221 ^ __ROR4__(v218, 12);
  v239 = v235;
  HIDWORD(v235) = v235;
  v240 = v211 + v692 + (v235 >> 7);
  v241 = v237 ^ __ROR4__(v226, 12);
  LODWORD(v235) = v240 ^ __ROR4__(v234, 8);
  v242 = v235;
  HIDWORD(v235) = v235;
  v243 = (v235 >> 16) + v237;
  LODWORD(v235) = v243 ^ __ROR4__(v239, 7);
  v244 = v235;
  HIDWORD(v235) = v235;
  v245 = v240 + v697 + (v235 >> 12);
  LODWORD(v235) = v245 ^ __ROR4__(v242, 16);
  v246 = v235;
  HIDWORD(v235) = v235;
  v247 = (v235 >> 8) + v243;
  HIDWORD(v235) = v241;
  LODWORD(v235) = v241;
  v248 = (v235 >> 7) + v219 + v698;
  v249 = v238 ^ __ROR4__(v231, 12);
  LODWORD(v235) = v248 ^ __ROR4__(v212, 8);
  v250 = v235;
  HIDWORD(v235) = v235;
  v251 = (v235 >> 16) + v238;
  LODWORD(v235) = v251 ^ __ROR4__(v241, 7);
  v252 = v235;
  HIDWORD(v235) = v235;
  v253 = v248 + v696 + (v235 >> 12);
  LODWORD(v235) = v253 ^ __ROR4__(v250, 16);
  v254 = v235;
  HIDWORD(v235) = v235;
  v255 = (v235 >> 8) + v251;
  HIDWORD(v235) = v249;
  LODWORD(v235) = v249;
  v256 = v227 + v18 + (v235 >> 7);
  v257 = v213 ^ __ROR4__(v210, 12);
  LODWORD(v235) = v256 ^ __ROR4__(v220, 8);
  v258 = v235;
  HIDWORD(v235) = v235;
  v259 = (v235 >> 16) + v213;
  LODWORD(v235) = v259 ^ __ROR4__(v249, 7);
  v260 = v235;
  HIDWORD(v235) = v235;
  v261 = (v235 >> 12) + v256 + v701;
  HIDWORD(v235) = v257;
  LODWORD(v235) = v257;
  v262 = v232 + v57 + (v235 >> 7);
  LODWORD(v235) = v262 ^ __ROR4__(v233, 8);
  v263 = v235;
  HIDWORD(v235) = v235;
  v264 = (v235 >> 16) + v221;
  LODWORD(v235) = v264 ^ __ROR4__(v257, 7);
  v265 = v235;
  HIDWORD(v235) = v235;
  v266 = v30 + v262 + (v235 >> 12);
  LODWORD(v235) = __ROR4__(v258, 16);
  v267 = v261 ^ v235;
  v269 = __PAIR64__(v261 ^ v235, __ROR4__(v263, 16));
  v268 = v266 ^ v269;
  LODWORD(v269) = v267;
  v270 = v269 >> 8;
  HIDWORD(v269) = v268;
  LODWORD(v269) = v268;
  v271 = v270 + v259;
  v272 = (v269 >> 8) + v264;
  LODWORD(v269) = v272 ^ __ROR4__(v265, 12);
  v273 = v269;
  HIDWORD(v269) = v269;
  v274 = v245 + v691 + (v269 >> 7);
  v275 = v271 ^ __ROR4__(v260, 12);
  LODWORD(v269) = v274 ^ __ROR4__(v254, 8);
  v276 = v269;
  HIDWORD(v269) = v269;
  v277 = (v269 >> 16) + v271;
  LODWORD(v269) = v277 ^ __ROR4__(v273, 7);
  v278 = v269;
  HIDWORD(v269) = v269;
  v279 = v274 + v701 + (v269 >> 12);
  LODWORD(v269) = v279 ^ __ROR4__(v276, 16);
  v280 = v269;
  HIDWORD(v269) = v269;
  v281 = (v269 >> 8) + v277;
  LODWORD(v269) = v247 ^ __ROR4__(v244, 12);
  v282 = v269;
  HIDWORD(v269) = v269;
  v283 = (v269 >> 7) + v698 + v253;
  LODWORD(v269) = v283 ^ __ROR4__(v267, 8);
  v284 = v269;
  HIDWORD(v269) = v269;
  v285 = v272 + (v269 >> 16);
  LODWORD(v269) = v285 ^ __ROR4__(v282, 7);
  v286 = v269;
  HIDWORD(v269) = v269;
  v287 = v283 + v693 + (v269 >> 12);
  LODWORD(v269) = v287 ^ __ROR4__(v284, 16);
  v288 = v269;
  HIDWORD(v269) = v269;
  v289 = (v269 >> 8) + v285;
  LODWORD(v269) = v255 ^ __ROR4__(v252, 12);
  v290 = v269;
  HIDWORD(v269) = v269;
  v291 = (v269 >> 7) + v692 + v261;
  LODWORD(v269) = v291 ^ __ROR4__(v268, 8);
  v292 = v269;
  HIDWORD(v269) = v269;
  v293 = (v269 >> 16) + v247;
  LODWORD(v269) = v293 ^ __ROR4__(v290, 7);
  v294 = v269;
  HIDWORD(v269) = v269;
  v295 = v291 + v18 + (v269 >> 12);
  HIDWORD(v269) = v275;
  LODWORD(v269) = v275;
  v296 = v266 + v696 + (v269 >> 7);
  LODWORD(v269) = v296 ^ __ROR4__(v246, 8);
  v297 = v269;
  HIDWORD(v269) = v269;
  v298 = (v269 >> 16) + v255;
  LODWORD(v269) = v298 ^ __ROR4__(v275, 7);
  v299 = v269;
  HIDWORD(v269) = v269;
  v300 = v296 + v57 + (v269 >> 12);
  LODWORD(v269) = __ROR4__(v292, 16);
  v301 = v295 ^ v269;
  v303 = __PAIR64__(v295 ^ v269, __ROR4__(v297, 16));
  v302 = v300 ^ v303;
  LODWORD(v303) = v301;
  v304 = v303 >> 8;
  HIDWORD(v303) = v302;
  LODWORD(v303) = v302;
  v305 = v304 + v293;
  v306 = (v303 >> 8) + v298;
  LODWORD(v303) = v289 ^ __ROR4__(v286, 12);
  v307 = v303;
  HIDWORD(v303) = v303;
  v308 = v279 + v694 + (v303 >> 7);
  v309 = v305 ^ __ROR4__(v294, 12);
  LODWORD(v303) = v308 ^ __ROR4__(v302, 8);
  v310 = v303;
  HIDWORD(v303) = v303;
  v311 = (v303 >> 16) + v305;
  LODWORD(v303) = v311 ^ __ROR4__(v307, 7);
  v312 = v303;
  HIDWORD(v303) = v303;
  v313 = v703 + v308 + (v303 >> 12);
  LODWORD(v303) = v313 ^ __ROR4__(v310, 16);
  v314 = v303;
  HIDWORD(v303) = v303;
  v315 = (v303 >> 8) + v311;
  HIDWORD(v303) = v309;
  LODWORD(v303) = v309;
  v316 = v287 + v702 + (v303 >> 7);
  v317 = v306 ^ __ROR4__(v299, 12);
  LODWORD(v303) = v316 ^ __ROR4__(v280, 8);
  v318 = v303;
  HIDWORD(v303) = v303;
  v319 = v306 + (v303 >> 16);
  LODWORD(v303) = v319 ^ __ROR4__(v309, 7);
  v320 = v303;
  HIDWORD(v303) = v303;
  v321 = v316 + v50 + (v303 >> 12);
  LODWORD(v303) = v321 ^ __ROR4__(v318, 16);
  v322 = v303;
  HIDWORD(v303) = v303;
  v323 = (v303 >> 8) + v319;
  HIDWORD(v303) = v317;
  LODWORD(v303) = v317;
  v324 = (v303 >> 7) + v295 + v697;
  v325 = v281 ^ __ROR4__(v278, 12);
  LODWORD(v303) = v324 ^ __ROR4__(v288, 8);
  v326 = v303;
  HIDWORD(v303) = v303;
  v327 = (v303 >> 16) + v281;
  LODWORD(v303) = v327 ^ __ROR4__(v317, 7);
  v328 = v303;
  HIDWORD(v303) = v303;
  v329 = v324 + v30 + (v303 >> 12);
  HIDWORD(v303) = v325;
  LODWORD(v303) = v325;
  v330 = v300 + v699 + (v303 >> 7);
  LODWORD(v303) = v330 ^ __ROR4__(v301, 8);
  v331 = v303;
  HIDWORD(v303) = v303;
  v332 = (v303 >> 16) + v289;
  LODWORD(v303) = v332 ^ __ROR4__(v325, 7);
  v333 = v303;
  HIDWORD(v303) = v303;
  v334 = v700 + v330 + (v303 >> 12);
  LODWORD(v303) = __ROR4__(v326, 16);
  v335 = v329 ^ v303;
  v337 = __PAIR64__(v329 ^ v303, __ROR4__(v331, 16));
  v336 = v334 ^ v337;
  LODWORD(v337) = v335;
  v338 = v337 >> 8;
  HIDWORD(v337) = v336;
  LODWORD(v337) = v336;
  v339 = v338 + v327;
  v340 = (v337 >> 8) + v332;
  LODWORD(v337) = v340 ^ __ROR4__(v333, 12);
  v341 = v337;
  HIDWORD(v337) = v337;
  v342 = v313 + v692 + (v337 >> 7);
  v343 = v339 ^ __ROR4__(v328, 12);
  LODWORD(v337) = v342 ^ __ROR4__(v322, 8);
  v344 = v337;
  HIDWORD(v337) = v337;
  v345 = (v337 >> 16) + v339;
  LODWORD(v337) = v345 ^ __ROR4__(v341, 7);
  v346 = v337;
  HIDWORD(v337) = v337;
  v347 = v342 + v50 + (v337 >> 12);
  LODWORD(v337) = v347 ^ __ROR4__(v344, 16);
  v348 = v337;
  HIDWORD(v337) = v337;
  v349 = (v337 >> 8) + v345;
  LODWORD(v337) = v315 ^ __ROR4__(v312, 12);
  v350 = v337;
  HIDWORD(v337) = v337;
  v351 = (v337 >> 7) + v321 + v697;
  LODWORD(v337) = v351 ^ __ROR4__(v335, 8);
  v352 = v337;
  HIDWORD(v337) = v337;
  v353 = v340 + (v337 >> 16);
  LODWORD(v337) = v353 ^ __ROR4__(v350, 7);
  v354 = v337;
  HIDWORD(v337) = v337;
  v355 = v351 + v696 + (v337 >> 12);
  LODWORD(v337) = v355 ^ __ROR4__(v352, 16);
  v356 = v337;
  HIDWORD(v337) = v337;
  v357 = (v337 >> 8) + v353;
  LODWORD(v337) = v323 ^ __ROR4__(v320, 12);
  v358 = v337;
  HIDWORD(v337) = v337;
  v359 = (v337 >> 7) + v701 + v329;
  LODWORD(v337) = v359 ^ __ROR4__(v336, 8);
  v360 = v337;
  HIDWORD(v337) = v337;
  v361 = (v337 >> 16) + v315;
  LODWORD(v337) = v361 ^ __ROR4__(v358, 7);
  v362 = v337;
  HIDWORD(v337) = v337;
  v363 = (v337 >> 12) + v359 + v702;
  HIDWORD(v337) = v343;
  LODWORD(v337) = v343;
  v364 = (v337 >> 7) + v30 + v334;
  LODWORD(v337) = v364 ^ __ROR4__(v314, 8);
  v365 = v337;
  HIDWORD(v337) = v337;
  v366 = (v337 >> 16) + v323;
  LODWORD(v337) = v366 ^ __ROR4__(v343, 7);
  v367 = v337;
  HIDWORD(v337) = v337;
  v368 = v364 + v699 + (v337 >> 12);
  LODWORD(v337) = __ROR4__(v360, 16);
  v369 = v363 ^ v337;
  v371 = __PAIR64__(v363 ^ v337, __ROR4__(v365, 16));
  v370 = v368 ^ v371;
  LODWORD(v371) = v369;
  v372 = v371 >> 8;
  HIDWORD(v371) = v370;
  LODWORD(v371) = v370;
  v373 = v372 + v361;
  v374 = (v371 >> 8) + v366;
  LODWORD(v371) = v357 ^ __ROR4__(v354, 12);
  v375 = v371;
  HIDWORD(v371) = v371;
  v376 = v347 + v18 + (v371 >> 7);
  v377 = v373 ^ __ROR4__(v362, 12);
  LODWORD(v371) = v376 ^ __ROR4__(v370, 8);
  v378 = v371;
  HIDWORD(v371) = v371;
  v379 = (v371 >> 16) + v373;
  LODWORD(v371) = v379 ^ __ROR4__(v375, 7);
  v380 = v371;
  HIDWORD(v371) = v371;
  v381 = v376 + v700 + (v371 >> 12);
  HIDWORD(v371) = v377;
  LODWORD(v371) = v377;
  v382 = (v371 >> 7) + v355 + v693;
  LODWORD(v371) = v382 ^ __ROR4__(v348, 8);
  v383 = v371;
  HIDWORD(v371) = v371;
  v384 = v374 ^ __ROR4__(v367, 12);
  v385 = (v371 >> 16) + v374;
  LODWORD(v371) = v385 ^ __ROR4__(v377, 7);
  v386 = v371;
  HIDWORD(v371) = v371;
  v387 = v698 + v382 + (v371 >> 12);
  LODWORD(v371) = v387 ^ __ROR4__(v383, 16);
  v388 = v371;
  HIDWORD(v371) = v371;
  v389 = (v371 >> 8) + v385;
  HIDWORD(v371) = v384;
  LODWORD(v371) = v384;
  v390 = v363 + v57 + (v371 >> 7);
  LODWORD(v371) = v390 ^ __ROR4__(v356, 8);
  v391 = v371;
  HIDWORD(v371) = v371;
  v392 = v349 ^ __ROR4__(v346, 12);
  v393 = (v371 >> 16) + v349;
  LODWORD(v371) = v393 ^ __ROR4__(v384, 7);
  v394 = v371;
  HIDWORD(v371) = v371;
  v395 = v390 + v694 + (v371 >> 12);
  LODWORD(v371) = v395 ^ __ROR4__(v391, 16);
  v396 = v371;
  HIDWORD(v371) = v371;
  v397 = (v371 >> 8) + v393;
  HIDWORD(v371) = v392;
  LODWORD(v371) = v392;
  v398 = v368 + v703 + (v371 >> 7);
  LODWORD(v371) = v398 ^ __ROR4__(v369, 8);
  v399 = v371;
  HIDWORD(v371) = v371;
  v400 = (v371 >> 16) + v357;
  LODWORD(v371) = v400 ^ __ROR4__(v392, 7);
  v401 = v371;
  HIDWORD(v371) = v371;
  v402 = (v371 >> 12) + v398 + v691;
  LODWORD(v371) = v402 ^ __ROR4__(v399, 16);
  v403 = v371;
  HIDWORD(v371) = v371;
  v404 = (v371 >> 8) + v400;
  v405 = v381 ^ __ROR4__(v378, 16);
  LODWORD(v371) = v404 ^ __ROR4__(v401, 12);
  v406 = v371;
  HIDWORD(v371) = v371;
  v407 = v50 + v381 + (v371 >> 7);
  v408 = v397 ^ __ROR4__(v394, 12);
  LODWORD(v371) = v407 ^ __ROR4__(v388, 8);
  v409 = v371;
  HIDWORD(v371) = v371;
  v410 = (v371 >> 16) + v397;
  HIDWORD(v371) = v405;
  LODWORD(v371) = v405;
  v411 = (v371 >> 8) + v379;
  LODWORD(v371) = v411 ^ __ROR4__(v380, 12);
  v412 = v371;
  HIDWORD(v371) = v371;
  v413 = (v371 >> 7) + v387 + v703;
  LODWORD(v371) = __ROR4__(v406, 7);
  v414 = v410 ^ v371;
  v415 = v407 + v698;
  v417 = __PAIR64__(v410 ^ v371, __ROR4__(v396, 8));
  v416 = v413 ^ v417;
  LODWORD(v417) = v414;
  v418 = v417 >> 12;
  HIDWORD(v417) = v416;
  LODWORD(v417) = v416;
  v419 = v415 + v418;
  v420 = v404 + (v417 >> 16);
  LODWORD(v417) = v420 ^ __ROR4__(v412, 7);
  v421 = v417;
  HIDWORD(v417) = v417;
  v422 = v413 + v57 + (v417 >> 12);
  LODWORD(v417) = v389 ^ __ROR4__(v386, 12);
  v423 = v417;
  HIDWORD(v417) = v417;
  v424 = (v417 >> 7) + v395 + v694;
  LODWORD(v417) = __ROR4__(v409, 16);
  v425 = v419 ^ v417;
  v427 = __PAIR64__(v419 ^ v417, __ROR4__(v416, 16));
  v426 = v422 ^ v427;
  LODWORD(v427) = v425;
  v428 = v427 >> 8;
  HIDWORD(v427) = v426;
  LODWORD(v427) = v426;
  v429 = v427 >> 8;
  v430 = v410 + v428;
  LODWORD(v427) = v424 ^ __ROR4__(v403, 8);
  v431 = v427;
  HIDWORD(v427) = v427;
  v432 = v420 + v429;
  v433 = v411 + (v427 >> 16);
  LODWORD(v427) = v433 ^ __ROR4__(v423, 7);
  v434 = v427;
  HIDWORD(v427) = v427;
  v435 = v424 + v700 + (v427 >> 12);
  HIDWORD(v427) = v408;
  LODWORD(v427) = v408;
  v436 = (v427 >> 7) + v402 + v18;
  LODWORD(v427) = v436 ^ __ROR4__(v405, 8);
  v437 = v427;
  HIDWORD(v427) = v427;
  v438 = v389 + (v427 >> 16);
  LODWORD(v427) = __ROR4__(v431, 16);
  v439 = v435 ^ v427;
  v441 = __PAIR64__(v435 ^ v427, __ROR4__(v408, 7));
  v440 = v438 ^ v441;
  v442 = v436 + v696;
  LODWORD(v441) = v439;
  v443 = v441 >> 8;
  HIDWORD(v441) = v440;
  LODWORD(v441) = v440;
  v444 = v442 + (v441 >> 12);
  LODWORD(v441) = v444 ^ __ROR4__(v437, 16);
  v445 = v441;
  HIDWORD(v441) = v441;
  v446 = v433 + v443;
  v447 = v438 + (v441 >> 8);
  LODWORD(v441) = v432 ^ __ROR4__(v421, 12);
  v448 = v441;
  HIDWORD(v441) = v441;
  v449 = (v441 >> 7) + v419 + v701;
  v450 = v446 ^ __ROR4__(v434, 12);
  LODWORD(v441) = v449 ^ __ROR4__(v445, 8);
  v451 = v441;
  HIDWORD(v441) = v441;
  v452 = v446 + (v441 >> 16);
  LODWORD(v441) = v452 ^ __ROR4__(v448, 7);
  v453 = v441;
  HIDWORD(v441) = v441;
  v454 = v449 + v693 + (v441 >> 12);
  HIDWORD(v441) = v450;
  LODWORD(v441) = v450;
  v455 = (v441 >> 7) + v422 + v697;
  LODWORD(v441) = v455 ^ __ROR4__(v425, 8);
  v456 = v441;
  HIDWORD(v441) = v441;
  v457 = v447 ^ __ROR4__(v440, 12);
  v458 = v447 + (v441 >> 16);
  LODWORD(v441) = v458 ^ __ROR4__(v450, 7);
  v459 = v441;
  HIDWORD(v441) = v441;
  v460 = v455 + v699 + (v441 >> 12);
  LODWORD(v441) = v460 ^ __ROR4__(v456, 16);
  v461 = v441;
  HIDWORD(v441) = v441;
  v462 = v458 + (v441 >> 8);
  HIDWORD(v441) = v457;
  LODWORD(v441) = v457;
  v463 = (v441 >> 7) + v435 + v691;
  LODWORD(v441) = v463 ^ __ROR4__(v426, 8);
  v464 = v441;
  HIDWORD(v441) = v441;
  v465 = v430 + (v441 >> 16);
  LODWORD(v441) = v465 ^ __ROR4__(v457, 7);
  v466 = v441;
  HIDWORD(v441) = v441;
  v467 = v463 + v692 + (v441 >> 12);
  LODWORD(v441) = v467 ^ __ROR4__(v464, 16);
  v468 = v441;
  HIDWORD(v441) = v441;
  v469 = v465 + (v441 >> 8);
  LODWORD(v441) = v430 ^ __ROR4__(v414, 12);
  v470 = v441;
  HIDWORD(v441) = v441;
  v471 = (v441 >> 7) + v444 + v689;
  LODWORD(v441) = v471 ^ __ROR4__(v439, 8);
  v472 = v441;
  HIDWORD(v441) = v441;
  v473 = v432 + (v441 >> 16);
  LODWORD(v441) = v473 ^ __ROR4__(v470, 7);
  v474 = v441;
  HIDWORD(v441) = v441;
  v475 = v471 + v702 + (v441 >> 12);
  LODWORD(v441) = v475 ^ __ROR4__(v472, 16);
  v476 = v441;
  HIDWORD(v441) = v441;
  v477 = v473 + (v441 >> 8);
  v478 = v454 ^ __ROR4__(v451, 16);
  LODWORD(v441) = v477 ^ __ROR4__(v474, 12);
  v479 = v441;
  HIDWORD(v441) = v441;
  v480 = v454 + v700 + (v441 >> 7);
  v481 = v469 ^ __ROR4__(v466, 12);
  LODWORD(v441) = v480 ^ __ROR4__(v461, 8);
  v482 = v441;
  HIDWORD(v441) = v441;
  v483 = v469 + (v441 >> 16);
  LODWORD(v441) = v483 ^ __ROR4__(v479, 7);
  v484 = v441;
  HIDWORD(v441) = v441;
  v485 = v480 + v702 + (v441 >> 12);
  HIDWORD(v441) = v478;
  LODWORD(v441) = v478;
  v486 = v441 >> 8;
  v487 = v452 + v486;
  LODWORD(v441) = v487 ^ __ROR4__(v453, 12);
  v488 = v441;
  HIDWORD(v441) = v441;
  v489 = (v441 >> 7) + v460 + v693;
  LODWORD(v441) = v489 ^ __ROR4__(v468, 8);
  v490 = v441;
  HIDWORD(v441) = v441;
  v491 = v477 + (v441 >> 16);
  LODWORD(v441) = __ROR4__(v459, 12);
  v492 = v462 ^ v441;
  v494 = __PAIR64__(v462 ^ v441, __ROR4__(v488, 7));
  v493 = v491 ^ v494;
  LODWORD(v494) = v492;
  v495 = (v494 >> 7) + v467 + v50;
  v497 = __PAIR64__(v493, __ROR4__(v476, 8));
  v496 = v495 ^ v497;
  LODWORD(v497) = v493;
  v498 = v497 >> 12;
  HIDWORD(v497) = v496;
  LODWORD(v497) = v496;
  v499 = v489 + v694 + v498;
  v500 = v487 + (v497 >> 16);
  LODWORD(v497) = v500 ^ __ROR4__(v492, 7);
  v501 = v497;
  HIDWORD(v497) = v497;
  v502 = v495 + v703 + (v497 >> 12);
  LODWORD(v497) = v502 ^ __ROR4__(v496, 16);
  v503 = v497;
  HIDWORD(v497) = v497;
  v709 = v486;
  v504 = v500 + (v497 >> 8);
  HIDWORD(v497) = v481;
  LODWORD(v497) = v481;
  v505 = (v497 >> 7) + v475 + v699;
  HIDWORD(v497) = v709 ^ v505;
  LODWORD(v497) = v709 ^ v505;
  v506 = v462 + (v497 >> 16);
  LODWORD(v497) = v506 ^ __ROR4__(v481, 7);
  v507 = v497;
  HIDWORD(v497) = v497;
  v508 = v505 + v691 + (v497 >> 12);
  LODWORD(v497) = v508 ^ __ROR4__(v709 ^ v505, 16);
  v509 = v497;
  HIDWORD(v497) = v497;
  v510 = v506 + (v497 >> 8);
  LODWORD(v497) = v499 ^ __ROR4__(v490, 16);
  v511 = v497;
  HIDWORD(v497) = v497;
  v512 = v485 ^ __ROR4__(v482, 16);
  v513 = v491 + (v497 >> 8);
  LODWORD(v497) = v513 ^ __ROR4__(v493, 12);
  v514 = v497;
  HIDWORD(v497) = v497;
  v515 = (v497 >> 7) + v485 + v698;
  v516 = v504 ^ __ROR4__(v501, 12);
  LODWORD(v497) = v515 ^ __ROR4__(v509, 8);
  v517 = v497;
  HIDWORD(v497) = v497;
  v518 = v504 + (v497 >> 16);
  LODWORD(v497) = v518 ^ __ROR4__(v514, 7);
  v519 = v497;
  HIDWORD(v497) = v497;
  v520 = v515 + v701 + (v497 >> 12);
  HIDWORD(v497) = v516;
  LODWORD(v497) = v516;
  v521 = (v497 >> 7) + v499 + v57;
  LODWORD(v497) = v521 ^ __ROR4__(v512, 8);
  v522 = v497;
  HIDWORD(v497) = v497;
  v523 = v510 ^ __ROR4__(v507, 12);
  v524 = v510 + (v497 >> 16);
  LODWORD(v497) = v524 ^ __ROR4__(v516, 7);
  v525 = v497;
  HIDWORD(v497) = v497;
  v526 = v521 + v18 + (v497 >> 12);
  LODWORD(v497) = v526 ^ __ROR4__(v522, 16);
  v527 = v497;
  HIDWORD(v497) = v497;
  v528 = v524 + (v497 >> 8);
  HIDWORD(v497) = v523;
  LODWORD(v497) = v523;
  v529 = (v497 >> 7) + v502 + v689;
  HIDWORD(v497) = v512;
  LODWORD(v497) = v512;
  v530 = v483 + (v497 >> 8);
  LODWORD(v497) = v529 ^ __ROR4__(v511, 8);
  v531 = v497;
  HIDWORD(v497) = v497;
  v532 = v530 + (v497 >> 16);
  LODWORD(v497) = v532 ^ __ROR4__(v523, 7);
  v533 = v497;
  HIDWORD(v497) = v497;
  v534 = v529 + v697 + (v497 >> 12);
  LODWORD(v497) = v534 ^ __ROR4__(v531, 16);
  v535 = v497;
  HIDWORD(v497) = v497;
  v536 = v532 + (v497 >> 8);
  LODWORD(v497) = v530 ^ __ROR4__(v484, 12);
  v537 = v497;
  HIDWORD(v497) = v497;
  v538 = (v497 >> 7) + v508 + v692;
  LODWORD(v497) = v538 ^ __ROR4__(v503, 8);
  v539 = v497;
  HIDWORD(v497) = v497;
  v540 = v513 + (v497 >> 16);
  LODWORD(v497) = v540 ^ __ROR4__(v537, 7);
  v541 = v497;
  HIDWORD(v497) = v497;
  v542 = v538 + v696 + (v497 >> 12);
  LODWORD(v497) = v542 ^ __ROR4__(v539, 16);
  v543 = v497;
  HIDWORD(v497) = v497;
  v544 = v540 + (v497 >> 8);
  v545 = v520 ^ __ROR4__(v517, 16);
  LODWORD(v497) = v544 ^ __ROR4__(v541, 12);
  v546 = v497;
  HIDWORD(v497) = v497;
  v547 = v520 + v697 + (v497 >> 7);
  LODWORD(v497) = v547 ^ __ROR4__(v527, 8);
  v548 = v497;
  HIDWORD(v497) = v497;
  v549 = v497 >> 16;
  v551 = __PAIR64__(v545, __ROR4__(v533, 12));
  v550 = v536 ^ v551;
  v552 = v536 + v549;
  LODWORD(v551) = v545;
  v553 = v551 >> 8;
  v554 = (v518 + v553) ^ __ROR4__(v519, 12);
  v556 = __PAIR64__(v554, __ROR4__(v546, 7));
  v555 = v552 ^ v556;
  v557 = v547 + v57;
  LODWORD(v556) = v554;
  v558 = v556 >> 7;
  HIDWORD(v556) = v555;
  LODWORD(v556) = v555;
  v559 = v557 + (v556 >> 12);
  v560 = v558 + v526 + v694;
  LODWORD(v556) = v560 ^ __ROR4__(v535, 8);
  v561 = v556;
  HIDWORD(v556) = v556;
  v562 = v544 + (v556 >> 16);
  LODWORD(v556) = v528 ^ __ROR4__(v525, 12);
  v563 = v556;
  HIDWORD(v556) = v556;
  v564 = (v556 >> 7) + v534 + v702;
  LODWORD(v556) = v564 ^ __ROR4__(v543, 8);
  v565 = v556;
  HIDWORD(v556) = v556;
  v566 = v518 + v553 + (v556 >> 16);
  LODWORD(v556) = v566 ^ __ROR4__(v563, 7);
  v567 = v556;
  HIDWORD(v556) = v556;
  v568 = v564 + v699 + (v556 >> 12);
  LODWORD(v556) = __ROR4__(v554, 7);
  v569 = v562 ^ v556;
  v571 = __PAIR64__(v562 ^ v556, __ROR4__(v565, 16));
  v570 = v568 ^ v571;
  LODWORD(v571) = v569;
  v572 = v571 >> 12;
  HIDWORD(v571) = v570;
  LODWORD(v571) = v570;
  v573 = v560 + v691 + v572;
  v574 = v566 + (v571 >> 8);
  HIDWORD(v571) = v550;
  LODWORD(v571) = v550;
  v575 = (v571 >> 7) + v542 + v701;
  v576 = v553 ^ v575;
  HIDWORD(v571) = v553 ^ v575;
  LODWORD(v571) = v553 ^ v575;
  v577 = v528 + (v571 >> 16);
  LODWORD(v571) = v577 ^ __ROR4__(v550, 7);
  v578 = v571;
  HIDWORD(v571) = v571;
  v579 = v575 + v689 + (v571 >> 12);
  LODWORD(v571) = v579 ^ __ROR4__(v576, 16);
  v580 = v571;
  HIDWORD(v571) = v571;
  v581 = v577 + (v571 >> 8);
  v582 = v559 ^ __ROR4__(v548, 16);
  LODWORD(v571) = v573 ^ __ROR4__(v561, 16);
  v583 = v571;
  HIDWORD(v571) = v571;
  v584 = v562 + (v571 >> 8);
  LODWORD(v571) = v584 ^ __ROR4__(v569, 12);
  v585 = v571;
  HIDWORD(v571) = v571;
  v586 = (v571 >> 7) + v559 + v695;
  v587 = v574 ^ __ROR4__(v567, 12);
  LODWORD(v571) = v586 ^ __ROR4__(v580, 8);
  v588 = v571;
  HIDWORD(v571) = v571;
  v589 = v574 + (v571 >> 16);
  LODWORD(v571) = v589 ^ __ROR4__(v585, 7);
  v687 = v571;
  HIDWORD(v571) = v571;
  v590 = v586 + v692 + (v571 >> 12);
  HIDWORD(v571) = v587;
  LODWORD(v571) = v587;
  v591 = (v571 >> 7) + v573 + v700;
  v592 = v581 ^ __ROR4__(v578, 12);
  LODWORD(v571) = v591 ^ __ROR4__(v582, 8);
  v593 = v571;
  HIDWORD(v571) = v571;
  v594 = v581 + (v571 >> 16);
  LODWORD(v571) = v594 ^ __ROR4__(v587, 7);
  v595 = v571;
  HIDWORD(v571) = v571;
  v596 = v591 + v693 + (v571 >> 12);
  LODWORD(v571) = v596 ^ __ROR4__(v593, 16);
  v597 = v571;
  HIDWORD(v571) = v571;
  v598 = v594 + (v571 >> 8);
  HIDWORD(v571) = v592;
  LODWORD(v571) = v592;
  v599 = (v571 >> 7) + v568 + v703;
  HIDWORD(v571) = v582;
  LODWORD(v571) = v582;
  v688 = v571 >> 8;
  LODWORD(v571) = v599 ^ __ROR4__(v583, 8);
  v600 = v571;
  HIDWORD(v571) = v571;
  v601 = v552 + v688 + (v571 >> 16);
  v603 = v18;
  LODWORD(v571) = v601 ^ __ROR4__(v592, 7);
  v602 = v571;
  HIDWORD(v571) = v571;
  v604 = v599 + v18 + (v571 >> 12);
  LODWORD(v571) = (v552 + v688) ^ __ROR4__(v555, 12);
  v605 = v571;
  HIDWORD(v571) = v571;
  v606 = (v571 >> 7) + v579 + v696;
  LODWORD(v571) = v606 ^ __ROR4__(v570, 8);
  v607 = v571;
  HIDWORD(v571) = v571;
  v608 = v584 + (v571 >> 16);
  LODWORD(v571) = v608 ^ __ROR4__(v605, 7);
  v609 = v571;
  HIDWORD(v571) = v571;
  v610 = v606 + v698 + (v571 >> 12);
  LODWORD(v571) = v590 ^ __ROR4__(v588, 16);
  HIDWORD(v571) = v571;
  v611 = v571 >> 8;
  v612 = v589 + v611;
  LODWORD(v571) = __ROR4__(v595, 12);
  v613 = v598 ^ v571;
  v614 = v598;
  v616 = __PAIR64__(v598 ^ v571, __ROR4__(v607, 16));
  v615 = v610 ^ v616;
  LODWORD(v616) = v613;
  v617 = (v616 >> 7) + v604 + v693;
  LODWORD(v616) = v617 ^ __ROR4__(v615, 8);
  v618 = v616;
  HIDWORD(v616) = v616;
  v619 = v612 + (v616 >> 16);
  LODWORD(v616) = v619 ^ __ROR4__(v613, 7);
  v620 = v616;
  HIDWORD(v616) = v616;
  v621 = v617 + v697 + (v616 >> 12);
  LODWORD(v616) = v621 ^ __ROR4__(v618, 16);
  HIDWORD(v616) = v616;
  v622 = v616 >> 8;
  v709 = v611;
  v624 = __PAIR64__(v615, __ROR4__(v600, 16));
  v623 = v604 ^ v624;
  LODWORD(v624) = v615;
  v625 = v624 >> 8;
  HIDWORD(v624) = v623;
  LODWORD(v624) = v623;
  v626 = v601 + (v624 >> 8);
  v627 = v608 + v625;
  LODWORD(v624) = v627 ^ __ROR4__(v609, 12);
  v628 = v624;
  HIDWORD(v624) = v624;
  v629 = v590 + v696 + (v624 >> 7);
  v630 = v626 ^ __ROR4__(v602, 12);
  LODWORD(v624) = v629 ^ __ROR4__(v597, 8);
  v631 = v624;
  HIDWORD(v624) = v624;
  v632 = v626 + (v624 >> 16);
  LODWORD(v624) = v632 ^ __ROR4__(v628, 7);
  v633 = v624;
  HIDWORD(v624) = v624;
  v634 = v629 + v692 + (v624 >> 12);
  LODWORD(v624) = v612 ^ __ROR4__(v687, 12);
  v635 = v624;
  HIDWORD(v624) = v624;
  v636 = (v624 >> 7) + v596 + v689;
  LODWORD(v624) = v636 ^ __ROR4__(v623, 8);
  v637 = v624;
  HIDWORD(v624) = v624;
  v638 = v627 + (v624 >> 16);
  v639 = v636 + v603;
  LODWORD(v624) = v638 ^ __ROR4__(v635, 7);
  v640 = v624;
  HIDWORD(v624) = v624;
  v641 = v639 + (v624 >> 12);
  HIDWORD(v624) = v630;
  LODWORD(v624) = v630;
  v642 = (v624 >> 7) + v610 + v703;
  v643 = v709 ^ v642;
  HIDWORD(v624) = v709 ^ v642;
  LODWORD(v624) = v709 ^ v642;
  v644 = v614 + (v624 >> 16);
  LODWORD(v624) = v644 ^ __ROR4__(v630, 7);
  v645 = v624;
  HIDWORD(v624) = v624;
  v646 = v642 + v698 + (v624 >> 12);
  v647 = v634 ^ __ROR4__(v631, 16);
  LODWORD(v624) = v641 ^ __ROR4__(v637, 16);
  v648 = v624;
  HIDWORD(v624) = v624;
  v649 = v638 + (v624 >> 8);
  LODWORD(v624) = v649 ^ __ROR4__(v640, 12);
  v650 = v624;
  HIDWORD(v624) = v624;
  v651 = (v624 >> 7) + v634 + v690;
  v652 = v619 + v622;
  v653 = v646 ^ __ROR4__(v643, 16);
  LODWORD(v624) = v651 ^ __ROR4__(v653, 8);
  v654 = v624;
  HIDWORD(v624) = v624;
  v655 = v619 + v622 + (v624 >> 16);
  LODWORD(v624) = v655 ^ __ROR4__(v650, 7);
  v656 = v624;
  HIDWORD(v624) = v624;
  v657 = v651 + v702 + (v624 >> 12);
  HIDWORD(v624) = v647;
  LODWORD(v624) = v647;
  v658 = v632 + (v624 >> 8);
  LODWORD(v624) = v658 ^ __ROR4__(v633, 12);
  HIDWORD(v624) = v624;
  v659 = v624 >> 7;
  LODWORD(v624) = v657 ^ __ROR4__(v654, 16);
  HIDWORD(v624) = v624;
  v660 = v624 >> 8;
  v661 = v655 + v660;
  LODWORD(v624) = v661 ^ __ROR4__(v656, 12);
  HIDWORD(v624) = v624;
  v662 = v624 >> 7;
  v706[0] = v658;
  v708 = v622;
  v663 = v659;
  v664 = v659 + v700 + v646;
  v665 = v708 ^ v664;
  HIDWORD(v624) = v708 ^ v664;
  LODWORD(v624) = v708 ^ v664;
  v666 = v649 + (v624 >> 16);
  v667 = v663 ^ v666;
  HIDWORD(v624) = v667;
  LODWORD(v624) = v667;
  v668 = v664 + v701 + (v624 >> 12);
  LODWORD(v624) = v668 ^ __ROR4__(v665, 16);
  HIDWORD(v624) = v624;
  v669 = v624 >> 8;
  v670 = v666 + v669;
  LODWORD(v624) = v670 ^ __ROR4__(v667, 12);
  HIDWORD(v624) = v624;
  v671 = v624 >> 7;
  DWORD1(v705) = v662;
  v673 = __PAIR64__(v653, __ROR4__(v620, 12));
  v672 = v652 ^ v673;
  LODWORD(v673) = v653;
  v674 = v644 + (v673 >> 8);
  HIDWORD(v673) = v672;
  LODWORD(v673) = v672;
  v675 = v674 ^ __ROR4__(v645, 12);
  v676 = (v673 >> 7) + v641 + v691;
  LODWORD(v673) = v676 ^ __ROR4__(v647, 8);
  v677 = v673;
  HIDWORD(v673) = v673;
  v678 = v674 + (v673 >> 16);
  LODWORD(v673) = v678 ^ __ROR4__(v672, 7);
  v679 = v673;
  HIDWORD(v673) = v673;
  LODWORD(v704) = v657;
  DWORD1(v704) = v676 + v694 + (v673 >> 12);
  LODWORD(v673) = DWORD1(v704) ^ __ROR4__(v677, 16);
  HIDWORD(v673) = v673;
  v680 = v673 >> 8;
  v706[2] = v661;
  v706[3] = v678 + v680;
  LODWORD(v673) = (v678 + v680) ^ __ROR4__(v679, 12);
  HIDWORD(v673) = v673;
  DWORD2(v705) = v673 >> 7;
  HIDWORD(v673) = v675;
  LODWORD(v673) = v675;
  v681 = (v673 >> 7) + v621 + v699;
  LODWORD(v673) = v681 ^ __ROR4__(v648, 8);
  v682 = v673;
  HIDWORD(v673) = v673;
  v683 = v706[0] + (v673 >> 16);
  LODWORD(v673) = v683 ^ __ROR4__(v675, 7);
  v684 = v673;
  HIDWORD(v673) = v673;
  v685 = v681 + v695 + (v673 >> 12);
  LODWORD(v673) = v685 ^ __ROR4__(v682, 16);
  HIDWORD(v673) = v673;
  v706[4] = v680;
  v707 = v673 >> 8;
  *((_QWORD *)&v704 + 1) = __PAIR64__(v668, v685);
  v708 = v669;
  v709 = v660;
  v706[0] = v683 + v707;
  LODWORD(v673) = (v683 + v707) ^ __ROR4__(v684, 12);
  HIDWORD(v673) = v673;
  HIDWORD(v705) = v673 >> 7;
  v706[1] = v670;
  LODWORD(v705) = v671;
  do
  {
    result = veorq_s8(veorq_s8(*(int8x16_t *)((char *)&v704 + v2), (int8x16_t)a1[v2 / 0x10]), *(int8x16_t *)&v706[v2 / 4]);
    a1[v2 / 0x10] = (__int128)result;
    v2 += 16;
  }
  while (v2 != 32);
  return result;
}

uint64_t sub_1DB70B688(uint64_t a1, void *a2, size_t a3)
{
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  uint64_t i;
  _OWORD v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  memset(v13, 0, sizeof(v13));
  if (!a2 || *(_QWORD *)(a1 + 120) > a3 || *(_DWORD *)(a1 + 40))
    return 0xFFFFFFFFLL;
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(_DWORD *)(a1 + 32);
  v9 = *(_DWORD *)(a1 + 36);
  v10 = __CFADD__(v8, (_DWORD)v7);
  v11 = v8 + v7;
  if (v10)
    ++v9;
  *(_DWORD *)(a1 + 32) = v11;
  *(_DWORD *)(a1 + 36) = v9;
  if (*(_BYTE *)(a1 + 128))
    *(_DWORD *)(a1 + 44) = -1;
  *(_DWORD *)(a1 + 40) = -1;
  bzero((void *)(a1 + 48 + v7), 64 - v7);
  sub_1DB70A160((__int128 *)a1, (int *)(a1 + 48));
  for (i = 0; i != 32; i += 4)
    *(_DWORD *)((char *)v13 + i) = *(_DWORD *)(a1 + i);
  memcpy(a2, v13, a3);
  MEMORY[0x1DED88960](v13, 0, 32);
  return 0;
}

uint64_t archive_read_open_file(_DWORD *a1, const char *a2, uint64_t a3)
{
  const char *v4[3];

  v4[2] = *(const char **)MEMORY[0x1E0C80C00];
  v4[0] = a2;
  v4[1] = 0;
  return archive_read_open_filenames(a1, v4, a3);
}

uint64_t archive_read_open_filename(_DWORD *a1, const char *a2, uint64_t a3)
{
  const char *v4[3];

  v4[2] = *(const char **)MEMORY[0x1E0C80C00];
  v4[0] = a2;
  v4[1] = 0;
  return archive_read_open_filenames(a1, v4, a3);
}

uint64_t archive_read_open_filenames(_DWORD *a1, const char **a2, uint64_t a3)
{
  const char **v4;
  const char *v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v65;

  v4 = a2;
  if (a2)
  {
    v4 = a2 + 1;
    v6 = *a2;
  }
  else
  {
    v6 = 0;
  }
  archive_clear_error((uint64_t)a1);
  while (1)
  {
    if (!v6)
      v6 = "";
    v7 = strlen(v6);
    v8 = (char *)malloc_type_calloc(1uLL, v7 + 40, 0x985449BAuLL);
    if (!v8)
      break;
    v14 = (uint64_t)v8;
    strcpy(v8 + 32, v6);
    *(_DWORD *)v14 = -1;
    *(_QWORD *)(v14 + 8) = a3;
    *(_QWORD *)(v14 + 16) = 0;
    *(_BYTE *)(v14 + 26) = 0;
    *(_WORD *)(v14 + 24) = 0;
    *(_DWORD *)(v14 + 28) = *v6 != 0;
    if (archive_read_append_callback_data((uint64_t)a1, v14, v15, v16, v17, v18, v19, v20))
      return 4294967266;
    if (v4)
    {
      v6 = *v4;
      if (*v4)
      {
        ++v4;
        if (*v6)
          continue;
      }
    }
    archive_read_set_open_callback((uint64_t)a1, (uint64_t)sub_1DB70B9B8, v21, v22, v23, v24, v25, v26);
    archive_read_set_read_callback((uint64_t)a1, (uint64_t)sub_1DB70BB54, v27, v28, v29, v30, v31, v32);
    archive_read_set_skip_callback((uint64_t)a1, (uint64_t)sub_1DB70BC14, v33, v34, v35, v36, v37, v38);
    archive_read_set_close_callback((uint64_t)a1, (uint64_t)sub_1DB70BD04, v39, v40, v41, v42, v43, v44);
    archive_read_set_switch_callback((uint64_t)a1, (uint64_t)sub_1DB70BD34, v45, v46, v47, v48, v49, v50);
    archive_read_set_seek_callback((uint64_t)a1, (uint64_t)sub_1DB70BD64, v51, v52, v53, v54, v55, v56);
    return archive_read_open1((uint64_t)a1, v57, v58, v59, v60, v61, v62, v63);
  }
  archive_set_error(a1, 12, "No memory", v9, v10, v11, v12, v13, v65);
  return 4294967266;
}

uint64_t sub_1DB70B9B8(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _DWORD *v30;
  uint64_t result;
  int v32;
  unint64_t v33;
  uint64_t v34;
  size_t v35;
  void *v36;
  char *v37;
  stat v38;

  memset(&v38, 0, sizeof(v38));
  archive_clear_error((uint64_t)a1);
  v9 = *(_DWORD *)(a2 + 28);
  if (v9)
  {
    if (v9 != 1)
    {
      archive_set_error(a1, -1, "Unexpedted operation in archive_read_open_filename", v4, v5, v6, v7, v8, v37);
      return 4294967266;
    }
    v10 = (const char *)(a2 + 32);
    v11 = open((const char *)(a2 + 32), 0x1000000);
    v9 = v11;
    sub_1DB6DD880(v11);
    if (v9 < 0)
    {
      v12 = *__error();
      archive_set_error(a1, v12, "Failed to open '%s'", v13, v14, v15, v16, v17, (char *)(a2 + 32));
      return 4294967266;
    }
  }
  else
  {
    v10 = "";
  }
  if (fstat(v9, &v38))
  {
    v23 = *__error();
    v37 = (char *)v10;
    v29 = "Can't stat '%s'";
    v30 = a1;
    goto LABEL_8;
  }
  v32 = v38.st_mode & 0xF000;
  if (v32 == 0x8000)
  {
    archive_read_extract_set_skip_file((uint64_t)a1, v38.st_dev, v38.st_ino, v18, v19, v20, v21, v22);
    v33 = *(_QWORD *)(a2 + 8);
    if (v33 >= 0x4000000)
      v33 = 0x4000000;
    v34 = 0x10000;
    do
    {
      v35 = v34;
      v34 *= 2;
    }
    while (v35 < v33);
    *(_QWORD *)(a2 + 8) = v35;
  }
  else
  {
    v35 = *(_QWORD *)(a2 + 8);
  }
  v36 = malloc_type_malloc(v35, 0x3F38150FuLL);
  if (!v36)
  {
    v29 = "No memory";
    v30 = a1;
    v23 = 12;
LABEL_8:
    archive_set_error(v30, v23, v29, v24, v25, v26, v27, v28, v37);
    if ((v9 - 1) <= 0xFFFFFFFD)
      close(v9);
    return 4294967266;
  }
  *(_QWORD *)(a2 + 16) = v36;
  *(_DWORD *)a2 = v9;
  *(_WORD *)(a2 + 24) = v38.st_mode;
  result = 0;
  if (v32 == 0x8000)
    *(_BYTE *)(a2 + 26) = 1;
  return result;
}

ssize_t sub_1DB70BB54(_DWORD *a1, uint64_t a2, _QWORD *a3)
{
  ssize_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;

  *a3 = *(_QWORD *)(a2 + 16);
  while (1)
  {
    v5 = read(*(_DWORD *)a2, *(void **)(a2 + 16), *(_QWORD *)(a2 + 8));
    if ((v5 & 0x8000000000000000) == 0)
      break;
    if (*__error() != 4)
    {
      v6 = *(_DWORD *)(a2 + 28);
      if (v6 == 1)
      {
        v14 = *__error();
        archive_set_error(a1, v14, "Error reading '%s'", v15, v16, v17, v18, v19, (char *)(a2 + 32));
      }
      else
      {
        if (v6)
        {
          v7 = *__error();
          v21 = (char *)(a2 + 32);
          v13 = "Error reading '%S'";
        }
        else
        {
          v7 = *__error();
          v13 = "Error reading stdin";
        }
        archive_set_error(a1, v7, v13, v8, v9, v10, v11, v12, v21);
      }
      return v5;
    }
  }
  return v5;
}

uint64_t sub_1DB70BC14(_DWORD *a1, uint64_t a2, off_t a3)
{
  off_t v6;
  off_t v7;
  off_t v8;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;

  if (!*(_BYTE *)(a2 + 26))
    return 0;
  v6 = lseek(*(_DWORD *)a2, 0, 1);
  if ((v6 & 0x8000000000000000) == 0)
  {
    v7 = v6;
    v8 = lseek(*(_DWORD *)a2, a3, 1);
    if ((v8 & 0x8000000000000000) == 0)
      return v8 - v7;
  }
  *(_BYTE *)(a2 + 26) = 0;
  if (*__error() == 29)
    return 0;
  v10 = *(_DWORD *)(a2 + 28);
  if (v10 == 1)
  {
    v18 = *__error();
    archive_set_error(a1, v18, "Error seeking in '%s'", v19, v20, v21, v22, v23, (char *)(a2 + 32));
  }
  else
  {
    if (v10)
    {
      v11 = *__error();
      v24 = (char *)(a2 + 32);
      v17 = "Error seeking in '%S'";
    }
    else
    {
      v11 = *__error();
      v17 = "Error seeking in stdin";
    }
    archive_set_error(a1, v11, v17, v12, v13, v14, v15, v16, v24);
  }
  return -1;
}

uint64_t sub_1DB70BD04(uint64_t a1, void *a2)
{
  sub_1DB70BFA4((uint64_t)a2);
  free(a2);
  return 0;
}

uint64_t sub_1DB70BD34(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  sub_1DB70BFA4(a2);
  return sub_1DB70B9B8(a1, a3);
}

off_t sub_1DB70BD64(_DWORD *a1, uint64_t a2, off_t a3, int a4)
{
  off_t result;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;

  result = lseek(*(_DWORD *)a2, a3, a4);
  if (result < 0)
  {
    v7 = *(_DWORD *)(a2 + 28);
    if (v7 == 1)
    {
      v15 = *__error();
      archive_set_error(a1, v15, "Error seeking in '%s'", v16, v17, v18, v19, v20, (char *)(a2 + 32));
    }
    else
    {
      if (v7)
      {
        v8 = *__error();
        v21 = (char *)(a2 + 32);
        v14 = "Error seeking in '%S'";
      }
      else
      {
        v8 = *__error();
        v14 = "Error seeking in stdin";
      }
      archive_set_error(a1, v8, v14, v9, v10, v11, v12, v13, v21);
    }
    return -30;
  }
  return result;
}

uint64_t archive_read_open_filename_w(_DWORD *a1, __int32 *a2, uint64_t a3)
{
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v68;
  char *__src[3];

  v6 = wcslen(a2);
  v7 = malloc_type_calloc(1uLL, 4 * v6 + 40, 0x31BA681BuLL);
  if (v7)
  {
    v14 = (uint64_t)v7;
    *(_DWORD *)v7 = -1;
    v7[1] = a3;
    if (a2 && *a2)
    {
      memset(__src, 0, sizeof(__src));
      v15 = wcslen(a2);
      if (sub_1DB72CED8((uint64_t)__src, a2, v15))
      {
        if (*__error() == 12)
        {
          v21 = *__error();
          v22 = "Can't allocate memory";
          v23 = a1;
        }
        else
        {
          v22 = "Failed to convert a wide-character filename to a multi-byte filename";
          v23 = a1;
          v21 = 22;
        }
        archive_set_error(v23, v21, v22, v16, v17, v18, v19, v20, v68);
        sub_1DB6E7C3C((uint64_t)__src);
        free((void *)v14);
        return 4294967266;
      }
      *(_DWORD *)(v14 + 28) = 1;
      strcpy((char *)(v14 + 32), __src[0]);
      sub_1DB6E7C3C((uint64_t)__src);
    }
    else
    {
      *((_DWORD *)v7 + 7) = 0;
    }
    if (!archive_read_append_callback_data((uint64_t)a1, v14, v8, v9, v10, v11, v12, v13))
    {
      archive_read_set_open_callback((uint64_t)a1, (uint64_t)sub_1DB70B9B8, v24, v25, v26, v27, v28, v29);
      archive_read_set_read_callback((uint64_t)a1, (uint64_t)sub_1DB70BB54, v30, v31, v32, v33, v34, v35);
      archive_read_set_skip_callback((uint64_t)a1, (uint64_t)sub_1DB70BC14, v36, v37, v38, v39, v40, v41);
      archive_read_set_close_callback((uint64_t)a1, (uint64_t)sub_1DB70BD04, v42, v43, v44, v45, v46, v47);
      archive_read_set_switch_callback((uint64_t)a1, (uint64_t)sub_1DB70BD34, v48, v49, v50, v51, v52, v53);
      archive_read_set_seek_callback((uint64_t)a1, (uint64_t)sub_1DB70BD64, v54, v55, v56, v57, v58, v59);
      return archive_read_open1((uint64_t)a1, v60, v61, v62, v63, v64, v65, v66);
    }
  }
  else
  {
    archive_set_error(a1, 12, "No memory", v9, v10, v11, v12, v13, v68);
  }
  return 4294967266;
}

void sub_1DB70BFA4(uint64_t a1)
{
  int v2;

  if ((*(_DWORD *)a1 & 0x80000000) == 0)
  {
    v2 = *(_WORD *)(a1 + 24) & 0xF000;
    if (v2 != 0x2000 && v2 != 24576 && v2 != 0x8000)
    {
      while (read(*(_DWORD *)a1, *(void **)(a1 + 16), *(_QWORD *)(a1 + 8)) > 0)
        ;
    }
    if (*(_DWORD *)(a1 + 28))
      close(*(_DWORD *)a1);
  }
  free(*(void **)(a1 + 16));
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)a1 = -1;
}

uint64_t sub_1DB70C020(void **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  size_t v8;
  char *v9;
  char *v10;
  char *v11;
  const char *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  char *__s;
  uint64_t v18;
  uint64_t v19;

  __s = 0;
  v18 = 0;
  v19 = 0;
  v4 = sub_1DB70C13C((uint64_t *)&__s, a2);
  v5 = 4294967271;
  if ((v4 & 0x8000000000000000) == 0 && v18)
  {
    v6 = v4;
    v7 = __s;
    v8 = strlen(__s);
    v9 = (char *)malloc_type_realloc(*a1, v8 + 1, 0xB9C3D4D7uLL);
    if (v9)
    {
      *a1 = v9;
      strcpy(v9, v7);
      v10 = __s;
      v11 = strrchr(__s, 47);
      if (v11)
        v12 = v11 + 1;
      else
        v12 = v10;
      v5 = sub_1DB70C248((uint64_t)a1, v12);
      if (!(_DWORD)v5)
      {
        v13 = (_BYTE *)(a2 + v6);
        while (1)
        {
          v14 = sub_1DB70C13C((uint64_t *)&__s, (uint64_t)v13);
          if (v14 < 0)
            break;
          if (!v14 || (v13 += v14, !v18) && !*v13)
          {
            v5 = 0;
            goto LABEL_18;
          }
          v15 = sub_1DB70C248((uint64_t)a1, __s);
          if ((_DWORD)v15)
          {
            v5 = v15;
            goto LABEL_18;
          }
        }
        v5 = 4294967271;
      }
    }
    else
    {
      v5 = 4294967266;
    }
  }
LABEL_18:
  sub_1DB6E7C3C((uint64_t)&__s);
  return v5;
}

uint64_t sub_1DB70C13C(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 v5;
  int v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  int v10;
  uint64_t v11;
  uint64_t result;

  a1[1] = 0;
  v4 = (unsigned __int8 *)(a2 - 1);
  do
  {
    v6 = *++v4;
    v5 = v6;
  }
  while (v6 == 32);
  while (1)
  {
    if (v5 > 0x5Bu)
    {
      v7 = 1;
      if (v5 == 92)
      {
        v5 = v4[1];
        if (!v5)
          return (uint64_t)&(++v4)[-a2];
        v7 = 2;
      }
      goto LABEL_5;
    }
    if (v5 != 34)
    {
      if (!v5)
        return (uint64_t)&v4[-a2];
      v7 = 1;
      if (v5 == 32)
        return (uint64_t)&v4[-a2];
LABEL_5:
      sub_1DB72CE60(a1, v5);
      goto LABEL_6;
    }
    v8 = v4 + 1;
    while (1)
    {
      v9 = v8;
      v10 = *v8;
      if (v10 != 92)
        break;
      ++v8;
      LOBYTE(v10) = v9[1];
      if ((_BYTE)v10)
      {
        v11 = 2;
LABEL_16:
        sub_1DB72CE60(a1, v10);
        v8 = &v9[v11];
      }
    }
    if (*v8 && v10 != 34)
    {
      v11 = 1;
      goto LABEL_16;
    }
    result = -25;
    v7 = v10 == 34 ? v8 - v4 + 1 : -25;
    if (v7 < 0)
      return result;
LABEL_6:
    v4 += v7;
    v5 = *v4;
  }
}

uint64_t sub_1DB70C248(uint64_t a1, const char *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  if (!*(_QWORD *)a1)
    return 4294967271;
  v4 = malloc_type_realloc(*(void **)(a1 + 8), 8 * *(int *)(a1 + 16) + 16, 0x10040436913F5uLL);
  if (!v4)
    return 4294967266;
  v5 = v4;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = strdup(a2);
  v7 = *(int *)(a1 + 16);
  v5[v7] = v6;
  v8 = *(_QWORD *)(a1 + 8);
  if (!*(_QWORD *)(v8 + 8 * v7))
    return 4294967266;
  result = 0;
  v10 = v7 + 1;
  *(_DWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v8 + 8 * v10) = 0;
  return result;
}

void *sub_1DB70C2E4()
{
  return malloc_type_calloc(1uLL, 0x18uLL, 0x1090040BD55ACEDuLL);
}

uint64_t sub_1DB70C300(uint64_t a1)
{
  void **v2;
  void *v3;
  uint64_t v4;

  if (a1)
  {
    free(*(void **)a1);
    v2 = *(void ***)(a1 + 8);
    if (v2)
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = 1;
        do
        {
          free(v3);
          v2 = *(void ***)(a1 + 8);
          v3 = v2[v4++];
        }
        while (v3);
      }
      free(v2);
    }
    free((void *)a1);
  }
  return 0;
}

uint64_t sub_1DB70C364()
{
  return 0;
}

uint64_t sub_1DB70C36C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;

  *a3 = a2[1];
  v3 = a2[1];
  if (a2[2] - v3 >= a2[3])
    result = a2[3];
  else
    result = a2[2] - v3;
  a2[1] = v3 + result;
  return result;
}

uint64_t sub_1DB70C394(uint64_t a1, unint64_t *a2, uint64_t a3, int a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  if (a4 == 2)
  {
    v4 = a2[2];
  }
  else if (a4 == 1)
  {
    v4 = a2[1];
  }
  else
  {
    if (a4)
      return -30;
    v4 = *a2;
  }
  v5 = v4 + a3;
  a2[1] = v5;
  v6 = *a2;
  result = v5 - *a2;
  if (v5 < *a2 || (v6 = a2[2], v5 > v6))
  {
    a2[1] = v6;
    return -25;
  }
  return result;
}

uint64_t sub_1DB70C3F0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = a2[1];
  v4 = a2[2] - v3;
  if (v4 >= a3)
    v4 = a3;
  result = v4 / a2[3] * a2[3];
  a2[1] = v3 + result;
  return result;
}

uint64_t sub_1DB70C418(int a1, void *a2)
{
  free(a2);
  return 0;
}

void archive_read_support_filter_bzip2(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;

  if (sub_1DB6E4544("bzip2"))
  {
    if (sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_filter_bzip2", v3, v4, v5, v6) != -30)
    {
      v16 = 0;
      sub_1DB6F7FD0(a1, &v16, v7, v8, v9, v10, v11, v12);
      if (!v13)
      {
        *v16 = 0;
        v14 = v16;
        v16[1] = "bzip2";
        v14[2] = sub_1DB70C4F4;
        v14[3] = sub_1DB70C59C;
        v14[4] = 0;
        v14[5] = sub_1DB70C65C;
      }
    }
  }
  else
  {
    archive_set_error(a1, -1, "Filter not allow-listed in entitlements", v2, v3, v4, v5, v6, v15);
  }
}

size_t sub_1DB70C4F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t result;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;

  v12 = 0;
  result = sub_1DB6E22F4(a2, 0xEuLL, &v12, a4, a5, a6, a7, a8);
  if (result)
  {
    v9 = *(_WORD *)result == 23106 && *(_BYTE *)(result + 2) == 104;
    if (v9
      && *(unsigned __int8 *)(result + 3) - 58 >= 0xFFFFFFF7
      && (*(_DWORD *)(result + 4) == 643383601 ? (v10 = *(unsigned __int16 *)(result + 8) == 22867) : (v10 = 0),
          v10
       || (*(_DWORD *)(result + 4) == 944075287 ? (v11 = *(unsigned __int16 *)(result + 8) == 36944) : (v11 = 0), v11)))
    {
      return 77;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1DB70C59C(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t result;
  char *v11;

  *(_DWORD *)(a1 + 104) = 2;
  *(_QWORD *)(a1 + 96) = "bzip2";
  v2 = malloc_type_calloc(0x68uLL, 1uLL, 0xF7B2966FuLL);
  v3 = malloc_type_malloc(0x10000uLL, 0x407856F4uLL);
  v9 = v3;
  if (v2 && v3)
  {
    result = 0;
    *(_QWORD *)(a1 + 88) = v2;
    v2[10] = v9;
    v2[11] = 0x10000;
    *(_QWORD *)(a1 + 40) = sub_1DB70C664;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 64) = sub_1DB70C85C;
  }
  else
  {
    archive_set_error(*(_DWORD **)(a1 + 24), 12, "Can't allocate data for bzip2 decompression", v4, v5, v6, v7, v8, v11);
    free(v9);
    free(v2);
    return 4294967266;
  }
  return result;
}

uint64_t sub_1DB70C65C()
{
  return 0;
}

uint64_t sub_1DB70C664(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  size_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _DWORD *v26;
  char *v27;
  const char *v28;
  char *v29;
  uint64_t v30;

  v9 = *(_QWORD *)(a1 + 88);
  if (*(_BYTE *)(v9 + 97))
  {
    result = 0;
    *a2 = 0;
    return result;
  }
  v11 = a1;
  v30 = 0;
  v12 = *(_QWORD *)(v9 + 88);
  *(_QWORD *)(v9 + 24) = *(_QWORD *)(v9 + 80);
  *(_DWORD *)(v9 + 32) = v12;
  while (1)
  {
    if (*(_BYTE *)(v9 + 96))
      goto LABEL_10;
    if (!sub_1DB70C4F4(a1, *(_QWORD *)(v11 + 16), a3, a4, a5, a6, a7, a8))
      goto LABEL_22;
    v13 = BZ2_bzDecompressInit((bz_stream *)v9, 0, 0);
    v14 = v13;
    v30 = v13;
    if (v13 == -3)
    {
      v15 = BZ2_bzDecompressInit((bz_stream *)v9, 0, 1);
      v14 = v15;
      v30 = v15;
    }
    if (v14)
      break;
    *(_BYTE *)(v9 + 96) = 1;
LABEL_10:
    v16 = sub_1DB6E22F4(*(_QWORD *)(v11 + 16), 1uLL, &v30, a4, a5, a6, a7, a8);
    if (!v16)
    {
      v26 = *(_DWORD **)(v11 + 24);
      v27 = "truncated bzip2 input";
      goto LABEL_27;
    }
    v17 = v16;
    *(_QWORD *)v9 = v16;
    v18 = v30;
    *(_DWORD *)(v9 + 8) = v30;
    if (!v18)
    {
LABEL_22:
      *(_BYTE *)(v9 + 97) = 1;
LABEL_23:
      *a2 = *(_QWORD *)(v9 + 80);
      return *(_QWORD *)(v9 + 24) - *(_QWORD *)(v9 + 80);
    }
    v30 = BZ2_bzDecompress((bz_stream *)v9);
    a1 = sub_1DB6E26F8(*(_QWORD *)(v11 + 16), *(_QWORD *)v9 - v17, v19, v20, v21, v22, v23, v24);
    if (v30)
    {
      if (v30 == 4)
      {
        a1 = BZ2_bzDecompressEnd((bz_stream *)v9);
        if (!(_DWORD)a1)
        {
          *(_BYTE *)(v9 + 96) = 0;
          goto LABEL_16;
        }
        v26 = *(_DWORD **)(v11 + 24);
        v27 = "Failed to clean up decompressor";
      }
      else
      {
        v26 = *(_DWORD **)(v11 + 24);
        v27 = "bzip decompression failed";
      }
LABEL_27:
      v25 = -1;
      goto LABEL_33;
    }
LABEL_16:
    if (!*(_DWORD *)(v9 + 32))
      goto LABEL_23;
  }
  switch(v14)
  {
    case -9:
      v25 = -1;
LABEL_30:
      v28 = ": ";
      goto LABEL_32;
    case -2:
      v25 = -1;
      goto LABEL_30;
    case -3:
      v25 = 12;
      goto LABEL_30;
  }
  v25 = -1;
  v28 = "";
LABEL_32:
  v26 = *(_DWORD **)(v11 + 24);
  v29 = (char *)v28;
  v27 = "Internal error initializing decompressor%s%s";
LABEL_33:
  archive_set_error(v26, v25, v27, a4, a5, a6, a7, a8, v29);
  return -30;
}

uint64_t sub_1DB70C85C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;

  v1 = *(_QWORD *)(a1 + 88);
  if (*(_BYTE *)(v1 + 96))
  {
    if (BZ2_bzDecompressEnd(*(bz_stream **)(a1 + 88)))
    {
      archive_set_error(*(_DWORD **)(a1 + 24), -1, "Failed to clean up decompressor", v3, v4, v5, v6, v7, v10);
      v8 = 4294967266;
    }
    else
    {
      v8 = 0;
    }
    *(_BYTE *)(v1 + 96) = 0;
  }
  else
  {
    v8 = 0;
  }
  free(*(void **)(v1 + 80));
  free((void *)v1);
  return v8;
}

uint64_t sub_1DB70C8D0(CCHmacContext *a1, void *key, size_t keyLength)
{
  CCHmacInit(a1, 0, key, keyLength);
  return 0;
}

void sub_1DB70C8F8(CCHmacContext *a1, void *a2, _QWORD *a3)
{
  CCHmacFinal(a1, a2);
  *a3 = 20;
}

double sub_1DB70C920(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_1DB70C958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  int v22;
  const char *v24;
  _BYTE *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  size_t v43;
  size_t v45;
  unint64_t v46;
  size_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  int v74;
  unsigned __int8 *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  size_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  _DWORD *v103;
  int v104;
  int v105;
  BOOL v106;
  _BYTE v107[15];
  char v108;
  _BYTE v109[2];
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v10 = **(_QWORD **)(a1 + 2472);
  if (!*(_BYTE *)(v10 + 48))
  {
    sub_1DB6E26F0(a1, 8, a3, a4, a5, a6, a7, a8);
    *(_BYTE *)(v10 + 48) = 1;
    *(_DWORD *)(a1 + 16) = 458752;
  }
  v11 = sub_1DB6E2588(a1, 0x3CuLL, 0, a4, a5, a6, a7, a8);
  if (v11)
  {
    v12 = v11;
    {
      v18 = "Incorrect file header signature";
LABEL_6:
      v19 = (_DWORD *)a1;
      v20 = 22;
LABEL_35:
      archive_set_error(v19, v20, v18, v13, v14, v15, v16, v17, *(char **)v107);
LABEL_36:
      v21 = 4294967266;
LABEL_37:
      sub_1DB6E26F0(a1, 60, v28, v29, v30, v31, v32, v33);
      return v21;
    }
    strncpy(&v107[7], (const char *)v12, 0x10uLL);
    v109[1] = 0;
    v22 = *(_DWORD *)(a1 + 16);
    if (v22 != 458754)
    {
      if (v22 == 458753)
      {
LABEL_17:
        v24 = "ar (GNU/SVR4)";
LABEL_25:
        *(_QWORD *)(a1 + 24) = v24;
        v26 = v109;
        do
        {
          v27 = *v26;
          if (v27 != 32)
            break;
          *v26-- = 0;
        }
        while (v26 >= &v107[7]);
        if (v26 > &v107[7] && v107[7] != 47 && *v26 == 47)
          *v26 = 0;
        if (v27 == 32)
        {
          v18 = "Found entry with empty filename";
LABEL_34:
          v19 = (_DWORD *)a1;
          v20 = -1;
          goto LABEL_35;
        }
        if (*(unsigned __int16 *)&v107[7] ^ 0x2F2F | v107[9])
        {
          if (v107[7] == 47 && v107[8] >= 48 && v107[8] <= 57)
          {
            v35 = sub_1DB70D1F8((unsigned __int8 *)(v12 + 1), 0xFu);
            v41 = *(_QWORD *)(v10 + 32);
            if (!v41 || v35 >= *(_QWORD *)(v10 + 40))
            {
              archive_set_error((_DWORD *)a1, 22, "Can't find long filename for GNU/SVR4 archive entry", v36, v37, v38, v39, v40, *(char **)v107);
              archive_entry_copy_pathname(a2, &v107[7]);
              sub_1DB70D0B0((unint64_t *)v10, a2, (unsigned __int8 *)v12);
              goto LABEL_36;
            }
            v42 = (char *)(v41 + v35);
            goto LABEL_55;
          }
          if (*(unsigned __int16 *)&v107[7] != 12579 || v107[9] != 47)
          {
            if (*(unsigned __int16 *)&v107[7] == 47 || *(_QWORD *)&v107[7] == 0x2F34364D59532FLL)
            {
              archive_entry_copy_pathname(a2, &v107[7]);
              sub_1DB70D0B0((unint64_t *)v10, a2, (unsigned __int8 *)v12);
              archive_entry_set_filetype(a2, 0x8000);
              goto LABEL_61;
            }
            v42 = &v107[7];
LABEL_55:
            archive_entry_copy_pathname(a2, v42);
            sub_1DB70D0B0((unint64_t *)v10, a2, (unsigned __int8 *)v12);
LABEL_61:
            v21 = 0;
            goto LABEL_37;
          }
          sub_1DB70D0B0((unint64_t *)v10, a2, (unsigned __int8 *)v12);
          v46 = sub_1DB70D1F8((unsigned __int8 *)(v12 + 3), 0xDu);
          if (v46 > 0x100000 || (v47 = v46, v48 = *(_QWORD *)v10 - v46, *(_QWORD *)v10 < (int64_t)v46))
          {
            v18 = "Bad input file size";
            goto LABEL_34;
          }
          *(_QWORD *)v10 = v48;
          archive_entry_set_size(a2, v48);
          sub_1DB6E26F0(a1, 60, v76, v77, v78, v79, v80, v81);
          v87 = sub_1DB6E2588(a1, v47, 0, v82, v83, v84, v85, v86);
          if (v87)
          {
            v93 = (const char *)v87;
            v94 = (char *)malloc_type_malloc(v47 + 1, 0x51C6936BuLL);
            if (v94)
            {
              v95 = v94;
              strncpy(v94, v93, v47)[v47] = 0;
              sub_1DB6E26F0(a1, v47, v96, v97, v98, v99, v100, v101);
              archive_entry_copy_pathname(a2, v95);
              free(v95);
              return 0;
            }
            v102 = "Can't allocate fname buffer";
            v103 = (_DWORD *)a1;
            v104 = 12;
          }
          else
          {
            v102 = "Truncated input file";
            v103 = (_DWORD *)a1;
            v104 = -1;
          }
          archive_set_error(v103, v104, v102, v88, v89, v90, v91, v92, *(char **)v107);
        }
        else
        {
          sub_1DB70D0B0((unint64_t *)v10, a2, (unsigned __int8 *)v12);
          archive_entry_copy_pathname(a2, &v107[7]);
          archive_entry_set_filetype(a2, 0x8000);
          v43 = sub_1DB70D1F8((unsigned __int8 *)(v12 + 48), 0xAu);
          if (v43 >= 0x40000001)
          {
            v18 = "Filename table too large";
            goto LABEL_34;
          }
          v45 = v43;
          if (!v43)
          {
            v18 = "Invalid string table";
            goto LABEL_6;
          }
          if (*(_QWORD *)(v10 + 32))
          {
            v18 = "More than one string tables exist";
            goto LABEL_6;
          }
          v49 = malloc_type_malloc(v43, 0xA950A154uLL);
          if (!v49)
          {
            v18 = "Can't allocate filename table buffer";
            v19 = (_DWORD *)a1;
            v20 = 12;
            goto LABEL_35;
          }
          v51 = v49;
          *(_QWORD *)(v10 + 32) = v49;
          *(_QWORD *)(v10 + 40) = v45;
          sub_1DB6E26F0(a1, 60, v50, v13, v14, v15, v16, v17);
          v57 = (const void *)sub_1DB6E2588(a1, v45, 0, v52, v53, v54, v55, v56);
          if (v57)
          {
            memcpy(v51, v57, v45);
            sub_1DB6E26F0(a1, v45, v58, v59, v60, v61, v62, v63);
            *(_QWORD *)v10 = 0;
            archive_entry_set_size(a2, 0);
            v69 = **(_QWORD **)(a1 + 2472);
            v71 = *(_QWORD *)(v69 + 32);
            v70 = *(_QWORD *)(v69 + 40);
            v72 = (unsigned __int8 *)(v71 + v70);
            if (v71 >= v71 + v70 - 1)
            {
              v73 = *(unsigned __int8 **)(v69 + 32);
            }
            else
            {
              v73 = *(unsigned __int8 **)(v69 + 32);
              do
              {
                if (*v73 == 47)
                {
                  v75 = v73 + 1;
                  v74 = v73[1];
                  *v73 = 0;
                  if (v74 != 10)
                    goto LABEL_91;
                  *v75 = 0;
                  v71 = *(_QWORD *)(v69 + 32);
                }
                else
                {
                  v75 = v73;
                }
                v73 = v75 + 1;
                v72 = (unsigned __int8 *)(v71 + v70);
              }
              while ((unint64_t)v73 < v71 + v70 - 1);
            }
            if (v73 == v72 || ((v105 = *v73, v105 != 96) ? (v106 = v105 == 10) : (v106 = 1), v106))
            {
              v21 = 0;
              *(_BYTE *)(v70 + v71 - 1) = 0;
              return v21;
            }
LABEL_91:
            archive_set_error((_DWORD *)a1, 22, "Invalid string table", v64, v65, v66, v67, v68, *(char **)v107);
            free(*(void **)(v69 + 32));
            *(_QWORD *)(v69 + 32) = 0;
          }
        }
        return 4294967266;
      }
      if (v22 != 458752)
        goto LABEL_22;
      if (*(unsigned __int16 *)&v107[7] != 12579 || v107[9] != 47)
      {
        if (strchr(&v107[7], 47))
        {
          *(_DWORD *)(a1 + 16) = 458753;
          goto LABEL_17;
        }
        if (*(_QWORD *)&v107[7] != 0x45444D59532E5F5FLL || v108 != 70)
        {
LABEL_22:
          v24 = "ar";
          goto LABEL_25;
        }
      }
      *(_DWORD *)(a1 + 16) = 458754;
    }
    v24 = "ar (BSD)";
    goto LABEL_25;
  }
  return 1;
}

uint64_t sub_1DB70CF40(uint64_t a1, size_t *a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v28 = 0;
  v12 = *(uint64_t ***)(a1 + 2472);
  v13 = *v12;
  v14 = (*v12)[1];
  if (v14)
  {
    sub_1DB6E26F0(a1, v14, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    v13[1] = 0;
  }
  if (*v13 < 1)
  {
    v23 = sub_1DB6E26F0(a1, v13[3], (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    v24 = v13[3];
    if (v23 < 0)
    {
      if (v24)
        return 4294967266;
    }
    else
    {
      v25 = v24 - v23;
      v13[3] = v25;
      if (v25)
      {
        v26 = "Truncated ar archive- failed consuming padding";
LABEL_13:
        archive_set_error((_DWORD *)a1, -1, v26, v15, v16, v17, v18, v19, v27);
        return 4294967266;
      }
    }
    *a2 = 0;
    *a3 = 0;
    *a4 = v13[2];
    return 1;
  }
  *a2 = sub_1DB6E2588(a1, 1uLL, &v28, (uint64_t)a4, a5, a6, a7, a8);
  v20 = v28;
  if (!v28)
  {
    v26 = "Truncated ar archive";
    goto LABEL_13;
  }
  if (v28 < 0)
    return 4294967266;
  result = 0;
  if (v28 >= *v13)
    v20 = *v13;
  *a3 = v20;
  *a4 = v13[2];
  v22 = v13[2] + v20;
  v13[1] = v20;
  v13[2] = v22;
  *v13 -= v20;
  return result;
}

uint64_t sub_1DB70D064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t result;

  v8 = **(_QWORD ***)(a1 + 2472);
  if (sub_1DB6E26F0(a1, v8[3] + *v8 + v8[1], a3, a4, a5, a6, a7, a8) < 0)
    return 4294967266;
  result = 0;
  v8[3] = 0;
  *v8 = 0;
  v8[1] = 0;
  return result;
}

uint64_t sub_1DB70D0B0(unint64_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v14;
  int v15;
  unsigned int v16;
  unint64_t v17;
  BOOL v18;
  char *v19;
  int v20;
  unint64_t v22;
  uint64_t result;

  archive_entry_set_filetype(a2, 0x8000);
  v6 = sub_1DB70D1F8(a3 + 16, 0xCu);
  archive_entry_set_mtime(a2, v6, 0);
  v7 = sub_1DB70D1F8(a3 + 28, 6u);
  archive_entry_set_uid(a2, v7);
  v8 = sub_1DB70D1F8(a3 + 34, 6u);
  archive_entry_set_gid(a2, v8);
  v9 = 0;
  v10 = a3 + 40;
  v11 = a3 + 48;
  while (1)
  {
    v12 = v10[v9];
    if (v12 != 32 && v12 != 9)
    {
      v14 = &v10[v9];
      v15 = 8 - v9;
      goto LABEL_10;
    }
    if ((_DWORD)v9 == 8)
      break;
    ++v9;
  }
  LOBYTE(v12) = *v11;
  v15 = -1;
  v14 = v11;
LABEL_10:
  v16 = (char)v12 - 48;
  v18 = (char)v12 < 48;
  v17 = 0;
  v18 = v18 || v16 > 7;
  if (!v18)
  {
    v19 = (char *)(v14 + 1);
    while (v15)
    {
      if (v17 >> 61)
      {
        LOWORD(v17) = -1;
        break;
      }
      v17 = 8 * v17 + v16;
      v20 = *v19++;
      --v15;
      v16 = v20 - 48;
      if (v20 < 48 || v16 >= 8)
        break;
    }
  }
  archive_entry_set_mode(a2, v17);
  v22 = sub_1DB70D1F8(v11, 0xAu);
  a1[2] = 0;
  a1[3] = v22 & 1;
  result = archive_entry_set_size(a2, v22);
  *a1 = v22;
  return result;
}

unint64_t sub_1DB70D1F8(unsigned __int8 *a1, unsigned int a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v5;
  unsigned int v6;
  unint64_t result;
  char *v9;
  int v10;

  v2 = &a1[a2];
  while (1)
  {
    v3 = *a1;
    if (v3 != 32 && v3 != 9)
    {
      v2 = a1;
      goto LABEL_10;
    }
    if (!a2)
      break;
    --a2;
    ++a1;
  }
  LOBYTE(v3) = *v2;
  a2 = -1;
LABEL_10:
  v5 = __OFSUB__((char)v3, 48);
  v6 = (char)v3 - 48;
  result = 0;
  if (((v6 & 0x80000000) != 0) == v5 && v6 <= 9)
  {
    v9 = (char *)(v2 + 1);
    while (a2)
    {
      if (result > 0x1999999999999999 || result == 0x1999999999999999 && v6 > 5)
        return -1;
      result = 10 * result + v6;
      v10 = *v9++;
      v6 = v10 - 48;
      if (v10 >= 48)
      {
        --a2;
        if (v6 < 0xA)
          continue;
      }
      return result;
    }
  }
  return result;
}

uint64_t archive_read_support_filter_zstd(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;

  if (sub_1DB6E4544("zstd"))
  {
    result = sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_filter_zstd", v3, v4, v5, v6);
    if ((_DWORD)result == -30)
      return result;
    v22 = 0;
    sub_1DB6F7FD0(a1, &v22, v8, v9, v10, v11, v12, v13);
    if (!v19)
    {
      *v22 = 0;
      v20 = v22;
      v22[1] = "zstd";
      v20[2] = sub_1DB70D364;
      v20[4] = 0;
      v20[5] = 0;
      v20[3] = sub_1DB70D3C4;
      archive_set_error(a1, -1, "Using external zstd program for zstd decompression", v14, v15, v16, v17, v18, v21);
      return 4294967276;
    }
  }
  else
  {
    archive_set_error(a1, -1, "Filter not allow-listed in entitlement", v2, v3, v4, v5, v6, v21);
  }
  return 4294967266;
}

size_t sub_1DB70D364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t result;
  uint64_t v9;

  v9 = 0;
  result = sub_1DB6E22F4(a2, 4uLL, &v9, a4, a5, a6, a7, a8);
  if (result)
  {
    if (*(_DWORD *)result == -47205080)
      return 32;
    else
      return 32 * (*(_DWORD *)result >> 4 == 25481893);
  }
  return result;
}

uint64_t sub_1DB70D3C4(uint64_t a1)
{
  uint64_t result;

  result = sub_1DB6FE79C(a1, "zstd -d -qq");
  *(_DWORD *)(a1 + 104) = 14;
  *(_QWORD *)(a1 + 96) = "zstd";
  return result;
}

uint64_t sub_1DB70D400(uint64_t a1, _DWORD *a2, _DWORD *a3, pid_t *a4)
{
  void **v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t result;
  int v17;
  int v18;
  posix_spawn_file_actions_t v19;
  pid_t v20;
  int v21[2];
  int v22[2];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v20 = 0;
  v19 = 0;
  v8 = (void **)sub_1DB70C2E4();
  v9 = (uint64_t)v8;
  if (!v8 || sub_1DB70C020(v8, a1) || pipe(v22) == -1)
    goto LABEL_19;
  if (v22[0] == 1)
  {
    v10 = dup(1);
    if (v10 == -1)
      goto LABEL_18;
    v11 = v10;
    close(v22[0]);
    v22[0] = v11;
  }
  if (pipe(v21) != -1)
  {
    if (!v21[1])
    {
      v12 = dup(0);
      if (v12 == -1)
      {
LABEL_17:
        close(v21[0]);
        close(v21[1]);
        goto LABEL_18;
      }
      v13 = v12;
      close(v21[1]);
      v21[1] = v13;
    }
    v14 = posix_spawn_file_actions_init(&v19);
    if (v14)
    {
      *__error() = v14;
    }
    else
    {
      v15 = posix_spawn_file_actions_addclose(&v19, v22[1]);
      if (!v15)
      {
        v15 = posix_spawn_file_actions_addclose(&v19, v21[0]);
        if (!v15)
        {
          v15 = posix_spawn_file_actions_adddup2(&v19, v22[0], 0);
          if (!v15 && (!v22[0] || (v15 = posix_spawn_file_actions_addclose(&v19, v22[0])) == 0))
          {
            v15 = posix_spawn_file_actions_adddup2(&v19, v21[1], 1);
            if (!v15 && (v21[1] == 1 || (v15 = posix_spawn_file_actions_addclose(&v19, v21[1])) == 0))
            {
              v15 = posix_spawnp(&v20, *(const char **)v9, &v19, 0, *(char *const **)(v9 + 8), 0);
              if (!v15)
              {
                posix_spawn_file_actions_destroy(&v19);
                close(v22[0]);
                close(v21[1]);
                v17 = v22[1];
                *a2 = v22[1];
                fcntl(v17, 4, 4, v19);
                v18 = v21[0];
                *a3 = v21[0];
                fcntl(v18, 4, 4);
                sub_1DB70C300(v9);
                result = 0;
                *a4 = v20;
                return result;
              }
            }
          }
        }
      }
      *__error() = v15;
      posix_spawn_file_actions_destroy(&v19);
    }
    goto LABEL_17;
  }
LABEL_18:
  close(v22[0]);
  close(v22[1]);
LABEL_19:
  sub_1DB70C300(v9);
  return 4294967271;
}

uint64_t sub_1DB70D664(int a1, int a2)
{
  nfds_t v3;
  pollfd *v4;
  pollfd v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (a1 == -1)
  {
    v3 = 0;
  }
  else
  {
    v6[0].fd = a1;
    v6[0].events = 4;
    v3 = 1;
  }
  if (a2 != -1)
  {
    v4 = &v6[v3];
    v4->fd = a2;
    v4->events = 1;
    ++v3;
  }
  return poll(v6, v3, -1);
}

uint64_t archive_read_add_passphrase(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char **v16;
  char **v17;
  char *v18;

  result = sub_1DB6E0594((int *)a1, 14594245, 1, "archive_read_add_passphrase", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    if (a2 && *a2)
    {
      v16 = sub_1DB70D790((_DWORD *)a1, a2);
      if (v16)
      {
        v17 = v16;
        result = 0;
        **(_QWORD **)(a1 + 2504) = v17;
        v17[1] = 0;
        *(_QWORD *)(a1 + 2504) = v17 + 1;
      }
      else
      {
        return 4294967266;
      }
    }
    else
    {
      archive_set_error((_DWORD *)a1, -1, "Empty passphrase is unacceptable", v11, v12, v13, v14, v15, v18);
      return 4294967271;
    }
  }
  return result;
}

char **sub_1DB70D790(_DWORD *a1, const char *a2)
{
  char **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  char *v11;
  char *v13;

  v4 = (char **)malloc_type_malloc(0x10uLL, 0x30040EEE2E2AFuLL);
  if (!v4)
    goto LABEL_4;
  v10 = v4;
  v11 = strdup(a2);
  *v10 = v11;
  if (!v11)
  {
    free(v10);
LABEL_4:
    archive_set_error(a1, 12, "Can't allocate memory", v5, v6, v7, v8, v9, v13);
    return 0;
  }
  return v10;
}

uint64_t archive_read_set_passphrase_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594((int *)a1, 14594245, 1, "archive_read_set_passphrase_callback", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    result = 0;
    *(_QWORD *)(a1 + 2520) = a3;
    *(_QWORD *)(a1 + 2528) = a2;
  }
  return result;
}

uint64_t sub_1DB70D864(uint64_t result)
{
  *(_DWORD *)(result + 2512) = -1;
  return result;
}

const char *sub_1DB70D870(uint64_t a1)
{
  uint64_t *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t (*v11)(uint64_t, _QWORD);
  char **v12;
  _QWORD *v13;

  v2 = (uint64_t *)(a1 + 2496);
  v3 = *(_DWORD *)(a1 + 2512);
  if ((v3 & 0x80000000) != 0)
  {
    v5 = *v2;
    if (*v2)
    {
      v6 = 0;
      v7 = *v2;
      do
      {
        ++v6;
        v7 = *(_QWORD *)(v7 + 8);
      }
      while (v7);
    }
    else
    {
      v6 = 0;
    }
    *(_DWORD *)(a1 + 2512) = v6;
    if (!v5)
      goto LABEL_17;
    return *(const char **)v5;
  }
  if (v3 >= 2)
  {
    *(_DWORD *)(a1 + 2512) = v3 - 1;
    v4 = *(_QWORD *)(a1 + 2496);
    if (v4)
      *v2 = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(a1 + 2504) = v4;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(a1 + 2504) = v4 + 8;
    v5 = *(_QWORD *)(a1 + 2496);
    if (!v5)
      goto LABEL_17;
    return *(const char **)v5;
  }
  if (v3 == 1)
  {
    *(_DWORD *)(a1 + 2512) = 0;
    v8 = *(_QWORD *)(a1 + 2496);
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      *(_QWORD *)(a1 + 2496) = v9;
      **(_QWORD **)(a1 + 2504) = v8;
      *(_QWORD *)(a1 + 2504) = v8 + 8;
      *(_QWORD *)(v8 + 8) = 0;
    }
  }
LABEL_17:
  v11 = *(uint64_t (**)(uint64_t, _QWORD))(a1 + 2520);
  if (!v11)
    return 0;
  v10 = (const char *)v11(a1, *(_QWORD *)(a1 + 2528));
  if (!v10)
    return v10;
  v12 = sub_1DB70D790((_DWORD *)a1, v10);
  if (!v12)
    return 0;
  v12[1] = *(char **)(a1 + 2496);
  v13 = v12 + 1;
  *(_QWORD *)(a1 + 2496) = v12;
  if (v2 == *(uint64_t **)(a1 + 2504))
  {
    *(_QWORD *)(a1 + 2504) = v13;
    *v13 = 0;
  }
  *(_DWORD *)(a1 + 2512) = 1;
  return v10;
}

uint64_t sub_1DB70D9A8(uint64_t a1, char *__s1, char *a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;

  v6 = **(_QWORD **)(a1 + 2472);
  result = strcmp(__s1, "compat-2x");
  if ((_DWORD)result)
  {
    if (!strcmp(__s1, "hdrcharset"))
    {
      if (a3 && *a3)
      {
        v13 = sub_1DB6E3A78(a1, a3, 0);
        *(_QWORD *)(v6 + 56) = v13;
        if (v13)
          return 0;
        else
          return 4294967266;
      }
      else
      {
        archive_set_error((_DWORD *)a1, -1, "cpio: hdrcharset option needs a character-set name", v8, v9, v10, v11, v12, v14);
        return 4294967271;
      }
    }
    else if (!strcmp(__s1, "pwb"))
    {
      if (a3 && *a3)
      {
        result = 0;
        *(_DWORD *)(v6 + 76) = 1;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 4294967276;
    }
  }
  else
  {
    *(_DWORD *)(v6 + 72) = a3 != 0;
  }
  return result;
}

uint64_t sub_1DB70DA9C(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  const char *v54;
  char *v55;
  int v57;
  uint64_t *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;

  v61 = 0;
  v62 = 0;
  v4 = *(uint64_t **)(a1 + 2472);
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 56);
  if (!v6)
  {
    if (*(_DWORD *)(v5 + 72))
    {
      v6 = *(_QWORD *)(v5 + 64);
    }
    else
    {
      v6 = sub_1DB6E54AC();
      *(_QWORD *)(v5 + 64) = v6;
      *(_DWORD *)(v5 + 72) = 1;
    }
  }
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, unint64_t *, uint64_t *))(v5 + 8))(a1, v5, a2, &v62, &v61);
  if ((int)v12 < -20)
    return v12;
  v13 = (char *)sub_1DB6E2588(a1, v61 + v62, 0, v7, v8, v9, v10, v11);
  if (!v13)
    return 4294967266;
  v14 = v13;
  if (sub_1DB6E3BD0((uint64_t)a2, v13, v62, v6))
  {
    if (*__error() == 12)
    {
      v26 = "Can't allocate memory for Pathname";
LABEL_32:
      archive_set_error((_DWORD *)a1, 12, v26, v21, v22, v23, v24, v25, v60);
      return 4294967266;
    }
    v27 = (char *)sub_1DB72D0D4(v6);
    archive_set_error((_DWORD *)a1, 79, "Pathname can't be converted from %s to current locale.", v28, v29, v30, v31, v32, v27);
    v12 = 4294967276;
  }
  *(_QWORD *)(v5 + 40) = 0;
  sub_1DB6E26F0(a1, v61 + v62, v15, v16, v17, v18, v19, v20);
  if (archive_entry_filetype((uint64_t)a2) != 40960)
    goto LABEL_20;
  v33 = *(_QWORD *)(v5 + 24);
  if (v33 > 0x100000)
  {
    v26 = "Rejecting malformed cpio archive: symlink contents exceed 1 megabyte";
    goto LABEL_32;
  }
  v34 = (char *)sub_1DB6E2588(a1, v33, 0, v21, v22, v23, v24, v25);
  if (!v34)
    return 4294967266;
  if (sub_1DB6E9E80((uint64_t)a2, v34, *(_QWORD *)(v5 + 24), v6))
  {
    if (*__error() == 12)
    {
      v26 = "Can't allocate memory for Linkname";
      goto LABEL_32;
    }
    v41 = (char *)sub_1DB72D0D4(v6);
    archive_set_error((_DWORD *)a1, 79, "Linkname can't be converted from %s to current locale.", v42, v43, v44, v45, v46, v41);
    v12 = 4294967276;
  }
  sub_1DB6E26F0(a1, *(_QWORD *)(v5 + 24), v35, v36, v37, v38, v39, v40);
  *(_QWORD *)(v5 + 24) = 0;
LABEL_20:
  if (v62 == 11 && !strncmp(v14, "TRAILER!!!", 0xBuLL))
  {
    archive_clear_error(a1);
    return 1;
  }
  if (archive_entry_nlink((uint64_t)a2) >= 2)
  {
    v47 = archive_entry_dev(a2);
    v48 = archive_entry_ino64((uint64_t)a2);
    v49 = v48;
    v50 = *(uint64_t **)(v5 + 16);
    if (v50)
    {
      while (*((_DWORD *)v50 + 5) != v47 || v50[3] != v48)
      {
        v50 = (uint64_t *)*v50;
        if (!v50)
          goto LABEL_27;
      }
      archive_entry_copy_hardlink((uint64_t)a2, (char *)v50[4]);
      v57 = *((_DWORD *)v50 + 4) - 1;
      *((_DWORD *)v50 + 4) = v57;
      if (!v57)
      {
        v58 = (uint64_t *)v50[1];
        if (v58)
          *v58 = *v50;
        v59 = *v50;
        if (*v50)
          *(_QWORD *)(v59 + 8) = v58;
        if (*(uint64_t **)(v5 + 16) == v50)
          *(_QWORD *)(v5 + 16) = v59;
        free((void *)v50[4]);
        free(v50);
      }
    }
    else
    {
LABEL_27:
      v51 = malloc_type_malloc(0x28uLL, 0x103004008A1EE6AuLL);
      if (!v51)
        goto LABEL_31;
      v52 = v51;
      v53 = *(_QWORD *)(v5 + 16);
      if (v53)
        *(_QWORD *)(v53 + 8) = v51;
      *v51 = v53;
      v51[1] = 0;
      *(_QWORD *)(v5 + 16) = v51;
      *((_DWORD *)v51 + 5) = v47;
      v51[3] = v49;
      *((_DWORD *)v51 + 4) = archive_entry_nlink((uint64_t)a2) - 1;
      v54 = (const char *)archive_entry_pathname(a2);
      v55 = strdup(v54);
      v52[4] = v55;
      if (!v55)
      {
LABEL_31:
        v26 = "Out of memory adding file to list";
        goto LABEL_32;
      }
    }
  }
  return v12;
}

uint64_t sub_1DB70DDC4(uint64_t a1, size_t *a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;

  v18 = 0;
  v12 = *(uint64_t ***)(a1 + 2472);
  v13 = *v12;
  v14 = (*v12)[4];
  if (v14)
  {
    sub_1DB6E26F0(a1, v14, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    v13[4] = 0;
  }
  if (v13[3] < 1)
  {
    v17 = v13[6];
    if (v17 == sub_1DB6E26F0(a1, v17, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      v13[6] = 0;
      *a2 = 0;
      *a3 = 0;
      *a4 = v13[5];
      return 1;
    }
    return 4294967266;
  }
  *a2 = sub_1DB6E2588(a1, 1uLL, &v18, (uint64_t)a4, a5, a6, a7, a8);
  v15 = v18;
  if (v18 < 1)
    return 4294967266;
  result = 0;
  if (v18 >= v13[3])
    v15 = v13[3];
  *a3 = v15;
  v13[4] = v15;
  *a4 = v13[5];
  v13[5] += v15;
  v13[3] -= v15;
  return result;
}

uint64_t sub_1DB70DEC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;

  v8 = **(_QWORD ***)(a1 + 2472);
  v9 = v8[6] + v8[3] + v8[4];
  if (v9 != sub_1DB6E26F0(a1, v9, a3, a4, a5, a6, a7, a8))
    return 4294967266;
  result = 0;
  v8[6] = 0;
  v8[3] = 0;
  v8[4] = 0;
  return result;
}

uint64_t sub_1DB70DF28(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t *a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  size_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  __int16 v49;
  __int16 v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  size_t v87;
  size_t v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  __int16 v96;
  __int16 v97;
  uint64_t v98;
  unint64_t v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  unint64_t v111;
  int v112;
  uint64_t v113;
  unint64_t v114;
  int v115;
  uint64_t v116;
  unint64_t v117;
  int v118;
  unint64_t v123;

  v123 = 0;
  *(_DWORD *)(a1 + 16) = 65537;
  *(_QWORD *)(a1 + 24) = "POSIX octet-oriented cpio";
  v10 = sub_1DB6E2588(a1, 0x4CuLL, &v123, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  if (!v10)
    return 4294967266;
  v17 = v10;
  v18 = 0;
  while (1)
  {
    v19 = v123;
    if (*(_DWORD *)v17 == 925906736 && *(_WORD *)(v17 + 4) == 14128)
    {
      v35 = 0;
      while (*(unsigned __int8 *)(v17 + v35) - 56 > 0xFFFFFFF7)
      {
        if (++v35 == 76)
          goto LABEL_46;
      }
    }
    v21 = *(_DWORD *)v17 == 925906736 && *(_WORD *)(v17 + 4) == 14130;
    if (v21 && sub_1DB70F2F4((_BYTE *)v17, v123))
    {
      v37 = 0;
      goto LABEL_48;
    }
    v22 = v17;
    if (v19 >= 76)
      break;
LABEL_14:
    v23 = v22 - v17;
    sub_1DB6E26F0(a1, v23, v11, v12, v13, v14, v15, v16);
    v18 += v23;
    v17 = sub_1DB6E2588(a1, 0x4CuLL, &v123, v24, v25, v26, v27, v28);
    if (!v17)
      return 4294967266;
  }
  v29 = v17 + v19;
  v22 = v17;
  while (1)
  {
    v30 = *(char *)(v22 + 5);
    if (v30 == 48)
    {
      v33 = 1;
      goto LABEL_32;
    }
    if (v30 != 55)
    {
      v33 = 6;
      goto LABEL_32;
    }
    if (*(_DWORD *)v22 == 925906736 && *(_WORD *)(v22 + 4) == 14128)
    {
      v34 = 0;
      while (*(unsigned __int8 *)(v22 + v34) - 56 > 0xFFFFFFF7)
      {
        if (++v34 == 76)
          goto LABEL_42;
      }
    }
    v32 = *(_DWORD *)v22 == 925906736 && *(_WORD *)(v22 + 4) == 14130;
    if (v32 && sub_1DB70F2F4((_BYTE *)v22, v29 - v22))
      break;
    v33 = 2;
LABEL_32:
    v22 += v33;
    if (v22 + 76 > v29)
      goto LABEL_14;
  }
LABEL_42:
  v36 = v22 - v17;
  sub_1DB6E26F0(a1, v36, v11, v12, v13, v14, v15, v16);
  if (*(_BYTE *)(v22 + 4) == 50)
    *(_DWORD *)(a1 + 16) = 65542;
  if (v36 + v18)
  {
    archive_set_error((_DWORD *)a1, 0, "Skipped %d bytes before finding valid header", v12, v13, v14, v15, v16, (char *)(v36 + v18));
    v37 = 4294967276;
    goto LABEL_47;
  }
LABEL_46:
  v37 = 0;
LABEL_47:
  if (*(_DWORD *)(a1 + 16) != 65542)
  {
    v87 = sub_1DB6E2588(a1, 0x4CuLL, 0, v12, v13, v14, v15, v16);
    if (v87)
    {
      v88 = v87;
      v89 = 0;
      v90 = 0;
      do
      {
        v91 = *(unsigned __int8 *)(v87 + 6 + v89);
        if ((v91 & 0xF8) != 0x30)
          break;
        v90 = (v91 - 48) | (8 * v90);
        ++v89;
      }
      while ((_DWORD)v89 != 6);
      archive_entry_set_dev(a3, v90);
      v92 = 0;
      v93 = 0;
      do
      {
        v94 = *(unsigned __int8 *)(v88 + 12 + v92);
        if ((v94 & 0xF8) != 0x30)
          break;
        v93 = (v94 - 48) | (8 * v93);
        ++v92;
      }
      while ((_DWORD)v92 != 6);
      archive_entry_set_ino((uint64_t)a3, v93);
      v95 = 0;
      v96 = 0;
      do
      {
        v97 = *(unsigned __int8 *)(v88 + 18 + v95);
        if ((v97 & 0xF8) != 0x30)
          break;
        v96 = (v97 - 48) | (8 * v96);
        ++v95;
      }
      while ((_DWORD)v95 != 6);
      archive_entry_set_mode((uint64_t)a3, v96);
      v98 = 0;
      v99 = 0;
      do
      {
        v100 = *(unsigned __int8 *)(v88 + 24 + v98);
        if ((v100 & 0xF8) != 0x30)
          break;
        v99 = (v100 - 48) | (8 * v99);
        ++v98;
      }
      while ((_DWORD)v98 != 6);
      archive_entry_set_uid((uint64_t)a3, v99);
      v101 = 0;
      v102 = 0;
      do
      {
        v103 = *(unsigned __int8 *)(v88 + 30 + v101);
        if ((v103 & 0xF8) != 0x30)
          break;
        v102 = (v103 - 48) | (8 * v102);
        ++v101;
      }
      while ((_DWORD)v101 != 6);
      archive_entry_set_gid((uint64_t)a3, v102);
      v104 = 0;
      v105 = 0;
      do
      {
        v106 = *(unsigned __int8 *)(v88 + 36 + v104);
        if ((v106 & 0xF8) != 0x30)
          break;
        v105 = (v106 - 48) | (8 * v105);
        ++v104;
      }
      while ((_DWORD)v104 != 6);
      archive_entry_set_nlink((uint64_t)a3, v105);
      v107 = 0;
      v108 = 0;
      do
      {
        v109 = *(unsigned __int8 *)(v88 + 42 + v107);
        if ((v109 & 0xF8) != 0x30)
          break;
        v108 = (v109 - 48) | (8 * v108);
        ++v107;
      }
      while ((_DWORD)v107 != 6);
      archive_entry_set_rdev(a3, v108);
      v110 = 0;
      v111 = 0;
      do
      {
        v112 = *(unsigned __int8 *)(v88 + 48 + v110);
        if ((v112 & 0xF8) != 0x30)
          break;
        v111 = (v112 - 48) | (8 * v111);
        ++v110;
      }
      while ((_DWORD)v110 != 11);
      archive_entry_set_mtime((uint64_t)a3, v111, 0);
      v113 = 0;
      v114 = 0;
      do
      {
        v115 = *(unsigned __int8 *)(v88 + 59 + v113);
        if ((v115 & 0xF8) != 0x30)
          break;
        v114 = (v115 - 48) | (8 * v114);
        ++v113;
      }
      while ((_DWORD)v113 != 6);
      v116 = 0;
      v117 = 0;
      *a4 = v114;
      *a5 = 0;
      do
      {
        v118 = *(unsigned __int8 *)(v88 + 65 + v116);
        if ((v118 & 0xF8) != 0x30)
          break;
        v117 = (v118 - 48) | (8 * v117);
        ++v116;
      }
      while ((_DWORD)v116 != 11);
      *(_QWORD *)(a2 + 24) = v117;
      archive_entry_set_size((uint64_t)a3, v117);
      *(_QWORD *)(a2 + 48) = 0;
      v85 = a1;
      v86 = 76;
      goto LABEL_139;
    }
    return 4294967266;
  }
LABEL_48:
  *(_DWORD *)(a1 + 16) = 65542;
  *(_QWORD *)(a1 + 24) = "afio large ASCII";
  v38 = sub_1DB6E2588(a1, 0x74uLL, 0, v12, v13, v14, v15, v16);
  if (!v38)
    return 4294967266;
  v39 = v38;
  v40 = 0;
  v41 = 0;
  do
  {
    v42 = *(char *)(v38 + 6 + v40);
    if ((v42 - 97) >= 6)
    {
      if ((v42 - 65) >= 6)
      {
        if ((v42 - 48) > 9)
          break;
        v43 = -48;
      }
      else
      {
        v43 = -55;
      }
    }
    else
    {
      v43 = -87;
    }
    v41 = (v43 + v42) | (16 * v41);
    ++v40;
  }
  while ((_DWORD)v40 != 8);
  archive_entry_set_dev(a3, v41);
  v44 = 0;
  v45 = 0;
  do
  {
    v46 = *(char *)(v39 + 14 + v44);
    v47 = -87;
    if ((v46 - 97) >= 6u)
    {
      v47 = -55;
      if ((v46 - 65) >= 6u)
      {
        v47 = -48;
        if ((v46 - 48) > 9u)
          break;
      }
    }
    v45 = (v47 + v46) | (16 * v45);
    ++v44;
  }
  while ((_DWORD)v44 != 16);
  archive_entry_set_ino((uint64_t)a3, v45);
  v48 = 0;
  v49 = 0;
  do
  {
    v50 = *(unsigned __int8 *)(v39 + 31 + v48);
    if ((v50 & 0xF8) != 0x30)
      break;
    v49 = (v50 - 48) | (8 * v49);
    ++v48;
  }
  while ((_DWORD)v48 != 6);
  archive_entry_set_mode((uint64_t)a3, v49);
  v51 = 0;
  v52 = 0;
  do
  {
    v53 = *(char *)(v39 + 37 + v51);
    v54 = -87;
    if ((v53 - 97) >= 6u)
    {
      v54 = -55;
      if ((v53 - 65) >= 6u)
      {
        v54 = -48;
        if ((v53 - 48) > 9u)
          break;
      }
    }
    v52 = (v54 + v53) | (16 * v52);
    ++v51;
  }
  while ((_DWORD)v51 != 8);
  archive_entry_set_uid((uint64_t)a3, v52);
  v55 = 0;
  v56 = 0;
  do
  {
    v57 = *(char *)(v39 + 45 + v55);
    v58 = -87;
    if ((v57 - 97) >= 6u)
    {
      v58 = -55;
      if ((v57 - 65) >= 6u)
      {
        v58 = -48;
        if ((v57 - 48) > 9u)
          break;
      }
    }
    v56 = (v58 + v57) | (16 * v56);
    ++v55;
  }
  while ((_DWORD)v55 != 8);
  archive_entry_set_gid((uint64_t)a3, v56);
  v59 = 0;
  v60 = 0;
  do
  {
    v61 = *(char *)(v39 + 53 + v59);
    if ((v61 - 97) >= 6)
    {
      if ((v61 - 65) >= 6)
      {
        if ((v61 - 48) > 9)
          break;
        v62 = -48;
      }
      else
      {
        v62 = -55;
      }
    }
    else
    {
      v62 = -87;
    }
    v60 = (v62 + v61) | (16 * v60);
    ++v59;
  }
  while ((_DWORD)v59 != 8);
  archive_entry_set_nlink((uint64_t)a3, v60);
  v63 = 0;
  v64 = 0;
  do
  {
    v65 = *(char *)(v39 + 61 + v63);
    if ((v65 - 97) >= 6)
    {
      if ((v65 - 65) >= 6)
      {
        if ((v65 - 48) > 9)
          break;
        v66 = -48;
      }
      else
      {
        v66 = -55;
      }
    }
    else
    {
      v66 = -87;
    }
    v64 = (v66 + v65) | (16 * v64);
    ++v63;
  }
  while ((_DWORD)v63 != 8);
  archive_entry_set_rdev(a3, v64);
  v67 = 0;
  v68 = 0;
  do
  {
    v69 = *(char *)(v39 + 69 + v67);
    v70 = -87;
    if ((v69 - 97) >= 6u)
    {
      v70 = -55;
      if ((v69 - 65) >= 6u)
      {
        v70 = -48;
        if ((v69 - 48) > 9u)
          break;
      }
    }
    v68 = (v70 + v69) | (16 * v68);
    ++v67;
  }
  while ((_DWORD)v67 != 16);
  archive_entry_set_mtime((uint64_t)a3, v68, 0);
  v71 = 0;
  v72 = 0;
  do
  {
    v73 = *(char *)(v39 + 86 + v71);
    v74 = -87;
    if ((v73 - 97) >= 6u)
    {
      v74 = -55;
      if ((v73 - 65) >= 6u)
      {
        v74 = -48;
        if ((v73 - 48) > 9u)
          break;
      }
    }
    v72 = (v74 + v73) | (16 * v72);
    ++v71;
  }
  while ((_DWORD)v71 != 4);
  v75 = 0;
  v76 = 0;
  *a4 = v72;
  *a5 = 0;
  do
  {
    v77 = *(char *)(v39 + 99 + v75);
    v78 = -87;
    if ((v77 - 97) >= 6u)
    {
      v78 = -55;
      if ((v77 - 65) >= 6u)
      {
        v78 = -48;
        if ((v77 - 48) > 9u)
          break;
      }
    }
    v76 = (v78 + v77) | (16 * v76);
    ++v75;
  }
  while ((_DWORD)v75 != 16);
  *(_QWORD *)(a2 + 24) = v76;
  archive_entry_set_size((uint64_t)a3, v76);
  *(_QWORD *)(a2 + 48) = 0;
  v85 = a1;
  v86 = 116;
LABEL_139:
  sub_1DB6E26F0(v85, v86, v79, v80, v81, v82, v83, v84);
  return v37;
}

uint64_t sub_1DB70E808(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t *a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t i;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  size_t v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  size_t v40;
  uint64_t v41;
  size_t v42;
  size_t v43;
  int v44;
  const char *v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  __int16 v61;
  __int16 v62;
  __int16 v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v99;
  unint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v111;

  v111 = 0;
  v12 = sub_1DB6E2588(a1, 0x6EuLL, &v111, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  if (v12)
  {
    v19 = 0;
    while (1)
    {
      v20 = *(_DWORD *)v12 == 925906736 && *(_BYTE *)(v12 + 4) == 48;
      if (v20 && *(unsigned __int8 *)(v12 + 5) - 49 <= 1)
        break;
LABEL_17:
      v26 = v12;
      if (v111 >= 110)
      {
        v26 = v12;
        do
        {
          v33 = *(char *)(v26 + 5);
          if ((v33 - 49) >= 2)
          {
            if (v33 == 48)
              v35 = 1;
            else
              v35 = 6;
          }
          else
          {
            if (*(_DWORD *)v26 == 925906736 && *(_BYTE *)(v26 + 4) == 48)
            {
              v36 = 0;
              while (1)
              {
                if ((*(_BYTE *)(v26 + v36) - 48) >= 0xAu)
                {
                  v37 = *(unsigned __int8 *)(v26 + v36) - 65;
                  v23 = v37 > 0x25;
                  v38 = (1 << v37) & 0x3F0000003FLL;
                  if (v23 || v38 == 0)
                    break;
                }
                if (++v36 == 110)
                {
                  v40 = v26 - v12;
                  sub_1DB6E26F0(a1, v26 - v12, v13, v14, v15, v16, v17, v18);
                  if (!(v40 + v19))
                    goto LABEL_41;
                  archive_set_error((_DWORD *)a1, 0, "Skipped %d bytes before finding valid header", v14, v15, v16, v17, v18, (char *)(v40 + v19));
                  v41 = 4294967276;
                  goto LABEL_42;
                }
              }
            }
            v35 = 2;
          }
          v26 += v35;
        }
        while (v26 + 110 <= v12 + v111);
      }
      v27 = v26 - v12;
      sub_1DB6E26F0(a1, v26 - v12, v13, v14, v15, v16, v17, v18);
      v19 += v27;
      v12 = sub_1DB6E2588(a1, 0x6EuLL, &v111, v28, v29, v30, v31, v32);
      if (!v12)
        return 4294967266;
    }
    for (i = 0; i != 110; ++i)
    {
      if ((*(_BYTE *)(v12 + i) - 48) >= 0xAu)
      {
        v22 = *(unsigned __int8 *)(v12 + i) - 65;
        v23 = v22 > 0x25;
        v24 = (1 << v22) & 0x3F0000003FLL;
        if (v23 || v24 == 0)
          goto LABEL_17;
      }
    }
LABEL_41:
    v41 = 0;
LABEL_42:
    v42 = sub_1DB6E2588(a1, 0x6EuLL, 0, v14, v15, v16, v17, v18);
    if (!v42)
      return 4294967266;
    v43 = v42;
    v44 = 65540;
    if (*(_DWORD *)v42 == 925906736 && *(_WORD *)(v42 + 4) == 12592)
    {
      v47 = "ASCII cpio (SVR4 with no CRC)";
    }
    else
    {
      if (*(_DWORD *)v42 != 925906736 || *(_WORD *)(v42 + 4) != 12848)
      {
LABEL_55:
        v48 = 0;
        v49 = 0;
        do
        {
          v50 = *(char *)(v42 + 62 + v48);
          if ((v50 - 97) >= 6)
          {
            if ((v50 - 65) >= 6)
            {
              if ((v50 - 48) > 9)
                break;
              v51 = -48;
            }
            else
            {
              v51 = -55;
            }
          }
          else
          {
            v51 = -87;
          }
          v49 = (v51 + v50) | (16 * v49);
          ++v48;
        }
        while ((_DWORD)v48 != 8);
        archive_entry_set_devmajor(a3, v49);
        v52 = 0;
        v53 = 0;
        do
        {
          v54 = *(char *)(v43 + 70 + v52);
          if ((v54 - 97) >= 6)
          {
            if ((v54 - 65) >= 6)
            {
              if ((v54 - 48) > 9)
                break;
              v55 = -48;
            }
            else
            {
              v55 = -55;
            }
          }
          else
          {
            v55 = -87;
          }
          v53 = (v55 + v54) | (16 * v53);
          ++v52;
        }
        while ((_DWORD)v52 != 8);
        archive_entry_set_devminor(a3, v53);
        v56 = 0;
        v57 = 0;
        do
        {
          v58 = *(char *)(v43 + 6 + v56);
          v59 = -87;
          if ((v58 - 97) >= 6u)
          {
            if ((v58 - 65) >= 6u)
            {
              if ((v58 - 48) > 9u)
                break;
              v59 = -48;
            }
            else
            {
              v59 = -55;
            }
          }
          v57 = (v59 + v58) | (16 * v57);
          ++v56;
        }
        while ((_DWORD)v56 != 8);
        archive_entry_set_ino((uint64_t)a3, v57);
        v60 = 0;
        v61 = 0;
        do
        {
          v62 = *(char *)(v43 + 14 + v60);
          v63 = -87;
          if ((v62 - 97) >= 6u)
          {
            if ((v62 - 65) >= 6u)
            {
              if ((v62 - 48) > 9u)
                break;
              v63 = -48;
            }
            else
            {
              v63 = -55;
            }
          }
          v61 = (v63 + v62) | (16 * v61);
          ++v60;
        }
        while ((_DWORD)v60 != 8);
        archive_entry_set_mode((uint64_t)a3, v61);
        v64 = 0;
        v65 = 0;
        do
        {
          v66 = *(char *)(v43 + 22 + v64);
          v67 = -87;
          if ((v66 - 97) >= 6u)
          {
            if ((v66 - 65) >= 6u)
            {
              if ((v66 - 48) > 9u)
                break;
              v67 = -48;
            }
            else
            {
              v67 = -55;
            }
          }
          v65 = (v67 + v66) | (16 * v65);
          ++v64;
        }
        while ((_DWORD)v64 != 8);
        archive_entry_set_uid((uint64_t)a3, v65);
        v68 = 0;
        v69 = 0;
        do
        {
          v70 = *(char *)(v43 + 30 + v68);
          v71 = -87;
          if ((v70 - 97) >= 6u)
          {
            if ((v70 - 65) >= 6u)
            {
              if ((v70 - 48) > 9u)
                break;
              v71 = -48;
            }
            else
            {
              v71 = -55;
            }
          }
          v69 = (v71 + v70) | (16 * v69);
          ++v68;
        }
        while ((_DWORD)v68 != 8);
        archive_entry_set_gid((uint64_t)a3, v69);
        v72 = 0;
        v73 = 0;
        do
        {
          v74 = *(char *)(v43 + 38 + v72);
          if ((v74 - 97) >= 6)
          {
            if ((v74 - 65) >= 6)
            {
              if ((v74 - 48) > 9)
                break;
              v75 = -48;
            }
            else
            {
              v75 = -55;
            }
          }
          else
          {
            v75 = -87;
          }
          v73 = (v75 + v74) | (16 * v73);
          ++v72;
        }
        while ((_DWORD)v72 != 8);
        archive_entry_set_nlink((uint64_t)a3, v73);
        v76 = 0;
        v77 = 0;
        do
        {
          v78 = *(char *)(v43 + 78 + v76);
          if ((v78 - 97) >= 6)
          {
            if ((v78 - 65) >= 6)
            {
              if ((v78 - 48) > 9)
                break;
              v79 = -48;
            }
            else
            {
              v79 = -55;
            }
          }
          else
          {
            v79 = -87;
          }
          v77 = (v79 + v78) | (16 * v77);
          ++v76;
        }
        while ((_DWORD)v76 != 8);
        archive_entry_set_rdevmajor(a3, v77);
        v80 = 0;
        v81 = 0;
        do
        {
          v82 = *(char *)(v43 + 86 + v80);
          if ((v82 - 97) >= 6)
          {
            if ((v82 - 65) >= 6)
            {
              if ((v82 - 48) > 9)
                break;
              v83 = -48;
            }
            else
            {
              v83 = -55;
            }
          }
          else
          {
            v83 = -87;
          }
          v81 = (v83 + v82) | (16 * v81);
          ++v80;
        }
        while ((_DWORD)v80 != 8);
        archive_entry_set_rdevminor(a3, v81);
        v84 = 0;
        v85 = 0;
        do
        {
          v86 = *(char *)(v43 + 46 + v84);
          v87 = -87;
          if ((v86 - 97) >= 6u)
          {
            if ((v86 - 65) >= 6u)
            {
              if ((v86 - 48) > 9u)
                break;
              v87 = -48;
            }
            else
            {
              v87 = -55;
            }
          }
          v85 = (v87 + v86) | (16 * v85);
          ++v84;
        }
        while ((_DWORD)v84 != 8);
        archive_entry_set_mtime((uint64_t)a3, v85, 0);
        v93 = 0;
        v94 = 0;
        do
        {
          v95 = *(char *)(v43 + 94 + v93);
          v96 = -87;
          if ((v95 - 97) >= 6u)
          {
            if ((v95 - 65) >= 6u)
            {
              if ((v95 - 48) > 9u)
                break;
              v96 = -48;
            }
            else
            {
              v96 = -55;
            }
          }
          v94 = (v96 + v95) | (16 * v94);
          ++v93;
        }
        while ((_DWORD)v93 != 8);
        *a4 = v94;
        v97 = (2 - (_BYTE)v94) & 3;
        *a5 = v97;
        if (__CFADD__(*a4, v97))
        {
          archive_set_error((_DWORD *)a1, 79, "cpio archive has invalid namelength", v88, v89, v90, v91, v92, v109);
          return 4294967266;
        }
        v99 = 0;
        v100 = 0;
        do
        {
          v101 = *(char *)(v43 + 54 + v99);
          v102 = -87;
          if ((v101 - 97) >= 6u)
          {
            if ((v101 - 65) >= 6u)
            {
              if ((v101 - 48) > 9u)
                break;
              v102 = -48;
            }
            else
            {
              v102 = -55;
            }
          }
          v100 = (v102 + v101) | (16 * v100);
          ++v99;
        }
        while ((_DWORD)v99 != 8);
        *(_QWORD *)(a2 + 24) = v100;
        archive_entry_set_size((uint64_t)a3, v100);
        *(_QWORD *)(a2 + 48) = -*(_DWORD *)(a2 + 24) & 3;
        sub_1DB6E26F0(a1, 110, v103, v104, v105, v106, v107, v108);
        return v41;
      }
      v44 = 65541;
      v47 = "ASCII cpio (SVR4 with CRC)";
    }
    *(_DWORD *)(a1 + 16) = v44;
    *(_QWORD *)(a1 + 24) = v47;
    goto LABEL_55;
  }
  return 4294967266;
}

uint64_t sub_1DB70EFB4(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  __int16 v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v31;

  *(_DWORD *)(a1 + 16) = 65539;
  *(_QWORD *)(a1 + 24) = "cpio (big-endian binary)";
  v13 = sub_1DB6E2588(a1, 0x1AuLL, 0, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  if (v13)
  {
    v19 = v13;
    archive_entry_set_dev(a3, __rev16(*(unsigned __int16 *)(v13 + 2)));
    archive_entry_set_ino((uint64_t)a3, __rev16(*(unsigned __int16 *)(v19 + 4)));
    archive_entry_set_mode((uint64_t)a3, bswap32(*(unsigned __int16 *)(v19 + 6)) >> 16);
    if (*(_DWORD *)(a2 + 76))
    {
      v20 = archive_entry_mode((uint64_t)a3);
      archive_entry_set_mode((uint64_t)a3, v20 & 0x6FFF);
      if (archive_entry_mode((uint64_t)a3) <= 0xFFF)
      {
        v21 = archive_entry_mode((uint64_t)a3);
        archive_entry_set_mode((uint64_t)a3, v21 | 0x8000);
      }
    }
    archive_entry_set_uid((uint64_t)a3, __rev16(*(unsigned __int16 *)(v19 + 8)));
    archive_entry_set_gid((uint64_t)a3, __rev16(*(unsigned __int16 *)(v19 + 10)));
    archive_entry_set_nlink((uint64_t)a3, __rev16(*(unsigned __int16 *)(v19 + 12)));
    archive_entry_set_rdev(a3, __rev16(*(unsigned __int16 *)(v19 + 14)));
    archive_entry_set_mtime((uint64_t)a3, bswap32(*(_DWORD *)(v19 + 16)), 0);
    v22 = *(unsigned __int8 *)(v19 + 21);
    *a4 = v22 | ((unint64_t)*(unsigned __int8 *)(v19 + 20) << 8);
    *a5 = v22 & 1;
    v23 = bswap32(*(_DWORD *)(v19 + 22));
    *(_QWORD *)(a2 + 24) = v23;
    archive_entry_set_size((uint64_t)a3, v23);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a2 + 24) & 1;
    sub_1DB6E26F0(a1, 26, v24, v25, v26, v27, v28, v29);
    return 0;
  }
  else
  {
    archive_set_error((_DWORD *)a1, 0, "End of file trying to read next cpio header", v14, v15, v16, v17, v18, v31);
    return 4294967266;
  }
}

uint64_t sub_1DB70F14C(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  __int16 v20;
  __int16 v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v31;

  *(_DWORD *)(a1 + 16) = 65538;
  *(_QWORD *)(a1 + 24) = "cpio (little-endian binary)";
  v13 = sub_1DB6E2588(a1, 0x1AuLL, 0, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  if (v13)
  {
    v19 = v13;
    archive_entry_set_dev(a3, *(unsigned __int16 *)(v13 + 2));
    archive_entry_set_ino((uint64_t)a3, *(unsigned __int16 *)(v19 + 4));
    archive_entry_set_mode((uint64_t)a3, *(_WORD *)(v19 + 6));
    if (*(_DWORD *)(a2 + 76))
    {
      v20 = archive_entry_mode((uint64_t)a3);
      archive_entry_set_mode((uint64_t)a3, v20 & 0x6FFF);
      if (archive_entry_mode((uint64_t)a3) <= 0xFFF)
      {
        v21 = archive_entry_mode((uint64_t)a3);
        archive_entry_set_mode((uint64_t)a3, v21 | 0x8000);
      }
    }
    archive_entry_set_uid((uint64_t)a3, *(unsigned __int16 *)(v19 + 8));
    archive_entry_set_gid((uint64_t)a3, *(unsigned __int16 *)(v19 + 10));
    archive_entry_set_nlink((uint64_t)a3, *(unsigned __int16 *)(v19 + 12));
    archive_entry_set_rdev(a3, *(unsigned __int16 *)(v19 + 14));
    archive_entry_set_mtime((uint64_t)a3, ((unint64_t)*(unsigned __int8 *)(v19 + 16) << 16) | ((unint64_t)*(unsigned __int8 *)(v19 + 17) << 24) | *(unsigned __int8 *)(v19 + 18) | ((unint64_t)*(unsigned __int8 *)(v19 + 19) << 8), 0);
    v22 = *(unsigned __int8 *)(v19 + 20);
    *a4 = v22 | ((unint64_t)*(unsigned __int8 *)(v19 + 21) << 8);
    *a5 = v22 & 1;
    v23 = ((unint64_t)*(unsigned __int8 *)(v19 + 22) << 16) | ((unint64_t)*(unsigned __int8 *)(v19 + 23) << 24) | *(unsigned __int8 *)(v19 + 24) | ((unint64_t)*(unsigned __int8 *)(v19 + 25) << 8);
    *(_QWORD *)(a2 + 24) = v23;
    archive_entry_set_size((uint64_t)a3, v23);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a2 + 24) & 1;
    sub_1DB6E26F0(a1, 26, v24, v25, v26, v27, v28, v29);
    return 0;
  }
  else
  {
    archive_set_error((_DWORD *)a1, 0, "End of file trying to read next cpio header", v14, v15, v16, v17, v18, v31);
    return 4294967266;
  }
}

uint64_t sub_1DB70F2F4(_BYTE *a1, unint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE *v16;
  uint64_t result;
  unsigned int v18;
  uint64_t v19;

  if (a2 >= 0x74 && a1[30] == 109 && a1[85] == 110 && a1[98] == 115 && a1[115] == 58)
  {
    v2 = 6;
    while (1)
    {
      if ((a1[v2] - 48) >= 0xAu)
      {
        v3 = a1[v2] - 65;
        v4 = v3 > 0x25;
        v5 = (1 << v3) & 0x3F0000003FLL;
        if (v4 || v5 == 0)
          break;
      }
      if (++v2 == 30)
      {
        v7 = 0;
        while (1)
        {
          if ((a1[v7 + 31] - 48) >= 0xAu)
          {
            v8 = a1[v7 + 31] - 65;
            v4 = v8 > 0x25;
            v9 = (1 << v8) & 0x3F0000003FLL;
            if (v4 || v9 == 0)
              break;
          }
          if (++v7 == 54)
          {
            v11 = 0;
            while (1)
            {
              if ((a1[v11 + 86] - 48) >= 0xAu)
              {
                v12 = a1[v11 + 86] - 65;
                v4 = v12 > 0x25;
                v13 = (1 << v12) & 0x3F0000003FLL;
                if (v4 || v13 == 0)
                  break;
              }
              if (++v11 == 12)
              {
                v15 = 0;
                v16 = a1 + 99;
                result = 1;
                while (1)
                {
                  if ((v16[v15] - 48) >= 0xAu)
                  {
                    v18 = v16[v15] - 65;
                    v4 = v18 > 0x25;
                    v19 = (1 << v18) & 0x3F0000003FLL;
                    if (v4 || v19 == 0)
                      break;
                  }
                  if (++v15 == 16)
                    return result;
                }
                return 0;
              }
            }
            return 0;
          }
        }
        return 0;
      }
    }
  }
  return 0;
}

uint64_t sub_1DB70F458(uint64_t result)
{
  unint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  int v8;
  int v9;

  v1 = 0;
  v2 = 0;
  *(_QWORD *)(result + 56) = 0;
  do
  {
    if (v1 <= 0xB)
      v3 = (v1 >> 2) + 1;
    else
      v3 = 4;
    do
    {
      v4 = result + v2++;
      *(_BYTE *)(v4 + 166) = v1;
      --v3;
    }
    while (v3);
    *(_BYTE *)(result + v1++ + 128) = v2;
  }
  while (v1 != 38);
  v5 = 0;
  *(_WORD *)(result + 600) = 512;
  *(_QWORD *)(result + 602) = 0x404040404040404;
  *(_BYTE *)(result + 610) = 4;
  *(_QWORD *)(result + 848) = 0x606060606060606;
  *(_QWORD *)&v6 = 0x606060606060606;
  *((_QWORD *)&v6 + 1) = 0x606060606060606;
  *(_OWORD *)(result + 611) = v6;
  *(_OWORD *)(result + 627) = v6;
  *(_OWORD *)(result + 643) = v6;
  *(_OWORD *)(result + 659) = v6;
  *(_OWORD *)(result + 675) = v6;
  *(_OWORD *)(result + 691) = v6;
  *(_OWORD *)(result + 707) = v6;
  *(_OWORD *)(result + 723) = v6;
  *(_OWORD *)(result + 739) = v6;
  *(_OWORD *)(result + 755) = v6;
  *(_OWORD *)(result + 771) = v6;
  *(_OWORD *)(result + 787) = v6;
  *(_OWORD *)(result + 803) = v6;
  *(_OWORD *)(result + 819) = v6;
  *(_OWORD *)(result + 835) = v6;
  do
  {
    *(_BYTE *)(result + 856 + v5) = v5;
    ++v5;
  }
  while (v5 != 5);
  v7 = 0;
  v8 = 1;
  v9 = 5;
  do
  {
    *(_BYTE *)(result + 861 + v7) = v9;
    if (!--v8)
    {
      v8 = v9 - 3;
      ++v9;
    }
    ++v7;
  }
  while (v7 != 255);
  return result;
}

void sub_1DB70F548(uint64_t a1)
{
  free(*(void **)(a1 + 56));
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
}

uint64_t sub_1DB70F574(uint64_t a1, int a2)
{
  void *v4;
  int v5;
  uint64_t result;

  v4 = *(void **)(a1 + 56);
  if (!v4 || *(_DWORD *)(a1 + 48) != a2)
  {
    free(v4);
    *(_DWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    v5 = 4 - (a2 & 3);
    *(_DWORD *)(a1 + 96) = v5;
    result = (uint64_t)malloc_type_malloc((v5 + a2), 0x26C0C9AEuLL);
    *(_QWORD *)(a1 + 56) = result;
    if (!result)
      return result;
    *(_DWORD *)(a1 + 48) = a2;
  }
  return 1;
}

uint64_t sub_1DB70F5E4(_DWORD *a1, int a2, int a3)
{
  uint64_t result;

  a1[9] = a2;
  a1[25] = a3;
  result = sub_1DB70F614((uint64_t)a1);
  a1[279] = 1074200576;
  return result;
}

uint64_t sub_1DB70F614(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;

  v1 = 0;
  *(_QWORD *)(result + 440) = 0;
  *(_OWORD *)(result + 408) = 0u;
  *(_OWORD *)(result + 424) = 0u;
  *(_OWORD *)(result + 376) = 0u;
  *(_OWORD *)(result + 392) = 0u;
  *(_OWORD *)(result + 344) = 0u;
  *(_OWORD *)(result + 360) = 0u;
  *(_OWORD *)(result + 312) = 0u;
  *(_OWORD *)(result + 328) = 0u;
  *(_OWORD *)(result + 296) = 0u;
  *(_OWORD *)(result + 448) = 0u;
  *(_OWORD *)(result + 464) = 0u;
  *(_OWORD *)(result + 480) = 0u;
  *(_OWORD *)(result + 496) = 0u;
  *(_OWORD *)(result + 512) = 0u;
  *(_OWORD *)(result + 528) = 0u;
  *(_OWORD *)(result + 544) = 0u;
  *(_OWORD *)(result + 560) = 0u;
  *(_OWORD *)(result + 576) = 0u;
  *(_QWORD *)(result + 592) = 0;
  v2 = *(_QWORD *)(result + 56);
  v3 = *(unsigned int *)(result + 96);
  v4 = *(unsigned int *)(result + 48);
  v5 = v2 + v3 + v4;
  v6 = 84 * (v4 / 0x60);
  v7 = v5 - v6;
  *(_QWORD *)(result + 80) = v2 + v3;
  *(_QWORD *)(result + 88) = v5 - v6;
  *(_DWORD *)(result + 52) = 0;
  v8 = *(_DWORD *)(result + 36);
  *(_DWORD *)(result + 24) = v8;
  if (v8 >= 0xC)
    v8 = 12;
  v9 = ~v8;
  *(_DWORD *)(result + 40) = v9;
  *(_DWORD *)(result + 44) = v9;
  *(_DWORD *)(result + 32) = 0;
  *(_DWORD *)(v5 - 12) = 16843007;
  *(_DWORD *)(v5 - 8) = v7 - v2;
  *(_DWORD *)(v5 - 4) = 0;
  *(_QWORD *)result = v5 - 12;
  *(_QWORD *)(result + 8) = v5 - 12;
  *(_QWORD *)(result + 16) = v7;
  v10 = (_DWORD *)(v4 + v3 - v6 + v2 + 2);
  *(_QWORD *)(result + 64) = v7 + 1536;
  *(_QWORD *)(result + 72) = v5 - 12;
  do
  {
    *((_BYTE *)v10 - 2) = v1;
    *((_BYTE *)v10 - 1) = 1;
    *v10 = 0;
    v10 = (_DWORD *)((char *)v10 + 6);
    ++v1;
  }
  while (v1 != 256);
  v11 = 0;
  v12 = 0;
  v13 = result + 4192;
  do
  {
    v14 = v12;
    do
      v15 = *(unsigned __int8 *)(result + v14++ + 856);
    while (v11 == v15);
    v16 = 0;
    v12 = v14 - 1;
    v17 = v13;
    do
    {
      v18 = 0;
      v19 = 0x4000 - word_1DB74CABC[v16] / v14;
      do
      {
        *(_WORD *)(v17 + 2 * v18) = v19;
        v20 = v18 >= 0x38;
        v18 += 8;
      }
      while (!v20);
      ++v16;
      v17 += 2;
    }
    while (v16 != 8);
    ++v11;
    v13 += 128;
  }
  while (v11 != 25);
  v21 = 0;
  v22 = 0;
  v23 = result;
  do
  {
    --v22;
    do
    {
      v24 = *(unsigned __int8 *)(result + (v22 + 4) + 856);
      ++v22;
    }
    while (v21 + 3 == v24);
    for (i = 0; i != 128; i += 4)
    {
      v26 = v23 + i;
      *(_WORD *)(v26 + 1122) = 1795;
      *(_WORD *)(v26 + 1120) = 16 * v22 + 40;
    }
    ++v21;
    v23 += 128;
  }
  while (v21 != 24);
  return result;
}

char *sub_1DB70F7E8(unsigned __int8 **a1, int a2, int *a3)
{
  uint64_t v3;
  unint64_t v4;
  char *result;
  unsigned int v6;
  int v7;
  int v8;

  v3 = **a1;
  if ((_DWORD)v3 == 255)
  {
    result = (char *)a1 + 1116;
    v8 = 1;
  }
  else
  {
    v4 = (unint64_t)&(&a1[16 * (unint64_t)(*((unsigned __int8 *)a1 + v3 + 858) - 3)])[a1[7][*((unsigned int *)*a1 + 2)] + a2 > 2 * (int)v3]
       + 4 * (11 * (int)v3 + 11 < *((unsigned __int16 *)*a1 + 1))
       + 4 * (*a1)[1];
    result = (char *)(v4 + 1120);
    v6 = *(unsigned __int16 *)(v4 + 1120);
    v7 = v6 >> *(_BYTE *)(v4 + 1122);
    *(_WORD *)(v4 + 1120) = v6 - v7;
    if (v7)
      v8 = v7;
    else
      v8 = 1;
  }
  *a3 = v8;
  return result;
}

uint64_t sub_1DB70F87C(unsigned __int8 *a1)
{
  int *v2;
  unsigned __int8 v3;
  __int16 v4;
  int v5;

  v2 = (int *)*((_QWORD *)a1 + 2);
  v3 = *((_BYTE *)v2 + 1) + 4;
  *((_BYTE *)v2 + 1) = v3;
  *(_WORD *)(*(_QWORD *)a1 + 2) += 4;
  if (*((unsigned __int8 *)v2 - 5) < v3)
  {
    v4 = *((_WORD *)v2 + 2);
    v5 = *v2;
    *v2 = *(int *)((char *)v2 - 6);
    *((_WORD *)v2 + 2) = *((_WORD *)v2 - 1);
    *(int *)((char *)v2 - 6) = v5;
    *((_WORD *)v2 - 1) = v4;
    *((_QWORD *)a1 + 2) = (char *)v2 - 6;
    if (*((unsigned __int8 *)v2 - 5) >= 0x7Du)
      sub_1DB70F90C(a1);
  }
  return sub_1DB70FBE4((uint64_t)a1);
}

unsigned __int8 *sub_1DB70F90C(unsigned __int8 *result)
{
  _QWORD *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  _BOOL4 v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned __int8 v21;
  int v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  int v30;
  uint64_t v31;
  int v32;
  unsigned __int8 v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  char *v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  __int16 v45;

  v1 = result;
  v2 = (unsigned __int8 *)(*((_QWORD *)result + 7) + *(unsigned int *)(*(_QWORD *)result + 4));
  v3 = (unsigned __int8 *)*((_QWORD *)result + 2);
  v44 = *(_DWORD *)v3;
  v45 = *((_WORD *)v3 + 2);
  if (v3 != v2)
  {
    v4 = (unsigned __int8 *)*((_QWORD *)result + 2);
    do
    {
      v5 = *(_DWORD *)(v4 - 6);
      v4 -= 6;
      *(_DWORD *)v3 = v5;
      *((_WORD *)v3 + 2) = *((_WORD *)v3 - 1);
      v3 = v4;
    }
    while (v4 != v2);
  }
  v6 = 0;
  *(_DWORD *)v2 = v44;
  *((_WORD *)v2 + 2) = v45;
  v7 = *(unsigned __int8 **)result;
  v8 = v2[1];
  v9 = *(unsigned __int16 *)(*(_QWORD *)result + 2) - v8;
  v10 = *((_DWORD *)result + 6);
  v11 = v10 == 0;
  v12 = v10 != 0;
  v13 = (v8 + 4);
  if (!v11)
    ++v13;
  v14 = v13 >> 1;
  v2[1] = v13 >> 1;
  v15 = *v7;
  v16 = v2;
  do
  {
    v17 = v16;
    v18 = v16[7];
    v19 = v18 + v12;
    v20 = (v18 + v12) >> 1;
    v17[7] = v20;
    if (v20 > v17[1])
    {
      v21 = v17[6];
      v22 = *((_DWORD *)v17 + 2);
      v23 = v6;
      while (1)
      {
        v24 = &v2[v23];
        *(_DWORD *)(v24 + 6) = *(_DWORD *)&v2[v23];
        *((_WORD *)v24 + 5) = *(_WORD *)&v2[v23 + 4];
        if (!v23)
          break;
        v23 -= 6;
        if (*(v24 - 5) >= v19 >> 1)
        {
          result = &v2[v23 + 6];
          goto LABEL_13;
        }
      }
      result = v2;
LABEL_13:
      *result = v21;
      v24[1] = v20;
      *(_DWORD *)(v24 + 2) = v22;
    }
    v16 = v17 + 6;
    v9 -= v18;
    v14 += v19 >> 1;
    v6 += 6;
    --v15;
  }
  while (v15);
  v25 = (unsigned __int8 *)*v1;
  if (v17[7])
  {
    v26 = v25[1];
    v27 = v1[7];
    v28 = *((unsigned int *)v25 + 1);
LABEL_29:
    *((_WORD *)v25 + 1) = v9 + v14 - (v9 >> 1);
    v25[1] = v26 | 4;
    v1[2] = v27 + v28;
    return result;
  }
  v29 = 0;
  v30 = *v25;
  v31 = -5;
  do
  {
    ++v29;
    v32 = v16[v31];
    ++v9;
    v31 -= 6;
  }
  while (!v32);
  v33 = v30 - v29;
  *v25 = v30 - v29;
  if (v30 != v29)
  {
    v39 = (v30 - v29);
    v40 = (v30 + 2) >> 1;
    v41 = v33 + 2;
    if (v40 == v41 >> 1)
    {
      v27 = v1[7];
      v42 = *((_DWORD *)v25 + 1);
    }
    else
    {
      result = (unsigned __int8 *)sub_1DB710848((uint64_t)v1, v2, v40, v41 >> 1);
      v27 = v1[7];
      v42 = (_DWORD)result - v27;
      v25 = (unsigned __int8 *)*v1;
      *((_DWORD *)v25 + 1) = (_DWORD)result - v27;
      v39 = *v25;
    }
    v28 = v42;
    v26 = v25[1] & 0xF7 | (8 * (*(unsigned __int8 *)(v27 + v42) > 0x3Fu));
    v43 = v42 + 6;
    do
    {
      v26 |= 8 * (*(unsigned __int8 *)(v27 + v43) > 0x3Fu);
      v43 += 6;
      --v39;
    }
    while (v39);
    v25[1] = v26;
    goto LABEL_29;
  }
  v34 = *v2;
  v35 = *(_DWORD *)(v2 + 2);
  v36 = (v9 + 2 * v2[1] - 1) / v9;
  if ((v36 & 0xFE) > 0x29)
    LOBYTE(v36) = 41;
  v37 = *((unsigned __int8 *)v1 + ((v30 + 2) >> 1) + 165);
  *(_DWORD *)v2 = -1;
  v38 = (char *)v1 + 4 * v37;
  *((_DWORD *)v2 + 1) = *((_DWORD *)v38 + 74);
  *((_DWORD *)v2 + 2) = *((unsigned __int8 *)v1 + v37 + 128);
  *((_DWORD *)v38 + 74) = (_DWORD)v2 - *((_DWORD *)v1 + 14);
  ++*((_DWORD *)v38 + 112);
  v25[1] = v25[1] & 0x10 | (8 * (v34 > 0x3F));
  v1[2] = v25 + 2;
  v25[2] = v34;
  v25[3] = v36;
  *((_DWORD *)v25 + 1) = v35;
  return result;
}

uint64_t sub_1DB70FBE4(uint64_t result)
{
  _QWORD *v1;
  unint64_t v2;

  v1 = (_QWORD *)result;
  if (*(_DWORD *)(result + 24)
    || (v2 = *(_QWORD *)(result + 56) + *(unsigned int *)(*(_QWORD *)(result + 16) + 2), v2 < *(_QWORD *)(result + 88)))
  {
    result = sub_1DB70FD10(result);
    v2 = v1[1];
  }
  else
  {
    *(_QWORD *)(result + 8) = v2;
  }
  *v1 = v2;
  return result;
}

uint64_t sub_1DB70FC3C(unsigned __int8 *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned __int8 v7;

  v2 = *((_QWORD *)a1 + 2);
  v3 = *(unsigned __int8 *)(v2 + 1);
  v4 = *(_QWORD *)a1;
  v5 = *(unsigned __int16 *)(*(_QWORD *)a1 + 2);
  *((_DWORD *)a1 + 8) = v5 <= 2 * v3;
  v6 = *((_DWORD *)a1 + 10);
  if (v5 <= 2 * v3)
    ++v6;
  *((_DWORD *)a1 + 10) = v6;
  *(_WORD *)(v4 + 2) = v5 + 4;
  v7 = v3 + 4;
  *(_BYTE *)(v2 + 1) = v7;
  if (v7 >= 0x7Du)
    sub_1DB70F90C(a1);
  return sub_1DB70FBE4((uint64_t)a1);
}

uint64_t sub_1DB70FCA8(unsigned __int8 *a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t result;

  *(_WORD *)(*(_QWORD *)a1 + 2) += 4;
  v2 = *((_QWORD *)a1 + 2);
  v3 = (*(_BYTE *)(v2 + 1) + 4);
  *(_BYTE *)(v2 + 1) += 4;
  if (v3 >= 0x7D)
    sub_1DB70F90C(a1);
  *((_DWORD *)a1 + 10) = *((_DWORD *)a1 + 11);
  result = sub_1DB70FD10((uint64_t)a1);
  *(_QWORD *)a1 = *((_QWORD *)a1 + 1);
  return result;
}

uint64_t sub_1DB70FD10(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  __int16 v12;
  int v13;
  unsigned int v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  _BYTE *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int i;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned __int8 *v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  int v50;
  int v51;
  unsigned int v52;
  char v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  __int16 v57;
  char v58;
  char v59;
  BOOL v60;
  __int16 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  char v67;

  v1 = result;
  v2 = *(unsigned __int8 **)(result + 16);
  v3 = *(_DWORD *)(v2 + 2);
  v4 = v2[1];
  v5 = *v2;
  if (v4 <= 0x1E && (v6 = *(unsigned int *)(*(_QWORD *)result + 8), (_DWORD)v6))
  {
    v7 = *(_QWORD *)(result + 56);
    v8 = v7 + v6;
    if (*(_BYTE *)v8)
    {
      v9 = (unsigned __int8 *)(v7 + *(unsigned int *)(v8 + 4));
      if (*v9 != v5)
      {
        do
        {
          v10 = v9[6];
          v9 += 6;
        }
        while (v10 != v5);
        if (v9[1] >= *(v9 - 5))
        {
          v11 = v9 - 6;
          v12 = *((_WORD *)v9 + 2);
          v13 = *(_DWORD *)v9;
          *(_DWORD *)v9 = *(_DWORD *)(v9 - 6);
          *((_WORD *)v9 + 2) = *((_WORD *)v9 - 1);
          *(_DWORD *)v11 = v13;
          *((_WORD *)v11 + 2) = v12;
          v9 -= 6;
        }
      }
      v14 = v9[1];
      if (v14 <= 0x72)
      {
        v9[1] = v14 + 2;
        *(_WORD *)(v8 + 2) += 2;
      }
    }
    else
    {
      v9 = (unsigned __int8 *)(v8 + 2);
      v24 = *(unsigned __int8 *)(v8 + 3);
      if (v24 <= 0x1F)
        *(_BYTE *)(v8 + 3) = v24 + 1;
    }
  }
  else
  {
    v9 = 0;
  }
  v15 = *(unsigned __int8 **)(result + 8);
  if (*(_DWORD *)(result + 24))
    v16 = 1;
  else
    v16 = v3 == 0;
  if (!v16)
  {
    result = sub_1DB7109E4(result, 1, (uint64_t)v9, *(unsigned __int8 **)result);
    v23 = *(_QWORD *)(v1 + 16);
    if (result)
    {
      *(_DWORD *)(v23 + 2) = result - *(_DWORD *)(v1 + 56);
      *(_QWORD *)(v1 + 8) = result;
      return result;
    }
    *(_DWORD *)(v23 + 2) = 0;
    return sub_1DB710C70(v1, v15);
  }
  v17 = **(_BYTE **)(result + 16);
  v18 = *(_BYTE **)(result + 80);
  *(_QWORD *)(result + 80) = v18 + 1;
  *v18 = v17;
  v20 = *(_QWORD *)(result + 80);
  v19 = *(_QWORD *)(result + 88);
  if (v20 >= v19)
    return sub_1DB710C70(v1, v15);
  v21 = *(_QWORD *)(result + 56);
  v22 = v20 - v21;
  v65 = v5;
  if (!v3)
  {
    v25 = *(unsigned __int8 **)result;
    v26 = *(unsigned __int8 **)(result + 16);
    *(_DWORD *)(v26 + 2) = v22;
    v27 = *(_DWORD *)(result + 24);
    v28 = v25;
    while (1)
    {
      ++v27;
      v29 = *((unsigned int *)v28 + 2);
      if (v9)
      {
        v28 = (unsigned __int8 *)(v21 + v29);
      }
      else
      {
        if (!(_DWORD)v29)
        {
          *(_DWORD *)(result + 24) = v27;
          v3 = (_DWORD)v28 - v21;
          goto LABEL_52;
        }
        v28 = (unsigned __int8 *)(v21 + v29);
        if (*(_BYTE *)(v21 + v29))
        {
          v9 = (unsigned __int8 *)(v21 + *((unsigned int *)v28 + 1));
          for (i = *v9; i != *v26; i = v34)
          {
            v34 = v9[6];
            v9 += 6;
          }
          v35 = v9[1];
          if (v35 <= 0x72)
          {
            v9[1] = v35 + 2;
            *((_WORD *)v28 + 1) += 2;
          }
        }
        else
        {
          v9 = v28 + 2;
          v36 = v28[3];
          if (v36 < 0x20)
            LOBYTE(v36) = v36 + 1;
          v28[3] = v36;
        }
      }
      LODWORD(v30) = *((unsigned __int16 *)v9 + 1);
      LODWORD(v31) = *((unsigned __int16 *)v9 + 2);
      v32 = v30 | ((_DWORD)v31 << 16);
      if (v32)
        break;
      *(_DWORD *)(v9 + 2) = v22;
      v9 = 0;
    }
    *(_DWORD *)(result + 24) = v27;
    if (v32 <= v22)
    {
      *(_QWORD *)(result + 16) = v9;
      result = sub_1DB7109E4(result, 0, 0, v28);
      if (result)
      {
        v30 = result - *(_QWORD *)(v1 + 56);
        v31 = v30 >> 16;
      }
      else
      {
        LOWORD(v30) = 0;
        LOWORD(v31) = 0;
      }
      v5 = v65;
      *((_WORD *)v9 + 1) = v30;
      *((_WORD *)v9 + 2) = v31;
      *(_QWORD *)(v1 + 16) = v26;
      v27 = *(_DWORD *)(v1 + 24);
    }
    if (v27 == 1 && *(unsigned __int8 **)(v1 + 8) == v25)
    {
      *((_WORD *)v26 + 1) = v30;
      *((_WORD *)v26 + 2) = v31;
      --*(_QWORD *)(v1 + 80);
      LOWORD(v30) = *((_WORD *)v9 + 1);
      LOWORD(v31) = *((_WORD *)v9 + 2);
    }
    v3 = (unsigned __int16)v30 | ((unsigned __int16)v31 << 16);
    if (v3)
      goto LABEL_52;
    return sub_1DB710C70(v1, v15);
  }
  if (v21 + (unint64_t)v3 < v19)
  {
    result = sub_1DB7109E4(result, 0, (uint64_t)v9, *(unsigned __int8 **)result);
    if (result)
    {
      v3 = result - *(_DWORD *)(v1 + 56);
      v5 = v65;
      goto LABEL_52;
    }
    return sub_1DB710C70(v1, v15);
  }
LABEL_52:
  v37 = *(unsigned __int8 **)v1;
  v38 = *(_DWORD *)(v1 + 24) - 1;
  *(_DWORD *)(v1 + 24) = v38;
  if (!v38)
  {
    *(_QWORD *)(v1 + 80) -= *(_QWORD *)(v1 + 8) != (_QWORD)v37;
    v22 = v3;
  }
  if (v15 == v37)
  {
    v62 = *(_QWORD *)(v1 + 56);
  }
  else
  {
    v66 = *v37;
    v67 = 8 * (v5 > 0x3F);
    v39 = 2 * v4;
    v40 = *((unsigned __int16 *)v37 + 1) - (v4 + v66);
    do
    {
      v41 = *v15;
      if (*v15)
      {
        if ((v41 & 1) != 0)
        {
          v42 = (unint64_t)(v41 + 1) >> 1;
          v43 = *(unsigned __int8 *)(v1 + 166 + (v42 - 1));
          if (v43 != *(unsigned __int8 *)(v1 + 166 + v42))
          {
            result = sub_1DB710FBC(v1, v43 + 1);
            if (!result)
              return sub_1DB710C70(v1, v15);
            v44 = *(_QWORD *)(v1 + 56);
            v45 = *((unsigned int *)v15 + 1);
            v46 = (_DWORD *)(v44 + v45);
            v47 = v44;
            v48 = (_DWORD *)result;
            do
            {
              *v48 = *(_DWORD *)(v47 + v45);
              v48[1] = *(_DWORD *)(v47 + v45 + 4);
              v48[2] = *(_DWORD *)(v47 + v45 + 8);
              v47 += 12;
              v48 += 3;
              LODWORD(v42) = v42 - 1;
            }
            while ((_DWORD)v42);
            *v46 = -1;
            v49 = v1 + 4 * v43;
            v46[1] = *(_DWORD *)(v49 + 296);
            v46[2] = *(unsigned __int8 *)(v1 + v43 + 128);
            *(_DWORD *)(v49 + 296) = v45;
            ++*(_DWORD *)(v49 + 448);
            *((_DWORD *)v15 + 1) = result - v44;
            LOBYTE(v5) = v65;
          }
        }
        LOWORD(v50) = *((_WORD *)v15 + 1);
        if (3 * (int)v41 + 1 < v66)
          LOWORD(v50) = v50 + 1;
      }
      else
      {
        result = sub_1DB710FBC(v1, 0);
        if (!result)
          return sub_1DB710C70(v1, v15);
        v51 = *(_DWORD *)(v15 + 2);
        *(_WORD *)(result + 4) = *((_WORD *)v15 + 3);
        *(_DWORD *)result = v51;
        *((_DWORD *)v15 + 1) = result - *(_DWORD *)(v1 + 56);
        v52 = *(unsigned __int8 *)(result + 1);
        if (v52 >= 0x1E)
          v53 = 120;
        else
          v53 = 2 * v52;
        *(_BYTE *)(result + 1) = v53;
        LOBYTE(v5) = v65;
        v50 = *(_DWORD *)(v1 + 28) + (v66 > 2) + (v53 & 0xFE);
      }
      v54 = ((unsigned __int16)v50 + 6) * v39;
      v55 = v40 + (unsigned __int16)v50;
      v56 = 3 * v55;
      if (v54 <= 9 * v55)
        v57 = 4;
      else
        v57 = 5;
      if (v54 > 12 * v55)
        ++v57;
      if (v54 > 15 * v55)
        ++v57;
      if (v54 <= v55)
        v58 = 1;
      else
        v58 = 2;
      if (v54 < 4 * v55)
        v59 = v58;
      else
        v59 = v58 + 1;
      v60 = v54 >= 2 * v56;
      if (v54 < 2 * v56)
        v61 = 4;
      else
        v61 = v57;
      if (v60)
        v59 = v57;
      *((_WORD *)v15 + 1) = v61 + v50;
      v62 = *(_QWORD *)(v1 + 56);
      v63 = v62 + *((unsigned int *)v15 + 1) + 6 * v41;
      *(_DWORD *)(v63 + 8) = v22;
      *(_BYTE *)(v63 + 6) = v5;
      *(_BYTE *)(v63 + 7) = v59;
      v15[1] |= v67;
      *v15 = v41 + 1;
      v15 = (unsigned __int8 *)(v62 + *((unsigned int *)v15 + 2));
    }
    while (v15 != *(unsigned __int8 **)v1);
  }
  v64 = v62 + v3;
  *(_QWORD *)v1 = v64;
  *(_QWORD *)(v1 + 8) = v64;
  return result;
}

BOOL sub_1DB710298(uint64_t a1)
{
  int v2;
  int v3;

  v2 = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = 0xFFFFFFFFLL;
  v3 = 4;
  do
  {
    v2 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 120) + 8))() | (v2 << 8);
    *(_DWORD *)(a1 + 108) = v2;
    --v3;
  }
  while (v3);
  return v2 != -1;
}

uint64_t sub_1DB7102F4(unsigned __int8 **a1)
{
  uint64_t v2;
  int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  _WORD *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int8 *v15;
  unsigned int v16;
  int v17;
  int v18;
  __int128 v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  __int128 v24;
  __int128 i;
  int v26;
  int v27;
  uint64_t v28;
  unsigned __int8 *v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned __int8 *v33;
  int v34;
  char *v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  unsigned int v45;
  unsigned __int8 **v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  int v50;
  unsigned int v51;
  char v52;
  int v53;
  _OWORD v54[128];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t)*a1;
  v3 = **a1;
  if (**a1)
  {
    v4 = &a1[7][*(unsigned int *)(v2 + 4)];
    v5 = *(unsigned __int16 *)(v2 + 2);
    v6 = *((_DWORD *)a1 + 27);
    v7 = *((_DWORD *)a1 + 26) / v5;
    *((_DWORD *)a1 + 26) = v7;
    v8 = v6 / v7;
    v9 = v4[1];
    if (v8 < v9)
    {
      sub_1DB7107BC((uint64_t)a1, 0, v9);
      a1[2] = v4;
      v10 = *v4;
      sub_1DB70FC3C((unsigned __int8 *)a1);
      return v10;
    }
    *((_DWORD *)a1 + 8) = 0;
    do
    {
      v17 = v4[7];
      v4 += 6;
      v18 = v9 + v17;
      if (v9 + v17 > v8)
      {
        sub_1DB7107BC((uint64_t)a1, v9, v17);
        a1[2] = v4;
        v10 = *v4;
        sub_1DB70F87C((unsigned __int8 *)a1);
        return v10;
      }
      v9 += v17;
      --v3;
    }
    while (v3);
    if (v8 >= v5)
      return 4294967294;
    sub_1DB7107BC((uint64_t)a1, v18, v5 - v18);
    *(_QWORD *)&v19 = -1;
    *((_QWORD *)&v19 + 1) = -1;
    v70 = v19;
    v69 = v19;
    v68 = v19;
    v67 = v19;
    v66 = v19;
    v65 = v19;
    v64 = v19;
    v63 = v19;
    v62 = v19;
    v61 = v19;
    v60 = v19;
    v59 = v19;
    v58 = v19;
    v57 = v19;
    v56 = v19;
    v55 = v19;
    *((_BYTE *)&v55 + *v4) = 0;
    v20 = *a1;
    v21 = -6;
    v22 = **a1;
    do
    {
      *((_BYTE *)&v55 + v4[v21]) = 0;
      v21 -= 6;
      --v22;
    }
    while (v22);
  }
  else
  {
    v11 = (_WORD *)&(&a1[16 * (unint64_t)*((unsigned __int8 *)a1 + *(unsigned __int8 *)(v2 + 3) + 855)])[8 * (*((_DWORD *)a1 + 10) >> 31) + 524]
        + *((_DWORD *)a1 + 8)
        + *(unsigned __int8 *)(v2 + 1)
        + *((unsigned __int8 *)a1 + a1[7][*(unsigned int *)(v2 + 8)] + 600);
    v12 = *((_DWORD *)a1 + 27);
    v13 = *((_DWORD *)a1 + 26) >> 14;
    *((_DWORD *)a1 + 26) = v13;
    v14 = (unsigned __int16)*v11;
    if (v12 / v13 < v14)
    {
      sub_1DB7107BC((uint64_t)a1, 0, (unsigned __int16)*v11);
      *v11 = *v11 - (((unsigned __int16)*v11 + 32) >> 7) + 128;
      v15 = *a1 + 2;
      v10 = *v15;
      a1[2] = v15;
      v16 = v15[1];
      if (v16 < 0xC4)
        LOBYTE(v16) = v16 + 1;
      v15[1] = v16;
      *((_DWORD *)a1 + 8) = 1;
      ++*((_DWORD *)a1 + 10);
      sub_1DB70FBE4((uint64_t)a1);
      return v10;
    }
    sub_1DB7107BC((uint64_t)a1, (unsigned __int16)*v11, 0x4000 - v14);
    v23 = (unsigned __int16)*v11 - (((unsigned __int16)*v11 + 32) >> 7);
    *v11 -= ((unsigned __int16)*v11 + 32) >> 7;
    *((_DWORD *)a1 + 7) = byte_1DB74CAAC[(unsigned __int16)v23 >> 10];
    *(_QWORD *)&v24 = -1;
    *((_QWORD *)&v24 + 1) = -1;
    v55 = v24;
    v56 = v24;
    v57 = v24;
    v58 = v24;
    v59 = v24;
    v60 = v24;
    v61 = v24;
    v62 = v24;
    v63 = v24;
    v64 = v24;
    v65 = v24;
    v66 = v24;
    v67 = v24;
    v68 = v24;
    v69 = v24;
    v70 = v24;
    v20 = *a1;
    *((_BYTE *)&v55 + (*a1)[2]) = 0;
    *((_DWORD *)a1 + 8) = 0;
  }
  for (i = 0uLL; ; i = 0uLL)
  {
    v54[30] = i;
    v54[31] = i;
    v54[28] = i;
    v54[29] = i;
    v54[26] = i;
    v54[27] = i;
    v54[24] = i;
    v54[25] = i;
    v54[22] = i;
    v54[23] = i;
    v54[20] = i;
    v54[21] = i;
    v54[18] = i;
    v54[19] = i;
    v54[16] = i;
    v54[17] = i;
    v54[14] = i;
    v54[15] = i;
    v54[12] = i;
    v54[13] = i;
    v54[10] = i;
    v54[11] = i;
    v54[8] = i;
    v54[9] = i;
    v54[6] = i;
    v54[7] = i;
    v54[4] = i;
    v54[5] = i;
    v54[2] = i;
    v54[3] = i;
    v54[0] = i;
    v54[1] = i;
    v53 = 0;
    v26 = *v20;
    v27 = *((_DWORD *)a1 + 6);
    do
    {
      v28 = *((unsigned int *)v20 + 2);
      if (!(_DWORD)v28)
      {
        *((_DWORD *)a1 + 6) = v27 + 1;
        return 0xFFFFFFFFLL;
      }
      v29 = a1[7];
      v20 = &v29[v28];
      *a1 = v20;
      v30 = *v20;
      ++v27;
    }
    while (v30 == v26);
    v31 = 0;
    v32 = 0;
    *((_DWORD *)a1 + 6) = v27;
    v33 = &v29[*((unsigned int *)v20 + 1)];
    do
    {
      v34 = *((char *)&v55 + *v33);
      v31 += (v33[1] & v34);
      *((_QWORD *)v54 + v32) = v33;
      v32 -= v34;
      v33 += 6;
    }
    while (v32 != v30 - v26);
    v35 = sub_1DB70F7E8(a1, v26, &v53);
    v36 = v53;
    v37 = v53 + v31;
    v38 = *((_DWORD *)a1 + 27);
    v39 = *((_DWORD *)a1 + 26) / (v53 + v31);
    *((_DWORD *)a1 + 26) = v39;
    v40 = v38 / v39;
    if (v40 < v31)
      break;
    if (v40 >= v37)
      return 4294967294;
    sub_1DB7107BC((uint64_t)a1, v31, v36);
    *(_WORD *)v35 += v37;
    v41 = v26 - v30;
    v42 = 8 * (~v26 + v30);
    do
    {
      *((_BYTE *)&v55 + **(unsigned __int8 **)((char *)v54 + v42)) = 0;
      v42 -= 8;
    }
    while (!__CFADD__(v41++, 1));
    v20 = *a1;
  }
  v45 = 0;
  v46 = (unsigned __int8 **)v54;
  do
  {
    v47 = v45;
    v49 = *v46++;
    v48 = v49;
    v50 = v49[1];
    v45 += v50;
  }
  while (v45 <= v40);
  sub_1DB7107BC((uint64_t)a1, v47, v50);
  v51 = v35[2];
  if (v51 <= 6)
  {
    v52 = v35[3] - 1;
    v35[3] = v52;
    if (!v52)
    {
      *(_WORD *)v35 *= 2;
      v35[2] = v51 + 1;
      v35[3] = 3 << v51;
    }
  }
  a1[2] = v48;
  v10 = *v48;
  sub_1DB70FCA8((unsigned __int8 *)a1);
  return v10;
}

uint64_t sub_1DB7107BC(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;

  v3 = result;
  v4 = *(_DWORD *)(result + 104);
  v5 = *(_DWORD *)(result + 112) + v4 * a2;
  v6 = *(_DWORD *)(result + 108) - v4 * a2;
  v7 = v4 * a3;
  *(_DWORD *)(result + 108) = v6;
  *(_DWORD *)(result + 112) = v5;
  *(_DWORD *)(result + 104) = v7;
  while (1)
  {
    if (!(((v5 + v7) ^ v5) >> 24))
      goto LABEL_5;
    if (v7 >> 15)
      return result;
    *(_DWORD *)(v3 + 104) = -v5 & 0x7FFF;
LABEL_5:
    result = (*(uint64_t (**)(void))(*(_QWORD *)(v3 + 120) + 8))();
    v6 = result | (v6 << 8);
    v7 = *(_DWORD *)(v3 + 104) << 8;
    *(_DWORD *)(v3 + 104) = v7;
    *(_DWORD *)(v3 + 108) = v6;
    v5 = *(_DWORD *)(v3 + 112) << 8;
    *(_DWORD *)(v3 + 112) = v5;
  }
}

_DWORD *sub_1DB710848(uint64_t a1, _DWORD *a2, int a3, int a4)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;

  v5 = *(unsigned __int8 *)(a1 + 166 + (a3 - 1));
  v6 = *(unsigned __int8 *)(a1 + 166 + (a4 - 1));
  if (v5 == (_DWORD)v6)
    return a2;
  v7 = a1 + 4 * *(unsigned __int8 *)(a1 + 166 + (a4 - 1));
  v8 = *(unsigned int *)(v7 + 296);
  if (!(_DWORD)v8)
  {
    sub_1DB71092C(a1, (uint64_t)a2, v5, *(unsigned __int8 *)(a1 + 166 + (a4 - 1)));
    return a2;
  }
  v9 = 0;
  v10 = (_DWORD *)(v7 + 296);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = v11 + v8;
  *v10 = *(_DWORD *)(v12 + 4);
  --*(_DWORD *)(a1 + 4 * v6 + 448);
  do
  {
    v13 = (_DWORD *)(v12 + v9 * 4);
    *v13 = a2[v9];
    v13[1] = a2[v9 + 1];
    v13[2] = a2[v9 + 2];
    v9 += 3;
    --a4;
  }
  while (a4);
  *a2 = -1;
  v14 = a1 + 4 * v5;
  a2[1] = *(_DWORD *)(v14 + 296);
  a2[2] = *(unsigned __int8 *)(a1 + v5 + 128);
  *(_DWORD *)(v14 + 296) = (_DWORD)a2 - v11;
  ++*(_DWORD *)(v14 + 448);
  return (_DWORD *)v12;
}

uint64_t sub_1DB71092C(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  v4 = result + 128;
  v5 = *(unsigned __int8 *)(result + 128 + a3) - *(unsigned __int8 *)(result + 128 + a4);
  v6 = (_DWORD *)(a2 + 12 * *(unsigned __int8 *)(result + 128 + a4));
  v7 = *(unsigned __int8 *)(result + (v5 - 1) + 166);
  if (v5 == *(unsigned __int8 *)(result + 128 + v7))
  {
    v8 = *(_QWORD *)(result + 56);
  }
  else
  {
    v7 = (v7 - 1);
    v9 = &v6[3 * *(unsigned __int8 *)(v4 + v7)];
    v10 = v5 + ~*(unsigned __int8 *)(v4 + v7);
    *v9 = -1;
    v11 = result + 4 * v10;
    v9[1] = *(_DWORD *)(v11 + 296);
    v9[2] = *(unsigned __int8 *)(v4 + v10);
    v8 = *(_QWORD *)(result + 56);
    *(_DWORD *)(v11 + 296) = (_DWORD)v9 - v8;
    ++*(_DWORD *)(v11 + 448);
  }
  *v6 = -1;
  v12 = result + 4 * v7;
  v6[1] = *(_DWORD *)(v12 + 296);
  v6[2] = *(unsigned __int8 *)(result + v7 + 128);
  *(_DWORD *)(v12 + 296) = (_DWORD)v6 - v8;
  ++*(_DWORD *)(v12 + 448);
  return result;
}

uint64_t sub_1DB7109E4(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  unsigned int v18;
  int v19;
  BOOL v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned __int8 v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[8];
  uint64_t v32;
  uint64_t v33;

  v4 = a4;
  v33 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 **)(a1 + 16);
  v7 = *(unsigned int *)(v6 + 2);
  v32 = 0;
  memset(v31, 0, sizeof(v31));
  if (a2)
  {
    v8 = 0;
  }
  else
  {
    *(_QWORD *)&v31[0] = v6;
    v8 = 1;
  }
  v9 = *((unsigned int *)a4 + 2);
  v10 = *(_QWORD *)(a1 + 56);
  if (!(_DWORD)v9)
  {
    v12 = v8;
LABEL_22:
    v18 = *(unsigned __int8 *)(v10 + v7);
    v19 = v7 + 1;
    v20 = *v6 > 0x3Fu;
    if (*v4)
    {
      v21 = (unsigned __int8 *)(v10 + *((unsigned int *)v4 + 1));
      do
      {
        v22 = *v21;
        v21 += 6;
      }
      while (v22 != v18);
      v23 = *(v21 - 5);
      v24 = *((unsigned __int16 *)v4 + 1) - *v4 - v23 + 1;
      if (v24 >= 2 * (v23 - 1))
        LOBYTE(v24) = 5 * (v23 - 1) > v24;
      else
        v24 = (v23 + 2 * v24 - 4) / v24;
      v25 = v24 + 1;
    }
    else
    {
      v25 = v4[3];
    }
    v26 = (8 * (v18 > 0x3F)) | (16 * v20);
    v27 = (uint64_t *)v31 + v12 - 1;
    do
    {
      v28 = *(_QWORD *)(a1 + 72);
      if (v28 == *(_QWORD *)(a1 + 64))
      {
        v29 = *(unsigned int *)(a1 + 296);
        if ((_DWORD)v29)
        {
          result = v10 + v29;
          *(_DWORD *)(a1 + 296) = *(_DWORD *)(v10 + v29 + 4);
          --*(_DWORD *)(a1 + 448);
        }
        else
        {
          result = sub_1DB71102C(a1, 0);
          if (!result)
            return result;
        }
      }
      else
      {
        result = v28 - 12;
        *(_QWORD *)(a1 + 72) = v28 - 12;
      }
      *(_BYTE *)result = 0;
      *(_BYTE *)(result + 1) = v26;
      *(_BYTE *)(result + 2) = v18;
      *(_BYTE *)(result + 3) = v25;
      *(_DWORD *)(result + 4) = v19;
      v10 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)(result + 8) = (_DWORD)v4 - v10;
      v30 = *v27--;
      *(_DWORD *)(v30 + 2) = result - v10;
      LODWORD(v4) = result;
      --v12;
    }
    while (v12);
    return result;
  }
  while (1)
  {
    v4 = (unsigned __int8 *)(v10 + v9);
    if (!a3)
    {
      if (*v4)
      {
        a3 = v10 - 6 + *((unsigned int *)v4 + 1);
        do
        {
          v13 = *(unsigned __int8 *)(a3 + 6);
          a3 += 6;
        }
        while (v13 != *v6);
        v14 = *(unsigned __int8 *)(a3 + 1);
        if (v14 <= 0x72)
        {
          *(_BYTE *)(a3 + 1) = v14 + 1;
          ++*((_WORD *)v4 + 1);
        }
      }
      else
      {
        a3 = (uint64_t)(v4 + 2);
        v15 = v4[3];
        if (v15 < 0x18 && *(_BYTE *)(v10 + *((unsigned int *)v4 + 2)) == 0)
          LOBYTE(v15) = v15 + 1;
        v4[3] = v15;
      }
    }
    v11 = *(_DWORD *)(a3 + 2);
    if (v11 != (_DWORD)v7)
      break;
    v12 = v8 + 1;
    *((_QWORD *)v31 + v8) = a3;
    v9 = *((unsigned int *)v4 + 2);
    ++v8;
    a3 = 0;
    if (!(_DWORD)v9)
      goto LABEL_22;
  }
  v4 = (unsigned __int8 *)(v10 + v11);
  v12 = v8;
  result = (uint64_t)v4;
  if (v8)
    goto LABEL_22;
  return result;
}

uint64_t sub_1DB710C70(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int16 v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *i;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  _DWORD *v26;
  unsigned int *v27;
  int v28;
  _OWORD v29[9];
  uint64_t v30;
  uint64_t v31;

  v2 = a2;
  v31 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 80) = v4 + *(unsigned int *)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 8);
  if ((unsigned __int8 *)v5 != a2)
  {
    do
    {
      v6 = *(_BYTE *)v5 - 1;
      *(_BYTE *)v5 = v6;
      if (v6)
      {
        sub_1DB7112D8(a1, (unsigned __int8 *)v5, (v6 + 3) >> 1, 0);
      }
      else
      {
        v7 = (unsigned __int8 *)(v4 + *(unsigned int *)(v5 + 4));
        *(_BYTE *)(v5 + 1) = *(_BYTE *)(v5 + 1) & 0x10 | (8 * (*v7 > 0x3Fu));
        v8 = *(_DWORD *)v7;
        *(_WORD *)(v5 + 6) = *((_WORD *)v7 + 2);
        *(_DWORD *)(v5 + 2) = v8;
        if (*(unsigned __int8 **)(a1 + 88) == v7)
        {
          *(_QWORD *)(a1 + 88) = v7 + 12;
        }
        else
        {
          *(_DWORD *)v7 = -1;
          *((_DWORD *)v7 + 1) = *(_DWORD *)(a1 + 296);
          *((_DWORD *)v7 + 2) = *(unsigned __int8 *)(a1 + 128);
          *(_DWORD *)(a1 + 296) = (_DWORD)v7 - *(_DWORD *)(a1 + 56);
          ++*(_DWORD *)(a1 + 448);
        }
        *(_BYTE *)(v5 + 3) = (*(unsigned __int8 *)(v5 + 3) + 11) >> 3;
      }
      v4 = *(_QWORD *)(a1 + 56);
      v5 = v4 + *(unsigned int *)(v5 + 8);
    }
    while ((unsigned __int8 *)v5 != v2);
  }
  v9 = *(unsigned __int8 **)a1;
  if (*(unsigned __int8 **)a1 != v2)
  {
    do
    {
      v10 = *v2;
      if (*v2)
      {
        v11 = *((_WORD *)v2 + 1) + 4;
        *((_WORD *)v2 + 1) = v11;
        if (4 * v10 + 128 < v11)
        {
          sub_1DB7112D8(a1, v2, (v10 + 2) >> 1, 1);
          v4 = *(_QWORD *)(a1 + 56);
          v9 = *(unsigned __int8 **)a1;
        }
      }
      else
      {
        v2[3] -= v2[3] >> 1;
      }
      v2 = (unsigned __int8 *)(v4 + *((unsigned int *)v2 + 2));
    }
    while (v2 != v9);
  }
  if (!*(_DWORD *)(a1 + 100) || sub_1DB7113B4((_DWORD *)a1) < *(_DWORD *)(a1 + 48) >> 1)
    return sub_1DB70F614(a1);
  v13 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 8);
  if ((_DWORD)v13)
  {
    do
    {
      v14 = v4 + v13;
      v13 = *(unsigned int *)(v4 + v13 + 8);
    }
    while ((_DWORD)v13);
    *(_QWORD *)(a1 + 8) = v14;
  }
  do
  {
    sub_1DB711410(a1, *(unsigned __int8 **)(a1 + 8), 0);
    v30 = 0;
    memset(v29, 0, sizeof(v29));
    v15 = *(_DWORD **)(a1 + 64);
    if (v15 != *(_DWORD **)(a1 + 72))
      *v15 = 0;
    for (i = *(_DWORD **)(a1 + 88); *i == -1; i += 3 * v17)
    {
      *i = 0;
      v17 = i[2];
      v18 = *(unsigned __int8 *)(a1 + v17 - 1 + 166);
      ++*((_DWORD *)v29 + v18);
    }
    v19 = 0;
    *(_QWORD *)(a1 + 88) = i;
    do
    {
      v20 = *((_DWORD *)v29 + v19);
      if (v20)
      {
        v21 = a1 + 4 * v19;
        v22 = (_DWORD *)(v21 + 296);
        v23 = *(_QWORD *)(a1 + 56);
        v24 = (_DWORD *)(v21 + 448);
        while (1)
        {
          v25 = *v22;
          while (1)
          {
            v26 = (_DWORD *)(v23 + v25);
            v28 = *v26;
            v27 = v26 + 1;
            if (v28)
              break;
            v25 = *v27;
            *v22 = v25;
            --*v24;
            *((_DWORD *)v29 + v19) = --v20;
            if (!v20)
              goto LABEL_33;
          }
          v22 = v27;
        }
      }
LABEL_33:
      ++v19;
    }
    while (v19 != 38);
    result = sub_1DB7113B4((_DWORD *)a1);
  }
  while (result > 3 * (*(_DWORD *)(a1 + 48) >> 2));
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 36);
  return result;
}

uint64_t sub_1DB710FBC(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1 + 4 * a2;
  v3 = *(unsigned int *)(v2 + 296);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD *)(a1 + 56) + v3;
    *(_DWORD *)(v2 + 296) = *(_DWORD *)(v4 + 4);
    --*(_DWORD *)(a1 + 4 * a2 + 448);
  }
  else
  {
    v5 = 12 * *(unsigned __int8 *)(a1 + a2 + 128);
    v4 = *(_QWORD *)(a1 + 64);
    if (v5 > *(_DWORD *)(a1 + 72) - (int)v4)
      return sub_1DB71102C(a1, a2);
    *(_QWORD *)(a1 + 64) = v4 + v5;
  }
  return v4;
}

uint64_t sub_1DB71102C(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v19;
  _DWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v31;

  LODWORD(v2) = a2;
  if (*(_DWORD *)(a1 + 52))
    goto LABEL_2;
  v31 = 0;
  *(_DWORD *)(a1 + 52) = 0x2000;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_QWORD *)(a1 + 592) = 0;
  v6 = *(_DWORD **)(a1 + 64);
  if (v6 != *(_DWORD **)(a1 + 72))
    *v6 = 0;
  v7 = 0;
  v8 = &v31;
  do
  {
    v9 = a1 + 4 * v7;
    v10 = *(unsigned int *)(v9 + 296);
    *(_DWORD *)(v9 + 296) = 0;
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD *)(a1 + 56);
      do
      {
        v12 = v11 + v10;
        if (*(_DWORD *)(v11 + v10 + 8))
        {
          *v8 = v10;
          v8 = (unsigned int *)(v12 + 4);
          while (1)
          {
            v13 = *(unsigned int *)(v12 + 8);
            if (*(_DWORD *)(v12 + 12 * v13) != -1)
              break;
            v14 = v12 + 12 * v13;
            *(_DWORD *)(v12 + 8) = *(_DWORD *)(v14 + 8) + v13;
            *(_DWORD *)(v14 + 8) = 0;
          }
        }
        v10 = *(unsigned int *)(v12 + 4);
      }
      while ((_DWORD)v10);
    }
    ++v7;
  }
  while (v7 != 38);
  *v8 = 0;
  v15 = v31;
  if (v31)
  {
    v16 = *(_QWORD *)(a1 + 56);
    do
    {
      v17 = (_DWORD *)(v16 + v15);
      v18 = *(unsigned int *)(v16 + v15 + 4);
      v19 = *(_DWORD *)(v16 + v15 + 8);
      v31 = *(_DWORD *)(v16 + v15 + 4);
      if (v19)
      {
        if (v19 >= 0x81)
        {
          do
          {
            v20 = (_DWORD *)(v16 + v15);
            *v20 = -1;
            v20[1] = *(_DWORD *)(a1 + 444);
            v20[2] = *(unsigned __int8 *)(a1 + 165);
            *(_DWORD *)(a1 + 444) = v15;
            ++*(_DWORD *)(a1 + 596);
            v19 -= 128;
            v15 += 1536;
          }
          while (v19 > 0x80);
          v17 = (_DWORD *)(v16 + v15);
        }
        v21 = *(unsigned __int8 *)(a1 + v19 - 1 + 166);
        if (v19 != *(unsigned __int8 *)(a1 + v21 + 128))
        {
          v21 = (v21 - 1);
          v22 = &v17[3 * *(unsigned __int8 *)(a1 + 128 + v21)];
          v23 = v19 + ~*(unsigned __int8 *)(a1 + 128 + v21);
          *v22 = -1;
          v24 = a1 + 4 * v23;
          v22[1] = *(_DWORD *)(v24 + 296);
          v22[2] = *(unsigned __int8 *)(a1 + 128 + v23);
          *(_DWORD *)(v24 + 296) = (_DWORD)v22 - v16;
          ++*(_DWORD *)(v24 + 448);
          v18 = v31;
        }
        *v17 = -1;
        v25 = a1 + 4 * v21;
        v17[1] = *(_DWORD *)(v25 + 296);
        v17[2] = *(unsigned __int8 *)(a1 + v21 + 128);
        *(_DWORD *)(v25 + 296) = (_DWORD)v17 - v16;
        ++*(_DWORD *)(v25 + 448);
      }
      v15 = v18;
    }
    while (v18);
  }
  v26 = a1 + 4 * a2;
  v27 = *(unsigned int *)(v26 + 296);
  LODWORD(v2) = a2;
  if (!(_DWORD)v27)
  {
LABEL_2:
    while ((_DWORD)v2 != 37)
    {
      v2 = (v2 + 1);
      v3 = a1 + 4 * v2;
      v4 = *(unsigned int *)(v3 + 296);
      if ((_DWORD)v4)
      {
        v5 = *(_QWORD *)(a1 + 56) + v4;
        *(_DWORD *)(v3 + 296) = *(_DWORD *)(v5 + 4);
        --*(_DWORD *)(a1 + 4 * v2 + 448);
        sub_1DB71092C(a1, v5, v2, a2);
        return v5;
      }
    }
    v28 = 12 * *(unsigned __int8 *)(a1 + a2 + 128);
    --*(_DWORD *)(a1 + 52);
    v29 = *(_QWORD *)(a1 + 88);
    if (v28 >= (int)v29 - *(_DWORD *)(a1 + 80))
    {
      return 0;
    }
    else
    {
      v5 = v29 - v28;
      *(_QWORD *)(a1 + 88) = v29 - v28;
    }
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 56) + v27;
    *(_DWORD *)(v26 + 296) = *(_DWORD *)(v5 + 4);
    --*(_DWORD *)(a1 + 4 * a2 + 448);
  }
  return v5;
}

_DWORD *sub_1DB7112D8(uint64_t a1, unsigned __int8 *a2, int a3, int a4)
{
  int v7;
  _DWORD *result;
  unsigned __int8 v9;
  int v10;
  int v11;
  unsigned int v12;
  _BYTE *v13;
  int v14;
  unsigned int v15;

  v7 = *a2;
  result = sub_1DB710848(a1, (_DWORD *)(*(_QWORD *)(a1 + 56) + *((unsigned int *)a2 + 1)), a3, (v7 + 2) >> 1);
  *((_DWORD *)a2 + 1) = (_DWORD)result - *(_DWORD *)(a1 + 56);
  v9 = ((4 * a4 + 16) & a2[1]) + 8 * (*(unsigned __int8 *)result > 0x3Fu);
  v10 = *((unsigned __int8 *)result + 1);
  v11 = *((unsigned __int16 *)a2 + 1) - v10;
  v12 = (v10 + a4) >> a4;
  *((_BYTE *)result + 1) = v12;
  LOWORD(v12) = v12;
  v13 = (char *)result + 7;
  do
  {
    v14 = *v13;
    v11 -= v14;
    v15 = (v14 + a4) >> a4;
    *v13 = v15;
    LOWORD(v12) = v12 + v15;
    v9 |= 8 * (*(v13 - 1) > 0x3Fu);
    v13 += 6;
    --v7;
  }
  while (v7);
  *((_WORD *)a2 + 1) = v12 + ((v11 + a4) >> a4);
  a2[1] = v9;
  return result;
}

uint64_t sub_1DB7113B4(_DWORD *a1)
{
  uint64_t v1;
  int v2;

  v1 = 0;
  v2 = 0;
  do
  {
    v2 += a1[v1 + 112] * *((unsigned __int8 *)a1 + v1 + 128);
    ++v1;
  }
  while (v1 != 38);
  return (a1[12] - 12 * v2 + a1[16] - a1[18] + a1[20] - a1[22]);
}

uint64_t sub_1DB711410(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  char *v17;
  char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  unsigned int v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  unsigned int v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 56);
  if (!*a2)
  {
    v23 = v7 + *((unsigned int *)a2 + 1);
    v24 = *(unsigned __int8 **)(a1 + 88);
    if (v23 >= (unint64_t)v24)
    {
      if (*(_DWORD *)(a1 + 36) <= a3)
      {
        LOWORD(v25) = 0;
        LOWORD(v26) = 0;
      }
      else
      {
        v25 = sub_1DB711410(a1);
        v26 = HIWORD(v25);
      }
      *((_WORD *)a2 + 2) = v25;
      *((_WORD *)a2 + 3) = v26;
      if (a3 < 0xA || *((_DWORD *)a2 + 1))
        return ((_DWORD)a2 - *(_DWORD *)(a1 + 56));
      v24 = *(unsigned __int8 **)(a1 + 88);
    }
    if (v24 != a2)
    {
      result = 0;
      *(_DWORD *)a2 = -1;
      *((_DWORD *)a2 + 1) = *(_DWORD *)(a1 + 296);
      *((_DWORD *)a2 + 2) = *(unsigned __int8 *)(a1 + 128);
      v35 = (_DWORD)a2 - *(_DWORD *)(a1 + 56);
      goto LABEL_32;
    }
LABEL_33:
    result = 0;
    *(_QWORD *)(a1 + 88) = a2 + 12;
    return result;
  }
  v8 = *((unsigned int *)a2 + 1);
  v9 = (_DWORD *)(v7 + v8);
  v10 = (v6 + 2) >> 1;
  v11 = *(_DWORD **)(a1 + 88);
  if ((unint64_t)(v11 + 4096) >= v7 + v8
    && (v12 = *(unsigned __int8 *)(a1 + v10 - 1 + 166),
        v13 = a1 + 4 * v12,
        v14 = *(unsigned int *)(v13 + 296),
        v14 >= v8))
  {
    v27 = (_DWORD *)(v13 + 296);
    v15 = v7 + v14;
    *(_DWORD *)(v13 + 296) = *(_DWORD *)(v7 + v14 + 4);
    v28 = (_DWORD *)(v13 + 448);
    --*(_DWORD *)(v13 + 448);
    v29 = v7;
    v30 = (v6 + 2) >> 1;
    do
    {
      v31 = (_DWORD *)(v29 + v14);
      *v31 = *(_DWORD *)(v29 + v8);
      v31[1] = *(_DWORD *)(v29 + v8 + 4);
      v31[2] = *(_DWORD *)(v29 + v8 + 8);
      v29 += 12;
      --v30;
    }
    while (v30);
    if (v11 == v9)
    {
      *(_QWORD *)(a1 + 88) = &v9[3 * *(unsigned __int8 *)(a1 + v12 + 128)];
    }
    else
    {
      *v9 = -1;
      v9[1] = *v27;
      v9[2] = *(unsigned __int8 *)(a1 + v12 + 128);
      *v27 = v8;
      ++*v28;
    }
  }
  else
  {
    v15 = v7 + v8;
  }
  *((_DWORD *)a2 + 1) = v15 - v7;
  v16 = (_DWORD *)(v7 + (v15 - v7));
  v17 = (char *)v16 + 6 * v6;
  do
  {
    if (v7 + (unint64_t)*(unsigned int *)(v17 + 2) >= *(_QWORD *)(a1 + 88))
    {
      if (*(_DWORD *)(a1 + 36) <= a3)
        *(_DWORD *)(v17 + 2) = 0;
      else
        *(_DWORD *)(v17 + 2) = sub_1DB711410(a1);
    }
    else
    {
      v18 = (char *)v16 + 6 * (int)v6--;
      *(_DWORD *)(v17 + 2) = 0;
      v19 = *((_WORD *)v17 + 2);
      v20 = *(_DWORD *)v17;
      v21 = *((_WORD *)v18 + 2);
      *(_DWORD *)v17 = *(_DWORD *)v18;
      *((_WORD *)v17 + 2) = v21;
      *(_DWORD *)v18 = v20;
      *((_WORD *)v18 + 2) = v19;
    }
    v17 -= 6;
    v7 = *(_QWORD *)(a1 + 56);
    v22 = *((unsigned int *)a2 + 1);
    v16 = (_DWORD *)(v7 + v22);
  }
  while ((unint64_t)v17 >= v7 + v22);
  if (!a3 || v6 == *a2)
    return ((_DWORD)a2 - v7);
  *a2 = v6;
  if ((v6 & 0x80000000) != 0)
  {
    v32 = *(unsigned __int8 *)(a1 + v10 - 1 + 166);
    *v16 = -1;
    v33 = a1 + 4 * v32;
    v16[1] = *(_DWORD *)(v33 + 296);
    v16[2] = *(unsigned __int8 *)(a1 + v32 + 128);
    *(_DWORD *)(v33 + 296) = v22;
    ++*(_DWORD *)(v33 + 448);
    if (*(unsigned __int8 **)(a1 + 88) != a2)
    {
      result = 0;
      *(_DWORD *)a2 = -1;
      *((_DWORD *)a2 + 1) = *(_DWORD *)(a1 + 296);
      *((_DWORD *)a2 + 2) = *(unsigned __int8 *)(a1 + 128);
      v35 = (_DWORD)a2 - v7;
LABEL_32:
      *(_DWORD *)(a1 + 296) = v35;
      ++*(_DWORD *)(a1 + 448);
      return result;
    }
    goto LABEL_33;
  }
  if (v6)
  {
    sub_1DB7112D8(a1, a2, v10, *((unsigned __int16 *)a2 + 1) > (int)(16 * v6));
    v7 = *(_QWORD *)(a1 + 56);
  }
  else
  {
    a2[1] = a2[1] & 0x10 | (8 * (*(unsigned __int8 *)v16 > 0x3Fu));
    v36 = *v16;
    *((_WORD *)a2 + 3) = *((_WORD *)v16 + 2);
    *(_DWORD *)(a2 + 2) = v36;
    v37 = *(unsigned __int8 *)(a1 + v10 - 1 + 166);
    *v16 = -1;
    v38 = a1 + 4 * v37;
    v16[1] = *(_DWORD *)(v38 + 296);
    v16[2] = *(unsigned __int8 *)(a1 + v37 + 128);
    v7 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)(v38 + 296) = (_DWORD)v16 - v7;
    ++*(_DWORD *)(v38 + 448);
    a2[3] = (a2[3] + 11) >> 3;
  }
  return ((_DWORD)a2 - v7);
}

uint64_t archive_read_support_format_by_code(int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  char *v18;

  if (sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_format_by_code", a5, a6, a7, a8) == -30)
    return 4294967266;
  switch(((a2 & 0xFF0000u) - 0x10000) >> 16)
  {
    case 0u:
      result = archive_read_support_format_cpio(a1);
      break;
    case 2u:
      result = archive_read_support_format_tar(a1);
      break;
    case 3u:
      result = archive_read_support_format_iso9660(a1, v10, v11, v12, v13, v14, v15, v16);
      break;
    case 4u:
      result = archive_read_support_format_zip(a1, v10, v11, v12, v13, v14, v15, v16);
      break;
    case 5u:
      result = archive_read_support_format_empty(a1);
      break;
    case 6u:
      result = archive_read_support_format_ar(a1);
      break;
    case 7u:
      result = archive_read_support_format_mtree(a1);
      break;
    case 8u:
      result = archive_read_support_format_raw(a1, v10, v11, v12, v13, v14, v15, v16);
      break;
    case 9u:
      result = archive_read_support_format_xar(a1, v10, v11, v12, v13, v14, v15, v16);
      break;
    case 0xAu:
      result = archive_read_support_format_lha(a1);
      break;
    case 0xBu:
      result = archive_read_support_format_cab(a1, v10, v11, v12, v13, v14, v15, v16);
      break;
    case 0xCu:
      result = archive_read_support_format_rar(a1, v10, v11, v12, v13, v14, v15, v16);
      break;
    case 0xDu:
      result = archive_read_support_format_7zip(a1, v10, v11, v12, v13, v14, v15, v16);
      break;
    case 0xEu:
      result = archive_read_support_format_warc(a1, v10, v11, v12, v13, v14, v15, v16);
      break;
    case 0xFu:
      result = archive_read_support_format_rar5(a1, v10, v11, v12, v13, v14, v15, v16);
      break;
    default:
      archive_set_error(a1, 22, "Invalid format code specified", v12, v13, v14, v15, v16, v18);
      return 4294967266;
  }
  return result;
}

uint64_t sub_1DB711934(uint64_t a1)
{
  *(_DWORD *)(a1 + 16) = 393216;
  *(_QWORD *)(a1 + 24) = "Empty file";
  return 1;
}

uint64_t sub_1DB711950()
{
  return 1;
}

uint64_t sub_1DB711958(uint64_t a1, char *__s1, const char *a3)
{
  uint64_t v5;
  uint64_t result;

  v5 = **(_QWORD **)(a1 + 2472);
  if (!strcmp(__s1, "joliet"))
  {
    if (!a3 || !strcmp(a3, "off") || !strcmp(a3, "ignore") || !strcmp(a3, "disable") || !strcmp(a3, "0"))
    {
      result = 0;
      *(_DWORD *)(v5 + 4) = 0;
    }
    else
    {
      result = 0;
      *(_DWORD *)(v5 + 4) = 1;
    }
  }
  else if (!strcmp(__s1, "rockridge") || !strcmp(__s1, "Rockridge"))
  {
    result = 0;
    *(_DWORD *)(v5 + 8) = a3 != 0;
  }
  else
  {
    return 4294967276;
  }
  return result;
}

uint64_t sub_1DB711A4C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  char *v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  int v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  _DWORD *v60;
  int v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  size_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;

  v10 = **(_QWORD **)(a1 + 2472);
  if (!*(_DWORD *)(a1 + 16))
  {
    *(_DWORD *)(a1 + 16) = 0x40000;
    *(_QWORD *)(a1 + 24) = "ISO9660";
  }
  if (!*(_QWORD *)(v10 + 160))
  {
    v32 = (int *)(v10 + 188);
    if (*(_DWORD *)(v10 + 4))
    {
      if (*(_BYTE *)(v10 + 42))
      {
        v33 = *(_DWORD *)(v10 + 196);
        v34 = *(_DWORD *)(v10 + 188);
        v35 = v34 <= v33;
        if (v34 < v33)
          v33 = *(_DWORD *)(v10 + 188);
        if (v35)
          v36 = (int *)(v10 + 188);
        else
          v36 = (int *)(v10 + 196);
LABEL_33:
        v37 = sub_1DB6E26F0(a1, (uint64_t)v33 << 11, a3, a4, a5, a6, a7, a8);
        v17 = v37;
        if ((v37 & 0x8000000000000000) == 0)
        {
          *(_QWORD *)(v10 + 160) = v37;
          v43 = (unsigned __int8 *)sub_1DB6E2588(a1, v36[1], 0, v38, v39, v40, v41, v42);
          if (!v43)
            goto LABEL_50;
          v44 = *(unsigned __int8 *)(v10 + 42);
          *(_BYTE *)(v10 + 42) = 0;
          v45 = sub_1DB71286C(a1, 0, v43, v36[1], v26, v27, v28, v29);
          if (!v45)
            return 4294967266;
          v51 = v45;
          *(_BYTE *)(v10 + 42) = v44;
          if (v36 != v32)
            goto LABEL_68;
          if (*(_BYTE *)(v10 + 40))
            v52 = v44 == 0;
          else
            v52 = 1;
          if (!v52)
          {
            LOBYTE(v44) = 0;
LABEL_67:
            *(_BYTE *)(v10 + 42) = v44;
LABEL_68:
            if (sub_1DB712D64((_DWORD *)a1, v10 + 112, (uint64_t)v51, v51[6], v47, v48, v49, v50))
              return 4294967266;
            if (*(_BYTE *)(v10 + 40))
            {
              *(_DWORD *)(a1 + 16) = 262145;
              *(_QWORD *)(a1 + 24) = "ISO9660 with Rockridge extensions";
            }
            goto LABEL_4;
          }
          if (*(_BYTE *)(v10 + 40) || !v44)
            goto LABEL_68;
          v53 = sub_1DB6E26F0(a1, ((uint64_t)*(int *)(v10 + 196) << 11) - *(_QWORD *)(v10 + 160), (uint64_t)v45, v46, v47, v48, v49, v50);
          v17 = v53;
          if ((v53 & 0x8000000000000000) == 0)
          {
            *(_QWORD *)(v10 + 160) += v53;
            v59 = (unsigned __int8 *)sub_1DB6E2588(a1, *(unsigned int *)(v10 + 200), 0, v54, v55, v56, v57, v58);
            if (v59)
            {
              *(_BYTE *)(v10 + 42) = 0;
              v51 = sub_1DB71286C(a1, 0, v59, *(unsigned int *)(v10 + 200), v26, v27, v28, v29);
              if (!v51)
                return 4294967266;
              goto LABEL_67;
            }
LABEL_50:
            v31 = "Failed to read full block when scanning ISO9660 directory list";
            v60 = (_DWORD *)a1;
            v61 = -1;
LABEL_64:
            archive_set_error(v60, v61, v31, v25, v26, v27, v28, v29, v97);
            return 4294967266;
          }
        }
        if ((_DWORD)v17)
          return v17;
        goto LABEL_4;
      }
    }
    else
    {
      *(_BYTE *)(v10 + 42) = 0;
    }
    v33 = *v32;
    v36 = (int *)(v10 + 188);
    goto LABEL_33;
  }
LABEL_4:
  v99 = 0;
  v17 = sub_1DB7137C0(a1, v10, &v99);
  if ((_DWORD)v17)
    return v17;
  v18 = v99;
  if (!*(_QWORD *)(v99 + 56))
    *(_QWORD *)(v99 + 48) = *(_QWORD *)(v10 + 160);
  v19 = *(_QWORD *)(v10 + 224);
  if (v19)
  {
    sub_1DB6E26F0(a1, v19, v11, v12, v13, v14, v15, v16);
    *(_QWORD *)(v10 + 224) = 0;
  }
  v20 = *(_QWORD *)(v10 + 160);
  v21 = *(_QWORD *)(v18 + 48);
  if (v21 > v20)
  {
    v22 = sub_1DB6E26F0(a1, v21 - v20, v11, v12, v13, v14, v15, v16);
    if (v22 < 0)
    {
      v17 = v22;
      if ((_DWORD)v22)
        return v17;
    }
    else
    {
      *(_QWORD *)(v10 + 160) = *(_QWORD *)(v18 + 48);
    }
  }
  if (!*(_BYTE *)(v10 + 42))
  {
    v62 = (char *)sub_1DB7127E0((uint64_t *)(v10 + 16), v18, 0);
    if (v62)
    {
      *(_QWORD *)(v10 + 24) = 0;
      archive_entry_set_pathname((uint64_t)a2, v62);
      goto LABEL_53;
    }
    goto LABEL_57;
  }
  if (!*(_QWORD *)(v10 + 488))
  {
    v23 = sub_1DB6E3A78(a1, "UTF-16BE", 1);
    *(_QWORD *)(v10 + 488) = v23;
    if (!v23)
      return 4294967266;
  }
  v24 = *(void **)(v10 + 496);
  if (!v24)
  {
    v24 = malloc_type_malloc(0x400uLL, 0x6238885EuLL);
    *(_QWORD *)(v10 + 496) = v24;
    if (!v24)
      goto LABEL_62;
  }
  if (*(_QWORD *)(v10 + 512))
    goto LABEL_20;
  v30 = malloc_type_malloc(0x400uLL, 0xDB06DD11uLL);
  *(_QWORD *)(v10 + 512) = v30;
  if (!v30)
  {
LABEL_62:
    v31 = "No memory";
    goto LABEL_63;
  }
  v24 = *(void **)(v10 + 496);
LABEL_20:
  *(_QWORD *)(v10 + 504) = 0;
  if (sub_1DB712708((uint64_t)v24, (uint64_t *)(v10 + 504), v18))
  {
LABEL_57:
    v31 = "Pathname is too long";
    v60 = (_DWORD *)a1;
    v61 = 79;
    goto LABEL_64;
  }
  if (sub_1DB6E3BD0((uint64_t)a2, *(char **)(v10 + 496), *(_QWORD *)(v10 + 504), *(_QWORD *)(v10 + 488)))
  {
    if (*__error() == 12)
    {
      v31 = "No memory for Pathname";
LABEL_63:
      v60 = (_DWORD *)a1;
      v61 = 12;
      goto LABEL_64;
    }
    v82 = (char *)sub_1DB72D0D4(*(_QWORD *)(v10 + 488));
    archive_set_error((_DWORD *)a1, 79, "Pathname cannot be converted from %s to current locale.", v83, v84, v85, v86, v87, v82);
    v17 = 4294967276;
    goto LABEL_54;
  }
LABEL_53:
  v17 = 0;
LABEL_54:
  v64 = *(_QWORD *)(v18 + 48);
  v63 = *(_QWORD *)(v18 + 56);
  *(_QWORD *)(v10 + 208) = 0;
  *(_QWORD *)(v10 + 216) = v63;
  if ((unint64_t)(v64 + v63) > *(_QWORD *)(v10 + 176))
  {
    v98 = (char *)archive_entry_pathname(a2);
    archive_set_error((_DWORD *)a1, -1, "File is beyond end-of-media: %s", v65, v66, v67, v68, v69, v98);
LABEL_56:
    *(_QWORD *)(v10 + 216) = 0;
    return 4294967276;
  }
  archive_entry_set_mode((uint64_t)a2, *(_WORD *)(v18 + 136));
  archive_entry_set_uid((uint64_t)a2, *(unsigned int *)(v18 + 140));
  archive_entry_set_gid((uint64_t)a2, *(unsigned int *)(v18 + 144));
  archive_entry_set_nlink((uint64_t)a2, *(_DWORD *)(v18 + 160));
  if (*(_DWORD *)(v18 + 88))
    archive_entry_set_birthtime((uint64_t)a2, *(_QWORD *)(v18 + 96), 0);
  else
    archive_entry_unset_birthtime((uint64_t)a2);
  archive_entry_set_mtime((uint64_t)a2, *(_QWORD *)(v18 + 104), 0);
  archive_entry_set_ctime((uint64_t)a2, *(_QWORD *)(v18 + 120), 0);
  archive_entry_set_atime((uint64_t)a2, *(_QWORD *)(v18 + 112), 0);
  archive_entry_set_rdev(a2, *(_DWORD *)(v18 + 128));
  archive_entry_set_size((uint64_t)a2, *(_QWORD *)(v10 + 216));
  v71 = *(char **)(v18 + 216);
  if (v71)
    archive_entry_copy_symlink((uint64_t)a2, v71);
  v72 = *(_QWORD *)(v18 + 152);
  if (v72 != -1 && v72 == *(_QWORD *)(v10 + 72))
  {
    if (*(_BYTE *)(v10 + 42))
    {
      if (sub_1DB6E9970((uint64_t)a2, *(char **)(v10 + 512), *(_QWORD *)(v10 + 520), *(_QWORD *)(v10 + 488)))
      {
        if (*__error() == 12)
        {
          v31 = "No memory for Linkname";
          goto LABEL_63;
        }
        v91 = (char *)sub_1DB72D0D4(*(_QWORD *)(v10 + 488));
        archive_set_error((_DWORD *)a1, 79, "Linkname cannot be converted from %s to current locale.", v92, v93, v94, v95, v96, v91);
        v17 = 4294967276;
      }
    }
    else
    {
      archive_entry_set_hardlink((uint64_t)a2, *(char **)(v10 + 80));
    }
    archive_entry_unset_size((uint64_t)a2);
LABEL_101:
    *(_QWORD *)(v10 + 216) = 0;
    return v17;
  }
  if ((*(_WORD *)(v18 + 136) & 0xF000) != 0x4000)
  {
    v73 = *(_QWORD *)(v18 + 48);
    if (v73 < *(_QWORD *)(v10 + 160))
    {
      v74 = sub_1DB6F802C(a1, v73, 0);
      if (v74 != *(_QWORD *)(v18 + 48))
      {
        archive_set_error((_DWORD *)a1, -1, "Ignoring out-of-order file @%jx (%s) %jd < %jd", v75, v76, v77, v78, v79, *(char **)(v18 + 152));
        goto LABEL_56;
      }
      *(_QWORD *)(v10 + 160) = v74;
    }
  }
  v80 = *(_DWORD *)(v18 + 244);
  *(_DWORD *)(v10 + 232) = v80;
  if (v80)
  {
    *(_DWORD *)(v10 + 248) = 0;
    *(_DWORD *)(v10 + 236) = *(_DWORD *)(v18 + 248);
    v81 = *(_QWORD *)(v18 + 256);
    *(_QWORD *)(v10 + 240) = v81;
    *(_DWORD *)(v10 + 272) = 0;
    *(_QWORD *)(v10 + 296) = 0;
    *(_DWORD *)(v10 + 304) = 0;
    *(_QWORD *)(v10 + 336) = 0;
    archive_entry_set_size((uint64_t)a2, v81);
  }
  *(_QWORD *)(v10 + 72) = *(_QWORD *)(v18 + 152);
  if (*(_BYTE *)(v10 + 42))
  {
    memcpy(*(void **)(v10 + 512), *(const void **)(v10 + 496), *(_QWORD *)(v10 + 504));
    *(_QWORD *)(v10 + 520) = *(_QWORD *)(v10 + 504);
  }
  else
  {
    *(_QWORD *)(v10 + 88) = 0;
    v88 = *(_BYTE **)(v10 + 16);
    if (v88)
      v89 = strlen(*(const char **)(v10 + 16));
    else
      v89 = 0;
    sub_1DB6E323C((uint64_t *)(v10 + 80), v88, v89);
  }
  v90 = *(_QWORD *)(v18 + 272);
  *(_QWORD *)(v10 + 480) = v90;
  if (v90)
    *(_QWORD *)(v10 + 216) = *(_QWORD *)(v90 + 8);
  if (archive_entry_filetype((uint64_t)a2) == 0x4000)
  {
    archive_entry_set_nlink((uint64_t)a2, *(_DWORD *)(v18 + 32) + 2);
    goto LABEL_101;
  }
  return v17;
}

uint64_t sub_1DB71207C(uint64_t a1, size_t *a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  int64_t v24;
  unsigned int v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t result;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  int v41;
  size_t v42;
  unint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  unint64_t v48;
  size_t v49;
  unint64_t v50;
  unint64_t v51;
  BOOL v52;
  unint64_t v53;
  size_t v54;
  uint64_t v55;
  size_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  uint64_t v62;
  unsigned int v63;
  BOOL v64;
  int v65;
  _DWORD *v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  z_stream *v70;
  int v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;

  v73 = 0;
  v12 = *(uint64_t **)(a1 + 2472);
  v13 = *v12;
  v14 = *(_QWORD *)(*v12 + 224);
  if (v14)
  {
    sub_1DB6E26F0(a1, v14, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    *(_QWORD *)(v13 + 224) = 0;
  }
  if (*(uint64_t *)(v13 + 216) <= 0)
  {
    v30 = *(_QWORD *)(v13 + 480);
    if (!v30 || (v31 = *(unint64_t **)(v30 + 16), (*(_QWORD *)(v13 + 480) = v31) == 0))
    {
      *a2 = 0;
      *a3 = 0;
      *a4 = *(_QWORD *)(v13 + 208);
      return 1;
    }
    v32 = *(_QWORD *)(v13 + 160);
    if (*v31 <= v32)
    {
      if (*v31 < v32)
      {
        archive_set_error((_DWORD *)a1, -1, "Ignoring out-of-order file (%s) %jd < %jd", (uint64_t)a4, a5, a6, a7, a8, *(char **)(v13 + 16));
        *a2 = 0;
        *a3 = 0;
        *a4 = *(_QWORD *)(v13 + 208);
        return 4294967276;
      }
    }
    else
    {
      result = sub_1DB6E26F0(a1, *v31 - v32, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (result < 0)
        return result;
      v31 = *(unint64_t **)(v13 + 480);
      *(_QWORD *)(v13 + 160) = *v31;
    }
    *(_QWORD *)(v13 + 216) = v31[1];
  }
  if (*(_DWORD *)(v13 + 232))
  {
    v74 = 0;
    v15 = **(_QWORD **)(a1 + 2472);
    v16 = sub_1DB6E2588(a1, 1uLL, &v74, (uint64_t)a4, a5, a6, a7, a8);
    v22 = v74;
    if (v74 <= 0)
    {
      v40 = "Truncated zisofs file body";
      goto LABEL_73;
    }
    v23 = (char *)v16;
    v24 = *(_QWORD *)(v15 + 216);
    if (v74 > v24)
    {
      v74 = *(_QWORD *)(v15 + 216);
      v22 = v24;
    }
    if (*(_DWORD *)(v15 + 248))
    {
LABEL_9:
      v25 = *(_DWORD *)(v15 + 352);
      if (v25)
        goto LABEL_10;
      v59 = *(_QWORD *)(v15 + 344);
      v60 = v59 + 4;
      if ((unint64_t)(v59 + 4) < *(_QWORD *)(v15 + 328))
      {
        v61 = (unsigned int *)(*(_QWORD *)(v15 + 312) + v59);
        v62 = *v61;
        if (v74 - v22 + *(unsigned int *)(v15 + 272) != v62)
        {
          v40 = "Illegal zisofs block pointers(cannot seek)";
          goto LABEL_73;
        }
        v63 = v61[1];
        v64 = v63 >= v62;
        v65 = v63 - v62;
        if (v64)
        {
          *(_DWORD *)(v15 + 352) = v65;
          *(_QWORD *)(v15 + 344) = v60;
          v70 = (z_stream *)(v15 + 360);
          if (*(_DWORD *)(v15 + 472))
            v71 = inflateReset(v70);
          else
            v71 = inflateInit_(v70, "1.2.12", 112);
          if (v71)
          {
            v40 = "Can't initialize zisofs decompression.";
LABEL_58:
            v66 = (_DWORD *)a1;
            v67 = -1;
LABEL_74:
            archive_set_error(v66, v67, v40, v17, v18, v19, v20, v21, v72);
            return 4294967266;
          }
          *(_DWORD *)(v15 + 472) = 1;
          *(_QWORD *)(v15 + 376) = 0;
          *(_QWORD *)(v15 + 400) = 0;
          v25 = *(_DWORD *)(v15 + 352);
          if (!v25)
          {
            bzero(*(void **)(v15 + 256), *(_QWORD *)(v15 + 264));
            v28 = *(_QWORD *)(v15 + 264);
            goto LABEL_68;
          }
LABEL_10:
          *(_QWORD *)(v15 + 360) = v23;
          if (v22 <= v25)
            v25 = v22;
          *(_DWORD *)(v15 + 368) = v25;
          v26 = *(_QWORD *)(v15 + 264);
          *(_QWORD *)(v15 + 384) = *(_QWORD *)(v15 + 256);
          *(_DWORD *)(v15 + 392) = v26;
          v27 = (char *)inflate((z_streamp)(v15 + 360), 0);
          if (v27 < 2)
          {
            v28 = *(_QWORD *)(v15 + 264) - *(unsigned int *)(v15 + 392);
            v29 = *(_QWORD *)(v15 + 360) - (_QWORD)v23;
            v22 -= v29;
            *(_DWORD *)(v15 + 352) -= v29;
LABEL_68:
            result = 0;
            *a2 = *(_QWORD *)(v15 + 256);
            v68 = v74 - v22;
            *a3 = v28;
            *a4 = *(_QWORD *)(v15 + 208);
            v69 = *(_QWORD *)(v15 + 216) - v68;
            *(_QWORD *)(v15 + 208) += v28;
            *(_QWORD *)(v15 + 216) = v69;
            *(_QWORD *)(v15 + 160) += v68;
            *(_DWORD *)(v15 + 272) += v68;
            *(_QWORD *)(v15 + 224) += v68;
            return result;
          }
          v72 = v27;
          v40 = "zisofs decompression failed (%d)";
          goto LABEL_58;
        }
      }
      v40 = "Illegal zisofs block pointers";
LABEL_73:
      v66 = (_DWORD *)a1;
      v67 = 79;
      goto LABEL_74;
    }
    v41 = *(_DWORD *)(v15 + 236);
    v42 = 1 << v41;
    v43 = 4 * ((unint64_t)(*(_QWORD *)(v15 + 240) + (1 << v41) - 1) >> v41) + 4;
    if (*(_QWORD *)(v15 + 320) < v43)
    {
      v44 = *(void **)(v15 + 312);
      if (v44)
        free(v44);
      v45 = malloc_type_malloc((v43 & 0xFFFFFFFFFFFFFC00) + 1024, 0xC0DF97C5uLL);
      *(_QWORD *)(v15 + 312) = v45;
      if (!v45)
        goto LABEL_59;
      *(_QWORD *)(v15 + 320) = (v43 & 0xFFFFFFFFFFFFFC00) + 1024;
      v42 = 1 << *(_DWORD *)(v15 + 236);
    }
    *(_QWORD *)(v15 + 328) = v43;
    if (*(_QWORD *)(v15 + 264) >= v42)
      goto LABEL_33;
    v46 = *(void **)(v15 + 256);
    if (v46)
      free(v46);
    v47 = malloc_type_malloc(v42, 0xFF0ED656uLL);
    *(_QWORD *)(v15 + 256) = v47;
    if (v47)
    {
LABEL_33:
      *(_QWORD *)(v15 + 264) = v42;
      v48 = *(_QWORD *)(v15 + 296);
      if (v48 <= 0xF)
      {
        if (v22 >= 16 - v48)
          v49 = 16 - v48;
        else
          v49 = v22;
        memcpy((void *)(v15 + v48 + 276), v23, v49);
        v48 = *(_QWORD *)(v15 + 296) + v49;
        *(_QWORD *)(v15 + 296) = v48;
        v22 -= v49;
        v23 += v49;
      }
      if (!*(_DWORD *)(v15 + 304))
      {
        if (v48 != 16)
          goto LABEL_66;
        if (*(_DWORD *)(v15 + 236) != *(unsigned __int8 *)(v15 + 289)
          || *(_BYTE *)(v15 + 288) != 4
          || *(_QWORD *)(v15 + 240) != *(_DWORD *)(v15 + 284)
          || *(_QWORD *)(v15 + 276) != 0x7D6DBC99653E437)
        {
          v40 = "Illegal zisofs file body";
          goto LABEL_73;
        }
        *(_DWORD *)(v15 + 304) = 1;
      }
      v51 = *(_QWORD *)(v15 + 328);
      v50 = *(_QWORD *)(v15 + 336);
      v52 = v51 > v50;
      v53 = v51 - v50;
      if (v52)
      {
        v54 = v22 >= v53 ? v53 : v22;
        memcpy((void *)(*(_QWORD *)(v15 + 312) + v50), v23, v54);
        v55 = *(_QWORD *)(v15 + 328);
        v56 = *(_QWORD *)(v15 + 336) + v54;
        *(_QWORD *)(v15 + 336) = v56;
        v22 -= v54;
        v23 += v54;
        if (v56 == v55)
        {
          *(_QWORD *)(v15 + 344) = 0;
          *(_DWORD *)(v15 + 352) = 0;
          *(_DWORD *)(v15 + 248) = 1;
          goto LABEL_9;
        }
      }
LABEL_66:
      if (!*(_DWORD *)(v15 + 248))
      {
        v28 = 0;
        goto LABEL_68;
      }
      goto LABEL_9;
    }
LABEL_59:
    v40 = "No memory for zisofs decompression";
    v66 = (_DWORD *)a1;
    v67 = 12;
    goto LABEL_74;
  }
  v34 = sub_1DB6E2588(a1, 1uLL, &v73, (uint64_t)a4, a5, a6, a7, a8);
  *a2 = v34;
  if (v73)
  {
    if (!v34)
      return 4294967266;
  }
  else
  {
    archive_set_error((_DWORD *)a1, -1, "Truncated input file", v35, v36, v37, v38, v39, v72);
    if (!*a2)
      return 4294967266;
  }
  result = 0;
  v57 = v73;
  if (v73 >= *(_QWORD *)(v13 + 216))
    v57 = *(_QWORD *)(v13 + 216);
  *a3 = v57;
  *a4 = *(_QWORD *)(v13 + 208);
  v58 = *(_QWORD *)(v13 + 216) - v57;
  *(_QWORD *)(v13 + 208) += v57;
  *(_QWORD *)(v13 + 216) = v58;
  *(_QWORD *)(v13 + 224) = v57;
  *(_QWORD *)(v13 + 160) += v57;
  return result;
}

uint64_t sub_1DB7125EC()
{
  return 0;
}

uint64_t sub_1DB7125F4(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v3;
  int v4;
  uint64_t result;
  int v6;
  signed int v7;

  if (*(_BYTE *)a2 != 2)
    return 0;
  if (*(_QWORD *)(a1 + 528) != *(_QWORD *)(a2 + 72))
    return 0;
  v3 = (unsigned __int8 *)(a1 + 528);
  if (*v3 != *(unsigned __int8 *)(a2 + 882))
    return 0;
  if (memcmp(v3, (const void *)(a2 + 1395), 0x28DuLL))
    return 0;
  if (*(_BYTE *)(a2 + 881) != 1)
    return 0;
  if (!*(_WORD *)(a2 + 128))
    return 0;
  v4 = *(_DWORD *)(a2 + 80);
  if (v4 < 21)
    return 0;
  result = 0;
  v6 = *(_DWORD *)(a2 + 140);
  if (v6 >= 18 && v6 < v4)
  {
    result = 0;
    v7 = bswap32(*(_DWORD *)(a2 + 148));
    if (v7 < v4 && (v7 - 18) <= 0xFFFFFFEE)
    {
      if (*(_BYTE *)(a2 + 156) == 34)
        return 48;
      else
        return 0;
    }
  }
  return result;
}

BOOL sub_1DB7126C0(uint64_t a1, unsigned __int8 *a2)
{
  return *a2 == 255 && a2[6] == 1 && memcmp((const void *)(a1 + 528), a2 + 7, 0x7F9uLL) == 0;
}

uint64_t sub_1DB712708(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v6 = *(_QWORD *)(a3 + 8);
  if (v6 && *(_QWORD *)(v6 + 200))
  {
    if (sub_1DB712708(a1, a2))
      return 0xFFFFFFFFLL;
    *(_BYTE *)(a1 + *a2) = 0;
    *(_BYTE *)(*a2 + a1 + 1) = 47;
    *a2 += 2;
  }
  v7 = *(_QWORD *)(a3 + 200);
  v8 = *a2;
  if (!v7)
  {
    if ((unint64_t)(v8 - 1023) >= 0xFFFFFFFFFFFFFBFFLL)
    {
      *(_BYTE *)(a1 + v8) = 0;
      *(_BYTE *)(*a2 + a1 + 1) = 46;
      v9 = 2;
      goto LABEL_11;
    }
    return 0xFFFFFFFFLL;
  }
  if (v8 + v7 > 0x400)
    return 0xFFFFFFFFLL;
  memcpy((void *)(a1 + v8), *(const void **)(a3 + 192), v7);
  v9 = *(_QWORD *)(a3 + 200);
LABEL_11:
  result = 0;
  *a2 += v9;
  return result;
}

uint64_t sub_1DB7127E0(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v6;

  if (a3 > 1000)
    return 0;
  v6 = *(_QWORD *)(a2 + 8);
  if (v6 && *(_QWORD *)(v6 + 176))
  {
    result = sub_1DB7127E0(a1);
    if (!result)
      return result;
    sub_1DB72CE50(a1, "/");
  }
  if (*(_QWORD *)(a2 + 176))
    sub_1DB6E4384(a1, a2 + 168);
  else
    sub_1DB72CE50(a1, ".");
  return *a1;
}

_QWORD *sub_1DB71286C(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  BOOL v11;
  char *v12;
  _DWORD *v13;
  int v14;
  _QWORD *v15;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  time_t v33;
  unsigned __int8 *v34;
  char v35;
  size_t v36;
  void *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  size_t v44;
  char *v45;
  _DWORD *v46;
  int v47;
  unsigned int v48;
  __int16 v49;
  unint64_t v50;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;

  if (!a4 || ((v10 = *a3, v10 >= 0x22) ? (v11 = v10 > a4) : (v11 = 1), v11))
  {
    v12 = "Invalid length of directory record";
  }
  else
  {
    v18 = **(_QWORD **)(a1 + 2472);
    v19 = a3[32];
    v20 = *(int *)(a3 + 2);
    v21 = sub_1DB712E84(a3 + 10, 4);
    if ((_DWORD)v19 && v10 - 33 >= v19)
    {
      v22 = v20;
      v23 = v21;
      if ((int)v20 < 1)
      {
        if (!v21 || !(_DWORD)v20)
        {
          v24 = *(_QWORD *)(v18 + 168);
          goto LABEL_22;
        }
      }
      else
      {
        v24 = *(_QWORD *)(v18 + 168);
        if ((v21 + v24 - 1) / v24 + v20 <= *(unsigned int *)(v18 + 184))
        {
LABEL_22:
          v25 = v24 * v20;
          if (a2)
          {
            v26 = a2;
            while (*(_QWORD *)(v26 + 48) != v25)
            {
              v26 = *(_QWORD *)(v26 + 8);
              if (!v26)
                goto LABEL_26;
            }
            v12 = "Directory structure contains loop";
            v13 = (_DWORD *)a1;
            v14 = 79;
            goto LABEL_9;
          }
LABEL_26:
          v27 = malloc_type_calloc(1uLL, 0x130uLL, 0x10B0040C474A8FDuLL);
          v15 = v27;
          if (!v27)
          {
            archive_set_error((_DWORD *)a1, 12, "No memory for file entry", v28, v29, v30, v31, v32, v55);
            return v15;
          }
          v27[1] = a2;
          v27[6] = v25;
          v27[7] = v23;
          v33 = sub_1DB712EB8(a3 + 18);
          v15[13] = v33;
          v15[14] = v33;
          v15[15] = v33;
          v15[36] = 0;
          v15[37] = v15 + 36;
          v34 = a3 + 33;
          if (*(_BYTE *)(v18 + 42))
          {
            v35 = -50;
            if (v19 < 0xCE)
              v35 = v19;
            v36 = v35 & 0xFE;
            if (v36 >= 5 && !v34[v36 - 4] && v34[v36 - 3] == 59 && !v34[v36 - 2] && v34[v36 - 1] == 49)
              v36 -= 4;
            v37 = malloc_type_malloc(v36, 0xFEFB72B0uLL);
            v15[24] = v37;
            if (!v37)
            {
              v45 = "No memory for file name";
              v46 = (_DWORD *)a1;
              v47 = 12;
LABEL_110:
              archive_set_error(v46, v47, v45, v38, v39, v40, v41, v42, v55);
              goto LABEL_111;
            }
            memcpy(v37, a3 + 33, v36);
            v15[25] = v36;
          }
          else
          {
            v43 = v19;
            if (v19 >= 3)
            {
              v43 = v19;
              if (v34[v19 - 2] == 59)
              {
                if (v34[v19 - 1] == 49)
                  v43 = v19 - 2;
                else
                  v43 = v19;
              }
            }
            if (v43 < 2)
            {
              v44 = 1;
            }
            else if (v34[v43 - 1] == 46)
            {
              v44 = v43 - 1;
            }
            else
            {
              v44 = v43;
            }
            v15[22] = 0;
            sub_1DB6E323C(v15 + 21, a3 + 33, v44);
          }
          v48 = a3[25];
          if ((v48 & 2) != 0)
            v49 = 16832;
          else
            v49 = -32512;
          *((_WORD *)v15 + 68) = v49;
          *((_DWORD *)v15 + 66) = v48 >> 7;
          if (!v15[7] && (v22 & 0x80000000) == 0)
          {
            v22 = -1;
            v15[6] = -1;
          }
          v15[19] = v22;
          if (*(_DWORD *)(v18 + 8))
          {
            v50 = (unint64_t)&v34[v19 + ((v19 & 1) == 0)];
            v38 = (unint64_t)&a3[v10];
            if (!a2
              && (uint64_t)(v38 - v50) >= 7
              && *(_DWORD *)v50 == 17256531
              && *(unsigned __int16 *)(v50 + 4) == 61374)
            {
              *(_BYTE *)(v18 + 43) = *(_BYTE *)(v50 + 6);
              *(_BYTE *)(v18 + 41) = 1;
              v50 += 7;
            }
            if (*(_BYTE *)(v18 + 41))
            {
              *((_BYTE *)v15 + 208) = 0;
              *((_BYTE *)v15 + 240) = 0;
              if (sub_1DB712F4C(a1, (unint64_t)v15, (unsigned __int8 *)(v50 + *(unsigned __int8 *)(v18 + 43)), v38, v39, v40, v41, v42))
              {
LABEL_111:
                sub_1DB6E7C3C((uint64_t)(v15 + 21));
                free(v15);
                return 0;
              }
              if (v15[7] && (v15[17] & 0xF000) == 0xA000)
              {
                v15[19] = -1;
                *((_OWORD *)v15 + 3) = xmmword_1DB74CAF0;
              }
            }
            else
            {
              *(_DWORD *)(v18 + 8) = 0;
            }
          }
          *((_DWORD *)v15 + 40) = 1;
          if (a2 && (v48 & 2) != 0)
            ++*(_DWORD *)(a2 + 32);
          if (!*(_BYTE *)(v18 + 40))
            goto LABEL_112;
          if (a2)
          {
            if ((v48 & 2) != 0 && !*(_QWORD *)(a2 + 8) && !*(_QWORD *)(v18 + 48))
            {
              v52 = (const char *)v15[21];
              if (v52)
              {
                if (!strcmp((const char *)v15[21], "rr_moved") || !strcmp(v52, ".rr_moved"))
                {
                  *(_QWORD *)(v18 + 48) = v15;
                  *((_WORD *)v15 + 36) = 257;
                  *((_BYTE *)v15 + 74) = 0;
                  --*(_DWORD *)(a2 + 32);
                  goto LABEL_101;
                }
              }
            }
            if (!*((_BYTE *)v15 + 74))
            {
              if (*(_BYTE *)(a2 + 72))
              {
                *((_BYTE *)v15 + 73) = 0;
              }
              else if ((v48 & 2) != 0 && (*(_BYTE *)(a2 + 74) || *(_BYTE *)(a2 + 75)))
              {
                *((_BYTE *)v15 + 75) = 1;
              }
              goto LABEL_101;
            }
            if (*(_BYTE *)(a2 + 72))
            {
              if (v15[10])
              {
                v45 = "Invalid Rockridge RE and CL";
LABEL_109:
                v46 = (_DWORD *)a1;
                v47 = -1;
                goto LABEL_110;
              }
              if ((v48 & 2) != 0)
              {
LABEL_101:
                v53 = v15[10];
                if (v53)
                {
                  if (*(_QWORD *)(a2 + 8) && (v48 & 2) == 0)
                  {
                    ++*(_DWORD *)(a2 + 32);
                    v15[19] = v53 + 1;
                    v15[6] = v53 + 1;
                    v54 = a2;
                    while (*(_QWORD *)(v54 + 48) != v53)
                    {
                      v54 = *(_QWORD *)(v54 + 8);
                      if (!v54)
                      {
                        if (!*(_BYTE *)(a2 + 72))
                          goto LABEL_112;
                        goto LABEL_108;
                      }
                    }
                  }
                  goto LABEL_108;
                }
                goto LABEL_112;
              }
            }
          }
          else if (!*((_BYTE *)v15 + 74))
          {
            if (v15[10])
            {
LABEL_108:
              v45 = "Invalid Rockridge CL";
              goto LABEL_109;
            }
LABEL_112:
            *v15 = *(_QWORD *)(v18 + 104);
            *(_QWORD *)(v18 + 104) = v15;
            return v15;
          }
          v45 = "Invalid Rockridge RE";
          goto LABEL_109;
        }
      }
      v12 = "Invalid location of extent of file";
    }
    else
    {
      v12 = "Invalid length of file identifier";
    }
  }
  v13 = (_DWORD *)a1;
  v14 = -1;
LABEL_9:
  archive_set_error(v13, v14, v12, a4, a5, a6, a7, a8, v55);
  return 0;
}

uint64_t sub_1DB712D64(_DWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  int v12;
  int v14;
  void *v15;
  void *v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  char *v22;

  v12 = *(_DWORD *)(a2 + 8);
  v11 = *(_DWORD *)(a2 + 12);
  if (v11 >= v12)
  {
    if (v12 >= 1024)
      v14 = 2 * v12;
    else
      v14 = 1024;
    if (v14 <= v12 || (v15 = malloc_type_malloc(8 * v14, 0x2004093837F09uLL)) == 0)
    {
      archive_set_error(a1, 12, "Out of memory", a4, a5, a6, a7, a8, v22);
      return 4294967266;
    }
    v16 = v15;
    v17 = *(int *)(a2 + 8);
    if ((_DWORD)v17)
      memcpy(v15, *(const void **)a2, 8 * v17);
    free(*(void **)a2);
    *(_QWORD *)a2 = v16;
    *(_DWORD *)(a2 + 8) = v14;
    v11 = *(_DWORD *)(a2 + 12);
  }
  *(_QWORD *)(a3 + 40) = a4;
  *(_DWORD *)(a2 + 12) = v11 + 1;
  if (v11 < 1)
  {
LABEL_13:
    result = 0;
    **(_QWORD **)a2 = a3;
  }
  else
  {
    while (1)
    {
      v18 = v11 - 1;
      v19 = *(_QWORD **)a2;
      v20 = *(_QWORD *)(*(_QWORD *)a2 + 8 * ((v11 - 1) >> 1));
      if (*(_QWORD *)(v20 + 40) <= a4)
        break;
      v19[v11] = v20;
      v11 = v18 >> 1;
      if (v18 <= 1)
        goto LABEL_13;
    }
    result = 0;
    v19[v11] = a3;
  }
  return result;
}

uint64_t sub_1DB712E84(unsigned __int8 *a1, int a2)
{
  uint64_t v2;

  v2 = *a1;
  if (a2 > 1)
    return v2 | (sub_1DB712E84(a1 + 1) << 8);
  return v2;
}

time_t sub_1DB712EB8(unsigned __int8 *a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  signed __int8 v5;
  time_t result;
  tm v7;

  memset(&v7.tm_wday, 0, 32);
  v1 = *a1;
  v7.tm_mon = a1[1] - 1;
  v7.tm_year = v1;
  v2 = a1[2];
  v3 = a1[3];
  v7.tm_hour = v3;
  v7.tm_mday = v2;
  v4 = a1[4];
  v7.tm_sec = a1[5];
  v7.tm_min = v4;
  v5 = a1[6];
  if ((v5 + 47) <= 0x62u)
  {
    v7.tm_min = v4 + (char)(-15 * (v5 - ((v5 + ((v5 >> 13) & 3)) & 0xFC)));
    v7.tm_hour = v3 - ((char)(v5 + ((v5 >> 13) & 3)) >> 2);
  }
  result = timegm(&v7);
  if (result == -1)
    return 0;
  return result;
}

uint64_t sub_1DB712F4C(uint64_t a1, unint64_t a2, unsigned __int8 *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v14;
  char v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  int v29;
  int v30;
  size_t v31;
  void *v32;
  void *v33;
  const void *v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t *v37;
  _OWORD *v38;
  unint64_t *v39;
  uint64_t v40;
  int v41;
  unsigned __int8 *v42;
  char *v43;
  int v44;
  _BYTE *v45;
  size_t v46;
  unsigned int v47;
  uint64_t *v48;
  char *v49;
  unsigned __int8 *v50;
  unsigned int v51;
  unsigned __int8 v52;
  unsigned int v53;
  unsigned int v54;
  time_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t *v58;
  char *v59;
  uint64_t result;
  char *v61;
  _DWORD *v62;
  int v63;
  char *v64;
  uint64_t *v65;

  v9 = a3 + 4;
  if ((unint64_t)(a3 + 4) > a4)
    goto LABEL_140;
  v10 = a3;
  v11 = *a3;
  if ((v11 - 65) > 0x19)
    goto LABEL_140;
  v64 = (char *)(a2 + 168);
  v65 = (uint64_t *)(a2 + 216);
  v14 = **(_QWORD **)(a1 + 2472);
  v15 = 1;
  while (2)
  {
    v16 = v10[1];
    if ((v16 - 65) > 0x19
      || ((v17 = v10[2], v18 = v17 - 4, v17 >= 4) ? (v19 = (unint64_t)&v10[v17] > a4) : (v19 = 1),
          v19))
    {
      if ((v15 & 1) == 0)
        return 0;
LABEL_140:
      archive_set_error((_DWORD *)a1, 79, "Tried to parse Rockridge extensions, but none found", a4, a5, a6, a7, a8, v64);
      return 4294967276;
    }
    v20 = v10[3];
    switch(v11)
    {
      case 'N':
        if (v16 != 77 || v20 != 1)
          goto LABEL_134;
        if (!*(_BYTE *)(a2 + 208))
          *(_QWORD *)(a2 + 176) = 0;
        *(_BYTE *)(a2 + 208) = 0;
        if (v17 >= 5)
        {
          switch(*v9)
          {
            case 0u:
              if (v18 >= 2)
                sub_1DB6E323C((uint64_t *)v64, v10 + 5, (v17 - 5));
              break;
            case 1u:
              if (v18 >= 2)
              {
                sub_1DB6E323C((uint64_t *)v64, v10 + 5, (v17 - 5));
                *(_BYTE *)(a2 + 208) = 1;
              }
              break;
            case 2u:
              v58 = (uint64_t *)v64;
              v59 = ".";
              goto LABEL_132;
            case 4u:
              v58 = (uint64_t *)v64;
              v59 = "..";
LABEL_132:
              sub_1DB72CE50(v58, v59);
              break;
            default:
              goto LABEL_133;
          }
        }
        goto LABEL_133;
      case 'O':
      case 'Q':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
        goto LABEL_134;
      case 'P':
        if (v16 == 78)
        {
          if (v20 == 1 && (_DWORD)v17 == 20)
          {
            v40 = sub_1DB712E84(v9, 4);
            *(_QWORD *)(a2 + 128) = v40 << 32;
            *(_QWORD *)(a2 + 128) = sub_1DB712E84(v10 + 12, 4) | ((unint64_t)v40 << 32);
            goto LABEL_133;
          }
          goto LABEL_134;
        }
        if (v16 != 88 || v20 != 1)
          goto LABEL_134;
        if (v17 >= 0xC)
        {
          *(_WORD *)(a2 + 136) = sub_1DB712E84(v9, 4);
          if (v17 >= 0x14)
          {
            *(_DWORD *)(a2 + 160) = sub_1DB712E84(v10 + 12, 4);
            if (v17 >= 0x1C)
            {
              *(_DWORD *)(a2 + 140) = sub_1DB712E84(v10 + 20, 4);
              if (v17 >= 0x24)
              {
                *(_DWORD *)(a2 + 144) = sub_1DB712E84(v10 + 28, 4);
                if (v17 >= 0x2C)
                  *(_QWORD *)(a2 + 152) = sub_1DB712E84(v10 + 36, 4);
              }
            }
          }
        }
        goto LABEL_133;
      case 'R':
        if (v16 != 69 || v20 != 1)
          goto LABEL_134;
        *(_BYTE *)(a2 + 74) = 1;
        goto LABEL_133;
      case 'S':
        if (v16 != 76)
        {
          if (v16 == 84 && (_DWORD)v17 == 4 && v20 == 1)
          {
            result = 0;
            *(_WORD *)(v14 + 40) = 0;
            return result;
          }
          goto LABEL_134;
        }
        if (v20 != 1)
          goto LABEL_134;
        if (!*(_BYTE *)(a2 + 240) || !*(_QWORD *)(a2 + 224))
          *(_QWORD *)(a2 + 224) = 0;
        *(_BYTE *)(a2 + 240) = 0;
        if (v17 >= 5)
        {
          if (*v9)
          {
            if (*v9 != 1)
              goto LABEL_133;
            *(_BYTE *)(a2 + 240) = 1;
          }
          if (v18 >= 3)
          {
            v41 = v17 - 5;
            v42 = v10 + 5;
            v43 = "";
            while (2)
            {
              v44 = *v42;
              v45 = v42 + 2;
              v46 = v42[1];
              v47 = v41 - 2;
              sub_1DB72CE50(v65, v43);
              switch(v44)
              {
                case 0:
                  if (v47 >= v46)
                  {
                    sub_1DB6E323C(v65, v45, v46);
                    goto LABEL_75;
                  }
                  goto LABEL_133;
                case 1:
                  if (v47 >= v46)
                  {
                    sub_1DB6E323C(v65, v45, v46);
                    goto LABEL_72;
                  }
                  goto LABEL_133;
                case 2:
                  v48 = v65;
                  v49 = ".";
                  goto LABEL_74;
                case 3:
                case 5:
                case 6:
                case 7:
                  goto LABEL_133;
                case 4:
                  v48 = v65;
                  v49 = "..";
                  goto LABEL_74;
                case 8:
                  sub_1DB72CE50(v65, "/");
LABEL_72:
                  v43 = "";
                  goto LABEL_76;
                default:
                  if (v44 == 16)
                  {
                    *(_QWORD *)(a2 + 224) = 0;
                    v48 = v65;
                    v49 = "ROOT";
                  }
                  else
                  {
                    if (v44 != 32)
                      goto LABEL_133;
                    v48 = v65;
                    v49 = "hostname";
                  }
LABEL_74:
                  sub_1DB72CE50(v48, v49);
LABEL_75:
                  v43 = "/";
LABEL_76:
                  v42 = &v45[v46];
                  v41 = v47 - v46;
                  if ((int)(v47 - v46) <= 1)
                    goto LABEL_133;
                  continue;
              }
            }
          }
        }
        goto LABEL_133;
      case 'T':
        if (v16 != 70 || v20 != 1)
          goto LABEL_134;
        if (v17 < 5)
          goto LABEL_133;
        v50 = v10 + 5;
        v51 = v17 - 5;
        v52 = *v9;
        if ((char)*v9 < 0)
        {
          if (v18 >= 0x12 && (*v9 & 1) != 0)
          {
            *(_DWORD *)(a2 + 88) = 1;
            *(_QWORD *)(a2 + 96) = sub_1DB7136C4(v10 + 5);
            v50 = v10 + 22;
            v51 = v17 - 22;
          }
          if ((v52 & 2) != 0)
          {
            v56 = v51 - 17;
            if (v51 >= 0x11)
            {
              *(_QWORD *)(a2 + 104) = sub_1DB7136C4(v50);
              v50 += 17;
              v51 = v56;
            }
          }
          if ((v52 & 4) != 0)
          {
            v57 = v51 - 17;
            if (v51 >= 0x11)
            {
              *(_QWORD *)(a2 + 112) = sub_1DB7136C4(v50);
              v50 += 17;
              v51 = v57;
            }
          }
          if ((v52 & 8) != 0 && v51 >= 0x11)
          {
            v55 = sub_1DB7136C4(v50);
            goto LABEL_127;
          }
        }
        else
        {
          if (v18 >= 8 && (*v9 & 1) != 0)
          {
            *(_DWORD *)(a2 + 88) = 1;
            *(_QWORD *)(a2 + 96) = sub_1DB712EB8(v10 + 5);
            v50 = v10 + 12;
            v51 = v17 - 12;
          }
          if ((v52 & 2) != 0)
          {
            v53 = v51 - 7;
            if (v51 >= 7)
            {
              *(_QWORD *)(a2 + 104) = sub_1DB712EB8(v50);
              v50 += 7;
              v51 = v53;
            }
          }
          if ((v52 & 4) != 0)
          {
            v54 = v51 - 7;
            if (v51 >= 7)
            {
              *(_QWORD *)(a2 + 112) = sub_1DB712EB8(v50);
              v50 += 7;
              v51 = v54;
            }
          }
          if ((v52 & 8) != 0 && v51 >= 7)
          {
            v55 = sub_1DB712EB8(v50);
LABEL_127:
            *(_QWORD *)(a2 + 120) = v55;
            goto LABEL_133;
          }
        }
        goto LABEL_133;
      case 'Z':
        if (v16 == 70 && v20 == 1 && *v9 == 112 && (_DWORD)v17 == 16 && v10[5] == 122)
        {
          *(_DWORD *)(a2 + 244) = 1;
          *(_DWORD *)(a2 + 248) = v10[7];
          *(_QWORD *)(a2 + 256) = *((unsigned int *)v10 + 2);
        }
        goto LABEL_134;
      default:
        if (v11 != 67)
          goto LABEL_134;
        if (v16 == 76)
        {
          if (v20 == 1 && (_DWORD)v17 == 12)
          {
            *(_QWORD *)(a2 + 80) = *(_QWORD *)(v14 + 168) * *(unsigned int *)v9;
LABEL_133:
            *(_BYTE *)(v14 + 40) = 1;
          }
LABEL_134:
          v10 += v10[2];
          v9 = v10 + 4;
          if ((unint64_t)(v10 + 4) > a4)
            return 0;
          v15 = 0;
          v11 = *v10;
          if ((v11 - 65) > 0x19)
            return 0;
          continue;
        }
        if (v16 != 69 || v20 != 1 || (_DWORD)v17 != 28)
          goto LABEL_134;
        v21 = *(int *)v9;
        v22 = *((unsigned int *)v10 + 3);
        *(_DWORD *)(a2 + 64) = v22;
        v23 = *((unsigned int *)v10 + 5);
        *(_DWORD *)(a2 + 68) = v23;
        v24 = **(_QWORD **)(a1 + 2472);
        v25 = *(_QWORD *)(v24 + 168);
        v26 = v25 * v21;
        if ((*(_WORD *)(a2 + 136) & 0xF000) == 0x8000 && v26 >= *(_QWORD *)(a2 + 48)
          || ((v27 = v23 + v22, v26 >= *(_QWORD *)(v24 + 160)) ? (v28 = v27 > v25) : (v28 = 1),
              v28 || v26 + v27 > *(_QWORD *)(v24 + 176)))
        {
          v61 = "Invalid parameter in SUSP \"CE\" extension";
          v62 = (_DWORD *)a1;
          v63 = -1;
          goto LABEL_144;
        }
        v29 = *(_DWORD *)(v24 + 64);
        v30 = *(_DWORD *)(v24 + 68);
        if (v29 < v30)
          goto LABEL_39;
        if (v30 >= 16)
          v31 = (2 * v30);
        else
          v31 = 16;
        if ((int)v31 > v30)
        {
          v32 = malloc_type_calloc(v31, 0x10uLL, 0x10200405730B0C9uLL);
          if (v32)
          {
            v33 = v32;
            v34 = *(const void **)(v24 + 56);
            if (v34)
            {
              memcpy(v32, v34, 16 * *(int *)(v24 + 64));
              free(*(void **)(v24 + 56));
            }
            *(_QWORD *)(v24 + 56) = v33;
            *(_DWORD *)(v24 + 68) = v31;
            v29 = *(_DWORD *)(v24 + 64);
LABEL_39:
            *(_DWORD *)(v24 + 64) = v29 + 1;
            if (v29 < 1)
            {
LABEL_42:
              v39 = *(unint64_t **)(v24 + 56);
              *v39 = v26;
            }
            else
            {
              while (1)
              {
                v35 = v29 - 1;
                v36 = *(_QWORD *)(v24 + 56);
                v37 = (unint64_t *)(v36 + 16 * ((v29 - 1) >> 1));
                v38 = (_OWORD *)(v36 + 16 * v29);
                if (v26 >= *v37)
                  break;
                *v38 = *(_OWORD *)v37;
                v29 = v35 >> 1;
                if (v35 <= 1)
                  goto LABEL_42;
              }
              *(_QWORD *)v38 = v26;
              v39 = (unint64_t *)(v36 + 16 * v29);
            }
            v39[1] = a2;
            goto LABEL_134;
          }
        }
        v61 = "Out of memory";
        v62 = (_DWORD *)a1;
        v63 = 12;
LABEL_144:
        archive_set_error(v62, v63, v61, a4, a5, a6, a7, a8, v64);
        return 4294967266;
    }
  }
}

time_t sub_1DB7136C4(unsigned __int8 *a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  signed __int8 v5;
  time_t result;
  tm v7;

  memset(&v7.tm_wday, 0, 32);
  v1 = 100 * a1[1] + 1000 * *a1 + 10 * a1[2] + a1[3] - 55228;
  v7.tm_mon = a1[5] + 10 * a1[4] - 528;
  v7.tm_year = v1;
  v2 = a1[7] + 10 * a1[6] - 528;
  v3 = a1[9] + 10 * a1[8] - 528;
  v7.tm_hour = v3;
  v7.tm_mday = v2;
  v4 = a1[11] + 10 * a1[10] - 528;
  v7.tm_sec = a1[13] + 10 * a1[12] - 528;
  v7.tm_min = v4;
  v5 = a1[16];
  if ((v5 + 47) <= 0x62u)
  {
    v7.tm_min = v4 + (char)(-15 * (v5 - ((v5 + ((v5 >> 13) & 3)) & 0xFC)));
    v7.tm_hour = v3 - ((char)(v5 + ((v5 >> 13) & 3)) >> 2);
  }
  result = timegm(&v7);
  if (result == -1)
    return 0;
  return result;
}

uint64_t sub_1DB7137C0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  size_t v30;
  size_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  unsigned __int8 *v38;
  BOOL v39;
  BOOL v40;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  size_t v67;
  size_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  BOOL v74;
  int v75;
  int v76;
  int v77;
  int v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  int v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  char *v96;
  _DWORD *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t i;
  uint64_t v108;
  char *v109;
  int *v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD *v116;
  uint64_t v117;
  uint64_t *v118;
  __int128 v119;

  while (1)
  {
    v3 = a3;
    v4 = a2;
    v117 = 0;
    v118 = 0;
    v6 = (uint64_t *)(a2 + 128);
    v5 = *(_QWORD *)(a2 + 128);
    if (v5)
    {
      v7 = *(_QWORD *)(v5 + 16);
      *v6 = v7;
      if (!v7)
        *(_QWORD *)(a2 + 136) = v6;
      result = 0;
LABEL_5:
      *v3 = v5;
      return result;
    }
    v9 = a1;
    v10 = (int *)(a2 + 112);
    v11 = sub_1DB714064((int *)(a2 + 112));
    *v3 = v11;
    if (v11)
      break;
LABEL_117:
    v89 = (_QWORD *)(v4 + 144);
    v90 = *(_QWORD **)(v4 + 144);
    if (v90)
    {
      v91 = *(_QWORD *)(v4 + 48);
      if (!v91
        || !*(_BYTE *)(v91 + 73)
        || (*(_QWORD *)(v91 + 16) = 0,
            **(_QWORD **)(v4 + 136) = v91,
            *(_QWORD *)(v4 + 136) = v91 + 16,
            (v90 = *(_QWORD **)(v4 + 144)) != 0))
      {
        do
        {
          while (1)
          {
            v92 = (_QWORD *)v90[3];
            *v89 = v92;
            if (!v92)
              *(_QWORD *)(v4 + 152) = v89;
            v93 = v90[36];
            if (v93)
              break;
            v90 = v92;
            if (!v92)
              goto LABEL_131;
          }
          v94 = v90 + 36;
          do
          {
            v95 = *(_QWORD *)(v93 + 24);
            *v94 = v95;
            if (!v95)
              v90[37] = v94;
            *(_QWORD *)(v93 + 16) = 0;
            **(_QWORD **)(v4 + 136) = v93;
            *(_QWORD *)(v4 + 136) = v93 + 16;
            v93 = *v94;
          }
          while (*v94);
          v90 = (_QWORD *)*v89;
        }
        while (*v89);
      }
    }
LABEL_131:
    if (!*v6)
      return 1;
    a1 = v9;
    a2 = v4;
    a3 = v3;
  }
  v18 = v11;
  v19 = (uint64_t *)(v4 + 144);
  while (1)
  {
    v20 = *(_QWORD *)(v18 + 80);
    if (v20)
    {
      v21 = 0;
      while (1)
      {
        v22 = *v19;
        if (*v19)
        {
          v23 = *(_QWORD *)(v22 + 24);
          *v19 = v23;
          if (!v23)
            *(_QWORD *)(v4 + 152) = v19;
        }
        if (v22 == v21)
          break;
        if (*(_QWORD *)(v22 + 48) == v20)
        {
          --*(_DWORD *)(*(_QWORD *)(v22 + 8) + 32);
          v54 = *(_QWORD *)(v18 + 8);
          *(_QWORD *)(v22 + 8) = v54;
          *(_BYTE *)(v22 + 74) = 0;
          if (!*(_BYTE *)(v54 + 75))
          {
            *v3 = v22;
            v100 = *(_QWORD *)(v22 + 288);
            if (v100)
            {
              v101 = (uint64_t *)(v22 + 288);
              do
              {
                v102 = *(_QWORD *)(v100 + 24);
                *v101 = v102;
                if (!v102)
                  *(_QWORD *)(v22 + 296) = v101;
                *(_QWORD *)(v100 + 16) = 0;
                **(_QWORD **)(v4 + 136) = v100;
                *(_QWORD *)(v4 + 136) = v100 + 16;
                v100 = *v101;
              }
              while (*v101);
            }
            v18 = v22;
            break;
          }
          *(_BYTE *)(v22 + 75) = 1;
          v55 = v22;
          while (1)
          {
            v55 = *(_QWORD *)(v55 + 8);
            if (!v55)
              break;
            if (*(_BYTE *)(v55 + 74))
            {
              *(_QWORD *)(v22 + 24) = 0;
              **(_QWORD **)(v55 + 296) = v22;
              *(_QWORD *)(v55 + 296) = v22 + 24;
              v56 = *(_QWORD *)(v22 + 288);
              if (!v56)
                goto LABEL_116;
              v57 = (uint64_t *)(v22 + 288);
LABEL_77:
              v58 = *(_QWORD *)(v56 + 24);
              *v57 = v58;
              if (!v58)
                *(_QWORD *)(v22 + 296) = v57;
              v59 = v56;
              while (1)
              {
                v59 = *(_QWORD *)(v59 + 8);
                if (!v59)
                  goto LABEL_133;
                if (*(_BYTE *)(v59 + 74))
                {
                  *(_QWORD *)(v56 + 24) = 0;
                  **(_QWORD **)(v59 + 296) = v56;
                  *(_QWORD *)(v59 + 296) = v56 + 24;
                  v56 = *v57;
                  if (*v57)
                    goto LABEL_77;
                  goto LABEL_116;
                }
              }
            }
          }
LABEL_133:
          v109 = *(char **)(v4 + 160);
          v96 = "Failed to connect 'CL' pointer to 'RE' rr_moved pointer of Rockridge extensions: current position = %jd,"
                " CL offset = %jd";
          goto LABEL_134;
        }
        *(_QWORD *)(v22 + 24) = 0;
        if (!v21)
          v21 = v22;
        **(_QWORD **)(v4 + 152) = v22;
        *(_QWORD *)(v4 + 152) = v22 + 24;
      }
LABEL_152:
      if ((*(_WORD *)(v18 + 136) & 0xF000) != 0x8000)
        return 0;
      v103 = *(_QWORD *)(v18 + 152);
      if (v103 == -1)
        return 0;
      *(_QWORD *)(v4 + 128) = 0;
      *(_QWORD *)(v4 + 136) = v6;
      v117 = 0;
      v118 = &v117;
      if (*(int *)(v4 + 124) < 1)
        goto LABEL_169;
      v104 = 0;
      do
      {
        v105 = *(_QWORD *)(**(_QWORD **)v10 + 152);
        if (v105 != -1 && v105 != v103)
          break;
        if (*(_QWORD *)(v18 + 152) == -1)
        {
          *(_QWORD *)(v18 + 16) = 0;
          *v118 = v18;
          v118 = (uint64_t *)(v18 + 16);
        }
        else
        {
          ++v104;
          *(_QWORD *)(v18 + 16) = 0;
          **(_QWORD **)(v4 + 136) = v18;
          *(_QWORD *)(v4 + 136) = v18 + 16;
        }
        v18 = sub_1DB714064(v10);
      }
      while (*(int *)(v4 + 124) > 0);
      if (!v104)
      {
LABEL_169:
        *v3 = v18;
        return v18 == 0;
      }
      if (*(_QWORD *)(v18 + 152) == -1)
      {
        *(_QWORD *)(v18 + 16) = 0;
        *v118 = v18;
        v118 = (uint64_t *)(v18 + 16);
      }
      else
      {
        ++v104;
        *(_QWORD *)(v18 + 16) = 0;
        **(_QWORD **)(v4 + 136) = v18;
        *(_QWORD *)(v4 + 136) = v18 + 16;
      }
      if (v104 >= 2)
      {
        for (i = *v6; i; i = *(_QWORD *)(i + 16))
          *(_DWORD *)(i + 160) = v104;
      }
      if (v117)
      {
        **(_QWORD **)(v4 + 136) = v117;
        *(_QWORD *)(v4 + 136) = v118;
      }
      v5 = *v6;
      if (*v6)
      {
        v108 = *(_QWORD *)(v5 + 16);
        *v6 = v108;
        if (!v108)
          *(_QWORD *)(v4 + 136) = v6;
      }
      result = v5 == 0;
      goto LABEL_5;
    }
    if ((*(_WORD *)(v18 + 136) & 0xF000) != 0x4000)
      goto LABEL_152;
    v24 = *(uint64_t **)(v9 + 2472);
    v25 = *v24;
    v26 = *(_QWORD *)(*v24 + 224);
    if (v26)
    {
      sub_1DB6E26F0(v9, v26, v12, v13, v14, v15, v16, v17);
      *(_QWORD *)(v25 + 224) = 0;
    }
    v27 = *(_QWORD *)(v25 + 160);
    v28 = *(_QWORD *)(v18 + 48);
    if (v28 < v27)
    {
      archive_set_error((_DWORD *)v9, -1, "Ignoring out-of-order directory (%s) %jd > %jd", v13, v14, v15, v16, v17, *(char **)(v18 + 168));
      return 4294967276;
    }
    v29 = *(_QWORD *)(v18 + 56);
    if (v29 + v28 > *(_QWORD *)(v25 + 176))
    {
      archive_set_error((_DWORD *)v9, -1, "Directory is beyond end-of-media: %s", v13, v14, v15, v16, v17, *(char **)(v18 + 168));
      return 4294967276;
    }
    if (v28 > v27)
    {
      result = sub_1DB6E26F0(v9, v28 - v27, v12, v13, v14, v15, v16, v17);
      if (result < 0)
      {
        if ((_DWORD)result)
          return result;
        goto LABEL_106;
      }
      *(_QWORD *)(v25 + 160) = *(_QWORD *)(v18 + 48);
      v29 = *(_QWORD *)(v18 + 56);
    }
    v30 = (unint64_t)(*(_QWORD *)(v25 + 168) + v29 - 1) / *(_QWORD *)(v25 + 168) * *(_QWORD *)(v25 + 168);
    v31 = sub_1DB6E2588(v9, v30, 0, v13, v14, v15, v16, v17);
    if (!v31)
      goto LABEL_141;
    v110 = v10;
    v111 = v6;
    v116 = (_DWORD *)v9;
    v112 = v3;
    v113 = v30;
    *(_QWORD *)(v25 + 160) += v30;
    if (v30)
      break;
LABEL_84:
    v9 = (uint64_t)v116;
    sub_1DB6E26F0((uint64_t)v116, v113, v32, v13, v14, v15, v16, v17);
    v6 = v111;
    v3 = v112;
    v10 = v110;
    if (*(_DWORD *)(v25 + 64))
    {
      v65 = *(_QWORD *)(v25 + 160);
      v66 = *(_QWORD *)(v25 + 168);
      while (2)
      {
        if (**(_QWORD **)(v25 + 56) == v65)
        {
          v67 = sub_1DB6E2588((uint64_t)v116, v66, 0, v60, v61, v62, v63, v64);
          if (!v67)
          {
LABEL_141:
            v96 = "Failed to read full block when scanning ISO9660 directory list";
LABEL_134:
            v97 = (_DWORD *)v9;
            v98 = -1;
LABEL_135:
            archive_set_error(v97, v98, v96, v13, v14, v15, v16, v17, v109);
            return 4294967266;
          }
          v68 = v67;
          v69 = *(_QWORD *)(v25 + 56);
          do
          {
            v70 = *(_QWORD *)(v69 + 8);
            v71 = *(unsigned int *)(v70 + 64);
            v72 = *(unsigned int *)(v70 + 68);
            if (v66 < (v72 + v71))
            {
              v96 = "Malformed CE information";
              v97 = v116;
              v98 = 79;
              goto LABEL_135;
            }
            v73 = *(_DWORD *)(v25 + 64);
            v74 = __OFSUB__(v73, 1);
            v75 = v73 - 1;
            if (v75 < 0 == v74)
            {
              *(_DWORD *)(v25 + 64) = v75;
              *(_OWORD *)v69 = *(_OWORD *)(v69 + 16 * v75);
              v76 = *(_DWORD *)(v25 + 64);
              if (v76 >= 2)
              {
                v77 = 0;
                v78 = 0;
                v79 = **(_QWORD **)(v25 + 56);
                v80 = 1;
                do
                {
                  v81 = *(_QWORD *)(v25 + 56);
                  v82 = *(_QWORD *)(v81 + 16 * v80);
                  v83 = v77 + 2;
                  if (v83 >= v76)
                  {
                    v84 = v80;
                  }
                  else if (*(_QWORD *)(v81 + 16 * v83) >= v82)
                  {
                    v84 = v80;
                  }
                  else
                  {
                    v82 = *(_QWORD *)(v81 + 16 * v83);
                    v84 = v83;
                  }
                  if (v79 <= v82)
                    break;
                  v86 = *(_OWORD *)(v81 + 16 * v84);
                  v119 = *(_OWORD *)(v81 + 16 * v78);
                  v85 = v119;
                  *(_OWORD *)(v81 + 16 * v78) = v86;
                  *(_OWORD *)(*(_QWORD *)(v25 + 56) + 16 * v84) = v85;
                  v77 = 2 * v84;
                  v80 = (2 * v84) | 1;
                  v76 = *(_DWORD *)(v25 + 64);
                  v78 = v84;
                }
                while (v80 < v76);
              }
            }
            if (sub_1DB712F4C((uint64_t)v116, v70, (unsigned __int8 *)(v68 + v71), v68 + v71 + v72, v14, v15, v16, v17))return 4294967266;
            if (!*(_DWORD *)(v25 + 64))
              break;
            v69 = *(_QWORD *)(v25 + 56);
          }
          while (*(_QWORD *)v69 == *(_QWORD *)(v25 + 160));
          sub_1DB6E26F0((uint64_t)v116, v66, v87, v13, v14, v15, v16, v17);
          v65 = *(_QWORD *)(v25 + 160) + v66;
          *(_QWORD *)(v25 + 160) = v65;
          if (*(_DWORD *)(v25 + 64))
            continue;
        }
        break;
      }
    }
LABEL_106:
    if (*(_BYTE *)(v18 + 72))
    {
      if (!*(_BYTE *)(v18 + 73))
        goto LABEL_152;
    }
    else
    {
      if (!*(_BYTE *)(v18 + 74))
      {
        if (*(_BYTE *)(v18 + 75))
        {
          v88 = v18;
          while (1)
          {
            v88 = *(_QWORD *)(v88 + 8);
            if (!v88)
              break;
            if (*(_BYTE *)(v88 + 74))
            {
              *(_QWORD *)(v18 + 24) = 0;
              **(_QWORD **)(v88 + 296) = v18;
              *(_QWORD *)(v88 + 296) = v18 + 24;
              goto LABEL_116;
            }
          }
        }
        goto LABEL_152;
      }
      *(_QWORD *)(v18 + 24) = 0;
      **(_QWORD **)(v4 + 152) = v18;
      *(_QWORD *)(v4 + 152) = v18 + 24;
    }
LABEL_116:
    v18 = sub_1DB714064(v10);
    *v3 = v18;
    if (!v18)
      goto LABEL_117;
  }
  v33 = (unsigned __int8 *)v31;
  v114 = 0;
  v115 = v25 + 112;
  while (1)
  {
    v34 = *(_QWORD *)(v25 + 168);
    v35 = (unint64_t)&v33[v34];
    v36 = !*v33 || v34 < 1;
    if (!v36 && v34 > *v33)
      break;
LABEL_38:
    v33 = (unsigned __int8 *)v35;
    v30 -= v34;
    if (!v30)
      goto LABEL_84;
  }
  while (2)
  {
    v38 = v33 + 33;
    v39 = (unint64_t)(v33 + 32) >= v35 || (unint64_t)v38 >= v35;
    if (v39 || v33[32] == 1 && *v38 < 2u)
    {
LABEL_45:
      v33 += *v33;
      if (*v33)
        v40 = (unint64_t)v33 >= v35;
      else
        v40 = 1;
      if (v40 || (unint64_t)&v33[*v33] >= v35)
        goto LABEL_38;
      continue;
    }
    break;
  }
  v42 = sub_1DB71286C((uint64_t)v116, v18, v33, v35 - (_QWORD)v33, v14, v15, v16, v17);
  if (!v42)
  {
    v99 = (uint64_t)v116;
    goto LABEL_138;
  }
  v49 = (uint64_t)v42;
  if (v42[10] || !*((_DWORD *)v42 + 66) && !v114)
  {
    if (sub_1DB712D64(v116, v115, (uint64_t)v42, v42[6], v45, v46, v47, v48))
      return 4294967266;
    goto LABEL_45;
  }
  v50 = (_QWORD *)v114;
  if (!v114)
  {
    v42[34] = 0;
    v42[35] = v42 + 34;
    v50 = v42;
  }
  v51 = malloc_type_malloc(0x18uLL, 0x10200403ED2C137uLL);
  if (v51)
  {
    v13 = *(_QWORD *)(v49 + 48);
    *v51 = v13;
    v53 = *(_QWORD *)(v49 + 56);
    v51[1] = v53;
    v51[2] = 0;
    *(_QWORD *)v50[35] = v51;
    v50[35] = v51 + 2;
    if (v50 == (_QWORD *)v49)
    {
      v114 = v49;
      if (sub_1DB712D64(v116, v115, v49, v13, v14, v15, v16, v17))
        return 4294967266;
    }
    else
    {
      v50[7] += v53;
      if (!*(_DWORD *)(v49 + 264))
        v50 = 0;
      v114 = (uint64_t)v50;
    }
    goto LABEL_45;
  }
  archive_set_error(v116, 12, "No memory for multi extent", v52, v14, v15, v16, v17, v109);
  v99 = (uint64_t)v116;
LABEL_138:
  sub_1DB6E26F0(v99, v113, v43, v44, v45, v46, v47, v48);
  return 4294967266;
}

uint64_t sub_1DB714064(int *a1)
{
  int v1;
  int v2;
  uint64_t *v4;
  uint64_t result;
  int v6;
  int v7;
  unint64_t v8;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;

  v1 = a1[3];
  v2 = v1 - 1;
  if (v1 < 1)
    return 0;
  v4 = *(uint64_t **)a1;
  result = **(_QWORD **)a1;
  a1[3] = v2;
  *v4 = v4[v2];
  if (v1 >= 3)
  {
    v6 = 0;
    v7 = 0;
    v8 = *(_QWORD *)(**(_QWORD **)a1 + 40);
    v9 = 1;
    do
    {
      v10 = *(uint64_t **)a1;
      v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8 * v9) + 40);
      v12 = v6 + 2;
      if (v12 >= v2)
      {
        v13 = v9;
      }
      else if (*(_QWORD *)(v10[v12] + 40) >= v11)
      {
        v13 = v9;
      }
      else
      {
        v11 = *(_QWORD *)(v10[v12] + 40);
        v13 = v12;
      }
      if (v8 <= v11)
        break;
      v14 = v10[v7];
      v10[v7] = v10[v13];
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v14;
      v6 = 2 * v13;
      v9 = (2 * v13) | 1;
      v7 = v13;
    }
    while (v9 < v2);
  }
  return result;
}

uint64_t archive_read_support_filter_lzop(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  char *v21;
  _QWORD *v22;

  if (sub_1DB6E4544("lzop"))
  {
    result = sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_filter_lzop", v3, v4, v5, v6);
    if ((_DWORD)result == -30)
      return result;
    v22 = 0;
    sub_1DB6F7FD0(a1, &v22, v8, v9, v10, v11, v12, v13);
    if (!v19)
    {
      *v22 = 0;
      v20 = v22;
      v22[2] = sub_1DB7141E0;
      v20[3] = sub_1DB714254;
      v20[4] = 0;
      v20[5] = 0;
      archive_set_error(a1, -1, "Using external lzop program for lzop decompression", v14, v15, v16, v17, v18, v21);
      return 4294967276;
    }
  }
  else
  {
    archive_set_error(a1, -1, "Filter not allow-listed in entitlement", v2, v3, v4, v5, v6, v21);
  }
  return 4294967266;
}

uint64_t sub_1DB7141E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v8;
  uint64_t result;
  uint64_t v10;

  v10 = 0;
  v8 = sub_1DB6E22F4(a2, 9uLL, &v10, a4, a5, a6, a7, a8);
  result = 0;
  if (v8 && v10)
  {
    if (*(_QWORD *)v8 ^ 0x1A0A0D004F5A4C89 | *(unsigned __int8 *)(v8 + 8) ^ 0xALL)
      return 0;
    else
      return 72;
  }
  return result;
}

uint64_t sub_1DB714254(uint64_t a1)
{
  uint64_t result;

  result = sub_1DB6FE79C(a1, "lzop -d");
  *(_DWORD *)(a1 + 104) = 11;
  *(_QWORD *)(a1 + 96) = "lzop";
  return result;
}

uint64_t sub_1DB714290(uint64_t a1, uint64_t a2)
{
  return strcmp(*(const char **)(a1 + 48), *(const char **)(a2 + 48));
}

uint64_t sub_1DB71429C(uint64_t a1, const char *a2)
{
  return strcmp(*(const char **)(a1 + 48), a2);
}

uint64_t sub_1DB7142A4(uint64_t a1, char *__s1, _BYTE *a3)
{
  uint64_t v4;
  uint64_t result;
  BOOL v6;

  v4 = **(_QWORD **)(a1 + 2472);
  if (strcmp(__s1, "checkfs"))
    return 4294967276;
  if (a3)
    v6 = *a3 != 0;
  else
    v6 = 0;
  result = 0;
  *(_BYTE *)(v4 + 176) = v6;
  return result;
}

uint64_t sub_1DB714308(uint64_t a1, void **a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int st_mode;
  int v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  size_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 *v72;
  unsigned __int8 *i;
  unsigned int v74;
  uint64_t v75;
  unsigned __int8 *j;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  unsigned int v81;
  int v82;
  size_t v83;
  char *v84;
  int v85;
  size_t v86;
  int v87;
  _QWORD *v88;
  uint64_t *v89;
  _QWORD *v90;
  unsigned int v91;
  uint64_t v92;
  const char *v94;
  uint64_t v95;
  size_t v96;
  const char *v97;
  char *v98;
  int v99;
  const char *v100;
  int v101;
  size_t v102;
  char *v103;
  size_t v104;
  char *v105;
  size_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  void ***v110;
  size_t v111;
  uint64_t v112;
  size_t v113;
  char *v114;
  size_t v116;
  char *v117;
  size_t v119;
  uint64_t v120;
  char *v121;
  unsigned int v122;
  BOOL v123;
  uint64_t v124;
  __int16 v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  _DWORD *v134;
  int v135;
  char *v137;
  const char *v138;
  char *__s;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  stat v145;
  void **v146[3];

  v4 = *(uint64_t **)(a1 + 2472);
  v5 = *v4;
  v6 = *(_DWORD *)(*v4 + 48);
  if ((v6 & 0x80000000) == 0)
  {
    close(v6);
    *(_DWORD *)(v5 + 48) = -1;
  }
  if (*(_QWORD *)(v5 + 64))
    goto LABEL_4;
  v41 = archive_entry_linkresolver_new();
  *(_QWORD *)(v5 + 144) = v41;
  if (!v41)
    return 4294967266;
  archive_entry_linkresolver_set_strategy((uint64_t)v41, 0x80000u);
  LODWORD(v144) = 0;
  *(_DWORD *)(v5 + 52) = 0x80000;
  *(_QWORD *)(v5 + 56) = "mtree";
  v146[0] = 0;
  sub_1DB6E4E50(a1, &v144, v42, v43, v44, v45, v46, v47);
  *(_QWORD *)&v145.st_dev = 0;
  v53 = sub_1DB6E2588(a1, 1uLL, &v145, v48, v49, v50, v51, v52);
  if (!v53)
    goto LABEL_184;
  v54 = (void *)v53;
  v140 = (uint64_t *)(v5 + 152);
  v141 = 0;
  v142 = 1;
  while (2)
  {
    v55 = 0;
    v56 = 0;
LABEL_76:
    v57 = *(_QWORD *)&v145.st_dev;
    if ((*(_QWORD *)&v145.st_dev & 0x8000000000000000) != 0)
      goto LABEL_212;
    v58 = memchr(v54, 10, *(size_t *)&v145.st_dev);
    v64 = v58;
    if (v58)
    {
      v57 = v58 - (_BYTE *)v54 + 1;
      *(_QWORD *)&v145.st_dev = v57;
    }
    if (v57 + v56 >= 0x10000)
    {
      v133 = "Line too long";
      goto LABEL_210;
    }
    if (!sub_1DB6E3190((void **)v5, v57 + v56 + 1))
    {
      v133 = "Can't allocate working buffer";
      v134 = (_DWORD *)a1;
      v135 = 12;
      goto LABEL_211;
    }
    memcpy((void *)(*(_QWORD *)v5 + v56), v54, *(size_t *)&v145.st_dev);
    sub_1DB6E26F0(a1, *(uint64_t *)&v145.st_dev, v65, v66, v67, v68, v69, v70);
    v71 = *(_QWORD *)&v145.st_dev;
    v12 = *(_QWORD *)&v145.st_dev + v56;
    *(_BYTE *)(*(_QWORD *)v5 + *(_QWORD *)&v145.st_dev + v56) = 0;
    v72 = *(unsigned __int8 **)v5;
    for (i = (unsigned __int8 *)(*(_QWORD *)v5 + v55); ; ++i)
    {
      v74 = *i;
      if (v74 > 0x5B)
      {
        if (v74 == 92 && i[1])
        {
          if (i[1] == 10)
          {
            v12 -= 2;
            v72[v12] = 0;
            v72 = *(unsigned __int8 **)v5;
LABEL_94:
            v55 = i - v72;
            v54 = (void *)sub_1DB6E2588(a1, 1uLL, &v145, v59, v60, v61, v62, v63);
            v56 = v12;
            if (!v54)
              goto LABEL_184;
            goto LABEL_76;
          }
          ++i;
        }
        continue;
      }
      if (v74 == 35)
      {
        if (!v64)
          goto LABEL_94;
        continue;
      }
      if (!*i)
        goto LABEL_94;
      if (v74 == 10)
        break;
    }
    if (!v12)
      goto LABEL_184;
    if ((v12 & 0x8000000000000000) == 0)
    {
      v75 = 0;
      for (j = v72 + 1; ; ++j)
      {
        v77 = v72[v75];
        if (v77 > 0x23)
          goto LABEL_106;
        if (((1 << v77) & 0x100000200) == 0)
          break;
        ++v75;
      }
      if (((1 << v77) & 0x800002401) != 0)
      {
LABEL_103:
        v78 = v142;
        goto LABEL_104;
      }
LABEL_106:
      v79 = v56 + v71 - v75;
      v80 = (char *)&v72[v56 - 1 + v71];
      if (&v72[v75] < (unsigned __int8 *)v80)
      {
        if ((v77 & 0x80) == 0)
        {
LABEL_108:
          if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v77 + 60) & 0x40000) != 0)
            goto LABEL_111;
          goto LABEL_209;
        }
        while (1)
        {
          if (!__maskrune(v77, 0x40000uLL))
            goto LABEL_209;
LABEL_111:
          if (j >= (unsigned __int8 *)v80)
            break;
          v81 = *j++;
          v77 = v81;
          if ((v81 & 0x80) == 0)
            goto LABEL_108;
        }
        v77 = v72[v75];
      }
      if (v77 != 47)
      {
        __s = (char *)&v72[v75];
        v87 = v144;
        v88 = malloc_type_malloc(0x40uLL, 0x103004084F83F42uLL);
        if (v88)
        {
          v88[5] = 0;
          v89 = v88 + 5;
          v88[4] = 0;
          *((_WORD *)v88 + 28) = 0;
          v88[6] = 0;
          v90 = (_QWORD *)(v141 + 32);
          if (!v141)
            v90 = (_QWORD *)(v5 + 64);
          v141 = (uint64_t)v88;
          *v90 = v88;
          if (v87)
          {
            if (v79 < 1)
            {
LABEL_142:
              v94 = (const char *)&v72[v75];
              v95 = (uint64_t)&v72[v75];
            }
            else
            {
              while (1)
              {
                v91 = *v80--;
                v92 = (1 << v91) & 0x100002600;
                if (v91 > 0x20 || v92 == 0)
                  break;
                if ((unint64_t)v79-- <= 1)
                {
                  v79 = 0;
                  goto LABEL_142;
                }
              }
              v120 = 0;
              v121 = (char *)&v72[v75];
              v95 = (uint64_t)&v72[v75];
              do
              {
                v122 = v121[v120];
                v123 = v122 > 0x20;
                v124 = (1 << v122) & 0x100002600;
                if (!v123 && v124 != 0)
                  v95 = (uint64_t)&v121[v120 + 1];
                ++v120;
              }
              while (v79 != v120);
              v94 = (const char *)&v72[v75];
            }
            v96 = (size_t)&v72[v75 + v79 - v95];
            v97 = v94;
            v138 = (const char *)v95;
            __s = (char *)v95;
          }
          else
          {
            v96 = strcspn(__s, " \t\r\n");
            v97 = (const char *)&v72[v75 + v96];
            v138 = &v97[v79];
          }
          v107 = malloc_type_malloc(v96 + 1, 0xA994F1CuLL);
          *(_QWORD *)(v141 + 48) = v107;
          if (v107)
          {
            memcpy(v107, __s, v96);
            *(_BYTE *)(*(_QWORD *)(v141 + 48) + v96) = 0;
            sub_1DB7153CC(*(_QWORD *)(v141 + 48), v141);
            *(_QWORD *)(v141 + 24) = 0;
            if (*(_BYTE *)(v141 + 56) && !sub_1DB733364((unint64_t)v140, (_QWORD *)v141))
            {
              v108 = sub_1DB73322C(v140, *(_QWORD *)(v141 + 48));
              do
              {
                v109 = v108;
                v108 = *(_QWORD *)(v108 + 24);
              }
              while (v108);
              *(_QWORD *)(v109 + 24) = v141;
            }
            v110 = v146;
            while (1)
            {
              v110 = (void ***)*v110;
              if (!v110)
                break;
              v111 = strlen((const char *)v110[1]);
              v112 = sub_1DB7155A0((_DWORD *)a1, v89, v110[1], v111);
              if ((_DWORD)v112)
              {
LABEL_215:
                v12 = v112;
                goto LABEL_213;
              }
            }
            while (1)
            {
              v113 = strspn(v97, " \t\r\n");
              v114 = (char *)&v97[v113];
              if (!v97[v113] || v114 >= v138)
                goto LABEL_103;
              v116 = strcspn(&v97[v113], " \t\r\n");
              v97 = &v114[v116];
              v117 = strchr(v114, 61);
              if (v117 > &v114[v116] || v117 == 0)
                v119 = v116;
              else
                v119 = v117 - v114;
              sub_1DB71565C(v89, v114, v119);
              v112 = sub_1DB7155A0((_DWORD *)a1, v89, v114, v116);
              if ((_DWORD)v112)
                goto LABEL_215;
            }
          }
        }
        v135 = *__error();
        v133 = "Can't allocate memory";
        v134 = (_DWORD *)a1;
        goto LABEL_211;
      }
      if (v79 < 5)
        goto LABEL_209;
      if (!strncmp((const char *)&v72[v75], "/set", 4uLL))
      {
        v98 = (char *)&v72[v75];
        v101 = v98[4];
        v100 = v98 + 4;
        v99 = v101;
        if (v101 == 32 || v99 == 9)
        {
          while (1)
          {
            v102 = strspn(v100, " \t\r\n");
            v103 = (char *)&v100[v102];
            if (!v100[v102])
              goto LABEL_103;
            v104 = strcspn(&v100[v102], " \t\r\n");
            v100 = &v103[v104];
            v105 = strchr(v103, 61);
            if (v105 <= &v103[v104])
              v106 = v105 - v103;
            else
              v106 = v104;
            sub_1DB71565C((uint64_t *)v146, v103, v106);
            v12 = sub_1DB7155A0((_DWORD *)a1, v146, v103, v104);
            if ((_DWORD)v12)
              goto LABEL_213;
          }
        }
LABEL_209:
        v137 = (char *)v142;
        v133 = "Can't parse line %ju";
LABEL_210:
        v134 = (_DWORD *)a1;
        v135 = 79;
LABEL_211:
        archive_set_error(v134, v135, v133, v59, v60, v61, v62, v63, v137);
LABEL_212:
        v12 = 4294967266;
LABEL_213:
        sub_1DB7150D0(v146[0]);
        return v12;
      }
      if ((unint64_t)v79 < 7)
        goto LABEL_209;
      if (strncmp((const char *)&v72[v75], "/unset", 6uLL))
        goto LABEL_209;
      v82 = v72[v75 + 6];
      if (v82 != 32 && v82 != 9)
        goto LABEL_209;
      if (strchr((char *)&v72[v75 + 6], 61))
      {
        v134 = (_DWORD *)a1;
        v135 = -1;
        goto LABEL_211;
      }
      v83 = (size_t)&v72[v75 + strspn((const char *)&v72[v75 + 6], " \t\r\n")];
      v85 = *(unsigned __int8 *)(v83 + 6);
      v84 = (char *)(v83 + 6);
      if (!v85)
        goto LABEL_103;
      v78 = v142;
      do
      {
        v86 = strcspn(v84, " \t\r\n");
        if (v86 == 3 && !strncmp(v84, "all", 3uLL))
        {
          sub_1DB7150D0(v146[0]);
          v146[0] = 0;
        }
        else
        {
          sub_1DB71565C((uint64_t *)v146, v84, v86);
        }
        v84 += v86 + strspn(&v84[v86], " \t\r\n");
      }
      while (*v84);
LABEL_104:
      v142 = v78 + 1;
      *(_QWORD *)&v145.st_dev = 0;
      v54 = (void *)sub_1DB6E2588(a1, 1uLL, &v145, v59, v60, v61, v62, v63);
      if (!v54)
      {
LABEL_184:
        *(_QWORD *)(v5 + 72) = *(_QWORD *)(v5 + 64);
        sub_1DB7150D0(v146[0]);
        goto LABEL_4;
      }
      continue;
    }
    break;
  }
  sub_1DB7150D0(v146[0]);
  if ((_DWORD)v12)
    return v12;
LABEL_4:
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v5 + 52);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(v5 + 56);
  v7 = *(_QWORD *)(v5 + 72);
  if (!v7)
    return 1;
  v8 = (char **)(v5 + 96);
  while (2)
  {
    if (!strcmp(*(const char **)(v7 + 48), ".."))
    {
      *(_BYTE *)(v7 + 57) = 1;
      v19 = *(_QWORD *)(v5 + 104);
      if (v19)
      {
        v20 = *v8;
        v21 = (unint64_t)&(*v8)[v19 - 1];
        do
        {
          v22 = (char *)v21;
          if (v21 < (unint64_t)v20)
            break;
          --v21;
        }
        while (*v22 != 47);
        if (v22 >= v20)
          --v22;
        *(_QWORD *)(v5 + 104) = v22 - v20 + 1;
      }
      goto LABEL_70;
    }
    if (*(_BYTE *)(v7 + 57))
      goto LABEL_70;
    v146[0] = a2;
    memset(&v145, 0, sizeof(v145));
    v144 = 0;
    *(_BYTE *)(v7 + 57) = 1;
    archive_entry_set_filetype((uint64_t)a2, 0x8000);
    archive_entry_set_size((uint64_t)a2, 0);
    *(_QWORD *)(v5 + 128) = 0;
    v143 = 0;
    v12 = sub_1DB71570C((_DWORD *)a1, (int8x16_t *)a2, v5, v7, (uint64_t)&v143, v9, v10, v11);
    if (*(_BYTE *)(v7 + 56))
    {
      archive_entry_copy_pathname((uint64_t)a2, *(char **)(v7 + 48));
      v13 = sub_1DB73322C((uint64_t *)(v5 + 152), *(_QWORD *)(v7 + 48));
      if (v13)
      {
        v17 = v13;
        do
        {
          if (*(_BYTE *)(v17 + 56) && !*(_BYTE *)(v17 + 57))
          {
            *(_BYTE *)(v17 + 57) = 1;
            v18 = sub_1DB71570C((_DWORD *)a1, (int8x16_t *)a2, v5, v17, (uint64_t)&v143, v14, v15, v16);
            if (v18 >= (int)v12)
              v12 = v12;
            else
              v12 = v18;
          }
          v17 = *(_QWORD *)(v17 + 24);
        }
        while (v17);
      }
    }
    else
    {
      v23 = *(_QWORD *)(v5 + 104);
      if (v23)
        sub_1DB72CE50((uint64_t *)(v5 + 96), "/");
      sub_1DB72CE50((uint64_t *)(v5 + 96), *(_BYTE **)(v7 + 48));
      archive_entry_copy_pathname((uint64_t)a2, *v8);
      if (archive_entry_filetype((uint64_t)a2) != 0x4000)
        *(_QWORD *)(v5 + 104) = v23;
    }
    if (!*(_BYTE *)(v5 + 176))
      goto LABEL_204;
    *(_DWORD *)(v5 + 48) = -1;
    if (*(_QWORD *)(v5 + 128))
      v24 = *(char **)(v5 + 120);
    else
      v24 = (char *)archive_entry_pathname((uint64_t *)a2);
    if (archive_entry_filetype((uint64_t)a2) == 0x8000
      || archive_entry_filetype((uint64_t)a2) == 0x4000)
    {
      v25 = open(v24, 0x1000000);
      *(_DWORD *)(v5 + 48) = v25;
      sub_1DB6DD880(v25);
      v26 = *(_DWORD *)(v5 + 48);
      if (v26 == -1)
      {
        if (*__error() != 2 || *(_QWORD *)(v5 + 128))
        {
          v27 = __error();
          archive_set_error((_DWORD *)a1, *v27, "Can't open %s", v28, v29, v30, v31, v32, v24);
          v12 = 4294967276;
        }
        goto LABEL_39;
      }
    }
    else
    {
LABEL_39:
      v26 = *(_DWORD *)(v5 + 48);
    }
    if (v26 < 0)
    {
      if (lstat(v24, &v145) == -1)
        goto LABEL_68;
    }
    else if (fstat(v26, &v145) == -1)
    {
      v33 = __error();
      archive_set_error((_DWORD *)a1, *v33, "Could not fstat %s", v34, v35, v36, v37, v38, v24);
      close(*(_DWORD *)(v5 + 48));
      *(_DWORD *)(v5 + 48) = -1;
      v12 = 4294967276;
LABEL_68:
      if ((v143 & 0x800) == 0)
        goto LABEL_204;
LABEL_69:
      v7 = *(_QWORD *)(v5 + 72);
LABEL_70:
      v7 = *(_QWORD *)(v7 + 32);
      *(_QWORD *)(v5 + 72) = v7;
      if (!v7)
        return 1;
      continue;
    }
    break;
  }
  st_mode = v145.st_mode;
  if ((v145.st_mode & 0xF000) == 0x8000)
  {
    if (archive_entry_filetype((uint64_t)a2) == 0x8000)
      goto LABEL_185;
    st_mode = v145.st_mode;
  }
  if ((st_mode & 0xF000) == 0xA000)
  {
    if (archive_entry_filetype((uint64_t)a2) == 40960)
      goto LABEL_185;
    st_mode = v145.st_mode;
  }
  if (st_mode >= 0xC000)
  {
    if (archive_entry_filetype((uint64_t)a2) == 49152)
      goto LABEL_185;
    LOWORD(st_mode) = v145.st_mode;
  }
  if ((st_mode & 0xF000) == 0x2000)
  {
    if (archive_entry_filetype((uint64_t)a2) == 0x2000)
      goto LABEL_185;
    LOWORD(st_mode) = v145.st_mode;
  }
  if ((st_mode & 0xF000) == 0x6000)
  {
    if (archive_entry_filetype((uint64_t)a2) == 24576)
      goto LABEL_185;
    LOWORD(st_mode) = v145.st_mode;
  }
  if ((st_mode & 0xF000) == 0x4000)
  {
    if (archive_entry_filetype((uint64_t)a2) == 0x4000)
      goto LABEL_185;
    LOWORD(st_mode) = v145.st_mode;
  }
  if ((st_mode & 0xF000) == 0x1000 && archive_entry_filetype((uint64_t)a2) == 4096)
  {
LABEL_185:
    v126 = v143;
    if ((v143 & 0x1001) != 1
      && (archive_entry_filetype((uint64_t)a2) == 0x2000
       || archive_entry_filetype((uint64_t)a2) == 24576))
    {
      archive_entry_set_rdev(a2, v145.st_rdev);
    }
    if ((v126 & 0xC) == 0 || (v126 & 0x1000) != 0)
      archive_entry_set_gid((uint64_t)a2, v145.st_gid);
    if ((v126 & 0x600) == 0 || (v126 & 0x1000) != 0)
      archive_entry_set_uid((uint64_t)a2, v145.st_uid);
    if ((v126 & 0x1010) != 0x10)
      archive_entry_set_mtime((uint64_t)a2, v145.st_mtimespec.tv_sec, v145.st_mtimespec.tv_nsec);
    if ((v126 & 0x1020) != 0x20)
      archive_entry_set_nlink((uint64_t)a2, v145.st_nlink);
    if ((v126 & 0x1040) != 0x40)
      archive_entry_set_perm((uint64_t)a2, v145.st_mode);
    if ((v126 & 0x1080) != 0x80)
      archive_entry_set_size((uint64_t)a2, v145.st_size);
    archive_entry_set_ino((uint64_t)a2, v145.st_ino);
    archive_entry_set_dev(a2, v145.st_dev);
    archive_entry_linkify(*(_QWORD *)(v5 + 144), (uint64_t *)v146, &v144);
    a2 = v146[0];
LABEL_204:
    *(_QWORD *)(v5 + 168) = archive_entry_size((uint64_t)a2);
    *(_QWORD *)(v5 + 40) = 0;
    return v12;
  }
  v40 = *(_DWORD *)(v5 + 48);
  if ((v40 & 0x80000000) == 0)
    close(v40);
  *(_DWORD *)(v5 + 48) = -1;
  if ((v143 & 0x800) != 0)
    goto LABEL_69;
  if (!(_DWORD)v12)
  {
    v127 = (char *)archive_entry_pathname((uint64_t *)a2);
    archive_set_error((_DWORD *)a1, -1, "mtree specification has different type for %s", v128, v129, v130, v131, v132, v127);
    return 4294967276;
  }
  return v12;
}

uint64_t sub_1DB714F7C(uint64_t a1, _QWORD *a2, ssize_t *a3, _QWORD *a4)
{
  uint64_t *v8;
  uint64_t v9;
  int v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  ssize_t v19;
  ssize_t v20;
  uint64_t result;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;

  v8 = *(uint64_t **)(a1 + 2472);
  v9 = *v8;
  v10 = *(_DWORD *)(*v8 + 48);
  if (v10 < 0)
  {
    *a2 = 0;
    *a4 = 0;
    result = 1;
    *a3 = 0;
    return result;
  }
  v11 = *(void **)(v9 + 32);
  if (!v11)
  {
    *(_QWORD *)(v9 + 24) = 0x10000;
    v12 = malloc_type_malloc(0x10000uLL, 0xD8B7F2F5uLL);
    *(_QWORD *)(v9 + 32) = v12;
    if (!v12)
    {
      archive_set_error((_DWORD *)a1, 12, "Can't allocate memory", v13, v14, v15, v16, v17, v28);
      return 4294967266;
    }
    v11 = v12;
    v10 = *(_DWORD *)(v9 + 48);
  }
  *a2 = v11;
  *a4 = *(_QWORD *)(v9 + 40);
  if (*(_QWORD *)(v9 + 24) >= *(_QWORD *)(v9 + 168) - *(_QWORD *)(v9 + 40))
    v18 = *(_QWORD *)(v9 + 168) - *(_QWORD *)(v9 + 40);
  else
    v18 = *(_QWORD *)(v9 + 24);
  v19 = read(v10, *(void **)(v9 + 32), v18);
  if (v19 < 0)
  {
    v22 = __error();
    archive_set_error((_DWORD *)a1, *v22, "Can't read", v23, v24, v25, v26, v27, v28);
    return 4294967276;
  }
  else
  {
    v20 = v19;
    if (v19)
    {
      result = 0;
      *(_QWORD *)(v9 + 40) += v20;
      *a3 = v20;
    }
    else
    {
      *a3 = 0;
      return 1;
    }
  }
  return result;
}

uint64_t sub_1DB715098(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;

  v1 = *(uint64_t **)(a1 + 2472);
  v2 = *v1;
  v3 = *(_DWORD *)(*v1 + 48);
  if ((v3 & 0x80000000) == 0)
  {
    close(v3);
    *(_DWORD *)(v2 + 48) = -1;
  }
  return 0;
}

void sub_1DB7150D0(void **a1)
{
  void **v1;
  void **v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (void **)*v1;
      free(v1[1]);
      free(v1);
      v1 = v2;
    }
    while (v2);
  }
}

uint64_t sub_1DB715108(signed __int8 *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  signed __int8 v8;
  int v9;
  unsigned __int8 *v10;
  signed __int8 v13;
  int v14;
  uint64_t v16;
  char **v17;
  char *v18;
  char **i;
  int v20;
  char *v21;
  unsigned int v22;
  char j;
  int v24;

  if (a2 >= 1)
  {
    v6 = a2;
    v7 = 0;
    while (1)
    {
      v8 = *a1;
      if (!*a1)
        return v7;
      v9 = 0;
      v10 = (unsigned __int8 *)&a1[v6];
      while (1)
      {
        if (v8 != 32 && v8 != 9)
        {
          v10 = (unsigned __int8 *)a1;
          goto LABEL_13;
        }
        if (v6-- <= 1)
          break;
        v13 = *++a1;
        v8 = v13;
        v9 = 1;
      }
      v6 = 0;
      v8 = *v10;
      v9 = 1;
LABEL_13:
      if (v8 == 92)
      {
        v14 = v10[1];
        if (v14 == 10 || v14 == 13)
          return v7;
      }
      else if (v8 == 10 || v8 == 13)
      {
        return v7;
      }
      if (((a4 == 0) & (v9 ^ 1)) != 0)
        return 0xFFFFFFFFLL;
      if (a4 && !v6)
        return v7;
      if (a3 && (int)sub_1DB7152FC(v10, "all", v6) > 0)
        return 1;
      v16 = v8 - 99;
      if (v16 > 0x12)
        return 0xFFFFFFFFLL;
      if (((0x79E5Bu >> v16) & 1) == 0)
        return 0xFFFFFFFFLL;
      v17 = (&off_1EA322820)[v16];
      v18 = *v17;
      if (!*v17)
        return 0xFFFFFFFFLL;
      for (i = v17 + 1; ; ++i)
      {
        v20 = sub_1DB7152FC(v10, v18, v6);
        if (v20 >= 1)
          break;
        v21 = *i;
        v18 = v21;
        if (!v21)
          return 0xFFFFFFFFLL;
      }
      v22 = v20;
      a1 = (signed __int8 *)&v10[v20];
      v6 -= v22;
      v7 = (v7 + 1);
      if (*a1 == 61)
      {
        ++a1;
        if (v6 < 2)
        {
          --v6;
          j = 1;
          if (a3)
            goto LABEL_46;
        }
        else
        {
          for (j = 1; ; j = 0)
          {
            v24 = *a1;
            if (v24 == 32 || v24 == 9)
              break;
            ++a1;
            if (--v6 < 2)
              return v7;
          }
          --v6;
          if (a3)
            goto LABEL_46;
        }
        if ((j & 1) != 0)
          return 0xFFFFFFFFLL;
      }
LABEL_46:
      if (v6 <= 0)
        return v7;
    }
  }
  return 0;
}

uint64_t sub_1DB7152FC(unsigned __int8 *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v8;

  if (a3 < 1)
  {
    a3 = 0;
LABEL_10:
    if (*a2)
      return 0;
    v5 = *a1;
  }
  else
  {
    v3 = 0;
    v4 = a3 + 1;
    while (1)
    {
      v5 = a1[v3];
      if (!a1[v3])
      {
        a2 += v3;
        a1 += v3;
        a3 = v3;
        goto LABEL_10;
      }
      if (!a2[v3])
        break;
      if (v5 != a2[v3])
        return 0;
      ++v3;
      if (--v4 <= 1)
      {
        a1 += a3;
        a2 += a3;
        goto LABEL_10;
      }
    }
    a1 += v3;
    a3 = v3;
  }
  if (v5 > 0x3D || ((1 << v5) & 0x2000000100002600) == 0)
  {
    if (v5 != 92)
      return 0;
    v8 = a1[1];
    if (v8 != 10 && v8 != 13)
      return 0;
  }
  return a3;
}

unint64_t sub_1DB7153CC(unint64_t __s1, uint64_t a2)
{
  char *v3;
  char v4;
  char *v5;
  char *v6;
  int v7;
  char *v8;
  char *v9;

  v3 = (char *)__s1;
  if (a2)
  {
    __s1 = strcmp((const char *)__s1, ".");
    if (!(_DWORD)__s1)
      *(_BYTE *)(a2 + 56) = 1;
  }
  v4 = *v3;
  if (*v3)
  {
    v5 = v3;
    do
    {
      v6 = v5 + 1;
      if (a2 && v4 == 47)
      {
        *(_BYTE *)(a2 + 56) = 1;
        v4 = 47;
      }
      else if (v4 == 92)
      {
        v7 = *v6;
        v4 = 92;
        if (v7 <= 97)
        {
          if (v7 > 91)
          {
            v6 = v5 + 2;
            if (v7 == 97)
              v9 = v5 + 2;
            else
              v9 = v5 + 1;
            if (v7 == 97)
              v4 = 7;
            else
              v4 = 92;
            if (v7 == 92)
              v4 = 92;
            else
              v6 = v9;
          }
          else
          {
            __s1 = (v7 - 49);
            if (__s1 < 3)
              goto LABEL_15;
            if (v7 == 48)
            {
              __s1 = (unint64_t)(v5 + 2);
              if (v5[2] - 56 >= 0xFFFFFFF8)
              {
LABEL_15:
                __s1 = v5[2] & 0xF8;
                if ((_DWORD)__s1 == 48)
                {
                  __s1 = v5[3] & 0xF8;
                  v4 = (8 * v5[2]) ^ 0x80 | ((_BYTE)v7 << 6) | (v5[3] - 48);
                  v6 = v5 + 4;
                  if ((_DWORD)__s1 != 48)
                  {
                    v6 = v5 + 1;
                    v4 = 92;
                  }
                }
                else
                {
                  v4 = 92;
                }
                goto LABEL_45;
              }
              v4 = 0;
              v6 = v5 + 2;
            }
          }
        }
        else
        {
          __s1 = (v7 - 110);
          switch(*v6)
          {
            case 'n':
              v6 = v5 + 2;
              v4 = 10;
              break;
            case 'o':
            case 'p':
            case 'q':
            case 'u':
              break;
            case 'r':
              v6 = v5 + 2;
              v4 = 13;
              break;
            case 's':
              v6 = v5 + 2;
              v4 = 32;
              break;
            case 't':
              v6 = v5 + 2;
              v4 = 9;
              break;
            case 'v':
              v6 = v5 + 2;
              v4 = 11;
              break;
            default:
              v6 = v5 + 2;
              if (v7 == 102)
                v8 = v5 + 2;
              else
                v8 = v5 + 1;
              if (v7 == 102)
                v4 = 12;
              else
                v4 = 92;
              if (v7 == 98)
                v4 = 8;
              else
                v6 = v8;
              break;
          }
        }
      }
LABEL_45:
      *v3++ = v4;
      v4 = *v6;
      v5 = v6;
    }
    while (*v6);
  }
  *v3 = 0;
  return __s1;
}

uint64_t sub_1DB7155A0(_DWORD *a1, _QWORD *a2, const void *a3, size_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t result;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;

  v8 = malloc_type_malloc(0x10uLL, 0x30040E4270A41uLL);
  if (v8)
  {
    v9 = v8;
    v10 = malloc_type_malloc(a4 + 1, 0xCBA73808uLL);
    v9[1] = v10;
    if (v10)
    {
      memcpy(v10, a3, a4);
      result = 0;
      *(_BYTE *)(v9[1] + a4) = 0;
      *v9 = *a2;
      *a2 = v9;
      return result;
    }
    free(v9);
  }
  v12 = __error();
  archive_set_error(a1, *v12, "Can't allocate memory", v13, v14, v15, v16, v17, v18);
  return 4294967266;
}

void sub_1DB71565C(uint64_t *a1, char *__s2, size_t __n)
{
  uint64_t v3;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;

  v3 = *a1;
  if (*a1)
  {
    v7 = 0;
    while (1)
    {
      v8 = (_QWORD *)v3;
      v9 = *(char **)(v3 + 8);
      if (!strncmp(v9, __s2, __n) && (!v9[__n] || v9[__n] == 61))
        break;
      v3 = *v8;
      v7 = v8;
      if (!*v8)
        return;
    }
    v10 = *v8;
    if (v7)
    {
      *v7 = v10;
    }
    else
    {
      *a1 = v10;
      v9 = (char *)v8[1];
    }
    free(v9);
    free(v8);
  }
}

uint64_t sub_1DB71570C(_DWORD *a1, int8x16_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  _DWORD *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  int v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  __int16 v51;
  uint64_t v52;
  char *v54;
  uint64_t *v55;
  int v58;
  unsigned __int8 *v59;

  v10 = *(uint64_t ***)(a4 + 40);
  if (!v10)
  {
LABEL_97:
    if ((*(_BYTE *)(a5 + 1) & 1) != 0)
      return 0;
    archive_set_error(a1, 79, "Missing type keyword in mtree specification", a4, a5, a6, a7, a8, v54);
    return 4294967276;
  }
  LODWORD(v11) = 0;
  v55 = (uint64_t *)(a3 + 120);
  do
  {
    v12 = (char *)v10[1];
    if (!*v12)
      goto LABEL_80;
    if (!strcmp((const char *)v10[1], "nochange"))
    {
      v34 = 0;
      v35 = *(_DWORD *)a5 | 0x1000;
LABEL_42:
      *(_DWORD *)a5 = v35;
      goto LABEL_81;
    }
    if (!strcmp(v12, "optional"))
    {
      v34 = 0;
      v35 = *(_DWORD *)a5 | 0x800;
      goto LABEL_42;
    }
    if (!strcmp(v12, "ignore"))
      goto LABEL_80;
    v13 = strchr(v12, 61);
    if (v13)
    {
      *v13 = 0;
      v19 = v13 + 1;
      v59 = (unsigned __int8 *)(v13 + 1);
      switch(*v12)
      {
        case 'c':
          if (!strcmp(v12, "content") || !strcmp(v12, "contents"))
          {
            sub_1DB7153CC((unint64_t)v19, 0);
            *(_QWORD *)(a3 + 128) = 0;
            v42 = strlen(v19);
            sub_1DB6E323C(v55, v19, v42);
            break;
          }
          if (!strcmp(v12, "cksum"))
            break;
          goto LABEL_12;
        case 'd':
LABEL_12:
          if (strcmp(v12, "device"))
            goto LABEL_13;
          v58 = 0;
          *(_DWORD *)a5 |= 1u;
          v34 = sub_1DB715EEC(&v58, a1, v19);
          if (!v34)
            archive_entry_set_rdev(a2, v58);
          goto LABEL_81;
        case 'f':
LABEL_13:
          if (strcmp(v12, "flags"))
            goto LABEL_14;
          *(_DWORD *)a5 |= 2u;
          archive_entry_copy_fflags_text(a2, v19);
          break;
        case 'g':
LABEL_14:
          if (!strcmp(v12, "gid"))
          {
            *(_DWORD *)a5 |= 4u;
            v40 = sub_1DB716094(&v59, 0xAu);
            archive_entry_set_gid((uint64_t)a2, v40);
            break;
          }
          if (!strcmp(v12, "gname"))
          {
            *(_DWORD *)a5 |= 8u;
            archive_entry_copy_gname((uint64_t)a2, v19);
            break;
          }
LABEL_16:
          if (!strcmp(v12, "inode"))
          {
            v41 = sub_1DB716094(&v59, 0xAu);
            archive_entry_set_ino((uint64_t)a2, v41);
            break;
          }
LABEL_17:
          if (!strcmp(v12, "link"))
          {
            archive_entry_copy_symlink((uint64_t)a2, v19);
            break;
          }
LABEL_18:
          if (!strcmp(v12, "md5") || !strcmp(v12, "md5digest"))
          {
            v36 = a1;
            v37 = (uint64_t)a2;
            v38 = v19;
            v39 = 1;
LABEL_87:
            sub_1DB71627C(v36, v37, v38, v39, v20, v21, v22, v23);
            v34 = v50;
            goto LABEL_81;
          }
          if (!strcmp(v12, "mode"))
          {
            if ((*v19 & 0xF8) == 0x30)
            {
              *(_DWORD *)a5 |= 0x40u;
              v45 = sub_1DB716094(&v59, 8u);
              archive_entry_set_perm((uint64_t)a2, v45);
              break;
            }
            archive_set_error(a1, 79, "Symbolic or non-octal mode \"%s\" unsupported", v24, v25, v26, v27, v28, v19);
            goto LABEL_44;
          }
LABEL_21:
          if (!strcmp(v12, "nlink"))
          {
            *(_DWORD *)a5 |= 0x20u;
            v43 = sub_1DB716094(&v59, 0xAu);
            archive_entry_set_nlink((uint64_t)a2, v43);
            break;
          }
LABEL_22:
          if (!strcmp(v12, "resdevice"))
          {
            v58 = 0;
            v34 = sub_1DB715EEC(&v58, a1, v19);
            if (!v34)
              archive_entry_set_dev(a2, v58);
            goto LABEL_81;
          }
          if (!strcmp(v12, "rmd160") || !strcmp(v12, "rmd160digest"))
          {
            v36 = a1;
            v37 = (uint64_t)a2;
            v38 = v19;
            v39 = 2;
            goto LABEL_87;
          }
LABEL_25:
          if (!strcmp(v12, "sha1") || !strcmp(v12, "sha1digest"))
          {
            v36 = a1;
            v37 = (uint64_t)a2;
            v38 = v19;
            v39 = 3;
            goto LABEL_87;
          }
          if (!strcmp(v12, "sha256") || !strcmp(v12, "sha256digest"))
          {
            v36 = a1;
            v37 = (uint64_t)a2;
            v38 = v19;
            v39 = 4;
            goto LABEL_87;
          }
          if (!strcmp(v12, "sha384") || !strcmp(v12, "sha384digest"))
          {
            v36 = a1;
            v37 = (uint64_t)a2;
            v38 = v19;
            v39 = 5;
            goto LABEL_87;
          }
          if (!strcmp(v12, "sha512") || !strcmp(v12, "sha512digest"))
          {
            v36 = a1;
            v37 = (uint64_t)a2;
            v38 = v19;
            v39 = 6;
            goto LABEL_87;
          }
          if (!strcmp(v12, "size"))
          {
            v52 = sub_1DB716094(&v59, 0xAu);
            archive_entry_set_size((uint64_t)a2, v52);
            break;
          }
LABEL_34:
          if (!strcmp(v12, "tags"))
            break;
          if (!strcmp(v12, "time"))
          {
            *(_DWORD *)a5 |= 0x10u;
            v46 = sub_1DB716094(&v59, 0xAu);
            if (*v59 == 46)
            {
              ++v59;
              v47 = sub_1DB716094(&v59, 0xAu);
              v48 = 999999999;
              if (v47 < 999999999)
                v48 = v47;
              v49 = v48 & ~(v48 >> 63);
            }
            else
            {
              v49 = 0;
            }
            archive_entry_set_mtime((uint64_t)a2, v46, v49);
          }
          else
          {
            if (!strcmp(v12, "type"))
            {
              switch(*v19)
              {
                case 'b':
                  if (strcmp(v19, "block"))
                    goto LABEL_71;
                  v51 = 24576;
                  goto LABEL_95;
                case 'c':
LABEL_71:
                  if (strcmp(v19, "char"))
                    goto LABEL_72;
                  v51 = 0x2000;
                  goto LABEL_95;
                case 'd':
LABEL_72:
                  if (strcmp(v19, "dir"))
                    goto LABEL_73;
                  v51 = 0x4000;
                  goto LABEL_95;
                case 'f':
LABEL_73:
                  if (!strcmp(v19, "fifo"))
                  {
                    v51 = 4096;
                  }
                  else if (!strcmp(v19, "file"))
                  {
                    v51 = 0x8000;
                  }
                  else
                  {
LABEL_75:
                    if (strcmp(v19, "link"))
                    {
LABEL_76:
                      archive_set_error(a1, 79, "Unrecognized file type \"%s\"; assuming \"file\"",
                        v29,
                        v30,
                        v31,
                        v32,
                        v33,
                        v19);
                      archive_entry_set_filetype((uint64_t)a2, 0x8000);
                      goto LABEL_44;
                    }
                    v51 = -24576;
                  }
LABEL_95:
                  archive_entry_set_filetype((uint64_t)a2, v51);
                  v34 = 0;
                  v35 = *(_DWORD *)a5 | 0x100;
                  break;
                case 'l':
                  goto LABEL_75;
                default:
                  goto LABEL_76;
              }
              goto LABEL_42;
            }
LABEL_37:
            if (!strcmp(v12, "uid"))
            {
              *(_DWORD *)a5 |= 0x200u;
              v44 = sub_1DB716094(&v59, 0xAu);
              archive_entry_set_uid((uint64_t)a2, v44);
            }
            else
            {
              if (strcmp(v12, "uname"))
              {
LABEL_39:
                archive_set_error(a1, 79, "Unrecognized key %s=%s", v14, v15, v16, v17, v18, v12);
                goto LABEL_44;
              }
              *(_DWORD *)a5 |= 0x400u;
              archive_entry_copy_uname((uint64_t)a2, v19);
            }
          }
          break;
        case 'i':
          goto LABEL_16;
        case 'l':
          goto LABEL_17;
        case 'm':
          goto LABEL_18;
        case 'n':
          goto LABEL_21;
        case 'r':
          goto LABEL_22;
        case 's':
          goto LABEL_25;
        case 't':
          goto LABEL_34;
        case 'u':
          goto LABEL_37;
        default:
          goto LABEL_39;
      }
LABEL_80:
      v34 = 0;
      goto LABEL_81;
    }
    archive_set_error(a1, 79, "Malformed attribute \"%s\" (%d)", v14, v15, v16, v17, v18, v12);
LABEL_44:
    v34 = -20;
LABEL_81:
    if (v34 >= (int)v11)
      v11 = v11;
    else
      v11 = v34;
    v10 = (uint64_t **)*v10;
  }
  while (v10);
  if (!(_DWORD)v11)
    goto LABEL_97;
  return v11;
}

uint64_t sub_1DB715EEC(_DWORD *a1, _DWORD *a2, char *__s)
{
  char *v6;
  char *v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  int v15;
  uint64_t (*v16)(void);
  uint64_t v17;
  const char *v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char *v21;
  int v22;
  uint64_t result;
  char *v24;
  const char *v25;
  unsigned __int8 *v26[5];

  v26[4] = *(unsigned __int8 **)MEMORY[0x1E0C80C00];
  v26[0] = (unsigned __int8 *)__s;
  *a1 = 0;
  v6 = strchr(__s, 44);
  if (!v6)
  {
    v22 = sub_1DB716094(v26, 0);
LABEL_13:
    result = 0;
    *a1 = v22;
    return result;
  }
  v7 = v6;
  *v6 = 0;
  v8 = (uint64_t (*)(void))sub_1DB70950C(__s);
  if (v8)
  {
    v15 = v7[1];
    v14 = v7 + 1;
    if (v15)
    {
      v16 = v8;
      v17 = 0;
      v25 = 0;
      do
      {
        v18 = &v14[strcspn(v14, ",")];
        if (*v18)
          *v18++ = 0;
        v25 = v14;
        if (!*v14)
        {
          v21 = "Missing number";
          goto LABEL_18;
        }
        if (v17 == 3)
        {
          v21 = "Too many arguments";
          goto LABEL_18;
        }
        v19 = (unsigned __int8 *)sub_1DB716094((unsigned __int8 **)&v25, 0);
        v20 = v17 + 1;
        v26[++v17] = v19;
        v14 = v18;
      }
      while (*v18);
      if (v20 <= 1)
        goto LABEL_11;
      v22 = v16();
      goto LABEL_13;
    }
LABEL_11:
    v21 = "Not enough arguments";
LABEL_18:
    archive_set_error(a2, 79, v21, v9, v10, v11, v12, v13, v24);
  }
  else
  {
  }
  return 4294967276;
}

uint64_t sub_1DB716094(unsigned __int8 **a1, unsigned int a2)
{
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  signed int v9;
  uint64_t v10;
  char *v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int64_t v15;
  int v16;
  int v17;
  int v18;
  char *v19;
  int v20;
  unsigned int v21;
  unsigned int v22;

  v2 = *a1;
  if (a2)
  {
LABEL_2:
    v3 = *v2;
    goto LABEL_3;
  }
  v3 = *v2;
  if (v3 == 48)
  {
    if ((v2[1] | 0x20) != 0x78)
    {
      v4 = 8;
      v15 = 0xFFFFFFFFFFFFFFFLL;
      v16 = 7;
      v17 = 48;
      a2 = 8;
LABEL_36:
      v18 = v17 - 48;
      goto LABEL_37;
    }
    v2 += 2;
    *a1 = v2;
    a2 = 16;
    goto LABEL_2;
  }
  a2 = 10;
LABEL_3:
  v4 = a2;
  if (v3 == 45)
  {
    v5 = 0;
    *a1 = v2 + 1;
    v6 = (char)v2[1];
    v7 = v6 - 48;
    v8 = v6 - 97;
    v9 = v6 - 65;
    if (v9 >= 6)
      v9 = -1;
    if (v8 <= 5)
      v9 = v8;
    if (v7 <= 9)
      v9 = v7;
    if ((v9 & 0x80000000) == 0 && v9 < (int)a2)
    {
      v5 = 0;
      v10 = -(uint64_t)(0x8000000000000000 / a2);
      v11 = (char *)(v2 + 2);
      while (v5 >= v10 && (v5 != v10 || v9 < (signed int)-(0x8000000000000000 / a2 * a2)))
      {
        v5 = v5 * a2 - v9;
        *a1 = (unsigned __int8 *)v11;
        v12 = *v11;
        v13 = v12 - 48;
        v14 = v12 - 97;
        v9 = v12 - 65;
        if (v9 >= 6)
          v9 = -1;
        if (v14 <= 5)
          v9 = v14;
        if (v13 <= 9)
          v9 = v13;
        if ((v9 & 0x80000000) == 0)
        {
          ++v11;
          if (v9 < (int)a2)
            continue;
        }
        return v5;
      }
      return 0x8000000000000000;
    }
    return v5;
  }
  v15 = 0x7FFFFFFFFFFFFFFFuLL / a2;
  v16 = ~(v15 * a2);
  v17 = (char)v3;
  if ((v3 - 48) <= 9)
    goto LABEL_36;
  if ((v3 - 97) > 5)
  {
    v18 = (char)v3 - 65;
    if ((v3 - 65) >= 6)
      v18 = -1;
  }
  else
  {
    v18 = (char)v3 - 97;
  }
LABEL_37:
  v5 = 0;
  if ((v18 & 0x80000000) == 0 && v18 < (int)a2)
  {
    v5 = 0;
    v19 = (char *)(v2 + 1);
    while (v5 <= v15 && (v5 != v15 || v18 <= v16))
    {
      v5 = v5 * v4 + v18;
      *a1 = (unsigned __int8 *)v19;
      v20 = *v19;
      v21 = v20 - 48;
      v22 = v20 - 97;
      v18 = v20 - 65;
      if (v18 >= 6)
        v18 = -1;
      if (v22 <= 5)
        v18 = v22;
      if (v21 <= 9)
        v18 = v21;
      if ((v18 & 0x80000000) == 0)
      {
        ++v19;
        if (v18 < (int)a2)
          continue;
      }
      return v5;
    }
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  return v5;
}

void sub_1DB71627C(_DWORD *a1, uint64_t a2, char *__s1, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *i;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  char *v30;
  char *v31;
  _BYTE v32[64];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if ((a4 - 1) >= 6)
  {
    archive_set_error(a1, 22, "Internal error: Unknown digest type", a4, a5, a6, a7, a8, v31);
  }
  else
  {
    v9 = a4;
    v12 = qword_1DB74CC58[(int)a4 - 1];
    if (strnlen(__s1, v12 | 1) == v12)
    {
      v19 = 0;
      for (i = __s1 + 1; ; i += 2)
      {
        v21 = *(i - 1);
        v22 = v21 - 48;
        v23 = v21 - 97;
        v24 = v21 - 87;
        if (v23 >= 6)
          v24 = -1;
        if (v22 <= 9)
          v24 = v22;
        v25 = *i;
        v26 = v25 - 48;
        v27 = v25 - 97;
        v28 = v25 - 87;
        if (v27 >= 6)
          v28 = -1;
        if (v26 <= 9)
          v28 = v26;
        if (v24 == -1 || v28 == -1)
          break;
        v32[v19++] = v28 | (16 * v24);
        if (((unint64_t)(v12 - 1) >> 1) + 1 == v19)
        {
          sub_1DB6E9FD0(a2, v9, (uint64_t)v32, v18);
          return;
        }
      }
      v30 = "invalid digest data, ignoring";
    }
    else
    {
      v30 = "incorrect digest length, ignoring";
    }
    archive_set_error(a1, 79, v30, v13, v14, v15, v16, v17, v31);
  }
}

uint64_t archive_write_set_format_cpio_odc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  void (*v10)(uint64_t);
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char *v18;

  result = sub_1DB6E0594((int *)a1, -1329217314, 1, "archive_write_set_format_cpio_odc", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    v10 = *(void (**)(uint64_t))(a1 + 328);
    if (v10)
      v10(a1);
    v11 = malloc_type_calloc(1uLL, 0x40uLL, 0x1020040D6C25179uLL);
    if (v11)
    {
      v17 = v11;
      result = 0;
      *(_QWORD *)(a1 + 264) = v17;
      *(_QWORD *)(a1 + 272) = "cpio";
      *(_QWORD *)(a1 + 304) = sub_1DB716644;
      *(_QWORD *)(a1 + 312) = sub_1DB716744;
      *(_QWORD *)(a1 + 288) = sub_1DB7164D0;
      *(_QWORD *)(a1 + 296) = sub_1DB71678C;
      *(_QWORD *)(a1 + 320) = sub_1DB716798;
      *(_QWORD *)(a1 + 328) = sub_1DB716814;
      *(_DWORD *)(a1 + 16) = 65537;
      *(_QWORD *)(a1 + 24) = "POSIX cpio";
    }
    else
    {
      archive_set_error((_DWORD *)a1, 12, "Can't allocate cpio data", v12, v13, v14, v15, v16, v18);
      return 4294967266;
    }
  }
  return result;
}

uint64_t sub_1DB7164D0(uint64_t a1, char *__s1, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v27;
  char *__endptr;

  v6 = *(_QWORD *)(a1 + 264);
  if (!strcmp(__s1, "hdrcharset"))
  {
    if (a3 && *a3)
    {
      v18 = sub_1DB72D08C(a1, a3, 0);
      *(_QWORD *)(v6 + 40) = v18;
      if (v18)
        return 0;
      else
        return 4294967266;
    }
    archive_set_error((_DWORD *)a1, -1, "%s: hdrcharset option needs a character-set name", v7, v8, v9, v10, v11, *(char **)(a1 + 272));
    return 4294967271;
  }
  if (!strcmp(__s1, "starting-inode"))
  {
    if (a3 && *a3)
    {
      __endptr = 0;
      v19 = strtoll(a3, &__endptr, 0);
      v25 = v19;
      if (*__endptr)
      {
        if (*__endptr == 46 && v19 != 0)
          goto LABEL_27;
      }
      else if (v19)
      {
LABEL_27:
        result = 0;
        *(_QWORD *)(v6 + 8) = v25;
        return result;
      }
      archive_set_error((_DWORD *)a1, -1, "%s: starting-inode value invalid", v20, v21, v22, v23, v24, *(char **)(a1 + 272));
      return 4294967266;
    }
    archive_set_error((_DWORD *)a1, -1, "%s: starting-inode option needs an integer value", v12, v13, v14, v15, v16, *(char **)(a1 + 272));
    return 4294967271;
  }
  if (strcmp(__s1, "skip-trailer"))
    return 4294967276;
  if (a3)
    v27 = *a3 != 0;
  else
    v27 = 0;
  result = 0;
  *(_DWORD *)(v6 + 60) = v27;
  return result;
}

uint64_t sub_1DB716644(_DWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  char *v12;
  _BYTE *v13;

  if (archive_entry_filetype((uint64_t)a2) || archive_entry_hardlink((uint64_t)a2))
  {
    v12 = 0;
    v13 = 0;
    v9 = sub_1DB71684C((uint64_t)a1);
    if (sub_1DB6E9040(a2, &v13, &v12, v9) && *__error() == 12)
    {
      archive_set_error(a1, 12, "Can't allocate memory for Pathname", v4, v5, v6, v7, v8, v12);
      return 4294967266;
    }
    if (v12 && v13 && *v13)
    {
      if (archive_entry_size_is_set((uint64_t)a2)
        && (archive_entry_size((uint64_t)a2) & 0x8000000000000000) == 0)
      {
        return sub_1DB716898((uint64_t)a1, a2);
      }
      v11 = "Size required";
    }
    else
    {
      v11 = "Pathname required";
    }
  }
  else
  {
    v11 = "Filetype required";
  }
  archive_set_error(a1, -1, v11, v4, v5, v6, v7, v8, v12);
  return 4294967271;
}

uint64_t sub_1DB716744(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(uint64_t **)(a1 + 264);
  if (*v3 >= a3)
    v4 = a3;
  else
    v4 = *v3;
  LODWORD(result) = sub_1DB7322A8(a1, a2, v4);
  *v3 -= v4;
  if ((int)result >= 0)
    return v4;
  else
    return (int)result;
}

uint64_t sub_1DB71678C(uint64_t a1)
{
  return sub_1DB732308((_QWORD *)a1, **(_QWORD **)(a1 + 264));
}

uint64_t sub_1DB716798(uint64_t a1)
{
  uint64_t *v3;
  uint64_t v4;

  if (*(_DWORD *)(*(_QWORD *)(a1 + 264) + 60))
    return 0;
  v3 = (uint64_t *)archive_entry_new2(0);
  archive_entry_set_nlink((uint64_t)v3, 1);
  archive_entry_set_size((uint64_t)v3, 0);
  archive_entry_set_pathname((uint64_t)v3, "TRAILER!!!");
  v4 = sub_1DB716898(a1, v3);
  archive_entry_free((void **)v3);
  return v4;
}

uint64_t sub_1DB716814(uint64_t a1)
{
  void **v2;

  v2 = *(void ***)(a1 + 264);
  free(v2[2]);
  free(v2);
  *(_QWORD *)(a1 + 264) = 0;
  return 0;
}

uint64_t sub_1DB71684C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 264);
  result = *(_QWORD *)(v1 + 40);
  if (!result)
  {
    if (*(_DWORD *)(v1 + 56))
    {
      return *(_QWORD *)(v1 + 48);
    }
    else
    {
      result = sub_1DB6E54AC();
      *(_QWORD *)(v1 + 48) = result;
      *(_DWORD *)(v1 + 56) = 1;
    }
  }
  return result;
}

uint64_t sub_1DB716898(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  _DWORD *v32;
  int v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  size_t v56;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *__s;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[40];
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v61 = 0;
  __s = 0;
  v60 = 0;
  v4 = *(_QWORD *)(a1 + 264);
  v5 = sub_1DB71684C(a1);
  if (sub_1DB6E9040(a2, &v61, &v60, v5))
  {
    if (*__error() == 12)
    {
      v11 = "Can't allocate memory for Pathname";
LABEL_69:
      v32 = (_DWORD *)a1;
      v33 = 12;
      goto LABEL_70;
    }
    v13 = (char *)archive_entry_pathname(a2);
    sub_1DB72D0D4(v5);
    archive_set_error((_DWORD *)a1, 79, "Can't translate pathname '%s' to %s", v14, v15, v16, v17, v18, v13);
    v12 = 4294967276;
  }
  else
  {
    v12 = 0;
  }
  v19 = v60;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  memset(v66, 0, 28);
  sub_1DB716D74(0x71C7uLL, &v63, 6);
  LODWORD(v20) = archive_entry_dev(a2);
  if (v20 >= 0x3FFFF)
    v20 = 0x3FFFFLL;
  else
    v20 = v20;
  sub_1DB716D74(v20, (_BYTE *)&v63 + 6, 6);
  v21 = archive_entry_ino64((uint64_t)a2);
  if (v21)
  {
    v22 = v21;
    if (archive_entry_nlink((uint64_t)a2) >= 2)
    {
      v25 = *(_QWORD *)(v4 + 32);
      if (v25)
      {
        v26 = (_DWORD *)(*(_QWORD *)(v4 + 16) + 8);
        v27 = *(_QWORD *)(v4 + 32);
        while (*((_QWORD *)v26 - 1) != v22)
        {
          v26 += 4;
          if (!--v27)
            goto LABEL_18;
        }
        LODWORD(v24) = *v26;
        if ((*v26 & 0x80000000) != 0)
          goto LABEL_68;
      }
      else
      {
LABEL_18:
        v24 = *(_QWORD *)(v4 + 8) + 1;
        *(_QWORD *)(v4 + 8) = v24;
        v28 = *(_QWORD *)(v4 + 24);
        if (v28 <= v25)
        {
          v30 = 2 * v28;
          if (v28 < 0x200)
            v30 = 512;
          v59 = v30;
          v29 = (char *)malloc_type_realloc(*(void **)(v4 + 16), 16 * v30, 0x1000040D9A13B51uLL);
          if (!v29)
            goto LABEL_68;
          *(_QWORD *)(v4 + 16) = v29;
          *(_QWORD *)(v4 + 24) = v59;
          v25 = *(_QWORD *)(v4 + 32);
        }
        else
        {
          v29 = *(char **)(v4 + 16);
        }
        v31 = &v29[16 * v25];
        *(_QWORD *)v31 = v22;
        *((_DWORD *)v31 + 2) = v24;
        *(_QWORD *)(v4 + 32) = v25 + 1;
        if ((v24 & 0x80000000) != 0)
        {
LABEL_68:
          v11 = "No memory for ino translation table";
          goto LABEL_69;
        }
      }
    }
    else
    {
      v23 = *(_QWORD *)(v4 + 8);
      LODWORD(v24) = v23 + 1;
      *(_QWORD *)(v4 + 8) = v23 + 1;
      if ((_DWORD)v23 + 1 < 0)
        goto LABEL_68;
    }
    if (v24 >= 0x40000)
    {
      v11 = "Too many files for this cpio format";
      v32 = (_DWORD *)a1;
      v33 = 34;
LABEL_70:
      archive_set_error(v32, v33, v11, v6, v7, v8, v9, v10, v58);
LABEL_71:
      v12 = 4294967266;
      goto LABEL_72;
    }
  }
  else
  {
    LODWORD(v24) = 0;
  }
  sub_1DB716D74(v24, (_BYTE *)((unint64_t)&v63 | 0xC), 6);
  v34 = archive_entry_mode((uint64_t)a2);
  sub_1DB716D74(v34, (_BYTE *)&v64 + 2, 6);
  v35 = archive_entry_uid((uint64_t)a2);
  if (v35 >= 0x3FFFF)
    v35 = 0x3FFFFLL;
  sub_1DB716D74(v35, (_BYTE *)&v64 + 8, 6);
  v36 = archive_entry_gid((uint64_t)a2);
  if (v36 >= 0x3FFFF)
    v36 = 0x3FFFFLL;
  sub_1DB716D74(v36, (_BYTE *)&v64 + 14, 6);
  LODWORD(v37) = archive_entry_nlink((uint64_t)a2);
  if (v37 >= 0x3FFFF)
    v37 = 0x3FFFFLL;
  else
    v37 = v37;
  sub_1DB716D74(v37, (_BYTE *)&v65 + 4, 6);
  if (archive_entry_filetype((uint64_t)a2) == 24576
    || archive_entry_filetype((uint64_t)a2) == 0x2000)
  {
    LODWORD(v38) = archive_entry_rdev(a2);
    if (v38 >= 0x3FFFF)
      v38 = 0x3FFFFLL;
    else
      v38 = v38;
  }
  else
  {
    v38 = 0;
  }
  sub_1DB716D74(v38, (_BYTE *)&v65 + 10, 6);
  v39 = archive_entry_mtime((uint64_t)a2);
  if (v39 >= 0x1FFFFFFFFLL)
    v39 = 0x1FFFFFFFFLL;
  sub_1DB716D74(v39, v66, 11);
  v40 = (v19 << 32) + 0x100000000;
  v41 = v40 >> 32;
  if ((unint64_t)v40 <= 0x3FFFF00000000)
    v42 = v40 >> 32;
  else
    v42 = 0x3FFFFLL;
  sub_1DB716D74(v42, &v66[11], 6);
  if (archive_entry_filetype((uint64_t)a2) != 0x8000)
    archive_entry_set_size((uint64_t)a2, 0);
  if (sub_1DB6E922C((uint64_t)a2, &__s, &v60, v5))
  {
    if (*__error() == 12)
    {
      v11 = "Can't allocate memory for Linkname";
      goto LABEL_69;
    }
    v43 = (char *)archive_entry_symlink((uint64_t)a2);
    sub_1DB72D0D4(v5);
    archive_set_error((_DWORD *)a1, 79, "Can't translate linkname '%s' to %s", v44, v45, v46, v47, v48, v43);
    v12 = 4294967276;
  }
  if (v60 && __s && *__s)
    v49 = strlen(__s);
  else
    v49 = archive_entry_size((uint64_t)a2);
  v50 = v49;
  if (v49 >= 0x1FFFFFFFFLL)
    v49 = 0x1FFFFFFFFLL;
  sub_1DB716D74(v49, &v66[17], 11);
  if (v50 >> 33)
  {
    archive_set_error((_DWORD *)a1, 34, "File is too large for cpio format.", v51, v52, v53, v54, v55, v58);
    v12 = 4294967271;
  }
  else
  {
    if (sub_1DB7322A8(a1, (uint64_t)&v63, 76) || sub_1DB7322A8(a1, v61, v41))
      goto LABEL_71;
    *(_QWORD *)v4 = archive_entry_size((uint64_t)a2);
    if (__s && *__s)
    {
      v56 = strlen(__s);
      if (sub_1DB7322A8(a1, (uint64_t)__s, v56))
        v12 = 4294967266;
      else
        v12 = v12;
    }
  }
LABEL_72:
  archive_entry_free(0);
  return v12;
}

unint64_t sub_1DB716D74(unint64_t result, _BYTE *a2, int a3)
{
  unint64_t v4;

  if (a3)
  {
    v4 = sub_1DB716D74(result, a2 + 1, (a3 - 1));
    *a2 = v4 & 7 | 0x30;
    return v4 >> 3;
  }
  return result;
}

uint64_t archive_read_support_format_raw(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char *v18;

  if (sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_format_raw", a5, a6, a7, a8) == -30)
    return 4294967266;
  v9 = malloc_type_calloc(1uLL, 0x18uLL, 0x10000400CE834B2uLL);
  if (!v9)
  {
    archive_set_error(a1, 12, "Can't allocate raw_info data", v10, v11, v12, v13, v14, v18);
    return 4294967266;
  }
  v15 = v9;
  v16 = sub_1DB6DE874(a1, (uint64_t)v9, "raw", (uint64_t)sub_1DB716E90, 0, (uint64_t)sub_1DB716ECC, (uint64_t)sub_1DB716F50, (uint64_t)sub_1DB717018, 0, (uint64_t)sub_1DB717054, 0, 0);
  if ((_DWORD)v16)
    free(v15);
  return v16;
}

uint64_t sub_1DB716E90(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (a2 > 0)
    return 0xFFFFFFFFLL;
  v8 = 1;
  if (!sub_1DB6E2588(a1, 1uLL, 0, a4, a5, a6, a7, a8))
    return 0xFFFFFFFFLL;
  return v8;
}

uint64_t sub_1DB716ECC(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(**(_QWORD **)(a1 + 2472) + 16))
    return 1;
  *(_DWORD *)(a1 + 16) = 589824;
  *(_QWORD *)(a1 + 24) = "raw";
  archive_entry_set_pathname(a2, "data");
  archive_entry_set_filetype(a2, 0x8000);
  archive_entry_set_perm(a2, 420);
  return sub_1DB6F7CBC(a1);
}

uint64_t sub_1DB716F50(uint64_t a1, size_t *a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v16 = 0;
  v12 = *(uint64_t **)(a1 + 2472);
  v13 = *v12;
  v14 = *(_QWORD *)(*v12 + 8);
  if (v14)
  {
    sub_1DB6E26F0(a1, v14, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    *(_QWORD *)(v13 + 8) = 0;
  }
  if (*(_DWORD *)(v13 + 16))
    return 1;
  *a2 = sub_1DB6E2588(a1, 1uLL, &v16, (uint64_t)a4, a5, a6, a7, a8);
  result = v16;
  if (v16 < 1)
  {
    if (!v16)
    {
      result = 1;
      *(_DWORD *)(v13 + 16) = 1;
    }
    *a3 = 0;
    *a4 = *(_QWORD *)v13;
  }
  else
  {
    *a3 = v16;
    *a4 = *(_QWORD *)v13;
    *(_QWORD *)v13 += result;
    *(_QWORD *)(v13 + 8) = result;
    return 0;
  }
  return result;
}

uint64_t sub_1DB717018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *(uint64_t **)(a1 + 2472);
  v9 = *v8;
  v10 = *(_QWORD *)(*v8 + 8);
  if (v10)
  {
    sub_1DB6E26F0(a1, v10, a3, a4, a5, a6, a7, a8);
    *(_QWORD *)(v9 + 8) = 0;
  }
  *(_DWORD *)(v9 + 16) = 1;
  return 0;
}

uint64_t sub_1DB717054(uint64_t a1)
{
  free(**(void ***)(a1 + 2472));
  **(_QWORD **)(a1 + 2472) = 0;
  return 0;
}

uint64_t archive_read_support_format_gnutar(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_format_gnutar", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
    return archive_read_support_format_tar(a1);
  return result;
}

uint64_t sub_1DB7170D4(uint64_t a1, char *__s1, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _BOOL4 v13;
  _QWORD *v14;
  _BOOL4 v15;
  _BOOL4 v16;
  char *v17;

  v6 = **(_QWORD **)(a1 + 2472);
  if (!strcmp(__s1, "compat-2x"))
  {
    if (a3)
      v13 = *a3 != 0;
    else
      v13 = 0;
    result = 0;
    *(_DWORD *)(v6 + 436) = v13;
    *(_DWORD *)(v6 + 432) = v13;
  }
  else if (!strcmp(__s1, "hdrcharset"))
  {
    if (a3 && *a3)
    {
      v14 = sub_1DB6E3A78(a1, a3, 0);
      *(_QWORD *)(v6 + 400) = v14;
      if (v14)
        return 0;
      else
        return 4294967266;
    }
    else
    {
      archive_set_error((_DWORD *)a1, -1, "tar: hdrcharset option needs a character-set name", v7, v8, v9, v10, v11, v17);
      return 4294967271;
    }
  }
  else if (!strcmp(__s1, "mac-ext"))
  {
    if (a3)
      v15 = *a3 != 0;
    else
      v15 = 0;
    result = 0;
    *(_DWORD *)(v6 + 440) = v15;
  }
  else if (!strcmp(__s1, "read_concatenated_archives"))
  {
    if (a3)
      v16 = *a3 != 0;
    else
      v16 = 0;
    result = 0;
    *(_DWORD *)(v6 + 444) = v16;
  }
  else
  {
    return 4294967276;
  }
  return result;
}

uint64_t sub_1DB717218(_DWORD *a1, uint64_t a2, _DWORD *a3, char *a4, uint64_t *a5)
{
  uint64_t v10;
  int v11;
  int v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;

  v10 = sub_1DB6E3288(a1, a2, (uint64_t)a3, a4);
  if ((_DWORD)v10 != -30)
  {
    if (!sub_1DB6E3BD0((uint64_t)a3, a4, 0x64uLL, *(_QWORD *)(a2 + 408))
      || (v10 = sub_1DB71767C(a1, *(_QWORD *)(a2 + 408), "Pathname"), (_DWORD)v10 != -30))
    {
      if (!sub_1DB6E3BC8((uint64_t)a3, a4 + 265, 0x20uLL, *(_QWORD *)(a2 + 408))
        || (v10 = sub_1DB71767C(a1, *(_QWORD *)(a2 + 408), "Uname"), (_DWORD)v10 != -30))
      {
        if (!sub_1DB6E3BD8((uint64_t)a3, a4 + 297, 0x20uLL, *(_QWORD *)(a2 + 408))
          || (v10 = sub_1DB71767C(a1, *(_QWORD *)(a2 + 408), "Gname"), (_DWORD)v10 != -30))
        {
          if (a4[156] - 51 > 1)
          {
            archive_entry_set_rdev(a3, 0);
          }
          else
          {
            v11 = sub_1DB6E3568(a4 + 329, 8uLL);
            archive_entry_set_rdevmajor(a3, v11);
            v12 = sub_1DB6E3568(a4 + 337, 8uLL);
            archive_entry_set_rdevminor(a3, v12);
          }
          *(_QWORD *)(a2 + 296) = -*(_DWORD *)(a2 + 280) & 0x1FFLL;
          v13 = sub_1DB6E3568(a4 + 345, 0xCuLL);
          if (v13 >= 1)
            archive_entry_set_atime((uint64_t)a3, v13, 0);
          v14 = sub_1DB6E3568(a4 + 357, 0xCuLL);
          if (v14 >= 1)
            archive_entry_set_ctime((uint64_t)a3, v14, 0);
          if (a4[483])
          {
            v15 = sub_1DB6E3568(a4 + 483, 0xCuLL);
            *(_QWORD *)(a2 + 312) = v15;
            archive_entry_set_size((uint64_t)a3, v15);
            *(_DWORD *)(a2 + 448) = 1;
          }
          if (a4[386])
          {
            if (!sub_1DB7179D8(a1, a2, a4 + 386, 4))
            {
              if (!a4[482])
                return v10;
              v32 = 0;
              while (1)
              {
                if (*a5)
                {
                  sub_1DB6E26F0((uint64_t)a1, *a5, v16, v17, v18, v19, v20, v21);
                  *a5 = 0;
                }
                v23 = (char *)sub_1DB6E2588((uint64_t)a1, 0x200uLL, &v32, v17, v18, v19, v20, v21);
                if ((v32 & 0x8000000000000000) != 0)
                  break;
                if (v32 <= 0x1FF)
                {
                  archive_set_error(a1, 79, "Truncated tar archive detected while reading sparse file data", v24, v25, v26, v27, v28, v31);
                  return 4294967266;
                }
                v29 = v23;
                *a5 = 512;
                if (sub_1DB7179D8(a1, a2, v23, 21))
                  return 4294967266;
                if (!v29[504])
                {
                  v30 = *(_QWORD *)(a2 + 328);
                  if (v30)
                    *(_QWORD *)(a2 + 288) = *(_QWORD *)(v30 + 8);
                  return v10;
                }
              }
            }
            return 4294967266;
          }
        }
      }
    }
  }
  return v10;
}

uint64_t sub_1DB7174A8(_DWORD *a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t result;
  int v9;

  if (sub_1DB6E3BD0(a3, a4, 0x64uLL, *(_QWORD *)(a2 + 408)))
  {
    result = sub_1DB71767C(a1, *(_QWORD *)(a2 + 408), "Pathname");
    v9 = result;
    if ((_DWORD)result == -30)
      return result;
  }
  else
  {
    v9 = 0;
  }
  LODWORD(result) = sub_1DB6E3288(a1, a2, a3, a4);
  if (v9 >= (int)result)
    result = result;
  else
    result = v9;
  *(_QWORD *)(a2 + 296) = -*(_DWORD *)(a2 + 280) & 0x1FFLL;
  return result;
}

uint64_t sub_1DB71754C(_DWORD *a1, _QWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *i;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;

  for (i = (_QWORD *)a2[41]; i; i = (_QWORD *)a2[41])
  {
    a2[41] = *i;
    free(i);
  }
  a2[42] = 0;
  v32 = a2[35];
  v12 = sub_1DB717A7C((uint64_t)a1, (uint64_t)a2, &v32, a3, a5, a6, a7, a8);
  if (v12 < 0)
    return -30;
  v19 = v12 + 1;
  while (--v19 >= 1)
  {
    v20 = sub_1DB717A7C((uint64_t)a1, (uint64_t)a2, &v32, a3, v15, v16, v17, v18);
    if ((v20 & 0x8000000000000000) == 0)
    {
      v25 = v20;
      v26 = sub_1DB717A7C((uint64_t)a1, (uint64_t)a2, &v32, a3, v21, v22, v23, v24);
      if ((v26 & 0x8000000000000000) == 0 && !sub_1DB6E091C(a1, (uint64_t)a2, v25, v26))
        continue;
    }
    return -30;
  }
  if (*a3)
  {
    sub_1DB6E26F0((uint64_t)a1, *a3, v13, v14, v15, v16, v17, v18);
    *a3 = 0;
  }
  v29 = a2[35] - v32;
  v30 = v32 - *((_DWORD *)a2 + 70);
  v31 = v30 & 0x1FF;
  v27 = -30;
  if (v31 <= v32 && v31 == sub_1DB6E26F0((uint64_t)a1, v30 & 0x1FF, v13, v14, v15, v16, v17, v18))
    return v31 + v29;
  return v27;
}

uint64_t sub_1DB71767C(_DWORD *a1, uint64_t a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*__error() == 12)
  {
    archive_set_error(a1, 12, "Can't allocate memory for %s", v6, v7, v8, v9, v10, a3);
    return 4294967266;
  }
  else
  {
    sub_1DB72D0D4(a2);
    archive_set_error(a1, 79, "%s can't be converted from %s to current locale.", v12, v13, v14, v15, v16, a3);
    return 4294967276;
  }
}

uint64_t sub_1DB717704(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t i;
  int v8;
  unint64_t v9;
  uint64_t v10;

  v6 = -1;
  while (2)
  {
    for (i = 0; ; ++i)
    {
      v8 = *(unsigned __int8 *)(a3 + i);
      if (!*(_BYTE *)(a3 + i) || v8 == 44)
        break;
      if ((v8 - 58) < 0xFFFFFFF6)
        return 4294967276;
    }
    v9 = sub_1DB6E3608(a3, i, 0xAu);
    v10 = v9;
    if (v6 < 0)
    {
      if ((v9 & 0x8000000000000000) == 0)
        goto LABEL_12;
      return 4294967276;
    }
    if ((v9 & 0x8000000000000000) != 0)
      return 4294967276;
    if (sub_1DB6E091C(a1, a2, v6, v9))
      return 4294967266;
    v8 = *(unsigned __int8 *)(a3 + i);
    v10 = -1;
LABEL_12:
    a3 += i + 1;
    v6 = v10;
    if (v8)
      continue;
    return 0;
  }
}

uint64_t sub_1DB7177C8(_DWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (int)a5;
  if ((_DWORD)a5 != 256 && (_DWORD)a5 != 15360 && (_DWORD)a5 != 512)
  {
    archive_set_error(a1, -1, "Unknown ACL type: %d", (uint64_t)a4, (uint64_t)a5, a6, a7, a8, a5);
    return 4294967266;
  }
  if (!*(_QWORD *)(a2 + 416))
  {
    v13 = sub_1DB6E3A78((uint64_t)a1, "UTF-8", 1);
    *(_QWORD *)(a2 + 416) = v13;
    if (!v13)
      return 4294967266;
  }
  v14 = archive_entry_acl(a3);
  v15 = sub_1DB719DD8(v14, a4, v8, *(_QWORD *)(a2 + 416));
  v21 = v15;
  if ((_DWORD)v15)
  {
    if ((_DWORD)v15 == -30)
      archive_set_error(a1, 12, "%s %s", v16, v17, v18, v19, v20, "Can't allocate memory for ");
    else
      archive_set_error(a1, -1, "%s %s", v16, v17, v18, v19, v20, "Parse error: ");
  }
  return v21;
}

uint64_t sub_1DB7178F8(_DWORD *a1, uint64_t a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v6;
  int i;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int64_t v11;
  int64_t v12;

  if (*a3 == 32)
  {
    v3 = a3;
    v6 = 0;
    for (i = 1; ; i ^= 1u)
    {
      v8 = 0;
      v9 = (uint64_t)(v3 + 1);
      while (1)
      {
        v10 = *(unsigned __int8 *)(v9 + v8);
        if ((v10 | 0x20) == 0x20)
          break;
        if ((v10 - 58) < 0xFFFFFFF6)
          return 4294967276;
        ++v8;
      }
      v11 = sub_1DB6E3608(v9, v8, 0xAu);
      if (v11 < 0)
        break;
      v12 = v11;
      v3 = (unsigned __int8 *)(v9 + v8);
      if (v11 > v6)
      {
        if (sub_1DB6E091C(a1, a2, v6, v11 - v6))
          return 4294967266;
        *(_DWORD *)(*(_QWORD *)(a2 + 336) + 24) = i;
        v10 = *v3;
      }
      v6 = v12;
      if (!v10)
        return 0;
    }
  }
  return 4294967276;
}

uint64_t sub_1DB7179D8(_DWORD *a1, uint64_t a2, char *a3, int a4)
{
  int v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;

  if (a4 < 1)
    return 0;
  v7 = a4 + 1;
  while (1)
  {
    if (!*a3)
      return 0;
    v8 = sub_1DB6E3568(a3, 0xCuLL);
    v9 = a3 + 12;
    v10 = sub_1DB6E3568(v9, 0xCuLL);
    if (sub_1DB6E091C(a1, a2, v8, v10))
      break;
    --v7;
    a3 = v9 + 12;
    if (v7 <= 1)
      return 0;
  }
  return 4294967266;
}

uint64_t sub_1DB717A7C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int64_t v16;
  unsigned __int8 *v17;
  _BYTE *v18;
  uint64_t v19;
  int v20;
  _BYTE *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  _BYTE *v24;
  char *v25;
  _DWORD *v26;
  int v27;
  uint64_t result;
  unsigned __int8 *v29;
  unsigned int v30;
  int v32;
  char *v33;
  size_t __n;

  v11 = (void **)(a2 + 240);
  v12 = *a3;
  v13 = *a4;
  do
  {
    if (v12 >= 100)
      v14 = 100;
    else
      v14 = v12;
    if (v13)
    {
      sub_1DB6E26F0(a1, v13, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      *a4 = 0;
    }
    __n = 0;
    v15 = (unsigned __int8 *)sub_1DB6E2588(a1, 1uLL, &__n, (uint64_t)a4, a5, a6, a7, a8);
    v16 = __n;
    if ((uint64_t)__n < 1)
      return -30;
    v17 = v15;
    v18 = memchr(v15, 10, __n);
    if (!v18)
    {
      *a4 = v16;
      if (v16 > v14)
      {
LABEL_26:
        v25 = "Line too long";
        v26 = (_DWORD *)a1;
        v27 = 79;
      }
      else
      {
        v21 = 0;
        v19 = 0;
        while (sub_1DB6E3190(v11, v16))
        {
          memcpy((char *)*v11 + v19, v17, __n);
          if (*a4)
          {
            sub_1DB6E26F0(a1, *a4, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            *a4 = 0;
          }
          v19 += __n;
          if (v21)
          {
            v13 = 0;
            v17 = (unsigned __int8 *)*v11;
            goto LABEL_11;
          }
          v22 = (unsigned __int8 *)sub_1DB6E2588(a1, 1uLL, &__n, (uint64_t)a4, a5, a6, a7, a8);
          v23 = __n;
          if ((uint64_t)__n < 1)
            return -30;
          v17 = v22;
          v24 = memchr(v22, 10, __n);
          v21 = v24;
          if (v24)
          {
            v23 = v24 - v17 + 1;
            __n = v23;
          }
          *a4 = v23;
          v16 = v23 + v19;
          if (v16 > v14)
            goto LABEL_26;
        }
        v25 = "Can't allocate working buffer";
        v26 = (_DWORD *)a1;
        v27 = 12;
      }
      archive_set_error(v26, v27, v25, (uint64_t)a4, a5, a6, a7, a8, v33);
      return -30;
    }
    v13 = v18 - v17 + 1;
    __n = v13;
    if (v13 > v14)
      goto LABEL_26;
    *a4 = v13;
    v19 = v18 - v17 + 1;
LABEL_11:
    if (v19 < 1)
      return -30;
    v12 = *a3 - v19;
    *a3 = v12;
    v20 = *v17;
  }
  while (v20 == 35);
  if (v20 == 10)
    return 0;
  result = 0;
  v29 = v17 + 1;
  while ((v20 - 58) >= 0xF6u)
  {
    v30 = (char)v20 - 48;
    if (result > 0xCCCCCCCCCCCCCCCLL || result == 0xCCCCCCCCCCCCCCCLL && v30 > 7)
      result = 0x7FFFFFFFFFFFFFFFLL;
    else
      result = 10 * result + v30;
    if (v19-- <= 1)
      break;
    v32 = *v29++;
    LOBYTE(v20) = v32;
    if (v32 == 10)
      return result;
  }
  return -20;
}

_DWORD *sub_1DB717CC8(uint64_t a1, int a2, unsigned int a3, int a4, int a5)
{
  int v10;
  _DWORD *v11;
  _DWORD *v12;
  BOOL v14;
  _DWORD *v16;
  _DWORD *v18;

  v10 = a2 & 0x3C00;
  if ((a2 & 0x3C00) != 0)
  {
    if (*(_DWORD *)(a1 + 48) & 0xFFFFC3FF | a3 & 0x80FF0006)
      return 0;
  }
  else
  {
    if ((a2 & 0x300) == 0)
      return 0;
    v11 = 0;
    if (a3 > 7 || (*(_DWORD *)(a1 + 48) & 0xFFFFFCFF) != 0)
      return v11;
  }
  if ((a4 - 10001) >= 4)
  {
    if ((a4 - 10005) >= 2)
    {
      if (a4 == 10107 && (a2 & 0xFFFFC3FF) == 0)
        goto LABEL_8;
    }
    else if ((a2 & 0xFFFFFCFF) == 0)
    {
      goto LABEL_8;
    }
    return 0;
  }
LABEL_8:
  free(*(void **)(a1 + 32));
  *(_QWORD *)(a1 + 32) = 0;
  free(*(void **)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
  v12 = *(_DWORD **)(a1 + 8);
  if (v12)
  {
    v14 = a5 == -1 && (a4 & 0xFFFFFFFD) == 10001;
    do
    {
      v11 = v12;
      if (!v10 && v12[2] == a2 && v12[3] == a4 && v12[5] == a5 && !v14)
      {
        v11[4] = a3;
        return v11;
      }
      v12 = *(_DWORD **)v11;
    }
    while (*(_QWORD *)v11);
    v16 = malloc_type_calloc(1uLL, 0x80uLL, 0x10300404B7343C4uLL);
    if (!v16)
      return 0;
    *(_QWORD *)v11 = v16;
    v11 = v16;
    goto LABEL_34;
  }
  v18 = malloc_type_calloc(1uLL, 0x80uLL, 0x10300404B7343C4uLL);
  v11 = v18;
  if (v18)
  {
    *(_QWORD *)(a1 + 8) = v18;
LABEL_34:
    v11[2] = a2;
    v11[3] = a4;
    v11[4] = a3;
    v11[5] = a5;
    *(_DWORD *)(a1 + 48) |= a2;
  }
  return v11;
}

uint64_t sub_1DB717E7C(_WORD *a1, int a2, unsigned int a3, int a4, int a5, char *a6)
{
  uint64_t result;
  _DWORD *v13;

  result = sub_1DB717F10(a1, a2, a3, a4);
  if ((_DWORD)result)
  {
    v13 = sub_1DB717CC8((uint64_t)a1, a2, a3, a4, a5);
    if (v13)
    {
      if (a6 && *a6)
        sub_1DB6DC068((uint64_t)(v13 + 6), a6);
      else
        sub_1DB6DEF44((uint64_t)(v13 + 6));
      return 0;
    }
    else
    {
      return 4294967271;
    }
  }
  return result;
}

uint64_t sub_1DB717F10(_WORD *a1, int a2, unsigned int a3, int a4)
{
  uint64_t v4;
  __int16 v5;

  v4 = 1;
  if (a2 == 256 && a3 <= 7)
  {
    switch(a4)
    {
      case 10006:
        v5 = *a1 & 0xFFF8 | a3;
        break;
      case 10004:
        v5 = *a1 & 0xFFC7 | (8 * (a3 & 7));
        break;
      case 10002:
        v5 = *a1 & 0xFE3F | ((a3 & 7) << 6);
        break;
      default:
        return 1;
    }
    v4 = 0;
    *a1 = v5;
  }
  return v4;
}

uint64_t sub_1DB717F84(_WORD *a1, int a2, unsigned int a3, int a4, int a5, const __int32 *a6, size_t a7)
{
  uint64_t result;
  _DWORD *v15;

  result = sub_1DB717F10(a1, a2, a3, a4);
  if ((_DWORD)result)
  {
    v15 = sub_1DB717CC8((uint64_t)a1, a2, a3, a4, a5);
    if (v15)
    {
      if (a6 && a7 && *a6)
        sub_1DB72D3A8((uint64_t)(v15 + 6), a6, a7);
      else
        sub_1DB6DEF44((uint64_t)(v15 + 6));
      return 0;
    }
    else
    {
      return 4294967271;
    }
  }
  return result;
}

uint64_t sub_1DB71802C(uint64_t a1, int a2)
{
  uint64_t **v2;
  unsigned int v3;
  BOOL v4;

  v2 = *(uint64_t ***)(a1 + 8);
  if (v2)
  {
    v3 = 0;
    do
    {
      if (((_DWORD)v2[1] & a2) != 0)
        ++v3;
      v2 = (uint64_t **)*v2;
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  if (v3)
    v4 = (a2 & 0x100) == 0;
  else
    v4 = 1;
  if (v4)
    return v3;
  else
    return v3 + 3;
}

uint64_t sub_1DB71806C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_1DB718074(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t **v4;
  BOOL v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    LODWORD(v3) = 0;
    v4 = *(uint64_t ***)(a1 + 8);
    do
    {
      if (((_DWORD)v4[1] & a2) != 0)
        LODWORD(v3) = v3 + 1;
      v4 = (uint64_t **)*v4;
    }
    while (v4);
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if ((_DWORD)v3)
    v5 = (a2 & 0x100) == 0;
  else
    v5 = 1;
  if (v5)
    v3 = v3;
  else
    v3 = (v3 + 3);
  if ((int)v3 <= ((a2 << 23 >> 31) & 3))
    v6 = 0;
  else
    v6 = 10002;
  *(_DWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 16) = v2;
  return v3;
}

uint64_t sub_1DB7180D8(uint64_t a1, unsigned __int16 *a2, int a3, _DWORD *a4, int *a5, _DWORD *a6, _DWORD *a7, _QWORD *a8)
{
  int v8;
  uint64_t result;
  int v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;

  *a8 = 0;
  *a7 = -1;
  v8 = *((_DWORD *)a2 + 6);
  if (!v8)
    return 4294967276;
  if ((a3 & 0x100) == 0)
  {
LABEL_7:
    v13 = (uint64_t *)*((_QWORD *)a2 + 2);
    if (!v13)
    {
LABEL_10:
      *((_DWORD *)a2 + 6) = 0;
      *a4 = 0;
      *a5 = 0;
      *a6 = 0;
      *a7 = -1;
      result = 1;
      *a8 = 0;
      return result;
    }
    while (1)
    {
      v14 = *((_DWORD *)v13 + 2);
      if ((v14 & a3) != 0)
        break;
      v13 = (uint64_t *)*v13;
      *((_QWORD *)a2 + 2) = v13;
      if (!v13)
        goto LABEL_10;
    }
    *a4 = v14;
    *a5 = *((_DWORD *)v13 + 4);
    *a6 = *((_DWORD *)v13 + 3);
    *a7 = *((_DWORD *)v13 + 5);
    if (sub_1DB6DF424(a1, (uint64_t)(v13 + 3), a8))
    {
      if (*__error() == 12)
        return 4294967266;
      *a8 = 0;
    }
    result = 0;
    v15 = **((_QWORD **)a2 + 2);
    goto LABEL_20;
  }
  if (v8 != 10006)
  {
    if (v8 == 10004)
    {
      result = 0;
      *a5 = (*a2 >> 3) & 7;
      *a4 = 256;
      *a6 = 10004;
      v12 = 10006;
      goto LABEL_17;
    }
    if (v8 == 10002)
    {
      result = 0;
      *a5 = (*a2 >> 6) & 7;
      *a4 = 256;
      *a6 = 10002;
      v12 = 10004;
LABEL_17:
      *((_DWORD *)a2 + 6) = v12;
      return result;
    }
    goto LABEL_7;
  }
  result = 0;
  *a5 = *a2 & 7;
  *a4 = 256;
  *a6 = 10006;
  *((_DWORD *)a2 + 6) = -1;
  v15 = *((_QWORD *)a2 + 1);
LABEL_20:
  *((_QWORD *)a2 + 2) = v15;
  return result;
}

__int32 *sub_1DB718250(uint64_t a1, int64_t *a2, __int16 a3, uint64_t a4)
{
  char v5;
  int v8;
  int v9;
  uint64_t v10;
  int64_t v11;
  int v12;
  __int32 *v13;
  __int32 *v14;
  int v15;
  __int32 *v17;
  __int32 *v18;
  uint64_t *i;
  int v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  const __int32 *v26;
  int v27;
  __int32 *v28;
  int v29;
  int64_t v30;
  const char *v31;
  __int32 v32;
  __int32 *v33;
  const __int32 *v34;

  v5 = a3;
  v8 = *(_DWORD *)(a1 + 48);
  if ((v8 & 0x3C00) != 0)
  {
    if ((v8 & 0x300) != 0)
      return 0;
    v9 = 15360;
  }
  else
  {
    v9 = a3 & 0x300;
    if (v9 == 768 || (a3 & 0x300) == 0)
    {
      v5 = a3 | 2;
      v9 = 768;
    }
  }
  v10 = sub_1DB71851C(a1, v9, v5, 1, a4, 0);
  if (!v10)
    return 0;
  v11 = v10;
  v34 = 0;
  if ((v5 & 8) != 0)
    v12 = 44;
  else
    v12 = 10;
  v32 = v12;
  v13 = (__int32 *)malloc_type_malloc(4 * v10, 0x100004052888210uLL);
  v33 = v13;
  if (!v13)
  {
    if (*__error() != 12)
      return 0;
    v31 = "No memory";
LABEL_48:
    sub_1DB730818(1, v31);
  }
  v14 = v13;
  if ((v9 & 0x100) != 0)
  {
    sub_1DB7187D8(&v33, 0, 256, 10002, v5, 0, *(_WORD *)a1 & 0x1C0, -1);
    v17 = v33;
    *v33 = v32;
    v33 = v17 + 1;
    sub_1DB7187D8(&v33, 0, 256, 10004, v5, 0, *(_WORD *)a1 & 0x38, -1);
    v18 = v33;
    *v33 = v32;
    v33 = v18 + 1;
    sub_1DB7187D8(&v33, 0, 256, 10006, v5, 0, *(_WORD *)a1 & 7, -1);
    v15 = 3;
  }
  else
  {
    v15 = 0;
  }
  for (i = *(uint64_t **)(a1 + 8); i; i = (uint64_t *)*i)
  {
    v20 = *((_DWORD *)i + 2);
    if ((v20 & v9) != 0)
    {
      if (v20 != 256
        || ((v21 = *((_DWORD *)i + 3) - 10002, v22 = v21 > 4, v23 = (1 << v21) & 0x15, !v22)
          ? (v24 = v23 == 0)
          : (v24 = 1),
            v24))
      {
        if (v20 != 512 || (v5 & 2) == 0)
          v26 = 0;
        else
          v26 = (const __int32 *)&unk_1DB74CD6C;
        v27 = sub_1DB6DF324(a4, (uint64_t)(i + 3), &v34);
        if (v27)
        {
          if (v27 < 0 && *__error() == 12)
          {
            free(v14);
            return 0;
          }
        }
        else
        {
          if (v15 >= 1)
          {
            v28 = v33;
            *v33 = v32;
            v33 = v28 + 1;
          }
          if ((v5 & 1) != 0)
            v29 = *((_DWORD *)i + 5);
          else
            v29 = -1;
          sub_1DB7187D8(&v33, v26, *((_DWORD *)i + 2), *((_DWORD *)i + 3), v5, v34, *((_DWORD *)i + 4), v29);
          ++v15;
        }
      }
    }
  }
  *v33 = 0;
  v30 = wcslen(v14);
  if (v30 >= v11)
  {
    v31 = "Buffer overrun";
    goto LABEL_48;
  }
  if (a2)
    *a2 = v30;
  return v14;
}

uint64_t sub_1DB71851C(uint64_t a1, int a2, char a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v35;
  __int32 *v36;
  uint64_t v37;

  v8 = *(uint64_t **)(a1 + 8);
  if (v8)
  {
    v9 = 0;
    v10 = 0;
    v36 = 0;
    v37 = 0;
    v11 = a2 & 0x200;
    v35 = 0;
    v12 = (a3 & 4) == 0 || (a2 & 0x300) == 0;
    do
    {
      v13 = *((_DWORD *)v8 + 2);
      if ((v13 & a2) != 0)
      {
        v14 = *((_DWORD *)v8 + 3);
        v15 = v14 - 10002;
        v16 = v13 != 256 || v15 > 4;
        v17 = (1 << v15) & 0x15;
        if (v16 || v17 == 0)
        {
          if ((v11 & v13) != 0)
            v19 = v9 + 8;
          else
            v19 = v9;
          switch(v14)
          {
            case 10001:
            case 10005:
              goto LABEL_19;
            case 10002:
              if (a2 == 15360)
                goto LABEL_23;
LABEL_19:
              v19 += 4;
              goto LABEL_26;
            case 10003:
            case 10006:
              goto LABEL_25;
            case 10004:
              if (a2 == 15360)
              {
LABEL_23:
                v20 = 6;
LABEL_24:
                v19 += v20;
                v21 = v19 + 1;
              }
              else
              {
LABEL_25:
                v19 += 5;
LABEL_26:
                v21 = v19 + 1;
                if ((v14 | 2) == 0x2713)
                {
                  v22 = (uint64_t)(v8 + 3);
                  if (a4)
                  {
                    v23 = sub_1DB6DF324(a5, v22, &v36);
                    if (!v23 && v36)
                    {
                      v24 = wcslen(v36) + v21;
                      goto LABEL_55;
                    }
                    if (v23 < 0 && *__error() == 12)
                      return 0;
LABEL_54:
                    v24 = v19 + 14;
                  }
                  else
                  {
                    if (sub_1DB72D240(a5, v22, &v37, &v35, a6))
                      return 0;
                    if (!v35 || !v37)
                      goto LABEL_54;
                    v24 = v35 + v21;
                  }
LABEL_55:
                  v25 = v24 + 1;
                  if (!v12)
                    goto LABEL_34;
                  goto LABEL_35;
                }
              }
              v25 = v19 + 2;
              if (a2 == 15360)
                v25 = v21;
              if (!v12)
LABEL_34:
                v25 -= (*((_DWORD *)v8 + 3) - 10005) < 2;
LABEL_35:
              if (a2 == 15360)
              {
                v26 = 27;
                if ((*((_BYTE *)v8 + 9) & 8) == 0)
                  v26 = 28;
                v27 = v26 + v25;
              }
              else
              {
                v27 = v25 + 3;
              }
              if ((*((_DWORD *)v8 + 3) | 2) == 0x2713 && (a3 & 1) != 0)
              {
                v28 = *((_DWORD *)v8 + 5);
                v29 = 1;
                if (v28 >= 10)
                {
                  do
                  {
                    ++v29;
                    v16 = v28 > 0x63;
                    v28 /= 0xAu;
                  }
                  while (v16);
                }
                v27 += 1 + v29;
              }
              ++v10;
              v9 = v27 + 1;
              break;
            default:
              if (v14 != 10107)
                goto LABEL_26;
              v20 = 9;
              goto LABEL_24;
          }
        }
      }
      v8 = (uint64_t *)*v8;
    }
    while (v8);
    if ((a2 & 0x100) == 0)
    {
      if (!v10)
        return 0;
      return v9;
    }
  }
  else
  {
    v9 = 0;
    result = 0;
    if ((a2 & 0x100) == 0)
      return result;
  }
  v31 = v9 + 32;
  v9 += 31;
  if ((a3 & 4) == 0)
    return v31;
  return v9;
}

uint64_t sub_1DB7187D8(__int32 **a1, const __int32 *a2, int a3, int a4, char a5, const __int32 *a6, unsigned int a7, int a8)
{
  __int32 *v15;
  const __int32 *v16;
  const __int32 *v17;
  __int32 *v18;
  uint64_t result;
  int v20;
  __int32 *v21;
  uint64_t i;
  int v23;
  uint64_t v24;
  int *v25;
  int v26;
  int *v27;
  __int32 *v28;
  unsigned int v29;
  unint64_t v30;

  if (a2)
  {
    wcscpy(*a1, a2);
    *a1 += wcslen(*a1);
  }
  switch(a4)
  {
    case 10001:
      v15 = *a1;
      goto LABEL_16;
    case 10002:
      v15 = *a1;
      if ((a3 & 0x3C00) != 0)
      {
        v16 = (const __int32 *)&unk_1DB74CE20;
        goto LABEL_14;
      }
      a6 = 0;
      a8 = -1;
LABEL_16:
      v17 = (const __int32 *)&unk_1DB74CDF4;
      goto LABEL_19;
    case 10003:
      v15 = *a1;
      goto LABEL_18;
    case 10004:
      v15 = *a1;
      if ((a3 & 0x3C00) != 0)
      {
        v16 = (const __int32 *)&unk_1DB74CE3C;
LABEL_14:
        wcscpy(v15, v16);
        a6 = 0;
        a8 = -1;
      }
      else
      {
        a6 = 0;
        a8 = -1;
LABEL_18:
        v17 = (const __int32 *)&unk_1DB74CE08;
LABEL_19:
        wcscpy(v15, v17);
      }
LABEL_20:
      v18 = &(*a1)[wcslen(*a1)];
      *v18 = 58;
      result = (uint64_t)(v18 + 1);
      *a1 = (__int32 *)result;
      if ((a3 & 0x300) == 0 && (a4 | 2) != 0x2713)
        goto LABEL_36;
      if (a6)
      {
        wcscpy((__int32 *)result, a6);
        result = (uint64_t)&(*a1)[wcslen(*a1)];
      }
      else if ((a4 | 2) == 0x2713)
      {
        sub_1DB71A9BC((uint64_t)a1, a8);
        if ((a3 & 0x3C00) == 0)
          a8 = -1;
        result = (uint64_t)*a1;
LABEL_35:
        *(_DWORD *)result = 58;
        result += 4;
        if ((a3 & 0x300) != 0)
          goto LABEL_27;
        goto LABEL_36;
      }
      if ((a4 - 10007) < 0xFFFFFFFE || (a5 & 4) == 0)
        goto LABEL_35;
      if ((a3 & 0x300) != 0)
      {
LABEL_27:
        *(int8x8_t *)result = vbsl_s8((int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(a7), (int8x8_t)0x9200000124)), (int8x8_t)0x2D0000002DLL, (int8x8_t)0x7700000072);
        if ((a7 & 0x49) != 0)
          v20 = 120;
        else
          v20 = 45;
        v21 = (__int32 *)(result + 12);
        *a1 = (__int32 *)(result + 12);
        *(_DWORD *)(result + 8) = v20;
        goto LABEL_54;
      }
LABEL_36:
      for (i = 0; i != 42; i += 3)
      {
        if ((dword_1DB74CF08[i] & a7) != 0)
        {
          v23 = dword_1DB74CF08[i + 2];
        }
        else
        {
          if ((a5 & 0x10) != 0)
            continue;
          v23 = 45;
        }
        *(_DWORD *)result = v23;
        result += 4;
      }
      v24 = 0;
      *(_DWORD *)result = 58;
      v25 = (int *)(result + 4);
      do
      {
        if ((dword_1DB74CFB0[v24] & a7) != 0)
        {
          v26 = dword_1DB74CFB0[v24 + 2];
          v27 = v25 + 1;
        }
        else
        {
          if ((a5 & 0x10) != 0)
            goto LABEL_49;
          v27 = v25 + 1;
          *a1 = v25 + 1;
          v26 = 45;
        }
        *v25 = v26;
        v25 = v27;
LABEL_49:
        v24 += 3;
      }
      while (v24 != 21);
      *v25 = 58;
      v28 = v25 + 1;
      *a1 = v28;
      HIDWORD(v30) = a3;
      LODWORD(v30) = a3 - 1024;
      v29 = v30 >> 10;
      if (v29 <= 7 && ((0x8Bu >> v29) & 1) != 0)
        wcscpy(v28, (const __int32 *)*(&off_1EA3228B8 + (int)v29));
      result = wcslen(*a1);
      v21 = &(*a1)[result];
      *a1 = v21;
LABEL_54:
      if (a8 != -1)
      {
        *v21 = 58;
        *a1 = v21 + 1;
        return sub_1DB71A9BC((uint64_t)a1, a8);
      }
      return result;
    case 10005:
      v15 = *a1;
      v16 = (const __int32 *)&unk_1DB74CEDC;
      goto LABEL_14;
    case 10006:
      v15 = *a1;
      v16 = (const __int32 *)&unk_1DB74CEF0;
      goto LABEL_14;
    default:
      if (a4 != 10107)
        goto LABEL_20;
      v15 = *a1;
      v16 = (const __int32 *)&unk_1DB74CE58;
      goto LABEL_14;
  }
}

char *sub_1DB718B14(uint64_t a1, int64_t *a2, __int16 a3, uint64_t a4)
{
  char v5;
  int v8;
  int v9;
  size_t v10;
  int64_t v11;
  char v12;
  char *v13;
  char *v14;
  int v15;
  const char *v16;
  char *v17;
  char *v18;
  uint64_t *i;
  int v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  const char *v26;
  char *v27;
  int v28;
  int64_t v29;
  char *v31;
  const char *v32;
  int64_t v33;

  v5 = a3;
  v8 = *(_DWORD *)(a1 + 48);
  if ((v8 & 0x3C00) != 0)
  {
    if ((v8 & 0x300) != 0)
      return 0;
    v9 = 15360;
  }
  else
  {
    v9 = a3 & 0x300;
    if (v9 == 768 || (a3 & 0x300) == 0)
    {
      v5 = a3 | 2;
      v9 = 768;
    }
  }
  v10 = sub_1DB71851C(a1, v9, v5, 0, 0, a4);
  if (!v10)
    return 0;
  v11 = v10;
  v32 = 0;
  v33 = 0;
  if ((v5 & 8) != 0)
    v12 = 44;
  else
    v12 = 10;
  v13 = (char *)malloc_type_malloc(v10, 0x100004077774924uLL);
  v31 = v13;
  if (!v13)
  {
    if (*__error() != 12)
      return 0;
    v16 = "No memory";
LABEL_47:
    sub_1DB730818(1, v16);
  }
  v14 = v13;
  if ((v9 & 0x100) != 0)
  {
    sub_1DB718DC4(&v31, 0, 256, 10002, v5, 0, *(_WORD *)a1 & 0x1C0, -1);
    v17 = v31;
    *v31 = v12;
    v31 = v17 + 1;
    sub_1DB718DC4(&v31, 0, 256, 10004, v5, 0, *(_WORD *)a1 & 0x38, -1);
    v18 = v31;
    *v31 = v12;
    v31 = v18 + 1;
    sub_1DB718DC4(&v31, 0, 256, 10006, v5, 0, *(_WORD *)a1 & 7, -1);
    v15 = 3;
  }
  else
  {
    v15 = 0;
  }
  for (i = *(uint64_t **)(a1 + 8); i; i = (uint64_t *)*i)
  {
    v20 = *((_DWORD *)i + 2);
    if ((v20 & v9) != 0)
    {
      if (v20 != 256
        || ((v21 = *((_DWORD *)i + 3) - 10002, v22 = v21 > 4, v23 = (1 << v21) & 0x15, !v22)
          ? (v24 = v23 == 0)
          : (v24 = 1),
            v24))
      {
        if (v20 != 512 || (v5 & 2) == 0)
          v26 = 0;
        else
          v26 = "default:";
        if (sub_1DB72D240(0, (uint64_t)(i + 3), &v32, &v33, a4))
        {
          free(v14);
          return 0;
        }
        if (v15 >= 1)
        {
          v27 = v31;
          *v31 = v12;
          v31 = v27 + 1;
        }
        if ((v5 & 1) != 0 || !v32)
          v28 = *((_DWORD *)i + 5);
        else
          v28 = -1;
        sub_1DB718DC4(&v31, v26, *((_DWORD *)i + 2), *((_DWORD *)i + 3), v5, v32, *((_DWORD *)i + 4), v28);
        ++v15;
      }
    }
  }
  *v31 = 0;
  v29 = strlen(v14);
  v33 = v29;
  if (v29 >= v11)
  {
    v16 = "Buffer overrun";
    goto LABEL_47;
  }
  if (a2)
    *a2 = v29;
  return v14;
}

uint64_t sub_1DB718DC4(char **a1, const char *a2, int a3, int a4, char a5, const char *a6, int a7, int a8)
{
  char *v15;
  int v16;
  int v17;
  char *v18;
  uint64_t result;
  char v20;
  char *v21;
  char v22;
  char *v23;
  char v24;
  char *v25;
  char *v26;
  uint64_t i;
  char v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char v33;
  char *v34;
  char *v35;
  char *v36;
  unint64_t v37;
  char *v38;
  int v39;
  char *v40;

  if (a2)
  {
    strcpy(*a1, a2);
    *a1 += strlen(*a1);
  }
  switch(a4)
  {
    case 10001:
      v15 = *a1;
      goto LABEL_17;
    case 10002:
      v15 = *a1;
      if ((a3 & 0x3C00) != 0)
      {
        a6 = 0;
        *(_DWORD *)(v15 + 3) = 4223589;
        v16 = 1701738351;
        goto LABEL_14;
      }
      a6 = 0;
      a8 = -1;
LABEL_17:
      v15[4] = 0;
      v17 = 1919251317;
      goto LABEL_20;
    case 10003:
      v15 = *a1;
      goto LABEL_19;
    case 10004:
      v15 = *a1;
      if ((a3 & 0x3C00) != 0)
      {
        a6 = 0;
        *(_DWORD *)(v15 + 3) = 4223093;
        v16 = 1970238055;
LABEL_14:
        *(_DWORD *)v15 = v16;
LABEL_15:
        a8 = -1;
      }
      else
      {
        a6 = 0;
        a8 = -1;
LABEL_19:
        *((_WORD *)v15 + 2) = 112;
        v17 = 1970238055;
LABEL_20:
        *(_DWORD *)v15 = v17;
      }
LABEL_21:
      v18 = *a1;
      result = strlen(*a1);
      *a1 += result + 1;
      v18[result] = 58;
      if ((a3 & 0x300) == 0 && (a4 | 2) != 0x2713)
        goto LABEL_42;
      if (a6)
      {
        strcpy(*a1, a6);
        result = strlen(*a1);
        *a1 += result;
      }
      else if ((a4 | 2) == 0x2713)
      {
        result = sub_1DB71AA2C((uint64_t)a1, a8);
        if ((a3 & 0x3C00) == 0)
          a8 = -1;
LABEL_41:
        v26 = (*a1)++;
        *v26 = 58;
        if ((a3 & 0x300) != 0)
          goto LABEL_28;
        goto LABEL_42;
      }
      if ((a4 - 10007) < 0xFFFFFFFE || (a5 & 4) == 0)
        goto LABEL_41;
      if ((a3 & 0x300) != 0)
      {
LABEL_28:
        if ((a7 & 0x124) != 0)
          v20 = 114;
        else
          v20 = 45;
        v21 = (*a1)++;
        *v21 = v20;
        if ((a7 & 0x92) != 0)
          v22 = 119;
        else
          v22 = 45;
        v23 = (*a1)++;
        *v23 = v22;
        if ((a7 & 0x49) != 0)
          v24 = 120;
        else
          v24 = 45;
        v25 = (*a1)++;
        *v25 = v24;
        goto LABEL_61;
      }
LABEL_42:
      for (i = 0; i != 42; i += 3)
      {
        if ((dword_1DB74CF08[i] & a7) != 0)
        {
          v28 = dword_1DB74CF08[i + 1];
          v29 = (*a1)++;
          *v29 = v28;
        }
        else if ((a5 & 0x10) == 0)
        {
          v30 = (*a1)++;
          *v30 = 45;
        }
      }
      v31 = 0;
      v32 = (*a1)++;
      *v32 = 58;
      do
      {
        if ((dword_1DB74CFB0[v31] & a7) != 0)
        {
          v33 = dword_1DB74CFB0[v31 + 1];
          v34 = (*a1)++;
          *v34 = v33;
        }
        else if ((a5 & 0x10) == 0)
        {
          v35 = (*a1)++;
          *v35 = 45;
        }
        v31 += 3;
      }
      while (v31 != 21);
      v36 = (*a1)++;
      *v36 = 58;
      HIDWORD(v37) = a3;
      LODWORD(v37) = a3 - 1024;
      switch((v37 >> 10))
      {
        case 0u:
          v38 = *a1;
          *((_WORD *)*a1 + 2) = 119;
          v39 = 1869376609;
          goto LABEL_59;
        case 1u:
          v38 = *a1;
          (*a1)[4] = 0;
          v39 = 2037278052;
          goto LABEL_59;
        case 3u:
          v38 = *a1;
          *((_WORD *)*a1 + 2) = 116;
          v39 = 1768191329;
          goto LABEL_59;
        case 7u:
          v38 = *a1;
          *((_WORD *)*a1 + 2) = 109;
          v39 = 1918987361;
LABEL_59:
          *(_DWORD *)v38 = v39;
          break;
        default:
          break;
      }
      result = strlen(*a1);
      *a1 += result;
LABEL_61:
      if (a8 != -1)
      {
        v40 = (*a1)++;
        *v40 = 58;
        return sub_1DB71AA2C((uint64_t)a1, a8);
      }
      return result;
    case 10005:
      a6 = 0;
      v15 = *a1;
      (*a1)[4] = 0;
      v16 = 1802723693;
      goto LABEL_14;
    case 10006:
      a6 = 0;
      v15 = *a1;
      *((_WORD *)*a1 + 2) = 114;
      v16 = 1701344367;
      goto LABEL_14;
    default:
      if (a4 != 10107)
        goto LABEL_21;
      a6 = 0;
      strcpy(*a1, "everyone@");
      goto LABEL_15;
  }
}

uint64_t sub_1DB71921C(_WORD *a1, unsigned int *a2, int a3)
{
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int i;
  uint64_t v10;
  unsigned int *v11;
  __int32 *v12;
  __int32 *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v17;
  __int32 **v18;
  __int32 *v19;
  int64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  __int32 **v25;
  unint64_t v26;
  int *v27;
  int v28;
  __int32 *v29;
  unsigned int v30;
  __int32 **v31;
  __int32 *v32;
  __int32 *v33;
  unsigned int v34;
  __int32 **v35;
  const __int32 *v36;
  unint64_t v37;
  int64_t v38;
  int v39;
  unint64_t v40;
  int *v41;
  int v42;
  int v43;
  int *v44;
  unint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  int v48;
  int *v49;
  __int32 **v50;
  __int32 *v51;
  __int32 *v52;
  unsigned int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  __int32 **v58;
  __int32 *v59;
  __int32 *v60;
  int v61;
  int v62;
  int v63;
  __int32 **v64;
  const __int32 *v65;
  int64_t v66;
  int v67;
  int v68;
  int v69;
  unint64_t v70;
  int *v71;
  __int32 **v72;
  __int32 **v73;
  __int32 *v74;
  __int32 *v75;
  int v76;
  unsigned int v77;
  int v78;
  int v79;
  uint64_t v80;
  int v82;
  int *v83;
  int v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  int v92;
  int v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  __int32 *v99[2];
  unsigned int *v100;
  unint64_t v101;
  uint64_t v102;

  v3 = a2;
  v102 = *MEMORY[0x1E0C80C00];
  v4 = 4294967266;
  if (a3 > 767)
  {
    if (a3 == 15360)
    {
      v96 = 6;
      a3 = 15360;
      if (!a2)
        goto LABEL_217;
LABEL_9:
      v98 = 0;
      if (*a2)
      {
        v95 = a3;
        v5 = 0;
        v94 = 0;
        while (1)
        {
          v6 = 0;
          do
          {
            v7 = v6;
            while (1)
            {
              i = *v3;
              if (*v3 > 0x20 || ((1 << *v3) & 0x100000600) == 0)
                break;
              ++v3;
            }
            v10 = 0;
            while (i > 0x3A || ((1 << i) & 0x400100800000401) == 0)
              i = v3[++v10];
            v11 = &v3[v10];
            v12 = (__int32 *)v3;
            if (v10 * 4)
            {
              v13 = (__int32 *)&v3[v10];
              do
              {
                v12 = v13;
                v14 = *--v13;
                v15 = (1 << v14) & 0x100000600;
              }
              while (v14 <= 0x20 && v15 != 0);
            }
            if (i == 35)
            {
              for (i = 35; i > 0x2C || ((1 << i) & 0x100000000401) == 0; i = v17)
              {
                v17 = v11[1];
                ++v11;
              }
            }
            if (v6 < v96)
            {
              v18 = &v99[2 * v6];
              *v18 = (__int32 *)v3;
              v18[1] = v12;
            }
            v3 = &v11[i != 0];
            ++v6;
          }
          while (i == 58);
          v97 = v5;
          if (v96 > v6)
            bzero(&v99[2 * v7 + 2], 16 * (v96 - 2 - v7) + 16);
          v19 = v99[0];
          if (v99[0] && *v99[0] == 35)
          {
            v4 = v97;
            goto LABEL_210;
          }
          v98 = 0;
          v20 = (char *)v99[1] - (char *)v99[0];
          if (v95 != 15360)
          {
            if (*v99[0] != 100)
              goto LABEL_52;
            if (v20 == 4)
              goto LABEL_48;
            if ((unint64_t)v20 >= 0x19)
            {
              if (!wmemcmp(v99[0] + 1, dword_1DB74CD90, 6uLL))
              {
                if ((unint64_t)v20 < 0x1D)
                {
LABEL_48:
                  v23 = 512;
                  v24 = 1;
                }
                else
                {
                  v24 = 0;
                  v99[0] = v19 + 7;
                  v23 = 512;
                }
              }
              else
              {
                v24 = 0;
                v23 = v95;
              }
            }
            else
            {
LABEL_52:
              v24 = 0;
              v23 = v95;
            }
            v25 = &v99[2 * v24 + 2];
            v27 = *v25;
            v26 = (unint64_t)v25[1];
            if ((unint64_t)*v25 >= v26)
              goto LABEL_63;
            v28 = 0;
            v29 = *v25;
            do
            {
              v30 = *v29;
              if ((*v29 - 58) < 0xFFFFFFF6)
                goto LABEL_63;
              if (v28 > 214748364 || v28 == 214748364 && v30 > 0x37)
                v28 = 0x7FFFFFFF;
              else
                v28 = v30 + 10 * v28 - 48;
              ++v29;
            }
            while ((unint64_t)v29 < v26);
            if (v28 == -1)
            {
LABEL_63:
              if (v24 + 3 <= v7)
              {
                v31 = &v99[2 * v24 + 6];
                v32 = *v31;
                v33 = v31[1];
                if (v32 < v33)
                {
                  v28 = 0;
                  while (1)
                  {
                    v34 = *v32;
                    if ((*v32 - 58) < 0xFFFFFFF6)
                      break;
                    if (v28 > 214748364 || v28 == 214748364 && v34 > 0x37)
                      v28 = 0x7FFFFFFF;
                    else
                      v28 = v34 + 10 * v28 - 48;
                    if (++v32 >= v33)
                      goto LABEL_75;
                  }
                }
              }
              v28 = -1;
            }
LABEL_75:
            v35 = &v99[2 * v24];
            v36 = *v35 + 1;
            HIDWORD(v37) = **v35 - 103;
            LODWORD(v37) = HIDWORD(v37);
            v4 = 4294967276;
            v38 = (char *)v35[1] - (char *)*v35;
            switch((v37 >> 1))
            {
              case 0u:
                if (v38 == 4)
                {
                  v42 = 10004;
                  v43 = 10003;
                  goto LABEL_182;
                }
                if (v38 != 20)
                  goto LABEL_210;
                v88 = v24;
                v39 = v23;
                v40 = v26;
                v41 = v27;
                if (!wmemcmp(v36, dword_1DB74CDBC, 4uLL))
                {
                  v42 = 10004;
                  v43 = 10003;
                  goto LABEL_110;
                }
                goto LABEL_189;
              case 3u:
                if (v38 == 4)
                {
                  v43 = 10005;
                  goto LABEL_174;
                }
                if (v38 != 16)
                  goto LABEL_210;
                v89 = v24;
                v82 = v23;
                v86 = v26;
                v49 = v27;
                if (!wmemcmp(v36, dword_1DB74CDE4, 3uLL))
                {
                  v43 = 10005;
                  goto LABEL_105;
                }
                goto LABEL_189;
              case 4u:
                if (v38 == 4)
                {
                  v43 = 10006;
                }
                else
                {
                  if (v38 != 20)
                    goto LABEL_210;
                  v89 = v24;
                  v82 = v23;
                  v86 = v26;
                  v49 = v27;
                  if (wmemcmp(v36, dword_1DB74CDD0, 4uLL))
                    goto LABEL_189;
                  v43 = 10006;
LABEL_105:
                  v27 = v49;
                  v26 = v86;
                  v23 = v82;
                  v24 = v89;
                }
LABEL_174:
                v67 = v24 | 2;
                if ((v24 | 2) == (_DWORD)v6)
                {
                  if ((unint64_t)v27 < v26)
                  {
                    v91 = v24;
                    v84 = v23;
                    v68 = v43;
                    if (sub_1DB719D50(v27, v26, &v98))
                    {
                      v27 = 0;
                      v26 = 0;
                      v69 = -1;
                      v43 = v68;
                      v23 = v84;
                    }
                    else
                    {
                      v23 = v84;
                      if (v67 == (_DWORD)v7)
                        goto LABEL_213;
                      v43 = v68;
                      v27 = 0;
                      v26 = 0;
                      v69 = 0;
                    }
                    v24 = v91;
LABEL_186:
                    v53 = v98;
                    if (v98)
                      goto LABEL_205;
                    v85 = v23;
                    v92 = v43;
                    v70 = v26;
                    v71 = v27;
                    v72 = &(&v99[2 * v69 + 4])[2 * v24];
                    if (sub_1DB719D50(*v72, (unint64_t)v72[1], &v98))
                    {
                      v53 = v98;
                      v27 = v71;
                      v26 = v70;
                      v43 = v92;
                      v23 = v85;
                      goto LABEL_205;
                    }
                    goto LABEL_189;
                  }
                }
                else if (v67 == (_DWORD)v7 && (unint64_t)v27 < v26)
                {
                  goto LABEL_213;
                }
                v27 = 0;
                v26 = 0;
                goto LABEL_185;
              case 7u:
                if (v38 == 4)
                {
                  v42 = 10002;
                  v43 = 10001;
                }
                else
                {
                  if (v38 != 16)
                    goto LABEL_210;
                  v88 = v24;
                  v39 = v23;
                  v40 = v26;
                  v41 = v27;
                  if (wmemcmp(v36, dword_1DB74CDAC, 3uLL))
                    goto LABEL_189;
                  v42 = 10002;
                  v43 = 10001;
LABEL_110:
                  v27 = v41;
                  v26 = v40;
                  v23 = v39;
                  v24 = v88;
                }
LABEL_182:
                if ((unint64_t)v27 >= v26 && v28 == -1)
                {
                  v27 = 0;
                  v26 = 0;
                  v69 = 0;
                  v43 = v42;
                }
                else
                {
LABEL_185:
                  v69 = 0;
                }
                goto LABEL_186;
              default:
                goto LABEL_210;
            }
          }
          v21 = v20 >> 2;
          v4 = 4294967276;
          switch(v21)
          {
            case 4:
              if (wmemcmp(v99[0], dword_1DB74CDF4, 4uLL))
                goto LABEL_210;
              v22 = 10001;
              goto LABEL_82;
            case 5:
              if (wmemcmp(v99[0], dword_1DB74CE08, 5uLL))
                goto LABEL_210;
              v22 = 10003;
LABEL_82:
              v44 = (int *)v100;
              v45 = v101;
              if ((unint64_t)v100 >= v101)
                goto LABEL_111;
              v28 = 0;
              v46 = v100;
              break;
            case 6:
              if (!wmemcmp(v99[0], dword_1DB74CE20, 6uLL))
              {
                v44 = 0;
                v45 = 0;
                v48 = 0;
                v28 = -1;
                v22 = 10002;
              }
              else
              {
                if (wmemcmp(v19, dword_1DB74CE3C, 6uLL))
                  goto LABEL_210;
                v44 = 0;
                v45 = 0;
                v48 = 0;
                v28 = -1;
                v22 = 10004;
              }
              goto LABEL_113;
            case 9:
              if (wmemcmp(v99[0], dword_1DB74CE58, 9uLL))
                goto LABEL_210;
              v44 = 0;
              v45 = 0;
              v48 = 0;
              v28 = -1;
              v22 = 10107;
              goto LABEL_113;
            default:
              goto LABEL_210;
          }
          while (1)
          {
            v47 = *v46;
            if (*v46 - 58 < 0xFFFFFFF6)
              break;
            if (v28 > 214748364 || v28 == 214748364 && v47 > 0x37)
              v28 = 0x7FFFFFFF;
            else
              v28 = v47 + 10 * v28 - 48;
            if ((unint64_t)++v46 >= v101)
            {
              v48 = 1;
              goto LABEL_113;
            }
          }
LABEL_111:
          v48 = 1;
          v28 = -1;
LABEL_113:
          v50 = &v99[2 * (v48 + 1)];
          v51 = *v50;
          v52 = v50[1];
          if (v51 >= v52)
          {
            v53 = 0;
            goto LABEL_141;
          }
          v53 = 0;
          do
          {
            v55 = *v51++;
            v54 = v55;
            if (v55 > 98)
            {
              v57 = v54 - 111;
              v56 = 8;
              switch(v57)
              {
                case 0:
                  v56 = 0x4000;
                  goto LABEL_137;
                case 1:
                  v56 = 32;
                  goto LABEL_137;
                case 3:
                  goto LABEL_137;
                case 4:
                  v56 = 0x8000;
                  goto LABEL_137;
                case 8:
                  v56 = 16;
                  goto LABEL_137;
                case 9:
                  v56 = 1;
                  goto LABEL_137;
                default:
                  goto LABEL_193;
              }
            }
            if (v54 <= 67)
            {
              switch(v54)
              {
                case '-':
                  continue;
                case 'A':
                  v56 = 1024;
                  break;
                case 'C':
                  v56 = 0x2000;
                  break;
                default:
                  goto LABEL_193;
              }
            }
            else if (v54 > 86)
            {
              if (v54 == 87)
              {
                v56 = 128;
              }
              else
              {
                if (v54 != 97)
                {
LABEL_193:
                  v98 = v53;
LABEL_213:
                  v4 = 4294967276;
                  goto LABEL_210;
                }
                v56 = 512;
              }
            }
            else if (v54 == 68)
            {
              v56 = 256;
            }
            else
            {
              if (v54 != 82)
                goto LABEL_193;
              v56 = 64;
            }
LABEL_137:
            v53 |= v56;
          }
          while (v51 < v52);
          v98 = v53;
LABEL_141:
          v58 = &v99[2 * (v48 | 2u)];
          v59 = *v58;
          v60 = v58[1];
          if (v59 >= v60)
            goto LABEL_163;
          while (2)
          {
            v62 = *v59++;
            v61 = v62;
            if (v62 > 99)
            {
              if (v61 > 104)
              {
                if (v61 == 105)
                {
                  v63 = 0x10000000;
                }
                else
                {
                  if (v61 != 110)
                    goto LABEL_193;
                  v63 = 0x8000000;
                }
              }
              else if (v61 == 100)
              {
                v63 = 0x4000000;
              }
              else
              {
                if (v61 != 102)
                  goto LABEL_193;
                v63 = 0x2000000;
              }
              goto LABEL_160;
            }
            if (v61 > 72)
            {
              if (v61 == 73)
              {
                v63 = 0x1000000;
              }
              else
              {
                if (v61 != 83)
                  goto LABEL_193;
                v63 = 0x20000000;
              }
LABEL_160:
              v53 |= v63;
              goto LABEL_161;
            }
            if (v61 != 45)
            {
              if (v61 != 70)
                goto LABEL_193;
              v63 = 0x40000000;
              goto LABEL_160;
            }
LABEL_161:
            if (v59 < v60)
              continue;
            break;
          }
          v98 = v53;
LABEL_163:
          v64 = &v99[2 * (v48 + 3)];
          v65 = *v64;
          v66 = (char *)v64[1] - (char *)*v64;
          if (v66 == 20)
          {
            v90 = v22;
            v83 = v44;
            v87 = v45;
            if (!wmemcmp(v65, dword_1DB74CE94, 5uLL))
            {
              v23 = 1024;
              goto LABEL_195;
            }
            if (!wmemcmp(v65, dword_1DB74CEAC, 5uLL))
            {
              v23 = 4096;
              goto LABEL_195;
            }
            if (!wmemcmp(v65, dword_1DB74CEC4, 5uLL))
            {
              v23 = 0x2000;
              goto LABEL_195;
            }
LABEL_189:
            v4 = 4294967276;
            goto LABEL_210;
          }
          if (v66 != 16)
            goto LABEL_213;
          v90 = v22;
          v83 = v44;
          v87 = v45;
          if (wmemcmp(v65, dword_1DB74CE80, 4uLL))
            goto LABEL_189;
          v23 = 2048;
LABEL_195:
          v73 = &v99[2 * (v48 | 4u)];
          v74 = *v73;
          v75 = v73[1];
          v27 = v83;
          v26 = v87;
          v43 = v90;
          if (v74 < v75)
          {
            v76 = 0;
            while (1)
            {
              v77 = *v74;
              if ((*v74 - 58) < 0xFFFFFFF6)
                break;
              if (v76 > 214748364 || v76 == 214748364 && v77 > 0x37)
                v76 = 0x7FFFFFFF;
              else
                v76 = v77 + 10 * v76 - 48;
              if (++v74 >= v75)
              {
                v28 = v76;
                break;
              }
            }
          }
LABEL_205:
          v78 = v28;
          v79 = v23;
          v80 = sub_1DB717F84(a1, v23, v53, v43, v78, v27, (uint64_t)(v26 - (_QWORD)v27) >> 2);
          v4 = v80;
          if ((int)v80 < -20)
            return v4;
          if ((_DWORD)v80)
            v4 = 4294967276;
          else
            v4 = v97;
          v94 |= v79;
LABEL_210:
          v5 = v4;
          if (!*v3)
          {
LABEL_218:
            sub_1DB718074((uint64_t)a1, v94);
            return v4;
          }
        }
      }
LABEL_217:
      v4 = 0;
      v94 = 0;
      goto LABEL_218;
    }
    if (a3 != 768)
      return v4;
    v96 = 5;
    a3 = 256;
LABEL_8:
    if (!a2)
      goto LABEL_217;
    goto LABEL_9;
  }
  v96 = 5;
  if (a3 == 256 || a3 == 512)
    goto LABEL_8;
  return v4;
}

uint64_t sub_1DB719D50(int *a1, unint64_t a2, _DWORD *a3)
{
  int v3;
  int v4;
  int v5;
  char v6;
  int v7;

  if ((unint64_t)a1 < a2)
  {
    v3 = 0;
    *a3 = 0;
    while (1)
    {
      v5 = *a1++;
      v4 = v5;
      v6 = v5 - 82;
      if ((v5 - 82) > 0x26)
        break;
      if (((1 << v6) & 0x100000001) != 0)
      {
        v7 = 4;
      }
      else if (((1 << v6) & 0x2000000020) != 0)
      {
        v7 = 2;
      }
      else
      {
        if (((1 << v6) & 0x4000000040) == 0)
          break;
        v7 = 1;
      }
      v3 |= v7;
      *a3 = v3;
LABEL_11:
      if ((unint64_t)a1 >= a2)
        return 1;
    }
    if (v4 != 45)
      return 0;
    goto LABEL_11;
  }
  return 0;
}

uint64_t sub_1DB719DD8(uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 *i;
  unsigned int j;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v19;
  _QWORD *v20;
  unint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  BOOL v25;
  unint64_t *v26;
  char *v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  char *v31;
  unsigned int v32;
  unsigned __int8 **v33;
  unsigned __int8 *v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  char **v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  char *v44;
  char *v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  int v52;
  int v53;
  int v55;
  int v56;
  int v57;
  _WORD *v58;
  int v59;
  int v60;
  char **v62;
  char *v63;
  unint64_t v64;
  unsigned int v65;
  unint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  char **v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  int v76;
  int v77;
  int **v78;
  int *v79;
  uint64_t v80;
  BOOL v82;
  int v83;
  int v84;
  int v86;
  int v87;
  char **v88;
  unsigned __int8 **v89;
  unsigned __int8 *v90;
  unint64_t v91;
  int v92;
  unint64_t v93;
  unsigned int v94;
  int v95;
  int v96;
  _DWORD *v97;
  char *v100;
  unsigned int v101;
  char *v102;
  int v103;
  int v104;
  int v105;
  int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  _QWORD v111[2];
  char *v112;
  char *v113;
  uint64_t v114;

  v4 = a2;
  v114 = *MEMORY[0x1E0C80C00];
  v5 = 4294967266;
  if (a3 > 767)
  {
    if (a3 == 15360)
    {
      v109 = 6;
      a3 = 15360;
    }
    else
    {
      if (a3 != 768)
        return v5;
      v109 = 5;
      a3 = 256;
    }
    goto LABEL_9;
  }
  v109 = 5;
  if (a3 == 256 || a3 == 512)
  {
LABEL_9:
    if (!a2 || (v110 = 0, !*a2))
    {
      v5 = 0;
      v105 = 0;
      goto LABEL_262;
    }
    v6 = 0;
    v105 = 0;
    v107 = a3;
    while (1)
    {
      v7 = 0;
      do
      {
        v8 = v7;
        for (i = v4; ; ++i)
        {
          j = *i;
          if (j > 0x20 || ((1 << j) & 0x100000600) == 0)
            break;
        }
        v12 = 0;
        while (j > 0x3A || ((1 << j) & 0x400100800000401) == 0)
          j = i[++v12];
        v13 = &i[v12];
        v14 = i;
        if (v12)
        {
          v15 = &i[v12];
          do
          {
            v14 = v15;
            v16 = *--v15;
            v17 = (1 << v16) & 0x100000600;
          }
          while (v16 <= 0x20 && v17 != 0);
        }
        if (j == 35)
        {
          for (j = 35; j > 0x2C || ((1 << j) & 0x100000000401) == 0; j = v19)
            v19 = *++v13;
        }
        if (j)
          v4 = v13 + 1;
        else
          v4 = v13;
        if (v7 < v109)
        {
          v20 = &v111[2 * v7];
          *v20 = i;
          v20[1] = v14;
        }
        ++v7;
      }
      while (j == 58);
      if (v109 > v7)
      {
        bzero(&v111[2 * v8 + 2], 16 * (v109 - 2 - v8) + 16);
        a3 = v107;
      }
      if (v111[0] && *(_BYTE *)v111[0] == 35)
      {
        v5 = v6;
        goto LABEL_255;
      }
      v110 = 0;
      v21 = v111[1] - v111[0];
      v108 = v6;
      if (a3 != 15360)
      {
        if (*(_BYTE *)v111[0] != 100)
          goto LABEL_58;
        if (v21 == 1)
          goto LABEL_52;
        if (v21 >= 7
          && (*(_DWORD *)(v111[0] + 1) == 1969317477
            ? (v25 = *(unsigned __int16 *)(v111[0] + 5) == 29804)
            : (v25 = 0),
              v25))
        {
          if (v21 < 8)
          {
LABEL_52:
            v23 = 512;
            v24 = 1;
          }
          else
          {
            v24 = 0;
            v111[0] += 7;
            v23 = 512;
          }
        }
        else
        {
LABEL_58:
          v24 = 0;
          v23 = a3;
        }
        v26 = &v111[2 * v24 + 2];
        v27 = (char *)*v26;
        v28 = v26[1];
        if (*v26 >= v28)
          goto LABEL_69;
        v29 = 0;
        v30 = v28 - (_QWORD)v27;
        v31 = v27;
        do
        {
          v32 = *v31;
          if (v32 - 58 < 0xFFFFFFF6)
            goto LABEL_69;
          if (v29 > 214748364 || v29 == 214748364 && v32 > 0x37)
            v29 = 0x7FFFFFFF;
          else
            v29 = v32 + 10 * v29 - 48;
          ++v31;
          --v30;
        }
        while (v30);
        if (v29 == -1)
        {
LABEL_69:
          if (v24 + 3 <= v8)
          {
            v33 = (unsigned __int8 **)&v111[2 * v24 + 6];
            v34 = *v33;
            v35 = (unint64_t)v33[1];
            if ((unint64_t)v34 < v35)
            {
              v29 = 0;
              v36 = v35 - (_QWORD)v34;
              while (1)
              {
                v37 = *v34;
                if (v37 - 58 < 0xFFFFFFF6)
                  break;
                if (v29 > 214748364 || v29 == 214748364 && v37 > 0x37)
                  v29 = 0x7FFFFFFF;
                else
                  v29 = v37 + 10 * v29 - 48;
                ++v34;
                if (!--v36)
                  goto LABEL_81;
              }
            }
          }
          v29 = -1;
        }
LABEL_81:
        v38 = (char **)&v111[2 * v24];
        v39 = *v38;
        v40 = v38[1] - *v38;
        if (!v40)
          goto LABEL_230;
        HIDWORD(v41) = *v39 - 103;
        LODWORD(v41) = HIDWORD(v41);
        v5 = 4294967276;
        switch((v41 >> 1))
        {
          case 0u:
            if (v40 != 1 && (v40 != 5 || *(_DWORD *)(v39 + 1) != 1886744434))
              goto LABEL_255;
            v42 = 10004;
            v22 = 10003;
            goto LABEL_143;
          case 3u:
            if (v40 != 1)
            {
              if (v40 != 4)
                goto LABEL_255;
              v52 = *(unsigned __int16 *)(v39 + 1);
              v53 = v39[3];
              if (v52 != 29537 || v53 != 107)
                goto LABEL_255;
            }
            v22 = 10005;
            goto LABEL_131;
          case 4u:
            if (v40 != 1 && (v40 != 5 || *(_DWORD *)(v39 + 1) != 1919248500))
              goto LABEL_255;
            v22 = 10006;
LABEL_131:
            v55 = v24 | 2;
            if ((v24 | 2) == (_DWORD)v7)
            {
              if ((unint64_t)v27 < v28)
              {
                v101 = v24;
                v56 = v23;
                v103 = v22;
                if (sub_1DB71A930(v27, v28, &v110))
                {
                  v27 = 0;
                  v28 = 0;
                  v57 = -1;
                  v58 = (_WORD *)a1;
                  v22 = v103;
                  v23 = v56;
                }
                else
                {
                  a3 = v107;
                  v22 = v103;
                  if (v55 == (_DWORD)v8)
                  {
                    v5 = 4294967276;
                    goto LABEL_255;
                  }
                  v23 = v56;
                  v27 = 0;
                  v28 = 0;
                  v57 = 0;
                  v58 = (_WORD *)a1;
                }
                v24 = v101;
LABEL_222:
                v100 = v27;
                v102 = (char *)v28;
                v65 = v110;
                if (v110)
                {
LABEL_243:
                  v95 = v22;
                  v96 = v23;
                  v104 = v23;
                  if (sub_1DB717F10(v58, v23, v65, v22))
                  {
                    v97 = sub_1DB717CC8(a1, v96, v65, v95, v29);
                    if (!v97)
                      return 4294967271;
                    v5 = v108;
                    if (v100 && v102 != v100 && *v100)
                    {
                      if (sub_1DB6E2F34((uint64_t)(v97 + 6), v100, v102 - v100, a4))
                      {
                        if (*__error() == 12)
                          return 4294967266;
                        v5 = 4294967276;
                      }
                    }
                    else
                    {
                      sub_1DB6DEF44((uint64_t)(v97 + 6));
                    }
                  }
                  else
                  {
                    v5 = v108;
                  }
                  v105 |= v104;
                }
                else
                {
                  v86 = v23;
                  v87 = v22;
                  v88 = (char **)&v111[2 * v57 + 4 + 2 * v24];
                  if (sub_1DB71A930(*v88, (unint64_t)v88[1], &v110))
                  {
                    v65 = v110;
                    v22 = v87;
                    v23 = v86;
                    v58 = (_WORD *)a1;
                    goto LABEL_243;
                  }
                  v5 = 4294967276;
                }
                a3 = v107;
                goto LABEL_255;
              }
            }
            else if (v55 == (_DWORD)v8 && (unint64_t)v27 < v28)
            {
              goto LABEL_230;
            }
            v27 = 0;
            v28 = 0;
LABEL_220:
            v57 = 0;
LABEL_221:
            v58 = (_WORD *)a1;
            goto LABEL_222;
          case 7u:
            if (v40 != 1)
            {
              if (v40 != 4)
                goto LABEL_255;
              v59 = *(unsigned __int16 *)(v39 + 1);
              v60 = v39[3];
              if (v59 != 25971 || v60 != 114)
                goto LABEL_255;
            }
            v42 = 10002;
            v22 = 10001;
LABEL_143:
            if ((unint64_t)v27 < v28 || v29 != -1)
              goto LABEL_220;
            v27 = 0;
            v28 = 0;
            v57 = 0;
            v22 = v42;
            goto LABEL_221;
          default:
            goto LABEL_255;
        }
      }
      v5 = 4294967276;
      switch(v21)
      {
        case 4uLL:
          if (*(_DWORD *)v111[0] != 1919251317)
            goto LABEL_255;
          v22 = 10001;
          goto LABEL_93;
        case 5uLL:
          if (*(_DWORD *)v111[0] != 1970238055 || *(_BYTE *)(v111[0] + 4) != 112)
            goto LABEL_255;
          v22 = 10003;
LABEL_93:
          v44 = v112;
          v45 = v113;
          if (v112 >= v113)
            goto LABEL_146;
          v46 = 0;
          v29 = 0;
          break;
        case 6uLL:
          if (*(_DWORD *)v111[0] == 1701738351 && *(_WORD *)(v111[0] + 4) == 16498)
          {
            v44 = 0;
            v45 = 0;
            v48 = 0;
            v29 = -1;
            v22 = 10002;
          }
          else
          {
            if (*(_DWORD *)v111[0] != 1970238055 || *(_WORD *)(v111[0] + 4) != 16496)
              goto LABEL_255;
            v44 = 0;
            v45 = 0;
            v48 = 0;
            v29 = -1;
            v22 = 10004;
          }
          goto LABEL_148;
        case 9uLL:
          if (*(_QWORD *)v111[0] != 0x656E6F7972657665 || *(_BYTE *)(v111[0] + 8) != 64)
            goto LABEL_255;
          v44 = 0;
          v45 = 0;
          v48 = 0;
          v29 = -1;
          v22 = 10107;
          goto LABEL_148;
        default:
          goto LABEL_255;
      }
      while (1)
      {
        v47 = v112[v46];
        if (v47 - 58 < 0xFFFFFFF6)
          break;
        if (v29 > 214748364 || v29 == 214748364 && v47 > 0x37)
          v29 = 0x7FFFFFFF;
        else
          v29 = v47 + 10 * v29 - 48;
        if (v113 - v112 == ++v46)
        {
          v48 = 1;
          goto LABEL_148;
        }
      }
LABEL_146:
      v48 = 1;
      v29 = -1;
LABEL_148:
      v62 = (char **)&v111[2 * (v48 + 1)];
      v63 = *v62;
      v64 = (unint64_t)v62[1];
      if ((unint64_t)v63 < v64)
      {
        v65 = 0;
        v66 = v64 - (_QWORD)v63;
        while (1)
        {
          v68 = *v63++;
          v67 = v68;
          if (v68 > 98)
          {
            v70 = v67 - 111;
            v69 = 8;
            switch(v70)
            {
              case 0:
                v69 = 0x4000;
                goto LABEL_172;
              case 1:
                v69 = 32;
                goto LABEL_172;
              case 3:
                goto LABEL_172;
              case 4:
                v69 = 0x8000;
                goto LABEL_172;
              case 8:
                v69 = 16;
                goto LABEL_172;
              case 9:
                v69 = 1;
                goto LABEL_172;
              default:
                goto LABEL_229;
            }
          }
          if (v67 > 67)
            break;
          if (v67 != 45)
          {
            if (v67 == 65)
            {
              v69 = 1024;
            }
            else
            {
              if (v67 != 67)
                goto LABEL_229;
              v69 = 0x2000;
            }
LABEL_172:
            v65 |= v69;
          }
          if (!--v66)
          {
            v110 = v65;
            goto LABEL_176;
          }
        }
        if (v67 > 86)
        {
          if (v67 == 87)
          {
            v69 = 128;
          }
          else
          {
            if (v67 != 97)
            {
LABEL_229:
              v110 = v65;
              goto LABEL_230;
            }
            v69 = 512;
          }
        }
        else if (v67 == 68)
        {
          v69 = 256;
        }
        else
        {
          if (v67 != 82)
            goto LABEL_229;
          v69 = 64;
        }
        goto LABEL_172;
      }
      v65 = 0;
LABEL_176:
      v71 = (char **)&v111[2 * (v48 | 2u)];
      v72 = *v71;
      v73 = (unint64_t)v71[1];
      if ((unint64_t)v72 >= v73)
        goto LABEL_199;
      v74 = v73 - (_QWORD)v72;
      do
      {
        v76 = *v72++;
        v75 = v76;
        if (v76 > 99)
        {
          if (v75 > 104)
          {
            if (v75 == 105)
            {
              v77 = 0x10000000;
            }
            else
            {
              if (v75 != 110)
                goto LABEL_229;
              v77 = 0x8000000;
            }
          }
          else if (v75 == 100)
          {
            v77 = 0x4000000;
          }
          else
          {
            if (v75 != 102)
              goto LABEL_229;
            v77 = 0x2000000;
          }
        }
        else if (v75 > 72)
        {
          if (v75 == 73)
          {
            v77 = 0x1000000;
          }
          else
          {
            if (v75 != 83)
              goto LABEL_229;
            v77 = 0x20000000;
          }
        }
        else
        {
          if (v75 == 45)
            goto LABEL_197;
          if (v75 != 70)
            goto LABEL_229;
          v77 = 0x40000000;
        }
        v65 |= v77;
LABEL_197:
        --v74;
      }
      while (v74);
      v110 = v65;
LABEL_199:
      v78 = (int **)&v111[2 * (v48 + 3)];
      v79 = *v78;
      v80 = (char *)v78[1] - (char *)*v78;
      if (v80 == 5)
      {
        if (*v79 == 1869376609 && *((_BYTE *)v79 + 4) == 119)
        {
          v100 = v44;
          v102 = v45;
          v23 = 1024;
LABEL_228:
          v58 = (_WORD *)a1;
        }
        else
        {
          v82 = *v79 == 1768191329 && *((_BYTE *)v79 + 4) == 116;
          v58 = (_WORD *)a1;
          if (v82)
          {
            v100 = v44;
            v102 = v45;
            v23 = 4096;
          }
          else
          {
            v83 = *v79;
            v84 = *((unsigned __int8 *)v79 + 4);
            if (v83 != 1918987361 || v84 != 109)
              goto LABEL_230;
            v100 = v44;
            v102 = v45;
            v23 = 0x2000;
          }
        }
        v89 = (unsigned __int8 **)&v111[2 * (v48 | 4u)];
        v90 = *v89;
        v91 = (unint64_t)v89[1];
        if ((unint64_t)*v89 < v91)
        {
          v92 = 0;
          v93 = v91 - (_QWORD)v90;
          while (1)
          {
            v94 = *v90;
            if (v94 - 58 < 0xFFFFFFF6)
              break;
            if (v92 > 214748364 || v92 == 214748364 && v94 > 0x37)
              v92 = 0x7FFFFFFF;
            else
              v92 = v94 + 10 * v92 - 48;
            ++v90;
            if (!--v93)
            {
              v29 = v92;
              goto LABEL_243;
            }
          }
        }
        goto LABEL_243;
      }
      if (v80 == 4 && *v79 == 2037278052)
      {
        v100 = v44;
        v102 = v45;
        v23 = 2048;
        goto LABEL_228;
      }
LABEL_230:
      v5 = 4294967276;
LABEL_255:
      v6 = v5;
      if (!*v4)
      {
LABEL_262:
        sub_1DB718074(a1, v105);
        return v5;
      }
    }
  }
  return v5;
}

uint64_t sub_1DB71A930(char *a1, unint64_t a2, _DWORD *a3)
{
  int v3;
  unint64_t v4;
  int v5;
  int v6;
  char v7;
  int v8;

  if ((unint64_t)a1 < a2)
  {
    v3 = 0;
    *a3 = 0;
    v4 = a2 - (_QWORD)a1;
    while (1)
    {
      v6 = *a1++;
      v5 = v6;
      v7 = v6 - 82;
      if ((v6 - 82) > 0x26)
        break;
      if (((1 << v7) & 0x100000001) != 0)
      {
        v8 = 4;
      }
      else if (((1 << v7) & 0x2000000020) != 0)
      {
        v8 = 2;
      }
      else
      {
        if (((1 << v7) & 0x4000000040) == 0)
          break;
        v8 = 1;
      }
      v3 |= v8;
      *a3 = v3;
LABEL_11:
      if (!--v4)
        return 1;
    }
    if (v5 != 45)
      return 0;
    goto LABEL_11;
  }
  return 0;
}

uint64_t sub_1DB71A9BC(uint64_t result, int a2)
{
  _DWORD **v2;
  unsigned int v3;
  _DWORD *v4;

  v2 = (_DWORD **)result;
  v3 = a2 & ~(a2 >> 31);
  if (v3 >= 0xA)
    result = sub_1DB71A9BC(result, v3 / 0xAuLL);
  v4 = *v2;
  *v4 = dword_1DB74D004[v3 % 0xA];
  *v2 = v4 + 1;
  return result;
}

uint64_t sub_1DB71AA2C(uint64_t result, int a2)
{
  _QWORD *v2;
  unsigned int v3;
  char v4;
  char *v5;

  v2 = (_QWORD *)result;
  v3 = a2 & ~(a2 >> 31);
  if (v3 >= 0xA)
    result = sub_1DB71AA2C(result, v3 / 0xAuLL);
  v4 = a0123456789[v3 % 0xA];
  v5 = (char *)(*v2)++;
  *v5 = v4;
  return result;
}

_DWORD *archive_match_new()
{
  _DWORD *v0;
  _DWORD *v1;

  v0 = malloc_type_calloc(1uLL, 0x208uLL, 0x10F0040AB3C2142uLL);
  v1 = v0;
  if (v0)
  {
    *(_QWORD *)v0 = 0x10CAD11C9;
    v0[41] = 1;
    *((_QWORD *)v0 + 26) = 0;
    *((_QWORD *)v0 + 27) = v0 + 52;
    v0[56] = 0;
    *((_QWORD *)v0 + 21) = 0;
    *((_QWORD *)v0 + 22) = v0 + 42;
    v0[46] = 0;
    sub_1DB6E8388((_QWORD *)v0 + 44, (uint64_t)off_1EA321FE8);
    *((_QWORD *)v1 + 46) = 0;
    *((_QWORD *)v1 + 47) = v1 + 92;
    v1[96] = 0;
    *((_QWORD *)v1 + 55) = 0;
    *((_QWORD *)v1 + 56) = v1 + 110;
    v1[114] = 0;
    *((_QWORD *)v1 + 60) = 0;
    *((_QWORD *)v1 + 61) = v1 + 120;
    v1[124] = 0;
    time((time_t *)v1 + 31);
  }
  return v1;
}

int *archive_match_free(int *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  _QWORD *v9;
  _QWORD *v10;

  if (result)
  {
    v8 = result;
    result = (int *)sub_1DB6E0594(result, 212668873, 0xFFFF, "archive_match_free", a5, a6, a7, a8);
    if ((_DWORD)result != -30)
    {
      sub_1DB71ABF8((_QWORD **)v8 + 26);
      sub_1DB71ABF8((_QWORD **)v8 + 21);
      v9 = (_QWORD *)*((_QWORD *)v8 + 46);
      if (v9)
      {
        do
        {
          v10 = (_QWORD *)v9[3];
          sub_1DB6DEF44((uint64_t)(v9 + 4));
          free(v9);
          v9 = v10;
        }
        while (v10);
      }
      free(*((void **)v8 + 51));
      free(*((void **)v8 + 54));
      sub_1DB71ABF8((_QWORD **)v8 + 55);
      sub_1DB71ABF8((_QWORD **)v8 + 60);
      free(v8);
      return 0;
    }
  }
  return result;
}

void sub_1DB71ABF8(_QWORD **a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = *a1;
  if (*a1)
  {
    do
    {
      v2 = (_QWORD *)*v1;
      sub_1DB6DEF44((uint64_t)(v1 + 2));
      free(v1);
      v1 = v2;
    }
    while (v2);
  }
}

uint64_t archive_match_excluded(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  char *v18;

  result = sub_1DB6E0594(a1, 212668873, 1, "archive_match_excluded_ae", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    if (!a2)
    {
      archive_set_error(a1, 22, "entry is NULL", v11, v12, v13, v14, v15, v18);
      return 4294967271;
    }
    v16 = a1[40];
    if ((v16 & 1) != 0)
    {
      v17 = (unsigned __int8 *)archive_entry_pathname(a2);
      result = sub_1DB71ACF4((uint64_t)a1, v17);
      if ((_DWORD)result)
        return result;
      v16 = a1[40];
    }
    if ((v16 & 2) != 0)
    {
      if (sub_1DB71AE58((uint64_t)a1, a2))
        return 1;
      v16 = a1[40];
    }
    if ((v16 & 4) != 0)
      return sub_1DB71B0DC((uint64_t)a1, a2);
    else
      return 0;
  }
  return result;
}

uint64_t sub_1DB71ACF4(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unsigned __int8 *v14;

  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 208);
    if (v4)
    {
      v5 = 0;
      do
      {
        if (!*(_DWORD *)(v4 + 8))
        {
          result = sub_1DB71CA74((_DWORD *)v3, v4, a2);
          if ((_DWORD)result)
          {
            if ((result & 0x80000000) != 0)
              return result;
            --*(_DWORD *)(v3 + 228);
            ++*(_DWORD *)(v4 + 8);
            v5 = v4;
          }
        }
        v4 = *(_QWORD *)v4;
      }
      while (v4);
    }
    else
    {
      v5 = 0;
    }
    v6 = (_QWORD *)(v3 + 168);
    while (1)
    {
      v6 = (_QWORD *)*v6;
      if (!v6)
        break;
      v14 = 0;
      if (sub_1DB6DF424(v3, (uint64_t)(v6 + 2), &v14))
      {
        if (*__error() == 12)
        {
          archive_set_error((_DWORD *)v3, 12, "No memory", v7, v8, v9, v10, v11, v13);
          *(_DWORD *)(v3 + 4) = 0x8000;
          return 4294967266;
        }
        result = 0;
      }
      else
      {
        result = sub_1DB73B60C(v14, a2, 3u);
      }
      if ((_DWORD)result)
        return result;
    }
    if (v5)
      return 0;
    v12 = *(_QWORD *)(v3 + 208);
    if (!v12)
    {
      return 0;
    }
    else
    {
      while (1)
      {
        if (*(int *)(v12 + 8) >= 1)
        {
          result = sub_1DB71CA74((_DWORD *)v3, v12, a2);
          if ((_DWORD)result)
            break;
        }
        v12 = *(_QWORD *)v12;
        if (!v12)
          return *(_QWORD *)(v3 + 208) != 0;
      }
      if ((result & 0x80000000) == 0)
      {
        result = 0;
        ++*(_DWORD *)(v12 + 8);
      }
    }
  }
  return result;
}

uint64_t sub_1DB71AE58(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;

  if (*(_DWORD *)(a1 + 280))
  {
    v4 = archive_entry_ctime_is_set((uint64_t)a2)
       ? archive_entry_ctime((uint64_t)a2)
       : archive_entry_mtime((uint64_t)a2);
    v5 = *(_QWORD *)(a1 + 288);
    if (v4 < v5)
      return 1;
    if (v4 == v5)
    {
      v6 = archive_entry_ctime_is_set((uint64_t)a2)
         ? archive_entry_ctime_nsec((uint64_t)a2)
         : archive_entry_mtime_nsec((uint64_t)a2);
      v7 = *(_QWORD *)(a1 + 296);
      if (v6 < v7 || v6 == v7 && (*(_BYTE *)(a1 + 280) & 0x10) == 0)
        return 1;
    }
  }
  if (*(_DWORD *)(a1 + 328))
  {
    v8 = archive_entry_ctime_is_set((uint64_t)a2)
       ? archive_entry_ctime((uint64_t)a2)
       : archive_entry_mtime((uint64_t)a2);
    v9 = *(_QWORD *)(a1 + 336);
    if (v8 > v9)
      return 1;
    if (v8 == v9)
    {
      v10 = archive_entry_ctime_is_set((uint64_t)a2)
          ? archive_entry_ctime_nsec((uint64_t)a2)
          : archive_entry_mtime_nsec((uint64_t)a2);
      v11 = *(_QWORD *)(a1 + 344);
      if (v10 > v11 || v10 == v11 && (*(_BYTE *)(a1 + 328) & 0x10) == 0)
        return 1;
    }
  }
  if (*(_DWORD *)(a1 + 256))
  {
    v12 = archive_entry_mtime((uint64_t)a2);
    v13 = *(_QWORD *)(a1 + 264);
    if (v12 < v13)
      return 1;
    if (v12 == v13)
    {
      v14 = archive_entry_mtime_nsec((uint64_t)a2);
      v15 = *(_QWORD *)(a1 + 272);
      if (v14 < v15 || v14 == v15 && (*(_BYTE *)(a1 + 256) & 0x10) == 0)
        return 1;
    }
  }
  if (*(_DWORD *)(a1 + 304))
  {
    v16 = archive_entry_mtime((uint64_t)a2);
    if (v16 > *(_QWORD *)(a1 + 312))
      return 1;
    v18 = v16;
    v19 = archive_entry_mtime_nsec((uint64_t)a2);
    if (v18 == *(_QWORD *)(a1 + 312))
    {
      v20 = *(_QWORD *)(a1 + 320);
      if (v19 > v20 || v19 == v20 && (*(_BYTE *)(a1 + 304) & 0x10) == 0)
        return 1;
    }
  }
  if (!*(_DWORD *)(a1 + 384))
    return 0;
  result = archive_entry_pathname(a2);
  *(_QWORD *)(a1 + 360) = off_1EA321FE8;
  if (result)
  {
    result = sub_1DB73322C((uint64_t *)(a1 + 352), result);
    if (result)
    {
      v21 = result;
      v22 = *(_DWORD *)(result + 136);
      if ((v22 & 0x200) != 0)
      {
        v23 = archive_entry_ctime((uint64_t)a2);
        v24 = *(_QWORD *)(v21 + 160);
        if (v24 > v23)
          goto LABEL_44;
        if (v24 < v23)
        {
          v22 = *(_DWORD *)(v21 + 136);
        }
        else
        {
          v28 = archive_entry_ctime_nsec((uint64_t)a2);
          v29 = *(_QWORD *)(v21 + 168);
          v30 = v29 < v28;
          if (v29 > v28)
          {
LABEL_44:
            v22 = *(_DWORD *)(v21 + 136);
            if ((v22 & 2) != 0)
              return 1;
            goto LABEL_50;
          }
          v22 = *(_DWORD *)(v21 + 136);
          if (!v30)
          {
            if ((v22 & 0x10) != 0)
              return 1;
            goto LABEL_50;
          }
        }
        if ((v22 & 1) != 0)
          return 1;
      }
LABEL_50:
      if ((v22 & 0x100) == 0)
        return 0;
      v25 = archive_entry_mtime((uint64_t)a2);
      v26 = *(_QWORD *)(v21 + 144);
      if (v26 > v25)
        return (*(_BYTE *)(v21 + 136) & 2) != 0;
      if (v26 < v25)
      {
        LOBYTE(v27) = *(_BYTE *)(v21 + 136);
      }
      else
      {
        v31 = archive_entry_mtime_nsec((uint64_t)a2);
        v32 = *(_QWORD *)(v21 + 152);
        v33 = v32 < v31;
        if (v32 > v31)
          return (*(_BYTE *)(v21 + 136) & 2) != 0;
        v27 = *(_DWORD *)(v21 + 136);
        if (!v33)
          return (v27 & 0x10) != 0;
      }
      return (v27 & 1) != 0;
    }
  }
  return result;
}

uint64_t sub_1DB71B0DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  const char *v14;
  uint64_t result;
  const char *v16;

  if (*(_QWORD *)(a1 + 400))
  {
    v4 = archive_entry_uid((uint64_t)a2);
    v5 = *(_DWORD *)(a1 + 400);
    if (!v5)
      return 1;
    v6 = 0;
    while (1)
    {
      v7 = (v5 + v6) >> 1;
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v7);
      if (v8 == v4)
        break;
      if (v8 < v4)
        v6 = v7 + 1;
      else
        v5 = (v5 + v6) >> 1;
      if (v6 >= v5)
        return 1;
    }
  }
  if (*(_QWORD *)(a1 + 424))
  {
    v9 = archive_entry_gid((uint64_t)a2);
    v10 = *(_DWORD *)(a1 + 424);
    if (!v10)
      return 1;
    v11 = 0;
    while (1)
    {
      v12 = (v10 + v11) >> 1;
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 432) + 8 * v12);
      if (v13 == v9)
        break;
      if (v13 < v9)
        v11 = v12 + 1;
      else
        v10 = (v10 + v11) >> 1;
      if (v11 >= v10)
        return 1;
    }
  }
  if (*(_DWORD *)(a1 + 456))
  {
    v14 = (const char *)archive_entry_uname(a2);
    result = sub_1DB71CB10((_DWORD *)a1, (uint64_t **)(a1 + 440), v14);
    if (!(_DWORD)result)
      return 1;
    if ((result & 0x80000000) != 0)
      return result;
  }
  if (!*(_DWORD *)(a1 + 496))
    return 0;
  v16 = (const char *)archive_entry_gname(a2);
  result = sub_1DB71CB10((_DWORD *)a1, (uint64_t **)(a1 + 480), v16);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) != 0)
      return result;
    return 0;
  }
  return 1;
}

void archive_match_exclude_pattern(int *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;

  if (sub_1DB6E0594(a1, 212668873, 1, "archive_match_exclude_pattern", a5, a6, a7, a8) != -30)
  {
    if (a2 && *a2)
      sub_1DB71B274(a1, (uint64_t)(a1 + 42), a2);
    else
      archive_set_error(a1, 22, "pattern is empty", v10, v11, v12, v13, v14, v15);
  }
}

int32x2_t sub_1DB71B274(_DWORD *a1, uint64_t a2, char *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  size_t v14;
  int32x2_t result;
  char *v16;

  v6 = malloc_type_calloc(1uLL, 0x78uLL, 0x1030040B4CB4576uLL);
  if (v6)
  {
    v12 = v6;
    v13 = strlen(a3);
    if (v13)
    {
      if (a3[v13 - 1] == 47)
        v14 = v13 - 1;
      else
        v14 = v13;
    }
    else
    {
      v14 = 0;
    }
    sub_1DB72D304((uint64_t)v12 + 16, a3, v14);
    **(_QWORD **)(a2 + 8) = v12;
    *(_QWORD *)(a2 + 8) = v12;
    result = vadd_s32(*(int32x2_t *)(a2 + 16), (int32x2_t)0x100000001);
    *(int32x2_t *)(a2 + 16) = result;
    a1[40] |= 1u;
  }
  else
  {
    archive_set_error(a1, 12, "No memory", v7, v8, v9, v10, v11, v16);
    a1[1] = 0x8000;
  }
  return result;
}

void archive_match_exclude_pattern_w(int *a1, const __int32 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;

  if (sub_1DB6E0594(a1, 212668873, 1, "archive_match_exclude_pattern_w", a5, a6, a7, a8) != -30)
  {
    if (a2 && *a2)
      sub_1DB71B3C0(a1, (uint64_t)(a1 + 42), a2);
    else
      archive_set_error(a1, 22, "pattern is empty", v10, v11, v12, v13, v14, v15);
  }
}

int32x2_t sub_1DB71B3C0(_DWORD *a1, uint64_t a2, const __int32 *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  size_t v14;
  int32x2_t result;
  char *v16;

  v6 = malloc_type_calloc(1uLL, 0x78uLL, 0x1030040B4CB4576uLL);
  if (v6)
  {
    v12 = v6;
    v13 = wcslen(a3);
    if (v13)
    {
      if (a3[v13 - 1] == 47)
        v14 = v13 - 1;
      else
        v14 = v13;
    }
    else
    {
      v14 = 0;
    }
    sub_1DB72D3A8((uint64_t)v12 + 16, a3, v14);
    **(_QWORD **)(a2 + 8) = v12;
    *(_QWORD *)(a2 + 8) = v12;
    result = vadd_s32(*(int32x2_t *)(a2 + 16), (int32x2_t)0x100000001);
    *(int32x2_t *)(a2 + 16) = result;
    a1[40] |= 1u;
  }
  else
  {
    archive_set_error(a1, 12, "No memory", v7, v8, v9, v10, v11, v16);
    a1[1] = 0x8000;
  }
  return result;
}

uint64_t archive_match_exclude_pattern_from_file(int *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594(a1, 212668873, 1, "archive_match_exclude_pattern_from_file", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
    return sub_1DB71B500(a1, (uint64_t)(a1 + 42), 1, a2);
  return result;
}

uint64_t sub_1DB71B500(_DWORD *a1, uint64_t a2, int a3, char *a4)
{
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t support_format_empty;
  uint64_t data_block;
  uint64_t open_filename;
  uint64_t next_header;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v8 = (int *)archive_read_new();
  if (v8)
  {
    v16 = v8;
    archive_read_support_format_raw(v8, v9, v10, v11, v12, v13, v14, v15);
    support_format_empty = archive_read_support_format_empty(v16);
    if ((_DWORD)support_format_empty)
    {
      data_block = support_format_empty;
LABEL_9:
      archive_copy_error((uint64_t)a1, (uint64_t)v16);
      archive_read_free((uint64_t)v16);
      return data_block;
    }
    if (a3)
      open_filename = archive_read_open_filename(v16, a4, 10240);
    else
      open_filename = archive_read_open_filename_w(v16, (__int32 *)a4, 10240);
    data_block = open_filename;
    if ((_DWORD)open_filename)
      goto LABEL_9;
    v28 = 0;
    next_header = archive_read_next_header((uint64_t)v16);
    if ((_DWORD)next_header)
    {
      data_block = next_header;
      archive_read_free((uint64_t)v16);
      if ((_DWORD)data_block != 1)
      {
        archive_copy_error((uint64_t)a1, (uint64_t)v16);
        return data_block;
      }
      return 0;
    }
    v25 = 0;
    v26 = 0;
    v27 = 0;
    data_block = archive_read_data_block((uint64_t)v16);
    if (!(_DWORD)data_block)
    {
      do
        v22 = archive_read_data_block((uint64_t)v16);
      while (!(_DWORD)v22);
      data_block = v22;
    }
    if ((data_block & 0x80000000) != 0)
    {
      archive_copy_error((uint64_t)a1, (uint64_t)v16);
    }
    else
    {
      if ((_DWORD)data_block != 1 || !v26 || (sub_1DB71B274(a1, a2, v25), !(_DWORD)v23))
      {
        archive_read_free((uint64_t)v16);
        sub_1DB6E7C3C((uint64_t)&v25);
        return 0;
      }
      data_block = v23;
    }
    archive_read_free((uint64_t)v16);
    sub_1DB6E7C3C((uint64_t)&v25);
    return data_block;
  }
  archive_set_error(a1, 12, "No memory", v11, v12, v13, v14, v15, v24);
  return 4294967266;
}

uint64_t archive_match_exclude_pattern_from_file_w(int *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594(a1, 212668873, 1, "archive_match_exclude_pattern_from_file_w", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
    return sub_1DB71B500(a1, (uint64_t)(a1 + 42), 0, a2);
  return result;
}

void archive_match_include_pattern(int *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;

  if (sub_1DB6E0594(a1, 212668873, 1, "archive_match_include_pattern", a5, a6, a7, a8) != -30)
  {
    if (a2 && *a2)
      sub_1DB71B274(a1, (uint64_t)(a1 + 52), a2);
    else
      archive_set_error(a1, 22, "pattern is empty", v10, v11, v12, v13, v14, v15);
  }
}

void archive_match_include_pattern_w(int *a1, const __int32 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;

  if (sub_1DB6E0594(a1, 212668873, 1, "archive_match_include_pattern_w", a5, a6, a7, a8) != -30)
  {
    if (a2 && *a2)
      sub_1DB71B3C0(a1, (uint64_t)(a1 + 52), a2);
    else
      archive_set_error(a1, 22, "pattern is empty", v10, v11, v12, v13, v14, v15);
  }
}

uint64_t archive_match_include_pattern_from_file(int *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594(a1, 212668873, 1, "archive_match_include_pattern_from_file", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
    return sub_1DB71B500(a1, (uint64_t)(a1 + 52), 1, a2);
  return result;
}

uint64_t archive_match_include_pattern_from_file_w(int *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594(a1, 212668873, 1, "archive_match_include_pattern_from_file_w", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
    return sub_1DB71B500(a1, (uint64_t)(a1 + 52), 0, a2);
  return result;
}

uint64_t archive_match_path_excluded(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  char *v17;

  result = sub_1DB6E0594((int *)a1, 212668873, 1, "archive_match_path_excluded", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    if (a2)
    {
      if ((*(_BYTE *)(a1 + 160) & 1) != 0)
      {
        v16 = (unsigned __int8 *)archive_entry_pathname(a2);
        return sub_1DB71ACF4(a1, v16);
      }
      else
      {
        return 0;
      }
    }
    else
    {
      archive_set_error((_DWORD *)a1, 22, "entry is NULL", v11, v12, v13, v14, v15, v17);
      return 4294967271;
    }
  }
  return result;
}

uint64_t archive_match_set_inclusion_recursion(int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594(a1, 212668873, 1, "archive_match_set_inclusion_recursion", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    result = 0;
    a1[41] = a2;
  }
  return result;
}

uint64_t archive_match_path_unmatched_inclusions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594((int *)a1, 212668873, 1, "archive_match_unmatched_inclusions", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
    return *(unsigned int *)(a1 + 228);
  return result;
}

uint64_t archive_match_path_unmatched_inclusions_next(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  const char *v11;

  result = sub_1DB6E0594(a1, 212668873, 1, "archive_match_unmatched_inclusions_next", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    v11 = 0;
    result = sub_1DB71BB08(a1, (uint64_t)(a1 + 52), 1, &v11);
    *a2 = v11;
  }
  return result;
}

uint64_t sub_1DB71BB08(_DWORD *a1, uint64_t a2, int a3, const char **a4)
{
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  uint64_t result;
  uint64_t *v18;
  char *v19;
  const char *v20;

  *a4 = 0;
  if (*(_DWORD *)(a2 + 32))
  {
    *(_DWORD *)(a2 + 32) = 0;
    return 1;
  }
  v7 = (_QWORD *)(a2 + 24);
  if (!*(_QWORD *)(a2 + 24))
  {
    if (!*(_DWORD *)(a2 + 20))
      return 1;
    *(_QWORD *)(a2 + 24) = *(_QWORD *)a2;
  }
  v8 = (uint64_t *)(a2 + 24);
  do
  {
    v8 = (uint64_t *)*v8;
    if (!v8)
    {
      *v7 = 0;
      return 1;
    }
  }
  while (*((_DWORD *)v8 + 2));
  v9 = (uint64_t)(v8 + 2);
  if (!a3)
  {
    v20 = 0;
    if ((sub_1DB6DF324((uint64_t)a1, v9, &v20) & 0x80000000) == 0 || *__error() != 12)
    {
      v15 = v20;
      v16 = (const char *)&unk_1DB74D048;
      goto LABEL_20;
    }
LABEL_18:
    archive_set_error(a1, 12, "No memory", v10, v11, v12, v13, v14, v19);
    a1[1] = 0x8000;
    return 4294967266;
  }
  v20 = 0;
  if ((sub_1DB6DF424((uint64_t)a1, v9, &v20) & 0x80000000) != 0 && *__error() == 12)
    goto LABEL_18;
  v15 = v20;
  v16 = "";
LABEL_20:
  if (!v15)
    v15 = v16;
  *a4 = v15;
  v18 = (uint64_t *)*v8;
  *v7 = *v8;
  result = 0;
  if (!v18)
    *(_DWORD *)(a2 + 32) = 1;
  return result;
}

uint64_t archive_match_path_unmatched_inclusions_next_w(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  const char *v11;

  result = sub_1DB6E0594(a1, 212668873, 1, "archive_match_unmatched_inclusions_next_w", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    v11 = 0;
    result = sub_1DB71BB08(a1, (uint64_t)(a1 + 52), 0, &v11);
    *a2 = v11;
  }
  return result;
}

uint64_t archive_match_include_time(int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;

  v12 = sub_1DB71BD1C(a1, a2, "archive_match_include_time", a4, a5, a6, a7, a8);
  if (!(_DWORD)v12)
    sub_1DB71BDC4((uint64_t)a1, a2, a3, a4, a3, a4);
  return v12;
}

uint64_t sub_1DB71BD1C(int *a1, __int16 a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;

  result = sub_1DB6E0594(a1, 212668873, 1, a3, a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    if ((a2 & 0xFC00) != 0)
    {
      v16 = "Invalid time flag";
    }
    else if ((a2 & 0x300) != 0)
    {
      if ((a2 & 0xEC) != 0)
      {
        v16 = "Invalid comparison flag";
      }
      else
      {
        if ((a2 & 0x13) != 0)
          return 0;
        v16 = "No comparison flag";
      }
    }
    else
    {
      v16 = "No time flag";
    }
    archive_set_error(a1, 22, v16, v11, v12, v13, v14, v15, v17);
    return 4294967271;
  }
  return result;
}

uint64_t sub_1DB71BDC4(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  int v7;

  if ((a2 & 0x100) != 0)
  {
    v6 = a2 & 0x13;
    if ((a2 & 1) != 0 || v6 == 16)
    {
      *(_DWORD *)(result + 256) = a2;
      *(_QWORD *)(result + 264) = a3;
      *(_QWORD *)(result + 272) = a4;
      *(_DWORD *)(result + 160) |= 2u;
    }
    if ((a2 & 2) != 0 || v6 == 16)
    {
      *(_DWORD *)(result + 304) = a2;
      *(_QWORD *)(result + 312) = a3;
      *(_QWORD *)(result + 320) = a4;
      *(_DWORD *)(result + 160) |= 2u;
    }
  }
  if ((a2 & 0x200) != 0)
  {
    v7 = a2 & 0x13;
    if ((a2 & 1) != 0 || v7 == 16)
    {
      *(_DWORD *)(result + 280) = a2;
      *(_QWORD *)(result + 288) = a5;
      *(_QWORD *)(result + 296) = a6;
      *(_DWORD *)(result + 160) |= 2u;
    }
    if ((a2 & 2) != 0 || v7 == 16)
    {
      *(_DWORD *)(result + 328) = a2;
      *(_QWORD *)(result + 336) = a5;
      *(_QWORD *)(result + 344) = a6;
      *(_DWORD *)(result + 160) |= 2u;
    }
  }
  return result;
}

uint64_t archive_match_include_date(int *a1, int a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  result = sub_1DB71BD1C(a1, a2, "archive_match_include_date", a4, a5, a6, a7, a8);
  if (!(_DWORD)result)
  {
    if (a3 && *a3)
    {
      v17 = sub_1DB730E0C();
      if (v17 != -1)
      {
        sub_1DB71BDC4((uint64_t)a1, a2, v17, 0, v17, 0);
        return 0;
      }
      v18 = "invalid date string";
    }
    else
    {
      v18 = "date is empty";
    }
    archive_set_error(a1, 22, v18, v12, v13, v14, v15, v16, v19);
    return 4294967271;
  }
  return result;
}

uint64_t archive_match_include_date_w(int *a1, int a2, __int32 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  int *v20;
  int v21;
  char *v22;
  _QWORD v23[3];

  result = sub_1DB71BD1C(a1, a2, "archive_match_include_date_w", a4, a5, a6, a7, a8);
  if (!(_DWORD)result)
  {
    if (a3 && *a3)
    {
      memset(v23, 0, sizeof(v23));
      v17 = wcslen(a3);
      if ((sub_1DB72CED8((uint64_t)v23, a3, v17) & 0x80000000) != 0)
      {
        sub_1DB6E7C3C((uint64_t)v23);
        if (*__error() == 12)
        {
          archive_set_error(a1, 12, "No memory", v12, v13, v14, v15, v16, v22);
          a1[1] = 0x8000;
          return 4294967266;
        }
        v19 = "Failed to convert WCS to MBS";
        v20 = a1;
        v21 = -1;
        goto LABEL_9;
      }
      v18 = sub_1DB730E0C();
      sub_1DB6E7C3C((uint64_t)v23);
      if (v18 != -1)
      {
        sub_1DB71BDC4((uint64_t)a1, a2, v18, 0, v18, 0);
        return 0;
      }
      v19 = "invalid date string";
    }
    else
    {
      v19 = "date is empty";
    }
    v20 = a1;
    v21 = 22;
LABEL_9:
    archive_set_error(v20, v21, v19, v12, v13, v14, v15, v16, v22);
    return 4294967271;
  }
  return result;
}

uint64_t archive_match_include_file_time(int *a1, int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = sub_1DB71BD1C(a1, a2, "archive_match_include_file_time", a4, a5, a6, a7, a8);
  if (!(_DWORD)result)
    return sub_1DB71C08C(a1, a2, a3, v12, v13, v14, v15, v16);
  return result;
}

uint64_t sub_1DB71C08C(_DWORD *a1, int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v8;
  int v10;
  char *v11;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  stat v24;

  v8 = a1;
  if (!a3 || !*a3)
  {
    v11 = "pathname is empty";
    v10 = 22;
    goto LABEL_6;
  }
  memset(&v24, 0, sizeof(v24));
  if (stat(a3, &v24))
  {
    v10 = *__error();
    v11 = "Failed to stat()";
    a1 = v8;
LABEL_6:
    archive_set_error(a1, v10, v11, a4, a5, a6, a7, a8, *(char **)&v24.st_dev);
    return 4294967271;
  }
  v13 = (void **)archive_entry_new();
  if (v13)
  {
    v19 = v13;
    archive_entry_copy_stat(v13, (uint64_t)&v24);
    v20 = archive_entry_ctime((uint64_t)v19);
    v21 = archive_entry_ctime_nsec((uint64_t)v19);
    v22 = archive_entry_mtime((uint64_t)v19);
    v23 = archive_entry_mtime_nsec((uint64_t)v19);
    archive_entry_free(v19);
    sub_1DB71BDC4((uint64_t)v8, a2, v22, v23, v20, v21);
    return 0;
  }
  else
  {
    archive_set_error(v8, 12, "No memory", v14, v15, v16, v17, v18, *(char **)&v24.st_dev);
    v8[1] = 0x8000;
    return 4294967266;
  }
}

uint64_t archive_match_include_file_time_w(int *a1, int a2, __int32 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int *v24;
  int v25;
  char *v27;
  char *v28[3];

  v16 = sub_1DB71BD1C(a1, a2, "archive_match_include_file_time_w", a4, a5, a6, a7, a8);
  if (!(_DWORD)v16)
  {
    if (a3 && *a3)
    {
      memset(v28, 0, sizeof(v28));
      v17 = wcslen(a3);
      if ((sub_1DB72CED8((uint64_t)v28, a3, v17) & 0x80000000) == 0)
      {
        v16 = sub_1DB71C08C(a1, a2, v28[0], v18, v19, v20, v21, v22);
        sub_1DB6E7C3C((uint64_t)v28);
        return v16;
      }
      sub_1DB6E7C3C((uint64_t)v28);
      if (*__error() == 12)
      {
        archive_set_error(a1, 12, "No memory", v11, v12, v13, v14, v15, v27);
        a1[1] = 0x8000;
        return 4294967266;
      }
      v23 = "Failed to convert WCS to MBS";
      v24 = a1;
      v25 = -1;
    }
    else
    {
      v23 = "pathname is empty";
      v24 = a1;
      v25 = 22;
    }
    archive_set_error(v24, v25, v23, v11, v12, v13, v14, v15, v27);
    return 4294967271;
  }
  return v16;
}

uint64_t archive_match_exclude_entry(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;

  result = sub_1DB6E0594((int *)a1, 212668873, 1, "archive_match_time_include_entry", a5, a6, a7, a8);
  if ((_DWORD)result == -30)
    return result;
  if (!a3)
  {
    v26 = "entry is NULL";
LABEL_9:
    archive_set_error((_DWORD *)a1, 22, v26, v12, v13, v14, v15, v16, v28);
    return 4294967271;
  }
  result = sub_1DB71BD1C((int *)a1, a2, "archive_match_exclude_entry", v12, v13, v14, v15, v16);
  if ((_DWORD)result)
    return result;
  v17 = (char *)malloc_type_calloc(1uLL, 0xB0uLL, 0x1030040515BCFD8uLL);
  if (!v17)
  {
    archive_set_error((_DWORD *)a1, 12, "No memory", v18, v19, v20, v21, v22, v28);
    *(_DWORD *)(a1 + 4) = 0x8000;
    return 4294967266;
  }
  v23 = v17;
  v24 = (char *)archive_entry_pathname(a3);
  if (!v24)
  {
    free(v23);
    v26 = "pathname is NULL";
    goto LABEL_9;
  }
  v25 = (uint64_t)v24;
  sub_1DB6DC068((uint64_t)(v23 + 32), v24);
  *(_QWORD *)(a1 + 360) = off_1EA321FE8;
  *((_DWORD *)v23 + 34) = a2;
  *((_QWORD *)v23 + 18) = archive_entry_mtime((uint64_t)a3);
  *((_QWORD *)v23 + 19) = archive_entry_mtime_nsec((uint64_t)a3);
  *((_QWORD *)v23 + 20) = archive_entry_ctime((uint64_t)a3);
  *((_QWORD *)v23 + 21) = archive_entry_ctime_nsec((uint64_t)a3);
  if (sub_1DB733364(a1 + 352, v23))
  {
    result = 0;
    **(_QWORD **)(a1 + 376) = v23;
    *(_QWORD *)(a1 + 376) = v23 + 24;
    ++*(_DWORD *)(a1 + 384);
    *(_DWORD *)(a1 + 160) |= 2u;
  }
  else
  {
    v27 = sub_1DB73322C((uint64_t *)(a1 + 352), v25);
    if (v27)
    {
      *(_DWORD *)(v27 + 136) = *((_DWORD *)v23 + 34);
      *(_OWORD *)(v27 + 144) = *((_OWORD *)v23 + 9);
      *(_OWORD *)(v27 + 160) = *((_OWORD *)v23 + 10);
    }
    sub_1DB6DEF44((uint64_t)(v23 + 32));
    free(v23);
    return 0;
  }
  return result;
}

uint64_t archive_match_time_excluded(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;

  result = sub_1DB6E0594((int *)a1, 212668873, 1, "archive_match_time_excluded_ae", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    if (a2)
    {
      if ((*(_BYTE *)(a1 + 160) & 2) != 0)
        return sub_1DB71AE58(a1, a2);
      else
        return 0;
    }
    else
    {
      archive_set_error((_DWORD *)a1, 22, "entry is NULL", v11, v12, v13, v14, v15, v16);
      return 4294967271;
    }
  }
  return result;
}

uint64_t archive_match_include_uid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594((int *)a1, 212668873, 1, "archive_match_include_uid", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
    return sub_1DB71C570((_DWORD *)a1, (uint64_t *)(a1 + 392), a2);
  return result;
}

uint64_t sub_1DB71C570(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  char *v22;

  v7 = *a2;
  v6 = a2[1];
  if (v6 + 1 >= *a2)
  {
    v8 = 2 * v7;
    if (!v7)
      v8 = 8;
    *a2 = v8;
    v9 = malloc_type_realloc((void *)a2[2], 8 * v8, 0x100004000313F17uLL);
    if (!v9)
    {
      archive_set_error(a1, 12, "No memory", v10, v11, v12, v13, v14, v22);
      a1[1] = 0x8000;
      return 4294967266;
    }
    a2[2] = (uint64_t)v9;
    v6 = a2[1];
  }
  if (v6)
  {
    v15 = 0;
    v16 = 0;
    while (*(_QWORD *)(a2[2] + 8 * v15) < a3)
    {
      v15 = (v16 + 1);
      v16 = v15;
      v17 = v15;
      if (v6 <= v15)
        goto LABEL_13;
    }
    v17 = v16;
  }
  else
  {
    v17 = 0;
    v15 = 0;
  }
LABEL_13:
  v18 = a2[2];
  if (v6 == v15)
  {
    a2[1] = v6 + 1;
    *(_QWORD *)(v18 + 8 * v6) = a3;
  }
  else
  {
    v19 = (_QWORD *)(v18 + 8 * v15);
    if (*v19 != a3)
    {
      memmove((void *)(v18 + 8 * (v17 + 1)), v19, 8 * (v6 - v15));
      v20 = a2[1];
      *(_QWORD *)(a2[2] + 8 * v15) = a3;
      a2[1] = v20 + 1;
    }
  }
  result = 0;
  a1[40] |= 4u;
  return result;
}

uint64_t archive_match_include_gid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594((int *)a1, 212668873, 1, "archive_match_include_gid", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
    return sub_1DB71C570((_DWORD *)a1, (uint64_t *)(a1 + 416), a2);
  return result;
}

int32x2_t archive_match_include_uname(int *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int32x2_t result;

  if (sub_1DB6E0594(a1, 212668873, 1, "archive_match_include_uname", a5, a6, a7, a8) != -30)
    return sub_1DB71C760(a1, (uint64_t)(a1 + 110), 1, a2);
  return result;
}

int32x2_t sub_1DB71C760(_DWORD *a1, uint64_t a2, int a3, char *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  int32x2_t result;
  char *v17;

  v8 = malloc_type_calloc(1uLL, 0x78uLL, 0x1030040B4CB4576uLL);
  if (v8)
  {
    v14 = v8;
    v15 = (uint64_t)v8 + 16;
    if (a3)
      sub_1DB6DC068(v15, a4);
    else
      sub_1DB72D34C(v15, (__int32 *)a4);
    **(_QWORD **)(a2 + 8) = v14;
    *(_QWORD *)(a2 + 8) = v14;
    result = vadd_s32(*(int32x2_t *)(a2 + 16), (int32x2_t)0x100000001);
    *(int32x2_t *)(a2 + 16) = result;
    a1[40] |= 4u;
  }
  else
  {
    archive_set_error(a1, 12, "No memory", v9, v10, v11, v12, v13, v17);
    a1[1] = 0x8000;
  }
  return result;
}

int32x2_t archive_match_include_uname_w(int *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int32x2_t result;

  if (sub_1DB6E0594(a1, 212668873, 1, "archive_match_include_uname_w", a5, a6, a7, a8) != -30)
    return sub_1DB71C760(a1, (uint64_t)(a1 + 110), 0, a2);
  return result;
}

int32x2_t archive_match_include_gname(int *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int32x2_t result;

  if (sub_1DB6E0594(a1, 212668873, 1, "archive_match_include_gname", a5, a6, a7, a8) != -30)
    return sub_1DB71C760(a1, (uint64_t)(a1 + 120), 1, a2);
  return result;
}

int32x2_t archive_match_include_gname_w(int *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int32x2_t result;

  if (sub_1DB6E0594(a1, 212668873, 1, "archive_match_include_gname_w", a5, a6, a7, a8) != -30)
    return sub_1DB71C760(a1, (uint64_t)(a1 + 120), 0, a2);
  return result;
}

uint64_t archive_match_owner_excluded(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;

  result = sub_1DB6E0594((int *)a1, 212668873, 1, "archive_match_id_excluded_ae", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    if (a2)
    {
      if ((*(_BYTE *)(a1 + 160) & 4) != 0)
        return sub_1DB71B0DC(a1, a2);
      else
        return 0;
    }
    else
    {
      archive_set_error((_DWORD *)a1, 22, "entry is NULL", v11, v12, v13, v14, v15, v16);
      return 4294967271;
    }
  }
  return result;
}

uint64_t sub_1DB71C9B8(uint64_t a1, uint64_t a2)
{
  char *__s2;
  char *__s1;

  __s2 = 0;
  __s1 = 0;
  sub_1DB6DF424(0, a1 + 32, &__s1);
  sub_1DB6DF424(0, a2 + 32, &__s2);
  if (!__s1)
    return 1;
  if (__s2)
    return strcmp(__s1, __s2);
  return 0xFFFFFFFFLL;
}

uint64_t sub_1DB71CA24(uint64_t a1, const char *a2)
{
  char *__s1;

  __s1 = 0;
  sub_1DB6DF424(0, a1 + 32, &__s1);
  if (__s1)
    return strcmp(__s1, a2);
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_1DB71CA74(_DWORD *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  unsigned __int8 *v13;

  v5 = a1[41];
  v13 = 0;
  if (!sub_1DB6DF424((uint64_t)a1, a2 + 16, &v13))
    return sub_1DB73B60C(v13, a3, 2 * (v5 != 0));
  if (*__error() != 12)
    return 0;
  archive_set_error(a1, 12, "No memory", v6, v7, v8, v9, v10, v12);
  a1[1] = 0x8000;
  return 4294967266;
}

uint64_t sub_1DB71CB10(_DWORD *a1, uint64_t **a2, const char *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  char *__s1;

  if (!a3)
    return 0;
  if (!*a3)
    return 0;
  v4 = *a2;
  if (!*a2)
    return 0;
  __s1 = 0;
  while ((sub_1DB6DF424((uint64_t)a1, (uint64_t)(v4 + 2), &__s1) & 0x80000000) == 0 || *__error() != 12)
  {
    if (__s1 && !strcmp(__s1, a3))
    {
      ++*((_DWORD *)v4 + 2);
      return 1;
    }
    v4 = (uint64_t *)*v4;
    if (!v4)
      return 0;
  }
  archive_set_error(a1, 12, "No memory", v6, v7, v8, v9, v10, v12);
  a1[1] = 0x8000;
  return 4294967266;
}

uint64_t archive_write_set_format_7zip(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  void (*v10)(uint64_t);
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;

  result = sub_1DB6E0594((int *)a1, -1329217314, 1, "archive_write_set_format_7zip", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    v10 = *(void (**)(uint64_t))(a1 + 328);
    if (v10)
      v10(a1);
    v11 = malloc_type_calloc(1uLL, 0xF140uLL, 0x10F0040EC31971FuLL);
    if (v11)
    {
      v17 = v11;
      v18 = v11 + 7714;
      *(_DWORD *)v11 = -1;
      sub_1DB6E8388(v11 + 7718, (uint64_t)off_1EA321800);
      result = 0;
      v18[2] = 0;
      *v18 = 0;
      v18[1] = v18;
      v18[3] = v18 + 2;
      v17[16] = 0x600030101;
      *(_QWORD *)(a1 + 304) = sub_1DB71CF94;
      *(_QWORD *)(a1 + 312) = sub_1DB71D3A0;
      *(_QWORD *)(a1 + 288) = sub_1DB71CD44;
      *(_QWORD *)(a1 + 296) = sub_1DB71D41C;
      *(_QWORD *)(a1 + 264) = v17;
      *(_QWORD *)(a1 + 272) = "7zip";
      *(_QWORD *)(a1 + 320) = sub_1DB71D49C;
      *(_QWORD *)(a1 + 328) = sub_1DB71DC5C;
      *(_DWORD *)(a1 + 16) = 917504;
      *(_QWORD *)(a1 + 24) = "7zip";
    }
    else
    {
      archive_set_error((_DWORD *)a1, 12, "Can't allocate 7-Zip data", v12, v13, v14, v15, v16, v19);
      return 4294967266;
    }
  }
  return result;
}

uint64_t sub_1DB71CD08(uint64_t a1, uint64_t a2)
{
  size_t v2;
  unsigned int v3;

  v2 = *(unsigned int *)(a1 + 32);
  v3 = *(_DWORD *)(a2 + 32);
  if ((_DWORD)v2 == v3)
    return memcmp(*(const void **)(a1 + 40), *(const void **)(a2 + 40), v2);
  if (v2 > v3)
    return 1;
  return 0xFFFFFFFFLL;
}

uint64_t sub_1DB71CD34(uint64_t a1, char *a2)
{
  return (*(_DWORD *)(a1 + 32) - *a2);
}

uint64_t sub_1DB71CD44(uint64_t a1, char *__s1, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;

  v6 = *(_QWORD *)(a1 + 264);
  if (!strcmp(__s1, "compression"))
  {
    if (!a3 || !strcmp(a3, "copy") || !strcmp(a3, "COPY") || !strcmp(a3, "store") || !strcmp(a3, "STORE"))
    {
      result = 0;
      *(_DWORD *)(v6 + 128) = 0;
      return result;
    }
    if (!strcmp(a3, "deflate") || !strcmp(a3, "DEFLATE"))
    {
      result = 0;
      v19 = 262408;
    }
    else if (!strcmp(a3, "bzip2") || !strcmp(a3, "BZIP2"))
    {
      result = 0;
      v19 = 262658;
    }
    else if (!strcmp(a3, "lzma1") || !strcmp(a3, "LZMA1"))
    {
      result = 0;
      v19 = 196865;
    }
    else if (!strcmp(a3, "lzma2") || !strcmp(a3, "LZMA2"))
    {
      result = 0;
      v19 = 33;
    }
    else
    {
      if (strcmp(a3, "ppmd") && strcmp(a3, "PPMD") && strcmp(a3, "PPMd"))
      {
        return 4294967271;
      }
      result = 0;
      v19 = 197633;
    }
    *(_DWORD *)(v6 + 128) = v19;
  }
  else
  {
    if (strcmp(__s1, "compression-level"))
      return 4294967276;
    if (!a3 || (v18 = *a3 - 48, v18 > 9) || a3[1])
    {
      return 4294967271;
    }
    result = 0;
    *(_DWORD *)(v6 + 132) = v18;
  }
  return result;
}

uint64_t sub_1DB71CF94(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v23;
  int v24;
  _QWORD **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Bytef *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  const void *v33;

  v4 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 104) = 0;
  v5 = v4;
  if (!*(_QWORD *)(v4 + 256))
  {
    v6 = sub_1DB72D08C(a1, "UTF-16LE", 1);
    *(_QWORD *)(v4 + 256) = v6;
    if (!v6)
      return 4294967266;
    v5 = *(_QWORD *)(a1 + 264);
  }
  v7 = (char *)malloc_type_calloc(1uLL, 0x80uLL, 0x1030040E66F03BBuLL);
  if (!v7)
  {
    v15 = "Can't allocate memory";
LABEL_15:
    archive_set_error((_DWORD *)a1, 12, v15, v8, v9, v10, v11, v12, v32);
    return 4294967266;
  }
  v13 = v7;
  v32 = 0;
  v33 = 0;
  if ((sub_1DB6E9040(a2, &v33, &v32, *(_QWORD *)(v5 + 256)) & 0x80000000) == 0)
  {
    v14 = 0;
    goto LABEL_11;
  }
  if (*__error() == 12)
  {
    free(v13);
    v15 = "Can't allocate memory for UTF-16LE";
    goto LABEL_15;
  }
  archive_set_error((_DWORD *)a1, -1, "A filename cannot be converted to UTF-16LE;You should disable making Joliet extension",
    v16,
    v17,
    v18,
    v19,
    v20,
    v32);
  v14 = 4294967276;
LABEL_11:
  v21 = malloc_type_malloc((size_t)(v32 + 2), 0xCFDF9FA4uLL);
  *((_QWORD *)v13 + 5) = v21;
  if (!v21)
  {
    free(v13);
    v15 = "Can't allocate memory for Name";
    goto LABEL_15;
  }
  memcpy(v21, v33, (size_t)v32);
  v32[*((_QWORD *)v13 + 5)] = 0;
  v32[*((_QWORD *)v13 + 5) + 1] = 0;
  *((_DWORD *)v13 + 8) = (_DWORD)v32;
  *((_WORD *)v13 + 56) = archive_entry_mode((uint64_t)a2);
  if (archive_entry_filetype((uint64_t)a2) == 0x8000)
    *((_QWORD *)v13 + 6) = archive_entry_size((uint64_t)a2);
  else
    archive_entry_set_size((uint64_t)a2, 0);
  if (archive_entry_filetype((uint64_t)a2) == 0x4000)
  {
    v13[120] |= 1u;
  }
  else if (archive_entry_filetype((uint64_t)a2) == 40960)
  {
    v23 = (const char *)archive_entry_symlink((uint64_t)a2);
    *((_QWORD *)v13 + 6) = strlen(v23);
  }
  if (archive_entry_mtime_is_set((uint64_t)a2))
  {
    *((_DWORD *)v13 + 14) |= 1u;
    *((_QWORD *)v13 + 8) = archive_entry_mtime((uint64_t)a2);
    *((_QWORD *)v13 + 9) = archive_entry_mtime_nsec((uint64_t)a2);
  }
  if (archive_entry_atime_is_set((uint64_t)a2))
  {
    *((_DWORD *)v13 + 14) |= 2u;
    *((_QWORD *)v13 + 10) = archive_entry_atime((uint64_t)a2);
    *((_QWORD *)v13 + 11) = archive_entry_atime_nsec((uint64_t)a2);
  }
  if (archive_entry_ctime_is_set((uint64_t)a2))
  {
    *((_DWORD *)v13 + 14) |= 4u;
    *((_QWORD *)v13 + 12) = archive_entry_ctime((uint64_t)a2);
    *((_QWORD *)v13 + 13) = archive_entry_ctime_nsec((uint64_t)a2);
  }
  if (!*((_QWORD *)v13 + 6) && (v13[120] & 1) != 0 && !sub_1DB733364(v4 + 61744, v13))
  {
    free(*((void **)v13 + 5));
    free(v13);
    return 0;
  }
  v24 = *((_DWORD *)v13 + 14);
  if ((v24 & 1) != 0)
    ++*(_QWORD *)(v4 + 64);
  if ((v24 & 4) != 0)
    ++*(_QWORD *)(v4 + 80);
  v25 = (_QWORD **)(v4 + 61720);
  if ((v24 & 2) != 0)
    ++*(_QWORD *)(v4 + 72);
  v26 = *(_QWORD *)(v4 + 24) + 1;
  *(_QWORD *)(v4 + 24) = v26;
  *(_QWORD *)(v4 + 56) += (*((_DWORD *)v13 + 8) + 2);
  v27 = *((_QWORD *)v13 + 6);
  v28 = *(_QWORD *)(v4 + 40);
  if (!v27)
  {
    *(_QWORD *)(v4 + 40) = v28 + 1;
    if ((v13[120] & 1) != 0)
    {
      ++*(_QWORD *)(v4 + 48);
    }
    else
    {
      *((_QWORD *)v13 + 3) = 0;
      **(_QWORD **)(v4 + 61736) = v13;
      *(_QWORD *)(v4 + 61736) = v13 + 24;
    }
    return v14;
  }
  if (v26 - v28 == 1)
  {
    if ((sub_1DB71DCF8(a1, *(_DWORD *)(v4 + 128), *(unsigned int *)(v4 + 132)) & 0x80000000) == 0)
    {
      v14 = 0;
      v27 = *((_QWORD *)v13 + 6);
      goto LABEL_42;
    }
    free(*((void **)v13 + 5));
    free(v13);
    return 4294967266;
  }
LABEL_42:
  *((_QWORD *)v13 + 3) = 0;
  **v25 = v13;
  *v25 = v13 + 24;
  *(_QWORD *)(v4 + 16) = v13;
  *(_QWORD *)(v4 + 104) = v27;
  *(_DWORD *)(v4 + 112) = 0;
  if (archive_entry_filetype((uint64_t)a2) == 40960)
  {
    v29 = (Bytef *)archive_entry_symlink((uint64_t)a2);
    v30 = sub_1DB71E140(a1, v29, *((_QWORD *)v13 + 6), 1);
    v31 = v30;
    if (v30 < 0)
    {
      return v30;
    }
    else
    {
      *(_DWORD *)(v4 + 112) = crc32(*(unsigned int *)(v4 + 112), v29, v30);
      *(_QWORD *)(v4 + 104) -= v31;
    }
  }
  return v14;
}

uint64_t sub_1DB71D3A0(uint64_t a1, Bytef *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 264);
  if (*(_QWORD *)(v3 + 104) < a3)
    a3 = *(_QWORD *)(v3 + 104);
  if (!a3 || !*(_QWORD *)(v3 + 16))
    return 0;
  v5 = sub_1DB71E140(a1, a2, a3, 1);
  if ((v5 & 0x8000000000000000) == 0)
  {
    *(_DWORD *)(v3 + 112) = crc32(*(unsigned int *)(v3 + 112), a2, v5);
    *(_QWORD *)(v3 + 104) -= v5;
  }
  return v5;
}

uint64_t sub_1DB71D41C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 264);
  if (!*(_QWORD *)(v1 + 16))
    return 0;
  while (1)
  {
    v3 = *(_QWORD *)(v1 + 104);
    if (!v3)
      break;
    if (v3 >= *(_QWORD *)(a1 + 192))
      v4 = *(_QWORD *)(a1 + 192);
    else
      v4 = *(_QWORD *)(v1 + 104);
    result = sub_1DB71D3A0(a1, *(Bytef **)(a1 + 184), v4);
    if (result < 0)
      return result;
  }
  result = 0;
  v6 = *(_QWORD *)(v1 + 96) + *(_QWORD *)(v1 + 176);
  *(_QWORD *)(v1 + 88) += *(_QWORD *)(v1 + 152);
  *(_QWORD *)(v1 + 96) = v6;
  *(_DWORD *)(*(_QWORD *)(v1 + 16) + 116) = *(_DWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 16) = 0;
  return result;
}

uint64_t sub_1DB71D49C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t result;
  int *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  unint64_t v21;
  int v22;
  unsigned int v23;
  unint64_t i;
  unint64_t j;
  char v26;
  __int16 v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  size_t v33;
  uint64_t v34;
  size_t *v35;
  size_t v36;
  ssize_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  ssize_t v43;
  BOOL v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  int v49;
  char *v50;
  _DWORD *v51;
  char *v52;
  unint64_t v53;
  Bytef v54[4];
  Bytef buf;

  v2 = *(_QWORD *)(a1 + 264);
  v3 = (_QWORD *)(v2 + 61704);
  v4 = *(_QWORD *)(v2 + 24);
  if (!v4)
  {
    v7 = 0;
    v30 = 0;
    goto LABEL_83;
  }
  result = sub_1DB71E140(a1, 0, 0, 0);
  if ((result & 0x80000000) != 0)
    return result;
  *(_DWORD *)(v2 + 232) = *(_DWORD *)(v2 + 128);
  v6 = (int *)(v2 + 232);
  v7 = *(_QWORD *)(v2 + 176);
  v8 = *(_QWORD *)(v2 + 152);
  v9 = *(_QWORD *)(v2 + 192);
  *(_QWORD *)(v2 + 240) = *(unsigned int *)(v2 + 184);
  *(_QWORD *)(v2 + 248) = v9;
  *(_DWORD *)(v2 + 184) = 0;
  *(_QWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 32) = *(_QWORD *)(v2 + 24) - *(_QWORD *)(v2 + 40);
  v10 = *(_QWORD *)(v2 + 61728);
  if (v10)
  {
    **(_QWORD **)(v2 + 61720) = v10;
    *(_QWORD *)(v2 + 61720) = *(_QWORD *)(v2 + 61736);
  }
  v11 = sub_1DB733688((unint64_t *)(v2 + 61744), 0, 0);
  if (v11)
  {
    v12 = v11;
    do
    {
      *(_QWORD *)(v12 + 24) = 0;
      **(_QWORD **)(v2 + 61720) = v12;
      *(_QWORD *)(v2 + 61720) = v12 + 24;
      v12 = sub_1DB733688((unint64_t *)(v2 + 61744), v12, 1u);
    }
    while (v12);
  }
  v13 = *(_DWORD *)(v2 + 128);
  v14 = v13 ? 196865 : 0;
  v15 = v13 == 33 ? 33 : v14;
  v16 = *(_QWORD *)(v2 + 24) == 1 ? 0 : v15;
  result = sub_1DB71DCF8(a1, v16, *(unsigned int *)(v2 + 132));
  if ((result & 0x80000000) != 0)
    return result;
  *(_DWORD *)(v2 + 124) = 1;
  *(_DWORD *)(v2 + 116) = 0;
  v17 = *(unint64_t **)(a1 + 264);
  result = sub_1DB71EB94(a1, 1uLL);
  if ((result & 0x80000000) != 0)
    return result;
  if (v17[4])
  {
    result = sub_1DB71EB94(a1, 4uLL);
    if ((result & 0x80000000) != 0)
      return result;
    result = sub_1DB71EC24(a1, 0, v7, v8, (int *)(v2 + 232), 1, 0);
    if ((result & 0x80000000) != 0)
      return result;
  }
  result = sub_1DB71EB94(a1, 5uLL);
  if ((result & 0x80000000) != 0)
    return result;
  result = sub_1DB71EB94(a1, v17[3]);
  if ((result & 0x80000000) != 0)
    return result;
  buf = 0;
  if (v17[5])
  {
    result = sub_1DB71EB94(a1, 0xEuLL);
    if ((result & 0x80000000) != 0)
      return result;
    result = sub_1DB71EB94(a1, (v17[3] + 7) >> 3);
    if ((result & 0x80000000) != 0)
      return result;
    buf = 0;
    v18 = v17[7714];
    if (v18)
    {
      v19 = 0;
      v20 = 128;
      do
      {
        while (1)
        {
          if (!*(_QWORD *)(v18 + 48))
          {
            v19 |= v20;
            buf = v19;
          }
          if (v20 > 1)
            break;
          result = sub_1DB71E140(a1, &buf, 1, 1);
          if ((result & 0x80000000) != 0)
            return result;
          v19 = 0;
          buf = 0;
          v18 = *(_QWORD *)(v18 + 24);
          v20 = 128;
          if (!v18)
            goto LABEL_37;
        }
        v20 >>= 1;
        v18 = *(_QWORD *)(v18 + 24);
      }
      while (v18);
      result = sub_1DB71E140(a1, &buf, 1, 1);
      if ((result & 0x80000000) != 0)
        return result;
    }
  }
LABEL_37:
  if (v17[5] <= v17[6])
    goto LABEL_53;
  result = sub_1DB71EB94(a1, 0xFuLL);
  if ((result & 0x80000000) != 0)
    return result;
  result = sub_1DB71EB94(a1, (v17[5] + 7) >> 3);
  if ((result & 0x80000000) != 0)
    return result;
  buf = 0;
  v21 = v17[7714];
  if (!v21)
    goto LABEL_53;
  v22 = 0;
  v23 = 128;
  do
  {
    while (1)
    {
      if (*(_QWORD *)(v21 + 48))
        goto LABEL_50;
      if ((*(_BYTE *)(v21 + 120) & 1) == 0)
      {
        v22 |= v23;
        buf = v22;
      }
      if (v23 > 1)
        break;
      result = sub_1DB71E140(a1, &buf, 1, 1);
      if ((result & 0x80000000) != 0)
        return result;
      v22 = 0;
      buf = 0;
      v21 = *(_QWORD *)(v21 + 24);
      v23 = 128;
      if (!v21)
        goto LABEL_53;
    }
    v23 >>= 1;
LABEL_50:
    v21 = *(_QWORD *)(v21 + 24);
  }
  while (v21);
  if (v23 != 128)
  {
    result = sub_1DB71E140(a1, &buf, 1, 1);
    if ((result & 0x80000000) != 0)
      return result;
  }
LABEL_53:
  result = sub_1DB71EB94(a1, 0x11uLL);
  if ((result & 0x80000000) != 0)
    return result;
  result = sub_1DB71EB94(a1, v17[7] + 1);
  if ((result & 0x80000000) != 0)
    return result;
  result = sub_1DB71EB94(a1, 0);
  if ((result & 0x80000000) != 0)
    return result;
  for (i = v17[7714]; i; i = *(_QWORD *)(i + 24))
  {
    result = sub_1DB71E140(a1, *(Bytef **)(i + 40), (*(_DWORD *)(i + 32) + 2), 1);
    if ((result & 0x80000000) != 0)
      return result;
  }
  result = sub_1DB71EF5C(a1, 0x14u, 1, 0);
  if ((result & 0x80000000) != 0)
    return result;
  result = sub_1DB71EF5C(a1, 0x12u, 4, 2u);
  if ((result & 0x80000000) != 0)
    return result;
  result = sub_1DB71EF5C(a1, 0x13u, 2, 1u);
  if ((result & 0x80000000) != 0)
    return result;
  result = sub_1DB71EB94(a1, 0x15uLL);
  if ((result & 0x80000000) != 0)
    return result;
  result = sub_1DB71EB94(a1, (4 * v17[3]) | 2);
  if ((result & 0x80000000) != 0)
    return result;
  result = sub_1DB71EB94(a1, 1uLL);
  if ((result & 0x80000000) != 0)
    return result;
  result = sub_1DB71EB94(a1, 0);
  if ((result & 0x80000000) != 0)
    return result;
  for (j = v17[7714]; j; j = *(_QWORD *)(j + 24))
  {
    *(_DWORD *)v54 = 0x8000;
    v26 = (*(_BYTE *)(j + 120) & 1) != 0 ? 16 : 32;
    v27 = *(_WORD *)(j + 112);
    v54[0] = v26 | ((v27 & 0x92) == 0);
    *(_WORD *)&v54[2] = v27;
    result = sub_1DB71E140(a1, v54, 4, 1);
    if ((result & 0x80000000) != 0)
      return result;
  }
  v28 = v2;
  result = sub_1DB71EB94(a1, 0);
  if ((result & 0x80000000) == 0)
  {
    v29 = sub_1DB71EB94(a1, 0);
    if (v29 < 0)
      return v29 & (v29 >> 31);
    result = sub_1DB71E140(a1, 0, 0, 0);
    if ((result & 0x80000000) == 0)
    {
      v53 = *(_QWORD *)(v2 + 176);
      v30 = *(_DWORD *)(v2 + 116);
      if (v16)
      {
        v31 = *(_QWORD *)(v2 + 152);
        free(*(void **)(v28 + 248));
        *(_DWORD *)(v28 + 232) = v16;
        v32 = *(_QWORD *)(v28 + 192);
        *(_QWORD *)(v28 + 240) = *(unsigned int *)(v28 + 184);
        *(_QWORD *)(v28 + 248) = v32;
        *(_DWORD *)(v28 + 184) = 0;
        *(_QWORD *)(v28 + 192) = 0;
        result = sub_1DB71DCF8(a1, 0, 0);
        if ((result & 0x80000000) != 0)
          return result;
        *(_QWORD *)(v28 + 120) = 0x200000000;
        result = sub_1DB71EB94(a1, 0x17uLL);
        if ((result & 0x80000000) != 0)
          return result;
        result = sub_1DB71EC24(a1, v7, v53, v31, v6, 0, v30);
        if ((result & 0x80000000) != 0)
          return result;
        result = sub_1DB71E140(a1, 0, 0, 0);
        if ((result & 0x80000000) != 0)
          return result;
        v7 += v53;
        v53 = *(_QWORD *)(v28 + 176);
        v30 = *(_DWORD *)(v28 + 120);
      }
      v2 = v28;
      *(_DWORD *)(v28 + 124) = 0;
      v4 = v53;
LABEL_83:
      v33 = *(_QWORD *)(v2 + 8);
      *v3 = 61440;
      *(_QWORD *)(v2 + 264) = 0x3001C27AFBC7A37;
      *(_QWORD *)(v2 + 276) = v7;
      *(_QWORD *)(v2 + 284) = v4;
      *(_DWORD *)(v2 + 292) = v30;
      *(_DWORD *)(v2 + 272) = crc32(0, (const Bytef *)(v2 + 276), 0x14u);
      *v3 -= 32;
      v34 = *(_QWORD *)(a1 + 264);
      if (*(_QWORD *)(v34 + 8) && lseek(*(_DWORD *)v34, 0, 0) < 0)
      {
        v49 = *__error();
        v50 = "lseek failed";
LABEL_101:
        v51 = (_DWORD *)a1;
      }
      else
      {
        if (!v33)
        {
LABEL_97:
          v47 = *(_QWORD *)(a1 + 264);
          v48 = (_QWORD *)(v47 + 61704);
          result = sub_1DB7322A8(a1, v47 + 264, 61440 - *(_QWORD *)(v47 + 61704));
          if (!(_DWORD)result)
            *v48 = 61440;
          return result;
        }
        v35 = (size_t *)(v34 + 61704);
        while (1)
        {
          if (v33 >= *v35)
            v36 = *v35;
          else
            v36 = v33;
          v37 = read(*(_DWORD *)v34, (void *)(v34 + 264 - *v35 + 61440), v36);
          v43 = v37;
          if (v37 < 0)
          {
            v49 = *__error();
            v52 = (char *)v43;
            v50 = "Can't read temporary file(%jd)";
            goto LABEL_101;
          }
          if (!v37)
            break;
          v44 = *v35 == v37;
          *v35 -= v37;
          if (v44)
          {
            v45 = *(_QWORD *)(a1 + 264);
            v46 = (_QWORD *)(v45 + 61704);
            result = sub_1DB7322A8(a1, v45 + 264, 61440 - *(_QWORD *)(v45 + 61704));
            if ((_DWORD)result)
              return result;
            *v46 = 61440;
          }
          v33 -= v43;
          if (!v33)
            goto LABEL_97;
        }
        v50 = "Truncated 7-Zip archive";
        v51 = (_DWORD *)a1;
        v49 = 0;
      }
      archive_set_error(v51, v49, v50, v38, v39, v40, v41, v42, v52);
      return 4294967266;
    }
  }
  return result;
}

uint64_t sub_1DB71DC5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 264);
  if ((*(_DWORD *)v2 & 0x80000000) == 0)
    close(*(_DWORD *)v2);
  v3 = *(_QWORD *)(v2 + 61712);
  if (v3)
  {
    do
    {
      v4 = *(_QWORD *)(v3 + 24);
      free(*(void **)(v3 + 40));
      free((void *)v3);
      v3 = v4;
    }
    while (v4);
  }
  if (*(_DWORD *)(v2 + 200))
  {
    *(_DWORD *)(v2 + 184) = 0;
    free(*(void **)(v2 + 192));
    *(_QWORD *)(v2 + 192) = 0;
    (*(void (**)(uint64_t, uint64_t))(v2 + 224))(a1, v2 + 136);
  }
  free(*(void **)(v2 + 248));
  free((void *)v2);
  return 0;
}

uint64_t sub_1DB71DCF8(uint64_t a1, int a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  z_stream *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  z_stream *v12;
  uint64_t v13;
  Bytef *v14;
  uLong v15;
  uint64_t (*v16)(_DWORD *, uint64_t);
  uint64_t v17;
  void **v18;
  void **v19;
  char *v20;
  void **v21;
  void **v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _DWORD *v27;
  int v28;
  uint64_t result;
  void **v30;
  char *v31;

  v3 = a3;
  v5 = *(_QWORD *)(a1 + 264);
  if (a2 <= 197632)
  {
    if (a2 == 33)
    {
      v17 = 33;
    }
    else
    {
      if (a2 != 196865)
        goto LABEL_28;
      v17 = 0x4000000000000001;
    }
    result = sub_1DB71E50C((_DWORD *)a1, v5 + 136, a3, v17);
    if ((_DWORD)result)
      return result;
    goto LABEL_37;
  }
  if (a2 == 197633)
  {
    if (*(_DWORD *)(v5 + 200))
    {
      *(_DWORD *)(v5 + 184) = 0;
      free(*(void **)(v5 + 192));
      *(_QWORD *)(v5 + 192) = 0;
      (*(void (**)(uint64_t, uint64_t))(v5 + 224))(a1, v5 + 136);
    }
    v18 = (void **)malloc_type_calloc(1uLL, 0x4B48uLL, 0x10B0040A3FB22B0uLL);
    if (v18)
    {
      v19 = v18;
      v20 = (char *)malloc_type_malloc(0x20uLL, 0xAF3286F5uLL);
      v19[2405] = v20;
      if (v20)
      {
        v19[2406] = v20;
        v19[2407] = v20 + 32;
        v21 = (void **)malloc_type_malloc(5uLL, 0x74727D59uLL);
        if (v21)
        {
          v22 = v21;
          *(_DWORD *)v21 = 6;
          *((_BYTE *)v21 + 4) = 1;
          sub_1DB722AE4((uint64_t)(v19 + 1));
          if (sub_1DB722C00((uint64_t)(v19 + 1), 0x1000000u))
          {
            sub_1DB722C84((uint64_t)(v19 + 1), 6);
            v19[2403] = (void *)a1;
            v19[2404] = sub_1DB71E83C;
            v19[2402] = v19 + 2403;
            sub_1DB723260((uint64_t)(v19 + 2399));
            *(_DWORD *)v19 = 0;
            *(_DWORD *)(v5 + 200) = 1;
            *(_QWORD *)(v5 + 208) = v19;
            *(_QWORD *)(v5 + 216) = sub_1DB71E8A8;
            *(_QWORD *)(v5 + 224) = sub_1DB71E9F8;
            *(_DWORD *)(v5 + 184) = 5;
            *(_QWORD *)(v5 + 192) = v22;
LABEL_37:
            result = 0;
            *(_QWORD *)(v5 + 152) = 0;
            *(_QWORD *)(v5 + 160) = v5 + 264;
            *(_OWORD *)(v5 + 168) = xmmword_1DB74D060;
            return result;
          }
          free(v19[2405]);
          free(v19);
          v30 = v22;
        }
        else
        {
          free(v19[2405]);
          v30 = v19;
        }
        free(v30);
        v26 = "Coludn't allocate memory for PPMd";
        goto LABEL_41;
      }
      free(v19);
    }
    v26 = "Can't allocate memory for PPMd";
LABEL_41:
    v27 = (_DWORD *)a1;
    v28 = 12;
    goto LABEL_42;
  }
  if (a2 == 262658)
  {
    if (*(_DWORD *)(v5 + 200))
    {
      *(_DWORD *)(v5 + 184) = 0;
      free(*(void **)(v5 + 192));
      *(_QWORD *)(v5 + 192) = 0;
      (*(void (**)(uint64_t, uint64_t))(v5 + 224))(a1, v5 + 136);
    }
    v23 = (char *)malloc_type_calloc(1uLL, 0x50uLL, 0x10900403A81BCDDuLL);
    if (v23)
    {
      v12 = (z_stream *)v23;
      v24 = *(_QWORD *)(v5 + 144);
      *(_QWORD *)v23 = *(_QWORD *)(v5 + 136);
      *((_DWORD *)v23 + 2) = v24;
      *(_QWORD *)(v23 + 12) = *(_QWORD *)(v5 + 152);
      v25 = *(_QWORD *)(v5 + 168);
      *((_QWORD *)v23 + 3) = *(_QWORD *)(v5 + 160);
      *((_DWORD *)v23 + 8) = v25;
      *(_QWORD *)(v23 + 36) = *(_QWORD *)(v5 + 176);
      if (!BZ2_bzCompressInit((bz_stream *)v23, v3, 0, 30))
      {
        *(_DWORD *)(v5 + 200) = 1;
        *(_QWORD *)(v5 + 208) = v12;
        *(_QWORD *)(v5 + 216) = sub_1DB71E3C4;
        v16 = sub_1DB71E4A0;
        goto LABEL_36;
      }
      goto LABEL_24;
    }
    v26 = "Can't allocate memory for bzip2 stream";
    goto LABEL_41;
  }
  if (a2 != 262408)
  {
LABEL_28:
    if (*(_DWORD *)(v5 + 200))
    {
      *(_DWORD *)(v5 + 184) = 0;
      free(*(void **)(v5 + 192));
      *(_QWORD *)(v5 + 192) = 0;
      (*(void (**)(uint64_t, uint64_t))(v5 + 224))(a1, v5 + 136);
    }
    *(_DWORD *)(v5 + 200) = 1;
    *(_QWORD *)(v5 + 216) = sub_1DB71EA48;
    *(_QWORD *)(v5 + 224) = sub_1DB71EAD0;
    goto LABEL_37;
  }
  if (*(_DWORD *)(v5 + 200))
  {
    *(_DWORD *)(v5 + 184) = 0;
    free(*(void **)(v5 + 192));
    *(_QWORD *)(v5 + 192) = 0;
    (*(void (**)(uint64_t, uint64_t))(v5 + 224))(a1, v5 + 136);
  }
  v6 = (z_stream *)malloc_type_calloc(1uLL, 0x70uLL, 0x10B0040E8CA615DuLL);
  if (!v6)
  {
    v26 = "Can't allocate memory for gzip stream";
    goto LABEL_41;
  }
  v12 = v6;
  v13 = *(_QWORD *)(v5 + 144);
  v6->next_in = *(Bytef **)(v5 + 136);
  v6->avail_in = v13;
  v14 = *(Bytef **)(v5 + 160);
  v6->total_in = *(_QWORD *)(v5 + 152);
  v6->next_out = v14;
  v15 = *(_QWORD *)(v5 + 176);
  v6->avail_out = *(_QWORD *)(v5 + 168);
  v6->total_out = v15;
  if (!deflateInit2_(v6, v3, 8, -15, 8, 0, "1.2.12", 112))
  {
    *(_DWORD *)(v5 + 200) = 1;
    *(_QWORD *)(v5 + 208) = v12;
    *(_QWORD *)(v5 + 216) = sub_1DB71E2A0;
    v16 = sub_1DB71E358;
LABEL_36:
    *(_QWORD *)(v5 + 224) = v16;
    goto LABEL_37;
  }
LABEL_24:
  free(v12);
  *(_QWORD *)(v5 + 208) = 0;
  v26 = "Internal error initializing compression library";
  v27 = (_DWORD *)a1;
  v28 = -1;
LABEL_42:
  archive_set_error(v27, v28, v26, v7, v8, v9, v10, v11, v31);
  return 4294967266;
}

uint64_t sub_1DB71E140(uint64_t a1, Bytef *buf, uint64_t len, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v12;

  v5 = len;
  v8 = *(_QWORD *)(a1 + 264);
  if (!(_DWORD)a4 && !(*(_QWORD *)(v8 + 152) | len))
    return 0;
  if (len && (*(_DWORD *)(v8 + 124) & 1) != 0)
    *(_DWORD *)(v8 + 116) = crc32(*(unsigned int *)(v8 + 116), buf, len);
  *(_QWORD *)(v8 + 136) = buf;
  *(_QWORD *)(v8 + 144) = v5;
  do
  {
    do
    {
      if (*(_DWORD *)(v8 + 200))
      {
        v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 216))(a1, v8 + 136, a4);
        v10 = v9 != 1;
        if (v9 > 1)
          return -30;
      }
      else
      {
        v10 = 1;
      }
      if (*(_QWORD *)(v8 + 168))
        break;
      if (sub_1DB71EADC(a1, (char *)(v8 + 264), 0xF000uLL))
        return -30;
      *(_QWORD *)(v8 + 160) = v8 + 264;
      *(_QWORD *)(v8 + 168) = 61440;
      if ((*(_BYTE *)(v8 + 124) & 2) != 0)
        *(_DWORD *)(v8 + 120) = crc32(*(unsigned int *)(v8 + 120), (const Bytef *)(v8 + 264), 0xF000u);
    }
    while (!(_DWORD)a4 && v10);
  }
  while (*(_QWORD *)(v8 + 144));
  if ((_DWORD)a4)
    return v5;
  v12 = *(_QWORD *)(v8 + 168);
  if (sub_1DB71EADC(a1, (char *)(v8 + 264), 61440 - v12))
    return -30;
  if (v12 != 61440 && (*(_DWORD *)(v8 + 124) & 2) != 0)
    *(_DWORD *)(v8 + 120) = crc32(*(unsigned int *)(v8 + 120), (const Bytef *)(v8 + 264), 61440 - (int)v12);
  return v5;
}

uint64_t sub_1DB71E2A0(_DWORD *a1, Bytef **a2, int a3)
{
  z_stream *v5;
  Bytef *v6;
  Bytef *v7;
  uLong v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Bytef *avail_in;
  Bytef *next_out;
  uLong total_out;

  v5 = (z_stream *)a2[9];
  v6 = a2[1];
  v5->next_in = *a2;
  v5->avail_in = v6;
  v7 = a2[3];
  v5->total_in = (uLong)a2[2];
  v5->next_out = v7;
  v8 = (uLong)a2[5];
  v5->avail_out = a2[4];
  v5->total_out = v8;
  result = deflate(v5, 4 * (a3 == 0));
  avail_in = (Bytef *)v5->avail_in;
  *a2 = v5->next_in;
  a2[1] = avail_in;
  next_out = v5->next_out;
  a2[2] = (Bytef *)v5->total_in;
  a2[3] = next_out;
  total_out = v5->total_out;
  a2[4] = (Bytef *)v5->avail_out;
  a2[5] = (Bytef *)total_out;
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 1)
    {
      return 1;
    }
    else
    {
      archive_set_error(a1, -1, "GZip compression failed: deflate() call returned status %d", v10, v11, v12, v13, v14, (char *)result);
      return 4294967266;
    }
  }
  return result;
}

uint64_t sub_1DB71E358(_DWORD *a1, uint64_t a2)
{
  z_stream *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;

  v4 = *(z_stream **)(a2 + 72);
  v5 = deflateEnd(v4);
  free(v4);
  *(_QWORD *)(a2 + 72) = 0;
  *(_DWORD *)(a2 + 64) = 0;
  if (!v5)
    return 0;
  archive_set_error(a1, -1, "Failed to clean up compressor", v6, v7, v8, v9, v10, v12);
  return 4294967266;
}

uint64_t sub_1DB71E3C4(_DWORD *a1, _QWORD *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;

  v5 = a2[9];
  v6 = a2[1];
  *(_QWORD *)v5 = *a2;
  *(_DWORD *)(v5 + 8) = v6;
  *(_QWORD *)(v5 + 12) = a2[2];
  v7 = a2[4];
  *(_QWORD *)(v5 + 24) = a2[3];
  *(_DWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 36) = a2[5];
  v13 = (char *)BZ2_bzCompress((bz_stream *)v5, 2 * (a3 == 0));
  result = 0;
  v15 = *(unsigned int *)(v5 + 8);
  *a2 = *(_QWORD *)v5;
  a2[1] = v15;
  v16 = *(_QWORD *)(v5 + 24);
  a2[2] = *(_QWORD *)(v5 + 12);
  a2[3] = v16;
  a2[4] = *(unsigned int *)(v5 + 32);
  a2[5] = *(_QWORD *)(v5 + 36);
  if ((_DWORD)v13 != 1 && (_DWORD)v13 != 3)
  {
    if ((_DWORD)v13 == 4)
    {
      return 1;
    }
    else
    {
      archive_set_error(a1, -1, "Bzip2 compression failed: BZ2_bzCompress() call returned status %d", v8, v9, v10, v11, v12, v13);
      return 4294967266;
    }
  }
  return result;
}

uint64_t sub_1DB71E4A0(_DWORD *a1, uint64_t a2)
{
  bz_stream *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;

  v4 = *(bz_stream **)(a2 + 72);
  v5 = BZ2_bzCompressEnd(v4);
  free(v4);
  *(_QWORD *)(a2 + 72) = 0;
  *(_DWORD *)(a2 + 64) = 0;
  if (!v5)
    return 0;
  archive_set_error(a1, -1, "Failed to clean up compressor", v6, v7, v8, v9, v10, v12);
  return 4294967266;
}

uint64_t sub_1DB71E50C(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  char *v14;
  _DWORD *v15;
  int v16;
  uint64_t result;
  size_t v18;
  void *v19;
  _OWORD v20[7];

  if (*(_DWORD *)(a2 + 64))
  {
    *(_DWORD *)(a2 + 48) = 0;
    free(*(void **)(a2 + 56));
    *(_QWORD *)(a2 + 56) = 0;
    (*(void (**)(_DWORD *, uint64_t))(a2 + 88))(a1, a2);
  }
  v7 = malloc_type_calloc(1uLL, 0xA8uLL, 0x688505C5uLL);
  if (v7)
  {
    v13 = v7;
    memset(v20, 0, sizeof(v20));
    if (!lzma_lzma_preset())
    {
      *((_QWORD *)v13 + 17) = a4;
      *((_QWORD *)v13 + 18) = v20;
      *((_QWORD *)v13 + 19) = -1;
      if (lzma_properties_size())
      {
        free(v13);
        *(_QWORD *)(a2 + 72) = 0;
        v14 = "lzma_properties_size failed";
      }
      else
      {
        v18 = *(unsigned int *)(a2 + 48);
        if (!(_DWORD)v18)
          goto LABEL_17;
        v19 = malloc_type_malloc(v18, 0x2910FC6AuLL);
        *(_QWORD *)(a2 + 56) = v19;
        if (!v19)
        {
          free(v13);
          *(_QWORD *)(a2 + 72) = 0;
          v14 = "Cannot allocate memory";
          goto LABEL_7;
        }
        if (lzma_properties_encode())
        {
          free(v13);
          *(_QWORD *)(a2 + 72) = 0;
          v14 = "lzma_properties_encode failed";
        }
        else
        {
LABEL_17:
          *((_QWORD *)v13 + 16) = 0;
          v13[6] = 0u;
          v13[7] = 0u;
          v13[4] = 0u;
          v13[5] = 0u;
          v13[2] = 0u;
          v13[3] = 0u;
          *v13 = 0u;
          v13[1] = 0u;
          result = lzma_raw_encoder();
          if ((_DWORD)result == 5)
          {
            free(v13);
            *(_QWORD *)(a2 + 72) = 0;
            v14 = "Internal error initializing compression library: Cannot allocate memory";
            goto LABEL_7;
          }
          if (!(_DWORD)result)
          {
            *(_DWORD *)(a2 + 64) = 1;
            *(_QWORD *)(a2 + 72) = v13;
            *(_QWORD *)(a2 + 80) = sub_1DB71E714;
            *(_QWORD *)(a2 + 88) = sub_1DB71E800;
            return result;
          }
          free(v13);
          *(_QWORD *)(a2 + 72) = 0;
          v14 = "Internal error initializing compression library: It's a bug in liblzma";
        }
      }
      v15 = a1;
      v16 = -1;
      goto LABEL_8;
    }
    free(v13);
    *(_QWORD *)(a2 + 72) = 0;
    v14 = "Internal error initializing compression library";
  }
  else
  {
    v14 = "Can't allocate memory for lzma stream";
  }
LABEL_7:
  v15 = a1;
  v16 = 12;
LABEL_8:
  archive_set_error(v15, v16, v14, v8, v9, v10, v11, v12, *(char **)&v20[0]);
  return 4294967266;
}

uint64_t sub_1DB71E714(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;

  v4 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)v4 = *(_QWORD *)a2;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a2 + 32);
  result = lzma_code();
  *(_QWORD *)a2 = *(_QWORD *)v4;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(v4 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(v4 + 24);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v4 + 32);
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 6)
    {
      v16 = (char *)((unint64_t)(lzma_memusage() + 0xFFFFF) >> 20);
      archive_set_error(a1, 12, "lzma compression error: %ju MiB would have been needed", v11, v12, v13, v14, v15, v16);
    }
    else
    {
      if ((_DWORD)result == 1)
        return 1;
      archive_set_error(a1, -1, "lzma compression failed: lzma_code() call returned status %d", v6, v7, v8, v9, v10, (char *)result);
    }
    return 4294967266;
  }
  return result;
}

uint64_t sub_1DB71E800(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 72);
  lzma_end();
  free(v3);
  *(_DWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  return 0;
}

uint64_t sub_1DB71E83C(uint64_t result, char a2)
{
  _QWORD *v2;
  _BYTE *v3;
  _QWORD *v4;
  _QWORD *v5;
  _BYTE *v6;

  v2 = *(_QWORD **)(*(_QWORD *)result + 264);
  if (v2[21])
  {
    v3 = (_BYTE *)v2[20];
    v2[20] = v3 + 1;
    *v3 = a2;
    --v2[21];
    v4 = v2 + 22;
  }
  else
  {
    v5 = (_QWORD *)v2[26];
    v6 = (_BYTE *)v5[2406];
    if ((unint64_t)v6 >= v5[2407])
      return result;
    v5[2406] = v6 + 1;
    *v6 = a2;
    v4 = v5 + 2408;
  }
  ++*v4;
  return result;
}

uint64_t sub_1DB71E8A8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  _BYTE *v10;
  int64x2_t v11;
  uint64_t result;
  unsigned __int8 *v13;
  int64x2_t v14;

  v5 = *(_QWORD *)(a2 + 72);
  v6 = *(_QWORD *)(v5 + 19264);
  if (v6)
  {
    if (!*(_QWORD *)(a2 + 32))
      return 0;
    v7 = (char *)(*(_QWORD *)(v5 + 19248) - v6);
    v8 = 1;
    while (v8)
    {
      v9 = *v7++;
      v10 = *(_BYTE **)(a2 + 24);
      *(_QWORD *)(a2 + 24) = v10 + 1;
      *v10 = v9;
      v11 = vaddq_s64(*(int64x2_t *)(a2 + 32), (int64x2_t)xmmword_1DB74C510);
      *(int64x2_t *)(a2 + 32) = v11;
      v8 = *(_QWORD *)(v5 + 19264) - 1;
      *(_QWORD *)(v5 + 19264) = v8;
      if (!v11.i64[0])
      {
        if (v8)
          return 0;
        break;
      }
    }
    if (*(_DWORD *)v5 == 1)
      return 1;
    *(_QWORD *)(v5 + 19248) = *(_QWORD *)(v5 + 19240);
  }
  if (*(_QWORD *)(a2 + 8))
  {
    while (*(_QWORD *)(a2 + 32))
    {
      v13 = (unsigned __int8 *)(*(_QWORD *)a2)++;
      sub_1DB7232AC((unsigned __int8 *)(v5 + 8), v5 + 19192, *v13);
      v14 = vaddq_s64(*(int64x2_t *)(a2 + 8), (int64x2_t)xmmword_1DB74C510);
      *(int64x2_t *)(a2 + 8) = v14;
      if (!v14.i64[0])
        goto LABEL_13;
    }
    return 0;
  }
LABEL_13:
  if (a3)
    return 0;
  sub_1DB72327C((_QWORD *)(v5 + 19192));
  result = 1;
  *(_DWORD *)v5 = 1;
  if (*(_QWORD *)(v5 + 19264))
    return 0;
  return result;
}

uint64_t sub_1DB71E9F8(uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = *(void ***)(a2 + 72);
  sub_1DB6E8390((uint64_t)(v3 + 1));
  free(v3[2405]);
  free(v3);
  *(_QWORD *)(a2 + 72) = 0;
  *(_DWORD *)(a2 + 64) = 0;
  return 0;
}

BOOL sub_1DB71EA48(uint64_t a1, uint64_t a2, int a3)
{
  size_t v4;
  size_t v5;
  size_t v7;
  size_t v8;
  size_t v9;
  size_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a2 + 32) >= v4)
    v5 = *(_QWORD *)(a2 + 8);
  else
    v5 = *(_QWORD *)(a2 + 32);
  if (v5)
  {
    memcpy(*(void **)(a2 + 24), *(const void **)a2, v5);
    v7 = *(_QWORD *)a2 + v5;
    v4 = *(_QWORD *)(a2 + 8) - v5;
    v8 = *(_QWORD *)(a2 + 24) + v5;
    *(_QWORD *)(a2 + 16) += v5;
    *(_QWORD *)(a2 + 24) = v8;
    v9 = *(_QWORD *)(a2 + 32) - v5;
    v10 = *(_QWORD *)(a2 + 40) + v5;
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v4;
    *(_QWORD *)(a2 + 32) = v9;
    *(_QWORD *)(a2 + 40) = v10;
  }
  return !a3 && v4 == 0;
}

uint64_t sub_1DB71EAD0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 64) = 0;
  return 0;
}

uint64_t sub_1DB71EADC(uint64_t a1, char *__buf, size_t __nbyte)
{
  uint64_t v6;
  int v7;
  ssize_t v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;

  v6 = *(_QWORD *)(a1 + 264);
  if (*(_DWORD *)v6 == -1 && (*(_QWORD *)(v6 + 8) = 0, v7 = sub_1DB730874(0), *(_DWORD *)v6 = v7, v7 < 0))
  {
    v10 = *__error();
    v16 = "Couldn't create temporary file";
  }
  else
  {
    if (!__nbyte)
      return 0;
    while (1)
    {
      v8 = write(*(_DWORD *)v6, __buf, __nbyte);
      if (v8 < 0)
        break;
      __buf += v8;
      *(_QWORD *)(v6 + 8) += v8;
      __nbyte -= v8;
      if (!__nbyte)
        return 0;
    }
    v10 = *__error();
    v16 = "fwrite function failed";
  }
  archive_set_error((_DWORD *)a1, v10, v16, v11, v12, v13, v14, v15, v17);
  return 4294967266;
}

uint64_t sub_1DB71EB94(uint64_t a1, unint64_t a2)
{
  Bytef v2;
  unsigned int v3;
  uint64_t v4;
  Bytef buf[9];
  uint64_t v7;

  v2 = 0;
  v7 = *MEMORY[0x1E0C80C00];
  v3 = 128;
  v4 = 1;
  while (a2 >= v3)
  {
    buf[v4] = a2;
    a2 >>= 8;
    v2 |= v3;
    v3 >>= 1;
    if (++v4 == 9)
      goto LABEL_6;
  }
  v2 |= a2;
LABEL_6:
  buf[0] = v2;
  return sub_1DB71E140(a1, buf, v4, 1);
}

uint64_t sub_1DB71EC24(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, int *a5, int a6, int a7)
{
  uint64_t v14;
  int v15;
  uint64_t result;
  uint64_t i;
  unint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned int v25;
  int v26;
  int v27;
  unint64_t v28;
  uint64_t j;
  unint64_t v30;
  int v31;
  Bytef buf[4];
  int v33;
  char v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v14 = *(_QWORD *)(a1 + 264);
  if (*a5)
    v15 = 1;
  else
    v15 = *(_DWORD *)(v14 + 32);
  result = sub_1DB71EB94(a1, 6uLL);
  if ((result & 0x80000000) == 0)
  {
    result = sub_1DB71EB94(a1, a2);
    if ((result & 0x80000000) == 0)
    {
      result = sub_1DB71EB94(a1, v15);
      if ((result & 0x80000000) == 0)
      {
        result = sub_1DB71EB94(a1, 9uLL);
        if ((result & 0x80000000) == 0)
        {
          if (v15 < 2)
          {
            result = sub_1DB71EB94(a1, a3);
            if ((result & 0x80000000) != 0)
              return result;
          }
          else
          {
            for (i = *(_QWORD *)(v14 + 61712); i; i = *(_QWORD *)(i + 24))
            {
              v18 = *(_QWORD *)(i + 48);
              if (!v18)
                break;
              result = sub_1DB71EB94(a1, v18);
              if ((result & 0x80000000) != 0)
                return result;
            }
          }
          result = sub_1DB71EB94(a1, 0);
          if ((result & 0x80000000) == 0)
          {
            result = sub_1DB71EB94(a1, 7uLL);
            if ((result & 0x80000000) == 0)
            {
              result = sub_1DB71EB94(a1, 0xBuLL);
              if ((result & 0x80000000) == 0)
              {
                result = sub_1DB71EB94(a1, v15);
                if ((result & 0x80000000) == 0)
                {
                  result = sub_1DB71EB94(a1, 0);
                  if ((result & 0x80000000) == 0)
                  {
                    if (v15 < 1)
                    {
LABEL_40:
                      result = sub_1DB71EB94(a1, 0xCuLL);
                      if ((result & 0x80000000) != 0)
                        return result;
                      if (v15 < 2)
                      {
                        result = sub_1DB71EB94(a1, a4);
                        if ((result & 0x80000000) != 0)
                          return result;
                      }
                      else
                      {
                        for (j = *(_QWORD *)(v14 + 61712); j; j = *(_QWORD *)(j + 24))
                        {
                          v30 = *(_QWORD *)(j + 48);
                          if (!v30)
                            break;
                          result = sub_1DB71EB94(a1, v30);
                          if ((result & 0x80000000) != 0)
                            return result;
                        }
                      }
                      if (a6)
                      {
                        result = sub_1DB71EB94(a1, 0);
                        if ((result & 0x80000000) != 0)
                          return result;
                        result = sub_1DB71F19C(a1, a5);
                        if ((result & 0x80000000) != 0)
                          return result;
                      }
                      else
                      {
                        result = sub_1DB71EB94(a1, 0xAuLL);
                        if ((result & 0x80000000) != 0)
                          return result;
                        result = sub_1DB71EB94(a1, 1uLL);
                        if ((result & 0x80000000) != 0)
                          return result;
                        *(_DWORD *)buf = a7;
                        result = sub_1DB71E140(a1, buf, 4, 1);
                        if ((result & 0x80000000) != 0)
                          return result;
                        result = sub_1DB71EB94(a1, 0);
                        if ((result & 0x80000000) != 0)
                          return result;
                      }
                      v31 = sub_1DB71EB94(a1, 0);
                      return v31 & (v31 >> 31);
                    }
                    v19 = 0;
                    while (1)
                    {
                      result = sub_1DB71EB94(a1, 1uLL);
                      if ((result & 0x80000000) != 0)
                        break;
                      v20 = *a5;
                      v21 = HIBYTE(*a5);
                      v33 = 0;
                      v34 = v21;
                      v35 = BYTE2(v20);
                      v36 = BYTE1(v20);
                      v37 = v20;
                      v22 = (unsigned __int8 *)&v33;
                      v23 = 9;
                      while (!*v22++)
                      {
                        if ((unint64_t)--v23 <= 1)
                        {
                          v25 = 0;
                          goto LABEL_28;
                        }
                      }
                      v25 = v23 - 1;
LABEL_28:
                      v26 = v25 <= 1 ? 1 : v25;
                      v27 = *((_QWORD *)a5 + 1) ? v26 | 0x20 : v26;
                      result = sub_1DB71EB94(a1, v27);
                      if ((result & 0x80000000) != 0)
                        break;
                      result = sub_1DB71E140(a1, (Bytef *)&v33 - (v26 & 0xF) + 8, v26 & 0xF, 1);
                      if ((result & 0x80000000) != 0)
                        break;
                      v28 = *((_QWORD *)a5 + 1);
                      if (v28)
                      {
                        result = sub_1DB71EB94(a1, v28);
                        if ((result & 0x80000000) != 0)
                          break;
                        result = sub_1DB71E140(a1, *((Bytef **)a5 + 2), *((_QWORD *)a5 + 1), 1);
                        if ((result & 0x80000000) != 0)
                          break;
                      }
                      if (++v19 == v15)
                        goto LABEL_40;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1DB71EF5C(uint64_t a1, unsigned int a2, int a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  Bytef v17;
  Bytef buf[8];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 264);
  v17 = 0;
  v8 = v7 + 8 * a4;
  v11 = *(_QWORD *)(v8 + 64);
  v10 = (_QWORD *)(v8 + 64);
  v9 = v11;
  if (v11 == *(_QWORD *)(v7 + 24))
  {
    result = sub_1DB71EB94(a1, a2);
    if ((result & 0x80000000) != 0)
      return result;
    result = sub_1DB71EB94(a1, (8 * *(_QWORD *)(v7 + 24)) | 2);
    if ((result & 0x80000000) != 0)
      return result;
    result = sub_1DB71EB94(a1, 1uLL);
    if ((result & 0x80000000) != 0)
      return result;
    goto LABEL_5;
  }
  if (!v9)
    return 0;
  result = sub_1DB71EB94(a1, a2);
  if ((result & 0x80000000) == 0)
  {
    result = sub_1DB71EB94(a1, ((unint64_t)(*(_QWORD *)(v7 + 24) + 7) >> 3) + 8 * *v10 + 2);
    if ((result & 0x80000000) == 0)
    {
      result = sub_1DB71EB94(a1, 0);
      if ((result & 0x80000000) == 0)
      {
        v17 = 0;
        v14 = *(_QWORD *)(v7 + 61712);
        if (!v14)
          goto LABEL_5;
        v15 = 0;
        v16 = 128;
        do
        {
          if ((*(_DWORD *)(v14 + 56) & a3) != 0)
          {
            v15 |= v16;
            v17 = v15;
          }
          if (v16 > 1)
          {
            v16 >>= 1;
          }
          else
          {
            result = sub_1DB71E140(a1, &v17, 1, 1);
            if ((result & 0x80000000) != 0)
              return result;
            v15 = 0;
            v17 = 0;
            v16 = 128;
          }
          v14 = *(_QWORD *)(v14 + 24);
        }
        while (v14);
        if (v16 == 128 || (result = sub_1DB71E140(a1, &v17, 1, 1), (result & 0x80000000) == 0))
        {
LABEL_5:
          result = sub_1DB71EB94(a1, 0);
          if ((result & 0x80000000) != 0)
            return result;
          v13 = *(_QWORD *)(v7 + 61712);
          if (v13)
          {
            while (1)
            {
              if ((*(_DWORD *)(v13 + 56) & a3) != 0)
              {
                *(_QWORD *)buf = *(_QWORD *)(v13 + 16 * a4 + 72) / 100
                               + 10000000 * *(_QWORD *)(v13 + 16 * a4 + 64)
                               + 116444736000000000;
                result = sub_1DB71E140(a1, buf, 8, 1);
                if ((result & 0x80000000) != 0)
                  break;
              }
              v13 = *(_QWORD *)(v13 + 24);
              if (!v13)
                return 0;
            }
            return result;
          }
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1DB71F19C(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  int v10;
  Bytef buf[4];

  v4 = *(_QWORD *)(a1 + 264);
  result = sub_1DB71EB94(a1, 8uLL);
  if ((result & 0x80000000) == 0)
  {
    if (*(_QWORD *)(v4 + 32) >= 2uLL && *a2)
    {
      result = sub_1DB71EB94(a1, 0xDuLL);
      if ((result & 0x80000000) != 0)
        return result;
      result = sub_1DB71EB94(a1, *(_QWORD *)(v4 + 32));
      if ((result & 0x80000000) != 0)
        return result;
      result = sub_1DB71EB94(a1, 9uLL);
      if ((result & 0x80000000) != 0)
        return result;
      v6 = (uint64_t *)(v4 + 61712);
      while (1)
      {
        v7 = *v6;
        if (!*v6)
          break;
        v6 = (uint64_t *)(v7 + 24);
        v8 = *(_QWORD *)(v7 + 24);
        if (!v8 || !*(_QWORD *)(v8 + 48))
          break;
        result = sub_1DB71EB94(a1, *(_QWORD *)(v7 + 48));
        if ((result & 0x80000000) != 0)
          return result;
      }
    }
    result = sub_1DB71EB94(a1, 0xAuLL);
    if ((result & 0x80000000) == 0)
    {
      result = sub_1DB71EB94(a1, 1uLL);
      if ((result & 0x80000000) == 0)
      {
        for (i = *(_QWORD *)(v4 + 61712); i; i = *(_QWORD *)(i + 24))
        {
          if (!*(_QWORD *)(i + 48))
            break;
          *(_DWORD *)buf = *(_DWORD *)(i + 116);
          result = sub_1DB71E140(a1, buf, 4, 1);
          if ((result & 0x80000000) != 0)
            return result;
        }
        v10 = sub_1DB71EB94(a1, 0);
        return v10 & (v10 >> 31);
      }
    }
  }
  return result;
}

uint64_t archive_write_set_passphrase(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;

  result = sub_1DB6E0594((int *)a1, -1329217314, 1, "archive_write_set_passphrase", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    if (a2 && *a2)
    {
      free(*(void **)(a1 + 336));
      v16 = strdup(a2);
      *(_QWORD *)(a1 + 336) = v16;
      if (v16)
      {
        return 0;
      }
      else
      {
        archive_set_error((_DWORD *)a1, 12, "Can't allocate data for passphrase", v17, v18, v19, v20, v21, v22);
        return 4294967266;
      }
    }
    else
    {
      archive_set_error((_DWORD *)a1, -1, "Empty passphrase is unacceptable", v11, v12, v13, v14, v15, v22);
      return 4294967271;
    }
  }
  return result;
}

uint64_t archive_write_set_passphrase_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594((int *)a1, -1329217314, 1, "archive_write_set_passphrase_callback", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    result = 0;
    *(_QWORD *)(a1 + 344) = a3;
    *(_QWORD *)(a1 + 352) = a2;
  }
  return result;
}

char *sub_1DB71F3B8(uint64_t a1)
{
  char *result;
  uint64_t (*v3)(uint64_t, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  result = *(char **)(a1 + 336);
  if (!result)
  {
    v3 = *(uint64_t (**)(uint64_t, _QWORD))(a1 + 344);
    if (!v3)
      return 0;
    result = (char *)v3(a1, *(_QWORD *)(a1 + 352));
    if (result)
    {
      result = strdup(result);
      *(_QWORD *)(a1 + 336) = result;
      if (!result)
      {
        archive_set_error((_DWORD *)a1, 12, "Can't allocate data for passphrase", v4, v5, v6, v7, v8, v9);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1DB71F418()
{
  return 4294967276;
}

uint64_t sub_1DB71F420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v10 = **(_QWORD **)(a1 + 2472);
  if (!*(_DWORD *)v10)
  {
    *(_DWORD *)(a1 + 16) = 0x100000;
    *(_QWORD *)(a1 + 24) = "RAR5";
    *(_DWORD *)v10 = 1;
  }
  if (!*(_DWORD *)(v10 + 4))
  {
    v11 = sub_1DB6E26F0(a1, 8, a3, a4, a5, a6, a7, a8);
    result = 1;
    if (v11 != 8)
      return result;
    *(_DWORD *)(v10 + 4) = 1;
  }
  do
  {
    do
      result = sub_1DB7209AC(a1, a2, a3, a4, a5, a6, a7, a8);
    while ((_DWORD)result == -10);
  }
  while (!(_DWORD)result && (*(_BYTE *)(v10 + 44) & 4) != 0);
  return result;
}

uint64_t sub_1DB71F4BC(uint64_t a1, Bytef **a2, size_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  size_t *v9;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  _DWORD *v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  char v19;
  char v20;
  _BYTE *v21;
  int v22;
  uint64_t v23;
  char v24;
  void *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;
  void *v30;
  uint64_t v31;
  _WORD *v32;
  char v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  unsigned __int16 *v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  char *v49;
  size_t v50;
  size_t v51;
  const void *v52;
  size_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  int *v63;
  int v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  _WORD *v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  uint64_t v99;
  int v100;
  unsigned int v101;
  int v102;
  unint64_t v103;
  int v104;
  BOOL v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  char v111;
  uint64_t v112;
  int v113;
  int v114;
  unsigned __int8 v115;
  char v116;
  unsigned __int8 v117;
  int v118;
  int v119;
  uint64_t v120;
  unint64_t v121;
  int v122;
  uint64_t v123;
  unint64_t v124;
  int v125;
  int v126;
  unsigned int v127;
  int v128;
  int v129;
  char v130;
  int v131;
  int v132;
  char *v133;
  unsigned int v134;
  int v135;
  int v136;
  char v137;
  int v138;
  int v139;
  int v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  _DWORD *v145;
  int v146;
  char *v147;
  _DWORD *v148;
  char *v149;
  _DWORD *v150;
  int v151;
  char *v152;
  uint64_t v153;
  size_t v154;
  size_t v155;
  uint64_t v156;
  Bytef *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  char *v168;
  int v169;
  int64_t v170;
  int64_t v171;
  uint64_t v172;
  char v173;
  int64_t v174;
  signed int v175;
  int64_t v176;
  uint64_t v177;
  int64_t v178;
  int v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  int64_t v183;
  unint64_t v184;
  int v185;
  _BOOL4 v187;
  uint64_t v189;
  int v190;
  BOOL v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  int64_t v199;
  char *v200;
  uint64_t v201;
  int64_t v202;
  unint64_t v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  __int16 v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int *v210;
  uint64_t v211;
  _BYTE *v212;
  _BYTE *v213;
  _BYTE *v214;
  char *v215;
  unsigned __int16 *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  int v222;
  unsigned __int16 v223;
  unsigned int v224;
  unsigned __int16 v225;
  _QWORD __dst[38];
  char v227[64];
  char v228[16];
  char v229[50];
  _DWORD v230[5];
  uint64_t v231;

  v8 = a4;
  v9 = a3;
  v231 = *MEMORY[0x1E0C80C00];
  v12 = **(_QWORD **)(a1 + 2472);
  if (a3)
    *a3 = 0;
  v13 = (_BYTE *)(v12 + 19400);
  if ((*(_BYTE *)(v12 + 19400) & 8) != 0)
  {
    archive_set_error((_DWORD *)a1, 79, "Can't decompress an entry marked as a directory", (uint64_t)a4, a5, a6, a7, a8, (char *)v209);
    return 4294967271;
  }
  if (!*(_DWORD *)(v12 + 8) && *(_QWORD *)(v12 + 120) > *(_QWORD *)(v12 + 19376))
  {
    v14 = "Unpacker has written too many bytes";
LABEL_7:
    v15 = (_DWORD *)a1;
    v16 = 22;
    goto LABEL_265;
  }
  v18 = 0;
  v19 = 1;
  do
  {
    v20 = v19;
    v21 = (_BYTE *)(v12 + 32 * v18 + 19304);
    if (*v21)
    {
      if (a2)
        *a2 = *(Bytef **)(v12 + 32 * v18 + 19312);
      if (a3)
        *a3 = *(_QWORD *)(v12 + 32 * v18 + 19320);
      if (a4)
        *a4 = *(_QWORD *)(v12 + 32 * v18 + 19328);
      result = 0;
      *v21 = 0;
      return result;
    }
    v19 = 0;
    v18 = 1;
  }
  while ((v20 & 1) != 0);
  if ((*(_BYTE *)(v12 + 19400) & 4) != 0)
    return 1;
  if ((*(_BYTE *)(v12 + 19400) & 2) != 0)
  {
LABEL_233:
    v153 = *(_QWORD *)(v12 + 19368);
    if (!v153)
    {
      if ((*(_BYTE *)(v12 + 44) & 2) != 0 && (*(_BYTE *)(v12 + 32) & 1) != 0)
      {
        *(_BYTE *)(v12 + 56) |= 4u;
        result = sub_1DB721F64(a1);
        *(_BYTE *)(v12 + 56) &= ~4u;
        if ((_DWORD)result)
          return result;
        v153 = *(_QWORD *)(v12 + 19368);
      }
      else
      {
        v153 = 0;
      }
    }
    if (v153 >= 0x10000)
      v154 = 0x10000;
    else
      v154 = v153;
    if (v154)
    {
      __dst[0] = -1;
      v155 = sub_1DB6E2588(a1, v154, __dst, (uint64_t)a4, a5, a6, a7, a8);
      if (!v155)
      {
        v14 = "I/O error when unstoring file";
        goto LABEL_264;
      }
      v157 = (Bytef *)v155;
      if (sub_1DB6E26F0(a1, v154, v156, (uint64_t)a4, a5, a6, a7, a8) == v154)
      {
        if (a2)
          *a2 = v157;
        if (v9)
          *v9 = v154;
        if (v8)
          *v8 = *(_QWORD *)(v12 + 128);
        *(_QWORD *)(v12 + 19368) -= v154;
        *(_QWORD *)(v12 + 128) += v154;
        sub_1DB721FD0((_DWORD *)v12, v157, v154);
        goto LABEL_250;
      }
    }
    return 1;
  }
  v22 = *(_DWORD *)(v12 + 64);
  if ((v22 - 1) >= 5)
  {
    if (v22)
    {
      v209 = *(unsigned int *)(v12 + 64);
      v14 = "Compression method not supported: 0x%x";
      goto LABEL_264;
    }
    goto LABEL_233;
  }
  while (1)
  {
    v23 = **(_QWORD **)(a1 + 2472);
    v24 = *(_BYTE *)(v23 + 56);
    if ((v24 & 1) == 0)
    {
      v25 = *(void **)(v23 + 80);
      if ((*(_BYTE *)(v23 + 44) & 1) == 0 || !v25)
      {
        *(_DWORD *)(v23 + 19440) = 0;
        v26 = *(_QWORD *)(v23 + 72);
        v27 = v26 != 0;
        v28 = v26 - 1;
        if (!v27)
          v28 = 0;
        *(_QWORD *)(v23 + 104) = v28;
        free(v25);
        free(*(void **)(v23 + 88));
        v29 = *(_QWORD *)(v23 + 72);
        if (v29 < 1)
        {
          v30 = 0;
          *(_QWORD *)(v23 + 80) = 0;
        }
        else
        {
          *(_QWORD *)(v23 + 80) = malloc_type_calloc(1uLL, v29, 0xCA85946DuLL);
          v30 = malloc_type_calloc(1uLL, *(_QWORD *)(v23 + 72), 0xEA96A3F9uLL);
        }
        *(_QWORD *)(v23 + 88) = v30;
        *(_QWORD *)(v23 + 112) = 0;
        *(_QWORD *)(v23 + 120) = 0;
        bzero((void *)(v23 + 156), 0xEECuLL);
        bzero((void *)(v23 + 3976), 0xEECuLL);
        bzero((void *)(v23 + 7796), 0xEECuLL);
        bzero((void *)(v23 + 11616), 0xEECuLL);
        bzero((void *)(v23 + 15436), 0xEECuLL);
        v24 = *(_BYTE *)(v23 + 56);
      }
      v24 |= 1u;
      *(_BYTE *)(v23 + 56) = v24;
    }
    if (!*(_QWORD *)(v23 + 72))
    {
      v14 = "Invalid window size declaration in this file";
      goto LABEL_264;
    }
    v216 = (unsigned __int16 *)(v23 + 19256);
    if ((v24 & 2) != 0)
    {
      v217 = v23;
      do
      {
        v37 = **(_QWORD **)(a1 + 2472);
        if ((*(_BYTE *)(v37 + 44) & 2) != 0 && !*(_QWORD *)(v37 + 19368))
        {
          result = sub_1DB721F64(a1);
          if ((_DWORD)result)
            goto LABEL_213;
        }
        if ((*(_BYTE *)(v37 + 56) & 8) == 0)
        {
          v38 = *(_QWORD *)(v37 + 96);
          goto LABEL_74;
        }
        __dst[0] = -1;
        v39 = (unsigned __int16 *)sub_1DB6E2588(a1, 6uLL, __dst, (uint64_t)a4, a5, a6, a7, a8);
        if (!v39)
          return 1;
        v41 = (char *)(v37 + 21264);
        v42 = *v39;
        *(_WORD *)(v37 + 21288) = v42;
        v43 = (v42 >> 3) & 7;
        if (v43 >= 3)
        {
          v209 = (v42 >> 3) & 7;
          v14 = "Unsupported block header size (was %d, max is 2)";
          goto LABEL_264;
        }
        if ((_DWORD)v43 == 2)
        {
          v44 = *(_DWORD *)(v39 + 1) & 0xFFFFFFLL;
        }
        else if ((_DWORD)v43 == 1)
        {
          v44 = v39[1];
        }
        else
        {
          v44 = *((unsigned __int8 *)v39 + 2);
        }
        if ((v42 ^ BYTE1(v44) ^ BYTE2(v44) ^ v44 ^ 0x5A) != *(unsigned __int8 *)(v37 + 21289))
        {
          v209 = *(unsigned __int8 *)(v37 + 21289);
          v14 = "Block checksum error: got 0x%x, expected 0x%x";
          goto LABEL_264;
        }
        v45 = v43 + 3;
        if (sub_1DB6E26F0(a1, v43 + 3, v40, (uint64_t)a4, a5, a6, a7, a8) != v43 + 3)
          return 1;
        v46 = *(_QWORD *)(v37 + 19368) - v45;
        *(_QWORD *)(v37 + 19368) = v46;
        v218 = v37;
        v215 = (char *)(v37 + 21264);
        if (v44 <= v46)
        {
          *(_BYTE *)(v37 + 56) &= ~4u;
          __dst[0] = -1;
          v38 = sub_1DB6E2588(a1, v44 + 4, __dst, (uint64_t)a4, a5, a6, a7, a8);
          if (v38)
            goto LABEL_73;
          return 1;
        }
        v47 = **(_QWORD **)(a1 + 2472);
        if (*(_DWORD *)(v47 + 12))
        {
          v14 = "Recursive merge is not allowed";
          goto LABEL_7;
        }
        *(_BYTE *)(v47 + 56) |= 4u;
        v48 = *(void **)(v47 + 21280);
        if (v48)
          free(v48);
        v49 = (char *)malloc_type_malloc(v44 + 8, 0x1E3DBFF2uLL);
        *(_QWORD *)(v47 + 21280) = v49;
        if (!v49)
        {
          v14 = "Can't allocate memory for a merge block buffer.";
          goto LABEL_271;
        }
        *(_QWORD *)&v49[v44] = 0;
        if (*(_QWORD *)(v47 + 19368) >= v44)
          v50 = v44;
        else
          v50 = *(_QWORD *)(v47 + 19368);
        if (!v50)
        {
LABEL_259:
          v14 = "Encountered block size == 0 during block merge";
          goto LABEL_264;
        }
        v51 = 0;
        while (1)
        {
          __dst[0] = -1;
          v52 = (const void *)sub_1DB6E2588(a1, v50, __dst, (uint64_t)a4, a5, a6, a7, a8);
          if (!v52)
            return 1;
          v53 = v51 + v50;
          if (v44 < (uint64_t)(v51 + v50))
          {
            v14 = "Consumed too much data when merging blocks.";
            goto LABEL_7;
          }
          memcpy((void *)(*(_QWORD *)(v47 + 21280) + v51), v52, v50);
          if (sub_1DB6E26F0(a1, v50, v54, v55, v56, v57, v58, v59) != v50)
            return 1;
          v60 = *(_QWORD *)(v47 + 19368);
          v61 = v60 - v50;
          *(_QWORD *)(v47 + 19368) = v60 - v50;
          if (v44 == v53)
            break;
          if (v60 == v50)
          {
            ++*(_DWORD *)(v47 + 12);
            result = sub_1DB721F64(a1);
            --*(_DWORD *)(v47 + 12);
            if ((_DWORD)result)
              goto LABEL_212;
            v61 = *(_QWORD *)(v47 + 19368);
          }
          if (v61 >= (uint64_t)(v44 - v53))
            v50 = v44 - v53;
          else
            v50 = v61;
          v51 = v53;
          if (!v50)
            goto LABEL_259;
        }
        v38 = *(_QWORD *)(v47 + 21280);
        v37 = v218;
        v41 = v215;
LABEL_73:
        *(_QWORD *)(v37 + 96) = v38;
        *(_QWORD *)(v37 + 144) = v44;
        *(_BYTE *)(v37 + 56) &= ~8u;
        *((_DWORD *)v41 + 1) = 0;
        *v41 = 0;
        if ((v41[24] & 0x80000000) == 0)
          goto LABEL_74;
        v221 = v38;
        v213 = v13;
        v113 = 0;
        v114 = 0;
        v115 = -16;
        v116 = 4;
        do
        {
          if (v44 <= v114)
          {
            archive_set_error((_DWORD *)a1, 79, "Truncated data in huffman tables", (uint64_t)a4, a5, a6, a7, a8, (char *)v209);
            result = 4294967266;
            v13 = v213;
            goto LABEL_212;
          }
          v117 = v115;
          v118 = (v115 & *(_BYTE *)(v221 + v114)) >> v116;
          if (v115 == 15)
            ++v114;
          if (v118 == 15)
          {
            v119 = (~v115 & *(_BYTE *)(v221 + v114)) >> (v116 ^ 4);
            if ((v115 ^ 0xFF) == 0xF)
              ++v114;
            v120 = v113;
            if (v119)
            {
              v121 = (v119 + 1);
              v122 = 19 - v113;
              if (v121 < 19 - v113)
                v122 = v119 + 1;
              bzero((char *)v230 + v113, (v122 + 1));
              if (v113 <= 19)
                v123 = 19;
              else
                v123 = v113;
              v37 = v218;
              v124 = v123 - v113;
              if (v124 >= v121)
                LODWORD(v124) = v121;
              v113 += v124 + 1;
            }
            else
            {
              ++v113;
              *((_BYTE *)v230 + v120) = 15;
            }
          }
          else
          {
            *((_BYTE *)v230 + v113++) = v118;
            v117 = ~v115;
            v116 ^= 4u;
          }
          v115 = v117;
        }
        while (v113 < 20);
        *((_DWORD *)v215 + 1) = v114;
        *v215 = v116 ^ 4;
        sub_1DB7221A0((char *)v230, v37 + 156, 20);
        v125 = 0;
        v13 = v213;
        v23 = v217;
        v38 = v221;
        while (2)
        {
          LOWORD(v224) = 0;
          if (sub_1DB7223E0(a1, (unsigned int *)(v37 + 156), v38, &v224, a5, a6, a7, a8))
          {
            v148 = (_DWORD *)a1;
            v149 = "Decoding huffman tables failed";
LABEL_204:
            archive_set_error(v148, 79, v149, (uint64_t)a4, a5, a6, a7, a8, (char *)v209);
            result = 4294967266;
            goto LABEL_213;
          }
          v126 = (unsigned __int16)v224;
          if ((unsigned __int16)v224 <= 0xFu)
          {
            *((_BYTE *)__dst + v125++) = v224;
            goto LABEL_196;
          }
          if ((unsigned __int16)v224 > 0x11u)
          {
            v225 = 0;
            result = sub_1DB72250C((_DWORD *)a1, v37, v221, &v225, a5, a6, a7, a8);
            if ((_DWORD)result)
              goto LABEL_213;
            if (v126 == 18)
              v136 = 3;
            else
              v136 = 7;
            v137 = 9;
            if (v126 == 18)
              v137 = 13;
            v138 = v225 >> v137;
            v139 = v136 + *v215;
            *((_DWORD *)v215 + 1) += v139 >> 3;
            *v215 = v139 & 7;
            if (v126 == 18)
              v140 = 2;
            else
              v140 = 10;
            v141 = (v138 + v140);
            v142 = (429 - v125);
            if (v142 >= v141)
              v142 = v141;
            bzero((char *)__dst + v125, v142 + 1);
            if (v125 <= 429)
              v143 = 429;
            else
              v143 = v125;
            v144 = v143 - v125;
            if (v144 >= v141)
              LODWORD(v144) = v141;
            v125 += v144 + 1;
LABEL_196:
            v38 = v221;
          }
          else
          {
            v225 = 0;
            result = sub_1DB72250C((_DWORD *)a1, v37, v221, &v225, a5, a6, a7, a8);
            if ((_DWORD)result)
              goto LABEL_213;
            v127 = v225;
            if (v126 == 16)
              v128 = 3;
            else
              v128 = 11;
            if (v126 == 16)
              v129 = 3;
            else
              v129 = 7;
            v130 = 9;
            if (v126 == 16)
              v130 = 13;
            v131 = v129 + *v215;
            *((_DWORD *)v215 + 1) += v131 >> 3;
            *v215 = v131 & 7;
            if (v125 < 1)
            {
              v148 = (_DWORD *)a1;
              v149 = "Unexpected error when decoding huffman tables";
              goto LABEL_204;
            }
            v132 = (v127 >> v130) + v128;
            v133 = (char *)__dst + v125;
            v134 = v125 - 1;
            v38 = v221;
            do
            {
              v135 = v125;
              *v133++ = *((_BYTE *)__dst + v134);
              ++v125;
              if (v135 > 428)
                break;
              --v132;
              ++v134;
            }
            while ((_WORD)v132);
          }
          if (v125 < 430)
            continue;
          break;
        }
        sub_1DB7221A0((char *)__dst, v37 + 3976, 306);
        sub_1DB7221A0(v227, v37 + 7796, 64);
        sub_1DB7221A0(v228, v37 + 11616, 16);
        sub_1DB7221A0(v229, v37 + 15436, 44);
LABEL_74:
        v62 = **(_QWORD **)(a1 + 2472);
        v223 = 0;
        if (*(_QWORD *)(v62 + 112) - *(_QWORD *)(v62 + 120) > *(uint64_t *)(v62 + 72) >> 1)
          goto LABEL_135;
        v63 = (int *)(v62 + 19288);
        v64 = *(_BYTE *)(v62 + 21288) & 7;
        v65 = *(_QWORD *)(v62 + 104);
        v66 = (unsigned int *)(v62 + 3976);
        v220 = v64;
        v219 = v37;
LABEL_76:
        v67 = *(int *)(v62 + 21268);
        v68 = *(_QWORD *)(v62 + 144);
        if (v68 <= v67 || v68 - 1 == v67 && *(char *)(v62 + 21264) > v64)
        {
          *(_BYTE *)(v62 + 56) |= 8u;
LABEL_135:
          v111 = *(_BYTE *)(v37 + 56);
          if ((v111 & 0xC) != 8)
          {
            v23 = v217;
            if ((*(_BYTE *)(v37 + 56) & 4) != 0)
              *(_BYTE *)(v37 + 56) = v111 & 0xFB;
            continue;
          }
          v112 = *(_QWORD *)(v37 + 144);
          v23 = v217;
          if (v112 < 1)
            continue;
          if (sub_1DB6E26F0(a1, *(_QWORD *)(v37 + 144), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8) == v112)
          {
            *(_QWORD *)(v37 + 19368) -= *(_QWORD *)(v37 + 144);
            continue;
          }
          return 4294967266;
        }
        if (sub_1DB7223E0(a1, v66, v38, &v223, a5, a6, a7, a8))
        {
          result = 1;
          goto LABEL_208;
        }
        v69 = v223;
        if (v223 <= 0xFFuLL)
        {
          v70 = *(_QWORD *)(v62 + 136);
          v71 = *(_QWORD *)(v62 + 112);
          *(_QWORD *)(v62 + 112) = v71 + 1;
          *(_BYTE *)(*(_QWORD *)(v62 + 80) + ((v71 + v70) & v65)) = v69;
          goto LABEL_132;
        }
        if (v223 >= 0x106u)
        {
          v72 = v66;
          LOWORD(v230[0]) = 0;
          v73 = sub_1DB722584((_DWORD *)a1, v62, v38, (unsigned __int16)(v223 - 262), a5, a6, a7, a8);
          if (v73 == -1)
          {
            v145 = (_DWORD *)a1;
            v146 = 22;
            v147 = "Failed to decode the code length";
          }
          else
          {
            v79 = v73;
            if (sub_1DB7223E0(a1, (unsigned int *)(v62 + 7796), v38, v230, v75, v76, v77, v78))
              goto LABEL_202;
            if (LOWORD(v230[0]) <= 3u)
            {
              v80 = LOWORD(v230[0]) + 1;
              goto LABEL_123;
            }
            v97 = LOWORD(v230[0]) >> 1;
            v74 = (v97 - 1);
            v98 = ((v230[0] & 1 | 2) << (v97 - 1)) + 1;
            if (v74 < 4)
            {
              LODWORD(__dst[0]) = 0;
              result = sub_1DB7225F4((_DWORD *)a1, v62, v38, v74, (unsigned int *)__dst, v76, v77, v78);
              if ((_DWORD)result)
                goto LABEL_208;
              v80 = LODWORD(__dst[0]) + v98;
              goto LABEL_122;
            }
            LOWORD(__dst[0]) = 0;
            if (v97 == 5)
              goto LABEL_108;
            v99 = *(int *)(v62 + 21268);
            if (*(_QWORD *)(v62 + 144) <= v99)
            {
              v145 = (_DWORD *)a1;
              v146 = 22;
              v147 = "Premature end of stream during extraction of data (#1)";
            }
            else
            {
              v100 = *(char *)(v62 + 21264);
              v101 = (_byteswap_ulong(*(_DWORD *)(v38 + v99)) << *(_BYTE *)(v62 + 21264)) | (*(unsigned __int8 *)(v99 + v38 + 4) >> (8 - *(_BYTE *)(v62 + 21264)));
              *(_DWORD *)(v62 + 21268) = v99 + ((v97 + v100 - 5) >> 3);
              *(_BYTE *)(v62 + 21264) = (v97 + v100 - 5) & 7;
              v98 += 16 * (v101 >> (37 - v97));
LABEL_108:
              if (sub_1DB7223E0(a1, (unsigned int *)(v62 + 11616), v38, __dst, v75, v76, v77, v78))
              {
LABEL_202:
                v145 = (_DWORD *)a1;
                v146 = 22;
                v147 = "Failed to decode the distance slot";
              }
              else
              {
                if (v98 < 2147483646 - LOWORD(__dst[0]))
                {
                  v80 = v98 + LOWORD(__dst[0]);
LABEL_122:
                  v64 = v220;
LABEL_123:
                  if (v80 <= 0x40000)
                    v108 = 2;
                  else
                    v108 = 3;
                  v109 = v108 + v79;
                  if (v80 <= 0x2000)
                    v109 = v79 + 1;
                  if (v80 >= 257)
                    v110 = v109;
                  else
                    v110 = v79;
                  *(_DWORD *)(v62 + 19300) = *(_DWORD *)(v62 + 19296);
                  *(_QWORD *)(v62 + 19292) = *(_QWORD *)(v62 + 19288);
                  *v63 = v80;
                  *(_DWORD *)(v62 + 152) = v110;
                  v66 = v72;
                  v37 = v219;
                  if (sub_1DB722688(a1, v110, v80))
                    goto LABEL_207;
                  goto LABEL_132;
                }
                v145 = (_DWORD *)a1;
                v146 = 79;
                v147 = "Distance pointer overflow";
              }
            }
          }
          archive_set_error(v145, v146, v147, v74, v75, v76, v77, v78, (char *)v209);
LABEL_207:
          result = 4294967266;
LABEL_208:
          v23 = v217;
          goto LABEL_213;
        }
        if (v223 == 257)
        {
          v102 = *(_DWORD *)(v62 + 152);
          if (v102 && sub_1DB722688(a1, v102, *v63))
            goto LABEL_207;
          goto LABEL_132;
        }
        if (v223 != 256)
        {
          v103 = v223 - 258;
          v104 = v63[v103];
          if (v223 >= 0x103u)
          {
            do
            {
              v105 = v103 > 1;
              v63[v103] = v63[(v103 - 1)];
              --v103;
            }
            while (v105);
          }
          *v63 = v104;
          LOWORD(__dst[0]) = 0;
          if (sub_1DB7223E0(a1, (unsigned int *)(v62 + 15436), v38, __dst, a5, a6, a7, a8))
            goto LABEL_207;
          v106 = sub_1DB722584((_DWORD *)a1, v62, v38, LOWORD(__dst[0]), a5, a6, a7, a8);
          if (v106 == -1)
            goto LABEL_207;
          *(_DWORD *)(v62 + 152) = v106;
          v107 = sub_1DB722688(a1, v106, v104);
          v64 = v220;
          if (v107)
            goto LABEL_207;
          goto LABEL_132;
        }
        v210 = v66;
        v211 = v65;
        LODWORD(__dst[0]) = 0;
        v81 = **(_QWORD **)(a1 + 2472);
        result = sub_1DB7226FC((_DWORD *)a1, v81, v38, __dst, a5, a6, a7, a8);
        if ((_DWORD)result)
          goto LABEL_212;
        v230[0] = 0;
        result = sub_1DB7226FC((_DWORD *)a1, v81, v38, v230, a5, a6, a7, a8);
        if ((_DWORD)result)
          goto LABEL_212;
        v225 = 0;
        result = sub_1DB72250C((_DWORD *)a1, v81, v38, &v225, a5, a6, a7, a8);
        if ((_DWORD)result)
          goto LABEL_212;
        v82 = v38;
        v212 = v13;
        v83 = (__int16)v225;
        v84 = *(char *)(v81 + 21264) + 3;
        *(_DWORD *)(v81 + 21268) += v84 >> 3;
        *(_BYTE *)(v81 + 21264) = v84 & 7;
        v85 = v230[0];
        if ((v230[0] - 4194305) < 0xFFC00003
          || v83 < 0
          || (v86 = LODWORD(__dst[0]), (v87 = *(_QWORD *)(v81 + 19272)) != 0)
          && (v88 = *(_QWORD *)(v81 + 19280)) != 0
          && *(_QWORD *)(v81 + 112) + LODWORD(__dst[0]) < v88 + v87)
        {
          v150 = (_DWORD *)a1;
          v151 = 79;
          v152 = "Invalid filter encountered";
          goto LABEL_211;
        }
        v89 = malloc_type_calloc(1uLL, 0x28uLL, 0x1000040D61A056BuLL);
        if (v89)
        {
          v90 = v89;
          v91 = (_WORD *)(v81 + 19258);
          v92 = *(unsigned __int16 *)(v81 + 19262);
          v93 = *(unsigned __int16 *)(v81 + 19260);
          if (v93 + 1 != v92)
          {
            v94 = (unsigned __int16)*v91;
            *(_QWORD *)(*(_QWORD *)(v81 + 19264) + 8 * v94) = v89;
            *v91 = (v94 + 1) & v93;
            *(_WORD *)(v81 + 19262) = v92 + 1;
          }
          *(_DWORD *)v89 = (unsigned __int16)v83 >> 13;
          v95 = *(_QWORD *)(v81 + 112) + v86;
          v89[2] = v95;
          v89[3] = v85;
          *(_QWORD *)(v81 + 19272) = v95;
          *(_QWORD *)(v81 + 19280) = v85;
          v96 = (unsigned __int16)v83 >> 13;
          v13 = v212;
          v38 = v82;
          if (!v96)
          {
            v224 = 0;
            result = sub_1DB7225F4((_DWORD *)a1, v81, v82, 5, &v224, a6, a7, a8);
            if ((_DWORD)result)
              goto LABEL_212;
            *((_DWORD *)v90 + 1) = v224 + 1;
          }
          v64 = v220;
          v66 = v210;
          v65 = v211;
          v37 = v219;
LABEL_132:
          if (*(_QWORD *)(v62 + 112) - *(_QWORD *)(v62 + 120) > *(uint64_t *)(v62 + 72) >> 1)
            goto LABEL_135;
          goto LABEL_76;
        }
        v150 = (_DWORD *)a1;
        v151 = 12;
        v152 = "Can't allocate memory for a filter descriptor.";
LABEL_211:
        archive_set_error(v150, v151, v152, (uint64_t)a4, a5, a6, a7, a8, (char *)v209);
        result = 4294967266;
        v13 = v212;
LABEL_212:
        v23 = v217;
LABEL_213:
        if ((_DWORD)result == -30 || (_DWORD)result == 1)
          goto LABEL_223;
      }
      while (*(_QWORD *)(v23 + 120) == *(_QWORD *)(v23 + 112));
    }
    v31 = **(_QWORD **)(a1 + 2472);
    v32 = (_WORD *)(v31 + 19256);
    v33 = *(_BYTE *)(v31 + 56);
    *(_BYTE *)(v31 + 56) = v33 & 0xFD;
    if (*(_WORD *)(v31 + 19262))
    {
      v34 = *(unsigned int **)(*(_QWORD *)(v31 + 19264) + 8 * (unsigned __int16)*v32);
      v35 = *(_QWORD *)(v31 + 112);
      a4 = (_QWORD *)*((_QWORD *)v34 + 2);
      if (v35 > (uint64_t)a4 && v35 >= (uint64_t)a4 + *((_QWORD *)v34 + 3))
        break;
    }
    *(_BYTE *)(v31 + 56) = v33 | 2;
    if (v216[3])
    {
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 19264) + 8 * *v216) + 16) >= *(_QWORD *)(v23 + 112))
        v36 = *(_QWORD *)(v23 + 112);
      else
        v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 19264) + 8 * *v216) + 16);
    }
    else
    {
      v36 = *(_QWORD *)(v23 + 112);
    }
    a3 = *(size_t **)(v23 + 120);
    if ((size_t *)v36 != a3)
    {
      sub_1DB7220D8((_DWORD *)a1, (_QWORD *)v23, (uint64_t)a3, v36, a5, a6, a7, a8);
      *(_QWORD *)(v23 + 120) = v36;
      goto LABEL_250;
    }
    result = 4294967286;
LABEL_223:
    if ((_DWORD)result != -10)
      return result;
  }
  v165 = *(_QWORD *)(v31 + 120);
  if ((_QWORD *)v165 != a4)
  {
    sub_1DB7220D8((_DWORD *)a1, (_QWORD *)v31, v165, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_250;
  }
  v166 = *(uint64_t **)(a1 + 2472);
  v167 = *v166;
  free(*(void **)(*v166 + 88));
  v168 = (char *)malloc_type_malloc(*((_QWORD *)v34 + 3), 0x79C5B70CuLL);
  *(_QWORD *)(v167 + 88) = v168;
  if (!v168)
  {
    v14 = "Can't allocate memory for filter data.";
LABEL_271:
    v15 = (_DWORD *)a1;
    v16 = 12;
    goto LABEL_265;
  }
  v214 = v13;
  v222 = *v34;
  if (*v34 - 1 < 2)
  {
    v177 = *((_QWORD *)v34 + 2) + *(_QWORD *)(v167 + 136);
    sub_1DB722894(v168, *(char **)(v167 + 80), *(_QWORD *)(v167 + 104), v177, v177 + *((_QWORD *)v34 + 3));
    v170 = *((_QWORD *)v34 + 3);
    if (v170 < 5)
      goto LABEL_317;
    v178 = 0;
    v179 = v222;
    while (1)
    {
      v180 = *(char **)(v167 + 80);
      v181 = *((_QWORD *)v34 + 2);
      v182 = v181 + *(_QWORD *)(v167 + 136);
      v183 = v178 + 1;
      v184 = *(_QWORD *)(v167 + 104);
      v185 = v180[(v182 + v178) & v184];
      v187 = v179 == 2 && v185 == 233;
      if (v185 != 232 && !v187)
        goto LABEL_310;
      v189 = v181 + v183;
      v190 = v189 & 0xFFFFFF;
      v192 = -v189;
      v191 = v192 < 0;
      v193 = v192 & 0xFFFFFF;
      if (v191)
        LODWORD(v194) = v190;
      else
        v194 = -v193;
      sub_1DB722894((char *)__dst, v180, v184, ((_DWORD)v182 + (_DWORD)v183) & v184, (((_DWORD)v182 + (_DWORD)v183) & v184) + 4);
      v195 = __dst[0];
      if ((__dst[0] & 0x80000000) != 0)
      {
        v179 = v222;
        if (LODWORD(__dst[0]) + (int)v194 >= 0)
        {
          v196 = LODWORD(__dst[0]) + 0x1000000;
          goto LABEL_308;
        }
      }
      else
      {
        v179 = v222;
        if (!HIBYTE(LODWORD(__dst[0])))
        {
          v195 = LODWORD(__dst[0]) - v194;
          v196 = LODWORD(__dst[0]) - v194;
LABEL_308:
          v197 = *(_QWORD *)(v167 + 88) + v183;
          *(_WORD *)v197 = v195;
          *(_BYTE *)(v197 + 2) = BYTE2(v195);
          *(_BYTE *)(v197 + 3) = HIBYTE(v196);
          v170 = *((_QWORD *)v34 + 3);
        }
      }
      v183 = v178 + 5;
LABEL_310:
      v178 = v183;
      if (v183 >= v170 - 4)
        goto LABEL_317;
    }
  }
  if (*v34 == 3)
  {
    v198 = *((_QWORD *)v34 + 2) + *(_QWORD *)(v167 + 136);
    sub_1DB722894(v168, *(char **)(v167 + 80), *(_QWORD *)(v167 + 104), v198, v198 + *((_QWORD *)v34 + 3));
    v170 = *((_QWORD *)v34 + 3);
    if (v170 >= 4)
    {
      v199 = 0;
      do
      {
        v200 = *(char **)(v167 + 80);
        v201 = *((_QWORD *)v34 + 2);
        v202 = v199 + *(_QWORD *)(v167 + 136) + v201;
        v203 = *(_QWORD *)(v167 + 104);
        if (v200[(v202 + 3) & v203] == 235)
        {
          v204 = v199 + v201;
          sub_1DB722894((char *)__dst, v200, v203, v202 & v203, (v202 & v203) + 4);
          v205 = LODWORD(__dst[0]) - v204 / 4;
          v206 = *(_QWORD *)(v167 + 88) + (v199 & 0xFFFFFFFC);
          *(_WORD *)v206 = v205;
          *(_BYTE *)(v206 + 2) = BYTE2(v205);
          *(_BYTE *)(v206 + 3) = -21;
          v170 = *((_QWORD *)v34 + 3);
        }
        v199 += 4;
      }
      while (v199 < v170 - 3);
    }
LABEL_317:
    if (sub_1DB7227E4((_DWORD *)a1, v167, *(Bytef **)(v167 + 88), v170, *(_QWORD *)(v167 + 120), a6, a7, a8))
    {
      v14 = "Stack overflow when submitting unpacked data";
      goto LABEL_7;
    }
    *(_QWORD *)(v167 + 120) += *((_QWORD *)v34 + 3);
    v207 = *(_WORD *)(v31 + 19262);
    if (v207)
    {
      v208 = (unsigned __int16)*v32;
      v34 = *(unsigned int **)(*(_QWORD *)(v31 + 19264) + 8 * v208);
      *v32 = *(_WORD *)(v31 + 19260) & (v208 + 1);
      *(_WORD *)(v31 + 19262) = v207 - 1;
    }
    free(v34);
    v13 = v214;
LABEL_250:
    if (*(_QWORD *)(v12 + 19368) || *(_QWORD *)(v12 + 120) != *(_QWORD *)(v12 + 19376))
      return 0;
    *v13 |= 4u;
    return sub_1DB721E78(a1, v158, v159, v160, v161, v162, v163, v164);
  }
  if (!v222)
  {
    v169 = v34[1];
    v170 = *((_QWORD *)v34 + 3);
    if (v169 >= 1)
    {
      v171 = 0;
      v172 = 0;
      do
      {
        if (v170 <= v171)
        {
          v176 = v169;
        }
        else
        {
          v173 = 0;
          v174 = v171;
          do
          {
            v173 -= *(_BYTE *)(*(_QWORD *)(v167 + 80)
                             + ((v172 + *(_QWORD *)(v167 + 136) + *((_QWORD *)v34 + 2)) & *(_QWORD *)(v167 + 104)));
            *(_BYTE *)(*(_QWORD *)(v167 + 88) + v174) = v173;
            ++v172;
            v175 = v34[1];
            v174 += v175;
            v170 = *((_QWORD *)v34 + 3);
          }
          while (v174 < v170);
          v176 = v175;
          v169 = v34[1];
        }
        ++v171;
      }
      while (v171 < v176);
    }
    goto LABEL_317;
  }
  v209 = *v34;
  v14 = "Unsupported filter type: 0x%x";
LABEL_264:
  v15 = (_DWORD *)a1;
  v16 = 79;
LABEL_265:
  archive_set_error(v15, v16, v14, (uint64_t)a4, a5, a6, a7, a8, (char *)v209);
  return 4294967266;
}

uint64_t sub_1DB7208E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v9 = **(_QWORD **)(a1 + 2472);
  if ((*(_BYTE *)(v9 + 44) & 1) != 0)
  {
    while (*(uint64_t *)(v9 + 19368) >= 1)
    {
      ++*(_DWORD *)(v9 + 8);
      result = sub_1DB71F4BC(a1, 0, 0, 0, a5, a6, a7, a8);
      --*(_DWORD *)(v9 + 8);
      if ((result & 0x80000000) != 0 || (_DWORD)result == 1)
        return result;
    }
    return 0;
  }
  else
  {
    v10 = *(_QWORD *)(v9 + 19368);
    if (sub_1DB6E26F0(a1, v10, a3, a4, a5, a6, a7, a8) == v10)
    {
      result = 0;
      *(_QWORD *)(v9 + 19368) = 0;
    }
    else
    {
      return 4294967266;
    }
  }
  return result;
}

uint64_t sub_1DB720994()
{
  return -30;
}

uint64_t sub_1DB72099C()
{
  return 0;
}

uint64_t sub_1DB7209A4()
{
  return 4294967294;
}

uint64_t sub_1DB7209AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  const Bytef *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;

  v9 = *(uint64_t **)(a1 + 2472);
  v10 = *v9;
  v11 = *(_QWORD *)(*v9 + 19368);
  if (v11)
  {
    if (*(_DWORD *)(v10 + 12))
    {
      if (sub_1DB6E26F0(a1, v11, a3, a4, a5, a6, a7, a8) != v11)
        return 4294967266;
      *(_QWORD *)(v10 + 19368) = 0;
    }
    else
    {
      result = sub_1DB7208E8(a1, a2, a3, a4, a5, a6, a7, a8);
      if ((_DWORD)result)
        return result;
    }
  }
  v44 = 0;
  if (!sub_1DB720C34(a1, &v44, a3, a4, a5, a6, a7, a8))
    return 1;
  v45 = 0;
  v46 = 0;
  if (!sub_1DB7214B8(a1, &v46, &v45, v13, v14, v15, v16, v17))
    return 1;
  v23 = v45;
  v24 = (char *)(v45 + v46);
  if ((unint64_t)(v45 + v46) > 0x200000)
  {
    v25 = "Base block header is too large";
LABEL_25:
    archive_set_error((_DWORD *)a1, 79, v25, v18, v19, v20, v21, v22, v43);
    return 4294967266;
  }
  if (!v46 || !v45 || (unint64_t)v24 <= 2)
  {
    archive_set_error((_DWORD *)a1, 79, "Too small block encountered (%zu bytes)", v18, v19, v20, v21, v22, (char *)v46);
    return 4294967266;
  }
  v46 = -1;
  v26 = (const Bytef *)sub_1DB6E2588(a1, (size_t)v24, &v46, v18, v19, v20, v21, v22);
  if (!v26)
    return 1;
  v27 = crc32(0, v26, (uInt)v24);
  if (v44 != v27)
  {
    v25 = "Header CRC error";
    goto LABEL_25;
  }
  if (sub_1DB6E26F0(a1, v23, v28, v18, v19, v20, v21, v22) != v23)
    return 1;
  v46 = 0;
  if (!sub_1DB7214B8(a1, &v46, 0, v29, v30, v31, v32, v33))
    return 1;
  v39 = v46;
  v46 = 0;
  if (!sub_1DB7214B8(a1, &v46, 0, v34, v35, v36, v37, v38))
    return 1;
  v18 = v46;
  *(_BYTE *)(v10 + 32) = *(_BYTE *)(v10 + 32) & 0xFC | ((v46 & 0x10) != 0) | (v46 >> 2) & 2;
  *(_DWORD *)(v10 + 36) = (_DWORD)v24;
  *(_DWORD *)(v10 + 40) = v39;
  v42 = *(_BYTE *)(v10 + 44);
  *(_BYTE *)(v10 + 44) = v42 & 0xFB;
  result = 1;
  switch(v39)
  {
    case 0:
      return result;
    case 1:
      LODWORD(result) = sub_1DB720C90((_DWORD *)a1, v10, v18, v18, v19, v20, v21, v22);
      if ((_DWORD)result)
        return result;
      else
        return 4294967286;
    case 2:
      return sub_1DB720E88();
    case 3:
      return sub_1DB720E3C(a1, v10);
    case 4:
      v25 = "Encryption is not supported";
      goto LABEL_25;
    case 5:
      *(_BYTE *)(v10 + 44) = v42 | 4;
      if ((v42 & 2) == 0)
        return result;
      sub_1DB721400(a1, v40, v41, v18, v19, v20, v21, v22);
      if (*(_DWORD *)(v10 + 21272) != -1)
      {
        result = 0;
        *(_DWORD *)(v10 + 21272) = *(_DWORD *)(v10 + 48) + 1;
        return result;
      }
      v25 = "Header error";
      goto LABEL_25;
    default:
      if ((v18 & 4) == 0)
      {
        v25 = "Header type error";
        goto LABEL_25;
      }
      result = 4294967286;
      break;
  }
  return result;
}

_DWORD *sub_1DB720C34(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = -1;
  result = (_DWORD *)sub_1DB6E2588(a1, 4uLL, &v17, a4, a5, a6, a7, a8);
  if (result)
  {
    *a2 = *result;
    return (_DWORD *)(sub_1DB6E26F0(a1, 4, v11, v12, v13, v14, v15, v16) == 4);
  }
  return result;
}

uint64_t sub_1DB720C90(_DWORD *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  char *v18;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char *v34;
  char *v35;

  if ((a3 & 1) != 0)
  {
    v35 = 0;
    if (!sub_1DB7214B8((uint64_t)a1, &v35, 0, a4, a5, a6, a7, a8))
      return 1;
    v10 = v35;
  }
  else
  {
    v10 = 0;
  }
  v35 = 0;
  if (!sub_1DB7214B8((uint64_t)a1, &v35, 0, a4, a5, a6, a7, a8))
    return 1;
  v16 = (char)v35;
  *(_BYTE *)(a2 + 44) = *(_BYTE *)(a2 + 44) & 0xFC | (2 * (v35 & 1)) | ((v35 & 4) != 0);
  if ((v16 & 2) != 0)
  {
    v35 = 0;
    if (!sub_1DB7214B8((uint64_t)a1, &v35, 0, v11, v12, v13, v14, v15))
      return 1;
    v17 = (int)v35;
    if ((unint64_t)v35 >> 32)
    {
      v18 = "Invalid volume number";
LABEL_11:
      archive_set_error(a1, 79, v18, v11, v12, v13, v14, v15, v34);
      return 4294967266;
    }
  }
  else
  {
    v17 = 0;
  }
  *(_DWORD *)(a2 + 48) = v17;
  v20 = *(_DWORD *)(a2 + 21272);
  if (v20)
    v21 = v17 == v20;
  else
    v21 = 1;
  if (!v21)
    return 1;
  if (!v10)
    return 0;
  v35 = 0;
  if (!sub_1DB7214B8((uint64_t)a1, &v35, 0, v11, v12, v13, v14, v15))
    return 1;
  v27 = v35;
  v35 = 0;
  if (!sub_1DB7214B8((uint64_t)a1, &v35, 0, v22, v23, v24, v25, v26))
    return 1;
  if (!v27)
  {
    v18 = "Invalid extra field size";
    goto LABEL_11;
  }
  if (v35 != (char *)1)
  {
    archive_set_error(a1, 79, "Unsupported extra type (0x%x)", v11, v12, v13, v14, v15, v35);
    return 4294967266;
  }
  v35 = 0;
  if (sub_1DB7214B8((uint64_t)a1, &v35, 0, v11, v12, v13, v14, v15))
  {
    v33 = (char)v35;
    if ((v35 & 1) != 0)
    {
      if (!sub_1DB7214B8((uint64_t)a1, (_QWORD *)(a2 + 16), 0, v28, v29, v30, v31, v32))
        return 1;
      v33 = (char)v35;
    }
    if ((v33 & 2) == 0 || sub_1DB7214B8((uint64_t)a1, (_QWORD *)(a2 + 24), 0, v28, v29, v30, v31, v32))
      return 0;
  }
  return 1;
}

uint64_t sub_1DB720E3C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1DB720E88();
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a2 + 19400) |= 2u;
    LODWORD(result) = sub_1DB7208E8(a1, v5, v6, v7, v8, v9, v10, v11);
    if ((_DWORD)result)
      return result;
    else
      return 4294967286;
  }
  return result;
}

uint64_t sub_1DB720E88()
{
  uint64_t v0;
  char v1;
  char v2;
  void **v3;
  int8x16_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _DWORD *v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  unsigned int v37;
  int v38;
  char v39;
  size_t v40;
  int v41;
  void *v42;
  void *v43;
  size_t v44;
  __int16 v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  size_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char __s[8192];
  uint64_t v73;

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = (int8x16_t *)v3;
  v6 = v5;
  v7 = v0;
  v73 = *MEMORY[0x1E0C80C00];
  v70 = 0;
  archive_entry_clear(v3);
  if ((*(_BYTE *)(v6 + 56) & 4) == 0)
  {
    bzero((void *)(v6 + 19368), 0x768uLL);
    sub_1DB736FE8(v6 + 19480, 32);
    if ((*(_BYTE *)(v6 + 44) & 1) != 0)
      *(_QWORD *)(v6 + 136) += *(_QWORD *)(v6 + 112);
    else
      *(_QWORD *)(v6 + 136) = 0;
    *(_QWORD *)(v6 + 112) = 0;
    *(_QWORD *)(v6 + 120) = 0;
    *(_QWORD *)(v6 + 128) = 0;
    *(_OWORD *)(v6 + 21240) = 0u;
    sub_1DB6E7B1C(v6);
  }
  v13 = 0;
  v71 = 0;
  if ((v2 & 1) != 0)
  {
    *(_QWORD *)__s = 0;
    if (!sub_1DB7214B8(v7, __s, 0, v8, v9, v10, v11, v12))
      return 1;
    v13 = *(_QWORD *)__s;
  }
  if ((v2 & 2) == 0)
  {
    *(_QWORD *)(v6 + 19368) = 0;
    v14 = "no data found in file/service block";
LABEL_11:
    v15 = (_DWORD *)v7;
    v16 = 79;
LABEL_12:
    archive_set_error(v15, v16, v14, v8, v9, v10, v11, v12, v69);
    return 4294967266;
  }
  *(_QWORD *)__s = 0;
  if (!sub_1DB7214B8(v7, __s, 0, v8, v9, v10, v11, v12))
    return 1;
  *(_QWORD *)(v6 + 19368) = *(_QWORD *)__s;
  *(_QWORD *)__s = 0;
  if (!sub_1DB7214B8(v7, __s, 0, v18, v19, v20, v21, v22))
    return 1;
  v28 = __s[0];
  if (!sub_1DB7214B8(v7, &v71, 0, v23, v24, v25, v26, v27))
    return 1;
  if ((v28 & 8) != 0)
  {
    v14 = "Files with unknown unpacked size are not supported";
    goto LABEL_58;
  }
  v29 = (char *)(v6 + 19400);
  *(_BYTE *)(v6 + 19400) = *(_BYTE *)(v6 + 19400) & 0xF7 | (8 * (v28 & 1));
  *(_QWORD *)__s = 0;
  if (!sub_1DB7214B8(v7, __s, 0, v8, v9, v10, v11, v12))
    return 1;
  v36 = *(_WORD *)__s;
  if ((v28 & 2) != 0 && !sub_1DB720C34(v7, (_DWORD *)&v70 + 1, v30, v31, v32, v33, v34, v35))
    return 1;
  if ((v28 & 4) != 0 && !sub_1DB720C34(v7, &v70, v30, v31, v32, v33, v34, v35))
    return 1;
  *(_QWORD *)__s = 0;
  if (!sub_1DB7214B8(v7, __s, 0, v31, v32, v33, v34, v35))
    return 1;
  v37 = *(_DWORD *)__s;
  v38 = __s[0] & 0x3F;
  v39 = *v29;
  if ((*v29 & 8) != 0)
    v40 = 0;
  else
    v40 = 0x20000 << ((*(_QWORD *)__s >> 10) & 0xF);
  *(_DWORD *)(v6 + 64) = (*(_DWORD *)__s >> 7) & 7;
  *(_DWORD *)(v6 + 68) = v38 + 50;
  v41 = v39 & 0xFE | (v37 >> 6) & 1;
  *v29 = v39 & 0xFE | ((v37 & 0x40) != 0);
  if (((v37 >> 6) & 1) == 0)
  {
    if (v40 <= 0x4000000)
      goto LABEL_28;
LABEL_61:
    v14 = "Declared dictionary size is not supported.";
    goto LABEL_11;
  }
  if (!*(_QWORD *)(v6 + 80))
  {
    v14 = "Declared solid file, but no window buffer initialized yet.";
    goto LABEL_11;
  }
  if (v40 >= 0x4000001)
    goto LABEL_61;
  v55 = *(_QWORD *)(v6 + 21256);
  if (v55 >= 1 && v55 != v40)
  {
    v14 = "Window size for this solid file doesn't match the window size used in previous solid file. ";
    goto LABEL_11;
  }
LABEL_28:
  if (*(_QWORD *)(v6 + 72) < (int64_t)v40)
  {
    v42 = *(void **)(v6 + 80);
    if (v42)
    {
      v43 = malloc_type_realloc(v42, v40, 0xF252ED46uLL);
      if (v43)
      {
        *(_QWORD *)(v6 + 80) = v43;
        LOBYTE(v41) = *v29;
        goto LABEL_32;
      }
      v14 = "Not enough memory when trying to realloc the window buffer.";
LABEL_58:
      v15 = (_DWORD *)v7;
      v16 = 22;
      goto LABEL_12;
    }
  }
LABEL_32:
  *(_QWORD *)(v6 + 72) = v40;
  if ((v41 & 1) != 0 && !*(_QWORD *)(v6 + 21256))
    *(_QWORD *)(v6 + 21256) = v40;
  v44 = v40 - 1;
  if (!v40)
    v44 = 0;
  *(_QWORD *)(v6 + 104) = v44;
  *v29 = v41 & 0xFD;
  *(_QWORD *)__s = 0;
  if (!sub_1DB7214B8(v7, __s, 0, v8, v9, v10, v11, v12))
    return 1;
  if (*(_QWORD *)__s != 1)
  {
    if (*(_QWORD *)__s)
    {
      v69 = *(char **)__s;
      v14 = "Unsupported Host OS: 0x%x";
      goto LABEL_11;
    }
    if ((v36 & 1) != 0)
      v45 = 16749;
    else
      v45 = 16877;
    if ((v36 & 1) != 0)
      v46 = -32476;
    else
      v46 = -32348;
    if ((v36 & 0x10) == 0)
      v45 = v46;
    archive_entry_set_mode((uint64_t)v4, v45);
    if ((v36 & 7) == 0)
      goto LABEL_67;
    v52 = (char *)malloc_type_malloc(0x16uLL, 0x100004077774924uLL);
    if (!v52)
      goto LABEL_67;
    v53 = v52;
    v54 = v52;
    if ((v36 & 1) != 0)
    {
      *(_QWORD *)v52 = 0x2C796C6E6F6472;
      v54 = v52 + 7;
      if ((v36 & 2) == 0)
      {
LABEL_52:
        if ((v36 & 4) == 0)
        {
LABEL_54:
          if (v54 > (_QWORD *)v52)
          {
            *((_BYTE *)v54 - 1) = 0;
            archive_entry_copy_fflags_text(v4, v52);
          }
          free(v53);
          goto LABEL_67;
        }
LABEL_53:
        *v54 = 0x2C6D6574737973;
        v54 = (_QWORD *)((char *)v54 + 7);
        goto LABEL_54;
      }
    }
    else if ((v36 & 2) == 0)
    {
      goto LABEL_52;
    }
    *v54 = 0x2C6E6564646968;
    v54 = (_QWORD *)((char *)v54 + 7);
    if ((v36 & 4) == 0)
      goto LABEL_54;
    goto LABEL_53;
  }
  archive_entry_set_mode((uint64_t)v4, v36);
LABEL_67:
  *(_QWORD *)__s = 0;
  if (!sub_1DB7214B8(v7, __s, 0, v47, v48, v49, v50, v51))
    return 1;
  v61 = *(_QWORD *)__s;
  *(_QWORD *)__s = -1;
  if (!sub_1DB6E2588(v7, v61, __s, v56, v57, v58, v59, v60))
    return 1;
  if (v61 >= 0x800)
  {
    v14 = "Filename is too long";
    goto LABEL_11;
  }
  if (!v61)
  {
    v14 = "No filename specified";
    goto LABEL_11;
  }
  __memcpy_chk();
  __s[v61] = 0;
  if (sub_1DB6E26F0(v7, v61, v62, v63, v64, v65, v66, v67) != v61)
    return 1;
  archive_entry_update_pathname_utf8(v4->i64, __s);
  if (v13 >= 1)
  {
    result = sub_1DB721598();
    if ((_DWORD)result)
      return result;
  }
  v68 = v71;
  *(_QWORD *)(v6 + 19376) = v71;
  if (*(_QWORD *)(v6 + 21240))
  {
    if ((v28 & 2) == 0)
      goto LABEL_79;
LABEL_91:
    archive_entry_set_mtime((uint64_t)v4, HIDWORD(v70), 0);
    if ((v28 & 4) == 0)
      goto LABEL_81;
    goto LABEL_80;
  }
  archive_entry_set_size((uint64_t)v4, v68);
  if ((v28 & 2) != 0)
    goto LABEL_91;
LABEL_79:
  if ((v28 & 4) != 0)
LABEL_80:
    *(_DWORD *)(v6 + 19436) = v70;
LABEL_81:
  if ((*(_BYTE *)(v6 + 56) & 4) == 0)
    *(_BYTE *)(v6 + 56) = *(_BYTE *)(v6 + 56) & 0xF4 | 0xA;
  return (*(unsigned __int8 *)(v6 + 32) << 30 >> 31) & 0xFFFFFFF6;
}

size_t sub_1DB721400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  size_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = a1;
  v19 = *MEMORY[0x1E0C80C00];
  v18 = 0x1071A21726152;
  v17 = -1;
LABEL_2:
  result = sub_1DB6E2588(a1, 0x200uLL, &v17, a4, a5, a6, a7, a8);
  if (result)
  {
    v16 = 8;
    while (*(_QWORD *)(result + v16 - 8) != v18)
    {
      if (++v16 == 512)
      {
        sub_1DB6E26F0(v8, 512, v10, v11, v12, v13, v14, v15);
        v17 = -1;
        a1 = v8;
        goto LABEL_2;
      }
    }
    return sub_1DB6E26F0(v8, v16, v10, v11, v12, v13, v14, v15);
  }
  return result;
}

size_t sub_1DB7214B8(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = -1;
  result = sub_1DB6E2588(a1, 8uLL, &v22, a4, a5, a6, a7, a8);
  if (result)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    while (1)
    {
      v20 += (unint64_t)(*(_BYTE *)(result + v18) & 0x7F) << v19;
      if ((*(_BYTE *)(result + v18) & 0x80) == 0)
        break;
      ++v18;
      v19 += 7;
      if (v18 == 8)
      {
        if (a2)
          *a2 = v20;
        if (a3)
        {
          *a3 = 9;
          return 1;
        }
        return sub_1DB6E26F0(a1, 9, v12, v13, v14, v15, v16, v17) == 9;
      }
    }
    if (a2)
      *a2 = v20;
    v21 = v18 + 1;
    if (a3)
    {
      *a3 = v21;
      return 1;
    }
    return sub_1DB6E26F0(a1, v21, v12, v13, v14, v15, v16, v17) - 1 == v18;
  }
  return result;
}

uint64_t sub_1DB721598()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  _DWORD *v43;
  int v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  size_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  size_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  size_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _OWORD *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  char *v99;
  _OWORD *v100;
  _BYTE *v101;
  _DWORD *v102;
  uint64_t *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109[3];
  char __s[8];
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  v0 = MEMORY[0x1E0C80A78]();
  v113 = *MEMORY[0x1E0C80C00];
  if (v3 < 1)
    return 4294967266;
  v8 = v3;
  v9 = v1;
  v10 = v0;
  v11 = (_QWORD *)(v2 + 21240);
  v104 = (_QWORD *)(v2 + 21248);
  v103 = (uint64_t *)(v2 + 19408);
  v12 = (uint64_t *)(v2 + 19416);
  v13 = (uint64_t *)(v2 + 19424);
  v102 = (_DWORD *)(v2 + 19432);
  v101 = (_BYTE *)(v2 + 21232);
  v100 = (_OWORD *)(v2 + 19444);
  while (1)
  {
    *(_QWORD *)__s = 0;
    v109[0] = 0;
    if (!sub_1DB7214B8(v10, __s, (uint64_t *)v109, v3, v4, v5, v6, v7))
      return 1;
    v20 = v109[0];
    if ((char *)sub_1DB6E26F0(v10, (uint64_t)v109[0], v14, v15, v16, v17, v18, v19) != v20)
      return 1;
    *(_QWORD *)__s = 0;
    v109[0] = 0;
    if (!sub_1DB7214B8(v10, __s, (uint64_t *)v109, v21, v22, v23, v24, v25))
      return 1;
    v32 = *(char **)__s;
    v33 = v109[0];
    v8 -= (uint64_t)&v20[(unint64_t)v109[0]];
    v105 = v8;
    if ((char *)sub_1DB6E26F0(v10, (uint64_t)v109[0], v26, v27, v28, v29, v30, v31) != v33)
      return 1;
    switch((unint64_t)v32)
    {
      case 2uLL:
        *(_QWORD *)__s = 0;
        v109[0] = 0;
        if (!sub_1DB7214B8(v10, __s, (uint64_t *)v109, v35, v36, v37, v38, v39))
          goto LABEL_75;
        v41 = *(char **)__s;
        v42 = v109[0];
        v8 -= (uint64_t)v109[0];
        v105 = v8;
        if ((char *)sub_1DB6E26F0(v10, (uint64_t)v109[0], v40, v3, v4, v5, v6, v7) != v42)
          goto LABEL_75;
        if (v41)
        {
          v99 = v41;
          v43 = (_DWORD *)v10;
          v44 = 79;
          v45 = "Unsupported hash type (0x%x)";
          goto LABEL_12;
        }
        *(_QWORD *)__s = -1;
        v88 = (_OWORD *)sub_1DB6E2588(v10, 0x20uLL, __s, v3, v4, v5, v6, v7);
        v46 = 1;
        if (!v88)
          goto LABEL_76;
        *v101 = 1;
        v90 = v88[1];
        *v100 = *v88;
        v100[1] = v90;
        if (sub_1DB6E26F0(v10, 32, v89, v3, v4, v5, v6, v7) != 32)
          goto LABEL_76;
        v46 = 0;
        v8 -= 32;
        goto LABEL_68;
      case 3uLL:
        *(_QWORD *)__s = 0;
        v109[0] = 0;
        if (!sub_1DB7214B8(v10, __s, (uint64_t *)v109, v35, v36, v37, v38, v39))
          goto LABEL_75;
        v48 = __s[0];
        v49 = v109[0];
        v8 -= (uint64_t)v109[0];
        v105 = v8;
        if ((char *)sub_1DB6E26F0(v10, (uint64_t)v109[0], v47, v3, v4, v5, v6, v7) != v49)
          goto LABEL_75;
        if ((v48 & 2) != 0)
        {
          sub_1DB721DAC(v10, v48 & 1, v103, &v105, v4, v5, v6, v7);
          archive_entry_set_mtime((uint64_t)v9, *v103, 0);
          if ((v48 & 4) == 0)
          {
LABEL_17:
            if ((v48 & 8) == 0)
              goto LABEL_18;
            goto LABEL_44;
          }
        }
        else if ((v48 & 4) == 0)
        {
          goto LABEL_17;
        }
        sub_1DB721DAC(v10, v48 & 1, v12, &v105, v4, v5, v6, v7);
        archive_entry_set_ctime((uint64_t)v9, *v12, 0);
        if ((v48 & 8) == 0)
        {
LABEL_18:
          if ((v48 & 0x10) == 0)
            goto LABEL_19;
          goto LABEL_45;
        }
LABEL_44:
        sub_1DB721DAC(v10, v48 & 1, v13, &v105, v4, v5, v6, v7);
        archive_entry_set_atime((uint64_t)v9, *v13, 0);
        if ((v48 & 0x10) == 0)
        {
LABEL_19:
          v46 = 0;
          v8 = v105;
          goto LABEL_76;
        }
LABEL_45:
        v69 = sub_1DB720C34(v10, v102, v50, v3, v4, v5, v6, v7);
        v8 = v105;
        if (!v69)
          goto LABEL_75;
        v46 = 0;
        v8 = v105 - 4;
LABEL_68:
        v105 = v8;
        goto LABEL_76;
      case 4uLL:
        *(_QWORD *)__s = 0;
        v109[0] = 0;
        if (!sub_1DB7214B8(v10, __s, (uint64_t *)v109, v35, v36, v37, v38, v39))
          goto LABEL_75;
        v52 = v109[0];
        v8 -= (uint64_t)v109[0];
        v105 = v8;
        if ((char *)sub_1DB6E26F0(v10, (uint64_t)v109[0], v51, v3, v4, v5, v6, v7) != v52)
          goto LABEL_75;
        *(_QWORD *)__s = 0;
        v109[0] = 0;
        if (!sub_1DB7214B8(v10, __s, (uint64_t *)v109, v3, v4, v5, v6, v7))
          goto LABEL_75;
        v54 = *(char **)__s;
        v55 = v109[0];
        v8 -= (uint64_t)v109[0];
        v105 = v8;
        if ((char *)sub_1DB6E26F0(v10, (uint64_t)v109[0], v53, v3, v4, v5, v6, v7) != v55)
          goto LABEL_75;
        v56 = archive_entry_pathname_utf8(v9);
        if (v56)
        {
          v58 = (_BYTE *)v56;
          *(_QWORD *)__s = 0;
          v111 = 0;
          v112 = 0;
          memset(v109, 0, sizeof(v109));
          sub_1DB7303C0((void **)__s, ";%zu", v57, v3, v4, v5, v6, v7, v54);
          sub_1DB72CE50((uint64_t *)v109, v58);
          sub_1DB72CE50((uint64_t *)v109, *(_BYTE **)__s);
          archive_entry_update_pathname_utf8(v9, v109[0]);
          sub_1DB6E7C3C((uint64_t)__s);
          sub_1DB6E7C3C((uint64_t)v109);
          goto LABEL_83;
        }
        v43 = (_DWORD *)v10;
        v44 = 22;
        v45 = "Version entry without file name";
        goto LABEL_12;
      case 5uLL:
        v109[0] = 0;
        if (!sub_1DB7214B8(v10, v11, (uint64_t *)v109, v35, v36, v37, v38, v39))
          goto LABEL_75;
        v60 = v109[0];
        if ((char *)sub_1DB6E26F0(v10, (uint64_t)v109[0], v59, v3, v4, v5, v6, v7) != v60)
          goto LABEL_75;
        v8 -= (uint64_t)v109[0];
        v105 = v8;
        if (!sub_1DB7214B8(v10, v104, (uint64_t *)v109, v3, v4, v5, v6, v7))
          goto LABEL_75;
        v62 = v109[0];
        if ((char *)sub_1DB6E26F0(v10, (uint64_t)v109[0], v61, v3, v4, v5, v6, v7) != v62)
          goto LABEL_75;
        v8 -= (uint64_t)v109[0];
        v105 = v8;
        *(_QWORD *)__s = 0;
        if (!sub_1DB7214B8(v10, __s, 0, v3, v4, v5, v6, v7))
          goto LABEL_75;
        v63 = *(_QWORD *)__s;
        v8 += ~*(_QWORD *)__s;
        v105 = v8;
        *(_QWORD *)__s = -1;
        if (!sub_1DB6E2588(v10, v63, __s, v3, v4, v5, v6, v7))
          goto LABEL_75;
        if (v63 >= 0x800)
        {
          v43 = (_DWORD *)v10;
          v44 = 79;
          v45 = "Link target is too long";
LABEL_12:
          archive_set_error(v43, v44, v45, v3, v4, v5, v6, v7, v99);
          v46 = 4294967266;
          goto LABEL_76;
        }
        if (!v63)
        {
          v43 = (_DWORD *)v10;
          v44 = 79;
          v45 = "No link target specified";
          goto LABEL_12;
        }
        __memcpy_chk();
        __s[v63] = 0;
        if (sub_1DB6E26F0(v10, v63, v91, v92, v93, v94, v95, v96) == v63)
        {
          if ((unint64_t)(*v11 - 1) >= 2)
          {
            if (*v11 == 4)
            {
              archive_entry_set_filetype((uint64_t)v9, 0x8000);
              archive_entry_update_hardlink_utf8((uint64_t)v9, __s);
            }
          }
          else
          {
            archive_entry_set_filetype((uint64_t)v9, 40960);
            archive_entry_update_symlink_utf8((uint64_t)v9, __s);
            if ((*(_BYTE *)v104 & 1) != 0)
              v97 = 2;
            else
              v97 = 1;
            archive_entry_set_symlink_type((uint64_t)v9, v97);
          }
LABEL_83:
          v46 = 0;
        }
        else
        {
LABEL_75:
          v46 = 1;
        }
LABEL_76:
        if (v8 <= 0)
          return v46;
        break;
      case 6uLL:
        v107 = 0;
        v108 = 0;
        v106 = 0;
        if (!sub_1DB7214B8(v10, &v108, &v107, v35, v36, v37, v38, v39))
          goto LABEL_75;
        v65 = v107;
        if (sub_1DB6E26F0(v10, v107, v64, v3, v4, v5, v6, v7) != v65)
          goto LABEL_75;
        v8 -= v107;
        v105 = v8;
        v66 = v108;
        if ((v108 & 1) != 0)
        {
          *(_QWORD *)__s = 0;
          if (!sub_1DB7214B8(v10, __s, 0, v3, v4, v5, v6, v7))
            goto LABEL_75;
          v70 = *(_QWORD *)__s;
          v8 += ~*(_QWORD *)__s;
          v105 = v8;
          *(_QWORD *)__s = -1;
          if (!sub_1DB6E2588(v10, v70, __s, v3, v4, v5, v6, v7))
            goto LABEL_75;
          v71 = v70 >= 0xFF ? 255 : v70;
          __memcpy_chk();
          __s[v71] = 0;
          if (sub_1DB6E26F0(v10, v70, v72, v73, v74, v75, v76, v77) != v70)
            goto LABEL_75;
          archive_entry_set_uname((uint64_t)v9, __s);
          v66 = v108;
          if ((v108 & 2) == 0)
          {
LABEL_38:
            if ((v66 & 4) == 0)
              goto LABEL_61;
LABEL_39:
            if (!sub_1DB7214B8(v10, &v106, &v107, v3, v4, v5, v6, v7))
              goto LABEL_75;
            v68 = v107;
            if (sub_1DB6E26F0(v10, v107, v67, v3, v4, v5, v6, v7) != v68)
              goto LABEL_75;
            v8 -= v107;
            v105 = v8;
            archive_entry_set_uid((uint64_t)v9, v106);
            v66 = v108;
            goto LABEL_61;
          }
        }
        else if ((v108 & 2) == 0)
        {
          goto LABEL_38;
        }
        v109[0] = 0;
        if (!sub_1DB7214B8(v10, v109, 0, v3, v4, v5, v6, v7))
          goto LABEL_75;
        v78 = (size_t)v109[0];
        v8 += ~(uint64_t)v109[0];
        v105 = v8;
        v109[0] = (char *)-1;
        if (!sub_1DB6E2588(v10, v78, v109, v3, v4, v5, v6, v7))
          goto LABEL_75;
        v79 = v78 >= 0xFF ? 255 : v78;
        __memcpy_chk();
        __s[v79] = 0;
        if (sub_1DB6E26F0(v10, v78, v80, v81, v82, v83, v84, v85) != v78)
          goto LABEL_75;
        archive_entry_set_gname((uint64_t)v9, __s);
        v66 = v108;
        if ((v108 & 4) != 0)
          goto LABEL_39;
LABEL_61:
        if ((v66 & 8) == 0)
          goto LABEL_83;
        if (sub_1DB7214B8(v10, &v106, &v107, v3, v4, v5, v6, v7))
        {
          v87 = v107;
          if (sub_1DB6E26F0(v10, v107, v86, v3, v4, v5, v6, v7) == v87)
          {
            v8 -= v107;
            v105 = v8;
            archive_entry_set_gid((uint64_t)v9, v106);
            goto LABEL_83;
          }
        }
        goto LABEL_75;
      default:
        if (sub_1DB6E26F0(v10, v8, v34, v35, v36, v37, v38, v39) == v8)
          return 0;
        else
          return 4294967266;
    }
  }
}

unint64_t *sub_1DB721DAC(uint64_t a1, int a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;

  if (a2)
  {
    v19 = 0;
    result = (unint64_t *)sub_1DB720C34(a1, &v19, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if ((_DWORD)result)
    {
      *a4 -= 4;
      *a3 = v19;
    }
  }
  else
  {
    v20 = -1;
    result = (unint64_t *)sub_1DB6E2588(a1, 8uLL, &v20, (uint64_t)a4, a5, a6, a7, a8);
    if (result)
    {
      v18 = *result;
      result = (unint64_t *)sub_1DB6E26F0(a1, 8, v12, v13, v14, v15, v16, v17);
      if (result == (unint64_t *)8)
      {
        *a3 = v18 / 0x989680 - 0x2B6109100;
        *a4 -= 8;
      }
    }
  }
  return result;
}

uint64_t sub_1DB721E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v11;
  int v12;
  BOOL v13;
  BOOL v14;
  char *v16;
  char *v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x1E0C80C00];
  v8 = **(_QWORD **)(a1 + 2472);
  if (*(_DWORD *)(v8 + 8))
    return 0;
  v11 = (_QWORD *)(v8 + 19436);
  v12 = *(_DWORD *)(v8 + 19436);
  if (v12 && *(_DWORD *)(v8 + 19440) != v12)
  {
    v16 = "Checksum error: CRC32";
  }
  else
  {
    if (*(char *)(v8 + 21232) < 1)
      return 0;
    sub_1DB737280(v8 + 19480, v18, 0x20uLL);
    v13 = v11[1] == v18[0] && v11[2] == v18[1];
    v14 = v13 && v11[3] == v18[2];
    if (v14 && v11[4] == v18[3])
      return 0;
    v16 = "Checksum error: BLAKE2";
  }
  archive_set_error((_DWORD *)a1, 79, v16, a4, a5, a6, a7, a8, v17);
  return 4294967266;
}

uint64_t sub_1DB721F64(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t result;

  v2 = **(_QWORD **)(a1 + 2472);
  do
  {
    v3 = *(_BYTE *)(v2 + 44);
    if ((v3 & 4) != 0)
      goto LABEL_7;
    result = sub_1DB722054(a1);
  }
  while ((_DWORD)result == -10);
  if ((_DWORD)result != -30 && (_DWORD)result != -25)
  {
    v3 = *(_BYTE *)(v2 + 44);
    if ((v3 & 4) != 0)
    {
LABEL_7:
      *(_BYTE *)(v2 + 44) = v3 & 0xFB;
      do
        result = sub_1DB722054(a1);
      while ((_DWORD)result == -10);
    }
  }
  return result;
}

_DWORD *sub_1DB721FD0(_DWORD *result, Bytef *__src, unint64_t len)
{
  _DWORD *v5;
  _DWORD *v6;

  if (!result[2])
  {
    v5 = result;
    v6 = result + 4859;
    if (result[4859])
    {
      result = (_DWORD *)crc32(result[4860], __src, len);
      v6[1] = (_DWORD)result;
    }
    if (*((char *)v6 + 1796) >= 1)
      return (_DWORD *)sub_1DB737168((uint64_t)(v5 + 4870), (char *)__src, len);
  }
  return result;
}

uint64_t sub_1DB722054(uint64_t a1)
{
  int v1;
  uint64_t v2;
  void **v3;
  unsigned int v4;

  v1 = a1;
  v2 = **(_QWORD **)(a1 + 2472);
  v3 = (void **)archive_entry_new();
  v4 = sub_1DB7209AC(v1);
  archive_entry_free(v3);
  if (v4 == -30)
    return 4294967266;
  if (*(_DWORD *)(v2 + 40) == 2 && (*(_BYTE *)(v2 + 32) & 2) != 0)
    return 0;
  if (v4)
    return v4;
  return 4294967286;
}

uint64_t sub_1DB7220D8(_DWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Bytef *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  uint64_t v25;
  Bytef *v26;

  v10 = (Bytef *)a2[10];
  v11 = a2[13];
  v12 = a2[17];
  v13 = a2[15];
  v14 = (v13 + v12) & v11;
  v15 = v12 + a3;
  v16 = v12 + a4;
  v17 = (v12 + a3) & v11;
  v18 = v16 & v11;
  if (v17 <= (v16 & v11))
  {
    v26 = &v10[v14];
    v25 = v16 - v15;
    result = sub_1DB7227E4(a1, (uint64_t)a2, v26, (v16 - v15) & v11, v13, a6, a7, a8);
    v24 = a2[15];
  }
  else
  {
    v19 = a2[9] - v17;
    sub_1DB7227E4(a1, (uint64_t)a2, &v10[v14], v19, v13, a6, a7, a8);
    result = sub_1DB7227E4(a1, (uint64_t)a2, v10, v18, a2[15] + v19, v20, v21, v22);
    v24 = v19 + v18;
    v25 = a2[15];
  }
  a2[15] = v24 + v25;
  return result;
}

_DWORD *sub_1DB7221A0(char *a1, uint64_t a2, int a3)
{
  int v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  _DWORD *result;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  _BOOL4 v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  int v32;
  _OWORD v33[4];
  _OWORD v34[4];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  memset(v34, 0, sizeof(v34));
  bzero((void *)(a2 + 3208), 0x264uLL);
  *(_DWORD *)a2 = a3;
  if (a3 == 306)
    v6 = 10;
  else
    v6 = 7;
  *(_DWORD *)(a2 + 132) = v6;
  if (a3 >= 1)
  {
    v7 = a3;
    v8 = a1;
    do
    {
      v9 = *v8++;
      ++*((_DWORD *)v34 + (v9 & 0xF));
      --v7;
    }
    while (v7);
  }
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  *(_DWORD *)(a2 + 68) = 0;
  *(_DWORD *)(a2 + 4) = 0;
  v14 = 15;
  do
  {
    v12 += v11;
    v11 = *(_DWORD *)((char *)v34 + v10 + 4);
    v15 = v11 + v13;
    result = (_DWORD *)(a2 + 72 + v10);
    *(result - 16) = v15 << v14;
    *result = v12;
    v13 = 2 * v15;
    v10 += 4;
    --v14;
  }
  while (v14);
  v17 = *(_OWORD *)(a2 + 84);
  v33[0] = *(_OWORD *)(a2 + 68);
  v33[1] = v17;
  v18 = *(_OWORD *)(a2 + 116);
  v33[2] = *(_OWORD *)(a2 + 100);
  v33[3] = v18;
  if (a3 >= 1)
  {
    v19 = 0;
    do
    {
      v20 = a1[v19] & 0xF;
      if ((a1[v19] & 0xF) != 0)
      {
        v21 = *((int *)v33 + v20);
        *(_WORD *)(a2 + 2 * v21 + 3208) = v19;
        *((_DWORD *)v33 + v20) = v21 + 1;
      }
      ++v19;
    }
    while (a3 != v19);
  }
  v22 = *(_DWORD *)(a2 + 132);
  if (v22 != 63)
  {
    v23 = 0;
    v24 = 1;
    v25 = 1 << v22;
    v26 = 16 - v22;
    if (v25 <= 1)
      v25 = 1;
    do
    {
      v27 = (_DWORD)v23 << v26;
      if (v24 > 15)
      {
        v28 = 0;
      }
      else if (v27 >= *(_DWORD *)(a2 + 4 * v24 + 4))
      {
        while (1)
        {
          v29 = v24;
          if (v24 == 15)
            break;
          v30 = *(_DWORD *)(a2 + 8 + 4 * v24++);
          if (v27 < v30)
            goto LABEL_25;
        }
        v24 = 16;
LABEL_25:
        v28 = v29 < 15;
      }
      else
      {
        v28 = 1;
      }
      v31 = 0;
      *(_BYTE *)(a2 + v23 + 136) = v24;
      if (v28)
      {
        v32 = ((v27 - *(_DWORD *)(a2 + 4 * v24)) >> (16 - v24)) + *(_DWORD *)(a2 + 4 * (v24 & 0xF) + 68);
        if (v32 < a3)
          v31 = *(_WORD *)(a2 + 2 * v32 + 3208);
      }
      *(_WORD *)(a2 + 2 * v23++ + 1160) = v31;
    }
    while (v23 != v25);
  }
  return result;
}

uint64_t sub_1DB7223E0(uint64_t a1, unsigned int *a2, uint64_t a3, _WORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _WORD *v17;
  int v18;
  unsigned int v19;
  __int16 v20;

  v20 = 0;
  v10 = **(_QWORD **)(a1 + 2472);
  result = sub_1DB72250C((_DWORD *)a1, v10, a3, &v20, a5, a6, a7, a8);
  if (!(_DWORD)result)
  {
    v12 = (_BYTE *)(v10 + 21264);
    v13 = v20 & 0xFFFE;
    v14 = a2[33];
    if ((int)a2[v14 + 1] <= v13)
    {
      while (1)
      {
        LODWORD(v14) = v14 + 1;
        if ((int)v14 > 14)
          break;
        if ((int)a2[(int)v14 + 1] > v13)
          goto LABEL_8;
      }
      LODWORD(v14) = 15;
LABEL_8:
      v18 = v14 + (char)*v12;
      *(_DWORD *)(v10 + 21268) += v18 >> 3;
      *v12 = v18 & 7;
      v19 = ((int)(v13 - a2[(int)v14]) >> (16 - v14)) + a2[(int)v14 + 17];
      if (v19 >= *a2)
        v19 = 0;
      v17 = (_WORD *)a2 + v19 + 1604;
    }
    else
    {
      v15 = v13 >> (16 - v14);
      v16 = (char)*v12 + *((unsigned __int8 *)a2 + v15 + 136);
      *(_DWORD *)(v10 + 21268) += v16 >> 3;
      *v12 = v16 & 7;
      v17 = (_WORD *)a2 + v15 + 580;
    }
    result = 0;
    *a4 = *v17;
  }
  return result;
}

uint64_t sub_1DB72250C(_DWORD *a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t result;
  char *vars0;

  v8 = *(int *)(a2 + 21268);
  if (*(_QWORD *)(a2 + 144) <= v8)
  {
    archive_set_error(a1, 22, "Premature end of stream during extraction of data (#2)", (uint64_t)a4, a5, a6, a7, a8, vars0);
    return 4294967266;
  }
  else
  {
    result = 0;
    *a4 = ((*(unsigned __int8 *)(a3 + v8) << 16) | (*(unsigned __int8 *)(v8 + a3 + 1) << 8) | *(unsigned __int8 *)(a3 + v8 + 2)) >> (8 - *(_BYTE *)(a2 + 21264));
  }
  return result;
}

uint64_t sub_1DB722584(_DWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v10;
  unsigned int v11;

  v8 = a4;
  if (a4 <= 7)
    return a4 + 2;
  v10 = (a4 >> 2) - 1;
  v11 = 0;
  if (sub_1DB7225F4(a1, a2, a3, v10, &v11, a6, a7, a8))
    return 0xFFFFFFFFLL;
  else
    return ((v8 & 3 | 4) << v10) + v11 + 2;
}

uint64_t sub_1DB7225F4(_DWORD *a1, uint64_t a2, uint64_t a3, int a4, unsigned int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unsigned int v14;
  int v15;
  unsigned __int16 v16;
  uint64_t v17;
  uint64_t v18;

  if (a4 > 16)
    return 4294967266;
  v17 = v8;
  v18 = v9;
  v16 = 0;
  result = sub_1DB72250C(a1, a2, a3, &v16, (uint64_t)a5, a6, a7, a8);
  if (!(_DWORD)result)
  {
    v14 = v16;
    v15 = *(char *)(a2 + 21264) + a4;
    *(_DWORD *)(a2 + 21268) += v15 >> 3;
    *(_BYTE *)(a2 + 21264) = v15 & 7;
    result = 0;
    if (a5)
      *a5 = v14 >> (16 - a4);
  }
  return result;
}

uint64_t sub_1DB722688(uint64_t a1, int a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = **(_QWORD ***)(a1 + 2472);
  if (!v3[10])
    return 4294967266;
  v4 = v3[14];
  if (a2 >= 1)
  {
    v5 = v3[13];
    v6 = a2;
    v7 = v3[17] + v4;
    do
    {
      *(_BYTE *)(v3[10] + (v7 & v5)) = *(_BYTE *)(v3[10] + ((v7 - a3) & v5));
      ++v7;
      --v6;
    }
    while (v6);
    v4 = v3[14];
  }
  result = 0;
  v3[14] = v4 + a2;
  return result;
}

uint64_t sub_1DB7226FC(_DWORD *a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  signed int v20;
  _BYTE *v21;
  int v22;
  __int16 v23;
  signed int v24;

  v24 = 0;
  result = sub_1DB7225F4(a1, a2, a3, 2, (unsigned int *)&v24, a6, a7, a8);
  if (!(_DWORD)result)
  {
    v17 = v24++;
    if ((v17 & 0x80000000) != 0)
    {
      v19 = 0;
LABEL_8:
      result = 0;
      *a4 = v19;
    }
    else
    {
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = (_BYTE *)(a2 + 21264);
      while (1)
      {
        v23 = 0;
        result = sub_1DB72250C(a1, a2, a3, &v23, v13, v14, v15, v16);
        if ((_DWORD)result)
          break;
        v19 += HIBYTE(v23) << v18;
        v22 = (char)*v21;
        *(_DWORD *)(a2 + 21268) += (v22 + 8) >> 3;
        *v21 = v22 & 7;
        ++v20;
        v18 += 8;
        if (v20 >= v24)
          goto LABEL_8;
      }
    }
  }
  return result;
}

uint64_t sub_1DB7227E4(_DWORD *a1, uint64_t a2, Bytef *__src, unint64_t len, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  char *v13;
  char *vars0;

  if (*(_DWORD *)(a2 + 8))
    return 0;
  if (*(_QWORD *)(a2 + 19392) + *(_QWORD *)(a2 + 19384) == a5)
  {
    v9 = 0;
    v10 = 1;
    while (1)
    {
      v11 = v10;
      v12 = a2 + 32 * v9;
      if (!*(_BYTE *)(v12 + 19304))
        break;
      v10 = 0;
      v9 = 1;
      if ((v11 & 1) == 0)
      {
        v13 = "Error: premature end of data_ready stack";
        goto LABEL_9;
      }
    }
    *(_BYTE *)(v12 + 19304) = 1;
    *(_QWORD *)(v12 + 19312) = __src;
    *(_QWORD *)(v12 + 19320) = len;
    *(_QWORD *)(v12 + 19328) = a5;
    *(_QWORD *)(a2 + 19384) = a5;
    *(_QWORD *)(a2 + 19392) = len;
    sub_1DB721FD0((_DWORD *)a2, __src, len);
    return 0;
  }
  v13 = "Sanity check error: output stream is not continuous";
LABEL_9:
  archive_set_error(a1, 22, v13, len, a5, a6, a7, a8, vars0);
  return 4294967266;
}

void *sub_1DB722894(char *__dst, char *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  char *v10;
  size_t v11;

  v6 = __dst;
  v7 = a4 & a3;
  v8 = a5 & a3;
  if ((a4 & a3) <= (a5 & a3))
  {
    v10 = &a2[v7];
    v11 = a5 - a4;
  }
  else
  {
    v9 = a3 - v7 + 1;
    memcpy(__dst, &a2[v7], v9);
    __dst = &v6[v9];
    v10 = a2;
    v11 = v8;
  }
  return memcpy(__dst, v10, v11);
}

uint64_t archive_write_set_format_option(int *a1, char *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1DB6EB4EC(a1, a2, a3, a4, 2965749982, "archive_write_set_format_option", (uint64_t (*)(int *, char *, unint64_t, unint64_t))sub_1DB72291C, a8);
}

uint64_t sub_1DB72291C(uint64_t a1, char *__s1, uint64_t a3, uint64_t a4)
{
  const char *v4;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(const char **)(a1 + 272);
  if (v4)
  {
    if (!__s1 || !strcmp(__s1, v4))
    {
      v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 288);
      if (v9)
        return v9(a1, a3, a4);
      else
        return 4294967276;
    }
    else
    {
      return 4294967275;
    }
  }
  else if (__s1)
  {
    return 4294967275;
  }
  else
  {
    return 4294967271;
  }
}

uint64_t archive_write_set_filter_option(int *a1, char *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1DB6EB4EC(a1, a2, a3, a4, 2965749982, "archive_write_set_filter_option", (uint64_t (*)(int *, char *, unint64_t, unint64_t))sub_1DB7229C4, a8);
}

uint64_t sub_1DB7229C4(uint64_t a1, char *__s2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)(a1 + 248);
  if (v5)
  {
    v8 = -20;
    while (1)
    {
      v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
      if (v9)
      {
        if (__s2)
        {
          v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
          if (!strcmp(*(const char **)(v5 + 72), __s2))
            return v12(v5, a3, a4);
        }
        else
        {
          result = v9(v5, a3, a4);
          if ((_DWORD)result == -30)
            return result;
          if (!(_DWORD)result)
            v8 = 0;
        }
      }
      v5 = *(_QWORD *)(v5 + 16);
      if (!v5)
        goto LABEL_13;
    }
  }
  v8 = -20;
LABEL_13:
  if (v8 != -20 || __s2 == 0)
    return v8;
  else
    return 4294967275;
}

uint64_t archive_write_set_option(int *a1, char *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1DB6EB4EC(a1, a2, a3, a4, 2965749982, "archive_write_set_option", (uint64_t (*)(int *, char *, unint64_t, unint64_t))sub_1DB722AB4, a8);
}

uint64_t sub_1DB722AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1DB6EB62C(a1, a2, a3, a4, (uint64_t (*)(void))sub_1DB72291C, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1DB7229C4);
}

uint64_t archive_write_set_options(int *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1DB6EB6C4(a1, a2, -1329217314, "archive_write_set_options", (uint64_t (*)(int *, char *, char *, const char *))sub_1DB722AB4, a6, a7, a8);
}

__n128 sub_1DB722AE4(uint64_t a1)
{
  unint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  int v8;
  int v9;
  __n128 result;

  v1 = 0;
  v2 = 0;
  *(_QWORD *)(a1 + 64) = 0;
  do
  {
    if (v1 <= 0xB)
      v3 = (v1 >> 2) + 1;
    else
      v3 = 4;
    do
    {
      v4 = a1 + v2++;
      *(_BYTE *)(v4 + 146) = v1;
      --v3;
    }
    while (v3);
    *(_BYTE *)(a1 + v1++ + 108) = v2;
  }
  while (v1 != 38);
  v5 = 0;
  *(_WORD *)(a1 + 684) = 512;
  *(_QWORD *)(a1 + 686) = 0x404040404040404;
  *(_BYTE *)(a1 + 694) = 4;
  *(_QWORD *)&v6 = 0x606060606060606;
  *((_QWORD *)&v6 + 1) = 0x606060606060606;
  *(_OWORD *)(a1 + 919) = v6;
  *(_QWORD *)(a1 + 932) = 0x606060606060606;
  *(_OWORD *)(a1 + 695) = v6;
  *(_OWORD *)(a1 + 711) = v6;
  *(_OWORD *)(a1 + 727) = v6;
  *(_OWORD *)(a1 + 743) = v6;
  *(_OWORD *)(a1 + 759) = v6;
  *(_OWORD *)(a1 + 775) = v6;
  *(_OWORD *)(a1 + 791) = v6;
  *(_OWORD *)(a1 + 807) = v6;
  *(_OWORD *)(a1 + 823) = v6;
  *(_OWORD *)(a1 + 839) = v6;
  *(_OWORD *)(a1 + 855) = v6;
  *(_OWORD *)(a1 + 871) = v6;
  *(_OWORD *)(a1 + 887) = v6;
  *(_OWORD *)(a1 + 903) = v6;
  do
  {
    *(_BYTE *)(a1 + 428 + v5) = v5;
    ++v5;
  }
  while (v5 != 3);
  v7 = 0;
  v8 = 1;
  v9 = 3;
  do
  {
    *(_BYTE *)(a1 + 431 + v7) = v9;
    if (!--v8)
      v8 = v9++ - 1;
    ++v7;
  }
  while (v7 != 253);
  *(_OWORD *)(a1 + 972) = 0u;
  *(_OWORD *)(a1 + 988) = 0u;
  *(_OWORD *)(a1 + 940) = 0u;
  *(_OWORD *)(a1 + 956) = 0u;
  result.n128_u64[0] = 0x808080808080808;
  result.n128_u64[1] = 0x808080808080808;
  *(__n128 *)(a1 + 1004) = result;
  *(__n128 *)(a1 + 1020) = result;
  *(__n128 *)(a1 + 1036) = result;
  *(__n128 *)(a1 + 1052) = result;
  *(__n128 *)(a1 + 1068) = result;
  *(__n128 *)(a1 + 1084) = result;
  *(__n128 *)(a1 + 1100) = result;
  *(__n128 *)(a1 + 1116) = result;
  *(__n128 *)(a1 + 1132) = result;
  *(__n128 *)(a1 + 1148) = result;
  *(__n128 *)(a1 + 1164) = result;
  *(__n128 *)(a1 + 1180) = result;
  return result;
}

uint64_t sub_1DB722C00(uint64_t a1, unsigned int a2)
{
  void *v4;
  uint64_t result;

  v4 = *(void **)(a1 + 64);
  if (v4 && *(_DWORD *)(a1 + 52) == a2)
    return 1;
  if (a2 < 0xC)
    return 0;
  free(v4);
  *(_DWORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 104) = 4 - (a2 & 3);
  result = (uint64_t)malloc_type_malloc((a2 & 0xFFFFFFFC) + 16, 0x34B7385FuLL);
  *(_QWORD *)(a1 + 64) = result;
  if (result)
  {
    *(_DWORD *)(a1 + 52) = a2;
    return 1;
  }
  return result;
}

uint64_t sub_1DB722C84(uint64_t a1, int a2)
{
  uint64_t result;

  *(_DWORD *)(a1 + 36) = a2;
  result = sub_1DB723760(a1);
  *(_DWORD *)(a1 + 1196) = 1074200576;
  return result;
}

_QWORD *sub_1DB722CB0(_QWORD *result)
{
  *result = sub_1DB7238D8;
  result[1] = sub_1DB7238F4;
  result[2] = sub_1DB723908;
  return result;
}

_QWORD *sub_1DB722CD4(_QWORD *result)
{
  *result = sub_1DB7238D8;
  result[1] = sub_1DB7239D4;
  result[2] = sub_1DB7239F0;
  return result;
}

BOOL sub_1DB722CF8(uint64_t a1)
{
  return !(*(unsigned int (**)(void))(*(_QWORD *)(a1 + 40) + 8))() && sub_1DB723A60(a1);
}

BOOL sub_1DB722D38(uint64_t a1)
{
  _BOOL8 result;

  result = sub_1DB723A60(a1);
  if (result)
  {
    *(_DWORD *)(a1 + 36) = 0x8000;
    return 1;
  }
  return result;
}

uint64_t sub_1DB722D68(unsigned __int16 **a1, uint64_t a2)
{
  unsigned __int16 *v2;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  _WORD *v10;
  int v11;
  int v12;
  int v13;
  __int128 v14;
  unsigned __int16 *v15;
  __int128 i;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned __int16 *v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned __int8 *v24;
  int v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  unsigned __int16 *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  __int128 v42;
  int v43;
  uint64_t v44;
  unsigned __int16 *v45;
  uint64_t v46;
  unsigned __int16 **v47;
  uint64_t v48;
  unsigned __int16 *v49;
  unsigned __int16 *v50;
  unsigned int v51;
  char v52;
  uint64_t v53;
  unsigned int v54;
  _OWORD v55[128];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v2 = a1[8];
  if (!v2)
    return 0xFFFFFFFFLL;
  v5 = (uint64_t)*a1;
  if (**a1 == 1)
  {
    v6 = *(unsigned __int8 *)(v5 + 3);
    v7 = *((_DWORD *)a1 + 8);
    v8 = *((unsigned __int8 *)a1 + *(unsigned __int16 *)((char *)v2 + *(unsigned int *)(v5 + 8)) + 683);
    v9 = *((unsigned __int8 *)a1 + *(unsigned __int8 *)a1[2] + 940);
    *((_DWORD *)a1 + 10) = v9;
    v10 = (_WORD *)&(&a1[16 * v6])[8 * (*((_DWORD *)a1 + 11) >> 31) + 167]
        + 2 * *((unsigned __int8 *)a1 + *(unsigned __int8 *)(v5 + 2) + 940)
        + v7
        + v9
        + v8;
    v11 = (*(uint64_t (**)(uint64_t, _QWORD))(a2 + 16))(a2, (unsigned __int16)*v10);
    v12 = (unsigned __int16)*v10;
    if (!v11)
    {
      *v10 = v12 - ((v12 + 32) >> 7) + 128;
      v45 = *a1 + 1;
      v36 = *(unsigned __int8 *)v45;
      a1[2] = v45;
      *((_BYTE *)v45 + 1) += (~*((unsigned __int8 *)v45 + 1) & 0x80u) >> 7;
      *((_DWORD *)a1 + 8) = 1;
      ++*((_DWORD *)a1 + 11);
      sub_1DB723FA0((unsigned __int8 *)a1);
      return v36;
    }
    v53 = a2;
    v13 = v12 - ((v12 + 32) >> 7);
    *v10 = v13;
    *((_DWORD *)a1 + 7) = byte_1DB74D094[(unsigned __int16)v13 >> 10];
    *(_QWORD *)&v14 = -1;
    *((_QWORD *)&v14 + 1) = -1;
    v56 = v14;
    v57 = v14;
    v58 = v14;
    v59 = v14;
    v60 = v14;
    v61 = v14;
    v62 = v14;
    v63 = v14;
    v64 = v14;
    v65 = v14;
    v66 = v14;
    v67 = v14;
    v68 = v14;
    v69 = v14;
    v70 = v14;
    v71 = v14;
    v15 = *a1;
    *((_BYTE *)&v56 + *((unsigned __int8 *)*a1 + 2)) = 0;
    *((_DWORD *)a1 + 8) = 0;
  }
  else
  {
    v33 = (unsigned __int16 *)((char *)v2 + *(unsigned int *)(v5 + 4));
    v34 = (*(uint64_t (**)(uint64_t, _QWORD))a2)(a2, *(unsigned __int16 *)(v5 + 2));
    v35 = *((unsigned __int8 *)v33 + 1);
    if (v34 < v35)
    {
      (*(void (**)(uint64_t, _QWORD))(a2 + 8))(a2, 0);
      a1[2] = v33;
      v36 = *(unsigned __int8 *)v33;
      sub_1DB723ABC(a1);
      return v36;
    }
    *((_DWORD *)a1 + 8) = 0;
    v38 = **a1 - 1;
    do
    {
      v39 = *((unsigned __int8 *)v33 + 7);
      v33 += 3;
      v40 = (v35 + v39);
      if (v40 > v34)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 8))(a2, v35, v39);
        a1[2] = v33;
        v36 = *(unsigned __int8 *)v33;
        sub_1DB723B28((unsigned __int8 *)a1);
        return v36;
      }
      v35 = (v35 + v39);
      --v38;
    }
    while (v38);
    v41 = (*a1)[1];
    if (v34 >= v41)
      return 4294967294;
    *((_DWORD *)a1 + 10) = *((unsigned __int8 *)a1 + *(unsigned __int8 *)a1[2] + 940);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(a2 + 8))(a2, v40, v41 - v40);
    *(_QWORD *)&v42 = -1;
    *((_QWORD *)&v42 + 1) = -1;
    v71 = v42;
    v70 = v42;
    v69 = v42;
    v68 = v42;
    v67 = v42;
    v66 = v42;
    v65 = v42;
    v64 = v42;
    v63 = v42;
    v62 = v42;
    v61 = v42;
    v60 = v42;
    v59 = v42;
    v58 = v42;
    v57 = v42;
    v56 = v42;
    v15 = *a1;
    v43 = **a1 - 1;
    *((_BYTE *)&v56 + *(unsigned __int8 *)v33) = 0;
    v44 = 0x7FFFFFFFFFFFFFFDLL;
    do
    {
      *((_BYTE *)&v56 + LOBYTE(v33[v44])) = 0;
      v44 -= 3;
      --v43;
    }
    while (v43);
    v53 = a2;
  }
  for (i = 0uLL; ; i = 0uLL)
  {
    v55[30] = i;
    v55[31] = i;
    v55[28] = i;
    v55[29] = i;
    v55[26] = i;
    v55[27] = i;
    v55[24] = i;
    v55[25] = i;
    v55[22] = i;
    v55[23] = i;
    v55[20] = i;
    v55[21] = i;
    v55[18] = i;
    v55[19] = i;
    v55[16] = i;
    v55[17] = i;
    v55[14] = i;
    v55[15] = i;
    v55[12] = i;
    v55[13] = i;
    v55[10] = i;
    v55[11] = i;
    v55[8] = i;
    v55[9] = i;
    v55[6] = i;
    v55[7] = i;
    v55[4] = i;
    v55[5] = i;
    v55[2] = i;
    v55[3] = i;
    v55[0] = i;
    v55[1] = i;
    v54 = 0;
    v17 = *v15;
    v18 = *((_DWORD *)a1 + 6);
    do
    {
      v19 = *((unsigned int *)v15 + 2);
      if (!(_DWORD)v19)
      {
        *((_DWORD *)a1 + 6) = v18 + 1;
        return 0xFFFFFFFFLL;
      }
      v20 = a1[8];
      v15 = (unsigned __int16 *)((char *)v20 + v19);
      *a1 = v15;
      v21 = *v15;
      ++v18;
    }
    while (v21 == v17);
    LODWORD(v22) = 0;
    v23 = 0;
    *((_DWORD *)a1 + 6) = v18;
    v24 = (unsigned __int8 *)v20 + *((unsigned int *)v15 + 1);
    do
    {
      v25 = *((char *)&v56 + *v24);
      v22 = (v24[1] & v25) + v22;
      *((_QWORD *)v55 + v23) = v24;
      v23 -= v25;
      v24 += 6;
    }
    while (v23 != v21 - v17);
    v26 = sub_1DB723BB8((unsigned int *)a1, v17, (int *)&v54);
    v27 = v54;
    v28 = v54 + v22;
    v29 = (*(uint64_t (**)(uint64_t, _QWORD))v53)(v53, v54 + v22);
    if (v29 < v22)
      break;
    if (v29 >= v28)
      return 4294967294;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 8))(v53, v22, v27);
    *(_WORD *)v26 += v28;
    v30 = v17 - v21;
    v31 = 8 * (~v17 + v21);
    do
    {
      *((_BYTE *)&v56 + **(unsigned __int8 **)((char *)v55 + v31)) = 0;
      v31 -= 8;
    }
    while (!__CFADD__(v30++, 1));
    v15 = *a1;
  }
  v46 = 0;
  v47 = (unsigned __int16 **)v55;
  do
  {
    v48 = v46;
    v50 = *v47++;
    v49 = v50;
    v46 = v46 + *((unsigned __int8 *)v50 + 1);
  }
  while (v46 <= v29);
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v53, v48);
  v51 = *((unsigned __int8 *)v26 + 2);
  if (v51 <= 6)
  {
    v52 = *((_BYTE *)v26 + 3) - 1;
    *((_BYTE *)v26 + 3) = v52;
    if (!v52)
    {
      *(_WORD *)v26 *= 2;
      *((_BYTE *)v26 + 2) = v51 + 1;
      *((_BYTE *)v26 + 3) = 3 << v51;
    }
  }
  a1[2] = v49;
  v36 = *(unsigned __int8 *)v49;
  sub_1DB723C58(a1);
  return v36;
}

uint64_t sub_1DB723260(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = -1;
  *(_BYTE *)(result + 12) = 0;
  *(_QWORD *)(result + 16) = 1;
  return result;
}

_QWORD *sub_1DB72327C(_QWORD *a1)
{
  int v2;
  _QWORD *result;

  v2 = 5;
  do
  {
    result = sub_1DB7249B4(a1);
    --v2;
  }
  while (v2);
  return result;
}

unsigned __int8 *sub_1DB7232AC(unsigned __int8 *result, uint64_t a2, int a3)
{
  unsigned __int8 *v5;
  _WORD *v6;
  int v7;
  uint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned __int8 *v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int16 *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  __int128 v32;
  unsigned __int16 *v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned __int8 *v41;
  uint64_t v42;
  unsigned __int8 v43;
  __int16 v44;
  int v45;
  unsigned __int16 *v46;
  unsigned __int8 *v47;
  unsigned int v48;
  int v49;
  int v50;
  unsigned int v51;
  char v52;
  int v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;

  v5 = result;
  v70 = *MEMORY[0x1E0C80C00];
  v6 = *(_WORD **)result;
  v7 = **(unsigned __int16 **)result - 1;
  if (**(_WORD **)result == 1)
  {
    v9 = v6 + 1;
    v8 = *((unsigned __int8 *)v6 + 2);
    v10 = *((unsigned __int8 *)v6 + 3);
    v11 = *((_DWORD *)result + 8);
    v12 = result[**((unsigned __int8 **)result + 2) + 940];
    v13 = result[*(unsigned __int16 *)(*((_QWORD *)result + 8) + *((unsigned int *)v6 + 2)) + 683];
    *((_DWORD *)result + 10) = v12;
    v14 = v11 + v12 + v13 + 2 * result[v8 + 940];
    v15 = *((_DWORD *)result + 11);
    v16 = &result[128 * v10 + 2672 + 64 * (v15 >> 31) + 2 * v14];
    v17 = *(unsigned __int16 *)v16;
    v18 = *(_DWORD *)(a2 + 8);
    v19 = (v18 >> 14) * v17;
    if ((_DWORD)v8 == a3)
    {
      *(_DWORD *)(a2 + 8) = v19;
      if (!HIBYTE(v19))
      {
        do
        {
          *(_DWORD *)(a2 + 8) = v19 << 8;
          sub_1DB7249B4((_QWORD *)a2);
          v19 = *(_DWORD *)(a2 + 8);
        }
        while (!HIBYTE(v19));
        v17 = *(unsigned __int16 *)v16;
        LODWORD(v10) = *((unsigned __int8 *)v6 + 3);
        v15 = *((_DWORD *)v5 + 11);
      }
      *(_WORD *)v16 = v17 - ((v17 + 32) >> 7) + 128;
      *((_QWORD *)v5 + 2) = v9;
      *((_BYTE *)v6 + 3) = v10 + ((~(_DWORD)v10 & 0x80u) >> 7);
      *((_DWORD *)v5 + 8) = 1;
      *((_DWORD *)v5 + 11) = v15 + 1;
      result = sub_1DB723FA0(v5);
    }
    else
    {
      *(_QWORD *)a2 += v19;
      v21 = v18 - v19;
      *(_DWORD *)(a2 + 8) = v18 - v19;
      if ((v18 - v19) >> 24)
      {
        v22 = v8;
      }
      else
      {
        do
        {
          *(_DWORD *)(a2 + 8) = v21 << 8;
          result = (unsigned __int8 *)sub_1DB7249B4((_QWORD *)a2);
          v21 = *(_DWORD *)(a2 + 8);
        }
        while (!HIBYTE(v21));
        v17 = *(unsigned __int16 *)v16;
        v22 = *(unsigned __int8 *)v9;
      }
      v30 = v17 - ((v17 + 32) >> 7);
      *(_WORD *)v16 = v30;
      v31 = byte_1DB74D094[(unsigned __int16)v30 >> 10];
      *(_QWORD *)&v32 = -1;
      *((_QWORD *)&v32 + 1) = -1;
      v54 = v32;
      v55 = v32;
      v56 = v32;
      v57 = v32;
      v58 = v32;
      v59 = v32;
      v60 = v32;
      v61 = v32;
      v62 = v32;
      v63 = v32;
      v64 = v32;
      v65 = v32;
      v66 = v32;
      v67 = v32;
      v68 = v32;
      v69 = v32;
      *((_BYTE *)&v54 + v22) = 0;
      *(_QWORD *)(v5 + 28) = v31;
    }
    if ((_DWORD)v8 == a3)
      return result;
  }
  else
  {
    v20 = (unsigned __int16 *)(*((_QWORD *)result + 8) + *((unsigned int *)v6 + 1));
    if (*(unsigned __int8 *)v20 == a3)
    {
      sub_1DB724A38((_QWORD *)a2, 0, *((unsigned __int8 *)v20 + 1), (unsigned __int16)v6[1]);
      *((_QWORD *)v5 + 2) = v20;
      return sub_1DB723ABC(v5);
    }
    *((_DWORD *)result + 8) = 0;
    v23 = *((unsigned __int8 *)v20 + 1);
    v24 = v7;
    do
    {
      v26 = *((unsigned __int8 *)v20 + 6);
      v20 += 3;
      v25 = v26;
      v27 = *((unsigned __int8 *)v20 + 1);
      if (v26 == a3)
      {
        sub_1DB724A38((_QWORD *)a2, v23, v27, (unsigned __int16)v6[1]);
        *((_QWORD *)v5 + 2) = v20;
        return sub_1DB723B28(v5);
      }
      v23 += v27;
      --v24;
    }
    while (v24);
    *((_DWORD *)result + 10) = result[**((unsigned __int8 **)result + 2) + 940];
    *(_QWORD *)&v28 = -1;
    *((_QWORD *)&v28 + 1) = -1;
    v54 = v28;
    v55 = v28;
    v56 = v28;
    v57 = v28;
    v58 = v28;
    v59 = v28;
    v60 = v28;
    v61 = v28;
    v62 = v28;
    v63 = v28;
    v64 = v28;
    v65 = v28;
    v66 = v28;
    v67 = v28;
    v68 = v28;
    v69 = v28;
    *((_BYTE *)&v54 + v25) = 0;
    v29 = 0x7FFFFFFFFFFFFFFDLL;
    do
    {
      *((_BYTE *)&v54 + LOBYTE(v20[v29])) = 0;
      v29 -= 3;
      --v7;
    }
    while (v7);
    result = (unsigned __int8 *)sub_1DB724A38((_QWORD *)a2, v23, (unsigned __int16)v6[1] - v23, (unsigned __int16)v6[1]);
  }
LABEL_22:
  v53 = 0;
  v33 = *(unsigned __int16 **)v5;
  v34 = **(unsigned __int16 **)v5;
  v35 = *((_DWORD *)v5 + 6);
  do
  {
    v36 = *((unsigned int *)v33 + 2);
    if (!(_DWORD)v36)
    {
      *((_DWORD *)v5 + 6) = v35 + 1;
      return result;
    }
    v33 = (unsigned __int16 *)(*((_QWORD *)v5 + 8) + v36);
    *(_QWORD *)v5 = v33;
    ++v35;
  }
  while (*v33 == v34);
  *((_DWORD *)v5 + 6) = v35;
  v37 = sub_1DB723BB8((unsigned int *)v5, v34, &v53);
  v38 = 0;
  v39 = **(unsigned __int16 **)v5;
  v40 = v53;
  v41 = (unsigned __int8 *)(*((_QWORD *)v5 + 8) + *(unsigned int *)(*(_QWORD *)v5 + 4) + 1);
  while (1)
  {
    v42 = *(v41 - 1);
    if ((_DWORD)v42 == a3)
      break;
    v43 = *v41;
    v41 += 6;
    v38 += (*((_BYTE *)&v54 + v42) & v43);
    *((_BYTE *)&v54 + v42) = 0;
    if (!--v39)
    {
      v44 = v40 + v38;
      result = (unsigned __int8 *)sub_1DB724A38((_QWORD *)a2, v38, v40, v40 + v38);
      *(_WORD *)v37 += v44;
      goto LABEL_22;
    }
  }
  v45 = 0;
  v46 = (unsigned __int16 *)(v41 - 1);
  v47 = v41;
  v48 = v38;
  do
  {
    v49 = *((unsigned __int8 *)&v54 + *(v47 - 1));
    v50 = *v47;
    v47 += 6;
    v48 += v49 & v50;
    ++v45;
  }
  while (v39 != v45);
  sub_1DB724A38((_QWORD *)a2, v38, *v41, v40 + v48);
  v51 = *((unsigned __int8 *)v37 + 2);
  if (v51 <= 6)
  {
    v52 = *((_BYTE *)v37 + 3) - 1;
    *((_BYTE *)v37 + 3) = v52;
    if (!v52)
    {
      *(_WORD *)v37 *= 2;
      *((_BYTE *)v37 + 2) = v51 + 1;
      *((_BYTE *)v37 + 3) = 3 << v51;
    }
  }
  *((_QWORD *)v5 + 2) = v46;
  return sub_1DB723C58(v5);
}

uint64_t sub_1DB723760(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t i;
  uint64_t j;
  uint64_t v20;

  v1 = 0;
  *(_QWORD *)(result + 420) = 0;
  *(_OWORD *)(result + 388) = 0u;
  *(_OWORD *)(result + 404) = 0u;
  *(_OWORD *)(result + 356) = 0u;
  *(_OWORD *)(result + 372) = 0u;
  *(_OWORD *)(result + 324) = 0u;
  *(_OWORD *)(result + 340) = 0u;
  *(_OWORD *)(result + 292) = 0u;
  *(_OWORD *)(result + 308) = 0u;
  *(_OWORD *)(result + 276) = 0u;
  v2 = *(_QWORD *)(result + 64);
  v3 = *(unsigned int *)(result + 104);
  v4 = *(unsigned int *)(result + 52);
  v5 = v2 + v3 + v4;
  v6 = 84 * (v4 / 0x60);
  v7 = v5 - v6;
  *(_QWORD *)(result + 88) = v2 + v3;
  *(_QWORD *)(result + 96) = v5 - v6;
  *(_DWORD *)(result + 56) = 0;
  v8 = *(_DWORD *)(result + 36);
  *(_DWORD *)(result + 24) = v8;
  if (v8 >= 0xC)
    v8 = 12;
  v9 = ~v8;
  *(_DWORD *)(result + 44) = v9;
  *(_DWORD *)(result + 48) = v9;
  *(_DWORD *)(result + 32) = 0;
  *(_DWORD *)(v5 - 12) = 16843008;
  *(_DWORD *)(v5 - 8) = v7 - v2;
  *(_DWORD *)(v5 - 4) = 0;
  *(_QWORD *)result = v5 - 12;
  *(_QWORD *)(result + 8) = v5 - 12;
  *(_QWORD *)(result + 16) = v7;
  *(_QWORD *)(result + 72) = v7 + 1536;
  *(_QWORD *)(result + 80) = v5 - 12;
  v10 = (_DWORD *)(v4 + v3 - v6 + v2 + 2);
  do
  {
    *((_BYTE *)v10 - 2) = v1;
    *((_BYTE *)v10 - 1) = 1;
    *v10 = 0;
    v10 = (_DWORD *)((char *)v10 + 6);
    ++v1;
  }
  while (v1 != 256);
  v11 = 0;
  v12 = result + 2800;
  do
  {
    v13 = 0;
    v14 = v12;
    do
    {
      v15 = 0;
      v16 = 0x4000 - word_1DB74D084[v13] / (v11 + 2);
      do
      {
        *(_WORD *)(v14 + 2 * v15) = v16;
        v17 = v15 >= 0x38;
        v15 += 8;
      }
      while (!v17);
      ++v13;
      v14 += 2;
    }
    while (v13 != 8);
    ++v11;
    v12 += 128;
  }
  while (v11 != 128);
  for (i = 0; i != 25; ++i)
  {
    for (j = 0; j != 64; j += 4)
    {
      v20 = result + j;
      *(_WORD *)(v20 + 1202) = 1027;
      *(_WORD *)(v20 + 1200) = 40 * i + 80;
    }
    result += 64;
  }
  return result;
}

uint64_t sub_1DB7238D8(_DWORD *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = a1[7] - a1[8];
  v3 = a1[6] / a2;
  a1[6] = v3;
  return v2 / v3;
}

uint64_t sub_1DB7238F4(uint64_t result, int a2, int a3)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(result + 24);
  v4 = *(_DWORD *)(result + 28) - v3 * a2;
  *(_DWORD *)(result + 24) = v3 * a3;
  *(_DWORD *)(result + 28) = v4;
  return sub_1DB723954(result);
}

uint64_t sub_1DB723908(uint64_t a1, int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_DWORD *)(a1 + 28);
  v4 = (v2 >> 14) * a2;
  v5 = v3 >= v4;
  v6 = v3 - v4;
  if (v5)
  {
    *(_DWORD *)(a1 + 28) = v6;
    v4 = v2 - v4;
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  *(_DWORD *)(a1 + 24) = v4;
  sub_1DB723954(a1);
  return v7;
}

uint64_t sub_1DB723954(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  int v5;

  v1 = result;
  v2 = *(_DWORD *)(result + 32);
  v3 = *(_DWORD *)(result + 24);
  while (1)
  {
    if (!(((v3 + v2) ^ v2) >> 24))
      goto LABEL_5;
    v4 = *(_DWORD *)(v1 + 36);
    if (v3 >= v4)
      return result;
    *(_DWORD *)(v1 + 24) = (v4 - 1) & -v2;
LABEL_5:
    v5 = *(_DWORD *)(v1 + 28);
    result = (*(uint64_t (**)(void))(*(_QWORD *)(v1 + 40) + 8))();
    v3 = *(_DWORD *)(v1 + 24) << 8;
    *(_DWORD *)(v1 + 24) = v3;
    *(_DWORD *)(v1 + 28) = result | (v5 << 8);
    v2 = *(_DWORD *)(v1 + 32) << 8;
    *(_DWORD *)(v1 + 32) = v2;
  }
}

uint64_t sub_1DB7239D4(uint64_t result, int a2, int a3)
{
  int v3;

  v3 = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 32) += v3 * a2;
  *(_DWORD *)(result + 24) = v3 * a3;
  return sub_1DB723954(result);
}

uint64_t sub_1DB7239F0(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);

  v4 = (*(uint64_t (**)(uint64_t, uint64_t))a1)(a1, 0x4000);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 8);
  if (v4 >= a2)
  {
    v5(a1, a2, (0x4000 - a2));
    return 1;
  }
  else
  {
    v5(a1, 0, a2);
    return 0;
  }
}

BOOL sub_1DB723A60(uint64_t a1)
{
  int v2;
  int v3;

  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = -1;
  v2 = *(_DWORD *)(a1 + 28);
  v3 = 4;
  do
  {
    v2 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 8))() | (v2 << 8);
    *(_DWORD *)(a1 + 28) = v2;
    --v3;
  }
  while (v3);
  return v2 != -1;
}

unsigned __int8 *sub_1DB723ABC(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned __int8 v7;

  v2 = a1[2];
  v3 = *(unsigned __int8 *)(v2 + 1);
  v4 = *a1;
  v5 = *(unsigned __int16 *)(*a1 + 2);
  *((_DWORD *)a1 + 8) = v5 < 2 * v3;
  v6 = *((_DWORD *)a1 + 11);
  if (v5 < 2 * v3)
    ++v6;
  *((_DWORD *)a1 + 11) = v6;
  *(_WORD *)(v4 + 2) = v5 + 4;
  v7 = v3 + 4;
  *(_BYTE *)(v2 + 1) = v7;
  if (v7 >= 0x7Du)
    sub_1DB723CB4(a1);
  return sub_1DB723FA0((unsigned __int8 *)a1);
}

unsigned __int8 *sub_1DB723B28(unsigned __int8 *a1)
{
  int *v2;
  unsigned __int8 v3;
  __int16 v4;
  int v5;

  v2 = (int *)*((_QWORD *)a1 + 2);
  v3 = *((_BYTE *)v2 + 1) + 4;
  *((_BYTE *)v2 + 1) = v3;
  *(_WORD *)(*(_QWORD *)a1 + 2) += 4;
  if (*((unsigned __int8 *)v2 - 5) < v3)
  {
    v4 = *((_WORD *)v2 + 2);
    v5 = *v2;
    *v2 = *(int *)((char *)v2 - 6);
    *((_WORD *)v2 + 2) = *((_WORD *)v2 - 1);
    *(int *)((char *)v2 - 6) = v5;
    *((_WORD *)v2 - 1) = v4;
    *((_QWORD *)a1 + 2) = (char *)v2 - 6;
    if (*((unsigned __int8 *)v2 - 5) >= 0x7Du)
      sub_1DB723CB4(a1);
  }
  return sub_1DB723FA0(a1);
}

unsigned int *sub_1DB723BB8(unsigned int *a1, unsigned int a2, int *a3)
{
  int v3;
  unsigned int *result;
  int v5;
  unint64_t v6;
  unsigned int v7;
  int v8;

  v3 = **(unsigned __int16 **)a1;
  if (v3 == 256)
  {
    result = a1 + 299;
    v5 = 1;
  }
  else
  {
    v6 = (unint64_t)&a1[16 * (unint64_t)*((unsigned __int8 *)a1 + v3 - a2 + 427)
                             + 4 * (v3 - a2 < a2)
                             + 2 * (11 * v3 > *(unsigned __int16 *)(*(_QWORD *)a1 + 2))
                             + (v3 - a2 < *(unsigned __int16 *)(*((_QWORD *)a1 + 8)
                                                                            + *(unsigned int *)(*(_QWORD *)a1 + 8))
                                        - v3)
                             + a1[10]];
    result = (unsigned int *)(v6 + 1200);
    v7 = *(unsigned __int16 *)(v6 + 1200);
    v8 = v7 >> *(_BYTE *)(v6 + 1202);
    *(_WORD *)(v6 + 1200) = v7 - v8;
    if (v8)
      v5 = v8;
    else
      v5 = 1;
  }
  *a3 = v5;
  return result;
}

unsigned __int8 *sub_1DB723C58(_QWORD *a1)
{
  uint64_t v2;
  unsigned int v3;

  *(_WORD *)(*a1 + 2) += 4;
  v2 = a1[2];
  v3 = (*(_BYTE *)(v2 + 1) + 4);
  *(_BYTE *)(v2 + 1) += 4;
  if (v3 >= 0x7D)
    sub_1DB723CB4(a1);
  *((_DWORD *)a1 + 11) = *((_DWORD *)a1 + 12);
  return sub_1DB724050((unsigned __int8 *)a1);
}

_QWORD *sub_1DB723CB4(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  int *v3;
  int *v4;
  int v5;
  uint64_t v6;
  unsigned __int16 *v7;
  int v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  _BOOL4 v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned __int16 v30;
  int v31;
  char v32;
  int v33;
  int v34;
  unsigned int v35;
  char *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  char *v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  _DWORD *v47;
  char *v48;
  int v49;
  __int16 v50;

  v1 = result;
  v2 = result[8] + *(unsigned int *)(*result + 4);
  v3 = (int *)result[2];
  v49 = *v3;
  v50 = *((_WORD *)v3 + 2);
  if (v3 != (int *)v2)
  {
    v4 = (int *)result[2];
    do
    {
      v5 = *(int *)((char *)v4 - 6);
      v4 = (int *)((char *)v4 - 6);
      *v3 = v5;
      *((_WORD *)v3 + 2) = *((_WORD *)v3 - 1);
      v3 = v4;
    }
    while (v4 != (int *)v2);
  }
  v6 = 0;
  *(_DWORD *)v2 = v49;
  *(_WORD *)(v2 + 4) = v50;
  v7 = (unsigned __int16 *)*result;
  v8 = *(unsigned __int8 *)(v2 + 1);
  v9 = *(unsigned __int16 *)(*result + 2) - v8;
  v10 = *((_DWORD *)result + 6);
  v11 = v10 == 0;
  v12 = v10 != 0;
  v13 = (v8 + 4);
  if (!v11)
    ++v13;
  v14 = v13 >> 1;
  *(_BYTE *)(v2 + 1) = v13 >> 1;
  v15 = *v7 - 1;
  v16 = v2;
  do
  {
    v17 = v16;
    v18 = *(unsigned __int8 *)(v16 + 7);
    v19 = v18 + v12;
    v20 = (v18 + v12) >> 1;
    *(_BYTE *)(v17 + 7) = v20;
    if (v20 > *(unsigned __int8 *)(v17 + 1))
    {
      v21 = *(_BYTE *)(v17 + 6);
      v22 = *(_DWORD *)(v17 + 8);
      v23 = v6;
      while (1)
      {
        v24 = v2 + v23;
        *(_DWORD *)(v24 + 6) = *(_DWORD *)(v2 + v23);
        *(_WORD *)(v24 + 10) = *(_WORD *)(v2 + v23 + 4);
        if (!v23)
          break;
        v23 -= 6;
        if (*(unsigned __int8 *)(v24 - 5) >= v19 >> 1)
        {
          result = (_QWORD *)(v2 + v23 + 6);
          goto LABEL_13;
        }
      }
      result = (_QWORD *)v2;
LABEL_13:
      *(_BYTE *)result = v21;
      *(_BYTE *)(v24 + 1) = v20;
      *(_DWORD *)(v24 + 2) = v22;
    }
    v16 = v17 + 6;
    v9 -= v18;
    v14 += v19 >> 1;
    v6 += 6;
    --v15;
  }
  while (v15);
  v25 = (unsigned __int16 *)*v1;
  if (*(_BYTE *)(v17 + 7))
    goto LABEL_16;
  v26 = 0;
  v27 = *v25;
  v28 = -5;
  do
  {
    ++v26;
    v29 = *(unsigned __int8 *)(v16 + v28);
    v28 -= 6;
  }
  while (!v29);
  v9 += v26;
  v30 = v27 - v26;
  v31 = (unsigned __int16)(v27 - v26);
  *v25 = v30;
  if (v31 != 1)
  {
    v37 = (v27 + 1) >> 1;
    if (v37 == (v31 + 1) >> 1)
    {
LABEL_16:
      v25[1] = v9 + v14 - (v9 >> 1);
      v1[2] = v1[8] + *((unsigned int *)v25 + 1);
      return result;
    }
    v38 = (v31 + 1) >> 1;
    v39 = *((unsigned __int8 *)v1 + v37 + 145);
    v40 = *((unsigned __int8 *)v1 + v38 + 145);
    if (v39 != v40)
    {
      v41 = (char *)v1 + 4 * *((unsigned __int8 *)v1 + v38 + 145);
      v42 = *((unsigned int *)v41 + 69);
      if ((_DWORD)v42)
      {
        v43 = v41 + 276;
        v44 = v1[8];
        v45 = (_DWORD *)(v44 + v42);
        *v43 = *v45;
        v46 = v45;
        v47 = (_DWORD *)v2;
        do
        {
          *v46 = *v47;
          v46[1] = v47[1];
          v46[2] = v47[2];
          v47 += 3;
          v46 += 3;
          --v38;
        }
        while (v38);
        v48 = (char *)v1 + 4 * v39;
        *(_DWORD *)v2 = *((_DWORD *)v48 + 69);
        *((_DWORD *)v48 + 69) = v2 - v44;
        goto LABEL_32;
      }
      result = (_QWORD *)sub_1DB723FD0((uint64_t)v1, v2, v39, v40);
      v25 = (unsigned __int16 *)*v1;
    }
    LODWORD(v45) = v2;
LABEL_32:
    *((_DWORD *)v25 + 1) = (_DWORD)v45 - *((_DWORD *)v1 + 16);
    goto LABEL_33;
  }
  v32 = *(_BYTE *)v2;
  v33 = *(unsigned __int8 *)(v2 + 1);
  v34 = *(_DWORD *)(v2 + 2);
  do
  {
    v35 = v9;
    v33 -= (v33 & 0xFE) >> 1;
    v9 >>= 1;
  }
  while (v35 > 3);
  v36 = (char *)v1 + 4 * *((unsigned __int8 *)v1 + ((v27 + 1) >> 1) + 145);
  *(_DWORD *)v2 = *((_DWORD *)v36 + 69);
  *((_DWORD *)v36 + 69) = v2 - *((_DWORD *)v1 + 16);
  v1[2] = v25 + 1;
  *((_BYTE *)v25 + 2) = v32;
  *((_BYTE *)v25 + 3) = v33;
  *((_DWORD *)v25 + 1) = v34;
LABEL_33:
  if (v30 != 1)
  {
    v25 = (unsigned __int16 *)*v1;
    goto LABEL_16;
  }
  return result;
}

unsigned __int8 *sub_1DB723FA0(unsigned __int8 *result)
{
  unint64_t v1;

  if (*((_DWORD *)result + 6))
    return sub_1DB724050(result);
  v1 = *((_QWORD *)result + 8) + *(unsigned int *)(*((_QWORD *)result + 2) + 2);
  if (v1 <= *((_QWORD *)result + 11))
    return sub_1DB724050(result);
  *(_QWORD *)result = v1;
  *((_QWORD *)result + 1) = v1;
  return result;
}

uint64_t sub_1DB723FD0(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  int v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(unsigned __int8 *)(result + 108 + a3) - *(unsigned __int8 *)(result + 108 + a4);
  v5 = (_DWORD *)(a2 + 12 * *(unsigned __int8 *)(result + 108 + a4));
  v6 = *(unsigned __int8 *)(result + (v4 - 1) + 146);
  if (v4 == *(unsigned __int8 *)(result + 108 + v6))
  {
    v7 = *(_QWORD *)(result + 64);
  }
  else
  {
    v6 = (v6 - 1);
    v8 = &v5[3 * *(unsigned __int8 *)(result + v6 + 108)];
    v9 = result + 4 * (v4 + ~*(unsigned __int8 *)(result + v6 + 108));
    *v8 = *(_DWORD *)(v9 + 276);
    v7 = *(_QWORD *)(result + 64);
    *(_DWORD *)(v9 + 276) = (_DWORD)v8 - v7;
  }
  v10 = result + 4 * v6;
  *v5 = *(_DWORD *)(v10 + 276);
  *(_DWORD *)(v10 + 276) = (_DWORD)v5 - v7;
  return result;
}

unsigned __int8 *sub_1DB724050(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  unsigned __int8 *v11;
  __int16 v12;
  int v13;
  unsigned int v14;
  char v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned __int16 *v20;
  int v21;
  unsigned __int16 *v22;
  unsigned int v23;
  int v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  char v28;
  int v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned __int16 v38;
  __int16 v40;
  _BYTE *v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  __int16 v45;
  char v46;
  char v47;
  BOOL v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;

  v1 = (uint64_t)result;
  v2 = (unsigned __int8 *)*((_QWORD *)result + 2);
  v3 = *(_DWORD *)(v2 + 2);
  if (v2[1] <= 0x1Eu)
  {
    v4 = *(unsigned int *)(*(_QWORD *)result + 8);
    if ((_DWORD)v4)
    {
      v5 = *((_QWORD *)result + 8);
      v6 = v5 + v4;
      if (*(_WORD *)v6 == 1)
      {
        v7 = *(unsigned __int8 *)(v6 + 3);
        if (v7 <= 0x1F)
          *(_BYTE *)(v6 + 3) = v7 + 1;
      }
      else
      {
        v8 = (unsigned __int8 *)(v5 + *(unsigned int *)(v6 + 4));
        v9 = *v2;
        if (*v8 != v9)
        {
          do
          {
            v10 = v8[6];
            v8 += 6;
          }
          while (v10 != v9);
          if (v8[1] >= *(v8 - 5))
          {
            v11 = v8 - 6;
            v12 = *((_WORD *)v8 + 2);
            v13 = *(_DWORD *)v8;
            *(_DWORD *)v8 = *(_DWORD *)(v8 - 6);
            *((_WORD *)v8 + 2) = *((_WORD *)v8 - 1);
            *(_DWORD *)v11 = v13;
            *((_WORD *)v11 + 2) = v12;
            v8 -= 6;
          }
        }
        v14 = v8[1];
        if (v14 <= 0x72)
        {
          v8[1] = v14 + 2;
          *(_WORD *)(v6 + 2) += 2;
        }
      }
    }
  }
  if (!*((_DWORD *)result + 6))
  {
    result = (unsigned __int8 *)sub_1DB72444C((uint64_t)result, 1);
    *(_QWORD *)v1 = result;
    *(_QWORD *)(v1 + 8) = result;
    if (result)
    {
      *(_DWORD *)(*(_QWORD *)(v1 + 16) + 2) = (_DWORD)result - *(_DWORD *)(v1 + 64);
      return result;
    }
    return (unsigned __int8 *)sub_1DB723760(v1);
  }
  v15 = **((_BYTE **)result + 2);
  v16 = (_BYTE *)*((_QWORD *)result + 11);
  *((_QWORD *)result + 11) = v16 + 1;
  *v16 = v15;
  v17 = *((_QWORD *)result + 11);
  if (v17 >= *((_QWORD *)result + 12))
    return (unsigned __int8 *)sub_1DB723760(v1);
  v18 = *((_QWORD *)result + 8);
  v19 = v17 - v18;
  if (v3)
  {
    if (v3 > v19)
      goto LABEL_18;
    result = (unsigned __int8 *)sub_1DB72444C((uint64_t)result, 0);
    if (result)
    {
      v18 = *(_QWORD *)(v1 + 64);
      v3 = (_DWORD)result - v18;
LABEL_18:
      v20 = *(unsigned __int16 **)v1;
      v21 = *(_DWORD *)(v1 + 24) - 1;
      *(_DWORD *)(v1 + 24) = v21;
      if (!v21)
      {
        *(_QWORD *)(v1 + 88) -= *(_QWORD *)(v1 + 8) != (_QWORD)v20;
        v19 = v3;
      }
      goto LABEL_23;
    }
    return (unsigned __int8 *)sub_1DB723760(v1);
  }
  *(_DWORD *)(*((_QWORD *)result + 2) + 2) = v19;
  v20 = *(unsigned __int16 **)result;
  v3 = *(_QWORD *)result - v18;
LABEL_23:
  v22 = *(unsigned __int16 **)(v1 + 8);
  v52 = v3;
  if (v22 != v20)
  {
    v23 = *v20;
    v24 = v20[1] - (v23 + *(unsigned __int8 *)(*(_QWORD *)(v1 + 16) + 1)) + 1;
    do
    {
      v25 = *v22;
      if ((_DWORD)v25 == 1)
      {
        result = (unsigned __int8 *)sub_1DB7246B8(v1, 0);
        if (!result)
          return (unsigned __int8 *)sub_1DB723760(v1);
        v26 = *(_DWORD *)(v22 + 1);
        *((_WORD *)result + 2) = v22[3];
        *(_DWORD *)result = v26;
        v18 = *(_QWORD *)(v1 + 64);
        *((_DWORD *)v22 + 1) = (_DWORD)result - v18;
        v27 = result[1];
        if (v27 >= 0x1E)
          v28 = 120;
        else
          v28 = 2 * v27;
        result[1] = v28;
        v29 = *(_DWORD *)(v1 + 28) + (v23 > 3) + (v28 & 0xFE);
      }
      else
      {
        if ((v25 & 1) == 0)
        {
          v30 = v25 >> 1;
          v31 = *(unsigned __int8 *)(v1 + 146 + (v25 >> 1) - 1);
          if (v31 != *(unsigned __int8 *)(v1 + 146 + (v25 >> 1)))
          {
            result = (unsigned __int8 *)sub_1DB7246B8(v1, v31 + 1);
            if (!result)
              return (unsigned __int8 *)sub_1DB723760(v1);
            v32 = 0;
            v18 = *(_QWORD *)(v1 + 64);
            v33 = *((unsigned int *)v22 + 1);
            v34 = (_DWORD *)(v18 + v33);
            do
            {
              v35 = &result[v32 * 4];
              *(_DWORD *)v35 = v34[v32];
              *((_DWORD *)v35 + 1) = v34[v32 + 1];
              *((_DWORD *)v35 + 2) = v34[v32 + 2];
              v32 += 3;
              LODWORD(v30) = v30 - 1;
            }
            while ((_DWORD)v30);
            v36 = v1 + 4 * v31;
            *v34 = *(_DWORD *)(v36 + 276);
            *(_DWORD *)(v36 + 276) = v33;
            *((_DWORD *)v22 + 1) = (_DWORD)result - v18;
          }
        }
        v37 = v22[1];
        if (v23 <= 2 * (int)v25)
          v38 = v22[1];
        else
          v38 = v37 + 1;
        if (8 * (int)v25 < v37 || 4 * (int)v25 > v23)
          v40 = 0;
        else
          v40 = 2;
        LOWORD(v29) = v38 + v40;
      }
      v41 = *(_BYTE **)(v1 + 16);
      v42 = 2 * v41[1] * ((unsigned __int16)v29 + 6);
      v43 = v24 + (unsigned __int16)v29;
      v44 = 3 * v43;
      if (v42 < 9 * v43)
        v45 = 4;
      else
        v45 = 5;
      if (v42 >= 12 * v43)
        ++v45;
      if (v42 >= 15 * v43)
        ++v45;
      if (v42 <= v43)
        v46 = 1;
      else
        v46 = 2;
      if (v42 < 4 * v43)
        v47 = v46;
      else
        v47 = v46 + 1;
      v48 = v42 >= 2 * v44;
      if (v42 < 2 * v44)
        v49 = 3;
      else
        v49 = v45;
      if (v48)
        v47 = v45;
      v22[1] = v49 + v29;
      v50 = v18 + *((unsigned int *)v22 + 1) + 6 * v25;
      *(_DWORD *)(v50 + 2) = v19;
      *(_BYTE *)v50 = *v41;
      *(_BYTE *)(v50 + 1) = v47;
      *v22 = v25 + 1;
      v22 = (unsigned __int16 *)(v18 + *((unsigned int *)v22 + 2));
    }
    while (v22 != *(unsigned __int16 **)v1);
  }
  v51 = v18 + v52;
  *(_QWORD *)v1 = v51;
  *(_QWORD *)(v1 + 8) = v51;
  return result;
}

unsigned __int16 *sub_1DB72444C(uint64_t a1, int a2)
{
  unsigned __int16 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned __int16 *result;
  int v14;
  int v15;
  char v16;
  unsigned __int16 v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  _OWORD v29[32];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int16 **)a1;
  v4 = *(unsigned __int8 **)(a1 + 16);
  v5 = *(unsigned int *)(v4 + 2);
  memset(v29, 0, sizeof(v29));
  if (a2)
  {
    v6 = 0;
  }
  else
  {
    *(_QWORD *)&v29[0] = v4;
    v6 = 1;
  }
  v7 = *((unsigned int *)v3 + 2);
  v8 = *(_QWORD *)(a1 + 64);
  if (!(_DWORD)v7)
  {
    v12 = v6;
    goto LABEL_14;
  }
  while (1)
  {
    v3 = (unsigned __int16 *)(v8 + v7);
    if (*(_WORD *)(v8 + v7) == 1)
    {
      v9 = (uint64_t)(v3 + 1);
    }
    else
    {
      v9 = v8 - 6 + *((unsigned int *)v3 + 1);
      do
      {
        v10 = *(unsigned __int8 *)(v9 + 6);
        v9 += 6;
      }
      while (v10 != *v4);
    }
    v11 = *(_DWORD *)(v9 + 2);
    if (v11 != (_DWORD)v5)
      break;
    v12 = v6 + 1;
    *((_QWORD *)v29 + v6) = v9;
    v7 = *((unsigned int *)v3 + 2);
    ++v6;
    if (!(_DWORD)v7)
      goto LABEL_14;
  }
  v3 = (unsigned __int16 *)(v8 + v11);
  v12 = v6;
  result = v3;
  if (v6)
  {
LABEL_14:
    v14 = *(unsigned __int8 *)(v8 + v5);
    v15 = *v3;
    if (v15 == 1)
    {
      v16 = *((_BYTE *)v3 + 3);
      if (v12)
        goto LABEL_16;
    }
    else
    {
      v23 = (unsigned __int8 *)(v8 + *((unsigned int *)v3 + 1));
      do
      {
        v24 = *v23;
        v23 += 6;
      }
      while (v24 != v14);
      v25 = *(v23 - 5);
      v26 = v25 - 1;
      v27 = v3[1] - v15 - v25 + 1;
      v28 = 2 * (v25 - 1);
      if (v28 <= v27)
        LOBYTE(v27) = 5 * v26 > v27;
      else
        v27 = (v28 + 3 * v27 - 1) / (2 * v27);
      v16 = v27 + 1;
      if (v12)
      {
LABEL_16:
        v17 = v5 + 1;
        v18 = v12 - 1;
        v19 = (v5 + 1) >> 16;
        do
        {
          v20 = *(_QWORD *)(a1 + 80);
          if (v20 == *(_QWORD *)(a1 + 72))
          {
            v21 = *(unsigned int *)(a1 + 276);
            if ((_DWORD)v21)
            {
              result = (unsigned __int16 *)(v8 + v21);
              *(_DWORD *)(a1 + 276) = *(_DWORD *)(v8 + v21);
            }
            else
            {
              result = (unsigned __int16 *)sub_1DB724718(a1, 0);
              if (!result)
                return result;
            }
          }
          else
          {
            result = (unsigned __int16 *)(v20 - 12);
            *(_QWORD *)(a1 + 80) = v20 - 12;
          }
          *result = 1;
          *((_BYTE *)result + 2) = v14;
          *((_BYTE *)result + 3) = v16;
          result[2] = v17;
          result[3] = v19;
          v8 = *(_QWORD *)(a1 + 64);
          *((_DWORD *)result + 2) = (_DWORD)v3 - v8;
          *(_DWORD *)(*((_QWORD *)v29 + v18) + 2) = (_DWORD)result - v8;
          LODWORD(v3) = (_DWORD)result;
        }
        while ((unint64_t)v18--);
        return result;
      }
    }
    return v3;
  }
  return result;
}

_DWORD *sub_1DB7246B8(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;

  v2 = a1 + 4 * a2;
  v3 = *(unsigned int *)(v2 + 276);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD *)(*(_QWORD *)(a1 + 64) + v3);
    *(_DWORD *)(v2 + 276) = *v4;
  }
  else
  {
    v5 = 3 * *(unsigned __int8 *)(a1 + a2 + 108);
    v4 = *(_DWORD **)(a1 + 72);
    if ((v5 * 4) > *(_DWORD *)(a1 + 80) - (int)v4)
      return sub_1DB724718(a1, a2);
    *(_QWORD *)(a1 + 72) = &v4[v5];
  }
  return v4;
}

_DWORD *sub_1DB724718(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  __int16 v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _WORD *v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _WORD *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  int v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = a2;
  if (*(_DWORD *)(a1 + 56))
    goto LABEL_2;
  v9 = 0;
  v10 = *(_DWORD *)(a1 + 52) + *(_DWORD *)(a1 + 104);
  *(_DWORD *)(a1 + 56) = 255;
  v11 = v10;
  do
  {
    v12 = *(unsigned __int8 *)(a1 + v9 + 108);
    v13 = a1 + 4 * v9;
    v14 = *(_DWORD *)(v13 + 276);
    *(_DWORD *)(v13 + 276) = 0;
    if (v14)
    {
      v15 = *(_QWORD *)(a1 + 64);
      v16 = v11;
      do
      {
        v11 = v14;
        v17 = v15 + v14;
        *(_DWORD *)(v17 + 4) = v16;
        *(_DWORD *)(v15 + 8 + v16) = v14;
        v14 = *(_DWORD *)v17;
        *(_WORD *)v17 = 0;
        *(_WORD *)(v17 + 2) = v12;
        v16 = v11;
      }
      while (v14);
    }
    ++v9;
  }
  while (v9 != 38);
  v18 = *(_QWORD *)(a1 + 64);
  v19 = *(_WORD **)(a1 + 72);
  v20 = v18 + v10;
  *(_WORD *)v20 = 1;
  *(_DWORD *)(v20 + 4) = v11;
  *(_DWORD *)(v18 + v11 + 8) = v10;
  if (v19 != *(_WORD **)(a1 + 80))
    *v19 = 1;
  if (v11 != v10)
  {
    do
    {
      v21 = v18 + v11;
      v22 = *(unsigned __int16 *)(v21 + 2);
      v23 = (_WORD *)(v21 + 12 * v22);
      v24 = (unsigned __int16)v23[1] + v22;
      if (*v23)
        v25 = 0;
      else
        v25 = v24 >> 16 == 0;
      if (v25)
      {
        do
        {
          v26 = v21 + 12 * v22;
          v22 = v24;
          v27 = *(unsigned int *)(v26 + 8);
          *(_DWORD *)(v18 + 4 + v27) = *(_DWORD *)(v26 + 4);
          *(_DWORD *)(v18 + 8 + *(unsigned int *)(v26 + 4)) = v27;
          *(_WORD *)(v21 + 2) = v24;
          v28 = (_WORD *)(v21 + 12 * v24);
          if (*v28)
            break;
          v24 = v22 + (unsigned __int16)v28[1];
        }
        while (v24 < 0x10000);
      }
      v11 = *(_DWORD *)(v21 + 4);
    }
    while (v11 != v10);
    LODWORD(v29) = *(_DWORD *)(v20 + 4);
    if ((_DWORD)v29 != v10)
    {
      do
      {
        v30 = v18 + v29;
        v31 = *(_DWORD *)(v30 + 4);
        v32 = *(unsigned __int16 *)(v30 + 2);
        if (v32 >= 0x81)
        {
          v29 = v29;
          v33 = *(_DWORD *)(a1 + 424);
          do
          {
            *(_DWORD *)(v18 + v29) = v33;
            v33 = v30 - v18;
            *(_DWORD *)(a1 + 424) = v29;
            v32 -= 128;
            v30 += 1536;
            v29 += 1536;
          }
          while (v32 > 0x80);
          v30 = v18 + v29;
        }
        v29 = *(unsigned __int8 *)(a1 + v32 - 1 + 146);
        if (v32 != *(unsigned __int8 *)(a1 + v29 + 108))
        {
          v29 = (v29 - 1);
          v34 = (_DWORD *)(v30 + 12 * *(unsigned __int8 *)(a1 + v29 + 108));
          v35 = a1 + 4 * (v32 + ~*(unsigned __int8 *)(a1 + v29 + 108));
          *v34 = *(_DWORD *)(v35 + 276);
          *(_DWORD *)(v35 + 276) = (_DWORD)v34 - v18;
        }
        v36 = a1 + 4 * v29;
        *(_DWORD *)v30 = *(_DWORD *)(v36 + 276);
        *(_DWORD *)(v36 + 276) = v30 - v18;
        LODWORD(v29) = v31;
      }
      while (v31 != v10);
    }
  }
  v37 = a1 + 4 * a2;
  v38 = *(unsigned int *)(v37 + 276);
  v3 = a2;
  if (!(_DWORD)v38)
  {
LABEL_2:
    while (v3 != 37)
    {
      v4 = a1 + 4 * ++v3;
      v5 = *(unsigned int *)(v4 + 276);
      if ((_DWORD)v5)
      {
        v6 = (_DWORD *)(*(_QWORD *)(a1 + 64) + v5);
        *(_DWORD *)(v4 + 276) = *v6;
        sub_1DB723FD0(a1, (uint64_t)v6, v3, a2);
        return v6;
      }
    }
    v7 = 12 * *(unsigned __int8 *)(a1 + a2 + 108);
    --*(_DWORD *)(a1 + 56);
    v8 = *(_QWORD *)(a1 + 96);
    if (v7 >= (int)v8 - *(_DWORD *)(a1 + 88))
    {
      return 0;
    }
    else
    {
      v6 = (_DWORD *)(v8 - v7);
      *(_QWORD *)(a1 + 96) = v8 - v7;
    }
  }
  else
  {
    v6 = (_DWORD *)(v18 + v38);
    *(_DWORD *)(v37 + 276) = *(_DWORD *)(v18 + v38);
  }
  return v6;
}

_QWORD *sub_1DB7249B4(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  v2 = *result;
  if (*result >> 24 == 255)
  {
    v3 = result[2] + 1;
  }
  else
  {
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(void))(v1[3] + 8))();
      v4 = v1[2] - 1;
      v1[2] = v4;
    }
    while (v4);
    v2 = *v1;
    *((_BYTE *)v1 + 12) = BYTE3(*v1);
    v3 = 1;
  }
  v1[2] = v3;
  *v1 = ((_DWORD)v2 << 8);
  return result;
}

_QWORD *sub_1DB724A38(_QWORD *result, unsigned int a2, int a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;

  v4 = *((_DWORD *)result + 2) / a4;
  *result += v4 * (unint64_t)a2;
  v5 = v4 * a3;
  *((_DWORD *)result + 2) = v5;
  if (!HIBYTE(v5))
  {
    v6 = result;
    do
    {
      *((_DWORD *)v6 + 2) = v5 << 8;
      result = sub_1DB7249B4(v6);
      v5 = *((_DWORD *)v6 + 2);
    }
    while (!HIBYTE(v5));
  }
  return result;
}

uint64_t sub_1DB724A94(uint64_t a1, int8x16_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _DWORD *v67;
  int v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  size_t v116;
  const char *v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void **v126;
  void **v127;
  void **v128;
  int v129;
  void *v130;
  char *v131;
  size_t v132;
  size_t v133;
  unint64_t v134;

  v10 = *(_QWORD **)(a1 + 2472);
  v11 = (_QWORD *)*v10;
  if (*(_QWORD *)*v10)
  {
    while (1)
    {
LABEL_2:
      v12 = *((_DWORD *)v11 + 217);
      if (v12 < 1)
      {
        v11[105] = 0;
LABEL_17:
        v26 = 1;
        *((_DWORD *)v11 + 6) = 1;
        return v26;
      }
      v13 = (uint64_t *)v11[107];
      v14 = *v13;
      v15 = v12 - 1;
      *((_DWORD *)v11 + 217) = v12 - 1;
      *v13 = v13[v12 - 1];
      if (v12 >= 3)
      {
        v16 = 0;
        v17 = 0;
        v18 = *(_QWORD *)(*(_QWORD *)v11[107] + 32);
        v19 = 1;
        do
        {
          v20 = v11[107];
          v21 = *(_QWORD *)(*(_QWORD *)(v20 + 8 * v19) + 32);
          v22 = v16 + 2;
          if (v22 >= v15)
          {
            v23 = v19;
          }
          else if (*(_QWORD *)(*(_QWORD *)(v20 + 8 * v22) + 32) >= v21)
          {
            v23 = v19;
          }
          else
          {
            v21 = *(_QWORD *)(*(_QWORD *)(v20 + 8 * v22) + 32);
            v23 = v22;
          }
          if (v18 <= v21)
            break;
          v24 = *(_QWORD *)(v20 + 8 * v17);
          *(_QWORD *)(v20 + 8 * v17) = *(_QWORD *)(v20 + 8 * v23);
          *(_QWORD *)(v11[107] + 8 * v23) = v24;
          v16 = 2 * v23;
          v19 = (2 * v23) | 1;
          v17 = v23;
        }
        while (v19 < v15);
      }
      v11[105] = v14;
      if (!v14)
        goto LABEL_17;
      v25 = *(_DWORD *)(v14 + 28);
      if ((*(_WORD *)(v14 + 288) & 0xF000) != 0x4000 || v25 != 130)
        break;
      sub_1DB725408((_QWORD *)v14);
    }
    if ((v25 & 0x20000) != 0)
    {
      archive_entry_set_atime((uint64_t)a2, *(_QWORD *)(v14 + 216), 0);
      v25 = *(_DWORD *)(v14 + 28);
      if ((v25 & 0x8000) == 0)
      {
LABEL_26:
        if ((v25 & 0x10000) == 0)
        {
LABEL_28:
          archive_entry_set_gid((uint64_t)a2, *(_QWORD *)(v14 + 280));
          v37 = *(_QWORD *)(v14 + 264);
          if (v37 && sub_1DB6E3BD8((uint64_t)a2, *(char **)(v14 + 256), v37, v11[127]))
          {
            if (*__error() == 12)
            {
              v36 = "Can't allocate memory for Gname";
LABEL_66:
              v67 = (_DWORD *)a1;
              v68 = 12;
              goto LABEL_67;
            }
            v60 = (char *)sub_1DB72D0D4(v11[127]);
            archive_set_error((_DWORD *)a1, 79, "Gname cannot be converted from %s to current locale.", v61, v62, v63, v64, v65, v60);
            v26 = 4294967276;
          }
          else
          {
            v26 = 0;
          }
          archive_entry_set_uid((uint64_t)a2, *(_QWORD *)(v14 + 248));
          v66 = *(_QWORD *)(v14 + 232);
          if (v66 && sub_1DB6E3BC8((uint64_t)a2, *(char **)(v14 + 224), v66, v11[127]))
          {
            if (*__error() == 12)
            {
              v36 = "Can't allocate memory for Uname";
              goto LABEL_66;
            }
            v69 = (char *)sub_1DB72D0D4(v11[127]);
            archive_set_error((_DWORD *)a1, 79, "Uname cannot be converted from %s to current locale.", v70, v71, v72, v73, v74, v69);
            v26 = 4294967276;
          }
          archive_entry_set_mode((uint64_t)a2, *(_WORD *)(v14 + 288));
          if (sub_1DB6E3BD0((uint64_t)a2, *(char **)(v14 + 152), *(_QWORD *)(v14 + 160), v11[127]))
          {
            if (*__error() == 12)
            {
              v36 = "Can't allocate memory for Pathname";
              goto LABEL_66;
            }
            v75 = (char *)sub_1DB72D0D4(v11[127]);
            archive_set_error((_DWORD *)a1, 79, "Pathname cannot be converted from %s to current locale.", v76, v77, v78, v79, v80, v75);
            v26 = 4294967276;
          }
          v81 = *(_QWORD *)(v14 + 184);
          if (v81 && sub_1DB6E9E80((uint64_t)a2, *(char **)(v14 + 176), v81, v11[127]))
          {
            if (*__error() == 12)
            {
              v36 = "Can't allocate memory for Linkname";
              goto LABEL_66;
            }
            v83 = (char *)sub_1DB72D0D4(v11[127]);
            archive_set_error((_DWORD *)a1, 79, "Linkname cannot be converted from %s to current locale.", v84, v85, v86, v87, v88, v83);
            v26 = 4294967276;
          }
          if ((*(_WORD *)(v14 + 288) & 0xF000) == 0x4000)
            v89 = *(_DWORD *)(v14 + 24) + 2;
          else
            v89 = *(_DWORD *)(v14 + 340);
          archive_entry_set_nlink((uint64_t)a2, v89);
          archive_entry_set_size((uint64_t)a2, *(_QWORD *)(v14 + 56));
          if (*(_QWORD *)(v14 + 352))
            archive_entry_set_hardlink((uint64_t)a2, *(char **)(v14 + 344));
          archive_entry_set_ino64((uint64_t)a2, *(_QWORD *)(v14 + 304));
          v96 = *(_DWORD *)(v14 + 28);
          if ((v96 & 0x100) != 0)
          {
            archive_entry_set_dev(a2, *(_DWORD *)(v14 + 292));
            v96 = *(_DWORD *)(v14 + 28);
            if ((v96 & 0x200) == 0)
            {
LABEL_78:
              if ((v96 & 0x400) == 0)
              {
LABEL_80:
                if (*(_QWORD *)(v14 + 320))
                  archive_entry_copy_fflags_text(a2, *(char **)(v14 + 312));
                *((_DWORD *)v11 + 222) = 1;
                v11[112] = 0;
                v11[113] = *(_QWORD *)(v14 + 40);
                v11[115] = *(_QWORD *)(v14 + 56);
                *((_DWORD *)v11 + 232) = *(_DWORD *)(v14 + 64);
                v97 = *(_OWORD *)(v14 + 72);
                v98 = *(_OWORD *)(v14 + 88);
                v11[121] = *(_QWORD *)(v14 + 104);
                *(_OWORD *)(v11 + 117) = v97;
                *(_OWORD *)(v11 + 119) = v98;
                v99 = *(_OWORD *)(v14 + 112);
                v100 = *(_OWORD *)(v14 + 128);
                v11[126] = *(_QWORD *)(v14 + 144);
                *((_OWORD *)v11 + 61) = v99;
                *((_OWORD *)v11 + 62) = v100;
                v101 = *(uint64_t **)(v14 + 368);
                if (v101)
                {
                  v102 = "Decompressed size error";
                  while (1)
                  {
                    v132 = 0;
                    v133 = 0;
                    v103 = sub_1DB72547C(a1, v101[6], v90, v91, v92, v93, v94, v95);
                    if ((_DWORD)v103)
                      goto LABEL_98;
                    v103 = sub_1DB725520(a1, *((_DWORD *)v101 + 16), *((_DWORD *)v101 + 18), *((unsigned int *)v101 + 28), v104, v105, v106, v107);
                    if ((_DWORD)v103)
                      goto LABEL_98;
                    v134 = 0;
                    v103 = sub_1DB725800(a1, (void **)&v134, &v133, &v132, v101[5], v108, v109, v110);
                    if ((_DWORD)v103)
                      goto LABEL_98;
                    v116 = v133;
                    if (v133 != v101[7])
                      break;
                    if (sub_1DB725B08(a1, (uint64_t)(v101 + 11), v101[10], (uint64_t)(v101 + 16), v101[15]))
                    {
                      v26 = 4294967276;
                      v102 = "Xattr checksum error";
                      goto LABEL_102;
                    }
                    v117 = (const char *)v101[1];
                    if (!v117)
                    {
                      v26 = 4294967276;
                      v102 = "Xattr name error";
                      goto LABEL_102;
                    }
                    archive_entry_xattr_add_entry((uint64_t)a2, v117, (const void *)v134, v116);
                    v101 = (uint64_t *)*v101;
                    if (!v101)
                      goto LABEL_96;
                  }
                  v26 = 4294967266;
LABEL_102:
                  archive_set_error((_DWORD *)a1, -1, v102, v111, v112, v113, v114, v115, v131);
                  goto LABEL_104;
                }
                if (!(_DWORD)v26)
                {
LABEL_96:
                  if (v11[113])
                  {
                    v103 = sub_1DB72547C(a1, *(_QWORD *)(v14 + 48), v90, v91, v92, v93, v94, v95);
LABEL_98:
                    v26 = v103;
                  }
                  else
                  {
                    v26 = 0;
                  }
                }
LABEL_104:
                sub_1DB725408((_QWORD *)v14);
                return v26;
              }
LABEL_79:
              archive_entry_set_devminor(a2, *(_DWORD *)(v14 + 300));
              goto LABEL_80;
            }
          }
          else if ((v96 & 0x200) == 0)
          {
            goto LABEL_78;
          }
          archive_entry_set_devmajor(a2, *(_DWORD *)(v14 + 296));
          if ((*(_DWORD *)(v14 + 28) & 0x400) == 0)
            goto LABEL_80;
          goto LABEL_79;
        }
LABEL_27:
        archive_entry_set_mtime((uint64_t)a2, *(_QWORD *)(v14 + 208), 0);
        goto LABEL_28;
      }
    }
    else if ((v25 & 0x8000) == 0)
    {
      goto LABEL_26;
    }
    archive_entry_set_ctime((uint64_t)a2, *(_QWORD *)(v14 + 200), 0);
    if ((*(_DWORD *)(v14 + 28) & 0x10000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
  if (!v11[127])
  {
    v27 = sub_1DB6E3A78(a1, "UTF-8", 1);
    v11[127] = v27;
    if (!v27)
      return 4294967266;
    v10 = *(_QWORD **)(a1 + 2472);
  }
  v134 = 0;
  v28 = (_QWORD *)*v10;
  v29 = sub_1DB6E2588(a1, 0x1CuLL, &v134, a4, a5, a6, a7, a8);
  v26 = v134;
  if ((v134 & 0x8000000000000000) == 0)
  {
    if (v134 <= 0x1B)
    {
      v36 = "Truncated archive header";
LABEL_56:
      v67 = (_DWORD *)a1;
      v68 = 79;
LABEL_67:
      archive_set_error(v67, v68, v36, v31, v32, v33, v34, v35, v131);
      return 4294967266;
    }
    if (bswap32(*(_DWORD *)v29) != 2019652129)
    {
      v36 = "Invalid header magic";
      goto LABEL_56;
    }
    v38 = (char *)__rev16(*(unsigned __int16 *)(v29 + 6));
    if ((_DWORD)v38 != 1)
    {
      v131 = v38;
      v36 = "Unsupported header version(%d)";
      goto LABEL_56;
    }
    v28[8] = bswap64(*(_QWORD *)(v29 + 8));
    v39 = *(_QWORD *)(v29 + 16);
    v40 = *(_DWORD *)(v29 + 24);
    sub_1DB6E26F0(a1, 28, v30, v31, v32, v33, v34, v35);
    *v28 += 28;
    v28[9] = 0;
    v26 = sub_1DB72547C(a1, 28, v41, v42, v43, v44, v45, v46);
    if ((_DWORD)v26)
      return v26;
    v51 = bswap32(v40);
    v26 = sub_1DB725520(a1, 1, v51, 0, v47, v48, v49, v50);
    if ((_DWORD)v26)
      return v26;
    v26 = sub_1DB725B84((uint64_t **)a1);
    if ((_DWORD)v26)
      return v26;
    v28[2] = *v28;
    if (v28[9] != bswap64(v39))
    {
      v36 = "TOC uncompressed size error";
      v67 = (_DWORD *)a1;
      v68 = -1;
      goto LABEL_67;
    }
    if (!v51)
    {
LABEL_107:
      v125 = v28[109];
      if (v125)
      {
        v126 = (void **)(v28 + 110);
        do
        {
          v127 = v126;
          do
          {
            v128 = v127;
            v127 = (void **)*v127;
            if (!v127)
              goto LABEL_116;
          }
          while (*(_QWORD *)(v125 + 32) != *((_DWORD *)v127 + 2));
          v129 = *((_DWORD *)v127 + 3) + 1;
          *(_DWORD *)(v125 + 340) = v129;
          v130 = v127[2];
          if (v130)
          {
            do
            {
              *((_DWORD *)v130 + 85) = v129;
              *((_QWORD *)v130 + 44) = 0;
              sub_1DB6E4384((uint64_t *)v130 + 43, v125 + 152);
              v130 = (void *)*((_QWORD *)v130 + 1);
            }
            while (v130);
            v127 = (void **)*v128;
          }
          *v128 = *v127;
          free(v127);
LABEL_116:
          v125 = *(_QWORD *)(v125 + 8);
        }
        while (v125);
      }
      *(_DWORD *)(a1 + 16) = 655360;
      *(_QWORD *)(a1 + 24) = "xar";
      goto LABEL_2;
    }
    v26 = sub_1DB72547C(a1, v28[10], v52, v31, v32, v33, v34, v35);
    if ((_DWORD)v26)
      return v26;
    v58 = sub_1DB6E2588(a1, v28[11], &v134, v53, v54, v55, v56, v57);
    v26 = v134;
    if ((v134 & 0x8000000000000000) == 0)
    {
      v59 = v28[11];
      if (v134 < v59)
      {
        v36 = "Truncated archive file";
        goto LABEL_56;
      }
      v118 = sub_1DB725B08(a1, v58, v59, 0, 0);
      sub_1DB6E26F0(a1, v28[11], v119, v120, v121, v122, v123, v124);
      *v28 += v28[11];
      if (v118)
        return 4294967266;
      goto LABEL_107;
    }
  }
  if (!(_DWORD)v26)
    goto LABEL_2;
  return v26;
}

uint64_t sub_1DB725244(uint64_t a1, void **a2, unint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  size_t v27;
  char *v28;
  size_t v29;

  v29 = 0;
  v12 = *(uint64_t **)(a1 + 2472);
  v13 = *v12;
  v14 = *(_QWORD *)(*v12 + 912);
  if (v14)
  {
    sub_1DB6E26F0(a1, v14, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    *(_QWORD *)(v13 + 912) = 0;
  }
  if (*(_DWORD *)(v13 + 24) || (v16 = *(_QWORD *)(v13 + 904)) == 0)
  {
    result = 1;
    goto LABEL_5;
  }
  if (*(_DWORD *)(v13 + 888))
  {
    result = sub_1DB725520(a1, *(_DWORD *)(v13 + 928), *(_DWORD *)(v13 + 936), *(unsigned int *)(v13 + 976), v16, a6, a7, a8);
    if ((_DWORD)result)
    {
      *(_QWORD *)(v13 + 904) = 0;
      return result;
    }
    *(_DWORD *)(v13 + 888) = 0;
    v16 = *(_QWORD *)(v13 + 904);
  }
  *a2 = 0;
  result = sub_1DB725800(a1, a2, a3, &v29, v16, a6, a7, a8);
  if ((_DWORD)result)
    goto LABEL_5;
  *a4 = *(_QWORD *)(v13 + 896);
  v22 = *a3;
  v23 = *(_QWORD *)(v13 + 896) + *a3;
  *(_QWORD *)(v13 + 896) = v23;
  v24 = *(_QWORD *)(v13 + 8) + v22;
  v25 = v29;
  *(_QWORD *)v13 += v29;
  *(_QWORD *)(v13 + 8) = v24;
  v26 = *(_QWORD *)(v13 + 904);
  *(_QWORD *)(v13 + 912) = v25;
  v27 = v26 - v25;
  *(_QWORD *)(v13 + 904) = v27;
  if (v27)
    return 0;
  if (v23 != *(_QWORD *)(v13 + 920))
  {
    archive_set_error((_DWORD *)a1, -1, "Decompressed size error", v17, v18, v19, v20, v21, v28);
    result = 4294967266;
    goto LABEL_5;
  }
  result = sub_1DB725B08(a1, v13 + 952, *(_QWORD *)(v13 + 944), v13 + 992, *(_QWORD *)(v13 + 984));
  if ((_DWORD)result)
  {
LABEL_5:
    *a2 = 0;
    *a3 = 0;
    *a4 = *(_QWORD *)(v13 + 8);
  }
  return result;
}

uint64_t sub_1DB7253A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v8 = **(_QWORD **)(a1 + 2472);
  if (*(_DWORD *)(v8 + 24))
    return 1;
  v10 = sub_1DB6E26F0(a1, *(_QWORD *)(v8 + 912) + *(_QWORD *)(v8 + 904), a3, a4, a5, a6, a7, a8);
  if (v10 < 0)
    return 4294967266;
  v11 = v10;
  result = 0;
  *(_QWORD *)v8 += v11;
  *(_QWORD *)(v8 + 912) = 0;
  return result;
}

void sub_1DB725408(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_1DB6E7C3C((uint64_t)(a1 + 19));
  sub_1DB6E7C3C((uint64_t)(a1 + 22));
  sub_1DB6E7C3C((uint64_t)(a1 + 28));
  sub_1DB6E7C3C((uint64_t)(a1 + 32));
  sub_1DB6E7C3C((uint64_t)(a1 + 43));
  v2 = (_QWORD *)a1[46];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_1DB6E7C3C((uint64_t)(v2 + 1));
      free(v2);
      v2 = v3;
    }
    while (v3);
  }
  free(a1);
}

uint64_t sub_1DB72547C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;

  v8 = **(_QWORD ***)(a1 + 2472);
  v9 = v8[2];
  v10 = a2 - (*v8 - v9);
  if (!v10)
    return 0;
  if (v10 < 1)
  {
    v14 = sub_1DB6F802C(a1, v9 + a2, 0);
    if (v14 == -25)
    {
      archive_set_error((_DWORD *)a1, -1, "Cannot seek.", v15, v16, v17, v18, v19, v20);
      return 4294967271;
    }
    v13 = v14;
  }
  else
  {
    result = sub_1DB6E26F0(a1, v10, a3, a4, a5, a6, a7, a8);
    if (result < 0)
      return result;
    v13 = *v8 + result;
  }
  result = 0;
  *v8 = v13;
  return result;
}

uint64_t sub_1DB725520(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _DWORD *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char *v28;
  unsigned int v29;
  char *v30;
  z_stream *v31;
  uint64_t *v33;
  uint64_t v34;
  char *v35;

  v9 = **(_QWORD **)(a1 + 2472);
  *(_DWORD *)(v9 + 96) = a2;
  v10 = a4;
  switch(a2)
  {
    case 0:
      goto LABEL_35;
    case 1:
      v31 = (z_stream *)(v9 + 104);
      if (*(_DWORD *)(v9 + 216))
      {
        if (inflateReset(v31))
        {
LABEL_19:
          v18 = "Couldn't initialize zlib stream.";
          goto LABEL_24;
        }
      }
      else if (inflateInit_(v31, "1.2.12", 112))
      {
        goto LABEL_19;
      }
      *(_DWORD *)(v9 + 216) = 1;
      *(_QWORD *)(v9 + 120) = 0;
      *(_QWORD *)(v9 + 144) = 0;
LABEL_35:
      v33 = *(uint64_t **)(a1 + 2472);
      v34 = *v33;
      *(_DWORD *)(*v33 + 452) = a3;
      if (a3 == 2)
      {
        sub_1DB7338F0((CC_MD5_CTX *)(v34 + 456));
      }
      else if (a3 == 1)
      {
        sub_1DB73395C((CC_SHA1_CTX *)(v34 + 548));
      }
      *(_DWORD *)(v34 + 644) = v10;
      if (v10 == 2)
      {
        sub_1DB7338F0((CC_MD5_CTX *)(v34 + 648));
      }
      else if (v10 == 1)
      {
        sub_1DB73395C((CC_SHA1_CTX *)(v34 + 740));
      }
      return 0;
    case 2:
      if (*(_DWORD *)(v9 + 304))
      {
        BZ2_bzDecompressEnd((bz_stream *)(v9 + 224));
        *(_DWORD *)(v9 + 304) = 0;
      }
      v21 = BZ2_bzDecompressInit((bz_stream *)(v9 + 224), 0, 0);
      if (v21 == -3)
        v21 = BZ2_bzDecompressInit((bz_stream *)(v9 + 224), 0, 1);
      v27 = -1;
      v28 = "??";
      switch(v21)
      {
        case -9:
          v28 = "mis-compiled library";
          break;
        case -3:
          v27 = 12;
          v28 = "out of memory";
          break;
        case -2:
          v28 = "invalid setup parameter";
          break;
        case 0:
          *(_DWORD *)(v9 + 304) = 1;
          *(_DWORD *)(v9 + 236) = 0;
          *(_DWORD *)(v9 + 240) = 0;
          *(_QWORD *)(v9 + 260) = 0;
          goto LABEL_35;
        default:
          break;
      }
      archive_set_error((_DWORD *)a1, v27, "Internal error initializing decompressor: %s", v22, v23, v24, v25, v26, v28);
      *(_DWORD *)(v9 + 304) = 0;
      return 4294967266;
    case 3:
    case 4:
      if (*(_DWORD *)(v9 + 448))
      {
        lzma_end();
        *(_DWORD *)(v9 + 448) = 0;
      }
      if (*(_DWORD *)(v9 + 928) == 4)
      {
        v12 = lzma_stream_decoder();
        if (v12)
          goto LABEL_6;
LABEL_21:
        *(_DWORD *)(v9 + 448) = 1;
        *(_QWORD *)(v9 + 328) = 0;
        *(_QWORD *)(v9 + 352) = 0;
        goto LABEL_35;
      }
      v12 = lzma_alone_decoder();
      if (!v12)
        goto LABEL_21;
LABEL_6:
      if (v12 == 8)
      {
        v18 = "Internal error initializing compression library: Invalid or unsupported options";
      }
      else
      {
        if (v12 == 5)
        {
          v18 = "Internal error initializing compression library: Cannot allocate memory";
          v19 = (_DWORD *)a1;
          v20 = 12;
          goto LABEL_25;
        }
        v18 = "Internal error initializing lzma library";
      }
LABEL_24:
      v19 = (_DWORD *)a1;
      v20 = -1;
LABEL_25:
      archive_set_error(v19, v20, v18, v13, v14, v15, v16, v17, v35);
      return 4294967266;
    default:
      v29 = *(_DWORD *)(v9 + 928) - 2;
      if (v29 > 2)
        v30 = "??";
      else
        v30 = off_1EA3228F8[v29];
      archive_set_error((_DWORD *)a1, -1, "%s compression not supported on this platform", a4, a5, a6, a7, a8, v30);
      return 4294967271;
  }
}

uint64_t sub_1DB725800(uint64_t a1, void **a2, unint64_t *a3, size_t *a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  char *v24;
  _DWORD *v25;
  int v26;
  int v27;
  char *v28;
  uint64_t v29;
  int v30;
  int v31;
  const char *v32;
  size_t v33;
  void *v34;
  uint64_t v35;
  int v36;
  int v37;
  char *v39;
  size_t v40;

  v40 = 0;
  v13 = sub_1DB6E2588(a1, 1uLL, &v40, (uint64_t)a4, a5, a6, a7, a8);
  v19 = v40;
  if ((v40 & 0x8000000000000000) != 0)
    return v19;
  if (!v40)
  {
    v24 = "Truncated archive file";
LABEL_8:
    v25 = (_DWORD *)a1;
    v26 = -1;
LABEL_9:
    archive_set_error(v25, v26, v24, v14, v15, v16, v17, v18, v39);
    return 4294967266;
  }
  v20 = (void *)v13;
  if (v40 > a5)
  {
    v40 = a5;
    v19 = a5;
  }
  *a4 = v19;
  v21 = **(_QWORD **)(a1 + 2472);
  v22 = *a2;
  if (*a2)
  {
    v23 = *a3;
  }
  else
  {
    v22 = *(void **)(v21 + 32);
    if (!v22)
    {
      v22 = malloc_type_malloc(0x10000uLL, 0x87F69700uLL);
      *(_QWORD *)(v21 + 32) = v22;
      if (!v22)
      {
        v24 = "Couldn't allocate memory for out buffer";
        v25 = (_DWORD *)a1;
        v26 = 12;
        goto LABEL_9;
      }
    }
    *a2 = v22;
    v23 = 0x10000;
  }
  v27 = *(_DWORD *)(v21 + 96);
  if ((v27 - 3) < 2)
  {
    *(_QWORD *)(v21 + 312) = v20;
    *(_QWORD *)(v21 + 320) = v19;
    *(_QWORD *)(v21 + 336) = v22;
    *(_QWORD *)(v21 + 344) = v23;
    v30 = lzma_code();
    if (v30)
    {
      if (v30 != 1)
      {
        if (*(_DWORD *)(v21 + 928) == 4)
          v32 = "xz";
        else
          v32 = "lzma";
        v39 = (char *)v32;
        v24 = "%s decompression failed(%d)";
        goto LABEL_8;
      }
      lzma_end();
      *(_DWORD *)(v21 + 448) = 0;
    }
    *a4 = v19 - *(_QWORD *)(v21 + 320);
    v29 = *(_QWORD *)(v21 + 344);
    goto LABEL_41;
  }
  if (v27 == 2)
  {
    *(_QWORD *)(v21 + 224) = v20;
    *(_DWORD *)(v21 + 232) = v19;
    *(_QWORD *)(v21 + 248) = v22;
    *(_DWORD *)(v21 + 256) = v23;
    v31 = BZ2_bzDecompress((bz_stream *)(v21 + 224));
    if (v31)
    {
      if (v31 != 4)
      {
        v24 = "bzip decompression failed";
        goto LABEL_8;
      }
      if (BZ2_bzDecompressEnd((bz_stream *)(v21 + 224)))
      {
        v24 = "Failed to clean up decompressor";
        goto LABEL_8;
      }
      *(_DWORD *)(v21 + 304) = 0;
    }
    *a4 = v19 - *(unsigned int *)(v21 + 232);
    v29 = *(unsigned int *)(v21 + 256);
    goto LABEL_41;
  }
  if (v27 != 1)
  {
    if (v22 == *(void **)(v21 + 32))
    {
      *a2 = v20;
    }
    else
    {
      if (v23 < v19)
        v19 = v23;
      memcpy(v22, v20, v19);
    }
    *a4 = v19;
    goto LABEL_42;
  }
  *(_QWORD *)(v21 + 104) = v20;
  *(_DWORD *)(v21 + 112) = v19;
  *(_QWORD *)(v21 + 128) = v22;
  *(_DWORD *)(v21 + 136) = v23;
  v28 = (char *)inflate((z_streamp)(v21 + 104), 0);
  if (v28 >= 2)
  {
    v39 = v28;
    v24 = "File decompression failed (%d)";
    goto LABEL_8;
  }
  *a4 = v19 - *(unsigned int *)(v21 + 112);
  v29 = *(unsigned int *)(v21 + 136);
LABEL_41:
  v19 = v23 - v29;
LABEL_42:
  *a3 = v19;
  v33 = *a4;
  v34 = *a2;
  v35 = **(_QWORD **)(a1 + 2472);
  v36 = *(_DWORD *)(v35 + 452);
  if (v36 == 2)
  {
    sub_1DB733908((CC_MD5_CTX *)(v35 + 456), v20, v33);
  }
  else if (v36 == 1)
  {
    sub_1DB733974((CC_SHA1_CTX *)(v35 + 548), v20, v33);
  }
  v37 = *(_DWORD *)(v35 + 644);
  if (v37 == 2)
  {
    sub_1DB733908((CC_MD5_CTX *)(v35 + 648), v34, v19);
  }
  else if (v37 == 1)
  {
    sub_1DB733974((CC_SHA1_CTX *)(v35 + 740), v34, v19);
  }
  return 0;
}

uint64_t sub_1DB725B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v16;

  v8 = **(_QWORD **)(a1 + 2472);
  v14 = sub_1DB7282F0(v8 + 452, a2, a3);
  if ((_DWORD)v14 || (v14 = sub_1DB7282F0(v8 + 644, a4, a5), (_DWORD)v14))
    archive_set_error((_DWORD *)a1, -1, "Sumcheck error", v9, v10, v11, v12, v13, v16);
  return v14;
}

uint64_t sub_1DB725B84(uint64_t **ioctx)
{
  xmlTextReader *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  xmlTextReader *v8;
  int v9;
  int v10;
  char *v11;
  int IsEmptyElement;
  uint64_t Attribute;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  const char *v21;
  char *v22;
  const char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  xmlChar *v27;
  size_t v28;
  size_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t *v37;
  int v38;
  uint64_t v39;
  char *v40;
  int v41;
  uint64_t v43;
  char *v44;
  int v45;
  uint64_t v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  size_t v83;
  xmlChar *v84;
  int v85;
  __int16 v86;
  uint64_t v87;
  int v88;
  uint64_t *v89;
  uint64_t v90;
  size_t v91;
  _BYTE *v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  char *v99;
  int v100;
  uint64_t v102;
  char *v103;
  int v104;
  uint64_t v106;
  char *v107;
  int v108;
  uint64_t v110;
  char *v111;
  int v112;
  uint64_t v114;
  char *v115;
  int v116;
  uint64_t v118;
  char *v119;
  int v120;
  uint64_t v122;
  char *v123;
  int v124;
  uint64_t v126;
  char *v127;
  int v128;
  uint64_t v130;
  char *v131;
  int v132;
  uint64_t v134;
  char *v135;
  int v136;
  uint64_t v138;
  char *v139;
  int v140;
  uint64_t v142;
  char *v143;
  int v144;
  int v146;
  int v147;
  int v148;
  char *v149;
  int v150;
  _QWORD *v151;
  _QWORD *v152;
  uint64_t **v153;
  const char *v154;
  size_t v155;
  unsigned int v156;
  uint64_t v157;
  size_t v158;
  char *v159;
  int v160;
  _QWORD *v162;
  _QWORD *v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t **v167;
  const char *v168;
  size_t v169;
  unsigned int v170;
  uint64_t v171;
  unsigned int v172;
  size_t v173;
  char *v174;
  int v175;
  uint64_t v177;
  uint64_t v178;
  _DWORD *v179;
  uint64_t **i;
  char *v182;
  _QWORD *v183;
  _QWORD *v184;
  uint64_t **v185;
  uint64_t ***v186;
  _BYTE v187[256];
  uint64_t v188;

  v188 = *MEMORY[0x1E0C80C00];
  v2 = xmlReaderForIO((xmlInputReadCallback)sub_1DB7274CC, (xmlInputCloseCallback)sub_1DB727560, ioctx, 0, 0, 0);
  if (v2)
  {
    v8 = v2;
    v185 = 0;
    v186 = 0;
    xmlTextReaderSetErrorHandler(v2, (xmlTextReaderErrorFunc)sub_1DB727568, ioctx);
    v9 = xmlTextReaderRead(v8);
    if (v9 == 1)
    {
      while (1)
      {
        v10 = xmlTextReaderNodeType(v8);
        v11 = (char *)xmlTextReaderConstLocalName(v8);
        if (v10 != 15)
        {
          if (v10 == 3)
          {
            v27 = (xmlChar *)xmlTextReaderConstValue(v8);
            v28 = strlen((const char *)v27);
            v29 = v28;
            v30 = *ioctx[309];
            v31 = *(_DWORD *)(v30 + 40);
            if (v31 == 6)
            {
              if ((_DWORD)v28 && (v34 = (char)*v27 - 48, v34 <= 9))
              {
                v35 = 0;
                v43 = (int)v28 - 1;
                v44 = (char *)(v27 + 1);
                do
                {
                  v45 = *v44++;
                  v35 = 10 * v35 + v34;
                  v34 = v45 - 48;
                }
                while ((v45 - 48) <= 9 && v43-- != 0);
              }
              else
              {
                v35 = 0;
              }
              *(_QWORD *)(v30 + 88) = v35;
            }
            else if (v31 == 5)
            {
              if ((_DWORD)v28 && (v32 = (char)*v27 - 48, v32 <= 9))
              {
                v33 = 0;
                v39 = (int)v28 - 1;
                v40 = (char *)(v27 + 1);
                do
                {
                  v41 = *v40++;
                  v33 = 10 * v33 + v32;
                  v32 = v41 - 48;
                }
                while ((v41 - 48) <= 9 && v39-- != 0);
              }
              else
              {
                v33 = 0;
              }
              *(_QWORD *)(v30 + 80) = v33;
            }
            v47 = *(_QWORD *)(v30 + 840);
            if (v47)
            {
              switch(v31)
              {
                case 9:
                  *(_DWORD *)(v47 + 28) |= 1u;
                  if ((_DWORD)v28 && (v49 = (char)*v27 - 48, v49 <= 9))
                  {
                    v50 = 0;
                    v98 = (int)v28 - 1;
                    v99 = (char *)(v27 + 1);
                    do
                    {
                      v100 = *v99++;
                      v50 = 10 * v50 + v49;
                      v49 = v100 - 48;
                    }
                    while ((v100 - 48) <= 9 && v98-- != 0);
                  }
                  else
                  {
                    v50 = 0;
                  }
                  *(_QWORD *)(v47 + 40) = v50;
                  goto LABEL_33;
                case 10:
                  *(_DWORD *)(v47 + 28) |= 1u;
                  if ((_DWORD)v28 && (v51 = (char)*v27 - 48, v51 <= 9))
                  {
                    v52 = 0;
                    v102 = (int)v28 - 1;
                    v103 = (char *)(v27 + 1);
                    do
                    {
                      v104 = *v103++;
                      v52 = 10 * v52 + v51;
                      v51 = v104 - 48;
                    }
                    while ((v104 - 48) <= 9 && v102-- != 0);
                  }
                  else
                  {
                    v52 = 0;
                  }
                  *(_QWORD *)(v47 + 48) = v52;
                  goto LABEL_33;
                case 11:
                  *(_DWORD *)(v47 + 28) |= 1u;
                  if ((_DWORD)v28 && (v53 = (char)*v27 - 48, v53 <= 9))
                  {
                    v54 = 0;
                    v106 = (int)v28 - 1;
                    v107 = (char *)(v27 + 1);
                    do
                    {
                      v108 = *v107++;
                      v54 = 10 * v54 + v53;
                      v53 = v108 - 48;
                    }
                    while ((v108 - 48) <= 9 && v106-- != 0);
                  }
                  else
                  {
                    v54 = 0;
                  }
                  *(_QWORD *)(v47 + 56) = v54;
                  goto LABEL_33;
                case 13:
                  v55 = sub_1DB728230(v47 + 88, v27, (int)v28);
                  v56 = *(_QWORD *)(v30 + 840);
                  goto LABEL_73;
                case 14:
                  v57 = sub_1DB728230(v47 + 128, v27, (int)v28);
                  v58 = *(_QWORD *)(v30 + 840);
                  goto LABEL_75;
                case 17:
                  *(_DWORD *)(v47 + 28) |= 0x2000u;
                  if ((_DWORD)v28 && (v59 = (char)*v27 - 48, v59 <= 9))
                  {
                    v60 = 0;
                    v110 = (int)v28 - 1;
                    v111 = (char *)(v27 + 1);
                    do
                    {
                      v112 = *v111++;
                      v60 = 10 * v60 + v59;
                      v59 = v112 - 48;
                    }
                    while ((v112 - 48) <= 9 && v110-- != 0);
                  }
                  else
                  {
                    v60 = 0;
                  }
                  *(_QWORD *)(*(_QWORD *)(v30 + 848) + 40) = v60;
                  goto LABEL_33;
                case 18:
                  *(_DWORD *)(v47 + 28) |= 0x2000u;
                  if ((_DWORD)v28 && (v61 = (char)*v27 - 48, v61 <= 9))
                  {
                    v62 = 0;
                    v114 = (int)v28 - 1;
                    v115 = (char *)(v27 + 1);
                    do
                    {
                      v116 = *v115++;
                      v62 = 10 * v62 + v61;
                      v61 = v116 - 48;
                    }
                    while ((v116 - 48) <= 9 && v114-- != 0);
                  }
                  else
                  {
                    v62 = 0;
                  }
                  *(_QWORD *)(*(_QWORD *)(v30 + 848) + 48) = v62;
                  goto LABEL_33;
                case 19:
                  *(_DWORD *)(v47 + 28) |= 0x2000u;
                  if ((_DWORD)v28 && (v63 = (char)*v27 - 48, v63 <= 9))
                  {
                    v64 = 0;
                    v118 = (int)v28 - 1;
                    v119 = (char *)(v27 + 1);
                    do
                    {
                      v120 = *v119++;
                      v64 = 10 * v64 + v63;
                      v63 = v120 - 48;
                    }
                    while ((v120 - 48) <= 9 && v118-- != 0);
                  }
                  else
                  {
                    v64 = 0;
                  }
                  *(_QWORD *)(*(_QWORD *)(v30 + 848) + 56) = v64;
                  goto LABEL_33;
                case 21:
                  *(_DWORD *)(v47 + 28) |= 0x2000u;
                  v55 = sub_1DB728230(*(_QWORD *)(v30 + 848) + 88, v27, (int)v28);
                  v56 = *(_QWORD *)(v30 + 848);
LABEL_73:
                  *(_QWORD *)(v56 + 80) = v55;
                  goto LABEL_33;
                case 22:
                  *(_DWORD *)(v47 + 28) |= 0x2000u;
                  v57 = sub_1DB728230(*(_QWORD *)(v30 + 848) + 128, v27, (int)v28);
                  v58 = *(_QWORD *)(v30 + 848);
LABEL_75:
                  *(_QWORD *)(v58 + 120) = v57;
                  goto LABEL_33;
                case 23:
                  *(_DWORD *)(v47 + 28) |= 0x2000u;
                  v65 = *(_QWORD *)(v30 + 848);
                  v66 = (uint64_t *)(v65 + 8);
                  *(_QWORD *)(v65 + 16) = 0;
                  goto LABEL_107;
                case 24:
                  *(_DWORD *)(v47 + 28) |= 0x2000u;
                  v67 = *(_QWORD *)(v30 + 848);
                  v66 = (uint64_t *)(v67 + 152);
                  *(_QWORD *)(v67 + 160) = 0;
                  goto LABEL_107;
                case 25:
                  *(_DWORD *)(v47 + 28) |= 0x8008u;
                  *(_QWORD *)(*(_QWORD *)(v30 + 840) + 200) = sub_1DB727FD0((char *)v27, (int)v28);
                  goto LABEL_33;
                case 26:
                  *(_DWORD *)(v47 + 28) |= 0x10008u;
                  *(_QWORD *)(*(_QWORD *)(v30 + 840) + 208) = sub_1DB727FD0((char *)v27, (int)v28);
                  goto LABEL_33;
                case 27:
                  *(_DWORD *)(v47 + 28) |= 0x20008u;
                  *(_QWORD *)(*(_QWORD *)(v30 + 840) + 216) = sub_1DB727FD0((char *)v27, (int)v28);
                  goto LABEL_33;
                case 28:
                  *(_DWORD *)(v47 + 28) |= 0x20u;
                  v66 = (uint64_t *)(v47 + 256);
                  *(_QWORD *)(v47 + 264) = 0;
                  goto LABEL_107;
                case 29:
                  *(_DWORD *)(v47 + 28) |= 0x20u;
                  if ((_DWORD)v28 && (v68 = (char)*v27 - 48, v68 <= 9))
                  {
                    v69 = 0;
                    v122 = (int)v28 - 1;
                    v123 = (char *)(v27 + 1);
                    do
                    {
                      v124 = *v123++;
                      v69 = 10 * v69 + v68;
                      v68 = v124 - 48;
                    }
                    while ((v124 - 48) <= 9 && v122-- != 0);
                  }
                  else
                  {
                    v69 = 0;
                  }
                  *(_QWORD *)(v47 + 280) = v69;
                  goto LABEL_33;
                case 30:
                  *(_DWORD *)(v47 + 28) |= 0x10u;
                  v66 = (uint64_t *)(v47 + 224);
                  *(_QWORD *)(v47 + 232) = 0;
                  goto LABEL_107;
                case 31:
                  *(_DWORD *)(v47 + 28) |= 0x10u;
                  if ((_DWORD)v28 && (v70 = (char)*v27 - 48, v70 <= 9))
                  {
                    v71 = 0;
                    v126 = (int)v28 - 1;
                    v127 = (char *)(v27 + 1);
                    do
                    {
                      v128 = *v127++;
                      v71 = 10 * v71 + v70;
                      v70 = v128 - 48;
                    }
                    while ((v128 - 48) <= 9 && v126-- != 0);
                  }
                  else
                  {
                    v71 = 0;
                  }
                  *(_QWORD *)(v47 + 248) = v71;
                  goto LABEL_33;
                case 32:
                  *(_DWORD *)(v47 + 28) |= 0x40u;
                  v72 = 0;
                  if ((_DWORD)v28)
                  {
                    v73 = (int)v28;
                    do
                    {
                      v74 = *v27;
                      if ((v74 & 0xF8) != 0x30)
                        break;
                      ++v27;
                      v72 = (v74 - 48) | (8 * v72);
                      --v73;
                    }
                    while (v73);
                  }
                  *(_WORD *)(v47 + 288) = v72 & 0xFFF | *(_WORD *)(v47 + 288) & 0xF000;
                  goto LABEL_33;
                case 34:
                  *(_DWORD *)(v47 + 28) |= 0x200u;
                  if ((_DWORD)v28 && (v75 = (char)*v27 - 48, v75 <= 9))
                  {
                    v76 = 0;
                    v130 = (int)v28 - 1;
                    v131 = (char *)(v27 + 1);
                    do
                    {
                      v132 = *v131++;
                      v76 = v75 + 10 * v76;
                      v75 = v132 - 48;
                    }
                    while ((v132 - 48) <= 9 && v130-- != 0);
                  }
                  else
                  {
                    v76 = 0;
                  }
                  *(_DWORD *)(v47 + 296) = v76;
                  goto LABEL_33;
                case 35:
                  *(_DWORD *)(v47 + 28) |= 0x400u;
                  if ((_DWORD)v28 && (v77 = (char)*v27 - 48, v77 <= 9))
                  {
                    v78 = 0;
                    v134 = (int)v28 - 1;
                    v135 = (char *)(v27 + 1);
                    do
                    {
                      v136 = *v135++;
                      v78 = v77 + 10 * v78;
                      v77 = v136 - 48;
                    }
                    while ((v136 - 48) <= 9 && v134-- != 0);
                  }
                  else
                  {
                    v78 = 0;
                  }
                  *(_DWORD *)(v47 + 300) = v78;
                  goto LABEL_33;
                case 36:
                  *(_DWORD *)(v47 + 28) |= 0x100u;
                  if ((_DWORD)v28 && (v79 = (char)*v27 - 48, v79 <= 9))
                  {
                    v80 = 0;
                    v138 = (int)v28 - 1;
                    v139 = (char *)(v27 + 1);
                    do
                    {
                      v140 = *v139++;
                      v80 = v79 + 10 * v80;
                      v79 = v140 - 48;
                    }
                    while ((v140 - 48) <= 9 && v138-- != 0);
                  }
                  else
                  {
                    v80 = 0;
                  }
                  *(_DWORD *)(v47 + 292) = v80;
                  goto LABEL_33;
                case 37:
                  *(_DWORD *)(v47 + 28) |= 0x800u;
                  if ((_DWORD)v28 && (v81 = (char)*v27 - 48, v81 <= 9))
                  {
                    v82 = 0;
                    v142 = (int)v28 - 1;
                    v143 = (char *)(v27 + 1);
                    do
                    {
                      v144 = *v143++;
                      v82 = 10 * v82 + v81;
                      v81 = v144 - 48;
                    }
                    while ((v144 - 48) <= 9 && v142-- != 0);
                  }
                  else
                  {
                    v82 = 0;
                  }
                  *(_QWORD *)(v47 + 304) = v82;
                  goto LABEL_33;
                case 38:
                  *(_DWORD *)(v47 + 28) |= 4u;
                  v66 = (uint64_t *)(v47 + 176);
                  *(_QWORD *)(v47 + 184) = 0;
LABEL_107:
                  v83 = (int)v29;
                  v84 = v27;
                  goto LABEL_108;
                case 39:
                  v85 = v28 - 4;
                  if ((_DWORD)v28 == 4 && !memcmp(v27, "file", 4uLL)
                    || v29 << 32 == 0x800000000 && !memcmp(v27, "hardlink", (int)v29))
                  {
                    *(_WORD *)(v47 + 288) = *(_WORD *)(v47 + 288) & 0xFFF | 0x8000;
                  }
                  switch(v85)
                  {
                    case 0:
                      if (!memcmp(v27, "fifo", (int)v29))
                      {
                        v86 = 4096;
                        goto LABEL_323;
                      }
                      break;
                    case 2:
                      if (!memcmp(v27, "socket", (int)v29))
                      {
                        v86 = -16384;
                        goto LABEL_323;
                      }
                      break;
                    case 3:
                      if (!memcmp(v27, "symlink", (int)v29))
                      {
                        v86 = -24576;
                        goto LABEL_323;
                      }
                      break;
                    case 5:
                      if (!memcmp(v27, "directory", (int)v29))
                      {
                        v86 = 0x4000;
                        goto LABEL_323;
                      }
                      break;
                    case 9:
                      if (!memcmp(v27, "block special", (int)v29))
                      {
                        v86 = 24576;
                        goto LABEL_323;
                      }
                      break;
                    case 13:
                      if (!memcmp(v27, "character special", (int)v29))
                      {
                        v86 = 0x2000;
LABEL_323:
                        *(_WORD *)(v47 + 288) = *(_WORD *)(v47 + 288) & 0xFFF | v86;
                      }
                      break;
                    default:
                      break;
                  }
                  v48 = *(_DWORD *)(v47 + 28) | 0x80;
                  goto LABEL_325;
                case 40:
                  v87 = *(_QWORD *)(v47 + 16);
                  if (v87)
                  {
                    sub_1DB6E4384((uint64_t *)(v47 + 152), v87 + 152);
                    sub_1DB72CE60((uint64_t *)(*(_QWORD *)(v30 + 840) + 152), 47);
                    v47 = *(_QWORD *)(v30 + 840);
                  }
                  *(_DWORD *)(v47 + 28) |= 2u;
                  v88 = *(_DWORD *)(v30 + 56);
                  v89 = (uint64_t *)(v47 + 152);
                  v90 = (int)v29;
                  if (!v88)
                  {
                    v66 = v89;
                    v84 = v27;
                    v83 = (int)v29;
LABEL_108:
                    sub_1DB6E323C(v66, v84, v83);
                    goto LABEL_33;
                  }
                  if (v29 << 32)
                  {
                    v91 = 0;
                    v92 = v187;
                    while (1)
                    {
                      v93 = dword_1DB74D250[*v27];
                      if (v93 < 0)
                        break;
                      v94 = dword_1DB74D250[v27[1]];
                      if (v94 < 0)
                        break;
                      v95 = v94 << 12;
                      *v92 = (v95 | (v93 << 18)) >> 16;
                      v83 = v91 + 1;
                      if (v90 == 2)
                      {
                        v90 = 0;
                        ++v92;
                        v27 += 2;
                      }
                      else
                      {
                        v96 = dword_1DB74D250[v27[2]];
                        if (v96 < 0)
                          goto LABEL_221;
                        v92[1] = (unsigned __int16)(v95 | ((_WORD)v96 << 6)) >> 8;
                        v83 = v91 + 2;
                        if (v90 == 3)
                        {
                          v90 = 0;
                          v92 += 2;
                          v27 += 3;
                        }
                        else
                        {
                          v97 = dword_1DB74D250[v27[3]];
                          if (v97 < 0)
                            goto LABEL_221;
                          v27 += 4;
                          v92[2] = v97 | ((_BYTE)v96 << 6);
                          v92 += 3;
                          v83 = v91 + 3;
                          v90 -= 4;
                        }
                      }
                      if (v83 - 253 <= 0xFFFFFFFFFFFFFEFFLL)
                      {
                        v92 = v187;
                        sub_1DB6E323C(v89, v187, v83);
                        v83 = 0;
                      }
                      v91 = v83;
                      if (!v90)
                        goto LABEL_221;
                    }
                    v83 = v91;
LABEL_221:
                    if (v83)
                    {
                      v84 = v187;
                      v66 = v89;
                      goto LABEL_108;
                    }
                  }
                  break;
                case 42:
                case 43:
                case 44:
                  v48 = *(_DWORD *)(v47 + 28) | 0x4000;
LABEL_325:
                  *(_DWORD *)(v47 + 28) = v48;
                  goto LABEL_33;
                default:
                  goto LABEL_33;
              }
            }
            goto LABEL_33;
          }
          if (v10 != 1)
            goto LABEL_33;
          IsEmptyElement = xmlTextReaderIsEmptyElement(v8);
          v185 = 0;
          v186 = &v185;
          Attribute = xmlTextReaderMoveToFirstAttribute(v8);
          if ((_DWORD)Attribute != 1)
            goto LABEL_12;
          do
          {
            v14 = malloc_type_malloc(0x18uLL, 0x30040F310086FuLL);
            if (!v14)
              goto LABEL_26;
            v20 = v14;
            v21 = (const char *)xmlTextReaderConstLocalName(v8);
            v22 = strdup(v21);
            v20[1] = v22;
            if (!v22)
              goto LABEL_25;
            v23 = (const char *)xmlTextReaderConstValue(v8);
            v24 = strdup(v23);
            v20[2] = v24;
            if (!v24)
            {
              free((void *)v20[1]);
LABEL_25:
              free(v20);
LABEL_26:
              archive_set_error(ioctx, 12, "Out of memory", v15, v16, v17, v18, v19, v182);
LABEL_27:
              Attribute = 4294967266;
              goto LABEL_28;
            }
            *v20 = 0;
            *v186 = (uint64_t **)v20;
            v186 = (uint64_t ***)v20;
            v25 = xmlTextReaderMoveToNextAttribute(v8);
          }
          while ((_DWORD)v25 == 1);
          Attribute = v25;
LABEL_12:
          if (!(_DWORD)Attribute)
          {
            v26 = *ioctx[309];
            *(_DWORD *)(v26 + 56) = 0;
            switch(*(_DWORD *)(v26 + 40))
            {
              case 0:
                if (strcmp(v11, "xar"))
                  goto LABEL_14;
                v146 = 1;
                goto LABEL_225;
              case 1:
                if (strcmp(v11, "toc"))
                  goto LABEL_14;
                v147 = 2;
                goto LABEL_404;
              case 2:
                if (!strcmp(v11, "creation-time"))
                {
                  v147 = 3;
                  goto LABEL_404;
                }
                if (!strcmp(v11, "checksum"))
                {
                  v147 = 4;
                  goto LABEL_404;
                }
                if (strcmp(v11, "file"))
                  goto LABEL_14;
                if (!sub_1DB727B80(ioctx, v26, &v185))
                {
                  v147 = 7;
                  goto LABEL_404;
                }
                goto LABEL_27;
              case 3:
              case 5:
              case 6:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
              case 0xD:
              case 0xE:
              case 0xF:
              case 0x11:
              case 0x12:
              case 0x13:
              case 0x14:
              case 0x15:
              case 0x16:
              case 0x17:
              case 0x18:
              case 0x19:
              case 0x1A:
              case 0x1B:
              case 0x1C:
              case 0x1D:
              case 0x1E:
              case 0x1F:
              case 0x20:
              case 0x22:
              case 0x23:
              case 0x24:
              case 0x25:
              case 0x26:
              case 0x27:
              case 0x28:
              case 0x2A:
              case 0x2B:
              case 0x2C:
              case 0x2E:
              case 0x2F:
              case 0x30:
              case 0x31:
              case 0x32:
              case 0x33:
              case 0x34:
              case 0x35:
              case 0x36:
              case 0x37:
              case 0x39:
              case 0x3A:
              case 0x3B:
              case 0x3C:
              case 0x3D:
              case 0x3E:
              case 0x3F:
              case 0x40:
              case 0x41:
              case 0x42:
              case 0x43:
              case 0x44:
              case 0x45:
              case 0x46:
              case 0x47:
              case 0x48:
              case 0x49:
              case 0x4A:
              case 0x4B:
              case 0x4C:
              case 0x4D:
                goto LABEL_14;
              case 4:
                if (!strcmp(v11, "offset"))
                {
                  v147 = 5;
                }
                else
                {
                  if (strcmp(v11, "size"))
                    goto LABEL_14;
                  v147 = 6;
                }
                goto LABEL_404;
              case 7:
                if (!strcmp(v11, "file"))
                {
                  if (sub_1DB727B80(ioctx, v26, &v185))
                    goto LABEL_27;
                }
                else
                {
                  if (!strcmp(v11, "data"))
                  {
                    v147 = 8;
                    goto LABEL_404;
                  }
                  if (!strcmp(v11, "ea"))
                  {
                    v151 = malloc_type_calloc(1uLL, 0xB0uLL, 0x1030040E9BF76DFuLL);
                    if (!v151)
                      goto LABEL_26;
                    v152 = v151;
                    *(_QWORD *)(v26 + 848) = v151;
                    v153 = v185;
                    if (v185)
                    {
                      v183 = v151;
                      do
                      {
                        if (!strcmp((const char *)v153[1], "id"))
                        {
                          v154 = (const char *)v153[2];
                          v155 = strlen(v154);
                          if (v155 && (v156 = *v154 - 48, v156 <= 9))
                          {
                            v157 = 0;
                            v158 = v155 - 1;
                            v159 = (char *)(v154 + 1);
                            do
                            {
                              v160 = *v159++;
                              v157 = 10 * v157 + v156;
                              v156 = v160 - 48;
                            }
                            while ((v160 - 48) <= 9 && v158-- != 0);
                          }
                          else
                          {
                            v157 = 0;
                          }
                          v152 = v183;
                          v183[4] = v157;
                        }
                        v153 = (uint64_t **)*v153;
                      }
                      while (v153);
                    }
                    v162 = (_QWORD *)(*(_QWORD *)(v26 + 840) + 368);
                    do
                    {
                      v163 = v162;
                      v162 = (_QWORD *)*v162;
                    }
                    while (v162 && v152[4] >= v162[4]);
                    *v152 = v162;
                    *v163 = v152;
                    v147 = 16;
                    goto LABEL_404;
                  }
                  if (!strcmp(v11, "ctime"))
                  {
                    v147 = 25;
                    goto LABEL_404;
                  }
                  if (!strcmp(v11, "mtime"))
                  {
                    v147 = 26;
                    goto LABEL_404;
                  }
                  if (!strcmp(v11, "atime"))
                  {
                    v147 = 27;
                    goto LABEL_404;
                  }
                  if (!strcmp(v11, "group"))
                  {
                    v147 = 28;
                    goto LABEL_404;
                  }
                  if (!strcmp(v11, "gid"))
                  {
                    v147 = 29;
                    goto LABEL_404;
                  }
                  if (!strcmp(v11, "user"))
                  {
                    v147 = 30;
                    goto LABEL_404;
                  }
                  if (!strcmp(v11, "uid"))
                  {
                    v147 = 31;
                    goto LABEL_404;
                  }
                  if (!strcmp(v11, "mode"))
                  {
                    v147 = 32;
                    goto LABEL_404;
                  }
                  if (!strcmp(v11, "device"))
                  {
                    v147 = 33;
                    goto LABEL_404;
                  }
                  if (!strcmp(v11, "deviceno"))
                  {
                    v147 = 36;
                    goto LABEL_404;
                  }
                  if (!strcmp(v11, "inode"))
                  {
                    v147 = 37;
                    goto LABEL_404;
                  }
                  if (!strcmp(v11, "link"))
                  {
                    v147 = 38;
                    goto LABEL_404;
                  }
                  if (!strcmp(v11, "type"))
                  {
                    *(_DWORD *)(v26 + 40) = 39;
                    v167 = v185;
                    if (!v185)
                      goto LABEL_15;
                    v184 = (_QWORD *)(v26 + 880);
                    while (1)
                    {
                      if (!strcmp((const char *)v167[1], "link"))
                      {
                        v168 = (const char *)v167[2];
                        if (!strcmp(v168, "original"))
                        {
                          v171 = *(_QWORD *)(v26 + 840);
                          *(_QWORD *)(v171 + 8) = *(_QWORD *)(v26 + 872);
                          *(_QWORD *)(v26 + 872) = v171;
                        }
                        else
                        {
                          v169 = strlen(v168);
                          if (v169 && (v170 = *v168 - 48, v170 <= 9))
                          {
                            v172 = 0;
                            v173 = v169 - 1;
                            v174 = (char *)(v168 + 1);
                            do
                            {
                              v175 = *v174++;
                              v172 = v170 + 10 * v172;
                              v170 = v175 - 48;
                            }
                            while ((v175 - 48) <= 9 && v173-- != 0);
                            v177 = *(_QWORD *)(v26 + 840);
                            *(_DWORD *)(v177 + 336) = v172;
                            if (!v172)
                              goto LABEL_414;
                            v178 = v26 + 880;
                            while (1)
                            {
                              v178 = *(_QWORD *)v178;
                              if (!v178)
                                break;
                              if (*(_DWORD *)(v178 + 8) == v172)
                              {
                                *(_QWORD *)(v177 + 8) = *(_QWORD *)(v178 + 16);
                                ++*(_DWORD *)(v178 + 12);
                                *(_QWORD *)(v178 + 16) = v177;
                                goto LABEL_414;
                              }
                            }
                            v179 = malloc_type_malloc(0x18uLL, 0x102004014030ADEuLL);
                            if (!v179)
                              goto LABEL_26;
                            *(_QWORD *)(v177 + 8) = 0;
                            v179[2] = *(_DWORD *)(v177 + 336);
                            v179[3] = 1;
                            *((_QWORD *)v179 + 2) = v177;
                            *(_QWORD *)v179 = *v184;
                            *v184 = v179;
                          }
                          else
                          {
                            *(_DWORD *)(*(_QWORD *)(v26 + 840) + 336) = 0;
                          }
                        }
                      }
LABEL_414:
                      v167 = (uint64_t **)*v167;
                      if (!v167)
                        goto LABEL_15;
                    }
                  }
                  if (strcmp(v11, "name"))
                  {
                    if (!strcmp(v11, "acl"))
                    {
                      v147 = 41;
                    }
                    else if (!strcmp(v11, "flags"))
                    {
                      v147 = 45;
                    }
                    else
                    {
                      if (strcmp(v11, "ext2"))
                        goto LABEL_14;
                      v147 = 56;
                    }
LABEL_404:
                    *(_DWORD *)(v26 + 40) = v147;
                    goto LABEL_15;
                  }
                  *(_DWORD *)(v26 + 40) = 40;
                  for (i = v185; i; i = (uint64_t **)*i)
                  {
                    if (!strcmp((const char *)i[1], "enctype") && !strcmp((const char *)i[2], "base64"))
                      *(_DWORD *)(v26 + 56) = 1;
                  }
                }
                goto LABEL_15;
              case 8:
                if (!strcmp(v11, "length"))
                {
                  v147 = 9;
                  goto LABEL_404;
                }
                if (!strcmp(v11, "offset"))
                {
                  *(_DWORD *)(v26 + 40) = 10;
                  goto LABEL_15;
                }
                if (!strcmp(v11, "size"))
                {
                  v147 = 11;
                  goto LABEL_404;
                }
                if (!strcmp(v11, "encoding"))
                {
                  *(_DWORD *)(v26 + 40) = 12;
                  v164 = sub_1DB727D74(&v185);
                  v165 = *(_QWORD *)(v26 + 840);
                  goto LABEL_369;
                }
                if (!strcmp(v11, "archived-checksum"))
                {
                  *(_DWORD *)(v26 + 40) = 13;
                  *(_DWORD *)(*(_QWORD *)(v26 + 840) + 72) = sub_1DB727E8C(&v185);
                  goto LABEL_15;
                }
                if (!strcmp(v11, "extracted-checksum"))
                {
                  *(_DWORD *)(v26 + 40) = 14;
                  *(_DWORD *)(*(_QWORD *)(v26 + 840) + 112) = sub_1DB727E8C(&v185);
                  goto LABEL_15;
                }
                if (strcmp(v11, "content"))
                  goto LABEL_14;
                v147 = 15;
                goto LABEL_404;
              case 0x10:
                if (!strcmp(v11, "length"))
                {
                  v147 = 17;
                  goto LABEL_404;
                }
                if (!strcmp(v11, "offset"))
                {
                  v147 = 18;
                  goto LABEL_404;
                }
                if (!strcmp(v11, "size"))
                {
                  v147 = 19;
                  goto LABEL_404;
                }
                if (!strcmp(v11, "encoding"))
                {
                  *(_DWORD *)(v26 + 40) = 20;
                  v164 = sub_1DB727D74(&v185);
                  v165 = *(_QWORD *)(v26 + 848);
LABEL_369:
                  *(_DWORD *)(v165 + 64) = v164;
                }
                else
                {
                  if (!strcmp(v11, "archived-checksum"))
                  {
                    v147 = 21;
                    goto LABEL_404;
                  }
                  if (!strcmp(v11, "extracted-checksum"))
                  {
                    v147 = 22;
                    goto LABEL_404;
                  }
                  if (!strcmp(v11, "name"))
                  {
                    v147 = 23;
                    goto LABEL_404;
                  }
                  if (strcmp(v11, "fstype"))
                    goto LABEL_14;
                  v146 = 24;
LABEL_225:
                  *(_DWORD *)(v26 + 40) = v146;
                }
                goto LABEL_15;
              case 0x21:
                if (!strcmp(v11, "major"))
                {
                  v147 = 34;
                }
                else
                {
                  if (strcmp(v11, "minor"))
                    goto LABEL_14;
                  v147 = 35;
                }
                goto LABEL_404;
              case 0x29:
                if (!strcmp(v11, "appleextended"))
                {
                  v147 = 44;
                }
                else if (!strcmp(v11, "default"))
                {
                  v147 = 42;
                }
                else
                {
                  if (strcmp(v11, "access"))
                    goto LABEL_14;
                  v147 = 43;
                }
                goto LABEL_404;
              case 0x2D:
                if (!strcmp(v11, "UserNoDump"))
                {
                  v148 = 46;
                  v149 = "nodump";
                }
                else if (!strcmp(v11, "UserImmutable"))
                {
                  v148 = 47;
                  v149 = "uimmutable";
                }
                else if (!strcmp(v11, "UserAppend"))
                {
                  v148 = 48;
                  v149 = "uappend";
                }
                else if (!strcmp(v11, "UserOpaque"))
                {
                  v148 = 49;
                  v149 = "opaque";
                }
                else if (!strcmp(v11, "UserNoUnlink"))
                {
                  v148 = 50;
                  v149 = "nouunlink";
                }
                else if (!strcmp(v11, "SystemArchived"))
                {
                  v148 = 51;
                  v149 = "archived";
                }
                else if (!strcmp(v11, "SystemImmutable"))
                {
                  v148 = 52;
                  v149 = "simmutable";
                }
                else if (!strcmp(v11, "SystemAppend"))
                {
                  v148 = 53;
                  v149 = "sappend";
                }
                else if (!strcmp(v11, "SystemNoUnlink"))
                {
                  v148 = 54;
                  v149 = "nosunlink";
                }
                else
                {
                  if (strcmp(v11, "SystemSnapshot"))
                    goto LABEL_14;
                  v148 = 55;
                  v149 = "snapshot";
                }
                *(_DWORD *)(v26 + 40) = v148;
                v166 = *(_QWORD *)(v26 + 840);
                *(_DWORD *)(v166 + 28) |= 0x1000u;
                goto LABEL_442;
              case 0x38:
                if (!strcmp(v11, "SecureDeletion"))
                {
                  v150 = 57;
                  v149 = "securedeletion";
                  goto LABEL_441;
                }
                if (!strcmp(v11, "Undelete"))
                {
                  v150 = 58;
                  v149 = "nouunlink";
                  goto LABEL_441;
                }
                if (!strcmp(v11, "Compress"))
                {
                  v150 = 59;
                  v149 = "compress";
                  goto LABEL_441;
                }
                if (!strcmp(v11, "Synchronous"))
                {
                  v150 = 60;
                  v149 = "sync";
                  goto LABEL_441;
                }
                if (!strcmp(v11, "Immutable"))
                {
                  v150 = 61;
                  v149 = "simmutable";
                  goto LABEL_441;
                }
                if (!strcmp(v11, "AppendOnly"))
                {
                  v150 = 62;
                  v149 = "sappend";
                  goto LABEL_441;
                }
                if (!strcmp(v11, "NoDump"))
                {
                  v150 = 63;
                  v149 = "nodump";
                  goto LABEL_441;
                }
                if (!strcmp(v11, "NoAtime"))
                {
                  v150 = 64;
                  v149 = "noatime";
                  goto LABEL_441;
                }
                if (!strcmp(v11, "CompDirty"))
                {
                  v150 = 65;
                  v149 = "compdirty";
                  goto LABEL_441;
                }
                if (!strcmp(v11, "CompBlock"))
                {
                  v150 = 66;
                  v149 = "comprblk";
                  goto LABEL_441;
                }
                if (!strcmp(v11, "NoCompBlock"))
                {
                  v150 = 67;
                  v149 = "nocomprblk";
                  goto LABEL_441;
                }
                if (!strcmp(v11, "CompError"))
                {
                  v150 = 68;
                  v149 = "comperr";
                  goto LABEL_441;
                }
                if (!strcmp(v11, "BTree"))
                {
                  v150 = 69;
                  v149 = "btree";
                  goto LABEL_441;
                }
                if (!strcmp(v11, "HashIndexed"))
                {
                  v150 = 70;
                  v149 = "hashidx";
                  goto LABEL_441;
                }
                if (!strcmp(v11, "iMagic"))
                {
                  v150 = 71;
                  v149 = "imagic";
                  goto LABEL_441;
                }
                if (!strcmp(v11, "Journaled"))
                {
                  v150 = 72;
                  v149 = "journal";
                  goto LABEL_441;
                }
                if (!strcmp(v11, "NoTail"))
                {
                  v150 = 73;
                  v149 = "notail";
                  goto LABEL_441;
                }
                if (!strcmp(v11, "DirSync"))
                {
                  v150 = 74;
                  v149 = "dirsync";
                  goto LABEL_441;
                }
                if (!strcmp(v11, "TopDir"))
                {
                  v150 = 75;
                  v149 = "topdir";
LABEL_441:
                  *(_DWORD *)(v26 + 40) = v150;
                  v166 = *(_QWORD *)(v26 + 840);
LABEL_442:
                  if (*(_QWORD *)(v166 + 320))
                  {
                    sub_1DB72CE60((uint64_t *)(v166 + 312), 44);
                    v166 = *(_QWORD *)(v26 + 840);
                  }
                  sub_1DB72CE50((uint64_t *)(v166 + 312), v149);
                  goto LABEL_15;
                }
                if (!strcmp(v11, "Reserved"))
                {
                  v150 = 76;
                  v149 = "reserved";
                  goto LABEL_441;
                }
LABEL_14:
                if (sub_1DB727AC4(ioctx, v26, v11))
                  goto LABEL_27;
LABEL_15:
                Attribute = 0;
                break;
              default:
                goto LABEL_15;
            }
          }
LABEL_28:
          v36 = v185;
          if (v185)
          {
            do
            {
              v37 = *v36;
              free(v36[1]);
              free(v36[2]);
              free(v36);
              v36 = (uint64_t **)v37;
            }
            while (v37);
          }
          v185 = 0;
          v186 = &v185;
          if ((_DWORD)Attribute)
            return Attribute;
          if (!IsEmptyElement)
            goto LABEL_33;
        }
        sub_1DB7275A0((uint64_t)ioctx, v11);
LABEL_33:
        v38 = xmlTextReaderRead(v8);
        if (v38 != 1)
        {
          v9 = v38;
          break;
        }
      }
    }
    xmlFreeTextReader(v8);
    xmlCleanupParser();
    if (v9)
      return 4294967266;
    else
      return 0;
  }
  else
  {
    archive_set_error(ioctx, 12, "Couldn't allocate memory for xml parser", v3, v4, v5, v6, v7, v182);
    return 4294967266;
  }
}

uint64_t sub_1DB7274CC(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;

  v23 = 0;
  v8 = *(_QWORD *)(a1 + 2472);
  v9 = *(_QWORD **)v8;
  v10 = *(_QWORD *)(*(_QWORD *)v8 + 64);
  if (!v10)
    return 0;
  v24 = a3;
  v25 = a2;
  result = sub_1DB725800(a1, &v25, (unint64_t *)&v24, (size_t *)&v23, v10, a6, a7, a8);
  if (!(_DWORD)result)
  {
    v19 = v23;
    sub_1DB6E26F0(a1, v23, v13, v14, v15, v16, v17, v18);
    v20 = v9[9];
    v21 = v9[8] - v19;
    *v9 += v19;
    result = v24;
    v22 = v20 + v24;
    v9[8] = v21;
    v9[9] = v22;
  }
  return result;
}

uint64_t sub_1DB727560()
{
  return 0;
}

_DWORD *sub_1DB727568(_DWORD *result, char *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a3 - 1) <= 3)
    return archive_set_error(result, -1, "XML Parsing error: %s", a4, a5, a6, a7, a8, a2);
  return result;
}

void sub_1DB7275A0(uint64_t a1, char *__s1)
{
  uint64_t v2;
  int v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;

  v2 = **(_QWORD **)(a1 + 2472);
  switch(*(_DWORD *)(v2 + 40))
  {
    case 1:
      if (!strcmp(__s1, "xar"))
        *(_DWORD *)(v2 + 40) = 0;
      return;
    case 2:
      if (!strcmp(__s1, "toc"))
      {
        v3 = 1;
        goto LABEL_103;
      }
      return;
    case 3:
      v4 = "creation-time";
      goto LABEL_8;
    case 4:
      v4 = "checksum";
LABEL_8:
      if (!strcmp(__s1, v4))
        goto LABEL_9;
      return;
    case 5:
      v5 = "offset";
      goto LABEL_12;
    case 6:
      v5 = "size";
LABEL_12:
      if (strcmp(__s1, v5))
        return;
      v3 = 4;
      goto LABEL_103;
    case 7:
      if (strcmp(__s1, "file"))
        return;
      v6 = *(_QWORD *)(v2 + 840);
      v7 = *(_QWORD *)(v6 + 16);
      if (v7)
      {
        if ((*(_WORD *)(v6 + 288) & 0xF000) == 0x4000)
          ++*(_DWORD *)(v7 + 24);
        *(_QWORD *)(v2 + 840) = v7;
      }
      else
      {
        *(_QWORD *)(v2 + 840) = 0;
LABEL_9:
        v3 = 2;
LABEL_103:
        *(_DWORD *)(v2 + 40) = v3;
      }
      return;
    case 8:
      v8 = "data";
      goto LABEL_79;
    case 9:
      v9 = "length";
      goto LABEL_27;
    case 0xA:
      v9 = "offset";
      goto LABEL_27;
    case 0xB:
      v9 = "size";
      goto LABEL_27;
    case 0xC:
      v9 = "encoding";
      goto LABEL_27;
    case 0xD:
      v9 = "archived-checksum";
      goto LABEL_27;
    case 0xE:
      v9 = "extracted-checksum";
      goto LABEL_27;
    case 0xF:
      v9 = "content";
LABEL_27:
      if (strcmp(__s1, v9))
        return;
      v3 = 8;
      goto LABEL_103;
    case 0x10:
      if (!strcmp(__s1, "ea"))
      {
        *(_DWORD *)(v2 + 40) = 7;
        *(_QWORD *)(v2 + 848) = 0;
      }
      return;
    case 0x11:
      v10 = "length";
      goto LABEL_39;
    case 0x12:
      v10 = "offset";
      goto LABEL_39;
    case 0x13:
      v10 = "size";
      goto LABEL_39;
    case 0x14:
      v10 = "encoding";
      goto LABEL_39;
    case 0x15:
      v10 = "archived-checksum";
      goto LABEL_39;
    case 0x16:
      v10 = "extracted-checksum";
      goto LABEL_39;
    case 0x17:
      v10 = "name";
      goto LABEL_39;
    case 0x18:
      v10 = "fstype";
LABEL_39:
      if (strcmp(__s1, v10))
        return;
      v3 = 16;
      goto LABEL_103;
    case 0x19:
      v8 = "ctime";
      goto LABEL_79;
    case 0x1A:
      v8 = "mtime";
      goto LABEL_79;
    case 0x1B:
      v8 = "atime";
      goto LABEL_79;
    case 0x1C:
      v8 = "group";
      goto LABEL_79;
    case 0x1D:
      v8 = "gid";
      goto LABEL_79;
    case 0x1E:
      v8 = "user";
      goto LABEL_79;
    case 0x1F:
      v8 = "uid";
      goto LABEL_79;
    case 0x20:
      v8 = "mode";
      goto LABEL_79;
    case 0x21:
      v8 = "device";
      goto LABEL_79;
    case 0x22:
      v11 = "major";
      goto LABEL_52;
    case 0x23:
      v11 = "minor";
LABEL_52:
      if (strcmp(__s1, v11))
        return;
      v3 = 33;
      goto LABEL_103;
    case 0x24:
      v8 = "deviceno";
      goto LABEL_79;
    case 0x25:
      v8 = "inode";
      goto LABEL_79;
    case 0x26:
      v8 = "link";
      goto LABEL_79;
    case 0x27:
      v8 = "type";
      goto LABEL_79;
    case 0x28:
      v8 = "name";
      goto LABEL_79;
    case 0x29:
      v8 = "acl";
      goto LABEL_79;
    case 0x2A:
      v12 = "default";
      goto LABEL_63;
    case 0x2B:
      v12 = "access";
      goto LABEL_63;
    case 0x2C:
      v12 = "appleextended";
LABEL_63:
      if (strcmp(__s1, v12))
        return;
      v3 = 41;
      goto LABEL_103;
    case 0x2D:
      v8 = "flags";
      goto LABEL_79;
    case 0x2E:
      v13 = "UserNoDump";
      goto LABEL_76;
    case 0x2F:
      v13 = "UserImmutable";
      goto LABEL_76;
    case 0x30:
      v13 = "UserAppend";
      goto LABEL_76;
    case 0x31:
      v13 = "UserOpaque";
      goto LABEL_76;
    case 0x32:
      v13 = "UserNoUnlink";
      goto LABEL_76;
    case 0x33:
      v13 = "SystemArchived";
      goto LABEL_76;
    case 0x34:
      v13 = "SystemImmutable";
      goto LABEL_76;
    case 0x35:
      v13 = "SystemAppend";
      goto LABEL_76;
    case 0x36:
      v13 = "SystemNoUnlink";
      goto LABEL_76;
    case 0x37:
      v13 = "SystemSnapshot";
LABEL_76:
      if (strcmp(__s1, v13))
        return;
      v3 = 45;
      goto LABEL_103;
    case 0x38:
      v8 = "ext2";
LABEL_79:
      if (strcmp(__s1, v8))
        return;
      v3 = 7;
      goto LABEL_103;
    case 0x39:
      v14 = "SecureDeletion";
      goto LABEL_101;
    case 0x3A:
      v14 = "Undelete";
      goto LABEL_101;
    case 0x3B:
      v14 = "Compress";
      goto LABEL_101;
    case 0x3C:
      v14 = "Synchronous";
      goto LABEL_101;
    case 0x3D:
      v14 = "Immutable";
      goto LABEL_101;
    case 0x3E:
      v14 = "AppendOnly";
      goto LABEL_101;
    case 0x3F:
      v14 = "NoDump";
      goto LABEL_101;
    case 0x40:
      v14 = "NoAtime";
      goto LABEL_101;
    case 0x41:
      v14 = "CompDirty";
      goto LABEL_101;
    case 0x42:
      v14 = "CompBlock";
      goto LABEL_101;
    case 0x43:
      v14 = "NoCompBlock";
      goto LABEL_101;
    case 0x44:
      v14 = "CompError";
      goto LABEL_101;
    case 0x45:
      v14 = "BTree";
      goto LABEL_101;
    case 0x46:
      v14 = "HashIndexed";
      goto LABEL_101;
    case 0x47:
      v14 = "iMagic";
      goto LABEL_101;
    case 0x48:
      v14 = "Journaled";
      goto LABEL_101;
    case 0x49:
      v14 = "NoTail";
      goto LABEL_101;
    case 0x4A:
      v14 = "DirSync";
      goto LABEL_101;
    case 0x4B:
      v14 = "TopDir";
      goto LABEL_101;
    case 0x4C:
      v14 = "Reserved";
LABEL_101:
      if (strcmp(__s1, v14))
        return;
      v3 = 56;
      goto LABEL_103;
    case 0x4D:
      sub_1DB727F68(**(_QWORD **)(a1 + 2472), __s1);
      return;
    default:
      return;
  }
}

uint64_t sub_1DB727AC4(_DWORD *a1, uint64_t a2, char *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  size_t v14;
  uint64_t result;
  int v16;
  char *v17;

  v6 = malloc_type_malloc(0x20uLL, 0x103004057E7F81CuLL);
  if (v6)
  {
    v12 = v6;
    *v6 = *(_QWORD *)(a2 + 48);
    v6[1] = 0;
    v13 = v6 + 1;
    v6[2] = 0;
    v6[3] = 0;
    if (a3)
      v14 = strlen(a3);
    else
      v14 = 0;
    sub_1DB6E323C(v13, a3, v14);
    if (!*(_QWORD *)(a2 + 48))
    {
      v16 = *(_DWORD *)(a2 + 40);
      *(_DWORD *)(a2 + 40) = 77;
      *(_DWORD *)(a2 + 44) = v16;
    }
    result = 0;
    *(_QWORD *)(a2 + 48) = v12;
  }
  else
  {
    archive_set_error(a1, 12, "Out of memory", v7, v8, v9, v10, v11, v17);
    return 4294967266;
  }
  return result;
}

uint64_t sub_1DB727B80(_DWORD *a1, uint64_t a2, uint64_t ***a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t **i;
  const char *v14;
  size_t v15;
  unsigned int v16;
  uint64_t v17;
  size_t v18;
  char *v19;
  int v20;
  int v22;
  int v23;
  int v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  char *v33;

  v6 = malloc_type_calloc(1uLL, 0x178uLL, 0x10300401D0EDC66uLL);
  if (!v6)
    goto LABEL_28;
  v12 = v6;
  v6[2] = *(_QWORD *)(a2 + 840);
  *((_WORD *)v6 + 144) = -32257;
  v6[26] = 0;
  v6[27] = 0;
  *(_QWORD *)(a2 + 840) = v6;
  *(_QWORD *)(a2 + 848) = 0;
  for (i = *a3; i; i = (uint64_t **)*i)
  {
    if (!strcmp((const char *)i[1], "id"))
    {
      v14 = (const char *)i[2];
      v15 = strlen(v14);
      if (v15 && (v16 = *v14 - 48, v16 <= 9))
      {
        v17 = 0;
        v18 = v15 - 1;
        v19 = (char *)(v14 + 1);
        do
        {
          v20 = *v19++;
          v17 = 10 * v17 + v16;
          v16 = v20 - 48;
        }
        while ((v20 - 48) <= 9 && v18-- != 0);
      }
      else
      {
        v17 = 0;
      }
      v12[4] = v17;
    }
  }
  *((_DWORD *)v12 + 85) = 1;
  v22 = *(_DWORD *)(a2 + 868);
  v23 = *(_DWORD *)(a2 + 864);
  if (v22 >= v23)
  {
    if (v23 >= 1024)
      v24 = 2 * v23;
    else
      v24 = 1024;
    if (v24 > v23)
    {
      v25 = malloc_type_malloc(8 * v24, 0x2004093837F09uLL);
      if (v25)
      {
        v26 = v25;
        v27 = *(int *)(a2 + 864);
        if ((_DWORD)v27)
        {
          memcpy(v25, *(const void **)(a2 + 856), 8 * v27);
          free(*(void **)(a2 + 856));
        }
        *(_QWORD *)(a2 + 856) = v26;
        *(_DWORD *)(a2 + 864) = v24;
        v22 = *(_DWORD *)(a2 + 868);
        goto LABEL_24;
      }
    }
LABEL_28:
    archive_set_error(a1, 12, "Out of memory", v7, v8, v9, v10, v11, v33);
    return 4294967266;
  }
LABEL_24:
  v28 = v12[4];
  *(_DWORD *)(a2 + 868) = v22 + 1;
  if (v22 < 1)
  {
LABEL_27:
    result = 0;
    **(_QWORD **)(a2 + 856) = v12;
  }
  else
  {
    while (1)
    {
      v29 = v22 - 1;
      v30 = *(_QWORD *)(a2 + 856);
      v31 = *(_QWORD *)(v30 + 8 * ((v22 - 1) >> 1));
      if (v28 >= *(_QWORD *)(v31 + 32))
        break;
      *(_QWORD *)(v30 + 8 * v22) = v31;
      v22 = v29 >> 1;
      if (v29 <= 1)
        goto LABEL_27;
    }
    result = 0;
    *(_QWORD *)(v30 + 8 * v22) = v12;
  }
  return result;
}

uint64_t sub_1DB727D74(uint64_t ***a1)
{
  uint64_t **v1;
  uint64_t v2;
  const char *v3;

  v1 = *a1;
  if (!*a1)
    return 0;
  v2 = 0;
  do
  {
    if (!strcmp((const char *)v1[1], "style"))
    {
      v3 = (const char *)v1[2];
      if (!strcmp(v3, "application/octet-stream"))
      {
        v2 = 0;
      }
      else if (!strcmp(v3, "application/x-gzip"))
      {
        v2 = 1;
      }
      else if (!strcmp(v3, "application/x-bzip2"))
      {
        v2 = 2;
      }
      else if (!strcmp(v3, "application/x-lzma"))
      {
        v2 = 3;
      }
      else if (!strcmp(v3, "application/x-xz"))
      {
        v2 = 4;
      }
      else
      {
        v2 = v2;
      }
    }
    v1 = (uint64_t **)*v1;
  }
  while (v1);
  return v2;
}

uint64_t sub_1DB727E8C(uint64_t ***a1)
{
  uint64_t **v1;
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;

  v1 = *a1;
  if (!*a1)
    return 0;
  v2 = 0;
  do
  {
    if (!strcmp((const char *)v1[1], "style"))
    {
      v3 = (unsigned __int8 *)v1[2];
      v4 = *v3 | 0x20;
      if (v4 == 115 && (v3[1] | 0x20) == 0x68 && (v3[2] | 0x20) == 0x61 && v3[3] == 49)
      {
        if (v3[4])
          v2 = v2;
        else
          v2 = 1;
      }
      if (v4 == 109 && (v3[1] | 0x20) == 0x64 && v3[2] == 53)
      {
        if (v3[3])
          v2 = v2;
        else
          v2 = 2;
      }
    }
    v1 = (uint64_t **)*v1;
  }
  while (v1);
  return v2;
}

void sub_1DB727F68(uint64_t a1, const char *a2)
{
  const char **v3;

  if (a2)
  {
    v3 = *(const char ***)(a1 + 48);
    if (v3)
    {
      if (!strcmp(v3[1], a2))
      {
        *(_QWORD *)(a1 + 48) = *v3;
        sub_1DB6E7C3C((uint64_t)(v3 + 1));
        free(v3);
        if (!*(_QWORD *)(a1 + 48))
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 44);
      }
    }
  }
}

time_t sub_1DB727FD0(char *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  tm v27;

  memset(&v27.tm_wday, 0, 32);
  if (a2 != 20)
    return 0;
  v2 = *a1 - 48;
  if (v2 > 9)
    return 0;
  v3 = 0;
  v4 = 1;
  do
  {
    v3 = 10 * v3 + v2;
    v2 = a1[v4] - 48;
  }
  while (v2 <= 9 && v4++ != 4);
  if (v3 < 1900)
    return 0;
  v27.tm_year = v3 - 1900;
  if (a1[4] != 45)
    return 0;
  v6 = a1[5] - 48;
  if (v6 > 9)
    return 0;
  v7 = 0;
  v8 = 0;
  do
  {
    v8 = 10 * v8 + v6;
    v6 = a1[v7 + 6] - 48;
  }
  while (v6 <= 9 && v7++ != 1);
  if ((unint64_t)(v8 - 13) < 0xFFFFFFFFFFFFFFF4)
    return 0;
  v27.tm_mon = v8 - 1;
  if (a1[7] != 45)
    return 0;
  v10 = a1[8] - 48;
  if (v10 > 9)
    return 0;
  v11 = 0;
  v12 = 0;
  do
  {
    v12 = 10 * v12 + v10;
    v10 = a1[v11 + 9] - 48;
  }
  while (v10 <= 9 && v11++ != 1);
  if ((unint64_t)(v12 - 32) < 0xFFFFFFFFFFFFFFE1)
    return 0;
  v27.tm_mday = v12;
  if (a1[10] != 84)
    return 0;
  v14 = a1[11] - 48;
  if (v14 <= 9)
  {
    v16 = 0;
    v15 = 0;
    do
    {
      v15 = 10 * v15 + v14;
      v14 = a1[v16 + 12] - 48;
    }
    while (v14 <= 9 && v16++ != 1);
    if (v15 > 0x17)
      return 0;
  }
  else
  {
    LODWORD(v15) = 0;
  }
  v27.tm_hour = v15;
  if (a1[13] == 58)
  {
    v18 = a1[14] - 48;
    if (v18 <= 9)
    {
      v20 = 0;
      v19 = 0;
      do
      {
        v19 = 10 * v19 + v18;
        v18 = a1[v20 + 15] - 48;
      }
      while (v18 <= 9 && v20++ != 1);
      if (v19 > 0x3B)
        return 0;
    }
    else
    {
      LODWORD(v19) = 0;
    }
    v27.tm_min = v19;
    if (a1[16] == 58)
    {
      v22 = a1[17] - 48;
      if (v22 > 9)
      {
        LODWORD(v23) = 0;
LABEL_60:
        v27.tm_sec = v23;
        return timegm(&v27);
      }
      v24 = 0;
      v23 = 0;
      do
      {
        v23 = 10 * v23 + v22;
        v22 = a1[v24 + 18] - 48;
      }
      while (v22 <= 9 && v24++ != 1);
      if (v23 <= 0x3C)
        goto LABEL_60;
    }
  }
  return 0;
}

uint64_t sub_1DB728230(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  unsigned int v7;
  uint64_t v8;
  BOOL v9;

  v3 = a3 - 2;
  if (a3 >= 2)
  {
    v4 = 0;
    while (1)
    {
      v5 = *a2;
      if ((v5 - 97) > 0x19 && (v5 - 65) > 0x19)
      {
        if ((v5 - 48) > 9)
          return -1;
        v6 = 16 * v5;
      }
      else
      {
        v6 = 16 * v5 - 112;
      }
      v7 = a2[1];
      if (v7 - 97 > 0x19)
      {
        if (v7 - 65 > 0x19)
        {
          v7 -= 48;
          if (v7 > 9)
            return -1;
        }
        else
        {
          LOBYTE(v7) = v7 - 55;
        }
      }
      else
      {
        LOBYTE(v7) = v7 - 87;
      }
      *(_BYTE *)(a1 + v4) = v7 | v6;
      v8 = v4 + 1;
      if (v4 != 19)
      {
        a2 += 2;
        ++v4;
        v9 = v3 > 1;
        v3 -= 2;
        if (v9)
          continue;
      }
      return v8;
    }
  }
  return 0;
}

uint64_t sub_1DB7282F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v5;
  unsigned __int8 md[8];
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a1 == 2)
  {
    sub_1DB733920((CC_MD5_CTX *)(a1 + 4), md);
    if (a3 != 16)
      return 4294967271;
    if (*(_QWORD *)a2 != *(_QWORD *)md || *(_QWORD *)(a2 + 8) != v10)
      return 4294967271;
  }
  else if (*(_DWORD *)a1 == 1)
  {
    sub_1DB73398C((CC_SHA1_CTX *)(a1 + 96), md);
    if (a3 != 20)
      return 4294967271;
    v5 = *(_QWORD *)a2 == *(_QWORD *)md && *(_QWORD *)(a2 + 8) == v10;
    if (!v5 || *(_DWORD *)(a2 + 16) != (unint64_t)v11)
      return 4294967271;
  }
  return 0;
}

uint64_t sub_1DB7283E8(uint64_t a1, char *__s1, char *a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _BOOL4 v15;
  char *v16;

  v6 = **(_QWORD **)(a1 + 2472);
  result = strcmp(__s1, "compat-2x");
  if ((_DWORD)result)
  {
    if (!strcmp(__s1, "hdrcharset"))
    {
      if (a3 && *a3)
      {
        v13 = sub_1DB6E3A78(a1, a3, 0);
        *(_QWORD *)(v6 + 7984) = v13;
        if (v13)
        {
          v14 = v13;
          result = strcmp(a3, "UTF-8");
          if ((_DWORD)result)
            return 0;
          else
            *(_QWORD *)(v6 + 8000) = v14;
        }
        else
        {
          return 4294967266;
        }
      }
      else
      {
        archive_set_error((_DWORD *)a1, -1, "zip: hdrcharset option needs a character-set name", v8, v9, v10, v11, v12, v16);
        return 4294967271;
      }
    }
    else if (!strcmp(__s1, "ignorecrc32"))
    {
      if (a3 && *a3)
      {
        result = 0;
        *(_QWORD *)(v6 + 176) = sub_1DB7296C0;
        *(_BYTE *)(v6 + 184) = 1;
      }
      else
      {
        result = 0;
        *(_QWORD *)(v6 + 176) = j__crc32;
        *(_BYTE *)(v6 + 184) = 0;
      }
    }
    else if (!strcmp(__s1, "mac-ext"))
    {
      if (a3)
        v15 = *a3 != 0;
      else
        v15 = 0;
      result = 0;
      *(_DWORD *)(v6 + 8012) = v15;
    }
    else
    {
      return 4294967276;
    }
  }
  else
  {
    *(_DWORD *)(v6 + 8008) = a3 != 0;
  }
  return result;
}

uint64_t sub_1DB728554(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  char *v37;
  uint64_t v38;

  *(_DWORD *)(a1 + 16) = 327680;
  if (!*(_QWORD *)(a1 + 24))
    *(_QWORD *)(a1 + 24) = "ZIP";
  v4 = **(_QWORD **)(a1 + 2472);
  if (*(_DWORD *)(v4 + 56) == -1)
    *(_DWORD *)(v4 + 56) = 0;
  v5 = *(_OWORD **)(v4 + 64);
  if (!v5)
  {
    v5 = malloc_type_malloc(0x90uLL, 0x1030040EC8AD5CDuLL);
    *(_QWORD *)(v4 + 64) = v5;
    if (!v5)
    {
      archive_set_error((_DWORD *)a1, 12, "Out  of memory", v6, v7, v8, v9, v10, v37);
      return 4294967266;
    }
  }
  *(_QWORD *)(v4 + 136) = v5;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  *v5 = 0u;
  if (*(_BYTE *)(v4 + 8160))
    sub_1DB6E8A6C(v4 + 8080);
  if (*(_BYTE *)(v4 + 8548))
    sub_1DB70C920((_OWORD *)(v4 + 8164));
  *(_BYTE *)(v4 + 8548) = 0;
  *(_BYTE *)(v4 + 8160) = 0;
  *(_BYTE *)(v4 + 8076) = 0;
  sub_1DB70D864(a1);
  sub_1DB6E26F0(a1, *(_QWORD *)(v4 + 128), v11, v12, v13, v14, v15, v16);
  *(_QWORD *)(v4 + 128) = 0;
  v38 = 0;
  v22 = sub_1DB6E2588(a1, 4uLL, &v38, v17, v18, v19, v20, v21);
  if (!v22)
    return 4294967266;
  while (v38 < 4)
  {
    v29 = 0;
LABEL_24:
    sub_1DB6E26F0(a1, v29, v23, v24, v25, v26, v27, v28);
    v38 = 0;
    v22 = sub_1DB6E2588(a1, 4uLL, &v38, v31, v32, v33, v34, v35);
    if (!v22)
      return 4294967266;
  }
  v29 = 0;
  while (1)
  {
    v30 = v22 + v29;
    if (*(_BYTE *)(v22 + v29) == 80 && *(_BYTE *)(v30 + 1) == 75)
      break;
LABEL_23:
    ++v29;
    if (v30 + 5 > v22 + v38)
      goto LABEL_24;
  }
  switch(*(_BYTE *)(v22 + v29 + 2))
  {
    case 1:
      if (*(_BYTE *)(v22 + v29 + 3) != 2)
        goto LABEL_23;
      goto LABEL_26;
    case 3:
      if (*(_BYTE *)(v22 + v29 + 3) != 4)
        goto LABEL_23;
      sub_1DB6E26F0(a1, v29, v23, v24, v25, v26, v27, v28);
      return sub_1DB7296C8(a1, a2, v4);
    case 5:
    case 6:
      if (*(_BYTE *)(v22 + v29 + 3) != 6)
        goto LABEL_23;
LABEL_26:
      result = 1;
      break;
    default:
      goto LABEL_23;
  }
  return result;
}

void sub_1DB72878C(uint64_t a1, char **a2, unint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;

  v11 = **(_QWORD **)(a1 + 2472);
  if (*(_DWORD *)(v11 + 56) == -1)
    *(_DWORD *)(v11 + 56) = 0;
  *a4 = *(_QWORD *)(v11 + 160);
  *a3 = 0;
  *a2 = 0;
  if (!*(_BYTE *)(v11 + 186) && (*(_WORD *)(*(_QWORD *)(v11 + 136) + 124) & 0xF000) == 0x8000)
  {
    sub_1DB6E26F0(a1, *(_QWORD *)(v11 + 128), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    *(_QWORD *)(v11 + 128) = 0;
    if (!*(_BYTE *)(v11 + 8020))
      goto LABEL_14;
    *(_DWORD *)(v11 + 56) = 1;
    v19 = *(_QWORD *)(v11 + 136);
    if ((*(_WORD *)(v19 + 126) & 0x40) != 0)
    {
      sub_1DB72B1CC(a1, v12, v13, v14, v15, v16, v17, v18);
      return;
    }
    if (*(_BYTE *)(v19 + 128) == 99)
      v20 = sub_1DB72B3AC(a1, v12, v13, v14, v15, v16, v17, v18);
    else
      v20 = sub_1DB72B670(a1, v12, v13, v14, v15, v16, v17, v18);
    if (!v20)
    {
      *(_BYTE *)(v11 + 8020) = 0;
LABEL_14:
      v21 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 136) + 128);
      if (v21 > 0xD)
      {
        switch(v21)
        {
          case 0xEu:
            v22 = sub_1DB72AB08(a1, a2, a3, v14, v15, v16, v17, v18);
            break;
          case 0x5Fu:
            v22 = sub_1DB72BE54(a1, a2, a3, v14, v15, v16, v17, v18);
            break;
          case 0x62u:
            v22 = sub_1DB72C078(a1, a2, a3, v14, v15, v16, v17, v18);
            break;
          default:
            goto LABEL_34;
        }
      }
      else if (*(_BYTE *)(*(_QWORD *)(v11 + 136) + 128))
      {
        if (v21 != 8)
        {
          if (v21 == 12)
          {
            v22 = sub_1DB72BC58(a1, a2, a3, v14, v15, v16, v17, v18);
            goto LABEL_27;
          }
LABEL_34:
          for (i = 0; i != 100; i += 4)
          {
            if (dword_1EA322910[i] == v21)
              break;
          }
          archive_set_error((_DWORD *)a1, 79, "Unsupported ZIP compression method (%d: %s)", v14, v15, v16, v17, v18, (char *)*(unsigned __int8 *)(*(_QWORD *)(v11 + 136) + 128));
          return;
        }
        v22 = sub_1DB72A810(a1, a2, a3);
      }
      else
      {
        sub_1DB72B8D8(a1, a2, a3, v14, v15, v16, v17, v18);
      }
LABEL_27:
      if (!v22)
      {
        if (*a3)
          *(_QWORD *)(v11 + 168) = (*(uint64_t (**)(_QWORD, char *, _QWORD))(v11 + 176))(*(_QWORD *)(v11 + 168), *a2, *a3);
        if (*(_BYTE *)(v11 + 186))
        {
          v28 = *(_QWORD *)(v11 + 136);
          if (*(_QWORD *)(v28 + 40) == *(_QWORD *)(v11 + 152))
          {
            if (*(_QWORD *)(v11 + 160) != *(_QWORD *)(v28 + 48))
            {
              archive_set_error((_DWORD *)a1, -1, "ZIP uncompressed data is wrong size (read %jd, expected %jd)\n", v23, v24, v25, v26, v27, *(char **)(v11 + 160));
            }
            else if ((!*(_BYTE *)(v11 + 8548) || *(_DWORD *)(v28 + 132) != 2)
                   && *(_QWORD *)(v11 + 168) != *(_DWORD *)(v28 + 120)
                   && !*(_BYTE *)(v11 + 184))
            {
              archive_set_error((_DWORD *)a1, -1, "ZIP bad CRC: 0x%lx should be 0x%lx", v23, v24, v25, v26, v27, *(char **)(v11 + 168));
            }
          }
          else
          {
            archive_set_error((_DWORD *)a1, -1, "ZIP compressed data is wrong size (read %jd, expected %jd)", v23, v24, v25, v26, v27, *(char **)(v11 + 152));
          }
        }
      }
    }
  }
}

uint64_t sub_1DB728A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  __int16 v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  unsigned int v31;
  _BYTE *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;

  v9 = *(uint64_t **)(a1 + 2472);
  v10 = *v9;
  v11 = sub_1DB6E26F0(a1, *(_QWORD *)(*v9 + 128), a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v10 + 128) = 0;
  if (v11 < 0)
    return 4294967266;
  if (*(_BYTE *)(v10 + 186))
    return 0;
  v20 = *(_QWORD *)(v10 + 136);
  v21 = *(_WORD *)(v20 + 126);
  if ((v21 & 8) == 0 || *(uint64_t *)(v20 + 40) >= 1)
    return (sub_1DB6E26F0(a1, *(_QWORD *)(v10 + 144), v13, v14, v15, v16, v17, v18) >> 63) & 0xFFFFFFE2;
  if (!*(_BYTE *)(v10 + 8020))
  {
LABEL_15:
    if (*(_BYTE *)(v20 + 128) == 8)
    {
      while (!*(_BYTE *)(v10 + 186))
      {
        result = sub_1DB72A810(a1, &v35, &v34);
        if ((_DWORD)result)
          return result;
      }
      return 0;
    }
    while (1)
    {
      v35 = 0;
      v22 = sub_1DB6E2588(a1, 0x10uLL, &v35, v14, v15, v16, v17, v18);
      if (v35 < 16)
        break;
      v29 = v22 + v35 - 16;
      v30 = (_BYTE *)v22;
      if (v22 <= v29)
      {
        while (1)
        {
          v31 = v30[3];
          if (v31 <= 0x4A)
            break;
          if (v31 == 80)
          {
            v30 += 3;
            goto LABEL_34;
          }
          if (v31 != 75)
            goto LABEL_31;
          v30 += 2;
LABEL_34:
          if ((unint64_t)v30 > v29)
            goto LABEL_35;
        }
        if (v31 == 7)
        {
          ++v30;
          goto LABEL_34;
        }
        if (v31 == 8 && v30[2] == 7 && v30[1] == 75 && *v30 == 80)
        {
          v32 = &v30[-v22];
          if ((*(_BYTE *)(*(_QWORD *)(v10 + 136) + 130) & 1) != 0)
            v33 = (uint64_t)(v32 + 24);
          else
            v33 = (uint64_t)(v32 + 16);
          sub_1DB6E26F0(a1, v33, v23, v24, v25, v26, v27, v28);
          return 0;
        }
LABEL_31:
        v30 += 4;
        goto LABEL_34;
      }
LABEL_35:
      sub_1DB6E26F0(a1, (uint64_t)&v30[-v22], v23, v24, v25, v26, v27, v28);
    }
    archive_set_error((_DWORD *)a1, 79, "Truncated ZIP file data", v24, v25, v26, v27, v28, v34);
    return 4294967266;
  }
  *(_DWORD *)(v10 + 56) = 1;
  if ((v21 & 0x40) != 0)
    return sub_1DB72B1CC(a1, v12, v13, v14, v15, v16, v17, v18);
  if (*(_BYTE *)(v20 + 128) == 99)
    result = sub_1DB72B3AC(a1, v12, v13, v14, v15, v16, v17, v18);
  else
    result = sub_1DB72B670(a1, v12, v13, v14, v15, v16, v17, v18);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(v10 + 8020) = 0;
    v20 = *(_QWORD *)(v10 + 136);
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_1DB728C5C()
{
  return 3;
}

uint64_t sub_1DB728C64(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  if (a1 && (v1 = *(uint64_t **)(a1 + 2472)) != 0 && (v2 = *v1) != 0)
    return *(unsigned int *)(v2 + 56);
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_1DB728C88(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  size_t v43;
  _QWORD *v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  size_t v54;
  char *v55;
  z_stream *v56;
  unsigned int v57;
  unsigned int v58;
  __int16 v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  size_t v66;
  _BYTE *v67;
  _BYTE *v68;
  _BYTE *v69;
  char *v70;
  uint64_t v71;
  _BYTE *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t result;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int64_t v96;
  uint64_t v97;
  const char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  _DWORD *v102;
  int v103;
  char *v104;
  _DWORD *v105;
  int v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  size_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  _DWORD *v119;
  int v120;
  uint64_t v121;
  char *v122;
  _DWORD *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  size_t v130;
  unint64_t v131;
  char *v132;
  const void *v133;
  const void *v134;
  size_t v135;
  uint64_t v136;
  _BOOL4 v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  unint64_t *v145;
  z_streamp strm;
  uint64_t *v148;
  uint64_t v149;

  v2 = a2;
  v4 = **(_QWORD **)(a1 + 2472);
  if (*(_DWORD *)(v4 + 56) == -1)
    *(_DWORD *)(v4 + 56) = 0;
  *(_DWORD *)(a1 + 16) = 327680;
  if (!*(_QWORD *)(a1 + 24))
    *(_QWORD *)(a1 + 24) = "ZIP";
  if (*(_QWORD *)(v4 + 64))
  {
    v5 = *(_QWORD *)(v4 + 136);
    if (!v5)
      return 1;
    v6 = sub_1DB733688((unint64_t *)(v4 + 80), v5, 1u);
    *(_QWORD *)(v4 + 136) = v6;
    if (!v6)
      return 1;
    goto LABEL_8;
  }
  if (sub_1DB6F802C(a1, *(_QWORD *)(v4 + 32), 0) < 0)
    return 4294967266;
  v149 = 0;
  v14 = sub_1DB6E2588(a1, 0x14uLL, &v149, v9, v10, v11, v12, v13);
  if (!v14)
    return 4294967266;
  while (v149 < 5)
  {
    v21 = 0;
LABEL_28:
    sub_1DB6E26F0(a1, v21, v15, v16, v17, v18, v19, v20);
    v14 = sub_1DB6E2588(a1, 0x14uLL, &v149, v23, v24, v25, v26, v27);
    if (!v14)
      return 4294967266;
  }
  v21 = 0;
  while (2)
  {
    v22 = *(char *)(v14 + v21 + 3);
    switch(*(_BYTE *)(v14 + v21 + 3))
    {
      case 1:
      case 5:
        goto LABEL_23;
      case 2:
        if (*(_DWORD *)(v14 + v21) == 33639248)
          goto LABEL_30;
        goto LABEL_20;
      case 3:
      case 4:
        goto LABEL_20;
      case 6:
        if (*(_DWORD *)(v14 + v21) != 101010256 && *(_DWORD *)(v14 + v21) != 101075792)
        {
LABEL_23:
          ++v21;
LABEL_25:
          if (v21 >= v149 - 4)
            goto LABEL_28;
          continue;
        }
LABEL_30:
        sub_1DB6E26F0(a1, v21, v15, v16, v17, v18, v19, v20);
        v28 = archive_filter_bytes(a1);
        v29 = *(_QWORD *)(v4 + 24);
        v145 = (unint64_t *)(v4 + 80);
        sub_1DB6E8388((_QWORD *)(v4 + 80), (uint64_t)off_1EA321FD8);
        sub_1DB6E8388((_QWORD *)(v4 + 96), (uint64_t)&off_1EA321FF8);
        sub_1DB6E8388((_QWORD *)(v4 + 112), (uint64_t)off_1EA321FC8);
        *(_QWORD *)(v4 + 40) = 0;
        v35 = (_DWORD *)sub_1DB6E2588(a1, 4uLL, 0, v30, v31, v32, v33, v34);
        if (!v35)
          return 4294967266;
        v41 = v28 - v29;
        v144 = v41;
        while (2)
        {
          if (*v35 != 101075792 && *v35 != 101010256)
          {
            if (*v35 != 33639248)
            {
              v104 = "Invalid central directory signature";
              v105 = (_DWORD *)a1;
              v106 = -1;
              goto LABEL_123;
            }
            v42 = sub_1DB6E2588(a1, 0x2EuLL, 0, v36, v37, v38, v39, v40);
            if (!v42)
              return 4294967266;
            v43 = v42;
            v44 = malloc_type_calloc(1uLL, 0x90uLL, 0x1030040EC8AD5CDuLL);
            if (!v44)
            {
              v104 = "Can't allocate zip entry";
              v105 = (_DWORD *)a1;
              v106 = 12;
              goto LABEL_123;
            }
            v45 = (uint64_t)v44;
            v44[3] = *(_QWORD *)(v4 + 64);
            *((_BYTE *)v44 + 130) |= 2u;
            *(_QWORD *)(v4 + 64) = v44;
            ++*(_QWORD *)(v4 + 40);
            *((_BYTE *)v44 + 129) = *(_BYTE *)(v43 + 5);
            v46 = *(unsigned __int8 *)(v43 + 8);
            *((_WORD *)v44 + 63) = v46 | (*(unsigned __int8 *)(v43 + 9) << 8);
            if ((v46 & 0x41) != 0)
              *(_DWORD *)(v4 + 56) = 1;
            *((_BYTE *)v44 + 128) = *(_BYTE *)(v43 + 10);
            v44[12] = sub_1DB729FE0((unsigned __int8 *)(v43 + 12));
            *(_DWORD *)(v45 + 120) = *(_DWORD *)(v43 + 16);
            v53 = 13;
            if ((*(_WORD *)(v45 + 126) & 8) == 0)
              v53 = 19;
            *(_BYTE *)(v45 + 131) = *(_BYTE *)(v43 + v53);
            *(_QWORD *)(v45 + 40) = *(unsigned int *)(v43 + 20);
            *(_QWORD *)(v45 + 48) = *(unsigned int *)(v43 + 24);
            v54 = *(unsigned __int16 *)(v43 + 28);
            v55 = (char *)*(unsigned __int16 *)(v43 + 30);
            v56 = (z_stream *)*(unsigned __int16 *)(v43 + 32);
            v57 = *(_DWORD *)(v43 + 38);
            *(_QWORD *)(v45 + 32) = v41 + *(unsigned int *)(v43 + 42);
            strm = v56;
            if (*(_BYTE *)(v45 + 129))
            {
              if (*(_BYTE *)(v45 + 129) == 3)
              {
                v58 = HIWORD(v57);
                goto LABEL_49;
              }
              *(_WORD *)(v45 + 124) = 0;
            }
            else
            {
              if ((v57 & 0x10) != 0)
                v59 = 16893;
              else
                v59 = -32332;
              *(_WORD *)(v45 + 124) = v59;
              if ((v57 & 1) != 0)
              {
                LOWORD(v58) = v59 & 0x16D;
LABEL_49:
                *(_WORD *)(v45 + 124) = v58;
              }
            }
            sub_1DB6E26F0(a1, 46, v47, v48, v49, v50, v51, v52);
            v60 = &v55[v54];
            v66 = sub_1DB6E2588(a1, (size_t)&v55[v54], 0, v61, v62, v63, v64, v65);
            if (!v66)
            {
              v104 = "Truncated ZIP file header";
LABEL_122:
              v105 = (_DWORD *)a1;
              v106 = 79;
LABEL_123:
              archive_set_error(v105, v106, v104, v36, v37, v38, v39, v40, v142);
              return 4294967266;
            }
            v67 = (_BYTE *)v66;
            if (sub_1DB72A054(a1, a2, (unsigned __int8 *)(v66 + v54), v55, v45, v38, v39, v40))
              return 4294967266;
            if (*(_DWORD *)(v4 + 8012))
            {
              v68 = v67;
              do
              {
                v69 = v68;
                v70 = (char *)memchr(v68, 47, &v67[v54] - v68);
                v68 = v70 + 1;
              }
              while (v70);
              if (v54 < 9)
              {
                if (!(_DWORD)v54)
                  goto LABEL_121;
              }
              else if (!strncmp("__MACOSX/", v67, 9uLL))
              {
                if (v67[v54 - 1] != 47 && (v69 - v67 < 3 || *v69 != 46 || v69[1] != 95))
                {
                  sub_1DB72C54C(v145, (_QWORD *)v45);
LABEL_121:
                  v104 = "Invalid header";
                  goto LABEL_122;
                }
                *(_QWORD *)(v45 + 80) = 0;
                sub_1DB6E323C((uint64_t *)(v45 + 72), v67, v54);
                sub_1DB733364(v4 + 96, (_QWORD *)v45);
                v41 = v144;
                goto LABEL_71;
              }
              if (v67[v54 - 1] == 47)
              {
                v72 = v67;
                do
                {
                  v69 = v72;
                  v73 = (char *)memchr(v72, 47, &v67[v54 - 1] - v72);
                  v72 = v73 + 1;
                }
                while (v73);
                --v54;
              }
              *(_QWORD *)(v45 + 80) = 0;
              sub_1DB6E323C((uint64_t *)(v45 + 72), "__MACOSX/", 9uLL);
              sub_1DB6E323C((uint64_t *)(v45 + 72), v67, v69 - v67);
              sub_1DB72CE50((uint64_t *)(v45 + 72), "._");
              sub_1DB6E323C((uint64_t *)(v45 + 72), v69, v54 - (v69 - v67));
              v41 = v144;
              if (sub_1DB72C54C(v145, (_QWORD *)v45))
                goto LABEL_121;
            }
            else if (sub_1DB72C54C(v145, (_QWORD *)v45))
            {
              goto LABEL_121;
            }
LABEL_71:
            sub_1DB6E26F0(a1, (uint64_t)&v60[(_QWORD)strm], v71, v36, v37, v38, v39, v40);
            v35 = (_DWORD *)sub_1DB6E2588(a1, 4uLL, 0, v74, v75, v76, v77, v78);
            if (!v35)
              return 4294967266;
            continue;
          }
          break;
        }
        v6 = sub_1DB733688(v145, 0, 0);
        *(_QWORD *)(v4 + 136) = v6;
        v2 = a2;
        if (!v6)
          return 1;
LABEL_8:
        v7 = *(_QWORD *)(v6 + 72);
        if (v7)
          v8 = sub_1DB73322C((uint64_t *)(v4 + 96), v7);
        else
          v8 = 0;
        if (*(_BYTE *)(v4 + 8160))
          sub_1DB6E8A6C(v4 + 8080);
        if (*(_BYTE *)(v4 + 8548))
          sub_1DB70C920((_OWORD *)(v4 + 8164));
        *(_BYTE *)(v4 + 8548) = 0;
        *(_BYTE *)(v4 + 8160) = 0;
        *(_BYTE *)(v4 + 8076) = 0;
        sub_1DB70D864(a1);
        v79 = archive_filter_bytes(a1);
        v86 = *(_QWORD *)(*(_QWORD *)(v4 + 136) + 32);
        if (v86 <= v79)
        {
          if (v86 != v79)
            sub_1DB6F802C(a1, v86, 0);
        }
        else
        {
          sub_1DB6E26F0(a1, v86 - v79, v80, v81, v82, v83, v84, v85);
        }
        *(_QWORD *)(v4 + 128) = 0;
        result = sub_1DB7296C8(a1, v2, v4);
        if ((_DWORD)result)
          return result;
        if (!v8)
          return 0;
        v88 = **(_QWORD **)(a1 + 2472);
        v94 = archive_filter_bytes(a1);
        v95 = *(unsigned __int8 *)(v8 + 128);
        if (*(_BYTE *)(v8 + 128))
        {
          if (v95 == 8)
          {
            v96 = *(_QWORD *)(v8 + 48);
            goto LABEL_89;
          }
          v97 = 0;
          v98 = "??";
          while (dword_1EA322910[v97] != v95)
          {
            v97 += 4;
            if (v97 == 100)
              goto LABEL_101;
          }
          v98 = *(const char **)&dword_1EA322910[v97 + 2];
LABEL_101:
          v143 = (char *)v98;
          v99 = "Unsupported ZIP compression method (%s)";
LABEL_102:
          archive_set_error((_DWORD *)a1, 79, v99, v89, v90, v91, v92, v93, v143);
          return 4294967276;
        }
        v96 = *(_QWORD *)(v8 + 48);
        if (v96 != *(_QWORD *)(v8 + 40))
        {
          v101 = "Malformed OS X metadata entry: inconsistent size";
          v102 = (_DWORD *)a1;
          v103 = 79;
LABEL_111:
          archive_set_error(v102, v103, v101, v89, v90, v91, v92, v93, v142);
          return 4294967266;
        }
LABEL_89:
        if (v96 > 10485760)
        {
          v143 = (char *)v96;
LABEL_99:
          v99 = "Mac metadata is too large: %jd > 10M bytes";
          goto LABEL_102;
        }
        if (*(uint64_t *)(v8 + 40) > 10485760)
        {
          v143 = *(char **)(v8 + 40);
          goto LABEL_99;
        }
        v107 = (char *)malloc_type_malloc(v96, 0xE3B70A3AuLL);
        if (!v107)
        {
          v101 = "Can't allocate memory for Mac metadata";
          v102 = (_DWORD *)a1;
          v103 = 12;
          goto LABEL_111;
        }
        v109 = v107;
        v110 = *(_QWORD *)(v8 + 32);
        if (v110 <= v94)
        {
          if (v110 != v94)
            sub_1DB6F802C(a1, v110, 0);
        }
        else
        {
          sub_1DB6E26F0(a1, v110 - v94, v108, v89, v90, v91, v92, v93);
        }
        v111 = sub_1DB6E2588(a1, 0x1EuLL, 0, v89, v90, v91, v92, v93);
        if (v111)
        {
          if (*(_DWORD *)v111 != 67324752)
          {
            v118 = "Damaged Zip archive";
            v119 = (_DWORD *)a1;
            v120 = -1;
            goto LABEL_119;
          }
          v121 = *(unsigned __int16 *)(v111 + 26) + (unint64_t)*(unsigned __int16 *)(v111 + 28) + 30;
        }
        else
        {
          v118 = "Truncated ZIP file header";
          v119 = (_DWORD *)a1;
          v120 = 79;
LABEL_119:
          archive_set_error(v119, v120, v118, v113, v114, v115, v116, v117, v142);
          v121 = -20;
        }
        if (*(_DWORD *)(v88 + 8016) && sub_1DB72A62C(v88, v8, v121))
        {
          v122 = "Invalid header";
          v123 = (_DWORD *)a1;
          v124 = 79;
          goto LABEL_130;
        }
        sub_1DB6E26F0(a1, v121, v112, v113, v114, v115, v116, v117);
        v131 = *(_QWORD *)(v8 + 40);
        v130 = *(_QWORD *)(v8 + 48);
        if (!v131)
        {
          v141 = *(_QWORD *)(v8 + 48);
LABEL_150:
          archive_entry_copy_mac_metadata((uint64_t)v2, v109, v141 - v130);
          v100 = 0;
          goto LABEL_153;
        }
        v148 = v2;
        v132 = v109;
        while (2)
        {
          v149 = 0;
          v133 = (const void *)sub_1DB6E2588(a1, 1uLL, &v149, v125, v126, v127, v128, v129);
          if (!v133)
          {
            archive_set_error((_DWORD *)a1, 79, "Truncated ZIP file header", v113, v114, v115, v116, v117, v142);
            v100 = 4294967276;
            goto LABEL_153;
          }
          v134 = v133;
          v135 = v149;
          if (v149 > v131)
          {
            v149 = v131;
            v135 = v131;
          }
          if (*(_BYTE *)(v8 + 128) != 8)
          {
            if (*(_BYTE *)(v8 + 128))
            {
              v137 = 0;
              v136 = 0;
            }
            else
            {
              if (v135 > v130)
              {
                v149 = v130;
                v135 = v130;
              }
              memcpy(v132, v133, v135);
              v136 = v149;
              v130 -= v149;
              v132 += v149;
              v137 = v130 == 0;
            }
LABEL_146:
            sub_1DB6E26F0(a1, v136, v135, v113, v114, v115, v116, v117);
            if (v137 || (v131 -= v136) == 0)
            {
              v141 = *(_QWORD *)(v8 + 48);
              v2 = v148;
              goto LABEL_150;
            }
            continue;
          }
          break;
        }
        v138 = sub_1DB72AE30((_DWORD *)a1, v88);
        if ((_DWORD)v138)
        {
          v100 = v138;
          goto LABEL_153;
        }
        *(_QWORD *)(v88 + 208) = v134;
        *(_DWORD *)(v88 + 216) = v149;
        *(_QWORD *)(v88 + 224) = 0;
        *(_QWORD *)(v88 + 232) = v132;
        *(_DWORD *)(v88 + 240) = v130;
        *(_QWORD *)(v88 + 248) = 0;
        v139 = (char *)inflate((z_streamp)(v88 + 208), 0);
        v137 = (int)v139;
        if (v139 < 2)
        {
          v136 = *(_QWORD *)(v88 + 224);
          v140 = *(_QWORD *)(v88 + 248);
          v130 -= v140;
          v132 += v140;
          goto LABEL_146;
        }
        if ((_DWORD)v139 == -4)
        {
          v122 = "Out of memory for ZIP decompression";
          v123 = (_DWORD *)a1;
          v124 = 12;
LABEL_130:
          archive_set_error(v123, v124, v122, v113, v114, v115, v116, v117, v142);
        }
        else
        {
          archive_set_error((_DWORD *)a1, -1, "ZIP decompression failed (%d)", v113, v114, v115, v116, v117, v139);
        }
        v100 = 4294967266;
LABEL_153:
        sub_1DB6F802C(a1, v94, 0);
        *(_BYTE *)(v88 + 185) = 0;
        free(v109);
        result = 0;
        if ((v100 & 0x80000000) != 0)
          return v100;
        return result;
      default:
        if (v22 == 80)
        {
          v21 += 3;
        }
        else if (v22 == 75)
        {
          v21 += 2;
        }
        else
        {
LABEL_20:
          v21 += 4;
        }
        goto LABEL_25;
    }
  }
}

uint64_t sub_1DB7296A4(uint64_t a1)
{
  *(_QWORD *)(**(_QWORD **)(a1 + 2472) + 128) = 0;
  return 0;
}

uint64_t sub_1DB7296B8()
{
  return 3;
}

uint64_t sub_1DB7296C0()
{
  return 0;
}

uint64_t sub_1DB7296C8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  __int32 **v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  char *v23;
  _DWORD *v24;
  int v25;
  char v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  char v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int16 v72;
  __int16 v73;
  char *v74;
  unsigned int v75;
  const __int32 *v76;
  const __int32 *v77;
  size_t v78;
  __int32 v79;
  __int32 *v80;
  __int32 *v81;
  size_t v82;
  __int32 *v83;
  uint64_t v84;
  __int32 *v85;
  const char *v86;
  const char *v87;
  size_t v88;
  const __int32 *v89;
  const __int32 *v90;
  size_t v91;
  const char *v92;
  char *v93;
  size_t v94;
  int v95;
  char *v96;
  char *v97;
  uint64_t v98;
  __int32 *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  int v104;
  char *v105;
  uint64_t i;
  uint64_t v107;
  __int32 *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char v118;
  char *v119;
  char *v120;
  __int32 *v121;
  uint64_t v122;
  uint64_t v123;

  v6 = *(_QWORD *)(a3 + 136);
  v8 = (__int32 **)(v6 + 40);
  v7 = *(char **)(v6 + 40);
  v9 = *(char **)(v6 + 48);
  v10 = *(_DWORD *)(v6 + 120);
  *(_WORD *)(a3 + 185) = 0;
  *(_QWORD *)(a3 + 152) = 0;
  *(_QWORD *)(a3 + 160) = 0;
  *(_QWORD *)(a3 + 168) = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a3 + 176))(0, 0, 0);
  if (!*(_QWORD *)(a3 + 7984) && !*(_DWORD *)(a3 + 8008))
  {
    *(_QWORD *)(a3 + 7992) = sub_1DB6E54AC();
    *(_DWORD *)(a3 + 8008) = 1;
  }
  v16 = sub_1DB6E2588(a1, 0x1EuLL, 0, v11, v12, v13, v14, v15);
  if (!v16)
    goto LABEL_32;
  v22 = v16;
  if (*(_DWORD *)v16 != 67324752)
  {
    v23 = "Damaged Zip archive";
LABEL_7:
    v24 = (_DWORD *)a1;
    v25 = -1;
LABEL_34:
    archive_set_error(v24, v25, v23, v17, v18, v19, v20, v21, v116);
    return 4294967266;
  }
  v26 = *(_BYTE *)(v16 + 4);
  *(_BYTE *)(v6 + 129) = *(_BYTE *)(v16 + 5);
  LOWORD(v27) = *(unsigned __int8 *)(v16 + 6);
  *(_WORD *)(v6 + 126) = v27 | (*(unsigned __int8 *)(v16 + 7) << 8);
  if ((v27 & 0x41) != 0)
  {
    *(_DWORD *)(a3 + 56) = 1;
    archive_entry_set_is_data_encrypted((uint64_t)a2, 1);
    v27 = *(unsigned __int16 *)(v6 + 126);
    if ((~v27 & 0x2041) == 0)
    {
      archive_entry_set_is_metadata_encrypted((uint64_t)a2, 1);
      return 4294967266;
    }
    v119 = v7;
    v117 = v9;
  }
  else
  {
    v119 = v7;
    v117 = v9;
  }
  *(_BYTE *)(a3 + 8020) = v27 & 1;
  *(_BYTE *)(v6 + 128) = *(_BYTE *)(v22 + 8);
  *(_QWORD *)(v6 + 96) = sub_1DB729FE0((unsigned __int8 *)(v22 + 10));
  *(_DWORD *)(v6 + 120) = *(_DWORD *)(v22 + 14);
  v34 = 11;
  if ((*(_WORD *)(v6 + 126) & 8) == 0)
    v34 = 17;
  *(_BYTE *)(v6 + 131) = *(_BYTE *)(v22 + v34);
  *(_QWORD *)(v6 + 40) = *(unsigned int *)(v22 + 18);
  *(_QWORD *)(v6 + 48) = *(unsigned int *)(v22 + 22);
  v35 = *(unsigned __int16 *)(v22 + 26);
  v36 = *(unsigned __int16 *)(v22 + 28);
  sub_1DB6E26F0(a1, 30, v28, v29, v30, v31, v32, v33);
  v42 = sub_1DB6E2588(a1, v35, 0, v37, v38, v39, v40, v41);
  if (!v42)
    goto LABEL_32;
  v43 = (char *)v42;
  v118 = v26;
  if ((*(_WORD *)(v6 + 126) & 0x800) != 0)
  {
    v44 = *(_QWORD **)(a3 + 8000);
    if (!v44)
    {
      v44 = sub_1DB6E3A78(a1, "UTF-8", 1);
      *(_QWORD *)(a3 + 8000) = v44;
      if (!v44)
        return 4294967266;
    }
  }
  else
  {
    v44 = *(_QWORD **)(a3 + 7984);
    if (!v44)
      v44 = *(_QWORD **)(a3 + 7992);
  }
  if (sub_1DB6E3BD0((uint64_t)a2, v43, v35, (uint64_t)v44))
  {
    if (*__error() == 12)
    {
      v23 = "Can't allocate memory for Pathname";
LABEL_24:
      v24 = (_DWORD *)a1;
      v25 = 12;
      goto LABEL_34;
    }
    v52 = (char *)sub_1DB72D0D4((uint64_t)v44);
    archive_set_error((_DWORD *)a1, 79, "Pathname cannot be converted from %s to current locale.", v53, v54, v55, v56, v57, v52);
    v51 = 4294967276;
  }
  else
  {
    v51 = 0;
  }
  sub_1DB6E26F0(a1, v35, v45, v46, v47, v48, v49, v50);
  v63 = (unsigned __int8 *)sub_1DB6E2588(a1, v36, 0, v58, v59, v60, v61, v62);
  v64 = v118;
  if (!v63)
  {
LABEL_32:
    v23 = "Truncated ZIP file header";
    goto LABEL_33;
  }
  if (sub_1DB72A054(a1, a2, v63, (char *)v36, v6, v19, v20, v21))
    return 4294967266;
  if (*(_DWORD *)(a3 + 8016) && sub_1DB72A62C(a3, v6, v35 + v36 + 30))
  {
    v23 = "Invalid header";
LABEL_33:
    v24 = (_DWORD *)a1;
    v25 = 79;
    goto LABEL_34;
  }
  sub_1DB6E26F0(a1, v36, v65, v17, v18, v19, v20, v21);
  v72 = *(_WORD *)(v6 + 124);
  if ((v72 & 0xF000) == 0x1000)
  {
    v73 = v72 & 0xFFF | 0x8000;
    v74 = v119;
LABEL_41:
    *(_WORD *)(v6 + 124) = v73;
    goto LABEL_42;
  }
  v74 = v119;
  if (!*(_WORD *)(v6 + 124))
  {
    v73 = 436;
    goto LABEL_41;
  }
LABEL_42:
  if (!*(_BYTE *)(v6 + 129))
  {
    v80 = (__int32 *)archive_entry_pathname_w(a2);
    if (v80)
    {
      v81 = v80;
      if (!wcschr(v80, 47))
      {
        if (wcschr(v81, 92))
        {
          v121 = 0;
          v122 = 0;
          v123 = 0;
          v82 = wcslen(v81);
          sub_1DB72CE04((uint64_t *)&v121, v81, v82);
          v83 = v121;
          v84 = v122;
          if (v122)
          {
            v85 = v121;
            do
            {
              if (*v85 == 92)
                *v85 = 47;
              ++v85;
              --v84;
            }
            while (v84);
          }
          archive_entry_copy_pathname_w((uint64_t)a2, v83);
          sub_1DB6E7C3C((uint64_t)&v121);
        }
      }
    }
  }
  LOWORD(v75) = *(_WORD *)(v6 + 124);
  if ((v75 & 0xF000) != 0x4000)
  {
    v76 = (const __int32 *)archive_entry_pathname_w(a2);
    if (v76)
    {
      v77 = v76;
      v78 = wcslen(v76);
      if (!v78)
        goto LABEL_61;
      v79 = v77[v78 - 1];
    }
    else
    {
      v86 = (const char *)archive_entry_pathname(a2);
      if (!v86)
        goto LABEL_61;
      v87 = v86;
      v88 = strlen(v86);
      if (!v88)
        goto LABEL_61;
      v79 = v87[v88 - 1];
    }
    if (v79 == 47)
    {
      LOWORD(v75) = *(_WORD *)(v6 + 124) & 0xFB6 | 0x4049;
LABEL_63:
      *(_WORD *)(v6 + 124) = v75;
      goto LABEL_64;
    }
LABEL_61:
    v75 = *(unsigned __int16 *)(v6 + 124);
    if (v75 > 0xFFF)
      goto LABEL_64;
    LOWORD(v75) = v75 | 0x8000;
    goto LABEL_63;
  }
LABEL_64:
  if ((v75 & 0xF000) == 0x4000)
  {
    v89 = (const __int32 *)archive_entry_pathname_w(a2);
    if (v89)
    {
      v90 = v89;
      v91 = wcslen(v89);
      if (v91 && v90[v91 - 1] != 47)
      {
        v121 = 0;
        v122 = 0;
        v123 = 0;
        sub_1DB72CE58((uint64_t *)&v121, v90);
        sub_1DB72CE9C((uint64_t *)&v121, 47);
        archive_entry_copy_pathname_w((uint64_t)a2, v121);
        sub_1DB6E7C3C((uint64_t)&v121);
      }
    }
    else
    {
      v92 = (const char *)archive_entry_pathname(a2);
      if (v92)
      {
        v93 = (char *)v92;
        v94 = strlen(v92);
        if (v94)
        {
          if (v93[v94 - 1] != 47)
          {
            v121 = 0;
            v122 = 0;
            v123 = 0;
            sub_1DB72CE50((uint64_t *)&v121, v93);
            sub_1DB72CE60((uint64_t *)&v121, 47);
            archive_entry_set_pathname((uint64_t)a2, (char *)v121);
            sub_1DB6E7C3C((uint64_t)&v121);
          }
        }
      }
    }
  }
  if ((*(_BYTE *)(v6 + 130) & 2) != 0)
  {
    *(_WORD *)(v6 + 126) &= ~8u;
    v95 = *(_DWORD *)(v6 + 120);
    if (v95)
    {
      v96 = v117;
      if (!*(_BYTE *)(a3 + 184) && v95 != v10)
      {
        archive_set_error((_DWORD *)a1, 79, "Inconsistent CRC32 values", v67, v68, v69, v70, v71, v116);
        v51 = 4294967276;
      }
    }
    else
    {
      *(_DWORD *)(v6 + 120) = v10;
      v96 = v117;
    }
    if (*v8)
    {
      if (*v8 != (__int32 *)v74)
      {
        archive_set_error((_DWORD *)a1, 79, "Inconsistent compressed size: %jd in central directory, %jd in local header", v67, v68, v69, v70, v71, v74);
        v51 = 4294967276;
      }
    }
    else
    {
      *v8 = (__int32 *)v74;
    }
    v97 = *(char **)(v6 + 48);
    if (v97)
    {
      if (v97 != v96)
      {
        archive_set_error((_DWORD *)a1, 79, "Inconsistent uncompressed size: %jd in central directory, %jd in local header", v67, v68, v69, v70, v71, v96);
        v51 = 4294967276;
      }
    }
    else
    {
      *(_QWORD *)(v6 + 48) = v96;
    }
  }
  archive_entry_set_mode((uint64_t)a2, *(_WORD *)(v6 + 124));
  archive_entry_set_uid((uint64_t)a2, *(_QWORD *)(v6 + 64));
  archive_entry_set_gid((uint64_t)a2, *(_QWORD *)(v6 + 56));
  archive_entry_set_mtime((uint64_t)a2, *(_QWORD *)(v6 + 96), 0);
  archive_entry_set_ctime((uint64_t)a2, *(_QWORD *)(v6 + 112), 0);
  archive_entry_set_atime((uint64_t)a2, *(_QWORD *)(v6 + 104), 0);
  if ((*(_WORD *)(*(_QWORD *)(a3 + 136) + 124) & 0xF000) == 0xA000)
  {
    v99 = *v8;
    if ((uint64_t)*v8 > 0x10000)
    {
      v23 = "Zip file with oversized link entry";
      goto LABEL_7;
    }
    archive_entry_set_size((uint64_t)a2, 0);
    v121 = v99;
    v103 = (char *)*(unsigned __int8 *)(*(_QWORD *)(a3 + 136) + 128);
    if (*(_BYTE *)(*(_QWORD *)(a3 + 136) + 128))
    {
      v120 = 0;
      if ((_DWORD)v103 == 14)
      {
        *(_QWORD *)(a3 + 144) = *v8;
        v104 = sub_1DB72AB08(a1, &v120, &v121, v17, v18, v19, v20, v21);
      }
      else
      {
        if ((_DWORD)v103 != 8)
          goto LABEL_108;
        *(_QWORD *)(a3 + 144) = *v8;
        v104 = sub_1DB72A810(a1, &v120, &v121);
      }
      if (v104)
      {
        v103 = (char *)*(unsigned __int8 *)(*(_QWORD *)(a3 + 136) + 128);
LABEL_108:
        for (i = 0; i != 100; i += 4)
        {
          if (dword_1EA322910[i] == (_DWORD)v103)
            break;
        }
        archive_set_error((_DWORD *)a1, 79, "Unsupported ZIP compression method during decompression of link entry (%d: %s)", v17, v18, v19, v20, v21, v103);
        return 4294967271;
      }
      v105 = v120;
    }
    else
    {
      v105 = (char *)sub_1DB6E2588(a1, (size_t)v99, 0, v17, v18, v19, v20, v21);
    }
    if (!v105)
    {
      v23 = "Truncated Zip file";
      goto LABEL_7;
    }
    v107 = *(_QWORD *)(a3 + 7984);
    if (!v107 && ((*(_WORD *)(*(_QWORD *)(a3 + 136) + 126) & 0x800) == 0 || (v107 = *(_QWORD *)(a3 + 8000)) == 0))
      v107 = *(_QWORD *)(a3 + 7992);
    v108 = v121;
    if (sub_1DB6E9E80((uint64_t)a2, v105, (unint64_t)v121, v107))
    {
      if (*__error() != 12
        && v107 == *(_QWORD *)(a3 + 8000)
        && (*(_WORD *)(*(_QWORD *)(a3 + 136) + 126) & 0x800) != 0)
      {
        sub_1DB6E9E80((uint64_t)a2, v105, (unint64_t)v108, 0);
      }
      v64 = v118;
      if (*__error() == 12)
      {
        v23 = "Can't allocate memory for Symlink";
        goto LABEL_24;
      }
      if (v107 != *(_QWORD *)(a3 + 8000) || (*(_WORD *)(*(_QWORD *)(a3 + 136) + 126) & 0x800) == 0)
      {
        v110 = (char *)sub_1DB72D0D4(v107);
        archive_set_error((_DWORD *)a1, 79, "Symlink cannot be converted from %s to current locale.", v111, v112, v113, v114, v115, v110);
        v51 = 4294967276;
      }
    }
    else
    {
      v64 = v118;
    }
    *v8 = 0;
    *(_QWORD *)(v6 + 48) = 0;
    if (sub_1DB6E26F0(a1, (uint64_t)v99, v109, v17, v18, v19, v20, v21) < 0)
    {
      v23 = "Read error skipping symlink target name";
      goto LABEL_7;
    }
  }
  else
  {
    v100 = *(_QWORD *)(v6 + 48);
    if ((*(_WORD *)(v6 + 126) & 8) == 0 || v100 >= 1)
      archive_entry_set_size((uint64_t)a2, v100);
  }
  v101 = *(_QWORD *)(v6 + 40);
  *(_QWORD *)(a3 + 144) = v101;
  if ((*(_BYTE *)(v6 + 126) & 8) == 0 && v101 <= 0)
    *(_BYTE *)(a3 + 186) = 1;
  v102 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  do
  {
    if (dword_1EA322910[v102] == *(unsigned __int8 *)(*(_QWORD *)(a3 + 136) + 128))
      break;
    v102 += 4;
  }
  while (v102 != 100);
  sub_1DB7303C0((void **)a3, "ZIP %d.%d (%s)", v98, v17, v18, v19, v20, v21, (char *)((((103 * v64) >> 15) & 1) + ((103 * v64) >> 10)));
  *(_QWORD *)(a1 + 24) = *(_QWORD *)a3;
  return v51;
}

time_t sub_1DB729FE0(unsigned __int8 *a1)
{
  int v1;
  unsigned int v2;
  int v3;
  unsigned int v4;
  tm v6;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  memset(&v6.tm_wday, 0, 32);
  v6.tm_mon = (((v3 | (v4 << 8)) >> 5) & 0xF) - 1;
  v6.tm_year = (v4 >> 1) + 80;
  v6.tm_hour = v2 >> 3;
  v6.tm_mday = v3 & 0x1F;
  v6.tm_sec = 2 * (v1 & 0x1F);
  v6.tm_min = ((v1 | (v2 << 8)) >> 5) & 0x3F;
  v6.tm_isdst = -1;
  return mktime(&v6);
}

uint64_t sub_1DB72A054(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  char *v10;
  unint64_t v14;
  int v15;
  char *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned __int8 v23;
  unsigned __int16 v24;
  unsigned __int8 *v25;
  uint64_t v26;
  int v27;
  unsigned __int16 v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int16 v36;
  _QWORD *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  int v40;
  uint64_t v41;
  const char *v42;
  const char *v43;
  size_t v44;
  int v45;
  __int16 v46;
  unsigned int v47;
  unsigned __int16 v48;
  char *v50;
  char *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;

  if (!a4)
    return 0;
  v9 = a3;
  if ((unint64_t)a4 <= 3)
  {
    v10 = a4;
    while (!*v9++)
    {
      if (!--v10)
        return 0;
    }
    archive_set_error((_DWORD *)a1, 79, "Too-small extra data: Need at least 4 bytes, but only found %d bytes", (uint64_t)a4, a5, a6, a7, a8, a4);
    return 4294967271;
  }
  v14 = 0;
  v15 = 0;
  v16 = a4 - 4;
  v52 = a3 - 4;
  v17 = **(_QWORD **)(a1 + 2472);
  v18 = a3 + 1;
  while (1)
  {
    v19 = &v9[v14];
    v20 = *((unsigned __int16 *)v19 + 1);
    v21 = v15 + 4;
    if (v15 + 4 + v20 > (unint64_t)a4)
    {
      v51 = (char *)*((unsigned __int16 *)v19 + 1);
      v50 = "Extra data overflow: Need %d bytes but only found %d bytes";
      goto LABEL_118;
    }
    v22 = *(unsigned __int16 *)v19;
    if (v22 <= 28788)
      break;
    if (v22 > 30836)
    {
      if (v22 != 30837)
      {
        if (v22 == 39169)
        {
          if (v20 <= 5)
          {
            v50 = "Incomplete AES field";
            goto LABEL_118;
          }
          if (v9[v15 + 6] == 65 && v9[v15 + 7] == 69)
          {
            *(_DWORD *)(a5 + 132) = *(unsigned __int16 *)&v9[v21];
            *(_DWORD *)(a5 + 136) = (char)v9[v15 + 8];
            *(_BYTE *)(a5 + 140) = v9[v15 + 9];
          }
        }
        goto LABEL_114;
      }
      if (!v20)
        goto LABEL_114;
      v39 = &v9[v21];
      if (*v39 != 1)
        goto LABEL_114;
      if (v20 < 4)
      {
        v40 = 0;
      }
      else
      {
        v40 = v9[v15 + 5];
        if (v40 == 2)
        {
          v41 = *((unsigned __int16 *)v39 + 1);
          goto LABEL_91;
        }
        if (v20 >= 6 && v40 == 4)
        {
          v41 = *(unsigned int *)(v39 + 2);
LABEL_91:
          *(_QWORD *)(a5 + 64) = v41;
        }
      }
      if (v40 + 5 > v20)
        goto LABEL_114;
      v45 = v9[v15 + v40 + 6];
      if (v45 == 4)
      {
        if (v40 + 7 > v20)
          goto LABEL_114;
        v26 = *(unsigned int *)&v39[v40 + 3];
      }
      else
      {
        if (v45 != 2)
          goto LABEL_114;
        v26 = *(unsigned __int16 *)&v39[v40 + 3];
      }
      goto LABEL_77;
    }
    if (v22 == 28789)
    {
      if (a2)
      {
        v36 = v20 - 5;
        if (v20 >= 5)
        {
          v21 = v15 + 9;
          LOWORD(v20) = v20 - 5;
          if (*(_QWORD *)(v17 + 8000) || (v37 = sub_1DB6E3A78(a1, "UTF-8", 1), (*(_QWORD *)(v17 + 8000) = v37) != 0))
          {
            v53 = v18;
            if (*(_BYTE *)(v17 + 184)
              || (v42 = (const char *)archive_entry_pathname(a2)) == 0
              || (v43 = v42,
                  v44 = strlen(v42),
                  (*(uint64_t (**)(_QWORD, const char *, size_t))(v17 + 176))(0, v43, v44) == *(_DWORD *)&v52[v21]))
            {
              sub_1DB6E3BD0((uint64_t)a2, (char *)&v9[v21], v36, *(_QWORD *)(v17 + 8000));
            }
            v18 = v53;
          }
        }
      }
      goto LABEL_114;
    }
    if (v22 == 30805 && v20 >= 2)
    {
      v25 = &v9[v21];
      *(_QWORD *)(a5 + 64) = *(unsigned __int16 *)v25;
      if (v20 >= 4)
      {
        v26 = *((unsigned __int16 *)v25 + 1);
LABEL_77:
        *(_QWORD *)(a5 + 56) = v26;
      }
    }
LABEL_114:
    v14 = v21 + (unsigned __int16)v20;
    v15 = v21 + (unsigned __int16)v20;
    if ((unint64_t)v16 < v14)
      return 0;
  }
  if (v22 > 22612)
  {
    if (v22 == 22613)
    {
      if (v20 < 8)
        goto LABEL_114;
      v38 = &v9[v21];
      *(_QWORD *)(a5 + 104) = *(unsigned int *)v38;
      *(_QWORD *)(a5 + 96) = *((unsigned int *)v38 + 1);
      if (v20 < 0xC)
        goto LABEL_114;
      *(_QWORD *)(a5 + 64) = *((unsigned __int16 *)v38 + 4);
      v26 = *((unsigned __int16 *)v38 + 5);
      goto LABEL_77;
    }
    if (v22 != 27768 || !v20)
      goto LABEL_114;
    v27 = (char)v9[v21];
    v21 = v15 + 5;
    v28 = v20 - 1;
    if (v27 < 0)
    {
      do
      {
        if (!v28)
          break;
        LOWORD(v20) = v28;
        v29 = (char)v9[v21++];
        --v28;
      }
      while (v29 < 0);
    }
    if ((v27 & 1) != 0)
    {
      if ((unsigned __int16)v20 < 3u)
        goto LABEL_113;
      *(_BYTE *)(a5 + 129) = v18[v21];
      v21 += 2;
      v28 = v20 - 3;
    }
    if ((v27 & 2) != 0)
    {
      if (v28 < 2u)
        goto LABEL_113;
      v21 += 2;
      v28 -= 2;
    }
    if ((v27 & 4) == 0)
    {
LABEL_105:
      if ((v27 & 8) != 0 && v28 >= 2u)
      {
        v47 = *(unsigned __int16 *)&v9[v21];
        v48 = v28 - 2;
        if (v47 <= v48)
          LOWORD(v20) = v48 - v47;
        else
          LOWORD(v20) = v48;
        if (v47 <= v48)
          v21 += 2 + v47;
        else
          v21 += 2;
        goto LABEL_114;
      }
      goto LABEL_113;
    }
    if (v28 >= 4u)
    {
      v30 = *(_DWORD *)&v9[v21];
      if (*(_BYTE *)(a5 + 129))
      {
        v31 = HIWORD(v30);
        if (*(_BYTE *)(a5 + 129) != 3)
          LOWORD(v31) = 0;
      }
      else
      {
        if ((v30 & 0x10) != 0)
          v46 = 16893;
        else
          v46 = -32332;
        *(_WORD *)(a5 + 124) = v46;
        if ((v30 & 1) == 0)
          goto LABEL_104;
        LOWORD(v31) = v46 & 0x16D;
      }
      *(_WORD *)(a5 + 124) = v31;
LABEL_104:
      v21 += 4;
      v28 -= 4;
      goto LABEL_105;
    }
LABEL_113:
    LOWORD(v20) = v28;
    goto LABEL_114;
  }
  if (v22 != 1)
  {
    if (v22 == 21589)
    {
      if (!v20)
      {
        v50 = "Incomplete extended time field";
        goto LABEL_118;
      }
      v23 = v9[v21];
      v21 = v15 + 5;
      v24 = v20 - 1;
      if ((v23 & 1) != 0)
      {
        if (v20 < 5)
          goto LABEL_83;
        *(_QWORD *)(a5 + 96) = *(unsigned int *)&v9[v21];
        v21 = v15 + 9;
        v24 = v20 - 5;
      }
      if ((v23 & 2) != 0)
      {
        if (v24 < 4u)
          goto LABEL_83;
        *(_QWORD *)(a5 + 104) = *(unsigned int *)&v9[v21];
        v21 += 4;
        v24 -= 4;
      }
      if ((v23 & 4) == 0 || v24 < 4u)
      {
LABEL_83:
        LOWORD(v20) = v24;
        goto LABEL_114;
      }
      *(_QWORD *)(a5 + 112) = *(unsigned int *)&v9[v21];
      v21 += 4;
      LOWORD(v20) = v24 - 4;
    }
    goto LABEL_114;
  }
  *(_BYTE *)(a5 + 130) |= 1u;
  if (*(_QWORD *)(a5 + 48) == 0xFFFFFFFFLL)
  {
    v32 = v20 >= 8;
    LOWORD(v20) = v20 - 8;
    if (!v32 || (v33 = *(_QWORD *)&v9[v21], v33 < 0))
    {
      v50 = "Malformed 64-bit uncompressed size";
      goto LABEL_118;
    }
    *(_QWORD *)(a5 + 48) = v33;
    v21 = v15 + 12;
  }
  if (*(_QWORD *)(a5 + 40) == 0xFFFFFFFFLL)
  {
    if ((unsigned __int16)v20 < 8u || (v34 = *(_QWORD *)&v9[v21], v34 < 0))
    {
      v50 = "Malformed 64-bit compressed size";
      goto LABEL_118;
    }
    *(_QWORD *)(a5 + 40) = v34;
    v21 += 8;
    LOWORD(v20) = v20 - 8;
  }
  if (*(_QWORD *)(a5 + 32) != 0xFFFFFFFFLL)
    goto LABEL_114;
  if ((unsigned __int16)v20 >= 8u)
  {
    v35 = *(_QWORD *)&v9[v21];
    if ((v35 & 0x8000000000000000) == 0)
    {
      *(_QWORD *)(a5 + 32) = v35;
      v21 += 8;
      LOWORD(v20) = v20 - 8;
      goto LABEL_114;
    }
  }
  v50 = "Malformed 64-bit local header offset";
LABEL_118:
  archive_set_error((_DWORD *)a1, 79, v50, 30805, 30837, 39169, a7, a8, v51);
  return 4294967271;
}

uint64_t sub_1DB72A62C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  if (!a2)
    return 4294967266;
  result = 4294967266;
  v5 = a3 - 1;
  if (a3 >= 1)
  {
    v6 = *(_QWORD *)(a2 + 40);
    if ((v6 & 0x8000000000000000) == 0)
    {
      v7 = *(_QWORD *)(a2 + 32);
      if ((v7 & 0x8000000000000000) == 0)
      {
        v8 = __OFADD__(v6, v5);
        v9 = v6 + v5;
        if (!v8)
        {
          v10 = v7 + v9;
          if (!__OFADD__(v7, v9) && v7 <= v10)
          {
            v28 = *(_QWORD *)(a2 + 32);
            v11 = sub_1DB7332F4((uint64_t *)(a1 + 112), (uint64_t)&v28);
            v12 = (_QWORD *)sub_1DB733284((uint64_t *)(a1 + 112), (uint64_t)&v28);
            v13 = v12;
            if (v11 && *(_QWORD *)(v11 + 48) >= v28 || v12 && v12[5] <= v10)
              return 4294967266;
            v15 = v11 && (v14 = *(_QWORD *)(v11 + 48), (v14 & 0x8000000000000000) == 0) && v28 == v14 + 1;
            if (!v12 || (v16 = v12[5], v17 = v16 < 1, v18 = v16 - 1, v17))
            {
              if (v15)
              {
LABEL_39:
                *(_QWORD *)(v11 + 48) = v10;
                return 0;
              }
            }
            else
            {
              if (v10 == v18 && v15)
              {
                *(_QWORD *)(v11 + 48) = v12[6];
                sub_1DB7334FC(a1 + 112, v12);
                v20 = *(_QWORD **)(a1 + 72);
                if (v20)
                {
                  v21 = v13[3];
                  if (v20 == v13)
                    *(_QWORD *)(a1 + 72) = v21;
                  if (v21)
                    *(_QWORD *)(v21 + 32) = v13[4];
                  v22 = v13[4];
                  if (v22)
                    *(_QWORD *)(v22 + 24) = v21;
                  free(v13);
                }
                return 0;
              }
              if (v15)
                goto LABEL_39;
              if (v10 == v18)
              {
                sub_1DB7334FC(a1 + 112, v12);
                v13[5] = v28;
                v27 = a1 + 112;
                v25 = v13;
                goto LABEL_36;
              }
            }
            v23 = v28;
            v24 = malloc_type_calloc(1uLL, 0x38uLL, 0x102004014A78C51uLL);
            if (!v24)
              return 4294967266;
            v25 = v24;
            v26 = *(_QWORD *)(a1 + 72);
            v24[3] = v26;
            if (v26)
              *(_QWORD *)(v26 + 32) = v24;
            *(_QWORD *)(a1 + 72) = v24;
            v24[4] = 0;
            v24[5] = v23;
            v24[6] = v10;
            v27 = a1 + 112;
LABEL_36:
            if (sub_1DB733364(v27, v25))
              return 0;
            return 4294967266;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1DB72A810(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int16 v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  char *v30;
  _DWORD *v31;
  int v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  size_t v37;
  size_t v38;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  int64_t v49;

  v49 = 0;
  v6 = **(_QWORD **)(a1 + 2472);
  if (!*(_QWORD *)(v6 + 192))
  {
    *(_QWORD *)(v6 + 200) = 0x40000;
    v7 = malloc_type_malloc(0x40000uLL, 0x2BA1A052uLL);
    *(_QWORD *)(v6 + 192) = v7;
    if (!v7)
    {
      v30 = "No memory for ZIP decompression";
LABEL_38:
      v31 = (_DWORD *)a1;
      v32 = 12;
      goto LABEL_40;
    }
  }
  result = sub_1DB72AE30((_DWORD *)a1, v6);
  if ((_DWORD)result)
    return result;
  v19 = (char *)sub_1DB6E2588(a1, 1uLL, &v49, v14, v15, v16, v17, v18);
  v20 = v19;
  v21 = *(_WORD *)(*(_QWORD *)(v6 + 136) + 126);
  v22 = v49;
  if ((v21 & 8) == 0)
  {
    v23 = *(_QWORD *)(v6 + 144);
    if (v49 > v23)
    {
      v49 = *(_QWORD *)(v6 + 144);
      v22 = v23;
    }
  }
  if ((v22 & 0x8000000000000000) != 0)
  {
    v30 = "Truncated ZIP file body";
    v31 = (_DWORD *)a1;
    v32 = 79;
LABEL_40:
    archive_set_error(v31, v32, v30, v8, v9, v10, v11, v12, v47);
    return 4294967266;
  }
  if (*(_BYTE *)(v6 + 8076) || *(_BYTE *)(v6 + 8160))
  {
    v24 = *(_QWORD *)(v6 + 8048);
    if (v24 < v22)
    {
      v25 = *(_QWORD *)(v6 + 8032);
      v26 = (_BYTE *)(v25 + v24);
      v27 = *(_QWORD *)(v6 + 8024) + *(_QWORD *)(v6 + 8040) - (v25 + v24) >= v22
          ? v22
          : *(_QWORD *)(v6 + 8024) + *(_QWORD *)(v6 + 8040) - (v25 + v24);
      if ((v21 & 8) != 0
        || ((v28 = *(_QWORD *)(v6 + 144), v28 >= 1) ? (v29 = (uint64_t)(v27 + v24) <= v28) : (v29 = 1),
            v29 || (v27 = v28 - v24, v28 >= (uint64_t)v24)))
      {
        if (v27)
        {
          if (*(_BYTE *)(v6 + 8076))
          {
            sub_1DB72AEB4(v6 + 8064, v19, v27, v26, v27);
          }
          else
          {
            v48 = v27;
            sub_1DB6E8908(v6 + 8080, (uint64_t)v19, v27, (uint64_t)v26, &v48);
          }
          v24 = *(_QWORD *)(v6 + 8048) + v27;
          *(_QWORD *)(v6 + 8048) = v24;
        }
      }
    }
    v49 = v24;
    v33 = *(char **)(v6 + 8032);
    LODWORD(v22) = v24;
  }
  else
  {
    v33 = v19;
  }
  *(_QWORD *)(v6 + 208) = v33;
  *(_DWORD *)(v6 + 216) = v22;
  v34 = *(_QWORD *)(v6 + 192);
  v35 = *(_QWORD *)(v6 + 200);
  *(_QWORD *)(v6 + 224) = 0;
  *(_QWORD *)(v6 + 232) = v34;
  *(_DWORD *)(v6 + 240) = v35;
  *(_QWORD *)(v6 + 248) = 0;
  v36 = (char *)inflate((z_streamp)(v6 + 208), 0);
  if ((_DWORD)v36 == -4)
  {
    v30 = "Out of memory for ZIP decompression";
    goto LABEL_38;
  }
  if (!(_DWORD)v36)
    goto LABEL_33;
  if ((_DWORD)v36 != 1)
  {
    v47 = v36;
    v30 = "ZIP decompression failed (%d)";
    v31 = (_DWORD *)a1;
    v32 = -1;
    goto LABEL_40;
  }
  *(_BYTE *)(v6 + 186) = 1;
LABEL_33:
  v37 = *(_QWORD *)(v6 + 224);
  v49 = v37;
  if (*(_BYTE *)(v6 + 8076) || *(_BYTE *)(v6 + 8160))
  {
    v38 = *(_QWORD *)(v6 + 8048) - v37;
    *(_QWORD *)(v6 + 8048) = v38;
    if (v38)
      v39 = *(_QWORD *)(v6 + 8032) + v37;
    else
      v39 = *(_QWORD *)(v6 + 8024);
    *(_QWORD *)(v6 + 8032) = v39;
  }
  if (*(_BYTE *)(v6 + 8548))
  {
    j__CCHmacUpdate((CCHmacContext *)(v6 + 8164), v20, v37);
    v37 = v49;
  }
  sub_1DB6E26F0(a1, v37, v37, v8, v9, v10, v11, v12);
  v46 = *(_QWORD *)(v6 + 152) + v49;
  *(_QWORD *)(v6 + 144) -= v49;
  *(_QWORD *)(v6 + 152) = v46;
  *a3 = *(_QWORD *)(v6 + 248);
  *(_QWORD *)(v6 + 160) += *(_QWORD *)(v6 + 248);
  *a2 = *(_QWORD *)(v6 + 192);
  if (!*(_BYTE *)(v6 + 186))
    return sub_1DB72B034((_DWORD *)a1, v6, v40, v41, v42, v43, v44, v45);
  if (!*(_BYTE *)(v6 + 8548))
    return sub_1DB72B034((_DWORD *)a1, v6, v40, v41, v42, v43, v44, v45);
  result = sub_1DB72AF20(a1, 0);
  if (!(_DWORD)result)
    return sub_1DB72B034((_DWORD *)a1, v6, v40, v41, v42, v43, v44, v45);
  return result;
}

uint64_t sub_1DB72AB08(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t result;
  char *v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  int v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  char v48;
  uint64_t v49;

  v11 = **(_QWORD **)(a1 + 2472);
  v46 = 0;
  if (!*(_BYTE *)(v11 + 185))
  {
    if (*(_BYTE *)(v11 + 464))
    {
      lzma_end();
      *(_BYTE *)(v11 + 464) = 0;
    }
    *(_QWORD *)(v11 + 456) = 0;
    *(_OWORD *)(v11 + 424) = 0u;
    *(_OWORD *)(v11 + 440) = 0u;
    *(_OWORD *)(v11 + 392) = 0u;
    *(_OWORD *)(v11 + 408) = 0u;
    *(_OWORD *)(v11 + 360) = 0u;
    *(_OWORD *)(v11 + 376) = 0u;
    *(_OWORD *)(v11 + 328) = 0u;
    *(_OWORD *)(v11 + 344) = 0u;
    v26 = (char *)lzma_alone_decoder();
    if ((_DWORD)v26)
    {
      archive_set_error((_DWORD *)a1, -1, "lzma initialization failed(%d)", v13, v14, v15, v16, v17, v26);
      return 4294967271;
    }
    *(_BYTE *)(v11 + 464) = 1;
    if (*(uint64_t *)(v11 + 144) < 9 || (v29 = sub_1DB6E2588(a1, 9uLL, 0, v13, v14, v15, v16, v17)) == 0)
    {
      v28 = "Truncated lzma data";
      goto LABEL_31;
    }
    if (*(_BYTE *)(v29 + 2) != 5 || *(_BYTE *)(v29 + 3))
    {
      v28 = "Invalid lzma data";
      goto LABEL_31;
    }
    v47 = *(_DWORD *)(v29 + 4);
    v48 = *(_BYTE *)(v29 + 8);
    v49 = -1;
    v42 = *(void **)(v11 + 192);
    if (!v42)
    {
      *(_QWORD *)(v11 + 200) = 0x40000;
      v42 = malloc_type_malloc(0x40000uLL, 0x2D71CD0CuLL);
      *(_QWORD *)(v11 + 192) = v42;
      if (!v42)
      {
        v28 = "No memory for lzma decompression";
        v40 = (_DWORD *)a1;
        v41 = 12;
        goto LABEL_34;
      }
    }
    *(_QWORD *)(v11 + 328) = &v47;
    *(_OWORD *)(v11 + 336) = xmmword_1DB74D670;
    v43 = *(_QWORD *)(v11 + 200);
    *(_QWORD *)(v11 + 352) = v42;
    *(_QWORD *)(v11 + 360) = v43;
    *(_QWORD *)(v11 + 368) = 0;
    if (lzma_code())
    {
      v28 = "lzma stream initialization error";
      v40 = (_DWORD *)a1;
      v41 = 22;
      goto LABEL_34;
    }
    sub_1DB6E26F0(a1, 9, v44, v13, v14, v15, v16, v17);
    *(int64x2_t *)(v11 + 144) = vaddq_s64(*(int64x2_t *)(v11 + 144), (int64x2_t)xmmword_1DB74D680);
    *(_BYTE *)(v11 + 185) = 1;
  }
  v12 = sub_1DB6E2588(a1, 1uLL, &v46, a4, a5, a6, a7, a8);
  v18 = v46;
  if (v46 < 0)
  {
    v28 = "Truncated lzma file body";
LABEL_31:
    v40 = (_DWORD *)a1;
    v41 = 79;
LABEL_34:
    archive_set_error(v40, v41, v28, v13, v14, v15, v16, v17, (char *)v45);
    return 4294967266;
  }
  v19 = *(_QWORD *)(v11 + 136);
  if (*(_QWORD *)(v11 + 144) < v46)
    v18 = *(_QWORD *)(v11 + 144);
  *(_QWORD *)(v11 + 328) = v12;
  *(_QWORD *)(v11 + 336) = v18;
  v20 = *(_QWORD *)(v11 + 192);
  v21 = *(_QWORD *)(v11 + 200);
  *(_QWORD *)(v11 + 344) = 0;
  *(_QWORD *)(v11 + 352) = v20;
  v22 = *(_QWORD *)(v19 + 48) - *(_QWORD *)(v11 + 160);
  if (v21 < v22)
    v22 = v21;
  *(_QWORD *)(v11 + 360) = v22;
  *(_QWORD *)(v11 + 368) = 0;
  v23 = lzma_code();
  if ((_DWORD)v23 == 9)
  {
    v45 = 9;
    v28 = "lzma data error (error %d)";
LABEL_33:
    v40 = (_DWORD *)a1;
    v41 = -1;
    goto LABEL_34;
  }
  if ((_DWORD)v23 == 1)
  {
    lzma_end();
    *(_BYTE *)(v11 + 464) = 0;
    v25 = *(_QWORD *)(v11 + 344);
    if (v25 == *(_QWORD *)(v11 + 144))
    {
      *(_BYTE *)(v11 + 186) = 1;
      goto LABEL_24;
    }
    v28 = "lzma alone premature end of stream";
    goto LABEL_33;
  }
  if ((_DWORD)v23)
  {
    v45 = v23;
    v28 = "lzma unknown error %d";
    goto LABEL_33;
  }
  v25 = *(_QWORD *)(v11 + 344);
LABEL_24:
  sub_1DB6E26F0(a1, v25, v24, v13, v14, v15, v16, v17);
  v36 = *(_QWORD *)(v11 + 368);
  v37 = *(_QWORD *)(v11 + 160) + v36;
  v38 = *(_QWORD *)(v11 + 144) - v25;
  v39 = *(_QWORD *)(v11 + 152) + v25;
  *(_QWORD *)(v11 + 144) = v38;
  *(_QWORD *)(v11 + 152) = v39;
  *(_QWORD *)(v11 + 160) = v37;
  if (!v38)
    *(_BYTE *)(v11 + 186) = 1;
  *a3 = v36;
  *a2 = *(_QWORD *)(v11 + 192);
  result = sub_1DB72B034((_DWORD *)a1, v11, v30, v31, v32, v33, v34, v35);
  if (!(_DWORD)result)
  {
    if (*(_BYTE *)(v11 + 186))
    {
      lzma_end();
      result = 0;
      *(_BYTE *)(v11 + 464) = 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1DB72AE30(_DWORD *a1, uint64_t a2)
{
  uint64_t result;
  z_stream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;

  if (*(_BYTE *)(a2 + 185))
    return 0;
  v5 = (z_stream *)(a2 + 208);
  if (*(_BYTE *)(a2 + 320))
  {
    result = inflateReset(v5);
    if ((_DWORD)result)
    {
LABEL_5:
      archive_set_error(a1, -1, "Can't initialize ZIP decompression.", v6, v7, v8, v9, v10, v11);
      return 4294967266;
    }
  }
  else
  {
    result = inflateInit2_(v5, -15, "1.2.12", 112);
    if ((_DWORD)result)
      goto LABEL_5;
  }
  *(_BYTE *)(a2 + 320) = 1;
  *(_BYTE *)(a2 + 185) = 1;
  return result;
}

uLong sub_1DB72AEB4(uLong result, char *a2, unint64_t a3, _BYTE *a4, unint64_t a5)
{
  unsigned int v5;
  uint64_t v6;
  uLong v9;
  char v10;
  __int16 v11;

  if (a3 >= a5)
    v5 = a5;
  else
    v5 = a3;
  v6 = v5;
  if (v5)
  {
    v9 = result;
    do
    {
      v10 = *a2++;
      v11 = ((*(_WORD *)(v9 + 8) | 2) ^ 1) * (*(_WORD *)(v9 + 8) | 2);
      *a4++ = v10 ^ HIBYTE(v11);
      result = sub_1DB72B150((int *)v9, v10 ^ HIBYTE(v11));
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_1DB72AF20(uint64_t a1, size_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = **(_QWORD **)(a1 + 2472);
  if (*(_BYTE *)(v2 + 8548))
  {
    v20 = 20;
    sub_1DB70C8F8((CCHmacContext *)(v2 + 8164), &v21, &v20);
    if (!a2)
    {
      a2 = sub_1DB6E2588(a1, 0xAuLL, 0, v6, v7, v8, v9, v10);
      if (!a2)
      {
        archive_set_error((_DWORD *)a1, 79, "Truncated ZIP file data", v6, v7, v8, v9, v10, v19);
        return 4294967266;
      }
    }
    v12 = v21 != *(_QWORD *)a2 || v22 != (unint64_t)*(unsigned __int16 *)(a2 + 8);
    sub_1DB6E26F0(a1, 10, v5, v6, v7, v8, v9, v10);
    if (v12)
    {
      archive_set_error((_DWORD *)a1, -1, "ZIP bad Authentication code", v13, v14, v15, v16, v17, v19);
      return 4294967276;
    }
  }
  return 0;
}

uint64_t sub_1DB72B034(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;

  v8 = *(unsigned __int8 *)(a2 + 186);
  if (*(_BYTE *)(a2 + 186))
  {
    if ((*(_WORD *)(*(_QWORD *)(a2 + 136) + 126) & 8) != 0)
    {
      v11 = sub_1DB6E2588((uint64_t)a1, 0x18uLL, 0, a4, a5, a6, a7, a8);
      if (v11)
      {
        if (*(_BYTE *)v11 == 80 && *(_BYTE *)(v11 + 1) == 75 && *(_BYTE *)(v11 + 2) == 7 && *(_BYTE *)(v11 + 3) == 8)
        {
          v11 += 4;
          *(_QWORD *)(a2 + 128) = 4;
        }
        v17 = *(_QWORD *)(a2 + 136);
        v18 = *(_BYTE *)(v17 + 130);
        *(_DWORD *)(v17 + 120) = *(_DWORD *)v11;
        if ((v18 & 1) != 0)
        {
          v20 = *(_QWORD *)(v11 + 4);
          if (v20 < 0 || (v21 = *(_QWORD *)(v11 + 12), v21 < 0))
          {
            archive_set_error(a1, 79, "Overflow of 64-bit file sizes", v12, v13, v14, v15, v16, v23);
            return 4294967271;
          }
          v8 = 0;
          *(_QWORD *)(v17 + 40) = v20;
          *(_QWORD *)(v17 + 48) = v21;
          v19 = *(_QWORD *)(a2 + 128) + 20;
        }
        else
        {
          v8 = 0;
          *(_QWORD *)(v17 + 40) = *(unsigned int *)(v11 + 4);
          *(_QWORD *)(v17 + 48) = *(unsigned int *)(v11 + 8);
          v19 = *(_QWORD *)(a2 + 128) + 12;
        }
        *(_QWORD *)(a2 + 128) = v19;
      }
      else
      {
        archive_set_error(a1, 79, "Truncated ZIP end-of-file record", v12, v13, v14, v15, v16, v23);
        return 4294967266;
      }
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

uLong sub_1DB72B150(int *a1, Bytef a2)
{
  int v3;
  int v4;
  int v5;
  uLong result;
  Bytef v7;
  Bytef buf;

  buf = a2;
  v3 = crc32(~*a1, &buf, 1u);
  v4 = a1[2];
  v5 = 134775813 * (a1[1] + ~(_BYTE)v3) + 1;
  *a1 = ~v3;
  a1[1] = v5;
  v7 = HIBYTE(v5);
  result = crc32(~v4, &v7, 1u);
  a1[2] = ~(_DWORD)result;
  return result;
}

uint64_t sub_1DB72B1CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  size_t v24;
  const void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  char *v39;
  _DWORD *v40;
  int v41;
  char *v43;
  char *v44;
  char *v45;

  v9 = **(_QWORD **)(a1 + 2472);
  v10 = (unsigned __int16 *)sub_1DB6E2588(a1, 2uLL, 0, a4, a5, a6, a7, a8);
  if (!v10)
    goto LABEL_10;
  v17 = *(_DWORD *)(v9 + 8552);
  *(_DWORD *)(v9 + 8552) = *v10;
  sub_1DB6E26F0(a1, 2, v11, v12, v13, v14, v15, v16);
  v23 = *(_DWORD *)(v9 + 8552);
  if (v17 < v23)
  {
    free(*(void **)(v9 + 8584));
    *(_QWORD *)(v9 + 8584) = 0;
    v23 = *(_DWORD *)(v9 + 8552);
  }
  v24 = sub_1DB6E2588(a1, v23, 0, v18, v19, v20, v21, v22);
  if (!v24)
    goto LABEL_10;
  v25 = (const void *)v24;
  v26 = *(void **)(v9 + 8584);
  if (!v26)
  {
    v26 = malloc_type_malloc(*(unsigned int *)(v9 + 8552), 0xB9C5EBD6uLL);
    *(_QWORD *)(v9 + 8584) = v26;
    if (!v26)
    {
      v39 = "No memory for ZIP decryption";
      v40 = (_DWORD *)a1;
      v41 = 12;
      goto LABEL_12;
    }
  }
  memcpy(v26, v25, *(unsigned int *)(v9 + 8552));
  sub_1DB6E26F0(a1, *(unsigned int *)(v9 + 8552), v27, v28, v29, v30, v31, v32);
  v38 = sub_1DB6E2588(a1, 0xEuLL, 0, v33, v34, v35, v36, v37);
  if (!v38)
  {
LABEL_10:
    v39 = "Truncated ZIP file data";
    goto LABEL_11;
  }
  if ((*(_DWORD *)v38 - 262145) < 0xFFFC000F)
  {
    v39 = "Corrupted ZIP file data";
LABEL_11:
    v40 = (_DWORD *)a1;
    v41 = 79;
LABEL_12:
    archive_set_error(v40, v41, v39, v12, v13, v14, v15, v16, v45);
    return 4294967266;
  }
  if (*(_WORD *)(v38 + 4) == 3)
  {
    v43 = (char *)*(unsigned __int16 *)(v38 + 6);
    *(_DWORD *)(v9 + 8556) = (_DWORD)v43;
    if (((_DWORD)v43 - 26113) <= 0xF && ((1 << ((_BYTE)v43 - 1)) & 0xE107) != 0
      || ((_DWORD)v43 - 26370) <= 0x1F && ((1 << ((_BYTE)v43 - 2)) & 0xC0000001) != 0
      || (_DWORD)v43 == 26625)
    {
      *(_DWORD *)(v9 + 8560) = *(unsigned __int16 *)(v38 + 8);
      v44 = (char *)*(unsigned __int16 *)(v38 + 10);
      *(_DWORD *)(v9 + 8564) = (_DWORD)v44;
      archive_set_error((_DWORD *)a1, 79, "Unknown encryption flag: %u", v12, v13, v14, v15, v16, v44);
    }
    else
    {
      archive_set_error((_DWORD *)a1, 79, "Unknown encryption algorithm: %u", v12, v13, v14, v15, v16, v43);
    }
  }
  else
  {
    archive_set_error((_DWORD *)a1, 79, "Unsupported encryption format version: %u", v12, v13, v14, v15, v16, (char *)*(unsigned __int16 *)(v38 + 4));
  }
  return 4294967271;
}

uint64_t sub_1DB72B3AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v11;
  uint64_t v12;
  size_t v13;
  uint8_t *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  size_t v22;
  uint8_t *v23;
  int v24;
  size_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  _OWORD v40[4];
  __int16 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v8 = **(_QWORD **)(a1 + 2472);
  if (!*(_BYTE *)(v8 + 8160) && !*(_BYTE *)(v8 + 8548))
  {
    v11 = *(_DWORD *)(*(_QWORD *)(v8 + 136) + 136) - 1;
    if (v11 <= 2)
    {
      v12 = 4 * (*(_DWORD *)(*(_QWORD *)(v8 + 136) + 136) - 1);
      v13 = sub_1DB6E2588(a1, v12 + 10, 0, a4, a5, a6, a7, a8);
      if (!v13)
      {
        v27 = "Truncated ZIP file data";
LABEL_26:
        archive_set_error((_DWORD *)a1, 79, v27, a4, a5, a6, a7, a8, v36);
        return 4294967266;
      }
      v14 = (uint8_t *)v13;
      v15 = sub_1DB70D870(a1);
      if (!v15)
      {
        v26 = "Passphrase required for this entry";
LABEL_20:
        archive_set_error((_DWORD *)a1, -1, v26, v16, v17, v18, v19, v20, v36);
        return 4294967271;
      }
      v21 = (char *)v15;
      v37 = v12 + 10;
      v38 = 4 * v11;
      v39 = 8 * v11 + 16;
      v22 = v12 + 8;
      v23 = &v14[v12 + 8];
      v24 = 10002;
      while (1)
      {
        v41 = 0;
        memset(v40, 0, sizeof(v40));
        v25 = strlen(v21);
        if (sub_1DB6E883C(v21, v25, v14, v22, 1000u, (uint8_t *)v40, (2 * v39) | 2))
          goto LABEL_19;
        if (*((unsigned __int8 *)v40 + 2 * v39) == *v23
          && *((unsigned __int8 *)v40 + ((2 * (v39 & 0xFFFFFFFFFLL)) | 1)) == v23[1])
        {
          break;
        }
        if (!--v24)
        {
          v26 = "Too many incorrect passphrases";
          goto LABEL_20;
        }
        v21 = (char *)sub_1DB70D870(a1);
        if (!v21)
        {
          v26 = "Incorrect passphrase";
          goto LABEL_20;
        }
      }
      if (sub_1DB6E8884(v8 + 8080, v40, v39))
      {
LABEL_19:
        v26 = "Decryption is unsupported due to lack of crypto library";
        goto LABEL_20;
      }
      if (sub_1DB70C8D0((CCHmacContext *)(v8 + 8164), (char *)v40 + v39, v39))
      {
        sub_1DB6E8A6C(v8 + 8080);
        v26 = "Failed to initialize HMAC-SHA1";
        goto LABEL_20;
      }
      *(_BYTE *)(v8 + 8548) = 1;
      *(_BYTE *)(v8 + 8160) = 1;
      sub_1DB6E26F0(a1, v37, v28, v29, v30, v31, v32, v33);
      v34 = *(_BYTE **)(v8 + 136);
      v35 = *(_QWORD *)(v8 + 144) - (v38 + 20);
      *(_QWORD *)(v8 + 144) = v35;
      if ((v34[126] & 8) != 0 || (v35 & 0x8000000000000000) == 0)
      {
        *(_QWORD *)(v8 + 152) += v38 + 20;
        *(_QWORD *)(v8 + 8048) = 0;
        v34[128] = v34[140];
        return sub_1DB72C358(a1);
      }
    }
    v27 = "Corrupted ZIP file data";
    goto LABEL_26;
  }
  return 0;
}

uint64_t sub_1DB72B670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  int v25;
  size_t v26;
  size_t v27;
  Bytef v28;
  uint64_t i;
  unsigned int v30;
  int v31;
  uint64_t v32;
  char *v33;
  char *v34;
  _BYTE v35[12];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v8 = **(_QWORD **)(a1 + 2472);
  if (*(_BYTE *)(v8 + 8076))
    return 0;
  if ((*(_WORD *)(*(_QWORD *)(v8 + 136) + 126) & 8) == 0 && *(uint64_t *)(v8 + 144) <= 11)
  {
    archive_set_error((_DWORD *)a1, 79, "Truncated Zip encrypted body: only %jd bytes available", a4, a5, a6, a7, a8, *(char **)(v8 + 144));
    return 4294967266;
  }
  v11 = sub_1DB6E2588(a1, 0xCuLL, 0, a4, a5, a6, a7, a8);
  if (!v11)
  {
    archive_set_error((_DWORD *)a1, 79, "Truncated ZIP file data", v12, v13, v14, v15, v16, v34);
    return 4294967266;
  }
  v17 = v11;
  v18 = sub_1DB70D870(a1);
  if (v18)
  {
    v24 = v18;
    v25 = 0;
    while (1)
    {
      v26 = strlen(v24);
      *(_QWORD *)(v8 + 8064) = 0x2345678912345678;
      *(_DWORD *)(v8 + 8072) = 878082192;
      if (v26)
      {
        v27 = v26;
        do
        {
          v28 = *v24++;
          sub_1DB72B150((int *)(v8 + 8064), v28);
          --v27;
        }
        while (v27);
      }
      for (i = 0; i != 12; ++i)
      {
        v30 = ((*(_DWORD *)(v8 + 8072) | 2) ^ 1) * (*(_DWORD *)(v8 + 8072) | 2);
        v31 = *(unsigned __int8 *)(v17 + i) ^ (v30 >> 8);
        v35[i] = *(_BYTE *)(v17 + i) ^ BYTE1(v30);
        sub_1DB72B150((int *)(v8 + 8064), v31);
      }
      if (v35[11] == *(unsigned __int8 *)(*(_QWORD *)(v8 + 136) + 131))
        break;
      if (v25 == 10001)
      {
        v33 = "Too many incorrect passphrases";
        goto LABEL_25;
      }
      ++v25;
      v24 = sub_1DB70D870(a1);
      if (!v24)
      {
        v33 = "Incorrect passphrase";
        goto LABEL_25;
      }
    }
    sub_1DB6E26F0(a1, 12, v32, v19, v20, v21, v22, v23);
    *(_BYTE *)(v8 + 8076) = 1;
    if ((*(_WORD *)(*(_QWORD *)(v8 + 136) + 126) & 8) == 0)
      *(_QWORD *)(v8 + 144) -= 12;
    *(_QWORD *)(v8 + 152) += 12;
    *(_QWORD *)(v8 + 8048) = 0;
    return sub_1DB72C358(a1);
  }
  else
  {
    v33 = "Passphrase required for this entry";
LABEL_25:
    archive_set_error((_DWORD *)a1, -1, v33, v19, v20, v21, v22, v23, v34);
    return 4294967271;
  }
}

int64x2_t sub_1DB72B8D8(uint64_t a1, char **a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  int64_t v20;
  int64_t v21;
  size_t v22;
  int64x2_t result;
  int v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;

  v38 = 0;
  v11 = **(_QWORD **)(a1 + 2472);
  if ((*(_WORD *)(*(_QWORD *)(v11 + 136) + 126) & 8) != 0)
  {
    if (*(_BYTE *)(v11 + 8548))
      v21 = 34;
    else
      v21 = 24;
    v22 = sub_1DB6E2588(a1, v21, &v38, a4, a5, a6, a7, a8);
    if (v38 < v21)
      goto LABEL_10;
    v19 = (char *)v22;
    v24 = *(unsigned __int8 *)(v11 + 8548);
    v25 = 10;
    if (!*(_BYTE *)(v11 + 8548))
      v25 = 0;
    v26 = v22 + v25;
    if (*(_BYTE *)v26 == 80 && *(_BYTE *)(v26 + 1) == 75 && *(_BYTE *)(v26 + 2) == 7 && *(_BYTE *)(v26 + 3) == 8)
    {
      v27 = *(unsigned int *)(v26 + 4);
      if (*(_QWORD *)(v11 + 168) == v27
        || *(_BYTE *)(v11 + 184)
        || *(_BYTE *)(v11 + 8548) && *(_DWORD *)(*(_QWORD *)(v11 + 136) + 132) == 2)
      {
        v28 = *(_QWORD *)(v11 + 136);
        v29 = *(_BYTE *)(v28 + 130);
        *(_DWORD *)(v28 + 120) = v27;
        if ((v29 & 1) != 0)
        {
          v32 = *(_QWORD *)(v26 + 8);
          if (v32 < 0 || (v30 = *(_QWORD *)(v26 + 16), v30 < 0))
          {
            archive_set_error((_DWORD *)a1, 79, "Overflow of 64-bit file sizes", v13, v14, v15, v16, v17, v37);
            return result;
          }
          *(_QWORD *)(v28 + 40) = v32;
          v31 = 24;
        }
        else
        {
          *(_QWORD *)(v28 + 40) = *(unsigned int *)(v26 + 8);
          v30 = *(unsigned int *)(v26 + 12);
          v31 = 16;
        }
        *(_QWORD *)(v28 + 48) = v30;
        *(_QWORD *)(v11 + 128) = v31;
        if (!v24 || !sub_1DB72AF20(a1, v22))
          *(_BYTE *)(v11 + 186) = 1;
        return result;
      }
    }
    v33 = (_BYTE *)(v26 + 1);
    while (1)
    {
      if ((unint64_t)v33 >= v22 + v38 - 4)
      {
LABEL_51:
        v18 = (unint64_t)&v33[-v22];
        v38 = (uint64_t)&v33[-v22];
        goto LABEL_52;
      }
      v34 = v33[3];
      if (v34 > 0x4A)
      {
        if (v34 == 80)
        {
          v33 += 3;
        }
        else
        {
          if (v34 != 75)
            goto LABEL_45;
          v33 += 2;
        }
      }
      else if (v34 == 7)
      {
        ++v33;
      }
      else
      {
        if (v34 == 8 && v33[2] == 7 && v33[1] == 75 && *v33 == 80)
        {
          v35 = v24 == 0;
          v36 = -10;
          if (v35)
            v36 = 0;
          v33 += v36;
          goto LABEL_51;
        }
LABEL_45:
        v33 += 4;
      }
    }
  }
  if (*(_QWORD *)(v11 + 144))
  {
    v12 = sub_1DB6E2588(a1, 1uLL, &v38, a4, a5, a6, a7, a8);
    v18 = v38;
    if (v38 > 0)
    {
      v19 = (char *)v12;
      v20 = *(_QWORD *)(v11 + 144);
      if (v38 > v20)
      {
        v38 = *(_QWORD *)(v11 + 144);
        v18 = v20;
      }
LABEL_52:
      if (*(_BYTE *)(v11 + 8076))
      {
        if (v18 >= *(_QWORD *)(v11 + 8040))
          v18 = *(_QWORD *)(v11 + 8040);
        sub_1DB72AEB4(v11 + 8064, v19, v18, *(_BYTE **)(v11 + 8024), v18);
      }
      else
      {
        if (!*(_BYTE *)(v11 + 8160))
        {
LABEL_61:
          *a3 = v18;
          *(_QWORD *)(v11 + 144) -= v18;
          result = vaddq_s64(*(int64x2_t *)(v11 + 152), vdupq_n_s64(v18));
          *(int64x2_t *)(v11 + 152) = result;
          *(_QWORD *)(v11 + 128) += v18;
          *a2 = v19;
          return result;
        }
        if (v18 >= *(_QWORD *)(v11 + 8040))
          v18 = *(_QWORD *)(v11 + 8040);
        v37 = (char *)v18;
        j__CCHmacUpdate((CCHmacContext *)(v11 + 8164), v19, v18);
        sub_1DB6E8908(v11 + 8080, (uint64_t)v19, v18, *(_QWORD *)(v11 + 8024), (unint64_t *)&v37);
      }
      v19 = *(char **)(v11 + 8024);
      goto LABEL_61;
    }
LABEL_10:
    archive_set_error((_DWORD *)a1, 79, "Truncated ZIP file data", v13, v14, v15, v16, v17, v37);
    return result;
  }
  *(_BYTE *)(v11 + 186) = 1;
  if (*(_BYTE *)(v11 + 8548))
    sub_1DB72AF20(a1, 0);
  return result;
}

uint64_t sub_1DB72BC58(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char *v17;
  _DWORD *v18;
  int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;

  v11 = **(_QWORD **)(a1 + 2472);
  v38 = 0;
  if (!*(_BYTE *)(v11 + 185))
  {
    if (*(_BYTE *)(v11 + 552))
    {
      BZ2_bzDecompressEnd((bz_stream *)(v11 + 472));
      *(_BYTE *)(v11 + 552) = 0;
    }
    *(_OWORD *)(v11 + 520) = 0u;
    *(_OWORD *)(v11 + 536) = 0u;
    *(_OWORD *)(v11 + 488) = 0u;
    *(_OWORD *)(v11 + 504) = 0u;
    *(_OWORD *)(v11 + 472) = 0u;
    v20 = (char *)BZ2_bzDecompressInit((bz_stream *)(v11 + 472), 0, 1);
    if ((_DWORD)v20)
    {
      archive_set_error((_DWORD *)a1, -1, "bzip2 initialization failed(%d)", v21, v22, v23, v24, v25, v20);
      return 4294967271;
    }
    *(_BYTE *)(v11 + 552) = 1;
    free(*(void **)(v11 + 192));
    *(_QWORD *)(v11 + 200) = 0x40000;
    v27 = malloc_type_malloc(0x40000uLL, 0x3C0047E2uLL);
    *(_QWORD *)(v11 + 192) = v27;
    if (!v27)
    {
      v17 = "No memory for bzip2 decompression";
      v18 = (_DWORD *)a1;
      v19 = 12;
      goto LABEL_20;
    }
    *(_BYTE *)(v11 + 185) = 1;
  }
  v12 = sub_1DB6E2588(a1, 1uLL, &v38, a4, a5, a6, a7, a8);
  v13 = v38;
  if ((v38 & 0x8000000000000000) == 0)
  {
    if (*(_QWORD *)(v11 + 144) < v38)
      v13 = *(_QWORD *)(v11 + 144);
    if (v13 > 0)
    {
      *(_QWORD *)(v11 + 472) = v12;
      *(_DWORD *)(v11 + 480) = v13;
      *(_QWORD *)(v11 + 484) = 0;
      v14 = *(_QWORD *)(v11 + 200);
      *(_QWORD *)(v11 + 496) = *(_QWORD *)(v11 + 192);
      *(_DWORD *)(v11 + 504) = v14;
      *(_DWORD *)(v11 + 512) = 0;
      *(_DWORD *)(v11 + 508) = 0;
      v15 = BZ2_bzDecompress((bz_stream *)(v11 + 472));
      if (v15)
      {
        if (v15 != 4)
        {
          v17 = "bzip2 decompression failed";
          goto LABEL_18;
        }
        if (BZ2_bzDecompressEnd((bz_stream *)(v11 + 472)))
        {
          v17 = "Failed to clean up bzip2 decompressor";
LABEL_18:
          v18 = (_DWORD *)a1;
          v19 = -1;
          goto LABEL_20;
        }
        *(_BYTE *)(v11 + 186) = 1;
      }
      v28 = *(unsigned int *)(v11 + 484);
      sub_1DB6E26F0(a1, v28, v16, a4, a5, a6, a7, a8);
      v29 = *(_QWORD *)(v11 + 508);
      v30 = *(_QWORD *)(v11 + 152) + v28;
      *(_QWORD *)(v11 + 144) -= v28;
      *(_QWORD *)(v11 + 152) = v30;
      *(_QWORD *)(v11 + 160) += v29;
      *a3 = v29;
      *a2 = *(_QWORD *)(v11 + 192);
      return sub_1DB72B034((_DWORD *)a1, v11, v31, v32, v33, v34, v35, v36);
    }
  }
  v17 = "Truncated bzip2 file body";
  v18 = (_DWORD *)a1;
  v19 = 79;
LABEL_20:
  archive_set_error(v18, v19, v17, a4, a5, a6, a7, a8, v37);
  return 4294967266;
}

uint64_t sub_1DB72BE54(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _DWORD *v35;
  int v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;

  v11 = **(_QWORD **)(a1 + 2472);
  if (*(_BYTE *)(v11 + 185))
  {
LABEL_2:
    v39 = 0;
    v12 = sub_1DB6E2588(a1, 1uLL, &v39, a4, a5, a6, a7, a8);
    v13 = v39;
    if (v39 < 0)
    {
      v34 = "Truncated xz file body";
      v35 = (_DWORD *)a1;
      v36 = 79;
    }
    else
    {
      if (*(_QWORD *)(v11 + 144) < v39)
        v13 = *(_QWORD *)(v11 + 144);
      *(_QWORD *)(v11 + 328) = v12;
      *(_QWORD *)(v11 + 336) = v13;
      v14 = *(_QWORD *)(v11 + 192);
      v15 = *(_QWORD *)(v11 + 200);
      *(_QWORD *)(v11 + 344) = 0;
      *(_QWORD *)(v11 + 352) = v14;
      *(_QWORD *)(v11 + 360) = v15;
      *(_QWORD *)(v11 + 368) = 0;
      v16 = lzma_code();
      switch((int)v16)
      {
        case 0:
        case 2:
          goto LABEL_8;
        case 1:
          lzma_end();
          *(_BYTE *)(v11 + 464) = 0;
          if (*(_QWORD *)(v11 + 344) == *(_QWORD *)(v11 + 144))
          {
            *(_BYTE *)(v11 + 186) = 1;
LABEL_8:
            v18 = *(_QWORD *)(v11 + 344);
            sub_1DB6E26F0(a1, v18, v17, a4, a5, a6, a7, a8);
            v19 = *(_QWORD *)(v11 + 152) + v18;
            *(_QWORD *)(v11 + 144) -= v18;
            *(_QWORD *)(v11 + 152) = v19;
            v20 = *(_QWORD *)(v11 + 368);
            *(_QWORD *)(v11 + 160) += v20;
            *a3 = v20;
            *a2 = *(_QWORD *)(v11 + 192);
            return sub_1DB72B034((_DWORD *)a1, v11, v21, v22, v23, v24, v25, v26);
          }
          v34 = "xz premature end of stream";
LABEL_20:
          v35 = (_DWORD *)a1;
          v36 = -1;
          break;
        case 9:
          v38 = 9;
          v34 = "xz data error (error %d)";
          goto LABEL_20;
        default:
          v38 = v16;
          v34 = "xz unknown error %d";
          goto LABEL_20;
      }
    }
    goto LABEL_21;
  }
  if (*(_BYTE *)(v11 + 464))
  {
    lzma_end();
    *(_BYTE *)(v11 + 464) = 0;
  }
  *(_QWORD *)(v11 + 456) = 0;
  *(_OWORD *)(v11 + 424) = 0u;
  *(_OWORD *)(v11 + 440) = 0u;
  *(_OWORD *)(v11 + 392) = 0u;
  *(_OWORD *)(v11 + 408) = 0u;
  *(_OWORD *)(v11 + 360) = 0u;
  *(_OWORD *)(v11 + 376) = 0u;
  *(_OWORD *)(v11 + 328) = 0u;
  *(_OWORD *)(v11 + 344) = 0u;
  v28 = (char *)lzma_stream_decoder();
  if ((_DWORD)v28)
  {
    archive_set_error((_DWORD *)a1, -1, "xz initialization failed(%d)", v29, v30, v31, v32, v33, v28);
    return 4294967271;
  }
  *(_BYTE *)(v11 + 464) = 1;
  free(*(void **)(v11 + 192));
  *(_QWORD *)(v11 + 200) = 0x40000;
  v37 = malloc_type_malloc(0x40000uLL, 0x468136EFuLL);
  *(_QWORD *)(v11 + 192) = v37;
  if (v37)
  {
    *(_BYTE *)(v11 + 185) = 1;
    goto LABEL_2;
  }
  v34 = "No memory for xz decompression";
  v35 = (_DWORD *)a1;
  v36 = 12;
LABEL_21:
  archive_set_error(v35, v36, v34, a4, a5, a6, a7, a8, (char *)v38);
  return 4294967266;
}

uint64_t sub_1DB72C078(uint64_t a1, _QWORD *a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  int v41;
  int v42;
  char *v43;
  void *v45;
  char *v46;
  uint64_t v47;

  v11 = **(_QWORD **)(a1 + 2472);
  v12 = (_BYTE *)(v11 + 7976);
  v47 = 0;
  if (!*(_BYTE *)(v11 + 185))
  {
    if (*v12)
    {
      sub_1DB70F548(v11 + 584);
      *v12 = 0;
    }
    sub_1DB70F458(v11 + 584);
    *(_BYTE *)(v11 + 7977) = 0;
    *(_QWORD *)(v11 + 704) = v11 + 560;
    *(_QWORD *)(v11 + 560) = a1;
    *(_QWORD *)(v11 + 568) = sub_1DB72C3CC;
    *(_QWORD *)(v11 + 576) = 0;
    v23 = sub_1DB6E2588(a1, 2uLL, 0, v18, v19, v20, v21, v22);
    if (!v23)
    {
      v17 = "Truncated file data in PPMd8 stream";
      goto LABEL_23;
    }
    v25 = (unsigned __int8 *)v23;
    sub_1DB6E26F0(a1, 2, v24, a4, a5, a6, a7, a8);
    v31 = v25[1];
    v32 = *v25 | (v31 << 8);
    v33 = *v25 & 0xF;
    v34 = v33 + 1;
    v35 = (v31 >> 4) & 0xFFFFF;
    if (v35 > 2 || v33 == 0)
    {
      archive_set_error((_DWORD *)a1, 79, "Invalid parameter set in PPMd8 stream (order=%d, restore=%d)", v26, v27, v28, v29, v30, (char *)(v33 + 1));
      return 4294967271;
    }
    v42 = (v32 << 16) & 0xFF00000;
    v43 = (char *)(v42 + 0x100000);
    if (sub_1DB70F574(v11 + 584, v42 + 0x100000))
    {
      *v12 = 1;
      if (!sub_1DB710298(v11 + 584))
      {
        v17 = "PPMd8 stream range decoder initialization error";
        v40 = (_DWORD *)a1;
        v41 = 22;
        goto LABEL_24;
      }
      sub_1DB70F5E4((_DWORD *)(v11 + 584), v34, v35);
      free(*(void **)(v11 + 192));
      *(_QWORD *)(v11 + 200) = 0x40000;
      v45 = malloc_type_malloc(0x40000uLL, 0xEE435559uLL);
      *(_QWORD *)(v11 + 192) = v45;
      if (v45)
      {
        *(_BYTE *)(v11 + 185) = 1;
        *(_QWORD *)(v11 + 152) += *(_QWORD *)(v11 + 576) + 2;
        goto LABEL_2;
      }
      v17 = "No memory for PPMd8 decompression";
    }
    else
    {
      v46 = v43;
      v17 = "Unable to allocate memory for PPMd8 stream: %d bytes";
    }
    v40 = (_DWORD *)a1;
    v41 = 12;
    goto LABEL_24;
  }
LABEL_2:
  sub_1DB6E2588(a1, 1uLL, &v47, a4, a5, a6, a7, a8);
  if (v47 < 0)
  {
LABEL_8:
    v17 = "Truncated PPMd8 file body";
LABEL_23:
    v40 = (_DWORD *)a1;
    v41 = 79;
LABEL_24:
    archive_set_error(v40, v41, v17, a4, a5, a6, a7, a8, v46);
    return 4294967266;
  }
  v13 = 0;
  *(_QWORD *)(v11 + 576) = 0;
  while (1)
  {
    v14 = sub_1DB7102F4((unsigned __int8 **)(v11 + 584));
    if (v14 < 0)
      break;
    if (*(_BYTE *)(v11 + 7977))
      goto LABEL_8;
    *(_BYTE *)(*(_QWORD *)(v11 + 192) + v13++) = v14;
    if (v13 >= *(_QWORD *)(v11 + 200))
    {
      v16 = *(_BYTE *)(v11 + 186) == 0;
      goto LABEL_19;
    }
  }
  v16 = 0;
  *(_BYTE *)(v11 + 186) = 1;
LABEL_19:
  *a2 = *(_QWORD *)(v11 + 192);
  *a3 = v13;
  v38 = *(_QWORD *)(v11 + 576);
  v39 = *(_QWORD *)(v11 + 152);
  *(_QWORD *)(v11 + 144) -= v38;
  *(_QWORD *)(v11 + 152) = v39 + v38;
  *(_QWORD *)(v11 + 160) += v13;
  if (!v16)
  {
    sub_1DB70F548(v11 + 584);
    *v12 = 0;
  }
  return sub_1DB72B034((_DWORD *)a1, v11, v15, a4, a5, a6, a7, a8);
}

uint64_t sub_1DB72C358(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;

  v2 = *(_QWORD *)(a1 + 2472);
  v3 = *(_QWORD **)v2;
  v4 = *(void **)(*(_QWORD *)v2 + 8024);
  if (v4 || (v3[1005] = 0x40000, v4 = malloc_type_malloc(0x40000uLL, 0x94AD3BACuLL), (v3[1003] = v4) != 0))
  {
    v10 = 0;
    v3[1004] = v4;
  }
  else
  {
    archive_set_error((_DWORD *)a1, 12, "No memory for ZIP decryption", v5, v6, v7, v8, v9, v12);
    return 4294967266;
  }
  return v10;
}

uint64_t sub_1DB72C3CC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t result;
  uint64_t v19;

  v8 = *a1;
  v9 = **(_QWORD **)(*a1 + 2472);
  v19 = 0;
  v10 = sub_1DB6E2588(v8, 1uLL, &v19, a4, a5, a6, a7, a8);
  if (v19 <= 0)
  {
    result = 0;
    *(_BYTE *)(v9 + 7977) = 1;
  }
  else
  {
    v17 = (unsigned __int8 *)v10;
    sub_1DB6E26F0(v8, 1, v11, v12, v13, v14, v15, v16);
    ++*(_QWORD *)(v9 + 576);
    return *v17;
  }
  return result;
}

uint64_t sub_1DB72C454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if (*(_WORD *)(a2 + 4) || *(_WORD *)(a2 + 6))
    return 0;
  v3 = *(unsigned int *)(a2 + 12);
  v4 = *(unsigned int *)(a2 + 16);
  if (*(unsigned __int16 *)(a2 + 10) != *(unsigned __int16 *)(a2 + 8) || (v4 + v3) > a3)
    return 0;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = a3 - v3;
  return 32;
}

size_t sub_1DB72C498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (*(_DWORD *)(a3 + 4) || *(_DWORD *)(a3 + 16) != 1 || sub_1DB6F802C(a1, *(_QWORD *)(a3 + 8), 0) < 0)
    return 0;
  result = sub_1DB6E2588(a1, 0x38uLL, 0, v5, v6, v7, v8, v9);
  if (!result)
    return result;
  v16 = *(_QWORD *)(result + 4);
  if ((unint64_t)(v16 - 16373) < 0xFFFFFFFFFFFFC037)
    return 0;
  result = sub_1DB6E2588(a1, v16 + 12, 0, v11, v12, v13, v14, v15);
  if (!result)
    return result;
  if (*(_DWORD *)(result + 16) || *(_DWORD *)(result + 20) || *(_QWORD *)(result + 24) != *(_QWORD *)(result + 32))
    return 0;
  v17 = *(_QWORD *)(result + 48);
  *(_QWORD *)(a2 + 24) = v17;
  *(_QWORD *)(a2 + 32) = v17;
  return 32;
}

uint64_t sub_1DB72C54C(unint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;

  result = 4294967266;
  if (a1)
  {
    if (a2)
    {
      v5 = a2[5];
      if ((v5 & 0x8000000000000000) == 0)
      {
        v6 = a2[4];
        if ((v6 & 0x8000000000000000) == 0)
        {
          v7 = __OFADD__(v5, 29);
          v8 = v5 + 29;
          if (!v7)
          {
            v9 = v6 + v8;
            if (!__OFADD__(v6, v8) && v6 <= v9)
            {
              if (sub_1DB733364((unint64_t)a1, a2))
              {
                v10 = sub_1DB733688(a1, (unint64_t)a2, 0);
                if (!v10)
                  goto LABEL_25;
                v11 = v10;
                v12 = *(_QWORD *)(v10 + 40);
                result = 4294967266;
                if ((v12 & 0x8000000000000000) == 0)
                {
                  v13 = *(_QWORD *)(v11 + 32);
                  if ((v13 & 0x8000000000000000) == 0)
                  {
                    v7 = __OFADD__(v12, 29);
                    v14 = v12 + 29;
                    if (!v7)
                    {
                      v7 = __OFADD__(v13, v14);
                      v15 = v13 + v14;
                      if (!v7 && v13 <= v15 && v15 < v6)
                      {
LABEL_25:
                        v16 = sub_1DB733688(a1, (unint64_t)a2, 1u);
                        if (!v16)
                          return 0;
                        v17 = v16;
                        v18 = *(_QWORD *)(v16 + 40);
                        result = 4294967266;
                        if ((v18 & 0x8000000000000000) == 0)
                        {
                          v19 = *(_QWORD *)(v17 + 32);
                          if ((v19 & 0x8000000000000000) == 0)
                          {
                            v7 = __OFADD__(v18, 29);
                            v20 = v18 + 29;
                            if (!v7)
                            {
                              v7 = __OFADD__(v19, v20);
                              v21 = v19 + v20;
                              v22 = v7;
                              if (v19 > v9 && !v22 && v19 <= v21)
                                return 0;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              else
              {
                return 4294967266;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1DB72C660(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _BOOL4 v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a2 + 32);
  v4 = v2 <= v3;
  v5 = v2 < v3;
  if (v4)
    return v5;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_1DB72C678()
{
  return 1;
}

uint64_t sub_1DB72C680(uint64_t a1, uint64_t a2)
{
  return strcmp(*(const char **)(a2 + 72), *(const char **)(a1 + 72));
}

uint64_t sub_1DB72C690(uint64_t a1, char *__s1)
{
  return strcmp(__s1, *(const char **)(a1 + 72));
}

uint64_t sub_1DB72C6A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _BOOL4 v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a2 + 40);
  v4 = v2 <= v3;
  v5 = v2 < v3;
  if (v4)
    return v5;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_1DB72C6B8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  if (!a2)
    sub_1DB730818(1, "Programming error");
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 > *a2)
    return 0xFFFFFFFFLL;
  else
    return v2 < *a2;
}

void archive_read_support_filter_compress(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;

  if (sub_1DB6E4544("compress"))
  {
    if (sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_filter_compress", v3, v4, v5, v6) != -30)
    {
      v16 = 0;
      sub_1DB6F7FD0(a1, &v16, v7, v8, v9, v10, v11, v12);
      if (!v13)
      {
        *v16 = 0;
        v14 = v16;
        v16[1] = "compress (.Z)";
        v14[2] = sub_1DB72C7B4;
        v14[3] = sub_1DB72C818;
        v14[4] = 0;
        v14[5] = sub_1DB72C99C;
      }
    }
  }
  else
  {
    archive_set_error(a1, -1, "Format not allow-listed in entitlements", v2, v3, v4, v5, v6, v15);
  }
}

size_t sub_1DB72C7B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t result;
  uint64_t v9;

  v9 = 0;
  result = sub_1DB6E22F4(a2, 3uLL, &v9, a4, a5, a6, a7, a8);
  if (result)
  {
    if (*(_BYTE *)result == 31 && *(unsigned __int8 *)(result + 1) == 157 && (*(_BYTE *)(result + 2) & 0x20) == 0)
    {
      if ((*(_BYTE *)(result + 2) & 0x40) != 0)
        return 0;
      else
        return 18;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1DB72C818(uint64_t a1)
{
  char *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  _DWORD *v31;
  char *v32;
  int v33;
  uint64_t v35;
  char *v36;

  *(_DWORD *)(a1 + 104) = 3;
  *(_QWORD *)(a1 + 96) = "compress (.Z)";
  v2 = (char *)malloc_type_calloc(0x3FF80uLL, 1uLL, 0xC7A90208uLL);
  v3 = malloc_type_malloc(0x10000uLL, 0x333F8612uLL);
  if (!v2 || !v3)
  {
    free(v3);
    free(v2);
    v31 = *(_DWORD **)(a1 + 24);
    v36 = *(char **)(a1 + 96);
    v32 = "Can't allocate data for %s decompression";
    v33 = 12;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 88) = v2;
  *((_QWORD *)v2 + 5) = 0x10000;
  *((_QWORD *)v2 + 6) = v3;
  *(_QWORD *)(a1 + 40) = sub_1DB72C9A8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = sub_1DB72CA84;
  sub_1DB72CAB4(a1, 8, v4, v5, v6, v7, v8, v9);
  sub_1DB72CAB4(a1, 8, v10, v11, v12, v13, v14, v15);
  v22 = sub_1DB72CAB4(a1, 8, v16, v17, v18, v19, v20, v21);
  v30 = v22 & 0x1F;
  if (v30 >= 0x11)
  {
    v31 = *(_DWORD **)(a1 + 24);
    v32 = "Invalid compressed data";
    v33 = -1;
LABEL_6:
    archive_set_error(v31, v33, v32, v25, v26, v27, v28, v29, v36);
    return 4294967266;
  }
  *((_DWORD *)v2 + 16) = 1 << v30;
  *((_DWORD *)v2 + 17) = v30;
  *((_DWORD *)v2 + 14) = v22 & 0x80;
  *((_DWORD *)v2 + 22) = 256;
  *((_QWORD *)v2 + 24588) = v2 + 196712;
  if (v22 < 0)
    *((_DWORD *)v2 + 22) = 257;
  v35 = 0;
  *((_QWORD *)v2 + 9) = 0x9000001FFLL;
  *((_DWORD *)v2 + 20) = -1;
  do
  {
    *(_WORD *)&v2[2 * v35 + 66138] = 0;
    v2[v35 + 347] = v35 - 1;
    --v35;
  }
  while (v35 != -256);
  sub_1DB72CBB8(a1, v23, v24, v25, v26, v27, v28, v29);
  return 0;
}

uint64_t sub_1DB72C99C(_QWORD *a1)
{
  *a1 = 0;
  return 0;
}

_BYTE *sub_1DB72C9A8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _BYTE *result;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  v9 = *(_QWORD *)(a1 + 88);
  if (*(_DWORD *)(v9 + 60))
  {
    result = 0;
    *a2 = 0;
  }
  else
  {
    v11 = *(_QWORD *)(v9 + 40);
    v12 = *(_BYTE **)(v9 + 48);
    v13 = v12;
    if (v11 >= 1)
    {
      v15 = (unint64_t)&v12[v11];
      v16 = (uint64_t *)(v9 + 196704);
      v13 = *(_BYTE **)(v9 + 48);
      while (!*(_DWORD *)(v9 + 60))
      {
        v17 = *v16;
        if (*v16 <= (unint64_t)(v9 + 196712))
        {
          LODWORD(result) = sub_1DB72CBB8(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          if ((_DWORD)result)
          {
            if ((_DWORD)result != -1)
              return (_BYTE *)(int)result;
            *(_DWORD *)(v9 + 60) = -1;
          }
        }
        else
        {
          *v16 = v17 - 1;
          *v13++ = *(_BYTE *)(v17 - 1);
        }
        if ((unint64_t)v13 >= v15)
          break;
      }
    }
    *a2 = v12;
    return (_BYTE *)(v13 - v12);
  }
  return result;
}

uint64_t sub_1DB72CA84(uint64_t a1)
{
  void **v1;

  v1 = *(void ***)(a1 + 88);
  free(v1[6]);
  free(v1);
  return 0;
}

uint64_t sub_1DB72CAB4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 **v9;
  int v10;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v18;

  v9 = *(unsigned __int8 ***)(a1 + 88);
  v10 = *((_DWORD *)v9 + 7);
  if (v10 < a2)
  {
    v18 = 0;
    v12 = v9[1];
    while (1)
    {
      if (v12)
      {
        v13 = *v9;
      }
      else
      {
        v14 = (uint64_t)v9[2];
        if (v14)
        {
          sub_1DB6E26F8(*(_QWORD *)(a1 + 16), v14, a3, a4, a5, a6, a7, a8);
          v9[2] = 0;
        }
        v13 = (unsigned __int8 *)sub_1DB6E22F4(*(_QWORD *)(a1 + 16), 1uLL, &v18, a4, a5, a6, a7, a8);
        *v9 = v13;
        v12 = v18;
        if (!v18)
          return 0xFFFFFFFFLL;
        v15 = 4294967266;
        if (((unint64_t)v18 & 0x8000000000000000) != 0 || !v13)
          return v15;
        v9[1] = v18;
        v9[2] = v12;
        v10 = *((_DWORD *)v9 + 7);
      }
      *v9 = v13 + 1;
      v16 = *((_DWORD *)v9 + 6) | (*v13 << v10);
      v9[1] = --v12;
      v10 += 8;
      *((_DWORD *)v9 + 6) = v16;
      *((_DWORD *)v9 + 7) = v10;
      ++v9[4];
      if (v10 >= a2)
        goto LABEL_14;
    }
  }
  v16 = *((_DWORD *)v9 + 6);
LABEL_14:
  *((_DWORD *)v9 + 6) = v16 >> a2;
  *((_DWORD *)v9 + 7) = v10 - a2;
  return dword_1DB74D6A0[a2] & v16;
}

uint64_t sub_1DB72CBB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  _BYTE *v24;
  int v25;
  _QWORD *v26;
  char v27;
  _BYTE *v28;
  _BYTE *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  char *v34;

  v9 = *(_QWORD *)(a1 + 88);
  v10 = (int *)(v9 + 76);
  result = sub_1DB72CAB4(a1, *(_DWORD *)(v9 + 76), a3, a4, a5, a6, a7, a8);
  if ((result & 0x80000000) == 0)
  {
    while (1)
    {
      v18 = (dword_1F02F76BC + 1) <= 0x3FF ? dword_1F02F76BC + 1 : 0;
      dword_1F02F76BC = v18;
      if ((_DWORD)result != 256 || !*(_DWORD *)(v9 + 56))
        break;
      v19 = *v10;
      v20 = v19 + *(_QWORD *)(v9 + 32) / v19 * v19 - *(_QWORD *)(v9 + 32);
      *(_DWORD *)(v9 + 28) = 0;
      v21 = v20 % (int)v19 + 1;
      while (--v21 >= 1)
      {
        result = sub_1DB72CAB4(a1, 8, v12, v13, v14, v15, v16, v17);
        if ((result & 0x80000000) != 0)
          return result;
      }
      *(_QWORD *)(v9 + 32) = 0;
      *v10 = 9;
      *(_DWORD *)(v9 + 72) = 511;
      *(_DWORD *)(v9 + 88) = 257;
      *(_DWORD *)(v9 + 80) = -1;
      v9 = *(_QWORD *)(a1 + 88);
      v10 = (int *)(v9 + 76);
      result = sub_1DB72CAB4(a1, *(_DWORD *)(v9 + 76), v12, v13, v14, v15, v16, v17);
      if ((result & 0x80000000) != 0)
        return result;
    }
    v22 = *(_DWORD *)(v9 + 88);
    if ((int)result > v22 || (_DWORD)result == v22 && (*(_DWORD *)(v9 + 80) & 0x80000000) != 0)
    {
      archive_set_error(*(_DWORD **)(a1 + 24), -1, "Invalid compressed data", v13, v14, v15, v16, v17, v34);
      return 4294967266;
    }
    else
    {
      v23 = result;
      if ((int)result >= v22)
      {
        v24 = *(_BYTE **)(v9 + 196704);
        v25 = *(_DWORD *)(v9 + 84);
        *(_QWORD *)(v9 + 196704) = v24 + 1;
        *v24 = v25;
        v23 = *(_DWORD *)(v9 + 80);
      }
      if ((int)v23 >= 256)
      {
        v26 = (_QWORD *)(v9 + 196704);
        do
        {
          v27 = *(_BYTE *)(v9 + v23 + 92);
          v28 = (_BYTE *)(*v26)++;
          *v28 = v27;
          v23 = *(unsigned __int16 *)(v9 + 2 * v23 + 65628);
        }
        while (v23 > 0xFF);
      }
      *(_DWORD *)(v9 + 84) = v23;
      v29 = *(_BYTE **)(v9 + 196704);
      *(_QWORD *)(v9 + 196704) = v29 + 1;
      *v29 = v23;
      v30 = *(_DWORD *)(v9 + 88);
      if (v30 < *(_DWORD *)(v9 + 64))
      {
        v31 = *(_DWORD *)(v9 + 80);
        if ((v31 & 0x80000000) == 0)
        {
          *(_WORD *)(v9 + 2 * v30 + 65628) = v31;
          *(_BYTE *)(v9 + v30 + 92) = *(_DWORD *)(v9 + 84);
          v30 = *(_DWORD *)(v9 + 88) + 1;
          *(_DWORD *)(v9 + 88) = v30;
        }
      }
      if (v30 > *(_DWORD *)(v9 + 72))
      {
        v32 = *v10 + 1;
        *v10 = v32;
        *(_QWORD *)(v9 + 32) = 0;
        if (v32 == *(_DWORD *)(v9 + 68))
          v33 = *(_DWORD *)(v9 + 64);
        else
          v33 = ~(-1 << v32);
        *(_DWORD *)(v9 + 72) = v33;
      }
      *(_DWORD *)(v9 + 80) = result;
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1DB72CE04(uint64_t *a1, const __int32 *a2, size_t a3)
{
  size_t v3;
  uint64_t *result;

  if (a3)
  {
    v3 = a3;
    a3 = 0;
    while (a2[a3])
    {
      if (v3 == ++a3)
      {
        a3 = v3;
        break;
      }
    }
  }
  result = sub_1DB6E42C0(a1, a2, a3);
  if (!result)
    sub_1DB730818(1, "Out of memory");
  return result;
}

uint64_t *sub_1DB72CE50(uint64_t *a1, _BYTE *a2)
{
  return sub_1DB6E323C(a1, a2, 0x1000000uLL);
}

uint64_t *sub_1DB72CE58(uint64_t *a1, const __int32 *a2)
{
  return sub_1DB72CE04(a1, a2, 0x1000000uLL);
}

uint64_t *sub_1DB72CE60(uint64_t *a1, char a2)
{
  uint64_t *result;
  char v3;

  v3 = a2;
  result = sub_1DB6E311C(a1, &v3, 1uLL);
  if (!result)
    sub_1DB730818(1, "Out of memory");
  return result;
}

uint64_t *sub_1DB72CE9C(uint64_t *a1, __int32 a2)
{
  uint64_t *result;
  __int32 v3;

  v3 = a2;
  result = sub_1DB6E42C0(a1, &v3, 1uLL);
  if (!result)
    sub_1DB730818(1, "Out of memory");
  return result;
}

uint64_t sub_1DB72CED8(uint64_t a1, __int32 *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  char *v8;
  __int32 v9;
  int *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int32 *v14;
  unint64_t v15;
  int v16;
  __int32 v17;
  BOOL v19;
  mbstate_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  memset(&v21, 0, sizeof(v21));
  if (!sub_1DB6E3190((void **)a1, a3 + *(_QWORD *)(a1 + 8) + 1))
    return 0xFFFFFFFFLL;
  v6 = 0;
  v7 = *(_BYTE **)a1;
  v8 = (char *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 8));
  v9 = *a2;
  if (!*a2 || !a3)
    goto LABEL_23;
  v6 = 0;
  v10 = (int *)MEMORY[0x1E0C80B60];
  v11 = (unint64_t)&v7[*(_QWORD *)(a1 + 16) + ~(uint64_t)(int)*MEMORY[0x1E0C80B60]];
  v12 = a3 - 1;
  v13 = 2 * a3;
  v14 = a2 + 1;
  while (1)
  {
    if ((unint64_t)v8 >= v11)
    {
      *(_QWORD *)(a1 + 8) = &v8[-*(_QWORD *)a1];
      *v8 = 0;
      v15 = *v10;
      if (v13 > v15)
        v15 = v13;
      if (!sub_1DB6E3190((void **)a1, *(_QWORD *)(a1 + 8) + v15 + 1))
        return 0xFFFFFFFFLL;
      v8 = (char *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 8));
      v11 = ~(uint64_t)*v10 + *(_QWORD *)a1 + *(_QWORD *)(a1 + 16);
      v9 = *(v14 - 1);
    }
    v16 = wcrtomb(v8, v9, &v21);
    if (v16 != -1)
    {
      v8 += v16;
      goto LABEL_14;
    }
    if (*__error() != 92)
      break;
    *v8++ = 63;
    v6 = 0xFFFFFFFFLL;
LABEL_14:
    v17 = *v14++;
    v9 = v17;
    v19 = v12-- != 0;
    if (v9)
    {
      v13 -= 2;
      if (v19)
        continue;
    }
    goto LABEL_22;
  }
  v6 = 0xFFFFFFFFLL;
LABEL_22:
  v7 = *(_BYTE **)a1;
LABEL_23:
  *(_QWORD *)(a1 + 8) = v8 - v7;
  *v8 = 0;
  return v6;
}

_QWORD *sub_1DB72D08C(uint64_t a1, char *a2, int a3)
{
  int v5;
  char *v6;

  if (a3)
    v5 = 5;
  else
    v5 = 1;
  v6 = (char *)sub_1DB6E3AC4(a1);
  return sub_1DB6E370C(a1, v6, a2, v5);
}

uint64_t sub_1DB72D0D4(uint64_t a1)
{
  uint64_t v1;

  v1 = 16;
  if ((*(_BYTE *)(a1 + 36) & 1) == 0)
    v1 = 8;
  return *(_QWORD *)(a1 + v1);
}

uint64_t sub_1DB72D0F0(uint64_t result, int a2)
{
  int v2;
  int v3;
  _BOOL4 v4;

  if (a2 == 4)
  {
    v2 = *(_DWORD *)(result + 36);
    v4 = (v2 & 0x1508) != 0;
    if ((v2 & 0x2A00) == 0)
      v4 = 1;
    if ((v2 & 0x80) == 0 && v4)
    {
      v3 = 128;
      goto LABEL_10;
    }
  }
  else if (a2 == 2)
  {
    v2 = *(_DWORD *)(result + 36);
    if ((v2 & 0x40) == 0)
    {
      v3 = 64;
LABEL_10:
      *(_DWORD *)(result + 36) = v2 & 0xFFFFFF3F | v3;
      return sub_1DB6E4B38(result);
    }
  }
  return result;
}

uint64_t sub_1DB72D14C(uint64_t a1, char *a2, unint64_t a3, uint64_t a4)
{
  *(_QWORD *)(a1 + 8) = 0;
  return sub_1DB6E2F80(a1, a2, a3, a4);
}

uint64_t sub_1DB72D154(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v5;
  uint64_t result;
  _QWORD *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  int v14;
  int v15;
  uint64_t v16;

  v5 = *(_DWORD *)(a2 + 96);
  if ((v5 & 2) != 0)
  {
    v8 = (_QWORD *)(a2 + 24);
LABEL_6:
    result = 0;
    *a3 = *v8;
    return result;
  }
  *a3 = 0;
  if ((v5 & 1) == 0)
  {
    sub_1DB6DF424(a1, a2, &v16);
    if ((*(_BYTE *)(a2 + 96) & 1) == 0)
      return 0;
  }
  v9 = (char *)sub_1DB6E3AC4(a1);
  v10 = sub_1DB6E370C(a1, v9, "UTF-8", 5);
  if (!v10)
    return 0xFFFFFFFFLL;
  v11 = (uint64_t)v10;
  v8 = (_QWORD *)(a2 + 24);
  v12 = *(char **)a2;
  v13 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 32) = 0;
  v14 = sub_1DB6E2F80(a2 + 24, v12, v13, (uint64_t)v10);
  v15 = v14;
  if (!a1)
  {
    sub_1DB6E7ABC(v11);
    if (v15)
      return 0xFFFFFFFFLL;
    goto LABEL_13;
  }
  if (!v14)
  {
LABEL_13:
    *(_DWORD *)(a2 + 96) |= 2u;
    goto LABEL_6;
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_1DB72D240(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;

  v9 = *(_DWORD *)(a2 + 96);
  if ((v9 & 1) == 0)
  {
    sub_1DB6DF424(a1, a2, &v16);
    v9 = *(_DWORD *)(a2 + 96);
  }
  if ((v9 & 1) == 0)
  {
    v10 = 0;
    v11 = 0;
    result = 0;
    *a3 = 0;
    if (!a4)
      return result;
LABEL_12:
    *a4 = v10;
    return v11;
  }
  if (!a5)
  {
    *a3 = *(_QWORD *)a2;
    result = 0;
    if (!a4)
      return result;
    v15 = (uint64_t *)(a2 + 8);
    goto LABEL_11;
  }
  v13 = *(char **)a2;
  v14 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 80) = 0;
  v15 = (uint64_t *)(a2 + 80);
  result = sub_1DB6E2F80(a2 + 72, v13, v14, a5);
  *a3 = *(_QWORD *)(a2 + 72);
  if (a4)
  {
LABEL_11:
    v10 = *v15;
    v11 = result;
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_1DB72D304(uint64_t a1, _BYTE *a2, size_t a3)
{
  if (a2)
  {
    *(_DWORD *)(a1 + 96) = 1;
    *(_QWORD *)(a1 + 8) = 0;
    sub_1DB6E323C((uint64_t *)a1, a2, a3);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 56) = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 96) = 0;
  }
  return 0;
}

uint64_t sub_1DB72D34C(uint64_t a1, __int32 *a2)
{
  size_t v4;

  if (a2)
  {
    v4 = wcslen(a2);
    *(_DWORD *)(a1 + 96) = 4;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    sub_1DB72CE04((uint64_t *)(a1 + 48), a2, v4);
  }
  else
  {
    *(_DWORD *)(a1 + 96) = 0;
  }
  return 0;
}

uint64_t sub_1DB72D3A8(uint64_t a1, const __int32 *a2, size_t a3)
{
  if (a2)
  {
    *(_DWORD *)(a1 + 96) = 4;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    sub_1DB72CE04((uint64_t *)(a1 + 48), a2, a3);
  }
  else
  {
    *(_DWORD *)(a1 + 96) = 0;
  }
  return 0;
}

char *sub_1DB72D3E8(uint64_t a1, char *__s)
{
  char *v2;
  uint64_t *v3;
  size_t v4;

  if (__s)
  {
    v2 = __s;
    *(_DWORD *)(a1 + 96) = 2;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    v3 = (uint64_t *)(a1 + 24);
    *(_QWORD *)(a1 + 32) = 0;
    v4 = strlen(__s);
    sub_1DB6E323C(v3, v2, v4);
    return (char *)strlen(v2);
  }
  else
  {
    *(_DWORD *)(a1 + 96) = 0;
  }
  return __s;
}

uint64_t sub_1DB72D450(uint64_t a1, uint64_t a2, char *__s)
{
  size_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  int v11;
  int v12;
  uint64_t result;

  if (!__s)
  {
    result = 0;
    *(_DWORD *)(a2 + 96) = 0;
    return result;
  }
  *(_QWORD *)(a2 + 32) = 0;
  v6 = strlen(__s);
  sub_1DB6E323C((uint64_t *)(a2 + 24), __s, v6);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_DWORD *)(a2 + 96) = 2;
  v7 = (char *)sub_1DB6E3AC4(a1);
  v8 = sub_1DB6E370C(a1, "UTF-8", v7, 6);
  if (!v8)
    return 0xFFFFFFFFLL;
  v9 = (uint64_t)v8;
  v10 = strlen(__s);
  *(_QWORD *)(a2 + 8) = 0;
  v11 = sub_1DB6E2F80(a2, __s, v10, v9);
  v12 = v11;
  if (!a1)
  {
    sub_1DB6E7ABC(v9);
    if (!v12)
      goto LABEL_8;
    return 0xFFFFFFFFLL;
  }
  if (v11)
    return 0xFFFFFFFFLL;
LABEL_8:
  *(_DWORD *)(a2 + 96) = 3;
  result = sub_1DB6DED90(a2 + 48, *(const char **)a2, *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
    return 0xFFFFFFFFLL;
  *(_DWORD *)(a2 + 96) = 7;
  return result;
}

size_t sub_1DB72D548(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  __int32 v16;
  size_t result;
  uint64_t v18;
  __int32 v19;
  mbstate_t v20;
  uint64_t v21;

  v3 = a3;
  v21 = *MEMORY[0x1E0C80C00];
  memset(&v20, 0, sizeof(v20));
  if (!sub_1DB6E3190((void **)a1, a3 + *(_QWORD *)(a1 + 8) + 1))
    return 0xFFFFFFFFLL;
  v19 = 0;
  v6 = *(_BYTE **)a1;
  v7 = (char *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 16);
  v9 = (int *)MEMORY[0x1E0C80B60];
  v10 = (int)*MEMORY[0x1E0C80B60];
  v11 = sub_1DB72FC1C((unsigned int *)&v19, a2, v3);
  if (v11)
  {
    v12 = v11;
    v13 = (unint64_t)&v6[v8 + ~v10];
    do
    {
      if ((unint64_t)v7 >= v13)
      {
        v14 = &v7[-*(_QWORD *)a1];
        *(_QWORD *)(a1 + 8) = v14;
        v15 = 2 * v3;
        if (2 * v3 <= (unint64_t)*v9)
          v15 = *v9;
        if (!sub_1DB6E3190((void **)a1, (size_t)&v14[v15 + 1]))
          return 0xFFFFFFFFLL;
        v7 = (char *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 8));
        v13 = ~(uint64_t)*v9 + *(_QWORD *)a1 + *(_QWORD *)(a1 + 16);
      }
      if (v12 >= 0)
        v16 = v19;
      else
        v16 = 63;
      result = wcrtomb(v7, v16, &v20);
      if ((_DWORD)result == -1)
        return result;
      if (v12 >= 0)
        v18 = v12;
      else
        v18 = -v12;
      v3 -= v18;
      a2 += v18;
      v7 += (int)result;
      v12 = sub_1DB72FC1C((unsigned int *)&v19, a2, v3);
    }
    while (v12);
    v6 = *(_BYTE **)a1;
  }
  result = 0;
  *(_QWORD *)(a1 + 8) = v7 - v6;
  *v7 = 0;
  return result;
}

uint64_t sub_1DB72D6E8(char **a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  int v7;
  uint64_t (*v8)(char *, unint64_t, unsigned int);
  uint64_t (*v9)(char *, unint64_t, unsigned int);
  int v10;
  uint64_t (*v11)(char *, unint64_t, unsigned int);
  unsigned int v12;
  int v13;
  char v14;
  unsigned int v15;
  uint64_t (*v16)(unsigned int *, unsigned __int8 *, unint64_t);
  uint64_t v17;
  uint64_t (*v18)(unsigned int *, unsigned __int8 *, unint64_t);
  char *v19;
  char *v20;
  uint64_t (*v21)(unsigned int *, unsigned __int8 *, unint64_t);
  char *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t (*v27)(unsigned int *, unsigned __int8 *, unint64_t);
  uint64_t v28;
  uint64_t v29;
  char v31;
  uint64_t v32;
  uint64_t (*v33)(unsigned int *, unsigned __int8 *, unint64_t);
  uint64_t v34;
  unsigned int v35;

  v4 = a3;
  v7 = *(_DWORD *)(a4 + 36);
  if ((v7 & 0x400) != 0)
  {
    v8 = sub_1DB72FE14;
    goto LABEL_27;
  }
  v8 = sub_1DB72FE80;
  if ((v7 & 0x1000) != 0)
  {
LABEL_27:
    v15 = 2;
    v14 = 1;
    goto LABEL_28;
  }
  v9 = sub_1DB72FE14;
  if ((v7 & 0x2000) != 0)
    v10 = 2;
  else
    v10 = 1;
  if ((v7 & 0x2000) != 0)
    v11 = sub_1DB72FE80;
  else
    v11 = sub_1DB72FEEC;
  if ((v7 & 0x800) != 0)
    LOBYTE(v12) = 1;
  else
    v12 = (*(_DWORD *)(a4 + 36) & 0x2000u) >> 13;
  if ((v7 & 0x800) != 0)
    v13 = 2;
  else
    v13 = v10;
  if ((v7 & 0x800) == 0)
    v9 = v11;
  if ((v7 & 0x100) != 0)
    v14 = 0;
  else
    v14 = v12;
  if ((v7 & 0x100) != 0)
    v15 = 1;
  else
    v15 = v13;
  if ((v7 & 0x100) != 0)
    v8 = sub_1DB72FEEC;
  else
    v8 = v9;
LABEL_28:
  v16 = sub_1DB72FFD4;
  if ((v7 & 0x2000) == 0)
    v16 = (uint64_t (*)(unsigned int *, unsigned __int8 *, unint64_t))sub_1DB72FFDC;
  if ((v7 & 0x2800) != 0)
    v17 = 1;
  else
    v17 = v15;
  if ((v7 & 0x800) != 0)
    v18 = sub_1DB72FFCC;
  else
    v18 = v16;
  v34 = v17;
  if (!sub_1DB6E3190((void **)a1, (size_t)&a1[1][v15 + v17 * a3]))
    return 0xFFFFFFFFLL;
  v31 = v14;
  v35 = 0;
  v19 = *a1;
  v20 = &a1[1][(_QWORD)*a1];
  v21 = v18;
  v22 = a1[2];
  v33 = v21;
  v23 = v21(&v35, a2, v4);
  v24 = 0;
  if (v23)
  {
    v32 = v15;
    v25 = -(uint64_t)v15;
    v26 = &v22[(_QWORD)v19 + v25];
    v27 = v33;
    while (1)
    {
      v28 = v23 >= 0 ? v23 : -v23;
      v24 = v23 < 0 ? 0xFFFFFFFFLL : v24;
      v4 -= v28;
      v29 = v8(v20, v26 - v20, v35);
      if (!v29)
        break;
LABEL_49:
      a2 += v28;
      v20 += v29;
      v23 = v27(&v35, a2, v4);
      if (!v23)
        goto LABEL_50;
    }
    while (1)
    {
      a1[1] = (char *)(v20 - *a1);
      if (!sub_1DB6E3190((void **)a1, (size_t)&a1[2][v32 + v4 * v34]))
        return 0xFFFFFFFFLL;
      v20 = &a1[1][(_QWORD)*a1];
      v26 = &a1[2][(_QWORD)*a1 + v25];
      v29 = v8(v20, v26 - v20, v35);
      if (v29)
      {
        v27 = v33;
        goto LABEL_49;
      }
    }
  }
LABEL_50:
  a1[1] = (char *)(v20 - *a1);
  *v20 = 0;
  if ((v31 & 1) != 0)
    (*a1)[(_QWORD)a1[1] + 1] = 0;
  return v24;
}

uint64_t sub_1DB72D90C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  __int16 v21;
  _BYTE *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _WORD *v26;
  unint64_t v28;
  _BYTE *v29;
  unint64_t v30;
  uint64_t v31;

  v8 = *(_DWORD *)(a4 + 36);
  v9 = v8 & 0x1400;
  if ((v8 & 0x1400) != 0)
    v10 = -2;
  else
    v10 = -1;
  if ((v8 & 0x1400) != 0)
    v11 = 2;
  else
    v11 = 1;
  if ((v8 & 0x2800) != 0)
    v12 = 2;
  else
    v12 = 1;
  if (!sub_1DB6E3190((void **)a1, *(_QWORD *)(a1 + 8) + 2 * a3 + v11))
    return 0xFFFFFFFFLL;
  v13 = *(_QWORD *)(a4 + 40);
  v30 = a3;
  v31 = a2;
  v14 = *(_BYTE **)a1;
  v15 = *(_QWORD *)(a1 + 8);
  v16 = (_BYTE *)(*(_QWORD *)a1 + v15);
  v28 = v10 - v15 + *(_QWORD *)(a1 + 16);
  v29 = v16;
  if (v12 <= a3)
  {
    v17 = 0;
    do
    {
      if (MEMORY[0x1DF0B2F1C](v13, &v31, &v30, &v29, &v28) != -1)
        break;
      if (*__error() == 92 || *__error() == 22)
      {
        v18 = *(_DWORD *)(a4 + 36);
        if ((v18 & 0x1500) != 0)
        {
          if ((v18 & 0x100) != 0)
            v19 = 3;
          else
            v19 = 2;
          if (v28 < v19)
          {
            *(_QWORD *)(a1 + 8) = &v29[-*(_QWORD *)a1];
            if (!sub_1DB6E3190((void **)a1, *(_QWORD *)(a1 + 16) + (v30 << (v9 != 0)) + v19))
              return 0xFFFFFFFFLL;
            v20 = *(_QWORD *)(a1 + 8);
            v29 = (_BYTE *)(*(_QWORD *)a1 + v20);
            v28 = v10 - v20 + *(_QWORD *)(a1 + 16);
            v18 = *(_DWORD *)(a4 + 36);
          }
          if ((v18 & 0x100) != 0)
          {
            v26 = v29;
            v29[2] = -67;
            *v26 = -16401;
          }
          else
          {
            v21 = (v18 & 0x400) != 0 ? -513 : -3;
            *(_WORD *)v29 = v21;
          }
          v29 += v19;
          v23 = v28 - v19;
        }
        else
        {
          v22 = v29++;
          *v22 = 63;
          v23 = v28 - 1;
        }
        v28 = v23;
        v31 += v12;
        v25 = v30 - v12;
        v30 -= v12;
        v17 = 0xFFFFFFFFLL;
      }
      else
      {
        *(_QWORD *)(a1 + 8) = &v29[-*(_QWORD *)a1];
        if (!sub_1DB6E3190((void **)a1, *(_QWORD *)(a1 + 16) + 2 * v30))
          return 0xFFFFFFFFLL;
        v24 = *(_QWORD *)(a1 + 8);
        v29 = (_BYTE *)(*(_QWORD *)a1 + v24);
        v28 = v10 - v24 + *(_QWORD *)(a1 + 16);
        v25 = v30;
      }
    }
    while (v25 >= v12);
    v16 = v29;
    v14 = *(_BYTE **)a1;
  }
  else
  {
    v17 = 0;
  }
  *(_QWORD *)(a1 + 8) = v16 - v14;
  *v16 = 0;
  if (v9)
    *(_BYTE *)(*(_QWORD *)(a1 + 8) + *(_QWORD *)a1 + 1) = 0;
  return v17;
}

uint64_t sub_1DB72DB98(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_1DB7301B0(a1, a2, a3, 1);
}

uint64_t sub_1DB72DBA0(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_1DB7301B0(a1, a2, a3, 0);
}

uint64_t sub_1DB72DBA8(char **a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  int v7;
  uint64_t (*v8)(unsigned __int8 *, int64_t);
  int v9;
  unsigned int v10;
  int v11;
  _BOOL4 v12;
  char v13;
  unsigned int v14;
  uint64_t (*v15)(unsigned __int8 *, int64_t);
  int v16;
  uint64_t (*v17)(unsigned int *, unsigned __int8 *, unint64_t);
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t (*v21)(unsigned int *, unsigned __int8 *, unint64_t);
  char *v22;
  unsigned __int8 *v23;
  char *v24;
  unsigned int v25;
  unsigned int v26;
  char *v27;
  unsigned int v28;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int16 v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  int v44;
  int v45;
  BOOL v46;
  unint64_t v47;
  int *v48;
  int64_t v49;
  int *v50;
  unsigned __int8 *v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  uint64_t n;
  uint64_t ii;
  int64_t jj;
  uint64_t v57;
  uint64_t i;
  uint64_t j;
  unsigned __int8 *v60;
  uint64_t k;
  uint64_t v62;
  unsigned __int8 v63;
  unsigned __int8 v64;
  uint64_t m;
  _BOOL4 v67;
  char v68;
  uint64_t v69;
  unsigned int v70;
  unsigned __int8 *v71;
  uint64_t (*v72)(unsigned int *, unsigned __int8 *, unint64_t);
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;

  v4 = a3;
  v79 = *MEMORY[0x1E0C80C00];
  v7 = *(_DWORD *)(a4 + 36);
  if ((v7 & 0x400) != 0)
  {
    v12 = (*(_DWORD *)(a4 + 36) & 0x800) == 0;
    v15 = (uint64_t (*)(unsigned __int8 *, int64_t))sub_1DB72FE14;
  }
  else
  {
    if ((v7 & 0x1000) == 0)
    {
      v8 = (uint64_t (*)(unsigned __int8 *, int64_t))sub_1DB72FE80;
      if ((v7 & 0x2000) != 0)
        v9 = 2;
      else
        v9 = 1;
      if ((v7 & 0x2000) == 0)
        v8 = (uint64_t (*)(unsigned __int8 *, int64_t))sub_1DB72FEEC;
      if ((v7 & 0x800) != 0)
        LOBYTE(v10) = 1;
      else
        v10 = (*(_DWORD *)(a4 + 36) & 0x2000u) >> 13;
      if ((v7 & 0x800) != 0)
        v11 = 2;
      else
        v11 = v9;
      if ((v7 & 0x800) != 0)
        v8 = (uint64_t (*)(unsigned __int8 *, int64_t))sub_1DB72FE14;
      v12 = (v7 & 0x100) != 0 && (*(_DWORD *)(a4 + 36) & 0x200) == 0;
      if ((v7 & 0x100) != 0)
        v13 = 0;
      else
        v13 = v10;
      if ((v7 & 0x100) != 0)
        v14 = 1;
      else
        v14 = v11;
      if ((v7 & 0x100) != 0)
        v15 = (uint64_t (*)(unsigned __int8 *, int64_t))sub_1DB72FEEC;
      else
        v15 = v8;
      goto LABEL_31;
    }
    v12 = (*(_DWORD *)(a4 + 36) & 0x2000) == 0;
    v15 = (uint64_t (*)(unsigned __int8 *, int64_t))sub_1DB72FE80;
  }
  v14 = 2;
  v13 = 1;
LABEL_31:
  if ((v7 & 0x2000) != 0)
    v16 = 4;
  else
    v16 = 6;
  v17 = sub_1DB72FFD4;
  if ((v7 & 0x2000) != 0)
    v18 = 1;
  else
    v18 = v14;
  if ((v7 & 0x2000) == 0)
    v17 = (uint64_t (*)(unsigned int *, unsigned __int8 *, unint64_t))sub_1DB72FFDC;
  if ((v7 & 0x800) != 0)
    v19 = 4;
  else
    v19 = v16;
  v73 = v19;
  if ((*(_DWORD *)(a4 + 36) & 0x800) != 0)
    v20 = 1;
  else
    v20 = v18;
  if ((*(_DWORD *)(a4 + 36) & 0x800) != 0)
    v21 = sub_1DB72FFCC;
  else
    v21 = v17;
  v74 = v20;
  if (!sub_1DB6E3190((void **)a1, (size_t)&a1[1][v20 * a3 + v14]))
    return 0xFFFFFFFFLL;
  v68 = v13;
  v76 = 0;
  v22 = *a1;
  v23 = (unsigned __int8 *)&a1[1][(_QWORD)*a1];
  v24 = a1[2];
  v72 = v21;
  v25 = v21((unsigned int *)&v76 + 1, a2, v4);
  if (!v25)
  {
    v70 = 0;
LABEL_164:
    a1[1] = (char *)(v23 - (unsigned __int8 *)*a1);
    *v23 = 0;
    if ((v68 & 1) != 0)
      (*a1)[(_QWORD)a1[1] + 1] = 0;
    return v70;
  }
  v26 = v25;
  v70 = 0;
  v27 = &v24[(_QWORD)v22 - v14];
  while (1)
  {
    v28 = HIDWORD(v76);
    if ((v26 & 0x80000000) == 0)
      break;
    v31 = a2;
LABEL_130:
    for (i = v15(v23, v27 - (char *)v23);
          !i;
          i = ((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))v15)(v23, v27 - (char *)v23, HIDWORD(v76)))
    {
      a1[1] = (char *)(v23 - (unsigned __int8 *)*a1);
      if (!sub_1DB6E3190((void **)a1, (size_t)&a1[2][v14 + v4 * v74]))
        return 0xFFFFFFFFLL;
      v23 = (unsigned __int8 *)&a1[1][(_QWORD)*a1];
      v27 = &a1[2][(_QWORD)*a1 - v14];
    }
    v23 += i;
    v31 -= v26;
    v4 -= -v26;
    v70 = -1;
LABEL_134:
    v26 = v72((unsigned int *)&v76 + 1, v31, v4);
    a2 = v31;
    if (!v26)
      goto LABEL_164;
  }
  v67 = v12;
  while (2)
  {
    if (v26 == v73 || v12)
      v30 = 0;
    else
      v30 = a2;
    v71 = v30;
    v31 = &a2[v26];
    v4 -= v26;
    v32 = v28 + 21504;
    if ((v28 - 44032) >> 2 <= 0xAE8)
    {
      HIDWORD(v76) = ((28533 * (unsigned __int16)(v28 + 21504)) >> 24) | 0x1100;
      for (j = v15(v23, v27 - (char *)v23);
            !j;
            j = ((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))v15)(v23, v27 - (char *)v23, HIDWORD(v76)))
      {
        a1[1] = (char *)(v23 - (unsigned __int8 *)*a1);
        if (!sub_1DB6E3190((void **)a1, (size_t)&a1[2][v14 + v4 * v74]))
          return 0xFFFFFFFFLL;
        v23 = (unsigned __int8 *)&a1[1][(_QWORD)*a1];
        v27 = &a1[2][(_QWORD)*a1 - v14];
      }
      v60 = &v23[j];
      HIDWORD(v76) = v32 % 0x24Cu / 0x1C + 4449;
      for (k = v15(v60, v27 - (char *)v60);
            !k;
            k = ((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))v15)(v60, v27 - (char *)v60, HIDWORD(v76)))
      {
        a1[1] = (char *)(v60 - (unsigned __int8 *)*a1);
        if (!sub_1DB6E3190((void **)a1, (size_t)&a1[2][v14 + v4 * v74]))
          return 0xFFFFFFFFLL;
        v60 = (unsigned __int8 *)&a1[1][(_QWORD)*a1];
        v27 = &a1[2][(_QWORD)*a1 - v14];
      }
      v23 = &v60[k];
      if (v32 % 0x1Cu)
      {
        HIDWORD(v76) = (unsigned __int16)(v32 % 0x1Cu + 4519);
        v62 = v15(v23, v27 - (char *)v23);
        v12 = v67;
        if (!v62)
        {
          do
          {
            a1[1] = (char *)(v23 - (unsigned __int8 *)*a1);
            if (!sub_1DB6E3190((void **)a1, (size_t)&a1[2][v14 + v4 * v74]))
              return 0xFFFFFFFFLL;
            v23 = (unsigned __int8 *)&a1[1][(_QWORD)*a1];
            v27 = &a1[2][(_QWORD)*a1 - v14];
            v62 = ((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))v15)(v23, v27 - (char *)v23, HIDWORD(v76));
          }
          while (!v62);
          v12 = v67;
        }
        v23 += v62;
        goto LABEL_134;
      }
      goto LABEL_161;
    }
    if (v28 <= 0x1D244)
    {
      v33 = (unint64_t)v28 >> 8;
      if (byte_1DB74D80F[v33])
      {
        if (byte_1DB74DBB5[16 * byte_1DB74E2E5[16 * byte_1DB74D9E2[v33] + (v28 >> 4)] + (v28 & 0xF)])
        {
          if (v71)
          {
            if (&v23[v26] > (unsigned __int8 *)v27)
            {
              a1[1] = (char *)(v23 - (unsigned __int8 *)*a1);
              if (!sub_1DB6E3190((void **)a1, (size_t)&a1[2][v14 + v4 * v74]))
                return 0xFFFFFFFFLL;
              v23 = (unsigned __int8 *)&a1[1][(_QWORD)*a1];
              v27 = &a1[2][(_QWORD)*a1 - v14];
            }
            v12 = v67;
            switch(v26)
            {
              case 1u:
                goto LABEL_156;
              case 2u:
                goto LABEL_155;
              case 3u:
                goto LABEL_154;
              case 4u:
                a2 = v71 + 1;
                *v23++ = *v71;
LABEL_154:
                v63 = *a2++;
                *v23++ = v63;
LABEL_155:
                v64 = *a2++;
                *v23++ = v64;
LABEL_156:
                *v23++ = *a2;
                break;
              default:
                goto LABEL_161;
            }
            goto LABEL_134;
          }
          for (m = v15(v23, v27 - (char *)v23);
                !m;
                m = ((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))v15)(v23, v27 - (char *)v23, HIDWORD(v76)))
          {
            a1[1] = (char *)(v23 - (unsigned __int8 *)*a1);
            if (!sub_1DB6E3190((void **)a1, (size_t)&a1[2][v14 + v4 * v74]))
              return 0xFFFFFFFFLL;
            v23 = (unsigned __int8 *)&a1[1][(_QWORD)*a1];
            v27 = &a1[2][(_QWORD)*a1 - v14];
          }
          v23 += m;
LABEL_161:
          v12 = v67;
          goto LABEL_134;
        }
      }
    }
    v69 = v26;
    v34 = 0;
    if (v28 - 194560 < 0x300 || (v28 & 0xFFFFF000) == 0x2000 || v28 - 63744 < 0x200)
    {
      v35 = 0;
      goto LABEL_89;
    }
    v34 = 0;
    do
    {
      v35 = v34;
      if (v28 - 69786 <= 0x11 && ((1 << (v28 + 102)) & 0x20005) != 0)
        break;
      v37 = 0;
      v38 = 930;
      while (1)
      {
        v39 = (uint64_t)(v37 + v38 + (v37 + v38 < 0)) >> 1;
        v40 = dword_1DB74E558[3 * ((v37 + v38) / 2)];
        if (v40 >= v28)
          break;
        v37 = (v37 + v38) / 2 + 1;
LABEL_77:
        if (v38 < v37)
          goto LABEL_89;
      }
      if (v40 > v28)
      {
        v38 = (v37 + v38) / 2 - 1;
        goto LABEL_77;
      }
      if (v34 >= 0xAuLL)
        break;
      if ((_DWORD)v34)
      {
        v41 = v34;
        do
        {
          v46 = v41 <= 1;
          *((_QWORD *)&v77 + v41) = *((_QWORD *)&v77 + (v41 - 1));
          --v41;
        }
        while (!v46);
      }
      v71 = 0;
      v42 = (char *)&dword_1DB74E558[3 * (int)v39];
      v28 = *((_DWORD *)v42 + 1);
      v43 = *((unsigned int *)v42 + 2);
      LODWORD(v42) = byte_1DB74DBB5[16 * byte_1DB74E2E5[16 * byte_1DB74D9E2[v43 >> 8] + (v43 >> 4)]
                                  + (v43 & 0xF)];
      v77 = v43;
      v78 = (int)v42;
      v35 = ++v34;
      HIDWORD(v76) = v28;
      if (v28 - 194560 < 0x300)
        break;
    }
    while ((v28 & 0xFFFFF000) != 0x2000 && v28 - 63744 >= 0x200);
LABEL_89:
    v75 = v35;
    v26 = v72((unsigned int *)&v76, v31, v4);
    if ((int)v26 >= 1)
    {
      do
      {
        v44 = v76;
        if (v76 > 0x1D244)
          break;
        v45 = byte_1DB74DBB5[16
                           * byte_1DB74E2E5[16 * byte_1DB74D9E2[(unint64_t)v76 >> 8]
                                          + (v76 >> 4)]
                           + (v76 & 0xF)];
        v46 = !byte_1DB74DBB5[16
                            * byte_1DB74E2E5[16 * byte_1DB74D9E2[(unint64_t)v76 >> 8]
                                           + (v76 >> 4)]
                            + (v76 & 0xF)]
           || v34 > 9;
        if (v46)
          break;
        if (v34)
        {
          v47 = 0;
          v48 = &v78;
          while (*v48 <= v45)
          {
            ++v47;
            v48 += 2;
            if (v34 == v47)
              goto LABEL_99;
          }
          v49 = v34;
          if (v34 > v47)
          {
            do
            {
              v50 = &v77 + 2 * v49--;
              *(_QWORD *)v50 = *((_QWORD *)v50 - 1);
            }
            while (v49 > (uint64_t)v47);
          }
        }
        else
        {
LABEL_99:
          v48 = &v77 + 2 * v34 + 1;
          v47 = v34;
        }
        v31 += v26;
        *v48 = v45;
        *(&v77 + 2 * v47) = v44;
        ++v34;
        v4 -= v26;
        v26 = v72((unsigned int *)&v76, v31, v4);
      }
      while ((int)v26 > 0);
      v75 = v34;
    }
    v51 = v71;
    if (!v71)
    {
      for (n = ((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))v15)(v23, v27 - (char *)v23, HIDWORD(v76));
            !n;
            n = ((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))v15)(v23, v27 - (char *)v23, HIDWORD(v76)))
      {
        a1[1] = (char *)(v23 - (unsigned __int8 *)*a1);
        if (!sub_1DB6E3190((void **)a1, (size_t)&a1[2][v14 + v4 * v74]))
          return 0xFFFFFFFFLL;
        v23 = (unsigned __int8 *)&a1[1][(_QWORD)*a1];
        v27 = &a1[2][(_QWORD)*a1 - v14];
      }
      v23 += n;
      goto LABEL_119;
    }
    if (&v23[v69] <= (unsigned __int8 *)v27)
    {
LABEL_110:
      switch((int)v69)
      {
        case 1:
          goto LABEL_114;
        case 2:
          goto LABEL_113;
        case 3:
          goto LABEL_112;
        case 4:
          v51 = v71 + 1;
          *v23++ = *v71;
LABEL_112:
          v52 = *v51++;
          *v23++ = v52;
LABEL_113:
          v53 = *v51++;
          *v23++ = v53;
LABEL_114:
          *v23++ = *v51;
          break;
        default:
          break;
      }
LABEL_119:
      if (v75)
      {
        for (ii = 0; ii != v75; ++ii)
        {
          HIDWORD(v76) = *(&v77 + 2 * ii);
          for (jj = v27 - (char *)v23; ; jj = v27 - (char *)v23)
          {
            v57 = v15(v23, jj);
            if (v57)
              break;
            a1[1] = (char *)(v23 - (unsigned __int8 *)*a1);
            if (!sub_1DB6E3190((void **)a1, (size_t)&a1[2][v14 + v4 * v74]))
              return 0xFFFFFFFFLL;
            v23 = (unsigned __int8 *)&a1[1][(_QWORD)*a1];
            v27 = &a1[2][(_QWORD)*a1 - v14];
          }
          v23 += v57;
        }
      }
      if (!v26)
        goto LABEL_164;
      v28 = v76;
      HIDWORD(v76) = v76;
      a2 = v31;
      v12 = v67;
      if ((v26 & 0x80000000) != 0)
        goto LABEL_130;
      continue;
    }
    break;
  }
  a1[1] = (char *)(v23 - (unsigned __int8 *)*a1);
  if (sub_1DB6E3190((void **)a1, (size_t)&a1[2][v14 + v4 * v74]))
  {
    v23 = (unsigned __int8 *)&a1[1][(_QWORD)*a1];
    v27 = &a1[2][(_QWORD)*a1 - v14];
    goto LABEL_110;
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_1DB72E64C(char **a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  int v7;
  uint64_t (*v8)(_BYTE *, unint64_t, unsigned int);
  int v9;
  unsigned int v10;
  int v11;
  _BOOL4 v12;
  char v13;
  unsigned int v14;
  uint64_t (*v15)(_BYTE *, unint64_t, unsigned int);
  int v16;
  uint64_t (*v17)(unsigned int *, unsigned __int8 *, unint64_t);
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t (*v21)(unsigned int *, unsigned __int8 *, unint64_t);
  char *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t (*v29)(unsigned __int8 *, int64_t);
  int v30;
  unsigned __int8 *v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  uint64_t v42;
  int v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t i;
  int v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  unsigned int v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  unsigned int v60;
  _QWORD *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int *v70;
  int v71;
  int *v72;
  int v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  unint64_t v81;
  _BYTE *v82;
  int v83;
  int v84;
  int v85;
  unsigned __int8 v86;
  unsigned __int8 v87;
  unsigned __int8 v88;
  int v89;
  int v90;
  uint64_t j;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t k;
  uint64_t m;
  unsigned __int8 v103;
  unsigned __int8 v104;
  unsigned __int8 v105;
  uint64_t v106;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  char v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t (*v118)(void);
  int v119;
  _BOOL4 v120;
  unsigned __int8 *v121;
  uint64_t (*v122)(unsigned __int8 *, int64_t);
  uint64_t v123;
  uint64_t v124;
  _DWORD v125[10];
  unsigned int v126;
  _BYTE v127[4];
  _QWORD v128[6];

  v4 = a3;
  v128[4] = *MEMORY[0x1E0C80C00];
  v7 = *(_DWORD *)(a4 + 36);
  if ((v7 & 0x400) != 0)
  {
    v120 = (*(_DWORD *)(a4 + 36) & 0x800) == 0;
    v15 = sub_1DB72FE14;
  }
  else
  {
    if ((v7 & 0x1000) == 0)
    {
      v8 = sub_1DB72FE80;
      if ((v7 & 0x2000) != 0)
        v9 = 2;
      else
        v9 = 1;
      if ((v7 & 0x2000) == 0)
        v8 = sub_1DB72FEEC;
      if ((v7 & 0x800) != 0)
        LOBYTE(v10) = 1;
      else
        v10 = (*(_DWORD *)(a4 + 36) & 0x2000u) >> 13;
      if ((v7 & 0x800) != 0)
        v11 = 2;
      else
        v11 = v9;
      if ((v7 & 0x800) != 0)
        v8 = sub_1DB72FE14;
      v12 = (*(_DWORD *)(a4 + 36) & 0x200) == 0;
      if ((v7 & 0x100) == 0)
        v12 = 0;
      v120 = v12;
      if ((v7 & 0x100) != 0)
        v13 = 0;
      else
        v13 = v10;
      if ((v7 & 0x100) != 0)
        v14 = 1;
      else
        v14 = v11;
      if ((v7 & 0x100) != 0)
        v15 = sub_1DB72FEEC;
      else
        v15 = v8;
      goto LABEL_30;
    }
    v120 = (*(_DWORD *)(a4 + 36) & 0x2000) == 0;
    v15 = sub_1DB72FE80;
  }
  v14 = 2;
  v13 = 1;
LABEL_30:
  if ((v7 & 0x2000) != 0)
    v16 = 4;
  else
    v16 = 6;
  v17 = sub_1DB72FFD4;
  if ((v7 & 0x2000) != 0)
    v18 = 1;
  else
    v18 = v14;
  if ((v7 & 0x2000) == 0)
    v17 = (uint64_t (*)(unsigned int *, unsigned __int8 *, unint64_t))sub_1DB72FFDC;
  if ((v7 & 0x800) != 0)
    v19 = 4;
  else
    v19 = v16;
  v119 = v19;
  if ((*(_DWORD *)(a4 + 36) & 0x800) != 0)
    v20 = 1;
  else
    v20 = v18;
  if ((*(_DWORD *)(a4 + 36) & 0x800) != 0)
    v21 = sub_1DB72FFCC;
  else
    v21 = v17;
  v117 = v20;
  if (!sub_1DB6E3190((void **)a1, (size_t)&a1[1][v20 * a3 + v14]))
    return 0xFFFFFFFFLL;
  v122 = (uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))v15;
  v114 = v13;
  v124 = 0;
  v22 = *a1;
  v23 = (unsigned __int8 *)&a1[1][(_QWORD)*a1];
  v24 = (uint64_t)a1[2];
  v25 = v21((unsigned int *)&v124 + 1, a2, v4);
  if (!(_DWORD)v25)
  {
    v24 = 0;
    goto LABEL_253;
  }
  v26 = v25;
  v115 = v14;
  v27 = &v22[v24];
  LODWORD(v24) = 0;
  v123 = -(uint64_t)v14;
  v28 = &v27[-v14];
  v29 = (uint64_t (*)(unsigned __int8 *, int64_t))v122;
  v118 = (uint64_t (*)(void))v21;
  while (1)
  {
    if ((v26 & 0x80000000) != 0)
    {
      for (i = ((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))v29)(v23, v28 - (char *)v23, HIDWORD(v124));
            !i;
            i = ((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))v29)(v23, v28 - (char *)v23, HIDWORD(v124)))
      {
        a1[1] = (char *)(v23 - (unsigned __int8 *)*a1);
        if (!sub_1DB6E3190((void **)a1, (size_t)&a1[2][v115 + v4 * v117]))
          return 0xFFFFFFFFLL;
        v23 = (unsigned __int8 *)&a1[1][(_QWORD)*a1];
        v28 = &a1[2][(_QWORD)*a1 + v123];
      }
      v23 += i;
      v50 = -(int)v26;
      goto LABEL_249;
    }
    v112 = v24;
    v30 = (_DWORD)v26 == v119 || v120;
    v31 = v30 ? 0 : a2;
    a2 += v26;
    v4 -= v26;
    v32 = v21((unsigned int *)&v124, a2, v4);
    if ((int)v32 < 1)
      break;
    while (1)
    {
      v33 = v120;
      if ((_DWORD)v32 == v119)
        v33 = 1;
      if (v33)
        v34 = 0;
      else
        v34 = a2;
      v121 = &a2[v32];
      v4 -= v32;
      v35 = v124;
      if (v124 >= 0x1D300 || (v36 = (unint64_t)v124 >> 8, !byte_1DB74D80F[v36]))
      {
        if (v31)
        {
          if (&v23[v26] > (unsigned __int8 *)v28)
          {
            a1[1] = (char *)(v23 - (unsigned __int8 *)*a1);
            if (!sub_1DB6E3190((void **)a1, (size_t)&a1[2][v115 + v4 * v117]))
              return 0xFFFFFFFFLL;
            v23 = (unsigned __int8 *)&a1[1][(_QWORD)*a1];
            v28 = &a1[2][(_QWORD)*a1 + v123];
          }
          a2 = v121;
          switch((int)v26)
          {
            case 1:
              goto LABEL_76;
            case 2:
              goto LABEL_75;
            case 3:
              goto LABEL_74;
            case 4:
LABEL_73:
              v39 = *v31++;
              *v23++ = v39;
LABEL_74:
              v40 = *v31++;
              *v23++ = v40;
LABEL_75:
              v41 = *v31++;
              *v23++ = v41;
LABEL_76:
              *v23++ = *v31;
              break;
            default:
              goto LABEL_124;
          }
        }
        else
        {
          v42 = v122(v23, v28 - (char *)v23, HIDWORD(v124));
          a2 = v121;
          if (!v42)
          {
            while (1)
            {
              a1[1] = (char *)(v23 - (unsigned __int8 *)*a1);
              if (!sub_1DB6E3190((void **)a1, (size_t)&a1[2][v115 + v4 * v117]))
                return 0xFFFFFFFFLL;
              v23 = (unsigned __int8 *)&a1[1][(_QWORD)*a1];
              v28 = &a1[2][(_QWORD)*a1 + v123];
              v42 = v122(v23, v28 - (char *)v23, HIDWORD(v124));
              if (v42)
              {
                a2 = v121;
                break;
              }
            }
          }
          v23 += v42;
        }
        goto LABEL_124;
      }
      v116 = v4;
      v37 = HIDWORD(v124);
      if ((HIDWORD(v124) - 4352) <= 0x12)
      {
        if ((v124 - 4449) <= 0x14)
        {
          v34 = 0;
          v38 = 28 * (v124 - 4449 + 21 * (HIDWORD(v124) - 4352)) + 44032;
          goto LABEL_86;
        }
        a2 = v121;
        if (v31)
        {
          if (&v23[v26] > (unsigned __int8 *)v28)
          {
            a1[1] = (char *)(v23 - (unsigned __int8 *)*a1);
            if (!sub_1DB6E3190((void **)a1, (size_t)&a1[2][v115 + v116 * v117]))
              return 0xFFFFFFFFLL;
            v23 = (unsigned __int8 *)&a1[1][(_QWORD)*a1];
            v28 = &a1[2][(_QWORD)*a1 + v123];
            a2 = v121;
          }
          switch((int)v26)
          {
            case 1:
              goto LABEL_102;
            case 2:
              goto LABEL_101;
            case 3:
              goto LABEL_100;
            case 4:
              goto LABEL_99;
            default:
              goto LABEL_123;
          }
          goto LABEL_123;
        }
        v47 = v122(v23, v28 - (char *)v23, HIDWORD(v124));
        if (!v47)
        {
          while (1)
          {
            a1[1] = (char *)(v23 - (unsigned __int8 *)*a1);
            if (!sub_1DB6E3190((void **)a1, (size_t)&a1[2][v115 + v116 * v117]))
              return 0xFFFFFFFFLL;
            v23 = (unsigned __int8 *)&a1[1][(_QWORD)*a1];
            v28 = &a1[2][(_QWORD)*a1 + v123];
            v47 = v122(v23, v28 - (char *)v23, HIDWORD(v124));
            if (v47)
              goto LABEL_121;
          }
        }
        goto LABEL_122;
      }
      if ((HIDWORD(v124) - 44032) >> 2 <= 0xAE8 && !((HIDWORD(v124) - 44032) % 0x1Cu))
      {
        if ((v124 - 4520) <= 0x1A)
        {
          v34 = 0;
          v38 = v124 + HIDWORD(v124) - 4519;
LABEL_86:
          v32 = v26;
          v4 = v116;
          a2 = v121;
LABEL_125:
          HIDWORD(v124) = v38;
          goto LABEL_126;
        }
        if (v31)
        {
          if (&v23[v26] > (unsigned __int8 *)v28)
          {
            a1[1] = (char *)(v23 - (unsigned __int8 *)*a1);
            if (!sub_1DB6E3190((void **)a1, (size_t)&a1[2][v115 + v116 * v117]))
              return 0xFFFFFFFFLL;
            v23 = (unsigned __int8 *)&a1[1][(_QWORD)*a1];
            v28 = &a1[2][(_QWORD)*a1 + v123];
          }
          a2 = v121;
          switch((int)v26)
          {
            case 1:
              goto LABEL_102;
            case 2:
              goto LABEL_101;
            case 3:
              goto LABEL_100;
            case 4:
LABEL_99:
              v44 = *v31++;
              *v23++ = v44;
LABEL_100:
              v45 = *v31++;
              *v23++ = v45;
LABEL_101:
              v46 = *v31++;
              *v23++ = v46;
LABEL_102:
              *v23++ = *v31;
              break;
            default:
              break;
          }
LABEL_123:
          v4 = v116;
LABEL_124:
          v38 = v124;
          goto LABEL_125;
        }
        v47 = v122(v23, v28 - (char *)v23, HIDWORD(v124));
        a2 = v121;
        if (!v47)
        {
          while (1)
          {
            a1[1] = (char *)(v23 - (unsigned __int8 *)*a1);
            if (!sub_1DB6E3190((void **)a1, (size_t)&a1[2][v115 + v116 * v117]))
              return 0xFFFFFFFFLL;
            v23 = (unsigned __int8 *)&a1[1][(_QWORD)*a1];
            v28 = &a1[2][(_QWORD)*a1 + v123];
            v47 = v122(v23, v28 - (char *)v23, HIDWORD(v124));
            if (v47)
              goto LABEL_121;
          }
        }
        goto LABEL_122;
      }
      v43 = sub_1DB730260(HIDWORD(v124), v124);
      if (!v43)
        break;
      v34 = 0;
      HIDWORD(v124) = v43;
      v32 = v26;
      v4 = v116;
      a2 = v121;
LABEL_126:
      v26 = v32;
      v32 = ((uint64_t (*)(uint64_t *, unsigned __int8 *, unint64_t))v118)(&v124, a2, v4);
      v31 = v34;
      if ((int)v32 <= 0)
        goto LABEL_133;
    }
    if (v35 > 0x1D244
      || (v48 = byte_1DB74DBB5[16 * byte_1DB74E2E5[16 * byte_1DB74D9E2[v36] + (v35 >> 4)] + (v35 & 0xF)]) == 0)
    {
      if (v31)
      {
        if (&v23[v26] > (unsigned __int8 *)v28)
        {
          a1[1] = (char *)(v23 - (unsigned __int8 *)*a1);
          if (!sub_1DB6E3190((void **)a1, (size_t)&a1[2][v115 + v116 * v117]))
            return 0xFFFFFFFFLL;
          v23 = (unsigned __int8 *)&a1[1][(_QWORD)*a1];
          v28 = &a1[2][(_QWORD)*a1 + v123];
        }
        v4 = v116;
        a2 = v121;
        switch((int)v26)
        {
          case 1:
            goto LABEL_76;
          case 2:
            goto LABEL_75;
          case 3:
            goto LABEL_74;
          case 4:
            goto LABEL_73;
          default:
            goto LABEL_124;
        }
        goto LABEL_124;
      }
      v47 = v122(v23, v28 - (char *)v23, v37);
      a2 = v121;
      if (!v47)
      {
        while (1)
        {
          a1[1] = (char *)(v23 - (unsigned __int8 *)*a1);
          if (!sub_1DB6E3190((void **)a1, (size_t)&a1[2][v115 + v116 * v117]))
            return 0xFFFFFFFFLL;
          v23 = (unsigned __int8 *)&a1[1][(_QWORD)*a1];
          v28 = &a1[2][(_QWORD)*a1 + v123];
          v47 = v122(v23, v28 - (char *)v23, HIDWORD(v124));
          if (v47)
          {
LABEL_121:
            a2 = v121;
            break;
          }
        }
      }
LABEL_122:
      v23 += v47;
      goto LABEL_123;
    }
    v126 = v35;
    v54 = v48;
    v125[0] = v48;
    v55 = ((uint64_t (*)(_BYTE *, unsigned __int8 *, unint64_t))v118)(v127, v121, v116);
    if ((int)v55 < 1)
    {
      v60 = 0;
      LODWORD(v57) = 1;
      v58 = v54;
    }
    else
    {
      v56 = v128;
      v57 = 1;
      v58 = v54;
      do
      {
        v59 = *((unsigned int *)v56 - 1);
        v60 = v59 <= 0x1D244
            ? byte_1DB74DBB5[16 * byte_1DB74E2E5[16 * byte_1DB74D9E2[v59 >> 8] + (v59 >> 4)]
                           + (v59 & 0xF)]
            : 0;
        if (v60 != 228 && v58 != 228 && v58 >= v60)
          break;
        v125[v57] = v60;
        v116 -= v55;
        v121 += v55;
        if (v57 == 9)
        {
          v113 = -1;
          v64 = 10;
          v58 = v60;
          goto LABEL_163;
        }
        v61 = (_QWORD *)((char *)v56 + 4);
        v62 = v57;
        v55 = v118();
        v57 = v62 + 1;
        v56 = v61;
        v58 = v60;
      }
      while ((int)v55 >= 1);
    }
    v63 = v112;
    if (v57 > 9)
      v63 = -1;
    v113 = v63;
    if (v57 <= 9)
      v64 = v57;
    else
      v64 = 10;
    if ((int)v64 > 1)
    {
LABEL_163:
      v65 = 1;
      v57 = v64;
      do
      {
        v108 = v58;
        v110 = v60;
        v66 = v57;
        v67 = v55;
        v68 = sub_1DB730260(HIDWORD(v124), *(_DWORD *)&v127[4 * v65 - 4]);
        if (v68)
        {
          HIDWORD(v124) = v68;
          v69 = v65 + 1;
          v55 = v67;
          if (v65 + 1 < (int)v66)
          {
            v70 = (int *)&v127[4 * v69 - 4];
            v71 = v65;
            v72 = &v125[v69];
            do
            {
              v73 = *v70++;
              *(_DWORD *)&v127[4 * v71 - 4] = v73;
              v74 = *v72++;
              v125[v71++] = v74;
            }
            while ((_DWORD)v66 - 1 != v71);
          }
          v75 = v66 - 2;
          if ((int)v66 < 2)
          {
            v31 = 0;
            v76 = 0;
            v57 = (v66 - 1);
            v58 = v108;
            v60 = v110;
          }
          else
          {
            v76 = 0;
            v31 = 0;
            v58 = v108;
            if (v65 == (_DWORD)v66 - 1)
            {
              v60 = v110;
              if ((int)v55 >= 1 && v110 == v108)
              {
                v58 = v125[v75];
                if (v66 <= 0xA)
                {
                  v77 = v125[v75];
                  v78 = v65;
                  if (v65 <= 9)
                    v65 = 9;
                  if (v78 <= 9)
                    v79 = 9;
                  else
                    v79 = v78;
                  v55 = ((uint64_t (*)(_BYTE *, unsigned __int8 *, unint64_t))v118)(&v127[4 * v78 - 4], v121, v116);
                  if ((int)v55 < 1)
                  {
                    v58 = v77;
                    v60 = v110;
                  }
                  else
                  {
                    ++v65;
                    v80 = &v127[4 * v78];
                    v58 = v77;
                    do
                    {
                      v81 = *((unsigned int *)v80 - 1);
                      v60 = v81 <= 0x1D244
                          ? byte_1DB74DBB5[16
                                         * byte_1DB74E2E5[16 * byte_1DB74D9E2[v81 >> 8] + (v81 >> 4)]
                                         + (v81 & 0xF)]
                          : 0;
                      if (v60 != 228 && v58 != 228 && (int)v58 >= (int)v60)
                        break;
                      v125[v78] = v60;
                      v116 -= v55;
                      v121 += v55;
                      if (v79 == v78)
                      {
                        v58 = v60;
                        goto LABEL_196;
                      }
                      v82 = v80 + 4;
                      ++v78;
                      v55 = v118();
                      v80 = v82;
                      v58 = v60;
                    }
                    while ((int)v55 >= 1);
                  }
                  v65 = v78;
                }
LABEL_196:
                v31 = 0;
                v76 = 0;
                v83 = v113;
                if (v65 > 9)
                  v83 = -1;
                v113 = v83;
                if (v65 <= 9)
                  v57 = v65;
                else
                  v57 = 10;
              }
              else
              {
                v57 = (v66 - 1);
              }
            }
            else
            {
              v57 = (v66 - 1);
              v60 = v110;
            }
          }
        }
        else
        {
          v76 = v65 + 1;
          v55 = v67;
          v58 = v108;
          v60 = v110;
          v57 = v66;
        }
        v65 = v76;
      }
      while (v76 < (int)v57);
    }
    v109 = v58;
    v111 = v60;
    if (v31)
    {
      if (&v23[v26] > (unsigned __int8 *)v28)
      {
        v84 = v57;
        v85 = v55;
        a1[1] = (char *)(v23 - (unsigned __int8 *)*a1);
        if (!sub_1DB6E3190((void **)a1, (size_t)&a1[2][v115 + v116 * v117]))
          return 0xFFFFFFFFLL;
        v23 = (unsigned __int8 *)&a1[1][(_QWORD)*a1];
        v28 = &a1[2][(_QWORD)*a1 + v123];
        LODWORD(v55) = v85;
        LODWORD(v57) = v84;
      }
      switch((int)v26)
      {
        case 1:
          goto LABEL_210;
        case 2:
          goto LABEL_209;
        case 3:
          goto LABEL_208;
        case 4:
          v86 = *v31++;
          *v23++ = v86;
LABEL_208:
          v87 = *v31++;
          *v23++ = v87;
LABEL_209:
          v88 = *v31++;
          *v23++ = v88;
LABEL_210:
          *v23++ = *v31;
          break;
        default:
          break;
      }
    }
    else
    {
      v89 = v57;
      v90 = v55;
      for (j = v122(v23, v28 - (char *)v23, HIDWORD(v124)); !j; j = v122(v23, v28 - (char *)v23, HIDWORD(v124)))
      {
        a1[1] = (char *)(v23 - (unsigned __int8 *)*a1);
        if (!sub_1DB6E3190((void **)a1, (size_t)&a1[2][v115 + v116 * v117]))
          return 0xFFFFFFFFLL;
        v23 = (unsigned __int8 *)&a1[1][(_QWORD)*a1];
        v28 = &a1[2][(_QWORD)*a1 + v123];
      }
      v23 += j;
      LODWORD(v55) = v90;
      LODWORD(v57) = v89;
    }
    v92 = v55;
    if ((int)v57 >= 1)
    {
      v93 = 0;
      v94 = v57;
      a2 = v121;
      while (1)
      {
        v95 = v122(v23, v28 - (char *)v23, *(_DWORD *)&v127[4 * v93 - 4]);
        if (!v95)
          break;
LABEL_221:
        v23 += v95;
        if (++v93 == v94)
          goto LABEL_224;
      }
      while (1)
      {
        a1[1] = (char *)(v23 - (unsigned __int8 *)*a1);
        if (!sub_1DB6E3190((void **)a1, (size_t)&a1[2][v115 + v116 * v117]))
          return 0xFFFFFFFFLL;
        v23 = (unsigned __int8 *)&a1[1][(_QWORD)*a1];
        v28 = &a1[2][(_QWORD)*a1 + v123];
        v95 = v122(v23, v28 - (char *)v23, *(_DWORD *)&v127[4 * v93 - 4]);
        if (v95)
        {
          a2 = v121;
          goto LABEL_221;
        }
      }
    }
    a2 = v121;
LABEL_224:
    if (v92 < 1)
    {
      v4 = v116;
      v29 = (uint64_t (*)(unsigned __int8 *, int64_t))v122;
      v24 = v113;
    }
    else
    {
      v4 = v116;
      v29 = (uint64_t (*)(unsigned __int8 *, int64_t))v122;
      v24 = v113;
      if (v111 == v109)
      {
        if (v116)
        {
          v96 = ((uint64_t (*)(unsigned int *, unsigned __int8 *, unint64_t))v118)(&v126, a2, v116);
          if (v96 >= 1)
          {
            v97 = v96;
            v98 = v109;
            do
            {
              v99 = v126 <= 0x1D244
                  ? byte_1DB74DBB5[16
                                 * byte_1DB74E2E5[16 * byte_1DB74D9E2[(unint64_t)v126 >> 8]
                                                + (v126 >> 4)]
                                 + (v126 & 0xF)]
                  : 0;
              if (v98 > v99)
                break;
              v4 -= v97;
              v100 = v29(v23, v28 - (char *)v23);
              if (!v100)
              {
                while (1)
                {
                  a1[1] = (char *)(v23 - (unsigned __int8 *)*a1);
                  if (!sub_1DB6E3190((void **)a1, (size_t)&a1[2][v115 + v4 * v117]))
                    return 0xFFFFFFFFLL;
                  v23 = (unsigned __int8 *)&a1[1][(_QWORD)*a1];
                  v28 = &a1[2][(_QWORD)*a1 + v123];
                  v100 = v122(v23, v28 - (char *)v23, v126);
                  if (v100)
                  {
                    v29 = (uint64_t (*)(unsigned __int8 *, int64_t))v122;
                    v24 = v113;
                    break;
                  }
                }
              }
              a2 += v97;
              v23 += v100;
              v97 = ((uint64_t (*)(unsigned int *, unsigned __int8 *, unint64_t))v118)(&v126, a2, v4);
              v98 = v99;
            }
            while (v97 > 0);
          }
        }
      }
    }
    if ((v32 & 0x80000000) != 0)
    {
LABEL_241:
      for (k = ((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))v29)(v23, v28 - (char *)v23, HIDWORD(v124));
            !k;
            k = ((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))v29)(v23, v28 - (char *)v23, HIDWORD(v124)))
      {
        a1[1] = (char *)(v23 - (unsigned __int8 *)*a1);
        if (!sub_1DB6E3190((void **)a1, (size_t)&a1[2][v115 + v4 * v117]))
          return 0xFFFFFFFFLL;
        v23 = (unsigned __int8 *)&a1[1][(_QWORD)*a1];
        v28 = &a1[2][(_QWORD)*a1 + v123];
      }
      v23 += k;
LABEL_245:
      for (m = ((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))v29)(v23, v28 - (char *)v23, v124);
            !m;
            m = ((uint64_t (*)(unsigned __int8 *, int64_t, _QWORD))v29)(v23, v28 - (char *)v23, v124))
      {
        a1[1] = (char *)(v23 - (unsigned __int8 *)*a1);
        if (!sub_1DB6E3190((void **)a1, (size_t)&a1[2][v115 + v4 * v117]))
          return 0xFFFFFFFFLL;
        v23 = (unsigned __int8 *)&a1[1][(_QWORD)*a1];
        v28 = &a1[2][(_QWORD)*a1 + v123];
      }
      v23 += m;
      v50 = -(int)v32;
LABEL_249:
      a2 += v50;
      v4 -= v50;
      v24 = 0xFFFFFFFFLL;
    }
    v21 = (uint64_t (*)(unsigned int *, unsigned __int8 *, unint64_t))v118;
    v26 = ((uint64_t (*)(char *, unsigned __int8 *, unint64_t))v118)((char *)&v124 + 4, a2, v4);
    if (!(_DWORD)v26)
    {
LABEL_253:
      a1[1] = (char *)(v23 - (unsigned __int8 *)*a1);
      *v23 = 0;
      if ((v114 & 1) != 0)
        (*a1)[(_QWORD)a1[1] + 1] = 0;
      return v24;
    }
  }
  v34 = v31;
LABEL_133:
  if ((v32 & 0x80000000) != 0)
  {
    v29 = (uint64_t (*)(unsigned __int8 *, int64_t))v122;
    if (!v34)
      goto LABEL_241;
    if (&v23[v26] > (unsigned __int8 *)v28)
    {
      a1[1] = (char *)(v23 - (unsigned __int8 *)*a1);
      if (!sub_1DB6E3190((void **)a1, (size_t)&a1[2][v115 + v4 * v117]))
        return 0xFFFFFFFFLL;
      v23 = (unsigned __int8 *)&a1[1][(_QWORD)*a1];
      v28 = &a1[2][(_QWORD)*a1 + v123];
    }
    switch((int)v26)
    {
      case 1:
        goto LABEL_142;
      case 2:
        goto LABEL_141;
      case 3:
        goto LABEL_140;
      case 4:
        v51 = *v34++;
        *v23++ = v51;
LABEL_140:
        v52 = *v34++;
        *v23++ = v52;
LABEL_141:
        v53 = *v34++;
        *v23++ = v53;
LABEL_142:
        *v23++ = *v34;
        break;
      default:
        goto LABEL_245;
    }
    goto LABEL_245;
  }
  if (v34)
  {
    v24 = v112;
    if (&v23[v26] > (unsigned __int8 *)v28)
    {
      a1[1] = (char *)(v23 - (unsigned __int8 *)*a1);
      if (!sub_1DB6E3190((void **)a1, (size_t)&a1[2][v115 + v4 * v117]))
        return 0xFFFFFFFFLL;
      v23 = (unsigned __int8 *)&a1[1][(_QWORD)*a1];
    }
    switch((int)v26)
    {
      case 1:
        goto LABEL_263;
      case 2:
        goto LABEL_262;
      case 3:
        goto LABEL_261;
      case 4:
        v103 = *v34++;
        *v23++ = v103;
LABEL_261:
        v104 = *v34++;
        *v23++ = v104;
LABEL_262:
        v105 = *v34++;
        *v23++ = v105;
LABEL_263:
        *v23++ = *v34;
        break;
      default:
        goto LABEL_253;
    }
    goto LABEL_253;
  }
  v24 = v112;
  v106 = v122(v23, v28 - (char *)v23, HIDWORD(v124));
  if (v106)
  {
LABEL_267:
    v23 += v106;
    goto LABEL_253;
  }
  while (1)
  {
    a1[1] = (char *)(v23 - (unsigned __int8 *)*a1);
    if (!sub_1DB6E3190((void **)a1, (size_t)&a1[2][v115 + v4 * v117]))
      return 0xFFFFFFFFLL;
    v23 = (unsigned __int8 *)&a1[1][(_QWORD)*a1];
    v106 = v122(v23, &a1[2][(_QWORD)*a1 + v123] - (char *)v23, HIDWORD(v124));
    if (v106)
      goto LABEL_267;
  }
}

uint64_t sub_1DB72F8AC(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  return sub_1DB7302DC(a1, a2, a3, 1);
}

uint64_t sub_1DB72F8B4(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  return sub_1DB7302DC(a1, a2, a3, 0);
}

uint64_t sub_1DB72F8BC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t i;
  unsigned int v16;

  v3 = a3;
  if (!sub_1DB6E3190((void **)a1, a3 + *(_QWORD *)(a1 + 8) + 1))
    return 0xFFFFFFFFLL;
  v6 = 0;
  v7 = (_BYTE *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 16) - 1;
  do
  {
    v16 = 0;
    v9 = a2;
    while (1)
    {
      v10 = sub_1DB72FC1C(&v16, v9, v3);
      v11 = v10;
      if (v10 == 3)
        break;
      if (v10 < 1)
        goto LABEL_9;
LABEL_8:
      v9 += v10;
      v3 -= v10;
    }
    if (v16 >> 11 != 27)
      goto LABEL_8;
    v11 = -3;
LABEL_9:
    if (a2 >= v9)
      goto LABEL_14;
    if ((unint64_t)&v7[v9 - a2] <= v8)
      goto LABEL_13;
    *(_QWORD *)(a1 + 8) = &v7[-*(_QWORD *)a1];
    if (!sub_1DB6E3190((void **)a1, &v9[*(_QWORD *)(a1 + 16)] - a2 + 1))
      return 0xFFFFFFFFLL;
    v7 = (_BYTE *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 8));
    v8 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 16) - 1;
LABEL_13:
    memcpy(v7, a2, v9 - a2);
    v7 += v9 - a2;
LABEL_14:
    if ((v11 & 0x80000000) == 0)
      break;
    v12 = v16;
    if (v11 == -3 && v16 >> 11 >= 0x1B && v16 >> 13 <= 6)
    {
      v11 = sub_1DB72FFDC(&v16, v9, v3);
      v12 = v16;
    }
    if (v11 >= 0)
      v13 = v11;
    else
      v13 = -v11;
    if (v11 < 0)
      v6 = 0xFFFFFFFFLL;
    else
      v6 = v6;
    for (i = sub_1DB72FEEC(v7, v8 - (_QWORD)v7, v12); !i; i = sub_1DB72FEEC(v7, v8 - (_QWORD)v7, v12))
    {
      *(_QWORD *)(a1 + 8) = &v7[-*(_QWORD *)a1];
      if (!sub_1DB6E3190((void **)a1, v3 + 1 + *(_QWORD *)(a1 + 16)))
        return 0xFFFFFFFFLL;
      v7 = (_BYTE *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 8));
      v8 = *(_QWORD *)a1 + *(_QWORD *)(a1 + 16) - 1;
    }
    v7 += i;
    a2 = &v9[v13];
    v3 -= v13;
  }
  while (v11);
  *(_QWORD *)(a1 + 8) = &v7[-*(_QWORD *)a1];
  *v7 = 0;
  return v6;
}

uint64_t sub_1DB72FAC4(uint64_t *a1, char *a2, size_t a3, uint64_t a4)
{
  size_t v4;
  const char *v5;
  size_t v7;
  uint64_t v8;
  char v9;
  unsigned __int8 *v11;
  int v12;
  __int32 v14;
  mbstate_t v15;
  uint64_t v16;

  v4 = a3;
  v5 = a2;
  v16 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a4 + 32))
  {
    v8 = 0;
    if (!a3)
      return v8;
    v9 = *a2;
    if (!*a2)
      return v8;
    v8 = 0;
    v11 = (unsigned __int8 *)(a2 + 1);
    while (1)
    {
      if (v9 < 0)
      {
        if ((*(_BYTE *)(a4 + 37) & 1) != 0)
        {
          if (!sub_1DB6E311C(a1, &unk_1DB74D80C, 3uLL))
            sub_1DB730818(1, "Out of memory");
          v8 = 0xFFFFFFFFLL;
          goto LABEL_15;
        }
        v8 = 0xFFFFFFFFLL;
        v9 = 63;
      }
      sub_1DB72CE60(a1, v9);
LABEL_15:
      v12 = *v11++;
      v9 = v12;
      if (!v12)
        return v8;
    }
  }
  if (!sub_1DB6E311C(a1, a2, a3))
    return 0xFFFFFFFFLL;
  memset(&v15, 0, sizeof(v15));
  if (v4)
  {
    while (1)
    {
      v14 = 0;
      v7 = mbrtowc(&v14, v5, v4, &v15);
      if (v7 >= 0xFFFFFFFFFFFFFFFELL)
        break;
      if (v7)
      {
        v5 += v7;
        v4 -= v7;
        if (v4)
          continue;
      }
      return 0;
    }
    return 0xFFFFFFFFLL;
  }
  return 0;
}

uint64_t sub_1DB72FC1C(unsigned int *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  int v12;
  int v13;
  unsigned __int8 v14;

  if (a3)
  {
    v3 = *a2;
    if (*a2)
    {
      v4 = byte_1DB74D70C[v3];
      if ((int)a3 >= (int)v4)
      {
        switch(*a2)
        {
          case 0u:
          case 1u:
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 6u:
          case 7u:
          case 8u:
          case 9u:
          case 0xAu:
          case 0xBu:
          case 0xCu:
          case 0xDu:
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x15u:
          case 0x16u:
          case 0x17u:
          case 0x18u:
          case 0x19u:
          case 0x1Au:
          case 0x1Bu:
          case 0x1Cu:
          case 0x1Du:
          case 0x1Eu:
          case 0x1Fu:
          case 0x20u:
          case 0x21u:
          case 0x22u:
          case 0x23u:
          case 0x24u:
          case 0x25u:
          case 0x26u:
          case 0x27u:
          case 0x28u:
          case 0x29u:
          case 0x2Au:
          case 0x2Bu:
          case 0x2Cu:
          case 0x2Du:
          case 0x2Eu:
          case 0x2Fu:
          case 0x30u:
          case 0x31u:
          case 0x32u:
          case 0x33u:
          case 0x34u:
          case 0x35u:
          case 0x36u:
          case 0x37u:
          case 0x38u:
          case 0x39u:
          case 0x3Au:
          case 0x3Bu:
          case 0x3Cu:
          case 0x3Du:
          case 0x3Eu:
          case 0x3Fu:
          case 0x40u:
          case 0x41u:
          case 0x42u:
          case 0x43u:
          case 0x44u:
          case 0x45u:
          case 0x46u:
          case 0x47u:
          case 0x48u:
          case 0x49u:
          case 0x4Au:
          case 0x4Bu:
          case 0x4Cu:
          case 0x4Du:
          case 0x4Eu:
          case 0x4Fu:
          case 0x50u:
          case 0x51u:
          case 0x52u:
          case 0x53u:
          case 0x54u:
          case 0x55u:
          case 0x56u:
          case 0x57u:
          case 0x58u:
          case 0x59u:
          case 0x5Au:
          case 0x5Bu:
          case 0x5Cu:
          case 0x5Du:
          case 0x5Eu:
          case 0x5Fu:
          case 0x60u:
          case 0x61u:
          case 0x62u:
          case 0x63u:
          case 0x64u:
          case 0x65u:
          case 0x66u:
          case 0x67u:
          case 0x68u:
          case 0x69u:
          case 0x6Au:
          case 0x6Bu:
          case 0x6Cu:
          case 0x6Du:
          case 0x6Eu:
          case 0x6Fu:
          case 0x70u:
          case 0x71u:
          case 0x72u:
          case 0x73u:
          case 0x74u:
          case 0x75u:
          case 0x76u:
          case 0x77u:
          case 0x78u:
          case 0x79u:
          case 0x7Au:
          case 0x7Bu:
          case 0x7Cu:
          case 0x7Du:
          case 0x7Eu:
          case 0x7Fu:
            *a1 = v3 & 0x7F;
            return 1;
          case 0xC2u:
          case 0xC3u:
          case 0xC4u:
          case 0xC5u:
          case 0xC6u:
          case 0xC7u:
          case 0xC8u:
          case 0xC9u:
          case 0xCAu:
          case 0xCBu:
          case 0xCCu:
          case 0xCDu:
          case 0xCEu:
          case 0xCFu:
          case 0xD0u:
          case 0xD1u:
          case 0xD2u:
          case 0xD3u:
          case 0xD4u:
          case 0xD5u:
          case 0xD6u:
          case 0xD7u:
          case 0xD8u:
          case 0xD9u:
          case 0xDAu:
          case 0xDBu:
          case 0xDCu:
          case 0xDDu:
          case 0xDEu:
          case 0xDFu:
            v14 = a2[1];
            if ((v14 & 0xC0) != 0x80)
              goto LABEL_25;
            *a1 = v14 & 0x3F | ((v3 & 0x1F) << 6);
            return 2;
          case 0xE0u:
          case 0xE1u:
          case 0xE2u:
          case 0xE3u:
          case 0xE4u:
          case 0xE5u:
          case 0xE6u:
          case 0xE7u:
          case 0xE8u:
          case 0xE9u:
          case 0xEAu:
          case 0xEBu:
          case 0xECu:
          case 0xEDu:
          case 0xEEu:
          case 0xEFu:
            v6 = a2[1];
            if ((v6 & 0xC0) != 0x80)
              goto LABEL_25;
            v7 = a2[2];
            if ((v7 & 0xC0) != 0x80)
              goto LABEL_26;
            v8 = ((v3 & 0xF) << 12) | ((v6 & 0x3F) << 6) | v7 & 0x3F;
            if (v8 < 0x800)
              goto LABEL_29;
            goto LABEL_47;
          case 0xF0u:
          case 0xF1u:
          case 0xF2u:
          case 0xF3u:
          case 0xF4u:
            v9 = a2[1];
            if ((v9 & 0xC0) != 0x80)
            {
LABEL_25:
              LODWORD(a3) = 1;
              goto LABEL_44;
            }
            v10 = a2[2];
            if ((v10 & 0xC0) != 0x80)
            {
LABEL_26:
              LODWORD(a3) = 2;
              goto LABEL_44;
            }
            v11 = a2[3];
            if ((v11 & 0xC0) != 0x80)
            {
LABEL_29:
              LODWORD(a3) = 3;
              goto LABEL_44;
            }
            v12 = ((v3 & 7) << 18) | ((v9 & 0x3F) << 12);
            if ((v12 - 1114112) < 0xFFF00000)
            {
              LODWORD(a3) = 4;
              goto LABEL_44;
            }
            v8 = v11 & 0x3F | ((v10 & 0x3F) << 6) | v12;
LABEL_47:
            *a1 = v8;
            return v4;
          default:
            if ((v3 & 0xFE) == 0xC0)
            {
              v13 = 2;
            }
            else if ((v3 + 11) >= 3u)
            {
              if ((v3 & 0xFC) == 0xF8)
              {
                v13 = 5;
              }
              else if ((v3 & 0xFE) == 0xFC)
              {
                v13 = 6;
              }
              else
              {
                v13 = 1;
              }
            }
            else
            {
              v13 = 4;
            }
            if (v13 >= (int)a3)
              a3 = a3;
            else
              a3 = v13;
            if ((int)a3 < 2)
              goto LABEL_44;
            v5 = 1;
            break;
        }
        while ((a2[v5] & 0xC0) == 0x80)
        {
          if (a3 == ++v5)
            goto LABEL_44;
        }
      }
      else
      {
        if ((int)a3 < 2)
          goto LABEL_44;
        v5 = 1;
        while ((a2[v5] & 0xC0) == 0x80)
        {
          if (a3 == ++v5)
            goto LABEL_44;
        }
      }
      LODWORD(a3) = v5;
LABEL_44:
      *a1 = 65533;
      return -(int)a3;
    }
  }
  return 0;
}

uint64_t sub_1DB72FE14(_BYTE *a1, unint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a3 < 0x10000)
  {
    if (a2 >= 2)
    {
      *a1 = BYTE1(a3);
      v3 = 2;
      v4 = 1;
      goto LABEL_7;
    }
  }
  else if (a2 >= 4)
  {
    *a1 = ((a3 + 983040) >> 18) & 3 | 0xD8;
    a1[1] = (a3 + 983040) >> 10;
    a1[2] = BYTE1(a3) & 3 | 0xDC;
    v3 = 4;
    v4 = 3;
LABEL_7:
    a1[v4] = a3;
    return v3;
  }
  return 0;
}

uint64_t sub_1DB72FE80(_BYTE *a1, unint64_t a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;

  if (a3 < 0x10000)
  {
    if (a2 >= 2)
    {
      *a1 = a3;
      v3 = a3 >> 8;
      v4 = 2;
      v5 = 1;
      goto LABEL_7;
    }
  }
  else if (a2 >= 4)
  {
    *a1 = (a3 + 983040) >> 10;
    a1[1] = ((a3 + 983040) >> 18) & 3 | 0xD8;
    a1[2] = a3;
    v3 = (a3 >> 8) & 3 | 0xFFFFFFDC;
    v4 = 4;
    v5 = 3;
LABEL_7:
    a1[v5] = v3;
    return v4;
  }
  return 0;
}

uint64_t sub_1DB72FEEC(_BYTE *a1, unint64_t a2, unsigned int a3)
{
  unsigned int v3;
  _BYTE *v4;

  if (HIWORD(a3) <= 0x10u)
    v3 = a3;
  else
    v3 = 65533;
  if (v3 > 0x7F)
  {
    if (v3 > 0x7FF)
    {
      if (HIWORD(v3))
      {
        if (a2 >= 4)
        {
          *a1 = (v3 >> 18) | 0xF0;
          a1[1] = (v3 >> 12) & 0x3F | 0x80;
          a1[2] = (v3 >> 6) & 0x3F | 0x80;
          v4 = a1 + 4;
          a1[3] = v3 & 0x3F | 0x80;
          return v4 - a1;
        }
      }
      else if (a2 >= 3)
      {
        *a1 = (v3 >> 12) | 0xE0;
        a1[1] = (v3 >> 6) & 0x3F | 0x80;
        v4 = a1 + 3;
        a1[2] = v3 & 0x3F | 0x80;
        return v4 - a1;
      }
    }
    else if (a2 >= 2)
    {
      *a1 = (v3 >> 6) | 0xC0;
      v4 = a1 + 2;
      a1[1] = v3 & 0x3F | 0x80;
      return v4 - a1;
    }
    return 0;
  }
  if (!a2)
    return 0;
  *a1 = v3;
  v4 = a1 + 1;
  return v4 - a1;
}

uint64_t sub_1DB72FFCC(unsigned int *a1, unsigned __int8 *a2, unint64_t a3)
{
  return sub_1DB7300D8(a1, a2, a3, 1);
}

uint64_t sub_1DB72FFD4(unsigned int *a1, unsigned __int8 *a2, unint64_t a3)
{
  return sub_1DB7300D8(a1, a2, a3, 0);
}

uint64_t sub_1DB72FFDC(unsigned int *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  v11 = 0;
  result = sub_1DB72FC1C(&v11, a2, a3);
  v7 = v11;
  v8 = (_DWORD)result == 3 && v11 >> 11 >= 0x1B;
  v9 = v11 >> 10;
  if (!v8 || v9 > 0x36)
  {
    if ((_DWORD)result != 3 || v9 < 0x37 || v11 >= 0xE000)
      goto LABEL_16;
LABEL_15:
    *a1 = 65533;
    return 4294967293;
  }
  v10 = 0;
  if ((unint64_t)(a3 - 3) <= 2)
    goto LABEL_15;
  result = sub_1DB72FC1C(&v10, a2 + 3, a3 - 3);
  if ((_DWORD)result == 3 && v10 >> 10 >= 0x37 && v10 >> 13 <= 6)
  {
    v7 = v10 + (v7 << 10) - 56613888;
    result = 6;
LABEL_16:
    *a1 = v7;
    return result;
  }
  *a1 = 65533;
  if ((int)result > 0)
    return -(int)result;
  return result;
}

uint64_t sub_1DB7300D8(unsigned int *a1, unsigned __int8 *a2, unint64_t a3, int a4)
{
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;

  if (!a3)
    return 0;
  if (a3 == 1)
  {
    *a1 = 65533;
    return 0xFFFFFFFFLL;
  }
  v5 = a2[1];
  if (a4)
    v6 = *a2;
  else
    v6 = a2[1];
  if (!a4)
    v5 = *a2;
  v7 = v5 | (v6 << 8);
  if ((v6 & 0xFC) == 0xD8)
  {
    if (a3 < 4 || ((v8 = a2[3], a4) ? (v9 = a2[2]) : (v9 = a2[3]), (v9 & 0xFC) != 0xDC))
    {
      *a1 = 65533;
      return 4294967294;
    }
    if (!a4)
      v8 = a2[2];
    v7 = (v8 | (v9 << 8)) + (v7 << 10) - 56613888;
    v10 = (_DWORD)a2 + 4;
  }
  else
  {
    v10 = (_DWORD)a2 + 2;
  }
  if (HIWORD(v7) > 0x10u || (v7 & 0xFFFFF800) == 55296)
  {
    *a1 = 65533;
    return ((_DWORD)a2 - v10);
  }
  else
  {
    *a1 = v7;
    return (v10 - (_DWORD)a2);
  }
}

uint64_t sub_1DB7301B0(uint64_t a1, char *a2, uint64_t a3, int a4)
{
  uint64_t v5;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t result;
  __int16 v11;
  int v12;
  BOOL v13;
  char v14;

  v5 = a3;
  if (!sub_1DB6E3190((void **)a1, *(_QWORD *)(a1 + 8) + 2 * a3 + 2))
    return 0xFFFFFFFFLL;
  v8 = *(_BYTE **)a1;
  v9 = (_BYTE *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 8));
  result = 0;
  if (v5)
  {
    do
    {
      v12 = *a2++;
      v11 = v12;
      v13 = v12 < 0;
      if (v12 < 0)
        result = 0xFFFFFFFFLL;
      else
        result = result;
      if (v13)
        v11 = -3;
      if (a4)
        v14 = HIBYTE(v11);
      else
        v14 = v11;
      if (!a4)
        LOBYTE(v11) = HIBYTE(v11);
      *v9 = v14;
      v9[1] = v11;
      v9 += 2;
      --v5;
    }
    while (v5);
    v8 = *(_BYTE **)a1;
  }
  *(_QWORD *)(a1 + 8) = v9 - v8;
  *v9 = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 8) + *(_QWORD *)a1 + 1) = 0;
  return result;
}

uint64_t sub_1DB730260(unsigned int a1, unsigned int a2)
{
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;

  v2 = 0;
  v3 = 930;
  do
  {
    v4 = dword_1DB7510FC[3 * ((v3 + v2) / 2)];
    if (v4 < a1)
    {
LABEL_5:
      v2 = (v3 + v2) / 2 + 1;
      continue;
    }
    if (v4 <= a1)
    {
      v5 = dword_1DB7510FC[3 * ((v3 + v2) / 2) + 1];
      if (v5 < a2)
        goto LABEL_5;
      if (v5 <= a2)
        return dword_1DB7510FC[3 * ((v3 + v2) / 2) + 2];
    }
    v3 = (v3 + v2) / 2 - 1;
  }
  while (v3 >= v2);
  return 0;
}

uint64_t sub_1DB7302DC(uint64_t a1, unsigned __int8 *a2, unint64_t a3, int a4)
{
  unint64_t v5;
  char *v8;
  int v9;
  uint64_t i;
  uint64_t v11;
  unsigned int v12;
  char v13;
  unsigned int v15;

  v5 = a3;
  if (!sub_1DB6E3190((void **)a1, a3 + *(_QWORD *)(a1 + 8) + 1))
    return 0xFFFFFFFFLL;
  v15 = 0;
  v8 = (char *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 8));
  v9 = sub_1DB7300D8(&v15, a2, v5, a4);
  for (i = 0; v9; v9 = sub_1DB7300D8(&v15, a2, v5, a4))
  {
    if (v9 >= 0)
      v11 = v9;
    else
      v11 = -v9;
    if (v9 < 0)
      v12 = -1;
    else
      v12 = i;
    v5 -= v11;
    a2 += v11;
    v13 = v15;
    if (v15 <= 0x7F)
    {
      i = v12;
    }
    else
    {
      v13 = 63;
      i = 0xFFFFFFFFLL;
    }
    *v8++ = v13;
  }
  *(_QWORD *)(a1 + 8) = &v8[-*(_QWORD *)a1];
  *v8 = 0;
  return i;
}

_DWORD *sub_1DB7303C0(void **a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
  return sub_1DB7303E8(a1, a2, &a9);
}

_DWORD *sub_1DB7303E8(void **a1, char *a2, char **a3)
{
  _DWORD *result;
  char v6;
  uint64_t *v7;
  char *v8;
  int v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  char v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  char v18;
  __int32 **v19;
  __int32 *v20;
  __int32 *v21;
  size_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  char **v26;
  int v27;
  unsigned int v28;
  char **v29;
  char *v30;
  char *v31;
  char *v32;
  char **v33;

  result = sub_1DB6E3190(a1, 0x40uLL);
  if (!result)
LABEL_62:
    sub_1DB730818(1, "Out of memory");
  if (a2)
  {
    while (1)
    {
      if (*a2 != 37)
      {
        if (!*a2)
          return result;
        v6 = *a2;
        v7 = (uint64_t *)a1;
        goto LABEL_6;
      }
      v8 = a2 + 1;
      v9 = a2[1];
      v10 = a2[1] - 106;
      v11 = v10 > 0x10;
      v12 = (1 << v10) & 0x10005;
      if (v11 || v12 == 0)
      {
        v14 = a2[1];
        v9 = 0;
      }
      else
      {
        v8 = a2 + 2;
        v14 = a2[2];
      }
      if (v14 > 98)
      {
        switch(v14)
        {
          case 'o':
          case 'u':
          case 'x':
            goto LABEL_19;
          case 'p':
          case 'q':
          case 'r':
          case 't':
          case 'v':
          case 'w':
            goto LABEL_38;
          case 's':
            v29 = a3++;
            v30 = *v29;
            if (v9 != 108)
            {
              if (v30)
                v32 = v30;
              else
                v32 = "(null)";
              result = sub_1DB72CE50((uint64_t *)a1, v32);
LABEL_52:
              a2 = v8;
              goto LABEL_53;
            }
            if (v30)
              v21 = (__int32 *)v30;
            else
              v21 = (__int32 *)&unk_1DB753CAC;
            break;
          default:
            if (v14 != 99)
            {
              if (v14 != 100)
                goto LABEL_38;
              if (v9 == 122 || (char)v9 == 108 || (char)v9 == 106)
              {
                v23 = (unint64_t *)a3++;
                v24 = *v23;
                if ((*v23 & 0x8000000000000000) != 0)
                  goto LABEL_36;
              }
              else
              {
                v33 = a3++;
                v24 = *(int *)v33;
                if ((v24 & 0x8000000000000000) != 0)
                {
LABEL_36:
                  sub_1DB72CE60((uint64_t *)a1, 45);
                  v24 = -(uint64_t)v24;
                }
              }
              v25 = (uint64_t *)a1;
              v16 = v24;
              goto LABEL_43;
            }
            v31 = (char *)a3++;
            v18 = *v31;
            v17 = (uint64_t *)a1;
            goto LABEL_51;
        }
      }
      else
      {
        if (v14 == 37)
        {
          v17 = (uint64_t *)a1;
          v18 = 37;
LABEL_51:
          result = sub_1DB72CE60(v17, v18);
          goto LABEL_52;
        }
        if (v14 != 83)
        {
          if (v14 != 88)
          {
LABEL_38:
            v7 = (uint64_t *)a1;
            v6 = 37;
LABEL_6:
            result = sub_1DB72CE60(v7, v6);
            goto LABEL_53;
          }
LABEL_19:
          if (v9 == 122 || (char)v9 == 108 || (char)v9 == 106)
          {
            v15 = (unint64_t *)a3++;
            v16 = *v15;
          }
          else
          {
            v26 = a3++;
            v16 = *(unsigned int *)v26;
          }
          v27 = *v8;
          v25 = (uint64_t *)a1;
          if (v27 == 117)
          {
LABEL_43:
            v28 = 10;
          }
          else if (v27 == 111)
          {
            v28 = 8;
          }
          else
          {
            v28 = 16;
          }
          result = sub_1DB7306BC(v25, v16, v28);
          goto LABEL_52;
        }
        v19 = (__int32 **)a3++;
        v20 = *v19;
        if (v20)
          v21 = v20;
        else
          v21 = (__int32 *)&unk_1DB753CAC;
      }
      v22 = wcslen(v21);
      result = (_DWORD *)sub_1DB72CED8((uint64_t)a1, v21, v22);
      if (!(_DWORD)result)
        goto LABEL_52;
      result = __error();
      a2 = v8;
      if (*result == 12)
        goto LABEL_62;
LABEL_53:
      ++a2;
    }
  }
  *(_BYTE *)*a1 = 0;
  return result;
}

uint64_t *sub_1DB7306BC(uint64_t *a1, unint64_t a2, unsigned int a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = a3;
  v6 = a2 / a3;
  if (a3 <= a2)
    sub_1DB7306BC(a1, a2 / a3);
  return sub_1DB72CE60(a1, a0123456789abcd_0[a2 - v6 * v5]);
}

uint64_t archive_version_number()
{
  return 3005003;
}

const char *archive_version_string()
{
  return "libarchive 3.5.3";
}

uint64_t archive_errno(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

_BYTE *archive_error_string(uint64_t a1)
{
  _BYTE *result;

  result = *(_BYTE **)(a1 + 56);
  if (!result || !*result)
    return 0;
  return result;
}

uint64_t archive_file_count(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t archive_format(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t archive_format_name(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t archive_compression(uint64_t a1)
{
  return archive_filter_code(a1);
}

uint64_t archive_compression_name(uint64_t a1)
{
  return archive_filter_name(a1);
}

uint64_t archive_position_compressed(uint64_t a1)
{
  return archive_filter_bytes(a1);
}

uint64_t archive_position_uncompressed(uint64_t a1)
{
  return archive_filter_bytes(a1);
}

_DWORD *archive_set_error(_DWORD *result, int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
  char *v9;
  _DWORD *v10;

  v9 = a3;
  v10 = result;
  result[13] = a2;
  if (a3)
  {
    *((_QWORD *)result + 9) = 0;
    result = sub_1DB7303E8((void **)result + 8, a3, &a9);
    v9 = (char *)*((_QWORD *)v10 + 8);
  }
  *((_QWORD *)v10 + 7) = v9;
  return result;
}

uint64_t *archive_copy_error(uint64_t a1, uint64_t a2)
{
  uint64_t *result;

  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 72) = 0;
  result = sub_1DB6E4384((uint64_t *)(a1 + 64), a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 64);
  return result;
}

void sub_1DB730818(int a1, const char *a2)
{
  size_t v4;

  write(2, "Fatal Internal Error in libarchive: ", 0x24uLL);
  v4 = strlen(a2);
  write(2, a2, v4);
  write(2, "\n", 1uLL);
  exit(a1);
}

uint64_t sub_1DB730874(char *__s)
{
  char *v1;
  char *v2;
  size_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  if (__s)
  {
    v1 = __s;
  }
  else
  {
    v2 = getenv("TMPDIR");
    if (v2)
      v1 = v2;
    else
      v1 = "/tmp";
  }
  v3 = strlen(v1);
  sub_1DB6E323C((uint64_t *)&v7, v1, v3);
  if (v7[v8 - 1] != 47)
    sub_1DB72CE60((uint64_t *)&v7, 47);
  sub_1DB72CE50((uint64_t *)&v7, "libarchive_XXXXXX");
  v4 = mkstemp(v7);
  v5 = v4;
  if ((v4 & 0x80000000) == 0)
  {
    sub_1DB6DD880(v4);
    unlink(v7);
  }
  sub_1DB6E7C3C((uint64_t)&v7);
  return v5;
}

uint64_t sub_1DB730938(char *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = mkstemp(a1);
  v2 = v1;
  if ((v1 & 0x80000000) == 0)
    sub_1DB6DD880(v1);
  return v2;
}

uint64_t archive_utility_string_sort(const char **a1)
{
  unsigned int v1;

  v1 = -1;
  do
    ++v1;
  while (a1[v1]);
  return sub_1DB73097C(a1, v1);
}

uint64_t sub_1DB73097C(const char **a1, unsigned int a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char **v9;
  uint64_t v10;
  void *v11;
  unsigned int v12;
  const char *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  const char **v17;
  const char **v18;
  const char *v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  const char **v23;
  const char *v24;

  if (a2 < 2)
    return 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v9 = a1 + 1;
  v8 = *a1;
  v10 = a2 - 1;
  do
  {
    if (strcmp(*v9, v8) < 0)
    {
      v11 = malloc_type_realloc(v5, 8 * (v7 + 1), 0x10040436913F5uLL);
      if (!v11)
        goto LABEL_14;
      v12 = v7;
      v7 = (v7 + 1);
      v5 = v11;
    }
    else
    {
      v11 = malloc_type_realloc(v4, 8 * (v6 + 1), 0x10040436913F5uLL);
      if (!v11)
      {
LABEL_14:
        free(v4);
        free(v5);
        return 4294967266;
      }
      v12 = v6;
      v6 = (v6 + 1);
      v4 = v11;
    }
    v13 = *v9++;
    *((_QWORD *)v11 + v12) = v13;
    --v10;
  }
  while (v10);
  v14 = sub_1DB73097C(v5, v7);
  if ((_DWORD)v7)
  {
    v15 = v7;
    v16 = v7;
    v17 = a1;
    v18 = (const char **)v5;
    do
    {
      v19 = *v18++;
      *v17++ = v19;
      --v16;
    }
    while (v16);
  }
  else
  {
    v15 = 0;
  }
  free(v5);
  a1[v15] = v8;
  v20 = sub_1DB73097C(v4, v6);
  if ((_DWORD)v6)
  {
    v21 = v7 + 1;
    v22 = v6;
    v23 = (const char **)v4;
    do
    {
      v24 = *v23++;
      a1[v21++] = v24;
      --v22;
    }
    while (v22);
  }
  free(v4);
  if ((int)v14 >= (int)v20)
    return v20;
  else
    return v14;
}

uint64_t archive_read_set_format_option(int *a1, char *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1DB6EB4EC(a1, a2, a3, a4, 14594245, "archive_read_set_format_option", (uint64_t (*)(int *, char *, unint64_t, unint64_t))sub_1DB730B2C, a8);
}

uint64_t sub_1DB730B2C(uint64_t a1, char *__s2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  const char *v13;
  uint64_t result;
  BOOL v15;

  v8 = 0;
  v9 = 0;
  v10 = -20;
  do
  {
    v11 = a1 + v8;
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + v8 + 1088);
    if (v12)
    {
      v13 = *(const char **)(v11 + 1072);
      if (v13)
      {
        if (__s2)
        {
          if (strcmp(v13, __s2))
            goto LABEL_11;
          ++v9;
        }
        *(_QWORD *)(a1 + 2472) = v11 + 1064;
        result = v12(a1, a3, a4);
        *(_QWORD *)(a1 + 2472) = 0;
        if ((_DWORD)result)
        {
          if ((_DWORD)result == -30)
            return result;
        }
        else
        {
          v10 = 0;
        }
      }
    }
LABEL_11:
    v8 += 88;
  }
  while (v8 != 1408);
  if (v9)
    v15 = 1;
  else
    v15 = __s2 == 0;
  if (v15)
    return v10;
  else
    return 4294967275;
}

uint64_t archive_read_set_filter_option(int *a1, char *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1DB6EB4EC(a1, a2, a3, a4, 14594245, "archive_read_set_filter_option", (uint64_t (*)(int *, char *, unint64_t, unint64_t))sub_1DB730C10, a8);
}

uint64_t sub_1DB730C10(uint64_t a1, char *__s2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  BOOL v13;

  v5 = *(_QWORD *)(a1 + 1032);
  if (v5)
  {
    v8 = 0;
    v9 = -20;
    while (1)
    {
      v10 = *(_QWORD *)(v5 + 8);
      if (v10)
      {
        v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
        if (v11)
        {
          if (!__s2)
            goto LABEL_8;
          if (!strcmp(*(const char **)(v5 + 96), __s2))
            break;
        }
      }
LABEL_12:
      v5 = *(_QWORD *)(v5 + 16);
      if (!v5)
        goto LABEL_15;
    }
    ++v8;
LABEL_8:
    result = v11(v10, a3, a4);
    if ((_DWORD)result)
    {
      if ((_DWORD)result == -30)
        return result;
    }
    else
    {
      v9 = 0;
    }
    goto LABEL_12;
  }
  v8 = 0;
  v9 = -20;
LABEL_15:
  if (v8)
    v13 = 1;
  else
    v13 = __s2 == 0;
  if (v13)
    return v9;
  else
    return 4294967275;
}

uint64_t archive_read_set_option(int *a1, char *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1DB6EB4EC(a1, a2, a3, a4, 14594245, "archive_read_set_option", (uint64_t (*)(int *, char *, unint64_t, unint64_t))sub_1DB730CE8, a8);
}

uint64_t sub_1DB730CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1DB6EB62C(a1, a2, a3, a4, (uint64_t (*)(void))sub_1DB730B2C, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1DB730C10);
}

uint64_t archive_read_set_options(int *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1DB6EB6C4(a1, a2, 14594245, "archive_read_set_options", (uint64_t (*)(int *, char *, char *, const char *))sub_1DB730CE8, a6, a7, a8);
}

uint64_t archive_filter_code(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 88))();
}

uint64_t archive_filter_count(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 72))();
}

uint64_t archive_filter_name(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 96))();
}

uint64_t archive_filter_bytes(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 80))();
}

uint64_t archive_free(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    sub_1DB6DC0F8();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 8) + 8))(v1);
  }
  return result;
}

uint64_t archive_write_fail(uint64_t a1)
{
  *(_DWORD *)(a1 + 4) = 0x8000;
  return 0x8000;
}

uint64_t archive_write_finish(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    sub_1DB6DC0F8();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 8) + 8))(v1);
  }
  return result;
}

uint64_t archive_read_finish(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    sub_1DB6DC0F8();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 8) + 8))(v1);
  }
  return result;
}

uint64_t archive_write_data(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 32))();
}

uint64_t archive_read_next_header2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 56))();
}

uint64_t sub_1DB730E0C()
{
  time_t v0;
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  size_t v20;
  int *v21;
  const char *v22;
  size_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  int64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int *v41;
  int v42;
  int *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  _OWORD *v48;
  int v49;
  int v50;
  int *v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BOOL8 v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  unsigned __int16 v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _BOOL4 v77;
  int64_t v78;
  uint64_t v79;
  tm *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  int v84;
  int v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t tm_mday;
  int v92;
  int v93;
  int v94;
  time_t v95;
  time_t v96;
  int v97;
  unint64_t v98;
  tm *v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  tm v107;
  tm v108;
  time_t v109;
  _OWORD v110[256];
  char __s[64];
  uint64_t v112;

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v112 = *MEMORY[0x1E0C80C00];
  v109 = v0;
  memset(&v108, 0, sizeof(v108));
  memset(&v107, 0, sizeof(v107));
  bzero(v110, 0x1000uLL);
  if (!localtime_r(&v109, &v108))
    return -1;
  v99 = gmtime_r(&v109, &v107);
  if (v99)
    v3 = 3600 * (v107.tm_hour - (uint64_t)v108.tm_hour)
       + 86400
       * (v107.tm_yday
        - (v107.tm_year + 1899) / 100
        + ((v107.tm_year + 1899) >> 2)
        + (((v107.tm_year + 1899) / 100) >> 2)
        + (v108.tm_year + 1899) / 100
        - (v108.tm_yday
         + ((v108.tm_year + 1899) >> 2)
         + (((v108.tm_year + 1899) / 100) >> 2))
        + 365 * (v107.tm_year - v108.tm_year))
       + 60 * (v107.tm_min - (uint64_t)v108.tm_min)
       - v108.tm_sec
       + v107.tm_sec;
  else
    v3 = 0;
  v4 = 0;
  if (v108.tm_isdst)
    v3 += 3600;
  v103 = v3;
  v5 = MEMORY[0x1E0C80978];
  while (1)
  {
    v6 = (int *)&v110[v4];
    v7 = (uint64_t *)(v6 + 2);
    v8 = v2;
    do
    {
LABEL_9:
      v9 = v8;
      v10 = *v8;
      if (*v8 < 0)
        v11 = __maskrune(*v8, 0x4000uLL);
      else
        v11 = *(_DWORD *)(v5 + 4 * v10 + 60) & 0x4000;
      ++v8;
    }
    while (v11);
    if ((_DWORD)v10 == 40)
    {
      v12 = 0;
      v8 = v9;
      while (1)
      {
        v14 = *v8++;
        v13 = v14;
        if (v14 == 40)
        {
          ++v12;
        }
        else if (v13 == 41)
        {
          --v12;
        }
        else if (!v13)
        {
          *v6 = 0;
          goto LABEL_58;
        }
        if (v12 <= 0)
          goto LABEL_9;
      }
    }
    v15 = *v9;
    if (*v9)
    {
      v16 = 0;
      v2 = v9;
      while (1)
      {
        if ((v15 & 0x80) != 0)
        {
          if (__maskrune(v15, 0x500uLL))
          {
LABEL_27:
            if (v16 > 0x3E)
              goto LABEL_42;
            goto LABEL_32;
          }
        }
        else if ((*(_DWORD *)(v5 + 4 * v15 + 60) & 0x500) != 0)
        {
          goto LABEL_27;
        }
        if (v15 != 46 || v16 >= 0x3F)
          goto LABEL_42;
LABEL_32:
        v17 = *v2;
        if ((_DWORD)v17 != 46)
        {
          v18 = *v2;
          if ((char)v17 < 0)
          {
            if (__maskrune(*v2, 0x8000uLL))
LABEL_35:
              v18 = __tolower(v17);
          }
          else if ((*(_DWORD *)(v5 + 4 * v17 + 60) & 0x8000) != 0)
          {
            goto LABEL_35;
          }
          __s[v16++] = v18;
        }
        v19 = *++v2;
        v15 = v19;
        if (!v19)
          goto LABEL_42;
      }
    }
    v16 = 0;
    v2 = v9;
LABEL_42:
    __s[v16] = 0;
    v20 = strlen(__s);
    v21 = &dword_1EA322AB0;
    v22 = "am";
    do
    {
      v23 = *((_QWORD *)v21 - 2);
      if (!v23)
        v23 = strlen(v22);
      if (v20 >= v23 && !strncmp(v22, __s, v20))
      {
        *v7 = *((_QWORD *)v21 + 1);
        v24 = *v21;
        goto LABEL_55;
      }
      v22 = (const char *)*((_QWORD *)v21 + 3);
      v21 += 8;
    }
    while (v22);
    v24 = *v9;
    if ((v24 - 48) > 9)
      break;
    *v7 = 0;
    v25 = *v9;
    if ((v25 - 48) <= 9)
    {
      v26 = 0;
      do
      {
        v26 = 10 * v26 + (char)v25 - 48;
        *v7 = v26;
        v27 = *++v9;
        LOBYTE(v25) = v27;
      }
      while ((v27 - 48) < 0xA);
    }
    *v6 = 267;
    v2 = v9;
LABEL_56:
    ++v4;
    result = -1;
    if (v4 == 256)
      return result;
  }
  v24 = (char)v24;
  v2 = v9 + 1;
LABEL_55:
  *v6 = v24;
  if (v24)
    goto LABEL_56;
LABEL_58:
  if (!v4)
  {
    v29 = 0;
    v30 = 0;
    v106 = 0;
    v32 = 0;
    v101 = 0;
    v102 = 0;
    v75 = 0;
    v86 = 0;
    v72 = 0;
    v36 = 0;
    v37 = 0;
    v85 = 0;
    LODWORD(v38) = 0;
    LODWORD(v39) = 0;
    v40 = 0;
    v84 = 0;
    v87 = 2;
    v88 = v103;
    goto LABEL_182;
  }
  v4 = 0;
  v29 = 0;
  v30 = 0;
  v105 = 0;
  v106 = 0;
  v31 = 0;
  v32 = 0;
  v101 = 0;
  v102 = 0;
  v33 = 0;
  v98 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = (int *)v110;
  while (2)
  {
    v42 = *v41;
    result = -1;
    switch(*v41)
    {
      case 261:
        v38 = (v38 + 1);
        v43 = v41 + 4;
        v30 = *((_QWORD *)v41 + 1);
        v106 = 1;
        if (v41[4] == 44)
LABEL_62:
          v43 = v41 + 8;
        else
          v106 = 1;
        goto LABEL_97;
      case 262:
        v31 = 0;
        ++v37;
        v35 = *((_QWORD *)v41 + 1);
        v43 = v41 + 4;
        goto LABEL_97;
      case 263:
        return result;
      case 264:
        if (v41[4] != 267)
          return -1;
        if (v41[8] == 44 && v41[12] == 267)
        {
          ++HIDWORD(v105);
          v33 = *((_QWORD *)v41 + 1);
          v34 = *((_QWORD *)v41 + 3);
          v45 = 4;
          v32 = *((_QWORD *)v41 + 7);
          goto LABEL_87;
        }
        v33 = *((_QWORD *)v41 + 1);
        v34 = *((_QWORD *)v41 + 3);
        goto LABEL_86;
      case 265:
        v29 += *((_QWORD *)v41 + 1);
        goto LABEL_76;
      case 266:
        v4 += *((_QWORD *)v41 + 1);
LABEL_76:
        v46 = 1;
        goto LABEL_92;
      case 267:
        v43 = v41 + 4;
        v47 = v41[4];
        if (v47 > 260)
        {
          switch(v47)
          {
            case 261:
              v38 = (v38 + 1);
              v106 = *((_QWORD *)v41 + 1);
              v30 = *((_QWORD *)v41 + 3);
              goto LABEL_62;
            case 263:
              v58 = v38;
              v54 = v34;
              v55 = v39;
              v56 = v33;
              v57 = v58;
              v101 = 0;
              v102 = 0;
              LODWORD(v105) = v105 + 1;
              v59 = *((_QWORD *)v41 + 1);
              goto LABEL_107;
            case 264:
              if (v41[8] == 267)
              {
                ++HIDWORD(v105);
                v34 = *((_QWORD *)v41 + 1);
                v33 = *((_QWORD *)v41 + 3);
                v45 = 3;
                v32 = *((_QWORD *)v41 + 5);
                goto LABEL_87;
              }
              v34 = *((_QWORD *)v41 + 1);
              v33 = *((_QWORD *)v41 + 3);
              break;
            case 265:
              v29 += *((_QWORD *)v41 + 3) * *((_QWORD *)v41 + 1);
              goto LABEL_123;
            case 266:
              v4 += *((_QWORD *)v41 + 3) * *((_QWORD *)v41 + 1);
LABEL_123:
              v46 = 2;
              goto LABEL_92;
            default:
              goto LABEL_152;
          }
LABEL_86:
          v45 = 2;
          goto LABEL_87;
        }
        if (v47 == 45)
        {
          v67 = v41[8];
          if (v67 == 264)
          {
            if (v41[12] == 45 && v41[16] == 267)
            {
              ++HIDWORD(v105);
              v68 = *((_QWORD *)v41 + 1);
              if (v68 <= 31)
                v32 = *((_QWORD *)v41 + 9);
              else
                v32 = *((_QWORD *)v41 + 1);
              if (v68 <= 31)
                v34 = *((_QWORD *)v41 + 1);
              else
                v34 = *((_QWORD *)v41 + 9);
              v33 = *((_QWORD *)v41 + 5);
LABEL_168:
              v45 = 5;
              goto LABEL_87;
            }
          }
          else if (v67 == 267 && v41[12] == 45 && v41[16] == 267)
          {
            ++HIDWORD(v105);
            v32 = *((_QWORD *)v41 + 1);
            v33 = *((_QWORD *)v41 + 5);
            v45 = 5;
            v34 = *((_QWORD *)v41 + 9);
            goto LABEL_87;
          }
          goto LABEL_152;
        }
        if (v47 == 47)
        {
          if (v41[8] == 267)
          {
            if (v41[12] == 47 && v41[16] == 267)
            {
              ++HIDWORD(v105);
              v32 = *((_QWORD *)v41 + 1);
              if (v32 < 13)
              {
                v33 = *((_QWORD *)v41 + 1);
                v32 = *((_QWORD *)v41 + 9);
                v34 = *((_QWORD *)v41 + 5);
              }
              else
              {
                v33 = *((_QWORD *)v41 + 5);
                v34 = *((_QWORD *)v41 + 9);
              }
              goto LABEL_168;
            }
            v33 = *((_QWORD *)v41 + 1);
            v34 = *((_QWORD *)v41 + 5);
            v45 = 3;
LABEL_87:
            v39 = (v39 + 1);
            ++v40;
            v43 = &v41[4 * v45];
            goto LABEL_97;
          }
LABEL_152:
          v69 = *((_QWORD *)v41 + 1);
          if (!(_DWORD)v105 || HIDWORD(v105) || v36)
          {
            if ((uint64_t)v69 < 10001)
            {
              if ((uint64_t)v69 > 23)
              {
                result = -1;
                if (v69 > 0x95F)
                  return result;
                v98 = (unsigned __int16)v69 / 0x64u;
                v70 = (unsigned __int16)v69 % 0x64u;
                if (v70 > 0x3Bu)
                  return result;
                v101 = v70;
                v102 = 0;
              }
              else
              {
                v101 = 0;
                v102 = 0;
                LODWORD(v105) = v105 + 1;
                v98 = v69;
              }
            }
            else
            {
              ++HIDWORD(v105);
              ++v40;
              v39 = (v39 + 1);
              v34 = v69 % 0x64;
              v33 = v69 / 0x64
                  - 100 * ((unint64_t)((v69 / 0x64 * (unsigned __int128)0x51EB851EB851EB9uLL) >> 64) >> 1);
              v32 = v69 / 0x2710;
            }
          }
          else
          {
            HIDWORD(v105) = 1;
            v32 = v69;
          }
          goto LABEL_97;
        }
        if (v47 != 58 || v41[8] != 267)
          goto LABEL_152;
        v43 = v41 + 12;
        v52 = v41[12];
        if (v52 != 58)
        {
          v71 = v38;
          v54 = v34;
          v55 = v39;
          v56 = v33;
          v57 = v71;
          v102 = 0;
LABEL_164:
          v101 = *((_QWORD *)v41 + 5);
          LODWORD(v105) = v105 + 1;
          v59 = *((_QWORD *)v41 + 1);
          if (v52 == 263)
          {
LABEL_107:
            v60 = v31;
            v61 = v32;
            if (v59 == 12)
              v62 = 0;
            else
              v62 = v59;
            v63 = v59 + 12;
            v64 = v43[4];
            v43 += 4;
            v52 = v64;
            if (v59 == 12)
              v63 = 12;
            if (*((_QWORD *)v43 - 1) == 1)
              v59 = v63;
            else
              v59 = v62;
            v32 = v61;
            v31 = v60;
          }
          v98 = v59;
          if (v52 == 43)
          {
            v65 = v57;
            if (v43[4] == 267)
            {
              ++v37;
              v66 = v43[8];
              v43 += 8;
              v52 = v66;
              v35 = -60 * (*((_QWORD *)v43 - 1) % 100) - 3600 * (*((_QWORD *)v43 - 1) / 100);
              v31 = 1;
              goto LABEL_135;
            }
            v33 = v56;
            v39 = v55;
LABEL_141:
            v34 = v54;
          }
          else
          {
            v65 = v57;
LABEL_135:
            v33 = v56;
            v39 = v55;
            if (v52 != 45)
              goto LABEL_141;
            v34 = v54;
            if (v43[4] == 267)
            {
              ++v37;
              v35 = 60 * (*((_QWORD *)v43 + 3) % 100) + 3600 * (*((_QWORD *)v43 + 3) / 100);
              v43 += 8;
              v31 = 1;
            }
          }
          v38 = v65;
          goto LABEL_97;
        }
        if (v41[16] == 267)
        {
          v53 = v38;
          v54 = v34;
          v55 = v39;
          v56 = v33;
          v57 = v53;
          v43 = v41 + 20;
          v52 = v41[20];
          v102 = *((_QWORD *)v41 + 9);
          goto LABEL_164;
        }
        v98 = *((_QWORD *)v41 + 1);
        v101 = *((_QWORD *)v41 + 5);
        v102 = 0;
        LODWORD(v105) = v105 + 1;
LABEL_97:
        v41 = v43;
        if (v43 < v6)
          continue;
        v72 = v34;
        if (v37)
          v73 = v31;
        else
          v73 = 2;
        v74 = v103;
        if (v37)
          v74 = v35;
        if (v99)
        {
          v75 = v33;
          if (v37)
          {
            v104 = v40;
            v100 = v39;
            v76 = v35;
            v97 = v38;
            v77 = v31;
            v78 = v32;
            v79 = v76;
            v109 -= v76;
            v80 = gmtime_r(&v109, &v107);
            if (v80)
            {
              v81 = *(_OWORD *)&v80->tm_sec;
              v82 = *(_OWORD *)&v80->tm_mon;
              v83 = *(_OWORD *)&v80->tm_isdst;
              v108.tm_zone = v80->tm_zone;
              *(_OWORD *)&v108.tm_mon = v82;
              *(_OWORD *)&v108.tm_isdst = v83;
              *(_OWORD *)&v108.tm_sec = v81;
            }
            v109 += v79;
            v85 = v105;
            v84 = HIDWORD(v105);
            v86 = v98;
            v32 = v78;
            v87 = v77;
            LODWORD(v38) = v97;
            v88 = v79;
            LODWORD(v39) = v100;
            v40 = v104;
          }
          else
          {
            v87 = v73;
            v88 = v74;
            v85 = v105;
            v84 = HIDWORD(v105);
            v86 = v98;
          }
        }
        else
        {
          v87 = v73;
          v88 = v74;
          v85 = v105;
          v84 = HIDWORD(v105);
          v86 = v98;
          v75 = v33;
        }
LABEL_182:
        if (v84)
          v89 = v32;
        else
          v89 = v108.tm_year + 1900;
        if (v40)
          v90 = v75;
        else
          v90 = v108.tm_mon + 1;
        if ((_DWORD)v39)
          tm_mday = v72;
        else
          tm_mday = v108.tm_mday;
        result = -1;
        if (v85 <= 1 && v37 <= 1 && (int)v38 <= 1 && v84 <= 1 && v40 <= 1 && (int)v39 <= 1)
        {
          v92 = v84;
          v93 = v39;
          v94 = v38;
          if (v40 | v84 | v39 | v38 | v85)
          {
            v95 = sub_1DB731AC0(v90, tm_mday, v89, v86, v101, v102, v88, v87);
            if (v95 < 0)
              return -1;
          }
          else
          {
            v95 = v109;
            if (!v36)
              v95 = v109 - 3600 * v108.tm_hour - 60 * v108.tm_min - v108.tm_sec;
          }
          v96 = v95 + v4 + sub_1DB731D3C(v95 + v4, v88, v29);
          if (v94 && !v92 && !v40 && !v93)
            v96 += sub_1DB731DF4(v96, v88, v87, v106, v30);
          if (v96 == -1)
            return 0;
          else
            return v96;
        }
        return result;
      case 268:
        v49 = v41[4];
        v48 = v41 + 4;
        v31 = v49 != 269;
        ++v37;
        v35 = *((_QWORD *)v48 - 1);
        v43 = (int *)v48;
        goto LABEL_97;
      default:
        if (v42 == 43)
        {
          if (v41[4] != 267)
            return -1;
          v50 = v41[8];
          if (v50 == 265)
          {
            v29 += *((_QWORD *)v41 + 5) * *((_QWORD *)v41 + 3);
          }
          else
          {
            if (v50 != 266)
              return -1;
            v4 += *((_QWORD *)v41 + 5) * *((_QWORD *)v41 + 3);
          }
        }
        else
        {
          if (v42 != 45)
            return result;
          if (v41[4] != 267)
            return -1;
          v44 = v41[8];
          if (v44 == 265)
          {
            v29 -= *((_QWORD *)v41 + 5) * *((_QWORD *)v41 + 3);
          }
          else
          {
            if (v44 != 266)
              return -1;
            v4 -= *((_QWORD *)v41 + 5) * *((_QWORD *)v41 + 3);
          }
        }
        v46 = 3;
LABEL_92:
        ++v36;
        v51 = &v41[4 * v46];
        if (*v51 == 260)
          v43 = v51 + 4;
        else
          v43 = v51;
        if (*v51 == 260)
        {
          v29 = -v29;
          v4 = -v4;
        }
        goto LABEL_97;
    }
  }
}

time_t sub_1DB731AC0(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, int a8)
{
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64x2_t v17;
  unint64_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int64x2_t v24;
  int8x16_t v25;
  tm *v26;
  tm v28;
  time_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v30 = 0x1F1F1E1F1E1F001FLL;
  v31 = 522067742;
  v9 = a3 + 1900;
  if (a3 >= 100)
    v9 = a3;
  if (a3 < 69)
    v9 = a3 + 2000;
  if ((v9 & 3) != 0)
  {
    v10 = 28;
  }
  else if (__ROR8__(0x8F5C28F5C28F5C29 * v9 + 0x51EB851EB851EB8, 2) <= 0x28F5C28F5C28F5CuLL)
  {
    if (__ROR8__(0x8F5C28F5C28F5C29 * v9 + 0x51EB851EB851EB0, 4) >= 0xA3D70A3D70A3D7uLL)
      v10 = 28;
    else
      v10 = 29;
  }
  else
  {
    v10 = 29;
  }
  BYTE1(v30) = v10;
  v11 = -1;
  v12 = a2 - 1;
  if (a2 >= 1
    && a1 - 13 >= 0xFFFFFFFFFFFFFFF4
    && (unint64_t)(v9 - 2039) >= 0xFFFFFFFFFFFFFFBBLL
    && a6 <= 0x3B
    && a5 <= 0x3B
    && a4 <= 0x17)
  {
    v13 = a1 - 1;
    if (*((char *)&v30 + a1 - 1) >= a2)
    {
      if (a1 >= 2)
      {
        v14 = &v30;
        do
        {
          v15 = *(char *)v14;
          v14 = (uint64_t *)((char *)v14 + 1);
          v12 += v15;
          --v13;
        }
        while (v13);
      }
      if (v9 >= 1971)
      {
        v16 = 0;
        v17 = (uint64x2_t)vdupq_n_s64(v9 - 1971);
        v18 = (v9 - 1969) & 0xFFFFFFFFFFFFFFFELL;
        v19 = (int64x2_t)(unint64_t)v12;
        v20 = (int64x2_t)xmmword_1DB753D10;
        v21 = (int8x16_t)vdupq_n_s64(3uLL);
        v22 = (int8x16_t)vdupq_n_s64(0x16DuLL);
        v23 = (int8x16_t)vdupq_n_s64(0x16EuLL);
        v24 = vdupq_n_s64(2uLL);
        do
        {
          v25 = (int8x16_t)v19;
          v19 = vaddq_s64(v19, (int64x2_t)vbslq_s8((int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v20, v21)), v23, v22));
          v16 += 2;
          v20 = vaddq_s64(v20, v24);
        }
        while (v18 != v16);
        v12 = vaddvq_s64((int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v16 - 2), (int8x16_t)xmmword_1DB753D20), v17), v25, (int8x16_t)v19));
      }
      memset(&v28, 0, sizeof(v28));
      v29 = 3600 * a4 + 60 * a5 + a6 + a7 + 86400 * v12;
      v26 = localtime_r(&v29, &v28);
      if (!a8 || a8 == 2 && v26->tm_isdst)
        v29 -= 3600;
      return v29;
    }
  }
  return v11;
}

time_t sub_1DB731D3C(time_t a1, uint64_t a2, uint64_t a3)
{
  tm *v5;
  uint64_t v6;
  time_t v7;
  time_t v8;
  tm v10;
  time_t v11;

  v11 = a1;
  if (!a3)
    return 0;
  memset(&v10, 0, sizeof(v10));
  v5 = localtime_r(&v11, &v10);
  v6 = v5->tm_mon + (uint64_t)(12 * v5->tm_year + 22800) + a3;
  v7 = v11;
  v8 = sub_1DB731AC0(v6 % 12 + 1, v5->tm_mday, v6 / 12, v5->tm_hour, v5->tm_min, v5->tm_sec, a2, 2);
  return sub_1DB731EBC(v7, v8);
}

time_t sub_1DB731DF4(time_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  _BOOL8 v9;
  tm v11;
  time_t v12;

  memset(&v11, 0, sizeof(v11));
  v12 = a1 - a2;
  v8 = (a5 - gmtime_r(&v12, &v11)->tm_wday + 7) % 7;
  v9 = a4 > 0;
  if (a3 == 2)
    return sub_1DB731EBC(a1, a1 + 604800 * (a4 - v9) + 86400 * v8);
  else
    return 604800 * (a4 - v9) + 86400 * v8;
}

time_t sub_1DB731EBC(time_t a1, time_t a2)
{
  int v2;
  tm *v3;
  tm v5;
  time_t v6;
  time_t v7;

  v6 = a2;
  v7 = a1;
  memset(&v5, 0, sizeof(v5));
  v2 = (localtime_r(&v7, &v5)->tm_hour + 1) % 24;
  v3 = localtime_r(&v6, &v5);
  return v6 - v7 + 3600 * (v2 + 24 * ((v3->tm_hour + 1) / 24) - (v3->tm_hour + 1));
}

_QWORD *archive_write_new()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;

  v0 = malloc_type_calloc(1uLL, 0x168uLL, 0x10F00405C931EDEuLL);
  v1 = v0;
  if (v0)
  {
    *v0 = 0x1B0C5C0DELL;
    if ((byte_1ECFF6BC8 & 1) == 0)
    {
      qword_1ECFF6C30 = (uint64_t)sub_1DB732AE4;
      unk_1ECFF6C38 = sub_1DB732B2C;
      qword_1ECFF6C20 = (uint64_t)sub_1DB732B74;
      unk_1ECFF6C28 = sub_1DB732A9C;
      qword_1ECFF6BD8 = (uint64_t)sub_1DB7329DC;
      unk_1ECFF6BE0 = sub_1DB732B98;
      qword_1ECFF6BE8 = (uint64_t)sub_1DB732C7C;
      unk_1ECFF6BF0 = sub_1DB732DC4;
      qword_1ECFF6BF8 = (uint64_t)sub_1DB732E28;
      byte_1ECFF6BC8 = 1;
    }
    v0[1] = &qword_1ECFF6BD8;
    v0[30] = -4294957056;
    v0[24] = 1024;
    v2 = malloc_type_calloc(1uLL, 0x400uLL, 0xF3913452uLL);
    if (v2)
    {
      v1[23] = v2;
    }
    else
    {
      free(v1);
      return 0;
    }
  }
  return v1;
}

uint64_t archive_write_set_bytes_per_block(int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594(a1, -1329217314, 1, "archive_write_set_bytes_per_block", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    result = 0;
    a1[60] = a2;
  }
  return result;
}

uint64_t archive_write_get_bytes_per_block(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594((int *)a1, -1329217314, 0x7FFF, "archive_write_get_bytes_per_block", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
    return *(unsigned int *)(a1 + 240);
  return result;
}

uint64_t archive_write_set_bytes_in_last_block(int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594(a1, -1329217314, 0x7FFF, "archive_write_set_bytes_in_last_block", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    result = 0;
    a1[61] = a2;
  }
  return result;
}

uint64_t archive_write_get_bytes_in_last_block(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594((int *)a1, -1329217314, 0x7FFF, "archive_write_get_bytes_in_last_block", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
    return *(unsigned int *)(a1 + 244);
  return result;
}

uint64_t archive_write_set_skip_file(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594((int *)a1, -1329217314, 0x7FFF, "archive_write_set_skip_file", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    result = 0;
    *(_DWORD *)(a1 + 160) = 1;
    *(_QWORD *)(a1 + 168) = a2;
    *(_QWORD *)(a1 + 176) = a3;
  }
  return result;
}

_QWORD *sub_1DB7321E4(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;

  result = malloc_type_calloc(1uLL, 0x60uLL, 0x10F0040FC22F2D7uLL);
  if (result)
  {
    result[1] = a1;
    *((_DWORD *)result + 23) = 1;
    v3 = (_QWORD *)(a1 + 248);
    if (*(_QWORD *)(a1 + 248))
      v3 = (_QWORD *)(*(_QWORD *)(a1 + 256) + 16);
    *v3 = result;
    *(_QWORD *)(a1 + 256) = result;
  }
  return result;
}

uint64_t sub_1DB732248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t result;

  if (*(_DWORD *)(a1 + 92) != 2)
    return 4294967266;
  if (a3)
  {
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 40);
    if (v5)
    {
      result = v5(a1, a2, a3);
      *(_QWORD *)a1 += a3;
      return result;
    }
    return 4294967266;
  }
  return 0;
}

uint64_t sub_1DB7322A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v5)(_QWORD, uint64_t, uint64_t);
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 248);
  if (*(_DWORD *)(v3 + 92) != 2)
    return 4294967266;
  if (a3)
  {
    v5 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v3 + 40);
    if (v5)
    {
      result = v5(*(_QWORD *)(a1 + 248), a2, a3);
      *(_QWORD *)v3 += a3;
      return result;
    }
    return 4294967266;
  }
  return 0;
}

uint64_t sub_1DB732308(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, _QWORD, unint64_t);
  uint64_t result;

  if (!a2)
    return 0;
  v2 = a2;
  while (v2)
  {
    if (v2 >= a1[24])
      v4 = a1[24];
    else
      v4 = v2;
    v5 = a1[31];
    if (*(_DWORD *)(v5 + 92) != 2)
      return 4294967266;
    if (v4)
    {
      v6 = *(uint64_t (**)(_QWORD, _QWORD, unint64_t))(v5 + 40);
      if (!v6)
        return 4294967266;
      result = v6(a1[31], a1[23], v4);
      *(_QWORD *)v5 += v4;
    }
    else
    {
      result = 0;
    }
    v2 -= v4;
    if ((result & 0x80000000) != 0)
      return result;
  }
  return 0;
}

uint64_t archive_write_open2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t (*v18)(uint64_t);

  if (sub_1DB6E0594((int *)a1, -1329217314, 1, "archive_write_open", a5, a6, a7, a8) == -30)
    return 4294967266;
  archive_clear_error(a1);
  *(_QWORD *)(a1 + 200) = a3;
  *(_QWORD *)(a1 + 208) = a4;
  *(_QWORD *)(a1 + 216) = a5;
  *(_QWORD *)(a1 + 224) = a6;
  *(_QWORD *)(a1 + 232) = a2;
  v14 = sub_1DB7321E4(a1);
  if (!v14)
    return 4294967266;
  v14[4] = sub_1DB7324B0;
  v14[5] = sub_1DB732600;
  v14[6] = sub_1DB732794;
  v14[7] = sub_1DB7328A8;
  v15 = sub_1DB732EAC(*(_QWORD *)(a1 + 248));
  if ((int)v15 > -21)
  {
    *(_DWORD *)(a1 + 4) = 2;
    v18 = *(uint64_t (**)(uint64_t))(a1 + 280);
    if (v18)
      return v18(a1);
    return v15;
  }
  v16 = sub_1DB732908(a1);
  sub_1DB732988(a1);
  if (v16 >= (int)v15)
    return v15;
  else
    return v16;
}

uint64_t sub_1DB7324B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  int v16;
  size_t v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t (*v21)(_QWORD, _QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v29;

  v9 = *(_QWORD *)(a1 + 8);
  if (sub_1DB6E0594((int *)v9, -1329217314, 0x7FFF, "archive_write_get_bytes_per_block", a5, a6, a7, a8) == -30)
    v14 = -30;
  else
    v14 = *(_DWORD *)(v9 + 240);
  *(_DWORD *)(a1 + 84) = v14;
  v15 = *(int **)(a1 + 8);
  if (sub_1DB6E0594(v15, -1329217314, 0x7FFF, "archive_write_get_bytes_in_last_block", v10, v11, v12, v13) == -30)v16 = -30;
  else
    v16 = v15[61];
  *(_DWORD *)(a1 + 88) = v16;
  v17 = *(int *)(a1 + 84);
  v18 = malloc_type_calloc(1uLL, 0x20uLL, 0x1010040F32E1FD2uLL);
  v19 = malloc_type_malloc(v17, 0xC59FF4uLL);
  v20 = v19;
  if (v18 && v19)
  {
    *((_QWORD *)v18 + 2) = v19;
    *((_QWORD *)v18 + 3) = v19;
    *(_QWORD *)v18 = v17;
    *((_QWORD *)v18 + 1) = v17;
    *(_QWORD *)(a1 + 64) = v18;
    v21 = *(uint64_t (**)(_QWORD, _QWORD))(v9 + 200);
    if (v21)
    {
      v22 = v21(*(_QWORD *)(a1 + 8), *(_QWORD *)(v9 + 232));
      if ((_DWORD)v22)
      {
        free(*((void **)v18 + 2));
        free(v18);
        *(_QWORD *)(a1 + 64) = 0;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    free(v18);
    free(v20);
    archive_set_error(*(_DWORD **)(a1 + 8), 12, "Can't allocate data for output buffering", v23, v24, v25, v26, v27, v29);
    return 4294967266;
  }
  return v22;
}

uint64_t sub_1DB732600(uint64_t a1, char *__src, uint64_t __n)
{
  int64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  BOOL v22;
  char *v23;

  v3 = __n;
  v4 = __src;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)v6;
  if (!*(_QWORD *)v6)
  {
    if (__n >= 1)
    {
      while (1)
      {
        v21 = (*(uint64_t (**)(uint64_t, _QWORD, char *, int64_t))(v5 + 208))(v5, *(_QWORD *)(v5 + 232), v4, v3);
        if (v21 < 1)
          break;
        v4 += v21;
        v22 = v3 <= v21;
        v3 -= v21;
        if (v22)
          return 0;
      }
      return 4294967266;
    }
    return 0;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if (v8 >= v7)
    goto LABEL_17;
  v9 = v8 >= __n ? __n : *(_QWORD *)(v6 + 8);
  memcpy(*(void **)(v6 + 24), __src, v9);
  *(_QWORD *)(v6 + 24) += v9;
  v3 -= v9;
  v4 += v9;
  v7 = *(_QWORD *)v6;
  v10 = *(_QWORD *)(v6 + 8) - v9;
  *(_QWORD *)(v6 + 8) = v10;
  if (v10)
  {
LABEL_17:
    while (v3 >= v7)
    {
      v19 = (*(uint64_t (**)(uint64_t, _QWORD, char *, unint64_t))(v5 + 208))(v5, *(_QWORD *)(v5 + 232), v4, v7);
      if (v19 < 1)
        return 4294967266;
      v4 += v19;
      v3 -= v19;
      v7 = *(_QWORD *)v6;
    }
    if (v3 >= 1)
    {
      memcpy(*(void **)(v6 + 24), v4, v3);
      result = 0;
      *(_QWORD *)(v6 + 24) += v3;
      *(_QWORD *)(v6 + 8) -= v3;
      return result;
    }
    return 0;
  }
  if (!v7)
  {
LABEL_14:
    *(_QWORD *)(v6 + 24) = *(_QWORD *)(v6 + 16);
    *(_QWORD *)(v6 + 8) = v7;
    goto LABEL_17;
  }
  v11 = *(_QWORD *)(v6 + 16);
  while (1)
  {
    v12 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v5 + 208))(v5, *(_QWORD *)(v5 + 232), v11, v7);
    if (v12 < 1)
      return 4294967266;
    v18 = v7 >= v12;
    v7 -= v12;
    if (!v18)
      break;
    v11 += v12;
    if (!v7)
    {
      v7 = *(_QWORD *)v6;
      goto LABEL_14;
    }
  }
  archive_set_error((_DWORD *)v5, -1, "write overrun", v13, v14, v15, v16, v17, v23);
  return 4294967266;
}

uint64_t sub_1DB732794(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  void (*v18)(uint64_t, _QWORD);
  char *v20;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(void **)(a1 + 64);
  v4 = (void *)*((_QWORD *)v3 + 3);
  if (v4 == *((void **)v3 + 2))
  {
LABEL_16:
    v5 = 0;
  }
  else
  {
    v5 = *(_QWORD *)v3 - *((_QWORD *)v3 + 1);
    v6 = *(unsigned int *)(v2 + 244);
    if ((int)v6 <= 0)
    {
      v8 = *(int *)(v2 + 240);
      v7 = v8;
    }
    else
    {
      v7 = (v5 + v6 - 1) / v6 * v6;
      v8 = *(int *)(v2 + 240);
    }
    if (v7 >= v8)
      v9 = v8;
    else
      v9 = v7;
    if (v9 > v5)
    {
      bzero(v4, v9 - v5);
      v5 = v9;
    }
    if (v5)
    {
      v10 = *((_QWORD *)v3 + 2);
      while (1)
      {
        v11 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 208))(v2, *(_QWORD *)(v2 + 232), v10, v5);
        if (v11 < 1)
          break;
        v17 = v5 >= (unint64_t)v11;
        v5 -= v11;
        if (!v17)
        {
          archive_set_error((_DWORD *)v2, -1, "write overrun", v12, v13, v14, v15, v16, v20);
          break;
        }
        v10 += v11;
        if (!v5)
          goto LABEL_16;
      }
      v5 = 4294967266;
    }
  }
  v18 = *(void (**)(uint64_t, _QWORD))(v2 + 216);
  if (v18)
    v18(v2, *(_QWORD *)(v2 + 232));
  free(*((void **)v3 + 2));
  free(v3);
  *(_DWORD *)(a1 + 92) = 4;
  return v5;
}

uint64_t sub_1DB7328A8(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  void *v3;
  size_t v4;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(void (**)(_QWORD, _QWORD))(v1 + 224);
  if (v2)
    v2(*(_QWORD *)(a1 + 8), *(_QWORD *)(v1 + 232));
  *(_QWORD *)(v1 + 232) = 0;
  v3 = *(void **)(v1 + 336);
  if (v3)
  {
    v4 = strlen(*(const char **)(v1 + 336));
    bzero(v3, v4);
    free(*(void **)(v1 + 336));
    *(_QWORD *)(v1 + 336) = 0;
  }
  return 0;
}

uint64_t sub_1DB732908(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  int v4;
  int v5;

  v1 = *(_QWORD *)(a1 + 248);
  if (!v1)
    return 0;
  v2 = 0;
  do
  {
    if (*(_DWORD *)(v1 + 92) == 2)
    {
      v3 = *(uint64_t (**)(uint64_t))(v1 + 48);
      if (v3)
      {
        v4 = v3(v1);
        if (v4 >= (int)v2)
          v2 = v2;
        else
          v2 = v4;
        if (v4)
          v5 = 0x8000;
        else
          v5 = 4;
      }
      else
      {
        v5 = 4;
      }
      *(_DWORD *)(v1 + 92) = v5;
    }
    v1 = *(_QWORD *)(v1 + 16);
  }
  while (v1);
  return v2;
}

_QWORD *sub_1DB732988(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  void (*v4)(void);

  result = *(_QWORD **)(a1 + 248);
  if (result)
  {
    do
    {
      v3 = (_QWORD *)result[2];
      v4 = (void (*)(void))result[7];
      if (v4)
      {
        v4();
        result = *(_QWORD **)(a1 + 248);
      }
      free(result);
      *(_QWORD *)(a1 + 248) = v3;
      result = v3;
    }
    while (v3);
  }
  *(_QWORD *)(a1 + 256) = 0;
  return result;
}

uint64_t archive_write_open(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return archive_write_open2(a1, a2, a3, a4, a5, 0, a7, a8);
}

uint64_t sub_1DB7329DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  int v10;
  uint64_t (*v11)(uint64_t);
  int v12;
  uint64_t (*v13)(uint64_t);
  int v14;

  result = sub_1DB6E0594((int *)a1, -1329217314, 0xFFFF, "archive_write_close", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    result = 0;
    v10 = *(_DWORD *)(a1 + 4);
    if (v10 != 1 && v10 != 32)
    {
      archive_clear_error(a1);
      if (*(_DWORD *)(a1 + 4) == 4 && (v11 = *(uint64_t (**)(uint64_t))(a1 + 296)) != 0)
        v12 = v11(a1);
      else
        v12 = 0;
      v13 = *(uint64_t (**)(uint64_t))(a1 + 320);
      if (v13)
      {
        v14 = v13(a1);
        if (v14 < v12)
          v12 = v14;
      }
      LODWORD(result) = sub_1DB732908(a1);
      if ((int)result >= v12)
        result = v12;
      else
        result = result;
      if (*(_DWORD *)(a1 + 4) != 0x8000)
        *(_DWORD *)(a1 + 4) = 32;
    }
  }
  return result;
}

uint64_t sub_1DB732A9C(uint64_t a1, unsigned int a2)
{
  _QWORD *v2;

  if (a2 == -1)
  {
    v2 = *(_QWORD **)(a1 + 256);
  }
  else
  {
    if ((a2 & 0x80000000) != 0)
      return -1;
    v2 = *(_QWORD **)(a1 + 248);
    if (a2 && v2)
    {
      do
      {
        v2 = (_QWORD *)v2[2];
        if (a2 < 2)
          break;
        --a2;
      }
      while (v2);
    }
  }
  if (v2)
    return *v2;
  return -1;
}

uint64_t sub_1DB732AE4(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  if (a2 == -1)
  {
    v2 = *(_QWORD *)(a1 + 256);
  }
  else
  {
    if ((a2 & 0x80000000) != 0)
      return 0xFFFFFFFFLL;
    v2 = *(_QWORD *)(a1 + 248);
    if (a2 && v2)
    {
      do
      {
        v2 = *(_QWORD *)(v2 + 16);
        if (a2 < 2)
          break;
        --a2;
      }
      while (v2);
    }
  }
  if (v2)
    return *(unsigned int *)(v2 + 80);
  return 0xFFFFFFFFLL;
}

uint64_t sub_1DB732B2C(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  if (a2 == -1)
  {
    v2 = *(_QWORD *)(a1 + 256);
  }
  else
  {
    if ((a2 & 0x80000000) != 0)
      return 0;
    v2 = *(_QWORD *)(a1 + 248);
    if (a2 && v2)
    {
      do
      {
        v2 = *(_QWORD *)(v2 + 16);
        if (a2 < 2)
          break;
        --a2;
      }
      while (v2);
    }
  }
  if (v2)
    return *(_QWORD *)(v2 + 72);
  return 0;
}

uint64_t sub_1DB732B74(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 248);
  if (!v1)
    return 0;
  LODWORD(result) = 0;
  do
  {
    result = (result + 1);
    v1 = *(_QWORD *)(v1 + 16);
  }
  while (v1);
  return result;
}

uint64_t sub_1DB732B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  int v11;
  void *v12;
  size_t v13;

  if (!a1)
    return 0;
  if (sub_1DB6E0594((int *)a1, -1329217314, 0xFFFF, "archive_write_free", a5, a6, a7, a8) == -30)
    return 4294967266;
  if (*(_DWORD *)(a1 + 4) == 0x8000)
    v9 = 0;
  else
    v9 = archive_write_close(a1);
  v10 = *(uint64_t (**)(uint64_t))(a1 + 328);
  if (v10)
  {
    v11 = v10(a1);
    if (v11 >= (int)v9)
      v9 = v9;
    else
      v9 = v11;
  }
  sub_1DB732988(a1);
  free(*(void **)(a1 + 184));
  sub_1DB6E7C3C(a1 + 64);
  v12 = *(void **)(a1 + 336);
  if (v12)
  {
    v13 = strlen(*(const char **)(a1 + 336));
    bzero(v12, v13);
    free(*(void **)(a1 + 336));
  }
  *(_DWORD *)a1 = 0;
  sub_1DB6E781C(a1);
  free((void *)a1);
  return v9;
}

uint64_t sub_1DB732C7C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;

  if (sub_1DB6E0594((int *)a1, -1329217314, 6, "archive_write_header", a5, a6, a7, a8) == -30)
    return 4294967266;
  archive_clear_error(a1);
  if (!*(_QWORD *)(a1 + 304))
  {
    archive_set_error((_DWORD *)a1, -1, "Format must be set before you can write to an archive.", v10, v11, v12, v13, v14, v23);
LABEL_6:
    *(_DWORD *)(a1 + 4) = 0x8000;
    return 4294967266;
  }
  v15 = archive_write_finish_entry(a1);
  v16 = v15;
  if ((_DWORD)v15 == -30)
  {
    *(_DWORD *)(a1 + 4) = 0x8000;
    return v16;
  }
  if ((v15 & 0x80000000) != 0 && (_DWORD)v15 != -20)
    return v16;
  if (*(_DWORD *)(a1 + 160)
    && archive_entry_dev_is_set((uint64_t)a2)
    && archive_entry_ino_is_set((uint64_t)a2)
    && archive_entry_dev(a2) == *(_DWORD *)(a1 + 168)
    && archive_entry_ino64((uint64_t)a2) == *(_QWORD *)(a1 + 176))
  {
    archive_set_error((_DWORD *)a1, 0, "Can't add archive to itself", v18, v19, v20, v21, v22, v23);
    return 4294967271;
  }
  result = (*(uint64_t (**)(uint64_t, _DWORD *))(a1 + 304))(a1, a2);
  if ((_DWORD)result == -25)
    return result;
  if ((_DWORD)result == -30)
    goto LABEL_6;
  if ((int)result >= (int)v16)
    result = v16;
  else
    result = result;
  *(_DWORD *)(a1 + 4) = 4;
  return result;
}

uint64_t sub_1DB732DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t (*v10)(uint64_t);

  result = sub_1DB6E0594((int *)a1, -1329217314, 6, "archive_write_finish_entry", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    if ((*(_BYTE *)(a1 + 4) & 4) != 0 && (v10 = *(uint64_t (**)(uint64_t))(a1 + 296)) != 0)
      result = v10(a1);
    else
      result = 0;
    *(_DWORD *)(a1 + 4) = 2;
  }
  return result;
}

uint64_t sub_1DB732E28(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (sub_1DB6E0594((int *)a1, -1329217314, 4, "archive_write_data", a5, a6, a7, a8) == -30)
    return -30;
  if (a3 >= 0x7FFFFFFF)
    a3 = 0x7FFFFFFFLL;
  archive_clear_error(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(a1 + 312))(a1, a2, a3);
}

uint64_t sub_1DB732EAC(uint64_t a1)
{
  uint64_t result;
  uint64_t (*v3)(uint64_t);
  int v4;

  if (!*(_QWORD *)(a1 + 16) || (result = sub_1DB732EAC(), !(_DWORD)result))
  {
    if (*(_DWORD *)(a1 + 92) == 1)
    {
      v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
      v4 = 2;
      if (v3)
      {
        result = v3(a1);
        if ((_DWORD)result)
          v4 = 0x8000;
        else
          v4 = 2;
      }
      else
      {
        result = 0;
      }
      *(_DWORD *)(a1 + 92) = v4;
    }
    else
    {
      return 4294967266;
    }
  }
  return result;
}

uint64_t archive_write_add_filter_zstd(int *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;

  v2 = sub_1DB7321E4((uint64_t)a1);
  result = sub_1DB6E0594(a1, -1329217314, 1, "archive_write_add_filter_zstd", v3, v4, v5, v6);
  if ((_DWORD)result != -30)
  {
    v8 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040D5A9D86FuLL);
    if (v8)
    {
      v14 = v8;
      v2[3] = sub_1DB7330F8;
      v2[4] = sub_1DB733018;
      v2[6] = sub_1DB7331D4;
      v2[7] = sub_1DB7331E0;
      *((_DWORD *)v2 + 20) = 14;
      v2[8] = v8;
      v2[9] = "zstd";
      *v8 = 3;
      v15 = sub_1DB6EBA88("zstd");
      v14[1] = v15;
      if (v15)
      {
        archive_set_error(a1, -1, "Using external zstd program", v16, v17, v18, v19, v20, v21);
        return 4294967276;
      }
      free(v14);
    }
    archive_set_error(a1, 12, "Out of memory", v9, v10, v11, v12, v13, v21);
    return 4294967266;
  }
  return result;
}

uint64_t sub_1DB733018(uint64_t a1)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v12[3];
  uint64_t v13[3];

  v2 = *(unsigned int **)(a1 + 64);
  memset(v13, 0, sizeof(v13));
  sub_1DB6E323C(v13, "zstd --no-check", 0xFuLL);
  v9 = (char *)*v2;
  memset(v12, 0, sizeof(v12));
  if ((v9 & 0x80000000) != 0)
    sub_1DB7303C0(v12, " --fast=%d", v3, v4, v5, v6, v7, v8, (char *)-(int)v9);
  else
    sub_1DB7303C0(v12, " -%d", v3, v4, v5, v6, v7, v8, v9);
  sub_1DB6E4384(v13, (uint64_t)v12);
  sub_1DB6E7C3C((uint64_t)v12);
  if ((int)*v2 >= 20)
    sub_1DB72CE50(v13, " --ultra");
  *(_QWORD *)(a1 + 40) = sub_1DB733218;
  v10 = sub_1DB6EBB98(a1, *((_QWORD *)v2 + 1), (char *)v13[0]);
  sub_1DB6E7C3C((uint64_t)v13);
  return v10;
}

uint64_t sub_1DB7330F8(uint64_t a1, char *__s1, const char *a3)
{
  int *v4;
  uint64_t result;
  int v6;
  size_t v7;
  size_t v8;
  int v9;
  unsigned __int8 *v10;
  int v11;

  v4 = *(int **)(a1 + 64);
  if (strcmp(__s1, "compression-level"))
    return 4294967276;
  v6 = atoi(a3);
  v7 = strlen(a3);
  if (!v7)
    return 4294967276;
  v8 = v7 - 1;
  if (v7 != 1)
  {
    v9 = *(unsigned __int8 *)a3;
    if ((v9 - 48) < 0xA || v9 == 45 || v9 == 43)
    {
      v10 = (unsigned __int8 *)(a3 + 1);
      while (1)
      {
        v11 = *v10++;
        if ((v11 - 48) >= 0xA)
          break;
        if (!--v8)
        {
          if ((v6 - 23) < 0xFFFFFF86)
            return 4294967276;
          goto LABEL_16;
        }
      }
    }
    return 4294967276;
  }
  result = 4294967276;
  if (*(unsigned __int8 *)a3 - 58 >= 0xFFFFFFF6 && (v6 - 23) >= 0xFFFFFF86)
  {
LABEL_16:
    result = 0;
    *v4 = v6;
  }
  return result;
}

uint64_t sub_1DB7331D4(uint64_t a1)
{
  return sub_1DB6EBE0C(a1, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8));
}

uint64_t sub_1DB7331E0(uint64_t a1)
{
  void ***v2;

  v2 = *(void ****)(a1 + 64);
  sub_1DB6EBB5C(v2[1]);
  free(v2);
  *(_QWORD *)(a1 + 64) = 0;
  return 0;
}

uint64_t sub_1DB733218(uint64_t a1, char *__buf, uint64_t __nbyte, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1DB6EBC40(a1, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8), __buf, __nbyte, a5, a6, a7, a8);
}

uint64_t sub_1DB73322C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v4)(uint64_t, uint64_t);
  int v5;

  v2 = *a1;
  if (*a1)
  {
    v4 = *(uint64_t (**)(uint64_t, uint64_t))(a1[1] + 8);
    do
    {
      v5 = v4(v2, a2);
      if (!v5)
        break;
      v2 = *(_QWORD *)(v2 + 8 * (v5 > 0));
    }
    while (v2);
  }
  return v2;
}

uint64_t sub_1DB733284(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  int v6;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = 0;
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1[1] + 8);
  while (1)
  {
    v6 = v5(v2, a2);
    if (!v6)
      break;
    if (v6 < 0)
      v4 = v2;
    v2 = *(_QWORD *)(v2 + 8 * (v6 > 0));
    if (!v2)
      return v4;
  }
  return v2;
}

uint64_t sub_1DB7332F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  int v6;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = 0;
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1[1] + 8);
  while (1)
  {
    v6 = v5(v2, a2);
    if (!v6)
      break;
    if (v6 > 0)
      v4 = v2;
    v2 = *(_QWORD *)(v2 + 8 * (v6 > 0));
    if (!v2)
      return v4;
  }
  return v2;
}

uint64_t sub_1DB733364(unint64_t a1, _QWORD *a2)
{
  _QWORD **v4;
  uint64_t (*v5)(_QWORD **, _QWORD *);
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _BOOL8 v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *(_QWORD ***)a1;
  if (*(_QWORD *)a1)
  {
    v5 = **(uint64_t (***)(_QWORD **, _QWORD *))(a1 + 8);
    while (1)
    {
      v6 = (unint64_t)v4;
      result = v5(v4, a2);
      if (!(_DWORD)result)
        break;
      v4 = *(_QWORD ***)(v6 + 8 * ((int)result > 0));
      if (!v4)
      {
        v8 = v6 & 0xFFFFFFFFFFFFFFFDLL;
        LODWORD(v4) = (int)result > 0;
        if ((int)result <= 0)
          goto LABEL_8;
        v9 = 2;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v8 = a1 & 0xFFFFFFFFFFFFFFFDLL;
    v6 = a1;
LABEL_8:
    v9 = 0;
LABEL_9:
    v10 = v9 | v8;
    if (v6 == a1)
    {
      *a2 = *(_QWORD *)(a1 + 8 * v4);
      a2[1] = *(_QWORD *)(a1 + 8 * v4);
      a2[2] = v10 & 0xFFFFFFFFFFFFFFFELL;
      *(_QWORD *)(a1 + 8 * v4) = a2;
    }
    else
    {
      *a2 = *(_QWORD *)(v6 + 8 * v4);
      v11 = *(_QWORD **)(v6 + 8 * v4);
      a2[2] = v10 | 1;
      v12 = *(_QWORD **)(v6 + 16);
      a2[1] = v11;
      *(_QWORD *)(v6 + 8 * v4) = a2;
      if ((v12 & 1) != 0)
      {
        v13 = v6 & 0xFFFFFFFFFFFFFFFCLL;
        v14 = (_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFCLL) + 16);
        v15 = *v14 & 0xFFFFFFFFFFFFFFFCLL;
        v16 = *(_QWORD *)(v15 + 8);
        v17 = v16 == v13;
        v18 = v16 != v13;
        v19 = *(_QWORD *)(v15 + 8 * v18);
        if (v19 && (v22 = *(_QWORD *)(v19 + 16), v20 = (unint64_t *)(v19 + 16), v21 = v22, (v22 & 1) != 0))
        {
          v23 = *(_QWORD ***)a1;
          while (1)
          {
            *v20 = v21 & 0xFFFFFFFFFFFFFFFELL;
            *v14 &= ~1uLL;
            if (v23 == (_QWORD **)v15)
              break;
            a2 = (_QWORD *)v15;
            v24 = *(_QWORD *)(v15 + 16);
            *(_QWORD *)(v15 + 16) = v24 | 1;
            v13 = v24 & 0xFFFFFFFFFFFFFFFCLL;
            if ((v24 & 0xFFFFFFFFFFFFFFFCLL) == 0)
              break;
            v14 = (_QWORD *)(v13 + 16);
            v25 = *(_QWORD *)(v13 + 16);
            if ((v25 & 1) == 0)
              break;
            v15 = v25 & 0xFFFFFFFFFFFFFFFCLL;
            v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFFFCLL) + 8);
            v17 = v26 == v13;
            v18 = v26 != v13;
            v27 = *(_QWORD *)(v15 + 8 * v18);
            if (v27)
            {
              v28 = *(_QWORD *)(v27 + 16);
              v20 = (unint64_t *)(v27 + 16);
              v21 = v28;
              if ((v28 & 1) != 0)
                continue;
            }
            goto LABEL_13;
          }
        }
        else
        {
LABEL_13:
          if (a2 == *(_QWORD **)(v13 + 8 * v18))
            sub_1DB7336FC(v13, v18);
          sub_1DB7336FC(v15, v17);
          *(_QWORD *)(*(_QWORD *)a1 + 16) &= ~1uLL;
        }
      }
    }
    return 1;
  }
  return result;
}

unint64_t sub_1DB7334FC(unint64_t result, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  unint64_t v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v3 = result;
  if (!a2)
  {
    v14 = MEMORY[0x10];
    goto LABEL_18;
  }
  v4 = a2[1];
  if (!*a2)
  {
    if (v4)
      goto LABEL_21;
    v14 = a2[2];
    if ((v14 & 1) != 0)
    {
      *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFFCLL) + 8 * ((v14 >> 1) & 1)) = 0;
      return result;
    }
LABEL_18:
    v15 = *(_QWORD **)result;
    LODWORD(v6) = (v14 >> 1) & 1;
    v8 = v14 & 0xFFFFFFFFFFFFFFFCLL;
    *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFFCLL) + 8 * v6) = 0;
    if (v15 == a2)
      return result;
    return (unint64_t)sub_1DB73379C((_QWORD *)result, v8, v6);
  }
  if (!v4)
  {
LABEL_21:
    v16 = a2[2];
    v17 = a2[*a2 == 0];
    *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFFFCLL) + 8 * ((v16 >> 1) & 1)) = v17;
    *(_QWORD *)(v17 + 16) = v16;
    return result;
  }
  result = sub_1DB733688((unint64_t *)result, (unint64_t)a2, ((*((_DWORD *)a2 + 4) >> 1) & 1) == 0);
  v5 = *(_QWORD *)(result + 16);
  v6 = (v5 >> 1) & 1;
  v7 = (v5 & 2) == 0;
  v8 = v5 & 0xFFFFFFFFFFFFFFFCLL;
  v10 = (v5 & 1) == 0 || result == 0;
  if ((_QWORD *)v8 == a2)
    v11 = (v5 >> 1) & 1;
  else
    v11 = (v5 & 2) == 0;
  v12 = *(_QWORD *)(result + 8 * v11);
  if (v12 && (v13 = *(_QWORD *)(v12 + 16), (v13 & 1) != 0))
  {
    *(_QWORD *)(v12 + 16) = v13 & 0xFFFFFFFFFFFFFFFELL;
    if ((_QWORD *)v8 == a2)
    {
      v10 = 0;
LABEL_28:
      v8 = result;
      goto LABEL_29;
    }
    v10 = 0;
    *(_QWORD *)(v12 + 16) = v5 & 0xFFFFFFFFFFFFFFFELL;
  }
  else if ((_QWORD *)v8 == a2)
  {
    goto LABEL_28;
  }
  *(_QWORD *)(v8 + 8 * v6) = v12;
  v18 = a2[(v5 & 2) == 0];
  *(_QWORD *)(result + 8 * ((v5 & 2) == 0)) = v18;
  *(_QWORD *)(v18 + 16) = *(_QWORD *)(v18 + 16) & 3 | result;
  v7 = (v5 >> 1) & 1;
LABEL_29:
  v19 = a2[v7];
  *(_QWORD *)(result + 8 * v7) = v19;
  *(_QWORD *)(v19 + 16) = *(_QWORD *)(v19 + 16) & 3 | result;
  v20 = a2[2];
  *(_QWORD *)(result + 16) = *(_QWORD *)(result + 16) & 0xFFFFFFFFFFFFFFFCLL | v20 & 3;
  v21 = a2[2] & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)(result + 16) = v21 | v20 & 3;
  *(_QWORD *)(v21 + 8 * ((v20 >> 1) & 1)) = result;
  if (!v10)
    return result;
  result = v3;
  return (unint64_t)sub_1DB73379C((_QWORD *)result, v8, v6);
}

unint64_t sub_1DB733688(unint64_t *a1, unint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;

  if (!a2)
  {
    v5 = *a1;
    if (*a1)
    {
      do
      {
        a2 = v5;
        v5 = *(_QWORD *)(v5 + 8 * a3);
      }
      while (v5);
      return a2;
    }
    return 0;
  }
  v3 = a3 ^ 1;
  v4 = *(_QWORD *)(a2 + 8 * a3);
  if (v4)
  {
    do
    {
      a2 = v4;
      v4 = *(_QWORD *)(v4 + 8 * v3);
    }
    while (v4);
    return a2;
  }
  if (*a1 == a2)
    return 0;
  while (1)
  {
    v6 = *(_QWORD *)(a2 + 16);
    a2 = v6 & 0xFFFFFFFFFFFFFFFCLL;
    if ((_DWORD)v3 == ((v6 >> 1) & 1))
      break;
    if (a2)
      v7 = *a1 == a2;
    else
      v7 = 1;
    if (v7)
      return 0;
  }
  return a2;
}

uint64_t sub_1DB7336FC(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(result + 8 * a2);
  if (v2)
  {
    v3 = *(_QWORD *)(result + 16);
    *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFFCLL) + 8 * ((v3 >> 1) & 1)) = v2;
    *(_QWORD *)(result + 8 * a2) = *(_QWORD *)(v2 + 8 * (a2 ^ 1));
    *(_QWORD *)(v2 + 8 * (a2 ^ 1)) = result;
    *(_QWORD *)(v2 + 16) = v3 & 0xFFFFFFFFFFFFFFFCLL | *(_QWORD *)(v2 + 16) & 3;
    v4 = *(_QWORD *)(result + 16) & 3 | v2;
    *(_QWORD *)(result + 16) = v4;
    v5 = *(_QWORD *)(v2 + 16);
    v6 = (v5 ^ v4) & 3;
    *(_QWORD *)(v2 + 16) = v6 ^ v5;
    *(_QWORD *)(result + 16) = (*(_QWORD *)(result + 16) ^ v6) & 0xFFFFFFFFFFFFFFFDLL | (2 * (a2 != 1));
    v7 = *(_QWORD *)(result + 8 * a2);
    if (v7)
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v7 + 16) & 1 | result & 0xFFFFFFFFFFFFFFFDLL | (2 * (a2 != 0));
  }
  return result;
}

_QWORD *sub_1DB73379C(_QWORD *result, unint64_t a2, unsigned int a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = result;
  while (1)
  {
    v6 = *(_QWORD *)(a2 + 8 * a3);
    if (v6)
    {
      if ((*(_BYTE *)(v6 + 16) & 1) != 0)
        return result;
    }
    v7 = a3 ^ 1;
    result = *(_QWORD **)(a2 + 8 * v7);
    if (!result)
      return result;
    v8 = *(_QWORD *)(a2 + 16);
    if ((v8 & 1) != 0)
    {
      v12 = (_QWORD *)(a2 + 8 * v7);
      goto LABEL_17;
    }
    if (*result && (*(_BYTE *)(*result + 16) & 1) != 0 || (v9 = result[1]) != 0 && (*(_BYTE *)(v9 + 16) & 1) != 0)
    {
      v12 = (_QWORD *)(a2 + 8 * v7);
LABEL_23:
      v14 = result[v7];
      if (v14 && (*(_BYTE *)(v14 + 16) & 1) != 0
        || (result = (_QWORD *)sub_1DB7336FC((uint64_t)result, a3), (v14 = *(_QWORD *)(*v12 + 8 * v7)) != 0))
      {
        *(_QWORD *)(v14 + 16) &= ~1uLL;
        return (_QWORD *)sub_1DB7336FC(a2, a3 ^ 1);
      }
      return result;
    }
    v10 = result[2];
    if ((v10 & 1) != 0)
    {
      v12 = (_QWORD *)(a2 + 8 * v7);
      sub_1DB7336FC(a2, a3 ^ 1);
      result = (_QWORD *)*v12;
      if (!*v12)
        return result;
      v8 = *(_QWORD *)(a2 + 16);
      if ((v8 & 1) == 0)
        goto LABEL_23;
LABEL_17:
      if ((result[2] & 1) == 0 && (!*result || (*(_BYTE *)(*result + 16) & 1) == 0))
      {
        v13 = result[1];
        if (!v13 || (*(_BYTE *)(v13 + 16) & 1) == 0)
        {
          *(_QWORD *)(a2 + 16) = v8 & 0xFFFFFFFFFFFFFFFELL;
          result[2] |= 1uLL;
          return result;
        }
      }
      goto LABEL_23;
    }
    result[2] = v10 | 1;
    if (*v5 == a2)
      return result;
    v11 = *(_QWORD *)(a2 + 16);
    a3 = (v11 >> 1) & 1;
    a2 = v11 & 0xFFFFFFFFFFFFFFFCLL;
  }
}

uint64_t sub_1DB7338F0(CC_MD5_CTX *a1)
{
  CC_MD5_Init(a1);
  return 0;
}

uint64_t sub_1DB733908(CC_MD5_CTX *a1, const void *a2, CC_LONG a3)
{
  CC_MD5_Update(a1, a2, a3);
  return 0;
}

uint64_t sub_1DB733920(CC_MD5_CTX *c, unsigned __int8 *md)
{
  CC_MD5_Final(md, c);
  return 0;
}

uint64_t sub_1DB733944()
{
  return 4294967271;
}

uint64_t sub_1DB73394C()
{
  return 4294967271;
}

uint64_t sub_1DB733954()
{
  return 4294967271;
}

uint64_t sub_1DB73395C(CC_SHA1_CTX *a1)
{
  CC_SHA1_Init(a1);
  return 0;
}

uint64_t sub_1DB733974(CC_SHA1_CTX *a1, const void *a2, CC_LONG a3)
{
  CC_SHA1_Update(a1, a2, a3);
  return 0;
}

uint64_t sub_1DB73398C(CC_SHA1_CTX *c, unsigned __int8 *md)
{
  CC_SHA1_Final(md, c);
  return 0;
}

uint64_t sub_1DB7339B0(CC_SHA256_CTX *a1)
{
  CC_SHA256_Init(a1);
  return 0;
}

uint64_t sub_1DB7339C8(CC_SHA256_CTX *a1, const void *a2, CC_LONG a3)
{
  CC_SHA256_Update(a1, a2, a3);
  return 0;
}

uint64_t sub_1DB7339E0(CC_SHA256_CTX *c, unsigned __int8 *md)
{
  CC_SHA256_Final(md, c);
  return 0;
}

uint64_t sub_1DB733A04(CC_SHA512_CTX *a1)
{
  CC_SHA384_Init(a1);
  return 0;
}

uint64_t sub_1DB733A1C(CC_SHA512_CTX *a1, const void *a2, CC_LONG a3)
{
  CC_SHA384_Update(a1, a2, a3);
  return 0;
}

uint64_t sub_1DB733A34(CC_SHA512_CTX *c, unsigned __int8 *md)
{
  CC_SHA384_Final(md, c);
  return 0;
}

uint64_t sub_1DB733A58(CC_SHA512_CTX *a1)
{
  CC_SHA512_Init(a1);
  return 0;
}

uint64_t sub_1DB733A70(CC_SHA512_CTX *a1, const void *a2, CC_LONG a3)
{
  CC_SHA512_Update(a1, a2, a3);
  return 0;
}

uint64_t sub_1DB733A88(CC_SHA512_CTX *c, unsigned __int8 *md)
{
  CC_SHA512_Final(md, c);
  return 0;
}

uint64_t sub_1DB733AAC(uint64_t a1, char *__s1, uint64_t gr_gid)
{
  int v5;
  signed int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  size_t v16;
  group *v18;
  group v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (__s1)
  {
    LOBYTE(v5) = *__s1;
    if (*__s1)
    {
      v7 = 0;
      v8 = 1;
      do
      {
        v9 = 16 * v7 + (char)v5;
        if ((v9 & 0xF0000000) != 0)
          v7 = v9 & 0xFFFFFFF ^ ((v9 & 0xF0000000) >> 24);
        else
          v7 = v9;
        v5 = __s1[v8++];
      }
      while (v5);
      v10 = ((unint64_t)v7 * (unsigned __int128)0x204081020408103uLL) >> 64;
      v11 = -127 * ((v10 + ((unint64_t)(v7 - v10) >> 1)) >> 6) + v7;
      v12 = a1 + 16 * v11;
      v13 = *(char **)v12;
      if (*(_QWORD *)v12 && *(_DWORD *)(v12 + 8) == v7 && !strcmp(__s1, *(const char **)v12))
      {
        return *(unsigned int *)(a1 + 16 * v11 + 12);
      }
      else
      {
        free(v13);
        v14 = 0;
        *(_QWORD *)v12 = strdup(__s1);
        *(_DWORD *)(v12 + 8) = v7;
        memset(&v19, 0, sizeof(v19));
        v15 = &v20;
        v16 = 128;
        do
        {
          v18 = &v19;
          if (getgrnam_r(__s1, &v19, v15, v16, &v18) != 34)
            break;
          v16 *= 2;
          free(v14);
          v15 = (char *)malloc_type_malloc(v16, 0x94A1068EuLL);
          v14 = v15;
        }
        while (v15);
        if (v18)
          gr_gid = v18->gr_gid;
        free(v14);
        *(_DWORD *)(a1 + 16 * v11 + 12) = gr_gid;
      }
    }
  }
  return gr_gid;
}

uint64_t sub_1DB733C4C(uint64_t a1, char *__s1, uint64_t pw_uid)
{
  int v5;
  signed int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  size_t v16;
  passwd *v18;
  passwd v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (__s1)
  {
    LOBYTE(v5) = *__s1;
    if (*__s1)
    {
      v7 = 0;
      v8 = 1;
      do
      {
        v9 = 16 * v7 + (char)v5;
        if ((v9 & 0xF0000000) != 0)
          v7 = v9 & 0xFFFFFFF ^ ((v9 & 0xF0000000) >> 24);
        else
          v7 = v9;
        v5 = __s1[v8++];
      }
      while (v5);
      v10 = ((unint64_t)v7 * (unsigned __int128)0x204081020408103uLL) >> 64;
      v11 = -127 * ((v10 + ((unint64_t)(v7 - v10) >> 1)) >> 6) + v7;
      v12 = a1 + 16 * v11;
      v13 = *(char **)v12;
      if (*(_QWORD *)v12 && *(_DWORD *)(v12 + 8) == v7 && !strcmp(__s1, *(const char **)v12))
      {
        return *(unsigned int *)(a1 + 16 * v11 + 12);
      }
      else
      {
        free(v13);
        v14 = 0;
        *(_QWORD *)v12 = strdup(__s1);
        *(_DWORD *)(v12 + 8) = v7;
        v15 = &v20;
        v16 = 128;
        memset(&v19, 0, sizeof(v19));
        do
        {
          v18 = &v19;
          if (getpwnam_r(__s1, &v19, v15, v16, &v18) != 34)
            break;
          v16 *= 2;
          free(v14);
          v15 = (char *)malloc_type_malloc(v16, 0x61D3C6B8uLL);
          v14 = v15;
        }
        while (v15);
        if (v18)
          pw_uid = v18->pw_uid;
        free(v14);
        *(_DWORD *)(a1 + 16 * v11 + 12) = pw_uid;
      }
    }
  }
  return pw_uid;
}

uint64_t archive_write_add_filter_lz4(int *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;

  v2 = sub_1DB7321E4((uint64_t)a1);
  result = sub_1DB6E0594(a1, -1329217314, 1, "archive_write_add_filter_lz4", v3, v4, v5, v6);
  if ((_DWORD)result != -30)
  {
    v8 = malloc_type_calloc(1uLL, 0x10uLL, 0x10200402F088779uLL);
    if (v8)
    {
      v14 = v8;
      *v8 = 1;
      *((_WORD *)v8 + 2) = v8[1] & 0xFC01 | 0x3A6;
      v2[6] = sub_1DB734078;
      v2[7] = sub_1DB734084;
      v2[3] = sub_1DB733F0C;
      v2[4] = sub_1DB7340B4;
      *((_DWORD *)v2 + 20) = 13;
      v2[8] = v8;
      v2[9] = "lz4";
      v15 = sub_1DB6EBA88("lz4");
      v14[1] = v15;
      if (v15)
      {
        *(_DWORD *)v14 = 0;
        archive_set_error(a1, -1, "Using external lz4 program", v16, v17, v18, v19, v20, v21);
        return 4294967276;
      }
      free(v14);
    }
    archive_set_error(a1, 12, "Out of memory", v9, v10, v11, v12, v13, v21);
    return 4294967266;
  }
  return result;
}

uint64_t sub_1DB733F0C(uint64_t a1, char *__s1, unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  __int16 v13;
  int v14;
  char *v15;

  v6 = *(_QWORD *)(a1 + 64);
  if (strcmp(__s1, "compression-level"))
  {
    result = strcmp(__s1, "stream-checksum");
    if (!(_DWORD)result)
    {
      v13 = *(_WORD *)(v6 + 4) & 0xFFDF | (32 * (a3 != 0));
      goto LABEL_14;
    }
    result = strcmp(__s1, "block-checksum");
    if (!(_DWORD)result)
    {
      v13 = *(_WORD *)(v6 + 4) & 0xFFF7 | (8 * (a3 != 0));
      goto LABEL_14;
    }
    if (!strcmp(__s1, "block-size"))
    {
      if (a3 && (*a3 & 0xFC) == 0x34 && !a3[1])
      {
        result = 0;
        v13 = *(_WORD *)(v6 + 4) & 0xFC7F | ((*a3 & 7) << 7);
        goto LABEL_14;
      }
    }
    else
    {
      result = strcmp(__s1, "block-dependence");
      if (!(_DWORD)result)
      {
        v13 = *(_WORD *)(v6 + 4) & 0xFFFB | (4 * (a3 == 0));
LABEL_14:
        *(_WORD *)(v6 + 4) = v13;
        return result;
      }
    }
    return 4294967276;
  }
  if (!a3)
    return 4294967276;
  v14 = (char)*a3;
  if ((v14 - 49) > 8 || a3[1])
    return 4294967276;
  if (*a3 < 0x33u)
  {
    result = 0;
    *(_DWORD *)v6 = v14 - 48;
  }
  else
  {
    archive_set_error(*(_DWORD **)(a1 + 8), 22, "High compression not included in this build", v7, v8, v9, v10, v11, v15);
    return 4294967266;
  }
  return result;
}

uint64_t sub_1DB734078(uint64_t a1)
{
  return sub_1DB6EBE0C(a1, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8));
}

uint64_t sub_1DB734084(uint64_t a1)
{
  void ***v1;

  v1 = *(void ****)(a1 + 64);
  sub_1DB6EBB5C(v1[1]);
  free(v1);
  return 0;
}

uint64_t sub_1DB7340B4(uint64_t a1)
{
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v6[3];

  v2 = *(_QWORD *)(a1 + 64);
  memset(v6, 0, sizeof(v6));
  sub_1DB6E323C(v6, "lz4 -z -q -q", 0xCuLL);
  if (*(int *)v2 >= 1)
  {
    sub_1DB72CE50(v6, " -");
    sub_1DB72CE60(v6, *(_BYTE *)v2 + 48);
  }
  sub_1DB72CE50(v6, " -B");
  sub_1DB72CE60(v6, (*(unsigned __int16 *)(v2 + 4) >> 7) & 7 | 0x30);
  v3 = *(_WORD *)(v2 + 4);
  if ((v3 & 8) == 0)
  {
    if ((v3 & 0x20) != 0)
      goto LABEL_5;
LABEL_9:
    sub_1DB72CE50(v6, " --no-frame-crc");
    if ((*(_WORD *)(v2 + 4) & 4) != 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  sub_1DB72CE50(v6, " -BX");
  v3 = *(_WORD *)(v2 + 4);
  if ((v3 & 0x20) == 0)
    goto LABEL_9;
LABEL_5:
  if ((v3 & 4) == 0)
LABEL_6:
    sub_1DB72CE50(v6, " -BD");
LABEL_7:
  *(_QWORD *)(a1 + 40) = sub_1DB7341CC;
  v4 = sub_1DB6EBB98(a1, *(_QWORD *)(v2 + 8), (char *)v6[0]);
  sub_1DB6E7C3C((uint64_t)v6);
  return v4;
}

uint64_t sub_1DB7341CC(uint64_t a1, char *__buf, uint64_t __nbyte, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1DB6EBC40(a1, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8), __buf, __nbyte, a5, a6, a7, a8);
}

uint64_t archive_write_open_fd(_DWORD *a1, int a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;

  v4 = malloc_type_malloc(4uLL, 0x100004052888210uLL);
  if (v4)
  {
    *v4 = a2;
    return archive_write_open2((uint64_t)a1, (uint64_t)v4, (uint64_t)sub_1DB734268, (uint64_t)sub_1DB734354, 0, (uint64_t)sub_1DB7343C8, v8, v9);
  }
  else
  {
    archive_set_error(a1, 12, "No memory", v5, v6, v7, v8, v9, v11);
    return 4294967266;
  }
}

uint64_t sub_1DB734268(int *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int *v25;
  int v26;
  stat v27;

  memset(&v27, 0, sizeof(v27));
  if (fstat(*a2, &v27))
  {
    v11 = __error();
    archive_set_error(a1, *v11, "Couldn't stat fd %d", v12, v13, v14, v15, v16, (char *)*a2);
    return 4294967266;
  }
  else
  {
    if ((v27.st_mode & 0xF000) == 0x8000)
      archive_write_set_skip_file((uint64_t)a1, v27.st_dev, v27.st_ino, v6, v7, v8, v9, v10);
    if ((archive_write_get_bytes_in_last_block((uint64_t)a1, v4, v5, v6, v7, v8, v9, v10) & 0x80000000) != 0)
    {
      v24 = v27.st_mode & 0xF000;
      if (v24 == 4096 || v24 == 0x2000 || v24 == 24576 || *a2 == 1)
      {
        v25 = a1;
        v26 = 0;
      }
      else
      {
        v25 = a1;
        v26 = 1;
      }
      archive_write_set_bytes_in_last_block(v25, v26, v18, v19, v20, v21, v22, v23);
    }
    return 0;
  }
}

ssize_t sub_1DB734354(_DWORD *a1, int *a2, void *__buf, size_t __nbyte)
{
  ssize_t result;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;

  while (1)
  {
    result = write(*a2, __buf, __nbyte);
    if (result > 0)
      break;
    if (*__error() != 4)
    {
      v9 = __error();
      archive_set_error(a1, *v9, "Write error", v10, v11, v12, v13, v14, v15);
      return -1;
    }
  }
  return result;
}

uint64_t sub_1DB7343C8(int a1, void *a2)
{
  if (a2)
    free(a2);
  return 0;
}

uint64_t archive_write_set_compression_bzip2(int *a1)
{
  sub_1DB732988((uint64_t)a1);
  return archive_write_add_filter_bzip2(a1);
}

uint64_t archive_write_add_filter_bzip2(int *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  char *v15;

  v2 = sub_1DB7321E4((uint64_t)a1);
  result = sub_1DB6E0594(a1, -1329217314, 1, "archive_write_add_filter_bzip2", v3, v4, v5, v6);
  if ((_DWORD)result != -30)
  {
    v8 = malloc_type_calloc(1uLL, 0x70uLL, 0x109004012F2E243uLL);
    if (v8)
    {
      v14 = v8;
      result = 0;
      *v14 = 9;
      v2[6] = sub_1DB734548;
      v2[7] = sub_1DB7345C4;
      v2[3] = sub_1DB7344DC;
      v2[4] = sub_1DB7345FC;
      *((_DWORD *)v2 + 20) = 2;
      v2[8] = v14;
      v2[9] = "bzip2";
    }
    else
    {
      archive_set_error(a1, 12, "Out of memory", v9, v10, v11, v12, v13, v15);
      return 4294967266;
    }
  }
  return result;
}

uint64_t sub_1DB7344DC(uint64_t a1, char *__s1, char *a3)
{
  int *v4;
  int v5;
  uint64_t result;
  unsigned int v7;
  int v8;

  v4 = *(int **)(a1 + 64);
  v5 = strcmp(__s1, "compression-level");
  result = 4294967276;
  if (a3)
  {
    if (!v5)
    {
      v7 = *a3;
      if (v7 - 48 <= 9 && !a3[1])
      {
        result = 0;
        if (v7 < 0x31)
          v8 = 1;
        else
          v8 = v7 - 48;
        *v4 = v8;
      }
    }
  }
  return result;
}

uint64_t sub_1DB734548(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = sub_1DB734798(a1, v2, 1);
  if (!(_DWORD)v3)
    v3 = sub_1DB732248(*(_QWORD *)(a1 + 16), *(_QWORD *)(v2 + 96), *(_QWORD *)(v2 + 104) - *(unsigned int *)(v2 + 40));
  if (BZ2_bzCompressEnd((bz_stream *)(v2 + 8)))
  {
    archive_set_error(*(_DWORD **)(a1 + 8), 22, "Failed to clean up compressor", v4, v5, v6, v7, v8, v10);
    return 4294967266;
  }
  return v3;
}

uint64_t sub_1DB7345C4(uint64_t a1)
{
  void **v2;

  v2 = *(void ***)(a1 + 64);
  free(v2[12]);
  free(v2);
  *(_QWORD *)(a1 + 64) = 0;
  return 0;
}

uint64_t sub_1DB7345FC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  void *v10;
  _DWORD *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _DWORD *v25;
  char *v26;
  int v27;
  char *v28;

  v9 = a1[8];
  v10 = *(void **)(v9 + 96);
  if (v10)
    goto LABEL_8;
  v11 = (_DWORD *)a1[1];
  if (*v11 != -1329217314)
    goto LABEL_6;
  v12 = (int)archive_write_get_bytes_per_block((uint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  if (v12 > 0x10000)
    goto LABEL_7;
  if ((_DWORD)v12)
    v12 = 0x10000uLL / (int)v12 * (int)v12;
  else
LABEL_6:
    v12 = 0x10000;
LABEL_7:
  *(_QWORD *)(v9 + 104) = v12;
  v10 = malloc_type_malloc(v12, 0x2699716DuLL);
  *(_QWORD *)(v9 + 96) = v10;
  if (!v10)
  {
    v25 = (_DWORD *)a1[1];
    v26 = "Can't allocate data for compression buffer";
LABEL_18:
    v27 = 12;
    goto LABEL_19;
  }
LABEL_8:
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 8) = 0u;
  *(_QWORD *)(v9 + 32) = v10;
  *(_DWORD *)(v9 + 40) = *(_QWORD *)(v9 + 104);
  a1[5] = sub_1DB734758;
  result = BZ2_bzCompressInit((bz_stream *)(v9 + 8), *(_DWORD *)v9, 0, 30);
  if (!(_DWORD)result)
  {
    a1[8] = v9;
    return result;
  }
  v24 = result;
  archive_set_error((_DWORD *)a1[1], -1, "Internal error initializing compression library", v19, v20, v21, v22, v23, v28);
  switch(v24)
  {
    case -9:
      v25 = (_DWORD *)a1[1];
      v26 = "Internal error initializing compression library: mis-compiled library";
      goto LABEL_16;
    case -3:
      v25 = (_DWORD *)a1[1];
      v26 = "Internal error initializing compression library: out of memory";
      goto LABEL_18;
    case -2:
      v25 = (_DWORD *)a1[1];
      v26 = "Internal error initializing compression library: invalid setup parameter";
LABEL_16:
      v27 = -1;
LABEL_19:
      archive_set_error(v25, v27, v26, v13, v14, v15, v16, v17, v28);
      break;
  }
  return 4294967266;
}

uint64_t sub_1DB734758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(v3 + 88) += a3;
  *(_QWORD *)(v3 + 8) = a2;
  *(_DWORD *)(v3 + 16) = a3;
  if (sub_1DB734798(a1, v3, 0))
    return 4294967266;
  else
    return 0;
}

uint64_t sub_1DB734798(uint64_t a1, uint64_t a2, int a3)
{
  bz_stream *v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = (bz_stream *)(a2 + 8);
  do
  {
    while (1)
    {
      if (*(_DWORD *)(a2 + 40))
      {
        if (a3)
          goto LABEL_4;
      }
      else
      {
        if (sub_1DB732248(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 96), *(_QWORD *)(a2 + 104)))
          return 4294967266;
        v8 = *(_QWORD *)(a2 + 104);
        *(_QWORD *)(a2 + 32) = *(_QWORD *)(a2 + 96);
        *(_DWORD *)(a2 + 40) = v8;
        if (a3)
        {
LABEL_4:
          v7 = 2;
          goto LABEL_8;
        }
      }
      v7 = 0;
      result = 0;
      if (!*(_DWORD *)(a2 + 16))
        return result;
LABEL_8:
      v10 = (char *)BZ2_bzCompress(v6, v7);
      if ((_DWORD)v10 != 1)
        break;
      if (!a3 && !*(_DWORD *)(a2 + 16))
        return 0;
    }
  }
  while ((_DWORD)v10 == 3);
  if ((_DWORD)v10 == 4)
    return 0;
  archive_set_error(*(_DWORD **)(a1 + 8), 22, "Bzip2 compression failed; BZ2_bzCompress() returned %d",
    v11,
    v12,
    v13,
    v14,
    v15,
    v10);
  return 4294967266;
}

uint64_t archive_write_set_compression_gzip(int *a1)
{
  sub_1DB732988((uint64_t)a1);
  return archive_write_add_filter_gzip(a1);
}

uint64_t archive_write_add_filter_gzip(int *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  char *v15;

  v2 = sub_1DB7321E4((uint64_t)a1);
  result = sub_1DB6E0594(a1, -1329217314, 1, "archive_write_add_filter_gzip", v3, v4, v5, v6);
  if ((_DWORD)result != -30)
  {
    v8 = malloc_type_calloc(1uLL, 0x98uLL, 0x10B00405CE5B617uLL);
    if (v8)
    {
      v14 = v8;
      result = 0;
      v2[3] = sub_1DB734B90;
      v2[4] = sub_1DB73496C;
      v2[6] = sub_1DB734C24;
      v2[7] = sub_1DB734CF8;
      *((_DWORD *)v2 + 20) = 1;
      v2[8] = v14;
      v2[9] = "gzip";
      *v14 = -1;
    }
    else
    {
      archive_set_error(a1, 12, "Out of memory", v9, v10, v11, v12, v13, v15);
      return 4294967266;
    }
  }
  return result;
}

uint64_t sub_1DB73496C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _DWORD *v10;
  size_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  char v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _DWORD *v28;
  char *v29;
  int v30;
  char *v31;

  v9 = a1[8];
  if (*(_QWORD *)(v9 + 128))
    goto LABEL_8;
  v10 = (_DWORD *)a1[1];
  if (*v10 != -1329217314)
    goto LABEL_6;
  v11 = (int)archive_write_get_bytes_per_block((uint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  if (v11 > 0x10000)
    goto LABEL_7;
  if ((_DWORD)v11)
    v11 = 0x10000uLL / (int)v11 * (int)v11;
  else
LABEL_6:
    v11 = 0x10000;
LABEL_7:
  *(_QWORD *)(v9 + 136) = v11;
  v12 = malloc_type_malloc(v11, 0x9714129CuLL);
  *(_QWORD *)(v9 + 128) = v12;
  if (!v12)
  {
    v28 = (_DWORD *)a1[1];
    v29 = "Can't allocate data for compression buffer";
LABEL_24:
    v30 = 12;
    goto LABEL_25;
  }
LABEL_8:
  *(_QWORD *)(v9 + 144) = crc32(0, 0, 0);
  v18 = *(_BYTE **)(v9 + 128);
  v19 = *(_QWORD *)(v9 + 136);
  *(_QWORD *)(v9 + 32) = v18;
  *(_DWORD *)(v9 + 40) = v19;
  *v18 = 31;
  *(_BYTE *)(*(_QWORD *)(v9 + 128) + 1) = -117;
  *(_BYTE *)(*(_QWORD *)(v9 + 128) + 2) = 8;
  *(_BYTE *)(*(_QWORD *)(v9 + 128) + 3) = 0;
  if ((*(_DWORD *)(v9 + 4) & 0x80000000) != 0)
    *(_DWORD *)(*(_QWORD *)(v9 + 128) + 4) = 0;
  else
    *(_DWORD *)(*(_QWORD *)(v9 + 128) + 4) = time(0);
  if (*(_DWORD *)v9 == 9)
    v20 = 2;
  else
    v20 = 4 * (*(_DWORD *)v9 == 1);
  *(_BYTE *)(*(_QWORD *)(v9 + 128) + 8) = v20;
  *(_BYTE *)(*(_QWORD *)(v9 + 128) + 9) = 3;
  *(_QWORD *)(v9 + 32) += 10;
  *(_DWORD *)(v9 + 40) -= 10;
  a1[5] = sub_1DB734D30;
  result = deflateInit2_((z_streamp)(v9 + 8), *(_DWORD *)v9, 8, -15, 8, 0, "1.2.12", 112);
  if (!(_DWORD)result)
  {
    a1[8] = v9;
    return result;
  }
  v27 = result;
  archive_set_error((_DWORD *)a1[1], -1, "Internal error initializing compression library", v22, v23, v24, v25, v26, v31);
  switch(v27)
  {
    case -6:
      v28 = (_DWORD *)a1[1];
      v29 = "Internal error initializing compression library: invalid library version";
      goto LABEL_22;
    case -4:
      v28 = (_DWORD *)a1[1];
      v29 = "Internal error initializing compression library";
      goto LABEL_24;
    case -2:
      v28 = (_DWORD *)a1[1];
      v29 = "Internal error initializing compression library: invalid setup parameter";
LABEL_22:
      v30 = -1;
LABEL_25:
      archive_set_error(v28, v30, v29, v13, v14, v15, v16, v17, v31);
      break;
  }
  return 4294967266;
}

uint64_t sub_1DB734B90(uint64_t a1, char *__s1, char *a3)
{
  unsigned int *v5;
  uint64_t result;
  int v7;
  unsigned int v8;

  v5 = *(unsigned int **)(a1 + 64);
  if (!strcmp(__s1, "compression-level"))
  {
    if (a3)
    {
      v8 = *a3 - 48;
      if (v8 <= 9 && !a3[1])
      {
        result = 0;
        *v5 = v8;
        return result;
      }
    }
    return 4294967276;
  }
  result = strcmp(__s1, "timestamp");
  if ((_DWORD)result)
    return 4294967276;
  if (a3)
    v7 = 1;
  else
    v7 = -1;
  v5[1] = v7;
  return result;
}

uint64_t sub_1DB734C24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v11[2];

  v11[1] = *(char **)MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 64);
  v3 = sub_1DB734D8C(a1, v2, 1);
  if (!(_DWORD)v3)
  {
    v3 = sub_1DB732248(*(_QWORD *)(a1 + 16), *(_QWORD *)(v2 + 128), *(_QWORD *)(v2 + 136) - *(unsigned int *)(v2 + 40));
    if (!(_DWORD)v3)
    {
      v4 = *(_QWORD *)(v2 + 120);
      LODWORD(v11[0]) = *(_QWORD *)(v2 + 144);
      HIDWORD(v11[0]) = v4;
      v3 = sub_1DB732248(*(_QWORD *)(a1 + 16), (uint64_t)v11, 8);
    }
  }
  if (deflateEnd((z_streamp)(v2 + 8)))
  {
    archive_set_error(*(_DWORD **)(a1 + 8), -1, "Failed to clean up compressor", v5, v6, v7, v8, v9, v11[0]);
    return 4294967266;
  }
  return v3;
}

uint64_t sub_1DB734CF8(uint64_t a1)
{
  void **v2;

  v2 = *(void ***)(a1 + 64);
  free(v2[16]);
  free(v2);
  *(_QWORD *)(a1 + 64) = 0;
  return 0;
}

uint64_t sub_1DB734D30(uint64_t a1, const Bytef *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(v6 + 144) = crc32(*(_QWORD *)(v6 + 144), a2, a3);
  *(_QWORD *)(v6 + 120) += a3;
  *(_QWORD *)(v6 + 8) = a2;
  *(_DWORD *)(v6 + 16) = a3;
  return sub_1DB734D8C(a1, v6, 0);
}

uint64_t sub_1DB734D8C(uint64_t a1, uint64_t a2, int a3)
{
  z_stream *v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = (z_stream *)(a2 + 8);
  while (1)
  {
    if (*(_DWORD *)(a2 + 40))
    {
      if (a3)
        goto LABEL_4;
    }
    else
    {
      if (sub_1DB732248(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 128), *(_QWORD *)(a2 + 136)))
        return 4294967266;
      v8 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(a2 + 128);
      *(_DWORD *)(a2 + 40) = v8;
      if (a3)
      {
LABEL_4:
        v7 = 4;
        goto LABEL_8;
      }
    }
    v7 = 0;
    result = 0;
    if (!*(_DWORD *)(a2 + 16))
      return result;
LABEL_8:
    v10 = (char *)deflate(v6, v7);
    if ((_DWORD)v10)
      break;
    if (!a3 && !*(_DWORD *)(a2 + 16))
      return 0;
  }
  if ((_DWORD)v10 == 1)
    return 0;
  archive_set_error(*(_DWORD **)(a1 + 8), -1, "GZip compression failed: deflate() call returned status %d", v11, v12, v13, v14, v15, v10);
  return 4294967266;
}

uint64_t archive_write_open_FILE(_DWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;

  v4 = malloc_type_malloc(8uLL, 0x2004093837F09uLL);
  if (v4)
  {
    *v4 = a2;
    return archive_write_open2((uint64_t)a1, (uint64_t)v4, (uint64_t)sub_1DB734EDC, (uint64_t)sub_1DB734EE4, 0, (uint64_t)sub_1DB734F58, v8, v9);
  }
  else
  {
    archive_set_error(a1, 12, "No memory", v5, v6, v7, v8, v9, v11);
    return 4294967266;
  }
}

uint64_t sub_1DB734EDC()
{
  return 0;
}

size_t sub_1DB734EE4(_DWORD *a1, FILE **a2, void *__ptr, size_t __nitems)
{
  size_t result;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;

  while (1)
  {
    result = fwrite(__ptr, 1uLL, __nitems, *a2);
    if (result)
      break;
    if (*__error() != 4)
    {
      v9 = __error();
      archive_set_error(a1, *v9, "Write error", v10, v11, v12, v13, v14, v15);
      return -1;
    }
  }
  return result;
}

uint64_t sub_1DB734F58(int a1, void *a2)
{
  if (a2)
    free(a2);
  return 0;
}

uint64_t archive_write_open_filename(_DWORD *a1, char *a2)
{
  if (a2 && *a2)
    return sub_1DB734F9C(a1, 1, a2);
  else
    return archive_write_open_fd(a1, 1);
}

uint64_t sub_1DB734F9C(_DWORD *a1, int a2, char *a3)
{
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v17;

  v6 = malloc_type_calloc(1uLL, 0x70uLL, 0x1010040D4C8CDB9uLL);
  if (!v6)
    goto LABEL_7;
  v12 = v6;
  v13 = (uint64_t)(v6 + 2);
  if (a2)
  {
    if ((sub_1DB6DC068(v13, a3) & 0x80000000) == 0)
    {
LABEL_4:
      *v12 = -1;
      return archive_write_open2((uint64_t)a1, (uint64_t)v12, (uint64_t)sub_1DB7350D0, (uint64_t)sub_1DB735288, (uint64_t)sub_1DB7352FC, (uint64_t)sub_1DB735328, v14, v15);
    }
  }
  else if ((sub_1DB72D34C(v13, (__int32 *)a3) & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  if (*__error() != 12)
  {
    if (a2)
      archive_set_error(a1, -1, "Can't convert '%s' to WCS", v7, v8, v9, v10, v11, a3);
    else
      archive_set_error(a1, -1, "Can't convert '%S' to MBS", v7, v8, v9, v10, v11, a3);
    return 4294967271;
  }
  else
  {
LABEL_7:
    archive_set_error(a1, 12, "No memory", v7, v8, v9, v10, v11, v17);
    return 4294967266;
  }
}

uint64_t archive_write_open_filename_w(_DWORD *a1, char *a2)
{
  if (a2 && *(_DWORD *)a2)
    return sub_1DB734F9C(a1, 0, a2);
  else
    return archive_write_open_fd(a1, 1);
}

uint64_t sub_1DB7350D0(int *a1, int *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL4 v40;
  int v41;
  char *v43;
  char *v44;
  char *v45;
  stat v46;

  memset(&v46, 0, sizeof(v46));
  v44 = 0;
  v45 = 0;
  v4 = (uint64_t)(a2 + 2);
  if (sub_1DB6DF424((uint64_t)a1, (uint64_t)(a2 + 2), &v44))
  {
    if (*__error() == 12)
    {
      v5 = *__error();
      v11 = "No memory";
LABEL_21:
      archive_set_error(a1, v5, v11, v6, v7, v8, v9, v10, v43);
      return 4294967266;
    }
    sub_1DB6DF324((uint64_t)a1, v4, &v45);
    v27 = *__error();
    archive_set_error(a1, v27, "Can't convert '%S' to MBS", v28, v29, v30, v31, v32, v45);
    return 4294967266;
  }
  v12 = open(v44, 16778753, 438);
  *a2 = v12;
  sub_1DB6DD880(v12);
  if (*a2 < 0)
  {
    v33 = v44;
    v5 = *__error();
    if (!v33)
    {
      v43 = 0;
      v11 = "Failed to open '%S'";
      goto LABEL_21;
    }
    archive_set_error(a1, v5, "Failed to open '%s'", v6, v7, v8, v9, v10, v44);
    return 4294967266;
  }
  if (fstat(*a2, &v46))
  {
    v20 = v44;
    v21 = *__error();
    if (v20)
      archive_set_error(a1, v21, "Couldn't stat '%s'", v22, v23, v24, v25, v26, v44);
    else
      archive_set_error(a1, v21, "Couldn't stat '%S'", v22, v23, v24, v25, v26, 0);
    return 4294967266;
  }
  if ((archive_write_get_bytes_in_last_block((uint64_t)a1, v13, v14, v15, v16, v17, v18, v19) & 0x80000000) != 0)
  {
    v40 = 0;
    v41 = v46.st_mode & 0xF000;
    if (v41 != 4096 && v41 != 0x2000)
      v40 = v41 != 24576;
    archive_write_set_bytes_in_last_block(a1, v40, v34, v35, v36, v37, v38, v39);
  }
  if ((v46.st_mode & 0xF000) == 0x8000)
    archive_write_set_skip_file((uint64_t)a1, v46.st_dev, v46.st_ino, v35, v36, v37, v38, v39);
  return 0;
}

ssize_t sub_1DB735288(_DWORD *a1, int *a2, void *__buf, size_t __nbyte)
{
  ssize_t result;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;

  while (1)
  {
    result = write(*a2, __buf, __nbyte);
    if (result > 0)
      break;
    if (*__error() != 4)
    {
      v9 = __error();
      archive_set_error(a1, *v9, "Write error", v10, v11, v12, v13, v14, v15);
      return -1;
    }
  }
  return result;
}

uint64_t sub_1DB7352FC(uint64_t a1, int *a2)
{
  if (!a2)
    return 4294967266;
  if ((*a2 & 0x80000000) == 0)
    close(*a2);
  return 0;
}

uint64_t sub_1DB735328(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1DB6DEF44((uint64_t)a2 + 8);
    free(a2);
  }
  return 0;
}

uint64_t archive_write_open_memory(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v15;

  v8 = malloc_type_calloc(1uLL, 0x20uLL, 0x1010040F32E1FD2uLL);
  if (v8)
  {
    v8[2] = a4;
    v8[3] = a2;
    v8[1] = a3;
    return archive_write_open2((uint64_t)a1, (uint64_t)v8, (uint64_t)sub_1DB735400, (uint64_t)sub_1DB73544C, 0, (uint64_t)sub_1DB7354C4, v12, v13);
  }
  else
  {
    archive_set_error(a1, 12, "No memory", v9, v10, v11, v12, v13, v15);
    return 4294967266;
  }
}

uint64_t sub_1DB735400(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a2 = 0;
  v9 = (_QWORD *)a2[2];
  if (v9)
    *v9 = 0;
  if (archive_write_get_bytes_in_last_block((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8) == -1)
    archive_write_set_bytes_in_last_block(a1, 1, v10, v11, v12, v13, v14, v15);
  return 0;
}

size_t sub_1DB73544C(_DWORD *a1, _QWORD *a2, void *__src, size_t __n, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v8;
  size_t v10;
  size_t *v11;
  char *v13;

  if (*a2 + __n <= a2[1])
  {
    v8 = __n;
    memcpy((void *)(a2[3] + *a2), __src, __n);
    v10 = *a2 + v8;
    *a2 = v10;
    v11 = (size_t *)a2[2];
    if (v11)
      *v11 = v10;
  }
  else
  {
    archive_set_error(a1, 12, "Buffer exhausted", __n, a5, a6, a7, a8, v13);
    return -30;
  }
  return v8;
}

uint64_t sub_1DB7354C4(int a1, void *a2)
{
  if (a2)
    free(a2);
  return 0;
}

void *sub_1DB7354E4(const __CFString *a1)
{
  CFIndex Length;
  size_t MaximumSizeForEncoding;
  CFIndex v4;
  void *v5;

  Length = CFStringGetLength(a1);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  if (MaximumSizeForEncoding == -1)
    return 0;
  v4 = MaximumSizeForEncoding;
  v5 = malloc_type_calloc(MaximumSizeForEncoding, 1uLL, 0x100004077774924uLL);
  if (v5 && !CFStringGetCString(a1, (char *)v5, v4, 0x8000100u))
  {
    free(v5);
    return 0;
  }
  return v5;
}

uint64_t archive_write_set_format(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  char *vars0;

  v8 = 0;
  v9 = 917504;
  while (v9 != a2)
  {
    v9 = *(_DWORD *)((char *)&unk_1EA321810 + v8 + 16);
    v8 += 16;
    if (v8 == 320)
    {
      archive_set_error(a1, 22, "No such format", a4, a5, a6, a7, a8, vars0);
      return 4294967266;
    }
  }
  return (*(uint64_t (**)(void))((char *)&unk_1EA321810 + v8 + 8))();
}

_DWORD *sub_1DB7355D0(_DWORD *a1, uint64_t *a2)
{
  unsigned int v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;

  HIDWORD(v5) = archive_entry_filetype((uint64_t)a2);
  LODWORD(v5) = HIDWORD(v5) - 4096;
  v4 = v5 >> 12;
  if (v4 <= 0xB && ((0xA2Bu >> v4) & 1) != 0)
  {
    v18 = (char *)archive_entry_pathname(a2);
    return archive_set_error(a1, 79, "%s: %s format cannot archive %s", v13, v14, v15, v16, v17, v18);
  }
  else
  {
    v6 = (char *)archive_entry_pathname(a2);
    archive_entry_mode((uint64_t)a2);
    return archive_set_error(a1, 79, "%s: %s format cannot archive files with mode 0%lo", v7, v8, v9, v10, v11, v6);
  }
}

uint64_t archive_write_set_format_ar_bsd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594((int *)a1, -1329217314, 1, "archive_write_set_format_ar_bsd", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    result = sub_1DB7356E4(a1);
    if (!(_DWORD)result)
    {
      *(_DWORD *)(a1 + 16) = 458754;
      *(_QWORD *)(a1 + 24) = "ar (BSD)";
    }
  }
  return result;
}

uint64_t sub_1DB7356E4(uint64_t a1)
{
  void (*v2)(uint64_t);
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t result;
  char *v11;

  v2 = *(void (**)(uint64_t))(a1 + 328);
  if (v2)
    v2(a1);
  v3 = malloc_type_calloc(1uLL, 0x28uLL, 0x10100407E53D9D1uLL);
  if (v3)
  {
    v9 = v3;
    result = 0;
    *(_QWORD *)(a1 + 264) = v9;
    *(_QWORD *)(a1 + 272) = "ar";
    *(_QWORD *)(a1 + 312) = sub_1DB735CF0;
    *(_QWORD *)(a1 + 320) = sub_1DB735DD8;
    *(_QWORD *)(a1 + 328) = sub_1DB735E04;
    *(_QWORD *)(a1 + 296) = sub_1DB735E4C;
    *(_QWORD *)(a1 + 304) = sub_1DB7357F4;
  }
  else
  {
    archive_set_error((_DWORD *)a1, 12, "Can't allocate ar data", v4, v5, v6, v7, v8, v11);
    return 4294967266;
  }
  return result;
}

uint64_t archive_write_set_format_ar_svr4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1DB6E0594((int *)a1, -1329217314, 1, "archive_write_set_format_ar_svr4", a5, a6, a7, a8);
  if ((_DWORD)result != -30)
  {
    result = sub_1DB7356E4(a1);
    if (!(_DWORD)result)
    {
      *(_DWORD *)(a1 + 16) = 458753;
      *(_QWORD *)(a1 + 24) = "ar (GNU/SVR4)";
    }
  }
  return result;
}

uint64_t sub_1DB7357F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  __int128 v13;
  char *v14;
  char *v15;
  _DWORD *v16;
  int v17;
  char *v18;
  int v19;
  size_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t result;
  size_t v27;
  size_t v28;
  size_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  size_t v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[26];
  __int16 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 264);
  *(_DWORD *)(v4 + 16) = 0;
  v5 = archive_entry_size((uint64_t)a2);
  v6 = (const char *)archive_entry_pathname(a2);
  if (!v6)
    goto LABEL_10;
  v12 = v6;
  if (!*v6)
    goto LABEL_10;
  if (!*(_BYTE *)(v4 + 24))
  {
    sub_1DB7322A8(a1, (uint64_t)"!<arch>\n", 8);
    *(_BYTE *)(v4 + 24) = 1;
  }
  *(_QWORD *)&v13 = 0x2020202020202020;
  *((_QWORD *)&v13 + 1) = 0x2020202020202020;
  *(_OWORD *)&v41[10] = v13;
  v40 = v13;
  *(_OWORD *)v41 = v13;
  v39 = v13;
  v42 = 2656;
  if (!strcmp(v12, "/"))
  {
    v21 = 0;
    v18 = 0;
    LOBYTE(v39) = 47;
  }
  else if (!strcmp(v12, "/SYM64/"))
  {
    v21 = 0;
    v18 = 0;
    qmemcpy(&v39, "/SYM64/", 7);
  }
  else if (!strcmp(v12, "__.SYMDEF"))
  {
    v21 = 0;
    v18 = 0;
    BYTE8(v39) = 70;
    *(_QWORD *)&v39 = *(_QWORD *)"__.SYMDEF";
  }
  else
  {
    if (!strcmp(v12, "//"))
    {
      v21 = 0;
      v18 = 0;
      *(_DWORD *)(v4 + 16) = 1;
      LOWORD(v39) = 12079;
      goto LABEL_30;
    }
    v14 = (char *)&v12[strlen(v12) - 1];
    if (*v14 == 47)
    {
LABEL_10:
      v15 = "Invalid filename";
LABEL_11:
      v16 = (_DWORD *)a1;
      v17 = 22;
LABEL_35:
      archive_set_error(v16, v17, v15, v7, v8, v9, v10, v11, (char *)v39);
      return 4294967276;
    }
    do
    {
      v18 = v14;
      if (v14 <= v12)
        break;
      --v14;
    }
    while (*(v18 - 1) != 47);
    v19 = *(_DWORD *)(a1 + 16);
    if (v19 != 458753)
    {
      if (v19 == 458754)
      {
        v20 = strlen(v18);
        if (v20 > 0x10 || strchr(v18, 32))
        {
          qmemcpy(&v39, "#1/", 3);
          if (sub_1DB735EC4(v20, (char *)&v39 + 3, 0xDuLL))
          {
            v15 = "File name too long";
LABEL_34:
            v16 = (_DWORD *)a1;
            v17 = 34;
            goto LABEL_35;
          }
          v5 += strlen(v18);
          v21 = 1;
        }
        else
        {
          __memcpy_chk();
          v21 = 0;
          *((_BYTE *)&v39 + strlen(v18)) = 32;
        }
        goto LABEL_23;
      }
      goto LABEL_51;
    }
    v29 = strlen(v18);
    if (v29 > 0xF)
    {
      if (*(int *)(v4 + 20) <= 0)
      {
        v15 = "Can't find string table";
        goto LABEL_11;
      }
      v30 = malloc_type_malloc(v29 + 3, 0x8873C9D6uLL);
      if (!v30)
      {
        archive_set_error((_DWORD *)a1, 12, "Can't allocate filename buffer", v31, v32, v33, v34, v35, (char *)v39);
        return 4294967266;
      }
      v36 = v30;
      v37 = strlen(v18);
      memcpy(v36, v18, v37);
      strcpy((char *)v36 + strlen(v18), "/\n");
      v38 = strstr(*(char **)(v4 + 32), (const char *)v36);
      free(v36);
      if (!v38)
      {
        v15 = "Invalid string table";
        goto LABEL_11;
      }
      LOBYTE(v39) = 47;
      if (sub_1DB735EC4((unint64_t)&v38[-*(_QWORD *)(v4 + 32)], (char *)&v39 + 1, 0xFuLL))
      {
        v15 = "string table offset too large";
        goto LABEL_34;
      }
LABEL_51:
      v21 = 0;
      goto LABEL_23;
    }
    __memcpy_chk();
    v21 = 0;
    *((_BYTE *)&v39 + strlen(v18)) = 47;
  }
LABEL_23:
  v22 = archive_entry_mtime((uint64_t)a2);
  if (sub_1DB735EC4(v22, (char *)&v40, 0xCuLL))
  {
    v15 = "File modification time too large";
    goto LABEL_34;
  }
  v23 = archive_entry_uid((uint64_t)a2);
  if (sub_1DB735EC4(v23, (char *)&v40 + 12, 6uLL))
  {
    v15 = "Numeric user ID too large";
    goto LABEL_34;
  }
  v24 = archive_entry_gid((uint64_t)a2);
  if (sub_1DB735EC4(v24, &v41[2], 6uLL))
  {
    v15 = "Numeric group ID too large";
    goto LABEL_34;
  }
  v25 = archive_entry_mode((uint64_t)a2);
  if (sub_1DB735FBC(v25, &v41[8]))
  {
    v15 = "Numeric mode too large";
    goto LABEL_34;
  }
  if (v18 && archive_entry_filetype((uint64_t)a2) != 0x8000)
  {
    v15 = "Regular file required for non-pseudo member";
    goto LABEL_11;
  }
LABEL_30:
  if (sub_1DB735EC4(v5, &v41[16], 0xAuLL))
  {
    v15 = "File size out of range";
    goto LABEL_34;
  }
  result = sub_1DB7322A8(a1, (uint64_t)&v39, 60);
  if (!(_DWORD)result)
  {
    *(_QWORD *)v4 = v5;
    *(_QWORD *)(v4 + 8) = v5 & 1;
    if (v21)
    {
      v27 = strlen(v18);
      result = sub_1DB7322A8(a1, (uint64_t)v18, v27);
      if (!(_DWORD)result)
      {
        v28 = strlen(v18);
        result = 0;
        *(_QWORD *)v4 -= v28;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1DB735CF0(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  size_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v20;

  v10 = *(_QWORD *)(a1 + 264);
  if (*(_QWORD *)v10 >= a3)
    v11 = a3;
  else
    v11 = *(_QWORD *)v10;
  if (*(int *)(v10 + 16) >= 1)
  {
    if (*(int *)(v10 + 20) >= 1)
    {
      archive_set_error((_DWORD *)a1, 22, "More than one string tables exist", a4, a5, a6, a7, a8, v20);
      return -20;
    }
    v12 = malloc_type_malloc(v11 + 1, 0x9D4C6949uLL);
    *(_QWORD *)(v10 + 32) = v12;
    if (!v12)
    {
      archive_set_error((_DWORD *)a1, 12, "Can't allocate strtab buffer", v13, v14, v15, v16, v17, v20);
      return -30;
    }
    memcpy(v12, a2, v11);
    *(_BYTE *)(*(_QWORD *)(v10 + 32) + v11) = 0;
    *(_DWORD *)(v10 + 20) = 1;
  }
  v18 = sub_1DB7322A8(a1, (uint64_t)a2, v11);
  if (v18)
    return v18;
  *(_QWORD *)v10 -= v11;
  return v11;
}

uint64_t sub_1DB735DD8(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 264);
  if (*(_BYTE *)(v1 + 24))
    return 0;
  *(_BYTE *)(v1 + 24) = 1;
  return sub_1DB7322A8(a1, (uint64_t)"!<arch>\n", 8);
}

uint64_t sub_1DB735E04(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 264);
  if (v1)
  {
    if (*(int *)(v1 + 20) >= 1)
      free(*(void **)(v1 + 32));
    free((void *)v1);
    *(_QWORD *)(a1 + 264) = 0;
  }
  return 0;
}

uint64_t sub_1DB735E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  char *v10;
  char *v11;

  v8 = *(_QWORD **)(a1 + 264);
  if (*v8)
  {
    archive_set_error((_DWORD *)a1, -1, "Entry remaining bytes larger than 0", a4, a5, a6, a7, a8, v11);
  }
  else
  {
    v10 = (char *)v8[1];
    if (!v10)
      return 0;
    if (v10 == (char *)1)
      return sub_1DB7322A8(a1, (uint64_t)"\n", 1);
    archive_set_error((_DWORD *)a1, -1, "Padding wrong size: %ju should be 1 or 0", a4, a5, a6, a7, a8, v10);
  }
  return 4294967276;
}

uint64_t sub_1DB735EC4(unint64_t a1, char *__dst, size_t __len)
{
  int v3;
  uint64_t v4;
  char *v5;
  char *v6;
  int v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  char *v12;
  int v13;

  v3 = __len;
  if ((a1 & 0x8000000000000000) != 0)
  {
    if ((int)__len >= 1)
    {
      __len = __len;
      v12 = __dst;
      v13 = 48;
LABEL_13:
      memset(v12, v13, __len);
    }
    return 0xFFFFFFFFLL;
  }
  v4 = 0;
  __len = __len;
  v5 = &__dst[__len];
  v6 = v5;
  v7 = __len;
  do
  {
    v8 = v7;
    v9 = a1;
    v10 = v4;
    a1 /= 0xAuLL;
    *--v6 = (v9 - 10 * a1) | 0x30;
    --v7;
    if (v8 < 2)
      break;
    ++v4;
  }
  while (v9 > 9);
  if (v9 >= 0xA)
  {
    if ((int)__len >= 1)
    {
      v12 = v6;
      v13 = 57;
      goto LABEL_13;
    }
    return 0xFFFFFFFFLL;
  }
  memmove(__dst, v6, (int)__len - v7);
  if (v8 >= 2)
    memset(&v5[-v7], 32, (v3 - 1) - v10);
  return 0;
}

uint64_t sub_1DB735FBC(unint64_t a1, _BYTE *__dst)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  _QWORD *v7;

  v3 = 0;
  v4 = 0;
  do
  {
    v5 = a1;
    v6 = v4 + 8;
    __dst[v4-- + 7] = a1 & 7 | 0x30;
    ++v3;
    if (v6 < 2)
      break;
    a1 >>= 3;
  }
  while (v5 > 7);
  v7 = &__dst[v4 + 8];
  if (v5 >= 8)
  {
    *v7 = 0x3737373737373737;
    return 0xFFFFFFFFLL;
  }
  else
  {
    memmove(__dst, v7, -v4);
    if (9 - (int)v3 >= 2)
      memset(&__dst[v3], 32, v4 + 8);
    return 0;
  }
}

uint64_t archive_write_add_filter(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  char *vars0;

  v8 = 0;
  v9 = 0;
  while (v9 != a2)
  {
    v9 = *(_DWORD *)((char *)&unk_1EA321960 + v8 + 16);
    v8 += 16;
    if (v8 == 208)
    {
      archive_set_error(a1, 22, "No such filter", a4, a5, a6, a7, a8, vars0);
      return 4294967266;
    }
  }
  return (*(uint64_t (**)(void))((char *)&unk_1EA321960 + v8 + 8))();
}

uint64_t archive_write_set_format_by_name(_DWORD *a1, char *__s1)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = 0;
  v5 = "7zip";
  while (strcmp(__s1, v5))
  {
    v5 = (&off_1EA321BB0)[v4 + 2];
    v4 += 2;
    if (v4 == 62)
    {
      archive_set_error(a1, 22, "No such format '%s'", v6, v7, v8, v9, v10, __s1);
      a1[1] = 0x8000;
      return 4294967266;
    }
  }
  return ((uint64_t (*)(_DWORD *))(&off_1EA321BB0)[v4 + 1])(a1);
}

void archive_read_support_filter_uu(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;

  if (sub_1DB6E4544("uu"))
  {
    if (sub_1DB6E0594(a1, 14594245, 1, "archive_read_support_filter_uu", v3, v4, v5, v6) != -30)
    {
      v16 = 0;
      sub_1DB6F7FD0(a1, &v16, v7, v8, v9, v10, v11, v12);
      if (!v13)
      {
        *v16 = 0;
        v14 = v16;
        v16[1] = "uu";
        v14[2] = sub_1DB736230;
        v14[4] = 0;
        v14[5] = 0;
        v14[3] = sub_1DB736578;
      }
    }
  }
  else
  {
    archive_set_error(a1, -1, "Format not allow-listed in entitlement", v2, v3, v4, v5, v6, v15);
  }
}

uint64_t sub_1DB736230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  int v31;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;

  v36 = 0;
  v34 = 0;
  v37 = (unsigned __int8 *)sub_1DB6E22F4(a2, 1uLL, &v36, a4, a5, a6, a7, a8);
  if (!v37)
    return 0;
  v11 = 20;
  v35 = v36;
  v33 = v36;
  while (1)
  {
    v12 = sub_1DB736664(a2, &v37, &v36, &v35, &v34, (uint64_t *)&v33, v9, v10);
    v13 = 0;
    if (v12 < 0 || !v34)
      return v13;
    if (v12 - v34 >= 11)
    {
      if (*(_DWORD *)v37 == 1768383842 && *((_WORD *)v37 + 2) == 8302)
      {
        v16 = 6;
      }
      else
      {
        if ((unint64_t)(v12 - v34) < 0x12)
          goto LABEL_22;
        if (*(_QWORD *)v37 != 0x61622D6E69676562 || *(_QWORD *)(v37 + 5) != 0x203436657361622DLL)
          goto LABEL_22;
        v16 = 13;
      }
      if (v37[v16] - 56 >= 0xFFFFFFF8
        && v37[v16 + 1] - 56 >= 0xFFFFFFF8
        && v37[v16 + 2] - 56 >= 0xFFFFFFF8
        && v37[v16 + 3] == 32)
      {
        break;
      }
    }
LABEL_22:
    v11 = 0;
    v13 = 0;
    v37 += v12;
    v36 -= v12;
    if (v33 >> 17)
      return v13;
  }
  v37 += v12;
  v13 = v36 - v12;
  v36 -= v12;
  if (v36)
  {
    v17 = sub_1DB736664(a2, &v37, &v36, &v35, &v34, (uint64_t *)&v33, v9, v10);
    v13 = 0;
    if ((v17 & 0x8000000000000000) == 0)
    {
      if (v34)
      {
        v18 = v36;
        v19 = v36 - v17;
        v36 -= v17;
        if (v16 != 6)
        {
          v20 = v37;
          if (v17 > v34)
          {
            v21 = &v37[v17 - v34];
            while (byte_1DB753F40[*v20])
            {
              ++v20;
              if (--v17 <= v34)
              {
                v20 = v21;
                goto LABEL_33;
              }
            }
            return 0;
          }
LABEL_33:
          v22 = &v20[v34];
          if (v19 < 5)
          {
            if (v19 < 1)
              return 0;
          }
          else
          {
            if (*(_DWORD *)v22 == 1027423549 && v22[4] == 10)
              return v11 | 0x28u;
            if ((unint64_t)v19 >= 6 && *(_DWORD *)v22 == 1027423549 && *((_WORD *)v22 + 2) == 2573)
              return v11 | 0x28u;
          }
          v31 = byte_1DB753F40[*v22];
LABEL_63:
          if (v31)
            return (v11 + 30);
          else
            return 0;
        }
        v25 = *v37;
        if (!byte_1DB753E40[v25])
          return 0;
        v26 = ((_DWORD)v25 + 32) & 0x3F;
        if (v26 > 0x2D)
          return 0;
        v27 = v17 - 1;
        if (v17 - 1 - v34 < v26)
          return 0;
        v28 = v37 + 1;
        if (!(_DWORD)v26)
        {
LABEL_53:
          if (v27 - v34 == 1 && (byte_1DB753E40[*v28] || *v28 - 97 < 0x1A))
            ++v28;
          v37 = &v28[v34];
          if (v18 == v17)
            return 0;
          v31 = byte_1DB753E40[v28[v34]];
          goto LABEL_63;
        }
        v27 = v17 - (v26 - 1) - 2;
        v29 = &v28[v26];
        while (byte_1DB753E40[*v28])
        {
          ++v28;
          LODWORD(v26) = v26 - 1;
          if (!(_DWORD)v26)
          {
            v28 = v29;
            goto LABEL_53;
          }
        }
        return 0;
      }
    }
  }
  return v13;
}

uint64_t sub_1DB736578(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t result;
  char *v12;

  *(_DWORD *)(a1 + 104) = 7;
  *(_QWORD *)(a1 + 96) = "uu";
  *(_QWORD *)(a1 + 40) = sub_1DB736868;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = sub_1DB736F00;
  v2 = malloc_type_calloc(0x30uLL, 1uLL, 0x8FCE8168uLL);
  v3 = malloc_type_malloc(0x10000uLL, 0x6F0E9D2AuLL);
  v4 = malloc_type_malloc(0x400uLL, 0x4E9E6904uLL);
  v10 = v4;
  if (v2 && v3 && v4)
  {
    result = 0;
    *(_QWORD *)(a1 + 88) = v2;
    v2[1] = v10;
    *((_DWORD *)v2 + 4) = 0;
    v2[3] = 1024;
    v2[4] = v3;
    *((_DWORD *)v2 + 10) = 0;
  }
  else
  {
    archive_set_error(*(_DWORD **)(a1 + 24), 12, "Can't allocate data for uudecode", v5, v6, v7, v8, v9, v12);
    free(v2);
    free(v3);
    free(v10);
    return 4294967266;
  }
  return result;
}

uint64_t sub_1DB736664(uint64_t a1, unsigned __int8 **a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (*a3)
  {
    v14 = sub_1DB7367B0(*a2, *a3, a5);
    if (*a5)
      return v14;
  }
  else
  {
    v14 = 0;
    *a5 = 0;
  }
  v15 = 0;
  while (!v15 && v14 == *a3 && !((unint64_t)*a6 >> 17))
  {
    v16 = *a4;
    v17 = (*a4 + 1023) & 0xFFFFFC00;
    v18 = sub_1DB6E22F4(a1, v17 << (v17 < *a4 + 160), a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
    *a2 = (unsigned __int8 *)v18;
    if (v18)
    {
      v15 = 0;
    }
    else
    {
      if (*a4 >= *a3)
        return 0;
      v18 = sub_1DB6E22F4(a1, *a3, a3, v19, v20, v21, v22, v23);
      v15 = 1;
    }
    *a6 = *a3;
    *a4 = *a3;
    *a2 = (unsigned __int8 *)(v18 + v16 - v14);
    v24 = *a3 - (v16 - v14);
    *a3 = v24;
    v25 = sub_1DB7367B0((unsigned __int8 *)(v18 + v16), v24 - v14, a5);
    if (v25 >= 0)
      v26 = v14;
    else
      v26 = 0;
    v14 = v26 + v25;
    if (*a5)
      return v14;
  }
  return v14;
}

uint64_t sub_1DB7367B0(unsigned __int8 *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  unsigned int v4;

  if (a2 < 1)
  {
LABEL_11:
    if (a3)
      *a3 = 0;
    return a2;
  }
  v3 = 0;
  while (1)
  {
    v4 = byte_1DB753D40[*a1];
    if (v4 <= 9)
    {
      if (v4 == 1)
      {
        ++a1;
        ++v3;
      }
      else if (!byte_1DB753D40[*a1])
      {
        if (a3)
          *a3 = 0;
        return -1;
      }
      goto LABEL_10;
    }
    if (v4 == 10)
      goto LABEL_18;
    if (v4 == 13)
      break;
LABEL_10:
    if (v3 >= a2)
      goto LABEL_11;
  }
  if (a2 - v3 >= 2 && a1[1] == 10)
  {
    if (a3)
      *a3 = 2;
    return v3 + 2;
  }
LABEL_18:
  if (a3)
    *a3 = 1;
  return v3 + 1;
}

uint64_t sub_1DB736868(uint64_t *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  BOOL v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  size_t v24;
  size_t v25;
  int v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  BOOL v42;
  _BOOL4 v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v70;
  char *v71;
  int v72;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  size_t __n;

  v77 = 0;
  __n = 0;
  v10 = a1[11];
  v17 = (_BYTE *)sub_1DB6E22F4(a1[2], 1uLL, &__n, a4, a5, a6, a7, a8);
  v18 = v17 == 0;
  v19 = __n;
  if (!v17 && (__n & 0x8000000000000000) != 0)
    return -30;
  v75 = a2;
  while (2)
  {
    if (v18)
    {
      v19 = 0;
      __n = 0;
    }
    v76 = v19;
    if (*(_DWORD *)(v10 + 40) == 4)
    {
      v23 = 0;
      v22 = v19;
      goto LABEL_124;
    }
    v20 = *(_QWORD *)(v10 + 32);
    v21 = *(int *)(v10 + 16);
    if ((_DWORD)v21)
    {
      if (sub_1DB736F38((uint64_t)a1, v10, v19 + v21))
        return -30;
      memcpy((void *)(*(_QWORD *)(v10 + 8) + *(int *)(v10 + 16)), v17, __n);
      v17 = *(_BYTE **)(v10 + 8);
      v22 = __n + *(int *)(v10 + 16);
      __n = v22;
      *(_DWORD *)(v10 + 16) = 0;
    }
    else
    {
      v22 = v19;
    }
    if (v22 < 1)
    {
      v19 = 0;
      v23 = 0;
      goto LABEL_124;
    }
    v23 = 0;
    v19 = 0;
    while (1)
    {
      v24 = sub_1DB7367B0(v17, v22 - v19, &v77);
      if ((v24 & 0x8000000000000000) != 0)
      {
        if (!*(_DWORD *)(v10 + 40) && (*(uint64_t *)v10 > 0 || v23 >= 1))
        {
          *(_DWORD *)(v10 + 40) = 4;
          v19 = v22;
          goto LABEL_124;
        }
LABEL_118:
        v70 = (_DWORD *)a1[3];
        v71 = "Insufficient compressed data";
        v72 = -1;
        goto LABEL_119;
      }
      v25 = v24;
      v26 = *(_DWORD *)(v10 + 40);
      if (!v77)
        break;
      switch(v26)
      {
        case 1:
          if ((uint64_t)(v23 + 2 * v24) > 0x10000)
            goto LABEL_124;
          v29 = v24 - v77;
          v30 = *v17;
          if (byte_1DB753E40[v30])
            v31 = v29 <= 0;
          else
            v31 = 1;
          if (v31)
            goto LABEL_118;
          v32 = ((_BYTE)v30 + 32) & 0x3F;
          if (v29 <= v32)
            goto LABEL_118;
          if ((_DWORD)v32)
          {
            v33 = 0;
            v34 = v17 + 1;
            v35 = 2;
            while (1)
            {
              v36 = *v34;
              if (!byte_1DB753E40[v36])
                goto LABEL_118;
              v37 = v34[1];
              if (!byte_1DB753E40[v37])
                goto LABEL_118;
              v38 = (((_BYTE)v37 + 32) & 0x3F) << 12;
              *(_BYTE *)(v20 + v35 - 2) = ((v38 | ((_DWORD)v36 << 18)) + 0x800000) >> 16;
              if (v32 + v33 < 2)
              {
                v23 = v23 - v33 + 1;
                v61 = v20 - v33;
LABEL_97:
                v20 = v61 + 1;
                goto LABEL_32;
              }
              v39 = v34[2];
              if (!byte_1DB753E40[v39])
                goto LABEL_118;
              v40 = ((_BYTE)v39 + 32) & 0x3F;
              *(_BYTE *)(v20 + v35 - 1) = (unsigned __int16)(v38 | (v40 << 6)) >> 8;
              if (v32 + v33 == 2)
              {
                v23 = v23 - v33 + 2;
                v62 = v20 - v33;
LABEL_101:
                v20 = v62 + 2;
                goto LABEL_32;
              }
              v41 = v34[3];
              if (!byte_1DB753E40[v41])
                goto LABEL_118;
              *(_BYTE *)(v20 + v35) = (v41 + 32) & 0x3F | ((_BYTE)v40 << 6);
              v33 -= 3;
              v35 += 3;
              v34 += 4;
              if ((uint64_t)(v32 + v33 + 3) <= 3)
              {
                v23 -= v33;
                v20 -= v33;
                goto LABEL_32;
              }
            }
          }
          v60 = 2;
LABEL_80:
          *(_DWORD *)(v10 + 40) = v60;
          goto LABEL_32;
        case 2:
          goto LABEL_25;
        case 3:
          if ((uint64_t)(v23 + 2 * v24) > 0x10000)
            goto LABEL_124;
          v27 = v24 - v77;
          if ((uint64_t)(v24 - v77) < 3)
          {
            if (v27 >= 1)
              goto LABEL_67;
            v59 = v17;
            if (!v27)
              goto LABEL_32;
          }
          else
          {
            if (*v17 == 61 && v17[1] == 61 && v17[2] == 61)
              goto LABEL_31;
LABEL_67:
            v46 = 0;
            v47 = 0;
            v48 = 0;
            while (1)
            {
              v49 = v17[v46];
              if (!byte_1DB753F40[v49] || (v50 = v17[v46 + 1], !byte_1DB753F40[v50]))
              {
                v23 += v47;
                v20 += v47;
                goto LABEL_93;
              }
              v51 = dword_1DB754040[v50] << 12;
              v52 = (v51 | (dword_1DB754040[v49] << 18)) >> 16;
              v53 = v20 + v47;
              *(_BYTE *)(v20 + v47) = v52;
              if ((unint64_t)(v27 + v48) < 3)
                break;
              v54 = v17[v46 + 2];
              if (v54 == 61)
              {
                v23 += v47 + 1;
                v61 = v20 + v47;
                goto LABEL_97;
              }
              if (!byte_1DB753F40[v54])
                goto LABEL_118;
              v55 = dword_1DB754040[v54];
              v56 = (v51 | (v55 << 6)) >> 8;
              v57 = v20 + v47;
              *(_BYTE *)(v53 + 1) = v56;
              if (v27 + v48 == 3)
              {
                v23 += v47 + 2;
                v20 = v57 + 2;
                goto LABEL_32;
              }
              v58 = v17[v46 + 3];
              if (v58 == 61)
              {
                v23 += v47 + 2;
                v62 = v20 + v47;
                goto LABEL_101;
              }
              if (!byte_1DB753F40[v58])
                goto LABEL_118;
              *(_BYTE *)(v57 + 2) = dword_1DB754040[v58] | ((_BYTE)v55 << 6);
              v48 -= 4;
              v47 += 3;
              v46 += 4;
              if (v27 + v48 + 4 <= 4)
              {
                v23 += v47;
                v20 += v47;
                v59 = &v17[-v48];
                if (v27 + v48)
                  goto LABEL_92;
                goto LABEL_32;
              }
            }
            v23 += v47 + 1;
            v20 = v53 + 1;
            v59 = &v17[-v48 + 2];
            if (v27 + v48 == 2)
              goto LABEL_32;
          }
LABEL_92:
          LODWORD(v49) = *v59;
LABEL_93:
          if ((_DWORD)v49 != 61)
            goto LABEL_118;
          goto LABEL_32;
      }
      if ((uint64_t)(v24 + v23) >= 0x20000)
      {
        v70 = (_DWORD *)a1[3];
        v71 = "Invalid format data";
        goto LABEL_128;
      }
      if ((uint64_t)(v24 - v77) >= 11)
      {
        v42 = *(_DWORD *)v17 == 1768383842 && *((_WORD *)v17 + 2) == 8302;
        v43 = !v42;
        if (v42)
        {
          v45 = 6;
        }
        else
        {
          if (v24 - v77 < 0x12)
            goto LABEL_32;
          if (*(_QWORD *)v17 != 0x61622D6E69676562 || *(_QWORD *)(v17 + 5) != 0x203436657361622DLL)
            goto LABEL_32;
          v45 = 13;
        }
        if ((v17[v45] & 0xF8) == 0x30
          && (v17[v45 + 1] & 0xF8) == 0x30
          && (v17[v45 + 2] & 0xF8) == 0x30
          && v17[v45 + 3] == 32)
        {
          if (v43)
          {
            *(_DWORD *)(v10 + 40) = 3;
            goto LABEL_32;
          }
          v60 = 1;
          goto LABEL_80;
        }
      }
LABEL_32:
      v17 += v24;
      v19 += v24;
      v22 = __n;
      if (v19 >= (uint64_t)__n)
        goto LABEL_124;
    }
    if (v26 == 2)
    {
LABEL_25:
      if (v24 - v77 != 3)
        goto LABEL_118;
      if (*(_WORD *)v17 != 28261 || v17[2] != 100)
        goto LABEL_118;
LABEL_31:
      *(_DWORD *)(v10 + 40) = 0;
      goto LABEL_32;
    }
    if (!v23 && v76 <= 0)
    {
      v70 = (_DWORD *)a1[3];
      v71 = "Missing format data";
LABEL_128:
      v72 = 79;
LABEL_119:
      archive_set_error(v70, v72, v71, v12, v13, v14, v15, v16, v75);
      return -30;
    }
    if (sub_1DB736F38((uint64_t)a1, v10, v24))
      return -30;
    v63 = *(_BYTE **)(v10 + 8);
    if (v63 != v17)
      memmove(v63, v17, v25);
    *(_DWORD *)(v10 + 16) = v25;
    if (!v23)
    {
      sub_1DB6E26F8(a1[2], v76, v11, v12, v13, v14, v15, v16);
      v17 = (_BYTE *)sub_1DB6E22F4(a1[2], 1uLL, &__n, v64, v65, v66, v67, v68);
      v18 = v17 == 0;
      v19 = __n;
      if (!v17)
      {
        v23 = -30;
        if ((__n & 0x8000000000000000) != 0)
          return v23;
      }
      continue;
    }
    break;
  }
  v19 += v25;
  v22 = __n;
LABEL_124:
  v74 = v76 - v22;
  if (v76 >= v22)
    v74 = 0;
  sub_1DB6E26F8(a1[2], v74 + v19, v11, v12, v13, v14, v15, v16);
  *(_QWORD *)v75 = *(_QWORD *)(v10 + 32);
  *(_QWORD *)v10 += v23;
  return v23;
}

uint64_t sub_1DB736F00(uint64_t a1)
{
  void **v1;

  v1 = *(void ***)(a1 + 88);
  free(v1[1]);
  free(v1[4]);
  free(v1);
  return 0;
}

uint64_t sub_1DB736F38(uint64_t a1, uint64_t a2, size_t a3)
{
  size_t v3;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  uint64_t result;
  char *v15;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3 >= a3)
    return 0;
  do
  {
    if (v3 >= 0x8000)
      v3 += 1024;
    else
      v3 *= 2;
  }
  while (v3 < a3);
  v6 = malloc_type_malloc(v3, 0x81CF4FE4uLL);
  if (v6)
  {
    v12 = v6;
    v13 = *(int *)(a2 + 16);
    if ((_DWORD)v13)
      memmove(v6, *(const void **)(a2 + 8), v13);
    free(*(void **)(a2 + 8));
    result = 0;
    *(_QWORD *)(a2 + 8) = v12;
    *(_QWORD *)(a2 + 24) = v3;
  }
  else
  {
    archive_set_error(*(_DWORD **)(a1 + 24), 12, "Can't allocate data for uudecode", v7, v8, v9, v10, v11, v15);
    return 4294967266;
  }
  return result;
}

uint64_t sub_1DB736FE8(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  uint64_t v4;
  uint64_t i;
  int v6;
  uint64_t result;
  unsigned __int8 v8;
  __int16 v9;
  char v10;
  _BYTE v11[20];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)(a2 - 33) >= 0xFFFFFFFFFFFFFFE0)
  {
    v2 = a2;
    *(_OWORD *)(a1 + 1704) = 0u;
    *(_OWORD *)(a1 + 1720) = 0u;
    *(_OWORD *)(a1 + 1672) = 0u;
    *(_OWORD *)(a1 + 1688) = 0u;
    *(_OWORD *)(a1 + 1640) = 0u;
    *(_OWORD *)(a1 + 1656) = 0u;
    *(_OWORD *)(a1 + 1608) = 0u;
    *(_OWORD *)(a1 + 1624) = 0u;
    *(_OWORD *)(a1 + 1576) = 0u;
    *(_OWORD *)(a1 + 1592) = 0u;
    *(_OWORD *)(a1 + 1544) = 0u;
    *(_OWORD *)(a1 + 1560) = 0u;
    *(_OWORD *)(a1 + 1512) = 0u;
    *(_OWORD *)(a1 + 1528) = 0u;
    *(_OWORD *)(a1 + 1480) = 0u;
    *(_OWORD *)(a1 + 1496) = 0u;
    *(_OWORD *)(a1 + 1448) = 0u;
    *(_OWORD *)(a1 + 1464) = 0u;
    *(_OWORD *)(a1 + 1416) = 0u;
    *(_OWORD *)(a1 + 1432) = 0u;
    *(_OWORD *)(a1 + 1384) = 0u;
    *(_OWORD *)(a1 + 1400) = 0u;
    *(_OWORD *)(a1 + 1352) = 0u;
    *(_OWORD *)(a1 + 1368) = 0u;
    *(_OWORD *)(a1 + 1320) = 0u;
    *(_OWORD *)(a1 + 1336) = 0u;
    *(_OWORD *)(a1 + 1288) = 0u;
    *(_OWORD *)(a1 + 1304) = 0u;
    *(_OWORD *)(a1 + 1256) = 0u;
    *(_OWORD *)(a1 + 1272) = 0u;
    *(_OWORD *)(a1 + 1224) = 0u;
    *(_OWORD *)(a1 + 1240) = 0u;
    *(_QWORD *)(a1 + 1736) = 0;
    *(_QWORD *)(a1 + 1744) = a2;
    v8 = a2;
    v9 = 2048;
    v10 = 2;
    *(_QWORD *)v11 = 0;
    *(_DWORD *)&v11[8] = 536936448;
    *(_QWORD *)&v11[12] = 0;
    v12 = 0;
    if ((sub_1DB70A020(a1 + 1088, &v8) & 0x80000000) == 0)
    {
      v4 = 0;
      for (i = a1; ; i += 136)
      {
        v8 = v2;
        v9 = 2048;
        v10 = 2;
        *(_DWORD *)v11 = 0;
        v11[4] = v4;
        *(_DWORD *)&v11[5] = 0;
        *(_WORD *)&v11[9] = 0;
        strcpy(&v11[11], " ");
        v11[13] = 0;
        *(_WORD *)&v11[14] = 0;
        *(_DWORD *)&v11[16] = 0;
        v12 = 0;
        v6 = sub_1DB70A020(i, &v8);
        *(_QWORD *)(i + 120) = v11[11];
        if (v6 < 0)
          break;
        if (++v4 == 8)
        {
          result = 0;
          *(_BYTE *)(a1 + 1216) = 1;
          *(_BYTE *)(a1 + 1080) = 1;
          return result;
        }
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_1DB737168(uint64_t a1, char *__src, unint64_t a3)
{
  unint64_t v3;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  int *v12;
  unint64_t j;

  v3 = a3;
  v4 = __src;
  v6 = *(_QWORD *)(a1 + 1736);
  if (v6)
  {
    v7 = 512 - v6;
    v8 = a3 - (512 - v6);
    if (a3 >= 512 - v6)
    {
      memcpy((void *)(a1 + 1224 + v6), __src, 512 - v6);
      v9 = 0;
      v10 = a1;
      do
      {
        sub_1DB70A074(v10, (int *)(a1 + 1224 + v9), 0x40uLL);
        v9 += 64;
        v10 += 136;
      }
      while (v9 != 512);
      v6 = 0;
      v4 += v7;
      v3 = v8;
    }
  }
  for (i = 0; i != 8; ++i)
  {
    if (v3 >= 0x200)
    {
      v12 = (int *)&v4[64 * i];
      for (j = v3; j > 0x1FF; j -= 512)
      {
        sub_1DB70A074(a1 + 136 * i, v12, 0x40uLL);
        v12 += 128;
      }
    }
  }
  if ((v3 & 0x1FF) != 0)
    memcpy((void *)(a1 + v6 + 1224), &v4[v3 & 0xFFFFFFFFFFFFFE00], v3 & 0x1FF);
  *(_QWORD *)(a1 + 1736) = v6 + (v3 & 0x1FF);
  return 0;
}

uint64_t sub_1DB737280(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t i;
  _BYTE v14[256];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!a2 || *(_QWORD *)(a1 + 1744) > a3)
    return 0xFFFFFFFFLL;
  v6 = 0;
  v7 = 0;
  v8 = v14;
  v9 = a1;
  do
  {
    v10 = *(_QWORD *)(a1 + 1736);
    if (v10 > v7)
    {
      v11 = v6 + v10;
      if (v11 >= 0x40)
        v12 = 64;
      else
        v12 = v11;
      sub_1DB70A074(v9, (int *)(a1 + 1224 + v7), v12);
    }
    sub_1DB70B688(v9, v8, 0x20uLL);
    v7 += 64;
    v8 += 32;
    v9 += 136;
    v6 -= 64;
  }
  while (v7 != 512);
  for (i = 0; i != 256; i += 32)
    sub_1DB70A074(a1 + 1088, (int *)&v14[i], 0x20uLL);
  return sub_1DB70B688(a1 + 1088, a2, *(_QWORD *)(a1 + 1744));
}

uint64_t sub_1DB7373A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  char *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  int v29;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  char *v35;
  time_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 *v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  char *v84;
  uint64_t v85;
  char v86;
  unsigned __int8 *v87;
  unsigned __int8 *v88;
  int v90;
  size_t v91;
  void *v92;
  size_t v93;
  uint64_t v94;
  unsigned __int8 *v95;
  uint64_t v96;
  char *v97;
  time_t v98;
  char *v99;
  _DWORD *v100;
  int v101;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  size_t __n;
  char *__endptr;

  v9 = **(_QWORD **)(a1 + 2472);
  __n = 0;
  v10 = sub_1DB6E2588(a1, 0xCuLL, &__n, a4, a5, a6, a7, a8);
  v16 = __n;
  if ((__n & 0x8000000000000000) != 0)
  {
LABEL_89:
    v99 = "Bad record header";
    goto LABEL_90;
  }
  v17 = (char *)v10;
  while (1)
  {
    if (!v17)
      return 1;
    v18 = sub_1DB737B68(v17, v16, "\r\n\r\n", 4);
    if (!v18)
      goto LABEL_89;
    v19 = v18 - (_QWORD)v17 + 4;
    v20 = sub_1DB6E6534((uint64_t)v17, v19);
    if (!v20)
      break;
    v21 = v20;
    if (v20 - 10001 <= 0xFFFFDD9E)
    {
      v103 = v20 / 0x2710uLL;
      v99 = "Unsupported record version: %u.%u";
      goto LABEL_90;
    }
    __endptr = 0;
    v22 = sub_1DB737B68(v17, v19, "\r\nContent-Length:", 17);
    if (!v22)
      goto LABEL_91;
    v23 = v22;
    v24 = (const char *)(v22 + 17);
    v25 = &v17[v19];
    v26 = sub_1DB737B68((void *)(v22 + 17), (size_t)&v17[v19 - 17 - v22], "\r\n", 2);
    if (!v26)
      goto LABEL_91;
    v27 = (char *)v26;
    if ((unint64_t)v24 < v26)
    {
      v28 = v26 - v23 - 17;
      while (1)
      {
        v29 = *(unsigned __int8 *)v24;
        if (v29 != 32 && v29 != 9)
          break;
        ++v24;
        if (!--v28)
        {
          v24 = (const char *)v26;
          break;
        }
      }
    }
    if (*(unsigned __int8 *)v24 - 48 > 9
      || (*__error() = 0, v31 = strtol(v24, &__endptr, 10), *__error())
      || __endptr != v27
      || v31 < 0)
    {
LABEL_91:
      v99 = "Bad content length";
LABEL_93:
      v100 = (_DWORD *)a1;
      v101 = 22;
      goto LABEL_94;
    }
    __endptr = 0;
    v32 = sub_1DB737B68(v17, v19, "\r\nWARC-Date:", 12);
    if (!v32
      || (v33 = (unsigned __int8 *)(v32 + 12),
          (v34 = sub_1DB737B68((void *)(v32 + 12), (size_t)&v25[-v32 - 12], "\r\n", 2)) == 0)
      || (v35 = (char *)v34, v36 = sub_1DB737CCC(v33, &__endptr), __endptr != v35)
      || (v38 = v36, v36 == -1))
    {
      v99 = "Bad record time";
      goto LABEL_93;
    }
    *(_DWORD *)(a1 + 16) = 983040;
    if (v21 != *(_DWORD *)(v9 + 40))
    {
      sub_1DB7303C0((void **)(v9 + 48), "WARC/%u.%u", v37, v11, v12, v13, v14, v15, (char *)(v21 / 0x2710uLL));
      *(_DWORD *)(v9 + 40) = v21;
    }
    v39 = sub_1DB737B68(v17, v19, "\r\nWARC-Type:", 12);
    if (!v39)
      goto LABEL_40;
    v46 = v39;
    v47 = (_QWORD *)(v39 + 12);
    v48 = sub_1DB737B68((void *)(v39 + 12), (size_t)&v25[-v39 - 12], "\r\n", 2);
    if (!v48)
      goto LABEL_40;
    if ((unint64_t)v47 < v48)
    {
      v49 = v48 - v46 - 12;
      while (1)
      {
        v50 = *(unsigned __int8 *)v47;
        if (v50 != 32 && v50 != 9)
          break;
        v47 = (_QWORD *)((char *)v47 + 1);
        if (!--v49)
        {
          v47 = (_QWORD *)v48;
          break;
        }
      }
    }
    if (v47 + 1 != (_QWORD *)v48 || *v47 != 0x656372756F736572 && *v47 != 0x65736E6F70736572)
    {
LABEL_40:
      *(_QWORD *)v9 = v31;
      *(_QWORD *)(v9 + 8) = 0;
      sub_1DB6E26F0(a1, v19, v40, v41, v42, v43, v44, v45);
      goto LABEL_41;
    }
    *(_QWORD *)v9 = v31;
    *(_QWORD *)(v9 + 8) = 0;
    v64 = sub_1DB737B68(v17, v19, "\r\nWARC-Target-URI:", 18);
    if (!v64
      || (v71 = v64,
          v72 = (unsigned __int8 *)(v64 + 18),
          (v73 = sub_1DB737B68((void *)(v64 + 18), (size_t)&v25[-v64 - 18], "\r\n", 2)) == 0))
    {
LABEL_64:
      v84 = 0;
      v85 = 0;
      v86 = 1;
      goto LABEL_79;
    }
    if ((unint64_t)v72 < v73)
    {
      v74 = v73 - v71 - 18;
      while (1)
      {
        v75 = *v72;
        if (v75 != 32 && v75 != 9)
          break;
        ++v72;
        if (!--v74)
        {
          v72 = (unsigned __int8 *)v73;
          break;
        }
      }
    }
    v77 = v73 - (_QWORD)v72;
    v78 = v73;
    v79 = sub_1DB737B68(v72, v73 - (_QWORD)v72, "://", 3);
    if (!v79)
      goto LABEL_78;
    v80 = v78;
    v81 = (char *)v72;
    v104 = v80;
    v105 = v79;
    if ((unint64_t)v72 < v80)
    {
      while (1)
      {
        v82 = *v81;
        if (*v81 < 0 ? __maskrune(v82, 0x4000uLL) : *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v82 + 60) & 0x4000)
          break;
        ++v81;
        if (!--v77)
          goto LABEL_63;
      }
LABEL_78:
      v84 = 0;
      v85 = 0;
      v86 = 1;
      goto LABEL_79;
    }
LABEL_63:
    if (v105 < (unint64_t)(v72 + 3))
      goto LABEL_64;
    v87 = (unsigned __int8 *)(v105 + 3);
    if (*(_DWORD *)v72 == 1701603686)
    {
      v88 = (unsigned __int8 *)v104;
    }
    else
    {
      v88 = (unsigned __int8 *)v104;
      if (*(_DWORD *)v72 != 1886680168 && (*(_WORD *)v72 != 29798 || v72[2] != 112))
        goto LABEL_64;
      do
      {
        if ((unint64_t)v87 >= v104)
          break;
        v90 = *v87++;
      }
      while (v90 != 47);
    }
    v91 = v88 - v87;
    if (v88 == v87 || *(v88 - 1) == 47)
      goto LABEL_78;
    v92 = *(void **)(v9 + 32);
    if (v91 + 1 > *(_QWORD *)(v9 + 24))
    {
      v93 = (v91 & 0xFFFFFFFFFFFFFFC0) + 64;
      *(_QWORD *)(v9 + 24) = v93;
      v92 = malloc_type_realloc(v92, v93, 0x5BA46B2AuLL);
      *(_QWORD *)(v9 + 32) = v92;
    }
    memcpy(v92, v87, v91);
    *(_BYTE *)(*(_QWORD *)(v9 + 32) + v91) = 0;
    v84 = *(char **)(v9 + 32);
    __endptr = 0;
    v94 = sub_1DB737B68(v17, v19, "\r\nLast-Modified:", 16);
    if (v94
      && (v95 = (unsigned __int8 *)(v94 + 16),
          (v96 = sub_1DB737B68((void *)(v94 + 16), (size_t)&v25[-v94 - 16], "\r\n", 2)) != 0)
      && (v97 = (char *)v96, v98 = sub_1DB737CCC(v95, &__endptr), __endptr == v97)
      && (v85 = v98, v98 != -1))
    {
      v86 = 0;
    }
    else
    {
      v86 = 0;
      v85 = v38;
    }
LABEL_79:
    sub_1DB6E26F0(a1, v19, v65, v66, v67, v68, v69, v70);
    if ((v86 & 1) == 0)
    {
      archive_entry_set_filetype(a2, 0x8000);
      archive_entry_copy_pathname(a2, v84);
      archive_entry_set_size(a2, v31);
      archive_entry_set_perm(a2, 420);
      archive_entry_set_ctime(a2, v38, 0);
      archive_entry_set_mtime(a2, v85, 0);
      return 0;
    }
LABEL_41:
    v58 = **(_QWORD ***)(a1 + 2472);
    sub_1DB6E26F0(a1, *v58 + 4, v52, v53, v54, v55, v56, v57);
    *v58 = 0;
    v58[1] = 0;
    v17 = (char *)sub_1DB6E2588(a1, 0xCuLL, &__n, v59, v60, v61, v62, v63);
    v16 = __n;
    if ((__n & 0x8000000000000000) != 0)
      goto LABEL_89;
  }
  v99 = "Invalid record version";
LABEL_90:
  v100 = (_DWORD *)a1;
  v101 = -1;
LABEL_94:
  archive_set_error(v100, v101, v99, v11, v12, v13, v14, v15, (char *)v103);
  return 4294967266;
}

