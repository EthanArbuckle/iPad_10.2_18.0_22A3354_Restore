void sub_20E230118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x212BB9B48](v11, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

std::vector<int> *AriSdk::TlvArray<unsigned char,3840ul>::operator=(std::vector<int> *this, __n128 *__c)
{
  const char *v4;
  void **v5;
  void *__p[2];
  char v8;

  if (__c->n128_u64[1] - __c->n128_u64[0] < 0xF01)
  {
    std::vector<char>::__move_assign((uint64_t)this, __c);
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v8 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v4, v5, 360, this, __c->n128_u64[1] - __c->n128_u64[0], 3840);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_20E230280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL AriSdk::ARI_CsiAwdsAddConfigReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiAwdsAddConfigReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -859144192;
}

AriSdk::MsgBase *AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK::ARI_CsiAwdsAddConfigRspCb_SDK(AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xCD4A8000, 0);
  *(_QWORD *)result = &off_24C8FC8D0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xCD4A8000, 0);
  *(_QWORD *)result = &off_24C8FC8D0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK::ARI_CsiAwdsAddConfigRspCb_SDK(AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C8FC8D0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C8FC8D0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK::~ARI_CsiAwdsAddConfigRspCb_SDK(AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C8FC8D0;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK::~ARI_CsiAwdsAddConfigRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK::pack(AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK::unpack(AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E2305C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -850755584;
}

AriSdk::MsgBase *AriSdk::ARI_CsiAwdsDeleteConfigReq_SDK::ARI_CsiAwdsDeleteConfigReq_SDK(AriSdk::ARI_CsiAwdsDeleteConfigReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xCCCB0000, 0);
  *(_QWORD *)result = &off_24C8FC908;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xCCCB0000, 0);
  *(_QWORD *)result = &off_24C8FC908;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiAwdsDeleteConfigReq_SDK::ARI_CsiAwdsDeleteConfigReq_SDK(AriSdk::ARI_CsiAwdsDeleteConfigReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C8FC908;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C8FC908;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiAwdsDeleteConfigReq_SDK::~ARI_CsiAwdsDeleteConfigReq_SDK(AriSdk::ARI_CsiAwdsDeleteConfigReq_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C8FC908;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiAwdsDeleteConfigReq_SDK::~ARI_CsiAwdsDeleteConfigReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiAwdsDeleteConfigReq_SDK::pack(AriSdk::ARI_CsiAwdsDeleteConfigReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiAwdsDeleteConfigReq_SDK::unpack(AriSdk::ARI_CsiAwdsDeleteConfigReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E230848(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiAwdsDeleteConfigReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiAwdsDeleteConfigReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -859111424;
}

AriSdk::MsgBase *AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK::ARI_CsiAwdsDeleteConfigRspCb_SDK(AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xCD4B0000, 0);
  *(_QWORD *)result = &off_24C8FC940;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xCD4B0000, 0);
  *(_QWORD *)result = &off_24C8FC940;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK::ARI_CsiAwdsDeleteConfigRspCb_SDK(AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C8FC940;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C8FC940;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK::~ARI_CsiAwdsDeleteConfigRspCb_SDK(AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C8FC940;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK::~ARI_CsiAwdsDeleteConfigRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK::pack(AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK::unpack(AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E230B90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -850722816;
}

AriSdk::MsgBase *AriSdk::ARI_CsiAwdsGlobalSwitchReq_SDK::ARI_CsiAwdsGlobalSwitchReq_SDK(AriSdk::ARI_CsiAwdsGlobalSwitchReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xCCC88000, 0);
  *(_QWORD *)result = &off_24C8FC978;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xCCC88000, 0);
  *(_QWORD *)result = &off_24C8FC978;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiAwdsGlobalSwitchReq_SDK::ARI_CsiAwdsGlobalSwitchReq_SDK(AriSdk::ARI_CsiAwdsGlobalSwitchReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C8FC978;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C8FC978;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_CsiAwdsGlobalSwitchReq_SDK::~ARI_CsiAwdsGlobalSwitchReq_SDK(AriSdk::ARI_CsiAwdsGlobalSwitchReq_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C8FC978;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4000313F17);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiAwdsGlobalSwitchReq_SDK::~ARI_CsiAwdsGlobalSwitchReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiAwdsGlobalSwitchReq_SDK::pack(AriSdk::ARI_CsiAwdsGlobalSwitchReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v6, 8uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiAwdsGlobalSwitchReq_SDK::unpack(AriSdk::ARI_CsiAwdsGlobalSwitchReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _QWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_QWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v5, 8, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<AriStatusTlv>::operator=<AriStatusTlv&,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4000313F17);
  return v3;
}

void sub_20E230EE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4000313F17);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiAwdsGlobalSwitchReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiAwdsGlobalSwitchReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -859275264;
}

AriSdk::MsgBase *AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK::ARI_CsiAwdsGlobalSwitchRspCb_SDK(AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xCD488000, 0);
  *(_QWORD *)result = &off_24C8FC9B0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xCD488000, 0);
  *(_QWORD *)result = &off_24C8FC9B0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK::ARI_CsiAwdsGlobalSwitchRspCb_SDK(AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C8FC9B0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C8FC9B0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK::~ARI_CsiAwdsGlobalSwitchRspCb_SDK(AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C8FC9B0;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK::~ARI_CsiAwdsGlobalSwitchRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK::pack(AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK::unpack(AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E231254(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -850886656;
}

AriSdk::MsgBase *AriSdk::ARI_CsiAwdsMetricSubSwitchReq_SDK::ARI_CsiAwdsMetricSubSwitchReq_SDK(AriSdk::ARI_CsiAwdsMetricSubSwitchReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xCCCD0000, 0);
  *(_QWORD *)result = &off_24C8FC9E8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xCCCD0000, 0);
  *(_QWORD *)result = &off_24C8FC9E8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiAwdsMetricSubSwitchReq_SDK::ARI_CsiAwdsMetricSubSwitchReq_SDK(AriSdk::ARI_CsiAwdsMetricSubSwitchReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C8FC9E8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C8FC9E8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_CsiAwdsMetricSubSwitchReq_SDK::~ARI_CsiAwdsMetricSubSwitchReq_SDK(AriSdk::ARI_CsiAwdsMetricSubSwitchReq_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C8FC9E8;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiAwdsMetricSubSwitchReq_SDK::~ARI_CsiAwdsMetricSubSwitchReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiAwdsMetricSubSwitchReq_SDK::pack(AriSdk::ARI_CsiAwdsMetricSubSwitchReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiAwdsMetricSubSwitchReq_SDK::unpack(AriSdk::ARI_CsiAwdsMetricSubSwitchReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E2315A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiAwdsMetricSubSwitchReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiAwdsMetricSubSwitchReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -858980352;
}

AriSdk::MsgBase *AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK::ARI_CsiAwdsMetricSubSwitchRspCb_SDK(AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xCD4D0000, 0);
  *(_QWORD *)result = &off_24C8FCA20;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xCD4D0000, 0);
  *(_QWORD *)result = &off_24C8FCA20;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK::ARI_CsiAwdsMetricSubSwitchRspCb_SDK(AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C8FCA20;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C8FCA20;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK::~ARI_CsiAwdsMetricSubSwitchRspCb_SDK(AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C8FCA20;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK::~ARI_CsiAwdsMetricSubSwitchRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK::pack(AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK::unpack(AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E2318F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -850591744;
}

double AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK::ARI_CsiAwdsMetricSubTriggerInd_SDK(AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0xCDCD8000, 0);
  *(_QWORD *)v1 = &off_24C8FCA58;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0xCDCD8000, 0);
  *(_QWORD *)v1 = &off_24C8FCA58;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  return result;
}

double AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK::ARI_CsiAwdsMetricSubTriggerInd_SDK(AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C8FCA58;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C8FCA58;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  return result;
}

void AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK::~ARI_CsiAwdsMetricSubTriggerInd_SDK(AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_24C8FCA58;
  v2 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4000313F17);
  v4 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  v5 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  v6 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK::~ARI_CsiAwdsMetricSubTriggerInd_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK::pack(AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 4uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v8, 4uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v9, 8uLL, 0), !(_DWORD)result))
          {
            v10 = (const void *)*((_QWORD *)this + 13);
            if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v10, 4uLL, 0), !(_DWORD)result))
            {
              result = 0;
              *a2 = (AriMsg *)*((_QWORD *)this + 6);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK::unpack(AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _QWORD *v8;
  _DWORD *v9;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;

  v16 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v16, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v16;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v15 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v15, 0);
  if ((_DWORD)v3 || !v15)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v14 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 4, &v14, 0);
  if ((_DWORD)v3 || !v14)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  }
  v13 = 0;
  v7 = (_DWORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v7, 4, &v13, 0);
  if ((_DWORD)v3 || !v13)
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 11, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  }
  v12 = 0;
  v8 = (_QWORD *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v8, 8, &v12, 0);
  if ((_DWORD)v3 || !v12)
  {
    MEMORY[0x212BB9B60](v8, 0x1000C4000313F17);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<AriStatusTlv>::operator=<AriStatusTlv&,void>((uint64_t *)this + 12, v8);
    MEMORY[0x212BB9B60](v8, 0x1000C4000313F17);
  }
  v11 = 0;
  v9 = (_DWORD *)operator new();
  *v9 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v9, 4, &v11, 0);
  if (!(_DWORD)v3 && v11)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 13, v9);
  MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
  return v3;
}

void sub_20E231FC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK::hasDeclaredGmid(AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -842170368;
}

double AriSdk::ARI_CsiAwdsMetricSubInd_SDK::ARI_CsiAwdsMetricSubInd_SDK(AriSdk::ARI_CsiAwdsMetricSubInd_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0xCDCE0000, 0);
  *(_QWORD *)v1 = &off_24C8FCA90;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0xCDCE0000, 0);
  *(_QWORD *)v1 = &off_24C8FCA90;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  return result;
}

double AriSdk::ARI_CsiAwdsMetricSubInd_SDK::ARI_CsiAwdsMetricSubInd_SDK(AriSdk::ARI_CsiAwdsMetricSubInd_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C8FCA90;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C8FCA90;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  return result;
}

void AriSdk::ARI_CsiAwdsMetricSubInd_SDK::~ARI_CsiAwdsMetricSubInd_SDK(AriSdk::ARI_CsiAwdsMetricSubInd_SDK *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)this = &off_24C8FCA90;
  v2 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = (void *)*((_QWORD *)this + 18);
  if (v3)
  {
    *((_QWORD *)this + 19) = v3;
    operator delete(v3);
  }
  v4 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4077774924);
  v5 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4077774924);
  v6 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C4077774924);
  v7 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C4077774924);
  v8 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v8)
    MEMORY[0x212BB9B60](v8, 0x1000C40BDFB0063);
  v9 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v9)
    MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
  v10 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v10)
    MEMORY[0x212BB9B60](v10, 0x1000C4052888210);
  v11 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v11)
    MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
  v12 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v12)
    MEMORY[0x212BB9B60](v12, 0x1000C4052888210);
  v13 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v13)
    MEMORY[0x212BB9B60](v13, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiAwdsMetricSubInd_SDK::~ARI_CsiAwdsMetricSubInd_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiAwdsMetricSubInd_SDK::pack(AriSdk::ARI_CsiAwdsMetricSubInd_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  _BYTE *v15;
  _BYTE *v16;
  const void *v17;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 4uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v8, 4uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v9, 4uLL, 0), !(_DWORD)result))
          {
            v10 = (const void *)*((_QWORD *)this + 13);
            if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v10, 2uLL, 0), !(_DWORD)result))
            {
              v11 = (const void *)*((_QWORD *)this + 14);
              if (!v11 || (result = AriMsg::pack(*((AriMsg **)this + 6), 7, v11, 1uLL, 0), !(_DWORD)result))
              {
                v12 = (const void *)*((_QWORD *)this + 15);
                if (!v12 || (result = AriMsg::pack(*((AriMsg **)this + 6), 8, v12, 1uLL, 0), !(_DWORD)result))
                {
                  v13 = (const void *)*((_QWORD *)this + 16);
                  if (!v13 || (result = AriMsg::pack(*((AriMsg **)this + 6), 9, v13, 1uLL, 0), !(_DWORD)result))
                  {
                    v14 = (const void *)*((_QWORD *)this + 17);
                    if (!v14 || (result = AriMsg::pack(*((AriMsg **)this + 6), 10, v14, 1uLL, 0), !(_DWORD)result))
                    {
                      v15 = (_BYTE *)*((_QWORD *)this + 18);
                      if (!v15
                        || (v16 = (_BYTE *)*((_QWORD *)this + 19), v15 == v16)
                        || (result = AriMsg::pack(*((AriMsg **)this + 6), 11, v15, v16 - v15, 0), !(_DWORD)result))
                      {
                        v17 = (const void *)*((_QWORD *)this + 21);
                        if (!v17
                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 12, v17, 4uLL, 0), !(_DWORD)result))
                        {
                          result = 0;
                          *a2 = (AriMsg *)*((_QWORD *)this + 6);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiAwdsMetricSubInd_SDK::unpack(AriSdk::ARI_CsiAwdsMetricSubInd_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _WORD *v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  void *v14;
  _DWORD *v15;
  __n128 __p;
  uint64_t v18;
  size_t __sz;
  BOOL v20;

  __p.n128_u8[0] = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = __p.n128_u8[0] == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v7 = (_DWORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v7, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 11, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v8 = (_DWORD *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v8, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 12, v8);
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v9 = (_WORD *)operator new();
  *v9 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v9, 2, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v9, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 13, v9);
    MEMORY[0x212BB9B60](v9, 0x1000C40BDFB0063);
  }
  __p.n128_u8[0] = 0;
  v10 = (_BYTE *)operator new();
  *v10 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 7, v10, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v10, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 14, v10);
    MEMORY[0x212BB9B60](v10, 0x1000C4077774924);
  }
  __p.n128_u8[0] = 0;
  v11 = (_BYTE *)operator new();
  *v11 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 8, v11, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v11, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 15, v11);
    MEMORY[0x212BB9B60](v11, 0x1000C4077774924);
  }
  __p.n128_u8[0] = 0;
  v12 = (_BYTE *)operator new();
  *v12 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 9, v12, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v12, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 16, v12);
    MEMORY[0x212BB9B60](v12, 0x1000C4077774924);
  }
  __p.n128_u8[0] = 0;
  v13 = (_BYTE *)operator new();
  *v13 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 10, v13, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v13, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 17, v13);
    MEMORY[0x212BB9B60](v13, 0x1000C4077774924);
  }
  v20 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v14 = (void *)operator new[]();
  bzero(v14, 0xF00uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 11, v14, 3840, &v20, &__sz);
  if ((_DWORD)v3 || !v20)
  {
    MEMORY[0x212BB9B48](v14, 0x1000C8077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v18 = 0;
    __p = 0uLL;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v14, (uint64_t)v14 + __sz, __sz);
    AriSdk::TlvArray<unsigned char,3840ul>::operator=((std::vector<int> *)this + 6, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    MEMORY[0x212BB9B48](v14, 0x1000C8077774924);
  }
  __p.n128_u8[0] = 0;
  v15 = (_DWORD *)operator new();
  *v15 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 12, v15, 4, (BOOL *)&__p, 0);
  if (!(_DWORD)v3 && __p.n128_u8[0])
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 21, v15);
  MEMORY[0x212BB9B60](v15, 0x1000C4052888210);
  return v3;
}

void sub_20E232C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiAwdsMetricSubInd_SDK::hasDeclaredGmid(AriSdk::ARI_CsiAwdsMetricSubInd_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -842137600;
}

AriSdk::MsgBase *AriSdk::ARI_CsiAwdsPiiLocConfigReq_SDK::ARI_CsiAwdsPiiLocConfigReq_SDK(AriSdk::ARI_CsiAwdsPiiLocConfigReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xCCC90000, 0);
  *(_QWORD *)result = &off_24C8FCAC8;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xCCC90000, 0);
  *(_QWORD *)result = &off_24C8FCAC8;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiAwdsPiiLocConfigReq_SDK::ARI_CsiAwdsPiiLocConfigReq_SDK(AriSdk::ARI_CsiAwdsPiiLocConfigReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C8FCAC8;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C8FCAC8;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiAwdsPiiLocConfigReq_SDK::~ARI_CsiAwdsPiiLocConfigReq_SDK(AriSdk::ARI_CsiAwdsPiiLocConfigReq_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C8FCAC8;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4077774924);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4077774924);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiAwdsPiiLocConfigReq_SDK::~ARI_CsiAwdsPiiLocConfigReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiAwdsPiiLocConfigReq_SDK::pack(AriSdk::ARI_CsiAwdsPiiLocConfigReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 1uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 1uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiAwdsPiiLocConfigReq_SDK::unpack(AriSdk::ARI_CsiAwdsPiiLocConfigReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _BYTE *v5;
  _BYTE *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_BYTE *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 1, &v9, 0);
  if ((_DWORD)v3 || !v9)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4077774924);
  }
  v8 = 0;
  v6 = (_BYTE *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 1, &v8, 0);
  if (!(_DWORD)v3 && v8)
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 10, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C4077774924);
  return v3;
}

void sub_20E2330D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4077774924);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiAwdsPiiLocConfigReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiAwdsPiiLocConfigReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -859242496;
}

AriSdk::MsgBase *AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK::ARI_CsiAwdsPiiLocConfigRspCb_SDK(AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xCD490000, 0);
  *(_QWORD *)result = &off_24C8FCB00;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xCD490000, 0);
  *(_QWORD *)result = &off_24C8FCB00;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK::ARI_CsiAwdsPiiLocConfigRspCb_SDK(AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C8FCB00;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C8FCB00;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK::~ARI_CsiAwdsPiiLocConfigRspCb_SDK(AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C8FCB00;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK::~ARI_CsiAwdsPiiLocConfigRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK::pack(AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK::unpack(AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E233440(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -850853888;
}

double AriSdk::ARI_CsiAwdsQueryReq_SDK::ARI_CsiAwdsQueryReq_SDK(AriSdk::ARI_CsiAwdsQueryReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0xCCCC8000, 0);
  *(_QWORD *)v1 = &off_24C8FCB38;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_QWORD *)v1 + 14) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0xCCCC8000, 0);
  *(_QWORD *)v1 = &off_24C8FCB38;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_QWORD *)v1 + 14) = 0;
  return result;
}

double AriSdk::ARI_CsiAwdsQueryReq_SDK::ARI_CsiAwdsQueryReq_SDK(AriSdk::ARI_CsiAwdsQueryReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C8FCB38;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_QWORD *)v3 + 14) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C8FCB38;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_QWORD *)v3 + 14) = 0;
  return result;
}

void AriSdk::ARI_CsiAwdsQueryReq_SDK::~ARI_CsiAwdsQueryReq_SDK(AriSdk::ARI_CsiAwdsQueryReq_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = &off_24C8FCB38;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  v5 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  v6 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  v7 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  v8 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v8)
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiAwdsQueryReq_SDK::~ARI_CsiAwdsQueryReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiAwdsQueryReq_SDK::pack(AriSdk::ARI_CsiAwdsQueryReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 4uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v8, 4uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v9, 4uLL, 0), !(_DWORD)result))
          {
            v10 = (const void *)*((_QWORD *)this + 13);
            if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v10, 4uLL, 0), !(_DWORD)result))
            {
              v11 = (const void *)*((_QWORD *)this + 14);
              if (!v11 || (result = AriMsg::pack(*((AriMsg **)this + 6), 7, v11, 4uLL, 0), !(_DWORD)result))
              {
                result = 0;
                *a2 = (AriMsg *)*((_QWORD *)this + 6);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiAwdsQueryReq_SDK::unpack(AriSdk::ARI_CsiAwdsQueryReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;

  v18 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v18, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v18;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v17 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v17, 0);
  if ((_DWORD)v3 || !v17)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v16 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 4, &v16, 0);
  if ((_DWORD)v3 || !v16)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  }
  v15 = 0;
  v7 = (_DWORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v7, 4, &v15, 0);
  if ((_DWORD)v3 || !v15)
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 11, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  }
  v14 = 0;
  v8 = (_DWORD *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v8, 4, &v14, 0);
  if ((_DWORD)v3 || !v14)
  {
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 12, v8);
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  }
  v13 = 0;
  v9 = (_DWORD *)operator new();
  *v9 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v9, 4, &v13, 0);
  if ((_DWORD)v3 || !v13)
  {
    MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 13, v9);
    MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
  }
  v12 = 0;
  v10 = (_DWORD *)operator new();
  *v10 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 7, v10, 4, &v12, 0);
  if (!(_DWORD)v3 && v12)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 14, v10);
  MEMORY[0x212BB9B60](v10, 0x1000C4052888210);
  return v3;
}

void sub_20E233BEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiAwdsQueryReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiAwdsQueryReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -859013120;
}

AriSdk::MsgBase *AriSdk::ARI_CsiAwdsQueryRspCb_SDK::ARI_CsiAwdsQueryRspCb_SDK(AriSdk::ARI_CsiAwdsQueryRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xCD4C8000, 0);
  *(_QWORD *)result = &off_24C8FCB70;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xCD4C8000, 0);
  *(_QWORD *)result = &off_24C8FCB70;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiAwdsQueryRspCb_SDK::ARI_CsiAwdsQueryRspCb_SDK(AriSdk::ARI_CsiAwdsQueryRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C8FCB70;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C8FCB70;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_CsiAwdsQueryRspCb_SDK::~ARI_CsiAwdsQueryRspCb_SDK(AriSdk::ARI_CsiAwdsQueryRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C8FCB70;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiAwdsQueryRspCb_SDK::~ARI_CsiAwdsQueryRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiAwdsQueryRspCb_SDK::pack(AriSdk::ARI_CsiAwdsQueryRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiAwdsQueryRspCb_SDK::unpack(AriSdk::ARI_CsiAwdsQueryRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E233F70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiAwdsQueryRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_CsiAwdsQueryRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -850624512;
}

uint64_t ARI_CsiIpcCtrIPathTestDataReqOp_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiIpcCtrIPathTestDataReqOp_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiIpcCtrIPathTestStaticsReqParams_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiIpcCtrIPathTestStaticsReqParams_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiIpcCtrIPathTestStaticsRspCbParams_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiIpcCtrIPathTestStaticsRspCbParams_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiIpcCtrlPathTestDataIndCbParam_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiIpcCtrlPathTestDataIndCbParam_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiIpcCtrlPathTestDataOpRspCbParam_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiIpcCtrlPathTestDataOpRspCbParam_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiIpcCtrlPathTestDataSendReqParam_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiIpcCtrlPathTestDataSendReqParam_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiIpcCtrlPathTestDataSendRspCbParam_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiIpcCtrlPathTestDataSendRspCbParam_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiIpcCtrlPathTestSrcCfgReqParams_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiIpcCtrlPathTestSrcCfgReqParams_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiIpcCtrlPathTestSrcCfgRspCbParam_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiIpcCtrlPathTestSrcCfgRspCbParam_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIAccFreqReportingType_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIAccFreqReportingType_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIAccHoppingFreqBandwidthInfo_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIAccHoppingFreqBandwidthInfo_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIAccNeighborFreqBandwidthInfo_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIAccNeighborFreqBandwidthInfo_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIAccRPLMNFreqBandwidthInfo_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIAccRPLMNFreqBandwidthInfo_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIAccSearchFreqBandwidthInfo_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIAccSearchFreqBandwidthInfo_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIAccServingDLFreqBandwidthInfo_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIAccServingDLFreqBandwidthInfo_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIAccServingDLFreqBandwidthInfo_ext_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIAccServingDLFreqBandwidthInfo_ext_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIAccServingULFreqBandwidthInfo_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIAccServingULFreqBandwidthInfo_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIAccServingULFreqBandwidthInfo_ext_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIAccServingULFreqBandwidthInfo_ext_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICSGIndicatorT_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICSGIndicatorT_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICSGInfoT_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICSGInfoT_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICdma1xNeighborCellInfo_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICdma1xNeighborCellInfo_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICdmaEvdoNeighborCellInfo_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICdmaEvdoNeighborCellInfo_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICellResponseT_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICellResponseT_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICnDomain_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICnDomain_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIGsmCellInfoT_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIGsmCellInfoT_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIGsmNeighborCellInfoT_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIGsmNeighborCellInfoT_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBILteCellInfoR15_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBILteCellInfoR15_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBILteCellInfoR15_V2_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBILteCellInfoR15_V2_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBILteCellInfoT_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBILteCellInfoT_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBILteCellInfoV1T_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBILteCellInfoV1T_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBILteNeighborCellInfoT_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBILteNeighborCellInfoT_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBILteNeighborCellInfoV1T_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBILteNeighborCellInfoV1T_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBILteNeighborCellInfoV2T_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBILteNeighborCellInfoV2T_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetAreaType_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetAreaType_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetBand_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetBand_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetCdma1xCellInfoParam_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetCdma1xCellInfoParam_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetCdma1xCellInfo_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetCdma1xCellInfo_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetCdma1xRadioSignalReportingConfiguration_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetCdma1xRadioSignalReportingConfiguration_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetCdma1xcellInfoList_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetCdma1xcellInfoList_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetCdmaEvdoCellInfoParam_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetCdmaEvdoCellInfoParam_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetCdmaEvdoCellInfo_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetCdmaEvdoCellInfo_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetCdmaEvdoRadioSignalReportingConfiguration_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetCdmaEvdoRadioSignalReportingConfiguration_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetCdmaEvdocellInfoList_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetCdmaEvdocellInfoList_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetCellBBSlocInfo_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetCellBBSlocInfo_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetCellId_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetCellId_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetCellId_V1_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetCellId_V1_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetCellInfoIndParam_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetCellInfoIndParam_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetCellLteAcBarringStatusIndTrigger_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetCellLteAcBarringStatusIndTrigger_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetCellLteAcBarringStatusInfo_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetCellLteAcBarringStatusInfo_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetEmergencyCellInfoResult_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetEmergencyCellInfoResult_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetEmergencyCellSearchFailCause_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetEmergencyCellSearchFailCause_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetEmergencyCellSearchParameter_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetEmergencyCellSearchParameter_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetEmergencyPLMNAvoidanceList_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetEmergencyPLMNAvoidanceList_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetEmergencySearchModePref_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetEmergencySearchModePref_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetGSMRadioSignalReportingConfiguration_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetGSMRadioSignalReportingConfiguration_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetGsmcellInfoList_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetGsmcellInfoList_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetLTERadioSignalReportingConfiguration_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetLTERadioSignalReportingConfiguration_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetLac_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetLac_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetLteCellAcBarringInfo_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetLteCellAcBarringInfo_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetLtecellInfoList_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetLtecellInfoList_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetNRCellInfoListV2_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetNRCellInfoListV2_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetNRCellInfoList_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetNRCellInfoList_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetNRRadioSignalReportingConfiguration_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetNRRadioSignalReportingConfiguration_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetNetworkOpMode_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetNetworkOpMode_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetRadioSignalSecondaryRatInfo_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetRadioSignalSecondaryRatInfo_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetSignalQualityMax_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetSignalQualityMax_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetSignalQuality_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetSignalQuality_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetSignalScellInfo_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetSignalScellInfo_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetSignalScellInfo_V1_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetSignalScellInfo_V1_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetSignalStrenghtMax_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetSignalStrenghtMax_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetSignalStrength_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetSignalStrength_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetSingleShotReportingReqType_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetSingleShotReportingReqType_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetTac_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetTac_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetTac_V1_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetTac_V1_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetTimerId_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetTimerId_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetUMTSRadioSignalReportingConfiguration_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetUMTSRadioSignalReportingConfiguration_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetUmtscellInfoList_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetUmtscellInfoList_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINrCellInfoT_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINrCellInfoT_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINrCellInfoT_V2_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINrCellInfoT_V2_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINrNeighborCellInfoT_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINrNeighborCellInfoT_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINrNeighborCellInfoT_V2_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINrNeighborCellInfoT_V2_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIRatInfoExtension_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIRatInfoExtension_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBITdsCellInfoT_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBITdsCellInfoT_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBITdsNeighborCellInfoT_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBITdsNeighborCellInfoT_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIUmtsCellInfoT_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIUmtsCellInfoT_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIUmtsNeighborCellInfoT_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIUmtsNeighborCellInfoT_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

double AriSdk::ARI_IBIOgrsActivationReq_SDK::ARI_IBIOgrsActivationReq_SDK(AriSdk::ARI_IBIOgrsActivationReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x74808000u, 0);
  *(_QWORD *)v1 = &off_24C901D20;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_QWORD *)v1 + 20) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x74808000u, 0);
  *(_QWORD *)v1 = &off_24C901D20;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_QWORD *)v1 + 20) = 0;
  return result;
}

double AriSdk::ARI_IBIOgrsActivationReq_SDK::ARI_IBIOgrsActivationReq_SDK(AriSdk::ARI_IBIOgrsActivationReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C901D20;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_QWORD *)v3 + 20) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C901D20;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_QWORD *)v3 + 20) = 0;
  return result;
}

void AriSdk::ARI_IBIOgrsActivationReq_SDK::~ARI_IBIOgrsActivationReq_SDK(AriSdk::ARI_IBIOgrsActivationReq_SDK *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = &off_24C901D20;
  v2 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = (void *)*((_QWORD *)this + 17);
  if (v3)
  {
    *((_QWORD *)this + 18) = v3;
    operator delete(v3);
  }
  v4 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4077774924);
  v5 = (void *)*((_QWORD *)this + 13);
  if (v5)
  {
    *((_QWORD *)this + 14) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 10);
  if (v6)
  {
    *((_QWORD *)this + 11) = v6;
    operator delete(v6);
  }
  v7 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  v8 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v8)
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsActivationReq_SDK::~ARI_IBIOgrsActivationReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsActivationReq_SDK::pack(AriSdk::ARI_IBIOgrsActivationReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  _BYTE *v7;
  _BYTE *v8;
  BOOL v9;
  _BYTE *v10;
  _BYTE *v11;
  const void *v12;
  _BYTE *v13;
  _BYTE *v14;
  const void *v15;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (_BYTE *)*((_QWORD *)this + 10);
      v8 = (_BYTE *)*((_QWORD *)this + 11);
      v9 = !v7 || v7 == v8;
      if (v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, v8 - v7, 0), !(_DWORD)result))
      {
        v10 = (_BYTE *)*((_QWORD *)this + 13);
        if (!v10
          || (v11 = (_BYTE *)*((_QWORD *)this + 14), v10 == v11)
          || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v10, v11 - v10, 0), !(_DWORD)result))
        {
          v12 = (const void *)*((_QWORD *)this + 16);
          if (!v12 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v12, 1uLL, 0), !(_DWORD)result))
          {
            v13 = (_BYTE *)*((_QWORD *)this + 17);
            if (!v13
              || (v14 = (_BYTE *)*((_QWORD *)this + 18), v13 == v14)
              || (result = AriMsg::pack(*((AriMsg **)this + 6), 7, v13, v14 - v13, 0), !(_DWORD)result))
            {
              v15 = (const void *)*((_QWORD *)this + 20);
              if (!v15 || (result = AriMsg::pack(*((AriMsg **)this + 6), 8, v15, 4uLL, 0), !(_DWORD)result))
              {
                result = 0;
                *a2 = (AriMsg *)*((_QWORD *)this + 6);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsActivationReq_SDK::unpack(AriSdk::ARI_IBIOgrsActivationReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _BYTE *v10;
  void *v11;
  char *v12;
  char *v13;
  size_t v14;
  size_t v15;
  void **v16;
  unint64_t v17;
  const char *v18;
  __n128 *p_p;
  void *v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  size_t __sz;
  BOOL v26;
  __n128 __p;
  uint64_t v28;

  __p.n128_u8[0] = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = __p.n128_u8[0] == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v6 = (_DWORD *)operator new();
    *v6 = *v5;
    v7 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v6;
    if (v7)
      MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v26 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v8 = (_QWORD *)operator new[]();
  *v8 = 0;
  v8[1] = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v8, 16, &v26, &__sz);
  if ((_DWORD)v3 || !v26)
  {
    MEMORY[0x212BB9B48](v8, 0x1000C8077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v28 = 0;
    __p = 0uLL;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v8, (uint64_t)v8 + __sz, __sz);
    AriSdk::TlvArray<unsigned char,16ul>::operator=((std::vector<int> *)((char *)this + 80), &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    MEMORY[0x212BB9B48](v8, 0x1000C8077774924);
  }
  v26 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v9 = (_QWORD *)operator new[]();
  *v9 = 0;
  v9[1] = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v9, 16, &v26, &__sz);
  if ((_DWORD)v3 || !v26)
  {
    MEMORY[0x212BB9B48](v9, 0x1000C8077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v28 = 0;
    __p = 0uLL;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v9, (uint64_t)v9 + __sz, __sz);
    AriSdk::TlvArray<unsigned char,16ul>::operator=((std::vector<int> *)((char *)this + 104), &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    MEMORY[0x212BB9B48](v9, 0x1000C8077774924);
  }
  __p.n128_u8[0] = 0;
  v10 = (_BYTE *)operator new();
  *v10 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v10, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v10, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 16, v10);
    MEMORY[0x212BB9B60](v10, 0x1000C4077774924);
  }
  v26 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v11 = (void *)operator new[]();
  bzero(v11, 0x680uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 7, v11, 1664, &v26, &__sz);
  if ((_DWORD)v3 || !v26)
  {
    MEMORY[0x212BB9B48](v11, 0x1000C803884A0CCLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    if (__sz >= 0x34)
    {
      v14 = __sz / 0x34;
      v15 = 52 * (__sz / 0x34);
      v12 = (char *)operator new(v15);
      v13 = &v12[52 * v14];
      memcpy(v12, v11, v15);
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
    v16 = (void **)((char *)this + 136);
    v17 = 0x4EC4EC4EC4EC4EC5 * ((v13 - v12) >> 2);
    if (v17 < 0x21)
    {
      v20 = *v16;
      if (*v16)
      {
        *((_QWORD *)this + 18) = v20;
        operator delete(v20);
        *v16 = 0;
        *((_QWORD *)this + 18) = 0;
        *((_QWORD *)this + 19) = 0;
      }
      *((_QWORD *)this + 17) = v12;
      *((_QWORD *)this + 18) = v13;
      *((_QWORD *)this + 19) = v13;
    }
    else
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)&__p);
      if (v28 >= 0)
        p_p = &__p;
      else
        p_p = (__n128 *)__p.n128_u64[0];
      Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v18, p_p, 360, (char *)this + 136, v17, 32);
      if (SHIBYTE(v28) < 0)
        operator delete((void *)__p.n128_u64[0]);
      if (v12)
        operator delete(v12);
    }
    MEMORY[0x212BB9B48](v11, 0x1000C803884A0CCLL);
  }
  __p.n128_u8[0] = 0;
  v21 = (_DWORD *)operator new();
  *v21 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 8, v21, 4, (BOOL *)&__p, 0);
  if (!(_DWORD)v3)
  {
    if (__p.n128_u8[0])
    {
      v22 = (_DWORD *)operator new();
      *v22 = *v21;
      v23 = *((_QWORD *)this + 20);
      *((_QWORD *)this + 20) = v22;
      if (v23)
        MEMORY[0x212BB9B60](v23, 0x1000C4052888210);
    }
  }
  MEMORY[0x212BB9B60](v21, 0x1000C4052888210);
  return v3;
}

void sub_20E235BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void *v22;

  if (a21 < 0)
    operator delete(__p);
  if (v22)
    operator delete(v22);
  MEMORY[0x212BB9B48](v21, 0x1000C803884A0CCLL);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsActivationReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsActivationReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1954578432;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsActivationRspCb_SDK::ARI_IBIOgrsActivationRspCb_SDK(AriSdk::ARI_IBIOgrsActivationRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75008000u, 0);
  *(_QWORD *)result = &off_24C901D58;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75008000u, 0);
  *(_QWORD *)result = &off_24C901D58;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsActivationRspCb_SDK::ARI_IBIOgrsActivationRspCb_SDK(AriSdk::ARI_IBIOgrsActivationRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C901D58;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C901D58;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIOgrsActivationRspCb_SDK::~ARI_IBIOgrsActivationRspCb_SDK(AriSdk::ARI_IBIOgrsActivationRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C901D58;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsActivationRspCb_SDK::~ARI_IBIOgrsActivationRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsActivationRspCb_SDK::pack(AriSdk::ARI_IBIOgrsActivationRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 4uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsActivationRspCb_SDK::unpack(AriSdk::ARI_IBIOgrsActivationRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v9, 0);
  if ((_DWORD)v3 || !v9)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v8 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 4, &v8, 0);
  if (!(_DWORD)v3 && v8)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  return v3;
}

void sub_20E2360BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsActivationRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsActivationRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1962967040;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsDeactivationReq_SDK::ARI_IBIOgrsDeactivationReq_SDK(AriSdk::ARI_IBIOgrsDeactivationReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x74810000u, 0);
  *(_QWORD *)result = &off_24C901D90;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x74810000u, 0);
  *(_QWORD *)result = &off_24C901D90;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsDeactivationReq_SDK::ARI_IBIOgrsDeactivationReq_SDK(AriSdk::ARI_IBIOgrsDeactivationReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C901D90;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C901D90;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIOgrsDeactivationReq_SDK::~ARI_IBIOgrsDeactivationReq_SDK(AriSdk::ARI_IBIOgrsDeactivationReq_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C901D90;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsDeactivationReq_SDK::~ARI_IBIOgrsDeactivationReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsDeactivationReq_SDK::pack(AriSdk::ARI_IBIOgrsDeactivationReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsDeactivationReq_SDK::unpack(AriSdk::ARI_IBIOgrsDeactivationReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E236344(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsDeactivationReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsDeactivationReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1954611200;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsDeactivationRspCb_SDK::ARI_IBIOgrsDeactivationRspCb_SDK(AriSdk::ARI_IBIOgrsDeactivationRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75010000u, 0);
  *(_QWORD *)result = &off_24C901DC8;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75010000u, 0);
  *(_QWORD *)result = &off_24C901DC8;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsDeactivationRspCb_SDK::ARI_IBIOgrsDeactivationRspCb_SDK(AriSdk::ARI_IBIOgrsDeactivationRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C901DC8;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C901DC8;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIOgrsDeactivationRspCb_SDK::~ARI_IBIOgrsDeactivationRspCb_SDK(AriSdk::ARI_IBIOgrsDeactivationRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C901DC8;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsDeactivationRspCb_SDK::~ARI_IBIOgrsDeactivationRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsDeactivationRspCb_SDK::pack(AriSdk::ARI_IBIOgrsDeactivationRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 4uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsDeactivationRspCb_SDK::unpack(AriSdk::ARI_IBIOgrsDeactivationRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v9, 0);
  if ((_DWORD)v3 || !v9)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v8 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 4, &v8, 0);
  if (!(_DWORD)v3 && v8)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  return v3;
}

void sub_20E236770(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsDeactivationRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsDeactivationRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1962999808;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsDeactivationIndCb_SDK::ARI_IBIOgrsDeactivationIndCb_SDK(AriSdk::ARI_IBIOgrsDeactivationIndCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75810000u, 0);
  *(_QWORD *)result = &off_24C901E00;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75810000u, 0);
  *(_QWORD *)result = &off_24C901E00;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsDeactivationIndCb_SDK::ARI_IBIOgrsDeactivationIndCb_SDK(AriSdk::ARI_IBIOgrsDeactivationIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C901E00;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C901E00;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBIOgrsDeactivationIndCb_SDK::~ARI_IBIOgrsDeactivationIndCb_SDK(AriSdk::ARI_IBIOgrsDeactivationIndCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C901E00;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsDeactivationIndCb_SDK::~ARI_IBIOgrsDeactivationIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsDeactivationIndCb_SDK::pack(AriSdk::ARI_IBIOgrsDeactivationIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsDeactivationIndCb_SDK::unpack(AriSdk::ARI_IBIOgrsDeactivationIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v9, 0);
  if (!(_DWORD)v3 && v9)
  {
    v6 = (_DWORD *)operator new();
    *v6 = *v5;
    v7 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v6;
    if (v7)
      MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  }
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E236B00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsDeactivationIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsDeactivationIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1971388416;
}

double AriSdk::ARI_IBIOgrsDedicatedDiscoveryReq_SDK::ARI_IBIOgrsDedicatedDiscoveryReq_SDK(AriSdk::ARI_IBIOgrsDedicatedDiscoveryReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x74818000u, 0);
  *(_QWORD *)v1 = &off_24C901E38;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_QWORD *)v1 + 12) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x74818000u, 0);
  *(_QWORD *)v1 = &off_24C901E38;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_QWORD *)v1 + 12) = 0;
  return result;
}

double AriSdk::ARI_IBIOgrsDedicatedDiscoveryReq_SDK::ARI_IBIOgrsDedicatedDiscoveryReq_SDK(AriSdk::ARI_IBIOgrsDedicatedDiscoveryReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C901E38;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_QWORD *)v3 + 12) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C901E38;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_QWORD *)v3 + 12) = 0;
  return result;
}

void AriSdk::ARI_IBIOgrsDedicatedDiscoveryReq_SDK::~ARI_IBIOgrsDedicatedDiscoveryReq_SDK(AriSdk::ARI_IBIOgrsDedicatedDiscoveryReq_SDK *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C901E38;
  v2 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 10) = v3;
    operator delete(v3);
  }
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsDedicatedDiscoveryReq_SDK::~ARI_IBIOgrsDedicatedDiscoveryReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsDedicatedDiscoveryReq_SDK::pack(AriSdk::ARI_IBIOgrsDedicatedDiscoveryReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  _BYTE *v6;
  _BYTE *v7;
  BOOL v8;
  const void *v9;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (_BYTE *)*((_QWORD *)this + 9);
    v7 = (_BYTE *)*((_QWORD *)this + 10);
    v8 = !v6 || v6 == v7;
    if (v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, v7 - v6, 0), !(_DWORD)result))
    {
      v9 = (const void *)*((_QWORD *)this + 12);
      if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v9, 4uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsDedicatedDiscoveryReq_SDK::unpack(AriSdk::ARI_IBIOgrsDedicatedDiscoveryReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _QWORD *v5;
  _DWORD *v6;
  __n128 __p;
  uint64_t v9;
  size_t __sz;
  BOOL v11;

  __p.n128_u8[0] = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = __p.n128_u8[0] == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v11 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v5 = (_QWORD *)operator new[]();
  *v5 = 0;
  v5[1] = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 16, &v11, &__sz);
  if ((_DWORD)v3 || !v11)
  {
    MEMORY[0x212BB9B48](v5, 0x1000C8077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v9 = 0;
    __p = 0uLL;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v5, (uint64_t)v5 + __sz, __sz);
    AriSdk::TlvArray<unsigned char,16ul>::operator=((std::vector<int> *)this + 3, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    MEMORY[0x212BB9B48](v5, 0x1000C8077774924);
  }
  __p.n128_u8[0] = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 4, (BOOL *)&__p, 0);
  if (!(_DWORD)v3 && __p.n128_u8[0])
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 12, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  return v3;
}

void sub_20E236F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsDedicatedDiscoveryReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsDedicatedDiscoveryReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1954643968;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsDedicatedDiscoveryRspCb_SDK::ARI_IBIOgrsDedicatedDiscoveryRspCb_SDK(AriSdk::ARI_IBIOgrsDedicatedDiscoveryRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75018000u, 0);
  *(_QWORD *)result = &off_24C901E70;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75018000u, 0);
  *(_QWORD *)result = &off_24C901E70;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsDedicatedDiscoveryRspCb_SDK::ARI_IBIOgrsDedicatedDiscoveryRspCb_SDK(AriSdk::ARI_IBIOgrsDedicatedDiscoveryRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C901E70;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C901E70;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIOgrsDedicatedDiscoveryRspCb_SDK::~ARI_IBIOgrsDedicatedDiscoveryRspCb_SDK(AriSdk::ARI_IBIOgrsDedicatedDiscoveryRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C901E70;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsDedicatedDiscoveryRspCb_SDK::~ARI_IBIOgrsDedicatedDiscoveryRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsDedicatedDiscoveryRspCb_SDK::pack(AriSdk::ARI_IBIOgrsDedicatedDiscoveryRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 4uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsDedicatedDiscoveryRspCb_SDK::unpack(AriSdk::ARI_IBIOgrsDedicatedDiscoveryRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v9, 0);
  if ((_DWORD)v3 || !v9)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v8 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 4, &v8, 0);
  if (!(_DWORD)v3 && v8)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  return v3;
}

void sub_20E2373F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsDedicatedDiscoveryRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsDedicatedDiscoveryRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1963032576;
}

double AriSdk::ARI_IBIOgrsDiscoveryReleaseReq_SDK::ARI_IBIOgrsDiscoveryReleaseReq_SDK(AriSdk::ARI_IBIOgrsDiscoveryReleaseReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x74830000u, 0);
  *(_QWORD *)v1 = &off_24C901EA8;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_QWORD *)v1 + 12) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x74830000u, 0);
  *(_QWORD *)v1 = &off_24C901EA8;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_QWORD *)v1 + 12) = 0;
  return result;
}

double AriSdk::ARI_IBIOgrsDiscoveryReleaseReq_SDK::ARI_IBIOgrsDiscoveryReleaseReq_SDK(AriSdk::ARI_IBIOgrsDiscoveryReleaseReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C901EA8;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_QWORD *)v3 + 12) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C901EA8;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_QWORD *)v3 + 12) = 0;
  return result;
}

void AriSdk::ARI_IBIOgrsDiscoveryReleaseReq_SDK::~ARI_IBIOgrsDiscoveryReleaseReq_SDK(AriSdk::ARI_IBIOgrsDiscoveryReleaseReq_SDK *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C901EA8;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4077774924);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsDiscoveryReleaseReq_SDK::~ARI_IBIOgrsDiscoveryReleaseReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsDiscoveryReleaseReq_SDK::pack(AriSdk::ARI_IBIOgrsDiscoveryReleaseReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  _BYTE *v7;
  _BYTE *v8;
  BOOL v9;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 1uLL, 0), !(_DWORD)result))
    {
      v7 = (_BYTE *)*((_QWORD *)this + 10);
      v8 = (_BYTE *)*((_QWORD *)this + 11);
      if (v7)
        v9 = v7 == v8;
      else
        v9 = 1;
      if (v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, v8 - v7, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsDiscoveryReleaseReq_SDK::unpack(AriSdk::ARI_IBIOgrsDiscoveryReleaseReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _BYTE *v5;
  _OWORD *v6;
  void **v7;
  _BYTE *v8;
  void *v9;
  const char *v10;
  BOOL *v11;
  void *v12;
  void *__p;
  _BYTE *v15;
  uint64_t v16;
  size_t __sz;
  BOOL v18;
  BOOL v19[8];
  char v20;

  v19[0] = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, v19, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v19[0];
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v19[0] = 0;
  v5 = (_BYTE *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 1, v19, 0);
  if ((_DWORD)v3 || !v19[0])
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4077774924);
  }
  v18 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v6 = (_OWORD *)operator new[]();
  *v6 = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  v6[3] = 0u;
  v6[4] = 0u;
  v6[5] = 0u;
  v6[6] = 0u;
  v6[7] = 0u;
  v6[8] = 0u;
  v6[9] = 0u;
  v6[10] = 0u;
  v6[11] = 0u;
  v6[12] = 0u;
  v6[13] = 0u;
  v6[14] = 0u;
  v6[15] = 0u;
  v6[16] = 0u;
  v6[17] = 0u;
  v6[18] = 0u;
  v6[19] = 0u;
  v6[20] = 0u;
  v6[21] = 0u;
  v6[22] = 0u;
  v6[23] = 0u;
  v6[24] = 0u;
  v6[25] = 0u;
  v6[26] = 0u;
  v6[27] = 0u;
  v6[28] = 0u;
  v6[29] = 0u;
  v6[30] = 0u;
  v6[31] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 512, &v18, &__sz);
  if (!(_DWORD)v3 && v18)
  {
    v15 = 0;
    v16 = 0;
    __p = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v6, (uint64_t)v6 + __sz, __sz);
    v7 = (void **)((char *)this + 80);
    v9 = __p;
    v8 = v15;
    if ((unint64_t)(v15 - (_BYTE *)__p) < 0x201)
    {
      v12 = *v7;
      if (*v7)
      {
        *((_QWORD *)this + 11) = v12;
        operator delete(v12);
        *v7 = 0;
        *((_QWORD *)this + 11) = 0;
        *((_QWORD *)this + 12) = 0;
        v9 = __p;
        v8 = v15;
      }
      *((_QWORD *)this + 10) = v9;
      *((_QWORD *)this + 11) = v8;
      *((_QWORD *)this + 12) = v16;
    }
    else
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)v19);
      if (v20 >= 0)
        v11 = v19;
      else
        v11 = *(BOOL **)v19;
      Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v10, v11, 360, (char *)this + 80, v15 - (_BYTE *)__p, 512);
      if (v20 < 0)
        operator delete(*(void **)v19);
      if (__p)
      {
        v15 = __p;
        operator delete(__p);
      }
    }
  }
  MEMORY[0x212BB9B48](v6, 0x1000C8077774924);
  return v3;
}

void sub_20E23794C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;

  if (*(char *)(v17 - 33) < 0)
    operator delete(*(void **)(v17 - 56));
  if (__p)
    operator delete(__p);
  MEMORY[0x212BB9B48](v16, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsDiscoveryReleaseReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsDiscoveryReleaseReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1954742272;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsDiscoveryReleaseRspCb_SDK::ARI_IBIOgrsDiscoveryReleaseRspCb_SDK(AriSdk::ARI_IBIOgrsDiscoveryReleaseRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75030000u, 0);
  *(_QWORD *)result = &off_24C901EE0;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75030000u, 0);
  *(_QWORD *)result = &off_24C901EE0;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsDiscoveryReleaseRspCb_SDK::ARI_IBIOgrsDiscoveryReleaseRspCb_SDK(AriSdk::ARI_IBIOgrsDiscoveryReleaseRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C901EE0;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C901EE0;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIOgrsDiscoveryReleaseRspCb_SDK::~ARI_IBIOgrsDiscoveryReleaseRspCb_SDK(AriSdk::ARI_IBIOgrsDiscoveryReleaseRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C901EE0;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsDiscoveryReleaseRspCb_SDK::~ARI_IBIOgrsDiscoveryReleaseRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsDiscoveryReleaseRspCb_SDK::pack(AriSdk::ARI_IBIOgrsDiscoveryReleaseRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 4uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsDiscoveryReleaseRspCb_SDK::unpack(AriSdk::ARI_IBIOgrsDiscoveryReleaseRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v9, 0);
  if ((_DWORD)v3 || !v9)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v8 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 4, &v8, 0);
  if (!(_DWORD)v3 && v8)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  return v3;
}

void sub_20E237DE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsDiscoveryReleaseRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsDiscoveryReleaseRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1963130880;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsDiscoveryStatusReq_SDK::ARI_IBIOgrsDiscoveryStatusReq_SDK(AriSdk::ARI_IBIOgrsDiscoveryStatusReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x74868000u, 0);
  *(_QWORD *)result = &off_24C901F18;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x74868000u, 0);
  *(_QWORD *)result = &off_24C901F18;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsDiscoveryStatusReq_SDK::ARI_IBIOgrsDiscoveryStatusReq_SDK(AriSdk::ARI_IBIOgrsDiscoveryStatusReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C901F18;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C901F18;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIOgrsDiscoveryStatusReq_SDK::~ARI_IBIOgrsDiscoveryStatusReq_SDK(AriSdk::ARI_IBIOgrsDiscoveryStatusReq_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C901F18;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsDiscoveryStatusReq_SDK::~ARI_IBIOgrsDiscoveryStatusReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsDiscoveryStatusReq_SDK::pack(AriSdk::ARI_IBIOgrsDiscoveryStatusReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsDiscoveryStatusReq_SDK::unpack(AriSdk::ARI_IBIOgrsDiscoveryStatusReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E238070(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsDiscoveryStatusReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsDiscoveryStatusReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1954971648;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsDiscoveryStatusRspCb_SDK::ARI_IBIOgrsDiscoveryStatusRspCb_SDK(AriSdk::ARI_IBIOgrsDiscoveryStatusRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75068000u, 0);
  *(_QWORD *)result = &off_24C901F50;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75068000u, 0);
  *(_QWORD *)result = &off_24C901F50;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsDiscoveryStatusRspCb_SDK::ARI_IBIOgrsDiscoveryStatusRspCb_SDK(AriSdk::ARI_IBIOgrsDiscoveryStatusRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C901F50;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C901F50;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIOgrsDiscoveryStatusRspCb_SDK::~ARI_IBIOgrsDiscoveryStatusRspCb_SDK(AriSdk::ARI_IBIOgrsDiscoveryStatusRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C901F50;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsDiscoveryStatusRspCb_SDK::~ARI_IBIOgrsDiscoveryStatusRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsDiscoveryStatusRspCb_SDK::pack(AriSdk::ARI_IBIOgrsDiscoveryStatusRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 4uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsDiscoveryStatusRspCb_SDK::unpack(AriSdk::ARI_IBIOgrsDiscoveryStatusRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v9, 0);
  if ((_DWORD)v3 || !v9)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v8 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 4, &v8, 0);
  if (!(_DWORD)v3 && v8)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  return v3;
}

void sub_20E2384A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsDiscoveryStatusRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsDiscoveryStatusRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1963360256;
}

double AriSdk::ARI_IBIOgrsDiscoveryStatusIndCb_SDK::ARI_IBIOgrsDiscoveryStatusIndCb_SDK(AriSdk::ARI_IBIOgrsDiscoveryStatusIndCb_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x75818000u, 0);
  *(_QWORD *)v1 = &off_24C901F88;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_QWORD *)v1 + 12) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x75818000u, 0);
  *(_QWORD *)v1 = &off_24C901F88;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_QWORD *)v1 + 12) = 0;
  return result;
}

double AriSdk::ARI_IBIOgrsDiscoveryStatusIndCb_SDK::ARI_IBIOgrsDiscoveryStatusIndCb_SDK(AriSdk::ARI_IBIOgrsDiscoveryStatusIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C901F88;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_QWORD *)v3 + 12) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C901F88;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_QWORD *)v3 + 12) = 0;
  return result;
}

void AriSdk::ARI_IBIOgrsDiscoveryStatusIndCb_SDK::~ARI_IBIOgrsDiscoveryStatusIndCb_SDK(AriSdk::ARI_IBIOgrsDiscoveryStatusIndCb_SDK *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C901F88;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4077774924);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsDiscoveryStatusIndCb_SDK::~ARI_IBIOgrsDiscoveryStatusIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsDiscoveryStatusIndCb_SDK::pack(AriSdk::ARI_IBIOgrsDiscoveryStatusIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  _BYTE *v7;
  _BYTE *v8;
  BOOL v9;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 1uLL, 0), !(_DWORD)result))
    {
      v7 = (_BYTE *)*((_QWORD *)this + 10);
      v8 = (_BYTE *)*((_QWORD *)this + 11);
      if (v7)
        v9 = v7 == v8;
      else
        v9 = 1;
      if (v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, v8 - v7, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsDiscoveryStatusIndCb_SDK::unpack(AriSdk::ARI_IBIOgrsDiscoveryStatusIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _BYTE *v5;
  void *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  size_t v10;
  void **v11;
  unint64_t v12;
  const char *v13;
  void **v14;
  void *v15;
  unint64_t v17;
  BOOL v18;
  void *__p[2];
  char v20;

  LOBYTE(__p[0]) = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, (BOOL *)__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = LOBYTE(__p[0]) == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  LOBYTE(__p[0]) = 0;
  v5 = (_BYTE *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 1, (BOOL *)__p, 0);
  if ((_DWORD)v3 || !LOBYTE(__p[0]))
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4077774924);
  }
  v18 = 0;
  v17 = 0xAAAAAAAAAAAAAAAALL;
  v6 = (void *)operator new[]();
  bzero(v6, 0x39CuLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 924, &v18, &v17);
  if (!(_DWORD)v3 && v18)
  {
    if (v17 >= 0x1C)
    {
      v9 = v17 / 0x1C;
      v10 = 28 * (v17 / 0x1C);
      v7 = (char *)operator new(v10);
      v8 = &v7[28 * v9];
      memcpy(v7, v6, v10);
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    v11 = (void **)((char *)this + 80);
    v12 = 0x6DB6DB6DB6DB6DB7 * ((v8 - v7) >> 2);
    if (v12 < 0x22)
    {
      v15 = *v11;
      if (*v11)
      {
        *((_QWORD *)this + 11) = v15;
        operator delete(v15);
        *v11 = 0;
        *((_QWORD *)this + 11) = 0;
        *((_QWORD *)this + 12) = 0;
      }
      *((_QWORD *)this + 10) = v7;
      *((_QWORD *)this + 11) = v8;
      *((_QWORD *)this + 12) = v8;
    }
    else
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
      if (v20 >= 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v13, v14, 360, v11, v12, 33);
      if (v20 < 0)
        operator delete(__p[0]);
      if (v7)
        operator delete(v7);
    }
  }
  MEMORY[0x212BB9B48](v6, 0x1000C8027586B93);
  return v3;
}

void sub_20E238A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void *v22;

  if (a21 < 0)
    operator delete(__p);
  if (v22)
    operator delete(v22);
  MEMORY[0x212BB9B48](v21, 0x1000C8027586B93);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsDiscoveryStatusIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsDiscoveryStatusIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1971421184;
}

double AriSdk::ARI_IBIOgrsEmergencyReceptionIndCb_SDK::ARI_IBIOgrsEmergencyReceptionIndCb_SDK(AriSdk::ARI_IBIOgrsEmergencyReceptionIndCb_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x75838000u, 0);
  *(_QWORD *)v1 = &off_24C901FC0;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x75838000u, 0);
  *(_QWORD *)v1 = &off_24C901FC0;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  return result;
}

double AriSdk::ARI_IBIOgrsEmergencyReceptionIndCb_SDK::ARI_IBIOgrsEmergencyReceptionIndCb_SDK(AriSdk::ARI_IBIOgrsEmergencyReceptionIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C901FC0;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C901FC0;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  return result;
}

void AriSdk::ARI_IBIOgrsEmergencyReceptionIndCb_SDK::~ARI_IBIOgrsEmergencyReceptionIndCb_SDK(AriSdk::ARI_IBIOgrsEmergencyReceptionIndCb_SDK *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C901FC0;
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C40BDFB0063);
  v4 = (void *)*((_QWORD *)this + 9);
  if (v4)
  {
    *((_QWORD *)this + 10) = v4;
    operator delete(v4);
  }
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsEmergencyReceptionIndCb_SDK::~ARI_IBIOgrsEmergencyReceptionIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsEmergencyReceptionIndCb_SDK::pack(AriSdk::ARI_IBIOgrsEmergencyReceptionIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  _BYTE *v6;
  _BYTE *v7;
  BOOL v8;
  const void *v9;
  _BYTE *v10;
  _BYTE *v11;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (_BYTE *)*((_QWORD *)this + 9);
    v7 = (_BYTE *)*((_QWORD *)this + 10);
    v8 = !v6 || v6 == v7;
    if (v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, v7 - v6, 0), !(_DWORD)result))
    {
      v9 = (const void *)*((_QWORD *)this + 12);
      if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v9, 2uLL, 0), !(_DWORD)result))
      {
        v10 = (_BYTE *)*((_QWORD *)this + 13);
        if (!v10
          || (v11 = (_BYTE *)*((_QWORD *)this + 14), v10 == v11)
          || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v10, v11 - v10, 0), !(_DWORD)result))
        {
          result = 0;
          *a2 = (AriMsg *)*((_QWORD *)this + 6);
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsEmergencyReceptionIndCb_SDK::unpack(AriSdk::ARI_IBIOgrsEmergencyReceptionIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _QWORD *v5;
  _WORD *v6;
  _OWORD *v7;
  __n128 __p;
  uint64_t v10;
  size_t __sz;
  BOOL v12;

  __p.n128_u8[0] = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = __p.n128_u8[0] == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v12 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v5 = (_QWORD *)operator new[]();
  *v5 = 0;
  v5[1] = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 16, &v12, &__sz);
  if ((_DWORD)v3 || !v12)
  {
    MEMORY[0x212BB9B48](v5, 0x1000C8077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v10 = 0;
    __p = 0uLL;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v5, (uint64_t)v5 + __sz, __sz);
    AriSdk::TlvArray<unsigned char,16ul>::operator=((std::vector<int> *)this + 3, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    MEMORY[0x212BB9B48](v5, 0x1000C8077774924);
  }
  __p.n128_u8[0] = 0;
  v6 = (_WORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 2, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v6, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 12, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C40BDFB0063);
  }
  v12 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v7 = (_OWORD *)operator new[]();
  *v7 = 0u;
  v7[1] = 0u;
  v7[2] = 0u;
  v7[3] = 0u;
  v7[4] = 0u;
  v7[5] = 0u;
  v7[6] = 0u;
  v7[7] = 0u;
  v7[8] = 0u;
  v7[9] = 0u;
  v7[10] = 0u;
  v7[11] = 0u;
  v7[12] = 0u;
  v7[13] = 0u;
  v7[14] = 0u;
  v7[15] = 0u;
  v7[16] = 0u;
  v7[17] = 0u;
  v7[18] = 0u;
  v7[19] = 0u;
  v7[20] = 0u;
  v7[21] = 0u;
  v7[22] = 0u;
  v7[23] = 0u;
  v7[24] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v7, 400, &v12, &__sz);
  if (!(_DWORD)v3 && v12)
  {
    v10 = 0;
    __p = 0uLL;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v7, (uint64_t)v7 + __sz, __sz);
    AriSdk::TlvArray<unsigned char,400ul>::operator=((std::vector<int> *)((char *)this + 104), &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
  }
  MEMORY[0x212BB9B48](v7, 0x1000C8077774924);
  return v3;
}

void sub_20E239030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x212BB9B48](v11, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

std::vector<int> *AriSdk::TlvArray<unsigned char,400ul>::operator=(std::vector<int> *this, __n128 *__c)
{
  const char *v4;
  void **v5;
  void *__p[2];
  char v8;

  if (__c->n128_u64[1] - __c->n128_u64[0] < 0x191)
  {
    std::vector<char>::__move_assign((uint64_t)this, __c);
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v8 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v4, v5, 360, this, __c->n128_u64[1] - __c->n128_u64[0], 400);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_20E239174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL AriSdk::ARI_IBIOgrsEmergencyReceptionIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsEmergencyReceptionIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1971552256;
}

double AriSdk::ARI_IBIOgrsEmergencyTransmissionReq_SDK::ARI_IBIOgrsEmergencyTransmissionReq_SDK(AriSdk::ARI_IBIOgrsEmergencyTransmissionReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x74858000u, 0);
  *(_QWORD *)v1 = &off_24C901FF8;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x74858000u, 0);
  *(_QWORD *)v1 = &off_24C901FF8;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  return result;
}

double AriSdk::ARI_IBIOgrsEmergencyTransmissionReq_SDK::ARI_IBIOgrsEmergencyTransmissionReq_SDK(AriSdk::ARI_IBIOgrsEmergencyTransmissionReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C901FF8;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C901FF8;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  return result;
}

void AriSdk::ARI_IBIOgrsEmergencyTransmissionReq_SDK::~ARI_IBIOgrsEmergencyTransmissionReq_SDK(AriSdk::ARI_IBIOgrsEmergencyTransmissionReq_SDK *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  *(_QWORD *)this = &off_24C901FF8;
  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C40BDFB0063);
  v4 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C40BDFB0063);
  v5 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40BDFB0063);
  v6 = (void *)*((_QWORD *)this + 9);
  if (v6)
  {
    *((_QWORD *)this + 10) = v6;
    operator delete(v6);
  }
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsEmergencyTransmissionReq_SDK::~ARI_IBIOgrsEmergencyTransmissionReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsEmergencyTransmissionReq_SDK::pack(AriSdk::ARI_IBIOgrsEmergencyTransmissionReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  _BYTE *v6;
  _BYTE *v7;
  BOOL v8;
  const void *v9;
  const void *v10;
  const void *v11;
  _BYTE *v12;
  _BYTE *v13;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (_BYTE *)*((_QWORD *)this + 9);
    v7 = (_BYTE *)*((_QWORD *)this + 10);
    v8 = !v6 || v6 == v7;
    if (v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, v7 - v6, 0), !(_DWORD)result))
    {
      v9 = (const void *)*((_QWORD *)this + 12);
      if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v9, 2uLL, 0), !(_DWORD)result))
      {
        v10 = (const void *)*((_QWORD *)this + 13);
        if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v10, 2uLL, 0), !(_DWORD)result))
        {
          v11 = (const void *)*((_QWORD *)this + 14);
          if (!v11 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v11, 2uLL, 0), !(_DWORD)result))
          {
            v12 = (_BYTE *)*((_QWORD *)this + 15);
            if (!v12
              || (v13 = (_BYTE *)*((_QWORD *)this + 16), v12 == v13)
              || (result = AriMsg::pack(*((AriMsg **)this + 6), 7, v12, v13 - v12, 0), !(_DWORD)result))
            {
              result = 0;
              *a2 = (AriMsg *)*((_QWORD *)this + 6);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsEmergencyTransmissionReq_SDK::unpack(AriSdk::ARI_IBIOgrsEmergencyTransmissionReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _QWORD *v5;
  _WORD *v6;
  _WORD *v7;
  _WORD *v8;
  _OWORD *v9;
  __n128 __p;
  uint64_t v12;
  size_t __sz;
  BOOL v14;

  __p.n128_u8[0] = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = __p.n128_u8[0] == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v14 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v5 = (_QWORD *)operator new[]();
  *v5 = 0;
  v5[1] = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 16, &v14, &__sz);
  if ((_DWORD)v3 || !v14)
  {
    MEMORY[0x212BB9B48](v5, 0x1000C8077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v12 = 0;
    __p = 0uLL;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v5, (uint64_t)v5 + __sz, __sz);
    AriSdk::TlvArray<unsigned char,16ul>::operator=((std::vector<int> *)this + 3, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    MEMORY[0x212BB9B48](v5, 0x1000C8077774924);
  }
  __p.n128_u8[0] = 0;
  v6 = (_WORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 2, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v6, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 12, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C40BDFB0063);
  }
  __p.n128_u8[0] = 0;
  v7 = (_WORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v7, 2, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v7, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 13, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C40BDFB0063);
  }
  __p.n128_u8[0] = 0;
  v8 = (_WORD *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v8, 2, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v8, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 14, v8);
    MEMORY[0x212BB9B60](v8, 0x1000C40BDFB0063);
  }
  v14 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v9 = (_OWORD *)operator new[]();
  *v9 = 0u;
  v9[1] = 0u;
  v9[2] = 0u;
  v9[3] = 0u;
  v9[4] = 0u;
  v9[5] = 0u;
  v9[6] = 0u;
  v9[7] = 0u;
  v9[8] = 0u;
  v9[9] = 0u;
  v9[10] = 0u;
  v9[11] = 0u;
  v9[12] = 0u;
  v9[13] = 0u;
  v9[14] = 0u;
  v9[15] = 0u;
  v9[16] = 0u;
  v9[17] = 0u;
  v9[18] = 0u;
  v9[19] = 0u;
  v9[20] = 0u;
  v9[21] = 0u;
  v9[22] = 0u;
  v9[23] = 0u;
  v9[24] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 7, v9, 400, &v14, &__sz);
  if (!(_DWORD)v3 && v14)
  {
    v12 = 0;
    __p = 0uLL;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v9, (uint64_t)v9 + __sz, __sz);
    AriSdk::TlvArray<unsigned char,400ul>::operator=((std::vector<int> *)this + 5, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
  }
  MEMORY[0x212BB9B48](v9, 0x1000C8077774924);
  return v3;
}

void sub_20E2398CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x212BB9B48](v11, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsEmergencyTransmissionReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsEmergencyTransmissionReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1954906112;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsEmergencyTransmissionRspCb_SDK::ARI_IBIOgrsEmergencyTransmissionRspCb_SDK(AriSdk::ARI_IBIOgrsEmergencyTransmissionRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75058000u, 0);
  *(_QWORD *)result = &off_24C902030;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75058000u, 0);
  *(_QWORD *)result = &off_24C902030;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsEmergencyTransmissionRspCb_SDK::ARI_IBIOgrsEmergencyTransmissionRspCb_SDK(AriSdk::ARI_IBIOgrsEmergencyTransmissionRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C902030;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C902030;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIOgrsEmergencyTransmissionRspCb_SDK::~ARI_IBIOgrsEmergencyTransmissionRspCb_SDK(AriSdk::ARI_IBIOgrsEmergencyTransmissionRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C902030;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsEmergencyTransmissionRspCb_SDK::~ARI_IBIOgrsEmergencyTransmissionRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsEmergencyTransmissionRspCb_SDK::pack(AriSdk::ARI_IBIOgrsEmergencyTransmissionRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 4uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsEmergencyTransmissionRspCb_SDK::unpack(AriSdk::ARI_IBIOgrsEmergencyTransmissionRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v9, 0);
  if ((_DWORD)v3 || !v9)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v8 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 4, &v8, 0);
  if (!(_DWORD)v3 && v8)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  return v3;
}

void sub_20E239D74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsEmergencyTransmissionRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsEmergencyTransmissionRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1963294720;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsEmergencyTransmissionIndCb_SDK::ARI_IBIOgrsEmergencyTransmissionIndCb_SDK(AriSdk::ARI_IBIOgrsEmergencyTransmissionIndCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75830000u, 0);
  *(_QWORD *)result = &off_24C902068;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75830000u, 0);
  *(_QWORD *)result = &off_24C902068;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsEmergencyTransmissionIndCb_SDK::ARI_IBIOgrsEmergencyTransmissionIndCb_SDK(AriSdk::ARI_IBIOgrsEmergencyTransmissionIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C902068;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C902068;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBIOgrsEmergencyTransmissionIndCb_SDK::~ARI_IBIOgrsEmergencyTransmissionIndCb_SDK(AriSdk::ARI_IBIOgrsEmergencyTransmissionIndCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C902068;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsEmergencyTransmissionIndCb_SDK::~ARI_IBIOgrsEmergencyTransmissionIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsEmergencyTransmissionIndCb_SDK::pack(AriSdk::ARI_IBIOgrsEmergencyTransmissionIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsEmergencyTransmissionIndCb_SDK::unpack(AriSdk::ARI_IBIOgrsEmergencyTransmissionIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v9, 0);
  if (!(_DWORD)v3 && v9)
  {
    v6 = (_DWORD *)operator new();
    *v6 = *v5;
    v7 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v6;
    if (v7)
      MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  }
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E23A108(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsEmergencyTransmissionIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsEmergencyTransmissionIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1971519488;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsEmergencyTransmissionStopReq_SDK::ARI_IBIOgrsEmergencyTransmissionStopReq_SDK(AriSdk::ARI_IBIOgrsEmergencyTransmissionStopReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x74860000u, 0);
  *(_QWORD *)result = &off_24C9020A0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x74860000u, 0);
  *(_QWORD *)result = &off_24C9020A0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsEmergencyTransmissionStopReq_SDK::ARI_IBIOgrsEmergencyTransmissionStopReq_SDK(AriSdk::ARI_IBIOgrsEmergencyTransmissionStopReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C9020A0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C9020A0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIOgrsEmergencyTransmissionStopReq_SDK::~ARI_IBIOgrsEmergencyTransmissionStopReq_SDK(AriSdk::ARI_IBIOgrsEmergencyTransmissionStopReq_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C9020A0;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsEmergencyTransmissionStopReq_SDK::~ARI_IBIOgrsEmergencyTransmissionStopReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsEmergencyTransmissionStopReq_SDK::pack(AriSdk::ARI_IBIOgrsEmergencyTransmissionStopReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsEmergencyTransmissionStopReq_SDK::unpack(AriSdk::ARI_IBIOgrsEmergencyTransmissionStopReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E23A384(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsEmergencyTransmissionStopReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsEmergencyTransmissionStopReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1954938880;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsEmergencyTransmissionStopRspCb_SDK::ARI_IBIOgrsEmergencyTransmissionStopRspCb_SDK(AriSdk::ARI_IBIOgrsEmergencyTransmissionStopRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75060000u, 0);
  *(_QWORD *)result = &off_24C9020D8;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75060000u, 0);
  *(_QWORD *)result = &off_24C9020D8;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsEmergencyTransmissionStopRspCb_SDK::ARI_IBIOgrsEmergencyTransmissionStopRspCb_SDK(AriSdk::ARI_IBIOgrsEmergencyTransmissionStopRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C9020D8;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C9020D8;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIOgrsEmergencyTransmissionStopRspCb_SDK::~ARI_IBIOgrsEmergencyTransmissionStopRspCb_SDK(AriSdk::ARI_IBIOgrsEmergencyTransmissionStopRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C9020D8;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsEmergencyTransmissionStopRspCb_SDK::~ARI_IBIOgrsEmergencyTransmissionStopRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsEmergencyTransmissionStopRspCb_SDK::pack(AriSdk::ARI_IBIOgrsEmergencyTransmissionStopRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 4uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsEmergencyTransmissionStopRspCb_SDK::unpack(AriSdk::ARI_IBIOgrsEmergencyTransmissionStopRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v9, 0);
  if ((_DWORD)v3 || !v9)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v8 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 4, &v8, 0);
  if (!(_DWORD)v3 && v8)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  return v3;
}

void sub_20E23A7B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsEmergencyTransmissionStopRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsEmergencyTransmissionStopRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1963327488;
}

double AriSdk::ARI_IBIOgrsEventFilterReq_SDK::ARI_IBIOgrsEventFilterReq_SDK(AriSdk::ARI_IBIOgrsEventFilterReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x74870000u, 0);
  *(_QWORD *)v1 = &off_24C902110;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_QWORD *)v1 + 12) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x74870000u, 0);
  *(_QWORD *)v1 = &off_24C902110;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_QWORD *)v1 + 12) = 0;
  return result;
}

double AriSdk::ARI_IBIOgrsEventFilterReq_SDK::ARI_IBIOgrsEventFilterReq_SDK(AriSdk::ARI_IBIOgrsEventFilterReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C902110;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_QWORD *)v3 + 12) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C902110;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_QWORD *)v3 + 12) = 0;
  return result;
}

void AriSdk::ARI_IBIOgrsEventFilterReq_SDK::~ARI_IBIOgrsEventFilterReq_SDK(AriSdk::ARI_IBIOgrsEventFilterReq_SDK *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C902110;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4077774924);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsEventFilterReq_SDK::~ARI_IBIOgrsEventFilterReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsEventFilterReq_SDK::pack(AriSdk::ARI_IBIOgrsEventFilterReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  _BYTE *v7;
  _BYTE *v8;
  BOOL v9;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 1uLL, 0), !(_DWORD)result))
    {
      v7 = (_BYTE *)*((_QWORD *)this + 10);
      v8 = (_BYTE *)*((_QWORD *)this + 11);
      if (v7)
        v9 = v7 == v8;
      else
        v9 = 1;
      if (v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, v8 - v7, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsEventFilterReq_SDK::unpack(AriSdk::ARI_IBIOgrsEventFilterReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _BYTE *v5;
  _OWORD *v6;
  void *__p[3];
  unint64_t v9;
  BOOL v10;

  LOBYTE(__p[0]) = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, (BOOL *)__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = LOBYTE(__p[0]) == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  LOBYTE(__p[0]) = 0;
  v5 = (_BYTE *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 1, (BOOL *)__p, 0);
  if ((_DWORD)v3 || !LOBYTE(__p[0]))
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4077774924);
  }
  v10 = 0;
  v9 = 0xAAAAAAAAAAAAAAAALL;
  v6 = (_OWORD *)operator new[]();
  *v6 = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  v6[3] = 0u;
  v6[4] = 0u;
  v6[5] = 0u;
  v6[6] = 0u;
  v6[7] = 0u;
  v6[8] = 0u;
  v6[9] = 0u;
  v6[10] = 0u;
  v6[11] = 0u;
  v6[12] = 0u;
  v6[13] = 0u;
  v6[14] = 0u;
  v6[15] = 0u;
  v6[16] = 0u;
  v6[17] = 0u;
  v6[18] = 0u;
  v6[19] = 0u;
  v6[20] = 0u;
  v6[21] = 0u;
  v6[22] = 0u;
  v6[23] = 0u;
  v6[24] = 0u;
  v6[25] = 0u;
  v6[26] = 0u;
  v6[27] = 0u;
  v6[28] = 0u;
  v6[29] = 0u;
  v6[30] = 0u;
  v6[31] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 512, &v10, &v9);
  if (!(_DWORD)v3 && v10)
  {
    memset(__p, 0, sizeof(__p));
    std::vector<IBIUserList_t>::__init_with_size[abi:ne180100]<IBIUserList_t*,IBIUserList_t*>(__p, v6, (uint64_t)&v6[v9 >> 4], v9 >> 4);
    AriSdk::TlvArray<IBIUserList_t,32ul>::operator=((uint64_t)this + 80, (uint64_t *)__p);
    if (__p[0])
      operator delete(__p[0]);
  }
  MEMORY[0x212BB9B48](v6, 0x1000C80451B5BE8);
  return v3;
}

void sub_20E23AC68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  uint64_t v10;

  if (__p)
    operator delete(__p);
  MEMORY[0x212BB9B48](v10, 0x1000C80451B5BE8);
  _Unwind_Resume(a1);
}

uint64_t AriSdk::TlvArray<IBIUserList_t,32ul>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void **v7;
  void *v8;
  void *__p[2];
  char v11;

  v5 = *a2;
  v4 = a2[1];
  if ((unint64_t)(v4 - *a2) < 0x201)
  {
    v8 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v8);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v5 = *a2;
      v4 = a2[1];
    }
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v11 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v6, v7, 360, a1, (a2[1] - *a2) >> 4, 32);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_20E23ADC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL AriSdk::ARI_IBIOgrsEventFilterReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsEventFilterReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1955004416;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsEventFilterRspCb_SDK::ARI_IBIOgrsEventFilterRspCb_SDK(AriSdk::ARI_IBIOgrsEventFilterRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75070000u, 0);
  *(_QWORD *)result = &off_24C902148;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75070000u, 0);
  *(_QWORD *)result = &off_24C902148;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsEventFilterRspCb_SDK::ARI_IBIOgrsEventFilterRspCb_SDK(AriSdk::ARI_IBIOgrsEventFilterRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C902148;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C902148;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIOgrsEventFilterRspCb_SDK::~ARI_IBIOgrsEventFilterRspCb_SDK(AriSdk::ARI_IBIOgrsEventFilterRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C902148;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsEventFilterRspCb_SDK::~ARI_IBIOgrsEventFilterRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsEventFilterRspCb_SDK::pack(AriSdk::ARI_IBIOgrsEventFilterRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 4uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsEventFilterRspCb_SDK::unpack(AriSdk::ARI_IBIOgrsEventFilterRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v9, 0);
  if ((_DWORD)v3 || !v9)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v8 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 4, &v8, 0);
  if (!(_DWORD)v3 && v8)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  return v3;
}

void sub_20E23B1E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsEventFilterRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsEventFilterRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1963393024;
}

double AriSdk::ARI_IBIOgrsInterfaceStartReq_SDK::ARI_IBIOgrsInterfaceStartReq_SDK(AriSdk::ARI_IBIOgrsInterfaceStartReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x74848000u, 0);
  *(_QWORD *)v1 = &off_24C902180;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_QWORD *)v1 + 14) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x74848000u, 0);
  *(_QWORD *)v1 = &off_24C902180;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_QWORD *)v1 + 14) = 0;
  return result;
}

double AriSdk::ARI_IBIOgrsInterfaceStartReq_SDK::ARI_IBIOgrsInterfaceStartReq_SDK(AriSdk::ARI_IBIOgrsInterfaceStartReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C902180;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_QWORD *)v3 + 14) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C902180;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_QWORD *)v3 + 14) = 0;
  return result;
}

void AriSdk::ARI_IBIOgrsInterfaceStartReq_SDK::~ARI_IBIOgrsInterfaceStartReq_SDK(AriSdk::ARI_IBIOgrsInterfaceStartReq_SDK *this)
{
  void *v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C902180;
  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 10) = v3;
    operator delete(v3);
  }
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsInterfaceStartReq_SDK::~ARI_IBIOgrsInterfaceStartReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsInterfaceStartReq_SDK::pack(AriSdk::ARI_IBIOgrsInterfaceStartReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  _BYTE *v6;
  _BYTE *v7;
  BOOL v8;
  _BYTE *v9;
  _BYTE *v10;
  BOOL v11;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (_BYTE *)*((_QWORD *)this + 9);
    v7 = (_BYTE *)*((_QWORD *)this + 10);
    v8 = !v6 || v6 == v7;
    if (v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, v7 - v6, 0), !(_DWORD)result))
    {
      v9 = (_BYTE *)*((_QWORD *)this + 12);
      v10 = (_BYTE *)*((_QWORD *)this + 13);
      if (v9)
        v11 = v9 == v10;
      else
        v11 = 1;
      if (v11 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v9, v10 - v9, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsInterfaceStartReq_SDK::unpack(AriSdk::ARI_IBIOgrsInterfaceStartReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _QWORD *v5;
  _OWORD *v6;
  __n128 __p;
  uint64_t v9;
  size_t __sz;
  BOOL v11;

  __p.n128_u8[0] = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = __p.n128_u8[0] == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v11 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v5 = (_QWORD *)operator new[]();
  *v5 = 0;
  v5[1] = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 16, &v11, &__sz);
  if ((_DWORD)v3 || !v11)
  {
    MEMORY[0x212BB9B48](v5, 0x1000C8077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v9 = 0;
    __p = 0uLL;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v5, (uint64_t)v5 + __sz, __sz);
    AriSdk::TlvArray<unsigned char,16ul>::operator=((std::vector<int> *)this + 3, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    MEMORY[0x212BB9B48](v5, 0x1000C8077774924);
  }
  v11 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v6 = (_OWORD *)operator new[]();
  *v6 = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  v6[3] = 0u;
  v6[4] = 0u;
  v6[5] = 0u;
  *((_DWORD *)v6 + 24) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 100, &v11, &__sz);
  if (!(_DWORD)v3 && v11)
  {
    v9 = 0;
    __p = 0uLL;
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&__p, v6, (uint64_t)v6 + __sz, __sz);
    AriSdk::TlvArray<char,100ul>::operator=((std::vector<int> *)this + 4, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
  }
  MEMORY[0x212BB9B48](v6, 0x1000C8077774924);
  return v3;
}

void sub_20E23B6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x212BB9B48](v11, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

std::vector<int> *AriSdk::TlvArray<char,100ul>::operator=(std::vector<int> *this, __n128 *__c)
{
  const char *v4;
  void **v5;
  void *__p[2];
  char v8;

  if (__c->n128_u64[1] - __c->n128_u64[0] < 0x65)
  {
    std::vector<char>::__move_assign((uint64_t)this, __c);
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v8 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v4, v5, 360, this, __c->n128_u64[1] - __c->n128_u64[0], 100);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_20E23B7DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL AriSdk::ARI_IBIOgrsInterfaceStartReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsInterfaceStartReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1954840576;
}

double AriSdk::ARI_IBIOgrsInterfaceStartRspCb_SDK::ARI_IBIOgrsInterfaceStartRspCb_SDK(AriSdk::ARI_IBIOgrsInterfaceStartRspCb_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x75048000u, 0);
  *(_QWORD *)v1 = &off_24C9021B8;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x75048000u, 0);
  *(_QWORD *)v1 = &off_24C9021B8;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

double AriSdk::ARI_IBIOgrsInterfaceStartRspCb_SDK::ARI_IBIOgrsInterfaceStartRspCb_SDK(AriSdk::ARI_IBIOgrsInterfaceStartRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C9021B8;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C9021B8;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

void AriSdk::ARI_IBIOgrsInterfaceStartRspCb_SDK::~ARI_IBIOgrsInterfaceStartRspCb_SDK(AriSdk::ARI_IBIOgrsInterfaceStartRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C9021B8;
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsInterfaceStartRspCb_SDK::~ARI_IBIOgrsInterfaceStartRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsInterfaceStartRspCb_SDK::pack(AriSdk::ARI_IBIOgrsInterfaceStartRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 4uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v8, 4uLL, 0), !(_DWORD)result))
        {
          result = 0;
          *a2 = (AriMsg *)*((_QWORD *)this + 6);
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsInterfaceStartRspCb_SDK::unpack(AriSdk::ARI_IBIOgrsInterfaceStartRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;

  v12 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v12, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v12;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v11 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v11, 0);
  if ((_DWORD)v3 || !v11)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v10 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 4, &v10, 0);
  if ((_DWORD)v3 || !v10)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  }
  v9 = 0;
  v7 = (_DWORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v7, 4, &v9, 0);
  if (!(_DWORD)v3 && v9)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 11, v7);
  MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  return v3;
}

void sub_20E23BCDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsInterfaceStartRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsInterfaceStartRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1963229184;
}

double AriSdk::ARI_IBIOgrsInterfaceStatusIndCb_SDK::ARI_IBIOgrsInterfaceStatusIndCb_SDK(AriSdk::ARI_IBIOgrsInterfaceStatusIndCb_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x75828000u, 0);
  *(_QWORD *)v1 = &off_24C9021F0;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_QWORD *)v1 + 12) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x75828000u, 0);
  *(_QWORD *)v1 = &off_24C9021F0;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_QWORD *)v1 + 12) = 0;
  return result;
}

double AriSdk::ARI_IBIOgrsInterfaceStatusIndCb_SDK::ARI_IBIOgrsInterfaceStatusIndCb_SDK(AriSdk::ARI_IBIOgrsInterfaceStatusIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C9021F0;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_QWORD *)v3 + 12) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C9021F0;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_QWORD *)v3 + 12) = 0;
  return result;
}

void AriSdk::ARI_IBIOgrsInterfaceStatusIndCb_SDK::~ARI_IBIOgrsInterfaceStatusIndCb_SDK(AriSdk::ARI_IBIOgrsInterfaceStatusIndCb_SDK *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C9021F0;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4077774924);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsInterfaceStatusIndCb_SDK::~ARI_IBIOgrsInterfaceStatusIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsInterfaceStatusIndCb_SDK::pack(AriSdk::ARI_IBIOgrsInterfaceStatusIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  _BYTE *v7;
  _BYTE *v8;
  BOOL v9;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 1uLL, 0), !(_DWORD)result))
    {
      v7 = (_BYTE *)*((_QWORD *)this + 10);
      v8 = (_BYTE *)*((_QWORD *)this + 11);
      if (v7)
        v9 = v7 == v8;
      else
        v9 = 1;
      if (v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, v8 - v7, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsInterfaceStatusIndCb_SDK::unpack(AriSdk::ARI_IBIOgrsInterfaceStatusIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _BYTE *v5;
  _OWORD *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  size_t v10;
  void **v11;
  unint64_t v12;
  const char *v13;
  void **v14;
  void *v15;
  unint64_t v17;
  BOOL v18;
  void *__p[2];
  char v20;

  LOBYTE(__p[0]) = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, (BOOL *)__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = LOBYTE(__p[0]) == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  LOBYTE(__p[0]) = 0;
  v5 = (_BYTE *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 1, (BOOL *)__p, 0);
  if ((_DWORD)v3 || !LOBYTE(__p[0]))
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4077774924);
  }
  v18 = 0;
  v17 = 0xAAAAAAAAAAAAAAAALL;
  v6 = (_OWORD *)operator new[]();
  *v6 = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  v6[3] = 0u;
  v6[4] = 0u;
  v6[5] = 0u;
  v6[6] = 0u;
  v6[7] = 0u;
  v6[8] = 0u;
  v6[9] = 0u;
  v6[10] = 0u;
  v6[11] = 0u;
  v6[12] = 0u;
  v6[13] = 0u;
  v6[14] = 0u;
  v6[15] = 0u;
  v6[16] = 0u;
  v6[17] = 0u;
  v6[18] = 0u;
  v6[19] = 0u;
  v6[20] = 0u;
  v6[21] = 0u;
  v6[22] = 0u;
  v6[23] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 384, &v18, &v17);
  if (!(_DWORD)v3 && v18)
  {
    if (v17 >= 0xC)
    {
      v9 = v17 / 0xC;
      v10 = 12 * (v17 / 0xC);
      v7 = (char *)operator new(v10);
      v8 = &v7[12 * v9];
      memcpy(v7, v6, v10);
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    v11 = (void **)((char *)this + 80);
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 2);
    if (v12 < 0x21)
    {
      v15 = *v11;
      if (*v11)
      {
        *((_QWORD *)this + 11) = v15;
        operator delete(v15);
        *v11 = 0;
        *((_QWORD *)this + 11) = 0;
        *((_QWORD *)this + 12) = 0;
      }
      *((_QWORD *)this + 10) = v7;
      *((_QWORD *)this + 11) = v8;
      *((_QWORD *)this + 12) = v8;
    }
    else
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
      if (v20 >= 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v13, v14, 360, v11, v12, 32);
      if (v20 < 0)
        operator delete(__p[0]);
      if (v7)
        operator delete(v7);
    }
  }
  MEMORY[0x212BB9B48](v6, 0x1000C803E1C8BA9);
  return v3;
}

void sub_20E23C268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void *v22;

  if (a21 < 0)
    operator delete(__p);
  if (v22)
    operator delete(v22);
  MEMORY[0x212BB9B48](v21, 0x1000C803E1C8BA9);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsInterfaceStatusIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsInterfaceStatusIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1971486720;
}

double AriSdk::ARI_IBIOgrsInterfaceStopReq_SDK::ARI_IBIOgrsInterfaceStopReq_SDK(AriSdk::ARI_IBIOgrsInterfaceStopReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x74850000u, 0);
  *(_QWORD *)v1 = &off_24C902228;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_QWORD *)v1 + 12) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x74850000u, 0);
  *(_QWORD *)v1 = &off_24C902228;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_QWORD *)v1 + 12) = 0;
  return result;
}

double AriSdk::ARI_IBIOgrsInterfaceStopReq_SDK::ARI_IBIOgrsInterfaceStopReq_SDK(AriSdk::ARI_IBIOgrsInterfaceStopReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C902228;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_QWORD *)v3 + 12) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C902228;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_QWORD *)v3 + 12) = 0;
  return result;
}

void AriSdk::ARI_IBIOgrsInterfaceStopReq_SDK::~ARI_IBIOgrsInterfaceStopReq_SDK(AriSdk::ARI_IBIOgrsInterfaceStopReq_SDK *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C902228;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4077774924);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsInterfaceStopReq_SDK::~ARI_IBIOgrsInterfaceStopReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsInterfaceStopReq_SDK::pack(AriSdk::ARI_IBIOgrsInterfaceStopReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  _BYTE *v7;
  _BYTE *v8;
  BOOL v9;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 1uLL, 0), !(_DWORD)result))
    {
      v7 = (_BYTE *)*((_QWORD *)this + 10);
      v8 = (_BYTE *)*((_QWORD *)this + 11);
      if (v7)
        v9 = v7 == v8;
      else
        v9 = 1;
      if (v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, v8 - v7, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsInterfaceStopReq_SDK::unpack(AriSdk::ARI_IBIOgrsInterfaceStopReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _BYTE *v5;
  _OWORD *v6;
  void **v7;
  _BYTE *v8;
  void *v9;
  const char *v10;
  BOOL *v11;
  void *v12;
  void *__p;
  _BYTE *v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  BOOL v19[8];
  char v20;

  v19[0] = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, v19, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v19[0];
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v19[0] = 0;
  v5 = (_BYTE *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 1, v19, 0);
  if ((_DWORD)v3 || !v19[0])
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4077774924);
  }
  v18 = 0;
  v17 = 0xAAAAAAAAAAAAAAAALL;
  v6 = (_OWORD *)operator new[]();
  *v6 = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  v6[3] = 0u;
  v6[4] = 0u;
  v6[5] = 0u;
  v6[6] = 0u;
  v6[7] = 0u;
  *((_DWORD *)v6 + 32) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 132, &v18, &v17);
  if (!(_DWORD)v3 && v18)
  {
    v15 = 0;
    v16 = 0;
    __p = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v6, (uint64_t)v6 + 4 * (v17 >> 2), v17 >> 2);
    v7 = (void **)((char *)this + 80);
    v9 = __p;
    v8 = v15;
    if ((unint64_t)(v15 - (_BYTE *)__p) < 0x85)
    {
      v12 = *v7;
      if (*v7)
      {
        *((_QWORD *)this + 11) = v12;
        operator delete(v12);
        *v7 = 0;
        *((_QWORD *)this + 11) = 0;
        *((_QWORD *)this + 12) = 0;
        v9 = __p;
        v8 = v15;
      }
      *((_QWORD *)this + 10) = v9;
      *((_QWORD *)this + 11) = v8;
      *((_QWORD *)this + 12) = v16;
    }
    else
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)v19);
      if (v20 >= 0)
        v11 = v19;
      else
        v11 = *(BOOL **)v19;
      Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v10, v11, 360, (char *)this + 80, (v15 - (_BYTE *)__p) >> 2, 33);
      if (v20 < 0)
        operator delete(*(void **)v19);
      if (__p)
      {
        v15 = __p;
        operator delete(__p);
      }
    }
  }
  MEMORY[0x212BB9B48](v6, 0x1000C8052888210);
  return v3;
}

void sub_20E23C7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;

  if (*(char *)(v17 - 33) < 0)
    operator delete(*(void **)(v17 - 56));
  if (__p)
    operator delete(__p);
  MEMORY[0x212BB9B48](v16, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsInterfaceStopReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsInterfaceStopReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1954873344;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsInterfaceStopRspCb_SDK::ARI_IBIOgrsInterfaceStopRspCb_SDK(AriSdk::ARI_IBIOgrsInterfaceStopRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75050000u, 0);
  *(_QWORD *)result = &off_24C902260;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75050000u, 0);
  *(_QWORD *)result = &off_24C902260;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsInterfaceStopRspCb_SDK::ARI_IBIOgrsInterfaceStopRspCb_SDK(AriSdk::ARI_IBIOgrsInterfaceStopRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C902260;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C902260;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIOgrsInterfaceStopRspCb_SDK::~ARI_IBIOgrsInterfaceStopRspCb_SDK(AriSdk::ARI_IBIOgrsInterfaceStopRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C902260;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsInterfaceStopRspCb_SDK::~ARI_IBIOgrsInterfaceStopRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsInterfaceStopRspCb_SDK::pack(AriSdk::ARI_IBIOgrsInterfaceStopRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 4uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsInterfaceStopRspCb_SDK::unpack(AriSdk::ARI_IBIOgrsInterfaceStopRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v9, 0);
  if ((_DWORD)v3 || !v9)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v8 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 4, &v8, 0);
  if (!(_DWORD)v3 && v8)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  return v3;
}

void sub_20E23CC8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsInterfaceStopRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsInterfaceStopRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1963261952;
}

double AriSdk::ARI_IBIOgrsPresenceDiscoveryReq_SDK::ARI_IBIOgrsPresenceDiscoveryReq_SDK(AriSdk::ARI_IBIOgrsPresenceDiscoveryReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x74820000u, 0);
  *(_QWORD *)v1 = &off_24C902298;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_QWORD *)v1 + 14) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x74820000u, 0);
  *(_QWORD *)v1 = &off_24C902298;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_QWORD *)v1 + 14) = 0;
  return result;
}

double AriSdk::ARI_IBIOgrsPresenceDiscoveryReq_SDK::ARI_IBIOgrsPresenceDiscoveryReq_SDK(AriSdk::ARI_IBIOgrsPresenceDiscoveryReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C902298;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_QWORD *)v3 + 14) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C902298;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_QWORD *)v3 + 14) = 0;
  return result;
}

void AriSdk::ARI_IBIOgrsPresenceDiscoveryReq_SDK::~ARI_IBIOgrsPresenceDiscoveryReq_SDK(AriSdk::ARI_IBIOgrsPresenceDiscoveryReq_SDK *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_24C902298;
  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4077774924);
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C40BDFB0063);
  v5 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40BDFB0063);
  v6 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsPresenceDiscoveryReq_SDK::~ARI_IBIOgrsPresenceDiscoveryReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsPresenceDiscoveryReq_SDK::pack(AriSdk::ARI_IBIOgrsPresenceDiscoveryReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  _BYTE *v9;
  _BYTE *v10;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 2uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 2uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v8, 1uLL, 0), !(_DWORD)result))
        {
          v9 = (_BYTE *)*((_QWORD *)this + 12);
          if (!v9
            || (v10 = (_BYTE *)*((_QWORD *)this + 13), v9 == v10)
            || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v9, v10 - v9, 0), !(_DWORD)result))
          {
            result = 0;
            *a2 = (AriMsg *)*((_QWORD *)this + 6);
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsPresenceDiscoveryReq_SDK::unpack(AriSdk::ARI_IBIOgrsPresenceDiscoveryReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _WORD *v5;
  _WORD *v6;
  _BYTE *v7;
  _OWORD *v8;
  __n128 __p;
  uint64_t v11;
  size_t __sz;
  BOOL v13;

  __p.n128_u8[0] = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = __p.n128_u8[0] == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v5 = (_WORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 2, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v5, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C40BDFB0063);
  }
  __p.n128_u8[0] = 0;
  v6 = (_WORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 2, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v6, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C40BDFB0063);
  }
  __p.n128_u8[0] = 0;
  v7 = (_BYTE *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v7, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 11, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C4077774924);
  }
  v13 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v8 = (_OWORD *)operator new[]();
  *v8 = 0u;
  v8[1] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v8, 32, &v13, &__sz);
  if (!(_DWORD)v3 && v13)
  {
    v11 = 0;
    __p = 0uLL;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v8, (uint64_t)v8 + __sz, __sz);
    AriSdk::TlvArray<unsigned char,32ul>::operator=((std::vector<int> *)this + 4, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
  }
  MEMORY[0x212BB9B48](v8, 0x1000C8077774924);
  return v3;
}

void sub_20E23D2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x212BB9B48](v11, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsPresenceDiscoveryReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsPresenceDiscoveryReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1954676736;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsPresenceDiscoveryRspCb_SDK::ARI_IBIOgrsPresenceDiscoveryRspCb_SDK(AriSdk::ARI_IBIOgrsPresenceDiscoveryRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75020000u, 0);
  *(_QWORD *)result = &off_24C9022D0;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75020000u, 0);
  *(_QWORD *)result = &off_24C9022D0;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsPresenceDiscoveryRspCb_SDK::ARI_IBIOgrsPresenceDiscoveryRspCb_SDK(AriSdk::ARI_IBIOgrsPresenceDiscoveryRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C9022D0;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C9022D0;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIOgrsPresenceDiscoveryRspCb_SDK::~ARI_IBIOgrsPresenceDiscoveryRspCb_SDK(AriSdk::ARI_IBIOgrsPresenceDiscoveryRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C9022D0;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsPresenceDiscoveryRspCb_SDK::~ARI_IBIOgrsPresenceDiscoveryRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsPresenceDiscoveryRspCb_SDK::pack(AriSdk::ARI_IBIOgrsPresenceDiscoveryRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 4uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsPresenceDiscoveryRspCb_SDK::unpack(AriSdk::ARI_IBIOgrsPresenceDiscoveryRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v9, 0);
  if ((_DWORD)v3 || !v9)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v8 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 4, &v8, 0);
  if (!(_DWORD)v3 && v8)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  return v3;
}

void sub_20E23D764(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsPresenceDiscoveryRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsPresenceDiscoveryRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1963065344;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsPresenceDiscoveryStopReq_SDK::ARI_IBIOgrsPresenceDiscoveryStopReq_SDK(AriSdk::ARI_IBIOgrsPresenceDiscoveryStopReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x74828000u, 0);
  *(_QWORD *)result = &off_24C902308;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x74828000u, 0);
  *(_QWORD *)result = &off_24C902308;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsPresenceDiscoveryStopReq_SDK::ARI_IBIOgrsPresenceDiscoveryStopReq_SDK(AriSdk::ARI_IBIOgrsPresenceDiscoveryStopReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C902308;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C902308;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIOgrsPresenceDiscoveryStopReq_SDK::~ARI_IBIOgrsPresenceDiscoveryStopReq_SDK(AriSdk::ARI_IBIOgrsPresenceDiscoveryStopReq_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C902308;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsPresenceDiscoveryStopReq_SDK::~ARI_IBIOgrsPresenceDiscoveryStopReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsPresenceDiscoveryStopReq_SDK::pack(AriSdk::ARI_IBIOgrsPresenceDiscoveryStopReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsPresenceDiscoveryStopReq_SDK::unpack(AriSdk::ARI_IBIOgrsPresenceDiscoveryStopReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E23D9F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsPresenceDiscoveryStopReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsPresenceDiscoveryStopReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1954709504;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsPresenceDiscoveryStopRspCb_SDK::ARI_IBIOgrsPresenceDiscoveryStopRspCb_SDK(AriSdk::ARI_IBIOgrsPresenceDiscoveryStopRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75028000u, 0);
  *(_QWORD *)result = &off_24C902340;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75028000u, 0);
  *(_QWORD *)result = &off_24C902340;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsPresenceDiscoveryStopRspCb_SDK::ARI_IBIOgrsPresenceDiscoveryStopRspCb_SDK(AriSdk::ARI_IBIOgrsPresenceDiscoveryStopRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C902340;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C902340;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIOgrsPresenceDiscoveryStopRspCb_SDK::~ARI_IBIOgrsPresenceDiscoveryStopRspCb_SDK(AriSdk::ARI_IBIOgrsPresenceDiscoveryStopRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C902340;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsPresenceDiscoveryStopRspCb_SDK::~ARI_IBIOgrsPresenceDiscoveryStopRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsPresenceDiscoveryStopRspCb_SDK::pack(AriSdk::ARI_IBIOgrsPresenceDiscoveryStopRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 4uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsPresenceDiscoveryStopRspCb_SDK::unpack(AriSdk::ARI_IBIOgrsPresenceDiscoveryStopRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v9, 0);
  if ((_DWORD)v3 || !v9)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v8 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 4, &v8, 0);
  if (!(_DWORD)v3 && v8)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  return v3;
}

void sub_20E23DE28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsPresenceDiscoveryStopRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsPresenceDiscoveryStopRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1963098112;
}

double AriSdk::ARI_IBIOgrsSetParameterReq_SDK::ARI_IBIOgrsSetParameterReq_SDK(AriSdk::ARI_IBIOgrsSetParameterReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x74878000u, 0);
  *(_QWORD *)v1 = &off_24C902378;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x74878000u, 0);
  *(_QWORD *)v1 = &off_24C902378;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

double AriSdk::ARI_IBIOgrsSetParameterReq_SDK::ARI_IBIOgrsSetParameterReq_SDK(AriSdk::ARI_IBIOgrsSetParameterReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C902378;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C902378;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

void AriSdk::ARI_IBIOgrsSetParameterReq_SDK::~ARI_IBIOgrsSetParameterReq_SDK(AriSdk::ARI_IBIOgrsSetParameterReq_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C902378;
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsSetParameterReq_SDK::~ARI_IBIOgrsSetParameterReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsSetParameterReq_SDK::pack(AriSdk::ARI_IBIOgrsSetParameterReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 4uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v8, 4uLL, 0), !(_DWORD)result))
        {
          result = 0;
          *a2 = (AriMsg *)*((_QWORD *)this + 6);
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsSetParameterReq_SDK::unpack(AriSdk::ARI_IBIOgrsSetParameterReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;

  v16 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v16, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v16;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v15 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v15, 0);
  if ((_DWORD)v3 || !v15)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v14 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 4, &v14, 0);
  if ((_DWORD)v3 || !v14)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v7 = (_DWORD *)operator new();
    *v7 = *v6;
    v8 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v7;
    if (v8)
      MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  }
  v13 = 0;
  v9 = (_DWORD *)operator new();
  *v9 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v9, 4, &v13, 0);
  if (!(_DWORD)v3 && v13)
  {
    v10 = (_DWORD *)operator new();
    *v10 = *v9;
    v11 = *((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v10;
    if (v11)
      MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
  }
  MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
  return v3;
}

void sub_20E23E3B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsSetParameterReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsSetParameterReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1955037184;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsSetParameterRspCb_SDK::ARI_IBIOgrsSetParameterRspCb_SDK(AriSdk::ARI_IBIOgrsSetParameterRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75078000u, 0);
  *(_QWORD *)result = &off_24C9023B0;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75078000u, 0);
  *(_QWORD *)result = &off_24C9023B0;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsSetParameterRspCb_SDK::ARI_IBIOgrsSetParameterRspCb_SDK(AriSdk::ARI_IBIOgrsSetParameterRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C9023B0;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C9023B0;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIOgrsSetParameterRspCb_SDK::~ARI_IBIOgrsSetParameterRspCb_SDK(AriSdk::ARI_IBIOgrsSetParameterRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C9023B0;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsSetParameterRspCb_SDK::~ARI_IBIOgrsSetParameterRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsSetParameterRspCb_SDK::pack(AriSdk::ARI_IBIOgrsSetParameterRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 4uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsSetParameterRspCb_SDK::unpack(AriSdk::ARI_IBIOgrsSetParameterRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v9, 0);
  if ((_DWORD)v3 || !v9)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v8 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 4, &v8, 0);
  if (!(_DWORD)v3 && v8)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  return v3;
}

void sub_20E23E804(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsSetParameterRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsSetParameterRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1963425792;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsStatusIndCb_SDK::ARI_IBIOgrsStatusIndCb_SDK(AriSdk::ARI_IBIOgrsStatusIndCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75808000u, 0);
  *(_QWORD *)result = &off_24C9023E8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75808000u, 0);
  *(_QWORD *)result = &off_24C9023E8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsStatusIndCb_SDK::ARI_IBIOgrsStatusIndCb_SDK(AriSdk::ARI_IBIOgrsStatusIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C9023E8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C9023E8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBIOgrsStatusIndCb_SDK::~ARI_IBIOgrsStatusIndCb_SDK(AriSdk::ARI_IBIOgrsStatusIndCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C9023E8;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsStatusIndCb_SDK::~ARI_IBIOgrsStatusIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsStatusIndCb_SDK::pack(AriSdk::ARI_IBIOgrsStatusIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsStatusIndCb_SDK::unpack(AriSdk::ARI_IBIOgrsStatusIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v9, 0);
  if (!(_DWORD)v3 && v9)
  {
    v6 = (_DWORD *)operator new();
    *v6 = *v5;
    v7 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v6;
    if (v7)
      MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  }
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E23EBA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsStatusIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsStatusIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1971355648;
}

double AriSdk::ARI_IBIOgrsTxDiscardReq_SDK::ARI_IBIOgrsTxDiscardReq_SDK(AriSdk::ARI_IBIOgrsTxDiscardReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x74838000u, 0);
  *(_QWORD *)v1 = &off_24C902420;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_QWORD *)v1 + 12) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x74838000u, 0);
  *(_QWORD *)v1 = &off_24C902420;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_QWORD *)v1 + 12) = 0;
  return result;
}

double AriSdk::ARI_IBIOgrsTxDiscardReq_SDK::ARI_IBIOgrsTxDiscardReq_SDK(AriSdk::ARI_IBIOgrsTxDiscardReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C902420;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_QWORD *)v3 + 12) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C902420;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_QWORD *)v3 + 12) = 0;
  return result;
}

void AriSdk::ARI_IBIOgrsTxDiscardReq_SDK::~ARI_IBIOgrsTxDiscardReq_SDK(AriSdk::ARI_IBIOgrsTxDiscardReq_SDK *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C902420;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4077774924);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsTxDiscardReq_SDK::~ARI_IBIOgrsTxDiscardReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsTxDiscardReq_SDK::pack(AriSdk::ARI_IBIOgrsTxDiscardReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  _BYTE *v7;
  _BYTE *v8;
  BOOL v9;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 1uLL, 0), !(_DWORD)result))
    {
      v7 = (_BYTE *)*((_QWORD *)this + 10);
      v8 = (_BYTE *)*((_QWORD *)this + 11);
      if (v7)
        v9 = v7 == v8;
      else
        v9 = 1;
      if (v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, v8 - v7, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsTxDiscardReq_SDK::unpack(AriSdk::ARI_IBIOgrsTxDiscardReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _BYTE *v5;
  _OWORD *v6;
  void *__p[3];
  unint64_t v9;
  BOOL v10;

  LOBYTE(__p[0]) = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, (BOOL *)__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = LOBYTE(__p[0]) == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  LOBYTE(__p[0]) = 0;
  v5 = (_BYTE *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 1, (BOOL *)__p, 0);
  if ((_DWORD)v3 || !LOBYTE(__p[0]))
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4077774924);
  }
  v10 = 0;
  v9 = 0xAAAAAAAAAAAAAAAALL;
  v6 = (_OWORD *)operator new[]();
  *v6 = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  v6[3] = 0u;
  v6[4] = 0u;
  v6[5] = 0u;
  v6[6] = 0u;
  v6[7] = 0u;
  v6[8] = 0u;
  v6[9] = 0u;
  v6[10] = 0u;
  v6[11] = 0u;
  v6[12] = 0u;
  v6[13] = 0u;
  v6[14] = 0u;
  v6[15] = 0u;
  v6[16] = 0u;
  v6[17] = 0u;
  v6[18] = 0u;
  v6[19] = 0u;
  v6[20] = 0u;
  v6[21] = 0u;
  v6[22] = 0u;
  v6[23] = 0u;
  v6[24] = 0u;
  v6[25] = 0u;
  v6[26] = 0u;
  v6[27] = 0u;
  v6[28] = 0u;
  v6[29] = 0u;
  v6[30] = 0u;
  v6[31] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 512, &v10, &v9);
  if (!(_DWORD)v3 && v10)
  {
    memset(__p, 0, sizeof(__p));
    std::vector<IBIUserList_t>::__init_with_size[abi:ne180100]<IBIUserList_t*,IBIUserList_t*>(__p, v6, (uint64_t)&v6[v9 >> 4], v9 >> 4);
    AriSdk::TlvArray<IBIUserList_t,32ul>::operator=((uint64_t)this + 80, (uint64_t *)__p);
    if (__p[0])
      operator delete(__p[0]);
  }
  MEMORY[0x212BB9B48](v6, 0x1000C80451B5BE8);
  return v3;
}

void sub_20E23F05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  uint64_t v10;

  if (__p)
    operator delete(__p);
  MEMORY[0x212BB9B48](v10, 0x1000C80451B5BE8);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsTxDiscardReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsTxDiscardReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1954775040;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsTxDiscardRspCb_SDK::ARI_IBIOgrsTxDiscardRspCb_SDK(AriSdk::ARI_IBIOgrsTxDiscardRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75038000u, 0);
  *(_QWORD *)result = &off_24C902458;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x75038000u, 0);
  *(_QWORD *)result = &off_24C902458;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIOgrsTxDiscardRspCb_SDK::ARI_IBIOgrsTxDiscardRspCb_SDK(AriSdk::ARI_IBIOgrsTxDiscardRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C902458;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C902458;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIOgrsTxDiscardRspCb_SDK::~ARI_IBIOgrsTxDiscardRspCb_SDK(AriSdk::ARI_IBIOgrsTxDiscardRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C902458;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsTxDiscardRspCb_SDK::~ARI_IBIOgrsTxDiscardRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsTxDiscardRspCb_SDK::pack(AriSdk::ARI_IBIOgrsTxDiscardRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 4uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsTxDiscardRspCb_SDK::unpack(AriSdk::ARI_IBIOgrsTxDiscardRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v9, 0);
  if ((_DWORD)v3 || !v9)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v8 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 4, &v8, 0);
  if (!(_DWORD)v3 && v8)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  return v3;
}

void sub_20E23F4E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsTxDiscardRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsTxDiscardRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1963163648;
}

double AriSdk::ARI_IBIOgrsTxDiscardIndCb_SDK::ARI_IBIOgrsTxDiscardIndCb_SDK(AriSdk::ARI_IBIOgrsTxDiscardIndCb_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x75820000u, 0);
  *(_QWORD *)v1 = &off_24C902490;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x75820000u, 0);
  *(_QWORD *)v1 = &off_24C902490;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

double AriSdk::ARI_IBIOgrsTxDiscardIndCb_SDK::ARI_IBIOgrsTxDiscardIndCb_SDK(AriSdk::ARI_IBIOgrsTxDiscardIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C902490;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C902490;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

void AriSdk::ARI_IBIOgrsTxDiscardIndCb_SDK::~ARI_IBIOgrsTxDiscardIndCb_SDK(AriSdk::ARI_IBIOgrsTxDiscardIndCb_SDK *this)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C902490;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIOgrsTxDiscardIndCb_SDK::~ARI_IBIOgrsTxDiscardIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIOgrsTxDiscardIndCb_SDK::pack(AriSdk::ARI_IBIOgrsTxDiscardIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  _BYTE *v6;
  _BYTE *v7;
  BOOL v8;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (_BYTE *)*((_QWORD *)this + 9);
    v7 = (_BYTE *)*((_QWORD *)this + 10);
    if (v6)
      v8 = v6 == v7;
    else
      v8 = 1;
    if (v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, v7 - v6, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIOgrsTxDiscardIndCb_SDK::unpack(AriSdk::ARI_IBIOgrsTxDiscardIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _QWORD *v5;
  __n128 __p;
  uint64_t v8;
  size_t __sz;
  BOOL v10;

  __p.n128_u8[0] = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = __p.n128_u8[0] == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v10 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v5 = (_QWORD *)operator new[]();
  *v5 = 0;
  v5[1] = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 16, &v10, &__sz);
  if (!(_DWORD)v3 && v10)
  {
    v8 = 0;
    __p = 0uLL;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v5, (uint64_t)v5 + __sz, __sz);
    AriSdk::TlvArray<unsigned char,16ul>::operator=((std::vector<int> *)this + 3, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
  }
  MEMORY[0x212BB9B48](v5, 0x1000C8077774924);
  return v3;
}

void sub_20E23F87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x212BB9B48](v11, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIOgrsTxDiscardIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIOgrsTxDiscardIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1971453952;
}

_QWORD *std::vector<IBIUserList_t>::__init_with_size[abi:ne180100]<IBIUserList_t*,IBIUserList_t*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v7 = result;
    result = operator new(16 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[2 * a4];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_20E23F970(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ARI_IBICdmaSmsErrorCause_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICdmaSmsErrorCause_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICdmaSmsErrorClass_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICdmaSmsErrorClass_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICdmaTpduData_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICdmaTpduData_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetCdmaChannel_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetCdmaChannel_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetDcServiceDomain_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetDcServiceDomain_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetGsmService_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetGsmService_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimMsgListCbParams_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimMsgListCbParams_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimMsgListData_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimMsgListData_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimMsgTagType_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimMsgTagType_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimSmscAddress_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimSmscAddress_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISmsCpResult_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISmsCpResult_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISmsData_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISmsData_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISmsDownloadData_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISmsDownloadData_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISmsMessageReference_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISmsMessageReference_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISmsMsgWaitingArray_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISmsMsgWaitingArray_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISmsPpProtocol_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISmsPpProtocol_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISmsSendMoreMessagesStatus_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISmsSendMoreMessagesStatus_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISmsSendResult_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISmsSendResult_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISmsServiceErrorCause_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISmsServiceErrorCause_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISmsStorageResult_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISmsStorageResult_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISmsTpFcs_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISmsTpFcs_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBITpduData_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBITpduData_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

double Ari::ActorList::ActorList(Ari::ActorList *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)this = xmmword_20E314750;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
  return result;
}

{
  double result;

  result = 0.0;
  *(_OWORD *)this = xmmword_20E314750;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
  return result;
}

void Ari::ActorList::~ActorList(Ari::ActorList *this)
{
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  std::__forward_list_base<std::shared_ptr<Ari::Actor>>::clear((_QWORD **)this);
}

{
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  std::__forward_list_base<std::shared_ptr<Ari::Actor>>::clear((_QWORD **)this);
}

uint64_t Ari::ActorList::registerActor(uint64_t a1, int ***a2)
{
  std::mutex *v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  char v8;
  uint64_t v9;
  int v10;
  void **v11;
  uint64_t v12;
  const char *v13;
  void **v14;
  uint64_t v15;
  uint64_t **v17;
  _QWORD *v18;
  int **v19;
  int **v20;
  unint64_t *v21;
  unint64_t v22;
  void *__p[2];
  char v24;
  std::string v25;

  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v5 = (*((uint64_t (**)(int **))**a2 + 2))(*a2);
  if (*(char *)(v5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)v5, *(_QWORD *)(v5 + 8));
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v25.__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v6;
  }
  v7 = Ari::ActorList::contains_sync((uint64_t ***)a1, (uint64_t)&v25);
  v8 = v7;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    if ((v8 & 1) != 0)
      goto LABEL_6;
  }
  else if ((v7 & 1) != 0)
  {
LABEL_6:
    v9 = 0;
    goto LABEL_19;
  }
  v9 = Ari::Actor::registerAsClient(*a2);
  if (!(_DWORD)v9)
  {
    if ((*(unsigned int (**)(int **))**a2)(*a2) || (*((unsigned int (**)(int **))**a2 + 1))(*a2))
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host_actors.cpp", "registerActor", (uint64_t)__p);
      v10 = v24;
      v11 = (void **)__p[0];
      v12 = (*((uint64_t (**)(int **))**a2 + 2))(*a2);
      v14 = __p;
      if (v10 < 0)
        v14 = v11;
      if (*(char *)(v12 + 23) >= 0)
        v15 = v12;
      else
        v15 = *(_QWORD *)v12;
      Ari::Log((Ari *)8, "(%s:%d) Actor %s failed to register events and/or indications", v13, v14, 42, v15);
      if (v24 < 0)
        operator delete(__p[0]);
      Ari::Actor::deregisterAsClient((Ari::Actor *)*a2);
      v9 = 0xFFFFFFFFLL;
    }
    else
    {
      v17 = *(uint64_t ***)a1;
      v18 = operator new(0x18uLL);
      v20 = *a2;
      v19 = a2[1];
      *v18 = v17;
      v18[1] = v20;
      v18[2] = v19;
      if (v19)
      {
        v21 = (unint64_t *)(v19 + 1);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v9 = 0;
      *(_QWORD *)a1 = v18;
    }
  }
LABEL_19:
  std::mutex::unlock(v4);
  return v9;
}

void sub_20E24009C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::mutex *v23;

  std::mutex::unlock(v23);
  _Unwind_Resume(a1);
}

uint64_t Ari::ActorList::contains_sync(uint64_t ***a1, uint64_t a2)
{
  uint64_t **v2;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;

  v2 = *a1;
  if (!*a1)
    return 0;
  while (1)
  {
    v4 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t *))(*v2[1] + 16))(v2[1]);
    v5 = v4[23];
    if ((v5 & 0x80u) == 0)
      v6 = v4[23];
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = *(unsigned __int8 *)(a2 + 23);
    v8 = (char)v7;
    if ((v7 & 0x80u) != 0)
      v7 = *(_QWORD *)(a2 + 8);
    if (v6 != v7)
      goto LABEL_17;
    v9 = v8 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
    if ((v5 & 0x80) != 0)
      break;
    if (!v4[23])
      return 1;
    while (*v4 == *v9)
    {
      ++v4;
      ++v9;
      if (!--v5)
        return 1;
    }
LABEL_17:
    v2 = (uint64_t **)*v2;
    if (!v2)
      return 0;
  }
  if (memcmp(*(const void **)v4, v9, *((_QWORD *)v4 + 1)))
    goto LABEL_17;
  return 1;
}

uint64_t Ari::Actor::registerAsClient(int **this)
{
  char *v2;
  int v3;
  void **v4;
  uint64_t v5;
  const char *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unsigned int v11;
  int v12;
  void **v13;
  uint64_t v14;
  const char *v15;
  void **v16;
  uint64_t v17;
  _QWORD v19[5];
  void *__p[2];
  char v21;

  v2 = (char *)(this + 1);
  if (*((_DWORD *)this + 2) == -1)
  {
    v10 = (char *)(*((uint64_t (**)(int **))*this + 2))(this);
    if (v10[23] < 0)
      v10 = *(char **)v10;
    v9 = AriHost::RegisterClient((AriHost *)v10, v2, this[2], (dispatch_queue_s *)0xFFFFFFFFLL, 5);
    if (!(_DWORD)v9)
    {
      v11 = *((_DWORD *)this + 2);
      v19[0] = MEMORY[0x24BDAC760];
      v19[1] = 0x40000000;
      v19[2] = ___ZN3Ari5Actor16registerAsClientEv_block_invoke;
      v19[3] = &__block_descriptor_tmp_1;
      v19[4] = this;
      v9 = AriHost::SetRTEventHandler(v11, 5, (uint64_t)v19);
      if ((_DWORD)v9)
      {
        if (AriHost::DeregisterClient((AriHost *)*(unsigned int *)v2))
        {
          AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host_actors.cpp", "registerAsClient", (uint64_t)__p);
          v12 = v21;
          v13 = (void **)__p[0];
          v14 = (*((uint64_t (**)(int **))*this + 2))(this);
          v16 = v12 >= 0 ? __p : v13;
          v17 = *(char *)(v14 + 23) >= 0 ? v14 : *(_QWORD *)v14;
          Ari::Log((Ari *)8, "(%s:%d) Failed to deregister actor %s with CID 0x%x", v15, v16, 98, v17, *(unsigned int *)v2);
          if (v21 < 0)
            operator delete(__p[0]);
        }
        *(_DWORD *)v2 = -1;
      }
    }
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host_actors.cpp", "registerAsClient", (uint64_t)__p);
    v3 = v21;
    v4 = (void **)__p[0];
    v5 = (*((uint64_t (**)(int **))*this + 2))(this);
    if (v3 >= 0)
      v7 = __p;
    else
      v7 = v4;
    if (*(char *)(v5 + 23) >= 0)
      v8 = v5;
    else
      v8 = *(_QWORD *)v5;
    Ari::Log((Ari *)0x10, "(%s:%d) Register called twice on %s", v6, v7, 83, v8);
    if (v21 < 0)
      operator delete(__p[0]);
    return 0;
  }
  return v9;
}

void sub_20E24037C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Ari::Actor::deregisterAsClient(Ari::Actor *this)
{
  AriHost *v2;
  uint64_t v3;
  int v4;
  void **v5;
  uint64_t v6;
  const char *v7;
  void **v8;
  uint64_t v9;
  void *__p[2];
  char v12;

  v2 = (AriHost *)*((unsigned int *)this + 2);
  if ((_DWORD)v2 == -1)
    return 0;
  v3 = AriHost::DeregisterClient(v2);
  if ((_DWORD)v3)
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host_actors.cpp", "deregisterAsClient", (uint64_t)__p);
    v4 = v12;
    v5 = (void **)__p[0];
    v6 = (*(uint64_t (**)(Ari::Actor *))(*(_QWORD *)this + 16))(this);
    if (v4 >= 0)
      v8 = __p;
    else
      v8 = v5;
    if (*(char *)(v6 + 23) >= 0)
      v9 = v6;
    else
      v9 = *(_QWORD *)v6;
    Ari::Log((Ari *)8, "(%s:%d) Actor %s with CID 0x%x failed to deregister", v7, v8, 113, v9, *((unsigned int *)this + 2));
    if (v12 < 0)
      operator delete(__p[0]);
  }
  *((_DWORD *)this + 2) = -1;
  return v3;
}

void sub_20E240478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Ari::ActorList::clear(Ari::ActorList *this)
{
  std::mutex *v2;

  v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  std::__forward_list_base<std::shared_ptr<Ari::Actor>>::clear((_QWORD **)this);
  std::mutex::unlock(v2);
}

uint64_t Ari::Actor::Actor(uint64_t this)
{
  *(_QWORD *)this = &unk_24C9046B0;
  *(_DWORD *)(this + 8) = -1;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

uint64_t ___ZN3Ari5Actor16registerAsClientEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  void **v3;
  uint64_t v4;
  const char *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v11;

  v1 = *(_QWORD *)(a1 + 32);
  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host_actors.cpp", "registerAsClient_block_invoke", (uint64_t)__p);
  v2 = v11;
  v3 = (void **)__p[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  if (v2 >= 0)
    v6 = __p;
  else
    v6 = v3;
  if (*(char *)(v4 + 23) >= 0)
    v7 = v4;
  else
    v7 = *(_QWORD *)v4;
  Ari::Log((Ari *)0x20, "(%s:%d) Actor '%s' received RT re-init event", v5, v6, 89, v7);
  if (v11 < 0)
    operator delete(__p[0]);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  AriHost::ReRegisterClient(v8, v1 + 8, -1);
  return 0;
}

void sub_20E2405B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

Ari::IndicationReregistrationActor *Ari::IndicationReregistrationActor::IndicationReregistrationActor(Ari::IndicationReregistrationActor *this)
{
  const char *v2;
  NSObject *v3;

  *((_DWORD *)this + 2) = -1;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_24C9046F8;
  Ari::IndicationReregistrationActor::getName(this);
  if (byte_253D0AF8F >= 0)
    v2 = (const char *)&Ari::IndicationReregistrationActor::getName(void)const::name;
  else
    v2 = (const char *)Ari::IndicationReregistrationActor::getName(void)const::name;
  v3 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
  *((_QWORD *)this + 2) = dispatch_queue_create(v2, v3);
  return this;
}

uint64_t *Ari::IndicationReregistrationActor::getName(Ari::IndicationReregistrationActor *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(&Ari::IndicationReregistrationActor::getName(void)const::name, "IndicationReregistrationActor");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &Ari::IndicationReregistrationActor::getName(void)const::name, &dword_20E126000);
  }
  return &Ari::IndicationReregistrationActor::getName(void)const::name;
}

void sub_20E2406C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Ari::IndicationReregistrationActor::~IndicationReregistrationActor(Ari::IndicationReregistrationActor *this)
{
  NSObject *v2;

  *(_QWORD *)this = off_24C9046F8;
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    dispatch_release(v2);
    *((_QWORD *)this + 2) = 0;
  }
}

{
  NSObject *v2;

  *(_QWORD *)this = off_24C9046F8;
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    dispatch_release(v2);
    *((_QWORD *)this + 2) = 0;
  }
}

Ari::IndicationReregistrationActor *Ari::IndicationReregistrationActor::create@<X0>(Ari::IndicationReregistrationActor **a1@<X8>)
{
  _QWORD *v3;
  Ari::IndicationReregistrationActor *result;

  v3 = operator new(0x30uLL);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = &off_24C9048D8;
  result = Ari::IndicationReregistrationActor::IndicationReregistrationActor((Ari::IndicationReregistrationActor *)(v3 + 3));
  v3[3] = off_24C904928;
  *a1 = result;
  a1[1] = (Ari::IndicationReregistrationActor *)v3;
  return result;
}

void sub_20E2407A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Ari::IndicationReregistrationActor::registerEvents(Ari::IndicationReregistrationActor *this)
{
  return 0;
}

uint64_t Ari::IndicationReregistrationActor::registerIndications(Ari::IndicationReregistrationActor *this)
{
  return 0;
}

Ari::LowPriorityFlushActor *Ari::LowPriorityFlushActor::create@<X0>(Ari::LowPriorityFlushActor **a1@<X8>)
{
  _QWORD *v3;
  Ari::LowPriorityFlushActor *result;

  v3 = operator new(0x50uLL);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = &off_24C904968;
  result = Ari::LowPriorityFlushActor::LowPriorityFlushActor((Ari::LowPriorityFlushActor *)(v3 + 3));
  v3[3] = off_24C9049B8;
  *a1 = result;
  a1[1] = (Ari::LowPriorityFlushActor *)v3;
  return result;
}

void sub_20E240818(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

Ari::LowPriorityFlushActor *Ari::LowPriorityFlushActor::LowPriorityFlushActor(Ari::LowPriorityFlushActor *this)
{
  char *v2;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v9;

  *((_DWORD *)this + 2) = -1;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_24C904720;
  *((_QWORD *)this + 3) = 0;
  v2 = (char *)this + 24;
  *((_QWORD *)this + 4) = 0;
  v3 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
  v4 = dispatch_queue_create("LowPriorityFlushActor", v3);
  *((_QWORD *)this + 2) = v4;
  AriDispatch::Timer::Create(v4, &v9);
  std::shared_ptr<std::vector<unsigned char>>::operator=[abi:ne180100]((uint64_t)v2, &v9);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return this;
}

void sub_20E2408EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

const char *Ari::LowPriorityFlushActor::getName(Ari::LowPriorityFlushActor *this)
{
  return "LowPriorityFlushActor";
}

void Ari::LowPriorityFlushActor::~LowPriorityFlushActor(Ari::LowPriorityFlushActor *this)
{
  NSObject *v2;

  *(_QWORD *)this = off_24C904720;
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    dispatch_release(v2);
    *((_QWORD *)this + 2) = 0;
  }
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
}

uint64_t Ari::LowPriorityFlushActor::registerEvents(Ari::LowPriorityFlushActor *this)
{
  uint64_t Instance;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unsigned int v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD v38[5];
  _QWORD v39[2];
  _QWORD v40[6];
  std::__shared_weak_count *v41;
  uint64_t v42;
  _QWORD v43[6];
  std::__shared_weak_count *v44;
  uint64_t v45;
  _QWORD v46[6];
  std::__shared_weak_count *v47;
  _QWORD v48[6];
  std::__shared_weak_count *v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;

  Instance = AriHost::GetInstance(this);
  v51 = 0;
  v52 = 0;
  v3 = (std::__shared_weak_count *)qword_253D0AF70;
  if (qword_253D0AF70
    && (v3 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_253D0AF70), (v52 = v3) != 0))
  {
    v4 = AriHost::SingletonWeakPtr;
    v51 = AriHost::SingletonWeakPtr;
  }
  else
  {
    v4 = 0;
  }
  v5 = *((_DWORD *)this + 2);
  v6 = MEMORY[0x24BDAC760];
  v48[0] = MEMORY[0x24BDAC760];
  v48[1] = 1174405120;
  v48[2] = ___ZN3Ari21LowPriorityFlushActor14registerEventsEv_block_invoke;
  v48[3] = &__block_descriptor_tmp_9;
  v48[4] = this;
  v48[5] = v4;
  v49 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v50 = Instance;
  v9 = AriHost::SetRTEventHandler(v5, 2, (uint64_t)v48);
  v10 = v49;
  if (v49)
  {
    v11 = (unint64_t *)&v49->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v52;
  if (!(_DWORD)v9)
  {
    v14 = *((_DWORD *)this + 2);
    v46[0] = v6;
    v46[1] = 1174405120;
    v46[2] = ___ZN3Ari21LowPriorityFlushActor14registerEventsEv_block_invoke_10;
    v46[3] = &__block_descriptor_tmp_12;
    v46[4] = this;
    v46[5] = v51;
    v47 = v52;
    if (v52)
    {
      v15 = (unint64_t *)&v52->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v9 = AriHost::SetRTEventHandler(v14, 1, (uint64_t)v46);
    v17 = v47;
    if (v47)
    {
      v18 = (unint64_t *)&v47->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v13 = v52;
    if (!(_DWORD)v9)
    {
      v20 = *((_DWORD *)this + 2);
      v43[0] = v6;
      v43[1] = 1174405120;
      v43[2] = ___ZN3Ari21LowPriorityFlushActor14registerEventsEv_block_invoke_13;
      v43[3] = &__block_descriptor_tmp_20;
      v43[4] = this;
      v43[5] = v51;
      v44 = v52;
      if (v52)
      {
        v21 = (unint64_t *)&v52->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v45 = Instance;
      v9 = AriHost::SetRTEventHandler(v20, 0, (uint64_t)v43);
      v23 = v44;
      if (v44)
      {
        v24 = (unint64_t *)&v44->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v13 = v52;
      if (!(_DWORD)v9)
      {
        v26 = *((_DWORD *)this + 2);
        v40[0] = v6;
        v40[1] = 1174405120;
        v40[2] = ___ZN3Ari21LowPriorityFlushActor14registerEventsEv_block_invoke_21;
        v40[3] = &__block_descriptor_tmp_26;
        v40[4] = this;
        v40[5] = v51;
        v41 = v52;
        if (v52)
        {
          v27 = (unint64_t *)&v52->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        v42 = Instance;
        v9 = AriHost::SetRTEventHandler(v26, 3, (uint64_t)v40);
        v29 = v41;
        if (v41)
        {
          v30 = (unint64_t *)&v41->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v13 = v52;
        if (!(_DWORD)v9)
        {
          v32 = *((_DWORD *)this + 2);
          v38[0] = v6;
          v38[1] = 1174405120;
          v38[2] = ___ZN3Ari21LowPriorityFlushActor14registerEventsEv_block_invoke_27;
          v38[3] = &__block_descriptor_tmp_29;
          v38[4] = this;
          v39[0] = v51;
          v39[1] = v52;
          if (v52)
          {
            v33 = (unint64_t *)&v52->__shared_owners_;
            do
              v34 = __ldxr(v33);
            while (__stxr(v34 + 1, v33));
          }
          v9 = AriHost::SetRTEventHandler(v32, 4, (uint64_t)v38);
          std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v39);
        }
      }
    }
  }
  if (v13)
  {
    v35 = (unint64_t *)&v13->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v9;
}

void sub_20E240CFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v1);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v2 - 96);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3Ari21LowPriorityFlushActor14registerEventsEv_block_invoke(uint64_t a1, NSObject *a2)
{
  uint64_t v4;
  const char *v5;
  void **v6;
  void *__p[2];
  char v9;

  v4 = *(_QWORD *)(a1 + 32);
  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host_actors.cpp", "registerEvents_block_invoke", (uint64_t)__p);
  if (v9 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  Ari::Log((Ari *)0x20, "(%s:%d) %s: ARI_RT_ENTER_LPM: canceling low-priority flush timer and flushing requests", v5, v6, 208, "LowPriorityFlushActor");
  if (v9 < 0)
    operator delete(__p[0]);
  AriDispatch::Timer::cancel(*(AriDispatch::Timer **)(v4 + 24));
  AriHost::flushLowPriorityRequests(*(NSObject ***)(a1 + 56), a2);
  return 0;
}

void sub_20E240DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c34_ZTSNSt3__110shared_ptrI7AriHostEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_40c34_ZTSNSt3__110shared_ptrI7AriHostEE(uint64_t a1)
{
  return std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](a1 + 40);
}

uint64_t ___ZN3Ari21LowPriorityFlushActor14registerEventsEv_block_invoke_10(uint64_t a1)
{
  uint64_t v1;
  const char *v2;
  void **v3;
  void *__p[2];
  char v6;

  v1 = *(_QWORD *)(a1 + 32);
  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host_actors.cpp", "registerEvents_block_invoke", (uint64_t)__p);
  if (v6 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  Ari::Log((Ari *)0x20, "(%s:%d) %s: ARI_RT_STOP: canceling low-priority flush timer", v2, v3, 219, "LowPriorityFlushActor");
  if (v6 < 0)
    operator delete(__p[0]);
  AriDispatch::Timer::cancel(*(AriDispatch::Timer **)(v1 + 24));
  return 0;
}

void sub_20E240EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN3Ari21LowPriorityFlushActor14registerEventsEv_block_invoke_13(_QWORD *a1, NSObject *a2)
{
  uint64_t v4;
  const char *v5;
  void **v6;
  uint64_t v7;
  dispatch_time_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v17[6];
  std::__shared_weak_count *v18;
  uint64_t v19;
  NSObject *v20;
  void *v21[2];
  char v22;

  v4 = a1[4];
  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host_actors.cpp", "registerEvents_block_invoke", (uint64_t)v21);
  if (v22 >= 0)
    v6 = v21;
  else
    v6 = (void **)v21[0];
  Ari::Log((Ari *)0x20, "(%s:%d) %s: ARI_RT_START", v5, v6, 229, "LowPriorityFlushActor");
  if (v22 < 0)
    operator delete(v21[0]);
  *(_QWORD *)(v4 + 40) = *(_QWORD *)(a1[7] + 696);
  *(_DWORD *)(v4 + 48) = 0;
  dispatch_retain(a2);
  dispatch_group_enter(a2);
  AriDispatch::Timer::cancel(*(AriDispatch::Timer **)(v4 + 24));
  v7 = *(_QWORD *)(v4 + 24);
  v8 = dispatch_time(0, 1000000000);
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 1174405120;
  v17[2] = ___ZN3Ari21LowPriorityFlushActor14registerEventsEv_block_invoke_2;
  v17[3] = &__block_descriptor_tmp_19;
  v10 = a1[5];
  v9 = (std::__shared_weak_count *)a1[6];
  v17[4] = v4;
  v17[5] = v10;
  v18 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v19 = a1[7];
  v20 = a2;
  AriDispatch::Timer::setPeriodic(v7, v8, 0x3B9ACA00uLL, v17);
  v13 = v18;
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return 0;
}

void sub_20E241044(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 33) < 0)
    operator delete(*(void **)(v1 - 56));
  _Unwind_Resume(exception_object);
}

void ___ZN3Ari21LowPriorityFlushActor14registerEventsEv_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  const char *v5;
  void **v6;
  const char *v7;
  void **v8;
  const char *v9;
  void **v10;
  void *__p[2];
  char v12;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(v2 + 48) + 1;
  *(_DWORD *)(v2 + 48) = v3;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 696);
  if (v3 == 8)
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host_actors.cpp", "registerEvents_block_invoke_2", (uint64_t)__p);
    if (v12 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    Ari::Log((Ari *)0x20, "(%s:%d) %s: waited %u seconds and did not reach idle, flushing low-priority queue anyway", v5, v6, 246, "LowPriorityFlushActor", 8);
    goto LABEL_11;
  }
  if ((unint64_t)(v4 - *(_QWORD *)(v2 + 40)) < 3)
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host_actors.cpp", "registerEvents_block_invoke_2", (uint64_t)__p);
    if (v12 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    Ari::Log((Ari *)0x20, "(%s:%d) %s: detected relatively idle ARI traffic in iteration %u; flushing low-priority queue",
      v7,
      v8,
      248,
      "LowPriorityFlushActor",
      *(unsigned int *)(v2 + 48));
LABEL_11:
    if (v12 < 0)
      operator delete(__p[0]);
    AriDispatch::Timer::cancel(*(AriDispatch::Timer **)(v2 + 24));
    AriHost::flushLowPriorityRequests(*(NSObject ***)(a1 + 56), *(NSObject **)(a1 + 64));
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
    dispatch_release(*(dispatch_object_t *)(a1 + 64));
    goto LABEL_14;
  }
  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host_actors.cpp", "registerEvents_block_invoke_2", (uint64_t)__p);
  if (v12 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  Ari::Log((Ari *)0x20, "(%s:%d) %s: too busy to flush low-priority queue: iteration %u Msg/second=%llu", v9, v10, 256, "LowPriorityFlushActor", *(unsigned int *)(v2 + 48), v4 - *(_QWORD *)(v2 + 40));
  if (v12 < 0)
    operator delete(__p[0]);
LABEL_14:
  *(_QWORD *)(v2 + 40) = v4;
}

void sub_20E241200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN3Ari21LowPriorityFlushActor14registerEventsEv_block_invoke_21(_QWORD *a1, NSObject *a2)
{
  uint64_t v4;
  const char *v5;
  void **v6;
  uint64_t v7;
  dispatch_time_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v17[6];
  std::__shared_weak_count *v18;
  uint64_t v19;
  NSObject *v20;
  void *v21[2];
  char v22;

  v4 = a1[4];
  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host_actors.cpp", "registerEvents_block_invoke", (uint64_t)v21);
  if (v22 >= 0)
    v6 = v21;
  else
    v6 = (void **)v21[0];
  Ari::Log((Ari *)0x20, "(%s:%d) %s: ARI_RT_EXIT_LPM", v5, v6, 269, "LowPriorityFlushActor");
  if (v22 < 0)
    operator delete(v21[0]);
  dispatch_retain(a2);
  dispatch_group_enter(a2);
  AriDispatch::Timer::cancel(*(AriDispatch::Timer **)(v4 + 24));
  v7 = *(_QWORD *)(v4 + 24);
  v8 = dispatch_time(0, 2000000000);
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 1174405120;
  v17[2] = ___ZN3Ari21LowPriorityFlushActor14registerEventsEv_block_invoke_2_23;
  v17[3] = &__block_descriptor_tmp_25;
  v10 = a1[5];
  v9 = (std::__shared_weak_count *)a1[6];
  v17[4] = v4;
  v17[5] = v10;
  v18 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v19 = a1[7];
  v20 = a2;
  AriDispatch::Timer::setPeriodic(v7, v8, 0xFFFFFFFFFFFFFFFFLL, v17);
  v13 = v18;
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return 0;
}

void sub_20E24138C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 33) < 0)
    operator delete(*(void **)(v1 - 56));
  _Unwind_Resume(exception_object);
}

void ___ZN3Ari21LowPriorityFlushActor14registerEventsEv_block_invoke_2_23(uint64_t a1)
{
  const char *v2;
  void **v3;
  void *__p[2];
  char v5;

  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host_actors.cpp", "registerEvents_block_invoke_2", (uint64_t)__p);
  if (v5 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  Ari::Log((Ari *)0x20, "(%s:%d) %s: flushing requests", v2, v3, 279, "LowPriorityFlushActor");
  if (v5 < 0)
    operator delete(__p[0]);
  AriHost::flushLowPriorityRequests(*(NSObject ***)(a1 + 56), *(NSObject **)(a1 + 64));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
  dispatch_release(*(dispatch_object_t *)(a1 + 64));
}

void sub_20E241444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN3Ari21LowPriorityFlushActor14registerEventsEv_block_invoke_27(uint64_t a1)
{
  uint64_t v1;
  const char *v2;
  void **v3;
  void *__p[2];
  char v6;

  v1 = *(_QWORD *)(a1 + 32);
  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host_actors.cpp", "registerEvents_block_invoke", (uint64_t)__p);
  if (v6 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  Ari::Log((Ari *)0x20, "(%s:%d) %s: ARI_RT_CONNECTION_ERROR: canceling low-priority flush timer", v2, v3, 293, "LowPriorityFlushActor");
  if (v6 < 0)
    operator delete(__p[0]);
  AriDispatch::Timer::cancel(*(AriDispatch::Timer **)(v1 + 24));
  return 0;
}

void sub_20E2414F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Ari::LowPriorityFlushActor::registerIndications(Ari::LowPriorityFlushActor *this)
{
  return 0;
}

void std::__forward_list_base<std::shared_ptr<Ari::Actor>>::clear(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *a1;
  if (*a1)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 1));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  *a1 = 0;
}

void std::__shared_ptr_emplace<Ari::IndicationReregistrationActor::create(void)::IndicationReregistrationActorNoPrivate,std::allocator<Ari::IndicationReregistrationActor::create(void)::IndicationReregistrationActorNoPrivate>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9048D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Ari::IndicationReregistrationActor::create(void)::IndicationReregistrationActorNoPrivate,std::allocator<Ari::IndicationReregistrationActor::create(void)::IndicationReregistrationActorNoPrivate>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9048D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BB9B60);
}

void std::__shared_ptr_emplace<Ari::IndicationReregistrationActor::create(void)::IndicationReregistrationActorNoPrivate,std::allocator<Ari::IndicationReregistrationActor::create(void)::IndicationReregistrationActorNoPrivate>>::__on_zero_shared(uint64_t a1)
{
  NSObject *v2;

  *(_QWORD *)(a1 + 24) = off_24C9046F8;
  v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(a1 + 40) = 0;
  }
}

void std::__shared_ptr_emplace<Ari::LowPriorityFlushActor::create(void)::LowPriorityFlushActorNoPrivate,std::allocator<Ari::LowPriorityFlushActor::create(void)::LowPriorityFlushActorNoPrivate>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C904968;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Ari::LowPriorityFlushActor::create(void)::LowPriorityFlushActorNoPrivate,std::allocator<Ari::LowPriorityFlushActor::create(void)::LowPriorityFlushActorNoPrivate>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C904968;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BB9B60);
}

void std::__shared_ptr_emplace<Ari::LowPriorityFlushActor::create(void)::LowPriorityFlushActorNoPrivate,std::allocator<Ari::LowPriorityFlushActor::create(void)::LowPriorityFlushActorNoPrivate>>::__on_zero_shared(uint64_t a1)
{
  Ari::LowPriorityFlushActor::~LowPriorityFlushActor((Ari::LowPriorityFlushActor *)(a1 + 24));
}

uint64_t AriOsa::Init(AriOsa *this)
{
  AriOsa_Init_Time = std::chrono::system_clock::now().__d_.__rep_;
  return 0;
}

uint64_t AriOsa::Log(AriOsa *this, const char *a2, const char *a3)
{
  const char *v4;
  const char *v5;
  unint64_t v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = "[OTHER]";
  if ((int)this > 31)
  {
    if ((int)this > 127)
    {
      if ((_DWORD)this == 256)
      {
LABEL_14:
        v4 = (const char *)&str_6_14;
      }
      else if ((_DWORD)this == 128)
      {
        v4 = "[WEAK ]: ";
      }
    }
    else
    {
      v5 = (const char *)&str_6_14;
      if ((_DWORD)this != 64)
        v5 = "[OTHER]";
      if ((_DWORD)this == 32)
        v4 = "[INFO ]: ";
      else
        v4 = v5;
    }
  }
  else
  {
    switch((int)this)
    {
      case 1:
        goto LABEL_14;
      case 2:
        v4 = "[BBLOG]: >>>> ";
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        break;
      case 4:
        v4 = "[DEBUG]: ";
        break;
      case 8:
        v4 = "[ERROR]: ";
        break;
      default:
        if ((_DWORD)this == 16)
          v4 = "[WARN ]: ";
        break;
    }
  }
  v7 = 0xAAAAAAAAAAAAAAAALL;
  v8 = -1431655766;
  AriOsa::OsGetCurrentThreadName((AriOsa *)&v7, (char *)0xC);
  return printf("%11s%s%s", (const char *)&v7, v4, a2);
}

AriOsa *AriOsa::OsGetCurrentThreadName(AriOsa *this, char *a2)
{
  const char *label;
  size_t v5;
  size_t v6;

  label = dispatch_queue_get_label(0);
  v5 = strlen(label);
  v6 = v5 - (_QWORD)(a2 - 1);
  if (v5 < (unint64_t)(a2 - 1))
    v6 = 0;
  snprintf((char *)this, (size_t)a2, "%s", &label[v6]);
  return this;
}

void *AriOsa::MemAlloc(AriOsa *this, size_t size)
{
  void *v3;
  const char *v4;
  void **v5;
  void *__p[2];
  char v8;

  v3 = malloc_type_malloc(size, 0x25E18F3BuLL);
  if (!v3)
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_osa_gcd.cpp", "MemAlloc", (uint64_t)__p);
    if (v8 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Failed requested len (%zu)", v4, v5, 101, size);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  return v3;
}

void sub_20E241898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AriOsa::LogSrcInfo(AriOsa *this@<X0>, std::string::value_type *__s1@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  char *v7;
  size_t v8;
  std::string *v9;
  std::string::size_type v10;
  char v11;
  std::string __p;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  if (this && __s1)
  {
    v6 = (char *)this;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 16) = 0;
    if (strstr(__s1, AriOsa::LogSrcInfo(char const*,char const*)::LogSrcInfo_raw_blk_suffix))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "blk@");
      v7 = strrchr(v6, 47);
      if (v7)
        v6 = v7 + 1;
      v8 = strlen(v6);
      v9 = std::string::append(&__p, v6, v8);
      v10 = v9->__r_.__value_.__r.__words[0];
      v13[0] = v9->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v13 + 7) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
      v11 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(_QWORD *)a3 = v10;
      *(_QWORD *)(a3 + 8) = v13[0];
      *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)v13 + 7);
      *(_BYTE *)(a3 + 23) = v11;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      std::string::__assign_external((std::string *)a3, __s1);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)a3, "NULL_FILENAME");
  }
}

void sub_20E241A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 + 23) < 0)
    operator delete(*(void **)v14);
  _Unwind_Resume(exception_object);
}

void AriOsa::MemFree(AriOsa *this, void *a2, void *a3)
{
  if (a2)
    free(a2);
}

uint64_t AriOsa::OsMutexCreate(AriOsa *this, dispatch_semaphore_s **a2)
{
  dispatch_semaphore_t v3;

  AriOsa::SWTrap(this == 0, (uint64_t)"id==NULL", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_osa_gcd.cpp", (const char *)0x78);
  v3 = dispatch_semaphore_create(1);
  *(_QWORD *)this = v3;
  if (v3)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

uint64_t AriOsa::OsMutexTake(NSObject *this, dispatch_semaphore_s *a2)
{
  dispatch_time_t v3;

  if ((_DWORD)a2 == -1)
    v3 = -1;
  else
    v3 = dispatch_time(0, 1000000 * a2);
  if (dispatch_semaphore_wait(this, v3))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t AriOsa::OsMutexGive(NSObject *this, dispatch_semaphore_s *a2)
{
  dispatch_semaphore_signal(this);
  return 0;
}

void AriOsa::OsMutexFree(dispatch_object_t this, dispatch_semaphore_s *a2)
{
  if (this)
    dispatch_release(this);
}

void AriOsa::OsSleep(AriOsa *this)
{
  dispatch_time_t v1;
  NSObject *v2;

  v1 = dispatch_time(0, 1000000 * this);
  v2 = dispatch_semaphore_create(0);
  AriOsa::SWTrap(v2 == 0, (uint64_t)"id == NULL", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_osa_gcd.cpp", (const char *)0x99);
  dispatch_semaphore_wait(v2, v1);
  dispatch_semaphore_signal(v2);
  dispatch_release(v2);
}

uint64_t AriOsa::OsTimeStamp(AriOsa *this)
{
  return ((int)(std::chrono::system_clock::now().__d_.__rep_ - AriOsa_Init_Time) / 1000);
}

uint64_t AriOsa::SWTrap(uint64_t this, uint64_t a2, const char *a3, const char *a4)
{
  const char *v7;
  std::string *v8;
  std::string v9;

  if ((_DWORD)this)
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_osa_gcd.cpp", "SWTrap", (uint64_t)&v9);
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v9;
    else
      v8 = (std::string *)v9.__r_.__value_.__r.__words[0];
    Ari::Log((Ari *)8, "(%s:%d) Trapping: %s @ %s:%d", v7, v8, 192, a2, a3, a4);
    std::string::~string(&v9);
    __assert_rtn("SWTrap", "ari_osa_gcd.cpp", 193, "0");
  }
  return this;
}

void sub_20E241C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriOsa::OsTimeoutCreate(AriOsa *this, dispatch_source_s **a2)
{
  NSObject *v3;

  v3 = dispatch_source_create(MEMORY[0x24BDACA18], 0, 0, MEMORY[0x24BDAC9B8]);
  *(_QWORD *)this = v3;
  dispatch_retain(v3);
  if (*(_QWORD *)this)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

uint64_t AriOsa::OsTimeoutStart(NSObject *this, dispatch_source_s *a2, uint64_t a3, void (*a4)(void *), void *a5)
{
  dispatch_time_t v8;
  _QWORD v10[6];

  v8 = dispatch_time(0, 1000000 * a2);
  dispatch_source_set_timer(this, v8, 0xFFFFFFFFFFFFFFFFLL, 0);
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 0x40000000;
  v10[2] = ___ZN6AriOsa14OsTimeoutStartEP17dispatch_source_sjPFvPvES2__block_invoke;
  v10[3] = &__block_descriptor_tmp_2;
  v10[4] = a3;
  v10[5] = a4;
  dispatch_source_set_event_handler(this, v10);
  dispatch_resume(this);
  return 0;
}

uint64_t ___ZN6AriOsa14OsTimeoutStartEP17dispatch_source_sjPFvPvES2__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40));
}

uint64_t AriOsa::OsTimeoutStop(NSObject *this, dispatch_source_s *a2)
{
  dispatch_source_cancel(this);
  return 0;
}

void AriOsa::OsTimeoutDestroy(NSObject *this, dispatch_source_s *a2)
{
  if (this)
  {
    dispatch_source_cancel(this);
    dispatch_release(this);
  }
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  unint64_t v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = __n;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

double AriSdk::ARI_IBICpsCellularPowerReportInd_SDK::ARI_IBICpsCellularPowerReportInd_SDK(AriSdk::ARI_IBICpsCellularPowerReportInd_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x3D808000u, 0);
  *(_QWORD *)v1 = &off_24C904A18;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x3D808000u, 0);
  *(_QWORD *)v1 = &off_24C904A18;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  return result;
}

double AriSdk::ARI_IBICpsCellularPowerReportInd_SDK::ARI_IBICpsCellularPowerReportInd_SDK(AriSdk::ARI_IBICpsCellularPowerReportInd_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C904A18;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C904A18;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  return result;
}

void AriSdk::ARI_IBICpsCellularPowerReportInd_SDK::~ARI_IBICpsCellularPowerReportInd_SDK(AriSdk::ARI_IBICpsCellularPowerReportInd_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = &off_24C904A18;
  v2 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  v5 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  v6 = (void *)*((_QWORD *)this + 11);
  if (v6)
  {
    *((_QWORD *)this + 12) = v6;
    operator delete(v6);
  }
  v7 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  v8 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v8)
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v9)
    MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBICpsCellularPowerReportInd_SDK::~ARI_IBICpsCellularPowerReportInd_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBICpsCellularPowerReportInd_SDK::pack(AriSdk::ARI_IBICpsCellularPowerReportInd_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  _BYTE *v8;
  _BYTE *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 4uLL, 0), !(_DWORD)result))
      {
        v8 = (_BYTE *)*((_QWORD *)this + 11);
        if (!v8
          || (v9 = (_BYTE *)*((_QWORD *)this + 12), v8 == v9)
          || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v8, v9 - v8, 0), !(_DWORD)result))
        {
          v10 = (const void *)*((_QWORD *)this + 14);
          if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v10, 4uLL, 0), !(_DWORD)result))
          {
            v11 = (const void *)*((_QWORD *)this + 15);
            if (!v11 || (result = AriMsg::pack(*((AriMsg **)this + 6), 7, v11, 4uLL, 0), !(_DWORD)result))
            {
              v12 = (const void *)*((_QWORD *)this + 16);
              if (!v12 || (result = AriMsg::pack(*((AriMsg **)this + 6), 8, v12, 4uLL, 0), !(_DWORD)result))
              {
                v13 = (const void *)*((_QWORD *)this + 17);
                if (!v13 || (result = AriMsg::pack(*((AriMsg **)this + 6), 9, v13, 4uLL, 0), !(_DWORD)result))
                {
                  result = 0;
                  *a2 = (AriMsg *)*((_QWORD *)this + 6);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBICpsCellularPowerReportInd_SDK::unpack(AriSdk::ARI_IBICpsCellularPowerReportInd_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  void **v10;
  _BYTE *v11;
  void *v12;
  const char *v13;
  BOOL *v14;
  void *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  void *__p;
  _BYTE *v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  BOOL v26[8];
  char v27;

  v26[0] = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, v26, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v26[0];
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v26[0] = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, v26, 0);
  if ((_DWORD)v3 || !v26[0])
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v26[0] = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 4, v26, 0);
  if ((_DWORD)v3 || !v26[0])
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v7 = (_DWORD *)operator new();
    *v7 = *v6;
    v8 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v7;
    if (v8)
      MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  }
  v25 = 0;
  v24 = 0xAAAAAAAAAAAAAAAALL;
  v9 = (_OWORD *)operator new[]();
  *v9 = 0u;
  v9[1] = 0u;
  v9[2] = 0u;
  v9[3] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v9, 64, &v25, &v24);
  if ((_DWORD)v3 || !v25)
  {
    MEMORY[0x212BB9B48](v9, 0x1000C8052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v22 = 0;
    v23 = 0;
    __p = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v9, (uint64_t)v9 + 4 * (v24 >> 2), v24 >> 2);
    v10 = (void **)((char *)this + 88);
    v12 = __p;
    v11 = v22;
    if ((unint64_t)(v22 - (_BYTE *)__p) < 0x41)
    {
      v15 = *v10;
      if (*v10)
      {
        *((_QWORD *)this + 12) = v15;
        operator delete(v15);
        *v10 = 0;
        *((_QWORD *)this + 12) = 0;
        *((_QWORD *)this + 13) = 0;
        v12 = __p;
        v11 = v22;
      }
      *((_QWORD *)this + 11) = v12;
      *((_QWORD *)this + 12) = v11;
      *((_QWORD *)this + 13) = v23;
    }
    else
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)v26);
      if (v27 >= 0)
        v14 = v26;
      else
        v14 = *(BOOL **)v26;
      Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v13, v14, 360, (char *)this + 88, (v22 - (_BYTE *)__p) >> 2, 16);
      if (v27 < 0)
        operator delete(*(void **)v26);
      if (__p)
      {
        v22 = __p;
        operator delete(__p);
      }
    }
    MEMORY[0x212BB9B48](v9, 0x1000C8052888210);
  }
  v26[0] = 0;
  v16 = (_DWORD *)operator new();
  *v16 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v16, 4, v26, 0);
  if ((_DWORD)v3 || !v26[0])
  {
    MEMORY[0x212BB9B60](v16, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 14, v16);
    MEMORY[0x212BB9B60](v16, 0x1000C4052888210);
  }
  v26[0] = 0;
  v17 = (_DWORD *)operator new();
  *v17 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 7, v17, 4, v26, 0);
  if ((_DWORD)v3 || !v26[0])
  {
    MEMORY[0x212BB9B60](v17, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 15, v17);
    MEMORY[0x212BB9B60](v17, 0x1000C4052888210);
  }
  v26[0] = 0;
  v18 = (_DWORD *)operator new();
  *v18 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 8, v18, 4, v26, 0);
  if ((_DWORD)v3 || !v26[0])
  {
    MEMORY[0x212BB9B60](v18, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 16, v18);
    MEMORY[0x212BB9B60](v18, 0x1000C4052888210);
  }
  v26[0] = 0;
  v19 = (_DWORD *)operator new();
  *v19 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 9, v19, 4, v26, 0);
  if (!(_DWORD)v3 && v26[0])
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 17, v19);
  MEMORY[0x212BB9B60](v19, 0x1000C4052888210);
  return v3;
}

void sub_20E24281C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  MEMORY[0x212BB9B60](v16, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBICpsCellularPowerReportInd_SDK::hasDeclaredGmid(AriSdk::ARI_IBICpsCellularPowerReportInd_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1031831552;
}

AriSdk::MsgBase *AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK::ARI_IBICpsConfigureCellularPowerReportReq_SDK(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3C808000u, 0);
  *(_QWORD *)result = &off_24C904A50;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3C808000u, 0);
  *(_QWORD *)result = &off_24C904A50;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK::ARI_IBICpsConfigureCellularPowerReportReq_SDK(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904A50;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904A50;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK::~ARI_IBICpsConfigureCellularPowerReportReq_SDK(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C904A50;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C40BDFB0063);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK::~ARI_IBICpsConfigureCellularPowerReportReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK::pack(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 2uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK::unpack(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _WORD *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v9, 0);
  if ((_DWORD)v3 || !v9)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v8 = 0;
  v6 = (_WORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 2, &v8, 0);
  if (!(_DWORD)v3 && v8)
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 10, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C40BDFB0063);
  return v3;
}

void sub_20E242CD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C40BDFB0063);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1015054336;
}

AriSdk::MsgBase *AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK::ARI_IBICpsConfigureCellularPowerReportRsp_SDK(AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3D008000u, 0);
  *(_QWORD *)result = &off_24C904A88;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3D008000u, 0);
  *(_QWORD *)result = &off_24C904A88;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK::ARI_IBICpsConfigureCellularPowerReportRsp_SDK(AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904A88;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904A88;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK::~ARI_IBICpsConfigureCellularPowerReportRsp_SDK(AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C904A88;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK::~ARI_IBICpsConfigureCellularPowerReportRsp_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK::pack(AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK::unpack(AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E24304C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK::hasDeclaredGmid(AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1023442944;
}

AriSdk::MsgBase *AriSdk::ARI_IBICpsGetCellularRadioStateReq_SDK::ARI_IBICpsGetCellularRadioStateReq_SDK(AriSdk::ARI_IBICpsGetCellularRadioStateReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3C858000u, 0);
  *(_QWORD *)result = &off_24C904AC0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3C858000u, 0);
  *(_QWORD *)result = &off_24C904AC0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBICpsGetCellularRadioStateReq_SDK::ARI_IBICpsGetCellularRadioStateReq_SDK(AriSdk::ARI_IBICpsGetCellularRadioStateReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904AC0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904AC0;
  return result;
}

void AriSdk::ARI_IBICpsGetCellularRadioStateReq_SDK::~ARI_IBICpsGetCellularRadioStateReq_SDK(AriSdk::ARI_IBICpsGetCellularRadioStateReq_SDK *this)
{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBICpsGetCellularRadioStateReq_SDK::pack(AriSdk::ARI_IBICpsGetCellularRadioStateReq_SDK *this, AriMsg **a2)
{
  *a2 = 0;
  *a2 = (AriMsg *)*((_QWORD *)this + 6);
  return 0;
}

uint64_t AriSdk::ARI_IBICpsGetCellularRadioStateReq_SDK::unpack(AriSdk::ARI_IBICpsGetCellularRadioStateReq_SDK *this)
{
  return 0;
}

BOOL AriSdk::ARI_IBICpsGetCellularRadioStateReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBICpsGetCellularRadioStateReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1015382016;
}

AriSdk::MsgBase *AriSdk::ARI_IBICpsGetCellularRadioStateRspCb_SDK::ARI_IBICpsGetCellularRadioStateRspCb_SDK(AriSdk::ARI_IBICpsGetCellularRadioStateRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3D058000u, 0);
  *(_QWORD *)result = &off_24C904AF8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3D058000u, 0);
  *(_QWORD *)result = &off_24C904AF8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBICpsGetCellularRadioStateRspCb_SDK::ARI_IBICpsGetCellularRadioStateRspCb_SDK(AriSdk::ARI_IBICpsGetCellularRadioStateRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904AF8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904AF8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBICpsGetCellularRadioStateRspCb_SDK::~ARI_IBICpsGetCellularRadioStateRspCb_SDK(AriSdk::ARI_IBICpsGetCellularRadioStateRspCb_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C904AF8;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBICpsGetCellularRadioStateRspCb_SDK::~ARI_IBICpsGetCellularRadioStateRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBICpsGetCellularRadioStateRspCb_SDK::pack(AriSdk::ARI_IBICpsGetCellularRadioStateRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_IBICpsGetCellularRadioStateRspCb_SDK::unpack(AriSdk::ARI_IBICpsGetCellularRadioStateRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E243484(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBICpsGetCellularRadioStateRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBICpsGetCellularRadioStateRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1023770624;
}

double AriSdk::ARI_IBICpsHealthActivityReq_SDK::ARI_IBICpsHealthActivityReq_SDK(AriSdk::ARI_IBICpsHealthActivityReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x3C828000u, 0);
  *(_QWORD *)v1 = &off_24C904B30;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_QWORD *)v1 + 12) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x3C828000u, 0);
  *(_QWORD *)v1 = &off_24C904B30;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_QWORD *)v1 + 12) = 0;
  return result;
}

double AriSdk::ARI_IBICpsHealthActivityReq_SDK::ARI_IBICpsHealthActivityReq_SDK(AriSdk::ARI_IBICpsHealthActivityReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C904B30;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_QWORD *)v3 + 12) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C904B30;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_QWORD *)v3 + 12) = 0;
  return result;
}

void AriSdk::ARI_IBICpsHealthActivityReq_SDK::~ARI_IBICpsHealthActivityReq_SDK(AriSdk::ARI_IBICpsHealthActivityReq_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_24C904B30;
  v2 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  v5 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  v6 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBICpsHealthActivityReq_SDK::~ARI_IBICpsHealthActivityReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBICpsHealthActivityReq_SDK::pack(AriSdk::ARI_IBICpsHealthActivityReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 4uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v8, 4uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v9, 4uLL, 0), !(_DWORD)result))
          {
            result = 0;
            *a2 = (AriMsg *)*((_QWORD *)this + 6);
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBICpsHealthActivityReq_SDK::unpack(AriSdk::ARI_IBICpsHealthActivityReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;

  v22 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v22, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v22;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v21 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v21, 0);
  if ((_DWORD)v3 || !v21)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v6 = (_DWORD *)operator new();
    *v6 = *v5;
    v7 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v6;
    if (v7)
      MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v20 = 0;
  v8 = (_DWORD *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v8, 4, &v20, 0);
  if ((_DWORD)v3 || !v20)
  {
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v9 = (_DWORD *)operator new();
    *v9 = *v8;
    v10 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v9;
    if (v10)
      MEMORY[0x212BB9B60](v10, 0x1000C4052888210);
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  }
  v19 = 0;
  v11 = (_DWORD *)operator new();
  *v11 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v11, 4, &v19, 0);
  if ((_DWORD)v3 || !v19)
  {
    MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v12 = (_DWORD *)operator new();
    *v12 = *v11;
    v13 = *((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v12;
    if (v13)
      MEMORY[0x212BB9B60](v13, 0x1000C4052888210);
    MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
  }
  v18 = 0;
  v14 = (_DWORD *)operator new();
  *v14 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v14, 4, &v18, 0);
  if (!(_DWORD)v3 && v18)
  {
    v15 = (_DWORD *)operator new();
    *v15 = *v14;
    v16 = *((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = v15;
    if (v16)
      MEMORY[0x212BB9B60](v16, 0x1000C4052888210);
  }
  MEMORY[0x212BB9B60](v14, 0x1000C4052888210);
  return v3;
}

void sub_20E243B54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBICpsHealthActivityReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBICpsHealthActivityReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1015185408;
}

AriSdk::MsgBase *AriSdk::ARI_IBICpsHealthActivityRsp_SDK::ARI_IBICpsHealthActivityRsp_SDK(AriSdk::ARI_IBICpsHealthActivityRsp_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3D028000u, 0);
  *(_QWORD *)result = &off_24C904B68;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3D028000u, 0);
  *(_QWORD *)result = &off_24C904B68;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBICpsHealthActivityRsp_SDK::ARI_IBICpsHealthActivityRsp_SDK(AriSdk::ARI_IBICpsHealthActivityRsp_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904B68;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904B68;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBICpsHealthActivityRsp_SDK::~ARI_IBICpsHealthActivityRsp_SDK(AriSdk::ARI_IBICpsHealthActivityRsp_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C904B68;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBICpsHealthActivityRsp_SDK::~ARI_IBICpsHealthActivityRsp_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBICpsHealthActivityRsp_SDK::pack(AriSdk::ARI_IBICpsHealthActivityRsp_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBICpsHealthActivityRsp_SDK::unpack(AriSdk::ARI_IBICpsHealthActivityRsp_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E243EC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBICpsHealthActivityRsp_SDK::hasDeclaredGmid(AriSdk::ARI_IBICpsHealthActivityRsp_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1023574016;
}

double AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK::ARI_IBICpsMaxCellularPowerForRatInd_SDK(AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x3D828000u, 0);
  *(_QWORD *)v1 = &off_24C904BA0;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x3D828000u, 0);
  *(_QWORD *)v1 = &off_24C904BA0;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

double AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK::ARI_IBICpsMaxCellularPowerForRatInd_SDK(AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C904BA0;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C904BA0;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

void AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK::~ARI_IBICpsMaxCellularPowerForRatInd_SDK(AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C904BA0;
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK::~ARI_IBICpsMaxCellularPowerForRatInd_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK::pack(AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 4uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v8, 4uLL, 0), !(_DWORD)result))
        {
          result = 0;
          *a2 = (AriMsg *)*((_QWORD *)this + 6);
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK::unpack(AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;

  v12 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v12, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v12;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v11 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v11, 0);
  if ((_DWORD)v3 || !v11)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v10 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 4, &v10, 0);
  if ((_DWORD)v3 || !v10)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  }
  v9 = 0;
  v7 = (_DWORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v7, 4, &v9, 0);
  if (!(_DWORD)v3 && v9)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 11, v7);
  MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  return v3;
}

void sub_20E2443DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK::hasDeclaredGmid(AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1031962624;
}

AriSdk::MsgBase *AriSdk::ARI_IBICpsSetCambioStateReq_SDK::ARI_IBICpsSetCambioStateReq_SDK(AriSdk::ARI_IBICpsSetCambioStateReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3C830000u, 0);
  *(_QWORD *)result = &off_24C904BD8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3C830000u, 0);
  *(_QWORD *)result = &off_24C904BD8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBICpsSetCambioStateReq_SDK::ARI_IBICpsSetCambioStateReq_SDK(AriSdk::ARI_IBICpsSetCambioStateReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904BD8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904BD8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBICpsSetCambioStateReq_SDK::~ARI_IBICpsSetCambioStateReq_SDK(AriSdk::ARI_IBICpsSetCambioStateReq_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C904BD8;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBICpsSetCambioStateReq_SDK::~ARI_IBICpsSetCambioStateReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBICpsSetCambioStateReq_SDK::pack(AriSdk::ARI_IBICpsSetCambioStateReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBICpsSetCambioStateReq_SDK::unpack(AriSdk::ARI_IBICpsSetCambioStateReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E244740(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBICpsSetCambioStateReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBICpsSetCambioStateReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1015218176;
}

AriSdk::MsgBase *AriSdk::ARI_IBICpsSetCambioStateRsp_SDK::ARI_IBICpsSetCambioStateRsp_SDK(AriSdk::ARI_IBICpsSetCambioStateRsp_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3D030000u, 0);
  *(_QWORD *)result = &off_24C904C10;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3D030000u, 0);
  *(_QWORD *)result = &off_24C904C10;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBICpsSetCambioStateRsp_SDK::ARI_IBICpsSetCambioStateRsp_SDK(AriSdk::ARI_IBICpsSetCambioStateRsp_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904C10;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904C10;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBICpsSetCambioStateRsp_SDK::~ARI_IBICpsSetCambioStateRsp_SDK(AriSdk::ARI_IBICpsSetCambioStateRsp_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C904C10;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBICpsSetCambioStateRsp_SDK::~ARI_IBICpsSetCambioStateRsp_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBICpsSetCambioStateRsp_SDK::pack(AriSdk::ARI_IBICpsSetCambioStateRsp_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBICpsSetCambioStateRsp_SDK::unpack(AriSdk::ARI_IBICpsSetCambioStateRsp_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E244A90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBICpsSetCambioStateRsp_SDK::hasDeclaredGmid(AriSdk::ARI_IBICpsSetCambioStateRsp_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1023606784;
}

AriSdk::MsgBase *AriSdk::ARI_IBICpsSetCellularRadioStateReq_SDK::ARI_IBICpsSetCellularRadioStateReq_SDK(AriSdk::ARI_IBICpsSetCellularRadioStateReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3C850000u, 0);
  *(_QWORD *)result = &off_24C904C48;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3C850000u, 0);
  *(_QWORD *)result = &off_24C904C48;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBICpsSetCellularRadioStateReq_SDK::ARI_IBICpsSetCellularRadioStateReq_SDK(AriSdk::ARI_IBICpsSetCellularRadioStateReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904C48;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904C48;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBICpsSetCellularRadioStateReq_SDK::~ARI_IBICpsSetCellularRadioStateReq_SDK(AriSdk::ARI_IBICpsSetCellularRadioStateReq_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C904C48;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBICpsSetCellularRadioStateReq_SDK::~ARI_IBICpsSetCellularRadioStateReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBICpsSetCellularRadioStateReq_SDK::pack(AriSdk::ARI_IBICpsSetCellularRadioStateReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_IBICpsSetCellularRadioStateReq_SDK::unpack(AriSdk::ARI_IBICpsSetCellularRadioStateReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E244D0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBICpsSetCellularRadioStateReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBICpsSetCellularRadioStateReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1015349248;
}

AriSdk::MsgBase *AriSdk::ARI_IBICpsSetCellularRadioStateRspCb_SDK::ARI_IBICpsSetCellularRadioStateRspCb_SDK(AriSdk::ARI_IBICpsSetCellularRadioStateRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3D050000u, 0);
  *(_QWORD *)result = &off_24C904C80;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3D050000u, 0);
  *(_QWORD *)result = &off_24C904C80;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBICpsSetCellularRadioStateRspCb_SDK::ARI_IBICpsSetCellularRadioStateRspCb_SDK(AriSdk::ARI_IBICpsSetCellularRadioStateRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904C80;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904C80;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBICpsSetCellularRadioStateRspCb_SDK::~ARI_IBICpsSetCellularRadioStateRspCb_SDK(AriSdk::ARI_IBICpsSetCellularRadioStateRspCb_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C904C80;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBICpsSetCellularRadioStateRspCb_SDK::~ARI_IBICpsSetCellularRadioStateRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBICpsSetCellularRadioStateRspCb_SDK::pack(AriSdk::ARI_IBICpsSetCellularRadioStateRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_IBICpsSetCellularRadioStateRspCb_SDK::unpack(AriSdk::ARI_IBICpsSetCellularRadioStateRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E244F80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBICpsSetCellularRadioStateRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBICpsSetCellularRadioStateRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1023737856;
}

AriSdk::MsgBase *AriSdk::ARI_IBICpsSetCellularRadioStateIndCb_SDK::ARI_IBICpsSetCellularRadioStateIndCb_SDK(AriSdk::ARI_IBICpsSetCellularRadioStateIndCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3D830000u, 0);
  *(_QWORD *)result = &off_24C904CB8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3D830000u, 0);
  *(_QWORD *)result = &off_24C904CB8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBICpsSetCellularRadioStateIndCb_SDK::ARI_IBICpsSetCellularRadioStateIndCb_SDK(AriSdk::ARI_IBICpsSetCellularRadioStateIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904CB8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904CB8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBICpsSetCellularRadioStateIndCb_SDK::~ARI_IBICpsSetCellularRadioStateIndCb_SDK(AriSdk::ARI_IBICpsSetCellularRadioStateIndCb_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C904CB8;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBICpsSetCellularRadioStateIndCb_SDK::~ARI_IBICpsSetCellularRadioStateIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBICpsSetCellularRadioStateIndCb_SDK::pack(AriSdk::ARI_IBICpsSetCellularRadioStateIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_IBICpsSetCellularRadioStateIndCb_SDK::unpack(AriSdk::ARI_IBICpsSetCellularRadioStateIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E2451F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBICpsSetCellularRadioStateIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBICpsSetCellularRadioStateIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1031995392;
}

AriSdk::MsgBase *AriSdk::ARI_IBICpsSetCmasModeReq_SDK::ARI_IBICpsSetCmasModeReq_SDK(AriSdk::ARI_IBICpsSetCmasModeReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3C848000u, 0);
  *(_QWORD *)result = &off_24C904CF0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3C848000u, 0);
  *(_QWORD *)result = &off_24C904CF0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBICpsSetCmasModeReq_SDK::ARI_IBICpsSetCmasModeReq_SDK(AriSdk::ARI_IBICpsSetCmasModeReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904CF0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904CF0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBICpsSetCmasModeReq_SDK::~ARI_IBICpsSetCmasModeReq_SDK(AriSdk::ARI_IBICpsSetCmasModeReq_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C904CF0;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBICpsSetCmasModeReq_SDK::~ARI_IBICpsSetCmasModeReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBICpsSetCmasModeReq_SDK::pack(AriSdk::ARI_IBICpsSetCmasModeReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBICpsSetCmasModeReq_SDK::unpack(AriSdk::ARI_IBICpsSetCmasModeReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E245544(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBICpsSetCmasModeReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBICpsSetCmasModeReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1015316480;
}

AriSdk::MsgBase *AriSdk::ARI_IBICpsSetCmasModeRspCb_SDK::ARI_IBICpsSetCmasModeRspCb_SDK(AriSdk::ARI_IBICpsSetCmasModeRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3D048000u, 0);
  *(_QWORD *)result = &off_24C904D28;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3D048000u, 0);
  *(_QWORD *)result = &off_24C904D28;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBICpsSetCmasModeRspCb_SDK::ARI_IBICpsSetCmasModeRspCb_SDK(AriSdk::ARI_IBICpsSetCmasModeRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904D28;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904D28;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBICpsSetCmasModeRspCb_SDK::~ARI_IBICpsSetCmasModeRspCb_SDK(AriSdk::ARI_IBICpsSetCmasModeRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C904D28;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBICpsSetCmasModeRspCb_SDK::~ARI_IBICpsSetCmasModeRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBICpsSetCmasModeRspCb_SDK::pack(AriSdk::ARI_IBICpsSetCmasModeRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBICpsSetCmasModeRspCb_SDK::unpack(AriSdk::ARI_IBICpsSetCmasModeRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E2458A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBICpsSetCmasModeRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBICpsSetCmasModeRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1023705088;
}

AriSdk::MsgBase *AriSdk::ARI_IBIMSimConfigReq_SDK::ARI_IBIMSimConfigReq_SDK(AriSdk::ARI_IBIMSimConfigReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3C820000u, 0);
  *(_QWORD *)result = &off_24C904D60;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3C820000u, 0);
  *(_QWORD *)result = &off_24C904D60;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIMSimConfigReq_SDK::ARI_IBIMSimConfigReq_SDK(AriSdk::ARI_IBIMSimConfigReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904D60;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904D60;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIMSimConfigReq_SDK::~ARI_IBIMSimConfigReq_SDK(AriSdk::ARI_IBIMSimConfigReq_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C904D60;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIMSimConfigReq_SDK::~ARI_IBIMSimConfigReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIMSimConfigReq_SDK::pack(AriSdk::ARI_IBIMSimConfigReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 4uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIMSimConfigReq_SDK::unpack(AriSdk::ARI_IBIMSimConfigReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  BOOL v10;
  BOOL v11;
  BOOL v12;

  v12 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v2, 4, &v12, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v12;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v5 = (_DWORD *)operator new();
    *v5 = *v2;
    v6 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v5;
    if (v6)
      MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v11 = 0;
  v7 = (_DWORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v7, 4, &v11, 0);
  if ((_DWORD)v3 || !v11)
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  }
  v10 = 0;
  v8 = (_DWORD *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v8, 4, &v10, 0);
  if (!(_DWORD)v3 && v10)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v8);
  MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  return v3;
}

void sub_20E245D10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIMSimConfigReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIMSimConfigReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1015152640;
}

AriSdk::MsgBase *AriSdk::ARI_IBIMSimConfigRspCb_SDK::ARI_IBIMSimConfigRspCb_SDK(AriSdk::ARI_IBIMSimConfigRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3D020000u, 0);
  *(_QWORD *)result = &off_24C904D98;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3D020000u, 0);
  *(_QWORD *)result = &off_24C904D98;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIMSimConfigRspCb_SDK::ARI_IBIMSimConfigRspCb_SDK(AriSdk::ARI_IBIMSimConfigRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904D98;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904D98;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIMSimConfigRspCb_SDK::~ARI_IBIMSimConfigRspCb_SDK(AriSdk::ARI_IBIMSimConfigRspCb_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C904D98;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIMSimConfigRspCb_SDK::~ARI_IBIMSimConfigRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIMSimConfigRspCb_SDK::pack(AriSdk::ARI_IBIMSimConfigRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_IBIMSimConfigRspCb_SDK::unpack(AriSdk::ARI_IBIMSimConfigRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E245F94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIMSimConfigRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIMSimConfigRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1023541248;
}

AriSdk::MsgBase *AriSdk::ARI_IBIMSimConfigIndCb_SDK::ARI_IBIMSimConfigIndCb_SDK(AriSdk::ARI_IBIMSimConfigIndCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3D820000u, 0);
  *(_QWORD *)result = &off_24C904DD0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3D820000u, 0);
  *(_QWORD *)result = &off_24C904DD0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIMSimConfigIndCb_SDK::ARI_IBIMSimConfigIndCb_SDK(AriSdk::ARI_IBIMSimConfigIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904DD0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904DD0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBIMSimConfigIndCb_SDK::~ARI_IBIMSimConfigIndCb_SDK(AriSdk::ARI_IBIMSimConfigIndCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C904DD0;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C403E1C8BA9);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIMSimConfigIndCb_SDK::~ARI_IBIMSimConfigIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIMSimConfigIndCb_SDK::pack(AriSdk::ARI_IBIMSimConfigIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 0xCuLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIMSimConfigIndCb_SDK::unpack(AriSdk::ARI_IBIMSimConfigIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *(_QWORD *)v5 = 0;
  v5[2] = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 12, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<IBINetEnabledRats>::operator=<IBINetEnabledRats&,void>((uint64_t *)this + 9, (uint64_t)v5);
  MEMORY[0x212BB9B60](v5, 0x1000C403E1C8BA9);
  return v3;
}

void sub_20E2462E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C403E1C8BA9);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIMSimConfigIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIMSimConfigIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1031929856;
}

AriSdk::MsgBase *AriSdk::ARI_IBIMSimGetConfigReq_SDK::ARI_IBIMSimGetConfigReq_SDK(AriSdk::ARI_IBIMSimGetConfigReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3C810000u, 0);
  *(_QWORD *)result = &off_24C904E08;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3C810000u, 0);
  *(_QWORD *)result = &off_24C904E08;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIMSimGetConfigReq_SDK::ARI_IBIMSimGetConfigReq_SDK(AriSdk::ARI_IBIMSimGetConfigReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904E08;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904E08;
  return result;
}

void AriSdk::ARI_IBIMSimGetConfigReq_SDK::~ARI_IBIMSimGetConfigReq_SDK(AriSdk::ARI_IBIMSimGetConfigReq_SDK *this)
{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIMSimGetConfigReq_SDK::pack(AriSdk::ARI_IBIMSimGetConfigReq_SDK *this, AriMsg **a2)
{
  *a2 = 0;
  *a2 = (AriMsg *)*((_QWORD *)this + 6);
  return 0;
}

uint64_t AriSdk::ARI_IBIMSimGetConfigReq_SDK::unpack(AriSdk::ARI_IBIMSimGetConfigReq_SDK *this)
{
  return 0;
}

BOOL AriSdk::ARI_IBIMSimGetConfigReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIMSimGetConfigReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1015087104;
}

AriSdk::MsgBase *AriSdk::ARI_IBIMSimGetConfigRspCb_SDK::ARI_IBIMSimGetConfigRspCb_SDK(AriSdk::ARI_IBIMSimGetConfigRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3D010000u, 0);
  *(_QWORD *)result = &off_24C904E40;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3D010000u, 0);
  *(_QWORD *)result = &off_24C904E40;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIMSimGetConfigRspCb_SDK::ARI_IBIMSimGetConfigRspCb_SDK(AriSdk::ARI_IBIMSimGetConfigRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904E40;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904E40;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBIMSimGetConfigRspCb_SDK::~ARI_IBIMSimGetConfigRspCb_SDK(AriSdk::ARI_IBIMSimGetConfigRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C904E40;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C403E1C8BA9);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIMSimGetConfigRspCb_SDK::~ARI_IBIMSimGetConfigRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIMSimGetConfigRspCb_SDK::pack(AriSdk::ARI_IBIMSimGetConfigRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 0xCuLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIMSimGetConfigRspCb_SDK::unpack(AriSdk::ARI_IBIMSimGetConfigRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *(_QWORD *)v5 = 0;
  v5[2] = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 12, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<IBINetEnabledRats>::operator=<IBINetEnabledRats&,void>((uint64_t *)this + 9, (uint64_t)v5);
  MEMORY[0x212BB9B60](v5, 0x1000C403E1C8BA9);
  return v3;
}

void sub_20E2467E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C403E1C8BA9);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIMSimGetConfigRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIMSimGetConfigRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1023475712;
}

AriSdk::MsgBase *AriSdk::ARI_IBIMSimGetSimStackMappingReq_SDK::ARI_IBIMSimGetSimStackMappingReq_SDK(AriSdk::ARI_IBIMSimGetSimStackMappingReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3C818000u, 0);
  *(_QWORD *)result = &off_24C904E78;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3C818000u, 0);
  *(_QWORD *)result = &off_24C904E78;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIMSimGetSimStackMappingReq_SDK::ARI_IBIMSimGetSimStackMappingReq_SDK(AriSdk::ARI_IBIMSimGetSimStackMappingReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904E78;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904E78;
  return result;
}

void AriSdk::ARI_IBIMSimGetSimStackMappingReq_SDK::~ARI_IBIMSimGetSimStackMappingReq_SDK(AriSdk::ARI_IBIMSimGetSimStackMappingReq_SDK *this)
{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIMSimGetSimStackMappingReq_SDK::pack(AriSdk::ARI_IBIMSimGetSimStackMappingReq_SDK *this, AriMsg **a2)
{
  *a2 = 0;
  *a2 = (AriMsg *)*((_QWORD *)this + 6);
  return 0;
}

uint64_t AriSdk::ARI_IBIMSimGetSimStackMappingReq_SDK::unpack(AriSdk::ARI_IBIMSimGetSimStackMappingReq_SDK *this)
{
  return 0;
}

BOOL AriSdk::ARI_IBIMSimGetSimStackMappingReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIMSimGetSimStackMappingReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1015119872;
}

AriSdk::MsgBase *AriSdk::ARI_IBIMSimGetSimStackMappingRspCb_SDK::ARI_IBIMSimGetSimStackMappingRspCb_SDK(AriSdk::ARI_IBIMSimGetSimStackMappingRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3D018000u, 0);
  *(_QWORD *)result = &off_24C904EB0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3D018000u, 0);
  *(_QWORD *)result = &off_24C904EB0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIMSimGetSimStackMappingRspCb_SDK::ARI_IBIMSimGetSimStackMappingRspCb_SDK(AriSdk::ARI_IBIMSimGetSimStackMappingRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904EB0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904EB0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBIMSimGetSimStackMappingRspCb_SDK::~ARI_IBIMSimGetSimStackMappingRspCb_SDK(AriSdk::ARI_IBIMSimGetSimStackMappingRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C904EB0;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C40B4868423);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIMSimGetSimStackMappingRspCb_SDK::~ARI_IBIMSimGetSimStackMappingRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIMSimGetSimStackMappingRspCb_SDK::pack(AriSdk::ARI_IBIMSimGetSimStackMappingRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 0x14uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIMSimGetSimStackMappingRspCb_SDK::unpack(AriSdk::ARI_IBIMSimGetSimStackMappingRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  v5[4] = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 20, &v9, 0);
  if (!(_DWORD)v3 && v9)
  {
    v6 = operator new();
    *(_OWORD *)v6 = *(_OWORD *)v5;
    *(_DWORD *)(v6 + 16) = v5[4];
    v7 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v6;
    if (v7)
      MEMORY[0x212BB9B60](v7, 0x1000C40B4868423);
  }
  MEMORY[0x212BB9B60](v5, 0x1000C40B4868423);
  return v3;
}

void sub_20E246D44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C40B4868423);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIMSimGetSimStackMappingRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIMSimGetSimStackMappingRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1023508480;
}

AriSdk::MsgBase *AriSdk::ARI_CsiMSimGetSimStackMappingStatusReq_SDK::ARI_CsiMSimGetSimStackMappingStatusReq_SDK(AriSdk::ARI_CsiMSimGetSimStackMappingStatusReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3C838000u, 0);
  *(_QWORD *)result = &off_24C904EE8;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3C838000u, 0);
  *(_QWORD *)result = &off_24C904EE8;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiMSimGetSimStackMappingStatusReq_SDK::ARI_CsiMSimGetSimStackMappingStatusReq_SDK(AriSdk::ARI_CsiMSimGetSimStackMappingStatusReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904EE8;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904EE8;
  return result;
}

void AriSdk::ARI_CsiMSimGetSimStackMappingStatusReq_SDK::~ARI_CsiMSimGetSimStackMappingStatusReq_SDK(AriSdk::ARI_CsiMSimGetSimStackMappingStatusReq_SDK *this)
{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiMSimGetSimStackMappingStatusReq_SDK::pack(AriSdk::ARI_CsiMSimGetSimStackMappingStatusReq_SDK *this, AriMsg **a2)
{
  *a2 = 0;
  *a2 = (AriMsg *)*((_QWORD *)this + 6);
  return 0;
}

uint64_t AriSdk::ARI_CsiMSimGetSimStackMappingStatusReq_SDK::unpack(AriSdk::ARI_CsiMSimGetSimStackMappingStatusReq_SDK *this)
{
  return 0;
}

BOOL AriSdk::ARI_CsiMSimGetSimStackMappingStatusReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiMSimGetSimStackMappingStatusReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1015250944;
}

AriSdk::MsgBase *AriSdk::ARI_CsiMSimGetSimStackMappingStatusRspCb_SDK::ARI_CsiMSimGetSimStackMappingStatusRspCb_SDK(AriSdk::ARI_CsiMSimGetSimStackMappingStatusRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3D038000u, 0);
  *(_QWORD *)result = &off_24C904F20;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3D038000u, 0);
  *(_QWORD *)result = &off_24C904F20;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiMSimGetSimStackMappingStatusRspCb_SDK::ARI_CsiMSimGetSimStackMappingStatusRspCb_SDK(AriSdk::ARI_CsiMSimGetSimStackMappingStatusRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904F20;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904F20;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiMSimGetSimStackMappingStatusRspCb_SDK::~ARI_CsiMSimGetSimStackMappingStatusRspCb_SDK(AriSdk::ARI_CsiMSimGetSimStackMappingStatusRspCb_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C904F20;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiMSimGetSimStackMappingStatusRspCb_SDK::~ARI_CsiMSimGetSimStackMappingStatusRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiMSimGetSimStackMappingStatusRspCb_SDK::pack(AriSdk::ARI_CsiMSimGetSimStackMappingStatusRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiMSimGetSimStackMappingStatusRspCb_SDK::unpack(AriSdk::ARI_CsiMSimGetSimStackMappingStatusRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E24718C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiMSimGetSimStackMappingStatusRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_CsiMSimGetSimStackMappingStatusRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1023639552;
}

AriSdk::MsgBase *AriSdk::ARI_IBIMSimRemapStatusIndCb_SDK::ARI_IBIMSimRemapStatusIndCb_SDK(AriSdk::ARI_IBIMSimRemapStatusIndCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3D810000u, 0);
  *(_QWORD *)result = &off_24C904F58;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3D810000u, 0);
  *(_QWORD *)result = &off_24C904F58;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIMSimRemapStatusIndCb_SDK::ARI_IBIMSimRemapStatusIndCb_SDK(AriSdk::ARI_IBIMSimRemapStatusIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904F58;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904F58;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIMSimRemapStatusIndCb_SDK::~ARI_IBIMSimRemapStatusIndCb_SDK(AriSdk::ARI_IBIMSimRemapStatusIndCb_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C904F58;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIMSimRemapStatusIndCb_SDK::~ARI_IBIMSimRemapStatusIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIMSimRemapStatusIndCb_SDK::pack(AriSdk::ARI_IBIMSimRemapStatusIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_IBIMSimRemapStatusIndCb_SDK::unpack(AriMsg **this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  AriMsg *v5;
  AriMsg *v6;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(this[6], 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (!v4)
  {
    v5 = (AriMsg *)operator new();
    *(_DWORD *)v5 = *v2;
    v6 = this[8];
    this[8] = v5;
    if (v6)
      MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  }
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E24743C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIMSimRemapStatusIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIMSimRemapStatusIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1031864320;
}

AriSdk::MsgBase *AriSdk::ARI_IBIMSimSetCurrentDataSimReq_SDK::ARI_IBIMSimSetCurrentDataSimReq_SDK(AriSdk::ARI_IBIMSimSetCurrentDataSimReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3C840000u, 0);
  *(_QWORD *)result = &off_24C904F90;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3C840000u, 0);
  *(_QWORD *)result = &off_24C904F90;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIMSimSetCurrentDataSimReq_SDK::ARI_IBIMSimSetCurrentDataSimReq_SDK(AriSdk::ARI_IBIMSimSetCurrentDataSimReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904F90;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904F90;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBIMSimSetCurrentDataSimReq_SDK::~ARI_IBIMSimSetCurrentDataSimReq_SDK(AriSdk::ARI_IBIMSimSetCurrentDataSimReq_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C904F90;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIMSimSetCurrentDataSimReq_SDK::~ARI_IBIMSimSetCurrentDataSimReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIMSimSetCurrentDataSimReq_SDK::pack(AriSdk::ARI_IBIMSimSetCurrentDataSimReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIMSimSetCurrentDataSimReq_SDK::unpack(AriSdk::ARI_IBIMSimSetCurrentDataSimReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v9, 0);
  if (!(_DWORD)v3 && v9)
  {
    v6 = (_DWORD *)operator new();
    *v6 = *v5;
    v7 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v6;
    if (v7)
      MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  }
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E2477BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIMSimSetCurrentDataSimReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIMSimSetCurrentDataSimReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1015283712;
}

AriSdk::MsgBase *AriSdk::ARI_IBIMSimSetCurrentDataSimRsp_SDK::ARI_IBIMSimSetCurrentDataSimRsp_SDK(AriSdk::ARI_IBIMSimSetCurrentDataSimRsp_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3D040000u, 0);
  *(_QWORD *)result = &off_24C904FC8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x3D040000u, 0);
  *(_QWORD *)result = &off_24C904FC8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIMSimSetCurrentDataSimRsp_SDK::ARI_IBIMSimSetCurrentDataSimRsp_SDK(AriSdk::ARI_IBIMSimSetCurrentDataSimRsp_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904FC8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C904FC8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBIMSimSetCurrentDataSimRsp_SDK::~ARI_IBIMSimSetCurrentDataSimRsp_SDK(AriSdk::ARI_IBIMSimSetCurrentDataSimRsp_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C904FC8;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIMSimSetCurrentDataSimRsp_SDK::~ARI_IBIMSimSetCurrentDataSimRsp_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIMSimSetCurrentDataSimRsp_SDK::pack(AriSdk::ARI_IBIMSimSetCurrentDataSimRsp_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIMSimSetCurrentDataSimRsp_SDK::unpack(AriSdk::ARI_IBIMSimSetCurrentDataSimRsp_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E247B0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIMSimSetCurrentDataSimRsp_SDK::hasDeclaredGmid(AriSdk::ARI_IBIMSimSetCurrentDataSimRsp_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1023672320;
}

double AriSdk::ARI_IBIMSimSimStackMappingIndCb_SDK::ARI_IBIMSimSimStackMappingIndCb_SDK(AriSdk::ARI_IBIMSimSimStackMappingIndCb_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x3D818000u, 0);
  *(_QWORD *)v1 = &off_24C905000;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x3D818000u, 0);
  *(_QWORD *)v1 = &off_24C905000;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

double AriSdk::ARI_IBIMSimSimStackMappingIndCb_SDK::ARI_IBIMSimSimStackMappingIndCb_SDK(AriSdk::ARI_IBIMSimSimStackMappingIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C905000;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C905000;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

void AriSdk::ARI_IBIMSimSimStackMappingIndCb_SDK::~ARI_IBIMSimSimStackMappingIndCb_SDK(AriSdk::ARI_IBIMSimSimStackMappingIndCb_SDK *this)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C905000;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4077774924);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIMSimSimStackMappingIndCb_SDK::~ARI_IBIMSimSimStackMappingIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIMSimSimStackMappingIndCb_SDK::pack(AriSdk::ARI_IBIMSimSimStackMappingIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  _BYTE *v6;
  _BYTE *v7;
  BOOL v8;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 1uLL, 0), !(_DWORD)result))
  {
    v6 = (_BYTE *)*((_QWORD *)this + 9);
    v7 = (_BYTE *)*((_QWORD *)this + 10);
    if (v6)
      v8 = v6 == v7;
    else
      v8 = 1;
    if (v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, v7 - v6, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIMSimSimStackMappingIndCb_SDK::unpack(AriSdk::ARI_IBIMSimSimStackMappingIndCb_SDK *this)
{
  _BYTE *v2;
  uint64_t v3;
  BOOL v4;
  _QWORD *v5;
  void **v6;
  _BYTE *v7;
  void *v8;
  const char *v9;
  BOOL *v10;
  void *v11;
  void *__p;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  BOOL v18[8];
  char v19;

  v18[0] = 0;
  v2 = (_BYTE *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 1, v18, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v18[0];
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4077774924);
  }
  v17 = 0;
  v16 = 0xAAAAAAAAAAAAAAAALL;
  v5 = (_QWORD *)operator new[]();
  *v5 = 0;
  v5[1] = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 16, &v17, &v16);
  if (!(_DWORD)v3 && v17)
  {
    v14 = 0;
    v15 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v5, (uint64_t)v5 + 4 * (v16 >> 2), v16 >> 2);
    v6 = (void **)((char *)this + 72);
    v8 = __p;
    v7 = v14;
    if ((unint64_t)(v14 - (_BYTE *)__p) < 0x11)
    {
      v11 = *v6;
      if (*v6)
      {
        *((_QWORD *)this + 10) = v11;
        operator delete(v11);
        *v6 = 0;
        *((_QWORD *)this + 10) = 0;
        *((_QWORD *)this + 11) = 0;
        v8 = __p;
        v7 = v14;
      }
      *((_QWORD *)this + 9) = v8;
      *((_QWORD *)this + 10) = v7;
      *((_QWORD *)this + 11) = v15;
    }
    else
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)v18);
      if (v19 >= 0)
        v10 = v18;
      else
        v10 = *(BOOL **)v18;
      Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v9, v10, 360, (char *)this + 72, (v14 - (_BYTE *)__p) >> 2, 4);
      if (v19 < 0)
        operator delete(*(void **)v18);
      if (__p)
      {
        v14 = __p;
        operator delete(__p);
      }
    }
  }
  MEMORY[0x212BB9B48](v5, 0x1000C8052888210);
  return v3;
}

void sub_20E247F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;

  if (*(char *)(v17 - 33) < 0)
    operator delete(*(void **)(v17 - 56));
  if (__p)
    operator delete(__p);
  MEMORY[0x212BB9B48](v16, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIMSimSimStackMappingIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIMSimSimStackMappingIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1031897088;
}

uint64_t std::weak_ptr<AriHost>::~weak_ptr(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void AriHost::AriHost(AriHost *this)
{
  uint64_t v2;
  dispatch_semaphore_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  dispatch_semaphore_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *__p[2];
  char v11;
  _QWORD v12[3];
  _QWORD *v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 1065353216;
  *((_QWORD *)this + 11) = (char *)this + 88;
  *((_QWORD *)this + 12) = (char *)this + 88;
  *((_QWORD *)this + 13) = 0;
  *((_OWORD *)this + 7) = 0u;
  v15 = 0;
  *((_DWORD *)this + 36) = 1065353216;
  *((_OWORD *)this + 8) = 0u;
  IDMgr::IDMgr((AriHost *)((char *)this + 152), 1u, 0xFFFFu);
  *((_QWORD *)this + 26) = 0;
  *((_BYTE *)this + 216) = 0;
  v2 = (uint64_t)v15;
  if (!v15)
    goto LABEL_4;
  if (v15 != v14)
  {
    v2 = (*(uint64_t (**)(void))(*v15 + 16))();
LABEL_4:
    *((_QWORD *)this + 31) = v2;
    goto LABEL_6;
  }
  *((_QWORD *)this + 31) = (char *)this + 224;
  (*(void (**)(_QWORD *))(v14[0] + 24))(v14);
LABEL_6:
  v3 = dispatch_semaphore_create(1);
  *((_QWORD *)this + 26) = v3;
  if (v3)
    *((_BYTE *)this + 216) = 1;
  v4 = v15;
  if (v15 == v14)
  {
    v5 = 4;
    v4 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_13;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_13:
  *((_DWORD *)this + 64) = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "work queue");
  Ari::ClientWorkQueue::ClientWorkQueue((uint64_t)this + 264, (__int128 *)__p, 1);
  if (v11 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "low-priority queue");
  Ari::ClientWorkQueue::ClientWorkQueue((uint64_t)this + 344, (__int128 *)__p, 1);
  if (v11 < 0)
    operator delete(__p[0]);
  v13 = 0;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *((_DWORD *)this + 114) = 1065353216;
  IDMgr::IDMgr((AriHost *)((char *)this + 464), 1u, 0x7Eu);
  *((_QWORD *)this + 65) = 0;
  *((_BYTE *)this + 528) = 0;
  v6 = (uint64_t)v13;
  if (!v13)
    goto LABEL_20;
  if (v13 != v12)
  {
    v6 = (*(uint64_t (**)(void))(*v13 + 16))();
LABEL_20:
    *((_QWORD *)this + 70) = v6;
    goto LABEL_22;
  }
  *((_QWORD *)this + 70) = (char *)this + 536;
  (*(void (**)(_QWORD *))(v12[0] + 24))(v12);
LABEL_22:
  v7 = dispatch_semaphore_create(1);
  *((_QWORD *)this + 65) = v7;
  if (v7)
    *((_BYTE *)this + 528) = 1;
  v8 = v13;
  if (v13 == v12)
  {
    v9 = 4;
    v8 = v12;
    goto LABEL_28;
  }
  if (v13)
  {
    v9 = 5;
LABEL_28:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((_DWORD *)this + 150) = 1065353216;
  *((_QWORD *)this + 76) = 0;
  *((_QWORD *)this + 78) = 0;
  *((_QWORD *)this + 77) = 0;
  *((_QWORD *)this + 79) = 850045863;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_BYTE *)this + 704) = 0;
}

void sub_20E2482C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  Ari::ClientWorkQueue *v26;
  IDMgr *v27;
  Ari::ClientWorkQueue *v28;
  uint64_t v29;
  IDMgr *v30;
  char *v32;
  uint64_t v33;

  v30 = v27;
  IDMgr::~IDMgr(v30);
  std::__hash_table<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>>>::~__hash_table(v29);
  v32 = a18;
  if (a18 == &a15)
  {
    v33 = 4;
    v32 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_6:
  Ari::ClientWorkQueue::~ClientWorkQueue(v28);
  Ari::ClientWorkQueue::~ClientWorkQueue(v26);
  ResMgr<AriHost::IndicationHandlerList>::~ResMgr(v25);
  std::__list_imp<unsigned int>::clear(v24);
  std::__hash_table<std::__hash_value_type<int,AriHost::FilerTransfer>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::FilerTransfer>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::FilerTransfer>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::FilerTransfer>>>::~__hash_table(v23);
  std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::~__hash_table(v22 + 8);
  _Unwind_Resume(a1);
}

void AriHost::~AriHost(AriHost *this)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t i;
  NSObject *v8;
  AriHost *v9;
  uint64_t v10;

  v2 = *(NSObject **)this;
  if (v2)
    dispatch_release(v2);
  std::mutex::~mutex((std::mutex *)((char *)this + 632));
  std::__forward_list_base<std::shared_ptr<Ari::Actor>>::clear((_QWORD **)this + 78);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 608);
  v3 = (_QWORD *)*((_QWORD *)this + 73);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)(v3 + 3));
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = (void *)*((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = 0;
  if (v5)
    operator delete(v5);
  if (*((_QWORD *)this + 56))
  {
    std::__hash_table<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>>>::__deallocate_node(*((_QWORD **)this + 55));
    *((_QWORD *)this + 55) = 0;
    v6 = *((_QWORD *)this + 54);
    if (v6)
    {
      for (i = 0; i != v6; ++i)
        *(_QWORD *)(*((_QWORD *)this + 53) + 8 * i) = 0;
    }
    *((_QWORD *)this + 56) = 0;
  }
  v8 = *((_QWORD *)this + 65);
  if (v8)
    dispatch_release(v8);
  v9 = (AriHost *)*((_QWORD *)this + 70);
  if (v9 == (AriHost *)((char *)this + 536))
  {
    v10 = 4;
    v9 = (AriHost *)((char *)this + 536);
    goto LABEL_18;
  }
  if (v9)
  {
    v10 = 5;
LABEL_18:
    (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
  }
  std::__tree<IDMgr::Range>::destroy((uint64_t)this + 496, *((_QWORD **)this + 63));
  std::__tree<IDMgr::Range>::destroy((uint64_t)this + 472, *((_QWORD **)this + 60));
  std::__hash_table<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>>>::~__hash_table((uint64_t)this + 424);
  Ari::ClientWorkQueue::~ClientWorkQueue((AriHost *)((char *)this + 344));
  Ari::ClientWorkQueue::~ClientWorkQueue((AriHost *)((char *)this + 264));
  ResMgr<AriHost::IndicationHandlerList>::~ResMgr((uint64_t)this + 112);
  std::__list_imp<unsigned int>::clear((_QWORD *)this + 11);
  std::__hash_table<std::__hash_value_type<int,AriHost::FilerTransfer>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::FilerTransfer>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::FilerTransfer>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::FilerTransfer>>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::~__hash_table((uint64_t)this + 8);
}

uint64_t AriHost::GetInstance(AriHost *this)
{
  unsigned __int8 v1;

  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<AriHost>::~shared_ptr[abi:ne180100], &AriHost::GetInstance(void)::spt, &dword_20E126000);
  }
  if (AriHost::GetInstance(void)::pred != -1)
    dispatch_once(&AriHost::GetInstance(void)::pred, &__block_literal_global);
  return AriHost::GetInstance(void)::spt;
}

void ___ZN7AriHost11GetInstanceEv_block_invoke()
{
  _QWORD *v0;
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;

  if (!qword_253D0AF70 || *(_QWORD *)(qword_253D0AF70 + 8) == -1)
  {
    v0 = operator new(0x2E0uLL);
    v0[1] = 0;
    v0[2] = 0;
    *v0 = &off_24C905B80;
    AriHost::AriHost((AriHost *)(v0 + 3));
    v2 = (std::__shared_weak_count *)qword_253D0AF48;
    AriHost::GetInstance(void)::spt = v1;
    qword_253D0AF48 = (uint64_t)v0;
    if (!v2)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    v1 = AriHost::GetInstance(void)::spt;
    v0 = (_QWORD *)qword_253D0AF48;
    if (qword_253D0AF48)
    {
LABEL_9:
      v5 = v0 + 2;
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    v7 = (std::__shared_weak_count *)qword_253D0AF70;
    AriHost::SingletonWeakPtr = v1;
    qword_253D0AF70 = (uint64_t)v0;
    if (v7)
      std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_20E2486A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t AriHost::getSentCallCount(AriHost *this)
{
  return *((_QWORD *)this + 87);
}

uint64_t AriHost::Init(AriHost *this)
{
  if (AriHost::Init(void)::pred != -1)
    dispatch_once(&AriHost::Init(void)::pred, &__block_literal_global_4);
  return 0;
}

void ___ZN7AriHost4InitEv_block_invoke(AriHost *a1)
{
  dispatch_queue_t *Instance;
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  NSObject *v6;
  dispatch_group_s *v7;
  __CFNotificationCenter *DarwinNotifyCenter;
  const char *v9;
  void **v10;
  void *__p[2];
  char v12;

  Instance = (dispatch_queue_t *)AriHost::GetInstance(a1);
  AriOsa_Init_Time = std::chrono::system_clock::now().__d_.__rep_;
  AriOsa::SWTrap(0, (uint64_t)"AriOsa::Init() != ARI_RESULT_OK", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", (const char *)0x5D);
  v2 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
  *Instance = dispatch_queue_create("AriHost", v2);
  Ari::AriClient::create((void ***)__p);
  std::shared_ptr<std::vector<unsigned char>>::operator=[abi:ne180100]((uint64_t)(Instance + 76), (__int128 *)__p);
  v3 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v4 = (unint64_t *)((char *)__p[1] + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  AriOsa::SWTrap(*Instance == 0, (uint64_t)"host.hostQueue == nullptr", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", (const char *)0x69);
  AriOsa::SWTrap(Instance[76] == 0, (uint64_t)"host.rtProxy == nullptr", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", (const char *)0x6A);
  v6 = dispatch_group_create();
  AriHost::registerActors(v6, v7);
  dispatch_release(v6);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)AriHost::RTServerInitNotification, CFSTR("ARI_SERVER_READY_NOTIFICATION"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "Init_block_invoke", (uint64_t)__p);
  if (v12 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  Ari::Log((Ari *)0x20, "(%s:%d) Host Success!", v9, v10, 122);
  if (v12 < 0)
    operator delete(__p[0]);
}

void sub_20E248898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AriHost::registerActors(NSObject *this, dispatch_group_s *a2)
{
  const char *v3;
  Ari::IndicationReregistrationActor **v4;
  NSObject *global_queue;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD v23[5];
  std::__shared_weak_count *v24;
  Ari::LowPriorityFlushActor *v25;
  unint64_t v26;
  _QWORD block[5];
  std::__shared_weak_count *v28;
  Ari::IndicationReregistrationActor **v29;
  unint64_t v30;
  char v31;

  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "registerActors", (uint64_t)&v29);
  if (v31 >= 0)
    v4 = (Ari::IndicationReregistrationActor **)&v29;
  else
    v4 = v29;
  Ari::Log((Ari *)0x20, "(%s:%d) Registering AriHost actors", v3, v4, 131);
  if (v31 < 0)
    operator delete(v29);
  v29 = (Ari::IndicationReregistrationActor **)0xAAAAAAAAAAAAAAAALL;
  v30 = 0xAAAAAAAAAAAAAAAALL;
  Ari::IndicationReregistrationActor::create((Ari::IndicationReregistrationActor **)&v29);
  global_queue = dispatch_get_global_queue(21, 0);
  v6 = MEMORY[0x24BDAC760];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZN7AriHost14registerActorsEP16dispatch_group_s_block_invoke;
  block[3] = &__block_descriptor_tmp_14;
  block[4] = v29;
  v28 = (std::__shared_weak_count *)v30;
  if (v30)
  {
    v7 = (unint64_t *)(v30 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  dispatch_group_async(this, global_queue, block);
  v25 = (Ari::LowPriorityFlushActor *)0xAAAAAAAAAAAAAAAALL;
  v26 = 0xAAAAAAAAAAAAAAAALL;
  Ari::LowPriorityFlushActor::create(&v25);
  v23[0] = v6;
  v23[1] = 1174405120;
  v23[2] = ___ZN7AriHost14registerActorsEP16dispatch_group_s_block_invoke_15;
  v23[3] = &__block_descriptor_tmp_16;
  v23[4] = v25;
  v24 = (std::__shared_weak_count *)v26;
  if (v26)
  {
    v9 = (unint64_t *)(v26 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  dispatch_group_async(this, global_queue, v23);
  v11 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)v26;
  if (v26)
  {
    v15 = (unint64_t *)(v26 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v28;
  if (v28)
  {
    v18 = (unint64_t *)&v28->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)v30;
  if (v30)
  {
    v21 = (unint64_t *)(v30 + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_20E248B00(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v1);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v2 - 88);
  _Unwind_Resume(a1);
}

void ___ZN7AriHost14registerActorsEP16dispatch_group_s_block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  void **v12;
  uint64_t v13;
  const char *v14;
  void **v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *__p[2];
  char v21;
  int **v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v24 = 0;
  v25 = 0;
  if (qword_253D0AF70)
  {
    v25 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_253D0AF70);
    if (!v25)
      return;
    v24 = AriHost::SingletonWeakPtr;
    if (AriHost::SingletonWeakPtr)
    {
      v2 = AriHost::SingletonWeakPtr + 624;
      v3 = *(std::__shared_weak_count **)(a1 + 40);
      v22 = *(int ***)(a1 + 32);
      v23 = v3;
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      v6 = Ari::ActorList::registerActor(v2, &v22);
      v7 = v6;
      v8 = v23;
      if (!v23)
        goto LABEL_11;
      v9 = (unint64_t *)&v23->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
        if (v7)
          goto LABEL_12;
      }
      else
      {
LABEL_11:
        if (v6)
        {
LABEL_12:
          AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "registerActors_block_invoke", (uint64_t)__p);
          v11 = v21;
          v12 = (void **)__p[0];
          v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
          v15 = __p;
          if (v11 < 0)
            v15 = v12;
          if (*(char *)(v13 + 23) >= 0)
            v16 = v13;
          else
            v16 = *(_QWORD *)v13;
          Ari::Log((Ari *)0x10, "(%s:%d) Failed to register %s", v14, v15, 141, v16);
          if (v21 < 0)
            operator delete(__p[0]);
        }
      }
    }
  }
  v17 = v25;
  if (v25)
  {
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_20E248CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v18 - 48);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c38_ZTSNSt3__110shared_ptrIN3Ari5ActorEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c38_ZTSNSt3__110shared_ptrIN3Ari5ActorEEE(uint64_t a1)
{
  return std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](a1 + 32);
}

void ___ZN7AriHost14registerActorsEP16dispatch_group_s_block_invoke_15(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  void **v12;
  uint64_t v13;
  const char *v14;
  void **v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *__p[2];
  char v21;
  int **v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v24 = 0;
  v25 = 0;
  if (qword_253D0AF70)
  {
    v25 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_253D0AF70);
    if (!v25)
      return;
    v24 = AriHost::SingletonWeakPtr;
    if (AriHost::SingletonWeakPtr)
    {
      v2 = AriHost::SingletonWeakPtr + 624;
      v3 = *(std::__shared_weak_count **)(a1 + 40);
      v22 = *(int ***)(a1 + 32);
      v23 = v3;
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldxr(p_shared_owners);
        while (__stxr(v5 + 1, p_shared_owners));
      }
      v6 = Ari::ActorList::registerActor(v2, &v22);
      v7 = v6;
      v8 = v23;
      if (!v23)
        goto LABEL_11;
      v9 = (unint64_t *)&v23->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
        if (v7)
          goto LABEL_12;
      }
      else
      {
LABEL_11:
        if (v6)
        {
LABEL_12:
          AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "registerActors_block_invoke", (uint64_t)__p);
          v11 = v21;
          v12 = (void **)__p[0];
          v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
          v15 = __p;
          if (v11 < 0)
            v15 = v12;
          if (*(char *)(v13 + 23) >= 0)
            v16 = v13;
          else
            v16 = *(_QWORD *)v13;
          Ari::Log((Ari *)0x10, "(%s:%d) Failed to register %s", v14, v15, 153, v16);
          if (v21 < 0)
            operator delete(__p[0]);
        }
      }
    }
  }
  v17 = v25;
  if (v25)
  {
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_20E248E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v18 - 48);
  _Unwind_Resume(a1);
}

void AriHost::HandleRTServerInitialized(AriHost *this)
{
  const char *v1;
  const char *v2;
  const char *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  const char *v7;
  void **v8;
  AriHost *v9;
  NSObject **Instance;
  NSObject *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  const char *v17;
  void **v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD block[5];
  std::__shared_weak_count *v23;
  NSObject **v24;
  void *__p[2];
  char v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v1 = getprogname();
  if (strncmp(v1, "CommCenter", 0x10uLL))
  {
    v2 = getprogname();
    if (strncmp(v2, "CommCenter-asan", 0x10uLL))
    {
      v3 = getprogname();
      if (strncmp(v3, "basebandd", 0x10uLL))
      {
        v27 = 0;
        v28 = 0;
        if (qword_253D0AF70
          && (v4 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_253D0AF70), (v28 = v4) != 0)
          && (v5 = AriHost::SingletonWeakPtr, (v27 = AriHost::SingletonWeakPtr) != 0))
        {
          v6 = v4;
          AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "HandleRTServerInitialized", (uint64_t)__p);
          if (v26 >= 0)
            v8 = __p;
          else
            v8 = (void **)__p[0];
          Ari::Log((Ari *)0x20, "(%s:%d) Ari server initialized; reconnect...", v7, v8, 1871);
          if (v26 < 0)
            operator delete(__p[0]);
          Instance = (NSObject **)AriHost::GetInstance(v9);
          v11 = *Instance;
          block[0] = MEMORY[0x24BDAC760];
          block[1] = 1174405120;
          block[2] = ___ZN7AriHost25HandleRTServerInitializedEv_block_invoke;
          block[3] = &__block_descriptor_tmp_195;
          block[4] = v5;
          v23 = v6;
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v13 = __ldxr(p_shared_owners);
          while (__stxr(v13 + 1, p_shared_owners));
          v24 = Instance;
          dispatch_async(v11, block);
          v14 = v23;
          if (v23)
          {
            v15 = (unint64_t *)&v23->__shared_owners_;
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 - 1, v15));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
        }
        else
        {
          AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "HandleRTServerInitialized", (uint64_t)__p);
          if (v26 >= 0)
            v18 = __p;
          else
            v18 = (void **)__p[0];
          Ari::Log((Ari *)0x10, "(%s:%d) Failed to lock on AriHost instance", v17, v18, 1867);
          if (v26 < 0)
            operator delete(__p[0]);
        }
        v19 = v28;
        if (v28)
        {
          v20 = (unint64_t *)&v28->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
    }
  }
}

void sub_20E2490EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v23 - 48);
  _Unwind_Resume(a1);
}

uint64_t AriHost::RegisterClient(AriHost *this, char *a2, int *a3, dispatch_queue_s *a4)
{
  return AriHost::RegisterClient(this, a2, a3, a4, 5);
}

uint64_t AriHost::RegisterClient(AriHost *this, char *a2, int *a3, dispatch_queue_s *a4, uint64_t a5)
{
  int v6;
  BOOL v10;
  uint64_t v12;
  AriHost *v13;
  NSObject **Instance;
  std::__shared_weak_count *v15;
  NSObject *v16;
  const char *v17;
  void **v18;
  uint64_t v19;
  const char *v20;
  void **v21;
  const char *v22;
  void **v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void *__p[2];
  char v28;
  _QWORD block[9];
  int v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  void **v36;
  void **v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  std::__shared_weak_count *v41;

  v6 = (int)a4;
  if (this)
    v10 = a2 == 0;
  else
    v10 = 1;
  v12 = v10 || a3 == 0;
  v13 = (AriHost *)AriOsa::SWTrap(v12, (uint64_t)"(clientId == NULL) || (name == NULL) || (jobQueue == NULL)", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", (const char *)0xB1);
  Instance = (NSObject **)AriHost::GetInstance(v13);
  if (AriHost::Init(void)::pred != -1)
    dispatch_once(&AriHost::Init(void)::pred, &__block_literal_global_4);
  v40 = 0;
  v41 = 0;
  if (qword_253D0AF70)
  {
    v15 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_253D0AF70);
    v41 = v15;
    if (v15)
    {
      v40 = AriHost::SingletonWeakPtr;
      if (AriHost::SingletonWeakPtr)
      {
        v36 = 0;
        v37 = (void **)&v36;
        v38 = 0x2000000000;
        v39 = -1431655766;
        v32 = 0;
        v33 = &v32;
        v34 = 0x2000000000;
        v35 = -1;
        v16 = *Instance;
        block[0] = MEMORY[0x24BDAC760];
        block[1] = 0x40000000;
        block[2] = ___ZN7AriHost14RegisterClientEPKcPiP16dispatch_queue_sjj_block_invoke;
        block[3] = &unk_24C9053B0;
        block[6] = Instance;
        block[7] = this;
        block[4] = &v32;
        block[5] = &v36;
        block[8] = a3;
        v30 = v6;
        v31 = a5;
        dispatch_sync(v16, block);
        if (*((_DWORD *)v33 + 6))
        {
          AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "RegisterClient", (uint64_t)__p);
          if (v28 >= 0)
            v18 = __p;
          else
            v18 = (void **)__p[0];
          Ari::Log((Ari *)8, "(%s:%d) Failed to register client %s", v17, v18, 240, this);
          if (v28 < 0)
            operator delete(__p[0]);
          v19 = *((unsigned int *)v33 + 6);
        }
        else
        {
          *(_DWORD *)a2 = ((_DWORD)v37[3] & 0x7F) << 8;
          AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "RegisterClient", (uint64_t)__p);
          if (v28 >= 0)
            v23 = __p;
          else
            v23 = (void **)__p[0];
          Ari::Log((Ari *)0x20, "(%s:%d) Allocated cid(0x%02x) ARICtxId(0x%08x) client(%s) maxOutstandingReqs(%d)", v22, v23, 248, *((unsigned int *)v37 + 6), *(unsigned int *)a2, this, a5);
          if (v28 < 0)
            operator delete(__p[0]);
          v19 = 0;
        }
        _Block_object_dispose(&v32, 8);
        _Block_object_dispose(&v36, 8);
LABEL_37:
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        return v19;
      }
    }
  }
  else
  {
    v15 = 0;
  }
  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "RegisterClient", (uint64_t)&v36);
  if (v38 >= 0)
    v21 = (void **)&v36;
  else
    v21 = v36;
  Ari::Log((Ari *)8, "(%s:%d) Failed to lock on AriHost instance!!", v20, v21, 186);
  if (SHIBYTE(v38) < 0)
    operator delete(v36);
  v19 = 0xFFFFFFFFLL;
  if (v15)
    goto LABEL_37;
  return v19;
}

void sub_20E249410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  _Block_object_dispose((const void *)(v21 - 144), 8);
  _Block_object_dispose((const void *)(v21 - 112), 8);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v21 - 80);
  _Unwind_Resume(a1);
}

void ___ZN7AriHost14RegisterClientEPKcPiP16dispatch_queue_sjj_block_invoke(uint64_t a1)
{
  AriHost *v2;
  char *v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  const char *v34;
  void **v35;
  uint64_t v36;
  const char *v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t i;
  const char *v42;
  void **v43;
  char *v44;
  std::__shared_weak_count *v45;
  void *__p[2];
  int64_t v47;

  v2 = (AriHost *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 48) + 608)
                                                                             + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 608), *(_QWORD *)(a1 + 56), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24, *(unsigned int *)(a1 + 72));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (_DWORD)v2;
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    AriHost::putAsideReconnectingClientData_nl(v2, *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
    v3 = (char *)operator new(0xA8uLL);
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    *(_QWORD *)v3 = &off_24C905BD0;
    *(_OWORD *)(v3 + 40) = 0u;
    *(_OWORD *)(v3 + 56) = 0u;
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_OWORD *)(v3 + 24) = 0u;
    v44 = v3 + 24;
    v45 = (std::__shared_weak_count *)v3;
    std::string::__assign_external((std::string *)v3 + 1, *(const std::string::value_type **)(a1 + 56));
    AriDispatch::Queue::Create(*(NSObject **)(a1 + 64), __p);
    v4 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v5 = (std::__shared_weak_count *)*((_QWORD *)v3 + 7);
    *((_OWORD *)v3 + 3) = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v9 = (unint64_t *)((char *)__p[1] + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    *((_DWORD *)v44 + 10) = *(_DWORD *)(a1 + 76);
    ResMgr<std::shared_ptr<AriHost::ClientData>>::set(*(_QWORD *)(a1 + 48) + 424, *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), (uint64_t *)&v44);
    v11 = *(_QWORD *)(a1 + 48);
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v13 = *(unsigned int *)(v12 + 24);
    v14 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)(v11 + 8), *(_DWORD *)(v12 + 24));
    if (v14)
    {
      v15 = v14;
      v16 = ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](v11 + 424, v13);
      AriHost::TransactionMgr::setMaxOutstanding((AriHost::TransactionMgr *)(v15 + 3), *(unsigned int *)(*v16 + 40));
      v17 = *(_QWORD *)(a1 + 48);
      v18 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)(v17 + 8), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
      if (!v18)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      *((_BYTE *)v18 + 284) = 0;
    }
    else
    {
      v47 = 0xAAAAAAAAAAAAAA00;
      v19 = operator new(0x120uLL);
      __p[0] = v19;
      __p[1] = (void *)(v11 + 24);
      *v19 = 0;
      v19[1] = 0;
      *((_DWORD *)v19 + 4) = v13;
      AriHost::TransactionMgr::TransactionMgr((AriHost::TransactionMgr *)(v19 + 3), v13, *(_DWORD *)(a1 + 76));
      LOBYTE(v47) = 1;
      v19[1] = *((int *)v19 + 4);
      if ((std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::__node_insert_unique(v11 + 8, (uint64_t)v19) & 1) != 0)__p[0] = 0;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<int,AriHost::TransactionMgr>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,AriHost::TransactionMgr>,void *>>>>::reset[abi:ne180100]((uint64_t *)__p);
      v17 = *(_QWORD *)(a1 + 48);
    }
    v20 = ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](v17 + 424, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
    v21 = (_QWORD *)*v20;
    v22 = *(unsigned __int8 *)(*v20 + 23);
    v23 = (char)v22;
    if ((v22 & 0x80u) != 0)
      v22 = *(_QWORD *)(*v20 + 8);
    if (v22 == 29)
    {
      if (v23 < 0)
        v21 = (_QWORD *)*v21;
      v24 = (_QWORD *)*v21;
      v25 = v21[1];
      v26 = v21[2];
      v27 = *(_QWORD *)((char *)v21 + 21);
      if (v24 == (_QWORD *)0x6974616369646E49
        && v25 == 0x6967657265526E6FLL
        && v26 == 0x6E6F697461727473
        && v27 == 0x726F7463416E6F69)
      {
        AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "RegisterClient_block_invoke", (uint64_t)__p);
        if (v47 >= 0)
          v35 = __p;
        else
          v35 = (void **)__p[0];
        Ari::Log((Ari *)0x20, "(%s:%d) Recording indicationRegId as 0x%x", v34, v35, 219, *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
        if (SHIBYTE(v47) < 0)
          operator delete(__p[0]);
        v36 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)(v36 + 256) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
        if (*(_QWORD *)(v36 + 104))
        {
          AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "RegisterClient_block_invoke", (uint64_t)__p);
          if (v47 >= 0)
            v38 = __p;
          else
            v38 = (void **)__p[0];
          Ari::Log((Ari *)0x20, "(%s:%d) Found %zu deferred indication registrations.  Updating RT now.", v37, v38, 224, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 104));
          if (SHIBYTE(v47) < 0)
            operator delete(__p[0]);
          v39 = *(_QWORD *)(a1 + 48);
          v40 = v39 + 88;
          for (i = *(_QWORD *)(v39 + 96); i != v40; i = *(_QWORD *)(i + 8))
            (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 48) + 608) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 608), *(unsigned int *)(i + 16), *(unsigned int *)(*(_QWORD *)(a1 + 48) + 256));
        }
        else
        {
          AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "RegisterClient_block_invoke", (uint64_t)__p);
          if (v47 >= 0)
            v43 = __p;
          else
            v43 = (void **)__p[0];
          Ari::Log((Ari *)0x20, "(%s:%d) No deferred indication registrations", v42, v43, 232);
          if (SHIBYTE(v47) < 0)
            operator delete(__p[0]);
        }
      }
    }
    v31 = v45;
    if (v45)
    {
      v32 = (unint64_t *)&v45->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_20E249920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void AriHost::putAsideReconnectingClientData_nl(AriHost *this, uint64_t a2)
{
  uint64_t Instance;
  uint64_t v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const char *v10;
  void **v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint8x8_t v20;
  unint64_t v21;
  uint64_t **v22;
  uint64_t *i;
  unint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  _BOOL8 v28;
  size_t v29;
  unint64_t v30;
  size_t v31;
  uint8x8_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  const char *v36;
  void **v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  void *__p[2];
  int64_t v42;

  Instance = AriHost::GetInstance(this);
  v4 = Instance + 424;
  if (!ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc(Instance + 424, a2))
    return;
  v5 = ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](v4, a2);
  v7 = *v5;
  v6 = (std::__shared_weak_count *)v5[1];
  v40 = *v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "putAsideReconnectingClientData_nl", (uint64_t)__p);
  if (v42 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  v12 = v7;
  if (*(char *)(v7 + 23) < 0)
    v12 = *(_QWORD *)v7;
  Ari::Log((Ari *)0x20, "(%s:%d) Putting aside ClientData for %s cid 0x%x.", v10, v11, 1727, v12, a2);
  if (SHIBYTE(v42) < 0)
    operator delete(__p[0]);
  if (v6)
  {
    v13 = (unint64_t *)&v6->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v42 = 0xAAAAAAAAAAAAAA01;
  v15 = (unint64_t *)operator new(0x28uLL);
  v16 = (uint64_t *)(Instance + 568);
  v17 = (unint64_t *)(Instance + 584);
  __p[0] = v15;
  __p[1] = (void *)(Instance + 584);
  *((_DWORD *)v15 + 4) = a2;
  v15[3] = v7;
  v15[4] = (unint64_t)v6;
  v18 = (int)a2;
  *v15 = 0;
  v15[1] = (int)a2;
  v19 = *(_QWORD *)(Instance + 576);
  if (v19)
  {
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.u32[0] > 1uLL)
    {
      v21 = (int)a2;
      if (v19 <= (int)a2)
        v21 = (int)a2 % v19;
    }
    else
    {
      v21 = (v19 - 1) & (int)a2;
    }
    v22 = *(uint64_t ***)(*v16 + 8 * v21);
    if (v22)
    {
      for (i = *v22; i; i = (uint64_t *)*i)
      {
        v24 = i[1];
        if (v24 == (int)a2)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)a2)
            goto LABEL_54;
        }
        else
        {
          if (v20.u32[0] > 1uLL)
          {
            if (v24 >= v19)
              v24 %= v19;
          }
          else
          {
            v24 &= v19 - 1;
          }
          if (v24 != v21)
            break;
        }
      }
    }
  }
  v25 = (float)(unint64_t)(*(_QWORD *)(Instance + 592) + 1);
  v26 = *(float *)(Instance + 600);
  if (!v19 || (float)(v26 * (float)v19) < v25)
  {
    v27 = 2 * v19;
    v28 = v19 < 3 || (v19 & (v19 - 1)) != 0;
    v29 = v28 | v27;
    v30 = vcvtps_u32_f32(v25 / v26);
    if (v29 <= v30)
      v31 = v30;
    else
      v31 = v29;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(Instance + 568, v31);
    v19 = *(_QWORD *)(Instance + 576);
    v18 = v15[1];
  }
  v32 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
  v32.i16[0] = vaddlv_u8(v32);
  if (v32.u32[0] > 1uLL)
  {
    if (v18 >= v19)
      v18 %= v19;
  }
  else
  {
    v18 &= v19 - 1;
  }
  v33 = *v16;
  v34 = *(unint64_t **)(*v16 + 8 * v18);
  if (v34)
  {
    *v15 = *v34;
  }
  else
  {
    *v15 = *v17;
    *v17 = (unint64_t)v15;
    *(_QWORD *)(v33 + 8 * v18) = v17;
    if (!*v15)
      goto LABEL_53;
    v35 = *(_QWORD *)(*v15 + 8);
    if (v32.u32[0] > 1uLL)
    {
      if (v35 >= v19)
        v35 %= v19;
    }
    else
    {
      v35 &= v19 - 1;
    }
    v34 = (unint64_t *)(*v16 + 8 * v35);
  }
  *v34 = (unint64_t)v15;
LABEL_53:
  ++*(_QWORD *)(Instance + 592);
  __p[0] = 0;
LABEL_54:
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>,void *>>>>::reset[abi:ne180100]((uint64_t)__p);
  ResMgr<std::shared_ptr<AriHost::ClientData>>::free(v4, a2);
  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "putAsideReconnectingClientData_nl", (uint64_t)__p);
  if (v42 >= 0)
    v37 = __p;
  else
    v37 = (void **)__p[0];
  Ari::Log((Ari *)0x20, "(%s:%d) Marking indication cid 0x%x as 0x%x", v36, v37, 1732, a2, a2 | 0xFF000000, a2, 0, 0, v40, v6);
  if (SHIBYTE(v42) < 0)
    operator delete(__p[0]);
  AriHost::updateIndicationCids_nl((AriHost *)Instance, a2, a2 | 0xFF000000);
  if (v6)
  {
    v38 = (unint64_t *)&v6->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20E249D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v23);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t ResMgr<std::shared_ptr<AriHost::ClientData>>::set(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _BOOL8 v6;
  int v7;
  const char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v19;

  v19 = a2;
  AriOsa::SWTrap(*(_BYTE *)(a1 + 104) == 0, (uint64_t)"valid == false", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0xB4);
  v6 = dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 96), 0xFFFFFFFFFFFFFFFFLL) != 0;
  AriOsa::SWTrap(v6, (uint64_t)"AriOsa::OsMutexTake(mtx) == ARI_RESULT_ERR", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0xB5);
  v7 = IDMgr::allocate((IDMgr *)(a1 + 40), a2);
  ResMgr<std::shared_ptr<AriHost::ClientData>>::sw_dbug_trap(a1, v7 ^ 1, v8);
  v9 = (int)(std::chrono::system_clock::now().__d_.__rep_ - AriOsa_Init_Time) / 1000;
  v10 = *a3;
  v11 = a3[1];
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = std::__hash_table<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1, a2, &v19);
  *((_DWORD *)v14 + 6) = v9;
  v15 = (std::__shared_weak_count *)v14[5];
  v14[4] = v10;
  v14[5] = v11;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 96));
  return AriOsa::SWTrap(0, (uint64_t)"AriOsa::OsMutexGive(mtx) == ARI_RESULT_ERR", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0xBA);
}

void sub_20E249F50(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AriHost::TransactionMgr::setMaxOutstanding(AriHost::TransactionMgr *this, uint64_t a2)
{
  const char *v3;
  void **v4;
  const char *v6;
  void **v7;
  void *__p[2];
  char v9;

  if (*((_DWORD *)this + 64) == (_DWORD)a2)
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "setMaxOutstanding", (uint64_t)__p);
    if (v9 >= 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    Ari::Log((Ari *)0x20, "(%s:%d) Max outstanding for cid 0x%x already at %u", v3, v4, 2315, *((unsigned int *)this + 36), *((unsigned int *)this + 64));
    if (v9 < 0)
      operator delete(__p[0]);
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "setMaxOutstanding", (uint64_t)__p);
    if (v9 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    Ari::Log((Ari *)0x20, "(%s:%d) Updating max outstanding for cid 0x%x from %u to %u", v6, v7, 2319, *((unsigned int *)this + 36), *((unsigned int *)this + 64), a2);
    if (v9 < 0)
      operator delete(__p[0]);
    *((_DWORD *)this + 64) = a2;
  }
}

void sub_20E24A06C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](uint64_t a1, int a2)
{
  _BOOL8 v4;
  _BOOL4 v5;
  const char *v6;
  uint64_t *v7;
  int v9;

  v9 = a2;
  AriOsa::SWTrap(*(_BYTE *)(a1 + 104) == 0, (uint64_t)"valid == false", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0xA6);
  v4 = dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 96), 0xFFFFFFFFFFFFFFFFLL) != 0;
  AriOsa::SWTrap(v4, (uint64_t)"AriOsa::OsMutexTake(mtx) == ARI_RESULT_ERR", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0xA7);
  v5 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)a1, a2) == 0;
  ResMgr<std::shared_ptr<AriHost::ClientData>>::sw_dbug_trap(a1, v5, v6);
  v7 = std::__hash_table<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1, a2, &v9)+ 4;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 96));
  AriOsa::SWTrap(0, (uint64_t)"AriOsa::OsMutexGive(mtx) == ARI_RESULT_ERR", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0xAC);
  return v7;
}

uint64_t AriHost::TransactionMgr::setAborted(uint64_t this, char a2)
{
  *(_BYTE *)(this + 260) = a2;
  return this;
}

uint64_t AriHost::DeregisterClient(AriHost *this)
{
  AriHost *v2;
  std::__shared_weak_count *v3;
  AriHost *Instance;
  _BOOL8 v5;
  NSObject *v6;
  const char *v7;
  void **v8;
  uint64_t v9;
  const char *v10;
  void **v11;
  const char *v12;
  void **v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *__p[2];
  char v18;
  _QWORD block[6];
  unsigned int v20;
  int v21;
  void **v22;
  void **v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  AriHost *v27;

  v26 = 0;
  v27 = 0;
  if (qword_253D0AF70)
  {
    v2 = (AriHost *)std::__shared_weak_count::lock((std::__shared_weak_count *)qword_253D0AF70);
    v3 = (std::__shared_weak_count *)v2;
    v27 = v2;
    if (v2)
    {
      v26 = AriHost::SingletonWeakPtr;
      if (AriHost::SingletonWeakPtr)
      {
        Instance = (AriHost *)AriHost::GetInstance(v2);
        v22 = 0;
        v23 = (void **)&v22;
        v24 = 0x2000000000;
        v25 = -1;
        v5 = *(_QWORD *)(AriHost::GetInstance(Instance) + 608) == 0;
        AriOsa::SWTrap(v5, (uint64_t)"GetInstance().rtProxy == NULL", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", (const char *)0x10B);
        v6 = *(NSObject **)Instance;
        block[0] = MEMORY[0x24BDAC760];
        block[1] = 0x40000000;
        block[2] = ___ZN7AriHost16DeregisterClientEi_block_invoke;
        block[3] = &unk_24C9053D8;
        v20 = (this >> 8) & 0x7F;
        v21 = (int)this;
        block[4] = &v22;
        block[5] = Instance;
        dispatch_sync(v6, block);
        if (*((_DWORD *)v23 + 6))
        {
          AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "DeregisterClient", (uint64_t)__p);
          if (v18 >= 0)
            v8 = __p;
          else
            v8 = (void **)__p[0];
          Ari::Log((Ari *)8, "(%s:%d) Failed to de-register client 0x%x", v7, v8, 292, this);
          if (v18 < 0)
            operator delete(__p[0]);
          v9 = *((unsigned int *)v23 + 6);
        }
        else
        {
          AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "DeregisterClient", (uint64_t)__p);
          if (v18 >= 0)
            v13 = __p;
          else
            v13 = (void **)__p[0];
          Ari::Log((Ari *)0x20, "(%s:%d) Deallocated cid(0x%x) based on ARICtxId(0x%08x)", v12, v13, 296, (this >> 8) & 0x7F, this);
          if (v18 < 0)
            operator delete(__p[0]);
          v9 = 0;
        }
        _Block_object_dispose(&v22, 8);
LABEL_26:
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
        return v9;
      }
    }
  }
  else
  {
    v3 = 0;
  }
  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "DeregisterClient", (uint64_t)&v22);
  if (v24 >= 0)
    v11 = (void **)&v22;
  else
    v11 = v22;
  Ari::Log((Ari *)0x10, "(%s:%d) Failed to lock on AriHost instance. Shutting down?", v10, v11, 259);
  if (SHIBYTE(v24) < 0)
    operator delete(v22);
  v9 = 0xFFFFFFFFLL;
  if (v3)
    goto LABEL_26;
  return v9;
}

void sub_20E24A3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 < 0)
    operator delete(__p);
  _Block_object_dispose((const void *)(v18 - 96), 8);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v18 - 64);
  _Unwind_Resume(a1);
}

void ___ZN7AriHost16DeregisterClientEi_block_invoke(uint64_t a1)
{
  const char *v2;
  void **v3;
  uint64_t *v4;
  const char *v5;
  void **v6;
  void *__p[2];
  char v8;

  if (ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc(*(_QWORD *)(a1 + 40) + 424, *(_DWORD *)(a1 + 48)))
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 608) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 608), *(unsigned int *)(a1 + 48));
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "DeregisterClient_block_invoke", (uint64_t)__p);
      v3 = v8 >= 0 ? __p : (void **)__p[0];
      Ari::Log((Ari *)8, "(%s:%d) Failed client deregistration with RT for cid 0x%x", v2, v3, 281, *(unsigned int *)(a1 + 48));
      if (v8 < 0)
        operator delete(__p[0]);
    }
    ResMgr<std::shared_ptr<AriHost::ClientData>>::free(*(_QWORD *)(a1 + 40) + 424, *(unsigned int *)(a1 + 48));
    v4 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)(*(_QWORD *)(a1 + 40) + 8), *(_DWORD *)(a1 + 48));
    if (!v4)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    AriHost::TransactionMgr::clear((AriHost::TransactionMgr *)(v4 + 3));
    Ari::ClientWorkQueue::abort((int64x2_t *)(*(_QWORD *)(a1 + 40) + 264), *(_DWORD *)(a1 + 48));
    Ari::ClientWorkQueue::abort((int64x2_t *)(*(_QWORD *)(a1 + 40) + 344), *(_DWORD *)(a1 + 48));
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "DeregisterClient_block_invoke", (uint64_t)__p);
    if (v8 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Attempt to de-register non-existant client ID 0x%x", v5, v6, 273, *(unsigned int *)(a1 + 52));
    if (v8 < 0)
      operator delete(__p[0]);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -1;
  }
}

void sub_20E24A5C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc(uint64_t a1, int a2)
{
  _BOOL8 v4;
  _BOOL8 isAlloc;

  AriOsa::SWTrap(*(_BYTE *)(a1 + 104) == 0, (uint64_t)"valid == false", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0x103);
  v4 = dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 96), 0xFFFFFFFFFFFFFFFFLL) != 0;
  AriOsa::SWTrap(v4, (uint64_t)"AriOsa::OsMutexTake(mtx) == ARI_RESULT_ERR", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0x105);
  isAlloc = IDMgr::isAlloc((IDMgr *)(a1 + 40), a2);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 96));
  AriOsa::SWTrap(0, (uint64_t)"AriOsa::OsMutexGive(mtx) == ARI_RESULT_ERR", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0x107);
  return isAlloc;
}

uint64_t ResMgr<std::shared_ptr<AriHost::ClientData>>::free(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  int v5;
  const char *v6;
  uint64_t *v7;
  int8x8_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD v18[2];
  char v19;

  AriOsa::SWTrap(*(_BYTE *)(a1 + 104) == 0, (uint64_t)"valid == false", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0xEB);
  v4 = dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 96), 0xFFFFFFFFFFFFFFFFLL) != 0;
  AriOsa::SWTrap(v4, (uint64_t)"AriOsa::OsMutexTake(mtx) == ARI_RESULT_ERR", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0xEC);
  v5 = IDMgr::_free((unsigned int *)(a1 + 40), a2, a1 + 48);
  ResMgr<std::shared_ptr<AriHost::ClientData>>::sw_dbug_trap(a1, v5 ^ 1, v6);
  v7 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)a1, a2);
  v8 = *(int8x8_t *)(a1 + 8);
  v9 = v7[1];
  v10 = (uint8x8_t)vcnt_s8(v8);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    if (v9 >= *(_QWORD *)&v8)
      v9 %= *(_QWORD *)&v8;
  }
  else
  {
    v9 &= *(_QWORD *)&v8 - 1;
  }
  v11 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v9);
  do
  {
    v12 = v11;
    v11 = (uint64_t *)*v11;
  }
  while (v11 != v7);
  if (v12 == (uint64_t *)(a1 + 16))
    goto LABEL_18;
  v13 = v12[1];
  if (v10.u32[0] > 1uLL)
  {
    if (v13 >= *(_QWORD *)&v8)
      v13 %= *(_QWORD *)&v8;
  }
  else
  {
    v13 &= *(_QWORD *)&v8 - 1;
  }
  if (v13 != v9)
  {
LABEL_18:
    if (!*v7)
      goto LABEL_19;
    v14 = *(_QWORD *)(*v7 + 8);
    if (v10.u32[0] > 1uLL)
    {
      if (v14 >= *(_QWORD *)&v8)
        v14 %= *(_QWORD *)&v8;
    }
    else
    {
      v14 &= *(_QWORD *)&v8 - 1;
    }
    if (v14 != v9)
LABEL_19:
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = 0;
  }
  v15 = *v7;
  if (*v7)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (v10.u32[0] > 1uLL)
    {
      if (v16 >= *(_QWORD *)&v8)
        v16 %= *(_QWORD *)&v8;
    }
    else
    {
      v16 &= *(_QWORD *)&v8 - 1;
    }
    if (v16 != v9)
    {
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v16) = v12;
      v15 = *v7;
    }
  }
  *v12 = v15;
  *v7 = 0;
  --*(_QWORD *)(a1 + 24);
  v18[0] = v7;
  v18[1] = a1 + 16;
  v19 = 1;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 96));
  return AriOsa::SWTrap(0, (uint64_t)"AriOsa::OsMutexGive(mtx) == ARI_RESULT_ERR", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0xF1);
}

void AriHost::TransactionMgr::clear(AriHost::TransactionMgr *this)
{
  const char *v2;
  void **v3;
  _BOOL8 v4;
  void *__p[2];
  char v6;

  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "clear", (uint64_t)__p);
  if (v6 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  Ari::Log((Ari *)0x20, "(%s:%d) Clearing transaction manager for cid 0x%x", v2, v3, 2273, *((unsigned int *)this + 36));
  if (v6 < 0)
    operator delete(__p[0]);
  AriOsa::SWTrap(*((_BYTE *)this + 104) == 0, (uint64_t)"valid == false", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0x9B);
  v4 = dispatch_semaphore_wait(*((dispatch_semaphore_t *)this + 12), 0xFFFFFFFFFFFFFFFFLL) != 0;
  AriOsa::SWTrap(v4, (uint64_t)"AriOsa::OsMutexTake(mtx) == ARI_RESULT_ERR", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0x9C);
  IDMgr::reset((AriHost::TransactionMgr *)((char *)this + 40));
  std::__hash_table<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>>>::clear((uint64_t)this);
  dispatch_semaphore_signal(*((dispatch_semaphore_t *)this + 12));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::clear((_QWORD *)this + 22);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::clear((_QWORD *)this + 27);
  std::__list_imp<std::shared_ptr<Ari::ClientOutboundMessage>>::clear((uint64_t *)this + 19);
  *((_BYTE *)this + 260) = 0;
}

void sub_20E24A994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriHost::Send(AriMsg *a1, int a2, uint64_t a3, char a4, int a5)
{
  int *EncodedBuf;
  AriMsg *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  AriMsg *BufHeader;
  unint64_t v15;
  const char *v16;
  void **v17;
  void *__p[2];
  char v20;
  unsigned int v21;

  v21 = -1431655766;
  EncodedBuf = AriMsg::getEncodedBuf(a1, &v21);
  if (EncodedBuf)
  {
    v11 = (AriMsg *)EncodedBuf;
    v13 = AriHost::SendInternal((uint64_t)EncodedBuf, v21, a2, a3, a4, a5, 1);
    if (!(_DWORD)v13)
    {
      BufHeader = AriMsg::GetBufHeader(v11, (const unsigned __int8 *)v21);
      if (BufHeader)
        v15 = (unint64_t)*((unsigned int *)BufHeader + 2) >> 17;
      else
        LODWORD(v15) = 0x8000;
      v13 = *((unsigned int *)a1 + 17);
      if (!(_DWORD)v13)
        *((_DWORD *)a1 + 16) = v15;
    }
    AriMsg::ReleaseEncodedMessage(v11, v12);
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "Send", (uint64_t)__p);
    if (v20 >= 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) CopyEncodedMessage fails on msg(%p)", v16, v17, 318, a1);
    if (v20 < 0)
      operator delete(__p[0]);
    return 0xFFFFFFFFLL;
  }
  return v13;
}

void sub_20E24AAC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriHost::Send(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6)
{
  return AriHost::SendInternal(a1, a2, a3, a4, a5, a6, 1);
}

uint64_t AriHost::SendInternal(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, char a7)
{
  AriHost *v14;
  std::__shared_weak_count *v15;
  NSObject **Instance;
  NSObject *v17;
  uint64_t v18;
  const char *v19;
  void *v20;
  const char *v21;
  void *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _QWORD block[8];
  int v27;
  int v28;
  int v29;
  char v30;
  char v31;
  void *__p;
  void **p_p;
  uint64_t v34;
  int v35;
  uint64_t v36;
  AriHost *v37;

  v36 = 0;
  v37 = 0;
  if (qword_253D0AF70)
  {
    v14 = (AriHost *)std::__shared_weak_count::lock((std::__shared_weak_count *)qword_253D0AF70);
    v15 = (std::__shared_weak_count *)v14;
    v37 = v14;
    if (v14)
    {
      v36 = AriHost::SingletonWeakPtr;
      if (AriHost::SingletonWeakPtr)
      {
        if (a1 && (_DWORD)a2)
        {
          Instance = (NSObject **)AriHost::GetInstance(v14);
          __p = 0;
          p_p = &__p;
          v34 = 0x2000000000;
          v35 = 0;
          v17 = *Instance;
          block[0] = MEMORY[0x24BDAC760];
          block[1] = 0x40000000;
          block[2] = ___ZN7AriHost12SendInternalEPhjiU13block_pointerFiS0_jEbjb_block_invoke;
          block[3] = &unk_24C905400;
          v27 = a3;
          v28 = a2;
          block[6] = a1;
          block[7] = Instance;
          block[4] = a4;
          block[5] = &__p;
          v30 = a7;
          v31 = a5;
          v29 = a6;
          dispatch_sync(v17, block);
          v18 = *((unsigned int *)p_p + 6);
          _Block_object_dispose(&__p, 8);
        }
        else
        {
          AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "SendInternal", (uint64_t)&__p);
          if (v34 >= 0)
            v22 = &__p;
          else
            v22 = __p;
          Ari::Log((Ari *)8, "(%s:%d) Invoked with illegal buffer(%p) or size(%u)", v21, v22, 368, a1, a2);
          if (SHIBYTE(v34) < 0)
            operator delete(__p);
          v18 = 0xFFFFFFFFLL;
        }
LABEL_21:
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        return v18;
      }
    }
  }
  else
  {
    v15 = 0;
  }
  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "SendInternal", (uint64_t)&__p);
  if (v34 >= 0)
    v20 = &__p;
  else
    v20 = __p;
  Ari::Log((Ari *)0x10, "(%s:%d) Failed to lock on AriHost instance. Shutting down?", v19, v20, 362);
  if (SHIBYTE(v34) < 0)
    operator delete(__p);
  v18 = 0xFFFFFFFFLL;
  if (v15)
    goto LABEL_21;
  return v18;
}

void sub_20E24ACF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v28 - 80);
  _Unwind_Resume(a1);
}

void ___ZN7AriHost12SendInternalEPhjiU13block_pointerFiS0_jEbjb_block_invoke(uint64_t a1)
{
  unsigned int v2;
  AriMsg *BufHeader;
  unsigned int v4;
  const void *v5;
  char v6;
  _QWORD *v7;
  unint64_t *v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  _BOOL8 v17;
  _BOOL4 isAlloc;
  const char *v19;
  int v20;
  unint64_t v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  const char *v26;
  std::string *v27;
  _BOOL8 v28;
  int v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  const char *v35;
  std::string *v36;
  const char *v37;
  std::string *v38;
  uint64_t i;
  uint64_t v40;
  int v41;
  const char *v42;
  std::string *v43;
  uint64_t data_low;
  const char *v45;
  std::string *v46;
  uint64_t v47;
  const char *v48;
  std::string *v49;
  __int128 v50;
  size_t v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  size_t v56;
  std::string *v57;
  __int128 v58;
  std::string *v59;
  std::string::value_type *v60;
  std::string::size_type size;
  std::string::size_type v62;
  uint64_t v63;
  const char *v64;
  std::string *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  const char *v79;
  std::string *v80;
  uint64_t v81;
  __int128 v82;
  std::string v83;
  std::string v84;
  std::string v85;
  std::string v86;
  std::string v87;
  char *v88;
  std::__shared_weak_count *v89;
  std::string v90;
  char __str[16];
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD *)(a1 + 64);
  BufHeader = AriMsg::GetBufHeader(*(AriMsg **)(a1 + 48), (const unsigned __int8 *)*(unsigned int *)(a1 + 68));
  if (BufHeader)
    v4 = (*(_DWORD *)((_BYTE *)BufHeader + 3) & 0x1F800 | ((unsigned __int16)*((_DWORD *)BufHeader + 2) >> 6)) << 15;
  else
    v4 = 0;
  if (ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc(*(_QWORD *)(a1 + 56) + 424, (v2 >> 8) & 0x7F))
  {
    v81 = (v2 >> 8) & 0x7F;
    v5 = *(const void **)(a1 + 32);
    v6 = *(_BYTE *)(a1 + 76);
    v7 = operator new(0x30uLL);
    v7[1] = 0;
    v8 = v7 + 1;
    v7[2] = 0;
    *v7 = &off_24C905C20;
    v7[3] = _Block_copy(v5);
    *((_DWORD *)v7 + 8) = v81;
    *((_DWORD *)v7 + 9) = v4;
    *((_BYTE *)v7 + 40) = v6;
    v9 = v81;
    v88 = (char *)(v7 + 3);
    v89 = (std::__shared_weak_count *)v7;
    v10 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v81);
    v11 = v10;
    if ((_BYTE)v2)
    {
      if (!v10)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      if (ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc((uint64_t)(v10 + 3), v2))
      {
        v12 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v81);
        if (!v12)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        v13 = *(unsigned __int8 *)(*ResMgr<std::shared_ptr<AriHost::InboundMsgHandler>>::operator[]((uint64_t)(v12 + 3), v2)+ 16);
        *((_BYTE *)v7 + 40) = v13;
        v14 = *(_QWORD *)(a1 + 56);
        if (!v13
          || std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)(v14 + 48), v2))
        {
          v15 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)(v14 + 8), v81);
          if (!v15)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          v16 = v15;
          LODWORD(v87.__r_.__value_.__l.__data_) = v2;
          AriOsa::SWTrap(*((_BYTE *)v15 + 128) == 0, (uint64_t)"valid == false", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0xC0);
          v17 = dispatch_semaphore_wait((dispatch_semaphore_t)v16[15], 0xFFFFFFFFFFFFFFFFLL) != 0;
          AriOsa::SWTrap(v17, (uint64_t)"AriOsa::OsMutexTake(mtx) == ARI_RESULT_ERR", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0xC1);
          isAlloc = IDMgr::isAlloc((IDMgr *)(v16 + 8), v2);
          ResMgr<std::shared_ptr<AriHost::InboundMsgHandler>>::sw_dbug_trap((uint64_t)(v16 + 3), !isAlloc, v19);
          v20 = (int)(std::chrono::system_clock::now().__d_.__rep_ - AriOsa_Init_Time) / 1000;
          LODWORD(v90.__r_.__value_.__l.__data_) = v20;
          v90.__r_.__value_.__l.__size_ = (std::string::size_type)(v7 + 3);
          v90.__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
          do
            v21 = __ldxr(v8);
          while (__stxr(v21 + 1, v8));
          v22 = std::__hash_table<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v16 + 3), v2, &v87);
          *((_DWORD *)v22 + 6) = v20;
          std::shared_ptr<std::vector<unsigned char>>::operator=[abi:ne180100]((uint64_t)(v22 + 4), (__int128 *)&v90.__r_.__value_.__r.__words[1]);
          v23 = (std::__shared_weak_count *)v90.__r_.__value_.__r.__words[2];
          v9 = v81;
          if (v90.__r_.__value_.__r.__words[2])
          {
            v24 = (unint64_t *)(v90.__r_.__value_.__r.__words[2] + 8);
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
          dispatch_semaphore_signal((dispatch_semaphore_t)v16[15]);
          goto LABEL_83;
        }
        AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "SendInternal_block_invoke", (uint64_t)&v90);
        if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v80 = &v90;
        else
          v80 = (std::string *)v90.__r_.__value_.__r.__words[0];
        Ari::Log((Ari *)8, "(%s:%d) Unrecognized Filer transaction [cid=0x%x, trx=0x%x] in flight.  Likely due to unknown filer message. ari_sdk_prop may need to be updated\n", v79, v80, 435, v81, v2);
      }
      else
      {
        AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "SendInternal_block_invoke", (uint64_t)&v90);
        if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v36 = &v90;
        else
          v36 = (std::string *)v90.__r_.__value_.__r.__words[0];
        Ari::Log((Ari *)8, "(%s:%d) Filer transaction [cid=0x%x, trx=0x%x] appears to have exited too early!  Check if it was cancelled", v35, v36, 441, v81, v2);
      }
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v90.__r_.__value_.__l.__data_);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = -1;
      goto LABEL_83;
    }
    if (!v10)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    AriOsa::SWTrap(*((_BYTE *)v10 + 128) == 0, (uint64_t)"valid == false", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0xCC);
    v28 = dispatch_semaphore_wait((dispatch_semaphore_t)v11[15], 0xFFFFFFFFFFFFFFFFLL) != 0;
    AriOsa::SWTrap(v28, (uint64_t)"AriOsa::OsMutexTake(mtx) == ARI_RESULT_ERR", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0xCD);
    LODWORD(v86.__r_.__value_.__l.__data_) = -1431655766;
    if (IDMgr::allocate((uint64_t **)v11 + 8, (int *)&v86, 1))
    {
      v29 = (int)(std::chrono::system_clock::now().__d_.__rep_ - AriOsa_Init_Time) / 1000;
      LODWORD(v90.__r_.__value_.__l.__data_) = v29;
      v90.__r_.__value_.__l.__size_ = (std::string::size_type)(v7 + 3);
      v90.__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
      do
        v30 = __ldxr(v8);
      while (__stxr(v30 + 1, v8));
      v31 = std::__hash_table<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v11 + 3), (int)v86.__r_.__value_.__l.__data_, &v86);
      *((_DWORD *)v31 + 6) = v29;
      std::shared_ptr<std::vector<unsigned char>>::operator=[abi:ne180100]((uint64_t)(v31 + 4), (__int128 *)&v90.__r_.__value_.__r.__words[1]);
      v32 = (std::__shared_weak_count *)v90.__r_.__value_.__r.__words[2];
      if (v90.__r_.__value_.__r.__words[2])
      {
        v33 = (unint64_t *)(v90.__r_.__value_.__r.__words[2] + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
    }
    else
    {
      LODWORD(v86.__r_.__value_.__l.__data_) = 0x7FFFFFFF;
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", "alloc", (uint64_t)&v90);
      if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = &v90;
      else
        v38 = (std::string *)v90.__r_.__value_.__r.__words[0];
      Ari::Log((Ari *)8, "(%s:%d) ResMgr(%p) dump total entries: %zu", v37, v38, 210, v11 + 3, v11[6]);
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v90.__r_.__value_.__l.__data_);
      for (i = v11[5]; i; i = *(_QWORD *)i)
      {
        v40 = v11[20];
        if (v40)
        {
          v41 = *(_DWORD *)(i + 24);
          LODWORD(v90.__r_.__value_.__l.__data_) = *(_DWORD *)(i + 16);
          LODWORD(v87.__r_.__value_.__l.__data_) = v41;
          (*(void (**)(uint64_t, std::string *, std::string *, uint64_t))(*(_QWORD *)v40 + 48))(v40, &v90, &v87, i + 32);
        }
        else
        {
          AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", "alloc", (uint64_t)&v90);
          if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v43 = &v90;
          else
            v43 = (std::string *)v90.__r_.__value_.__r.__words[0];
          Ari::Log((Ari *)8, "(%s:%d) id(%08d-0x%08x) ts:%d", v42, v43, 220, *(unsigned int *)(i + 16), *(unsigned int *)(i + 16), *(unsigned int *)(i + 24));
          if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v90.__r_.__value_.__l.__data_);
        }
      }
    }
    dispatch_semaphore_signal((dispatch_semaphore_t)v11[15]);
    data_low = LODWORD(v86.__r_.__value_.__l.__data_);
    v9 = v81;
    if (!std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v81))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    if ((_DWORD)data_low == 0x7FFFFFFF)
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "SendInternal_block_invoke", (uint64_t)&v90);
      if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v46 = &v90;
      else
        v46 = (std::string *)v90.__r_.__value_.__r.__words[0];
      Ari::Log((Ari *)8, "(%s:%d) client(0x%x): Transactions exhausted", v45, v46, 400, v81);
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v90.__r_.__value_.__l.__data_);
      memset(__str, 170, sizeof(__str));
      snprintf(__str, 0x10uLL, "0x%x", v81);
      v47 = Ari::MsgDefById((Ari *)(v4 >> 26), (v4 >> 15) & 0x3FF);
      v48 = "Unknown";
      if (v47 && *(_QWORD *)(v47 + 48))
        v48 = *(const char **)(v47 + 48);
      std::string::basic_string[abi:ne180100]<0>(&v84, "");
      v49 = std::string::append(&v84, "All transaction IDs exhausted for msg(", 0x26uLL);
      v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      v85.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      v51 = strlen(v48);
      v52 = std::string::append(&v85, v48, v51);
      v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      v86.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v53;
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      v54 = std::string::append(&v86, "), for client(", 0xEuLL);
      v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      v87.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      v56 = strlen(__str);
      v57 = std::string::append(&v87, __str, v56);
      v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
      v90.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v58;
      v57->__r_.__value_.__l.__size_ = 0;
      v57->__r_.__value_.__r.__words[2] = 0;
      v57->__r_.__value_.__r.__words[0] = 0;
      v59 = std::string::append(&v90, ")", 1uLL);
      v60 = (std::string::value_type *)v59->__r_.__value_.__r.__words[0];
      size = v59->__r_.__value_.__l.__size_;
      v62 = v59->__r_.__value_.__r.__words[2];
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v90.__r_.__value_.__l.__data_);
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v87.__r_.__value_.__l.__data_);
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v86.__r_.__value_.__l.__data_);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v85.__r_.__value_.__l.__data_);
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v84.__r_.__value_.__l.__data_);
      v63 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 608);
      if ((v62 & 0x8000000000000000) != 0)
      {
        std::string::__init_copy_ctor_external(&v83, v60, size);
      }
      else
      {
        v83.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
        v83.__r_.__value_.__l.__size_ = size;
        v83.__r_.__value_.__r.__words[2] = v62;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, std::string *))(*(_QWORD *)v63 + 88))(v63, v81, 1, &v83);
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v83.__r_.__value_.__l.__data_);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = -87;
      if ((v62 & 0x8000000000000000) != 0)
        operator delete(v60);
      goto LABEL_84;
    }
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "SendInternal_block_invoke", (uint64_t)&v90);
    v2 = data_low | ((_DWORD)v81 << 8);
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v65 = &v90;
    else
      v65 = (std::string *)v90.__r_.__value_.__r.__words[0];
    Ari::Log((Ari *)4, "(%s:%d) Cid (0x%08x) allocate trx 0x%08x ctx = 0x%08x blk 0x%08lx", v64, v65, 412, v81, data_low, data_low | ((_DWORD)v81 << 8), *(_QWORD *)(a1 + 32));
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v90.__r_.__value_.__l.__data_);
LABEL_83:
    *(_DWORD *)(*(_QWORD *)(a1 + 48) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 8) & 0x1FFF7 | (8
                                                                                                 * *(unsigned __int8 *)(a1 + 77)) | (v2 << 17);
    if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    {
      v90.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
      v90.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
      Ari::ClientOutboundMessage::Create(*(Ari::ClientOutboundMessage **)(a1 + 48), (unsigned __int8 *)*(unsigned int *)(a1 + 68), *(_DWORD *)(a1 + 72), &v90);
      v69 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v9);
      if (!v69)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v70 = (uint64_t)(v69 + 3);
      v71 = (std::__shared_weak_count *)v90.__r_.__value_.__l.__size_;
      v82 = *(_OWORD *)&v90.__r_.__value_.__l.__data_;
      if (v90.__r_.__value_.__l.__size_)
      {
        v72 = (unint64_t *)(v90.__r_.__value_.__l.__size_ + 8);
        do
          v73 = __ldxr(v72);
        while (__stxr(v73 + 1, v72));
      }
      AriHost::TransactionMgr::trackSend(v70, (std::__shared_weak_count **)&v82);
      if (v71)
      {
        p_shared_owners = (unint64_t *)&v71->__shared_owners_;
        do
          v75 = __ldaxr(p_shared_owners);
        while (__stlxr(v75 - 1, p_shared_owners));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      v76 = (std::__shared_weak_count *)v90.__r_.__value_.__l.__size_;
      if (v90.__r_.__value_.__l.__size_)
      {
        v77 = (unint64_t *)(v90.__r_.__value_.__l.__size_ + 8);
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
    }
LABEL_84:
    v66 = v89;
    if (v89)
    {
      v67 = (unint64_t *)&v89->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    return;
  }
  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "SendInternal_block_invoke", (uint64_t)&v90);
  if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = &v90;
  else
    v27 = (std::string *)v90.__r_.__value_.__r.__words[0];
  Ari::Log((Ari *)8, "(%s:%d) clientCtxId(0x%08x) or cid(0x%08x) has not registered with AriHost", v26, v27, 384, *(unsigned int *)(a1 + 64), (v2 >> 8) & 0x7F);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = -1;
}

void sub_20E24B7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  void *v50;
  uint64_t v51;

  operator delete(v50);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v51 - 160);
  _Unwind_Resume(a1);
}

uint64_t *ResMgr<std::shared_ptr<AriHost::InboundMsgHandler>>::operator[](uint64_t a1, int a2)
{
  _BOOL8 v4;
  _BOOL4 v5;
  const char *v6;
  uint64_t *v7;
  int v9;

  v9 = a2;
  AriOsa::SWTrap(*(_BYTE *)(a1 + 104) == 0, (uint64_t)"valid == false", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0xA6);
  v4 = dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 96), 0xFFFFFFFFFFFFFFFFLL) != 0;
  AriOsa::SWTrap(v4, (uint64_t)"AriOsa::OsMutexTake(mtx) == ARI_RESULT_ERR", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0xA7);
  v5 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)a1, a2) == 0;
  ResMgr<std::shared_ptr<AriHost::InboundMsgHandler>>::sw_dbug_trap(a1, v5, v6);
  v7 = std::__hash_table<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1, a2, &v9)+ 4;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 96));
  AriOsa::SWTrap(0, (uint64_t)"AriOsa::OsMutexGive(mtx) == ARI_RESULT_ERR", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0xAC);
  return v7;
}

void AriHost::TransactionMgr::trackSend(uint64_t a1, std::__shared_weak_count **a2)
{
  uint64_t Instance;
  const char *v5;
  void **v6;
  int v7;
  void **v8;
  uint64_t v9;
  const char *v10;
  void **v11;
  void **v12;
  const char *v13;
  void **v14;
  int v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  void **v21;
  void **v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unsigned int shared_owners_high;
  int v27;
  uint64_t v28;
  std::__shared_weak_count **v29;
  int *v30;
  int v31;
  int v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t v45;
  int *v46;
  int v47;
  int v48;
  void **v49;
  const char *v50;
  void **v51;
  uint64_t v52;
  void **v53;
  int v54;
  void **v55;
  const char *v56;
  void **v57;
  uint64_t v58;
  void **v59;
  std::__shared_weak_count *v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  int v65;
  void **v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  void **v72;
  void **v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  _QWORD v78[2];
  void *__p[2];
  char v80;
  void *v81[2];
  char v82;

  Instance = AriHost::GetInstance((AriHost *)a1);
  if (!*(_DWORD *)(a1 + 144))
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "trackSend", (uint64_t)v81);
    if (v82 >= 0)
      v6 = v81;
    else
      v6 = (void **)v81[0];
    Ari::Log((Ari *)8, "(%s:%d) Fatal to send requests against transaction manager of cid 0x%x", v5, v6, 2119, 0);
    if (v82 < 0)
      operator delete(v81[0]);
    AriOsa::OsSleep((AriOsa *)0x7D0);
    AriOsa::SWTrap(1, (uint64_t)"1", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", (const char *)0x849);
  }
  if (*(_BYTE *)(a1 + 260))
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "trackSend", (uint64_t)v81);
    v7 = v82;
    v8 = (void **)v81[0];
    v9 = *(unsigned int *)(a1 + 144);
    GetBufDigest(*(AriMsg **)(*a2)->__shared_weak_owners_, 0, (const unsigned __int8 *)(*(_QWORD *)((*a2)->__shared_weak_owners_ + 8) - *(_QWORD *)(*a2)->__shared_weak_owners_), (uint64_t)__p);
    if (v7 >= 0)
      v11 = v81;
    else
      v11 = v8;
    if (v80 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    Ari::Log((Ari *)0x20, "(%s:%d) Aborting new request from cid 0x%x: %s", v10, v11, 2127, v9, v12);
    if (v80 < 0)
      operator delete(__p[0]);
    if (v82 < 0)
      operator delete(v81[0]);
LABEL_83:
    AriHost::CancelTrx((AriHost *)LODWORD((*a2)[1].__shared_owners_), HIDWORD((*a2)[1].__shared_owners_), -85);
    return;
  }
  if (*(_QWORD *)(a1 + 200) >= (unint64_t)*(unsigned int *)(a1 + 256))
  {
    LODWORD(v81[0]) = HIDWORD((*a2)[1].__shared_owners_);
    if (std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::find<unsigned int>(ARIHOST_GMID_DISALLOWED_DURING_STALL, (unsigned int *)v81))
    {
      shared_owners_high = HIDWORD((*a2)[1].__shared_owners_);
      if (shared_owners_high >> 26 != 51)
        goto LABEL_114;
      v27 = (shared_owners_high >> 15) & 0x3FF;
      if (v27 == 401)
      {
        v28 = 0;
      }
      else
      {
        v28 = 0;
        v46 = &dword_24C909274;
        do
        {
          ++v28;
          v47 = *v46;
          v46 += 14;
        }
        while (v47 != v27);
      }
      if (!ARIMSGDEF_GROUP51_ice_awds[56 * v28 + 8])
      {
        if (*(_BYTE *)(Instance + 392))
        {
          AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "trackSend", (uint64_t)v81);
          v54 = v82;
          v55 = (void **)v81[0];
          GetBufDigest(*(AriMsg **)(*a2)->__shared_weak_owners_, 0, (const unsigned __int8 *)(*(_QWORD *)((*a2)->__shared_weak_owners_ + 8)- *(_QWORD *)(*a2)->__shared_weak_owners_), (uint64_t)__p);
          if (v54 >= 0)
            v57 = v81;
          else
            v57 = v55;
          v58 = Instance + 400;
          v59 = (void **)__p[0];
          if (v80 >= 0)
            v59 = __p;
          if (*(char *)(Instance + 423) < 0)
            v58 = *(_QWORD *)(Instance + 400);
          Ari::Log((Ari *)0x10, "(%s:%d) REQ(%s) not allowed during stall [%s]", v56, v57, 2139, v59, v58);
          goto LABEL_78;
        }
      }
      else
      {
LABEL_114:
        if (*(_BYTE *)(Instance + 312))
        {
          AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "trackSend", (uint64_t)v81);
          v48 = v82;
          v49 = (void **)v81[0];
          GetBufDigest(*(AriMsg **)(*a2)->__shared_weak_owners_, 0, (const unsigned __int8 *)(*(_QWORD *)((*a2)->__shared_weak_owners_ + 8)- *(_QWORD *)(*a2)->__shared_weak_owners_), (uint64_t)__p);
          if (v48 >= 0)
            v51 = v81;
          else
            v51 = v49;
          v52 = Instance + 320;
          v53 = (void **)__p[0];
          if (v80 >= 0)
            v53 = __p;
          if (*(char *)(Instance + 343) < 0)
            v52 = *(_QWORD *)(Instance + 320);
          Ari::Log((Ari *)0x10, "(%s:%d) REQ(%s) not allowed during stall [%s]", v50, v51, 2149, v53, v52);
LABEL_78:
          if (v80 < 0)
            operator delete(__p[0]);
          if (v82 < 0)
            operator delete(v81[0]);
          std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int>(a1 + 216, (*a2)[1].__shared_owners_, (*a2)[1].__shared_owners_);
          goto LABEL_83;
        }
      }
    }
    v60 = a2[1];
    v78[0] = *a2;
    v78[1] = v60;
    if (v60)
    {
      p_shared_owners = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldxr(p_shared_owners);
      while (__stxr(v62 + 1, p_shared_owners));
    }
    AriHost::TransactionMgr::blockMessage(a1, v78);
    if (v60)
    {
      v63 = (unint64_t *)&v60->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "trackSend", (uint64_t)v81);
    v65 = v82;
    v66 = (void **)v81[0];
    v67 = *(unsigned int *)(a1 + 144);
    v68 = *(_QWORD *)(a1 + 200);
    v69 = *(unsigned int *)(a1 + 256);
    v70 = *(_QWORD *)(a1 + 168);
    GetBufDigest(*(AriMsg **)(*a2)->__shared_weak_owners_, 0, (const unsigned __int8 *)(*(_QWORD *)((*a2)->__shared_weak_owners_ + 8) - *(_QWORD *)(*a2)->__shared_weak_owners_), (uint64_t)__p);
    if (v65 >= 0)
      v72 = v81;
    else
      v72 = v66;
    if (v80 >= 0)
      v73 = __p;
    else
      v73 = (void **)__p[0];
    Ari::Log((Ari *)0x20, "(%s:%d) Blocking for cid 0x%x (cur %zu max %u blocked %zu) %s", v71, v72, 2158, v67, v68, v69, v70, v73);
    if (v80 < 0)
      operator delete(__p[0]);
    if (v82 < 0)
      operator delete(v81[0]);
    return;
  }
  if ((std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int>(a1 + 176, (*a2)[1].__shared_owners_, (*a2)[1].__shared_owners_) & 1) == 0)
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "trackSend", (uint64_t)v81);
    v14 = (void **)v81[0];
    if (v82 >= 0)
      v14 = v81;
    Ari::Log((Ari *)4, "(%s:%d) Already tracking 0x%x.  Likely due to reuse of transaction ID.", v13, v14, 2166, LODWORD((*a2)[1].__shared_owners_));
    if (v82 < 0)
      operator delete(v81[0]);
  }
  if (*(_QWORD *)(a1 + 200) >= 2uLL)
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "trackSend", (uint64_t)v81);
    v15 = v82;
    v16 = (void **)v81[0];
    v17 = *(unsigned int *)(a1 + 144);
    v18 = *(_QWORD *)(a1 + 200);
    v19 = *(unsigned int *)(a1 + 256);
    GetBufDigest(*(AriMsg **)(*a2)->__shared_weak_owners_, 0, (const unsigned __int8 *)(*(_QWORD *)((*a2)->__shared_weak_owners_ + 8) - *(_QWORD *)(*a2)->__shared_weak_owners_), (uint64_t)__p);
    if (v15 >= 0)
      v21 = v81;
    else
      v21 = v16;
    if (v80 >= 0)
      v22 = __p;
    else
      v22 = (void **)__p[0];
    Ari::Log((Ari *)4, "(%s:%d) Sending for cid 0x%x (cur %zu max %u) %s", v20, v21, 2169, v17, v18, v19, v22);
    if (v80 < 0)
      operator delete(__p[0]);
    if (v82 < 0)
      operator delete(v81[0]);
  }
  v23 = HIDWORD((*a2)[1].__shared_owners_);
  if (v23 >> 26 != 51)
  {
    v29 = a2 + 1;
    goto LABEL_47;
  }
  v24 = (v23 >> 15) & 0x3FF;
  if (v24 == 401)
  {
    v25 = 0;
  }
  else
  {
    v25 = 0;
    v30 = &dword_24C909274;
    do
    {
      ++v25;
      v31 = *v30;
      v30 += 14;
    }
    while (v31 != v24);
  }
  v32 = ARIMSGDEF_GROUP51_ice_awds[56 * v25 + 8];
  v29 = a2 + 1;
  if (v32)
  {
LABEL_47:
    v33 = Instance + 264;
    v34 = *v29;
    v74 = *a2;
    v75 = v34;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v37 = Ari::ClientWorkQueue::add(Instance + 264, (uint64_t *)&v74);
    v38 = v75;
    if (v75)
    {
      v39 = (unint64_t *)&v75->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      goto LABEL_53;
    }
    goto LABEL_62;
  }
  v33 = Instance + 344;
  v41 = *v29;
  v76 = *a2;
  v77 = v41;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  v37 = Ari::ClientWorkQueue::add(Instance + 344, (uint64_t *)&v76);
  v38 = v77;
  if (v77)
  {
    v44 = (unint64_t *)&v77->__shared_owners_;
    do
      v40 = __ldaxr(v44);
    while (__stlxr(v40 - 1, v44));
LABEL_53:
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
LABEL_62:
  v45 = *(_QWORD *)(Instance + 696);
  if (!*(_BYTE *)(v33 + 48))
    ++v45;
  *(_QWORD *)(Instance + 696) = v45;
  if (v37)
    goto LABEL_83;
}

void sub_20E24C100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 81) < 0)
    operator delete(*(void **)(v28 - 104));
  _Unwind_Resume(exception_object);
}

uint64_t AriHost::StartStream(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6)
{
  return AriHost::SendInternal(a1, a2, a3, a4, a5, a6, 0);
}

void AriHost::EndStream(AriHost *this)
{
  int v1;
  NSObject **Instance;
  NSObject *v3;
  _QWORD v4[5];
  int v5;

  v1 = (int)this;
  Instance = (NSObject **)AriHost::GetInstance(this);
  v3 = *Instance;
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 0x40000000;
  v4[2] = ___ZN7AriHost9EndStreamEi_block_invoke;
  v4[3] = &__block_descriptor_tmp_49;
  v5 = v1;
  v4[4] = Instance;
  dispatch_async(v3, v4);
}

void ___ZN7AriHost9EndStreamEi_block_invoke(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  void **v6;
  uint64_t *v7;
  const char *v8;
  _QWORD *v9;
  const char *v10;
  void **v11;
  const char *v12;
  void **v13;
  void *__p[2];
  char v15;

  v2 = *(_DWORD *)(a1 + 40);
  v3 = (v2 >> 8) & 0x7F;
  if (!ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc(*(_QWORD *)(a1 + 32) + 424, (v2 >> 8) & 0x7F))
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "EndStream_block_invoke", (uint64_t)__p);
    if (v15 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Attempt to release transaction on STREAM for unregistered client, ctx 0x%04x", v10, v11, 481, *(unsigned int *)(a1 + 40));
    goto LABEL_19;
  }
  v4 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)(*(_QWORD *)(a1 + 32) + 8), (v2 >> 8) & 0x7F);
  if (!v4)
    goto LABEL_23;
  if (!ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc((uint64_t)(v4 + 3), v2))
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "EndStream_block_invoke", (uint64_t)__p);
    if (v15 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Attempt to release non-existent STREAM transaction 0x%04x", v12, v13, 499, *(unsigned int *)(a1 + 40));
    goto LABEL_19;
  }
  v5 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)(*(_QWORD *)(a1 + 32) + 8), v3);
  if (!v5)
LABEL_23:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (!*(_BYTE *)(*ResMgr<std::shared_ptr<AriHost::InboundMsgHandler>>::operator[]((uint64_t)(v5 + 3), v2)+ 16))
  {
    AriHost::releaseTrx_nl(*(AriHost **)(a1 + 32), *(unsigned int *)(a1 + 40), 0);
    return;
  }
  v6 = __p;
  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "EndStream_block_invoke", (uint64_t)__p);
  if (v15 < 0)
    v6 = (void **)__p[0];
  v7 = ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](*(_QWORD *)(a1 + 32) + 424, v3);
  v9 = (_QWORD *)*v7;
  if (*(char *)(*v7 + 23) < 0)
    v9 = (_QWORD *)*v9;
  Ari::Log((Ari *)8, "(%s:%d) Attempt to release a STREAM transaction associated with an automatic transaction (%s cid 0x%x ctx 0x%x)", v8, v6, 490, v9, v3, *(unsigned int *)(a1 + 40));
LABEL_19:
  if (v15 < 0)
    operator delete(__p[0]);
}

void sub_20E24C3E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AriHost::releaseTrx_nl(AriHost *this, uint64_t a2, int a3)
{
  uint64_t v4;
  char *v7;
  _QWORD *v8;
  uint64_t *v9;
  void **v10;
  uint64_t *v11;
  const char *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t *v15;
  dispatch_semaphore_t *v16;
  NSObject *v17;
  dispatch_semaphore_t *v18;
  _BOOL8 v19;
  unsigned int *v20;
  uint64_t v21;
  const char *v22;
  void **v23;
  const char *v24;
  void **v25;
  const char *v26;
  void **v27;
  NSObject *v28;
  _BOOL8 v29;
  int v30;
  const char *v31;
  uint64_t *v32;
  uint64_t *v33;
  void *__p[2];
  char v35;

  v4 = a2;
  if ((_BYTE)a2)
  {
    v7 = (char *)this + 424;
    if (ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc((uint64_t)this + 424, (a2 >> 8) & 0x7F))
    {
      v8 = (_QWORD *)((char *)this + 8);
      v9 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>(v8, (a2 >> 8) & 0x7F);
      if (!v9)
        goto LABEL_33;
      if (ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc((uint64_t)(v9 + 3), v4))
      {
        v10 = __p;
        AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "releaseTrx_nl", (uint64_t)__p);
        if (v35 < 0)
          v10 = (void **)__p[0];
        v11 = ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[]((uint64_t)v7, (a2 >> 8) & 0x7F);
        v13 = (_QWORD *)*v11;
        if (*(char *)(*v11 + 23) < 0)
          v13 = (_QWORD *)*v13;
        Ari::Log((Ari *)4, "(%s:%d) %s free ctx 0x%04x", v12, v10, 535, v13, a2);
        if (v35 < 0)
          operator delete(__p[0]);
        v14 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>(v8, (a2 >> 8) & 0x7F);
        v15 = v14;
        if (a3)
        {
          if (!v14)
            goto LABEL_33;
          AriOsa::SWTrap(*((_BYTE *)v14 + 128) == 0, (uint64_t)"valid == false", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0xF7);
          v17 = v15[15];
          v16 = (dispatch_semaphore_t *)(v15 + 15);
          v18 = v16 - 12;
          v19 = dispatch_semaphore_wait(v17, 0xFFFFFFFFFFFFFFFFLL) != 0;
          AriOsa::SWTrap(v19, (uint64_t)"AriOsa::OsMutexTake(mtx) == ARI_RESULT_ERR", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0xF8);
          v20 = (unsigned int *)(v16 - 7);
          v21 = (uint64_t)(v16 - 3);
        }
        else
        {
          if (!v14)
            goto LABEL_33;
          AriOsa::SWTrap(*((_BYTE *)v14 + 128) == 0, (uint64_t)"valid == false", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0xEB);
          v28 = v15[15];
          v16 = (dispatch_semaphore_t *)(v15 + 15);
          v18 = v16 - 12;
          v29 = dispatch_semaphore_wait(v28, 0xFFFFFFFFFFFFFFFFLL) != 0;
          AriOsa::SWTrap(v29, (uint64_t)"AriOsa::OsMutexTake(mtx) == ARI_RESULT_ERR", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0xEC);
          v20 = (unsigned int *)(v16 - 7);
          v21 = (uint64_t)(v16 - 6);
        }
        v30 = IDMgr::_free(v20, v4, v21);
        ResMgr<std::shared_ptr<AriHost::InboundMsgHandler>>::sw_dbug_trap((uint64_t)v18, v30 ^ 1, v31);
        v32 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>(v18, v4);
        std::__hash_table<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>>>::remove((uint64_t)__p, v18, v32);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,void *>>>>::reset[abi:ne180100]((uint64_t)__p);
        dispatch_semaphore_signal(*v16);
        v33 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>(v8, (a2 >> 8) & 0x7F);
        if (v33)
        {
          AriHost::TransactionMgr::trackReceive((AriHost::TransactionMgr *)(v33 + 3), a2);
          return;
        }
LABEL_33:
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "releaseTrx_nl", (uint64_t)__p);
      if (v35 >= 0)
        v27 = __p;
      else
        v27 = (void **)__p[0];
      Ari::Log((Ari *)8, "(%s:%d) Attempt to release non-existent transaction 0x%04x", v26, v27, 548, a2);
    }
    else
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "releaseTrx_nl", (uint64_t)__p);
      if (v35 >= 0)
        v25 = __p;
      else
        v25 = (void **)__p[0];
      Ari::Log((Ari *)0x20, "(%s:%d) Attempt to release transaction for unregistered client, ctx 0x%04x.  Ignoring...", v24, v25, 529, a2);
    }
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "releaseTrx_nl", (uint64_t)__p);
    if (v35 >= 0)
      v23 = __p;
    else
      v23 = (void **)__p[0];
    Ari::Log((Ari *)4, "(%s:%d) Attempt to release ctx 0x%04x.  Ignoring...", v22, v23, 522, a2);
  }
  if (v35 < 0)
    operator delete(__p[0]);
}

void sub_20E24C734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AriHost::ExitTrx(AriHost *this, const AriMsg *a2)
{
  _BOOL8 v2;
  int v3;

  v3 = -1431655766;
  v2 = AriMsg::extractCtx(this, &v3) != 0;
  AriOsa::SWTrap(v2, (uint64_t)"response.extractCtx(&ctx) != ARI_RESULT_OK", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", (const char *)0x1FB);
  AriHost::ExitTrx((AriHost *)v3);
}

void AriHost::ExitTrx(AriHost *this)
{
  const char *v2;
  void **v3;
  void *__p[2];
  char v5;

  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "ExitTrx", (uint64_t)__p);
  if (v5 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  Ari::Log((Ari *)0x10, "(%s:%d) ExitTrx() is deprecated.  Attempt to exit transaction ID 0x%04x.  Ignoring...", v2, v3, 514, this);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20E24C828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AriHost::TransactionMgr::trackReceive(AriHost::TransactionMgr *this, uint64_t a2)
{
  char *v4;
  __int128 v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  void **v9;
  const char *v10;
  void **v11;
  void *v12;
  AriHost *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  void **v21;
  void **v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  const char *v28;
  void **v29;
  const char *v30;
  void **v31;
  const char *v32;
  void **v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  _QWORD *v38;
  int v39;
  void **v40;
  const char *v41;
  void **v42;
  void *p_p;
  AriHost *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];
  void *__dst[2];
  char v49;
  void *v50[2];
  char v51;
  void *__p;
  unint64_t v53;
  char v54;
  void *v55[2];
  char v56;
  void *v57[2];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  void *v61[2];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  unint64_t v73;

  v4 = (char *)this + 176;
  if (std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)this + 22, a2))
  {
LABEL_2:
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__erase_unique<int>(v4, a2);
    goto LABEL_3;
  }
  v4 = (char *)this + 216;
  if (std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)this + 27, a2))
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "trackReceive", (uint64_t)v57);
    if ((SBYTE7(v58) & 0x80u) == 0)
      v31 = v57;
    else
      v31 = (void **)v57[0];
    Ari::Log((Ari *)0x20, "(%s:%d) Found received trx 0x%x on cancelled list", v30, v31, 2199, a2);
    if (SBYTE7(v58) < 0)
      operator delete(v57[0]);
    goto LABEL_2;
  }
  if (!*((_BYTE *)this + 260))
  {
    v73 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v37 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v37 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v71 = v37;
    v72 = v37;
    v69 = v37;
    v70 = v37;
    v67 = v37;
    v68 = v37;
    v65 = v37;
    v66 = v37;
    v63 = v37;
    v64 = v37;
    *(_OWORD *)v61 = v37;
    v62 = v37;
    v59 = v37;
    v60 = v37;
    *(_OWORD *)v57 = v37;
    v58 = v37;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v57);
    v38 = v57[0];
    *(_DWORD *)((char *)&v57[1] + *((_QWORD *)v57[0] - 3)) |= 0x200u;
    *(_DWORD *)((char *)&v57[1] + *(v38 - 3)) = *(_DWORD *)((_BYTE *)&v57[1] + *(v38 - 3)) & 0xFFFFFFB5 | 8;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Tracking receipt of unrecognized transaction ", 45);
    std::ostream::operator<<();
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "trackReceive", (uint64_t)v55);
    v39 = v56;
    v40 = (void **)v55[0];
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(&__p, (uint64_t)&v57[1]);
    v42 = v55;
    if (v39 < 0)
      v42 = v40;
    if (v54 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    Ari::Log((Ari *)8, "(%s:%d) %s", v41, v42, 2206, p_p);
    if (v54 < 0)
      operator delete(__p);
    if (v56 < 0)
      operator delete(v55[0]);
    v45 = *(_QWORD *)(AriHost::GetInstance(v44) + 608);
    v46 = *((unsigned int *)this + 36);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(v50, (uint64_t)&v57[1]);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v45 + 88))(v45, v46, 4, v50);
    if (v51 < 0)
      operator delete(v50[0]);
    v57[0] = *(void **)MEMORY[0x24BEDB800];
    *(void **)((char *)v57 + *((_QWORD *)v57[0] - 3)) = *(void **)(MEMORY[0x24BEDB800] + 24);
    v57[1] = (void *)(MEMORY[0x24BEDB848] + 16);
    if (SHIBYTE(v62) < 0)
      operator delete(v61[1]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x212BB9B00](&v64);
  }
LABEL_3:
  if (*((_DWORD *)this + 36) != ((a2 >> 8) & 0x7F))
  {
    v73 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v71 = v5;
    v72 = v5;
    v69 = v5;
    v70 = v5;
    v67 = v5;
    v68 = v5;
    v65 = v5;
    v66 = v5;
    v63 = v5;
    v64 = v5;
    *(_OWORD *)v61 = v5;
    v62 = v5;
    v59 = v5;
    v60 = v5;
    *(_OWORD *)v57 = v5;
    v58 = v5;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v57);
    v6 = v57[0];
    *(_DWORD *)((char *)&v57[1] + *((_QWORD *)v57[0] - 3)) |= 0x200u;
    *(_DWORD *)((char *)&v57[1] + *(v6 - 3)) = *(_DWORD *)((_BYTE *)&v57[1] + *(v6 - 3)) & 0xFFFFFFB5 | 8;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Received CID doesn't match expected CID. Received ", 50);
    v7 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" expected ", 10);
    std::ostream::operator<<();
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "trackReceive", (uint64_t)v55);
    v8 = v56;
    v9 = (void **)v55[0];
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(&__p, (uint64_t)&v57[1]);
    v11 = v55;
    if (v8 < 0)
      v11 = v9;
    if (v54 >= 0)
      v12 = &__p;
    else
      v12 = __p;
    Ari::Log((Ari *)8, "(%s:%d) %s", v10, v11, 2216, v12);
    if (v54 < 0)
      operator delete(__p);
    if (v56 < 0)
      operator delete(v55[0]);
    v14 = *(_QWORD *)(AriHost::GetInstance(v13) + 608);
    v15 = *((unsigned int *)this + 36);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__dst, (uint64_t)&v57[1]);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v14 + 88))(v14, v15, 2, __dst);
    if (v49 < 0)
      operator delete(__dst[0]);
    v57[0] = *(void **)MEMORY[0x24BEDB800];
    *(void **)((char *)v57 + *((_QWORD *)v57[0] - 3)) = *(void **)(MEMORY[0x24BEDB800] + 24);
    v57[1] = (void *)(MEMORY[0x24BEDB848] + 16);
    if (SHIBYTE(v62) < 0)
      operator delete(v61[1]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x212BB9B00](&v64);
  }
  if (*((_QWORD *)this + 25) >= (unint64_t)*((unsigned int *)this + 64))
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "trackReceive", (uint64_t)v57);
    if ((SBYTE7(v58) & 0x80u) == 0)
      v29 = v57;
    else
      v29 = (void **)v57[0];
    Ari::Log((Ari *)0x20, "(%s:%d) Found max outstanding count after releaseTrx ctx 0x%x (cur %zu max %u) for CID 0x%x", v28, v29, 2236, a2, *((_QWORD *)this + 25), *((unsigned int *)this + 64), *((unsigned int *)this + 36));
    if (SBYTE7(v58) < 0)
      operator delete(v57[0]);
  }
  else
  {
    __p = (void *)0xAAAAAAAAAAAAAAAALL;
    v53 = 0xAAAAAAAAAAAAAAAALL;
    AriHost::TransactionMgr::unblockMessage(this, &__p);
    if (__p)
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "trackReceive", (uint64_t)v57);
      v16 = SBYTE7(v58);
      v17 = (void **)v57[0];
      v18 = *((_QWORD *)this + 25);
      v19 = *((unsigned int *)this + 64);
      GetBufDigest(**((AriMsg ***)__p + 2), 0, (const unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)__p + 2) + 8) - **((_QWORD **)__p + 2)), (uint64_t)v55);
      v21 = v57;
      if (v16 < 0)
        v21 = v17;
      if (v56 >= 0)
        v22 = v55;
      else
        v22 = (void **)v55[0];
      Ari::Log((Ari *)0x20, "(%s:%d) Unblocking for ctx 0x%x (cur %zu max %u) %s", v20, v21, 2225, a2, v18, v19, v22);
      if (v56 < 0)
        operator delete(v55[0]);
      if (SBYTE7(v58) < 0)
        operator delete(v57[0]);
      v23 = (std::__shared_weak_count *)v53;
      v47[0] = __p;
      v47[1] = v53;
      if (v53)
      {
        v24 = (unint64_t *)(v53 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      AriHost::TransactionMgr::trackSend(this, v47);
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
    else if (*((_QWORD *)this + 25))
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "trackReceive", (uint64_t)v57);
      v33 = (SBYTE7(v58) & 0x80u) == 0 ? v57 : (void **)v57[0];
      Ari::Log((Ari *)4, "(%s:%d) No blocked message for ctx 0x%x (cur %zu max %u)", v32, v33, 2230, a2, *((_QWORD *)this + 25), *((unsigned int *)this + 64));
      if (SBYTE7(v58) < 0)
        operator delete(v57[0]);
    }
    v34 = (std::__shared_weak_count *)v53;
    if (v53)
    {
      v35 = (unint64_t *)(v53 + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
  }
}

void sub_20E24CF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a28 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void AriHost::safeReleaseTrx_nl(uint64_t a1, AriMsg ***a2)
{
  AriMsg *BufHeader;
  unint64_t v5;
  uint64_t *v6;
  AriMsg *v7;
  Ari *v8;
  void **v9;
  uint64_t *v10;
  const char *v11;
  void **v12;
  void **v13;
  uint64_t *v14;
  const char *v15;
  void **v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint8x8_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  void **v25;
  uint64_t *v26;
  const char *v27;
  void **v28;
  const char *v29;
  void **v30;
  AriHost *v31;
  uint64_t v32;
  int v33;
  uint64_t **v34;
  uint64_t *i;
  unint64_t v36;
  float v37;
  float v38;
  _BOOL8 v39;
  unint64_t v40;
  unint64_t v41;
  int8x8_t prime;
  void **v43;
  uint64_t *v44;
  const char *v45;
  void **v46;
  void *v47;
  void *v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint8x8_t v52;
  unint64_t v53;
  uint8x8_t v54;
  uint64_t v55;
  uint64_t *v56;
  const char *v57;
  const char *v58;
  void **v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  uint8x8_t v63;
  _QWORD *v64;
  unint64_t *v65;
  unint64_t v66;
  void **v67;
  uint64_t *v68;
  const char *v69;
  void **v70;
  void *v71;
  unsigned int v72;
  void *__p[2];
  char v74;
  unsigned int v75;
  void *v76[2];
  int64_t v77;

  BufHeader = AriMsg::GetBufHeader(**a2, (const unsigned __int8 *)((*a2)[1] - **a2));
  if (BufHeader)
    v5 = (unint64_t)*((unsigned int *)BufHeader + 2) >> 17;
  else
    v5 = 0x8000;
  v6 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)(a1 + 8), (v5 >> 8) & 0x7F);
  if (!v6)
    goto LABEL_156;
  if (!*(_BYTE *)(*ResMgr<std::shared_ptr<AriHost::InboundMsgHandler>>::operator[]((uint64_t)(v6 + 3), v5)+ 16))return;
  v7 = AriMsg::GetBufHeader(**a2, (const unsigned __int8 *)((*a2)[1] - **a2));
  if (v7)
    v8 = (Ari *)((*(_DWORD *)((_BYTE *)v7 + 3) & 0x1F800 | ((unsigned __int16)*((_DWORD *)v7 + 2) >> 6)) << 15);
  else
    v8 = 0;
  v9 = (void **)(a1 + 48);
  v10 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)(a1 + 48), v5);
  v75 = 0;
  if (!SdkMsgIsFilerInitiator(**a2, *((_DWORD *)*a2 + 2) - **a2, &v75))
  {
    LODWORD(v76[0]) = (_DWORD)v8;
    if (std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::find<unsigned int>(ARI_FILER_WRITE_TERMINATOR_RESPONSES, (unsigned int *)v76))
    {
      if (!v10)
      {
        AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "safeReleaseTrx_nl", (uint64_t)v76);
        if (v77 >= 0)
          v30 = v76;
        else
          v30 = (void **)v76[0];
        Ari::Log((Ari *)8, "(%s:%d) File write stream completed, but no active transfer found! ctx 0x%x", v29, v30, 605, v5);
        if (SHIBYTE(v77) < 0)
          operator delete(v76[0]);
        goto LABEL_48;
      }
      v13 = v76;
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "safeReleaseTrx_nl", (uint64_t)v76);
      if (v77 < 0)
        v13 = (void **)v76[0];
      v14 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)(a1 + 48), v5);
      if (!v14)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      AriHost::FilerTransfer::getName((AriHost::FilerTransfer *)(v14 + 3), __p);
      if (v74 >= 0)
        v16 = __p;
      else
        v16 = (void **)__p[0];
      Ari::Log((Ari *)0x20, "(%s:%d) filer transfer complete: %s", v15, v13, 600, v16);
LABEL_24:
      if (v74 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v77) < 0)
        operator delete(v76[0]);
      std::__hash_table<std::__hash_value_type<int,AriHost::FilerTransfer>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::FilerTransfer>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::FilerTransfer>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::FilerTransfer>>>::__erase_unique<int>((_QWORD *)(a1 + 48), v5);
LABEL_48:
      v31 = (AriHost *)a1;
      v32 = v5;
      v33 = 0;
LABEL_49:
      AriHost::releaseTrx_nl(v31, v32, v33);
      return;
    }
    if (!v10)
    {
      v76[0] = (void *)0xAAAAAAAAAAAAAAAALL;
      v33 = (_DWORD)v8 == 67600384
         && !ARI_AriNACK_Extract((const unsigned __int8 *)**a2, *((_DWORD *)*a2 + 2) - **a2, (char *)v76)&& HIDWORD(v76[0]) == -84;
      v31 = (AriHost *)a1;
      v32 = v5;
      goto LABEL_49;
    }
    v72 = 0;
    if (!SdkMsgIsFilerReadStream(**a2, *((_DWORD *)*a2 + 2) - **a2, &v72))
    {
      if ((_DWORD)v8 == 67436544)
        return;
      v43 = v76;
      if ((_DWORD)v8 == 67600384)
      {
        AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "safeReleaseTrx_nl", (uint64_t)v76);
        if (v77 < 0)
          v43 = (void **)v76[0];
        v44 = std::unordered_map<int,AriHost::FilerTransfer>::at((_QWORD *)(a1 + 48), v5);
        AriHost::FilerTransfer::getName((AriHost::FilerTransfer *)v44, __p);
        if (v74 >= 0)
          v46 = __p;
        else
          v46 = (void **)__p[0];
        Ari::Log((Ari *)0x10, "(%s:%d) NACK received during Filer transfer %s.  Discarding transfer...", v45, v43, 633, v46);
      }
      else
      {
        AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "safeReleaseTrx_nl", (uint64_t)v76);
        if (v77 < 0)
          v43 = (void **)v76[0];
        v56 = std::unordered_map<int,AriHost::FilerTransfer>::at((_QWORD *)(a1 + 48), v5);
        AriHost::FilerTransfer::getName((AriHost::FilerTransfer *)v56, __p);
        v57 = Ari::MsgNameById(v8);
        v59 = (void **)__p[0];
        if (v74 >= 0)
          v59 = __p;
        Ari::Log((Ari *)8, "(%s:%d) ctx 0x%x expected to be Filer transfer %s, but is a non-Filer response message [%s].  Discarding transfer...", v58, v43, 640, v5, v59, v57);
      }
      goto LABEL_24;
    }
    v23 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)(a1 + 48), v5);
    if (v23)
    {
      AriHost::FilerTransfer::updateBytesReceived((AriHost::FilerTransfer *)(v23 + 3), v72);
      v24 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)(a1 + 48), v5);
      if (v24)
      {
        if (v24[4] > 0)
          return;
        v25 = v76;
        AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "safeReleaseTrx_nl", (uint64_t)v76);
        if (v77 < 0)
          v25 = (void **)v76[0];
        v26 = std::unordered_map<int,AriHost::FilerTransfer>::at((_QWORD *)(a1 + 48), v5);
        AriHost::FilerTransfer::getName((AriHost::FilerTransfer *)v26, __p);
        if (v74 >= 0)
          v28 = __p;
        else
          v28 = (void **)__p[0];
        Ari::Log((Ari *)0x20, "(%s:%d) filer transfer complete: %s", v27, v25, 625, v28);
        goto LABEL_24;
      }
    }
LABEL_156:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  if (!v10)
  {
    v17 = (unint64_t *)(a1 + 64);
    v77 = 0xAAAAAAAAAAAAAA01;
    v18 = (unint64_t *)operator new(0x30uLL);
    v76[0] = v18;
    v76[1] = (void *)(a1 + 64);
    *((_DWORD *)v18 + 4) = v5;
    v19 = v75;
    *((_DWORD *)v18 + 6) = (_DWORD)v8;
    *((_DWORD *)v18 + 7) = v5;
    v18[4] = v19;
    v18[5] = v19;
    *v18 = 0;
    v18[1] = v5;
    v20 = *(_QWORD *)(a1 + 56);
    if (v20)
    {
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        v22 = v5;
        if (v20 <= v5)
          v22 = v5 % v20;
      }
      else
      {
        v22 = ((_DWORD)v20 - 1) & v5;
      }
      v34 = (uint64_t **)*((_QWORD *)*v9 + v22);
      if (v34)
      {
        for (i = *v34; i; i = (uint64_t *)*i)
        {
          v36 = i[1];
          if (v36 == v5)
          {
            if (*((_DWORD *)i + 4) == (_DWORD)v5)
              goto LABEL_135;
          }
          else
          {
            if (v21.u32[0] > 1uLL)
            {
              if (v36 >= v20)
                v36 %= v20;
            }
            else
            {
              v36 &= v20 - 1;
            }
            if (v36 != v22)
              break;
          }
        }
      }
    }
    v37 = (float)(unint64_t)(*(_QWORD *)(a1 + 72) + 1);
    v38 = *(float *)(a1 + 80);
    if (!v20 || (float)(v38 * (float)v20) < v37)
    {
      v39 = 1;
      if (v20 >= 3)
        v39 = (v20 & (v20 - 1)) != 0;
      v40 = v39 | (2 * v20);
      v41 = vcvtps_u32_f32(v37 / v38);
      if (v40 <= v41)
        prime = (int8x8_t)v41;
      else
        prime = (int8x8_t)v40;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        v20 = *(_QWORD *)(a1 + 56);
      }
      if (*(_QWORD *)&prime > v20)
        goto LABEL_162;
      if (*(_QWORD *)&prime >= v20)
        goto LABEL_121;
      v53 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 72) / *(float *)(a1 + 80));
      if (v20 < 3 || (v54 = (uint8x8_t)vcnt_s8((int8x8_t)v20), v54.i16[0] = vaddlv_u8(v54), v54.u32[0] > 1uLL))
      {
        v53 = std::__next_prime(v53);
      }
      else
      {
        v55 = 1 << -(char)__clz(v53 - 1);
        if (v53 >= 2)
          v53 = v55;
      }
      if (*(_QWORD *)&prime <= v53)
        prime = (int8x8_t)v53;
      if (*(_QWORD *)&prime >= v20)
      {
        v20 = *(_QWORD *)(a1 + 56);
        goto LABEL_121;
      }
      if (prime)
      {
LABEL_162:
        if (*(_QWORD *)&prime >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v47 = operator new(8 * *(_QWORD *)&prime);
        v48 = *v9;
        *v9 = v47;
        if (v48)
          operator delete(v48);
        v49 = 0;
        *(int8x8_t *)(a1 + 56) = prime;
        do
          *((_QWORD *)*v9 + v49++) = 0;
        while (*(_QWORD *)&prime != v49);
        v50 = (_QWORD *)*v17;
        if (*v17)
        {
          v51 = v50[1];
          v52 = (uint8x8_t)vcnt_s8(prime);
          v52.i16[0] = vaddlv_u8(v52);
          if (v52.u32[0] > 1uLL)
          {
            if (v51 >= *(_QWORD *)&prime)
              v51 %= *(_QWORD *)&prime;
          }
          else
          {
            v51 &= *(_QWORD *)&prime - 1;
          }
          *((_QWORD *)*v9 + v51) = v17;
          v60 = (_QWORD *)*v50;
          if (*v50)
          {
            do
            {
              v61 = v60[1];
              if (v52.u32[0] > 1uLL)
              {
                if (v61 >= *(_QWORD *)&prime)
                  v61 %= *(_QWORD *)&prime;
              }
              else
              {
                v61 &= *(_QWORD *)&prime - 1;
              }
              if (v61 != v51)
              {
                if (!*((_QWORD *)*v9 + v61))
                {
                  *((_QWORD *)*v9 + v61) = v50;
                  goto LABEL_117;
                }
                *v50 = *v60;
                *v60 = **((_QWORD **)*v9 + v61);
                **((_QWORD **)*v9 + v61) = v60;
                v60 = v50;
              }
              v61 = v51;
LABEL_117:
              v50 = v60;
              v60 = (_QWORD *)*v60;
              v51 = v61;
            }
            while (v60);
          }
        }
        v20 = (unint64_t)prime;
      }
      else
      {
        v71 = *v9;
        *v9 = 0;
        if (v71)
          operator delete(v71);
        v20 = 0;
        *(_QWORD *)(a1 + 56) = 0;
      }
    }
LABEL_121:
    v62 = v18[1];
    v63 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
    v63.i16[0] = vaddlv_u8(v63);
    if (v63.u32[0] > 1uLL)
    {
      if (v62 >= v20)
        v62 %= v20;
    }
    else
    {
      v62 &= v20 - 1;
    }
    v64 = *v9;
    v65 = (unint64_t *)*((_QWORD *)*v9 + v62);
    if (v65)
    {
      *v18 = *v65;
    }
    else
    {
      *v18 = *v17;
      *v17 = (unint64_t)v18;
      v64[v62] = v17;
      if (!*v18)
        goto LABEL_134;
      v66 = *(_QWORD *)(*v18 + 8);
      if (v63.u32[0] > 1uLL)
      {
        if (v66 >= v20)
          v66 %= v20;
      }
      else
      {
        v66 &= v20 - 1;
      }
      v65 = (unint64_t *)((char *)*v9 + 8 * v66);
    }
    *v65 = (unint64_t)v18;
LABEL_134:
    ++*(_QWORD *)(a1 + 72);
    v76[0] = 0;
LABEL_135:
    v67 = v76;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<int,AriHost::FilerTransfer>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,AriHost::FilerTransfer>,void *>>>>::reset[abi:ne180100]((uint64_t *)v76);
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "safeReleaseTrx_nl", (uint64_t)v76);
    if (v77 < 0)
      v67 = (void **)v76[0];
    v68 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>(v9, v5);
    if (!v68)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    AriHost::FilerTransfer::getName((AriHost::FilerTransfer *)(v68 + 3), __p);
    if (v74 >= 0)
      v70 = __p;
    else
      v70 = (void **)__p[0];
    Ari::Log((Ari *)0x20, "(%s:%d) new filer transfer: %s", v69, v67, 589, v70);
    if (v74 < 0)
      operator delete(__p[0]);
    goto LABEL_143;
  }
  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "safeReleaseTrx_nl", (uint64_t)v76);
  if (v77 >= 0)
    v12 = v76;
  else
    v12 = (void **)v76[0];
  Ari::Log((Ari *)8, "(%s:%d) Filer initiator response detected but filer ctx 0x%x is already in flight!", v11, v12, 593, v5);
LABEL_143:
  if (SHIBYTE(v77) < 0)
    operator delete(v76[0]);
}

void sub_20E24D900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

uint64_t *std::unordered_map<int,AriHost::FilerTransfer>::at(_QWORD *a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>(a1, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return v2 + 3;
}

uint64_t AriHost::FilerTransfer::getName@<X0>(AriHost::FilerTransfer *this@<X0>, _QWORD *a2@<X8>)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  uint64_t v13;
  AriHost *v14;
  int v15;
  uint64_t Instance;
  _BOOL8 isAlloc;
  uint64_t v18;
  uint64_t *v19;
  std::string *v20;
  std::string::size_type size;
  uint64_t v22;
  const char *v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  std::string v38;
  _QWORD v39[2];
  uint64_t v40;
  _OWORD v41[4];
  void *__p[2];
  __int128 v43;
  unint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[9];

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v54 = v4;
  v44 = 0xAAAAAAAAAAAAAAAALL;
  v53 = v4;
  v52 = v4;
  v51 = v4;
  v50 = v4;
  v49 = v4;
  v48 = v4;
  v47 = v4;
  v46 = v4;
  v43 = v4;
  v41[3] = v4;
  *(_OWORD *)__p = v4;
  v41[1] = v4;
  v41[2] = v4;
  v41[0] = v4;
  v5 = MEMORY[0x24BEDB858];
  v6 = MEMORY[0x24BEDB858] + 104;
  v45 = MEMORY[0x24BEDB858] + 104;
  v7 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v8 = MEMORY[0x24BEDB858] + 64;
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  v40 = MEMORY[0x24BEDB858] + 64;
  v39[0] = v9;
  *(_QWORD *)((char *)v39 + *(_QWORD *)(v9 - 24)) = v10;
  v39[1] = 0;
  v11 = (std::ios_base *)((char *)v39 + *(_QWORD *)(v39[0] - 24));
  std::ios_base::init(v11, v41);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v12 = v7[5];
  v40 = v7[4];
  *(uint64_t *)((char *)&v40 + *(_QWORD *)(v40 - 24)) = v12;
  v39[0] = v7[1];
  *(_QWORD *)((char *)v39 + *(_QWORD *)(v39[0] - 24)) = v7[6];
  v45 = v6;
  v39[0] = v5 + 24;
  v40 = v8;
  std::streambuf::basic_streambuf();
  v13 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v41[0] = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)__p = 0u;
  v43 = 0u;
  LODWORD(v44) = 24;
  memset(&v38, 170, sizeof(v38));
  v14 = (AriHost *)std::string::basic_string[abi:ne180100]<0>(&v38, "[unregistered client]");
  v15 = (*((_DWORD *)this + 1) >> 8) & 0x7F;
  Instance = AriHost::GetInstance(v14);
  isAlloc = ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc(Instance + 424, v15);
  if (isAlloc)
  {
    v18 = AriHost::GetInstance((AriHost *)isAlloc);
    v19 = ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](v18 + 424, v15);
    std::string::operator=(&v38, (const std::string *)*v19);
  }
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = &v38;
  else
    v20 = (std::string *)v38.__r_.__value_.__r.__words[0];
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  else
    size = v38.__r_.__value_.__l.__size_;
  if (*((_QWORD *)this + 2))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)v20, size);
    v55[0] = 45;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)v55, 1);
    v22 = Ari::MsgDefById((Ari *)(*(_DWORD *)this >> 26), (*(_DWORD *)this >> 15) & 0x3FF);
    v23 = "Unknown";
    if (v22 && *(_QWORD *)(v22 + 48))
      v23 = *(const char **)(v22 + 48);
    v24 = strlen(v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)v23, v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)"(ctx ", 5);
    v25 = v40;
    *(_DWORD *)((char *)v41 + *(_QWORD *)(v40 - 24)) = *(_DWORD *)((_BYTE *)v41 + *(_QWORD *)(v40 - 24)) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)v41 + *(_QWORD *)(v25 - 24)) |= 0x200u;
    v26 = (_QWORD *)std::ostream::operator<<();
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)")[", 2);
    v28 = *v27;
    *(_DWORD *)((char *)v27 + *(_QWORD *)(*v27 - 24) + 8) = *(_DWORD *)((_BYTE *)v27 + *(_QWORD *)(*v27 - 24) + 8) & 0xFFFFFFB5 | 2;
    *(_DWORD *)((char *)v27 + *(_QWORD *)(v28 - 24) + 8) &= ~0x200u;
    v29 = (_QWORD *)std::ostream::operator<<();
    v30 = " bytes][READ]";
    v31 = 13;
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)v20, size);
    v55[0] = 45;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)v55, 1);
    v32 = Ari::MsgDefById((Ari *)(*(_DWORD *)this >> 26), (*(_DWORD *)this >> 15) & 0x3FF);
    v33 = "Unknown";
    if (v32 && *(_QWORD *)(v32 + 48))
      v33 = *(const char **)(v32 + 48);
    v34 = strlen(v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)v33, v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)"(ctx ", 5);
    v35 = v40;
    *(_DWORD *)((char *)v41 + *(_QWORD *)(v40 - 24)) = *(_DWORD *)((_BYTE *)v41 + *(_QWORD *)(v40 - 24)) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)v41 + *(_QWORD *)(v35 - 24)) |= 0x200u;
    v29 = (_QWORD *)std::ostream::operator<<();
    v30 = ")[WRITE]";
    v31 = 8;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a2, (uint64_t)v41);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  v39[0] = *v7;
  v36 = v7[9];
  *(_QWORD *)((char *)v39 + *(_QWORD *)(v39[0] - 24)) = v7[8];
  v40 = v36;
  *(_QWORD *)&v41[0] = v13 + 16;
  if (SBYTE7(v43) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BB9B00](&v45);
}

void sub_20E24DD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void AriHost::FilerTransfer::updateBytesReceived(AriHost::FilerTransfer *this, unsigned int a2)
{
  uint64_t v2;
  int v4;
  void **v5;
  const char *v6;
  void **v7;
  void **v8;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;

  v2 = *((_QWORD *)this + 1) - a2;
  *((_QWORD *)this + 1) = v2;
  if (v2 < 0)
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "updateBytesReceived", (uint64_t)v11);
    v4 = v12;
    v5 = (void **)v11[0];
    AriHost::FilerTransfer::getName(this, __p);
    if (v4 >= 0)
      v7 = v11;
    else
      v7 = v5;
    if (v10 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) %s: received %lld bytes more than expected in filer transfer (total size %lld)\n", v6, v7, 2417, v8, -*((_QWORD *)this + 1), *((_QWORD *)this + 2));
    if (v10 < 0)
      operator delete(__p[0]);
    if (v12 < 0)
      operator delete(v11[0]);
  }
}

void sub_20E24DEC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

BOOL AriHost::FilerTransfer::isComplete(AriHost::FilerTransfer *this)
{
  return *((_QWORD *)this + 1) < 1;
}

uint64_t AriHost::CancelTrx(AriHost *this, int a2, int a3)
{
  unsigned int v3;
  AriHost *v6;
  uint64_t v7;
  AriHost *v8;
  NSObject **Instance;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  const char *v16;
  void **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD block[5];
  uint64_t v23;
  NSObject **v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  void *v30[2];
  char v31;
  uint64_t v32;
  std::__shared_weak_count *v33;

  v3 = this;
  v32 = 0;
  v33 = 0;
  if (qword_253D0AF70
    && (v6 = (AriHost *)std::__shared_weak_count::lock((std::__shared_weak_count *)qword_253D0AF70),
        (v33 = (std::__shared_weak_count *)v6) != 0)
    && (v7 = AriHost::SingletonWeakPtr, (v32 = AriHost::SingletonWeakPtr) != 0))
  {
    v8 = v6;
    Instance = (NSObject **)AriHost::GetInstance(v6);
    v10 = *Instance;
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZN7AriHost9CancelTrxEiji_block_invoke;
    block[3] = &__block_descriptor_tmp_74;
    block[4] = v7;
    v23 = (uint64_t)v8;
    v11 = (unint64_t *)((char *)v8 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v25 = v3;
    v26 = a3;
    v24 = Instance;
    v27 = a2;
    v28 = (v3 >> 8) & 0x7F;
    v29 = v3;
    dispatch_async(v10, block);
    v13 = v23;
    if (v23)
    {
      v14 = (unint64_t *)(v23 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v13);
      }
      v13 = 0;
    }
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "CancelTrx", (uint64_t)v30);
    if (v31 >= 0)
      v17 = v30;
    else
      v17 = (void **)v30[0];
    Ari::Log((Ari *)0x10, "(%s:%d) Failed to lock on AriHost instance. Shutting down?", v16, v17, 662);
    if (v31 < 0)
      operator delete(v30[0]);
    v13 = 0xFFFFFFFFLL;
  }
  v18 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v13;
}

void sub_20E24E0B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 65) < 0)
    operator delete(*(void **)(v1 - 88));
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void ___ZN7AriHost9CancelTrxEiji_block_invoke(uint64_t a1)
{
  const char *v2;
  const char *v3;
  void **v4;
  uint64_t *v5;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  NSObject **v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  NSObject *v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  NSObject *v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  dispatch_time_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  const char *v66;
  const char *v67;
  void **v68;
  const char *v69;
  const char *v70;
  void **v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  _QWORD v75[6];
  std::__shared_weak_count *v76;
  int v77;
  int v78;
  _QWORD v79[6];
  std::__shared_weak_count *v80;
  int v81;
  int v82;
  _QWORD v83[3];
  char v84;
  _QWORD block[5];
  std::__shared_weak_count *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  NSObject **v97;
  std::__shared_weak_count *v98;
  unint64_t v99;
  unint64_t v100;
  void *v101[2];
  uint64_t (*v102)(uint64_t);
  void *v103;
  _QWORD *v104;

  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "CancelTrx_block_invoke", (uint64_t)v101);
  v2 = asString(*(_DWORD *)(a1 + 60));
  v4 = (void **)v101[0];
  if (SHIBYTE(v102) >= 0)
    v4 = v101;
  Ari::Log((Ari *)0x20, "(%s:%d) Cancelling transaction for context id 0x%04x for %s", v3, v4, 673, *(unsigned int *)(a1 + 56), v2);
  if (SHIBYTE(v102) < 0)
    operator delete(v101[0]);
  v99 = 0xAAAAAAAAAAAAAAAALL;
  v100 = 0xAAAAAAAAAAAAAAAALL;
  AriHost::CreateNACK((AriHost *)*(unsigned int *)(a1 + 56), *(_DWORD *)(a1 + 64), *(_DWORD *)(a1 + 60), &v99);
  if (ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc(*(_QWORD *)(a1 + 48) + 424, *(_DWORD *)(a1 + 68)))
  {
    v5 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)(*(_QWORD *)(a1 + 48) + 8), *(_DWORD *)(a1 + 68));
    if (!v5)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    if (ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc((uint64_t)(v5 + 3), *(_DWORD *)(a1 + 72)))
    {
      v6 = ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](*(_QWORD *)(a1 + 48) + 424, *(_DWORD *)(a1 + 68));
      v8 = *(NSObject ***)(*v6 + 24);
      v7 = *(std::__shared_weak_count **)(*v6 + 32);
      v97 = v8;
      v98 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      v11 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)(*(_QWORD *)(a1 + 48) + 8), *(_DWORD *)(a1 + 68));
      if (!v11)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v12 = ResMgr<std::shared_ptr<AriHost::InboundMsgHandler>>::operator[]((uint64_t)(v11 + 3), *(_DWORD *)(a1 + 72));
      v14 = *v12;
      v13 = v12[1];
      v95 = *v12;
      v96 = (std::__shared_weak_count *)v13;
      if (v13)
      {
        v15 = (unint64_t *)(v13 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v93 = 0xAAAAAAAAAAAAAAAALL;
      v94 = 0xAAAAAAAAAAAAAAAALL;
      AriDispatch::Group::Create(&v93);
      v17 = *v8;
      v18 = (void *)MEMORY[0x24BDAC760];
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 1174405120;
      block[2] = ___ZN7AriHost9CancelTrxEiji_block_invoke_2;
      block[3] = &__block_descriptor_tmp_63;
      v19 = v93;
      v20 = v94;
      block[4] = v93;
      v86 = (std::__shared_weak_count *)v94;
      if (v94)
      {
        v21 = (unint64_t *)(v94 + 8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v23 = *(std::__shared_weak_count **)(a1 + 40);
      v87 = *(_QWORD *)(a1 + 32);
      v88 = v23;
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v89 = v14;
      v90 = (std::__shared_weak_count *)v13;
      if (v13)
      {
        v26 = (unint64_t *)(v13 + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v91 = v99;
      v92 = (std::__shared_weak_count *)v100;
      if (v100)
      {
        v28 = (unint64_t *)(v100 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      dispatch_group_async(*(dispatch_group_t *)(v19 + 16), v17, block);
      v83[0] = 0;
      v83[1] = v83;
      v83[2] = 0x2000000000;
      v84 = 0;
      v30 = **(NSObject ***)(a1 + 48);
      v79[0] = v18;
      v79[1] = 1174405120;
      v79[2] = ___ZN7AriHost9CancelTrxEiji_block_invoke_64;
      v79[3] = &unk_24C905478;
      v79[5] = v19;
      v80 = (std::__shared_weak_count *)v20;
      if (v20)
      {
        v31 = (unint64_t *)(v20 + 8);
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      v79[4] = v83;
      v33 = *(_DWORD *)(a1 + 56);
      v81 = *(_DWORD *)(a1 + 68);
      v82 = v33;
      v101[0] = v18;
      v101[1] = (void *)0x40000000;
      v102 = ___ZN11AriDispatch5Group6notifyEP16dispatch_queue_sU13block_pointerFvvE_block_invoke;
      v103 = &unk_24C9340A0;
      v104 = v79;
      AriDispatch::Group::notify((uint64_t *)v19, v30, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)v101);
      v34 = **(NSObject ***)(a1 + 48);
      v75[0] = v18;
      v75[1] = 1174405120;
      v75[2] = ___ZN7AriHost9CancelTrxEiji_block_invoke_68;
      v75[3] = &unk_24C9054B0;
      v75[5] = v19;
      v76 = (std::__shared_weak_count *)v20;
      if (v20)
      {
        v35 = (unint64_t *)(v20 + 8);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      v37 = *(_DWORD *)(a1 + 56);
      v77 = *(_DWORD *)(a1 + 68);
      v78 = v37;
      v75[4] = v83;
      v38 = dispatch_time(0, 5000000000);
      AriDispatch::Group::notify((uint64_t *)v19, v34, v38, (uint64_t)v75);
      v39 = v76;
      if (v76)
      {
        v40 = (unint64_t *)&v76->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = v80;
      if (v80)
      {
        v43 = (unint64_t *)&v80->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      _Block_object_dispose(v83, 8);
      v45 = v92;
      if (v92)
      {
        v46 = (unint64_t *)&v92->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v48 = v90;
      if (v90)
      {
        v49 = (unint64_t *)&v90->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v88;
      if (v88)
      {
        v52 = (unint64_t *)&v88->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = v86;
      if (v86)
      {
        v55 = (unint64_t *)&v86->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v57 = (std::__shared_weak_count *)v94;
      if (v94)
      {
        v58 = (unint64_t *)(v94 + 8);
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v60 = v96;
      if (v96)
      {
        v61 = (unint64_t *)&v96->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      v63 = v98;
      if (v98)
      {
        v64 = (unint64_t *)&v98->__shared_owners_;
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      goto LABEL_86;
    }
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "CancelTrx_block_invoke", (uint64_t)v101);
    v69 = asString(*(_DWORD *)(a1 + 60));
    v71 = (void **)v101[0];
    if (SHIBYTE(v102) >= 0)
      v71 = v101;
    Ari::Log((Ari *)0x20, "(%s:%d) Transaction no longer exist for ctx 0x%04x; ignoring cancel for %s",
      v70,
      v71,
      714,
      *(unsigned int *)(a1 + 56),
      v69);
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "CancelTrx_block_invoke", (uint64_t)v101);
    v66 = asString(*(_DWORD *)(a1 + 60));
    v68 = (void **)v101[0];
    if (SHIBYTE(v102) >= 0)
      v68 = v101;
    Ari::Log((Ari *)0x20, "(%s:%d) Client no longer exist for ctx 0x%04x; ignoring cancel for %s",
      v67,
      v68,
      720,
      *(unsigned int *)(a1 + 56),
      v66);
  }
  if (SHIBYTE(v102) < 0)
    operator delete(v101[0]);
LABEL_86:
  AriHost::releaseTrx_nl(*(AriHost **)(a1 + 32), *(unsigned int *)(a1 + 56), 0);
  v72 = (std::__shared_weak_count *)v100;
  if (v100)
  {
    v73 = (unint64_t *)(v100 + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
}

void sub_20E24E760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v44);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v45 + 40);
  _Block_object_dispose(&a30, 8);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)&a42);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)&a40);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)&a38);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v46 - 184);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v46 - 168);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v46 - 152);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v46 - 136);
  _Unwind_Resume(a1);
}

void AriHost::CreateNACK(AriHost *this@<X0>, int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  int v6;
  __int128 v8;
  int *EncodedBuf;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  _DWORD v13[2];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  void *v17[2];
  unint64_t v18;
  uint64_t v19;
  int *v20;

  v6 = (int)this;
  v18 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v16 = v8;
  *(_OWORD *)v17 = v8;
  v14 = v8;
  v15 = v8;
  AriMsg::AriMsg((AriMsg *)&v14, 0x4078000u);
  v13[0] = a2;
  v13[1] = a3;
  AriMsg::pack((AriMsg *)&v14, 1, v13, 8uLL, 0);
  if (!HIDWORD(v18))
    LODWORD(v18) = v6;
  v12 = -1431655766;
  EncodedBuf = AriMsg::getEncodedBuf((AriMsg *)&v14, &v12);
  v10 = v12;
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  v19 = (uint64_t)EncodedBuf + v10;
  v20 = EncodedBuf;
  std::allocate_shared[abi:ne180100]<std::vector<unsigned char>,std::allocator<std::vector<unsigned char>>,unsigned char const*&,unsigned char const*,void>((const void **)&v20, &v19, a4);
  AriMsg::ReleaseEncodedMessage((AriMsg *)EncodedBuf, v11);
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17[0] = 0;
  AriMsg::FreeTlvList((_QWORD *)v17[1]);
}

void sub_20E24E92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v3);
  AriMsg::~AriMsg((AriMsg *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN7AriHost9CancelTrxEiji_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 64) + 16))(**(_QWORD **)(a1 + 64), **(_QWORD **)(a1 + 80), *(_DWORD *)(*(_QWORD *)(a1 + 80) + 8) - **(_QWORD **)(a1 + 80));
}

_QWORD *__copy_helper_block_e8_32c47_ZTSNSt3__110shared_ptrIN11AriDispatch5GroupEEE48c34_ZTSNSt3__110shared_ptrI7AriHostEE64c55_ZTSNSt3__110shared_ptrIN7AriHost17InboundMsgHandlerEEE80c57_ZTSNSt3__110shared_ptrINS_6vectorIhNS_9allocatorIhEEEEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[7];
  result[6] = a2[6];
  result[7] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = a2[9];
  result[8] = a2[8];
  result[9] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = a2[11];
  result[10] = a2[10];
  result[11] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c47_ZTSNSt3__110shared_ptrIN11AriDispatch5GroupEEE48c34_ZTSNSt3__110shared_ptrI7AriHostEE64c55_ZTSNSt3__110shared_ptrIN7AriHost17InboundMsgHandlerEEE80c57_ZTSNSt3__110shared_ptrINS_6vectorIhNS_9allocatorIhEEEEEE(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = a1 + 32;
  v2 = a1 + 48;
  v3 = a1 + 64;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](a1 + 80);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v2);
  return std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v1);
}

void ___ZN7AriHost9CancelTrxEiji_block_invoke_64(uint64_t a1)
{
  const char *v2;
  void **v3;
  const char *v4;
  void **v5;
  void *__p[2];
  char v7;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "CancelTrx_block_invoke", (uint64_t)__p);
    if (v7 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    Ari::Log((Ari *)0x10, "(%s:%d) Client (0x%x) cancelTrx(0x%x) done (took too long)", v2, v3, 696, *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60));
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "CancelTrx_block_invoke", (uint64_t)__p);
    if (v7 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    Ari::Log((Ari *)4, "(%s:%d) Client (0x%x) cancelTrx(0x%x) done", v4, v5, 700, *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60));
  }
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_20E24EB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrIN11AriDispatch5GroupEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrIN11AriDispatch5GroupEEE(uint64_t a1)
{
  return std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](a1 + 40);
}

void ___ZN7AriHost9CancelTrxEiji_block_invoke_68(uint64_t a1, int a2)
{
  const char *v3;
  void **v4;
  void *__p[2];
  char v6;

  if (a2)
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "CancelTrx_block_invoke", (uint64_t)__p);
    if (v6 >= 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    Ari::Log((Ari *)0x10, "(%s:%d) client 0x%x did not cancelTrx(0x%x) in %dms.  Likely client queue is stuck or stalled!", v3, v4, 707, *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), 5000);
    if (v6 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
}

void sub_20E24EC0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c34_ZTSNSt3__110shared_ptrI7AriHostEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c34_ZTSNSt3__110shared_ptrI7AriHostEE(uint64_t a1)
{
  return std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](a1 + 32);
}

uint64_t AriHost::RegIndication(unsigned int a1, int a2, uint64_t a3)
{
  AriHost *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD block[6];
  int v16;
  unsigned int v17;
  int v18;
  void *__p;
  void **p_p;
  uint64_t v21;
  int v22;
  uint64_t v23;
  AriHost *v24;

  v23 = 0;
  v24 = 0;
  if (qword_253D0AF70)
  {
    v6 = (AriHost *)std::__shared_weak_count::lock((std::__shared_weak_count *)qword_253D0AF70);
    v7 = (std::__shared_weak_count *)v6;
    v24 = v6;
    if (v6)
    {
      v23 = AriHost::SingletonWeakPtr;
      if (AriHost::SingletonWeakPtr)
      {
        __p = 0;
        p_p = &__p;
        v21 = 0x2000000000;
        v22 = 0;
        v8 = *(NSObject **)AriHost::GetInstance(v6);
        block[0] = MEMORY[0x24BDAC760];
        block[1] = 0x40000000;
        block[2] = ___ZN7AriHost13RegIndicationEjiU13block_pointerFiPhjE_block_invoke;
        block[3] = &unk_24C905518;
        v16 = a2;
        v17 = a1;
        block[4] = a3;
        block[5] = &__p;
        v18 = HIWORD(a1) & 0xFC00 | (a1 >> 15) & 0x3FF;
        dispatch_sync(v8, block);
        v9 = *((unsigned int *)p_p + 6);
        _Block_object_dispose(&__p, 8);
LABEL_12:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return v9;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "RegIndication", (uint64_t)&__p);
  if (v21 >= 0)
    v11 = &__p;
  else
    v11 = __p;
  Ari::Log((Ari *)0x10, "(%s:%d) Failed to lock on AriHost instance. Shutting down?", v10, v11, 734);
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
  v9 = 0xFFFFFFFFLL;
  if (v7)
    goto LABEL_12;
  return v9;
}

void sub_20E24EDD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a24 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v24 - 64);
  _Unwind_Resume(a1);
}

void ___ZN7AriHost13RegIndicationEjiU13block_pointerFiPhjE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t Instance;
  unsigned int v4;
  Ari *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  void *p_p;
  const void *v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  AriHost *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  _BOOL8 isAlloc;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  AriHost *v25;
  unint64_t v26;
  uint64_t v27;
  AriHost *v28;
  int v29;
  AriHost *v30;
  AriHost *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  void *v36;
  int v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  AriHost *v41;
  AriHost *v42;
  int v43;
  AriHost *v44;
  AriHost *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int v52;
  Ari *v53;
  uint64_t v54;
  AriHost *v55;
  const char *v56;
  void **v57;
  uint64_t v58;
  const char *v59;
  unint64_t v60;
  _DWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  unsigned int v64;
  Ari *v65;
  uint64_t v66;
  AriHost *v67;
  const char *v68;
  void *v69;
  uint64_t v70;
  const char *v71;
  void *v72[2];
  char v73;
  void *__p;
  void **v75;
  __int128 v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;

  v2 = (*(_DWORD *)(a1 + 48) >> 8) & 0x7F;
  Instance = AriHost::GetInstance((AriHost *)a1);
  if (ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc(Instance + 424, v2))
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "RegIndication_block_invoke", (uint64_t)&__p);
    v4 = *(_DWORD *)(a1 + 52);
    v5 = (Ari *)(v4 >> 26);
    v6 = (v4 >> 15) & 0x3FF;
    v7 = Ari::MsgDefById(v5, (v4 >> 15) & 0x3FF);
    v9 = "Unknown";
    if (v7 && *(_QWORD *)(v7 + 48))
      v9 = *(const char **)(v7 + 48);
    p_p = __p;
    if ((SBYTE7(v76) & 0x80u) == 0)
      p_p = &__p;
    Ari::Log((Ari *)0x20, "(%s:%d) Client(0x%04x) registering %s (%d-0x%x)", v8, p_p, 757, v2, v9, v5, v6);
    if (SBYTE7(v76) < 0)
      operator delete(__p);
    v11 = *(const void **)(a1 + 32);
    v12 = *(_DWORD *)(a1 + 52);
    v13 = (std::__shared_weak_count *)operator new(0x30uLL);
    v13->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    v13->__shared_weak_owners_ = 0;
    v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24C905C20;
    v15 = (AriHost *)_Block_copy(v11);
    v13[1].__vftable = (std::__shared_weak_count_vtbl *)v15;
    v16 = v13 + 1;
    LODWORD(v13[1].__shared_owners_) = v2;
    HIDWORD(v13[1].__shared_owners_) = v12;
    LOBYTE(v13[1].__shared_weak_owners_) = 0;
    v77 = v13 + 1;
    v78 = v13;
    v17 = AriHost::GetInstance(v15);
    isAlloc = ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc(v17 + 112, *(_DWORD *)(a1 + 56));
    if (isAlloc)
    {
      v19 = AriHost::GetInstance((AriHost *)isAlloc);
      v20 = ResMgr<AriHost::IndicationHandlerList>::operator[](v19 + 112, *(_DWORD *)(a1 + 56));
      v21 = (uint64_t *)v20[1];
      v22 = v20[2];
      if (v21 != v20)
      {
        do
        {
          v23 = (uint64_t *)v21[1];
          if (*(_DWORD *)(v21[2] + 8) == (_DWORD)v2)
          {
            v24 = *v21;
            *(_QWORD *)(v24 + 8) = v23;
            *(_QWORD *)v21[1] = v24;
            --v20[2];
            std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)(v21 + 2));
            operator delete(v21);
          }
          v21 = v23;
        }
        while (v23 != v20);
      }
      v25 = (AriHost *)operator new(0x20uLL);
      *((_QWORD *)v25 + 2) = v16;
      *((_QWORD *)v25 + 3) = v13;
      do
        v26 = __ldxr(p_shared_owners);
      while (__stxr(v26 + 1, p_shared_owners));
      *((_QWORD *)v25 + 1) = v20;
      v27 = *v20;
      *(_QWORD *)v25 = *v20;
      *(_QWORD *)(v27 + 8) = v25;
      *v20 = (uint64_t)v25;
      ++v20[2];
      if (!v22)
      {
        v28 = (AriHost *)AriHost::GetInstance(v25);
        v29 = *((_DWORD *)v28 + 64);
        v30 = (AriHost *)AriHost::GetInstance(v28);
        v31 = v30;
        if (v29 == -1)
        {
          v61 = operator new(0x18uLL);
          v61[4] = *(_DWORD *)(a1 + 56);
          v63 = *((_QWORD *)v31 + 11);
          v62 = (_QWORD *)((char *)v31 + 88);
          *(_QWORD *)v61 = v63;
          *((_QWORD *)v61 + 1) = v62;
          *(_QWORD *)(v63 + 8) = v61;
          *v62 = v61;
          ++v62[2];
          AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "RegIndication_block_invoke", (uint64_t)&__p);
          v64 = *(_DWORD *)(a1 + 52);
          v65 = (Ari *)(v64 >> 26);
          v66 = (v64 >> 15) & 0x3FF;
          v67 = (AriHost *)Ari::MsgDefById(v65, (v64 >> 15) & 0x3FF);
          v68 = "Unknown";
          if (v67 && *((_QWORD *)v67 + 6))
            v68 = (const char *)*((_QWORD *)v67 + 6);
          if ((SBYTE7(v76) & 0x80u) == 0)
            v69 = &__p;
          else
            v69 = __p;
          v70 = AriHost::GetInstance(v67);
          Ari::Log((Ari *)0x20, "(%s:%d) indicationRegId not set.  Deferring RT registration of %s (%d-0x%x).  Total deferred: %zu", v71, v69, 804, v68, v65, v66, *(_QWORD *)(v70 + 104));
          if (SBYTE7(v76) < 0)
            operator delete(__p);
        }
        else
        {
          v32 = *((_QWORD *)v30 + 76);
          v33 = *(unsigned int *)(a1 + 56);
          v34 = AriHost::GetInstance(v30);
          (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v32 + 48))(v32, v33, *(unsigned int *)(v34 + 256));
        }
      }
    }
    else
    {
      v37 = *(_DWORD *)(a1 + 52);
      __p = &__p;
      v75 = &__p;
      v76 = xmmword_20E314E90;
      HIDWORD(v76) = v37;
      v38 = operator new(0x20uLL);
      v38[2] = v16;
      v38[3] = v13;
      do
        v39 = __ldxr(p_shared_owners);
      while (__stxr(v39 + 1, p_shared_owners));
      *v38 = &__p;
      v38[1] = &__p;
      __p = v38;
      v75 = (void **)v38;
      *(_QWORD *)&v76 = 1;
      v40 = AriHost::GetInstance((AriHost *)v38);
      v41 = (AriHost *)ResMgr<AriHost::IndicationHandlerList>::set(v40 + 112, *(unsigned int *)(a1 + 56), &__p);
      v42 = (AriHost *)AriHost::GetInstance(v41);
      v43 = *((_DWORD *)v42 + 64);
      v44 = (AriHost *)AriHost::GetInstance(v42);
      v45 = v44;
      if (v43 == -1)
      {
        v49 = operator new(0x18uLL);
        v49[4] = *(_DWORD *)(a1 + 56);
        v51 = *((_QWORD *)v45 + 11);
        v50 = (_QWORD *)((char *)v45 + 88);
        *(_QWORD *)v49 = v51;
        *((_QWORD *)v49 + 1) = v50;
        *(_QWORD *)(v51 + 8) = v49;
        *v50 = v49;
        ++v50[2];
        AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "RegIndication_block_invoke", (uint64_t)v72);
        v52 = *(_DWORD *)(a1 + 52);
        v53 = (Ari *)(v52 >> 26);
        v54 = (v52 >> 15) & 0x3FF;
        v55 = (AriHost *)Ari::MsgDefById(v53, (v52 >> 15) & 0x3FF);
        v56 = "Unknown";
        if (v55 && *((_QWORD *)v55 + 6))
          v56 = (const char *)*((_QWORD *)v55 + 6);
        if (v73 >= 0)
          v57 = v72;
        else
          v57 = (void **)v72[0];
        v58 = AriHost::GetInstance(v55);
        Ari::Log((Ari *)0x20, "(%s:%d) indicationRegId not set.  Deferring RT registration of %s (%d-0x%x).  Total deferred: %zu", v59, v57, 823, v56, v53, v54, *(_QWORD *)(v58 + 104));
        if (v73 < 0)
          operator delete(v72[0]);
      }
      else
      {
        v46 = *((_QWORD *)v44 + 76);
        v47 = *(unsigned int *)(a1 + 56);
        v48 = AriHost::GetInstance(v44);
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v46 + 48))(v46, v47, *(unsigned int *)(v48 + 256));
      }
      std::__list_imp<std::shared_ptr<Ari::ClientOutboundMessage>>::clear((uint64_t *)&__p);
    }
    do
      v60 = __ldaxr(p_shared_owners);
    while (__stlxr(v60 - 1, p_shared_owners));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "RegIndication_block_invoke", (uint64_t)&__p);
    if ((SBYTE7(v76) & 0x80u) == 0)
      v36 = &__p;
    else
      v36 = __p;
    Ari::Log((Ari *)8, "(%s:%d) RegIndication: Client(0x%04x) has not been registered", v35, v36, 752, v2);
    if (SBYTE7(v76) < 0)
      operator delete(__p);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = -1;
  }
}

void sub_20E24F2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a27 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v27 - 96);
  _Unwind_Resume(a1);
}

uint64_t *ResMgr<AriHost::IndicationHandlerList>::operator[](uint64_t a1, int a2)
{
  _BOOL8 v4;
  _BOOL4 v5;
  const char *v6;
  uint64_t *v7;
  int v9;

  v9 = a2;
  AriOsa::SWTrap(*(_BYTE *)(a1 + 104) == 0, (uint64_t)"valid == false", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0xA6);
  v4 = dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 96), 0xFFFFFFFFFFFFFFFFLL) != 0;
  AriOsa::SWTrap(v4, (uint64_t)"AriOsa::OsMutexTake(mtx) == ARI_RESULT_ERR", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0xA7);
  v5 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)a1, a2) == 0;
  ResMgr<AriHost::IndicationHandlerList>::sw_dbug_trap(a1, v5, v6);
  v7 = std::__hash_table<std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1, a2, &v9)+ 4;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 96));
  AriOsa::SWTrap(0, (uint64_t)"AriOsa::OsMutexGive(mtx) == ARI_RESULT_ERR", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0xAC);
  return v7;
}

uint64_t AriHost::IndicationHandlerList::IndicationHandlerList(uint64_t this, int a2)
{
  *(_QWORD *)this = this;
  *(_QWORD *)(this + 8) = this;
  *(_QWORD *)(this + 16) = 0;
  *(_WORD *)(this + 24) = 0;
  *(_DWORD *)(this + 28) = a2;
  return this;
}

{
  *(_QWORD *)this = this;
  *(_QWORD *)(this + 8) = this;
  *(_QWORD *)(this + 16) = 0;
  *(_WORD *)(this + 24) = 0;
  *(_DWORD *)(this + 28) = a2;
  return this;
}

uint64_t ResMgr<AriHost::IndicationHandlerList>::set(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _BOOL8 v6;
  int v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  int v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;

  v51 = a2;
  AriOsa::SWTrap(*(_BYTE *)(a1 + 104) == 0, (uint64_t)"valid == false", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0xB4);
  v6 = dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 96), 0xFFFFFFFFFFFFFFFFLL) != 0;
  AriOsa::SWTrap(v6, (uint64_t)"AriOsa::OsMutexTake(mtx) == ARI_RESULT_ERR", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0xB5);
  v7 = IDMgr::allocate((IDMgr *)(a1 + 40), a2);
  ResMgr<AriHost::IndicationHandlerList>::sw_dbug_trap(a1, v7 ^ 1, v8);
  v46 = (int)(std::chrono::system_clock::now().__d_.__rep_ - AriOsa_Init_Time) / 1000;
  v47 = (uint64_t *)&v47;
  v48 = (uint64_t *)&v47;
  v49 = 0;
  v9 = (_QWORD *)a3[1];
  if (v9 != a3)
  {
    v10 = 0;
    v11 = (uint64_t *)&v47;
    do
    {
      v13 = v9[2];
      v12 = v9[3];
      v14 = (uint64_t *)operator new(0x20uLL);
      v14[2] = v13;
      v14[3] = v12;
      if (v12)
      {
        v15 = (unint64_t *)(v12 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
        v11 = v47;
        v10 = v49;
      }
      *v14 = (uint64_t)v11;
      v14[1] = (uint64_t)&v47;
      v11[1] = (uint64_t)v14;
      ++v10;
      v47 = v14;
      v49 = v10;
      v9 = (_QWORD *)v9[1];
      v11 = v14;
    }
    while (v9 != a3);
  }
  v50 = a3[3];
  v17 = std::__hash_table<std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a1, a2, &v51);
  v18 = v17;
  *((_DWORD *)v17 + 6) = v46;
  if (v17 + 3 != (uint64_t *)&v46)
  {
    v19 = v17 + 4;
    v20 = v48;
    v21 = (uint64_t *)v17[5];
    if (v48 != (uint64_t *)&v47 && v21 != v19)
    {
      do
      {
        v23 = v20[2];
        v22 = v20[3];
        if (v22)
        {
          v24 = (unint64_t *)(v22 + 8);
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = (std::__shared_weak_count *)v21[3];
        v21[2] = v23;
        v21[3] = v22;
        if (v26)
        {
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v20 = (uint64_t *)v20[1];
        v21 = (uint64_t *)v21[1];
      }
      while (v20 != (uint64_t *)&v47 && v21 != v19);
    }
    if (v21 == v19)
    {
      if (v20 != (uint64_t *)&v47)
      {
        v33 = (uint64_t *)operator new(0x20uLL);
        v34 = v33;
        *v33 = 0;
        v33[1] = 0;
        v33[2] = v20[2];
        v35 = v20[3];
        v33[3] = v35;
        if (v35)
        {
          v36 = (unint64_t *)(v35 + 8);
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
        v38 = (uint64_t *)v20[1];
        v39 = 1;
        if (v38 != (uint64_t *)&v47)
        {
          v40 = v33;
          do
          {
            v33 = (uint64_t *)operator new(0x20uLL);
            *v33 = (uint64_t)v40;
            v33[1] = 0;
            v33[2] = v38[2];
            v41 = v38[3];
            v33[3] = v41;
            if (v41)
            {
              v42 = (unint64_t *)(v41 + 8);
              do
                v43 = __ldxr(v42);
              while (__stxr(v43 + 1, v42));
            }
            v40[1] = (uint64_t)v33;
            ++v39;
            v38 = (uint64_t *)v38[1];
            v40 = v33;
          }
          while (v38 != (uint64_t *)&v47);
        }
        v44 = v18[4];
        *(_QWORD *)(v44 + 8) = v34;
        *v34 = v44;
        v18[4] = (uint64_t)v33;
        v33[1] = (uint64_t)v19;
        v18[6] += v39;
      }
    }
    else
    {
      v30 = v18[4];
      v31 = *v21;
      *(_QWORD *)(v31 + 8) = *(_QWORD *)(v30 + 8);
      **(_QWORD **)(v30 + 8) = v31;
      do
      {
        v32 = (uint64_t *)v21[1];
        --v18[6];
        std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)(v21 + 2));
        operator delete(v21);
        v21 = v32;
      }
      while (v32 != v19);
    }
  }
  v18[7] = v50;
  std::__list_imp<std::shared_ptr<Ari::ClientOutboundMessage>>::clear((uint64_t *)&v47);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 96));
  return AriOsa::SWTrap(0, (uint64_t)"AriOsa::OsMutexGive(mtx) == ARI_RESULT_ERR", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0xBA);
}

void sub_20E24F7E0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<std::shared_ptr<Ari::ClientOutboundMessage>>::clear(v1);
  _Unwind_Resume(a1);
}

void AriHost::IndicationHandlerList::~IndicationHandlerList(AriHost::IndicationHandlerList *this)
{
  std::__list_imp<std::shared_ptr<Ari::ClientOutboundMessage>>::clear((uint64_t *)this);
}

{
  std::__list_imp<std::shared_ptr<Ari::ClientOutboundMessage>>::clear((uint64_t *)this);
}

uint64_t AriHost::DeregIndication(AriHost *this, unsigned int a2)
{
  unsigned int v2;
  AriHost *v4;
  std::__shared_weak_count *v5;
  NSObject **Instance;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  void *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD block[6];
  int v15;
  int v16;
  unsigned int v17;
  void *__p;
  void **p_p;
  uint64_t v20;
  int v21;
  uint64_t v22;
  AriHost *v23;

  v2 = this;
  v22 = 0;
  v23 = 0;
  if (qword_253D0AF70)
  {
    v4 = (AriHost *)std::__shared_weak_count::lock((std::__shared_weak_count *)qword_253D0AF70);
    v5 = (std::__shared_weak_count *)v4;
    v23 = v4;
    if (v4)
    {
      v22 = AriHost::SingletonWeakPtr;
      if (AriHost::SingletonWeakPtr)
      {
        __p = 0;
        p_p = &__p;
        v20 = 0x2000000000;
        v21 = 0;
        Instance = (NSObject **)AriHost::GetInstance(v4);
        v7 = *Instance;
        block[0] = MEMORY[0x24BDAC760];
        block[1] = 0x40000000;
        block[2] = ___ZN7AriHost15DeregIndicationEji_block_invoke;
        block[3] = &unk_24C905540;
        block[4] = &__p;
        block[5] = Instance;
        v15 = (a2 >> 8) & 0x7F;
        v16 = HIWORD(v2) & 0xFC00 | (v2 >> 15) & 0x3FF;
        v17 = v2;
        dispatch_sync(v7, block);
        v8 = *((unsigned int *)p_p + 6);
        _Block_object_dispose(&__p, 8);
LABEL_12:
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return v8;
      }
    }
  }
  else
  {
    v5 = 0;
  }
  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "DeregIndication", (uint64_t)&__p);
  if (v20 >= 0)
    v10 = &__p;
  else
    v10 = __p;
  Ari::Log((Ari *)0x10, "(%s:%d) Failed to lock on AriHost instance. Shutting down?", v9, v10, 836);
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  v8 = 0xFFFFFFFFLL;
  if (v5)
    goto LABEL_12;
  return v8;
}

void sub_20E24F9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a24 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v24 - 64);
  _Unwind_Resume(a1);
}

void ___ZN7AriHost15DeregIndicationEji_block_invoke(uint64_t a1)
{
  void **v2;
  uint64_t *v3;
  _QWORD *v4;
  unsigned int v5;
  Ari *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _BOOL8 v18;
  int v19;
  const char *v20;
  uint64_t *v21;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  const char *v25;
  void **v26;
  void **v27;
  unsigned int v28;
  uint64_t *v29;
  const char *v30;
  _QWORD *v31;
  int v32;
  uint64_t *v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *__p[2];
  char v41;
  char v42;

  if (!ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc(*(_QWORD *)(a1 + 40) + 424, *(_DWORD *)(a1 + 48)))
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "DeregIndication_block_invoke", (uint64_t)__p);
    if (v42 >= 0)
      v26 = __p;
    else
      v26 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) cid (0x%x) is not registered", v25, v26, 856, *(unsigned int *)(a1 + 48));
LABEL_29:
    if (v42 < 0)
      operator delete(__p[0]);
    v32 = -1;
    goto LABEL_32;
  }
  if (!ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc(*(_QWORD *)(a1 + 40) + 112, *(_DWORD *)(a1 + 52)))
  {
    v27 = __p;
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "DeregIndication_block_invoke", (uint64_t)__p);
    if (v42 < 0)
      v27 = (void **)__p[0];
    v28 = *(_DWORD *)(a1 + 56);
    v29 = ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](*(_QWORD *)(a1 + 40) + 424, *(_DWORD *)(a1 + 48));
    v31 = (_QWORD *)*v29;
    if (*(char *)(*v29 + 23) < 0)
      v31 = (_QWORD *)*v31;
    Ari::Log((Ari *)8, "(%s:%d) DeregIndication: gmid (%d-0x%x) is not registered with any handler (for %s cid 0x%x)", v30, v27, 863, v28 >> 26, (v28 >> 15) & 0x3FF, v31, *(unsigned int *)(a1 + 48));
    goto LABEL_29;
  }
  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "DeregIndication_block_invoke", (uint64_t)__p);
  if (v42 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  v3 = ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](*(_QWORD *)(a1 + 40) + 424, *(_DWORD *)(a1 + 48));
  v4 = (_QWORD *)*v3;
  if (*(char *)(*v3 + 23) < 0)
    v4 = (_QWORD *)*v4;
  v5 = *(_DWORD *)(a1 + 56);
  v6 = (Ari *)(v5 >> 26);
  v7 = (v5 >> 15) & 0x3FF;
  v8 = Ari::MsgDefById(v6, (v5 >> 15) & 0x3FF);
  v10 = "Unknown";
  if (v8 && *(_QWORD *)(v8 + 48))
    v10 = *(const char **)(v8 + 48);
  Ari::Log((Ari *)0x20, "(%s:%d) Client %s (0x%x) de-registering %s (%d-0x%x)", v9, v2, 868, v4, *(unsigned int *)(a1 + 48), v10, v6, v7);
  if (v42 < 0)
    operator delete(__p[0]);
  v11 = ResMgr<AriHost::IndicationHandlerList>::operator[](*(_QWORD *)(a1 + 40) + 112, *(_DWORD *)(a1 + 52));
  v12 = (uint64_t *)v11[1];
  if (v12 != v11)
  {
    do
    {
      v13 = (uint64_t *)v12[1];
      if (*(_DWORD *)(v12[2] + 8) == *(_DWORD *)(a1 + 48))
      {
        v14 = *v12;
        *(_QWORD *)(v14 + 8) = v13;
        *(_QWORD *)v12[1] = v14;
        --v11[2];
        std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)(v12 + 2));
        operator delete(v12);
      }
      v12 = v13;
    }
    while (v13 != v11);
  }
  if (!v11[2])
  {
    v15 = *(_QWORD *)(a1 + 40);
    v16 = (_QWORD *)(v15 + 112);
    v17 = *(unsigned int *)(a1 + 52);
    AriOsa::SWTrap(*(_BYTE *)(v15 + 216) == 0, (uint64_t)"valid == false", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0xEB);
    v18 = dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v15 + 208), 0xFFFFFFFFFFFFFFFFLL) != 0;
    AriOsa::SWTrap(v18, (uint64_t)"AriOsa::OsMutexTake(mtx) == ARI_RESULT_ERR", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0xEC);
    v19 = IDMgr::_free((unsigned int *)(v15 + 152), v17, v15 + 160);
    ResMgr<AriHost::IndicationHandlerList>::sw_dbug_trap(v15 + 112, v19 ^ 1, v20);
    v21 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)(v15 + 112), v17);
    v22 = *(int8x8_t *)(v15 + 120);
    v23 = v21[1];
    v24 = (uint8x8_t)vcnt_s8(v22);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(_QWORD *)&v22)
        v23 %= *(_QWORD *)&v22;
    }
    else
    {
      v23 &= *(_QWORD *)&v22 - 1;
    }
    v33 = *(uint64_t **)(*v16 + 8 * v23);
    do
    {
      v34 = v33;
      v33 = (uint64_t *)*v33;
    }
    while (v33 != v21);
    if (v34 == (uint64_t *)(v15 + 128))
      goto LABEL_49;
    v35 = v34[1];
    if (v24.u32[0] > 1uLL)
    {
      if (v35 >= *(_QWORD *)&v22)
        v35 %= *(_QWORD *)&v22;
    }
    else
    {
      v35 &= *(_QWORD *)&v22 - 1;
    }
    if (v35 != v23)
    {
LABEL_49:
      if (!*v21)
        goto LABEL_50;
      v36 = *(_QWORD *)(*v21 + 8);
      if (v24.u32[0] > 1uLL)
      {
        if (v36 >= *(_QWORD *)&v22)
          v36 %= *(_QWORD *)&v22;
      }
      else
      {
        v36 &= *(_QWORD *)&v22 - 1;
      }
      if (v36 != v23)
LABEL_50:
        *(_QWORD *)(*v16 + 8 * v23) = 0;
    }
    v37 = *v21;
    if (*v21)
    {
      v38 = *(_QWORD *)(v37 + 8);
      if (v24.u32[0] > 1uLL)
      {
        if (v38 >= *(_QWORD *)&v22)
          v38 %= *(_QWORD *)&v22;
      }
      else
      {
        v38 &= *(_QWORD *)&v22 - 1;
      }
      if (v38 != v23)
      {
        *(_QWORD *)(*v16 + 8 * v38) = v34;
        v37 = *v21;
      }
    }
    *v34 = v37;
    *v21 = 0;
    --*(_QWORD *)(v15 + 136);
    __p[0] = v21;
    __p[1] = (void *)(v15 + 128);
    v41 = 1;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,void *>>>>::reset[abi:ne180100]((uint64_t)__p);
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v15 + 208));
    v39 = *(_QWORD *)(a1 + 40);
    if (*(_DWORD *)(v39 + 256) != -1)
    {
      v32 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v39 + 608) + 56))(*(_QWORD *)(v39 + 608), *(unsigned int *)(a1 + 52));
LABEL_32:
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v32;
    }
  }
}

void sub_20E24FE68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AriHost::AbortTransactions(AriHost *this, NSObject *a2, dispatch_group_s *a3)
{
  int v4;
  NSObject **Instance;
  NSObject *v6;
  _QWORD v7[5];
  int v8;

  v4 = (int)this;
  Instance = (NSObject **)AriHost::GetInstance(this);
  v6 = *Instance;
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 0x40000000;
  v7[2] = ___ZN7AriHost17AbortTransactionsEjP16dispatch_group_s_block_invoke;
  v7[3] = &__block_descriptor_tmp_89;
  v7[4] = Instance;
  v8 = v4;
  dispatch_group_async(a2, v6, v7);
}

void ___ZN7AriHost17AbortTransactionsEjP16dispatch_group_s_block_invoke(uint64_t a1)
{
  const char *v2;
  void **v3;
  AriHost *v4;
  const char *v5;
  void **v6;
  const char *v7;
  void **v8;
  const char *v9;
  void **v10;
  uint64_t *v11;
  const char *v12;
  void **v13;
  void *__p[2];
  char v15;

  if (ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc(*(_QWORD *)(a1 + 32) + 424, *(_DWORD *)(a1 + 40)))
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "AbortTransactions_block_invoke", (uint64_t)__p);
    if (v15 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    Ari::Log((Ari *)0x20, "(%s:%d) Aborting transactions for cid 0x%x", v2, v3, 906, *(unsigned int *)(a1 + 40));
    if (v15 < 0)
      operator delete(__p[0]);
    if (AriHost::cancelBlockedRequests_nl(v4, *(_DWORD *)(a1 + 40)))
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "AbortTransactions_block_invoke", (uint64_t)__p);
      v6 = v15 >= 0 ? __p : (void **)__p[0];
      Ari::Log((Ari *)0x10, "(%s:%d) failed to abort blocked requests for cid 0x%x", v5, v6, 910, *(unsigned int *)(a1 + 40));
      if (v15 < 0)
        operator delete(__p[0]);
    }
    if (Ari::ClientWorkQueue::abort((int64x2_t *)(*(_QWORD *)(a1 + 32) + 264), *(_DWORD *)(a1 + 40)))
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "AbortTransactions_block_invoke", (uint64_t)__p);
      v8 = v15 >= 0 ? __p : (void **)__p[0];
      Ari::Log((Ari *)0x10, "(%s:%d) failed to abort [normal] stalled requests for cid 0x%x", v7, v8, 915, *(unsigned int *)(a1 + 40));
      if (v15 < 0)
        operator delete(__p[0]);
    }
    if (Ari::ClientWorkQueue::abort((int64x2_t *)(*(_QWORD *)(a1 + 32) + 344), *(_DWORD *)(a1 + 40)))
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "AbortTransactions_block_invoke", (uint64_t)__p);
      v10 = v15 >= 0 ? __p : (void **)__p[0];
      Ari::Log((Ari *)0x10, "(%s:%d) failed to abort [low-prio] stalled requests for cid 0x%x", v9, v10, 920, *(unsigned int *)(a1 + 40));
      if (v15 < 0)
        operator delete(__p[0]);
    }
    AriHost::nackResponseHandlers_nl(*(AriHost **)(a1 + 32), *(_DWORD *)(a1 + 40), -85);
    v11 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(_DWORD *)(a1 + 40));
    if (!v11)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    *((_BYTE *)v11 + 284) = 1;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "AbortTransactions_block_invoke", (uint64_t)__p);
    if (v15 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) cid 0x%x not registered", v12, v13, 902, *(unsigned int *)(a1 + 40));
    if (v15 < 0)
      operator delete(__p[0]);
  }
}

void sub_20E250170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriHost::cancelBlockedRequests_nl(AriHost *this, int a2)
{
  uint64_t Instance;
  uint64_t *v4;

  Instance = AriHost::GetInstance(this);
  v4 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)(Instance + 8), a2);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return AriHost::TransactionMgr::cancelBlockedRequests((AriHost::TransactionMgr *)(v4 + 3));
}

void AriHost::nackResponseHandlers_nl(AriHost *this, int a2, int a3)
{
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  _DWORD *v9;
  _BOOL8 v10;
  uint64_t i;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  int v18;
  AriHost *v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  NSObject **v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  NSObject *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD v39[6];
  std::__shared_weak_count *v40;
  NSObject **v41;
  std::__shared_weak_count *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  _BYTE v48[24];
  _BYTE *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v45 = (uint64_t)&v45;
  v46 = &v45;
  v47 = 0;
  v6 = (_QWORD *)((char *)this + 8);
  v7 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)this + 1, a2);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v8 = v7;
  v49 = 0;
  v9 = operator new(0x20uLL);
  *(_QWORD *)v9 = &off_24C905DD0;
  v9[2] = a2;
  *((_QWORD *)v9 + 2) = this;
  *((_QWORD *)v9 + 3) = &v45;
  v49 = v9;
  AriOsa::SWTrap(*((_BYTE *)v8 + 128) == 0, (uint64_t)"valid == false", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0x142);
  v10 = dispatch_semaphore_wait((dispatch_semaphore_t)v8[15], 0xFFFFFFFFFFFFFFFFLL) != 0;
  AriOsa::SWTrap(v10, (uint64_t)"AriOsa::OsMutexTake(mtx) == ARI_RESULT_ERR", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0x144);
  for (i = v8[5]; i; i = *(_QWORD *)i)
  {
    LODWORD(v43) = *(_DWORD *)(i + 16);
    if (!v49)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_BYTE *, unint64_t *, uint64_t))(*(_QWORD *)v49 + 48))(v49, &v43, i + 32);
  }
  dispatch_semaphore_signal((dispatch_semaphore_t)v8[15]);
  v12 = v49;
  if (v49 == v48)
  {
    v13 = 4;
    v12 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_10;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_10:
  v14 = v46;
  if (v46 != &v45)
  {
    v15 = (char *)this + 424;
    do
    {
      v16 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>(v6, a2);
      if (!v16)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      if (ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc((uint64_t)(v16 + 3), *((_DWORD *)v14 + 4)))
      {
        v17 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>(v6, a2);
        if (!v17)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        v18 = *(_DWORD *)(*ResMgr<std::shared_ptr<AriHost::InboundMsgHandler>>::operator[]((uint64_t)(v17 + 3), *((_DWORD *)v14 + 4))+ 12);
        v19 = (AriHost *)(*((unsigned __int8 *)v14 + 16) | ((a2 & 0x7F) << 8));
        v43 = 0xAAAAAAAAAAAAAAAALL;
        v44 = 0xAAAAAAAAAAAAAAAALL;
        AriHost::CreateNACK(v19, v18, a3, &v43);
        v20 = ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[]((uint64_t)v15, a2);
        v22 = *(NSObject ***)(*v20 + 24);
        v21 = *(std::__shared_weak_count **)(*v20 + 32);
        v41 = v22;
        v42 = v21;
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v24 = __ldxr(p_shared_owners);
          while (__stxr(v24 + 1, p_shared_owners));
        }
        v25 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>(v6, a2);
        if (!v25)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        v26 = *(_QWORD *)*ResMgr<std::shared_ptr<AriHost::InboundMsgHandler>>::operator[]((uint64_t)(v25 + 3), *((_DWORD *)v14 + 4));
        v27 = *v22;
        v39[0] = MEMORY[0x24BDAC760];
        v39[1] = 1174405120;
        v39[2] = ___ZN7AriHost23nackResponseHandlers_nlEjj_block_invoke;
        v39[3] = &unk_24C905A20;
        v39[4] = v26;
        v39[5] = v43;
        v40 = (std::__shared_weak_count *)v44;
        if (v44)
        {
          v28 = (unint64_t *)(v44 + 8);
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        dispatch_async(v27, v39);
        v30 = v40;
        if (v40)
        {
          v31 = (unint64_t *)&v40->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v33 = v42;
        if (v42)
        {
          v34 = (unint64_t *)&v42->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        v36 = (std::__shared_weak_count *)v44;
        if (v44)
        {
          v37 = (unint64_t *)(v44 + 8);
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      v14 = (uint64_t *)v14[1];
    }
    while (v14 != &v45);
  }
  std::__list_imp<std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>::clear(&v45);
}

void sub_20E25058C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::__list_imp<std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void AriHost::ContinueTransactions(AriHost *this)
{
  int v1;
  NSObject **Instance;
  NSObject *v3;
  _QWORD v4[5];
  int v5;

  v1 = (int)this;
  Instance = (NSObject **)AriHost::GetInstance(this);
  v3 = *Instance;
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 0x40000000;
  v4[2] = ___ZN7AriHost20ContinueTransactionsEj_block_invoke;
  v4[3] = &__block_descriptor_tmp_90;
  v4[4] = Instance;
  v5 = v1;
  dispatch_sync(v3, v4);
}

uint64_t AriHost::ClientInboundRespCB(AriHost *this, unsigned __int8 *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  AriMsg *BufHeader;
  unint64_t v7;
  AriHost *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  void *p_p;
  uint64_t v26;
  const char *v27;
  void *v28;
  const char *v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD block[5];
  std::__shared_weak_count *v35;
  void *v36;
  std::__shared_weak_count *v37;
  unsigned int v38;
  int v39;
  int v40;
  void *__p;
  unint64_t v42;
  char v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unsigned __int8 *v46;
  const void *v47;

  v44 = 0;
  v45 = 0;
  if (!qword_253D0AF70)
  {
    v4 = 0;
    goto LABEL_29;
  }
  v4 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_253D0AF70);
  v45 = v4;
  if (!v4 || (v5 = AriHost::SingletonWeakPtr, (v44 = AriHost::SingletonWeakPtr) == 0))
  {
LABEL_29:
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "ClientInboundRespCB", (uint64_t)&__p);
    if (v43 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    Ari::Log((Ari *)0x10, "(%s:%d) Failed to lock on AriHost instance. Shutting down?", v24, p_p, 941);
    if (v43 < 0)
      operator delete(__p);
    v23 = 0xFFFFFFFFLL;
LABEL_35:
    if (!v4)
      return v23;
    goto LABEL_50;
  }
  BufHeader = AriMsg::GetBufHeader(this, a2);
  if (!BufHeader)
  {
    v26 = 0x8000;
LABEL_39:
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "ClientInboundRespCB", (uint64_t)&__p);
    if (v43 >= 0)
      v28 = &__p;
    else
      v28 = __p;
    Ari::Log((Ari *)8, "(%s:%d) GetBufCtx Invalid CTX(0x%08x)", v27, v28, 949, v26);
    goto LABEL_47;
  }
  v7 = (unint64_t)*((unsigned int *)BufHeader + 2) >> 17;
  if (!(*((_DWORD *)BufHeader + 2) >> 17))
  {
    v26 = 0;
    goto LABEL_39;
  }
  if (!((unint64_t)a2 >> 32))
  {
    __p = (void *)0xAAAAAAAAAAAAAAAALL;
    v42 = 0xAAAAAAAAAAAAAAAALL;
    v46 = &a2[(_QWORD)this];
    v47 = this;
    v8 = (AriHost *)std::allocate_shared[abi:ne180100]<std::vector<unsigned char>,std::allocator<std::vector<unsigned char>>,unsigned char const*&,unsigned char const*,void>(&v47, (uint64_t *)&v46, &__p);
    v9 = *(NSObject **)AriHost::GetInstance(v8);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZN7AriHost19ClientInboundRespCBEPhm_block_invoke;
    block[3] = &__block_descriptor_tmp_96;
    block[4] = v5;
    v35 = v4;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v38 = v7 >> 8;
    v39 = v7;
    v40 = v7;
    v36 = __p;
    v37 = (std::__shared_weak_count *)v42;
    if (v42)
    {
      v12 = (unint64_t *)(v42 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    dispatch_async(v9, block);
    v14 = v37;
    if (v37)
    {
      v15 = (unint64_t *)&v37->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = v35;
    if (v35)
    {
      v18 = (unint64_t *)&v35->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = (std::__shared_weak_count *)v42;
    if (v42)
    {
      v21 = (unint64_t *)(v42 + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = 0;
    v4 = v45;
    goto LABEL_35;
  }
  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "ClientInboundRespCB", (uint64_t)&__p);
  if (v43 >= 0)
    v30 = &__p;
  else
    v30 = __p;
  Ari::Log((Ari *)8, "(%s:%d) Invalid response size %lu\n", v29, v30, 955, a2);
LABEL_47:
  if (v43 < 0)
    operator delete(__p);
  v23 = 0xFFFFFFFFLL;
LABEL_50:
  v31 = (unint64_t *)&v4->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v23;
}

void sub_20E2509EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v28 - 88);
  _Unwind_Resume(a1);
}

void ___ZN7AriHost19ClientInboundRespCBEPhm_block_invoke(uint64_t a1)
{
  uint64_t Instance;
  _BOOL8 isAlloc;
  uint64_t v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  AriMsg **v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  NSObject *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  const char *v45;
  void **v46;
  const char *v47;
  void **v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD block[5];
  std::__shared_weak_count *v52;
  void *v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  AriMsg **v57[2];
  NSObject **v58;
  std::__shared_weak_count *v59;
  void *v60;
  std::__shared_weak_count *v61;
  char v62;

  Instance = AriHost::GetInstance((AriHost *)a1);
  isAlloc = ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc(Instance + 424, *(_DWORD *)(a1 + 64));
  if (isAlloc)
  {
    v4 = AriHost::GetInstance((AriHost *)isAlloc);
    v5 = ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](v4 + 424, *(_DWORD *)(a1 + 64));
    v6 = *(std::__shared_weak_count **)(*v5 + 32);
    v58 = *(NSObject ***)(*v5 + 24);
    v59 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = AriHost::GetInstance((AriHost *)v5);
    v10 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)(v9 + 8), *(_DWORD *)(a1 + 64));
    if (!v10)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v11 = ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc((uint64_t)(v10 + 3), *(_DWORD *)(a1 + 72));
    if (v11)
    {
      v12 = AriHost::GetInstance((AriHost *)v11);
      v13 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)(v12 + 8), *(_DWORD *)(a1 + 64));
      if (!v13)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v14 = ResMgr<std::shared_ptr<AriHost::InboundMsgHandler>>::operator[]((uint64_t)(v13 + 3), *(_DWORD *)(a1 + 72));
      v15 = v14[1];
      v60 = (void *)*v14;
      v61 = (std::__shared_weak_count *)v15;
      if (v15)
      {
        v16 = (unint64_t *)(v15 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v18 = *(_QWORD *)(a1 + 32);
      v19 = *(AriMsg ***)(a1 + 56);
      v57[0] = *(AriMsg ***)(a1 + 48);
      v57[1] = v19;
      if (v19)
      {
        v20 = (unint64_t *)(v19 + 1);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      AriHost::safeReleaseTrx_nl(v18, v57);
      if (v19)
      {
        v22 = (unint64_t *)(v19 + 1);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          (*((void (**)(AriMsg **))*v19 + 2))(v19);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v19);
        }
      }
      v24 = *v58;
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 1174405120;
      block[2] = ___ZN7AriHost19ClientInboundRespCBEPhm_block_invoke_2;
      block[3] = &__block_descriptor_tmp_95;
      v25 = *(std::__shared_weak_count **)(a1 + 40);
      block[4] = *(_QWORD *)(a1 + 32);
      v52 = v25;
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v53 = v60;
      v54 = v61;
      if (v61)
      {
        v28 = (unint64_t *)&v61->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = *(std::__shared_weak_count **)(a1 + 56);
      v55 = *(_QWORD *)(a1 + 48);
      v56 = v30;
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      dispatch_async(v24, block);
      v33 = v56;
      if (v56)
      {
        v34 = (unint64_t *)&v56->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v36 = v54;
      if (v54)
      {
        v37 = (unint64_t *)&v54->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v39 = v52;
      if (v52)
      {
        v40 = (unint64_t *)&v52->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = v61;
      if (v61)
      {
        v43 = (unint64_t *)&v61->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v6 = v59;
    }
    else
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "ClientInboundRespCB_block_invoke", (uint64_t)&v60);
      if (v62 >= 0)
        v48 = &v60;
      else
        v48 = (void **)v60;
      Ari::Log((Ari *)8, "(%s:%d) No handling block for trx 0x%04x from ctx 0x%08x", v47, v48, 977, *(unsigned int *)(a1 + 72), *(unsigned int *)(a1 + 68));
      if (v62 < 0)
        operator delete(v60);
    }
    if (v6)
    {
      v49 = (unint64_t *)&v6->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "ClientInboundRespCB_block_invoke", (uint64_t)&v60);
    if (v62 >= 0)
      v46 = &v60;
    else
      v46 = (void **)v60;
    Ari::Log((Ari *)8, "(%s:%d) No dispatch queue for cid 0x%04x from ctx 0x%08x", v45, v46, 970, *(unsigned int *)(a1 + 64), *(unsigned int *)(a1 + 68));
    if (v62 < 0)
      operator delete(v60);
  }
}

void sub_20E250DFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v1 - 88);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v1 - 56);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v1 - 72);
  _Unwind_Resume(a1);
}

uint64_t ___ZN7AriHost19ClientInboundRespCBEPhm_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 48) + 16))(**(_QWORD **)(a1 + 48), **(_QWORD **)(a1 + 64), *(_DWORD *)(*(_QWORD *)(a1 + 64) + 8) - **(_QWORD **)(a1 + 64));
}

_QWORD *__copy_helper_block_e8_32c34_ZTSNSt3__110shared_ptrI7AriHostEE48c55_ZTSNSt3__110shared_ptrIN7AriHost17InboundMsgHandlerEEE64c57_ZTSNSt3__110shared_ptrINS_6vectorIhNS_9allocatorIhEEEEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[7];
  result[6] = a2[6];
  result[7] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = a2[9];
  result[8] = a2[8];
  result[9] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c34_ZTSNSt3__110shared_ptrI7AriHostEE48c55_ZTSNSt3__110shared_ptrIN7AriHost17InboundMsgHandlerEEE64c57_ZTSNSt3__110shared_ptrINS_6vectorIhNS_9allocatorIhEEEEEE(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + 32;
  v2 = a1 + 48;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](a1 + 64);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v2);
  return std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v1);
}

_QWORD *__copy_helper_block_e8_32c34_ZTSNSt3__110shared_ptrI7AriHostEE48c57_ZTSNSt3__110shared_ptrINS_6vectorIhNS_9allocatorIhEEEEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[7];
  result[6] = a2[6];
  result[7] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c34_ZTSNSt3__110shared_ptrI7AriHostEE48c57_ZTSNSt3__110shared_ptrINS_6vectorIhNS_9allocatorIhEEEEEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 32;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](a1 + 48);
  return std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v1);
}

uint64_t AriHost::ClientInboundIndCB(AriHost *this, unsigned __int8 *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  AriMsg *BufHeader;
  unsigned int v7;
  const char *v8;
  void *v9;
  uint64_t v10;
  AriHost *v11;
  NSObject *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  const char *v26;
  void *v27;
  const char *v28;
  void *p_p;
  unint64_t *v30;
  unint64_t v31;
  _QWORD block[5];
  std::__shared_weak_count *v34;
  void *v35;
  std::__shared_weak_count *v36;
  int v37;
  unsigned int v38;
  void *__p;
  unint64_t v40;
  char v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unsigned __int8 *v44;
  const void *v45;

  v42 = 0;
  v43 = 0;
  if (qword_253D0AF70)
  {
    v4 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_253D0AF70);
    v43 = v4;
    if (v4)
    {
      v5 = AriHost::SingletonWeakPtr;
      v42 = AriHost::SingletonWeakPtr;
      if (AriHost::SingletonWeakPtr)
      {
        BufHeader = AriMsg::GetBufHeader(this, a2);
        if (BufHeader)
          v7 = (*(_DWORD *)((_BYTE *)BufHeader + 3) & 0x1F800 | ((unsigned __int16)*((_DWORD *)BufHeader + 2) >> 6)) << 15;
        else
          v7 = 0;
        if (AriMsg::GetBufHeader(this, a2))
        {
          if (!((unint64_t)a2 >> 32))
          {
            __p = (void *)0xAAAAAAAAAAAAAAAALL;
            v40 = 0xAAAAAAAAAAAAAAAALL;
            v44 = &a2[(_QWORD)this];
            v45 = this;
            v11 = (AriHost *)std::allocate_shared[abi:ne180100]<std::vector<unsigned char>,std::allocator<std::vector<unsigned char>>,unsigned char const*&,unsigned char const*,void>(&v45, (uint64_t *)&v44, &__p);
            v12 = *(NSObject **)AriHost::GetInstance(v11);
            block[0] = MEMORY[0x24BDAC760];
            block[1] = 1174405120;
            block[2] = ___ZN7AriHost18ClientInboundIndCBEPhm_block_invoke;
            block[3] = &__block_descriptor_tmp_102;
            block[4] = v5;
            v34 = v4;
            p_shared_owners = (unint64_t *)&v4->__shared_owners_;
            do
              v14 = __ldxr(p_shared_owners);
            while (__stxr(v14 + 1, p_shared_owners));
            v37 = HIWORD(v7) & 0xFC00 | (v7 >> 15) & 0x3FF;
            v38 = v7;
            v35 = __p;
            v36 = (std::__shared_weak_count *)v40;
            if (v40)
            {
              v15 = (unint64_t *)(v40 + 8);
              do
                v16 = __ldxr(v15);
              while (__stxr(v16 + 1, v15));
            }
            dispatch_async(v12, block);
            v17 = v36;
            if (v36)
            {
              v18 = (unint64_t *)&v36->__shared_owners_;
              do
                v19 = __ldaxr(v18);
              while (__stlxr(v19 - 1, v18));
              if (!v19)
              {
                ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                std::__shared_weak_count::__release_weak(v17);
              }
            }
            v20 = v34;
            if (v34)
            {
              v21 = (unint64_t *)&v34->__shared_owners_;
              do
                v22 = __ldaxr(v21);
              while (__stlxr(v22 - 1, v21));
              if (!v22)
              {
                ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                std::__shared_weak_count::__release_weak(v20);
              }
            }
            v23 = (std::__shared_weak_count *)v40;
            if (v40)
            {
              v24 = (unint64_t *)(v40 + 8);
              do
                v25 = __ldaxr(v24);
              while (__stlxr(v25 - 1, v24));
              if (!v25)
              {
                ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                std::__shared_weak_count::__release_weak(v23);
              }
            }
            v10 = 0;
            v4 = v43;
            if (!v43)
              return v10;
LABEL_50:
            v30 = (unint64_t *)&v4->__shared_owners_;
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
              std::__shared_weak_count::__release_weak(v4);
            }
            return v10;
          }
          AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "ClientInboundIndCB", (uint64_t)&__p);
          if (v41 >= 0)
            p_p = &__p;
          else
            p_p = __p;
          Ari::Log((Ari *)8, "(%s:%d) Invalid indication size %lu\n", v28, p_p, 1020, a2);
        }
        else
        {
          AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "ClientInboundIndCB", (uint64_t)&__p);
          if (v41 >= 0)
            v27 = &__p;
          else
            v27 = __p;
          Ari::Log((Ari *)8, "(%s:%d) GetBufCtx Invalid CTX(0x%08x)", v26, v27, 1007, 0x8000);
        }
        if (v41 < 0)
          operator delete(__p);
        v10 = 0xFFFFFFFFLL;
        goto LABEL_50;
      }
    }
  }
  else
  {
    v4 = 0;
  }
  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "ClientInboundIndCB", (uint64_t)&__p);
  if (v41 >= 0)
    v9 = &__p;
  else
    v9 = __p;
  Ari::Log((Ari *)0x10, "(%s:%d) Failed to lock on AriHost instance. Shutting down?", v8, v9, 998);
  if (v41 < 0)
    operator delete(__p);
  v10 = 0xFFFFFFFFLL;
  if (v4)
    goto LABEL_50;
  return v10;
}

void sub_20E2512D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a26 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v26 - 88);
  _Unwind_Resume(a1);
}

void ___ZN7AriHost18ClientInboundIndCBEPhm_block_invoke(uint64_t a1)
{
  uint64_t Instance;
  _BOOL8 isAlloc;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  dispatch_queue_t *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void **v26;
  uint64_t v27;
  const char *v28;
  const char *label;
  const char *v30;
  NSObject *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  AriHost *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  const char *v61;
  void **v62;
  const char *v63;
  void **v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD block[5];
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  dispatch_queue_t *v75;
  std::__shared_weak_count *v76;
  void *v77[2];
  char v78;

  Instance = AriHost::GetInstance((AriHost *)a1);
  isAlloc = ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc(Instance + 112, *(_DWORD *)(a1 + 64));
  if (isAlloc)
  {
    v4 = AriHost::GetInstance((AriHost *)isAlloc);
    v5 = ResMgr<AriHost::IndicationHandlerList>::operator[](v4 + 112, *(_DWORD *)(a1 + 64));
    v6 = v5[2];
    v7 = AriHost::GetInstance((AriHost *)v5);
    v8 = ResMgr<AriHost::IndicationHandlerList>::operator[](v7 + 112, *(_DWORD *)(a1 + 64));
    v9 = (uint64_t *)v8[1];
    v10 = AriHost::GetInstance((AriHost *)v8);
    v11 = ResMgr<AriHost::IndicationHandlerList>::operator[](v10 + 112, *(_DWORD *)(a1 + 64));
    if (v9 == v11)
      return;
    v66 = 0;
    v12 = MEMORY[0x24BDAC760];
    v65 = v6;
    while (1)
    {
      v13 = *(unsigned int *)(v9[2] + 8);
      v14 = AriHost::GetInstance((AriHost *)v11);
      v15 = ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc(v14 + 424, v13);
      if (!v15)
        break;
      v16 = AriHost::GetInstance((AriHost *)v15);
      v17 = ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](v16 + 424, v13);
      v19 = *(dispatch_queue_t **)(*v17 + 24);
      v18 = *(std::__shared_weak_count **)(*v17 + 32);
      v75 = v19;
      v76 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
      }
      v22 = v9[2];
      v23 = (std::__shared_weak_count *)v9[3];
      v73 = v22;
      v74 = v23;
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      if (v6 >= 2)
      {
        AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "ClientInboundIndCB_block_invoke", (uint64_t)v77);
        if (v78 >= 0)
          v26 = v77;
        else
          v26 = (void **)v77[0];
        v27 = Ari::MsgDefById((Ari *)(*(_DWORD *)(a1 + 68) >> 26), (*(_DWORD *)(a1 + 68) >> 15) & 0x3FF);
        if (v27)
        {
          if (*(_QWORD *)(v27 + 48))
            v28 = *(const char **)(v27 + 48);
          else
            v28 = "Unknown";
        }
        else
        {
          v28 = "Unknown";
        }
        label = dispatch_queue_get_label(*v19);
        Ari::Log((Ari *)4, "(%s:%d) Multicast[%u] indication %s to cid(%d) q(%s)", v30, v26, 1056, v66, v28, v13, label);
        v12 = MEMORY[0x24BDAC760];
        v6 = v65;
        if (v78 < 0)
          operator delete(v77[0]);
        v66 = (v66 + 1);
      }
      v31 = *v19;
      block[0] = v12;
      block[1] = 1174405120;
      block[2] = ___ZN7AriHost18ClientInboundIndCBEPhm_block_invoke_2;
      block[3] = &__block_descriptor_tmp_101;
      v32 = *(std::__shared_weak_count **)(a1 + 40);
      block[4] = *(_QWORD *)(a1 + 32);
      v68 = v32;
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      v69 = v22;
      v70 = v23;
      if (v23)
      {
        v35 = (unint64_t *)&v23->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      v37 = *(std::__shared_weak_count **)(a1 + 56);
      v71 = *(_QWORD *)(a1 + 48);
      v72 = v37;
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      dispatch_async(v31, block);
      v41 = v72;
      if (v72)
      {
        v42 = (unint64_t *)&v72->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v44 = v70;
      if (v70)
      {
        v45 = (unint64_t *)&v70->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v47 = v68;
      if (v68)
      {
        v48 = (unint64_t *)&v68->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v50 = v74;
      if (v74)
      {
        v51 = (unint64_t *)&v74->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v53 = v76;
      if (v76)
      {
        v54 = (unint64_t *)&v76->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      v9 = (uint64_t *)v9[1];
      v56 = AriHost::GetInstance(v40);
      v11 = ResMgr<AriHost::IndicationHandlerList>::operator[](v56 + 112, *(_DWORD *)(a1 + 64));
      if (v9 == v11)
        return;
    }
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "ClientInboundIndCB_block_invoke", (uint64_t)v77);
    if (v78 >= 0)
      v64 = v77;
    else
      v64 = (void **)v77[0];
    Ari::Log((Ari *)8, "(%s:%d) Dropping ind(%d-0x%x): Client(0x%04x) is no longer registered", v63, v64, 1048, *(_DWORD *)(a1 + 68) >> 26, (*(_DWORD *)(a1 + 68) >> 15) & 0x3FF, v13);
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "ClientInboundIndCB_block_invoke", (uint64_t)v77);
    v57 = *(_DWORD *)(a1 + 68);
    v58 = (v57 >> 15) & 0x3FF;
    v59 = Ari::MsgDefById((Ari *)(v57 >> 26), (v57 >> 15) & 0x3FF);
    v61 = "Unknown";
    if (v59 && *(_QWORD *)(v59 + 48))
      v61 = *(const char **)(v59 + 48);
    v62 = (void **)v77[0];
    if (v78 >= 0)
      v62 = v77;
    Ari::Log((Ari *)8, "(%s:%d) Received indication %s gmid (%u) has not registered with any handler", v60, v62, 1032, v61, v58);
  }
  if (v78 < 0)
    operator delete(v77[0]);
}

void sub_20E2517A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  if (*(char *)(v27 - 105) < 0)
    operator delete(*(void **)(v27 - 128));
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN7AriHost18ClientInboundIndCBEPhm_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 48) + 16))(**(_QWORD **)(a1 + 48), **(_QWORD **)(a1 + 64), *(_DWORD *)(*(_QWORD *)(a1 + 64) + 8) - **(_QWORD **)(a1 + 64));
}

uint64_t AriHost::stallClients_nl(AriHost *this)
{
  const char *v2;
  void **v3;
  void *__p[2];
  char v6;

  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "stallClients_nl", (uint64_t)__p);
  if (v6 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  Ari::Log((Ari *)0x20, "(%s:%d) stalling clients", v2, v3, 1072);
  if (v6 < 0)
    operator delete(__p[0]);
  *((_BYTE *)this + 312) = 1;
  *((_BYTE *)this + 392) = 1;
  return 0;
}

void sub_20E25189C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AriHost::flushLowPriorityRequests(NSObject **this, NSObject *a2)
{
  std::__shared_weak_count *v4;
  NSObject *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  const char *v11;
  void **v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD block[6];
  std::__shared_weak_count *v17;
  void *v18[2];
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v20 = 0;
  v21 = 0;
  if (qword_253D0AF70
    && (v4 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_253D0AF70), (v21 = v4) != 0)
    && (v20 = AriHost::SingletonWeakPtr) != 0)
  {
    v5 = *this;
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZN7AriHost24flushLowPriorityRequestsEP16dispatch_group_s_block_invoke;
    block[3] = &__block_descriptor_tmp_105;
    block[4] = this;
    block[5] = AriHost::SingletonWeakPtr;
    v17 = v4;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    dispatch_group_async(a2, v5, block);
    v8 = v17;
    if (v17)
    {
      v9 = (unint64_t *)&v17->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "flushLowPriorityRequests", (uint64_t)v18);
    if (v19 >= 0)
      v12 = v18;
    else
      v12 = (void **)v18[0];
    Ari::Log((Ari *)0x10, "(%s:%d) Failed to lock on AriHost instance. Shutting down?", v11, v12, 1083);
    if (v19 < 0)
      operator delete(v18[0]);
  }
  v13 = v21;
  if (v21)
  {
    v14 = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20E251A2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 33) < 0)
    operator delete(*(void **)(v1 - 56));
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v1 - 32);
  _Unwind_Resume(a1);
}

uint64_t ___ZN7AriHost24flushLowPriorityRequestsEP16dispatch_group_s_block_invoke(uint64_t a1)
{
  uint64_t v1;
  const char *v2;
  void **v3;
  uint64_t v4;
  void *__p[2];
  char v7;

  v1 = *(_QWORD *)(a1 + 32);
  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "flushLowPriorityRequests_block_invoke", (uint64_t)__p);
  v3 = (void **)__p[0];
  if (v7 >= 0)
    v3 = __p;
  if (*(char *)(v1 + 423) >= 0)
    v4 = v1 + 400;
  else
    v4 = *(_QWORD *)(v1 + 400);
  Ari::Log((Ari *)0x20, "(%s:%d) Flushing %s", v2, v3, 1089, v4);
  if (v7 < 0)
    operator delete(__p[0]);
  return Ari::ClientWorkQueue::flush((Ari::ClientWorkQueue *)(v1 + 344));
}

void sub_20E251AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriHost::flushStalledRequests_nl(AriHost *this)
{
  const char *v2;
  void **v3;
  void *__p[2];
  char v6;

  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "flushStalledRequests_nl", (uint64_t)__p);
  if (v6 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  Ari::Log((Ari *)4, "(%s:%d) flushing host", v2, v3, 1097);
  if (v6 < 0)
    operator delete(__p[0]);
  return Ari::ClientWorkQueue::flush((AriHost *)((char *)this + 264));
}

void sub_20E251B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriHost::TransactionMgr::cancelBlockedRequests(AriHost::TransactionMgr *this)
{
  const char *v2;
  void **v3;
  unint64_t v4;
  int v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  void **v10;
  void **v11;
  int v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  void **v17;
  void **v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  int v26;
  uint8x8_t v27;
  unint64_t v28;
  uint64_t **v29;
  uint64_t *i;
  unint64_t v31;
  _QWORD *v32;
  float v33;
  float v34;
  _BOOL8 v35;
  unint64_t v36;
  unint64_t v37;
  size_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  const char *v43;
  void **v44;
  unsigned int v45;
  void *v46[2];
  char v47;
  unint64_t v48;
  unint64_t v49;
  void *__p[2];
  char v51;

  if (*((_QWORD *)this + 21))
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "cancelBlockedRequests", (uint64_t)__p);
    if (v51 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    Ari::Log((Ari *)0x20, "(%s:%d) cancelling blocked requests for cid 0x%x", v2, v3, 2249, *((unsigned int *)this + 36));
    if (v51 < 0)
      operator delete(__p[0]);
    v45 = 0;
    do
    {
      while (1)
      {
        v48 = 0xAAAAAAAAAAAAAAAALL;
        v49 = 0xAAAAAAAAAAAAAAAALL;
        AriHost::TransactionMgr::unblockMessage(this, &v48);
        v4 = v48;
        if (v48)
        {
          AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "cancelBlockedRequests", (uint64_t)__p);
          v5 = v51;
          v6 = (void **)__p[0];
          v8 = *(unsigned int *)(v48 + 32);
          v7 = *(unsigned int *)(v48 + 36);
          GetBufDigest(**(AriMsg ***)(v48 + 16), 0, (const unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v48 + 16) + 8) - **(_QWORD **)(v48 + 16)), (uint64_t)v46);
          v10 = __p;
          if (v5 < 0)
            v10 = v6;
          if (v47 >= 0)
            v11 = v46;
          else
            v11 = (void **)v46[0];
          Ari::Log((Ari *)0x20, "(%s:%d) canceling ctx 0x%x gmid 0x%x %s", v9, v10, 2252, v8, v7, v11);
          if (v47 < 0)
            operator delete(v46[0]);
          if (v51 < 0)
            operator delete(__p[0]);
          if (AriHost::CancelTrx((AriHost *)*(unsigned int *)(v48 + 32), *(_DWORD *)(v48 + 36), -85))
          {
            AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "cancelBlockedRequests", (uint64_t)__p);
            v12 = v51;
            v13 = (void **)__p[0];
            v15 = *(unsigned int *)(v48 + 32);
            v14 = *(unsigned int *)(v48 + 36);
            GetBufDigest(**(AriMsg ***)(v48 + 16), 0, (const unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v48 + 16) + 8) - **(_QWORD **)(v48 + 16)), (uint64_t)v46);
            v17 = __p;
            if (v12 < 0)
              v17 = v13;
            if (v47 >= 0)
              v18 = v46;
            else
              v18 = (void **)v46[0];
            Ari::Log((Ari *)8, "(%s:%d) error cancelling ctx 0x%x gmid 0x%x %s", v16, v17, 2255, v15, v14, v18);
            if (v47 < 0)
              operator delete(v46[0]);
            if (v51 < 0)
              operator delete(__p[0]);
            v45 = -1;
          }
        }
        v19 = (std::__shared_weak_count *)v49;
        if (v49)
        {
          v20 = (unint64_t *)(v49 + 8);
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
            break;
        }
        if (!v4)
          goto LABEL_36;
      }
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    while (v4);
LABEL_36:
    v22 = (uint64_t *)*((_QWORD *)this + 24);
    if (v22)
    {
      v23 = (uint64_t *)((char *)this + 216);
      v24 = (_QWORD *)((char *)this + 232);
      v25 = *((_QWORD *)this + 28);
      do
      {
        v26 = *((_DWORD *)v22 + 4);
        if (v25)
        {
          v27 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
          v27.i16[0] = vaddlv_u8(v27);
          if (v27.u32[0] > 1uLL)
          {
            v28 = v26;
            if (v25 <= v26)
              v28 = v26 % v25;
          }
          else
          {
            v28 = (v25 - 1) & v26;
          }
          v29 = *(uint64_t ***)(*v23 + 8 * v28);
          if (v29)
          {
            for (i = *v29; i; i = (uint64_t *)*i)
            {
              v31 = i[1];
              if (v31 == v26)
              {
                if (*((_DWORD *)i + 4) == v26)
                  goto LABEL_77;
              }
              else
              {
                if (v27.u32[0] > 1uLL)
                {
                  if (v31 >= v25)
                    v31 %= v25;
                }
                else
                {
                  v31 &= v25 - 1;
                }
                if (v31 != v28)
                  break;
              }
            }
          }
        }
        else
        {
          v28 = 0xAAAAAAAAAAAAAAAALL;
        }
        v32 = operator new(0x18uLL);
        *v32 = 0;
        v32[1] = v26;
        *((_DWORD *)v32 + 4) = v26;
        v33 = (float)(unint64_t)(*((_QWORD *)this + 30) + 1);
        v34 = *((float *)this + 62);
        if (!v25 || (float)(v34 * (float)v25) < v33)
        {
          v35 = (v25 & (v25 - 1)) != 0;
          if (v25 < 3)
            v35 = 1;
          v36 = v35 | (2 * v25);
          v37 = vcvtps_u32_f32(v33 / v34);
          if (v36 <= v37)
            v38 = v37;
          else
            v38 = v36;
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>((uint64_t)this + 216, v38);
          v25 = *((_QWORD *)this + 28);
          if ((v25 & (v25 - 1)) != 0)
          {
            if (v25 <= v26)
              v28 = v26 % v25;
            else
              v28 = v26;
          }
          else
          {
            v28 = (v25 - 1) & v26;
          }
        }
        v39 = *v23;
        v40 = *(_QWORD **)(*v23 + 8 * v28);
        if (v40)
        {
          *v32 = *v40;
        }
        else
        {
          *v32 = *v24;
          *v24 = v32;
          *(_QWORD *)(v39 + 8 * v28) = v24;
          if (!*v32)
            goto LABEL_76;
          v41 = *(_QWORD *)(*v32 + 8);
          if ((v25 & (v25 - 1)) != 0)
          {
            if (v41 >= v25)
              v41 %= v25;
          }
          else
          {
            v41 &= v25 - 1;
          }
          v40 = (_QWORD *)(*v23 + 8 * v41);
        }
        *v40 = v32;
LABEL_76:
        ++*((_QWORD *)this + 30);
LABEL_77:
        v22 = (uint64_t *)*v22;
      }
      while (v22);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::clear((_QWORD *)this + 22);
    return v45;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "cancelBlockedRequests", (uint64_t)__p);
    if (v51 >= 0)
      v44 = __p;
    else
      v44 = (void **)__p[0];
    Ari::Log((Ari *)4, "(%s:%d) no blocked requests to cancel for cid 0x%x", v43, v44, 2244, *((unsigned int *)this + 36));
    if (v51 < 0)
      operator delete(__p[0]);
    return 0;
  }
}

void sub_20E252058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriHost::cancelStalledRequests_nl(AriHost *this)
{
  const char *v2;
  void **v3;
  uint64_t result;
  void *__p[2];
  char v6;

  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "cancelStalledRequests_nl", (uint64_t)__p);
  if (v6 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  Ari::Log((Ari *)4, "(%s:%d) cancelling host stalled requests and stalling client work queue", v2, v3, 1112);
  if (v6 < 0)
    operator delete(__p[0]);
  result = Ari::ClientWorkQueue::cancel((AriHost *)((char *)this + 264));
  if (!(_DWORD)result)
    return Ari::ClientWorkQueue::cancel((AriHost *)((char *)this + 344));
  return result;
}

void sub_20E252160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriHost::startClient_nl(AriHost *this, uint64_t a2)
{
  char *v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const char *v10;
  void **v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  NSObject **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  NSObject *v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  NSObject *v28;
  unint64_t *v29;
  unint64_t v30;
  dispatch_time_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  const char *v53;
  void **v54;
  _QWORD v55[6];
  std::__shared_weak_count *v56;
  int v57;
  _QWORD v58[6];
  std::__shared_weak_count *v59;
  int v60;
  _QWORD v61[3];
  char v62;
  _QWORD block[5];
  std::__shared_weak_count *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t v67;
  unint64_t v68;
  NSObject **v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  void *v73[2];
  uint64_t (*v74)(uint64_t);
  void *v75;
  _QWORD *v76;

  v4 = (char *)this + 424;
  if (ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc((uint64_t)this + 424, a2))
  {
    v5 = ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[]((uint64_t)v4, a2);
    v7 = *(_QWORD *)(*v5 + 80);
    v6 = *(std::__shared_weak_count **)(*v5 + 88);
    v71 = v7;
    v72 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    if (v7)
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "startClient_nl", (uint64_t)v73);
      if (SHIBYTE(v74) >= 0)
        v11 = v73;
      else
        v11 = (void **)v73[0];
      Ari::Log((Ari *)0x20, "(%s:%d) Client(0x%04x) start", v10, v11, 1129, a2);
      if (SHIBYTE(v74) < 0)
        operator delete(v73[0]);
      v12 = ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[]((uint64_t)v4, a2);
      v14 = *(NSObject ***)(*v12 + 24);
      v13 = *(std::__shared_weak_count **)(*v12 + 32);
      v69 = v14;
      v70 = v13;
      if (v13)
      {
        v15 = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v67 = 0xAAAAAAAAAAAAAAAALL;
      v68 = 0xAAAAAAAAAAAAAAAALL;
      AriDispatch::Group::Create(&v67);
      v17 = v67;
      v18 = *v14;
      v19 = (void *)MEMORY[0x24BDAC760];
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 1174405120;
      block[2] = ___ZN7AriHost14startClient_nlEi_block_invoke;
      block[3] = &__block_descriptor_tmp_110;
      block[4] = v7;
      v64 = v6;
      if (v6)
      {
        v20 = (unint64_t *)&v6->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      v22 = v68;
      v65 = v17;
      v66 = (std::__shared_weak_count *)v68;
      if (v68)
      {
        v23 = (unint64_t *)(v68 + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      dispatch_group_async(*(dispatch_group_t *)(v17 + 16), v18, block);
      v61[0] = 0;
      v61[1] = v61;
      v61[2] = 0x2000000000;
      v62 = 0;
      v25 = *(NSObject **)this;
      v58[0] = v19;
      v58[1] = 1174405120;
      v58[2] = ___ZN7AriHost14startClient_nlEi_block_invoke_111;
      v58[3] = &unk_24C9056C8;
      v58[5] = v17;
      v59 = (std::__shared_weak_count *)v22;
      if (v22)
      {
        v26 = (unint64_t *)(v22 + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v58[4] = v61;
      v60 = a2;
      v73[0] = v19;
      v73[1] = (void *)0x40000000;
      v74 = ___ZN11AriDispatch5Group6notifyEP16dispatch_queue_sU13block_pointerFvvE_block_invoke;
      v75 = &unk_24C9340A0;
      v76 = v58;
      AriDispatch::Group::notify((uint64_t *)v17, v25, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)v73);
      v28 = *(NSObject **)this;
      v55[0] = v19;
      v55[1] = 1174405120;
      v55[2] = ___ZN7AriHost14startClient_nlEi_block_invoke_115;
      v55[3] = &unk_24C905700;
      v55[5] = v17;
      v56 = (std::__shared_weak_count *)v22;
      if (v22)
      {
        v29 = (unint64_t *)(v22 + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v57 = a2;
      v55[4] = v61;
      v31 = dispatch_time(0, 5000000000);
      AriDispatch::Group::notify((uint64_t *)v17, v28, v31, (uint64_t)v55);
      v32 = v56;
      if (v56)
      {
        v33 = (unint64_t *)&v56->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = v59;
      if (v59)
      {
        v36 = (unint64_t *)&v59->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      _Block_object_dispose(v61, 8);
      v38 = v66;
      if (v66)
      {
        v39 = (unint64_t *)&v66->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v41 = v64;
      if (v64)
      {
        v42 = (unint64_t *)&v64->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v44 = (std::__shared_weak_count *)v68;
      if (v68)
      {
        v45 = (unint64_t *)(v68 + 8);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v47 = v70;
      if (v70)
      {
        v48 = (unint64_t *)&v70->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v6 = v72;
    }
    if (v6)
    {
      v50 = (unint64_t *)&v6->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    return 0;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "startClient_nl", (uint64_t)v73);
    if (SHIBYTE(v74) >= 0)
      v54 = v73;
    else
      v54 = (void **)v73[0];
    Ari::Log((Ari *)8, "(%s:%d) Trying to start an unregistered client(0x%x). Ignored", v53, v54, 1124, a2);
    if (SHIBYTE(v74) < 0)
      operator delete(v73[0]);
    return 0xFFFFFFFFLL;
  }
}

void sub_20E252624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v38);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v39 + 40);
  _Block_object_dispose(&a28, 8);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)&a38);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v40 - 168);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v40 - 152);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v40 - 136);
  _Unwind_Resume(a1);
}

void sub_20E2526B4()
{
  uint64_t v0;

  if (*(char *)(v0 - 97) < 0)
    operator delete(*(void **)(v0 - 120));
  JUMPOUT(0x20E2526ACLL);
}

uint64_t ___ZN7AriHost14startClient_nlEi_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 16))(**(_QWORD **)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16));
}

_QWORD *__copy_helper_block_e8_32c56_ZTSNSt3__110shared_ptrIN7AriHost18ClientEventHandlerEEE48c47_ZTSNSt3__110shared_ptrIN11AriDispatch5GroupEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[7];
  result[6] = a2[6];
  result[7] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c56_ZTSNSt3__110shared_ptrIN7AriHost18ClientEventHandlerEEE48c47_ZTSNSt3__110shared_ptrIN11AriDispatch5GroupEEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 32;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](a1 + 48);
  return std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v1);
}

void ___ZN7AriHost14startClient_nlEi_block_invoke_111(uint64_t a1)
{
  const char *v2;
  void **v3;
  const char *v4;
  void **v5;
  void *__p[2];
  char v7;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "startClient_nl_block_invoke", (uint64_t)__p);
    if (v7 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    Ari::Log((Ari *)0x10, "(%s:%d) Client(0x%04x) start done (took too long)", v2, v3, 1142, *(unsigned int *)(a1 + 56));
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "startClient_nl_block_invoke", (uint64_t)__p);
    if (v7 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    Ari::Log((Ari *)4, "(%s:%d) Client(0x%04x) start done", v4, v5, 1146, *(unsigned int *)(a1 + 56));
  }
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_20E252834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN7AriHost14startClient_nlEi_block_invoke_115(uint64_t a1, int a2)
{
  const char *v3;
  void **v4;
  void *__p[2];
  char v6;

  if (a2)
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "startClient_nl_block_invoke", (uint64_t)__p);
    if (v6 >= 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    Ari::Log((Ari *)0x10, "(%s:%d) client 0x%x did not start in %dms.  Likely client queue is stuck or stalled!", v3, v4, 1153, *(unsigned int *)(a1 + 56), 5000);
    if (v6 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
}

void sub_20E2528EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriHost::start_nl(AriHost *this, uint64_t a2, uint64_t a3)
{
  uint64_t started;

  started = AriHost::startClient_nl(this, a2);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**((_QWORD **)this + 76) + 80))(*((_QWORD *)this + 76), a2, a3, 1);
  return started;
}

uint64_t AriHost::stopClient_nl(NSObject **a1, uint64_t a2, void (**a3)(_QWORD))
{
  uint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const char *v12;
  void **v13;
  AriHost *v14;
  uint64_t Instance;
  uint64_t *v16;
  NSObject **v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  NSObject *v22;
  void *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  NSObject *v30;
  unint64_t *v31;
  unint64_t v32;
  NSObject *v33;
  unint64_t *v34;
  unint64_t v35;
  dispatch_time_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  const char *v55;
  void **v56;
  unint64_t *v58;
  unint64_t v59;
  _QWORD v60[6];
  std::__shared_weak_count *v61;
  int v62;
  _QWORD v63[7];
  std::__shared_weak_count *v64;
  int v65;
  _QWORD v66[3];
  char v67;
  _QWORD block[5];
  std::__shared_weak_count *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  NSObject **v72;
  std::__shared_weak_count *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  void *v78[2];
  uint64_t (*v79)(uint64_t);
  void *v80;
  _QWORD *v81;

  v6 = (uint64_t)(a1 + 53);
  if (ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc((uint64_t)(a1 + 53), a2))
  {
    v7 = ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](v6, a2);
    v9 = *(_QWORD *)(*v7 + 96);
    v8 = *(std::__shared_weak_count **)(*v7 + 104);
    v76 = v9;
    v77 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    if (v9)
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "stopClient_nl", (uint64_t)v78);
      if (SHIBYTE(v79) >= 0)
        v13 = v78;
      else
        v13 = (void **)v78[0];
      Ari::Log((Ari *)0x20, "(%s:%d) Client(0x%04x) stop", v12, v13, 1184, a2);
      if (SHIBYTE(v79) < 0)
        operator delete(v78[0]);
      v74 = 0xAAAAAAAAAAAAAAAALL;
      v75 = 0xAAAAAAAAAAAAAAAALL;
      AriDispatch::Group::Create(&v74);
      Instance = AriHost::GetInstance(v14);
      v16 = ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](Instance + 424, a2);
      v17 = *(NSObject ***)(*v16 + 24);
      v18 = *(std::__shared_weak_count **)(*v16 + 32);
      v72 = v17;
      v73 = v18;
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v21 = v74;
      v22 = *v17;
      v23 = (void *)MEMORY[0x24BDAC760];
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 1174405120;
      block[2] = ___ZN7AriHost13stopClient_nlEiU13block_pointerFvvE_block_invoke;
      block[3] = &__block_descriptor_tmp_120;
      block[4] = v9;
      v69 = v8;
      if (v8)
      {
        v24 = (unint64_t *)&v8->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v26 = v75;
      v70 = v21;
      v71 = (std::__shared_weak_count *)v75;
      if (v75)
      {
        v27 = (unint64_t *)(v75 + 8);
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      dispatch_group_async(*(dispatch_group_t *)(v21 + 16), v22, block);
      v29 = _Block_copy(a3);
      v66[0] = 0;
      v66[1] = v66;
      v66[2] = 0x2000000000;
      v67 = 0;
      v30 = *a1;
      v63[0] = v23;
      v63[1] = 1174405120;
      v63[2] = ___ZN7AriHost13stopClient_nlEiU13block_pointerFvvE_block_invoke_121;
      v63[3] = &unk_24C905768;
      v63[6] = v21;
      v64 = (std::__shared_weak_count *)v26;
      if (v26)
      {
        v31 = (unint64_t *)(v26 + 8);
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      v65 = a2;
      v63[4] = v29;
      v63[5] = v66;
      v78[0] = v23;
      v78[1] = (void *)0x40000000;
      v79 = ___ZN11AriDispatch5Group6notifyEP16dispatch_queue_sU13block_pointerFvvE_block_invoke;
      v80 = &unk_24C9340A0;
      v81 = v63;
      AriDispatch::Group::notify((uint64_t *)v21, v30, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)v78);
      v33 = *a1;
      v60[0] = v23;
      v60[1] = 1174405120;
      v60[2] = ___ZN7AriHost13stopClient_nlEiU13block_pointerFvvE_block_invoke_125;
      v60[3] = &unk_24C9057A0;
      v60[5] = v21;
      v61 = (std::__shared_weak_count *)v26;
      if (v26)
      {
        v34 = (unint64_t *)(v26 + 8);
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      v62 = a2;
      v60[4] = v66;
      v36 = dispatch_time(0, 5000000000);
      AriDispatch::Group::notify((uint64_t *)v21, v33, v36, (uint64_t)v60);
      v37 = v61;
      if (v61)
      {
        v38 = (unint64_t *)&v61->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = v64;
      if (v64)
      {
        v41 = (unint64_t *)&v64->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      _Block_object_dispose(v66, 8);
      v43 = v71;
      if (v71)
      {
        v44 = (unint64_t *)&v71->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v46 = v69;
      if (v69)
      {
        v47 = (unint64_t *)&v69->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      v49 = v73;
      if (v73)
      {
        v50 = (unint64_t *)&v73->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v52 = (std::__shared_weak_count *)v75;
      if (v75)
      {
        v53 = (unint64_t *)(v75 + 8);
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v8 = v77;
    }
    else
    {
      a3[2](a3);
    }
    if (v8)
    {
      v58 = (unint64_t *)&v8->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    return 0;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "stopClient_nl", (uint64_t)v78);
    if (SHIBYTE(v79) >= 0)
      v56 = v78;
    else
      v56 = (void **)v78[0];
    Ari::Log((Ari *)8, "(%s:%d) Trying to stop an unregistered client(0x%x). Ignored", v55, v56, 1178, a2);
    if (SHIBYTE(v79) < 0)
      operator delete(v78[0]);
    a3[2](a3);
    return 0xFFFFFFFFLL;
  }
}

void sub_20E252E30(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v1 - 136);
  _Unwind_Resume(a1);
}

void sub_20E252EC8()
{
  uint64_t v0;

  if (*(char *)(v0 - 97) < 0)
    operator delete(*(void **)(v0 - 120));
  JUMPOUT(0x20E252EC0);
}

uint64_t ___ZN7AriHost13stopClient_nlEiU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 16))(**(_QWORD **)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16));
}

void ___ZN7AriHost13stopClient_nlEiU13block_pointerFvvE_block_invoke_121(uint64_t a1)
{
  const char *v2;
  void **v3;
  const char *v4;
  void **v5;
  void *__p[2];
  char v7;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "stopClient_nl_block_invoke", (uint64_t)__p);
    if (v7 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    Ari::Log((Ari *)0x10, "(%s:%d) Client(0x%04x) stop done (took too long)", v2, v3, 1199, *(unsigned int *)(a1 + 64));
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "stopClient_nl_block_invoke", (uint64_t)__p);
    if (v7 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    Ari::Log((Ari *)4, "(%s:%d) Client(0x%04x) stop done", v4, v5, 1203, *(unsigned int *)(a1 + 64));
  }
  if (v7 < 0)
    operator delete(__p[0]);
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  _Block_release(*(const void **)(a1 + 32));
}

void sub_20E252FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_48c47_ZTSNSt3__110shared_ptrIN11AriDispatch5GroupEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_48c47_ZTSNSt3__110shared_ptrIN11AriDispatch5GroupEEE(uint64_t a1)
{
  return std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](a1 + 48);
}

void ___ZN7AriHost13stopClient_nlEiU13block_pointerFvvE_block_invoke_125(uint64_t a1, int a2)
{
  const char *v3;
  void **v4;
  void *__p[2];
  char v6;

  if (a2)
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "stopClient_nl_block_invoke", (uint64_t)__p);
    if (v6 >= 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Client 0x%x did not stop in %dms.  Likely client queue is stuck or stalled!", v3, v4, 1212, *(unsigned int *)(a1 + 56), 5000);
    if (v6 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
}

void sub_20E2530D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriHost::stop_nl(AriHost *this, uint64_t a2, void (*a3)(_QWORD))
{
  void (*v4[6])(_QWORD);
  int v5;

  v4[0] = (void (*)(_QWORD))MEMORY[0x24BDAC760];
  v4[1] = (void (*)(_QWORD))0x40000000;
  v4[2] = (void (*)(_QWORD))___ZN7AriHost7stop_nlEiy_block_invoke;
  v4[3] = (void (*)(_QWORD))&__block_descriptor_tmp_128;
  v5 = a2;
  v4[4] = (void (*)(_QWORD))this;
  v4[5] = a3;
  return AriHost::stopClient_nl((NSObject **)this, a2, v4);
}

uint64_t ___ZN7AriHost7stop_nlEiy_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 608) + 80))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 608), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40), 2);
}

uint64_t AriHost::enterLPM_nl(AriHost *this, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void **v12;
  uint64_t *v13;
  const char *v14;
  _QWORD *v15;
  AriHost *v16;
  uint64_t Instance;
  uint64_t *v18;
  NSObject **v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  NSObject *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  const char *v33;
  void **v34;
  unint64_t *v36;
  unint64_t v37;
  _QWORD v38[7];
  int v39;
  _QWORD block[5];
  std::__shared_weak_count *v41;
  AriHost *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  void *v45[2];
  char v46;

  v6 = (char *)this + 424;
  if (ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc((uint64_t)this + 424, a2))
  {
    v7 = ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[]((uint64_t)v6, a2);
    v9 = *(_QWORD *)(*v7 + 48);
    v8 = *(std::__shared_weak_count **)(*v7 + 56);
    v43 = v9;
    v44 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    if (v9)
    {
      v12 = v45;
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "enterLPM_nl", (uint64_t)v45);
      if (v46 < 0)
        v12 = (void **)v45[0];
      v13 = ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[]((uint64_t)v6, a2);
      v15 = (_QWORD *)*v13;
      if (*(char *)(*v13 + 23) < 0)
        v15 = (_QWORD *)*v15;
      Ari::Log((Ari *)0x20, "(%s:%d) Client(0x%04x: %s) enter-LPM", v14, v12, 1254, a2, v15);
      if (v46 < 0)
        operator delete(v45[0]);
      v16 = (AriHost *)dispatch_group_create();
      Instance = AriHost::GetInstance(v16);
      v18 = ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](Instance + 424, a2);
      v19 = *(NSObject ***)(*v18 + 24);
      v20 = *(std::__shared_weak_count **)(*v18 + 32);
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v23 = *v19;
      v24 = MEMORY[0x24BDAC760];
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 1174405120;
      block[2] = ___ZN7AriHost11enterLPM_nlEiyj_block_invoke;
      block[3] = &__block_descriptor_tmp_131;
      block[4] = v9;
      v41 = v8;
      if (v8)
      {
        v25 = (unint64_t *)&v8->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      v42 = v16;
      dispatch_group_async((dispatch_group_t)v16, v23, block);
      v27 = *(NSObject **)this;
      v38[0] = v24;
      v38[1] = 0x40000000;
      v38[2] = ___ZN7AriHost11enterLPM_nlEiyj_block_invoke_132;
      v38[3] = &__block_descriptor_tmp_135;
      v38[4] = this;
      v38[5] = v16;
      v39 = a2;
      v38[6] = a3;
      dispatch_group_notify((dispatch_group_t)v16, v27, v38);
      v28 = v41;
      if (v41)
      {
        v29 = (unint64_t *)&v41->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      if (v20)
      {
        v31 = (unint64_t *)&v20->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v8 = v44;
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**((_QWORD **)this + 76) + 80))(*((_QWORD *)this + 76), a2, a3, 3);
    }
    if (v8)
    {
      v36 = (unint64_t *)&v8->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    return 0;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "enterLPM_nl", (uint64_t)v45);
    if (v46 >= 0)
      v34 = v45;
    else
      v34 = (void **)v45[0];
    Ari::Log((Ari *)8, "(%s:%d) Trying to enter LPM for an unregistered client(0x%x). Ignored", v33, v34, 1247, a2);
    if (v46 < 0)
      operator delete(v45[0]);
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**((_QWORD **)this + 76) + 80))(*((_QWORD *)this + 76), a2, a3, 3);
    return 0xFFFFFFFFLL;
  }
}

void sub_20E253480(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v1 - 120);
  _Unwind_Resume(a1);
}

uint64_t ___ZN7AriHost11enterLPM_nlEiyj_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 16))(**(_QWORD **)(a1 + 32), *(_QWORD *)(a1 + 48));
}

uint64_t __copy_helper_block_e8_32c56_ZTSNSt3__110shared_ptrIN7AriHost18ClientEventHandlerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c56_ZTSNSt3__110shared_ptrIN7AriHost18ClientEventHandlerEEE(uint64_t a1)
{
  return std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](a1 + 32);
}

void ___ZN7AriHost11enterLPM_nlEiyj_block_invoke_132(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t *v6;
  const char *v7;
  _QWORD *v8;
  const char *v9;
  void **v10;
  void *__p[2];
  char v12;

  v2 = *(_QWORD *)(a1 + 32);
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
  v3 = v2 + 424;
  if (ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc(v2 + 424, *(_DWORD *)(a1 + 56)))
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 608) + 80))(*(_QWORD *)(v2 + 608), *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 48), 3);
    v4 = __p;
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "enterLPM_nl_block_invoke", (uint64_t)__p);
    if (v12 < 0)
      v4 = (void **)__p[0];
    v5 = *(unsigned int *)(a1 + 56);
    v6 = ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](v3, v5);
    v8 = (_QWORD *)*v6;
    if (*(char *)(*v6 + 23) < 0)
      v8 = (_QWORD *)*v8;
    Ari::Log((Ari *)0x20, "(%s:%d) Client(0x%04x: %s) enter-LPM done", v7, v4, 1268, v5, v8);
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "enterLPM_nl_block_invoke", (uint64_t)__p);
    if (v12 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    Ari::Log((Ari *)0x20, "(%s:%d) Client(0x%04x) ignoring enter-LPM done: client has deregistered, or not yet reregistered", v9, v10, 1272, *(unsigned int *)(a1 + 56));
  }
  if (v12 < 0)
    operator delete(__p[0]);
}

void sub_20E25363C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriHost::exitLPM_nl(AriHost *this, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void **v12;
  uint64_t *v13;
  const char *v14;
  _QWORD *v15;
  AriHost *v16;
  uint64_t Instance;
  uint64_t *v18;
  NSObject **v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  NSObject *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  const char *v33;
  void **v34;
  unint64_t *v36;
  unint64_t v37;
  _QWORD v38[7];
  int v39;
  _QWORD block[5];
  std::__shared_weak_count *v41;
  AriHost *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  void *v45[2];
  char v46;

  v6 = (char *)this + 424;
  if (ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc((uint64_t)this + 424, a2))
  {
    AriHost::flushStalledRequests_nl(this);
    v7 = ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[]((uint64_t)v6, a2);
    v9 = *(_QWORD *)(*v7 + 64);
    v8 = *(std::__shared_weak_count **)(*v7 + 72);
    v43 = v9;
    v44 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    if (v9)
    {
      v12 = v45;
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "exitLPM_nl", (uint64_t)v45);
      if (v46 < 0)
        v12 = (void **)v45[0];
      v13 = ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[]((uint64_t)v6, a2);
      v15 = (_QWORD *)*v13;
      if (*(char *)(*v13 + 23) < 0)
        v15 = (_QWORD *)*v15;
      Ari::Log((Ari *)0x20, "(%s:%d) Client(0x%04x: %s) exit-LPM", v14, v12, 1300, a2, v15);
      if (v46 < 0)
        operator delete(v45[0]);
      v16 = (AriHost *)dispatch_group_create();
      Instance = AriHost::GetInstance(v16);
      v18 = ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](Instance + 424, a2);
      v19 = *(NSObject ***)(*v18 + 24);
      v20 = *(std::__shared_weak_count **)(*v18 + 32);
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v23 = *v19;
      v24 = MEMORY[0x24BDAC760];
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 1174405120;
      block[2] = ___ZN7AriHost10exitLPM_nlEiy_block_invoke;
      block[3] = &__block_descriptor_tmp_138;
      block[4] = v9;
      v41 = v8;
      if (v8)
      {
        v25 = (unint64_t *)&v8->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      v42 = v16;
      dispatch_group_async((dispatch_group_t)v16, v23, block);
      v27 = *(NSObject **)this;
      v38[0] = v24;
      v38[1] = 0x40000000;
      v38[2] = ___ZN7AriHost10exitLPM_nlEiy_block_invoke_139;
      v38[3] = &__block_descriptor_tmp_142;
      v38[4] = this;
      v38[5] = v16;
      v39 = a2;
      v38[6] = a3;
      dispatch_group_notify((dispatch_group_t)v16, v27, v38);
      v28 = v41;
      if (v41)
      {
        v29 = (unint64_t *)&v41->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      if (v20)
      {
        v31 = (unint64_t *)&v20->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v8 = v44;
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**((_QWORD **)this + 76) + 80))(*((_QWORD *)this + 76), a2, a3, 4);
    }
    if (v8)
    {
      v36 = (unint64_t *)&v8->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    return 0;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "exitLPM_nl", (uint64_t)v45);
    if (v46 >= 0)
      v34 = v45;
    else
      v34 = (void **)v45[0];
    Ari::Log((Ari *)8, "(%s:%d) Trying to exit LPM for an unregistered client(0x%04x). Ignored", v33, v34, 1289, a2);
    if (v46 < 0)
      operator delete(v45[0]);
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**((_QWORD **)this + 76) + 80))(*((_QWORD *)this + 76), a2, a3, 4);
    return 0xFFFFFFFFLL;
  }
}

void sub_20E253980(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v1 - 120);
  _Unwind_Resume(a1);
}

uint64_t ___ZN7AriHost10exitLPM_nlEiy_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 16))(**(_QWORD **)(a1 + 32), *(_QWORD *)(a1 + 48));
}

void ___ZN7AriHost10exitLPM_nlEiy_block_invoke_139(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t *v6;
  const char *v7;
  _QWORD *v8;
  const char *v9;
  void **v10;
  void *__p[2];
  char v12;

  v2 = *(_QWORD *)(a1 + 32);
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
  v3 = v2 + 424;
  if (ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc(v2 + 424, *(_DWORD *)(a1 + 56)))
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(v2 + 608) + 80))(*(_QWORD *)(v2 + 608), *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 48), 4);
    v4 = __p;
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "exitLPM_nl_block_invoke", (uint64_t)__p);
    if (v12 < 0)
      v4 = (void **)__p[0];
    v5 = *(unsigned int *)(a1 + 56);
    v6 = ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](v3, v5);
    v8 = (_QWORD *)*v6;
    if (*(char *)(*v6 + 23) < 0)
      v8 = (_QWORD *)*v8;
    Ari::Log((Ari *)0x20, "(%s:%d) Client(0x%04x: %s) exit-LPM done", v7, v4, 1314, v5, v8);
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "exitLPM_nl_block_invoke", (uint64_t)__p);
    if (v12 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    Ari::Log((Ari *)0x20, "(%s:%d) Client(0x%04x) ignoring exit-LPM done: client has deregistered, or not yet reregistered", v9, v10, 1318, *(unsigned int *)(a1 + 56));
  }
  if (v12 < 0)
    operator delete(__p[0]);
}

void sub_20E253B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriHost::reRegisterIndications_nl(AriHost *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  void **v7;
  void *__p[2];
  char v10;
  uint64_t v11;
  _WORD v12[1002];
  int v13;
  __int16 v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v14 = 0;
  bzero(v12, 0x7D4uLL);
  v11 = 0x300000001;
  v13 = 0x7FFFFFFF;
  v2 = operator new(0x20uLL);
  *v2 = &off_24C905C70;
  v2[1] = this;
  v2[2] = &v11;
  v2[3] = &v14;
  v16 = v2;
  ResMgr<AriHost::IndicationHandlerList>::doForEach((uint64_t)this + 112, (uint64_t)v15);
  v3 = v16;
  if (v16 == v15)
  {
    v4 = 4;
    v3 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = getprogname();
  if (v14)
  {
    v12[1000] = v14;
    AriHost::setGroupWakeable_nl((uint64_t)this, (unsigned __int16 *)&v11);
  }
  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "reRegisterIndications_nl", (uint64_t)__p);
  if (v10 >= 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  Ari::Log((Ari *)0x20, "(%s:%d) Reregistering all indications for %s using cid 0x%x", v6, v7, 1377, v5, *((unsigned int *)this + 64));
  if (v10 < 0)
    operator delete(__p[0]);
  return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 76) + 64))(*((_QWORD *)this + 76), *((unsigned int *)this + 64));
}

void sub_20E253CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ResMgr<AriHost::IndicationHandlerList>::doForEach(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  _QWORD *i;
  uint64_t v6;

  AriOsa::SWTrap(*(_BYTE *)(a1 + 104) == 0, (uint64_t)"valid == false", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0x137);
  v4 = dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 96), 0xFFFFFFFFFFFFFFFFLL) != 0;
  AriOsa::SWTrap(v4, (uint64_t)"AriOsa::OsMutexTake(mtx) == ARI_RESULT_ERR", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0x139);
  for (i = *(_QWORD **)(a1 + 16); i; i = (_QWORD *)*i)
  {
    v6 = *(_QWORD *)(a2 + 24);
    if (!v6)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 48))(v6, i + 4);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 96));
  return AriOsa::SWTrap(0, (uint64_t)"AriOsa::OsMutexGive(mtx) == ARI_RESULT_ERR", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0x13C);
}

uint64_t AriHost::setGroupWakeable_nl(uint64_t a1, unsigned __int16 *a2)
{
  const char *v4;
  void **v5;
  __int128 v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  const char *v17;
  void **v18;
  _QWORD block[6];
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  void *__p[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  if (a2[1004])
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "setGroupWakeable_nl", (uint64_t)__p);
    if ((SBYTE7(v24) & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    Ari::Log((Ari *)0x20, "(%s:%d) Registering %u wakeable attributes", v4, v5, 1425, a2[1004]);
    if (SBYTE7(v24) < 0)
      operator delete(__p[0]);
    v27 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v25 = v6;
    v26 = v6;
    *(_OWORD *)__p = v6;
    v24 = v6;
    AriSdk::MsgBase::MsgBase((AriSdk::MsgBase *)__p, 0x4090000u, 0);
    __p[0] = &off_24C8CDD18;
    v27 = 0;
    AriSdk::Tlv<AriGrpMsgsAttribParam>::operator=<AriGrpMsgsAttribParam&,void>(&v27, a2);
    v21 = 0;
    v22 = 0;
    AriSdk::MsgBase::getRawBytes((uint64_t)__p, &v21);
    v7 = **(NSObject ***)(*ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](a1 + 424, *(_DWORD *)(a1 + 256)) + 24);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZN7AriHost19setGroupWakeable_nlEP21AriGrpMsgsAttribParam_block_invoke;
    block[3] = &__block_descriptor_tmp_157;
    block[4] = a1;
    block[5] = v21;
    v20 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    dispatch_async(v7, block);
    v10 = v20;
    if (v20)
    {
      v11 = (unint64_t *)&v20->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = v22;
    if (v22)
    {
      v14 = (unint64_t *)&v22->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    AriSdk::ARI_AriGrpMsgsAttribReq_SDK::~ARI_AriGrpMsgsAttribReq_SDK((AriSdk::ARI_AriGrpMsgsAttribReq_SDK *)__p);
    return 0;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "setGroupWakeable_nl", (uint64_t)__p);
    if ((SBYTE7(v24) & 0x80u) == 0)
      v18 = __p;
    else
      v18 = (void **)__p[0];
    Ari::Log((Ari *)0x10, "(%s:%d) No wakeable attributes to register", v17, v18, 1422);
    if (SBYTE7(v24) < 0)
      operator delete(__p[0]);
    return 0xFFFFFFFFLL;
  }
}

void sub_20E253FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *AriHost::pushIndications_nl(AriHost *this)
{
  _QWORD *v2;
  uint64_t v3;
  const char *v4;
  const char *v5;
  void **v6;
  const char *v7;
  void **v8;
  const char *v9;
  void **v10;
  void *__p[2];
  char v13;
  _QWORD v14[2];
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v14[0] = v14;
  v14[1] = v14;
  v15 = 0;
  v16[0] = &off_24C905D00;
  v16[1] = this;
  v16[2] = v14;
  v17 = v16;
  ResMgr<AriHost::IndicationHandlerList>::doForEach((uint64_t)this + 112, (uint64_t)v16);
  v2 = v17;
  if (v17 == v16)
  {
    v3 = 4;
    v2 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = getprogname();
  if (v15)
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "pushIndications_nl", (uint64_t)__p);
    if (v13 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    Ari::Log((Ari *)0x20, "(%s:%d) Pushing all indications for %s using cid 0x%x [%lu]", v5, v6, 1407, v4, *((unsigned int *)this + 64), v15);
    if (v13 < 0)
      operator delete(__p[0]);
    (*(void (**)(_QWORD, _QWORD, _QWORD *))(**((_QWORD **)this + 76) + 72))(*((_QWORD *)this + 76), *((unsigned int *)this + 64), v14);
    if (*((_BYTE *)this + 704))
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "pushIndications_nl", (uint64_t)__p);
      if (v13 >= 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      Ari::Log((Ari *)0x20, "(%s:%d) Baseband is ready by the time we pushed indications; register them right away",
        v7,
        v8,
        1413);
      if (v13 < 0)
        operator delete(__p[0]);
      AriHost::reRegisterIndications_nl(this);
    }
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "pushIndications_nl", (uint64_t)__p);
    if (v13 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    Ari::Log((Ari *)0x20, "(%s:%d) No indications to push for %s using cid 0x%x", v9, v10, 1403, v4, *((unsigned int *)this + 64));
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return std::__list_imp<unsigned int>::clear(v14);
}

void sub_20E25423C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  if (a19 < 0)
    operator delete(__p);
  std::__list_imp<unsigned int>::clear(&a20);
  _Unwind_Resume(a1);
}

void ___ZN7AriHost19setGroupWakeable_nlEP21AriGrpMsgsAttribParam_block_invoke(uint64_t a1)
{
  const char *v1;
  void **v2;
  void *__p[2];
  char v4;

  if (AriHost::SendInternal(**(_QWORD **)(a1 + 40), *(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) - **(_QWORD **)(a1 + 40), (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 256) & 0x7Fu) << 8, (uint64_t)&__block_literal_global_151, 0, 20000, 1))
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "setGroupWakeable_nl_block_invoke", (uint64_t)__p);
    if (v4 >= 0)
      v2 = __p;
    else
      v2 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Failed to send AriGrpMsgsAttribReq", v1, v2, 1456);
    if (v4 < 0)
      operator delete(__p[0]);
  }
}

void sub_20E254358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN7AriHost19setGroupWakeable_nlEP21AriGrpMsgsAttribParam_block_invoke_2(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  __int128 v3;
  const char *v4;
  void **v5;
  const char *v6;
  void **v7;
  const char *v8;
  void **v9;
  const char *v10;
  void **v11;
  void *__p[2];
  char v14;
  _OWORD v15[2];
  __int128 v16;
  __int128 v17;
  unsigned int *v18;

  v18 = (unsigned int *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v16 = v3;
  v17 = v3;
  v15[0] = v3;
  v15[1] = v3;
  AriSdk::MsgBase::MsgBase((AriSdk::MsgBase *)v15, a2, a3);
  *(_QWORD *)&v15[0] = &off_24C8CDDF8;
  v18 = 0;
  if (BYTE1(v16))
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "setGroupWakeable_nl_block_invoke_2", (uint64_t)__p);
    if (v14 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Received NACK for setting wakeable attribute", v4, v5, 1437);
  }
  else if (((DWORD1(v16) << 15) | (DWORD2(v16) << 26)) == 67436544)
  {
    if (AriSdk::ARI_AriACK_SDK::unpack((AriSdk::ARI_AriACK_SDK *)v15))
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "setGroupWakeable_nl_block_invoke_2", (uint64_t)__p);
      if (v14 >= 0)
        v7 = __p;
      else
        v7 = (void **)__p[0];
      Ari::Log((Ari *)8, "(%s:%d) Couldn't unpack response for setting wakeable attribute", v6, v7, 1450);
    }
    else
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "setGroupWakeable_nl_block_invoke_2", (uint64_t)__p);
      if (v14 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      Ari::Log((Ari *)0x20, "(%s:%d) Successfully set wakeable attribute(s) with status %d via request GMID 0x%x", v10, v11, 1446, v18[1], *v18);
    }
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "setGroupWakeable_nl_block_invoke_2", (uint64_t)__p);
    if (v14 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Received mismatched GMID for setting wakeable attribute", v8, v9, 1441);
  }
  if (v14 < 0)
    operator delete(__p[0]);
  AriSdk::ARI_AriACK_SDK::~ARI_AriACK_SDK((AriSdk::ARI_AriACK_SDK *)v15);
  return 0;
}

void sub_20E254534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
    operator delete(__p);
  AriSdk::ARI_AriACK_SDK::~ARI_AriACK_SDK((AriSdk::ARI_AriACK_SDK *)&a20);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c58_ZTSNSt3__110shared_ptrIKNS_6vectorIhNS_9allocatorIhEEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_40c58_ZTSNSt3__110shared_ptrIKNS_6vectorIhNS_9allocatorIhEEEEEE(uint64_t a1)
{
  return std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](a1 + 40);
}

void AriHost::SetMsgWakeable(AriHost *a1, char a2, int a3, uint64_t a4)
{
  unsigned int v7;
  NSObject **Instance;
  std::__shared_weak_count *v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  const char *v15;
  void **v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *__p[2];
  char v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  _QWORD block[6];
  std::__shared_weak_count *v29;
  _BYTE v30[24];
  _BYTE *v31;
  int v32;
  int v33;
  unsigned int v34;
  char v35;
  uint64_t v36;

  v7 = a1;
  v36 = *MEMORY[0x24BDAC8D0];
  Instance = (NSObject **)AriHost::GetInstance(a1);
  v26 = 0;
  v27 = 0;
  if (qword_253D0AF70)
  {
    v9 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_253D0AF70);
    v27 = v9;
    if (v9)
    {
      v26 = AriHost::SingletonWeakPtr;
      if (AriHost::SingletonWeakPtr)
      {
        v10 = *Instance;
        block[0] = MEMORY[0x24BDAC760];
        block[1] = 1174405120;
        block[2] = ___ZN7AriHost14SetMsgWakeableEjbiNSt3__18functionIFviEEE_block_invoke;
        block[3] = &__block_descriptor_tmp_172;
        v32 = a3;
        v33 = HIWORD(v7) & 0xFC00 | (v7 >> 15) & 0x3FF;
        v34 = v7;
        v35 = a2;
        block[4] = Instance;
        block[5] = AriHost::SingletonWeakPtr;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        v29 = v9;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
        std::__function::__value_func<int ()(unsigned char *,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v30, a4);
        dispatch_async(v10, block);
        v13 = v31;
        if (v31 == v30)
        {
          v14 = 4;
          v13 = v30;
        }
        else
        {
          if (!v31)
          {
LABEL_24:
            v21 = v29;
            if (v29)
            {
              v22 = (unint64_t *)&v29->__shared_owners_;
              do
                v23 = __ldaxr(v22);
              while (__stlxr(v23 - 1, v22));
              if (!v23)
              {
                ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                std::__shared_weak_count::__release_weak(v21);
              }
            }
            goto LABEL_16;
          }
          v14 = 5;
        }
        (*(void (**)(void))(*v13 + 8 * v14))();
        goto LABEL_24;
      }
    }
  }
  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "SetMsgWakeable", (uint64_t)__p);
  if (v25 >= 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  Ari::Log((Ari *)0x10, "(%s:%d) Failed to lock on AriHost instance. Shutting down?", v15, v16, 1468);
  if (v25 < 0)
    operator delete(__p[0]);
  LODWORD(__p[0]) = -90;
  v17 = *(_QWORD *)(a4 + 24);
  if (!v17)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v17 + 48))(v17, __p);
LABEL_16:
  v18 = v27;
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_20E2547F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v18);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void ___ZN7AriHost14SetMsgWakeableEjbiNSt3__18functionIFviEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  const char *v5;
  void **v6;
  uint64_t v7;
  uint64_t *v8;
  NSObject *v9;
  int v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  const char *v17;
  void **v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  void **v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *__p[2];
  __int128 v27;
  _QWORD block[5];
  std::__shared_weak_count *v29;
  _BYTE v30[24];
  _BYTE *v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v2 = (*(_DWORD *)(a1 + 88) >> 8) & 0x7F;
  if (ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc(*(_QWORD *)(a1 + 32) + 424, v2))
  {
    if (!ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc(*(_QWORD *)(a1 + 32) + 112, *(_DWORD *)(a1 + 92)))
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "SetMsgWakeable_block_invoke", (uint64_t)__p);
      v3 = Ari::MsgDefById((Ari *)(*(_DWORD *)(a1 + 96) >> 26), (*(_DWORD *)(a1 + 96) >> 15) & 0x3FF);
      v5 = "Unknown";
      if (v3 && *(_QWORD *)(v3 + 48))
        v5 = *(const char **)(v3 + 48);
      v6 = (void **)__p[0];
      if ((SBYTE7(v27) & 0x80u) == 0)
        v6 = __p;
      Ari::Log((Ari *)0x20, "(%s:%d) no client handlers are registered for this indication, %s.  setting wakeable metadata only", v4, v6, 1491, v5);
      if (SBYTE7(v27) < 0)
        operator delete(__p[0]);
      __p[0] = __p;
      __p[1] = __p;
      v27 = xmmword_20E314E90;
      v7 = *(unsigned int *)(a1 + 92);
      HIDWORD(v27) = *(_DWORD *)(a1 + 96);
      ResMgr<AriHost::IndicationHandlerList>::set(*(_QWORD *)(a1 + 32) + 112, v7, __p);
      std::__list_imp<std::shared_ptr<Ari::ClientOutboundMessage>>::clear((uint64_t *)__p);
    }
    v8 = ResMgr<AriHost::IndicationHandlerList>::operator[](*(_QWORD *)(a1 + 32) + 112, *(_DWORD *)(a1 + 92));
    AriHost::IndicationHandlerList::setWakeable((AriHost::IndicationHandlerList *)v8, *(unsigned __int8 *)(a1 + 100));
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 704))
    {
      v9 = **(NSObject ***)(*ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](*(_QWORD *)(a1 + 32) + 424, v2)
                          + 24);
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 1174405120;
      block[2] = ___ZN7AriHost14SetMsgWakeableEjbiNSt3__18functionIFviEEE_block_invoke_2;
      block[3] = &__block_descriptor_tmp_171;
      v10 = *(_DWORD *)(a1 + 96);
      v36 = *(_BYTE *)(a1 + 100);
      v11 = *(_DWORD *)(a1 + 88);
      v33 = v10;
      v34 = v11;
      v12 = *(std::__shared_weak_count **)(a1 + 48);
      block[4] = *(_QWORD *)(a1 + 40);
      v29 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      std::__function::__value_func<int ()(unsigned char *,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v30, a1 + 56);
      v32 = *(_QWORD *)(a1 + 32);
      v35 = v2;
      dispatch_async(v9, block);
      v15 = v31;
      if (v31 == v30)
      {
        v16 = 4;
        v15 = v30;
      }
      else
      {
        if (!v31)
          goto LABEL_32;
        v16 = 5;
      }
      (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_32:
      v23 = v29;
      if (v29)
      {
        v24 = (unint64_t *)&v29->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      return;
    }
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "SetMsgWakeable_block_invoke", (uint64_t)__p);
    v19 = Ari::MsgDefById((Ari *)(*(_DWORD *)(a1 + 96) >> 26), (*(_DWORD *)(a1 + 96) >> 15) & 0x3FF);
    v21 = "Unknown";
    if (v19 && *(_QWORD *)(v19 + 48))
      v21 = *(const char **)(v19 + 48);
    v22 = (void **)__p[0];
    if ((SBYTE7(v27) & 0x80u) == 0)
      v22 = __p;
    Ari::Log((Ari *)0x20, "(%s:%d) Wakeable set for %s before all-ready.  IndicationReregistrationActor will request when baseband is ready.", v20, v22, 1502, v21);
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "SetMsgWakeable_block_invoke", (uint64_t)__p);
    if ((SBYTE7(v27) & 0x80u) == 0)
      v18 = __p;
    else
      v18 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) client cid 0x%x attempting to set wakeable flag but is not registered", v17, v18, 1485, v2);
  }
  if (SBYTE7(v27) < 0)
    operator delete(__p[0]);
}

void sub_20E254B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AriHost::IndicationHandlerList::setWakeable(AriHost::IndicationHandlerList *this, int a2)
{
  uint64_t v3;
  const char *v4;
  const char *v5;
  void **v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  void **v10;
  void *__p[2];
  char v12;

  *((_BYTE *)this + 24) = a2;
  *((_BYTE *)this + 25) = 1;
  if (a2)
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "setWakeable", (uint64_t)__p);
    v3 = Ari::MsgDefById((Ari *)(*((_DWORD *)this + 7) >> 26), (*((_DWORD *)this + 7) >> 15) & 0x3FF);
    v5 = "Unknown";
    if (v3 && *(_QWORD *)(v3 + 48))
      v5 = *(const char **)(v3 + 48);
    v6 = (void **)__p[0];
    if (v12 >= 0)
      v6 = __p;
    Ari::Log((Ari *)0x20, "(%s:%d) setting indication %s as wakeable", v4, v6, 2371, v5);
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "setWakeable", (uint64_t)__p);
    v7 = Ari::MsgDefById((Ari *)(*((_DWORD *)this + 7) >> 26), (*((_DWORD *)this + 7) >> 15) & 0x3FF);
    v9 = "Unknown";
    if (v7 && *(_QWORD *)(v7 + 48))
      v9 = *(const char **)(v7 + 48);
    v10 = (void **)__p[0];
    if (v12 >= 0)
      v10 = __p;
    Ari::Log((Ari *)0x10, "(%s:%d) Client is setting indication %s explicitly as NON-wakeable.  This should be avoided.", v8, v10, 2373, v9);
  }
  if (v12 < 0)
    operator delete(__p[0]);
}

void sub_20E254CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN7AriHost14SetMsgWakeableEjbiNSt3__18functionIFviEEE_block_invoke_2(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  NSObject **v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  _QWORD block[5];
  std::__shared_weak_count *v31;
  NSObject **v32;
  _BYTE v33[24];
  _BYTE *v34;
  int v35;
  int v36;
  _QWORD v37[5];
  std::__shared_weak_count *v38;
  _BYTE v39[24];
  _BYTE *v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v27 = 0x300000001;
  if (*(_BYTE *)(a1 + 100))
    v2 = 0x7FFFFFFF;
  else
    v2 = 0;
  v3 = *(_DWORD *)(a1 + 88);
  v4 = *(_DWORD *)(a1 + 92);
  v28 = v3;
  v29 = v2;
  v26 = v4;
  v5 = MEMORY[0x24BDAC760];
  v37[0] = MEMORY[0x24BDAC760];
  v37[1] = 1174405120;
  v37[2] = ___ZN7AriHost14SetMsgWakeableEjbiNSt3__18functionIFviEEE_block_invoke_3;
  v37[3] = &__block_descriptor_tmp_166;
  v6 = *(std::__shared_weak_count **)(a1 + 40);
  v37[4] = *(_QWORD *)(a1 + 32);
  v38 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v3 = *(_DWORD *)(a1 + 88);
  }
  v41 = v3;
  v9 = v39;
  v10 = a1 + 48;
  std::__function::__value_func<int ()(unsigned char *,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v39, a1 + 48);
  v11 = ARI_AriMsgAttribReq_BLK((char *)&v27, &v26, (uint64_t)v37);
  if (v11)
  {
    v12 = *(NSObject ***)(a1 + 80);
    v13 = *v12;
    block[0] = v5;
    block[1] = 1174405120;
    block[2] = ___ZN7AriHost14SetMsgWakeableEjbiNSt3__18functionIFviEEE_block_invoke_167;
    block[3] = &__block_descriptor_tmp_170;
    v14 = *(std::__shared_weak_count **)(a1 + 40);
    block[4] = *(_QWORD *)(a1 + 32);
    v31 = v14;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      v12 = *(NSObject ***)(a1 + 80);
    }
    v32 = v12;
    v35 = *(_DWORD *)(a1 + 96);
    std::__function::__value_func<int ()(unsigned char *,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v33, v10);
    v36 = v11;
    dispatch_async(v13, block);
    v17 = v34;
    if (v34 == v33)
    {
      v18 = 4;
      v17 = v33;
    }
    else
    {
      if (!v34)
      {
LABEL_18:
        v19 = v31;
        if (v31)
        {
          v20 = (unint64_t *)&v31->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        goto LABEL_23;
      }
      v18 = 5;
    }
    (*(void (**)(void))(*v17 + 8 * v18))();
    goto LABEL_18;
  }
LABEL_23:
  if (v40 == v39)
  {
    v22 = 4;
  }
  else
  {
    if (!v40)
      goto LABEL_28;
    v22 = 5;
    v9 = v40;
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v22))(v9);
LABEL_28:
  v23 = v38;
  if (v38)
  {
    v24 = (unint64_t *)&v38->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_20E254F68(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v2);
  v5 = *(_QWORD **)(v3 + 72);
  if (v5 == v1)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
    v1 = *(_QWORD **)(v3 + 72);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v6))(v1);
LABEL_6:
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v3 + 32);
  _Unwind_Resume(a1);
}

uint64_t ___ZN7AriHost14SetMsgWakeableEjbiNSt3__18functionIFviEEE_block_invoke_3(uint64_t a1, AriMsg *a2, uint64_t a3)
{
  uint64_t v6;
  const char *v7;
  const unsigned __int8 *v8;
  AriMsg *BufHeader;
  unint64_t v10;
  AriMsg *v11;
  int v12;
  const char *v13;
  void **v14;
  void **v15;
  AriMsg *v16;
  uint64_t v17;
  AriMsg *v18;
  const char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  const char *v24;
  void **v25;
  const char *v26;
  void **v27;
  const char *v28;
  const char *v29;
  void **v30;
  const char *v31;
  const char *v32;
  void **v33;
  void *__p[2];
  char v35;
  _QWORD v36[2];

  v6 = Ari::MsgDefById((Ari *)(*(_DWORD *)(a1 + 80) >> 26), (*(_DWORD *)(a1 + 80) >> 15) & 0x3FF);
  v7 = "Unknown";
  if (v6 && *(_QWORD *)(v6 + 48))
    v7 = *(const char **)(v6 + 48);
  v8 = (const unsigned __int8 *)a3;
  BufHeader = AriMsg::GetBufHeader(a2, (const unsigned __int8 *)a3);
  if (BufHeader)
    v10 = (unint64_t)*((unsigned int *)BufHeader + 2) >> 17;
  else
    v10 = 0x8000;
  v11 = AriMsg::GetBufHeader(a2, (const unsigned __int8 *)a3);
  if (!v11)
    goto LABEL_15;
  v12 = (*(_DWORD *)((_BYTE *)v11 + 3) & 0x1F800 | ((unsigned __int16)*((_DWORD *)v11 + 2) >> 6)) << 15;
  if (v12 == 67600384)
  {
    v36[0] = 0xAAAAAAAAAAAAAAAALL;
    if (ARI_AriNACK_Extract((const unsigned __int8 *)a2, a3, (char *)v36))
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "SetMsgWakeable_block_invoke_3", (uint64_t)__p);
      if (v35 >= 0)
        v25 = __p;
      else
        v25 = (void **)__p[0];
      Ari::Log((Ari *)8, "(%s:%d) Setting indication %s to wake AP failed via ctx 0x%x (Received NACK, reason unknown due to malformed NACK)", v24, v25, 1558, v7, v10);
    }
    else if (HIDWORD(v36[0]) == -85)
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "SetMsgWakeable_block_invoke_3", (uint64_t)__p);
      v28 = asString(HIDWORD(v36[0]));
      v30 = (void **)__p[0];
      if (v35 >= 0)
        v30 = __p;
      Ari::Log((Ari *)0x20, "(%s:%d) Setting indication %s to wake AP failed via ctx 0x%x (Received NACK with reason %s)", v29, v30, 1549, v7, v10, v28);
    }
    else
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "SetMsgWakeable_block_invoke_3", (uint64_t)__p);
      v31 = asString(HIDWORD(v36[0]));
      v33 = (void **)__p[0];
      if (v35 >= 0)
        v33 = __p;
      Ari::Log((Ari *)8, "(%s:%d) Setting indication %s to wake AP failed via ctx 0x%x (Received NACK with reason %s)", v32, v33, 1553, v7, v10, v31);
    }
    goto LABEL_24;
  }
  if (v12 != 68190208)
  {
LABEL_15:
    v15 = __p;
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "SetMsgWakeable_block_invoke_3", (uint64_t)__p);
    if (v35 < 0)
      v15 = (void **)__p[0];
    v16 = AriMsg::GetBufHeader(a2, v8);
    if (v16)
      v17 = (*(_QWORD *)v16 >> 35) & 0x3FLL;
    else
      v17 = 0;
    v18 = AriMsg::GetBufHeader(a2, v8);
    if (v18)
      v20 = (unsigned __int16)*((_DWORD *)v18 + 2) >> 6;
    else
      v20 = 0;
    Ari::Log((Ari *)8, "(%s:%d) Setting indication %s to wake AP failed via ctx 0x%x. Unexpected message id in response (%d-0x%x)", v19, v15, 1565, v7, v10, v17, v20);
    goto LABEL_24;
  }
  v36[0] = 0xAAAAAAAAAAAAAAAALL;
  v36[1] = 0xAAAAAAAAAAAAAAAALL;
  if (ARI_AriMsgAttribResp_Extract((const unsigned __int8 *)a2, a3, (char *)v36))
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "SetMsgWakeable_block_invoke_3", (uint64_t)__p);
    if (v35 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Setting indication %s to wake AP failed via ctx 0x%x (Failed to extract)", v13, v14, 1537, v7, v10);
LABEL_24:
    if (v35 < 0)
      operator delete(__p[0]);
    v21 = -1;
    goto LABEL_27;
  }
  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "SetMsgWakeable_block_invoke_3", (uint64_t)__p);
  if (v35 >= 0)
    v27 = __p;
  else
    v27 = (void **)__p[0];
  Ari::Log((Ari *)0x20, "(%s:%d) Successfully registered indication %s to wake AP via ctx 0x%x", v26, v27, 1532, v7, v10);
  if (v35 < 0)
    operator delete(__p[0]);
  v21 = 0;
LABEL_27:
  LODWORD(__p[0]) = v21;
  v22 = *(_QWORD *)(a1 + 72);
  if (!v22)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v22 + 48))(v22, __p);
  return 0;
}

void sub_20E255334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c34_ZTSNSt3__110shared_ptrI7AriHostEE48c27_ZTSNSt3__18functionIFviEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return std::__function::__value_func<int ()(unsigned char *,unsigned int)>::__value_func[abi:ne180100](a1 + 48, a2 + 48);
}

void sub_20E2553AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_e8_32c34_ZTSNSt3__110shared_ptrI7AriHostEE48c27_ZTSNSt3__18functionIFviEEE(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 48);
  v3 = *(_QWORD **)(a1 + 72);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](a1 + 32);
}

void ___ZN7AriHost14SetMsgWakeableEjbiNSt3__18functionIFviEEE_block_invoke_167(uint64_t a1)
{
  uint64_t *v2;
  NSObject **v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD block[5];
  std::__shared_weak_count *v20;
  _BYTE v21[24];
  _BYTE *v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (!ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc(*(_QWORD *)(a1 + 48) + 424, *(_DWORD *)(a1 + 88)))
    return;
  v2 = ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](*(_QWORD *)(a1 + 48) + 424, *(_DWORD *)(a1 + 88));
  v3 = *(NSObject ***)(*v2 + 24);
  v4 = *(std::__shared_weak_count **)(*v2 + 32);
  v18 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *v3;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 1174405120;
  block[2] = ___ZN7AriHost14SetMsgWakeableEjbiNSt3__18functionIFviEEE_block_invoke_2_168;
  block[3] = &__block_descriptor_tmp_169;
  v8 = *(std::__shared_weak_count **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v20 = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  std::__function::__value_func<int ()(unsigned char *,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v21, a1 + 56);
  v23 = *(_DWORD *)(a1 + 92);
  dispatch_async(v7, block);
  v11 = v22;
  if (v22 == v21)
  {
    v12 = 4;
    v11 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_13;
    v12 = 5;
  }
  (*(void (**)(_QWORD *))(*v11 + 8 * v12))(v11);
LABEL_13:
  v13 = v20;
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v18)
  {
    v16 = (unint64_t *)&v18->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_20E2555C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZN7AriHost14SetMsgWakeableEjbiNSt3__18functionIFviEEE_block_invoke_2_168(uint64_t a1)
{
  uint64_t v1;
  int v3;

  v3 = *(_DWORD *)(a1 + 80);
  v1 = *(_QWORD *)(a1 + 72);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v1 + 48))(v1, &v3);
}

uint64_t __copy_helper_block_e8_32c34_ZTSNSt3__110shared_ptrI7AriHostEE56c27_ZTSNSt3__18functionIFviEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return std::__function::__value_func<int ()(unsigned char *,unsigned int)>::__value_func[abi:ne180100](a1 + 56, a2 + 56);
}

void sub_20E255668(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_e8_32c34_ZTSNSt3__110shared_ptrI7AriHostEE56c27_ZTSNSt3__18functionIFviEEE(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 56);
  v3 = *(_QWORD **)(a1 + 80);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](a1 + 32);
}

uint64_t __copy_helper_block_e8_40c34_ZTSNSt3__110shared_ptrI7AriHostEE56c27_ZTSNSt3__18functionIFviEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return std::__function::__value_func<int ()(unsigned char *,unsigned int)>::__value_func[abi:ne180100](a1 + 56, a2 + 56);
}

void sub_20E255714(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_e8_40c34_ZTSNSt3__110shared_ptrI7AriHostEE56c27_ZTSNSt3__18functionIFviEEE(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 56);
  v3 = *(_QWORD **)(a1 + 80);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](a1 + 40);
}

uint64_t AriHost::SetRTEventHandler(unsigned int a1, int a2, uint64_t a3)
{
  AriHost *v6;
  std::__shared_weak_count *v7;
  AriHost *Instance;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  void **v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD block[6];
  int v17;
  int v18;
  void *__p[2];
  char v20;
  uint64_t v21;
  AriHost *v22;

  v21 = 0;
  v22 = 0;
  if (qword_253D0AF70)
  {
    v6 = (AriHost *)std::__shared_weak_count::lock((std::__shared_weak_count *)qword_253D0AF70);
    v7 = (std::__shared_weak_count *)v6;
    v22 = v6;
    if (v6)
    {
      v21 = AriHost::SingletonWeakPtr;
      if (AriHost::SingletonWeakPtr)
      {
        Instance = (AriHost *)AriHost::GetInstance(v6);
        v9 = *(NSObject **)AriHost::GetInstance(Instance);
        block[0] = MEMORY[0x24BDAC760];
        block[1] = 0x40000000;
        block[2] = ___ZN7AriHost17SetRTEventHandlerEiNS_13ClientRTEventEU13block_pointerFiP16dispatch_group_sE_block_invoke;
        block[3] = &unk_24C9059F8;
        block[4] = a3;
        block[5] = Instance;
        v17 = a2;
        v18 = (a1 >> 8) & 0x7F;
        dispatch_sync(v9, block);
        v10 = 0;
LABEL_12:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return v10;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "SetRTEventHandler", (uint64_t)__p);
  if (v20 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  Ari::Log((Ari *)0x10, "(%s:%d) Failed to lock on AriHost instance. Shutting down?", v11, v12, 1599);
  if (v20 < 0)
    operator delete(__p[0]);
  v10 = 0xFFFFFFFFLL;
  if (v7)
    goto LABEL_12;
  return v10;
}

void sub_20E2558D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v23 - 64);
  _Unwind_Resume(a1);
}

void ___ZN7AriHost17SetRTEventHandlerEiNS_13ClientRTEventEU13block_pointerFiP16dispatch_group_sE_block_invoke(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t *v5;
  AriHost *v6;
  const char *v7;
  void **v8;
  _QWORD *v9;
  unint64_t v10;
  void *__p[2];
  char v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;

  v2 = *(const void **)(a1 + 32);
  v3 = (std::__shared_weak_count *)operator new(0x20uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&off_24C905D80;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)_Block_copy(v2);
  v13 = v3 + 1;
  v14 = v3;
  switch(*(_DWORD *)(a1 + 48))
  {
    case 0:
      v5 = ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](*(_QWORD *)(a1 + 40) + 424, *(_DWORD *)(a1 + 52));
      std::shared_ptr<AriHost::ClientEventHandler>::operator=[abi:ne180100]((_QWORD *)(*v5 + 80), (uint64_t)&v3[1], (uint64_t)v3);
      v6 = *(AriHost **)(a1 + 40);
      if (!*((_BYTE *)v6 + 312))
        AriHost::startClient_nl(v6, *(unsigned int *)(a1 + 52));
      goto LABEL_15;
    case 1:
      v9 = (_QWORD *)(*ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](*(_QWORD *)(a1 + 40) + 424, *(_DWORD *)(a1 + 52))+ 96);
      goto LABEL_14;
    case 2:
      v9 = (_QWORD *)(*ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](*(_QWORD *)(a1 + 40) + 424, *(_DWORD *)(a1 + 52))+ 48);
      goto LABEL_14;
    case 3:
      v9 = (_QWORD *)(*ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](*(_QWORD *)(a1 + 40) + 424, *(_DWORD *)(a1 + 52))+ 64);
      goto LABEL_14;
    case 4:
      v9 = (_QWORD *)(*ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](*(_QWORD *)(a1 + 40) + 424, *(_DWORD *)(a1 + 52))+ 112);
      goto LABEL_14;
    case 5:
      v9 = (_QWORD *)(*ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](*(_QWORD *)(a1 + 40) + 424, *(_DWORD *)(a1 + 52))+ 128);
LABEL_14:
      std::shared_ptr<AriHost::ClientEventHandler>::operator=[abi:ne180100](v9, (uint64_t)&v3[1], (uint64_t)v3);
      break;
    default:
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "SetRTEventHandler_block_invoke", (uint64_t)__p);
      if (v12 >= 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      Ari::Log((Ari *)0x10, "(%s:%d) Unimplemented handler type %u", v7, v8, 1647, *(unsigned int *)(a1 + 48));
      if (v12 < 0)
        operator delete(__p[0]);
      break;
  }
  do
LABEL_15:
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20E255AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<AriHost::ClientEventHandler>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

uint64_t ___ZN7AriHost23nackResponseHandlers_nlEjj_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), **(_QWORD **)(a1 + 40), *(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) - **(_QWORD **)(a1 + 40));
}

uint64_t __copy_helper_block_e8_40c57_ZTSNSt3__110shared_ptrINS_6vectorIhNS_9allocatorIhEEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_40c57_ZTSNSt3__110shared_ptrINS_6vectorIhNS_9allocatorIhEEEEEE(uint64_t a1)
{
  return std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](a1 + 40);
}

_QWORD *AriHost::updateIndicationCids_nl(AriHost *this, unsigned int a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_24C905E60;
  v5[1] = a2 | (unint64_t)(a3 << 32);
  v6 = v5;
  ResMgr<AriHost::IndicationHandlerList>::doForEach((uint64_t)this + 112, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_20E255C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void AriHost::ReRegisterClient(uint64_t a1, uint64_t a2, int a3)
{
  AriHost *v6;
  uint64_t v7;
  AriHost *v8;
  NSObject **Instance;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  const char *v16;
  void **v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD block[5];
  std::__shared_weak_count *v22;
  uint64_t v23;
  NSObject **v24;
  uint64_t v25;
  int v26;
  void *v27[2];
  char v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v29 = 0;
  v30 = 0;
  if (qword_253D0AF70
    && (v6 = (AriHost *)std::__shared_weak_count::lock((std::__shared_weak_count *)qword_253D0AF70),
        (v30 = (std::__shared_weak_count *)v6) != 0)
    && (v7 = AriHost::SingletonWeakPtr, (v29 = AriHost::SingletonWeakPtr) != 0))
  {
    v8 = v6;
    Instance = (NSObject **)AriHost::GetInstance(v6);
    v10 = *Instance;
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZN7AriHost16ReRegisterClientERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERij_block_invoke;
    block[3] = &__block_descriptor_tmp_188;
    block[4] = v7;
    v22 = (std::__shared_weak_count *)v8;
    v11 = (unint64_t *)((char *)v8 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v23 = a2;
    v24 = Instance;
    v25 = a1;
    v26 = a3;
    dispatch_sync(v10, block);
    v13 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "ReRegisterClient", (uint64_t)v27);
    if (v28 >= 0)
      v17 = v27;
    else
      v17 = (void **)v27[0];
    Ari::Log((Ari *)0x10, "(%s:%d) Failed to lock on AriHost instance. Shutting down?", v16, v17, 1742);
    if (v28 < 0)
      operator delete(v27[0]);
  }
  v18 = v30;
  if (v30)
  {
    v19 = (unint64_t *)&v30->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_20E255E58(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 65) < 0)
    operator delete(*(void **)(v1 - 88));
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void ___ZN7AriHost16ReRegisterClientERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERij_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  AriHost *v5;
  BOOL v6;
  const char *v7;
  void **v8;
  uint64_t *v9;
  const char *v10;
  void **v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v22;
  void **v23;
  uint64_t v24;
  const char *v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  const char *v31;
  void **v32;
  const char *v33;
  void **v34;
  const char *v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  const char *v42;
  void **v43;
  const char *v44;
  void **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  const char *v49;
  void **v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  AriHost::TransactionMgr *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  _QWORD *v58;
  unsigned int v59;
  void *__p[2];
  int64_t v61;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (**(_DWORD **)(a1 + 48) >> 8) & 0x7F;
  v59 = -1;
  if (!std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)(v2 + 568), v3))
  {
    if (!ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc(v2 + 424, v3))
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "ReRegisterClient_block_invoke", (uint64_t)__p);
      if (v61 >= 0)
        v34 = __p;
      else
        v34 = (void **)__p[0];
      Ari::Log((Ari *)0x10, "(%s:%d) Client registration no longer exists for cid 0x%x.  Failed re-registration", v33, v34, 1758, v3);
      goto LABEL_60;
    }
    v2 = *(_QWORD *)(a1 + 56);
  }
  AriHost::stopClient_nl((NSObject **)v2, v3, __block_literal_global_180);
  v4 = *(uint64_t **)(a1 + 64);
  if (*((char *)v4 + 23) < 0)
    v4 = (uint64_t *)*v4;
  v5 = (AriHost *)(*(uint64_t (**)(_QWORD, uint64_t *, unsigned int *, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 56) + 608)
                                                                                       + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 608), v4, &v59, *(unsigned int *)(a1 + 72));
  if ((_DWORD)v5)
    v6 = 1;
  else
    v6 = v59 == -1;
  if (!v6)
  {
    if (v59 == (_DWORD)v3)
    {
      if (ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc(*(_QWORD *)(a1 + 56) + 424, v3))
      {
        AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "ReRegisterClient_block_invoke", (uint64_t)__p);
        if (v61 >= 0)
          v11 = __p;
        else
          v11 = (void **)__p[0];
        Ari::Log((Ari *)0x20, "(%s:%d) New registered client ID is identical to the previous one (0x%x). No update needed.", v10, v11, 1779, v59);
        if (SHIBYTE(v61) < 0)
          operator delete(__p[0]);
      }
      else if (std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)(*(_QWORD *)(a1 + 56) + 568), v59))
      {
        AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "ReRegisterClient_block_invoke", (uint64_t)__p);
        if (v61 >= 0)
          v36 = __p;
        else
          v36 = (void **)__p[0];
        Ari::Log((Ari *)0x20, "(%s:%d) Received identical cid 0x%x.  Transferring stored ClientData", v35, v36, 1783, v59);
        if (SHIBYTE(v61) < 0)
          operator delete(__p[0]);
        v37 = *(_QWORD *)(a1 + 56);
        v38 = v37 + 424;
        v39 = v59;
        LODWORD(__p[0]) = v3;
        v40 = std::__hash_table<std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v37 + 568, v3, __p);
        ResMgr<std::shared_ptr<AriHost::ClientData>>::set(v38, v39, v40 + 3);
        std::__hash_table<std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>>>::__erase_unique<int>((_QWORD *)(*(_QWORD *)(a1 + 56) + 568), v3);
        v41 = v3 | 0xFF000000;
        AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "ReRegisterClient_block_invoke", (uint64_t)__p);
        if (v61 >= 0)
          v43 = __p;
        else
          v43 = (void **)__p[0];
        Ari::Log((Ari *)0x20, "(%s:%d) Transferring indication cid marked as 0x%x back to cid 0x%x", v42, v43, 1789, v41, v59);
        if (SHIBYTE(v61) < 0)
          operator delete(__p[0]);
        AriHost::updateIndicationCids_nl(*(AriHost **)(a1 + 56), v41, v59);
      }
      return;
    }
    **(_DWORD **)(a1 + 48) = (v59 & 0x7F) << 8;
    v12 = *(uint64_t **)(a1 + 64);
    v13 = *((unsigned __int8 *)v12 + 23);
    v14 = (char)v13;
    if ((v13 & 0x80u) != 0)
      v13 = v12[1];
    if (v13 == 29)
    {
      if (v14 < 0)
        v12 = (uint64_t *)*v12;
      v15 = (uint64_t *)*v12;
      v16 = v12[1];
      v17 = v12[2];
      v18 = *(uint64_t *)((char *)v12 + 21);
      if (v15 == (uint64_t *)0x6974616369646E49
        && v16 == 0x6967657265526E6FLL
        && v17 == 0x6E6F697461727473
        && v18 == 0x726F7463416E6F69)
      {
        AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "ReRegisterClient_block_invoke", (uint64_t)__p);
        if (v61 >= 0)
          v23 = __p;
        else
          v23 = (void **)__p[0];
        Ari::Log((Ari *)0x20, "(%s:%d) Recording indicationRegId as 0x%x", v22, v23, 1801, v59);
        if (SHIBYTE(v61) < 0)
          operator delete(__p[0]);
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + 256) = v59;
      }
    }
    AriHost::putAsideReconnectingClientData_nl(v5, v59);
    v24 = *(_QWORD *)(a1 + 56);
    if (std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)(v24 + 568), v3))
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "ReRegisterClient_block_invoke", (uint64_t)__p);
      if (v61 >= 0)
        v26 = __p;
      else
        v26 = (void **)__p[0];
      Ari::Log((Ari *)0x20, "(%s:%d) Transferring stored ClientData from cid 0x%x to cid 0x%x", v25, v26, 1813, v3, v59);
      if (SHIBYTE(v61) < 0)
        operator delete(__p[0]);
      v27 = *(_QWORD *)(a1 + 56);
      v28 = v27 + 424;
      v29 = v59;
      LODWORD(__p[0]) = v3;
      v30 = std::__hash_table<std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v27 + 568, v3, __p);
      ResMgr<std::shared_ptr<AriHost::ClientData>>::set(v28, v29, v30 + 3);
      std::__hash_table<std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>>>::__erase_unique<int>((_QWORD *)(*(_QWORD *)(a1 + 56) + 568), v3);
      v3 = v3 | 0xFF000000;
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "ReRegisterClient_block_invoke", (uint64_t)__p);
      if (v61 >= 0)
        v32 = __p;
      else
        v32 = (void **)__p[0];
      Ari::Log((Ari *)0x20, "(%s:%d) Transferring indication cid marked as 0x%x to new cid 0x%x", v31, v32, 1818, v3, v59);
    }
    else
    {
      if (!ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc(v24 + 424, v3))
      {
LABEL_89:
        v51 = *(_QWORD *)(a1 + 56);
        v52 = v59;
        v53 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)(v51 + 8), v59);
        if (v53)
        {
          v54 = (AriHost::TransactionMgr *)(v53 + 3);
          v55 = ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](v51 + 424, v52);
          AriHost::TransactionMgr::setMaxOutstanding(v54, *(unsigned int *)(*v55 + 40));
          v56 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v59);
          if (!v56)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          *((_BYTE *)v56 + 284) = 0;
        }
        else
        {
          v57 = *ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](v51 + 424, v52);
          v61 = 0xAAAAAAAAAAAAAA00;
          v58 = operator new(0x120uLL);
          __p[0] = v58;
          __p[1] = (void *)(v51 + 24);
          *v58 = 0;
          v58[1] = 0;
          *((_DWORD *)v58 + 4) = v52;
          AriHost::TransactionMgr::TransactionMgr((AriHost::TransactionMgr *)(v58 + 3), v52, *(_DWORD *)(v57 + 40));
          LOBYTE(v61) = 1;
          v58[1] = *((int *)v58 + 4);
          if ((std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::__node_insert_unique(v51 + 8, (uint64_t)v58) & 1) != 0)__p[0] = 0;
          std::unique_ptr<std::__hash_node<std::__hash_value_type<int,AriHost::TransactionMgr>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,AriHost::TransactionMgr>,void *>>>>::reset[abi:ne180100]((uint64_t *)__p);
        }
        return;
      }
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "ReRegisterClient_block_invoke", (uint64_t)__p);
      if (v61 >= 0)
        v45 = __p;
      else
        v45 = (void **)__p[0];
      Ari::Log((Ari *)0x20, "(%s:%d) Reassigning ClientData from cid 0x%x to cid 0x%x", v44, v45, 1823, v3, v59);
      if (SHIBYTE(v61) < 0)
        operator delete(__p[0]);
      v46 = *(_QWORD *)(a1 + 56) + 424;
      v47 = v59;
      v48 = ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](v46, v3);
      ResMgr<std::shared_ptr<AriHost::ClientData>>::set(v46, v47, v48);
      ResMgr<std::shared_ptr<AriHost::ClientData>>::free(*(_QWORD *)(a1 + 56) + 424, v3);
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "ReRegisterClient_block_invoke", (uint64_t)__p);
      if (v61 >= 0)
        v50 = __p;
      else
        v50 = (void **)__p[0];
      Ari::Log((Ari *)0x20, "(%s:%d) Reassigning indications using cid 0x%x to use 0x%x", v49, v50, 1829, v3, v59);
    }
    if (SHIBYTE(v61) < 0)
      operator delete(__p[0]);
    AriHost::updateIndicationCids_nl(*(AriHost **)(a1 + 56), v3, v59);
    goto LABEL_89;
  }
  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "ReRegisterClient_block_invoke", (uint64_t)__p);
  if (v61 >= 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  v9 = *(uint64_t **)(a1 + 64);
  if (*((char *)v9 + 23) < 0)
    v9 = (uint64_t *)*v9;
  Ari::Log((Ari *)8, "(%s:%d) Failed to register client %s", v7, v8, 1770, v9);
LABEL_60:
  if (SHIBYTE(v61) < 0)
    operator delete(__p[0]);
  **(_DWORD **)(a1 + 48) = -1;
}

void sub_20E256594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN7AriHost25HandleRTServerInitializedEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  dispatch_group_t v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t v14;
  dispatch_group_s *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject **v20;
  NSObject *v21;
  _QWORD block[8];
  __int128 v23;
  _BYTE v24[24];
  _BYTE *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  Ari::AriClient::create((void ***)&v23);
  std::shared_ptr<std::vector<unsigned char>>::operator=[abi:ne180100](a1[6] + 608, &v23);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = dispatch_group_create();
  v6 = v5;
  v7 = (std::__shared_weak_count *)a1[5];
  v8 = a1[6];
  v9 = a1[4];
  block[5] = v9;
  block[6] = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  block[7] = v5;
  v25 = 0;
  v12 = operator new(0x20uLL);
  *v12 = &off_24C905EE0;
  v12[1] = v9;
  v12[2] = v7;
  if (v7)
  {
    v13 = (unint64_t *)&v7->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v12[3] = v6;
  v25 = v12;
  ResMgr<std::shared_ptr<AriHost::ClientData>>::doForEach(v8 + 424, (uint64_t)v24);
  v16 = v25;
  if (v25 == v24)
  {
    v17 = 4;
    v16 = v24;
    goto LABEL_16;
  }
  if (v25)
  {
    v17 = 5;
LABEL_16:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }
  if (v7)
  {
    v18 = (unint64_t *)&v7->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  AriHost::registerActors(v6, v15);
  v20 = (NSObject **)a1[6];
  v21 = *v20;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZN7AriHost25HandleRTServerInitializedEv_block_invoke_2;
  block[3] = &__block_descriptor_tmp_194;
  block[4] = v20;
  dispatch_group_notify(v6, v21, block);
  dispatch_release(v6);
}

void sub_20E2567CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t ResMgr<std::shared_ptr<AriHost::ClientData>>::doForEach(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  uint64_t *i;
  uint64_t v6;
  int v8;

  AriOsa::SWTrap(*(_BYTE *)(a1 + 104) == 0, (uint64_t)"valid == false", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0x142);
  v4 = dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 96), 0xFFFFFFFFFFFFFFFFLL) != 0;
  AriOsa::SWTrap(v4, (uint64_t)"AriOsa::OsMutexTake(mtx) == ARI_RESULT_ERR", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0x144);
  for (i = *(uint64_t **)(a1 + 16); i; i = (uint64_t *)*i)
  {
    v8 = *((_DWORD *)i + 4);
    v6 = *(_QWORD *)(a2 + 24);
    if (!v6)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, int *, uint64_t *))(*(_QWORD *)v6 + 48))(v6, &v8, i + 4);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 96));
  return AriOsa::SWTrap(0, (uint64_t)"AriOsa::OsMutexGive(mtx) == ARI_RESULT_ERR", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0x147);
}

void AriHost::HandleConnectionError(AriHost *this)
{
  AriHost *v1;
  uint64_t v2;
  AriHost *v3;
  NSObject **Instance;
  NSObject *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  const char *v11;
  void **v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD block[5];
  std::__shared_weak_count *v17;
  NSObject **v18;
  void *v19[2];
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v21 = 0;
  v22 = 0;
  if (qword_253D0AF70
    && (v1 = (AriHost *)std::__shared_weak_count::lock((std::__shared_weak_count *)qword_253D0AF70),
        (v22 = (std::__shared_weak_count *)v1) != 0)
    && (v2 = AriHost::SingletonWeakPtr, (v21 = AriHost::SingletonWeakPtr) != 0))
  {
    v3 = v1;
    Instance = (NSObject **)AriHost::GetInstance(v1);
    v5 = *Instance;
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZN7AriHost21HandleConnectionErrorEv_block_invoke;
    block[3] = &__block_descriptor_tmp_196;
    block[4] = v2;
    v17 = (std::__shared_weak_count *)v3;
    v6 = (unint64_t *)((char *)v3 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v18 = Instance;
    dispatch_async(v5, block);
    v8 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "HandleConnectionError", (uint64_t)v19);
    if (v20 >= 0)
      v12 = v19;
    else
      v12 = (void **)v19[0];
    Ari::Log((Ari *)0x10, "(%s:%d) Failed to lock on AriHost instance. Shutting down?", v11, v12, 1912);
    if (v20 < 0)
      operator delete(v19[0]);
  }
  v13 = v22;
  if (v22)
  {
    v14 = (unint64_t *)&v22->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20E256A74(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 33) < 0)
    operator delete(*(void **)(v1 - 56));
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v1 - 32);
  _Unwind_Resume(a1);
}

void sub_20E256C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__list_imp<unsigned int>::clear(&a13);
  _Unwind_Resume(a1);
}

uint64_t AriHost::NotifyEventCallback(int a1, int a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  AriHost *v9;
  NSObject **Instance;
  NSObject *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  const char *v17;
  void **v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD block[5];
  uint64_t v24;
  NSObject **v25;
  uint64_t v26;
  int v27;
  int v28;
  void *__p[2];
  char v30;
  uint64_t v31;
  std::__shared_weak_count *v32;

  v31 = 0;
  v32 = 0;
  if (qword_253D0AF70
    && (v6 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_253D0AF70), (v32 = v6) != 0)
    && (v7 = AriHost::SingletonWeakPtr, (v31 = AriHost::SingletonWeakPtr) != 0))
  {
    v8 = v6;
    v9 = (AriHost *)AriOsa::SWTrap(a2 > 127, (uint64_t)"cid > ARI_MAX_CLIENT_ID", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", (const char *)0x7AC);
    Instance = (NSObject **)AriHost::GetInstance(v9);
    v11 = *Instance;
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZN7AriHost19NotifyEventCallbackE18ARI_XPC_NOTIFY_IDSiy_block_invoke;
    block[3] = &__block_descriptor_tmp_208;
    block[4] = v7;
    v24 = (uint64_t)v8;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v27 = a1;
    v28 = a2;
    v25 = Instance;
    v26 = a3;
    dispatch_async(v11, block);
    v14 = v24;
    if (v24)
    {
      v15 = (unint64_t *)(v24 + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v14);
      }
      v14 = 0;
    }
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "NotifyEventCallback", (uint64_t)__p);
    if (v30 >= 0)
      v18 = __p;
    else
      v18 = (void **)__p[0];
    Ari::Log((Ari *)0x10, "(%s:%d) Failed to lock on AriHost instance. Shutting down?", v17, v18, 1960);
    if (v30 < 0)
      operator delete(__p[0]);
    v14 = 0xFFFFFFFFLL;
  }
  v19 = v32;
  if (v32)
  {
    v20 = (unint64_t *)&v32->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return v14;
}

void sub_20E256E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v25 - 64);
  _Unwind_Resume(a1);
}

void ___ZN7AriHost19NotifyEventCallbackE18ARI_XPC_NOTIFY_IDSiy_block_invoke(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int started;
  const char *v5;
  void *p_p;
  const char *v7;
  void *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  const char *v19;
  void **v20;
  const char *v21;
  void **v22;
  uint64_t v23;
  NSObject **v24;
  uint64_t v25;
  const char *v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  AriHost *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  void **v38;
  unint64_t *v39;
  unint64_t v40;
  void **v41;
  uint64_t *v42;
  const char *v43;
  _QWORD *v44;
  uint64_t j;
  void **v46;
  uint64_t *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  const char *v52;
  void **v53;
  uint64_t *v54;
  const char *v55;
  _QWORD *v56;
  const char *v57;
  uint64_t v58;
  const char *v59;
  void *v60;
  void *v61[2];
  char v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  __int128 v65;
  void *__p;
  uint64_t v67;
  uint64_t (*v68)(uint64_t);
  void *v69;
  NSObject **v70;
  uint64_t v71;
  int v72;
  _BYTE v73[24];
  _BYTE *v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  switch(*(_DWORD *)(a1 + 64))
  {
    case 1:
      v2 = *(_QWORD *)(a1 + 48);
      if (!*(_BYTE *)(v2 + 704) && *(_DWORD *)(v2 + 256) != -1)
      {
        AriHost::reRegisterIndications_nl((AriHost *)v2);
        v2 = *(_QWORD *)(a1 + 48);
        *(_BYTE *)(v2 + 704) = 1;
      }
      v3 = AriHost::flushStalledRequests_nl((AriHost *)v2);
      if (v3)
      {
        started = v3;
        AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "NotifyEventCallback_block_invoke", (uint64_t)&__p);
        if (SHIBYTE(v68) >= 0)
          p_p = &__p;
        else
          p_p = __p;
        Ari::Log((Ari *)8, "(%s:%d) failed to flush stalled requests for cid 0x%x", v5, p_p, 1992, *(unsigned int *)(a1 + 68));
        if (SHIBYTE(v68) < 0)
          operator delete(__p);
      }
      else
      {
        v33 = *(unsigned int *)(a1 + 68);
        v34 = *(AriHost **)(a1 + 48);
        v35 = *(_QWORD *)(a1 + 56);
        started = AriHost::startClient_nl(v34, v33);
        (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(**((_QWORD **)v34 + 76) + 80))(*((_QWORD **)v34 + 76), v33, v35, 1);
      }
      v36 = *(_QWORD *)(a1 + 48);
      if (*(_QWORD *)(v36 + 592) && *(_DWORD *)(a1 + 68) == *(_DWORD *)(v36 + 256))
      {
        AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "NotifyEventCallback_block_invoke", (uint64_t)&__p);
        v38 = SHIBYTE(v68) >= 0 ? &__p : (void **)__p;
        Ari::Log((Ari *)0x20, "(%s:%d) %lu client reconnections are not complete at All-Ready event", v37, v38, 1997, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 592));
        if (SHIBYTE(v68) < 0)
          operator delete(__p);
      }
      goto LABEL_100;
    case 2:
      *(_BYTE *)(*(_QWORD *)(a1 + 48) + 704) = 0;
      if (AriHost::cancelBlockedRequests_nl((AriHost *)a1, *(_DWORD *)(a1 + 68)))
      {
        AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "NotifyEventCallback_block_invoke", (uint64_t)&__p);
        v20 = SHIBYTE(v68) >= 0 ? &__p : (void **)__p;
        Ari::Log((Ari *)0x10, "(%s:%d) failed to cancel blocked requests for cid 0x%x", v19, v20, 2008, *(unsigned int *)(a1 + 68));
        if (SHIBYTE(v68) < 0)
          operator delete(__p);
      }
      if (AriHost::cancelStalledRequests_nl(*(AriHost **)(a1 + 48)))
      {
        AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "NotifyEventCallback_block_invoke", (uint64_t)&__p);
        v22 = SHIBYTE(v68) >= 0 ? &__p : (void **)__p;
        Ari::Log((Ari *)0x10, "(%s:%d) failed to cancel stalled requests for cid 0x%x", v21, v22, 2013, *(unsigned int *)(a1 + 68));
        if (SHIBYTE(v68) < 0)
          operator delete(__p);
      }
      v23 = *(unsigned int *)(a1 + 68);
      v24 = *(NSObject ***)(a1 + 48);
      v25 = *(_QWORD *)(a1 + 56);
      __p = (void *)MEMORY[0x24BDAC760];
      v67 = 0x40000000;
      v68 = ___ZN7AriHost7stop_nlEiy_block_invoke;
      v69 = &__block_descriptor_tmp_128;
      v72 = v23;
      v70 = v24;
      v71 = v25;
      started = AriHost::stopClient_nl(v24, v23, (void (**)(_QWORD))&__p);
      if (started)
      {
        AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "NotifyEventCallback_block_invoke", (uint64_t)&__p);
        v27 = SHIBYTE(v68) >= 0 ? &__p : (void **)__p;
        Ari::Log((Ari *)0x10, "(%s:%d) error while stopping cid 0x%x", v26, v27, 2018, *(unsigned int *)(a1 + 68));
        if (SHIBYTE(v68) < 0)
          operator delete(__p);
      }
      v28 = *(_QWORD *)(a1 + 48);
      if (*(_QWORD *)(v28 + 72))
      {
        std::__hash_table<std::__hash_value_type<int,AriHost::FilerTransfer>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::FilerTransfer>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::FilerTransfer>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::FilerTransfer>>>::__deallocate_node(*(_QWORD **)(v28 + 64));
        *(_QWORD *)(v28 + 64) = 0;
        v29 = *(_QWORD *)(v28 + 56);
        if (v29)
        {
          for (i = 0; i != v29; ++i)
            *(_QWORD *)(*(_QWORD *)(v28 + 48) + 8 * i) = 0;
        }
        *(_QWORD *)(v28 + 72) = 0;
      }
      goto LABEL_100;
    case 3:
      v31 = AriHost::enterLPM_nl(*(AriHost **)(a1 + 48), *(unsigned int *)(a1 + 68), *(_QWORD *)(a1 + 56));
      goto LABEL_99;
    case 4:
      v31 = AriHost::exitLPM_nl(*(AriHost **)(a1 + 48), *(unsigned int *)(a1 + 68), *(_QWORD *)(a1 + 56));
      goto LABEL_99;
    case 5:
      started = AriHost::stallClients_nl(*(AriHost **)(a1 + 48));
      (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 48) + 608) + 80))(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 608), *(unsigned int *)(a1 + 68), *(_QWORD *)(a1 + 56), 5);
      goto LABEL_100;
    case 7:
      if (!ResMgr<std::shared_ptr<AriHost::ClientData>>::isAlloc(*(_QWORD *)(a1 + 48) + 424, *(_DWORD *)(a1 + 68)))
        goto LABEL_98;
      __p = &__p;
      v67 = (uint64_t)&__p;
      v68 = 0;
      v9 = *(std::__shared_weak_count **)(a1 + 40);
      v10 = *(_QWORD *)(a1 + 48);
      v11 = *(_QWORD *)(a1 + 32);
      v63 = v11;
      v64 = v9;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      LODWORD(v65) = *(_DWORD *)(a1 + 68);
      *((_QWORD *)&v65 + 1) = &__p;
      v74 = 0;
      v14 = (char *)operator new(0x28uLL);
      *(_QWORD *)v14 = &off_24C906050;
      *((_QWORD *)v14 + 1) = v11;
      *((_QWORD *)v14 + 2) = v9;
      if (v9)
      {
        v15 = (unint64_t *)&v9->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      *(_OWORD *)(v14 + 24) = v65;
      v74 = v14;
      ResMgr<AriHost::IndicationHandlerList>::doForEach(v10 + 112, (uint64_t)v73);
      v17 = v74;
      if (v74 == v73)
      {
        v18 = 4;
        v17 = v73;
      }
      else
      {
        if (!v74)
          goto LABEL_64;
        v18 = 5;
      }
      (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_64:
      if (v9)
      {
        v39 = (unint64_t *)&v9->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      if (v68)
      {
        v41 = v61;
        AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "NotifyEventCallback_block_invoke", (uint64_t)v61);
        if (v62 < 0)
          v41 = (void **)v61[0];
        v42 = ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](*(_QWORD *)(a1 + 48) + 424, *(_DWORD *)(a1 + 68));
        v44 = (_QWORD *)*v42;
        if (*(char *)(*v42 + 23) < 0)
          v44 = (_QWORD *)*v44;
        Ari::Log((Ari *)0x20, "(%s:%d) Client %s (0x%x) has %lu indications registered", v43, v41, 2064, v44, *(unsigned int *)(a1 + 68), v68);
        if (v62 < 0)
          operator delete(v61[0]);
        for (j = v67; (void **)j != &__p; j = *(_QWORD *)(j + 8))
        {
          AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "NotifyEventCallback_block_invoke", (uint64_t)v61);
          if (v62 >= 0)
            v46 = v61;
          else
            v46 = (void **)v61[0];
          v47 = ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](*(_QWORD *)(a1 + 48) + 424, *(_DWORD *)(a1 + 68));
          v48 = (_QWORD *)*v47;
          if (*(char *)(*v47 + 23) < 0)
            v48 = (_QWORD *)*v48;
          v49 = *(unsigned int *)(*(_QWORD *)(j + 16) + 12);
          v50 = Ari::MsgDefById((Ari *)(v49 >> 26), (v49 >> 15) & 0x3FF);
          if (v50)
          {
            v52 = *(const char **)(v50 + 48);
            if (!v52)
              v52 = "Unknown";
          }
          else
          {
            v52 = "Unknown";
          }
          Ari::Log((Ari *)0x20, "(%s:%d) Client %s (0x%x) registered %s (0x%x)", v51, v46, 2067, v48, *(unsigned int *)(a1 + 68), v52, v49);
          if (v62 < 0)
            operator delete(v61[0]);
        }
      }
      else
      {
        v53 = v61;
        AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "NotifyEventCallback_block_invoke", (uint64_t)v61);
        if (v62 < 0)
          v53 = (void **)v61[0];
        v54 = ResMgr<std::shared_ptr<AriHost::ClientData>>::operator[](*(_QWORD *)(a1 + 48) + 424, *(_DWORD *)(a1 + 68));
        v56 = (_QWORD *)*v54;
        if (*(char *)(*v54 + 23) < 0)
          v56 = (_QWORD *)*v56;
        Ari::Log((Ari *)0x20, "(%s:%d) Client %s has NO indications registered", v55, v53, 2072, v56);
        if (v62 < 0)
          operator delete(v61[0]);
      }
      std::__list_imp<std::shared_ptr<Ari::ClientOutboundMessage>>::clear((uint64_t *)&__p);
LABEL_98:
      v31 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 48) + 608)
                                                                       + 80))(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 608), *(unsigned int *)(a1 + 68), *(_QWORD *)(a1 + 56), 7);
LABEL_99:
      started = v31;
LABEL_100:
      if (started)
      {
LABEL_101:
        AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "NotifyEventCallback_block_invoke", (uint64_t)&__p);
        v58 = *(int *)(a1 + 64);
        if (v58 > 8)
          v59 = "UNKNOWN";
        else
          v59 = off_24C9060C0[v58];
        v60 = __p;
        if (SHIBYTE(v68) >= 0)
          v60 = &__p;
        Ari::Log((Ari *)8, "(%s:%d) Notify event %s failed for cid %u", v57, v60, 2085, v59, *(unsigned int *)(a1 + 68));
        if (SHIBYTE(v68) < 0)
          operator delete(__p);
      }
      return;
    case 8:
      v32 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>((_QWORD *)(*(_QWORD *)(a1 + 48) + 8), *(_DWORD *)(a1 + 68));
      if (!v32)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      AriHost::TransactionMgr::clearCancelled(v32 + 3);
      v31 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 48) + 608)
                                                                       + 80))(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 608), *(unsigned int *)(a1 + 68), *(_QWORD *)(a1 + 56), 8);
      goto LABEL_99;
    default:
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "NotifyEventCallback_block_invoke", (uint64_t)&__p);
      if (SHIBYTE(v68) >= 0)
        v8 = &__p;
      else
        v8 = __p;
      Ari::Log((Ari *)8, "(%s:%d) unknown notification %u", v7, v8, 2080, *(unsigned int *)(a1 + 64));
      if (SHIBYTE(v68) < 0)
        operator delete(__p);
      goto LABEL_101;
  }
}

void sub_20E25769C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::__list_imp<std::shared_ptr<Ari::ClientOutboundMessage>>::clear((uint64_t *)&__p);
  _Unwind_Resume(a1);
}

_QWORD *AriHost::TransactionMgr::clearCancelled(_QWORD *this)
{
  uint64_t v1;
  const char *v2;
  void **v3;
  _QWORD *v4;
  void *__p[2];
  char v6;

  if (this[30])
  {
    v1 = (uint64_t)this;
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "clearCancelled", (uint64_t)__p);
    if (v6 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) BUG: Clearing %zu cancelled-but-not-released requests for cid %u", v2, v3, 2329, *(_QWORD *)(v1 + 240), *(unsigned int *)(v1 + 144));
    v4 = (_QWORD *)(v1 + 216);
    if (v6 < 0)
      operator delete(__p[0]);
    return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::clear(v4);
  }
  return this;
}

void sub_20E2577EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

AriHost::TransactionMgr *AriHost::TransactionMgr::TransactionMgr(AriHost::TransactionMgr *this, uint64_t a2, int a3)
{
  uint64_t v6;
  dispatch_semaphore_t v7;
  _QWORD *v8;
  uint64_t v9;
  const char *v10;
  void **v11;
  void *__p[2];
  char v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v16 = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  IDMgr::IDMgr((AriHost::TransactionMgr *)((char *)this + 40), 1u, 0xFFu);
  *((_QWORD *)this + 12) = 0;
  *((_BYTE *)this + 104) = 0;
  v6 = (uint64_t)v16;
  if (!v16)
    goto LABEL_4;
  if (v16 != v15)
  {
    v6 = (*(uint64_t (**)(void))(*v16 + 16))();
LABEL_4:
    *((_QWORD *)this + 17) = v6;
    goto LABEL_6;
  }
  *((_QWORD *)this + 17) = (char *)this + 112;
  (*(void (**)(_QWORD *))(v15[0] + 24))(v15);
LABEL_6:
  v7 = dispatch_semaphore_create(1);
  *((_QWORD *)this + 12) = v7;
  if (v7)
    *((_BYTE *)this + 104) = 1;
  v8 = v16;
  if (v16 == v15)
  {
    v9 = 4;
    v8 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_13;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_13:
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_DWORD *)this + 36) = a2;
  *((_QWORD *)this + 19) = (char *)this + 152;
  *((_QWORD *)this + 20) = (char *)this + 152;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_QWORD *)this + 25) = 0;
  *((_DWORD *)this + 52) = 1065353216;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_DWORD *)this + 62) = 1065353216;
  *((_DWORD *)this + 64) = a3;
  *((_BYTE *)this + 260) = 0;
  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "TransactionMgr", (uint64_t)__p);
  if (v14 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  Ari::Log((Ari *)4, "(%s:%d) Create transaction manager for cid 0x%x", v10, v11, 2100, a2);
  if (v14 < 0)
    operator delete(__p[0]);
  return this;
}

void sub_20E2579BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,char *a22)
{
  uint64_t v22;
  IDMgr *v23;
  char *v25;
  uint64_t v26;

  IDMgr::~IDMgr(v23);
  std::__hash_table<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>>>::~__hash_table(v22);
  v25 = a22;
  if (a22 == &a19)
  {
    v26 = 4;
    v25 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t ResMgr<std::shared_ptr<AriHost::InboundMsgHandler>>::~ResMgr(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;

  std::__hash_table<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>>>::clear(a1);
  v2 = *(NSObject **)(a1 + 96);
  if (v2)
    dispatch_release(v2);
  v3 = *(_QWORD **)(a1 + 136);
  if (v3 == (_QWORD *)(a1 + 112))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 112);
    goto LABEL_7;
  }
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  std::__tree<IDMgr::Range>::destroy(a1 + 72, *(_QWORD **)(a1 + 80));
  std::__tree<IDMgr::Range>::destroy(a1 + 48, *(_QWORD **)(a1 + 56));
  return std::__hash_table<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>>>::~__hash_table(a1);
}

void AriHost::TransactionMgr::~TransactionMgr(AriHost::TransactionMgr *this)
{
  const char *v2;
  void **v3;
  void *__p[2];
  char v5;

  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "~TransactionMgr", (uint64_t)__p);
  if (v5 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  Ari::Log((Ari *)4, "(%s:%d) Destroy transaction manager for cid 0x%x", v2, v3, 2105, *((unsigned int *)this + 36));
  if (v5 < 0)
    operator delete(__p[0]);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 216);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::~__hash_table((uint64_t)this + 176);
  std::__list_imp<std::shared_ptr<Ari::ClientOutboundMessage>>::clear((uint64_t *)this + 19);
  ResMgr<std::shared_ptr<AriHost::InboundMsgHandler>>::~ResMgr((uint64_t)this);
}

BOOL AriHost::TransactionMgr::isMaxOutstanding(AriHost::TransactionMgr *this)
{
  return *((_QWORD *)this + 25) >= (unint64_t)*((unsigned int *)this + 64);
}

uint64_t AriHost::TransactionMgr::getOutstandingCount(AriHost::TransactionMgr *this)
{
  return *((_QWORD *)this + 25);
}

_QWORD *AriHost::TransactionMgr::blockMessage(uint64_t a1, _QWORD *a2)
{
  int v4;
  void **v5;
  const char *v6;
  void **v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;

  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "blockMessage", (uint64_t)v18);
  v4 = v19;
  v5 = (void **)v18[0];
  GetBufDigest(**(AriMsg ***)(*a2 + 16), 0, (const unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*a2 + 16) + 8) - **(_QWORD **)(*a2 + 16)), (uint64_t)__p);
  if (v4 >= 0)
    v7 = v18;
  else
    v7 = v5;
  if (v17 >= 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  Ari::Log((Ari *)4, "(%s:%d) queue blocked msg %s", v6, v7, 2293, v8);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  v10 = *a2;
  v9 = a2[1];
  result = operator new(0x20uLL);
  result[2] = v10;
  result[3] = v9;
  if (v9)
  {
    v12 = (unint64_t *)(v9 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v15 = *(_QWORD *)(a1 + 152);
  v14 = (_QWORD *)(a1 + 152);
  *result = v15;
  result[1] = v14;
  *(_QWORD *)(v15 + 8) = result;
  *v14 = result;
  ++v14[2];
  return result;
}

void sub_20E257CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t AriHost::TransactionMgr::getBlockedCount(AriHost::TransactionMgr *this)
{
  return *((_QWORD *)this + 21);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x24BEDB870] + 64;
  v4 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_20E257DA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x212BB9B00](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212BB9B00](a1 + 112);
  return a1;
}

void AriHost::TransactionMgr::unblockMessage(AriHost::TransactionMgr *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  void **v12;
  const char *v13;
  void **v14;
  void **v15;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;

  *a2 = 0;
  a2[1] = 0;
  if (*((_QWORD *)this + 21))
  {
    v3 = *((_QWORD *)this + 20);
    v5 = *(_QWORD *)(v3 + 16);
    v4 = *(_QWORD *)(v3 + 24);
    if (v4)
    {
      v6 = (unint64_t *)(v4 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    *a2 = v5;
    a2[1] = v4;
    v9 = (uint64_t *)*((_QWORD *)this + 20);
    v8 = *((_QWORD *)this + 21);
    v10 = *v9;
    *(_QWORD *)(v10 + 8) = v9[1];
    *(_QWORD *)v9[1] = v10;
    *((_QWORD *)this + 21) = v8 - 1;
    std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)(v9 + 2));
    operator delete(v9);
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "unblockMessage", (uint64_t)v18);
    v11 = v19;
    v12 = (void **)v18[0];
    GetBufDigest(**(AriMsg ***)(*a2 + 16), 0, (const unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*a2 + 16) + 8) - **(_QWORD **)(*a2 + 16)), (uint64_t)__p);
    v14 = v18;
    if (v11 < 0)
      v14 = v12;
    if (v17 >= 0)
      v15 = __p;
    else
      v15 = (void **)__p[0];
    Ari::Log((Ari *)4, "(%s:%d) dequeue blocked msg %s", v13, v14, 2305, v15);
    if (v17 < 0)
      operator delete(__p[0]);
    if (v19 < 0)
      operator delete(v18[0]);
  }
}

void sub_20E257F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

_QWORD *AriHost::IndicationHandlerList::IndicationHandlerList(_QWORD *this)
{
  *this = this;
  this[1] = this;
  this[2] = 0;
  return this;
}

{
  *this = this;
  this[1] = this;
  this[2] = 0;
  return this;
}

uint64_t AriHost::IndicationHandlerList::getGmid(AriHost::IndicationHandlerList *this)
{
  return *((unsigned int *)this + 7);
}

uint64_t AriHost::IndicationHandlerList::hasClientModifiedWake(AriHost::IndicationHandlerList *this)
{
  return *((unsigned __int8 *)this + 25);
}

uint64_t AriHost::IndicationHandlerList::getWakeable(AriHost::IndicationHandlerList *this)
{
  return *((unsigned __int8 *)this + 24);
}

void AriHost::IndicationHandlerList::updateHandlerId(AriHost::IndicationHandlerList *this, uint64_t a2, uint64_t a3)
{
  AriHost::IndicationHandlerList *i;
  int v7;
  void **v8;
  const char *v9;
  void **v10;
  void **v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;

  for (i = (AriHost::IndicationHandlerList *)*((_QWORD *)this + 1);
        i != this;
        i = (AriHost::IndicationHandlerList *)*((_QWORD *)i + 1))
  {
    if (*(_DWORD *)(*((_QWORD *)i + 2) + 8) == (_DWORD)a2)
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "updateHandlerId", (uint64_t)v14);
      v7 = v15;
      v8 = (void **)v14[0];
      AriHost::IndicationHandlerList::toString(this, __p);
      v10 = v14;
      if (v7 < 0)
        v10 = v8;
      if (v13 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      Ari::Log((Ari *)0x20, "(%s:%d) Updating handler CID (0x%x -> 0x%x) for %s", v9, v10, 2382, a2, a3, v11);
      if (v13 < 0)
        operator delete(__p[0]);
      if (v15 < 0)
        operator delete(v14[0]);
      *(_DWORD *)(*((_QWORD *)i + 2) + 8) = a3;
    }
  }
}

void sub_20E258130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t AriHost::IndicationHandlerList::toString@<X0>(AriHost::IndicationHandlerList *this@<X0>, _QWORD *a2@<X8>)
{
  __int128 v4;
  uint64_t v5;
  const char *v6;
  size_t v7;
  uint64_t v8;
  _QWORD *v9;
  _OWORD v11[4];
  void *__p[2];
  __int128 v13;
  __int128 v14;
  _OWORD v15[9];
  unint64_t v16;

  v16 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[7] = v4;
  v15[8] = v4;
  v15[5] = v4;
  v15[6] = v4;
  v15[3] = v4;
  v15[4] = v4;
  v15[1] = v4;
  v15[2] = v4;
  v14 = v4;
  v15[0] = v4;
  *(_OWORD *)__p = v4;
  v13 = v4;
  v11[2] = v4;
  v11[3] = v4;
  v11[0] = v4;
  v11[1] = v4;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
  v5 = Ari::MsgDefById((Ari *)(*((_DWORD *)this + 7) >> 26), (*((_DWORD *)this + 7) >> 15) & 0x3FF);
  v6 = "Unknown";
  if (v5 && *(_QWORD *)(v5 + 48))
    v6 = *(const char **)(v5 + 48);
  v7 = strlen(v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" (", 2);
  v8 = *(_QWORD *)&v11[0];
  *(_DWORD *)((char *)v11 + *(_QWORD *)(*(_QWORD *)&v11[0] - 24) + 8) = *(_DWORD *)((_BYTE *)v11
                                                                                    + *(_QWORD *)(*(_QWORD *)&v11[0]
                                                                                                - 24)
                                                                                    + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(v8 - 24) + 8) |= 0x200u;
  v9 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)")", 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a2, (uint64_t)v11 + 8);
  *(_QWORD *)&v11[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v11 + *(_QWORD *)(*(_QWORD *)&v11[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *((_QWORD *)&v11[0] + 1) = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v13) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212BB9B00](v15);
}

void sub_20E2582E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t AriHost::FilerTransfer::FilerTransfer(uint64_t this, int a2, unsigned int a3, int a4)
{
  *(_DWORD *)this = a4;
  *(_DWORD *)(this + 4) = a2;
  *(_QWORD *)(this + 8) = a3;
  *(_QWORD *)(this + 16) = a3;
  return this;
}

{
  *(_DWORD *)this = a4;
  *(_DWORD *)(this + 4) = a2;
  *(_QWORD *)(this + 8) = a3;
  *(_QWORD *)(this + 16) = a3;
  return this;
}

void AriHost::FilerTransfer::~FilerTransfer(AriHost::FilerTransfer *this)
{
  int v2;
  void **v3;
  const char *v4;
  void **v5;
  void **v6;
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;

  if (*((_QWORD *)this + 1))
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "~FilerTransfer", (uint64_t)v9);
    v2 = v10;
    v3 = (void **)v9[0];
    AriHost::FilerTransfer::getName(this, __p);
    v5 = v9;
    if (v2 < 0)
      v5 = v3;
    if (v8 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    Ari::Log((Ari *)0x10, "(%s:%d) FilerTransfer %s has been abandoned with %lld bytes remaining of %lld total bytes", v4, v5, 2409, v6, *((_QWORD *)this + 1), *((_QWORD *)this + 2));
    if (v8 < 0)
      operator delete(__p[0]);
    if (v10 < 0)
      operator delete(v9[0]);
  }
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BB9B00](a1 + 128);
  return a1;
}

_QWORD *std::__list_imp<unsigned int>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void std::__list_imp<std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)(v3 + 3));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__list_imp<std::shared_ptr<Ari::ClientOutboundMessage>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void IDMgr::~IDMgr(IDMgr *this)
{
  std::__tree<IDMgr::Range>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  std::__tree<IDMgr::Range>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
}

void std::__tree<IDMgr::Range>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<IDMgr::Range>::destroy(a1, *a2);
    std::__tree<IDMgr::Range>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 4));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::__list_imp<std::shared_ptr<Ari::ClientOutboundMessage>>::clear(v1 + 4);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      AriHost::TransactionMgr::~TransactionMgr((AriHost::TransactionMgr *)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<int,AriHost::FilerTransfer>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::FilerTransfer>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::FilerTransfer>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::FilerTransfer>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<int,AriHost::FilerTransfer>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::FilerTransfer>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::FilerTransfer>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::FilerTransfer>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,AriHost::FilerTransfer>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::FilerTransfer>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::FilerTransfer>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::FilerTransfer>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      AriHost::FilerTransfer::~FilerTransfer((AriHost::FilerTransfer *)(v1 + 3));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

uint64_t ResMgr<AriHost::IndicationHandlerList>::~ResMgr(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v4 = *(NSObject **)(a1 + 96);
  if (v4)
    dispatch_release(v4);
  v5 = *(_QWORD **)(a1 + 136);
  if (v5 == (_QWORD *)(a1 + 112))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 112);
    goto LABEL_12;
  }
  if (v5)
  {
    v6 = 5;
LABEL_12:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  std::__tree<IDMgr::Range>::destroy(a1 + 72, *(_QWORD **)(a1 + 80));
  std::__tree<IDMgr::Range>::destroy(a1 + 48, *(_QWORD **)(a1 + 56));
  return std::__hash_table<std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>>>::~__hash_table(a1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN7AriHost11GetInstanceEvEUb_E16AriHostNoPrivateNS_9allocatorIS2_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C905B80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN7AriHost11GetInstanceEvEUb_E16AriHostNoPrivateNS_9allocatorIS2_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C905B80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BB9B60);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN7AriHost11GetInstanceEvEUb_E16AriHostNoPrivateNS_9allocatorIS2_EEE16__on_zero_sharedEv(uint64_t a1)
{
  AriHost::~AriHost((AriHost *)(a1 + 24));
}

void std::__shared_ptr_emplace<AriHost::ClientData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C905BD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AriHost::ClientData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C905BD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BB9B60);
}

void std::__shared_ptr_emplace<AriHost::ClientData>::__on_zero_shared(uint64_t a1)
{
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](a1 + 152);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](a1 + 136);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](a1 + 120);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](a1 + 104);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](a1 + 88);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](a1 + 72);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](a1 + 48);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

uint64_t ResMgr<std::shared_ptr<AriHost::ClientData>>::sw_dbug_trap(uint64_t result, int a2, const char *a3)
{
  _QWORD *v3;
  const char *v4;
  void **v5;
  uint64_t *i;
  uint64_t v7;
  int v8;
  const char *v9;
  void **v10;
  void *__p[2];
  char v12;
  int v13;

  if (a2)
  {
    v3 = (_QWORD *)result;
    IDMgr::dump((IDMgr *)(result + 40), 1, a3);
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", "sw_dbug_trap", (uint64_t)__p);
    if (v12 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) ResMgr(%p) dump total entries: %zu", v4, v5, 274, v3, v3[3]);
    if (v12 < 0)
      operator delete(__p[0]);
    for (i = (uint64_t *)v3[2]; i; i = (uint64_t *)*i)
    {
      v7 = v3[17];
      if (v7)
      {
        v8 = *((_DWORD *)i + 6);
        LODWORD(__p[0]) = *((_DWORD *)i + 4);
        v13 = v8;
        (*(void (**)(uint64_t, void **, int *, uint64_t *))(*(_QWORD *)v7 + 48))(v7, __p, &v13, i + 4);
      }
      else
      {
        AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", "sw_dbug_trap", (uint64_t)__p);
        if (v12 >= 0)
          v10 = __p;
        else
          v10 = (void **)__p[0];
        Ari::Log((Ari *)8, "(%s:%d) id(%08d-0x%08x) ts:%u", v9, v10, 284, *((unsigned int *)i + 4), *((unsigned int *)i + 4), *((unsigned int *)i + 6));
        if (v12 < 0)
          operator delete(__p[0]);
      }
    }
    AriOsa::OsSleep((AriOsa *)0x7D0);
    return AriOsa::SWTrap(1, (uint64_t)"true", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0x11F);
  }
  return result;
}

void sub_20E258B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__hash_table<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;
  _QWORD v35[3];

  v5 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = (v6 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return i;
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v11 >= v6)
              v11 %= v6;
          }
          else
          {
            v11 &= v6 - 1;
          }
          if (v11 != v8)
            break;
        }
      }
    }
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAAALL;
  }
  v12 = (_QWORD *)(a1 + 16);
  v35[2] = 0xAAAAAAAAAAAAAA01;
  v13 = operator new(0x30uLL);
  v35[0] = v13;
  v35[1] = a1 + 16;
  *v13 = 0;
  v13[1] = v5;
  *((_DWORD *)v13 + 4) = *a3;
  *((_DWORD *)v13 + 6) = 0;
  v13[4] = 0;
  v13[5] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v6 || (float)(v15 * (float)v6) < v14)
  {
    v16 = 1;
    if (v6 >= 3)
      v16 = (v6 & (v6 - 1)) != 0;
    v17 = v16 | (2 * v6);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v6 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v6)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v6)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v6 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v6)
      {
        v6 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = *(void **)a1;
          *(_QWORD *)a1 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD *)*v12;
          if (*v12)
          {
            v24 = v23[1];
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v12;
            v29 = (_QWORD *)*v23;
            if (*v23)
            {
              do
              {
                v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&prime)
                    v30 %= *(_QWORD *)&prime;
                }
                else
                {
                  v30 &= *(_QWORD *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  *v23 = *v29;
                  *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
                  v29 = v23;
                }
                v30 = v24;
LABEL_55:
                v23 = v29;
                v29 = (_QWORD *)*v29;
                v24 = v30;
              }
              while (v29);
            }
          }
          v6 = (unint64_t)prime;
          goto LABEL_59;
        }
        v34 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v34)
          operator delete(v34);
        v6 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v8 = v5 % v6;
      else
        v8 = v5;
    }
    else
    {
      v8 = (v6 - 1) & v5;
    }
  }
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  i = (uint64_t *)v35[0];
  if (v31)
  {
    *(_QWORD *)v35[0] = *v31;
LABEL_72:
    *v31 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v35[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = v12;
  if (*i)
  {
    v32 = *(_QWORD *)(*i + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v32 >= v6)
        v32 %= v6;
    }
    else
    {
      v32 &= v6 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v35);
  return i;
}

void sub_20E258F40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>(_QWORD *a1, int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = (v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::__node_insert_unique(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *i;
  unint64_t v10;
  float v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  int8x8_t prime;
  void *v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint8x8_t v29;
  _QWORD *v30;
  unint64_t v31;
  void *v33;

  v4 = *(int *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v4;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v6 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = v4;
      if (v5 <= v4)
        v7 = v4 % v5;
    }
    else
    {
      v7 = (v5 - 1) & v4;
    }
    v8 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v7);
    if (v8)
    {
      for (i = *v8; i; i = (uint64_t *)*i)
      {
        v10 = i[1];
        if (v10 == v4)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v4)
            return 0;
        }
        else
        {
          if (v6.u32[0] > 1uLL)
          {
            if (v10 >= v5)
              v10 %= v5;
          }
          else
          {
            v10 &= v5 - 1;
          }
          if (v10 != v7)
            break;
        }
      }
    }
  }
  v11 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v12 = *(float *)(a1 + 32);
  if (!v5 || (float)(v12 * (float)v5) < v11)
  {
    v13 = 1;
    if (v5 >= 3)
      v13 = (v5 & (v5 - 1)) != 0;
    v14 = v13 | (2 * v5);
    v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15)
      prime = (int8x8_t)v15;
    else
      prime = (int8x8_t)v14;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v5 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v5)
      goto LABEL_84;
    if (*(_QWORD *)&prime >= v5)
      goto LABEL_58;
    v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
    {
      v23 = std::__next_prime(v23);
    }
    else
    {
      v25 = 1 << -(char)__clz(v23 - 1);
      if (v23 >= 2)
        v23 = v25;
    }
    if (*(_QWORD *)&prime <= v23)
      prime = (int8x8_t)v23;
    if (*(_QWORD *)&prime >= v5)
    {
      v5 = *(_QWORD *)(a1 + 8);
      goto LABEL_58;
    }
    if (prime)
    {
LABEL_84:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v17 = operator new(8 * *(_QWORD *)&prime);
      v18 = *(void **)a1;
      *(_QWORD *)a1 = v17;
      if (v18)
        operator delete(v18);
      v19 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v19++) = 0;
      while (*(_QWORD *)&prime != v19);
      v20 = *(_QWORD **)(a1 + 16);
      if (v20)
      {
        v21 = v20[1];
        v22 = (uint8x8_t)vcnt_s8(prime);
        v22.i16[0] = vaddlv_u8(v22);
        if (v22.u32[0] > 1uLL)
        {
          if (v21 >= *(_QWORD *)&prime)
            v21 %= *(_QWORD *)&prime;
        }
        else
        {
          v21 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = a1 + 16;
        v26 = (_QWORD *)*v20;
        if (*v20)
        {
          do
          {
            v27 = v26[1];
            if (v22.u32[0] > 1uLL)
            {
              if (v27 >= *(_QWORD *)&prime)
                v27 %= *(_QWORD *)&prime;
            }
            else
            {
              v27 &= *(_QWORD *)&prime - 1;
            }
            if (v27 != v21)
            {
              if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v27))
              {
                *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v20;
                goto LABEL_54;
              }
              *v20 = *v26;
              *v26 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v27);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v27) = v26;
              v26 = v20;
            }
            v27 = v21;
LABEL_54:
            v20 = v26;
            v26 = (_QWORD *)*v26;
            v21 = v27;
          }
          while (v26);
        }
      }
      v5 = (unint64_t)prime;
    }
    else
    {
      v33 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v33)
        operator delete(v33);
      v5 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_58:
  v28 = *(_QWORD *)(a2 + 8);
  v29 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v29.i16[0] = vaddlv_u8(v29);
  if (v29.u32[0] > 1uLL)
  {
    if (v28 >= v5)
      v28 %= v5;
  }
  else
  {
    v28 &= v5 - 1;
  }
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
  if (v30)
  {
    *(_QWORD *)a2 = *v30;
LABEL_70:
    *v30 = a2;
    goto LABEL_71;
  }
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = a1 + 16;
  if (*(_QWORD *)a2)
  {
    v31 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v29.u32[0] > 1uLL)
    {
      if (v31 >= v5)
        v31 %= v5;
    }
    else
    {
      v31 &= v5 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_70;
  }
LABEL_71:
  ++*(_QWORD *)(a1 + 24);
  return 1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<int,AriHost::TransactionMgr>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,AriHost::TransactionMgr>,void *>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16))
      AriHost::TransactionMgr::~TransactionMgr((AriHost::TransactionMgr *)(v1 + 24));
    operator delete((void *)v1);
  }
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24C8CD900, MEMORY[0x24BEDAB00]);
}

void sub_20E259494(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

void std::__shared_ptr_emplace<AriHost::InboundMsgHandler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C905C20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AriHost::InboundMsgHandler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C905C20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BB9B60);
}

void std::__shared_ptr_emplace<AriHost::InboundMsgHandler>::__on_zero_shared(uint64_t a1)
{
  _Block_release(*(const void **)(a1 + 24));
}

uint64_t *std::__hash_table<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;
  _QWORD v35[3];

  v5 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = (v6 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return i;
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v11 >= v6)
              v11 %= v6;
          }
          else
          {
            v11 &= v6 - 1;
          }
          if (v11 != v8)
            break;
        }
      }
    }
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAAALL;
  }
  v12 = (_QWORD *)(a1 + 16);
  v35[2] = 0xAAAAAAAAAAAAAA01;
  v13 = operator new(0x30uLL);
  v35[0] = v13;
  v35[1] = a1 + 16;
  *v13 = 0;
  v13[1] = v5;
  *((_DWORD *)v13 + 4) = *a3;
  *((_DWORD *)v13 + 6) = 0;
  v13[4] = 0;
  v13[5] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v6 || (float)(v15 * (float)v6) < v14)
  {
    v16 = 1;
    if (v6 >= 3)
      v16 = (v6 & (v6 - 1)) != 0;
    v17 = v16 | (2 * v6);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v6 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v6)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v6)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v6 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v6)
      {
        v6 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = *(void **)a1;
          *(_QWORD *)a1 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD *)*v12;
          if (*v12)
          {
            v24 = v23[1];
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v12;
            v29 = (_QWORD *)*v23;
            if (*v23)
            {
              do
              {
                v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&prime)
                    v30 %= *(_QWORD *)&prime;
                }
                else
                {
                  v30 &= *(_QWORD *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  *v23 = *v29;
                  *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
                  v29 = v23;
                }
                v30 = v24;
LABEL_55:
                v23 = v29;
                v29 = (_QWORD *)*v29;
                v24 = v30;
              }
              while (v29);
            }
          }
          v6 = (unint64_t)prime;
          goto LABEL_59;
        }
        v34 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v34)
          operator delete(v34);
        v6 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v8 = v5 % v6;
      else
        v8 = v5;
    }
    else
    {
      v8 = (v6 - 1) & v5;
    }
  }
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  i = (uint64_t *)v35[0];
  if (v31)
  {
    *(_QWORD *)v35[0] = *v31;
LABEL_72:
    *v31 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v35[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = v12;
  if (*i)
  {
    v32 = *(_QWORD *)(*i + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v32 >= v6)
        v32 %= v6;
    }
    else
    {
      v32 &= v6 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v35);
  return i;
}

void sub_20E259938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ResMgr<std::shared_ptr<AriHost::InboundMsgHandler>>::sw_dbug_trap(uint64_t result, int a2, const char *a3)
{
  _QWORD *v3;
  const char *v4;
  void **v5;
  uint64_t *i;
  uint64_t v7;
  int v8;
  const char *v9;
  void **v10;
  void *__p[2];
  char v12;
  int v13;

  if (a2)
  {
    v3 = (_QWORD *)result;
    IDMgr::dump((IDMgr *)(result + 40), 1, a3);
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", "sw_dbug_trap", (uint64_t)__p);
    if (v12 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) ResMgr(%p) dump total entries: %zu", v4, v5, 274, v3, v3[3]);
    if (v12 < 0)
      operator delete(__p[0]);
    for (i = (uint64_t *)v3[2]; i; i = (uint64_t *)*i)
    {
      v7 = v3[17];
      if (v7)
      {
        v8 = *((_DWORD *)i + 6);
        LODWORD(__p[0]) = *((_DWORD *)i + 4);
        v13 = v8;
        (*(void (**)(uint64_t, void **, int *, uint64_t *))(*(_QWORD *)v7 + 48))(v7, __p, &v13, i + 4);
      }
      else
      {
        AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", "sw_dbug_trap", (uint64_t)__p);
        if (v12 >= 0)
          v10 = __p;
        else
          v10 = (void **)__p[0];
        Ari::Log((Ari *)8, "(%s:%d) id(%08d-0x%08x) ts:%u", v9, v10, 284, *((unsigned int *)i + 4), *((unsigned int *)i + 4), *((unsigned int *)i + 6));
        if (v12 < 0)
          operator delete(__p[0]);
      }
    }
    AriOsa::OsSleep((AriOsa *)0x7D0);
    return AriOsa::SWTrap(1, (uint64_t)"true", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0x11F);
  }
  return result;
}

void sub_20E259ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>>>::remove(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)a2[1];
  v4 = a3[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*a2 + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a3);
  if (v7 == a2 + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a3)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a3 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*a2 + 8 * v4) = 0;
  }
  v10 = *a3;
  if (*a3)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*a2 + 8 * v11) = v7;
      v10 = *a3;
    }
  }
  *v7 = v10;
  *a3 = 0;
  --a2[3];
  *(_QWORD *)result = a3;
  *(_QWORD *)(result + 8) = a2 + 2;
  *(_BYTE *)(result + 16) = 1;
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<int,AriHost::FilerTransfer>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,AriHost::FilerTransfer>,void *>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16))
      AriHost::FilerTransfer::~FilerTransfer((AriHost::FilerTransfer *)(v1 + 24));
    operator delete((void *)v1);
  }
}

void std::__hash_table<std::__hash_value_type<int,AriHost::FilerTransfer>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::FilerTransfer>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::FilerTransfer>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::FilerTransfer>>>::__erase_unique<int>(_QWORD *a1, int a2)
{
  uint64_t *v3;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13[2];
  char v14;

  v3 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>(a1, a2);
  if (v3)
  {
    v4 = (int8x8_t)a1[1];
    v5 = v3[1];
    v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      if (v5 >= *(_QWORD *)&v4)
        v5 %= *(_QWORD *)&v4;
    }
    else
    {
      v5 &= *(_QWORD *)&v4 - 1;
    }
    v7 = *(uint64_t **)(*a1 + 8 * v5);
    do
    {
      v8 = v7;
      v7 = (uint64_t *)*v7;
    }
    while (v7 != v3);
    if (v8 == a1 + 2)
      goto LABEL_19;
    v9 = v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v4)
        v9 %= *(_QWORD *)&v4;
    }
    else
    {
      v9 &= *(_QWORD *)&v4 - 1;
    }
    if (v9 != v5)
    {
LABEL_19:
      if (!*v3)
        goto LABEL_20;
      v10 = *(_QWORD *)(*v3 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(_QWORD *)&v4)
          v10 %= *(_QWORD *)&v4;
      }
      else
      {
        v10 &= *(_QWORD *)&v4 - 1;
      }
      if (v10 != v5)
LABEL_20:
        *(_QWORD *)(*a1 + 8 * v5) = 0;
    }
    v11 = *v3;
    if (*v3)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v12 >= *(_QWORD *)&v4)
          v12 %= *(_QWORD *)&v4;
      }
      else
      {
        v12 &= *(_QWORD *)&v4 - 1;
      }
      if (v12 != v5)
      {
        *(_QWORD *)(*a1 + 8 * v12) = v8;
        v11 = *v3;
      }
    }
    *v8 = v11;
    *v3 = 0;
    --a1[3];
    v13[0] = (uint64_t)v3;
    v13[1] = (uint64_t)(a1 + 2);
    v14 = 1;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<int,AriHost::FilerTransfer>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,AriHost::FilerTransfer>,void *>>>>::reset[abi:ne180100](v13);
  }
}

uint64_t ResMgr<AriHost::IndicationHandlerList>::sw_dbug_trap(uint64_t result, int a2, const char *a3)
{
  _QWORD *v3;
  const char *v4;
  void **v5;
  uint64_t *i;
  uint64_t v7;
  int v8;
  const char *v9;
  void **v10;
  void *__p[2];
  char v12;
  int v13;

  if (a2)
  {
    v3 = (_QWORD *)result;
    IDMgr::dump((IDMgr *)(result + 40), 1, a3);
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", "sw_dbug_trap", (uint64_t)__p);
    if (v12 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) ResMgr(%p) dump total entries: %zu", v4, v5, 274, v3, v3[3]);
    if (v12 < 0)
      operator delete(__p[0]);
    for (i = (uint64_t *)v3[2]; i; i = (uint64_t *)*i)
    {
      v7 = v3[17];
      if (v7)
      {
        v8 = *((_DWORD *)i + 6);
        LODWORD(__p[0]) = *((_DWORD *)i + 4);
        v13 = v8;
        (*(void (**)(uint64_t, void **, int *, uint64_t *))(*(_QWORD *)v7 + 48))(v7, __p, &v13, i + 4);
      }
      else
      {
        AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", "sw_dbug_trap", (uint64_t)__p);
        if (v12 >= 0)
          v10 = __p;
        else
          v10 = (void **)__p[0];
        Ari::Log((Ari *)8, "(%s:%d) id(%08d-0x%08x) ts:%u", v9, v10, 284, *((unsigned int *)i + 4), *((unsigned int *)i + 4), *((unsigned int *)i + 6));
        if (v12 < 0)
          operator delete(__p[0]);
      }
    }
    AriOsa::OsSleep((AriOsa *)0x7D0);
    return AriOsa::SWTrap(1, (uint64_t)"true", "/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_utils.h", (const char *)0x11F);
  }
  return result;
}

void sub_20E259F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__hash_table<std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;
  _QWORD v35[3];

  v5 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = (v6 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return i;
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v11 >= v6)
              v11 %= v6;
          }
          else
          {
            v11 &= v6 - 1;
          }
          if (v11 != v8)
            break;
        }
      }
    }
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAAALL;
  }
  v12 = (_QWORD *)(a1 + 16);
  v35[2] = 0xAAAAAAAAAAAAAA01;
  v13 = operator new(0x40uLL);
  v35[0] = v13;
  v35[1] = a1 + 16;
  *v13 = 0;
  v13[1] = v5;
  *((_DWORD *)v13 + 4) = *a3;
  *((_DWORD *)v13 + 6) = 0;
  v13[4] = v13 + 4;
  v13[5] = v13 + 4;
  v13[6] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v6 || (float)(v15 * (float)v6) < v14)
  {
    v16 = 1;
    if (v6 >= 3)
      v16 = (v6 & (v6 - 1)) != 0;
    v17 = v16 | (2 * v6);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v6 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v6)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v6)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v6 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v6)
      {
        v6 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = *(void **)a1;
          *(_QWORD *)a1 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD *)*v12;
          if (*v12)
          {
            v24 = v23[1];
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v12;
            v29 = (_QWORD *)*v23;
            if (*v23)
            {
              do
              {
                v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&prime)
                    v30 %= *(_QWORD *)&prime;
                }
                else
                {
                  v30 &= *(_QWORD *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  *v23 = *v29;
                  *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
                  v29 = v23;
                }
                v30 = v24;
LABEL_55:
                v23 = v29;
                v29 = (_QWORD *)*v29;
                v24 = v30;
              }
              while (v29);
            }
          }
          v6 = (unint64_t)prime;
          goto LABEL_59;
        }
        v34 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v34)
          operator delete(v34);
        v6 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v8 = v5 % v6;
      else
        v8 = v5;
    }
    else
    {
      v8 = (v6 - 1) & v5;
    }
  }
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  i = (uint64_t *)v35[0];
  if (v31)
  {
    *(_QWORD *)v35[0] = *v31;
LABEL_72:
    *v31 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v35[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = v12;
  if (*i)
  {
    v32 = *(_QWORD *)(*i + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v32 >= v6)
        v32 %= v6;
    }
    else
    {
      v32 &= v6 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,void *>>>>::reset[abi:ne180100]((uint64_t)v35);
  return i;
}

void sub_20E25A37C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::pair<unsigned int,AriHost::IndicationHandlerList>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__list_imp<std::shared_ptr<Ari::ClientOutboundMessage>>::clear(v1 + 4);
    operator delete(v1);
  }
}

void std::__function::__func<AriHost::reRegisterIndications_nl(void)::$_0,std::allocator<AriHost::reRegisterIndications_nl(void)::$_0>,void ()(AriHost::IndicationHandlerList &)>::~__func()
{
  JUMPOUT(0x212BB9B60);
}

__n128 std::__function::__func<AriHost::reRegisterIndications_nl(void)::$_0,std::allocator<AriHost::reRegisterIndications_nl(void)::$_0>,void ()(AriHost::IndicationHandlerList &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C905C70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AriHost::reRegisterIndications_nl(void)::$_0,std::allocator<AriHost::reRegisterIndications_nl(void)::$_0>,void ()(AriHost::IndicationHandlerList &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C905C70;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<AriHost::reRegisterIndications_nl(void)::$_0,std::allocator<AriHost::reRegisterIndications_nl(void)::$_0>,void ()(AriHost::IndicationHandlerList &)>::operator()(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  void **v8;
  int v9;
  unsigned __int16 *v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  void **v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  void **v20;
  void *__p[2];
  char v22;

  if (*(_QWORD *)(a2 + 16))
  {
    if (!*(_BYTE *)(a2 + 25))
      return;
    if (*(_BYTE *)(a2 + 24))
    {
      v4 = a1[1];
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "operator()", (uint64_t)__p);
      v5 = Ari::MsgDefById((Ari *)(*(_DWORD *)(a2 + 28) >> 26), (*(_DWORD *)(a2 + 28) >> 15) & 0x3FF);
      v7 = "Unknown";
      if (v5 && *(_QWORD *)(v5 + 48))
        v7 = *(const char **)(v5 + 48);
      v8 = (void **)__p[0];
      if (v22 >= 0)
        v8 = __p;
      Ari::Log((Ari *)0x20, "(%s:%d) Setting %s as wakeable using cid 0x%x", v6, v8, 1349, v7, *(unsigned int *)(v4 + 256));
      if (v22 < 0)
        operator delete(__p[0]);
      v9 = *(_DWORD *)(a2 + 28);
      v10 = (unsigned __int16 *)a1[2];
      v11 = (_WORD *)a1[3];
      v12 = (unsigned __int16)*v11;
      *v11 = v12 + 1;
      *(_DWORD *)&v10[2 * v12 + 4] = v9;
      if ((unsigned __int16)(v12 + 1) == 500)
      {
        v10[1004] = 500;
        AriHost::setGroupWakeable_nl(v4, v10);
        bzero((void *)(a1[2] + 8), 0x7D0uLL);
        *(_WORD *)a1[3] = 0;
      }
      return;
    }
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "operator()", (uint64_t)__p);
    v17 = Ari::MsgDefById((Ari *)(*(_DWORD *)(a2 + 28) >> 26), (*(_DWORD *)(a2 + 28) >> 15) & 0x3FF);
    v19 = "Unknown";
    if (v17 && *(_QWORD *)(v17 + 48))
      v19 = *(const char **)(v17 + 48);
    v20 = (void **)__p[0];
    if (v22 >= 0)
      v20 = __p;
    Ari::Log((Ari *)0x10, "(%s:%d) Request to set %s as NON-wakeable.  Ignoring...", v18, v20, 1361, v19);
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "operator()", (uint64_t)__p);
    v13 = Ari::MsgDefById((Ari *)(*(_DWORD *)(a2 + 28) >> 26), (*(_DWORD *)(a2 + 28) >> 15) & 0x3FF);
    v15 = "Unknown";
    if (v13 && *(_QWORD *)(v13 + 48))
      v15 = *(const char **)(v13 + 48);
    v16 = (void **)__p[0];
    if (v22 >= 0)
      v16 = __p;
    Ari::Log((Ari *)0x20, "(%s:%d) Skipping re-registration of indication %s as no client is registered for it", v14, v16, 1342, v15);
  }
  if (v22 < 0)
    operator delete(__p[0]);
}

void sub_20E25A66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AriHost::reRegisterIndications_nl(void)::$_0,std::allocator<AriHost::reRegisterIndications_nl(void)::$_0>,void ()(AriHost::IndicationHandlerList &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AriHost24reRegisterIndications_nlEvE3$_0"
    || ((v3 & (unint64_t)"ZN7AriHost24reRegisterIndications_nlEvE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AriHost24reRegisterIndications_nlEvE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AriHost24reRegisterIndications_nlEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AriHost::reRegisterIndications_nl(void)::$_0,std::allocator<AriHost::reRegisterIndications_nl(void)::$_0>,void ()(AriHost::IndicationHandlerList &)>::target_type()
{
}

void std::__function::__func<AriHost::pushIndications_nl(void)::$_0,std::allocator<AriHost::pushIndications_nl(void)::$_0>,void ()(AriHost::IndicationHandlerList &)>::~__func()
{
  JUMPOUT(0x212BB9B60);
}

__n128 std::__function::__func<AriHost::pushIndications_nl(void)::$_0,std::allocator<AriHost::pushIndications_nl(void)::$_0>,void ()(AriHost::IndicationHandlerList &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C905D00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AriHost::pushIndications_nl(void)::$_0,std::allocator<AriHost::pushIndications_nl(void)::$_0>,void ()(AriHost::IndicationHandlerList &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C905D00;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<AriHost::pushIndications_nl(void)::$_0,std::allocator<AriHost::pushIndications_nl(void)::$_0>,void ()(AriHost::IndicationHandlerList &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  void **v8;
  uint64_t *v9;
  int v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  void **v16;
  void *__p[2];
  char v18;

  if (*(_QWORD *)(a2 + 16))
  {
    v4 = *(_QWORD *)(a1 + 8);
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "operator()", (uint64_t)__p);
    v5 = Ari::MsgDefById((Ari *)(*(_DWORD *)(a2 + 28) >> 26), (*(_DWORD *)(a2 + 28) >> 15) & 0x3FF);
    v7 = "Unknown";
    if (v5 && *(_QWORD *)(v5 + 48))
      v7 = *(const char **)(v5 + 48);
    v8 = (void **)__p[0];
    if (v18 >= 0)
      v8 = __p;
    Ari::Log((Ari *)0x20, "(%s:%d) Reregistering indication %s using cid 0x%x", v6, v8, 1391, v7, *(unsigned int *)(v4 + 256));
    if (v18 < 0)
      operator delete(__p[0]);
    v9 = *(uint64_t **)(a1 + 16);
    v10 = HIWORD(*(_DWORD *)(a2 + 28)) & 0xFC00 | (*(_DWORD *)(a2 + 28) >> 15) & 0x3FF;
    v11 = operator new(0x18uLL);
    v11[4] = v10;
    *((_QWORD *)v11 + 1) = v9;
    v12 = *v9;
    *(_QWORD *)v11 = *v9;
    *(_QWORD *)(v12 + 8) = v11;
    *v9 = (uint64_t)v11;
    ++v9[2];
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host.cpp", "operator()", (uint64_t)__p);
    v13 = Ari::MsgDefById((Ari *)(*(_DWORD *)(a2 + 28) >> 26), (*(_DWORD *)(a2 + 28) >> 15) & 0x3FF);
    v15 = "Unknown";
    if (v13 && *(_QWORD *)(v13 + 48))
      v15 = *(const char **)(v13 + 48);
    v16 = (void **)__p[0];
    if (v18 >= 0)
      v16 = __p;
    Ari::Log((Ari *)0x20, "(%s:%d) Skipping re-registration of indication %s as no client is registered for it", v14, v16, 1387, v15);
    if (v18 < 0)
      operator delete(__p[0]);
  }
}

void sub_20E25A8E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AriHost::pushIndications_nl(void)::$_0,std::allocator<AriHost::pushIndications_nl(void)::$_0>,void ()(AriHost::IndicationHandlerList &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AriHost18pushIndications_nlEvE3$_0"
    || ((v3 & (unint64_t)"ZN7AriHost18pushIndications_nlEvE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AriHost18pushIndications_nlEvE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AriHost18pushIndications_nlEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AriHost::pushIndications_nl(void)::$_0,std::allocator<AriHost::pushIndications_nl(void)::$_0>,void ()(AriHost::IndicationHandlerList &)>::target_type()
{
}

void std::__shared_ptr_emplace<AriHost::ClientEventHandler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C905D80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AriHost::ClientEventHandler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C905D80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BB9B60);
}

void std::__shared_ptr_emplace<AriHost::ClientEventHandler>::__on_zero_shared(uint64_t a1)
{
  _Block_release(*(const void **)(a1 + 24));
}

void std::__function::__func<AriHost::nackResponseHandlers_nl(unsigned int,unsigned int)::$_0,std::allocator<AriHost::nackResponseHandlers_nl(unsigned int,unsigned int)::$_0>,void ()(int,std::shared_ptr<AriHost::InboundMsgHandler> &)>::~__func()
{
  JUMPOUT(0x212BB9B60);
}

__n128 std::__function::__func<AriHost::nackResponseHandlers_nl(unsigned int,unsigned int)::$_0,std::allocator<AriHost::nackResponseHandlers_nl(unsigned int,unsigned int)::$_0>,void ()(int,std::shared_ptr<AriHost::InboundMsgHandler> &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C905DD0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AriHost::nackResponseHandlers_nl(unsigned int,unsigned int)::$_0,std::allocator<AriHost::nackResponseHandlers_nl(unsigned int,unsigned int)::$_0>,void ()(int,std::shared_ptr<AriHost::InboundMsgHandler> &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C905DD0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<AriHost::nackResponseHandlers_nl(unsigned int,unsigned int)::$_0,std::allocator<AriHost::nackResponseHandlers_nl(unsigned int,unsigned int)::$_0>,void ()(int,std::shared_ptr<AriHost::InboundMsgHandler> &)>::operator()(uint64_t a1, int *a2, uint64_t *a3)
{
  int v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v4 = *a2;
  v6 = *a3;
  v5 = (std::__shared_weak_count *)a3[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *(_QWORD *)(a1 + 16);
  v10 = v4 | ((*(_DWORD *)(a1 + 8) & 0x7Fu) << 8);
  if (!Ari::ClientWorkQueue::containsCtx((Ari::ClientWorkQueue *)(v9 + 264), v10)
    && !Ari::ClientWorkQueue::containsCtx((Ari::ClientWorkQueue *)(v9 + 344), v10))
  {
    v11 = *(uint64_t **)(a1 + 24);
    if (v5)
    {
      v12 = (unint64_t *)&v5->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v14 = operator new(0x28uLL);
    v14[4] = v4;
    *((_QWORD *)v14 + 3) = v6;
    *((_QWORD *)v14 + 4) = v5;
    v15 = *v11;
    *(_QWORD *)v14 = *v11;
    *((_QWORD *)v14 + 1) = v11;
    *(_QWORD *)(v15 + 8) = v14;
    *v11 = (uint64_t)v14;
    ++v11[2];
  }
  if (v5)
  {
    v16 = (unint64_t *)&v5->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_20E25AB4C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
    v5 = (unint64_t *)&v1->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AriHost::nackResponseHandlers_nl(unsigned int,unsigned int)::$_0,std::allocator<AriHost::nackResponseHandlers_nl(unsigned int,unsigned int)::$_0>,void ()(int,std::shared_ptr<AriHost::InboundMsgHandler> &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AriHost23nackResponseHandlers_nlEjjE3$_0"
    || ((v3 & (unint64_t)"ZN7AriHost23nackResponseHandlers_nlEjjE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AriHost23nackResponseHandlers_nlEjjE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AriHost23nackResponseHandlers_nlEjjE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AriHost::nackResponseHandlers_nl(unsigned int,unsigned int)::$_0,std::allocator<AriHost::nackResponseHandlers_nl(unsigned int,unsigned int)::$_0>,void ()(int,std::shared_ptr<AriHost::InboundMsgHandler> &)>::target_type()
{
}

void std::__function::__func<AriHost::updateIndicationCids_nl(unsigned int,unsigned int)::$_0,std::allocator<AriHost::updateIndicationCids_nl(unsigned int,unsigned int)::$_0>,void ()(AriHost::IndicationHandlerList &)>::~__func()
{
  JUMPOUT(0x212BB9B60);
}

_QWORD *std::__function::__func<AriHost::updateIndicationCids_nl(unsigned int,unsigned int)::$_0,std::allocator<AriHost::updateIndicationCids_nl(unsigned int,unsigned int)::$_0>,void ()(AriHost::IndicationHandlerList &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C905E60;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AriHost::updateIndicationCids_nl(unsigned int,unsigned int)::$_0,std::allocator<AriHost::updateIndicationCids_nl(unsigned int,unsigned int)::$_0>,void ()(AriHost::IndicationHandlerList &)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_24C905E60;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<AriHost::updateIndicationCids_nl(unsigned int,unsigned int)::$_0,std::allocator<AriHost::updateIndicationCids_nl(unsigned int,unsigned int)::$_0>,void ()(AriHost::IndicationHandlerList &)>::operator()(uint64_t a1, AriHost::IndicationHandlerList *this)
{
  AriHost::IndicationHandlerList::updateHandlerId(this, *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 12));
}

uint64_t std::__function::__func<AriHost::updateIndicationCids_nl(unsigned int,unsigned int)::$_0,std::allocator<AriHost::updateIndicationCids_nl(unsigned int,unsigned int)::$_0>,void ()(AriHost::IndicationHandlerList &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN7AriHost23updateIndicationCids_nlEjjE3$_0"
    || ((v3 & (unint64_t)"ZN7AriHost23updateIndicationCids_nlEjjE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN7AriHost23updateIndicationCids_nlEjjE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN7AriHost23updateIndicationCids_nlEjjE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AriHost::updateIndicationCids_nl(unsigned int,unsigned int)::$_0,std::allocator<AriHost::updateIndicationCids_nl(unsigned int,unsigned int)::$_0>,void ()(AriHost::IndicationHandlerList &)>::target_type()
{
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 24);
    operator delete(v1);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD v23[3];

  v5 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = (v6 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v11 >= v6)
                v11 %= v6;
            }
            else
            {
              v11 &= v6 - 1;
            }
            if (v11 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAAALL;
  }
  v12 = (_QWORD *)(a1 + 16);
  v23[2] = 0xAAAAAAAAAAAAAA01;
  v10 = operator new(0x28uLL);
  v23[0] = v10;
  v23[1] = a1 + 16;
  *v10 = 0;
  v10[1] = v5;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v6 || (float)(v14 * (float)v6) < v13)
  {
    v15 = 1;
    if (v6 >= 3)
      v15 = (v6 & (v6 - 1)) != 0;
    v16 = v15 | (2 * v6);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v18);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v8 = v5 % v6;
      else
        v8 = v5;
    }
    else
    {
      v8 = (v6 - 1) & v5;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v20)
  {
    *v10 = *v20;
LABEL_38:
    *v20 = v10;
    goto LABEL_39;
  }
  *v10 = *v12;
  *v12 = v10;
  *(_QWORD *)(v19 + 8 * v8) = v12;
  if (*v10)
  {
    v21 = *(_QWORD *)(*v10 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v21 >= v6)
        v21 %= v6;
    }
    else
    {
      v21 &= v6 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  v23[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>,void *>>>>::reset[abi:ne180100]((uint64_t)v23);
  return v10;
}

void sub_20E25AF74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>>>::__erase_unique<int>(_QWORD *a1, int a2)
{
  uint64_t *v3;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD v13[2];
  char v14;

  v3 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>(a1, a2);
  if (v3)
  {
    v4 = (int8x8_t)a1[1];
    v5 = v3[1];
    v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      if (v5 >= *(_QWORD *)&v4)
        v5 %= *(_QWORD *)&v4;
    }
    else
    {
      v5 &= *(_QWORD *)&v4 - 1;
    }
    v7 = *(uint64_t **)(*a1 + 8 * v5);
    do
    {
      v8 = v7;
      v7 = (uint64_t *)*v7;
    }
    while (v7 != v3);
    if (v8 == a1 + 2)
      goto LABEL_19;
    v9 = v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v4)
        v9 %= *(_QWORD *)&v4;
    }
    else
    {
      v9 &= *(_QWORD *)&v4 - 1;
    }
    if (v9 != v5)
    {
LABEL_19:
      if (!*v3)
        goto LABEL_20;
      v10 = *(_QWORD *)(*v3 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(_QWORD *)&v4)
          v10 %= *(_QWORD *)&v4;
      }
      else
      {
        v10 &= *(_QWORD *)&v4 - 1;
      }
      if (v10 != v5)
LABEL_20:
        *(_QWORD *)(*a1 + 8 * v5) = 0;
    }
    v11 = *v3;
    if (*v3)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v12 >= *(_QWORD *)&v4)
          v12 %= *(_QWORD *)&v4;
      }
      else
      {
        v12 &= *(_QWORD *)&v4 - 1;
      }
      if (v12 != v5)
      {
        *(_QWORD *)(*a1 + 8 * v12) = v8;
        v11 = *v3;
      }
    }
    *v8 = v11;
    *v3 = 0;
    --a1[3];
    v13[0] = v3;
    v13[1] = a1 + 2;
    v14 = 1;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::shared_ptr<AriHost::ClientData>>,void *>>>>::reset[abi:ne180100]((uint64_t)v13);
  }
}

_QWORD *_ZNSt3__110__function6__funcIZZN7AriHost25HandleRTServerInitializedEvEUb0_E3__4NS_9allocatorIS3_EEFviRNS_10shared_ptrINS2_10ClientDataEEEEED1Ev(_QWORD *a1)
{
  *a1 = &off_24C905EE0;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZZN7AriHost25HandleRTServerInitializedEvEUb0_E3__4NS_9allocatorIS3_EEFviRNS_10shared_ptrINS2_10ClientDataEEEEED0Ev(_QWORD *a1)
{
  *a1 = &off_24C905EE0;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x212BB9B60);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN7AriHost25HandleRTServerInitializedEvEUb0_E3__4NS_9allocatorIS3_EEFviRNS_10shared_ptrINS2_10ClientDataEEEEE7__cloneEv(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C905EE0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *_ZNKSt3__110__function6__funcIZZN7AriHost25HandleRTServerInitializedEvEUb0_E3__4NS_9allocatorIS3_EEFviRNS_10shared_ptrINS2_10ClientDataEEEEE7__cloneEPNS0_6__baseISA_EE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C905EE0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN7AriHost25HandleRTServerInitializedEvEUb0_E3__4NS_9allocatorIS3_EEFviRNS_10shared_ptrINS2_10ClientDataEEEEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZZN7AriHost25HandleRTServerInitializedEvEUb0_E3__4NS_9allocatorIS3_EEFviRNS_10shared_ptrINS2_10ClientDataEEEEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZZN7AriHost25HandleRTServerInitializedEvEUb0_E3__4NS_9allocatorIS3_EEFviRNS_10shared_ptrINS2_10ClientDataEEEEEclEOiS9_(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  NSObject **v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD block[5];
  std::__shared_weak_count *v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;

  v3 = (_QWORD *)*a3;
  v4 = (std::__shared_weak_count *)a3[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (v3[16])
  {
    v7 = (NSObject **)v3[3];
    v8 = (std::__shared_weak_count *)v3[4];
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = *v7;
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZZZN7AriHost25HandleRTServerInitializedEvEUb0_ENK3__4clEjNSt3__110shared_ptrINS_10ClientDataEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_262;
    v13 = (std::__shared_weak_count *)a1[2];
    v12 = a1[3];
    block[4] = a1[1];
    v29 = v13;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v30 = v3;
    v31 = v4;
    if (v4)
    {
      v16 = (unint64_t *)&v4->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v32 = a1[3];
    dispatch_group_async(v12, v11, block);
    v18 = v31;
    if (v31)
    {
      v19 = (unint64_t *)&v31->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = v29;
    if (v29)
    {
      v22 = (unint64_t *)&v29->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (v8)
    {
      v24 = (unint64_t *)&v8->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  if (v4)
  {
    v26 = (unint64_t *)&v4->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t _ZNKSt3__110__function6__funcIZZN7AriHost25HandleRTServerInitializedEvEUb0_E3__4NS_9allocatorIS3_EEFviRNS_10shared_ptrINS2_10ClientDataEEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN7AriHost25HandleRTServerInitializedEvEUb0_E3$_4"
    || ((v3 & (unint64_t)"ZZN7AriHost25HandleRTServerInitializedEvEUb0_E3$_4" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZZN7AriHost25HandleRTServerInitializedEvEUb0_E3$_4")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN7AriHost25HandleRTServerInitializedEvEUb0_E3$_4" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN7AriHost25HandleRTServerInitializedEvEUb0_E3__4NS_9allocatorIS3_EEFviRNS_10shared_ptrINS2_10ClientDataEEEEE11target_typeEv()
{
  return &_ZTIZZN7AriHost25HandleRTServerInitializedEvEUb0_E3__4;
}

uint64_t ___ZZZN7AriHost25HandleRTServerInitializedEvEUb0_ENK3__4clEjNSt3__110shared_ptrINS_10ClientDataEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 48) + 128) + 16))(**(_QWORD **)(*(_QWORD *)(a1 + 48) + 128), *(_QWORD *)(a1 + 64));
}

_QWORD *__copy_helper_block_e8_32c34_ZTSNSt3__110shared_ptrI7AriHostEE48c48_ZTSNSt3__110shared_ptrIN7AriHost10ClientDataEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[7];
  result[6] = a2[6];
  result[7] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c34_ZTSNSt3__110shared_ptrI7AriHostEE48c48_ZTSNSt3__110shared_ptrIN7AriHost10ClientDataEEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 32;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](a1 + 48);
  return std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v1);
}

_QWORD *_ZNSt3__110__function6__funcIZZN7AriHost21HandleConnectionErrorEvEUb1_E3__5NS_9allocatorIS3_EEFviRNS_10shared_ptrINS2_10ClientDataEEEEED1Ev(_QWORD *a1)
{
  *a1 = &off_24C905FA0;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZZN7AriHost21HandleConnectionErrorEvEUb1_E3__5NS_9allocatorIS3_EEFviRNS_10shared_ptrINS2_10ClientDataEEEEED0Ev(_QWORD *a1)
{
  *a1 = &off_24C905FA0;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x212BB9B60);
}

__n128 _ZNKSt3__110__function6__funcIZZN7AriHost21HandleConnectionErrorEvEUb1_E3__5NS_9allocatorIS3_EEFviRNS_10shared_ptrINS2_10ClientDataEEEEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_24C905FA0;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN7AriHost21HandleConnectionErrorEvEUb1_E3__5NS_9allocatorIS3_EEFviRNS_10shared_ptrINS2_10ClientDataEEEEE7__cloneEPNS0_6__baseISA_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24C905FA0;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN7AriHost21HandleConnectionErrorEvEUb1_E3__5NS_9allocatorIS3_EEFviRNS_10shared_ptrINS2_10ClientDataEEEEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZZN7AriHost21HandleConnectionErrorEvEUb1_E3__5NS_9allocatorIS3_EEFviRNS_10shared_ptrINS2_10ClientDataEEEEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void _ZNSt3__110__function6__funcIZZN7AriHost21HandleConnectionErrorEvEUb1_E3__5NS_9allocatorIS3_EEFviRNS_10shared_ptrINS2_10ClientDataEEEEEclEOiS9_(_QWORD *a1, int *a2, _QWORD *a3)
{
  int v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  _DWORD *v10;
  uint64_t v11;
  NSObject **v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  NSObject *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD block[5];
  std::__shared_weak_count *v34;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;

  v4 = *a2;
  v6 = (_QWORD *)*a3;
  v5 = (std::__shared_weak_count *)a3[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (uint64_t *)a1[4];
  v10 = operator new(0x18uLL);
  v10[4] = v4;
  *((_QWORD *)v10 + 1) = v9;
  v11 = *v9;
  *(_QWORD *)v10 = *v9;
  *(_QWORD *)(v11 + 8) = v10;
  *v9 = (uint64_t)v10;
  ++v9[2];
  if (v6[14])
  {
    v12 = (NSObject **)v6[3];
    v13 = (std::__shared_weak_count *)v6[4];
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v16 = *v12;
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 1174405120;
    block[2] = ___ZZZN7AriHost21HandleConnectionErrorEvEUb1_ENK3__5clEjNSt3__110shared_ptrINS_10ClientDataEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_263;
    v18 = (std::__shared_weak_count *)a1[2];
    v17 = a1[3];
    block[4] = a1[1];
    v34 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v35 = v6;
    v36 = v5;
    if (v5)
    {
      v21 = (unint64_t *)&v5->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v37 = a1[3];
    dispatch_group_async(v17, v16, block);
    v23 = v36;
    if (v36)
    {
      v24 = (unint64_t *)&v36->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = v34;
    if (v34)
    {
      v27 = (unint64_t *)&v34->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (v13)
    {
      v29 = (unint64_t *)&v13->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  if (v5)
  {
    v31 = (unint64_t *)&v5->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_20E25B7F8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNKSt3__110__function6__funcIZZN7AriHost21HandleConnectionErrorEvEUb1_E3__5NS_9allocatorIS3_EEFviRNS_10shared_ptrINS2_10ClientDataEEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN7AriHost21HandleConnectionErrorEvEUb1_E3$_5"
    || ((v3 & (unint64_t)"ZZN7AriHost21HandleConnectionErrorEvEUb1_E3$_5" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZZN7AriHost21HandleConnectionErrorEvEUb1_E3$_5")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN7AriHost21HandleConnectionErrorEvEUb1_E3$_5" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN7AriHost21HandleConnectionErrorEvEUb1_E3__5NS_9allocatorIS3_EEFviRNS_10shared_ptrINS2_10ClientDataEEEEE11target_typeEv()
{
  return &_ZTIZZN7AriHost21HandleConnectionErrorEvEUb1_E3__5;
}

uint64_t ___ZZZN7AriHost21HandleConnectionErrorEvEUb1_ENK3__5clEjNSt3__110shared_ptrINS_10ClientDataEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 48) + 112) + 16))(**(_QWORD **)(*(_QWORD *)(a1 + 48) + 112), *(_QWORD *)(a1 + 64));
}

_QWORD *_ZNSt3__110__function6__funcIZZN7AriHost19NotifyEventCallbackE18ARI_XPC_NOTIFY_IDSiyEUb2_E3__6NS_9allocatorIS4_EEFvRNS2_21IndicationHandlerListEEED1Ev(_QWORD *a1)
{
  *a1 = &off_24C906050;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void _ZNSt3__110__function6__funcIZZN7AriHost19NotifyEventCallbackE18ARI_XPC_NOTIFY_IDSiyEUb2_E3__6NS_9allocatorIS4_EEFvRNS2_21IndicationHandlerListEEED0Ev(_QWORD *a1)
{
  *a1 = &off_24C906050;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x212BB9B60);
}

__n128 _ZNKSt3__110__function6__funcIZZN7AriHost19NotifyEventCallbackE18ARI_XPC_NOTIFY_IDSiyEUb2_E3__6NS_9allocatorIS4_EEFvRNS2_21IndicationHandlerListEEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_24C906050;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN7AriHost19NotifyEventCallbackE18ARI_XPC_NOTIFY_IDSiyEUb2_E3__6NS_9allocatorIS4_EEFvRNS2_21IndicationHandlerListEEE7__cloneEPNS0_6__baseIS9_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24C906050;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN7AriHost19NotifyEventCallbackE18ARI_XPC_NOTIFY_IDSiyEUb2_E3__6NS_9allocatorIS4_EEFvRNS2_21IndicationHandlerListEEE7destroyEv(uint64_t a1)
{
  return std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](a1 + 8);
}

void _ZNSt3__110__function6__funcIZZN7AriHost19NotifyEventCallbackE18ARI_XPC_NOTIFY_IDSiyEUb2_E3__6NS_9allocatorIS4_EEFvRNS2_21IndicationHandlerListEEE18destroy_deallocateEv(void *a1)
{
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZZN7AriHost19NotifyEventCallbackE18ARI_XPC_NOTIFY_IDSiyEUb2_E3__6NS_9allocatorIS4_EEFvRNS2_21IndicationHandlerListEEEclES8_(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = (_QWORD *)a2[1];
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      v5 = v2[2];
      if (*(_DWORD *)(v5 + 8) == *((_DWORD *)v4 + 6))
      {
        v6 = v4[4];
        v7 = v2[3];
        result = operator new(0x20uLL);
        result[2] = v5;
        result[3] = v7;
        if (v7)
        {
          v8 = (unint64_t *)(v7 + 8);
          do
            v9 = __ldxr(v8);
          while (__stxr(v9 + 1, v8));
        }
        v10 = *(_QWORD **)(v6 + 8);
        v11 = *(_QWORD *)(v6 + 16);
        *result = v6;
        result[1] = v10;
        *v10 = result;
        *(_QWORD *)(v6 + 8) = result;
        *(_QWORD *)(v6 + 16) = v11 + 1;
      }
      v2 = (_QWORD *)v2[1];
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN7AriHost19NotifyEventCallbackE18ARI_XPC_NOTIFY_IDSiyEUb2_E3__6NS_9allocatorIS4_EEFvRNS2_21IndicationHandlerListEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN7AriHost19NotifyEventCallbackE18ARI_XPC_NOTIFY_IDSiyEUb2_E3$_6"
    || ((v3 & (unint64_t)"ZZN7AriHost19NotifyEventCallbackE18ARI_XPC_NOTIFY_IDSiyEUb2_E3$_6" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZZN7AriHost19NotifyEventCallbackE18ARI_XPC_NOTIFY_IDSiyEUb2_E3$_6")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN7AriHost19NotifyEventCallbackE18ARI_XPC_NOTIFY_IDSiyEUb2_E3$_6" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN7AriHost19NotifyEventCallbackE18ARI_XPC_NOTIFY_IDSiyEUb2_E3__6NS_9allocatorIS4_EEFvRNS2_21IndicationHandlerListEEE11target_typeEv()
{
  return &_ZTIZZN7AriHost19NotifyEventCallbackE18ARI_XPC_NOTIFY_IDSiyEUb2_E3__6;
}

void std::__hash_table<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::InboundMsgHandler>>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<unsigned int,std::shared_ptr<AriHost::ClientData>>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int>(uint64_t a1, int a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v5 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = (v6 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return 0;
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v11 >= v6)
              v11 %= v6;
          }
          else
          {
            v11 &= v6 - 1;
          }
          if (v11 != v8)
            break;
        }
      }
    }
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAAALL;
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = v5;
  *((_DWORD *)v12 + 4) = a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v6 || (float)(v14 * (float)v6) < v13)
  {
    v15 = 1;
    if (v6 >= 3)
      v15 = (v6 & (v6 - 1)) != 0;
    v16 = v15 | (2 * v6);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__rehash<true>(a1, v18);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v8 = v5 % v6;
      else
        v8 = v5;
    }
    else
    {
      v8 = (v6 - 1) & v5;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v20)
  {
    *v12 = *v20;
LABEL_38:
    *v20 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v19 + 8 * v8) = a1 + 16;
  if (*v12)
  {
    v21 = *(_QWORD *)(*v12 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v21 >= v6)
        v21 %= v6;
    }
    else
    {
      v21 &= v6 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return 1;
}

void sub_20E25BD34(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__erase_unique<int>(_QWORD *a1, int a2)
{
  uint64_t *v3;
  int8x8_t v4;
  uint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v3 = std::__hash_table<std::__hash_value_type<int,AriHost::TransactionMgr>,std::__unordered_map_hasher<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,AriHost::TransactionMgr>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,AriHost::TransactionMgr>>>::find<int>(a1, a2);
  if (v3)
  {
    v4 = (int8x8_t)a1[1];
    v5 = *v3;
    v6 = v3[1];
    v7 = (uint8x8_t)vcnt_s8(v4);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v4)
        v6 %= *(_QWORD *)&v4;
    }
    else
    {
      v6 &= *(_QWORD *)&v4 - 1;
    }
    v8 = *(uint64_t **)(*a1 + 8 * v6);
    do
    {
      v9 = v8;
      v8 = (uint64_t *)*v8;
    }
    while (v8 != v3);
    if (v9 == a1 + 2)
      goto LABEL_20;
    v10 = v9[1];
    if (v7.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v4)
        v10 %= *(_QWORD *)&v4;
    }
    else
    {
      v10 &= *(_QWORD *)&v4 - 1;
    }
    if (v10 != v6)
    {
LABEL_20:
      if (v5)
      {
        v11 = *(_QWORD *)(v5 + 8);
        if (v7.u32[0] > 1uLL)
        {
          v12 = *(_QWORD *)(v5 + 8);
          if (v11 >= *(_QWORD *)&v4)
            v12 = v11 % *(_QWORD *)&v4;
        }
        else
        {
          v12 = v11 & (*(_QWORD *)&v4 - 1);
        }
        if (v12 == v6)
          goto LABEL_24;
      }
      *(_QWORD *)(*a1 + 8 * v6) = 0;
      v5 = *v3;
    }
    if (!v5)
    {
LABEL_30:
      *v9 = v5;
      *v3 = 0;
      --a1[3];
      operator delete(v3);
      return;
    }
    v11 = *(_QWORD *)(v5 + 8);
LABEL_24:
    if (v7.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v4)
        v11 %= *(_QWORD *)&v4;
    }
    else
    {
      v11 &= *(_QWORD *)&v4 - 1;
    }
    if (v11 != v6)
    {
      *(_QWORD *)(*a1 + 8 * v11) = v9;
      v5 = *v3;
    }
    goto LABEL_30;
  }
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  size_t v16;
  std::locale::__imp *v17;
  uint64_t v18;
  uint64_t v19;
  std::locale *v20;
  uint64_t v21;
  _QWORD v23[2];
  std::locale __b[3];

  v23[0] = 0xAAAAAAAAAAAAAAAALL;
  v23[1] = 0xAAAAAAAAAAAAAAAALL;
  MEMORY[0x212BB9A10](v23, a1);
  if (LOBYTE(v23[0]))
  {
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *((_QWORD *)v6 + 5);
    v8 = *((_DWORD *)v6 + 2);
    v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(__b, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20)
      v12 = a2 + a3;
    else
      v12 = a2;
    if (!v7)
      goto LABEL_29;
    v13 = *((_QWORD *)v6 + 3);
    v14 = v13 <= a3;
    v15 = v13 - a3;
    v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_29;
    }
    if ((uint64_t)v16 >= 1)
    {
      memset(__b, 170, sizeof(__b));
      if (v16 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v16 >= 0x17)
      {
        v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17)
          v18 = v16 | 7;
        v19 = v18 + 1;
        v17 = (std::locale::__imp *)operator new(v18 + 1);
        __b[1].__locale_ = (std::locale::__imp *)v16;
        __b[2].__locale_ = (std::locale::__imp *)(v19 | 0x8000000000000000);
        __b[0].__locale_ = v17;
      }
      else
      {
        HIBYTE(__b[2].__locale_) = v16;
        v17 = (std::locale::__imp *)__b;
      }
      memset(v17, v9, v16);
      *((_BYTE *)v17 + v16) = 0;
      v20 = SHIBYTE(__b[2].__locale_) >= 0 ? __b : (std::locale *)__b[0].__locale_;
      v21 = (*(uint64_t (**)(uint64_t, std::locale *, size_t))(*(_QWORD *)v7 + 96))(v7, v20, v16);
      if (SHIBYTE(__b[2].__locale_) < 0)
        operator delete(__b[0].__locale_);
      if (v21 != v16)
        goto LABEL_29;
    }
    if (v11 - v12 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, v12, v11 - v12) == v11 - v12)
    {
      *((_QWORD *)v6 + 3) = 0;
    }
    else
    {
LABEL_29:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x212BB9A1C](v23);
  return a1;
}

void sub_20E25C0D4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *v17;

  if (a17 < 0)
    operator delete(__p);
  MEMORY[0x212BB9A1C](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x20E25C0A4);
}

void sub_20E25C134(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::stringbuf::str[abi:ne180100]<std::allocator<char>>(_QWORD *__dst, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  size_t v4;
  unint64_t v5;
  unint64_t v6;
  const void **v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = __dst;
  v3 = *(_DWORD *)(a2 + 96);
  if ((v3 & 0x10) != 0)
  {
    v5 = *(_QWORD *)(a2 + 88);
    v6 = *(_QWORD *)(a2 + 48);
    if (v5 < v6)
    {
      *(_QWORD *)(a2 + 88) = v6;
      v5 = v6;
    }
    v7 = (const void **)(a2 + 40);
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      v4 = 0;
      *((_BYTE *)__dst + 23) = 0;
      goto LABEL_16;
    }
    v7 = (const void **)(a2 + 16);
    v5 = *(_QWORD *)(a2 + 32);
  }
  v8 = *v7;
  v4 = v5 - (_QWORD)*v7;
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 >= 0x17)
  {
    v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v9 = v4 | 7;
    v10 = v9 + 1;
    v11 = operator new(v9 + 1);
    v2[1] = v4;
    v2[2] = v10 | 0x8000000000000000;
    *v2 = v11;
    v2 = v11;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v4;
    if (!v4)
      goto LABEL_16;
  }
  __dst = memmove(v2, v8, v4);
LABEL_16:
  *((_BYTE *)v2 + v4) = 0;
  return __dst;
}

_QWORD *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::clear(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

uint64_t _GLOBAL__sub_I_ari_host_cpp()
{
  return __cxa_atexit((void (*)(void *))std::weak_ptr<AriHost>::~weak_ptr, &AriHost::SingletonWeakPtr, &dword_20E126000);
}

double AriSdk::ARI_IBISimTkConfigureStkCmdReq_SDK::ARI_IBISimTkConfigureStkCmdReq_SDK(AriSdk::ARI_IBISimTkConfigureStkCmdReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x34840000u, 0);
  *(_QWORD *)v1 = &off_24C906118;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x34840000u, 0);
  *(_QWORD *)v1 = &off_24C906118;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  return result;
}

double AriSdk::ARI_IBISimTkConfigureStkCmdReq_SDK::ARI_IBISimTkConfigureStkCmdReq_SDK(AriSdk::ARI_IBISimTkConfigureStkCmdReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C906118;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C906118;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  return result;
}

void AriSdk::ARI_IBISimTkConfigureStkCmdReq_SDK::~ARI_IBISimTkConfigureStkCmdReq_SDK(AriSdk::ARI_IBISimTkConfigureStkCmdReq_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_24C906118;
  v2 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  v5 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  v6 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBISimTkConfigureStkCmdReq_SDK::~ARI_IBISimTkConfigureStkCmdReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBISimTkConfigureStkCmdReq_SDK::pack(AriSdk::ARI_IBISimTkConfigureStkCmdReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 4uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v8, 4uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v9, 4uLL, 0), !(_DWORD)result))
          {
            v10 = (const void *)*((_QWORD *)this + 13);
            if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v10, 4uLL, 0), !(_DWORD)result))
            {
              result = 0;
              *a2 = (AriMsg *)*((_QWORD *)this + 6);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBISimTkConfigureStkCmdReq_SDK::unpack(AriSdk::ARI_IBISimTkConfigureStkCmdReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;

  v16 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v16, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v16;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v15 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v15, 0);
  if ((_DWORD)v3 || !v15)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v14 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 4, &v14, 0);
  if ((_DWORD)v3 || !v14)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  }
  v13 = 0;
  v7 = (_DWORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v7, 4, &v13, 0);
  if ((_DWORD)v3 || !v13)
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 11, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  }
  v12 = 0;
  v8 = (_DWORD *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v8, 4, &v12, 0);
  if ((_DWORD)v3 || !v12)
  {
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 12, v8);
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  }
  v11 = 0;
  v9 = (_DWORD *)operator new();
  *v9 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v9, 4, &v11, 0);
  if (!(_DWORD)v3 && v11)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 13, v9);
  MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
  return v3;
}

void sub_20E25C914(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBISimTkConfigureStkCmdReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBISimTkConfigureStkCmdReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 881065984;
}

double AriSdk::ARI_IBISimTkConfigureStkCmdRspCb_SDK::ARI_IBISimTkConfigureStkCmdRspCb_SDK(AriSdk::ARI_IBISimTkConfigureStkCmdRspCb_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x35040000u, 0);
  *(_QWORD *)v1 = &off_24C906150;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_QWORD *)v1 + 14) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x35040000u, 0);
  *(_QWORD *)v1 = &off_24C906150;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_QWORD *)v1 + 14) = 0;
  return result;
}

double AriSdk::ARI_IBISimTkConfigureStkCmdRspCb_SDK::ARI_IBISimTkConfigureStkCmdRspCb_SDK(AriSdk::ARI_IBISimTkConfigureStkCmdRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C906150;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_QWORD *)v3 + 14) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C906150;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_QWORD *)v3 + 14) = 0;
  return result;
}

void AriSdk::ARI_IBISimTkConfigureStkCmdRspCb_SDK::~ARI_IBISimTkConfigureStkCmdRspCb_SDK(AriSdk::ARI_IBISimTkConfigureStkCmdRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = &off_24C906150;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  v5 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  v6 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  v7 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  v8 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v8)
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBISimTkConfigureStkCmdRspCb_SDK::~ARI_IBISimTkConfigureStkCmdRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBISimTkConfigureStkCmdRspCb_SDK::pack(AriSdk::ARI_IBISimTkConfigureStkCmdRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 4uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v8, 4uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v9, 4uLL, 0), !(_DWORD)result))
          {
            v10 = (const void *)*((_QWORD *)this + 13);
            if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 7, v10, 4uLL, 0), !(_DWORD)result))
            {
              v11 = (const void *)*((_QWORD *)this + 14);
              if (!v11 || (result = AriMsg::pack(*((AriMsg **)this + 6), 8, v11, 4uLL, 0), !(_DWORD)result))
              {
                result = 0;
                *a2 = (AriMsg *)*((_QWORD *)this + 6);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBISimTkConfigureStkCmdRspCb_SDK::unpack(AriSdk::ARI_IBISimTkConfigureStkCmdRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;

  v18 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v18, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v18;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v17 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v17, 0);
  if ((_DWORD)v3 || !v17)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v16 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 4, &v16, 0);
  if ((_DWORD)v3 || !v16)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  }
  v15 = 0;
  v7 = (_DWORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v7, 4, &v15, 0);
  if ((_DWORD)v3 || !v15)
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 11, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  }
  v14 = 0;
  v8 = (_DWORD *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v8, 4, &v14, 0);
  if ((_DWORD)v3 || !v14)
  {
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 12, v8);
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  }
  v13 = 0;
  v9 = (_DWORD *)operator new();
  *v9 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 7, v9, 4, &v13, 0);
  if ((_DWORD)v3 || !v13)
  {
    MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 13, v9);
    MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
  }
  v12 = 0;
  v10 = (_DWORD *)operator new();
  *v10 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 8, v10, 4, &v12, 0);
  if (!(_DWORD)v3 && v12)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 14, v10);
  MEMORY[0x212BB9B60](v10, 0x1000C4052888210);
  return v3;
}

void sub_20E25D0D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBISimTkConfigureStkCmdRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBISimTkConfigureStkCmdRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 889454592;
}

double AriSdk::ARI_IBISimTkEnvelopeCommandReq_SDK::ARI_IBISimTkEnvelopeCommandReq_SDK(AriSdk::ARI_IBISimTkEnvelopeCommandReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x34848000u, 0);
  *(_QWORD *)v1 = &off_24C906188;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  *((_OWORD *)v1 + 11) = 0u;
  *((_OWORD *)v1 + 12) = 0u;
  *((_OWORD *)v1 + 13) = 0u;
  *((_OWORD *)v1 + 14) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x34848000u, 0);
  *(_QWORD *)v1 = &off_24C906188;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  *((_OWORD *)v1 + 11) = 0u;
  *((_OWORD *)v1 + 12) = 0u;
  *((_OWORD *)v1 + 13) = 0u;
  *((_OWORD *)v1 + 14) = 0u;
  return result;
}

double AriSdk::ARI_IBISimTkEnvelopeCommandReq_SDK::ARI_IBISimTkEnvelopeCommandReq_SDK(AriSdk::ARI_IBISimTkEnvelopeCommandReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C906188;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 13) = 0u;
  *((_OWORD *)v3 + 14) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C906188;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 13) = 0u;
  *((_OWORD *)v3 + 14) = 0u;
  return result;
}

void AriSdk::ARI_IBISimTkEnvelopeCommandReq_SDK::~ARI_IBISimTkEnvelopeCommandReq_SDK(AriSdk::ARI_IBISimTkEnvelopeCommandReq_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)this = &off_24C906188;
  v2 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C404CC135DFLL);
  v3 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = (void *)*((_QWORD *)this + 25);
  if (v4)
  {
    *((_QWORD *)this + 26) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 22);
  if (v5)
  {
    *((_QWORD *)this + 23) = v5;
    operator delete(v5);
  }
  v6 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C4077774924);
  v7 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  v8 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v8)
    MEMORY[0x212BB9B60](v8, 0x1000C4077774924);
  v9 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v9)
    MEMORY[0x212BB9B60](v9, 0x1000C408792568BLL);
  v10 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v10)
    MEMORY[0x212BB9B60](v10, 0x1000C4077774924);
  v11 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v11)
    MEMORY[0x212BB9B60](v11, 0x1000C40E0DB01C6);
  v12 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v12)
    MEMORY[0x212BB9B60](v12, 0x1000C408792568BLL);
  v13 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v13)
    MEMORY[0x212BB9B60](v13, 0x1000C408792568BLL);
  v14 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v14)
    MEMORY[0x212BB9B60](v14, 0x1000C40E0DB01C6);
  v15 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v15)
    MEMORY[0x212BB9B60](v15, 0x1000C406A22E0FBLL);
  v16 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v16)
    MEMORY[0x212BB9B60](v16, 0x1000C4052888210);
  v17 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v17)
    MEMORY[0x212BB9B60](v17, 0x1000C4077774924);
  v18 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v18)
    MEMORY[0x212BB9B60](v18, 0x1000C4052888210);
  v19 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v19)
    MEMORY[0x212BB9B60](v19, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBISimTkEnvelopeCommandReq_SDK::~ARI_IBISimTkEnvelopeCommandReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBISimTkEnvelopeCommandReq_SDK::pack(AriSdk::ARI_IBISimTkEnvelopeCommandReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  const void *v23;
  const void *v24;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 1uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v8, 4uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v9, 0x114uLL, 0), !(_DWORD)result))
          {
            v10 = (const void *)*((_QWORD *)this + 13);
            if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 9, v10, 0x18uLL, 0), !(_DWORD)result))
            {
              v11 = (const void *)*((_QWORD *)this + 14);
              if (!v11 || (result = AriMsg::pack(*((AriMsg **)this + 6), 11, v11, 0x2AuLL, 0), !(_DWORD)result))
              {
                v12 = (const void *)*((_QWORD *)this + 15);
                if (!v12 || (result = AriMsg::pack(*((AriMsg **)this + 6), 12, v12, 0x2AuLL, 0), !(_DWORD)result))
                {
                  v13 = (const void *)*((_QWORD *)this + 16);
                  if (!v13 || (result = AriMsg::pack(*((AriMsg **)this + 6), 13, v13, 0x18uLL, 0), !(_DWORD)result))
                  {
                    v14 = (const void *)*((_QWORD *)this + 17);
                    if (!v14 || (result = AriMsg::pack(*((AriMsg **)this + 6), 14, v14, 1uLL, 0), !(_DWORD)result))
                    {
                      v15 = (const void *)*((_QWORD *)this + 18);
                      if (!v15
                        || (result = AriMsg::pack(*((AriMsg **)this + 6), 15, v15, 0x2AuLL, 0), !(_DWORD)result))
                      {
                        v16 = (const void *)*((_QWORD *)this + 19);
                        if (!v16
                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 17, v16, 1uLL, 0), !(_DWORD)result))
                        {
                          v17 = (const void *)*((_QWORD *)this + 20);
                          if (!v17
                            || (result = AriMsg::pack(*((AriMsg **)this + 6), 18, v17, 4uLL, 0), !(_DWORD)result))
                          {
                            v18 = (const void *)*((_QWORD *)this + 21);
                            if (!v18
                              || (result = AriMsg::pack(*((AriMsg **)this + 6), 19, v18, 1uLL, 0), !(_DWORD)result))
                            {
                              v19 = (_BYTE *)*((_QWORD *)this + 22);
                              if (!v19
                                || (v20 = (_BYTE *)*((_QWORD *)this + 23), v19 == v20)
                                || (result = AriMsg::pack(*((AriMsg **)this + 6), 20, v19, v20 - v19, 0),
                                    !(_DWORD)result))
                              {
                                v21 = (_BYTE *)*((_QWORD *)this + 25);
                                if (!v21
                                  || (v22 = (_BYTE *)*((_QWORD *)this + 26), v21 == v22)
                                  || (result = AriMsg::pack(*((AriMsg **)this + 6), 24, v21, v22 - v21, 0),
                                      !(_DWORD)result))
                                {
                                  v23 = (const void *)*((_QWORD *)this + 28);
                                  if (!v23
                                    || (result = AriMsg::pack(*((AriMsg **)this + 6), 25, v23, 4uLL, 0),
                                        !(_DWORD)result))
                                  {
                                    v24 = (const void *)*((_QWORD *)this + 29);
                                    if (!v24
                                      || (result = AriMsg::pack(*((AriMsg **)this + 6), 32, v24, 0xF9uLL, 0),
                                          !(_DWORD)result))
                                    {
                                      result = 0;
                                      *a2 = (AriMsg *)*((_QWORD *)this + 6);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBISimTkEnvelopeCommandReq_SDK::unpack(AriSdk::ARI_IBISimTkEnvelopeCommandReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  _DWORD *v9;
  _OWORD *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  _OWORD *v14;
  _OWORD *v15;
  _QWORD *v16;
  _BYTE *v17;
  _OWORD *v18;
  _BYTE *v19;
  _DWORD *v20;
  _BYTE *v21;
  _QWORD *v22;
  _WORD *v23;
  _DWORD *v24;
  _OWORD *v25;
  __n128 __p;
  uint64_t v28;
  size_t __sz;
  BOOL v30;

  __p.n128_u8[0] = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = __p.n128_u8[0] == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v6 = (_DWORD *)operator new();
    *v6 = *v5;
    v7 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v6;
    if (v7)
      MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v8 = (_BYTE *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v8, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v8, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 10, v8);
    MEMORY[0x212BB9B60](v8, 0x1000C4077774924);
  }
  __p.n128_u8[0] = 0;
  v9 = (_DWORD *)operator new();
  *v9 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v9, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 11, v9);
    MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v10 = (_OWORD *)operator new();
  *v10 = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  v10[3] = 0u;
  v10[4] = 0u;
  v10[5] = 0u;
  v10[6] = 0u;
  v10[7] = 0u;
  v10[8] = 0u;
  v10[9] = 0u;
  v10[10] = 0u;
  v10[11] = 0u;
  v10[12] = 0u;
  v10[13] = 0u;
  v10[14] = 0u;
  v10[15] = 0u;
  v10[16] = 0u;
  *((_DWORD *)v10 + 68) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v10, 276, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v10, 0x1000C406A22E0FBLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v11 = (void *)operator new();
    memcpy(v11, v10, 0x114uLL);
    v12 = *((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = v11;
    if (v12)
      MEMORY[0x212BB9B60](v12, 0x1000C406A22E0FBLL);
    MEMORY[0x212BB9B60](v10, 0x1000C406A22E0FBLL);
  }
  __p.n128_u8[0] = 0;
  v13 = (_QWORD *)operator new();
  v13[1] = 0;
  v13[2] = 0;
  *v13 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 9, v13, 24, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v13, 0x1000C40E0DB01C6);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBISimTkLocationInfo>::operator=<IBISimTkLocationInfo&,void>((uint64_t *)this + 13, (uint64_t)v13);
    MEMORY[0x212BB9B60](v13, 0x1000C40E0DB01C6);
  }
  __p.n128_u8[0] = 0;
  v14 = (_OWORD *)operator new();
  *v14 = 0u;
  v14[1] = 0u;
  *(_OWORD *)((char *)v14 + 26) = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 11, v14, 42, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v14, 0x1000C408792568BLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBISimTkAddress>::operator=<IBISimTkAddress&,void>((uint64_t *)this + 14, v14);
    MEMORY[0x212BB9B60](v14, 0x1000C408792568BLL);
  }
  __p.n128_u8[0] = 0;
  v15 = (_OWORD *)operator new();
  *v15 = 0u;
  v15[1] = 0u;
  *(_OWORD *)((char *)v15 + 26) = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 12, v15, 42, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v15, 0x1000C408792568BLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBISimTkAddress>::operator=<IBISimTkAddress&,void>((uint64_t *)this + 15, v15);
    MEMORY[0x212BB9B60](v15, 0x1000C408792568BLL);
  }
  __p.n128_u8[0] = 0;
  v16 = (_QWORD *)operator new();
  v16[1] = 0;
  v16[2] = 0;
  *v16 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 13, v16, 24, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v16, 0x1000C40E0DB01C6);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBISimTkLocationInfo>::operator=<IBISimTkLocationInfo&,void>((uint64_t *)this + 16, (uint64_t)v16);
    MEMORY[0x212BB9B60](v16, 0x1000C40E0DB01C6);
  }
  __p.n128_u8[0] = 0;
  v17 = (_BYTE *)operator new();
  *v17 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 14, v17, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v17, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 17, v17);
    MEMORY[0x212BB9B60](v17, 0x1000C4077774924);
  }
  __p.n128_u8[0] = 0;
  v18 = (_OWORD *)operator new();
  *v18 = 0u;
  v18[1] = 0u;
  *(_OWORD *)((char *)v18 + 26) = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 15, v18, 42, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v18, 0x1000C408792568BLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBISimTkAddress>::operator=<IBISimTkAddress&,void>((uint64_t *)this + 18, v18);
    MEMORY[0x212BB9B60](v18, 0x1000C408792568BLL);
  }
  __p.n128_u8[0] = 0;
  v19 = (_BYTE *)operator new();
  *v19 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 17, v19, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v19, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 19, v19);
    MEMORY[0x212BB9B60](v19, 0x1000C4077774924);
  }
  __p.n128_u8[0] = 0;
  v20 = (_DWORD *)operator new();
  *v20 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 18, v20, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v20, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 20, v20);
    MEMORY[0x212BB9B60](v20, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v21 = (_BYTE *)operator new();
  *v21 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 19, v21, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v21, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 21, v21);
    MEMORY[0x212BB9B60](v21, 0x1000C4077774924);
  }
  v30 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v22 = (_QWORD *)operator new[]();
  *v22 = 0;
  *(_QWORD *)((char *)v22 + 6) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 20, v22, 14, &v30, &__sz);
  if ((_DWORD)v3 || !v30)
  {
    MEMORY[0x212BB9B48](v22, 0x1000C8077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v28 = 0;
    __p = 0uLL;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v22, (uint64_t)v22 + __sz, __sz);
    AriSdk::TlvArray<unsigned char,14ul>::operator=((std::vector<int> *)((char *)this + 176), &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    MEMORY[0x212BB9B48](v22, 0x1000C8077774924);
  }
  v30 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v23 = (_WORD *)operator new[]();
  *v23 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 24, v23, 2, &v30, &__sz);
  if ((_DWORD)v3 || !v30)
  {
    MEMORY[0x212BB9B48](v23, 0x1000C8077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v28 = 0;
    __p = 0uLL;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v23, (uint64_t)v23 + __sz, __sz);
    AriSdk::TlvArray<unsigned char,2ul>::operator=((std::vector<int> *)((char *)this + 200), &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    MEMORY[0x212BB9B48](v23, 0x1000C8077774924);
  }
  __p.n128_u8[0] = 0;
  v24 = (_DWORD *)operator new();
  *v24 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 25, v24, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v24, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 28, v24);
    MEMORY[0x212BB9B60](v24, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v25 = (_OWORD *)operator new();
  *v25 = 0u;
  v25[1] = 0u;
  v25[2] = 0u;
  v25[3] = 0u;
  v25[4] = 0u;
  v25[5] = 0u;
  v25[6] = 0u;
  v25[7] = 0u;
  v25[8] = 0u;
  v25[9] = 0u;
  v25[10] = 0u;
  v25[11] = 0u;
  v25[12] = 0u;
  v25[13] = 0u;
  v25[14] = 0u;
  *(_OWORD *)((char *)v25 + 233) = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 32, v25, 249, (BOOL *)&__p, 0);
  if (!(_DWORD)v3 && __p.n128_u8[0])
    AriSdk::Tlv<IBISimTkImsRegistrationStatus>::operator=<IBISimTkImsRegistrationStatus&,void>((uint64_t *)this + 29, v25);
  MEMORY[0x212BB9B60](v25, 0x1000C404CC135DFLL);
  return v3;
}

void sub_20E25E33C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  MEMORY[0x212BB9B60](v11, 0x1000C404CC135DFLL);
  _Unwind_Resume(a1);
}

uint64_t *AriSdk::Tlv<IBISimTkLocationInfo>::operator=<IBISimTkLocationInfo&,void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = operator new();
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *a1;
  *a1 = v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40E0DB01C6);
  return a1;
}

uint64_t *AriSdk::Tlv<IBISimTkAddress>::operator=<IBISimTkAddress&,void>(uint64_t *a1, _OWORD *a2)
{
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;

  v4 = (_OWORD *)operator new();
  v5 = a2[1];
  *v4 = *a2;
  v4[1] = v5;
  *(_OWORD *)((char *)v4 + 26) = *(_OWORD *)((char *)a2 + 26);
  v6 = *a1;
  *a1 = (uint64_t)v4;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C408792568BLL);
  return a1;
}

std::vector<int> *AriSdk::TlvArray<unsigned char,14ul>::operator=(std::vector<int> *this, __n128 *__c)
{
  const char *v4;
  void **v5;
  void *__p[2];
  char v8;

  if (__c->n128_u64[1] - __c->n128_u64[0] < 0xF)
  {
    std::vector<char>::__move_assign((uint64_t)this, __c);
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v8 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v4, v5, 360, this, __c->n128_u64[1] - __c->n128_u64[0], 14);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_20E25E610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::vector<int> *AriSdk::TlvArray<unsigned char,2ul>::operator=(std::vector<int> *this, __n128 *__c)
{
  const char *v4;
  void **v5;
  void *__p[2];
  char v8;

  if (__c->n128_u64[1] - __c->n128_u64[0] < 3)
  {
    std::vector<char>::__move_assign((uint64_t)this, __c);
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v8 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v4, v5, 360, this, __c->n128_u64[1] - __c->n128_u64[0], 2);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_20E25E6E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *AriSdk::Tlv<IBISimTkImsRegistrationStatus>::operator=<IBISimTkImsRegistrationStatus&,void>(uint64_t *a1, _OWORD *a2)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v4 = (_OWORD *)operator new();
  v5 = a2[13];
  v4[12] = a2[12];
  v4[13] = v5;
  v4[14] = a2[14];
  *(_OWORD *)((char *)v4 + 233) = *(_OWORD *)((char *)a2 + 233);
  v6 = a2[9];
  v4[8] = a2[8];
  v4[9] = v6;
  v7 = a2[11];
  v4[10] = a2[10];
  v4[11] = v7;
  v8 = a2[5];
  v4[4] = a2[4];
  v4[5] = v8;
  v9 = a2[7];
  v4[6] = a2[6];
  v4[7] = v9;
  v10 = a2[1];
  *v4 = *a2;
  v4[1] = v10;
  v11 = a2[3];
  v4[2] = a2[2];
  v4[3] = v11;
  v12 = *a1;
  *a1 = (uint64_t)v4;
  if (v12)
    MEMORY[0x212BB9B60](v12, 0x1000C404CC135DFLL);
  return a1;
}

BOOL AriSdk::ARI_IBISimTkEnvelopeCommandReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBISimTkEnvelopeCommandReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 881098752;
}

AriSdk::MsgBase *AriSdk::ARI_IBISimTkEnvelopeCommandRspCb_SDK::ARI_IBISimTkEnvelopeCommandRspCb_SDK(AriSdk::ARI_IBISimTkEnvelopeCommandRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x35048000u, 0);
  *(_QWORD *)result = &off_24C9061C0;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x35048000u, 0);
  *(_QWORD *)result = &off_24C9061C0;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBISimTkEnvelopeCommandRspCb_SDK::ARI_IBISimTkEnvelopeCommandRspCb_SDK(AriSdk::ARI_IBISimTkEnvelopeCommandRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C9061C0;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C9061C0;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBISimTkEnvelopeCommandRspCb_SDK::~ARI_IBISimTkEnvelopeCommandRspCb_SDK(AriSdk::ARI_IBISimTkEnvelopeCommandRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C9061C0;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C40289347CALL);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBISimTkEnvelopeCommandRspCb_SDK::~ARI_IBISimTkEnvelopeCommandRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBISimTkEnvelopeCommandRspCb_SDK::pack(AriSdk::ARI_IBISimTkEnvelopeCommandRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 0x3B8uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 4uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBISimTkEnvelopeCommandRspCb_SDK::unpack(AriSdk::ARI_IBISimTkEnvelopeCommandRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _DWORD *v8;
  BOOL v10;
  BOOL v11;
  BOOL v12;

  v12 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v12, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v12;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v11 = 0;
  v5 = (void *)operator new();
  bzero(v5, 0x3B8uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 952, &v11, 0);
  if ((_DWORD)v3 || !v11)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C40289347CALL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v6 = (void *)operator new();
    memcpy(v6, v5, 0x3B8uLL);
    v7 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v6;
    if (v7)
      MEMORY[0x212BB9B60](v7, 0x1000C40289347CALL);
    MEMORY[0x212BB9B60](v5, 0x1000C40289347CALL);
  }
  v10 = 0;
  v8 = (_DWORD *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v8, 4, &v10, 0);
  if (!(_DWORD)v3 && v10)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v8);
  MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  return v3;
}

void sub_20E25EBFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBISimTkEnvelopeCommandRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBISimTkEnvelopeCommandRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 889487360;
}

double AriSdk::ARI_IBISimTkExecStkCmdIndCb_SDK::ARI_IBISimTkExecStkCmdIndCb_SDK(AriSdk::ARI_IBISimTkExecStkCmdIndCb_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x35818000u, 0);
  *(_QWORD *)v1 = &off_24C9061F8;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_QWORD *)v1 + 18) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x35818000u, 0);
  *(_QWORD *)v1 = &off_24C9061F8;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_QWORD *)v1 + 18) = 0;
  return result;
}

double AriSdk::ARI_IBISimTkExecStkCmdIndCb_SDK::ARI_IBISimTkExecStkCmdIndCb_SDK(AriSdk::ARI_IBISimTkExecStkCmdIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C9061F8;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_QWORD *)v3 + 18) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C9061F8;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_QWORD *)v3 + 18) = 0;
  return result;
}

void AriSdk::ARI_IBISimTkExecStkCmdIndCb_SDK::~ARI_IBISimTkExecStkCmdIndCb_SDK(AriSdk::ARI_IBISimTkExecStkCmdIndCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = &off_24C9061F8;
  v2 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C408792568BLL);
  v3 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4096D22CEALL);
  v4 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C40AE305FB9);
  v5 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C400452F363);
  v6 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C40AE305FB9);
  v7 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C408792568BLL);
  v8 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v8)
    MEMORY[0x212BB9B60](v8, 0x1000C4077774924);
  v9 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v9)
    MEMORY[0x212BB9B60](v9, 0x1000C400452F363);
  v10 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v10)
    MEMORY[0x212BB9B60](v10, 0x1000C40BDFB0063);
  v11 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v11)
    MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
  v12 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v12)
    MEMORY[0x212BB9B60](v12, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBISimTkExecStkCmdIndCb_SDK::~ARI_IBISimTkExecStkCmdIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBISimTkExecStkCmdIndCb_SDK::pack(AriSdk::ARI_IBISimTkExecStkCmdIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 2uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v8, 0xF8uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v9, 1uLL, 0), !(_DWORD)result))
          {
            v10 = (const void *)*((_QWORD *)this + 13);
            if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 8, v10, 0x2AuLL, 0), !(_DWORD)result))
            {
              v11 = (const void *)*((_QWORD *)this + 14);
              if (!v11 || (result = AriMsg::pack(*((AriMsg **)this + 6), 9, v11, 0x29uLL, 0), !(_DWORD)result))
              {
                v12 = (const void *)*((_QWORD *)this + 15);
                if (!v12 || (result = AriMsg::pack(*((AriMsg **)this + 6), 10, v12, 0xF8uLL, 0), !(_DWORD)result))
                {
                  v13 = (const void *)*((_QWORD *)this + 16);
                  if (!v13 || (result = AriMsg::pack(*((AriMsg **)this + 6), 12, v13, 0x29uLL, 0), !(_DWORD)result))
                  {
                    v14 = (const void *)*((_QWORD *)this + 17);
                    if (!v14 || (result = AriMsg::pack(*((AriMsg **)this + 6), 13, v14, 0xBCuLL, 0), !(_DWORD)result))
                    {
                      v15 = (const void *)*((_QWORD *)this + 18);
                      if (!v15
                        || (result = AriMsg::pack(*((AriMsg **)this + 6), 14, v15, 0x2AuLL, 0), !(_DWORD)result))
                      {
                        result = 0;
                        *a2 = (AriMsg *)*((_QWORD *)this + 6);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBISimTkExecStkCmdIndCb_SDK::unpack(AriSdk::ARI_IBISimTkExecStkCmdIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _WORD *v6;
  _OWORD *v7;
  _BYTE *v8;
  _OWORD *v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;

  v32 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v32, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v32;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v31 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v31, 0);
  if ((_DWORD)v3 || !v31)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v30 = 0;
  v6 = (_WORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 2, &v30, 0);
  if ((_DWORD)v3 || !v30)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C40BDFB0063);
  }
  v29 = 0;
  v7 = (_OWORD *)operator new();
  *v7 = 0u;
  v7[1] = 0u;
  v7[2] = 0u;
  v7[3] = 0u;
  v7[4] = 0u;
  v7[5] = 0u;
  v7[6] = 0u;
  v7[7] = 0u;
  v7[8] = 0u;
  v7[9] = 0u;
  v7[10] = 0u;
  v7[11] = 0u;
  v7[12] = 0u;
  v7[13] = 0u;
  v7[14] = 0u;
  *((_QWORD *)v7 + 30) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v7, 248, &v29, 0);
  if ((_DWORD)v3 || !v29)
  {
    MEMORY[0x212BB9B60](v7, 0x1000C400452F363);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBISimTkAlphaIdentifier>::operator=<IBISimTkAlphaIdentifier&,void>((uint64_t *)this + 11, (uint64_t)v7);
    MEMORY[0x212BB9B60](v7, 0x1000C400452F363);
  }
  v28 = 0;
  v8 = (_BYTE *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v8, 1, &v28, 0);
  if ((_DWORD)v3 || !v28)
  {
    MEMORY[0x212BB9B60](v8, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 12, v8);
    MEMORY[0x212BB9B60](v8, 0x1000C4077774924);
  }
  v27 = 0;
  v9 = (_OWORD *)operator new();
  *v9 = 0u;
  v9[1] = 0u;
  *(_OWORD *)((char *)v9 + 26) = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 8, v9, 42, &v27, 0);
  if ((_DWORD)v3 || !v27)
  {
    MEMORY[0x212BB9B60](v9, 0x1000C408792568BLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBISimTkAddress>::operator=<IBISimTkAddress&,void>((uint64_t *)this + 13, v9);
    MEMORY[0x212BB9B60](v9, 0x1000C408792568BLL);
  }
  v26 = 0;
  v10 = (_OWORD *)operator new();
  *v10 = 0u;
  v10[1] = 0u;
  *(_OWORD *)((char *)v10 + 25) = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 9, v10, 41, &v26, 0);
  if ((_DWORD)v3 || !v26)
  {
    MEMORY[0x212BB9B60](v10, 0x1000C40AE305FB9);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v11 = (_OWORD *)operator new();
    v12 = v10[1];
    *v11 = *v10;
    v11[1] = v12;
    *(_OWORD *)((char *)v11 + 25) = *(_OWORD *)((char *)v10 + 25);
    v13 = *((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = v11;
    if (v13)
      MEMORY[0x212BB9B60](v13, 0x1000C40AE305FB9);
    MEMORY[0x212BB9B60](v10, 0x1000C40AE305FB9);
  }
  v25 = 0;
  v14 = (_OWORD *)operator new();
  *v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  *((_QWORD *)v14 + 30) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 10, v14, 248, &v25, 0);
  if ((_DWORD)v3 || !v25)
  {
    MEMORY[0x212BB9B60](v14, 0x1000C400452F363);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBISimTkAlphaIdentifier>::operator=<IBISimTkAlphaIdentifier&,void>((uint64_t *)this + 15, (uint64_t)v14);
    MEMORY[0x212BB9B60](v14, 0x1000C400452F363);
  }
  v24 = 0;
  v15 = (_OWORD *)operator new();
  *v15 = 0u;
  v15[1] = 0u;
  *(_OWORD *)((char *)v15 + 25) = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 12, v15, 41, &v24, 0);
  if ((_DWORD)v3 || !v24)
  {
    MEMORY[0x212BB9B60](v15, 0x1000C40AE305FB9);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v16 = (_OWORD *)operator new();
    v17 = v15[1];
    *v16 = *v15;
    v16[1] = v17;
    *(_OWORD *)((char *)v16 + 25) = *(_OWORD *)((char *)v15 + 25);
    v18 = *((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v16;
    if (v18)
      MEMORY[0x212BB9B60](v18, 0x1000C40AE305FB9);
    MEMORY[0x212BB9B60](v15, 0x1000C40AE305FB9);
  }
  v23 = 0;
  v19 = (_OWORD *)operator new();
  *v19 = 0u;
  v19[1] = 0u;
  v19[2] = 0u;
  v19[3] = 0u;
  v19[4] = 0u;
  v19[5] = 0u;
  v19[6] = 0u;
  v19[7] = 0u;
  v19[8] = 0u;
  v19[9] = 0u;
  v19[10] = 0u;
  *(_OWORD *)((char *)v19 + 172) = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 13, v19, 188, &v23, 0);
  if ((_DWORD)v3 || !v23)
  {
    MEMORY[0x212BB9B60](v19, 0x1000C4096D22CEALL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBISimTkUssdString>::operator=<IBISimTkUssdString&,void>((uint64_t *)this + 17, v19);
    MEMORY[0x212BB9B60](v19, 0x1000C4096D22CEALL);
  }
  v22 = 0;
  v20 = (_OWORD *)operator new();
  *v20 = 0u;
  v20[1] = 0u;
  *(_OWORD *)((char *)v20 + 26) = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 14, v20, 42, &v22, 0);
  if (!(_DWORD)v3 && v22)
    AriSdk::Tlv<IBISimTkAddress>::operator=<IBISimTkAddress&,void>((uint64_t *)this + 18, v20);
  MEMORY[0x212BB9B60](v20, 0x1000C408792568BLL);
  return v3;
}

void sub_20E25F828(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C408792568BLL);
  _Unwind_Resume(a1);
}

uint64_t *AriSdk::Tlv<IBISimTkAlphaIdentifier>::operator=<IBISimTkAlphaIdentifier&,void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v4 = operator new();
  v5 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(v4 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(v4 + 208) = v5;
  *(_OWORD *)(v4 + 224) = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(v4 + 240) = *(_QWORD *)(a2 + 240);
  v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v4 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v4 + 144) = v6;
  v7 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(v4 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(v4 + 176) = v7;
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v4 + 80) = v8;
  v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v4 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v4 + 112) = v9;
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v10;
  v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v4 + 48) = v11;
  v12 = *a1;
  *a1 = v4;
  if (v12)
    MEMORY[0x212BB9B60](v12, 0x1000C400452F363);
  return a1;
}

uint64_t *AriSdk::Tlv<IBISimTkUssdString>::operator=<IBISimTkUssdString&,void>(uint64_t *a1, _OWORD *a2)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v4 = (_OWORD *)operator new();
  v5 = a2[9];
  v4[8] = a2[8];
  v4[9] = v5;
  v4[10] = a2[10];
  *(_OWORD *)((char *)v4 + 172) = *(_OWORD *)((char *)a2 + 172);
  v6 = a2[5];
  v4[4] = a2[4];
  v4[5] = v6;
  v7 = a2[7];
  v4[6] = a2[6];
  v4[7] = v7;
  v8 = a2[1];
  *v4 = *a2;
  v4[1] = v8;
  v9 = a2[3];
  v4[2] = a2[2];
  v4[3] = v9;
  v10 = *a1;
  *a1 = (uint64_t)v4;
  if (v10)
    MEMORY[0x212BB9B60](v10, 0x1000C4096D22CEALL);
  return a1;
}

BOOL AriSdk::ARI_IBISimTkExecStkCmdIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBISimTkExecStkCmdIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 897679360;
}

AriSdk::MsgBase *AriSdk::ARI_IBISimTkExecStkCmdRsp_SDK::ARI_IBISimTkExecStkCmdRsp_SDK(AriSdk::ARI_IBISimTkExecStkCmdRsp_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x34860000u, 1);
  *(_QWORD *)result = &off_24C906230;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x34860000u, 1);
  *(_QWORD *)result = &off_24C906230;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBISimTkExecStkCmdRsp_SDK::ARI_IBISimTkExecStkCmdRsp_SDK(AriSdk::ARI_IBISimTkExecStkCmdRsp_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C906230;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C906230;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBISimTkExecStkCmdRsp_SDK::~ARI_IBISimTkExecStkCmdRsp_SDK(AriSdk::ARI_IBISimTkExecStkCmdRsp_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C906230;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C40789AEA99);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBISimTkExecStkCmdRsp_SDK::~ARI_IBISimTkExecStkCmdRsp_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBISimTkExecStkCmdRsp_SDK::pack(AriSdk::ARI_IBISimTkExecStkCmdRsp_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 8uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBISimTkExecStkCmdRsp_SDK::unpack(AriSdk::ARI_IBISimTkExecStkCmdRsp_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _QWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_QWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 8, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<IBICallPsUplinkBwEstimation>::operator=<IBICallPsUplinkBwEstimation&,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C40789AEA99);
  return v3;
}

void sub_20E25FD64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C40789AEA99);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBISimTkExecStkCmdRsp_SDK::hasDeclaredGmid(AriSdk::ARI_IBISimTkExecStkCmdRsp_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 881197056;
}

AriSdk::MsgBase *AriSdk::ARI_IBISimTkImsCallControlReq_SDK::ARI_IBISimTkImsCallControlReq_SDK(AriSdk::ARI_IBISimTkImsCallControlReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x34838000u, 0);
  *(_QWORD *)result = &off_24C906268;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x34838000u, 0);
  *(_QWORD *)result = &off_24C906268;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBISimTkImsCallControlReq_SDK::ARI_IBISimTkImsCallControlReq_SDK(AriSdk::ARI_IBISimTkImsCallControlReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C906268;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C906268;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBISimTkImsCallControlReq_SDK::~ARI_IBISimTkImsCallControlReq_SDK(AriSdk::ARI_IBISimTkImsCallControlReq_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C906268;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C402DF8315BLL);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBISimTkImsCallControlReq_SDK::~ARI_IBISimTkImsCallControlReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBISimTkImsCallControlReq_SDK::pack(AriSdk::ARI_IBISimTkImsCallControlReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 0x101uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBISimTkImsCallControlReq_SDK::unpack(AriSdk::ARI_IBISimTkImsCallControlReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _OWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_OWORD *)operator new();
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  *((_BYTE *)v5 + 256) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 257, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<IBISimTkImsCcData>::operator=<IBISimTkImsCcData&,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C402DF8315BLL);
  return v3;
}

void sub_20E2600F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C402DF8315BLL);
  _Unwind_Resume(a1);
}

uint64_t *AriSdk::Tlv<IBISimTkImsCcData>::operator=<IBISimTkImsCcData&,void>(uint64_t *a1, const void *a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)operator new();
  memcpy(v4, a2, 0x101uLL);
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C402DF8315BLL);
  return a1;
}

BOOL AriSdk::ARI_IBISimTkImsCallControlReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBISimTkImsCallControlReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 881033216;
}

double AriSdk::ARI_IBISimTkImsCallControlRspCb_SDK::ARI_IBISimTkImsCallControlRspCb_SDK(AriSdk::ARI_IBISimTkImsCallControlRspCb_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x35038000u, 0);
  *(_QWORD *)v1 = &off_24C9062A0;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x35038000u, 0);
  *(_QWORD *)v1 = &off_24C9062A0;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

double AriSdk::ARI_IBISimTkImsCallControlRspCb_SDK::ARI_IBISimTkImsCallControlRspCb_SDK(AriSdk::ARI_IBISimTkImsCallControlRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C9062A0;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C9062A0;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

void AriSdk::ARI_IBISimTkImsCallControlRspCb_SDK::~ARI_IBISimTkImsCallControlRspCb_SDK(AriSdk::ARI_IBISimTkImsCallControlRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C9062A0;
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C400452F363);
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C402DF8315BLL);
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBISimTkImsCallControlRspCb_SDK::~ARI_IBISimTkImsCallControlRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBISimTkImsCallControlRspCb_SDK::pack(AriSdk::ARI_IBISimTkImsCallControlRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 0x101uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v8, 0xF8uLL, 0), !(_DWORD)result))
        {
          result = 0;
          *a2 = (AriMsg *)*((_QWORD *)this + 6);
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBISimTkImsCallControlRspCb_SDK::unpack(AriSdk::ARI_IBISimTkImsCallControlRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;

  v14 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v14, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v14;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v13 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v13, 0);
  if ((_DWORD)v3 || !v13)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v6 = (_DWORD *)operator new();
    *v6 = *v5;
    v7 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v6;
    if (v7)
      MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v12 = 0;
  v8 = (_OWORD *)operator new();
  *v8 = 0u;
  v8[1] = 0u;
  v8[2] = 0u;
  v8[3] = 0u;
  v8[4] = 0u;
  v8[5] = 0u;
  v8[6] = 0u;
  v8[7] = 0u;
  v8[8] = 0u;
  v8[9] = 0u;
  v8[10] = 0u;
  v8[11] = 0u;
  v8[12] = 0u;
  v8[13] = 0u;
  v8[14] = 0u;
  v8[15] = 0u;
  *((_BYTE *)v8 + 256) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v8, 257, &v12, 0);
  if ((_DWORD)v3 || !v12)
  {
    MEMORY[0x212BB9B60](v8, 0x1000C402DF8315BLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBISimTkImsCcData>::operator=<IBISimTkImsCcData&,void>((uint64_t *)this + 10, v8);
    MEMORY[0x212BB9B60](v8, 0x1000C402DF8315BLL);
  }
  v11 = 0;
  v9 = (_OWORD *)operator new();
  *v9 = 0u;
  v9[1] = 0u;
  v9[2] = 0u;
  v9[3] = 0u;
  v9[4] = 0u;
  v9[5] = 0u;
  v9[6] = 0u;
  v9[7] = 0u;
  v9[8] = 0u;
  v9[9] = 0u;
  v9[10] = 0u;
  v9[11] = 0u;
  v9[12] = 0u;
  v9[13] = 0u;
  v9[14] = 0u;
  *((_QWORD *)v9 + 30) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v9, 248, &v11, 0);
  if (!(_DWORD)v3 && v11)
    AriSdk::Tlv<IBISimTkAlphaIdentifier>::operator=<IBISimTkAlphaIdentifier&,void>((uint64_t *)this + 11, (uint64_t)v9);
  MEMORY[0x212BB9B60](v9, 0x1000C400452F363);
  return v3;
}

void sub_20E260708(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C400452F363);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBISimTkImsCallControlRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBISimTkImsCallControlRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 889421824;
}

AriSdk::MsgBase *AriSdk::ARI_IBISimTkInit_SDK::ARI_IBISimTkInit_SDK(AriSdk::ARI_IBISimTkInit_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x34810000u, 1);
  *(_QWORD *)result = &off_24C9062D8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x34810000u, 1);
  *(_QWORD *)result = &off_24C9062D8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBISimTkInit_SDK::ARI_IBISimTkInit_SDK(AriSdk::ARI_IBISimTkInit_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C9062D8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C9062D8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBISimTkInit_SDK::~ARI_IBISimTkInit_SDK(AriSdk::ARI_IBISimTkInit_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C9062D8;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBISimTkInit_SDK::~ARI_IBISimTkInit_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBISimTkInit_SDK::pack(AriSdk::ARI_IBISimTkInit_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_IBISimTkInit_SDK::unpack(AriSdk::ARI_IBISimTkInit_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E2609B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBISimTkInit_SDK::hasDeclaredGmid(AriSdk::ARI_IBISimTkInit_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 880869376;
}

double AriSdk::ARI_IBISimTkProactiveCmdIndCb_SDK::ARI_IBISimTkProactiveCmdIndCb_SDK(AriSdk::ARI_IBISimTkProactiveCmdIndCb_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x35820000u, 0);
  *(_QWORD *)v1 = &off_24C906310;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  *((_OWORD *)v1 + 11) = 0u;
  *((_OWORD *)v1 + 12) = 0u;
  *((_OWORD *)v1 + 13) = 0u;
  *((_OWORD *)v1 + 14) = 0u;
  *((_OWORD *)v1 + 15) = 0u;
  *((_OWORD *)v1 + 16) = 0u;
  *((_QWORD *)v1 + 34) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x35820000u, 0);
  *(_QWORD *)v1 = &off_24C906310;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  *((_OWORD *)v1 + 11) = 0u;
  *((_OWORD *)v1 + 12) = 0u;
  *((_OWORD *)v1 + 13) = 0u;
  *((_OWORD *)v1 + 14) = 0u;
  *((_OWORD *)v1 + 15) = 0u;
  *((_OWORD *)v1 + 16) = 0u;
  *((_QWORD *)v1 + 34) = 0;
  return result;
}

double AriSdk::ARI_IBISimTkProactiveCmdIndCb_SDK::ARI_IBISimTkProactiveCmdIndCb_SDK(AriSdk::ARI_IBISimTkProactiveCmdIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C906310;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 13) = 0u;
  *((_OWORD *)v3 + 14) = 0u;
  *((_OWORD *)v3 + 15) = 0u;
  *((_OWORD *)v3 + 16) = 0u;
  *((_QWORD *)v3 + 34) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C906310;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 13) = 0u;
  *((_OWORD *)v3 + 14) = 0u;
  *((_OWORD *)v3 + 15) = 0u;
  *((_OWORD *)v3 + 16) = 0u;
  *((_QWORD *)v3 + 34) = 0;
  return result;
}

void AriSdk::ARI_IBISimTkProactiveCmdIndCb_SDK::~ARI_IBISimTkProactiveCmdIndCb_SDK(AriSdk::ARI_IBISimTkProactiveCmdIndCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)this = &off_24C906310;
  v2 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C40F5614B1ELL);
  v3 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C40693B0FD8);
  v4 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C404455CFF4);
  v5 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40153912A6);
  v6 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C40E71176DALL);
  v7 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C40E71176DALL);
  v8 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v8)
    MEMORY[0x212BB9B60](v8, 0x1000C40E71176DALL);
  v9 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v9)
    MEMORY[0x212BB9B60](v9, 0x1000C40E71176DALL);
  v10 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v10)
    MEMORY[0x212BB9B60](v10, 0x1000C408757D331);
  v11 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v11)
    MEMORY[0x212BB9B60](v11, 0x1000C40B230606BLL);
  v12 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v12)
    MEMORY[0x212BB9B60](v12, 0x1000C40957D8CC4);
  v13 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v13)
    MEMORY[0x212BB9B60](v13, 0x1000C40A4B5082DLL);
  v14 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v14)
    MEMORY[0x212BB9B60](v14, 0x1000C40789AEA99);
  v15 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v15)
    MEMORY[0x212BB9B60](v15, 0x1000C4028FCE1D9);
  v16 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v16)
    MEMORY[0x212BB9B60](v16, 0x1000C40DD741DE8);
  v17 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v17)
    MEMORY[0x212BB9B60](v17, 0x1000C40281EA1ABLL);
  v18 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v18)
    MEMORY[0x212BB9B60](v18, 0x1000C40EF5C4F84);
  v19 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v19)
    MEMORY[0x212BB9B60](v19, 0x1000C40B3435C2CLL);
  v20 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v20)
    MEMORY[0x212BB9B60](v20, 0x1000C400CB9CA2ELL);
  v21 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v21)
    MEMORY[0x212BB9B60](v21, 0x1000C405CD28F34);
  v22 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v22)
    MEMORY[0x212BB9B60](v22, 0x1000C4056DB6161);
  v23 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v23)
    MEMORY[0x212BB9B60](v23, 0x1000C40BE982F58);
  v24 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v24)
    MEMORY[0x212BB9B60](v24, 0x1000C40806A7710);
  v25 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v25)
    MEMORY[0x212BB9B60](v25, 0x1000C40792A5974);
  v26 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v26)
    MEMORY[0x212BB9B60](v26, 0x1000C40A995D64BLL);
  v27 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v27)
    MEMORY[0x212BB9B60](v27, 0x1000C4052888210);
  v28 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v28)
    MEMORY[0x212BB9B60](v28, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBISimTkProactiveCmdIndCb_SDK::~ARI_IBISimTkProactiveCmdIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBISimTkProactiveCmdIndCb_SDK::pack(AriSdk::ARI_IBISimTkProactiveCmdIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 0x22uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v8, 0x27CuLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v9, 0x134uLL, 0), !(_DWORD)result))
          {
            v10 = (const void *)*((_QWORD *)this + 13);
            if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v10, 0x1C4uLL, 0), !(_DWORD)result))
            {
              v11 = (const void *)*((_QWORD *)this + 14);
              if (!v11 || (result = AriMsg::pack(*((AriMsg **)this + 6), 7, v11, 0x1E4uLL, 0), !(_DWORD)result))
              {
                v12 = (const void *)*((_QWORD *)this + 15);
                if (!v12 || (result = AriMsg::pack(*((AriMsg **)this + 6), 8, v12, 0x134uLL, 0), !(_DWORD)result))
                {
                  v13 = (const void *)*((_QWORD *)this + 16);
                  if (!v13 || (result = AriMsg::pack(*((AriMsg **)this + 6), 9, v13, 0x114uLL, 0), !(_DWORD)result))
                  {
                    v14 = (const void *)*((_QWORD *)this + 17);
                    if (!v14
                      || (result = AriMsg::pack(*((AriMsg **)this + 6), 10, v14, 0x11CuLL, 0), !(_DWORD)result))
                    {
                      v15 = (const void *)*((_QWORD *)this + 18);
                      if (!v15
                        || (result = AriMsg::pack(*((AriMsg **)this + 6), 11, v15, 0x118uLL, 0), !(_DWORD)result))
                      {
                        v16 = (const void *)*((_QWORD *)this + 19);
                        if (!v16
                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 12, v16, 0x214uLL, 0), !(_DWORD)result))
                        {
                          v17 = (const void *)*((_QWORD *)this + 20);
                          if (!v17
                            || (result = AriMsg::pack(*((AriMsg **)this + 6), 13, v17, 0x224uLL, 0), !(_DWORD)result))
                          {
                            v18 = (const void *)*((_QWORD *)this + 21);
                            if (!v18
                              || (result = AriMsg::pack(*((AriMsg **)this + 6), 14, v18, 0x224uLL, 0), !(_DWORD)result))
                            {
                              v19 = (const void *)*((_QWORD *)this + 22);
                              if (!v19
                                || (result = AriMsg::pack(*((AriMsg **)this + 6), 15, v19, 8uLL, 0), !(_DWORD)result))
                              {
                                v20 = (const void *)*((_QWORD *)this + 23);
                                if (!v20
                                  || (result = AriMsg::pack(*((AriMsg **)this + 6), 16, v20, 0x110uLL, 0),
                                      !(_DWORD)result))
                                {
                                  v21 = (const void *)*((_QWORD *)this + 24);
                                  if (!v21
                                    || (result = AriMsg::pack(*((AriMsg **)this + 6), 17, v21, 5uLL, 0),
                                        !(_DWORD)result))
                                  {
                                    v22 = (const void *)*((_QWORD *)this + 25);
                                    if (!v22
                                      || (result = AriMsg::pack(*((AriMsg **)this + 6), 18, v22, 0x208uLL, 0),
                                          !(_DWORD)result))
                                    {
                                      v23 = (const void *)*((_QWORD *)this + 26);
                                      if (!v23
                                        || (result = AriMsg::pack(*((AriMsg **)this + 6), 19, v23, 0x104uLL, 0),
                                            !(_DWORD)result))
                                      {
                                        v24 = (const void *)*((_QWORD *)this + 27);
                                        if (!v24
                                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 20, v24, 0x10CuLL, 0),
                                              !(_DWORD)result))
                                        {
                                          v25 = (const void *)*((_QWORD *)this + 28);
                                          if (!v25
                                            || (result = AriMsg::pack(*((AriMsg **)this + 6), 21, v25, 0x10CuLL, 0),
                                                !(_DWORD)result))
                                          {
                                            v26 = (const void *)*((_QWORD *)this + 29);
                                            if (!v26
                                              || (result = AriMsg::pack(*((AriMsg **)this + 6), 22, v26, 0x10CuLL, 0),
                                                  !(_DWORD)result))
                                            {
                                              v27 = (const void *)*((_QWORD *)this + 30);
                                              if (!v27
                                                || (result = AriMsg::pack(*((AriMsg **)this + 6), 23, v27, 0x10CuLL, 0), !(_DWORD)result))
                                              {
                                                v28 = (const void *)*((_QWORD *)this + 31);
                                                if (!v28
                                                  || (result = AriMsg::pack(*((AriMsg **)this + 6), 24, v28, 0x30CuLL, 0), !(_DWORD)result))
                                                {
                                                  v29 = (const void *)*((_QWORD *)this + 32);
                                                  if (!v29
                                                    || (result = AriMsg::pack(*((AriMsg **)this + 6), 25, v29, 0x30CuLL, 0), !(_DWORD)result))
                                                  {
                                                    v30 = (const void *)*((_QWORD *)this + 33);
                                                    if (!v30
                                                      || (result = AriMsg::pack(*((AriMsg **)this + 6), 26, v30, 0x21CuLL, 0), !(_DWORD)result))
                                                    {
                                                      v31 = (const void *)*((_QWORD *)this + 34);
                                                      if (!v31
                                                        || (result = AriMsg::pack(*((AriMsg **)this + 6), 27, v31, 0x2ECuLL, 0), !(_DWORD)result))
                                                      {
                                                        result = 0;
                                                        *a2 = (AriMsg *)*((_QWORD *)this + 6);
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBISimTkProactiveCmdIndCb_SDK::unpack(AriSdk::ARI_IBISimTkProactiveCmdIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _OWORD *v13;
  void *v14;
  uint64_t v15;
  _OWORD *v16;
  void *v17;
  uint64_t v18;
  _OWORD *v19;
  void *v20;
  uint64_t v21;
  _OWORD *v22;
  void *v23;
  uint64_t v24;
  _OWORD *v25;
  void *v26;
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  void *v30;
  void *v31;
  void *v32;
  _QWORD *v33;
  _OWORD *v34;
  _BYTE *v35;
  void *v36;
  _OWORD *v37;
  _OWORD *v38;
  _OWORD *v39;
  _OWORD *v40;
  _OWORD *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  BOOL v47;

  v47 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v47, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v47;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v47 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v47, 0);
  if ((_DWORD)v3 || !v47)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v47 = 0;
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_WORD *)(v6 + 32) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, (void *)v6, 34, &v47, 0);
  if ((_DWORD)v3 || !v47)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C40A995D64BLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v7 = operator new();
    v8 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)v7 = *(_OWORD *)v6;
    *(_OWORD *)(v7 + 16) = v8;
    *(_WORD *)(v7 + 32) = *(_WORD *)(v6 + 32);
    v9 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v7;
    if (v9)
      MEMORY[0x212BB9B60](v9, 0x1000C40A995D64BLL);
    MEMORY[0x212BB9B60](v6, 0x1000C40A995D64BLL);
  }
  v47 = 0;
  v10 = (void *)operator new();
  bzero(v10, 0x27CuLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v10, 636, &v47, 0);
  if ((_DWORD)v3 || !v47)
  {
    MEMORY[0x212BB9B60](v10, 0x1000C40792A5974);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v11 = (void *)operator new();
    memcpy(v11, v10, 0x27CuLL);
    v12 = *((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v11;
    if (v12)
      MEMORY[0x212BB9B60](v12, 0x1000C40792A5974);
    MEMORY[0x212BB9B60](v10, 0x1000C40792A5974);
  }
  v47 = 0;
  v13 = (_OWORD *)operator new();
  *v13 = 0u;
  v13[1] = 0u;
  v13[2] = 0u;
  v13[3] = 0u;
  v13[4] = 0u;
  v13[5] = 0u;
  v13[6] = 0u;
  v13[7] = 0u;
  v13[8] = 0u;
  v13[9] = 0u;
  v13[10] = 0u;
  v13[11] = 0u;
  v13[12] = 0u;
  v13[13] = 0u;
  v13[14] = 0u;
  v13[15] = 0u;
  v13[16] = 0u;
  v13[17] = 0u;
  v13[18] = 0u;
  *((_DWORD *)v13 + 76) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v13, 308, &v47, 0);
  if ((_DWORD)v3 || !v47)
  {
    MEMORY[0x212BB9B60](v13, 0x1000C40806A7710);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v14 = (void *)operator new();
    memcpy(v14, v13, 0x134uLL);
    v15 = *((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = v14;
    if (v15)
      MEMORY[0x212BB9B60](v15, 0x1000C40806A7710);
    MEMORY[0x212BB9B60](v13, 0x1000C40806A7710);
  }
  v47 = 0;
  v16 = (_OWORD *)operator new();
  *v16 = 0u;
  v16[1] = 0u;
  v16[2] = 0u;
  v16[3] = 0u;
  v16[4] = 0u;
  v16[5] = 0u;
  v16[6] = 0u;
  v16[7] = 0u;
  v16[8] = 0u;
  v16[9] = 0u;
  v16[10] = 0u;
  v16[11] = 0u;
  v16[12] = 0u;
  v16[13] = 0u;
  v16[14] = 0u;
  v16[15] = 0u;
  v16[16] = 0u;
  v16[17] = 0u;
  v16[18] = 0u;
  v16[19] = 0u;
  v16[20] = 0u;
  v16[21] = 0u;
  v16[22] = 0u;
  v16[23] = 0u;
  v16[24] = 0u;
  v16[25] = 0u;
  v16[26] = 0u;
  v16[27] = 0u;
  *((_DWORD *)v16 + 112) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v16, 452, &v47, 0);
  if ((_DWORD)v3 || !v47)
  {
    MEMORY[0x212BB9B60](v16, 0x1000C40BE982F58);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v17 = (void *)operator new();
    memcpy(v17, v16, 0x1C4uLL);
    v18 = *((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = v17;
    if (v18)
      MEMORY[0x212BB9B60](v18, 0x1000C40BE982F58);
    MEMORY[0x212BB9B60](v16, 0x1000C40BE982F58);
  }
  v47 = 0;
  v19 = (_OWORD *)operator new();
  *v19 = 0u;
  v19[1] = 0u;
  v19[2] = 0u;
  v19[3] = 0u;
  v19[4] = 0u;
  v19[5] = 0u;
  v19[6] = 0u;
  v19[7] = 0u;
  v19[8] = 0u;
  v19[9] = 0u;
  v19[10] = 0u;
  v19[11] = 0u;
  v19[12] = 0u;
  v19[13] = 0u;
  v19[14] = 0u;
  v19[15] = 0u;
  v19[16] = 0u;
  v19[17] = 0u;
  v19[18] = 0u;
  v19[19] = 0u;
  v19[20] = 0u;
  v19[21] = 0u;
  v19[22] = 0u;
  v19[23] = 0u;
  v19[24] = 0u;
  v19[25] = 0u;
  v19[26] = 0u;
  v19[27] = 0u;
  v19[28] = 0u;
  v19[29] = 0u;
  *((_DWORD *)v19 + 120) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 7, v19, 484, &v47, 0);
  if ((_DWORD)v3 || !v47)
  {
    MEMORY[0x212BB9B60](v19, 0x1000C4056DB6161);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v20 = (void *)operator new();
    memcpy(v20, v19, 0x1E4uLL);
    v21 = *((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = v20;
    if (v21)
      MEMORY[0x212BB9B60](v21, 0x1000C4056DB6161);
    MEMORY[0x212BB9B60](v19, 0x1000C4056DB6161);
  }
  v47 = 0;
  v22 = (_OWORD *)operator new();
  *v22 = 0u;
  v22[1] = 0u;
  v22[2] = 0u;
  v22[3] = 0u;
  v22[4] = 0u;
  v22[5] = 0u;
  v22[6] = 0u;
  v22[7] = 0u;
  v22[8] = 0u;
  v22[9] = 0u;
  v22[10] = 0u;
  v22[11] = 0u;
  v22[12] = 0u;
  v22[13] = 0u;
  v22[14] = 0u;
  v22[15] = 0u;
  v22[16] = 0u;
  v22[17] = 0u;
  v22[18] = 0u;
  *((_DWORD *)v22 + 76) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 8, v22, 308, &v47, 0);
  if ((_DWORD)v3 || !v47)
  {
    MEMORY[0x212BB9B60](v22, 0x1000C405CD28F34);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v23 = (void *)operator new();
    memcpy(v23, v22, 0x134uLL);
    v24 = *((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = v23;
    if (v24)
      MEMORY[0x212BB9B60](v24, 0x1000C405CD28F34);
    MEMORY[0x212BB9B60](v22, 0x1000C405CD28F34);
  }
  v47 = 0;
  v25 = (_OWORD *)operator new();
  *v25 = 0u;
  v25[1] = 0u;
  v25[2] = 0u;
  v25[3] = 0u;
  v25[4] = 0u;
  v25[5] = 0u;
  v25[6] = 0u;
  v25[7] = 0u;
  v25[8] = 0u;
  v25[9] = 0u;
  v25[10] = 0u;
  v25[11] = 0u;
  v25[12] = 0u;
  v25[13] = 0u;
  v25[14] = 0u;
  v25[15] = 0u;
  v25[16] = 0u;
  *((_DWORD *)v25 + 68) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 9, v25, 276, &v47, 0);
  if ((_DWORD)v3 || !v47)
  {
    MEMORY[0x212BB9B60](v25, 0x1000C400CB9CA2ELL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v26 = (void *)operator new();
    memcpy(v26, v25, 0x114uLL);
    v27 = *((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v26;
    if (v27)
      MEMORY[0x212BB9B60](v27, 0x1000C400CB9CA2ELL);
    MEMORY[0x212BB9B60](v25, 0x1000C400CB9CA2ELL);
  }
  v47 = 0;
  v28 = (_OWORD *)operator new();
  *v28 = 0u;
  v28[1] = 0u;
  v28[2] = 0u;
  v28[3] = 0u;
  v28[4] = 0u;
  v28[5] = 0u;
  v28[6] = 0u;
  v28[7] = 0u;
  v28[8] = 0u;
  v28[9] = 0u;
  v28[10] = 0u;
  v28[11] = 0u;
  v28[12] = 0u;
  v28[13] = 0u;
  v28[14] = 0u;
  v28[15] = 0u;
  v28[16] = 0u;
  *(_OWORD *)((char *)v28 + 268) = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 10, v28, 284, &v47, 0);
  if ((_DWORD)v3 || !v47)
  {
    MEMORY[0x212BB9B60](v28, 0x1000C40B3435C2CLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBISimTkProactiveCmdDisplayText>::operator=<IBISimTkProactiveCmdDisplayText&,void>((uint64_t *)this + 17, v28);
    MEMORY[0x212BB9B60](v28, 0x1000C40B3435C2CLL);
  }
  v47 = 0;
  v29 = (_OWORD *)operator new();
  *v29 = 0u;
  v29[1] = 0u;
  v29[2] = 0u;
  v29[3] = 0u;
  v29[4] = 0u;
  v29[5] = 0u;
  v29[6] = 0u;
  v29[7] = 0u;
  v29[8] = 0u;
  v29[9] = 0u;
  v29[10] = 0u;
  v29[11] = 0u;
  v29[12] = 0u;
  v29[13] = 0u;
  v29[14] = 0u;
  v29[15] = 0u;
  v29[16] = 0u;
  *((_QWORD *)v29 + 34) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 11, v29, 280, &v47, 0);
  if ((_DWORD)v3 || !v47)
  {
    MEMORY[0x212BB9B60](v29, 0x1000C40EF5C4F84);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBISimTkProactiveCmdGetInkey>::operator=<IBISimTkProactiveCmdGetInkey&,void>((uint64_t *)this + 18, v29);
    MEMORY[0x212BB9B60](v29, 0x1000C40EF5C4F84);
  }
  v47 = 0;
  v30 = (void *)operator new();
  bzero(v30, 0x214uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 12, v30, 532, &v47, 0);
  if ((_DWORD)v3 || !v47)
  {
    MEMORY[0x212BB9B60](v30, 0x1000C40281EA1ABLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBISimTkProactiveCmdGetInput>::operator=<IBISimTkProactiveCmdGetInput&,void>((uint64_t *)this + 19, v30);
    MEMORY[0x212BB9B60](v30, 0x1000C40281EA1ABLL);
  }
  v47 = 0;
  v31 = (void *)operator new();
  bzero(v31, 0x224uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 13, v31, 548, &v47, 0);
  if ((_DWORD)v3 || !v47)
  {
    MEMORY[0x212BB9B60](v31, 0x1000C40DD741DE8);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBISimTkProactiveCmdSelectItem>::operator=<IBISimTkProactiveCmdSelectItem&,void>((uint64_t *)this + 20, v31);
    MEMORY[0x212BB9B60](v31, 0x1000C40DD741DE8);
  }
  v47 = 0;
  v32 = (void *)operator new();
  bzero(v32, 0x224uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 14, v32, 548, &v47, 0);
  if ((_DWORD)v3 || !v47)
  {
    MEMORY[0x212BB9B60](v32, 0x1000C4028FCE1D9);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBISimTkProactiveCmdSetupMenu>::operator=<IBISimTkProactiveCmdSetupMenu&,void>((uint64_t *)this + 21, v32);
    MEMORY[0x212BB9B60](v32, 0x1000C4028FCE1D9);
  }
  v47 = 0;
  v33 = (_QWORD *)operator new();
  *v33 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 15, v33, 8, &v47, 0);
  if ((_DWORD)v3 || !v47)
  {
    MEMORY[0x212BB9B60](v33, 0x1000C40789AEA99);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBICallPsUplinkBwEstimation>::operator=<IBICallPsUplinkBwEstimation&,void>((uint64_t *)this + 22, v33);
    MEMORY[0x212BB9B60](v33, 0x1000C40789AEA99);
  }
  v47 = 0;
  v34 = (_OWORD *)operator new();
  *v34 = 0u;
  v34[1] = 0u;
  v34[2] = 0u;
  v34[3] = 0u;
  v34[4] = 0u;
  v34[5] = 0u;
  v34[6] = 0u;
  v34[7] = 0u;
  v34[8] = 0u;
  v34[9] = 0u;
  v34[10] = 0u;
  v34[11] = 0u;
  v34[12] = 0u;
  v34[13] = 0u;
  v34[14] = 0u;
  v34[15] = 0u;
  v34[16] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 16, v34, 272, &v47, 0);
  if ((_DWORD)v3 || !v47)
  {
    MEMORY[0x212BB9B60](v34, 0x1000C40A4B5082DLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBISimTkProactiveCmdSetupIdleModeText>::operator=<IBISimTkProactiveCmdSetupIdleModeText&,void>((uint64_t *)this + 23, v34);
    MEMORY[0x212BB9B60](v34, 0x1000C40A4B5082DLL);
  }
  v47 = 0;
  v35 = (_BYTE *)operator new();
  *(_DWORD *)v35 = 0;
  v35[4] = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 17, v35, 5, &v47, 0);
  if ((_DWORD)v3 || !v47)
  {
    MEMORY[0x212BB9B60](v35, 0x1000C40957D8CC4);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBISimTkProactiveCmdLanguageNotification>::operator=<IBISimTkProactiveCmdLanguageNotification&,void>((uint64_t *)this + 24, (uint64_t)v35);
    MEMORY[0x212BB9B60](v35, 0x1000C40957D8CC4);
  }
  v47 = 0;
  v36 = (void *)operator new();
  bzero(v36, 0x208uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 18, v36, 520, &v47, 0);
  if ((_DWORD)v3 || !v47)
  {
    MEMORY[0x212BB9B60](v36, 0x1000C40B230606BLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBISimTkProactiveCmdRunAt>::operator=<IBISimTkProactiveCmdRunAt&,void>((uint64_t *)this + 25, v36);
    MEMORY[0x212BB9B60](v36, 0x1000C40B230606BLL);
  }
  v47 = 0;
  v37 = (_OWORD *)operator new();
  *v37 = 0u;
  v37[1] = 0u;
  v37[2] = 0u;
  v37[3] = 0u;
  v37[4] = 0u;
  v37[5] = 0u;
  v37[6] = 0u;
  v37[7] = 0u;
  v37[8] = 0u;
  v37[9] = 0u;
  v37[10] = 0u;
  v37[11] = 0u;
  v37[12] = 0u;
  v37[13] = 0u;
  v37[14] = 0u;
  v37[15] = 0u;
  *((_DWORD *)v37 + 64) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 19, v37, 260, &v47, 0);
  if ((_DWORD)v3 || !v47)
  {
    MEMORY[0x212BB9B60](v37, 0x1000C408757D331);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBICdmaTpduData>::operator=<IBICdmaTpduData&,void>((uint64_t *)this + 26, v37);
    MEMORY[0x212BB9B60](v37, 0x1000C408757D331);
  }
  v47 = 0;
  v38 = (_OWORD *)operator new();
  *v38 = 0u;
  v38[1] = 0u;
  v38[2] = 0u;
  v38[3] = 0u;
  v38[4] = 0u;
  v38[5] = 0u;
  v38[6] = 0u;
  v38[7] = 0u;
  v38[8] = 0u;
  v38[9] = 0u;
  v38[10] = 0u;
  v38[11] = 0u;
  v38[12] = 0u;
  v38[13] = 0u;
  v38[14] = 0u;
  v38[15] = 0u;
  *(_OWORD *)((char *)v38 + 252) = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 20, v38, 268, &v47, 0);
  if ((_DWORD)v3 || !v47)
  {
    MEMORY[0x212BB9B60](v38, 0x1000C40E71176DALL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBISimTkProactiveCmdOpenChannel>::operator=<IBISimTkProactiveCmdOpenChannel&,void>((uint64_t *)this + 27, v38);
    MEMORY[0x212BB9B60](v38, 0x1000C40E71176DALL);
  }
  v47 = 0;
  v39 = (_OWORD *)operator new();
  *v39 = 0u;
  v39[1] = 0u;
  v39[2] = 0u;
  v39[3] = 0u;
  v39[4] = 0u;
  v39[5] = 0u;
  v39[6] = 0u;
  v39[7] = 0u;
  v39[8] = 0u;
  v39[9] = 0u;
  v39[10] = 0u;
  v39[11] = 0u;
  v39[12] = 0u;
  v39[13] = 0u;
  v39[14] = 0u;
  v39[15] = 0u;
  *(_OWORD *)((char *)v39 + 252) = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 21, v39, 268, &v47, 0);
  if ((_DWORD)v3 || !v47)
  {
    MEMORY[0x212BB9B60](v39, 0x1000C40E71176DALL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBISimTkProactiveCmdOpenChannel>::operator=<IBISimTkProactiveCmdOpenChannel&,void>((uint64_t *)this + 28, v39);
    MEMORY[0x212BB9B60](v39, 0x1000C40E71176DALL);
  }
  v47 = 0;
  v40 = (_OWORD *)operator new();
  *v40 = 0u;
  v40[1] = 0u;
  v40[2] = 0u;
  v40[3] = 0u;
  v40[4] = 0u;
  v40[5] = 0u;
  v40[6] = 0u;
  v40[7] = 0u;
  v40[8] = 0u;
  v40[9] = 0u;
  v40[10] = 0u;
  v40[11] = 0u;
  v40[12] = 0u;
  v40[13] = 0u;
  v40[14] = 0u;
  v40[15] = 0u;
  *(_OWORD *)((char *)v40 + 252) = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 22, v40, 268, &v47, 0);
  if ((_DWORD)v3 || !v47)
  {
    MEMORY[0x212BB9B60](v40, 0x1000C40E71176DALL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBISimTkProactiveCmdOpenChannel>::operator=<IBISimTkProactiveCmdOpenChannel&,void>((uint64_t *)this + 29, v40);
    MEMORY[0x212BB9B60](v40, 0x1000C40E71176DALL);
  }
  v47 = 0;
  v41 = (_OWORD *)operator new();
  *v41 = 0u;
  v41[1] = 0u;
  v41[2] = 0u;
  v41[3] = 0u;
  v41[4] = 0u;
  v41[5] = 0u;
  v41[6] = 0u;
  v41[7] = 0u;
  v41[8] = 0u;
  v41[9] = 0u;
  v41[10] = 0u;
  v41[11] = 0u;
  v41[12] = 0u;
  v41[13] = 0u;
  v41[14] = 0u;
  v41[15] = 0u;
  *(_OWORD *)((char *)v41 + 252) = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 23, v41, 268, &v47, 0);
  if ((_DWORD)v3 || !v47)
  {
    MEMORY[0x212BB9B60](v41, 0x1000C40E71176DALL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBISimTkProactiveCmdOpenChannel>::operator=<IBISimTkProactiveCmdOpenChannel&,void>((uint64_t *)this + 30, v41);
    MEMORY[0x212BB9B60](v41, 0x1000C40E71176DALL);
  }
  v47 = 0;
  v42 = (void *)operator new();
  bzero(v42, 0x30CuLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 24, v42, 780, &v47, 0);
  if ((_DWORD)v3 || !v47)
  {
    MEMORY[0x212BB9B60](v42, 0x1000C40153912A6);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBISimTkProactiveCmdSelectItem_V1>::operator=<IBISimTkProactiveCmdSelectItem_V1&,void>((uint64_t *)this + 31, v42);
    MEMORY[0x212BB9B60](v42, 0x1000C40153912A6);
  }
  v47 = 0;
  v43 = (void *)operator new();
  bzero(v43, 0x30CuLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 25, v43, 780, &v47, 0);
  if ((_DWORD)v3 || !v47)
  {
    MEMORY[0x212BB9B60](v43, 0x1000C404455CFF4);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBISimTkProactiveCmdSetupMenu_V1>::operator=<IBISimTkProactiveCmdSetupMenu_V1&,void>((uint64_t *)this + 32, v43);
    MEMORY[0x212BB9B60](v43, 0x1000C404455CFF4);
  }
  v47 = 0;
  v44 = (void *)operator new();
  bzero(v44, 0x21CuLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 26, v44, 540, &v47, 0);
  if ((_DWORD)v3 || !v47)
  {
    MEMORY[0x212BB9B60](v44, 0x1000C40693B0FD8);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBISimTkProactiveCmdGetInput_V1>::operator=<IBISimTkProactiveCmdGetInput_V1&,void>((uint64_t *)this + 33, v44);
    MEMORY[0x212BB9B60](v44, 0x1000C40693B0FD8);
  }
  v47 = 0;
  v45 = (void *)operator new();
  bzero(v45, 0x2ECuLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 27, v45, 748, &v47, 0);
  if (!(_DWORD)v3 && v47)
    AriSdk::Tlv<IBISimTkProactiveCmdSendSms_V1>::operator=<IBISimTkProactiveCmdSendSms_V1&,void>((uint64_t *)this + 34, v45);
  MEMORY[0x212BB9B60](v45, 0x1000C40F5614B1ELL);
  return v3;
}

void sub_20E262634(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C40F5614B1ELL);
  _Unwind_Resume(a1);
}

uint64_t *AriSdk::Tlv<IBISimTkProactiveCmdDisplayText>::operator=<IBISimTkProactiveCmdDisplayText&,void>(uint64_t *a1, const void *a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)operator new();
  memcpy(v4, a2, 0x11CuLL);
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40B3435C2CLL);
  return a1;
}

uint64_t *AriSdk::Tlv<IBISimTkProactiveCmdGetInkey>::operator=<IBISimTkProactiveCmdGetInkey&,void>(uint64_t *a1, const void *a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)operator new();
  memcpy(v4, a2, 0x118uLL);
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40EF5C4F84);
  return a1;
}

uint64_t *AriSdk::Tlv<IBISimTkProactiveCmdGetInput>::operator=<IBISimTkProactiveCmdGetInput&,void>(uint64_t *a1, const void *a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)operator new();
  memcpy(v4, a2, 0x214uLL);
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40281EA1ABLL);
  return a1;
}

uint64_t *AriSdk::Tlv<IBISimTkProactiveCmdSelectItem>::operator=<IBISimTkProactiveCmdSelectItem&,void>(uint64_t *a1, const void *a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)operator new();
  memcpy(v4, a2, 0x224uLL);
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40DD741DE8);
  return a1;
}

uint64_t *AriSdk::Tlv<IBISimTkProactiveCmdSetupMenu>::operator=<IBISimTkProactiveCmdSetupMenu&,void>(uint64_t *a1, const void *a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)operator new();
  memcpy(v4, a2, 0x224uLL);
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4028FCE1D9);
  return a1;
}

uint64_t *AriSdk::Tlv<IBISimTkProactiveCmdSetupIdleModeText>::operator=<IBISimTkProactiveCmdSetupIdleModeText&,void>(uint64_t *a1, const void *a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)operator new();
  memcpy(v4, a2, 0x110uLL);
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40A4B5082DLL);
  return a1;
}

uint64_t *AriSdk::Tlv<IBISimTkProactiveCmdLanguageNotification>::operator=<IBISimTkProactiveCmdLanguageNotification&,void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = operator new();
  *(_DWORD *)v4 = *(_DWORD *)a2;
  *(_BYTE *)(v4 + 4) = *(_BYTE *)(a2 + 4);
  v5 = *a1;
  *a1 = v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40957D8CC4);
  return a1;
}

uint64_t *AriSdk::Tlv<IBISimTkProactiveCmdRunAt>::operator=<IBISimTkProactiveCmdRunAt&,void>(uint64_t *a1, const void *a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)operator new();
  memcpy(v4, a2, 0x208uLL);
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40B230606BLL);
  return a1;
}

uint64_t *AriSdk::Tlv<IBISimTkProactiveCmdOpenChannel>::operator=<IBISimTkProactiveCmdOpenChannel&,void>(uint64_t *a1, const void *a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)operator new();
  memcpy(v4, a2, 0x10CuLL);
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40E71176DALL);
  return a1;
}

uint64_t *AriSdk::Tlv<IBISimTkProactiveCmdSelectItem_V1>::operator=<IBISimTkProactiveCmdSelectItem_V1&,void>(uint64_t *a1, const void *a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)operator new();
  memcpy(v4, a2, 0x30CuLL);
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40153912A6);
  return a1;
}

uint64_t *AriSdk::Tlv<IBISimTkProactiveCmdSetupMenu_V1>::operator=<IBISimTkProactiveCmdSetupMenu_V1&,void>(uint64_t *a1, const void *a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)operator new();
  memcpy(v4, a2, 0x30CuLL);
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C404455CFF4);
  return a1;
}

uint64_t *AriSdk::Tlv<IBISimTkProactiveCmdGetInput_V1>::operator=<IBISimTkProactiveCmdGetInput_V1&,void>(uint64_t *a1, const void *a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)operator new();
  memcpy(v4, a2, 0x21CuLL);
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40693B0FD8);
  return a1;
}

uint64_t *AriSdk::Tlv<IBISimTkProactiveCmdSendSms_V1>::operator=<IBISimTkProactiveCmdSendSms_V1&,void>(uint64_t *a1, const void *a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)operator new();
  memcpy(v4, a2, 0x2ECuLL);
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40F5614B1ELL);
  return a1;
}

BOOL AriSdk::ARI_IBISimTkProactiveCmdIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBISimTkProactiveCmdIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 897712128;
}

double AriSdk::ARI_IBISimTkRefreshConfirmIndCb_SDK::ARI_IBISimTkRefreshConfirmIndCb_SDK(AriSdk::ARI_IBISimTkRefreshConfirmIndCb_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x35830000u, 0);
  *(_QWORD *)v1 = &off_24C906348;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x35830000u, 0);
  *(_QWORD *)v1 = &off_24C906348;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

double AriSdk::ARI_IBISimTkRefreshConfirmIndCb_SDK::ARI_IBISimTkRefreshConfirmIndCb_SDK(AriSdk::ARI_IBISimTkRefreshConfirmIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C906348;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C906348;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

void AriSdk::ARI_IBISimTkRefreshConfirmIndCb_SDK::~ARI_IBISimTkRefreshConfirmIndCb_SDK(AriSdk::ARI_IBISimTkRefreshConfirmIndCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C906348;
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C40BDFB0063);
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBISimTkRefreshConfirmIndCb_SDK::~ARI_IBISimTkRefreshConfirmIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBISimTkRefreshConfirmIndCb_SDK::pack(AriSdk::ARI_IBISimTkRefreshConfirmIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 2uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 4uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v8, 4uLL, 0), !(_DWORD)result))
        {
          result = 0;
          *a2 = (AriMsg *)*((_QWORD *)this + 6);
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBISimTkRefreshConfirmIndCb_SDK::unpack(AriSdk::ARI_IBISimTkRefreshConfirmIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _WORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;

  v12 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v12, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v12;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v11 = 0;
  v5 = (_WORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 2, &v11, 0);
  if ((_DWORD)v3 || !v11)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C40BDFB0063);
  }
  v10 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 4, &v10, 0);
  if ((_DWORD)v3 || !v10)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  }
  v9 = 0;
  v7 = (_DWORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v7, 4, &v9, 0);
  if (!(_DWORD)v3 && v9)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 11, v7);
  MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  return v3;
}

void sub_20E263344(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBISimTkRefreshConfirmIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBISimTkRefreshConfirmIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 897777664;
}

AriSdk::MsgBase *AriSdk::ARI_IBISimTkRefreshConfirmRsp_SDK::ARI_IBISimTkRefreshConfirmRsp_SDK(AriSdk::ARI_IBISimTkRefreshConfirmRsp_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x34820000u, 1);
  *(_QWORD *)result = &off_24C906380;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x34820000u, 1);
  *(_QWORD *)result = &off_24C906380;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBISimTkRefreshConfirmRsp_SDK::ARI_IBISimTkRefreshConfirmRsp_SDK(AriSdk::ARI_IBISimTkRefreshConfirmRsp_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C906380;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C906380;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBISimTkRefreshConfirmRsp_SDK::~ARI_IBISimTkRefreshConfirmRsp_SDK(AriSdk::ARI_IBISimTkRefreshConfirmRsp_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C906380;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4077774924);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4077774924);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBISimTkRefreshConfirmRsp_SDK::~ARI_IBISimTkRefreshConfirmRsp_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBISimTkRefreshConfirmRsp_SDK::pack(AriSdk::ARI_IBISimTkRefreshConfirmRsp_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 1uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 1uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBISimTkRefreshConfirmRsp_SDK::unpack(AriSdk::ARI_IBISimTkRefreshConfirmRsp_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _BYTE *v5;
  _BYTE *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_BYTE *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 1, &v9, 0);
  if ((_DWORD)v3 || !v9)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4077774924);
  }
  v8 = 0;
  v6 = (_BYTE *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 1, &v8, 0);
  if (!(_DWORD)v3 && v8)
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 10, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C4077774924);
  return v3;
}

void sub_20E263798(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4077774924);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBISimTkRefreshConfirmRsp_SDK::hasDeclaredGmid(AriSdk::ARI_IBISimTkRefreshConfirmRsp_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 880934912;
}

double AriSdk::ARI_IBISimTkRefreshFcnIndCb_SDK::ARI_IBISimTkRefreshFcnIndCb_SDK(AriSdk::ARI_IBISimTkRefreshFcnIndCb_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x35848000u, 0);
  *(_QWORD *)v1 = &off_24C9063B8;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x35848000u, 0);
  *(_QWORD *)v1 = &off_24C9063B8;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  return result;
}

double AriSdk::ARI_IBISimTkRefreshFcnIndCb_SDK::ARI_IBISimTkRefreshFcnIndCb_SDK(AriSdk::ARI_IBISimTkRefreshFcnIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C9063B8;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C9063B8;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  return result;
}

void AriSdk::ARI_IBISimTkRefreshFcnIndCb_SDK::~ARI_IBISimTkRefreshFcnIndCb_SDK(AriSdk::ARI_IBISimTkRefreshFcnIndCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_24C9063B8;
  v2 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4075806E5BLL);
  v4 = (void *)*((_QWORD *)this + 11);
  if (v4)
  {
    *((_QWORD *)this + 12) = v4;
    operator delete(v4);
  }
  v5 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4077774924);
  v6 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C40BDFB0063);
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBISimTkRefreshFcnIndCb_SDK::~ARI_IBISimTkRefreshFcnIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBISimTkRefreshFcnIndCb_SDK::pack(AriSdk::ARI_IBISimTkRefreshFcnIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  _BYTE *v8;
  _BYTE *v9;
  const void *v10;
  const void *v11;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 2uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 1uLL, 0), !(_DWORD)result))
      {
        v8 = (_BYTE *)*((_QWORD *)this + 11);
        if (!v8
          || (v9 = (_BYTE *)*((_QWORD *)this + 12), v8 == v9)
          || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v8, v9 - v8, 0), !(_DWORD)result))
        {
          v10 = (const void *)*((_QWORD *)this + 14);
          if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v10, 0x11uLL, 0), !(_DWORD)result))
          {
            v11 = (const void *)*((_QWORD *)this + 15);
            if (!v11 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v11, 4uLL, 0), !(_DWORD)result))
            {
              result = 0;
              *a2 = (AriMsg *)*((_QWORD *)this + 6);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBISimTkRefreshFcnIndCb_SDK::unpack(AriSdk::ARI_IBISimTkRefreshFcnIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _WORD *v5;
  _BYTE *v6;
  void *v7;
  _QWORD *v8;
  _DWORD *v9;
  void *__p[3];
  unint64_t v12;
  BOOL v13;

  LOBYTE(__p[0]) = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, (BOOL *)__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = LOBYTE(__p[0]) == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  LOBYTE(__p[0]) = 0;
  v5 = (_WORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 2, (BOOL *)__p, 0);
  if ((_DWORD)v3 || !LOBYTE(__p[0]))
  {
    MEMORY[0x212BB9B60](v5, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C40BDFB0063);
  }
  LOBYTE(__p[0]) = 0;
  v6 = (_BYTE *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 1, (BOOL *)__p, 0);
  if ((_DWORD)v3 || !LOBYTE(__p[0]))
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4077774924);
  }
  v13 = 0;
  v12 = 0xAAAAAAAAAAAAAAAALL;
  v7 = (void *)operator new[]();
  bzero(v7, 0x4ECuLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v7, 1260, &v13, &v12);
  if ((_DWORD)v3 || !v13)
  {
    MEMORY[0x212BB9B48](v7, 0x1000C800B4D1E18);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    std::vector<IBISimTkFileIdentifier>::__init_with_size[abi:ne180100]<IBISimTkFileIdentifier*,IBISimTkFileIdentifier*>(__p, v7, (uint64_t)v7 + 21 * (v12 / 0x15), v12 / 0x15);
    AriSdk::TlvArray<IBISimTkFileIdentifier,60ul>::operator=((uint64_t)this + 88, (uint64_t *)__p);
    if (__p[0])
      operator delete(__p[0]);
    MEMORY[0x212BB9B48](v7, 0x1000C800B4D1E18);
  }
  LOBYTE(__p[0]) = 0;
  v8 = (_QWORD *)operator new();
  *v8 = 0;
  v8[1] = 0;
  *((_BYTE *)v8 + 16) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v8, 17, (BOOL *)__p, 0);
  if ((_DWORD)v3 || !LOBYTE(__p[0]))
  {
    MEMORY[0x212BB9B60](v8, 0x1000C4075806E5BLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBISimSecAuthIntegrityKey>::operator=<IBISimSecAuthIntegrityKey&,void>((uint64_t *)this + 14, (uint64_t)v8);
    MEMORY[0x212BB9B60](v8, 0x1000C4075806E5BLL);
  }
  LOBYTE(__p[0]) = 0;
  v9 = (_DWORD *)operator new();
  *v9 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v9, 4, (BOOL *)__p, 0);
  if (!(_DWORD)v3 && LOBYTE(__p[0]))
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 15, v9);
  MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
  return v3;
}

void sub_20E263ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  uint64_t v10;

  MEMORY[0x212BB9B60](v10, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

uint64_t AriSdk::TlvArray<IBISimTkFileIdentifier,60ul>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void **v7;
  void *v8;
  void *__p[2];
  char v11;

  v5 = *a2;
  v4 = a2[1];
  if (0xCF3CF3CF3CF3CF3DLL * (v4 - *a2) < 0x3D)
  {
    v8 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v8);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v5 = *a2;
      v4 = a2[1];
    }
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v11 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v6, v7, 360, a1, 0xCF3CF3CF3CF3CF3DLL * (a2[1] - *a2), 60);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_20E264078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL AriSdk::ARI_IBISimTkRefreshFcnIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBISimTkRefreshFcnIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 897875968;
}

AriSdk::MsgBase *AriSdk::ARI_IBISimTkRefreshFcnRsp_SDK::ARI_IBISimTkRefreshFcnRsp_SDK(AriSdk::ARI_IBISimTkRefreshFcnRsp_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x34828000u, 1);
  *(_QWORD *)result = &off_24C9063F0;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x34828000u, 1);
  *(_QWORD *)result = &off_24C9063F0;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBISimTkRefreshFcnRsp_SDK::ARI_IBISimTkRefreshFcnRsp_SDK(AriSdk::ARI_IBISimTkRefreshFcnRsp_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C9063F0;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C9063F0;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBISimTkRefreshFcnRsp_SDK::~ARI_IBISimTkRefreshFcnRsp_SDK(AriSdk::ARI_IBISimTkRefreshFcnRsp_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C9063F0;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C40BDFB0063);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBISimTkRefreshFcnRsp_SDK::~ARI_IBISimTkRefreshFcnRsp_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBISimTkRefreshFcnRsp_SDK::pack(AriSdk::ARI_IBISimTkRefreshFcnRsp_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 2uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBISimTkRefreshFcnRsp_SDK::unpack(AriSdk::ARI_IBISimTkRefreshFcnRsp_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _WORD *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v9, 0);
  if ((_DWORD)v3 || !v9)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v8 = 0;
  v6 = (_WORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 2, &v8, 0);
  if (!(_DWORD)v3 && v8)
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 10, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C40BDFB0063);
  return v3;
}

void sub_20E2644A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C40BDFB0063);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBISimTkRefreshFcnRsp_SDK::hasDeclaredGmid(AriSdk::ARI_IBISimTkRefreshFcnRsp_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 880967680;
}

double AriSdk::ARI_IBISimTkRefreshQueryIndCb_SDK::ARI_IBISimTkRefreshQueryIndCb_SDK(AriSdk::ARI_IBISimTkRefreshQueryIndCb_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x35850000u, 0);
  *(_QWORD *)v1 = &off_24C906428;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_QWORD *)v1 + 12) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x35850000u, 0);
  *(_QWORD *)v1 = &off_24C906428;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_QWORD *)v1 + 12) = 0;
  return result;
}

double AriSdk::ARI_IBISimTkRefreshQueryIndCb_SDK::ARI_IBISimTkRefreshQueryIndCb_SDK(AriSdk::ARI_IBISimTkRefreshQueryIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C906428;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_QWORD *)v3 + 12) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C906428;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_QWORD *)v3 + 12) = 0;
  return result;
}

void AriSdk::ARI_IBISimTkRefreshQueryIndCb_SDK::~ARI_IBISimTkRefreshQueryIndCb_SDK(AriSdk::ARI_IBISimTkRefreshQueryIndCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_24C906428;
  v2 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4077774924);
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4077774924);
  v5 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40BDFB0063);
  v6 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBISimTkRefreshQueryIndCb_SDK::~ARI_IBISimTkRefreshQueryIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBISimTkRefreshQueryIndCb_SDK::pack(AriSdk::ARI_IBISimTkRefreshQueryIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 2uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 1uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v8, 1uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v9, 4uLL, 0), !(_DWORD)result))
          {
            result = 0;
            *a2 = (AriMsg *)*((_QWORD *)this + 6);
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBISimTkRefreshQueryIndCb_SDK::unpack(AriSdk::ARI_IBISimTkRefreshQueryIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _WORD *v5;
  _BYTE *v6;
  _BYTE *v7;
  _DWORD *v8;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;

  v14 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v14, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v14;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v13 = 0;
  v5 = (_WORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 2, &v13, 0);
  if ((_DWORD)v3 || !v13)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C40BDFB0063);
  }
  v12 = 0;
  v6 = (_BYTE *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 1, &v12, 0);
  if ((_DWORD)v3 || !v12)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4077774924);
  }
  v11 = 0;
  v7 = (_BYTE *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v7, 1, &v11, 0);
  if ((_DWORD)v3 || !v11)
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 11, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C4077774924);
  }
  v10 = 0;
  v8 = (_DWORD *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v8, 4, &v10, 0);
  if (!(_DWORD)v3 && v10)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 12, v8);
  MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  return v3;
}

void sub_20E264AAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBISimTkRefreshQueryIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBISimTkRefreshQueryIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 897908736;
}

AriSdk::MsgBase *AriSdk::ARI_IBISimTkRefreshQueryRsp_SDK::ARI_IBISimTkRefreshQueryRsp_SDK(AriSdk::ARI_IBISimTkRefreshQueryRsp_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x34830000u, 1);
  *(_QWORD *)result = &off_24C906460;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x34830000u, 1);
  *(_QWORD *)result = &off_24C906460;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBISimTkRefreshQueryRsp_SDK::ARI_IBISimTkRefreshQueryRsp_SDK(AriSdk::ARI_IBISimTkRefreshQueryRsp_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C906460;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C906460;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBISimTkRefreshQueryRsp_SDK::~ARI_IBISimTkRefreshQueryRsp_SDK(AriSdk::ARI_IBISimTkRefreshQueryRsp_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C906460;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C40BDFB0063);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBISimTkRefreshQueryRsp_SDK::~ARI_IBISimTkRefreshQueryRsp_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBISimTkRefreshQueryRsp_SDK::pack(AriSdk::ARI_IBISimTkRefreshQueryRsp_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 2uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBISimTkRefreshQueryRsp_SDK::unpack(AriSdk::ARI_IBISimTkRefreshQueryRsp_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _WORD *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v9, 0);
  if ((_DWORD)v3 || !v9)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v8 = 0;
  v6 = (_WORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 2, &v8, 0);
  if (!(_DWORD)v3 && v8)
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 10, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C40BDFB0063);
  return v3;
}

void sub_20E264F18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C40BDFB0063);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBISimTkRefreshQueryRsp_SDK::hasDeclaredGmid(AriSdk::ARI_IBISimTkRefreshQueryRsp_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 881000448;
}

double AriSdk::ARI_IBISimTkSetRequiredFcnListReq_SDK::ARI_IBISimTkSetRequiredFcnListReq_SDK(AriSdk::ARI_IBISimTkSetRequiredFcnListReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x34858000u, 0);
  *(_QWORD *)v1 = &off_24C906498;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_QWORD *)v1 + 12) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x34858000u, 0);
  *(_QWORD *)v1 = &off_24C906498;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_QWORD *)v1 + 12) = 0;
  return result;
}

double AriSdk::ARI_IBISimTkSetRequiredFcnListReq_SDK::ARI_IBISimTkSetRequiredFcnListReq_SDK(AriSdk::ARI_IBISimTkSetRequiredFcnListReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C906498;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_QWORD *)v3 + 12) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C906498;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_QWORD *)v3 + 12) = 0;
  return result;
}

void AriSdk::ARI_IBISimTkSetRequiredFcnListReq_SDK::~ARI_IBISimTkSetRequiredFcnListReq_SDK(AriSdk::ARI_IBISimTkSetRequiredFcnListReq_SDK *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C906498;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4077774924);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBISimTkSetRequiredFcnListReq_SDK::~ARI_IBISimTkSetRequiredFcnListReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBISimTkSetRequiredFcnListReq_SDK::pack(AriSdk::ARI_IBISimTkSetRequiredFcnListReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  _BYTE *v7;
  _BYTE *v8;
  BOOL v9;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 1uLL, 0), !(_DWORD)result))
    {
      v7 = (_BYTE *)*((_QWORD *)this + 10);
      v8 = (_BYTE *)*((_QWORD *)this + 11);
      if (v7)
        v9 = v7 == v8;
      else
        v9 = 1;
      if (v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, v8 - v7, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBISimTkSetRequiredFcnListReq_SDK::unpack(AriSdk::ARI_IBISimTkSetRequiredFcnListReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _BYTE *v5;
  void *v6;
  void *__p[3];
  unint64_t v9;
  BOOL v10;

  LOBYTE(__p[0]) = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, (BOOL *)__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = LOBYTE(__p[0]) == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  LOBYTE(__p[0]) = 0;
  v5 = (_BYTE *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 1, (BOOL *)__p, 0);
  if ((_DWORD)v3 || !LOBYTE(__p[0]))
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4077774924);
  }
  v10 = 0;
  v9 = 0xAAAAAAAAAAAAAAAALL;
  v6 = (void *)operator new[]();
  bzero(v6, 0x4ECuLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 1260, &v10, &v9);
  if (!(_DWORD)v3 && v10)
  {
    memset(__p, 0, sizeof(__p));
    std::vector<IBISimTkFileIdentifier>::__init_with_size[abi:ne180100]<IBISimTkFileIdentifier*,IBISimTkFileIdentifier*>(__p, v6, (uint64_t)v6 + 21 * (v9 / 0x15), v9 / 0x15);
    AriSdk::TlvArray<IBISimTkFileIdentifier,60ul>::operator=((uint64_t)this + 80, (uint64_t *)__p);
    if (__p[0])
      operator delete(__p[0]);
  }
  MEMORY[0x212BB9B48](v6, 0x1000C800B4D1E18);
  return v3;
}

void sub_20E2653CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  uint64_t v10;

  if (__p)
    operator delete(__p);
  MEMORY[0x212BB9B48](v10, 0x1000C800B4D1E18);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBISimTkSetRequiredFcnListReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBISimTkSetRequiredFcnListReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 881164288;
}

AriSdk::MsgBase *AriSdk::ARI_IBISimTkSetRequiredFcnListRspCb_SDK::ARI_IBISimTkSetRequiredFcnListRspCb_SDK(AriSdk::ARI_IBISimTkSetRequiredFcnListRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x35058000u, 0);
  *(_QWORD *)result = &off_24C9064D0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x35058000u, 0);
  *(_QWORD *)result = &off_24C9064D0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBISimTkSetRequiredFcnListRspCb_SDK::ARI_IBISimTkSetRequiredFcnListRspCb_SDK(AriSdk::ARI_IBISimTkSetRequiredFcnListRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C9064D0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C9064D0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBISimTkSetRequiredFcnListRspCb_SDK::~ARI_IBISimTkSetRequiredFcnListRspCb_SDK(AriSdk::ARI_IBISimTkSetRequiredFcnListRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C9064D0;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBISimTkSetRequiredFcnListRspCb_SDK::~ARI_IBISimTkSetRequiredFcnListRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBISimTkSetRequiredFcnListRspCb_SDK::pack(AriSdk::ARI_IBISimTkSetRequiredFcnListRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBISimTkSetRequiredFcnListRspCb_SDK::unpack(AriSdk::ARI_IBISimTkSetRequiredFcnListRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E265770(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBISimTkSetRequiredFcnListRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBISimTkSetRequiredFcnListRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 889552896;
}

double AriSdk::ARI_IBISimTkTerminalResponse_SDK::ARI_IBISimTkTerminalResponse_SDK(AriSdk::ARI_IBISimTkTerminalResponse_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x34850000u, 1);
  *(_QWORD *)v1 = &off_24C906508;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  *((_OWORD *)v1 + 11) = 0u;
  *((_OWORD *)v1 + 12) = 0u;
  *((_OWORD *)v1 + 13) = 0u;
  *((_OWORD *)v1 + 14) = 0u;
  *((_QWORD *)v1 + 30) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x34850000u, 1);
  *(_QWORD *)v1 = &off_24C906508;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  *((_OWORD *)v1 + 11) = 0u;
  *((_OWORD *)v1 + 12) = 0u;
  *((_OWORD *)v1 + 13) = 0u;
  *((_OWORD *)v1 + 14) = 0u;
  *((_QWORD *)v1 + 30) = 0;
  return result;
}

double AriSdk::ARI_IBISimTkTerminalResponse_SDK::ARI_IBISimTkTerminalResponse_SDK(AriSdk::ARI_IBISimTkTerminalResponse_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C906508;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 13) = 0u;
  *((_OWORD *)v3 + 14) = 0u;
  *((_QWORD *)v3 + 30) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C906508;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 13) = 0u;
  *((_OWORD *)v3 + 14) = 0u;
  *((_QWORD *)v3 + 30) = 0;
  return result;
}

void AriSdk::ARI_IBISimTkTerminalResponse_SDK::~ARI_IBISimTkTerminalResponse_SDK(AriSdk::ARI_IBISimTkTerminalResponse_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)this = &off_24C906508;
  v2 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C40789AEA99);
  v3 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C40789AEA99);
  v4 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C40789AEA99);
  v5 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40789AEA99);
  v6 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C408757D331);
  v7 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C401C9B0B8BLL);
  v8 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v8)
    MEMORY[0x212BB9B60](v8, 0x1000C40789AEA99);
  v9 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v9)
    MEMORY[0x212BB9B60](v9, 0x1000C40789AEA99);
  v10 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v10)
    MEMORY[0x212BB9B60](v10, 0x1000C4042B6F12DLL);
  v11 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v11)
    MEMORY[0x212BB9B60](v11, 0x1000C40789AEA99);
  v12 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v12)
    MEMORY[0x212BB9B60](v12, 0x1000C40FFE2888BLL);
  v13 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v13)
    MEMORY[0x212BB9B60](v13, 0x1000C4082D414CFLL);
  v14 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v14)
    MEMORY[0x212BB9B60](v14, 0x1000C4082D414CFLL);
  v15 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v15)
    MEMORY[0x212BB9B60](v15, 0x1000C40789AEA99);
  v16 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v16)
    MEMORY[0x212BB9B60](v16, 0x1000C40789AEA99);
  v17 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v17)
    MEMORY[0x212BB9B60](v17, 0x1000C40789AEA99);
  v18 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v18)
    MEMORY[0x212BB9B60](v18, 0x1000C40789AEA99);
  v19 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v19)
    MEMORY[0x212BB9B60](v19, 0x1000C4008BF3381);
  v20 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v20)
    MEMORY[0x212BB9B60](v20, 0x1000C40E458705ALL);
  v21 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v21)
    MEMORY[0x212BB9B60](v21, 0x1000C40313CD551);
  v22 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v22)
    MEMORY[0x212BB9B60](v22, 0x1000C40789AEA99);
  v23 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v23)
    MEMORY[0x212BB9B60](v23, 0x1000C4052888210);
  v24 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v24)
    MEMORY[0x212BB9B60](v24, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBISimTkTerminalResponse_SDK::~ARI_IBISimTkTerminalResponse_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBISimTkTerminalResponse_SDK::pack(AriSdk::ARI_IBISimTkTerminalResponse_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 8uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v8, 0x42CuLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v9, 0x42CuLL, 0), !(_DWORD)result))
          {
            v10 = (const void *)*((_QWORD *)this + 13);
            if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v10, 0x42CuLL, 0), !(_DWORD)result))
            {
              v11 = (const void *)*((_QWORD *)this + 14);
              if (!v11 || (result = AriMsg::pack(*((AriMsg **)this + 6), 7, v11, 8uLL, 0), !(_DWORD)result))
              {
                v12 = (const void *)*((_QWORD *)this + 15);
                if (!v12 || (result = AriMsg::pack(*((AriMsg **)this + 6), 8, v12, 8uLL, 0), !(_DWORD)result))
                {
                  v13 = (const void *)*((_QWORD *)this + 16);
                  if (!v13 || (result = AriMsg::pack(*((AriMsg **)this + 6), 9, v13, 8uLL, 0), !(_DWORD)result))
                  {
                    v14 = (const void *)*((_QWORD *)this + 17);
                    if (!v14 || (result = AriMsg::pack(*((AriMsg **)this + 6), 10, v14, 8uLL, 0), !(_DWORD)result))
                    {
                      v15 = (const void *)*((_QWORD *)this + 18);
                      if (!v15
                        || (result = AriMsg::pack(*((AriMsg **)this + 6), 11, v15, 0x10CuLL, 0), !(_DWORD)result))
                      {
                        v16 = (const void *)*((_QWORD *)this + 19);
                        if (!v16
                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 12, v16, 0x10CuLL, 0), !(_DWORD)result))
                        {
                          v17 = (const void *)*((_QWORD *)this + 20);
                          if (!v17
                            || (result = AriMsg::pack(*((AriMsg **)this + 6), 13, v17, 0xCuLL, 0), !(_DWORD)result))
                          {
                            v18 = (const void *)*((_QWORD *)this + 21);
                            if (!v18
                              || (result = AriMsg::pack(*((AriMsg **)this + 6), 14, v18, 8uLL, 0), !(_DWORD)result))
                            {
                              v19 = (const void *)*((_QWORD *)this + 22);
                              if (!v19
                                || (result = AriMsg::pack(*((AriMsg **)this + 6), 15, v19, 0x18uLL, 0), !(_DWORD)result))
                              {
                                v20 = (const void *)*((_QWORD *)this + 23);
                                if (!v20
                                  || (result = AriMsg::pack(*((AriMsg **)this + 6), 16, v20, 8uLL, 0), !(_DWORD)result))
                                {
                                  v21 = (const void *)*((_QWORD *)this + 24);
                                  if (!v21
                                    || (result = AriMsg::pack(*((AriMsg **)this + 6), 17, v21, 8uLL, 0),
                                        !(_DWORD)result))
                                  {
                                    v22 = (const void *)*((_QWORD *)this + 25);
                                    if (!v22
                                      || (result = AriMsg::pack(*((AriMsg **)this + 6), 18, v22, 0x108uLL, 0),
                                          !(_DWORD)result))
                                    {
                                      v23 = (const void *)*((_QWORD *)this + 26);
                                      if (!v23
                                        || (result = AriMsg::pack(*((AriMsg **)this + 6), 19, v23, 0x104uLL, 0),
                                            !(_DWORD)result))
                                      {
                                        v24 = (const void *)*((_QWORD *)this + 27);
                                        if (!v24
                                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 20, v24, 8uLL, 0),
                                              !(_DWORD)result))
                                        {
                                          v25 = (const void *)*((_QWORD *)this + 28);
                                          if (!v25
                                            || (result = AriMsg::pack(*((AriMsg **)this + 6), 21, v25, 8uLL, 0),
                                                !(_DWORD)result))
                                          {
                                            v26 = (const void *)*((_QWORD *)this + 29);
                                            if (!v26
                                              || (result = AriMsg::pack(*((AriMsg **)this + 6), 22, v26, 8uLL, 0),
                                                  !(_DWORD)result))
                                            {
                                              v27 = (const void *)*((_QWORD *)this + 30);
                                              if (!v27
                                                || (result = AriMsg::pack(*((AriMsg **)this + 6), 23, v27, 8uLL, 0),
                                                    !(_DWORD)result))
                                              {
                                                result = 0;
                                                *a2 = (AriMsg *)*((_QWORD *)this + 6);
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBISimTkTerminalResponse_SDK::unpack(AriSdk::ARI_IBISimTkTerminalResponse_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *v20;
  _OWORD *v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _OWORD *v27;
  _OWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  BOOL v34;

  v34 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v34, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v34;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v34 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v34, 0);
  if ((_DWORD)v3 || !v34)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v34 = 0;
  v6 = (_QWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 8, &v34, 0);
  if ((_DWORD)v3 || !v34)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C40789AEA99);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBICallPsUplinkBwEstimation>::operator=<IBICallPsUplinkBwEstimation&,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C40789AEA99);
  }
  v34 = 0;
  v7 = (void *)operator new();
  bzero(v7, 0x42CuLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v7, 1068, &v34, 0);
  if ((_DWORD)v3 || !v34)
  {
    MEMORY[0x212BB9B60](v7, 0x1000C40313CD551);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v8 = (void *)operator new();
    memcpy(v8, v7, 0x42CuLL);
    v9 = *((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v8;
    if (v9)
      MEMORY[0x212BB9B60](v9, 0x1000C40313CD551);
    MEMORY[0x212BB9B60](v7, 0x1000C40313CD551);
  }
  v34 = 0;
  v10 = (void *)operator new();
  bzero(v10, 0x42CuLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v10, 1068, &v34, 0);
  if ((_DWORD)v3 || !v34)
  {
    MEMORY[0x212BB9B60](v10, 0x1000C40E458705ALL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v11 = (void *)operator new();
    memcpy(v11, v10, 0x42CuLL);
    v12 = *((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = v11;
    if (v12)
      MEMORY[0x212BB9B60](v12, 0x1000C40E458705ALL);
    MEMORY[0x212BB9B60](v10, 0x1000C40E458705ALL);
  }
  v34 = 0;
  v13 = (void *)operator new();
  bzero(v13, 0x42CuLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v13, 1068, &v34, 0);
  if ((_DWORD)v3 || !v34)
  {
    MEMORY[0x212BB9B60](v13, 0x1000C4008BF3381);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v14 = (void *)operator new();
    memcpy(v14, v13, 0x42CuLL);
    v15 = *((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = v14;
    if (v15)
      MEMORY[0x212BB9B60](v15, 0x1000C4008BF3381);
    MEMORY[0x212BB9B60](v13, 0x1000C4008BF3381);
  }
  v34 = 0;
  v16 = (_QWORD *)operator new();
  *v16 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 7, v16, 8, &v34, 0);
  if ((_DWORD)v3 || !v34)
  {
    MEMORY[0x212BB9B60](v16, 0x1000C40789AEA99);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBICallPsUplinkBwEstimation>::operator=<IBICallPsUplinkBwEstimation&,void>((uint64_t *)this + 14, v16);
    MEMORY[0x212BB9B60](v16, 0x1000C40789AEA99);
  }
  v34 = 0;
  v17 = (_QWORD *)operator new();
  *v17 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 8, v17, 8, &v34, 0);
  if ((_DWORD)v3 || !v34)
  {
    MEMORY[0x212BB9B60](v17, 0x1000C40789AEA99);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBICallPsUplinkBwEstimation>::operator=<IBICallPsUplinkBwEstimation&,void>((uint64_t *)this + 15, v17);
    MEMORY[0x212BB9B60](v17, 0x1000C40789AEA99);
  }
  v34 = 0;
  v18 = (_QWORD *)operator new();
  *v18 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 9, v18, 8, &v34, 0);
  if ((_DWORD)v3 || !v34)
  {
    MEMORY[0x212BB9B60](v18, 0x1000C40789AEA99);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBICallPsUplinkBwEstimation>::operator=<IBICallPsUplinkBwEstimation&,void>((uint64_t *)this + 16, v18);
    MEMORY[0x212BB9B60](v18, 0x1000C40789AEA99);
  }
  v34 = 0;
  v19 = (_QWORD *)operator new();
  *v19 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 10, v19, 8, &v34, 0);
  if ((_DWORD)v3 || !v34)
  {
    MEMORY[0x212BB9B60](v19, 0x1000C40789AEA99);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBICallPsUplinkBwEstimation>::operator=<IBICallPsUplinkBwEstimation&,void>((uint64_t *)this + 17, v19);
    MEMORY[0x212BB9B60](v19, 0x1000C40789AEA99);
  }
  v34 = 0;
  v20 = (_OWORD *)operator new();
  *v20 = 0u;
  v20[1] = 0u;
  v20[2] = 0u;
  v20[3] = 0u;
  v20[4] = 0u;
  v20[5] = 0u;
  v20[6] = 0u;
  v20[7] = 0u;
  v20[8] = 0u;
  v20[9] = 0u;
  v20[10] = 0u;
  v20[11] = 0u;
  v20[12] = 0u;
  v20[13] = 0u;
  v20[14] = 0u;
  v20[15] = 0u;
  *(_OWORD *)((char *)v20 + 252) = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 11, v20, 268, &v34, 0);
  if ((_DWORD)v3 || !v34)
  {
    MEMORY[0x212BB9B60](v20, 0x1000C4082D414CFLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBISimTkGetInkeyRspParam>::operator=<IBISimTkGetInkeyRspParam&,void>((uint64_t *)this + 18, v20);
    MEMORY[0x212BB9B60](v20, 0x1000C4082D414CFLL);
  }
  v34 = 0;
  v21 = (_OWORD *)operator new();
  *v21 = 0u;
  v21[1] = 0u;
  v21[2] = 0u;
  v21[3] = 0u;
  v21[4] = 0u;
  v21[5] = 0u;
  v21[6] = 0u;
  v21[7] = 0u;
  v21[8] = 0u;
  v21[9] = 0u;
  v21[10] = 0u;
  v21[11] = 0u;
  v21[12] = 0u;
  v21[13] = 0u;
  v21[14] = 0u;
  v21[15] = 0u;
  *(_OWORD *)((char *)v21 + 252) = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 12, v21, 268, &v34, 0);
  if ((_DWORD)v3 || !v34)
  {
    MEMORY[0x212BB9B60](v21, 0x1000C4082D414CFLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBISimTkGetInkeyRspParam>::operator=<IBISimTkGetInkeyRspParam&,void>((uint64_t *)this + 19, v21);
    MEMORY[0x212BB9B60](v21, 0x1000C4082D414CFLL);
  }
  v34 = 0;
  v22 = (_DWORD *)operator new();
  *(_QWORD *)v22 = 0;
  v22[2] = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 13, v22, 12, &v34, 0);
  if ((_DWORD)v3 || !v34)
  {
    MEMORY[0x212BB9B60](v22, 0x1000C40FFE2888BLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBISimTkSelectItemRspParam>::operator=<IBISimTkSelectItemRspParam&,void>((uint64_t *)this + 20, (uint64_t)v22);
    MEMORY[0x212BB9B60](v22, 0x1000C40FFE2888BLL);
  }
  v34 = 0;
  v23 = (_QWORD *)operator new();
  *v23 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 14, v23, 8, &v34, 0);
  if ((_DWORD)v3 || !v34)
  {
    MEMORY[0x212BB9B60](v23, 0x1000C40789AEA99);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBICallPsUplinkBwEstimation>::operator=<IBICallPsUplinkBwEstimation&,void>((uint64_t *)this + 21, v23);
    MEMORY[0x212BB9B60](v23, 0x1000C40789AEA99);
  }
  v34 = 0;
  v24 = (_QWORD *)operator new();
  v24[1] = 0;
  v24[2] = 0;
  *v24 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 15, v24, 24, &v34, 0);
  if ((_DWORD)v3 || !v34)
  {
    MEMORY[0x212BB9B60](v24, 0x1000C4042B6F12DLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBISimTkProvideLocalInfoRspParam>::operator=<IBISimTkProvideLocalInfoRspParam&,void>((uint64_t *)this + 22, (uint64_t)v24);
    MEMORY[0x212BB9B60](v24, 0x1000C4042B6F12DLL);
  }
  v34 = 0;
  v25 = (_QWORD *)operator new();
  *v25 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 16, v25, 8, &v34, 0);
  if ((_DWORD)v3 || !v34)
  {
    MEMORY[0x212BB9B60](v25, 0x1000C40789AEA99);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBICallPsUplinkBwEstimation>::operator=<IBICallPsUplinkBwEstimation&,void>((uint64_t *)this + 23, v25);
    MEMORY[0x212BB9B60](v25, 0x1000C40789AEA99);
  }
  v34 = 0;
  v26 = (_QWORD *)operator new();
  *v26 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 17, v26, 8, &v34, 0);
  if ((_DWORD)v3 || !v34)
  {
    MEMORY[0x212BB9B60](v26, 0x1000C40789AEA99);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBICallPsUplinkBwEstimation>::operator=<IBICallPsUplinkBwEstimation&,void>((uint64_t *)this + 24, v26);
    MEMORY[0x212BB9B60](v26, 0x1000C40789AEA99);
  }
  v34 = 0;
  v27 = (_OWORD *)operator new();
  *v27 = 0u;
  v27[1] = 0u;
  v27[2] = 0u;
  v27[3] = 0u;
  v27[4] = 0u;
  v27[5] = 0u;
  v27[6] = 0u;
  v27[7] = 0u;
  v27[8] = 0u;
  v27[9] = 0u;
  v27[10] = 0u;
  v27[11] = 0u;
  v27[12] = 0u;
  v27[13] = 0u;
  v27[14] = 0u;
  v27[15] = 0u;
  *((_QWORD *)v27 + 32) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 18, v27, 264, &v34, 0);
  if ((_DWORD)v3 || !v34)
  {
    MEMORY[0x212BB9B60](v27, 0x1000C401C9B0B8BLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBISimTkRunAtCommandRspParam>::operator=<IBISimTkRunAtCommandRspParam&,void>((uint64_t *)this + 25, v27);
    MEMORY[0x212BB9B60](v27, 0x1000C401C9B0B8BLL);
  }
  v34 = 0;
  v28 = (_OWORD *)operator new();
  *v28 = 0u;
  v28[1] = 0u;
  v28[2] = 0u;
  v28[3] = 0u;
  v28[4] = 0u;
  v28[5] = 0u;
  v28[6] = 0u;
  v28[7] = 0u;
  v28[8] = 0u;
  v28[9] = 0u;
  v28[10] = 0u;
  v28[11] = 0u;
  v28[12] = 0u;
  v28[13] = 0u;
  v28[14] = 0u;
  v28[15] = 0u;
  *((_DWORD *)v28 + 64) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 19, v28, 260, &v34, 0);
  if ((_DWORD)v3 || !v34)
  {
    MEMORY[0x212BB9B60](v28, 0x1000C408757D331);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBICdmaTpduData>::operator=<IBICdmaTpduData&,void>((uint64_t *)this + 26, v28);
    MEMORY[0x212BB9B60](v28, 0x1000C408757D331);
  }
  v34 = 0;
  v29 = (_QWORD *)operator new();
  *v29 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 20, v29, 8, &v34, 0);
  if ((_DWORD)v3 || !v34)
  {
    MEMORY[0x212BB9B60](v29, 0x1000C40789AEA99);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBICallPsUplinkBwEstimation>::operator=<IBICallPsUplinkBwEstimation&,void>((uint64_t *)this + 27, v29);
    MEMORY[0x212BB9B60](v29, 0x1000C40789AEA99);
  }
  v34 = 0;
  v30 = (_QWORD *)operator new();
  *v30 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 21, v30, 8, &v34, 0);
  if ((_DWORD)v3 || !v34)
  {
    MEMORY[0x212BB9B60](v30, 0x1000C40789AEA99);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBICallPsUplinkBwEstimation>::operator=<IBICallPsUplinkBwEstimation&,void>((uint64_t *)this + 28, v30);
    MEMORY[0x212BB9B60](v30, 0x1000C40789AEA99);
  }
  v34 = 0;
  v31 = (_QWORD *)operator new();
  *v31 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 22, v31, 8, &v34, 0);
  if ((_DWORD)v3 || !v34)
  {
    MEMORY[0x212BB9B60](v31, 0x1000C40789AEA99);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBICallPsUplinkBwEstimation>::operator=<IBICallPsUplinkBwEstimation&,void>((uint64_t *)this + 29, v31);
    MEMORY[0x212BB9B60](v31, 0x1000C40789AEA99);
  }
  v34 = 0;
  v32 = (_QWORD *)operator new();
  *v32 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 23, v32, 8, &v34, 0);
  if (!(_DWORD)v3 && v34)
    AriSdk::Tlv<IBICallPsUplinkBwEstimation>::operator=<IBICallPsUplinkBwEstimation&,void>((uint64_t *)this + 30, v32);
  MEMORY[0x212BB9B60](v32, 0x1000C40789AEA99);
  return v3;
}

void sub_20E266DF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C40789AEA99);
  _Unwind_Resume(a1);
}

uint64_t *AriSdk::Tlv<IBISimTkGetInkeyRspParam>::operator=<IBISimTkGetInkeyRspParam&,void>(uint64_t *a1, const void *a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)operator new();
  memcpy(v4, a2, 0x10CuLL);
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4082D414CFLL);
  return a1;
}

uint64_t *AriSdk::Tlv<IBISimTkSelectItemRspParam>::operator=<IBISimTkSelectItemRspParam&,void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = operator new();
  *(_QWORD *)v4 = *(_QWORD *)a2;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
  v5 = *a1;
  *a1 = v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40FFE2888BLL);
  return a1;
}

uint64_t *AriSdk::Tlv<IBISimTkProvideLocalInfoRspParam>::operator=<IBISimTkProvideLocalInfoRspParam&,void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = operator new();
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *a1;
  *a1 = v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4042B6F12DLL);
  return a1;
}

uint64_t *AriSdk::Tlv<IBISimTkRunAtCommandRspParam>::operator=<IBISimTkRunAtCommandRspParam&,void>(uint64_t *a1, const void *a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)operator new();
  memcpy(v4, a2, 0x108uLL);
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C401C9B0B8BLL);
  return a1;
}

BOOL AriSdk::ARI_IBISimTkTerminalResponse_SDK::hasDeclaredGmid(AriSdk::ARI_IBISimTkTerminalResponse_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 881131520;
}

_QWORD *std::vector<IBISimTkFileIdentifier>::__init_with_size[abi:ne180100]<IBISimTkFileIdentifier*,IBISimTkFileIdentifier*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v7 = result;
    result = operator new(21 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + 21 * a4;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_20E2671B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ARI_IBISimAccessAppType_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimAccessAppType_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkAddress_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkAddress_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkAlphaIdentifier_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkAlphaIdentifier_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkCallControlParam_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkCallControlParam_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkCallControlResult_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkCallControlResult_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkCommonRspParam_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkCommonRspParam_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkDtmfString_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkDtmfString_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkEnvelopeRsp_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkEnvelopeRsp_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkEnvelopeType_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkEnvelopeType_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkFileIdentifier_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkFileIdentifier_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkGetInkeyRspParam_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkGetInkeyRspParam_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkGetInputRspParam_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkGetInputRspParam_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkImsCcData_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkImsCcData_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkImsRegistrationStatus_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkImsRegistrationStatus_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkLocationInfo_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkLocationInfo_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCause_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCause_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdCloseChannel_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdCloseChannel_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdDisplayText_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdDisplayText_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdGetInkey_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdGetInkey_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdGetInput_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdGetInput_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdGetInput_V1_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdGetInput_V1_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdHandler_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdHandler_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdLanguageNotification_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdLanguageNotification_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdOpenChannel_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdOpenChannel_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdPlayTone_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdPlayTone_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdProvideLocalInfo_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdProvideLocalInfo_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdReceiveData_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdReceiveData_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdRunAt_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdRunAt_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdSelectItem_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdSelectItem_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdSelectItem_V1_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdSelectItem_V1_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdSendData_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdSendData_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdSendDtmf_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdSendDtmf_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdSendSms_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdSendSms_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdSendSms_V1_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdSendSms_V1_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdSendSs_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdSendSs_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdSendUssd_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdSendUssd_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdSetupCall_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdSetupCall_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdSetupEventList_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdSetupEventList_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdSetupIdleModeText_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdSetupIdleModeText_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdSetupMenu_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdSetupMenu_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdSetupMenu_V1_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdSetupMenu_V1_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdType_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdType_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdUnknown_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProactiveCmdUnknown_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProvideLocalInfoRspParam_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkProvideLocalInfoRspParam_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkRunAtCommandRspParam_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkRunAtCommandRspParam_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkSelectItemRspParam_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkSelectItemRspParam_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkSendSsRspParam_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkSendSsRspParam_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkSendUssdRspParam_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkSendUssdRspParam_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkSetupCallRspParam_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkSetupCallRspParam_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkSsString_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkSsString_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkSubAddress_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkSubAddress_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkTransactionId_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkTransactionId_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkUnknownCmdRsp_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkUnknownCmdRsp_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkUssdString_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISimTkUssdString_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_ARIAppId_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_ARIAppId_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiIceIpcLogBufferList_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiIceIpcLogBufferList_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CSI_FP_RESULT_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CSI_FP_RESULT_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CSI_ICE_AT_RESULT_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CSI_ICE_AT_RESULT_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CSI_ICE_MON_MEMORY_INFO_T_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CSI_ICE_MON_MEMORY_INFO_T_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiBspNvmGroupDataType_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiBspNvmGroupDataType_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiCddDumpLogInfo_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiCddDumpLogInfo_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiCddParamDumpInfo_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiCddParamDumpInfo_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiFlashPluginHeader_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiFlashPluginHeader_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiFlashPluginStatusAll_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiFlashPluginStatusAll_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiFlashPluginStatusAll_V2_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiFlashPluginStatusAll_V2_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiIceAtExtStringPayload_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiIceAtExtStringPayload_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiIceAtStringPayload_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiIceAtStringPayload_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiIceFilerDataParam_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiIceFilerDataParam_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiSahCrashReportInfo_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiSahCrashReportInfo_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiSahDebugLogInfo_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiSahDebugLogInfo_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_FACTORY_NV_ITEM_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_FACTORY_NV_ITEM_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIFilerHSClientId_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIFilerHSClientId_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIFilerHSResult_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIFilerHSResult_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIFilerHSSessionFiles_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIFilerHSSessionFiles_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_ODTT_STATE_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_ODTT_STATE_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_OdttCaseResultDictData_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_OdttCaseResultDictData_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_UtaFlashPluginTrigger_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_UtaFlashPluginTrigger_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_UtaNvmDataType_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_UtaNvmDataType_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsCallId_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsCallId_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsEccValue_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsEccValue_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsType_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsType_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsVoimsANBRDirection_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsVoimsANBRDirection_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsVoimsCallStatusParam_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsVoimsCallStatusParam_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsVoimsMMTelSessionStatus_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsVoimsMMTelSessionStatus_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsVoimsMMTelSessionType_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsVoimsMMTelSessionType_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsVoimsRetryCause_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsVoimsRetryCause_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsVoimsSessionInfo_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsVoimsSessionInfo_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsVoimsSessionTransferResult_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsVoimsSessionTransferResult_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsVoimsSrvccHoStatus_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsVoimsSrvccHoStatus_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_eTracePrivacyRedactValue_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_eTracePrivacyRedactValue_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

double AriSdk::ARI_IBIImsMEConfigureAudioMediaReq_SDK::ARI_IBIImsMEConfigureAudioMediaReq_SDK(AriSdk::ARI_IBIImsMEConfigureAudioMediaReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x44840000u, 0);
  *(_QWORD *)v1 = &off_24C90E400;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  *((_OWORD *)v1 + 11) = 0u;
  *((_OWORD *)v1 + 12) = 0u;
  *((_OWORD *)v1 + 13) = 0u;
  *((_OWORD *)v1 + 14) = 0u;
  *((_OWORD *)v1 + 15) = 0u;
  *((_OWORD *)v1 + 16) = 0u;
  *((_OWORD *)v1 + 17) = 0u;
  *((_OWORD *)v1 + 18) = 0u;
  *((_OWORD *)v1 + 19) = 0u;
  *((_OWORD *)v1 + 20) = 0u;
  *((_OWORD *)v1 + 21) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x44840000u, 0);
  *(_QWORD *)v1 = &off_24C90E400;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  *((_OWORD *)v1 + 11) = 0u;
  *((_OWORD *)v1 + 12) = 0u;
  *((_OWORD *)v1 + 13) = 0u;
  *((_OWORD *)v1 + 14) = 0u;
  *((_OWORD *)v1 + 15) = 0u;
  *((_OWORD *)v1 + 16) = 0u;
  *((_OWORD *)v1 + 17) = 0u;
  *((_OWORD *)v1 + 18) = 0u;
  *((_OWORD *)v1 + 19) = 0u;
  *((_OWORD *)v1 + 20) = 0u;
  *((_OWORD *)v1 + 21) = 0u;
  return result;
}

double AriSdk::ARI_IBIImsMEConfigureAudioMediaReq_SDK::ARI_IBIImsMEConfigureAudioMediaReq_SDK(AriSdk::ARI_IBIImsMEConfigureAudioMediaReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C90E400;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 13) = 0u;
  *((_OWORD *)v3 + 14) = 0u;
  *((_OWORD *)v3 + 15) = 0u;
  *((_OWORD *)v3 + 16) = 0u;
  *((_OWORD *)v3 + 17) = 0u;
  *((_OWORD *)v3 + 18) = 0u;
  *((_OWORD *)v3 + 19) = 0u;
  *((_OWORD *)v3 + 20) = 0u;
  *((_OWORD *)v3 + 21) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C90E400;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 13) = 0u;
  *((_OWORD *)v3 + 14) = 0u;
  *((_OWORD *)v3 + 15) = 0u;
  *((_OWORD *)v3 + 16) = 0u;
  *((_OWORD *)v3 + 17) = 0u;
  *((_OWORD *)v3 + 18) = 0u;
  *((_OWORD *)v3 + 19) = 0u;
  *((_OWORD *)v3 + 20) = 0u;
  *((_OWORD *)v3 + 21) = 0u;
  return result;
}

void AriSdk::ARI_IBIImsMEConfigureAudioMediaReq_SDK::~ARI_IBIImsMEConfigureAudioMediaReq_SDK(AriSdk::ARI_IBIImsMEConfigureAudioMediaReq_SDK *this)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)this = &off_24C90E400;
  v2 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = (void *)*((_QWORD *)this + 40);
  if (v3)
  {
    *((_QWORD *)this + 41) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 37);
  if (v4)
  {
    *((_QWORD *)this + 38) = v4;
    operator delete(v4);
  }
  v5 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40BDFB0063);
  v6 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C405D080610);
  v7 = (void *)*((_QWORD *)this + 32);
  if (v7)
  {
    *((_QWORD *)this + 33) = v7;
    operator delete(v7);
  }
  v8 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v8)
    MEMORY[0x212BB9B60](v8, 0x1000C4077774924);
  v9 = (void *)*((_QWORD *)this + 28);
  if (v9)
  {
    *((_QWORD *)this + 29) = v9;
    operator delete(v9);
  }
  v10 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v10)
    MEMORY[0x212BB9B60](v10, 0x1000C4077774924);
  v11 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v11)
    MEMORY[0x212BB9B60](v11, 0x1000C40CBA68D63);
  v12 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v12)
    MEMORY[0x212BB9B60](v12, 0x1000C4005A209FELL);
  v13 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v13)
    MEMORY[0x212BB9B60](v13, 0x1000C40B6EABFF7);
  v14 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v14)
    MEMORY[0x212BB9B60](v14, 0x1000C4052888210);
  v15 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v15)
    MEMORY[0x212BB9B60](v15, 0x1000C4052888210);
  v16 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v16)
    MEMORY[0x212BB9B60](v16, 0x1000C40BDFB0063);
  v17 = (void *)*((_QWORD *)this + 18);
  if (v17)
  {
    *((_QWORD *)this + 19) = v17;
    operator delete(v17);
  }
  v18 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v18)
    MEMORY[0x212BB9B60](v18, 0x1000C4077774924);
  v19 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v19)
    MEMORY[0x212BB9B60](v19, 0x1000C4052888210);
  v20 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v20)
    MEMORY[0x212BB9B60](v20, 0x1000C4077774924);
  v21 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v21)
    MEMORY[0x212BB9B60](v21, 0x1000C4077774924);
  v22 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v22)
    MEMORY[0x212BB9B60](v22, 0x1000C40BDFB0063);
  v23 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v23)
    MEMORY[0x212BB9B60](v23, 0x1000C40BDFB0063);
  v24 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v24)
    MEMORY[0x212BB9B60](v24, 0x1000C4052888210);
  v25 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v25)
    MEMORY[0x212BB9B60](v25, 0x1000C40BDFB0063);
  v26 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v26)
    MEMORY[0x212BB9B60](v26, 0x1000C4052888210);
  v27 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v27)
    MEMORY[0x212BB9B60](v27, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIImsMEConfigureAudioMediaReq_SDK::~ARI_IBIImsMEConfigureAudioMediaReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIImsMEConfigureAudioMediaReq_SDK::pack(AriSdk::ARI_IBIImsMEConfigureAudioMediaReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  _BYTE *v15;
  _BYTE *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  _BYTE *v24;
  _BYTE *v25;
  const void *v26;
  _BYTE *v27;
  _BYTE *v28;
  const void *v29;
  const void *v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  const void *v35;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v7, 2uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v8, 4uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 7, v9, 2uLL, 0), !(_DWORD)result))
          {
            v10 = (const void *)*((_QWORD *)this + 13);
            if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 8, v10, 2uLL, 0), !(_DWORD)result))
            {
              v11 = (const void *)*((_QWORD *)this + 14);
              if (!v11 || (result = AriMsg::pack(*((AriMsg **)this + 6), 11, v11, 1uLL, 0), !(_DWORD)result))
              {
                v12 = (const void *)*((_QWORD *)this + 15);
                if (!v12 || (result = AriMsg::pack(*((AriMsg **)this + 6), 12, v12, 1uLL, 0), !(_DWORD)result))
                {
                  v13 = (const void *)*((_QWORD *)this + 16);
                  if (!v13 || (result = AriMsg::pack(*((AriMsg **)this + 6), 13, v13, 4uLL, 0), !(_DWORD)result))
                  {
                    v14 = (const void *)*((_QWORD *)this + 17);
                    if (!v14 || (result = AriMsg::pack(*((AriMsg **)this + 6), 14, v14, 1uLL, 0), !(_DWORD)result))
                    {
                      v15 = (_BYTE *)*((_QWORD *)this + 18);
                      if (!v15
                        || (v16 = (_BYTE *)*((_QWORD *)this + 19), v15 == v16)
                        || (result = AriMsg::pack(*((AriMsg **)this + 6), 15, v15, v16 - v15, 0), !(_DWORD)result))
                      {
                        v17 = (const void *)*((_QWORD *)this + 21);
                        if (!v17
                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 16, v17, 2uLL, 0), !(_DWORD)result))
                        {
                          v18 = (const void *)*((_QWORD *)this + 22);
                          if (!v18
                            || (result = AriMsg::pack(*((AriMsg **)this + 6), 17, v18, 4uLL, 0), !(_DWORD)result))
                          {
                            v19 = (const void *)*((_QWORD *)this + 23);
                            if (!v19
                              || (result = AriMsg::pack(*((AriMsg **)this + 6), 18, v19, 4uLL, 0), !(_DWORD)result))
                            {
                              v20 = (const void *)*((_QWORD *)this + 24);
                              if (!v20
                                || (result = AriMsg::pack(*((AriMsg **)this + 6), 19, v20, 0x11CuLL, 0),
                                    !(_DWORD)result))
                              {
                                v21 = (const void *)*((_QWORD *)this + 25);
                                if (!v21
                                  || (result = AriMsg::pack(*((AriMsg **)this + 6), 20, v21, 0xCuLL, 0),
                                      !(_DWORD)result))
                                {
                                  v22 = (const void *)*((_QWORD *)this + 26);
                                  if (!v22
                                    || (result = AriMsg::pack(*((AriMsg **)this + 6), 21, v22, 0xCuLL, 0),
                                        !(_DWORD)result))
                                  {
                                    v23 = (const void *)*((_QWORD *)this + 27);
                                    if (!v23
                                      || (result = AriMsg::pack(*((AriMsg **)this + 6), 22, v23, 1uLL, 0),
                                          !(_DWORD)result))
                                    {
                                      v24 = (_BYTE *)*((_QWORD *)this + 28);
                                      if (!v24
                                        || (v25 = (_BYTE *)*((_QWORD *)this + 29), v24 == v25)
                                        || (result = AriMsg::pack(*((AriMsg **)this + 6), 23, v24, v25 - v24, 0),
                                            !(_DWORD)result))
                                      {
                                        v26 = (const void *)*((_QWORD *)this + 31);
                                        if (!v26
                                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 24, v26, 1uLL, 0),
                                              !(_DWORD)result))
                                        {
                                          v27 = (_BYTE *)*((_QWORD *)this + 32);
                                          if (!v27
                                            || (v28 = (_BYTE *)*((_QWORD *)this + 33), v27 == v28)
                                            || (result = AriMsg::pack(*((AriMsg **)this + 6), 25, v27, v28 - v27, 0),
                                                !(_DWORD)result))
                                          {
                                            v29 = (const void *)*((_QWORD *)this + 35);
                                            if (!v29
                                              || (result = AriMsg::pack(*((AriMsg **)this + 6), 26, v29, 6uLL, 0),
                                                  !(_DWORD)result))
                                            {
                                              v30 = (const void *)*((_QWORD *)this + 36);
                                              if (!v30
                                                || (result = AriMsg::pack(*((AriMsg **)this + 6), 27, v30, 2uLL, 0),
                                                    !(_DWORD)result))
                                              {
                                                v31 = (_BYTE *)*((_QWORD *)this + 37);
                                                if (!v31
                                                  || (v32 = (_BYTE *)*((_QWORD *)this + 38), v31 == v32)
                                                  || (result = AriMsg::pack(*((AriMsg **)this + 6), 28, v31, v32 - v31, 0), !(_DWORD)result))
                                                {
                                                  v33 = (_BYTE *)*((_QWORD *)this + 40);
                                                  if (!v33
                                                    || (v34 = (_BYTE *)*((_QWORD *)this + 41), v33 == v34)
                                                    || (result = AriMsg::pack(*((AriMsg **)this + 6), 29, v33, v34 - v33, 0), !(_DWORD)result))
                                                  {
                                                    v35 = (const void *)*((_QWORD *)this + 43);
                                                    if (!v35
                                                      || (result = AriMsg::pack(*((AriMsg **)this + 6), 30, v35, 4uLL, 0), !(_DWORD)result))
                                                    {
                                                      result = 0;
                                                      *a2 = (AriMsg *)*((_QWORD *)this + 6);
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIImsMEConfigureAudioMediaReq_SDK::unpack(AriSdk::ARI_IBIImsMEConfigureAudioMediaReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _WORD *v6;
  _DWORD *v7;
  _WORD *v8;
  _WORD *v9;
  _BYTE *v10;
  _BYTE *v11;
  _DWORD *v12;
  _BYTE *v13;
  _QWORD *v14;
  _WORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _OWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _BYTE *v21;
  _OWORD *v22;
  _BYTE *v23;
  _OWORD *v24;
  _WORD *v25;
  _WORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _DWORD *v29;
  __n128 __p;
  uint64_t v32;
  size_t __sz;
  BOOL v34;

  __p.n128_u8[0] = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v2, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = __p.n128_u8[0] == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v5, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v6 = (_WORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v6, 2, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v6, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C40BDFB0063);
  }
  __p.n128_u8[0] = 0;
  v7 = (_DWORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v7, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 11, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v8 = (_WORD *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 7, v8, 2, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v8, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 12, v8);
    MEMORY[0x212BB9B60](v8, 0x1000C40BDFB0063);
  }
  __p.n128_u8[0] = 0;
  v9 = (_WORD *)operator new();
  *v9 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 8, v9, 2, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v9, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 13, v9);
    MEMORY[0x212BB9B60](v9, 0x1000C40BDFB0063);
  }
  __p.n128_u8[0] = 0;
  v10 = (_BYTE *)operator new();
  *v10 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 11, v10, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v10, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 14, v10);
    MEMORY[0x212BB9B60](v10, 0x1000C4077774924);
  }
  __p.n128_u8[0] = 0;
  v11 = (_BYTE *)operator new();
  *v11 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 12, v11, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v11, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 15, v11);
    MEMORY[0x212BB9B60](v11, 0x1000C4077774924);
  }
  __p.n128_u8[0] = 0;
  v12 = (_DWORD *)operator new();
  *v12 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 13, v12, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v12, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 16, v12);
    MEMORY[0x212BB9B60](v12, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v13 = (_BYTE *)operator new();
  *v13 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 14, v13, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v13, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 17, v13);
    MEMORY[0x212BB9B60](v13, 0x1000C4077774924);
  }
  v34 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v14 = (_QWORD *)operator new[]();
  *v14 = 0;
  v14[1] = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 15, v14, 16, &v34, &__sz);
  if ((_DWORD)v3 || !v34)
  {
    MEMORY[0x212BB9B48](v14, 0x1000C8077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v32 = 0;
    __p = 0uLL;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v14, (uint64_t)v14 + __sz, __sz);
    AriSdk::TlvArray<unsigned char,16ul>::operator=((std::vector<int> *)this + 6, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    MEMORY[0x212BB9B48](v14, 0x1000C8077774924);
  }
  __p.n128_u8[0] = 0;
  v15 = (_WORD *)operator new();
  *v15 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 16, v15, 2, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v15, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 21, v15);
    MEMORY[0x212BB9B60](v15, 0x1000C40BDFB0063);
  }
  __p.n128_u8[0] = 0;
  v16 = (_DWORD *)operator new();
  *v16 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 17, v16, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v16, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 22, v16);
    MEMORY[0x212BB9B60](v16, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v17 = (_DWORD *)operator new();
  *v17 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 18, v17, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v17, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 23, v17);
    MEMORY[0x212BB9B60](v17, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v18 = (_OWORD *)operator new();
  *v18 = 0u;
  v18[1] = 0u;
  v18[2] = 0u;
  v18[3] = 0u;
  v18[4] = 0u;
  v18[5] = 0u;
  v18[6] = 0u;
  v18[7] = 0u;
  v18[8] = 0u;
  v18[9] = 0u;
  v18[10] = 0u;
  v18[11] = 0u;
  v18[12] = 0u;
  v18[13] = 0u;
  v18[14] = 0u;
  v18[15] = 0u;
  v18[16] = 0u;
  *(_OWORD *)((char *)v18 + 268) = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 19, v18, 284, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v18, 0x1000C40B6EABFF7);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBIImsMERtcpProfile>::operator=<IBIImsMERtcpProfile&,void>((uint64_t *)this + 24, v18);
    MEMORY[0x212BB9B60](v18, 0x1000C40B6EABFF7);
  }
  __p.n128_u8[0] = 0;
  v19 = (_DWORD *)operator new();
  *(_QWORD *)v19 = 0;
  v19[2] = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 20, v19, 12, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v19, 0x1000C4005A209FELL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBICallPsNr5gNeighborCellInfo>::operator=<IBICallPsNr5gNeighborCellInfo&,void>((uint64_t *)this + 25, (uint64_t)v19);
    MEMORY[0x212BB9B60](v19, 0x1000C4005A209FELL);
  }
  __p.n128_u8[0] = 0;
  v20 = (_DWORD *)operator new();
  *(_QWORD *)v20 = 0;
  v20[2] = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 21, v20, 12, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v20, 0x1000C40CBA68D63);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBIImsMERtpInfo>::operator=<IBIImsMERtpInfo&,void>((uint64_t *)this + 26, (uint64_t)v20);
    MEMORY[0x212BB9B60](v20, 0x1000C40CBA68D63);
  }
  __p.n128_u8[0] = 0;
  v21 = (_BYTE *)operator new();
  *v21 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 22, v21, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v21, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 27, v21);
    MEMORY[0x212BB9B60](v21, 0x1000C4077774924);
  }
  v34 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v22 = (_OWORD *)operator new[]();
  *v22 = 0u;
  v22[1] = 0u;
  v22[2] = 0u;
  v22[3] = 0u;
  v22[4] = 0u;
  v22[5] = 0u;
  v22[6] = 0u;
  v22[7] = 0u;
  v22[8] = 0u;
  v22[9] = 0u;
  v22[10] = 0u;
  v22[11] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 23, v22, 192, &v34, &__sz);
  if ((_DWORD)v3 || !v34)
  {
    MEMORY[0x212BB9B48](v22, 0x1000C80B7A2AEF0);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v32 = 0;
    __p = 0uLL;
    std::vector<IBIImsMEAudioCodec>::__init_with_size[abi:ne180100]<IBIImsMEAudioCodec*,IBIImsMEAudioCodec*>(&__p, v22, (uint64_t)&v22[3 * (__sz / 0x30)], __sz / 0x30);
    AriSdk::TlvArray<IBIImsMEAudioCodec,4ul>::operator=((uint64_t)this + 224, (uint64_t *)&__p);
    if (__p.n128_u64[0])
      operator delete((void *)__p.n128_u64[0]);
    MEMORY[0x212BB9B48](v22, 0x1000C80B7A2AEF0);
  }
  __p.n128_u8[0] = 0;
  v23 = (_BYTE *)operator new();
  *v23 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 24, v23, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v23, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 31, v23);
    MEMORY[0x212BB9B60](v23, 0x1000C4077774924);
  }
  v34 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v24 = (_OWORD *)operator new[]();
  *v24 = 0u;
  v24[1] = 0u;
  v24[2] = 0u;
  v24[3] = 0u;
  v24[4] = 0u;
  v24[5] = 0u;
  v24[6] = 0u;
  v24[7] = 0u;
  v24[8] = 0u;
  v24[9] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 25, v24, 160, &v34, &__sz);
  if ((_DWORD)v3 || !v34)
  {
    MEMORY[0x212BB9B48](v24, 0x1000C806C901D0CLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v32 = 0;
    __p = 0uLL;
    std::vector<IBIImsMEAudioEVSCodec>::__init_with_size[abi:ne180100]<IBIImsMEAudioEVSCodec*,IBIImsMEAudioEVSCodec*>(&__p, v24, (uint64_t)&v24[5 * (__sz / 0x50)], __sz / 0x50);
    AriSdk::TlvArray<IBIImsMEAudioEVSCodec,2ul>::operator=((uint64_t)this + 256, (uint64_t *)&__p);
    if (__p.n128_u64[0])
      operator delete((void *)__p.n128_u64[0]);
    MEMORY[0x212BB9B48](v24, 0x1000C806C901D0CLL);
  }
  __p.n128_u8[0] = 0;
  v25 = (_WORD *)operator new();
  *(_DWORD *)v25 = 0;
  v25[2] = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 26, v25, 6, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v25, 0x1000C405D080610);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBIImsMEEvsPrimaryCMR>::operator=<IBIImsMEEvsPrimaryCMR&,void>((uint64_t *)this + 35, (uint64_t)v25);
    MEMORY[0x212BB9B60](v25, 0x1000C405D080610);
  }
  __p.n128_u8[0] = 0;
  v26 = (_WORD *)operator new();
  *v26 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 27, v26, 2, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v26, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 36, v26);
    MEMORY[0x212BB9B60](v26, 0x1000C40BDFB0063);
  }
  v34 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v27 = (_QWORD *)operator new[]();
  *v27 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 28, v27, 8, &v34, &__sz);
  if ((_DWORD)v3 || !v34)
  {
    MEMORY[0x212BB9B48](v27, 0x1000C8052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v32 = 0;
    __p = 0uLL;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v27, (uint64_t)v27 + 4 * (__sz >> 2), __sz >> 2);
    AriSdk::TlvArray<unsigned int,2ul>::operator=((std::vector<int> *)((char *)this + 296), &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    MEMORY[0x212BB9B48](v27, 0x1000C8052888210);
  }
  v34 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v28 = (_QWORD *)operator new[]();
  *v28 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 29, v28, 8, &v34, &__sz);
  if ((_DWORD)v3 || !v34)
  {
    MEMORY[0x212BB9B48](v28, 0x1000C8052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v32 = 0;
    __p = 0uLL;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v28, (uint64_t)v28 + 4 * (__sz >> 2), __sz >> 2);
    AriSdk::TlvArray<unsigned int,2ul>::operator=((std::vector<int> *)((char *)this + 320), &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    MEMORY[0x212BB9B48](v28, 0x1000C8052888210);
  }
  __p.n128_u8[0] = 0;
  v29 = (_DWORD *)operator new();
  *v29 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 30, v29, 4, (BOOL *)&__p, 0);
  if (!(_DWORD)v3 && __p.n128_u8[0])
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 43, v29);
  MEMORY[0x212BB9B60](v29, 0x1000C4052888210);
  return v3;
}

void sub_20E269E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

uint64_t *AriSdk::Tlv<IBIImsMERtcpProfile>::operator=<IBIImsMERtcpProfile&,void>(uint64_t *a1, const void *a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)operator new();
  memcpy(v4, a2, 0x11CuLL);
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40B6EABFF7);
  return a1;
}

uint64_t *AriSdk::Tlv<IBIImsMERtpInfo>::operator=<IBIImsMERtpInfo&,void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = operator new();
  *(_QWORD *)v4 = *(_QWORD *)a2;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
  v5 = *a1;
  *a1 = v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40CBA68D63);
  return a1;
}

uint64_t AriSdk::TlvArray<IBIImsMEAudioCodec,4ul>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void **v7;
  void *v8;
  void *__p[2];
  char v11;

  v5 = *a2;
  v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 4) < 5)
  {
    v8 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v8);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v5 = *a2;
      v4 = a2[1];
    }
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v11 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v6, v7, 360, a1, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4), 4);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_20E26A248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriSdk::TlvArray<IBIImsMEAudioEVSCodec,2ul>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void **v7;
  void *v8;
  void *__p[2];
  char v11;

  v5 = *a2;
  v4 = a2[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a2) >> 4) < 3)
  {
    v8 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v8);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v5 = *a2;
      v4 = a2[1];
    }
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v11 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v6, v7, 360, a1, 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 4), 2);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_20E26A35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *AriSdk::Tlv<IBIImsMEEvsPrimaryCMR>::operator=<IBIImsMEEvsPrimaryCMR&,void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = operator new();
  *(_DWORD *)v4 = *(_DWORD *)a2;
  *(_WORD *)(v4 + 4) = *(_WORD *)(a2 + 4);
  v5 = *a1;
  *a1 = v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C405D080610);
  return a1;
}

std::vector<int> *AriSdk::TlvArray<unsigned int,2ul>::operator=(std::vector<int> *this, __n128 *__c)
{
  const char *v4;
  void **v5;
  void *__p[2];
  char v8;

  if (__c->n128_u64[1] - __c->n128_u64[0] < 9)
  {
    std::vector<char>::__move_assign((uint64_t)this, __c);
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v8 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v4, v5, 360, this, (uint64_t)(__c->n128_u64[1] - __c->n128_u64[0]) >> 2, 2);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_20E26A4A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL AriSdk::ARI_IBIImsMEConfigureAudioMediaReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIImsMEConfigureAudioMediaReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1149501440;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK(AriSdk::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x45040000u, 0);
  *(_QWORD *)result = &off_24C90E438;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x45040000u, 0);
  *(_QWORD *)result = &off_24C90E438;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK(AriSdk::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E438;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E438;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK::~ARI_IBIImsMEConfigureAudioMediaRspCb_SDK(AriSdk::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C90E438;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK::~ARI_IBIImsMEConfigureAudioMediaRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK::pack(AriSdk::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK::unpack(AriSdk::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E26A7E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1157890048;
}

double AriSdk::ARI_IBIImsMEConfigureRTTMediaReq_SDK::ARI_IBIImsMEConfigureRTTMediaReq_SDK(AriSdk::ARI_IBIImsMEConfigureRTTMediaReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x44858000u, 0);
  *(_QWORD *)v1 = &off_24C90E470;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  *((_OWORD *)v1 + 11) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x44858000u, 0);
  *(_QWORD *)v1 = &off_24C90E470;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  *((_OWORD *)v1 + 11) = 0u;
  return result;
}

double AriSdk::ARI_IBIImsMEConfigureRTTMediaReq_SDK::ARI_IBIImsMEConfigureRTTMediaReq_SDK(AriSdk::ARI_IBIImsMEConfigureRTTMediaReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C90E470;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C90E470;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  return result;
}

void AriSdk::ARI_IBIImsMEConfigureRTTMediaReq_SDK::~ARI_IBIImsMEConfigureRTTMediaReq_SDK(AriSdk::ARI_IBIImsMEConfigureRTTMediaReq_SDK *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)this = &off_24C90E470;
  v2 = (void *)*((_QWORD *)this + 21);
  if (v2)
  {
    *((_QWORD *)this + 22) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4077774924);
  v4 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  v5 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  v6 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C40B6EABFF7);
  v7 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C40BDFB0063);
  v8 = (void *)*((_QWORD *)this + 13);
  if (v8)
  {
    *((_QWORD *)this + 14) = v8;
    operator delete(v8);
  }
  v9 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v9)
    MEMORY[0x212BB9B60](v9, 0x1000C4077774924);
  v10 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v10)
    MEMORY[0x212BB9B60](v10, 0x1000C4077774924);
  v11 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v11)
    MEMORY[0x212BB9B60](v11, 0x1000C40BDFB0063);
  v12 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v12)
    MEMORY[0x212BB9B60](v12, 0x1000C4052888210);
  v13 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v13)
    MEMORY[0x212BB9B60](v13, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIImsMEConfigureRTTMediaReq_SDK::~ARI_IBIImsMEConfigureRTTMediaReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIImsMEConfigureRTTMediaReq_SDK::pack(AriSdk::ARI_IBIImsMEConfigureRTTMediaReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  _BYTE *v10;
  _BYTE *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  _BYTE *v17;
  _BYTE *v18;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v7, 2uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v8, 1uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 7, v9, 1uLL, 0), !(_DWORD)result))
          {
            v10 = (_BYTE *)*((_QWORD *)this + 13);
            if (!v10
              || (v11 = (_BYTE *)*((_QWORD *)this + 14), v10 == v11)
              || (result = AriMsg::pack(*((AriMsg **)this + 6), 8, v10, v11 - v10, 0), !(_DWORD)result))
            {
              v12 = (const void *)*((_QWORD *)this + 16);
              if (!v12 || (result = AriMsg::pack(*((AriMsg **)this + 6), 9, v12, 2uLL, 0), !(_DWORD)result))
              {
                v13 = (const void *)*((_QWORD *)this + 17);
                if (!v13 || (result = AriMsg::pack(*((AriMsg **)this + 6), 10, v13, 0x11CuLL, 0), !(_DWORD)result))
                {
                  v14 = (const void *)*((_QWORD *)this + 18);
                  if (!v14 || (result = AriMsg::pack(*((AriMsg **)this + 6), 11, v14, 4uLL, 0), !(_DWORD)result))
                  {
                    v15 = (const void *)*((_QWORD *)this + 19);
                    if (!v15 || (result = AriMsg::pack(*((AriMsg **)this + 6), 12, v15, 4uLL, 0), !(_DWORD)result))
                    {
                      v16 = (const void *)*((_QWORD *)this + 20);
                      if (!v16 || (result = AriMsg::pack(*((AriMsg **)this + 6), 13, v16, 1uLL, 0), !(_DWORD)result))
                      {
                        v17 = (_BYTE *)*((_QWORD *)this + 21);
                        if (!v17
                          || (v18 = (_BYTE *)*((_QWORD *)this + 22), v17 == v18)
                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 14, v17, v18 - v17, 0), !(_DWORD)result))
                        {
                          result = 0;
                          *a2 = (AriMsg *)*((_QWORD *)this + 6);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIImsMEConfigureRTTMediaReq_SDK::unpack(AriSdk::ARI_IBIImsMEConfigureRTTMediaReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _WORD *v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  _WORD *v10;
  _OWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _BYTE *v14;
  _OWORD *v15;
  __n128 __p;
  uint64_t v18;
  size_t __sz;
  BOOL v20;

  __p.n128_u8[0] = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v2, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = __p.n128_u8[0] == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v5, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v6 = (_WORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v6, 2, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v6, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C40BDFB0063);
  }
  __p.n128_u8[0] = 0;
  v7 = (_BYTE *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v7, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 11, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C4077774924);
  }
  __p.n128_u8[0] = 0;
  v8 = (_BYTE *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 7, v8, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v8, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 12, v8);
    MEMORY[0x212BB9B60](v8, 0x1000C4077774924);
  }
  v20 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v9 = (_QWORD *)operator new[]();
  *v9 = 0;
  v9[1] = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 8, v9, 16, &v20, &__sz);
  if ((_DWORD)v3 || !v20)
  {
    MEMORY[0x212BB9B48](v9, 0x1000C8077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v18 = 0;
    __p = 0uLL;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v9, (uint64_t)v9 + __sz, __sz);
    AriSdk::TlvArray<unsigned char,16ul>::operator=((std::vector<int> *)((char *)this + 104), &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    MEMORY[0x212BB9B48](v9, 0x1000C8077774924);
  }
  __p.n128_u8[0] = 0;
  v10 = (_WORD *)operator new();
  *v10 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 9, v10, 2, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v10, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 16, v10);
    MEMORY[0x212BB9B60](v10, 0x1000C40BDFB0063);
  }
  __p.n128_u8[0] = 0;
  v11 = (_OWORD *)operator new();
  *v11 = 0u;
  v11[1] = 0u;
  v11[2] = 0u;
  v11[3] = 0u;
  v11[4] = 0u;
  v11[5] = 0u;
  v11[6] = 0u;
  v11[7] = 0u;
  v11[8] = 0u;
  v11[9] = 0u;
  v11[10] = 0u;
  v11[11] = 0u;
  v11[12] = 0u;
  v11[13] = 0u;
  v11[14] = 0u;
  v11[15] = 0u;
  v11[16] = 0u;
  *(_OWORD *)((char *)v11 + 268) = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 10, v11, 284, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v11, 0x1000C40B6EABFF7);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBIImsMERtcpProfile>::operator=<IBIImsMERtcpProfile&,void>((uint64_t *)this + 17, v11);
    MEMORY[0x212BB9B60](v11, 0x1000C40B6EABFF7);
  }
  __p.n128_u8[0] = 0;
  v12 = (_DWORD *)operator new();
  *v12 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 11, v12, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v12, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 18, v12);
    MEMORY[0x212BB9B60](v12, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v13 = (_DWORD *)operator new();
  *v13 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 12, v13, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v13, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 19, v13);
    MEMORY[0x212BB9B60](v13, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v14 = (_BYTE *)operator new();
  *v14 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 13, v14, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v14, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 20, v14);
    MEMORY[0x212BB9B60](v14, 0x1000C4077774924);
  }
  v20 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v15 = (_OWORD *)operator new[]();
  *v15 = 0u;
  v15[1] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 14, v15, 32, &v20, &__sz);
  if (!(_DWORD)v3 && v20)
  {
    v18 = 0;
    __p = 0uLL;
    std::vector<IBIImsMERTTCodec>::__init_with_size[abi:ne180100]<IBIImsMERTTCodec*,IBIImsMERTTCodec*>(&__p, v15, (uint64_t)&v15[__sz >> 4], __sz >> 4);
    AriSdk::TlvArray<IBIImsMERTTCodec,2ul>::operator=((uint64_t)this + 168, (uint64_t *)&__p);
    if (__p.n128_u64[0])
      operator delete((void *)__p.n128_u64[0]);
  }
  MEMORY[0x212BB9B48](v15, 0x1000C80F9DF271DLL);
  return v3;
}

void sub_20E26B454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x212BB9B48](v11, 0x1000C80F9DF271DLL);
  _Unwind_Resume(a1);
}

uint64_t AriSdk::TlvArray<IBIImsMERTTCodec,2ul>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void **v7;
  void *v8;
  void *__p[2];
  char v11;

  v5 = *a2;
  v4 = a2[1];
  if ((unint64_t)(v4 - *a2) < 0x21)
  {
    v8 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v8);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v5 = *a2;
      v4 = a2[1];
    }
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v11 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v6, v7, 360, a1, (a2[1] - *a2) >> 4, 2);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_20E26B640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL AriSdk::ARI_IBIImsMEConfigureRTTMediaReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIImsMEConfigureRTTMediaReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1149599744;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMEConfigureRTTMediaRspCb_SDK::ARI_IBIImsMEConfigureRTTMediaRspCb_SDK(AriSdk::ARI_IBIImsMEConfigureRTTMediaRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x45058000u, 0);
  *(_QWORD *)result = &off_24C90E4A8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x45058000u, 0);
  *(_QWORD *)result = &off_24C90E4A8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMEConfigureRTTMediaRspCb_SDK::ARI_IBIImsMEConfigureRTTMediaRspCb_SDK(AriSdk::ARI_IBIImsMEConfigureRTTMediaRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E4A8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E4A8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBIImsMEConfigureRTTMediaRspCb_SDK::~ARI_IBIImsMEConfigureRTTMediaRspCb_SDK(AriSdk::ARI_IBIImsMEConfigureRTTMediaRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C90E4A8;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIImsMEConfigureRTTMediaRspCb_SDK::~ARI_IBIImsMEConfigureRTTMediaRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIImsMEConfigureRTTMediaRspCb_SDK::pack(AriSdk::ARI_IBIImsMEConfigureRTTMediaRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIImsMEConfigureRTTMediaRspCb_SDK::unpack(AriSdk::ARI_IBIImsMEConfigureRTTMediaRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E26B988(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIImsMEConfigureRTTMediaRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIImsMEConfigureRTTMediaRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1157988352;
}

double AriSdk::ARI_IBIImsMECreateAudioMediaSessionReq_SDK::ARI_IBIImsMECreateAudioMediaSessionReq_SDK(AriSdk::ARI_IBIImsMECreateAudioMediaSessionReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x44838000u, 0);
  *(_QWORD *)v1 = &off_24C90E4E0;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  *((_OWORD *)v1 + 11) = 0u;
  *((_OWORD *)v1 + 12) = 0u;
  *((_OWORD *)v1 + 13) = 0u;
  *((_OWORD *)v1 + 14) = 0u;
  *((_OWORD *)v1 + 15) = 0u;
  *((_OWORD *)v1 + 16) = 0u;
  *((_OWORD *)v1 + 17) = 0u;
  *((_OWORD *)v1 + 18) = 0u;
  *((_OWORD *)v1 + 19) = 0u;
  *((_OWORD *)v1 + 20) = 0u;
  *((_OWORD *)v1 + 21) = 0u;
  *((_OWORD *)v1 + 22) = 0u;
  *((_OWORD *)v1 + 23) = 0u;
  *((_OWORD *)v1 + 24) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x44838000u, 0);
  *(_QWORD *)v1 = &off_24C90E4E0;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  *((_OWORD *)v1 + 11) = 0u;
  *((_OWORD *)v1 + 12) = 0u;
  *((_OWORD *)v1 + 13) = 0u;
  *((_OWORD *)v1 + 14) = 0u;
  *((_OWORD *)v1 + 15) = 0u;
  *((_OWORD *)v1 + 16) = 0u;
  *((_OWORD *)v1 + 17) = 0u;
  *((_OWORD *)v1 + 18) = 0u;
  *((_OWORD *)v1 + 19) = 0u;
  *((_OWORD *)v1 + 20) = 0u;
  *((_OWORD *)v1 + 21) = 0u;
  *((_OWORD *)v1 + 22) = 0u;
  *((_OWORD *)v1 + 23) = 0u;
  *((_OWORD *)v1 + 24) = 0u;
  return result;
}

double AriSdk::ARI_IBIImsMECreateAudioMediaSessionReq_SDK::ARI_IBIImsMECreateAudioMediaSessionReq_SDK(AriSdk::ARI_IBIImsMECreateAudioMediaSessionReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C90E4E0;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 13) = 0u;
  *((_OWORD *)v3 + 14) = 0u;
  *((_OWORD *)v3 + 15) = 0u;
  *((_OWORD *)v3 + 16) = 0u;
  *((_OWORD *)v3 + 17) = 0u;
  *((_OWORD *)v3 + 18) = 0u;
  *((_OWORD *)v3 + 19) = 0u;
  *((_OWORD *)v3 + 20) = 0u;
  *((_OWORD *)v3 + 21) = 0u;
  *((_OWORD *)v3 + 22) = 0u;
  *((_OWORD *)v3 + 23) = 0u;
  *((_OWORD *)v3 + 24) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C90E4E0;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 13) = 0u;
  *((_OWORD *)v3 + 14) = 0u;
  *((_OWORD *)v3 + 15) = 0u;
  *((_OWORD *)v3 + 16) = 0u;
  *((_OWORD *)v3 + 17) = 0u;
  *((_OWORD *)v3 + 18) = 0u;
  *((_OWORD *)v3 + 19) = 0u;
  *((_OWORD *)v3 + 20) = 0u;
  *((_OWORD *)v3 + 21) = 0u;
  *((_OWORD *)v3 + 22) = 0u;
  *((_OWORD *)v3 + 23) = 0u;
  *((_OWORD *)v3 + 24) = 0u;
  return result;
}

void AriSdk::ARI_IBIImsMECreateAudioMediaSessionReq_SDK::~ARI_IBIImsMECreateAudioMediaSessionReq_SDK(AriSdk::ARI_IBIImsMECreateAudioMediaSessionReq_SDK *this)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)this = &off_24C90E4E0;
  v2 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = (void *)*((_QWORD *)this + 46);
  if (v3)
  {
    *((_QWORD *)this + 47) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 43);
  if (v4)
  {
    *((_QWORD *)this + 44) = v4;
    operator delete(v4);
  }
  v5 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40BDFB0063);
  v6 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  v7 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C405D080610);
  v8 = (void *)*((_QWORD *)this + 37);
  if (v8)
  {
    *((_QWORD *)this + 38) = v8;
    operator delete(v8);
  }
  v9 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v9)
    MEMORY[0x212BB9B60](v9, 0x1000C4077774924);
  v10 = (void *)*((_QWORD *)this + 33);
  if (v10)
  {
    *((_QWORD *)this + 34) = v10;
    operator delete(v10);
  }
  v11 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v11)
    MEMORY[0x212BB9B60](v11, 0x1000C4077774924);
  v12 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v12)
    MEMORY[0x212BB9B60](v12, 0x1000C40CBA68D63);
  v13 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v13)
    MEMORY[0x212BB9B60](v13, 0x1000C4005A209FELL);
  v14 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v14)
    MEMORY[0x212BB9B60](v14, 0x1000C40B6EABFF7);
  v15 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v15)
    MEMORY[0x212BB9B60](v15, 0x1000C4052888210);
  v16 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v16)
    MEMORY[0x212BB9B60](v16, 0x1000C4052888210);
  v17 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v17)
    MEMORY[0x212BB9B60](v17, 0x1000C40BDFB0063);
  v18 = (void *)*((_QWORD *)this + 23);
  if (v18)
  {
    *((_QWORD *)this + 24) = v18;
    operator delete(v18);
  }
  v19 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v19)
    MEMORY[0x212BB9B60](v19, 0x1000C4077774924);
  v20 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v20)
    MEMORY[0x212BB9B60](v20, 0x1000C4052888210);
  v21 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v21)
    MEMORY[0x212BB9B60](v21, 0x1000C4077774924);
  v22 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v22)
    MEMORY[0x212BB9B60](v22, 0x1000C4077774924);
  v23 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v23)
    MEMORY[0x212BB9B60](v23, 0x1000C40BDFB0063);
  v24 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v24)
    MEMORY[0x212BB9B60](v24, 0x1000C40BDFB0063);
  v25 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v25)
    MEMORY[0x212BB9B60](v25, 0x1000C4052888210);
  v26 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v26)
    MEMORY[0x212BB9B60](v26, 0x1000C40BDFB0063);
  v27 = (void *)*((_QWORD *)this + 12);
  if (v27)
  {
    *((_QWORD *)this + 13) = v27;
    operator delete(v27);
  }
  v28 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v28)
    MEMORY[0x212BB9B60](v28, 0x1000C4077774924);
  v29 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v29)
    MEMORY[0x212BB9B60](v29, 0x1000C4052888210);
  v30 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v30)
    MEMORY[0x212BB9B60](v30, 0x1000C4052888210);
  v31 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v31)
    MEMORY[0x212BB9B60](v31, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIImsMECreateAudioMediaSessionReq_SDK::~ARI_IBIImsMECreateAudioMediaSessionReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIImsMECreateAudioMediaSessionReq_SDK::pack(AriSdk::ARI_IBIImsMECreateAudioMediaSessionReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  _BYTE *v9;
  _BYTE *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  _BYTE *v19;
  _BYTE *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  _BYTE *v28;
  _BYTE *v29;
  const void *v30;
  _BYTE *v31;
  _BYTE *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  _BYTE *v36;
  _BYTE *v37;
  _BYTE *v38;
  _BYTE *v39;
  const void *v40;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 4uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v8, 1uLL, 0), !(_DWORD)result))
        {
          v9 = (_BYTE *)*((_QWORD *)this + 12);
          if (!v9
            || (v10 = (_BYTE *)*((_QWORD *)this + 13), v9 == v10)
            || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v9, v10 - v9, 0), !(_DWORD)result))
          {
            v11 = (const void *)*((_QWORD *)this + 15);
            if (!v11 || (result = AriMsg::pack(*((AriMsg **)this + 6), 7, v11, 2uLL, 0), !(_DWORD)result))
            {
              v12 = (const void *)*((_QWORD *)this + 16);
              if (!v12 || (result = AriMsg::pack(*((AriMsg **)this + 6), 8, v12, 4uLL, 0), !(_DWORD)result))
              {
                v13 = (const void *)*((_QWORD *)this + 17);
                if (!v13 || (result = AriMsg::pack(*((AriMsg **)this + 6), 9, v13, 2uLL, 0), !(_DWORD)result))
                {
                  v14 = (const void *)*((_QWORD *)this + 18);
                  if (!v14 || (result = AriMsg::pack(*((AriMsg **)this + 6), 10, v14, 2uLL, 0), !(_DWORD)result))
                  {
                    v15 = (const void *)*((_QWORD *)this + 19);
                    if (!v15 || (result = AriMsg::pack(*((AriMsg **)this + 6), 11, v15, 1uLL, 0), !(_DWORD)result))
                    {
                      v16 = (const void *)*((_QWORD *)this + 20);
                      if (!v16 || (result = AriMsg::pack(*((AriMsg **)this + 6), 12, v16, 1uLL, 0), !(_DWORD)result))
                      {
                        v17 = (const void *)*((_QWORD *)this + 21);
                        if (!v17
                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 13, v17, 4uLL, 0), !(_DWORD)result))
                        {
                          v18 = (const void *)*((_QWORD *)this + 22);
                          if (!v18
                            || (result = AriMsg::pack(*((AriMsg **)this + 6), 14, v18, 1uLL, 0), !(_DWORD)result))
                          {
                            v19 = (_BYTE *)*((_QWORD *)this + 23);
                            if (!v19
                              || (v20 = (_BYTE *)*((_QWORD *)this + 24), v19 == v20)
                              || (result = AriMsg::pack(*((AriMsg **)this + 6), 15, v19, v20 - v19, 0), !(_DWORD)result))
                            {
                              v21 = (const void *)*((_QWORD *)this + 26);
                              if (!v21
                                || (result = AriMsg::pack(*((AriMsg **)this + 6), 16, v21, 2uLL, 0), !(_DWORD)result))
                              {
                                v22 = (const void *)*((_QWORD *)this + 27);
                                if (!v22
                                  || (result = AriMsg::pack(*((AriMsg **)this + 6), 17, v22, 4uLL, 0), !(_DWORD)result))
                                {
                                  v23 = (const void *)*((_QWORD *)this + 28);
                                  if (!v23
                                    || (result = AriMsg::pack(*((AriMsg **)this + 6), 18, v23, 4uLL, 0),
                                        !(_DWORD)result))
                                  {
                                    v24 = (const void *)*((_QWORD *)this + 29);
                                    if (!v24
                                      || (result = AriMsg::pack(*((AriMsg **)this + 6), 19, v24, 0x11CuLL, 0),
                                          !(_DWORD)result))
                                    {
                                      v25 = (const void *)*((_QWORD *)this + 30);
                                      if (!v25
                                        || (result = AriMsg::pack(*((AriMsg **)this + 6), 20, v25, 0xCuLL, 0),
                                            !(_DWORD)result))
                                      {
                                        v26 = (const void *)*((_QWORD *)this + 31);
                                        if (!v26
                                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 21, v26, 0xCuLL, 0),
                                              !(_DWORD)result))
                                        {
                                          v27 = (const void *)*((_QWORD *)this + 32);
                                          if (!v27
                                            || (result = AriMsg::pack(*((AriMsg **)this + 6), 22, v27, 1uLL, 0),
                                                !(_DWORD)result))
                                          {
                                            v28 = (_BYTE *)*((_QWORD *)this + 33);
                                            if (!v28
                                              || (v29 = (_BYTE *)*((_QWORD *)this + 34), v28 == v29)
                                              || (result = AriMsg::pack(*((AriMsg **)this + 6), 23, v28, v29 - v28, 0),
                                                  !(_DWORD)result))
                                            {
                                              v30 = (const void *)*((_QWORD *)this + 36);
                                              if (!v30
                                                || (result = AriMsg::pack(*((AriMsg **)this + 6), 24, v30, 1uLL, 0),
                                                    !(_DWORD)result))
                                              {
                                                v31 = (_BYTE *)*((_QWORD *)this + 37);
                                                if (!v31
                                                  || (v32 = (_BYTE *)*((_QWORD *)this + 38), v31 == v32)
                                                  || (result = AriMsg::pack(*((AriMsg **)this + 6), 25, v31, v32 - v31, 0), !(_DWORD)result))
                                                {
                                                  v33 = (const void *)*((_QWORD *)this + 40);
                                                  if (!v33
                                                    || (result = AriMsg::pack(*((AriMsg **)this + 6), 26, v33, 6uLL, 0), !(_DWORD)result))
                                                  {
                                                    v34 = (const void *)*((_QWORD *)this + 41);
                                                    if (!v34
                                                      || (result = AriMsg::pack(*((AriMsg **)this + 6), 27, v34, 4uLL, 0), !(_DWORD)result))
                                                    {
                                                      v35 = (const void *)*((_QWORD *)this + 42);
                                                      if (!v35
                                                        || (result = AriMsg::pack(*((AriMsg **)this + 6), 28, v35, 2uLL, 0), !(_DWORD)result))
                                                      {
                                                        v36 = (_BYTE *)*((_QWORD *)this + 43);
                                                        if (!v36
                                                          || (v37 = (_BYTE *)*((_QWORD *)this + 44), v36 == v37)
                                                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 29, v36, v37 - v36, 0), !(_DWORD)result))
                                                        {
                                                          v38 = (_BYTE *)*((_QWORD *)this + 46);
                                                          if (!v38
                                                            || (v39 = (_BYTE *)*((_QWORD *)this + 47), v38 == v39)
                                                            || (result = AriMsg::pack(*((AriMsg **)this + 6), 30, v38, v39 - v38, 0), !(_DWORD)result))
                                                          {
                                                            v40 = (const void *)*((_QWORD *)this + 49);
                                                            if (!v40
                                                              || (result = AriMsg::pack(*((AriMsg **)this + 6), 31, v40, 4uLL, 0), !(_DWORD)result))
                                                            {
                                                              result = 0;
                                                              *a2 = (AriMsg *)*((_QWORD *)this + 6);
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIImsMECreateAudioMediaSessionReq_SDK::unpack(AriSdk::ARI_IBIImsMECreateAudioMediaSessionReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  _BYTE *v7;
  _QWORD *v8;
  _WORD *v9;
  _DWORD *v10;
  _WORD *v11;
  _WORD *v12;
  _BYTE *v13;
  _BYTE *v14;
  _DWORD *v15;
  _BYTE *v16;
  _QWORD *v17;
  _WORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _OWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _BYTE *v24;
  _OWORD *v25;
  _BYTE *v26;
  _OWORD *v27;
  _WORD *v28;
  _DWORD *v29;
  _WORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _DWORD *v33;
  __n128 __p;
  uint64_t v36;
  size_t __sz;
  BOOL v38;

  __p.n128_u8[0] = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = __p.n128_u8[0] == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v7 = (_BYTE *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v7, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 11, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C4077774924);
  }
  v38 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v8 = (_QWORD *)operator new[]();
  *v8 = 0;
  v8[1] = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v8, 16, &v38, &__sz);
  if ((_DWORD)v3 || !v38)
  {
    MEMORY[0x212BB9B48](v8, 0x1000C8077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v36 = 0;
    __p = 0uLL;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v8, (uint64_t)v8 + __sz, __sz);
    AriSdk::TlvArray<unsigned char,16ul>::operator=((std::vector<int> *)this + 4, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    MEMORY[0x212BB9B48](v8, 0x1000C8077774924);
  }
  __p.n128_u8[0] = 0;
  v9 = (_WORD *)operator new();
  *v9 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 7, v9, 2, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v9, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 15, v9);
    MEMORY[0x212BB9B60](v9, 0x1000C40BDFB0063);
  }
  __p.n128_u8[0] = 0;
  v10 = (_DWORD *)operator new();
  *v10 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 8, v10, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v10, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 16, v10);
    MEMORY[0x212BB9B60](v10, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v11 = (_WORD *)operator new();
  *v11 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 9, v11, 2, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v11, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 17, v11);
    MEMORY[0x212BB9B60](v11, 0x1000C40BDFB0063);
  }
  __p.n128_u8[0] = 0;
  v12 = (_WORD *)operator new();
  *v12 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 10, v12, 2, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v12, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 18, v12);
    MEMORY[0x212BB9B60](v12, 0x1000C40BDFB0063);
  }
  __p.n128_u8[0] = 0;
  v13 = (_BYTE *)operator new();
  *v13 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 11, v13, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v13, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 19, v13);
    MEMORY[0x212BB9B60](v13, 0x1000C4077774924);
  }
  __p.n128_u8[0] = 0;
  v14 = (_BYTE *)operator new();
  *v14 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 12, v14, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v14, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 20, v14);
    MEMORY[0x212BB9B60](v14, 0x1000C4077774924);
  }
  __p.n128_u8[0] = 0;
  v15 = (_DWORD *)operator new();
  *v15 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 13, v15, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v15, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 21, v15);
    MEMORY[0x212BB9B60](v15, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v16 = (_BYTE *)operator new();
  *v16 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 14, v16, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v16, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 22, v16);
    MEMORY[0x212BB9B60](v16, 0x1000C4077774924);
  }
  v38 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v17 = (_QWORD *)operator new[]();
  *v17 = 0;
  v17[1] = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 15, v17, 16, &v38, &__sz);
  if ((_DWORD)v3 || !v38)
  {
    MEMORY[0x212BB9B48](v17, 0x1000C8077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v36 = 0;
    __p = 0uLL;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v17, (uint64_t)v17 + __sz, __sz);
    AriSdk::TlvArray<unsigned char,16ul>::operator=((std::vector<int> *)((char *)this + 184), &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    MEMORY[0x212BB9B48](v17, 0x1000C8077774924);
  }
  __p.n128_u8[0] = 0;
  v18 = (_WORD *)operator new();
  *v18 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 16, v18, 2, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v18, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 26, v18);
    MEMORY[0x212BB9B60](v18, 0x1000C40BDFB0063);
  }
  __p.n128_u8[0] = 0;
  v19 = (_DWORD *)operator new();
  *v19 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 17, v19, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v19, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 27, v19);
    MEMORY[0x212BB9B60](v19, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v20 = (_DWORD *)operator new();
  *v20 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 18, v20, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v20, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 28, v20);
    MEMORY[0x212BB9B60](v20, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v21 = (_OWORD *)operator new();
  *v21 = 0u;
  v21[1] = 0u;
  v21[2] = 0u;
  v21[3] = 0u;
  v21[4] = 0u;
  v21[5] = 0u;
  v21[6] = 0u;
  v21[7] = 0u;
  v21[8] = 0u;
  v21[9] = 0u;
  v21[10] = 0u;
  v21[11] = 0u;
  v21[12] = 0u;
  v21[13] = 0u;
  v21[14] = 0u;
  v21[15] = 0u;
  v21[16] = 0u;
  *(_OWORD *)((char *)v21 + 268) = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 19, v21, 284, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v21, 0x1000C40B6EABFF7);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBIImsMERtcpProfile>::operator=<IBIImsMERtcpProfile&,void>((uint64_t *)this + 29, v21);
    MEMORY[0x212BB9B60](v21, 0x1000C40B6EABFF7);
  }
  __p.n128_u8[0] = 0;
  v22 = (_DWORD *)operator new();
  *(_QWORD *)v22 = 0;
  v22[2] = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 20, v22, 12, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v22, 0x1000C4005A209FELL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBICallPsNr5gNeighborCellInfo>::operator=<IBICallPsNr5gNeighborCellInfo&,void>((uint64_t *)this + 30, (uint64_t)v22);
    MEMORY[0x212BB9B60](v22, 0x1000C4005A209FELL);
  }
  __p.n128_u8[0] = 0;
  v23 = (_DWORD *)operator new();
  *(_QWORD *)v23 = 0;
  v23[2] = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 21, v23, 12, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v23, 0x1000C40CBA68D63);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBIImsMERtpInfo>::operator=<IBIImsMERtpInfo&,void>((uint64_t *)this + 31, (uint64_t)v23);
    MEMORY[0x212BB9B60](v23, 0x1000C40CBA68D63);
  }
  __p.n128_u8[0] = 0;
  v24 = (_BYTE *)operator new();
  *v24 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 22, v24, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v24, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 32, v24);
    MEMORY[0x212BB9B60](v24, 0x1000C4077774924);
  }
  v38 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v25 = (_OWORD *)operator new[]();
  *v25 = 0u;
  v25[1] = 0u;
  v25[2] = 0u;
  v25[3] = 0u;
  v25[4] = 0u;
  v25[5] = 0u;
  v25[6] = 0u;
  v25[7] = 0u;
  v25[8] = 0u;
  v25[9] = 0u;
  v25[10] = 0u;
  v25[11] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 23, v25, 192, &v38, &__sz);
  if ((_DWORD)v3 || !v38)
  {
    MEMORY[0x212BB9B48](v25, 0x1000C80B7A2AEF0);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v36 = 0;
    __p = 0uLL;
    std::vector<IBIImsMEAudioCodec>::__init_with_size[abi:ne180100]<IBIImsMEAudioCodec*,IBIImsMEAudioCodec*>(&__p, v25, (uint64_t)&v25[3 * (__sz / 0x30)], __sz / 0x30);
    AriSdk::TlvArray<IBIImsMEAudioCodec,4ul>::operator=((uint64_t)this + 264, (uint64_t *)&__p);
    if (__p.n128_u64[0])
      operator delete((void *)__p.n128_u64[0]);
    MEMORY[0x212BB9B48](v25, 0x1000C80B7A2AEF0);
  }
  __p.n128_u8[0] = 0;
  v26 = (_BYTE *)operator new();
  *v26 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 24, v26, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v26, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 36, v26);
    MEMORY[0x212BB9B60](v26, 0x1000C4077774924);
  }
  v38 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v27 = (_OWORD *)operator new[]();
  *v27 = 0u;
  v27[1] = 0u;
  v27[2] = 0u;
  v27[3] = 0u;
  v27[4] = 0u;
  v27[5] = 0u;
  v27[6] = 0u;
  v27[7] = 0u;
  v27[8] = 0u;
  v27[9] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 25, v27, 160, &v38, &__sz);
  if ((_DWORD)v3 || !v38)
  {
    MEMORY[0x212BB9B48](v27, 0x1000C806C901D0CLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v36 = 0;
    __p = 0uLL;
    std::vector<IBIImsMEAudioEVSCodec>::__init_with_size[abi:ne180100]<IBIImsMEAudioEVSCodec*,IBIImsMEAudioEVSCodec*>(&__p, v27, (uint64_t)&v27[5 * (__sz / 0x50)], __sz / 0x50);
    AriSdk::TlvArray<IBIImsMEAudioEVSCodec,2ul>::operator=((uint64_t)this + 296, (uint64_t *)&__p);
    if (__p.n128_u64[0])
      operator delete((void *)__p.n128_u64[0]);
    MEMORY[0x212BB9B48](v27, 0x1000C806C901D0CLL);
  }
  __p.n128_u8[0] = 0;
  v28 = (_WORD *)operator new();
  *(_DWORD *)v28 = 0;
  v28[2] = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 26, v28, 6, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v28, 0x1000C405D080610);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBIImsMEEvsPrimaryCMR>::operator=<IBIImsMEEvsPrimaryCMR&,void>((uint64_t *)this + 40, (uint64_t)v28);
    MEMORY[0x212BB9B60](v28, 0x1000C405D080610);
  }
  __p.n128_u8[0] = 0;
  v29 = (_DWORD *)operator new();
  *v29 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 27, v29, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v29, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 41, v29);
    MEMORY[0x212BB9B60](v29, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v30 = (_WORD *)operator new();
  *v30 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 28, v30, 2, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v30, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 42, v30);
    MEMORY[0x212BB9B60](v30, 0x1000C40BDFB0063);
  }
  v38 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v31 = (_QWORD *)operator new[]();
  *v31 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 29, v31, 8, &v38, &__sz);
  if ((_DWORD)v3 || !v38)
  {
    MEMORY[0x212BB9B48](v31, 0x1000C8052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v36 = 0;
    __p = 0uLL;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v31, (uint64_t)v31 + 4 * (__sz >> 2), __sz >> 2);
    AriSdk::TlvArray<unsigned int,2ul>::operator=((std::vector<int> *)((char *)this + 344), &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    MEMORY[0x212BB9B48](v31, 0x1000C8052888210);
  }
  v38 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v32 = (_QWORD *)operator new[]();
  *v32 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 30, v32, 8, &v38, &__sz);
  if ((_DWORD)v3 || !v38)
  {
    MEMORY[0x212BB9B48](v32, 0x1000C8052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v36 = 0;
    __p = 0uLL;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v32, (uint64_t)v32 + 4 * (__sz >> 2), __sz >> 2);
    AriSdk::TlvArray<unsigned int,2ul>::operator=((std::vector<int> *)((char *)this + 368), &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    MEMORY[0x212BB9B48](v32, 0x1000C8052888210);
  }
  __p.n128_u8[0] = 0;
  v33 = (_DWORD *)operator new();
  *v33 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 31, v33, 4, (BOOL *)&__p, 0);
  if (!(_DWORD)v3 && __p.n128_u8[0])
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 49, v33);
  MEMORY[0x212BB9B60](v33, 0x1000C4052888210);
  return v3;
}

void sub_20E26D670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIImsMECreateAudioMediaSessionReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIImsMECreateAudioMediaSessionReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1149468672;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK(AriSdk::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x45038000u, 0);
  *(_QWORD *)result = &off_24C90E518;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x45038000u, 0);
  *(_QWORD *)result = &off_24C90E518;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK(AriSdk::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E518;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E518;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK::~ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK(AriSdk::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C90E518;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK::~ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK::pack(AriSdk::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 4uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK::unpack(AriSdk::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v9, 0);
  if ((_DWORD)v3 || !v9)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v8 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 4, &v8, 0);
  if (!(_DWORD)v3 && v8)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  return v3;
}

void sub_20E26DC9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1157857280;
}

double AriSdk::ARI_IBIImsMECreateRTTMediaSessionReq_SDK::ARI_IBIImsMECreateRTTMediaSessionReq_SDK(AriSdk::ARI_IBIImsMECreateRTTMediaSessionReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x44850000u, 0);
  *(_QWORD *)v1 = &off_24C90E550;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  *((_OWORD *)v1 + 11) = 0u;
  *((_OWORD *)v1 + 12) = 0u;
  *((_OWORD *)v1 + 13) = 0u;
  *((_QWORD *)v1 + 28) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x44850000u, 0);
  *(_QWORD *)v1 = &off_24C90E550;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  *((_OWORD *)v1 + 11) = 0u;
  *((_OWORD *)v1 + 12) = 0u;
  *((_OWORD *)v1 + 13) = 0u;
  *((_QWORD *)v1 + 28) = 0;
  return result;
}

double AriSdk::ARI_IBIImsMECreateRTTMediaSessionReq_SDK::ARI_IBIImsMECreateRTTMediaSessionReq_SDK(AriSdk::ARI_IBIImsMECreateRTTMediaSessionReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C90E550;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 13) = 0u;
  *((_QWORD *)v3 + 28) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C90E550;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 13) = 0u;
  *((_QWORD *)v3 + 28) = 0;
  return result;
}

void AriSdk::ARI_IBIImsMECreateRTTMediaSessionReq_SDK::~ARI_IBIImsMECreateRTTMediaSessionReq_SDK(AriSdk::ARI_IBIImsMECreateRTTMediaSessionReq_SDK *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)this = &off_24C90E550;
  v2 = (void *)*((_QWORD *)this + 26);
  if (v2)
  {
    *((_QWORD *)this + 27) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4077774924);
  v4 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  v5 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  v6 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C40B6EABFF7);
  v7 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C40BDFB0063);
  v8 = (void *)*((_QWORD *)this + 18);
  if (v8)
  {
    *((_QWORD *)this + 19) = v8;
    operator delete(v8);
  }
  v9 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v9)
    MEMORY[0x212BB9B60](v9, 0x1000C4077774924);
  v10 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v10)
    MEMORY[0x212BB9B60](v10, 0x1000C4077774924);
  v11 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v11)
    MEMORY[0x212BB9B60](v11, 0x1000C40BDFB0063);
  v12 = (void *)*((_QWORD *)this + 12);
  if (v12)
  {
    *((_QWORD *)this + 13) = v12;
    operator delete(v12);
  }
  v13 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v13)
    MEMORY[0x212BB9B60](v13, 0x1000C4077774924);
  v14 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v14)
    MEMORY[0x212BB9B60](v14, 0x1000C4052888210);
  v15 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v15)
    MEMORY[0x212BB9B60](v15, 0x1000C4052888210);
  v16 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v16)
    MEMORY[0x212BB9B60](v16, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIImsMECreateRTTMediaSessionReq_SDK::~ARI_IBIImsMECreateRTTMediaSessionReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIImsMECreateRTTMediaSessionReq_SDK::pack(AriSdk::ARI_IBIImsMECreateRTTMediaSessionReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  _BYTE *v9;
  _BYTE *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  _BYTE *v14;
  _BYTE *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  _BYTE *v21;
  _BYTE *v22;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 4uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v8, 1uLL, 0), !(_DWORD)result))
        {
          v9 = (_BYTE *)*((_QWORD *)this + 12);
          if (!v9
            || (v10 = (_BYTE *)*((_QWORD *)this + 13), v9 == v10)
            || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v9, v10 - v9, 0), !(_DWORD)result))
          {
            v11 = (const void *)*((_QWORD *)this + 15);
            if (!v11 || (result = AriMsg::pack(*((AriMsg **)this + 6), 7, v11, 2uLL, 0), !(_DWORD)result))
            {
              v12 = (const void *)*((_QWORD *)this + 16);
              if (!v12 || (result = AriMsg::pack(*((AriMsg **)this + 6), 8, v12, 1uLL, 0), !(_DWORD)result))
              {
                v13 = (const void *)*((_QWORD *)this + 17);
                if (!v13 || (result = AriMsg::pack(*((AriMsg **)this + 6), 9, v13, 1uLL, 0), !(_DWORD)result))
                {
                  v14 = (_BYTE *)*((_QWORD *)this + 18);
                  if (!v14
                    || (v15 = (_BYTE *)*((_QWORD *)this + 19), v14 == v15)
                    || (result = AriMsg::pack(*((AriMsg **)this + 6), 10, v14, v15 - v14, 0), !(_DWORD)result))
                  {
                    v16 = (const void *)*((_QWORD *)this + 21);
                    if (!v16 || (result = AriMsg::pack(*((AriMsg **)this + 6), 11, v16, 2uLL, 0), !(_DWORD)result))
                    {
                      v17 = (const void *)*((_QWORD *)this + 22);
                      if (!v17
                        || (result = AriMsg::pack(*((AriMsg **)this + 6), 12, v17, 0x11CuLL, 0), !(_DWORD)result))
                      {
                        v18 = (const void *)*((_QWORD *)this + 23);
                        if (!v18
                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 13, v18, 4uLL, 0), !(_DWORD)result))
                        {
                          v19 = (const void *)*((_QWORD *)this + 24);
                          if (!v19
                            || (result = AriMsg::pack(*((AriMsg **)this + 6), 14, v19, 4uLL, 0), !(_DWORD)result))
                          {
                            v20 = (const void *)*((_QWORD *)this + 25);
                            if (!v20
                              || (result = AriMsg::pack(*((AriMsg **)this + 6), 15, v20, 1uLL, 0), !(_DWORD)result))
                            {
                              v21 = (_BYTE *)*((_QWORD *)this + 26);
                              if (!v21
                                || (v22 = (_BYTE *)*((_QWORD *)this + 27), v21 == v22)
                                || (result = AriMsg::pack(*((AriMsg **)this + 6), 16, v21, v22 - v21, 0),
                                    !(_DWORD)result))
                              {
                                result = 0;
                                *a2 = (AriMsg *)*((_QWORD *)this + 6);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIImsMECreateRTTMediaSessionReq_SDK::unpack(AriSdk::ARI_IBIImsMECreateRTTMediaSessionReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  _BYTE *v7;
  _QWORD *v8;
  _WORD *v9;
  _BYTE *v10;
  _BYTE *v11;
  _QWORD *v12;
  _WORD *v13;
  _OWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _BYTE *v17;
  _OWORD *v18;
  __n128 __p;
  uint64_t v21;
  size_t __sz;
  BOOL v23;

  __p.n128_u8[0] = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = __p.n128_u8[0] == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v7 = (_BYTE *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v7, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 11, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C4077774924);
  }
  v23 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v8 = (_QWORD *)operator new[]();
  *v8 = 0;
  v8[1] = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v8, 16, &v23, &__sz);
  if ((_DWORD)v3 || !v23)
  {
    MEMORY[0x212BB9B48](v8, 0x1000C8077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v21 = 0;
    __p = 0uLL;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v8, (uint64_t)v8 + __sz, __sz);
    AriSdk::TlvArray<unsigned char,16ul>::operator=((std::vector<int> *)this + 4, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    MEMORY[0x212BB9B48](v8, 0x1000C8077774924);
  }
  __p.n128_u8[0] = 0;
  v9 = (_WORD *)operator new();
  *v9 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 7, v9, 2, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v9, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 15, v9);
    MEMORY[0x212BB9B60](v9, 0x1000C40BDFB0063);
  }
  __p.n128_u8[0] = 0;
  v10 = (_BYTE *)operator new();
  *v10 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 8, v10, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v10, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 16, v10);
    MEMORY[0x212BB9B60](v10, 0x1000C4077774924);
  }
  __p.n128_u8[0] = 0;
  v11 = (_BYTE *)operator new();
  *v11 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 9, v11, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v11, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 17, v11);
    MEMORY[0x212BB9B60](v11, 0x1000C4077774924);
  }
  v23 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v12 = (_QWORD *)operator new[]();
  *v12 = 0;
  v12[1] = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 10, v12, 16, &v23, &__sz);
  if ((_DWORD)v3 || !v23)
  {
    MEMORY[0x212BB9B48](v12, 0x1000C8077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v21 = 0;
    __p = 0uLL;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v12, (uint64_t)v12 + __sz, __sz);
    AriSdk::TlvArray<unsigned char,16ul>::operator=((std::vector<int> *)this + 6, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    MEMORY[0x212BB9B48](v12, 0x1000C8077774924);
  }
  __p.n128_u8[0] = 0;
  v13 = (_WORD *)operator new();
  *v13 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 11, v13, 2, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v13, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 21, v13);
    MEMORY[0x212BB9B60](v13, 0x1000C40BDFB0063);
  }
  __p.n128_u8[0] = 0;
  v14 = (_OWORD *)operator new();
  *v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  *(_OWORD *)((char *)v14 + 268) = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 12, v14, 284, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v14, 0x1000C40B6EABFF7);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBIImsMERtcpProfile>::operator=<IBIImsMERtcpProfile&,void>((uint64_t *)this + 22, v14);
    MEMORY[0x212BB9B60](v14, 0x1000C40B6EABFF7);
  }
  __p.n128_u8[0] = 0;
  v15 = (_DWORD *)operator new();
  *v15 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 13, v15, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v15, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 23, v15);
    MEMORY[0x212BB9B60](v15, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v16 = (_DWORD *)operator new();
  *v16 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 14, v16, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v16, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 24, v16);
    MEMORY[0x212BB9B60](v16, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v17 = (_BYTE *)operator new();
  *v17 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 15, v17, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v17, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 25, v17);
    MEMORY[0x212BB9B60](v17, 0x1000C4077774924);
  }
  v23 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v18 = (_OWORD *)operator new[]();
  *v18 = 0u;
  v18[1] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 16, v18, 32, &v23, &__sz);
  if (!(_DWORD)v3 && v23)
  {
    v21 = 0;
    __p = 0uLL;
    std::vector<IBIImsMERTTCodec>::__init_with_size[abi:ne180100]<IBIImsMERTTCodec*,IBIImsMERTTCodec*>(&__p, v18, (uint64_t)&v18[__sz >> 4], __sz >> 4);
    AriSdk::TlvArray<IBIImsMERTTCodec,2ul>::operator=((uint64_t)this + 208, (uint64_t *)&__p);
    if (__p.n128_u64[0])
      operator delete((void *)__p.n128_u64[0]);
  }
  MEMORY[0x212BB9B48](v18, 0x1000C80F9DF271DLL);
  return v3;
}

void sub_20E26EBDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x212BB9B48](v11, 0x1000C80F9DF271DLL);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIImsMECreateRTTMediaSessionReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIImsMECreateRTTMediaSessionReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1149566976;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMECreateRTTMediaSessionRspCb_SDK::ARI_IBIImsMECreateRTTMediaSessionRspCb_SDK(AriSdk::ARI_IBIImsMECreateRTTMediaSessionRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x45050000u, 0);
  *(_QWORD *)result = &off_24C90E588;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x45050000u, 0);
  *(_QWORD *)result = &off_24C90E588;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMECreateRTTMediaSessionRspCb_SDK::ARI_IBIImsMECreateRTTMediaSessionRspCb_SDK(AriSdk::ARI_IBIImsMECreateRTTMediaSessionRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E588;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E588;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIImsMECreateRTTMediaSessionRspCb_SDK::~ARI_IBIImsMECreateRTTMediaSessionRspCb_SDK(AriSdk::ARI_IBIImsMECreateRTTMediaSessionRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C90E588;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIImsMECreateRTTMediaSessionRspCb_SDK::~ARI_IBIImsMECreateRTTMediaSessionRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIImsMECreateRTTMediaSessionRspCb_SDK::pack(AriSdk::ARI_IBIImsMECreateRTTMediaSessionRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 4uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIImsMECreateRTTMediaSessionRspCb_SDK::unpack(AriSdk::ARI_IBIImsMECreateRTTMediaSessionRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v9, 0);
  if ((_DWORD)v3 || !v9)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v8 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 4, &v8, 0);
  if (!(_DWORD)v3 && v8)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  return v3;
}

void sub_20E26F104(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIImsMECreateRTTMediaSessionRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIImsMECreateRTTMediaSessionRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1157955584;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMEGetMediaCapabilityReq_SDK::ARI_IBIImsMEGetMediaCapabilityReq_SDK(AriSdk::ARI_IBIImsMEGetMediaCapabilityReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x44808000u, 0);
  *(_QWORD *)result = &off_24C90E5C0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x44808000u, 0);
  *(_QWORD *)result = &off_24C90E5C0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMEGetMediaCapabilityReq_SDK::ARI_IBIImsMEGetMediaCapabilityReq_SDK(AriSdk::ARI_IBIImsMEGetMediaCapabilityReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E5C0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E5C0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIImsMEGetMediaCapabilityReq_SDK::~ARI_IBIImsMEGetMediaCapabilityReq_SDK(AriSdk::ARI_IBIImsMEGetMediaCapabilityReq_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C90E5C0;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIImsMEGetMediaCapabilityReq_SDK::~ARI_IBIImsMEGetMediaCapabilityReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIImsMEGetMediaCapabilityReq_SDK::pack(AriSdk::ARI_IBIImsMEGetMediaCapabilityReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_IBIImsMEGetMediaCapabilityReq_SDK::unpack(AriMsg **this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  AriMsg *v5;
  AriMsg *v6;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(this[6], 3, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (!v4)
  {
    v5 = (AriMsg *)operator new();
    *(_DWORD *)v5 = *v2;
    v6 = this[8];
    this[8] = v5;
    if (v6)
      MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  }
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E26F3C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIImsMEGetMediaCapabilityReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIImsMEGetMediaCapabilityReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1149272064;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMEGetMediaCapabilityRspCb_SDK::ARI_IBIImsMEGetMediaCapabilityRspCb_SDK(AriSdk::ARI_IBIImsMEGetMediaCapabilityRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x45008000u, 0);
  *(_QWORD *)result = &off_24C90E5F8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x45008000u, 0);
  *(_QWORD *)result = &off_24C90E5F8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMEGetMediaCapabilityRspCb_SDK::ARI_IBIImsMEGetMediaCapabilityRspCb_SDK(AriSdk::ARI_IBIImsMEGetMediaCapabilityRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E5F8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E5F8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBIImsMEGetMediaCapabilityRspCb_SDK::~ARI_IBIImsMEGetMediaCapabilityRspCb_SDK(AriSdk::ARI_IBIImsMEGetMediaCapabilityRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C90E5F8;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C400DDB7D95);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIImsMEGetMediaCapabilityRspCb_SDK::~ARI_IBIImsMEGetMediaCapabilityRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIImsMEGetMediaCapabilityRspCb_SDK::pack(AriSdk::ARI_IBIImsMEGetMediaCapabilityRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v6, 0x69CuLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIImsMEGetMediaCapabilityRspCb_SDK::unpack(AriSdk::ARI_IBIImsMEGetMediaCapabilityRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  void *v5;
  void *v6;
  uint64_t v7;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (void *)operator new();
  bzero(v5, 0x69CuLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v5, 1692, &v9, 0);
  if (!(_DWORD)v3 && v9)
  {
    v6 = (void *)operator new();
    memcpy(v6, v5, 0x69CuLL);
    v7 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v6;
    if (v7)
      MEMORY[0x212BB9B60](v7, 0x1000C400DDB7D95);
  }
  MEMORY[0x212BB9B60](v5, 0x1000C400DDB7D95);
  return v3;
}

void sub_20E26F75C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C400DDB7D95);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIImsMEGetMediaCapabilityRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIImsMEGetMediaCapabilityRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1157660672;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMEMediaSessionErrIndCb_SDK::ARI_IBIImsMEMediaSessionErrIndCb_SDK(AriSdk::ARI_IBIImsMEMediaSessionErrIndCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x45808000u, 0);
  *(_QWORD *)result = &off_24C90E630;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x45808000u, 0);
  *(_QWORD *)result = &off_24C90E630;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMEMediaSessionErrIndCb_SDK::ARI_IBIImsMEMediaSessionErrIndCb_SDK(AriSdk::ARI_IBIImsMEMediaSessionErrIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E630;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E630;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBIImsMEMediaSessionErrIndCb_SDK::~ARI_IBIImsMEMediaSessionErrIndCb_SDK(AriSdk::ARI_IBIImsMEMediaSessionErrIndCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C90E630;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIImsMEMediaSessionErrIndCb_SDK::~ARI_IBIImsMEMediaSessionErrIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIImsMEMediaSessionErrIndCb_SDK::pack(AriSdk::ARI_IBIImsMEMediaSessionErrIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIImsMEMediaSessionErrIndCb_SDK::unpack(AriSdk::ARI_IBIImsMEMediaSessionErrIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v9, 0);
  if (!(_DWORD)v3 && v9)
  {
    v6 = (_DWORD *)operator new();
    *v6 = *v5;
    v7 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v6;
    if (v7)
      MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  }
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E26FB00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIImsMEMediaSessionErrIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIImsMEMediaSessionErrIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1166049280;
}

double AriSdk::ARI_IBIImsMERtcpReceiverReportIndCb_SDK::ARI_IBIImsMERtcpReceiverReportIndCb_SDK(AriSdk::ARI_IBIImsMERtcpReceiverReportIndCb_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x45818000u, 0);
  *(_QWORD *)v1 = &off_24C90E668;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_QWORD *)v1 + 18) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x45818000u, 0);
  *(_QWORD *)v1 = &off_24C90E668;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_QWORD *)v1 + 18) = 0;
  return result;
}

double AriSdk::ARI_IBIImsMERtcpReceiverReportIndCb_SDK::ARI_IBIImsMERtcpReceiverReportIndCb_SDK(AriSdk::ARI_IBIImsMERtcpReceiverReportIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C90E668;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_QWORD *)v3 + 18) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C90E668;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_QWORD *)v3 + 18) = 0;
  return result;
}

void AriSdk::ARI_IBIImsMERtcpReceiverReportIndCb_SDK::~ARI_IBIImsMERtcpReceiverReportIndCb_SDK(AriSdk::ARI_IBIImsMERtcpReceiverReportIndCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = &off_24C90E668;
  v2 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  v5 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  v6 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  v7 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  v8 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v8)
    MEMORY[0x212BB9B60](v8, 0x1000C4077774924);
  v9 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v9)
    MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
  v10 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v10)
    MEMORY[0x212BB9B60](v10, 0x1000C4052888210);
  v11 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v11)
    MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
  v12 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v12)
    MEMORY[0x212BB9B60](v12, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIImsMERtcpReceiverReportIndCb_SDK::~ARI_IBIImsMERtcpReceiverReportIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIImsMERtcpReceiverReportIndCb_SDK::pack(AriSdk::ARI_IBIImsMERtcpReceiverReportIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 4uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v8, 4uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v9, 1uLL, 0), !(_DWORD)result))
          {
            v10 = (const void *)*((_QWORD *)this + 13);
            if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 7, v10, 4uLL, 0), !(_DWORD)result))
            {
              v11 = (const void *)*((_QWORD *)this + 14);
              if (!v11 || (result = AriMsg::pack(*((AriMsg **)this + 6), 8, v11, 4uLL, 0), !(_DWORD)result))
              {
                v12 = (const void *)*((_QWORD *)this + 15);
                if (!v12 || (result = AriMsg::pack(*((AriMsg **)this + 6), 9, v12, 4uLL, 0), !(_DWORD)result))
                {
                  v13 = (const void *)*((_QWORD *)this + 16);
                  if (!v13 || (result = AriMsg::pack(*((AriMsg **)this + 6), 10, v13, 4uLL, 0), !(_DWORD)result))
                  {
                    v14 = (const void *)*((_QWORD *)this + 17);
                    if (!v14 || (result = AriMsg::pack(*((AriMsg **)this + 6), 11, v14, 4uLL, 0), !(_DWORD)result))
                    {
                      v15 = (const void *)*((_QWORD *)this + 18);
                      if (!v15 || (result = AriMsg::pack(*((AriMsg **)this + 6), 12, v15, 4uLL, 0), !(_DWORD)result))
                      {
                        result = 0;
                        *a2 = (AriMsg *)*((_QWORD *)this + 6);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIImsMERtcpReceiverReportIndCb_SDK::unpack(AriSdk::ARI_IBIImsMERtcpReceiverReportIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _BYTE *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;

  v26 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v2, 4, &v26, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v26;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v25 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v25, 0);
  if ((_DWORD)v3 || !v25)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v24 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 4, &v24, 0);
  if ((_DWORD)v3 || !v24)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  }
  v23 = 0;
  v7 = (_DWORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v7, 4, &v23, 0);
  if ((_DWORD)v3 || !v23)
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 11, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  }
  v22 = 0;
  v8 = (_BYTE *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v8, 1, &v22, 0);
  if ((_DWORD)v3 || !v22)
  {
    MEMORY[0x212BB9B60](v8, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 12, v8);
    MEMORY[0x212BB9B60](v8, 0x1000C4077774924);
  }
  v21 = 0;
  v9 = (_DWORD *)operator new();
  *v9 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 7, v9, 4, &v21, 0);
  if ((_DWORD)v3 || !v21)
  {
    MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 13, v9);
    MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
  }
  v20 = 0;
  v10 = (_DWORD *)operator new();
  *v10 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 8, v10, 4, &v20, 0);
  if ((_DWORD)v3 || !v20)
  {
    MEMORY[0x212BB9B60](v10, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 14, v10);
    MEMORY[0x212BB9B60](v10, 0x1000C4052888210);
  }
  v19 = 0;
  v11 = (_DWORD *)operator new();
  *v11 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 9, v11, 4, &v19, 0);
  if ((_DWORD)v3 || !v19)
  {
    MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 15, v11);
    MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
  }
  v18 = 0;
  v12 = (_DWORD *)operator new();
  *v12 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 10, v12, 4, &v18, 0);
  if ((_DWORD)v3 || !v18)
  {
    MEMORY[0x212BB9B60](v12, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 16, v12);
    MEMORY[0x212BB9B60](v12, 0x1000C4052888210);
  }
  v17 = 0;
  v13 = (_DWORD *)operator new();
  *v13 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 11, v13, 4, &v17, 0);
  if ((_DWORD)v3 || !v17)
  {
    MEMORY[0x212BB9B60](v13, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 17, v13);
    MEMORY[0x212BB9B60](v13, 0x1000C4052888210);
  }
  v16 = 0;
  v14 = (_DWORD *)operator new();
  *v14 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 12, v14, 4, &v16, 0);
  if (!(_DWORD)v3 && v16)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 18, v14);
  MEMORY[0x212BB9B60](v14, 0x1000C4052888210);
  return v3;
}

void sub_20E270610(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIImsMERtcpReceiverReportIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIImsMERtcpReceiverReportIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1166114816;
}

double AriSdk::ARI_IBIImsMERtcpSDESReportIndCb_SDK::ARI_IBIImsMERtcpSDESReportIndCb_SDK(AriSdk::ARI_IBIImsMERtcpSDESReportIndCb_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x45820000u, 0);
  *(_QWORD *)v1 = &off_24C90E6A0;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_QWORD *)v1 + 16) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x45820000u, 0);
  *(_QWORD *)v1 = &off_24C90E6A0;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_QWORD *)v1 + 16) = 0;
  return result;
}

double AriSdk::ARI_IBIImsMERtcpSDESReportIndCb_SDK::ARI_IBIImsMERtcpSDESReportIndCb_SDK(AriSdk::ARI_IBIImsMERtcpSDESReportIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C90E6A0;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_QWORD *)v3 + 16) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C90E6A0;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_QWORD *)v3 + 16) = 0;
  return result;
}

void AriSdk::ARI_IBIImsMERtcpSDESReportIndCb_SDK::~ARI_IBIImsMERtcpSDESReportIndCb_SDK(AriSdk::ARI_IBIImsMERtcpSDESReportIndCb_SDK *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = &off_24C90E6A0;
  v2 = (void *)*((_QWORD *)this + 14);
  if (v2)
  {
    *((_QWORD *)this + 15) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4077774924);
  v4 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  v5 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  v6 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  v7 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  v8 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v8)
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIImsMERtcpSDESReportIndCb_SDK::~ARI_IBIImsMERtcpSDESReportIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIImsMERtcpSDESReportIndCb_SDK::pack(AriSdk::ARI_IBIImsMERtcpSDESReportIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  _BYTE *v11;
  _BYTE *v12;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 4uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v8, 4uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v9, 4uLL, 0), !(_DWORD)result))
          {
            v10 = (const void *)*((_QWORD *)this + 13);
            if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 7, v10, 1uLL, 0), !(_DWORD)result))
            {
              v11 = (_BYTE *)*((_QWORD *)this + 14);
              if (!v11
                || (v12 = (_BYTE *)*((_QWORD *)this + 15), v11 == v12)
                || (result = AriMsg::pack(*((AriMsg **)this + 6), 8, v11, v12 - v11, 0), !(_DWORD)result))
              {
                result = 0;
                *a2 = (AriMsg *)*((_QWORD *)this + 6);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIImsMERtcpSDESReportIndCb_SDK::unpack(AriSdk::ARI_IBIImsMERtcpSDESReportIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  _BYTE *v11;
  _OWORD *v12;
  void **v13;
  _BYTE *v14;
  void *v15;
  const char *v16;
  BOOL *v17;
  void *v18;
  void *__p;
  _BYTE *v21;
  uint64_t v22;
  size_t __sz;
  BOOL v24;
  BOOL v25[8];
  char v26;

  v25[0] = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v2, 4, v25, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v25[0];
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v25[0] = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, v25, 0);
  if ((_DWORD)v3 || !v25[0])
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v25[0] = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 4, v25, 0);
  if ((_DWORD)v3 || !v25[0])
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  }
  v25[0] = 0;
  v7 = (_DWORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v7, 4, v25, 0);
  if ((_DWORD)v3 || !v25[0])
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 11, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  }
  v25[0] = 0;
  v8 = (_DWORD *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v8, 4, v25, 0);
  if ((_DWORD)v3 || !v25[0])
  {
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v9 = (_DWORD *)operator new();
    *v9 = *v8;
    v10 = *((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = v9;
    if (v10)
      MEMORY[0x212BB9B60](v10, 0x1000C4052888210);
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  }
  v25[0] = 0;
  v11 = (_BYTE *)operator new();
  *v11 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 7, v11, 1, v25, 0);
  if ((_DWORD)v3 || !v25[0])
  {
    MEMORY[0x212BB9B60](v11, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 13, v11);
    MEMORY[0x212BB9B60](v11, 0x1000C4077774924);
  }
  v24 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v12 = (_OWORD *)operator new[]();
  *v12 = 0u;
  v12[1] = 0u;
  v12[2] = 0u;
  v12[3] = 0u;
  v12[4] = 0u;
  v12[5] = 0u;
  v12[6] = 0u;
  v12[7] = 0u;
  v12[8] = 0u;
  v12[9] = 0u;
  v12[10] = 0u;
  v12[11] = 0u;
  v12[12] = 0u;
  v12[13] = 0u;
  v12[14] = 0u;
  v12[15] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 8, v12, 256, &v24, &__sz);
  if (!(_DWORD)v3 && v24)
  {
    v21 = 0;
    v22 = 0;
    __p = 0;
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&__p, v12, (uint64_t)v12 + __sz, __sz);
    v13 = (void **)((char *)this + 112);
    v15 = __p;
    v14 = v21;
    if ((unint64_t)(v21 - (_BYTE *)__p) < 0x101)
    {
      v18 = *v13;
      if (*v13)
      {
        *((_QWORD *)this + 15) = v18;
        operator delete(v18);
        *v13 = 0;
        *((_QWORD *)this + 15) = 0;
        *((_QWORD *)this + 16) = 0;
        v15 = __p;
        v14 = v21;
      }
      *((_QWORD *)this + 14) = v15;
      *((_QWORD *)this + 15) = v14;
      *((_QWORD *)this + 16) = v22;
    }
    else
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)v25);
      if (v26 >= 0)
        v17 = v25;
      else
        v17 = *(BOOL **)v25;
      Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v16, v17, 360, (char *)this + 112, v21 - (_BYTE *)__p, 256);
      if (v26 < 0)
        operator delete(*(void **)v25);
      if (__p)
      {
        v21 = __p;
        operator delete(__p);
      }
    }
  }
  MEMORY[0x212BB9B48](v12, 0x1000C8077774924);
  return v3;
}

void sub_20E270F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;

  if (*(char *)(v17 - 33) < 0)
    operator delete(*(void **)(v17 - 56));
  if (__p)
    operator delete(__p);
  MEMORY[0x212BB9B48](v16, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIImsMERtcpSDESReportIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIImsMERtcpSDESReportIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1166147584;
}

double AriSdk::ARI_IBIImsMERtcpSenderReportIndCb_SDK::ARI_IBIImsMERtcpSenderReportIndCb_SDK(AriSdk::ARI_IBIImsMERtcpSenderReportIndCb_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x45810000u, 0);
  *(_QWORD *)v1 = &off_24C90E6D8;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x45810000u, 0);
  *(_QWORD *)v1 = &off_24C90E6D8;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  return result;
}

double AriSdk::ARI_IBIImsMERtcpSenderReportIndCb_SDK::ARI_IBIImsMERtcpSenderReportIndCb_SDK(AriSdk::ARI_IBIImsMERtcpSenderReportIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C90E6D8;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C90E6D8;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  return result;
}

void AriSdk::ARI_IBIImsMERtcpSenderReportIndCb_SDK::~ARI_IBIImsMERtcpSenderReportIndCb_SDK(AriSdk::ARI_IBIImsMERtcpSenderReportIndCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = &off_24C90E6D8;
  v2 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  v5 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  v6 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  v7 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  v8 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v8)
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v9)
    MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIImsMERtcpSenderReportIndCb_SDK::~ARI_IBIImsMERtcpSenderReportIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIImsMERtcpSenderReportIndCb_SDK::pack(AriSdk::ARI_IBIImsMERtcpSenderReportIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 4uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v8, 4uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v9, 4uLL, 0), !(_DWORD)result))
          {
            v10 = (const void *)*((_QWORD *)this + 13);
            if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 7, v10, 4uLL, 0), !(_DWORD)result))
            {
              v11 = (const void *)*((_QWORD *)this + 14);
              if (!v11 || (result = AriMsg::pack(*((AriMsg **)this + 6), 8, v11, 4uLL, 0), !(_DWORD)result))
              {
                v12 = (const void *)*((_QWORD *)this + 15);
                if (!v12 || (result = AriMsg::pack(*((AriMsg **)this + 6), 9, v12, 4uLL, 0), !(_DWORD)result))
                {
                  result = 0;
                  *a2 = (AriMsg *)*((_QWORD *)this + 6);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIImsMERtcpSenderReportIndCb_SDK::unpack(AriSdk::ARI_IBIImsMERtcpSenderReportIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;

  v20 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v2, 4, &v20, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v20;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v19 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v19, 0);
  if ((_DWORD)v3 || !v19)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v18 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 4, &v18, 0);
  if ((_DWORD)v3 || !v18)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  }
  v17 = 0;
  v7 = (_DWORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v7, 4, &v17, 0);
  if ((_DWORD)v3 || !v17)
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 11, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  }
  v16 = 0;
  v8 = (_DWORD *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v8, 4, &v16, 0);
  if ((_DWORD)v3 || !v16)
  {
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 12, v8);
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  }
  v15 = 0;
  v9 = (_DWORD *)operator new();
  *v9 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 7, v9, 4, &v15, 0);
  if ((_DWORD)v3 || !v15)
  {
    MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 13, v9);
    MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
  }
  v14 = 0;
  v10 = (_DWORD *)operator new();
  *v10 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 8, v10, 4, &v14, 0);
  if ((_DWORD)v3 || !v14)
  {
    MEMORY[0x212BB9B60](v10, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 14, v10);
    MEMORY[0x212BB9B60](v10, 0x1000C4052888210);
  }
  v13 = 0;
  v11 = (_DWORD *)operator new();
  *v11 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 9, v11, 4, &v13, 0);
  if (!(_DWORD)v3 && v13)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 15, v11);
  MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
  return v3;
}

void sub_20E271820(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIImsMERtcpSenderReportIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIImsMERtcpSenderReportIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1166082048;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMEStartDTMFCodeReq_SDK::ARI_IBIImsMEStartDTMFCodeReq_SDK(AriSdk::ARI_IBIImsMEStartDTMFCodeReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x44828000u, 0);
  *(_QWORD *)result = &off_24C90E710;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x44828000u, 0);
  *(_QWORD *)result = &off_24C90E710;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMEStartDTMFCodeReq_SDK::ARI_IBIImsMEStartDTMFCodeReq_SDK(AriSdk::ARI_IBIImsMEStartDTMFCodeReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E710;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E710;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBIImsMEStartDTMFCodeReq_SDK::~ARI_IBIImsMEStartDTMFCodeReq_SDK(AriSdk::ARI_IBIImsMEStartDTMFCodeReq_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C90E710;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIImsMEStartDTMFCodeReq_SDK::~ARI_IBIImsMEStartDTMFCodeReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIImsMEStartDTMFCodeReq_SDK::pack(AriSdk::ARI_IBIImsMEStartDTMFCodeReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIImsMEStartDTMFCodeReq_SDK::unpack(AriSdk::ARI_IBIImsMEStartDTMFCodeReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E271BA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIImsMEStartDTMFCodeReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIImsMEStartDTMFCodeReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1149403136;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMEStartDTMFCodeRspCb_SDK::ARI_IBIImsMEStartDTMFCodeRspCb_SDK(AriSdk::ARI_IBIImsMEStartDTMFCodeRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x45028000u, 0);
  *(_QWORD *)result = &off_24C90E748;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x45028000u, 0);
  *(_QWORD *)result = &off_24C90E748;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMEStartDTMFCodeRspCb_SDK::ARI_IBIImsMEStartDTMFCodeRspCb_SDK(AriSdk::ARI_IBIImsMEStartDTMFCodeRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E748;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E748;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIImsMEStartDTMFCodeRspCb_SDK::~ARI_IBIImsMEStartDTMFCodeRspCb_SDK(AriSdk::ARI_IBIImsMEStartDTMFCodeRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C90E748;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIImsMEStartDTMFCodeRspCb_SDK::~ARI_IBIImsMEStartDTMFCodeRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIImsMEStartDTMFCodeRspCb_SDK::pack(AriSdk::ARI_IBIImsMEStartDTMFCodeRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v7, 4uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIImsMEStartDTMFCodeRspCb_SDK::unpack(AriSdk::ARI_IBIImsMEStartDTMFCodeRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v5, 4, &v9, 0);
  if ((_DWORD)v3 || !v9)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v8 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v6, 4, &v8, 0);
  if (!(_DWORD)v3 && v8)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  return v3;
}

void sub_20E271FE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIImsMEStartDTMFCodeRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIImsMEStartDTMFCodeRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1157791744;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMEStartMediaReq_SDK::ARI_IBIImsMEStartMediaReq_SDK(AriSdk::ARI_IBIImsMEStartMediaReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x44810000u, 0);
  *(_QWORD *)result = &off_24C90E780;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x44810000u, 0);
  *(_QWORD *)result = &off_24C90E780;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMEStartMediaReq_SDK::ARI_IBIImsMEStartMediaReq_SDK(AriSdk::ARI_IBIImsMEStartMediaReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E780;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E780;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIImsMEStartMediaReq_SDK::~ARI_IBIImsMEStartMediaReq_SDK(AriSdk::ARI_IBIImsMEStartMediaReq_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C90E780;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIImsMEStartMediaReq_SDK::~ARI_IBIImsMEStartMediaReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIImsMEStartMediaReq_SDK::pack(AriSdk::ARI_IBIImsMEStartMediaReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_IBIImsMEStartMediaReq_SDK::unpack(AriSdk::ARI_IBIImsMEStartMediaReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E272270(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIImsMEStartMediaReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIImsMEStartMediaReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1149304832;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMEStartMediaRspCb_SDK::ARI_IBIImsMEStartMediaRspCb_SDK(AriSdk::ARI_IBIImsMEStartMediaRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x45010000u, 0);
  *(_QWORD *)result = &off_24C90E7B8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x45010000u, 0);
  *(_QWORD *)result = &off_24C90E7B8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMEStartMediaRspCb_SDK::ARI_IBIImsMEStartMediaRspCb_SDK(AriSdk::ARI_IBIImsMEStartMediaRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E7B8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E7B8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBIImsMEStartMediaRspCb_SDK::~ARI_IBIImsMEStartMediaRspCb_SDK(AriSdk::ARI_IBIImsMEStartMediaRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C90E7B8;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIImsMEStartMediaRspCb_SDK::~ARI_IBIImsMEStartMediaRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIImsMEStartMediaRspCb_SDK::pack(AriSdk::ARI_IBIImsMEStartMediaRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIImsMEStartMediaRspCb_SDK::unpack(AriSdk::ARI_IBIImsMEStartMediaRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E2725B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIImsMEStartMediaRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIImsMEStartMediaRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1157693440;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMEStopDTMFCodeReq_SDK::ARI_IBIImsMEStopDTMFCodeReq_SDK(AriSdk::ARI_IBIImsMEStopDTMFCodeReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x44830000u, 0);
  *(_QWORD *)result = &off_24C90E7F0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x44830000u, 0);
  *(_QWORD *)result = &off_24C90E7F0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMEStopDTMFCodeReq_SDK::ARI_IBIImsMEStopDTMFCodeReq_SDK(AriSdk::ARI_IBIImsMEStopDTMFCodeReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E7F0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E7F0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIImsMEStopDTMFCodeReq_SDK::~ARI_IBIImsMEStopDTMFCodeReq_SDK(AriSdk::ARI_IBIImsMEStopDTMFCodeReq_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C90E7F0;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIImsMEStopDTMFCodeReq_SDK::~ARI_IBIImsMEStopDTMFCodeReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIImsMEStopDTMFCodeReq_SDK::pack(AriSdk::ARI_IBIImsMEStopDTMFCodeReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_IBIImsMEStopDTMFCodeReq_SDK::unpack(AriSdk::ARI_IBIImsMEStopDTMFCodeReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E272834(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIImsMEStopDTMFCodeReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIImsMEStopDTMFCodeReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1149435904;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMEStopDTMFCodeRspCb_SDK::ARI_IBIImsMEStopDTMFCodeRspCb_SDK(AriSdk::ARI_IBIImsMEStopDTMFCodeRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x45030000u, 0);
  *(_QWORD *)result = &off_24C90E828;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x45030000u, 0);
  *(_QWORD *)result = &off_24C90E828;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMEStopDTMFCodeRspCb_SDK::ARI_IBIImsMEStopDTMFCodeRspCb_SDK(AriSdk::ARI_IBIImsMEStopDTMFCodeRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E828;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E828;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIImsMEStopDTMFCodeRspCb_SDK::~ARI_IBIImsMEStopDTMFCodeRspCb_SDK(AriSdk::ARI_IBIImsMEStopDTMFCodeRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C90E828;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIImsMEStopDTMFCodeRspCb_SDK::~ARI_IBIImsMEStopDTMFCodeRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIImsMEStopDTMFCodeRspCb_SDK::pack(AriSdk::ARI_IBIImsMEStopDTMFCodeRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v7, 4uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIImsMEStopDTMFCodeRspCb_SDK::unpack(AriSdk::ARI_IBIImsMEStopDTMFCodeRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v5, 4, &v9, 0);
  if ((_DWORD)v3 || !v9)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v8 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v6, 4, &v8, 0);
  if (!(_DWORD)v3 && v8)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  return v3;
}

void sub_20E272C60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIImsMEStopDTMFCodeRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIImsMEStopDTMFCodeRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1157824512;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMEStopMediaReq_SDK::ARI_IBIImsMEStopMediaReq_SDK(AriSdk::ARI_IBIImsMEStopMediaReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x44818000u, 0);
  *(_QWORD *)result = &off_24C90E860;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x44818000u, 0);
  *(_QWORD *)result = &off_24C90E860;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMEStopMediaReq_SDK::ARI_IBIImsMEStopMediaReq_SDK(AriSdk::ARI_IBIImsMEStopMediaReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E860;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E860;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIImsMEStopMediaReq_SDK::~ARI_IBIImsMEStopMediaReq_SDK(AriSdk::ARI_IBIImsMEStopMediaReq_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C90E860;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIImsMEStopMediaReq_SDK::~ARI_IBIImsMEStopMediaReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIImsMEStopMediaReq_SDK::pack(AriSdk::ARI_IBIImsMEStopMediaReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_IBIImsMEStopMediaReq_SDK::unpack(AriSdk::ARI_IBIImsMEStopMediaReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E272EEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIImsMEStopMediaReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIImsMEStopMediaReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1149337600;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMEStopMediaRspCb_SDK::ARI_IBIImsMEStopMediaRspCb_SDK(AriSdk::ARI_IBIImsMEStopMediaRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x45018000u, 0);
  *(_QWORD *)result = &off_24C90E898;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x45018000u, 0);
  *(_QWORD *)result = &off_24C90E898;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMEStopMediaRspCb_SDK::ARI_IBIImsMEStopMediaRspCb_SDK(AriSdk::ARI_IBIImsMEStopMediaRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E898;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E898;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBIImsMEStopMediaRspCb_SDK::~ARI_IBIImsMEStopMediaRspCb_SDK(AriSdk::ARI_IBIImsMEStopMediaRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C90E898;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIImsMEStopMediaRspCb_SDK::~ARI_IBIImsMEStopMediaRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIImsMEStopMediaRspCb_SDK::pack(AriSdk::ARI_IBIImsMEStopMediaRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIImsMEStopMediaRspCb_SDK::unpack(AriSdk::ARI_IBIImsMEStopMediaRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E273240(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIImsMEStopMediaRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIImsMEStopMediaRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1157726208;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMETerminateMediaSessionReq_SDK::ARI_IBIImsMETerminateMediaSessionReq_SDK(AriSdk::ARI_IBIImsMETerminateMediaSessionReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x44820000u, 0);
  *(_QWORD *)result = &off_24C90E8D0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x44820000u, 0);
  *(_QWORD *)result = &off_24C90E8D0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMETerminateMediaSessionReq_SDK::ARI_IBIImsMETerminateMediaSessionReq_SDK(AriSdk::ARI_IBIImsMETerminateMediaSessionReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E8D0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E8D0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIImsMETerminateMediaSessionReq_SDK::~ARI_IBIImsMETerminateMediaSessionReq_SDK(AriSdk::ARI_IBIImsMETerminateMediaSessionReq_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C90E8D0;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIImsMETerminateMediaSessionReq_SDK::~ARI_IBIImsMETerminateMediaSessionReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIImsMETerminateMediaSessionReq_SDK::pack(AriSdk::ARI_IBIImsMETerminateMediaSessionReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_IBIImsMETerminateMediaSessionReq_SDK::unpack(AriSdk::ARI_IBIImsMETerminateMediaSessionReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E2734C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIImsMETerminateMediaSessionReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIImsMETerminateMediaSessionReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1149370368;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMETerminateMediaSessionRspCb_SDK::ARI_IBIImsMETerminateMediaSessionRspCb_SDK(AriSdk::ARI_IBIImsMETerminateMediaSessionRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x45020000u, 0);
  *(_QWORD *)result = &off_24C90E908;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x45020000u, 0);
  *(_QWORD *)result = &off_24C90E908;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIImsMETerminateMediaSessionRspCb_SDK::ARI_IBIImsMETerminateMediaSessionRspCb_SDK(AriSdk::ARI_IBIImsMETerminateMediaSessionRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E908;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E908;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBIImsMETerminateMediaSessionRspCb_SDK::~ARI_IBIImsMETerminateMediaSessionRspCb_SDK(AriSdk::ARI_IBIImsMETerminateMediaSessionRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C90E908;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIImsMETerminateMediaSessionRspCb_SDK::~ARI_IBIImsMETerminateMediaSessionRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIImsMETerminateMediaSessionRspCb_SDK::pack(AriSdk::ARI_IBIImsMETerminateMediaSessionRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIImsMETerminateMediaSessionRspCb_SDK::unpack(AriSdk::ARI_IBIImsMETerminateMediaSessionRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E273808(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIImsMETerminateMediaSessionRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIImsMETerminateMediaSessionRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1157758976;
}

double AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK(AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x44860000u, 0);
  *(_QWORD *)v1 = &off_24C90E940;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  *((_OWORD *)v1 + 11) = 0u;
  *((_QWORD *)v1 + 24) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x44860000u, 0);
  *(_QWORD *)v1 = &off_24C90E940;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  *((_OWORD *)v1 + 11) = 0u;
  *((_QWORD *)v1 + 24) = 0;
  return result;
}

double AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK(AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C90E940;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *((_QWORD *)v3 + 24) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C90E940;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *((_QWORD *)v3 + 24) = 0;
  return result;
}

void AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK::~ARI_IBISipMsgInjectToCpIMSTraceReq_SDK(AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = &off_24C90E940;
  v2 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = (void *)*((_QWORD *)this + 21);
  if (v3)
  {
    *((_QWORD *)this + 22) = v3;
    operator delete(v3);
  }
  v4 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C40BDFB0063);
  v5 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  v6 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  v7 = (void *)*((_QWORD *)this + 15);
  if (v7)
  {
    *((_QWORD *)this + 16) = v7;
    operator delete(v7);
  }
  v8 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v8)
    MEMORY[0x212BB9B60](v8, 0x1000C4077774924);
  v9 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v9)
    MEMORY[0x212BB9B60](v9, 0x1000C4077774924);
  v10 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v10)
    MEMORY[0x212BB9B60](v10, 0x1000C40BDFB0063);
  v11 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v11)
    MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
  v12 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v12)
    MEMORY[0x212BB9B60](v12, 0x1000C4052888210);
  v13 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v13)
    MEMORY[0x212BB9B60](v13, 0x1000C4052888210);
  v14 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v14)
    MEMORY[0x212BB9B60](v14, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK::~ARI_IBISipMsgInjectToCpIMSTraceReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK::pack(AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  _BYTE *v12;
  _BYTE *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  _BYTE *v17;
  _BYTE *v18;
  const void *v19;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 4uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v8, 4uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v9, 2uLL, 0), !(_DWORD)result))
          {
            v10 = (const void *)*((_QWORD *)this + 13);
            if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 7, v10, 1uLL, 0), !(_DWORD)result))
            {
              v11 = (const void *)*((_QWORD *)this + 14);
              if (!v11 || (result = AriMsg::pack(*((AriMsg **)this + 6), 8, v11, 1uLL, 0), !(_DWORD)result))
              {
                v12 = (_BYTE *)*((_QWORD *)this + 15);
                if (!v12
                  || (v13 = (_BYTE *)*((_QWORD *)this + 16), v12 == v13)
                  || (result = AriMsg::pack(*((AriMsg **)this + 6), 9, v12, v13 - v12, 0), !(_DWORD)result))
                {
                  v14 = (const void *)*((_QWORD *)this + 18);
                  if (!v14 || (result = AriMsg::pack(*((AriMsg **)this + 6), 10, v14, 4uLL, 0), !(_DWORD)result))
                  {
                    v15 = (const void *)*((_QWORD *)this + 19);
                    if (!v15 || (result = AriMsg::pack(*((AriMsg **)this + 6), 11, v15, 4uLL, 0), !(_DWORD)result))
                    {
                      v16 = (const void *)*((_QWORD *)this + 20);
                      if (!v16 || (result = AriMsg::pack(*((AriMsg **)this + 6), 12, v16, 2uLL, 0), !(_DWORD)result))
                      {
                        v17 = (_BYTE *)*((_QWORD *)this + 21);
                        if (!v17
                          || (v18 = (_BYTE *)*((_QWORD *)this + 22), v17 == v18)
                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 13, v17, v18 - v17, 0), !(_DWORD)result))
                        {
                          v19 = (const void *)*((_QWORD *)this + 24);
                          if (!v19
                            || (result = AriMsg::pack(*((AriMsg **)this + 6), 14, v19, 4uLL, 0), !(_DWORD)result))
                          {
                            result = 0;
                            *a2 = (AriMsg *)*((_QWORD *)this + 6);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK::unpack(AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _WORD *v8;
  _BYTE *v9;
  _BYTE *v10;
  _OWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _WORD *v14;
  void *v15;
  _DWORD *v16;
  __n128 __p;
  uint64_t v19;
  size_t __sz;
  BOOL v21;

  __p.n128_u8[0] = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = __p.n128_u8[0] == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v7 = (_DWORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v7, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 11, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v8 = (_WORD *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v8, 2, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v8, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 12, v8);
    MEMORY[0x212BB9B60](v8, 0x1000C40BDFB0063);
  }
  __p.n128_u8[0] = 0;
  v9 = (_BYTE *)operator new();
  *v9 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 7, v9, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v9, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 13, v9);
    MEMORY[0x212BB9B60](v9, 0x1000C4077774924);
  }
  __p.n128_u8[0] = 0;
  v10 = (_BYTE *)operator new();
  *v10 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 8, v10, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v10, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 14, v10);
    MEMORY[0x212BB9B60](v10, 0x1000C4077774924);
  }
  v21 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v11 = (_OWORD *)operator new[]();
  *v11 = 0u;
  v11[1] = 0u;
  v11[2] = 0u;
  v11[3] = 0u;
  v11[4] = 0u;
  v11[5] = 0u;
  v11[6] = 0u;
  v11[7] = 0u;
  *((_BYTE *)v11 + 128) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 9, v11, 129, &v21, &__sz);
  if ((_DWORD)v3 || !v21)
  {
    MEMORY[0x212BB9B48](v11, 0x1000C8077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v19 = 0;
    __p = 0uLL;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v11, (uint64_t)v11 + __sz, __sz);
    AriSdk::TlvArray<unsigned char,129ul>::operator=((std::vector<int> *)this + 5, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    MEMORY[0x212BB9B48](v11, 0x1000C8077774924);
  }
  __p.n128_u8[0] = 0;
  v12 = (_DWORD *)operator new();
  *v12 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 10, v12, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v12, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 18, v12);
    MEMORY[0x212BB9B60](v12, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v13 = (_DWORD *)operator new();
  *v13 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 11, v13, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v13, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 19, v13);
    MEMORY[0x212BB9B60](v13, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v14 = (_WORD *)operator new();
  *v14 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 12, v14, 2, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v14, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 20, v14);
    MEMORY[0x212BB9B60](v14, 0x1000C40BDFB0063);
  }
  v21 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v15 = (void *)operator new[]();
  bzero(v15, 0x7D1uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 13, v15, 2001, &v21, &__sz);
  if ((_DWORD)v3 || !v21)
  {
    MEMORY[0x212BB9B48](v15, 0x1000C8077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v19 = 0;
    __p = 0uLL;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v15, (uint64_t)v15 + __sz, __sz);
    AriSdk::TlvArray<unsigned char,2001ul>::operator=((std::vector<int> *)this + 7, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    MEMORY[0x212BB9B48](v15, 0x1000C8077774924);
  }
  __p.n128_u8[0] = 0;
  v16 = (_DWORD *)operator new();
  *v16 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 14, v16, 4, (BOOL *)&__p, 0);
  if (!(_DWORD)v3 && __p.n128_u8[0])
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 24, v16);
  MEMORY[0x212BB9B60](v16, 0x1000C4052888210);
  return v3;
}

void sub_20E27453C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

std::vector<int> *AriSdk::TlvArray<unsigned char,129ul>::operator=(std::vector<int> *this, __n128 *__c)
{
  const char *v4;
  void **v5;
  void *__p[2];
  char v8;

  if (__c->n128_u64[1] - __c->n128_u64[0] < 0x82)
  {
    std::vector<char>::__move_assign((uint64_t)this, __c);
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v8 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v4, v5, 360, this, __c->n128_u64[1] - __c->n128_u64[0], 129);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_20E2746D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::vector<int> *AriSdk::TlvArray<unsigned char,2001ul>::operator=(std::vector<int> *this, __n128 *__c)
{
  const char *v4;
  void **v5;
  void *__p[2];
  char v8;

  if (__c->n128_u64[1] - __c->n128_u64[0] < 0x7D2)
  {
    std::vector<char>::__move_assign((uint64_t)this, __c);
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v8 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v4, v5, 360, this, __c->n128_u64[1] - __c->n128_u64[0], 2001);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_20E2747B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1149632512;
}

AriSdk::MsgBase *AriSdk::ARI_IBISipMsgInjectToCpIMSTraceRsbCb_SDK::ARI_IBISipMsgInjectToCpIMSTraceRsbCb_SDK(AriSdk::ARI_IBISipMsgInjectToCpIMSTraceRsbCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x45060000u, 0);
  *(_QWORD *)result = &off_24C90E978;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x45060000u, 0);
  *(_QWORD *)result = &off_24C90E978;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBISipMsgInjectToCpIMSTraceRsbCb_SDK::ARI_IBISipMsgInjectToCpIMSTraceRsbCb_SDK(AriSdk::ARI_IBISipMsgInjectToCpIMSTraceRsbCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E978;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90E978;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBISipMsgInjectToCpIMSTraceRsbCb_SDK::~ARI_IBISipMsgInjectToCpIMSTraceRsbCb_SDK(AriSdk::ARI_IBISipMsgInjectToCpIMSTraceRsbCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C90E978;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBISipMsgInjectToCpIMSTraceRsbCb_SDK::~ARI_IBISipMsgInjectToCpIMSTraceRsbCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBISipMsgInjectToCpIMSTraceRsbCb_SDK::pack(AriSdk::ARI_IBISipMsgInjectToCpIMSTraceRsbCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBISipMsgInjectToCpIMSTraceRsbCb_SDK::unpack(AriSdk::ARI_IBISipMsgInjectToCpIMSTraceRsbCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E274AEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBISipMsgInjectToCpIMSTraceRsbCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBISipMsgInjectToCpIMSTraceRsbCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1158021120;
}

double AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK::ARI_IBISipMessageInjectToCpTrace_SDK(AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x44848000u, 1);
  *(_QWORD *)v1 = &off_24C90E9B0;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  *((_QWORD *)v1 + 22) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x44848000u, 1);
  *(_QWORD *)v1 = &off_24C90E9B0;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  *((_QWORD *)v1 + 22) = 0;
  return result;
}

double AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK::ARI_IBISipMessageInjectToCpTrace_SDK(AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C90E9B0;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_QWORD *)v3 + 22) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C90E9B0;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_QWORD *)v3 + 22) = 0;
  return result;
}

void AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK::~ARI_IBISipMessageInjectToCpTrace_SDK(AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = &off_24C90E9B0;
  v2 = (void *)*((_QWORD *)this + 20);
  if (v2)
  {
    *((_QWORD *)this + 21) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C40BDFB0063);
  v4 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  v5 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  v6 = (void *)*((_QWORD *)this + 14);
  if (v6)
  {
    *((_QWORD *)this + 15) = v6;
    operator delete(v6);
  }
  v7 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C4077774924);
  v8 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v8)
    MEMORY[0x212BB9B60](v8, 0x1000C4077774924);
  v9 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v9)
    MEMORY[0x212BB9B60](v9, 0x1000C40BDFB0063);
  v10 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v10)
    MEMORY[0x212BB9B60](v10, 0x1000C4052888210);
  v11 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v11)
    MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
  v12 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v12)
    MEMORY[0x212BB9B60](v12, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK::~ARI_IBISipMessageInjectToCpTrace_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK::pack(AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  _BYTE *v11;
  _BYTE *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  _BYTE *v16;
  _BYTE *v17;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v7, 4uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v8, 2uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 7, v9, 1uLL, 0), !(_DWORD)result))
          {
            v10 = (const void *)*((_QWORD *)this + 13);
            if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 8, v10, 1uLL, 0), !(_DWORD)result))
            {
              v11 = (_BYTE *)*((_QWORD *)this + 14);
              if (!v11
                || (v12 = (_BYTE *)*((_QWORD *)this + 15), v11 == v12)
                || (result = AriMsg::pack(*((AriMsg **)this + 6), 9, v11, v12 - v11, 0), !(_DWORD)result))
              {
                v13 = (const void *)*((_QWORD *)this + 17);
                if (!v13 || (result = AriMsg::pack(*((AriMsg **)this + 6), 10, v13, 4uLL, 0), !(_DWORD)result))
                {
                  v14 = (const void *)*((_QWORD *)this + 18);
                  if (!v14 || (result = AriMsg::pack(*((AriMsg **)this + 6), 11, v14, 4uLL, 0), !(_DWORD)result))
                  {
                    v15 = (const void *)*((_QWORD *)this + 19);
                    if (!v15 || (result = AriMsg::pack(*((AriMsg **)this + 6), 12, v15, 2uLL, 0), !(_DWORD)result))
                    {
                      v16 = (_BYTE *)*((_QWORD *)this + 20);
                      if (!v16
                        || (v17 = (_BYTE *)*((_QWORD *)this + 21), v16 == v17)
                        || (result = AriMsg::pack(*((AriMsg **)this + 6), 13, v16, v17 - v16, 0), !(_DWORD)result))
                      {
                        result = 0;
                        *a2 = (AriMsg *)*((_QWORD *)this + 6);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK::unpack(AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  _WORD *v7;
  _BYTE *v8;
  _BYTE *v9;
  _OWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _WORD *v13;
  void *v14;
  __n128 __p;
  uint64_t v17;
  size_t __sz;
  BOOL v19;

  __p.n128_u8[0] = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v2, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = __p.n128_u8[0] == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v5, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v6, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v7 = (_WORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v7, 2, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v7, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 11, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C40BDFB0063);
  }
  __p.n128_u8[0] = 0;
  v8 = (_BYTE *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 7, v8, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v8, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 12, v8);
    MEMORY[0x212BB9B60](v8, 0x1000C4077774924);
  }
  __p.n128_u8[0] = 0;
  v9 = (_BYTE *)operator new();
  *v9 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 8, v9, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v9, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 13, v9);
    MEMORY[0x212BB9B60](v9, 0x1000C4077774924);
  }
  v19 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v10 = (_OWORD *)operator new[]();
  *v10 = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  v10[3] = 0u;
  v10[4] = 0u;
  v10[5] = 0u;
  v10[6] = 0u;
  v10[7] = 0u;
  *((_BYTE *)v10 + 128) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 9, v10, 129, &v19, &__sz);
  if ((_DWORD)v3 || !v19)
  {
    MEMORY[0x212BB9B48](v10, 0x1000C8077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v17 = 0;
    __p = 0uLL;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v10, (uint64_t)v10 + __sz, __sz);
    AriSdk::TlvArray<unsigned char,129ul>::operator=((std::vector<int> *)((char *)this + 112), &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    MEMORY[0x212BB9B48](v10, 0x1000C8077774924);
  }
  __p.n128_u8[0] = 0;
  v11 = (_DWORD *)operator new();
  *v11 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 10, v11, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 17, v11);
    MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v12 = (_DWORD *)operator new();
  *v12 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 11, v12, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v12, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 18, v12);
    MEMORY[0x212BB9B60](v12, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v13 = (_WORD *)operator new();
  *v13 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 12, v13, 2, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v13, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 19, v13);
    MEMORY[0x212BB9B60](v13, 0x1000C40BDFB0063);
  }
  v19 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v14 = (void *)operator new[]();
  bzero(v14, 0x7D1uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 13, v14, 2001, &v19, &__sz);
  if (!(_DWORD)v3 && v19)
  {
    v17 = 0;
    __p = 0uLL;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v14, (uint64_t)v14 + __sz, __sz);
    AriSdk::TlvArray<unsigned char,2001ul>::operator=((std::vector<int> *)((char *)this + 160), &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
  }
  MEMORY[0x212BB9B48](v14, 0x1000C8077774924);
  return v3;
}

void sub_20E275680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x212BB9B48](v11, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK::hasDeclaredGmid(AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1149534208;
}

_QWORD *std::vector<IBIImsMEAudioCodec>::__init_with_size[abi:ne180100]<IBIImsMEAudioCodec*,IBIImsMEAudioCodec*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v7 = result;
    result = operator new(48 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[6 * a4];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_20E2757EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<IBIImsMEAudioEVSCodec>::__init_with_size[abi:ne180100]<IBIImsMEAudioEVSCodec*,IBIImsMEAudioEVSCodec*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v7 = result;
    result = operator new(80 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[10 * a4];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_20E275884(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<IBIImsMERTTCodec>::__init_with_size[abi:ne180100]<IBIImsMERTTCodec*,IBIImsMERTTCodec*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v7 = result;
    result = operator new(16 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[2 * a4];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_20E275914(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ARI_IBINetDcIPCan_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetDcIPCan_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetDcImsRegistrationEndCause_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetDcImsRegistrationEndCause_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetDcImsRegistrationState_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetDcImsRegistrationState_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetDcImsRegistrationStatus_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetDcImsRegistrationStatus_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetDcImsRegistrationType_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetDcImsRegistrationType_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetDcImsServiceType_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetDcImsServiceType_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetDcImsSessionStatus_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetDcImsSessionStatus_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetDcImsSignallingType_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetDcImsSignallingType_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetDcSsacBarringConfig_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetDcSsacBarringConfig_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetDcSsacBarringInfoResult_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetDcSsacBarringInfoResult_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetDcVoiceDomainPreference_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetDcVoiceDomainPreference_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetDcVoiceOverNRCapability_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetDcVoiceOverNRCapability_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetTimerStatus_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetTimerStatus_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetUacBarringStatus_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetUacBarringStatus_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetUacCheckResult_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetUacCheckResult_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetUacServiceType_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBINetUacServiceType_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

double AriSdk::ARI_CsiTraceAddMasksReq_SDK::ARI_CsiTraceAddMasksReq_SDK(AriSdk::ARI_CsiTraceAddMasksReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x5C820000u, 0);
  *(_QWORD *)v1 = &off_24C90FE68;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x5C820000u, 0);
  *(_QWORD *)v1 = &off_24C90FE68;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

double AriSdk::ARI_CsiTraceAddMasksReq_SDK::ARI_CsiTraceAddMasksReq_SDK(AriSdk::ARI_CsiTraceAddMasksReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C90FE68;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C90FE68;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

void AriSdk::ARI_CsiTraceAddMasksReq_SDK::~ARI_CsiTraceAddMasksReq_SDK(AriSdk::ARI_CsiTraceAddMasksReq_SDK *this)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C90FE68;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiTraceAddMasksReq_SDK::~ARI_CsiTraceAddMasksReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiTraceAddMasksReq_SDK::pack(AriSdk::ARI_CsiTraceAddMasksReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  _BYTE *v6;
  _BYTE *v7;
  BOOL v8;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (_BYTE *)*((_QWORD *)this + 9);
    v7 = (_BYTE *)*((_QWORD *)this + 10);
    if (v6)
      v8 = v6 == v7;
    else
      v8 = 1;
    if (v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, v7 - v6, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiTraceAddMasksReq_SDK::unpack(AriSdk::ARI_CsiTraceAddMasksReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  void *v5;
  __n128 __p;
  uint64_t v8;
  size_t __sz;
  BOOL v10;

  __p.n128_u8[0] = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = __p.n128_u8[0] == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v10 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v5 = (void *)operator new[]();
  bzero(v5, 0x3C0uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 960, &v10, &__sz);
  if (!(_DWORD)v3 && v10)
  {
    v8 = 0;
    __p = 0uLL;
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&__p, v5, (uint64_t)v5 + __sz, __sz);
    AriSdk::TlvArray<char,960ul>::operator=((std::vector<int> *)this + 3, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
  }
  MEMORY[0x212BB9B48](v5, 0x1000C8077774924);
  return v3;
}

void sub_20E275FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x212BB9B48](v11, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

std::vector<int> *AriSdk::TlvArray<char,960ul>::operator=(std::vector<int> *this, __n128 *__c)
{
  const char *v4;
  void **v5;
  void *__p[2];
  char v8;

  if (__c->n128_u64[1] - __c->n128_u64[0] < 0x3C1)
  {
    std::vector<char>::__move_assign((uint64_t)this, __c);
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v8 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v4, v5, 360, this, __c->n128_u64[1] - __c->n128_u64[0], 960);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_20E276114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL AriSdk::ARI_CsiTraceAddMasksReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiTraceAddMasksReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1552023552;
}

AriSdk::MsgBase *AriSdk::ARI_CsiTraceAddMasksRspCb_SDK::ARI_CsiTraceAddMasksRspCb_SDK(AriSdk::ARI_CsiTraceAddMasksRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x5D020000u, 0);
  *(_QWORD *)result = &off_24C90FEA0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x5D020000u, 0);
  *(_QWORD *)result = &off_24C90FEA0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiTraceAddMasksRspCb_SDK::ARI_CsiTraceAddMasksRspCb_SDK(AriSdk::ARI_CsiTraceAddMasksRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90FEA0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90FEA0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiTraceAddMasksRspCb_SDK::~ARI_CsiTraceAddMasksRspCb_SDK(AriSdk::ARI_CsiTraceAddMasksRspCb_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C90FEA0;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiTraceAddMasksRspCb_SDK::~ARI_CsiTraceAddMasksRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiTraceAddMasksRspCb_SDK::pack(AriSdk::ARI_CsiTraceAddMasksRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiTraceAddMasksRspCb_SDK::unpack(AriSdk::ARI_CsiTraceAddMasksRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E27637C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiTraceAddMasksRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_CsiTraceAddMasksRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1560412160;
}

double AriSdk::ARI_CsiTraceModeInitReq_SDK::ARI_CsiTraceModeInitReq_SDK(AriSdk::ARI_CsiTraceModeInitReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x5C810000u, 0);
  *(_QWORD *)v1 = &off_24C90FED8;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_QWORD *)v1 + 12) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x5C810000u, 0);
  *(_QWORD *)v1 = &off_24C90FED8;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_QWORD *)v1 + 12) = 0;
  return result;
}

double AriSdk::ARI_CsiTraceModeInitReq_SDK::ARI_CsiTraceModeInitReq_SDK(AriSdk::ARI_CsiTraceModeInitReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C90FED8;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_QWORD *)v3 + 12) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C90FED8;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_QWORD *)v3 + 12) = 0;
  return result;
}

void AriSdk::ARI_CsiTraceModeInitReq_SDK::~ARI_CsiTraceModeInitReq_SDK(AriSdk::ARI_CsiTraceModeInitReq_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_24C90FED8;
  v2 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  v5 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  v6 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiTraceModeInitReq_SDK::~ARI_CsiTraceModeInitReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiTraceModeInitReq_SDK::pack(AriSdk::ARI_CsiTraceModeInitReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 4uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v8, 4uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v9, 4uLL, 0), !(_DWORD)result))
          {
            result = 0;
            *a2 = (AriMsg *)*((_QWORD *)this + 6);
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiTraceModeInitReq_SDK::unpack(AriSdk::ARI_CsiTraceModeInitReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;

  v14 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v14, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v14;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v13 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v13, 0);
  if ((_DWORD)v3 || !v13)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v12 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 4, &v12, 0);
  if ((_DWORD)v3 || !v12)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  }
  v11 = 0;
  v7 = (_DWORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v7, 4, &v11, 0);
  if ((_DWORD)v3 || !v11)
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 11, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  }
  v10 = 0;
  v8 = (_DWORD *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v8, 4, &v10, 0);
  if (!(_DWORD)v3 && v10)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 12, v8);
  MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  return v3;
}

void sub_20E276960(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiTraceModeInitReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiTraceModeInitReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1551958016;
}

AriSdk::MsgBase *AriSdk::ARI_CsiTraceModeInitRspCb_SDK::ARI_CsiTraceModeInitRspCb_SDK(AriSdk::ARI_CsiTraceModeInitRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x5D010000u, 0);
  *(_QWORD *)result = &off_24C90FF10;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x5D010000u, 0);
  *(_QWORD *)result = &off_24C90FF10;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiTraceModeInitRspCb_SDK::ARI_CsiTraceModeInitRspCb_SDK(AriSdk::ARI_CsiTraceModeInitRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90FF10;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90FF10;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiTraceModeInitRspCb_SDK::~ARI_CsiTraceModeInitRspCb_SDK(AriSdk::ARI_CsiTraceModeInitRspCb_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C90FF10;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiTraceModeInitRspCb_SDK::~ARI_CsiTraceModeInitRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiTraceModeInitRspCb_SDK::pack(AriSdk::ARI_CsiTraceModeInitRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiTraceModeInitRspCb_SDK::unpack(AriSdk::ARI_CsiTraceModeInitRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E276BF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiTraceModeInitRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_CsiTraceModeInitRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1560346624;
}

double AriSdk::ARI_CsiTraceProfileInitReq_SDK::ARI_CsiTraceProfileInitReq_SDK(AriSdk::ARI_CsiTraceProfileInitReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x5C808000u, 0);
  *(_QWORD *)v1 = &off_24C90FF48;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x5C808000u, 0);
  *(_QWORD *)v1 = &off_24C90FF48;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  return result;
}

double AriSdk::ARI_CsiTraceProfileInitReq_SDK::ARI_CsiTraceProfileInitReq_SDK(AriSdk::ARI_CsiTraceProfileInitReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C90FF48;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C90FF48;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  return result;
}

void AriSdk::ARI_CsiTraceProfileInitReq_SDK::~ARI_CsiTraceProfileInitReq_SDK(AriSdk::ARI_CsiTraceProfileInitReq_SDK *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C90FF48;
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = (void *)*((_QWORD *)this + 9);
  if (v4)
  {
    *((_QWORD *)this + 10) = v4;
    operator delete(v4);
  }
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiTraceProfileInitReq_SDK::~ARI_CsiTraceProfileInitReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiTraceProfileInitReq_SDK::pack(AriSdk::ARI_CsiTraceProfileInitReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  _BYTE *v6;
  _BYTE *v7;
  BOOL v8;
  const void *v9;
  _BYTE *v10;
  _BYTE *v11;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (_BYTE *)*((_QWORD *)this + 9);
    v7 = (_BYTE *)*((_QWORD *)this + 10);
    v8 = !v6 || v6 == v7;
    if (v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, v7 - v6, 0), !(_DWORD)result))
    {
      v9 = (const void *)*((_QWORD *)this + 12);
      if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v9, 4uLL, 0), !(_DWORD)result))
      {
        v10 = (_BYTE *)*((_QWORD *)this + 13);
        if (!v10
          || (v11 = (_BYTE *)*((_QWORD *)this + 14), v10 == v11)
          || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v10, v11 - v10, 0), !(_DWORD)result))
        {
          result = 0;
          *a2 = (AriMsg *)*((_QWORD *)this + 6);
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiTraceProfileInitReq_SDK::unpack(AriSdk::ARI_CsiTraceProfileInitReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  void *v5;
  _DWORD *v6;
  void *v7;
  __n128 __p;
  uint64_t v10;
  size_t __sz;
  BOOL v12;

  __p.n128_u8[0] = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = __p.n128_u8[0] == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v12 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v5 = (void *)operator new[]();
  bzero(v5, 0x3C0uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 960, &v12, &__sz);
  if ((_DWORD)v3 || !v12)
  {
    MEMORY[0x212BB9B48](v5, 0x1000C8077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v10 = 0;
    __p = 0uLL;
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&__p, v5, (uint64_t)v5 + __sz, __sz);
    AriSdk::TlvArray<char,960ul>::operator=((std::vector<int> *)this + 3, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    MEMORY[0x212BB9B48](v5, 0x1000C8077774924);
  }
  __p.n128_u8[0] = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 12, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  }
  v12 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v7 = (void *)operator new[]();
  bzero(v7, 0x3C0uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v7, 960, &v12, &__sz);
  if (!(_DWORD)v3 && v12)
  {
    v10 = 0;
    __p = 0uLL;
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&__p, v7, (uint64_t)v7 + __sz, __sz);
    AriSdk::TlvArray<char,960ul>::operator=((std::vector<int> *)((char *)this + 104), &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
  }
  MEMORY[0x212BB9B48](v7, 0x1000C8077774924);
  return v3;
}

void sub_20E277170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x212BB9B48](v11, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiTraceProfileInitReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiTraceProfileInitReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1551925248;
}

AriSdk::MsgBase *AriSdk::ARI_CsiTraceProfileInitRspCb_SDK::ARI_CsiTraceProfileInitRspCb_SDK(AriSdk::ARI_CsiTraceProfileInitRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x5D008000u, 0);
  *(_QWORD *)result = &off_24C90FF80;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x5D008000u, 0);
  *(_QWORD *)result = &off_24C90FF80;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiTraceProfileInitRspCb_SDK::ARI_CsiTraceProfileInitRspCb_SDK(AriSdk::ARI_CsiTraceProfileInitRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90FF80;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90FF80;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiTraceProfileInitRspCb_SDK::~ARI_CsiTraceProfileInitRspCb_SDK(AriSdk::ARI_CsiTraceProfileInitRspCb_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C90FF80;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiTraceProfileInitRspCb_SDK::~ARI_CsiTraceProfileInitRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiTraceProfileInitRspCb_SDK::pack(AriSdk::ARI_CsiTraceProfileInitRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiTraceProfileInitRspCb_SDK::unpack(AriSdk::ARI_CsiTraceProfileInitRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E277440(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiTraceProfileInitRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_CsiTraceProfileInitRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1560313856;
}

double AriSdk::ARI_CsiTraceProfilePacketsReq_SDK::ARI_CsiTraceProfilePacketsReq_SDK(AriSdk::ARI_CsiTraceProfilePacketsReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x5C828000u, 0);
  *(_QWORD *)v1 = &off_24C90FFB8;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x5C828000u, 0);
  *(_QWORD *)v1 = &off_24C90FFB8;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  return result;
}

double AriSdk::ARI_CsiTraceProfilePacketsReq_SDK::ARI_CsiTraceProfilePacketsReq_SDK(AriSdk::ARI_CsiTraceProfilePacketsReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C90FFB8;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C90FFB8;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  return result;
}

void AriSdk::ARI_CsiTraceProfilePacketsReq_SDK::~ARI_CsiTraceProfilePacketsReq_SDK(AriSdk::ARI_CsiTraceProfilePacketsReq_SDK *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_24C90FFB8;
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  v5 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  v6 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C40BDFB0063);
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C40BDFB0063);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiTraceProfilePacketsReq_SDK::~ARI_CsiTraceProfilePacketsReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiTraceProfilePacketsReq_SDK::pack(AriSdk::ARI_CsiTraceProfilePacketsReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  _BYTE *v10;
  _BYTE *v11;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 2uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 2uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 4uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v8, 4uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v9, 4uLL, 0), !(_DWORD)result))
          {
            v10 = (_BYTE *)*((_QWORD *)this + 13);
            if (!v10
              || (v11 = (_BYTE *)*((_QWORD *)this + 14), v10 == v11)
              || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v10, v11 - v10, 0), !(_DWORD)result))
            {
              result = 0;
              *a2 = (AriMsg *)*((_QWORD *)this + 6);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiTraceProfilePacketsReq_SDK::unpack(AriSdk::ARI_CsiTraceProfilePacketsReq_SDK *this)
{
  _WORD *v2;
  uint64_t v3;
  BOOL v4;
  _WORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  void *v9;
  __n128 __p;
  uint64_t v12;
  size_t __sz;
  BOOL v14;

  __p.n128_u8[0] = 0;
  v2 = (_WORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 2, (BOOL *)&__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = __p.n128_u8[0] == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C40BDFB0063);
  }
  __p.n128_u8[0] = 0;
  v5 = (_WORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 2, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v5, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C40BDFB0063);
  }
  __p.n128_u8[0] = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v7 = (_DWORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v7, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 11, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v8 = (_DWORD *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v8, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 12, v8);
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  }
  v14 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v9 = (void *)operator new[]();
  bzero(v9, 0xF00uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v9, 3840, &v14, &__sz);
  if (!(_DWORD)v3 && v14)
  {
    v12 = 0;
    __p = 0uLL;
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&__p, v9, (uint64_t)v9 + __sz, __sz);
    AriSdk::TlvArray<char,3840ul>::operator=((std::vector<int> *)((char *)this + 104), &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
  }
  MEMORY[0x212BB9B48](v9, 0x1000C8077774924);
  return v3;
}

void sub_20E277B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x212BB9B48](v11, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

std::vector<int> *AriSdk::TlvArray<char,3840ul>::operator=(std::vector<int> *this, __n128 *__c)
{
  const char *v4;
  void **v5;
  void *__p[2];
  char v8;

  if (__c->n128_u64[1] - __c->n128_u64[0] < 0xF01)
  {
    std::vector<char>::__move_assign((uint64_t)this, __c);
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v8 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v4, v5, 360, this, __c->n128_u64[1] - __c->n128_u64[0], 3840);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_20E277C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL AriSdk::ARI_CsiTraceProfilePacketsReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiTraceProfilePacketsReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1552056320;
}

AriSdk::MsgBase *AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK::ARI_CsiTraceProfilePacketsRspCb_SDK(AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x5D028000u, 0);
  *(_QWORD *)result = &off_24C90FFF0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x5D028000u, 0);
  *(_QWORD *)result = &off_24C90FFF0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK::ARI_CsiTraceProfilePacketsRspCb_SDK(AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90FFF0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C90FFF0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK::~ARI_CsiTraceProfilePacketsRspCb_SDK(AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C90FFF0;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK::~ARI_CsiTraceProfilePacketsRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK::pack(AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK::unpack(AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E277EFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1560444928;
}

AriSdk::MsgBase *AriSdk::ARI_CsiTraceProfileSelectReq_SDK::ARI_CsiTraceProfileSelectReq_SDK(AriSdk::ARI_CsiTraceProfileSelectReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x5C818000u, 0);
  *(_QWORD *)result = &off_24C910028;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x5C818000u, 0);
  *(_QWORD *)result = &off_24C910028;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiTraceProfileSelectReq_SDK::ARI_CsiTraceProfileSelectReq_SDK(AriSdk::ARI_CsiTraceProfileSelectReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C910028;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C910028;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_CsiTraceProfileSelectReq_SDK::~ARI_CsiTraceProfileSelectReq_SDK(AriSdk::ARI_CsiTraceProfileSelectReq_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C910028;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiTraceProfileSelectReq_SDK::~ARI_CsiTraceProfileSelectReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiTraceProfileSelectReq_SDK::pack(AriSdk::ARI_CsiTraceProfileSelectReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiTraceProfileSelectReq_SDK::unpack(AriSdk::ARI_CsiTraceProfileSelectReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E278250(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiTraceProfileSelectReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiTraceProfileSelectReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1551990784;
}

AriSdk::MsgBase *AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK::ARI_CsiTraceProfileSelectRspCb_SDK(AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x5D018000u, 0);
  *(_QWORD *)result = &off_24C910060;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x5D018000u, 0);
  *(_QWORD *)result = &off_24C910060;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK::ARI_CsiTraceProfileSelectRspCb_SDK(AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C910060;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C910060;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK::~ARI_CsiTraceProfileSelectRspCb_SDK(AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C910060;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK::~ARI_CsiTraceProfileSelectRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK::pack(AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK::unpack(AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E2784D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1560379392;
}

AriSdk::MsgBase *AriSdk::ARI_CsiXsioGetReq_SDK::ARI_CsiXsioGetReq_SDK(AriSdk::ARI_CsiXsioGetReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x5C890000u, 0);
  *(_QWORD *)result = &off_24C910098;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x5C890000u, 0);
  *(_QWORD *)result = &off_24C910098;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiXsioGetReq_SDK::ARI_CsiXsioGetReq_SDK(AriSdk::ARI_CsiXsioGetReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C910098;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C910098;
  return result;
}

void AriSdk::ARI_CsiXsioGetReq_SDK::~ARI_CsiXsioGetReq_SDK(AriSdk::ARI_CsiXsioGetReq_SDK *this)
{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiXsioGetReq_SDK::pack(AriSdk::ARI_CsiXsioGetReq_SDK *this, AriMsg **a2)
{
  *a2 = 0;
  *a2 = (AriMsg *)*((_QWORD *)this + 6);
  return 0;
}

uint64_t AriSdk::ARI_CsiXsioGetReq_SDK::unpack(AriSdk::ARI_CsiXsioGetReq_SDK *this)
{
  return 0;
}

BOOL AriSdk::ARI_CsiXsioGetReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiXsioGetReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1552482304;
}

AriSdk::MsgBase *AriSdk::ARI_CsiXsioGetRspCb_SDK::ARI_CsiXsioGetRspCb_SDK(AriSdk::ARI_CsiXsioGetRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x5D090000u, 0);
  *(_QWORD *)result = &off_24C9100D0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x5D090000u, 0);
  *(_QWORD *)result = &off_24C9100D0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiXsioGetRspCb_SDK::ARI_CsiXsioGetRspCb_SDK(AriSdk::ARI_CsiXsioGetRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C9100D0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C9100D0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_CsiXsioGetRspCb_SDK::~ARI_CsiXsioGetRspCb_SDK(AriSdk::ARI_CsiXsioGetRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C9100D0;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiXsioGetRspCb_SDK::~ARI_CsiXsioGetRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiXsioGetRspCb_SDK::pack(AriSdk::ARI_CsiXsioGetRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiXsioGetRspCb_SDK::unpack(AriSdk::ARI_CsiXsioGetRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E2789C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiXsioGetRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_CsiXsioGetRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1560870912;
}

AriSdk::MsgBase *AriSdk::ARI_CsiXsioSetReq_SDK::ARI_CsiXsioSetReq_SDK(AriSdk::ARI_CsiXsioSetReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x5C888000u, 0);
  *(_QWORD *)result = &off_24C910108;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x5C888000u, 0);
  *(_QWORD *)result = &off_24C910108;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiXsioSetReq_SDK::ARI_CsiXsioSetReq_SDK(AriSdk::ARI_CsiXsioSetReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C910108;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C910108;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiXsioSetReq_SDK::~ARI_CsiXsioSetReq_SDK(AriSdk::ARI_CsiXsioSetReq_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C910108;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiXsioSetReq_SDK::~ARI_CsiXsioSetReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiXsioSetReq_SDK::pack(AriSdk::ARI_CsiXsioSetReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiXsioSetReq_SDK::unpack(AriSdk::ARI_CsiXsioSetReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E278C4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiXsioSetReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiXsioSetReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1552449536;
}

AriSdk::MsgBase *AriSdk::ARI_CsiXsioSetRspCb_SDK::ARI_CsiXsioSetRspCb_SDK(AriSdk::ARI_CsiXsioSetRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x5D088000u, 0);
  *(_QWORD *)result = &off_24C910140;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x5D088000u, 0);
  *(_QWORD *)result = &off_24C910140;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiXsioSetRspCb_SDK::ARI_CsiXsioSetRspCb_SDK(AriSdk::ARI_CsiXsioSetRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C910140;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C910140;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiXsioSetRspCb_SDK::~ARI_CsiXsioSetRspCb_SDK(AriSdk::ARI_CsiXsioSetRspCb_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C910140;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiXsioSetRspCb_SDK::~ARI_CsiXsioSetRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiXsioSetRspCb_SDK::pack(AriSdk::ARI_CsiXsioSetRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiXsioSetRspCb_SDK::unpack(AriSdk::ARI_CsiXsioSetRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E278ECC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiXsioSetRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_CsiXsioSetRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1560838144;
}

double AriSdk::ARI_TraceGetConfigReq_SDK::ARI_TraceGetConfigReq_SDK(AriSdk::ARI_TraceGetConfigReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x5C838000u, 0);
  *(_QWORD *)v1 = &off_24C910178;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x5C838000u, 0);
  *(_QWORD *)v1 = &off_24C910178;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

double AriSdk::ARI_TraceGetConfigReq_SDK::ARI_TraceGetConfigReq_SDK(AriSdk::ARI_TraceGetConfigReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C910178;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C910178;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

void AriSdk::ARI_TraceGetConfigReq_SDK::~ARI_TraceGetConfigReq_SDK(AriSdk::ARI_TraceGetConfigReq_SDK *this)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C910178;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_TraceGetConfigReq_SDK::~ARI_TraceGetConfigReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_TraceGetConfigReq_SDK::pack(AriSdk::ARI_TraceGetConfigReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  _BYTE *v6;
  _BYTE *v7;
  BOOL v8;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (_BYTE *)*((_QWORD *)this + 9);
    v7 = (_BYTE *)*((_QWORD *)this + 10);
    if (v6)
      v8 = v6 == v7;
    else
      v8 = 1;
    if (v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, v7 - v6, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_TraceGetConfigReq_SDK::unpack(AriSdk::ARI_TraceGetConfigReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  void *v5;
  __n128 __p;
  uint64_t v8;
  size_t __sz;
  BOOL v10;

  __p.n128_u8[0] = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = __p.n128_u8[0] == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v10 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v5 = (void *)operator new[]();
  bzero(v5, 0xF00uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 3840, &v10, &__sz);
  if (!(_DWORD)v3 && v10)
  {
    v8 = 0;
    __p = 0uLL;
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&__p, v5, (uint64_t)v5 + __sz, __sz);
    AriSdk::TlvArray<char,3840ul>::operator=((std::vector<int> *)this + 3, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
  }
  MEMORY[0x212BB9B48](v5, 0x1000C8077774924);
  return v3;
}

void sub_20E279260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x212BB9B48](v11, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_TraceGetConfigReq_SDK::hasDeclaredGmid(AriSdk::ARI_TraceGetConfigReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1552121856;
}

double AriSdk::ARI_TraceGetConfigRspCb_SDK::ARI_TraceGetConfigRspCb_SDK(AriSdk::ARI_TraceGetConfigRspCb_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x5D038000u, 0);
  *(_QWORD *)v1 = &off_24C9101B0;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_QWORD *)v1 + 12) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x5D038000u, 0);
  *(_QWORD *)v1 = &off_24C9101B0;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_QWORD *)v1 + 12) = 0;
  return result;
}

double AriSdk::ARI_TraceGetConfigRspCb_SDK::ARI_TraceGetConfigRspCb_SDK(AriSdk::ARI_TraceGetConfigRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C9101B0;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_QWORD *)v3 + 12) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C9101B0;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_QWORD *)v3 + 12) = 0;
  return result;
}

void AriSdk::ARI_TraceGetConfigRspCb_SDK::~ARI_TraceGetConfigRspCb_SDK(AriSdk::ARI_TraceGetConfigRspCb_SDK *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C9101B0;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_TraceGetConfigRspCb_SDK::~ARI_TraceGetConfigRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_TraceGetConfigRspCb_SDK::pack(AriSdk::ARI_TraceGetConfigRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  _BYTE *v7;
  _BYTE *v8;
  BOOL v9;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (_BYTE *)*((_QWORD *)this + 10);
      v8 = (_BYTE *)*((_QWORD *)this + 11);
      if (v7)
        v9 = v7 == v8;
      else
        v9 = 1;
      if (v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, v8 - v7, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_TraceGetConfigRspCb_SDK::unpack(AriSdk::ARI_TraceGetConfigRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  void *v6;
  void **v7;
  _BYTE *v8;
  void *v9;
  const char *v10;
  BOOL *v11;
  void *v12;
  void *__p;
  _BYTE *v15;
  uint64_t v16;
  size_t __sz;
  BOOL v18;
  BOOL v19[8];
  char v20;

  v19[0] = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, v19, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v19[0];
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v19[0] = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, v19, 0);
  if ((_DWORD)v3 || !v19[0])
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v18 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v6 = (void *)operator new[]();
  bzero(v6, 0x3E80uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 16000, &v18, &__sz);
  if (!(_DWORD)v3 && v18)
  {
    v15 = 0;
    v16 = 0;
    __p = 0;
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&__p, v6, (uint64_t)v6 + __sz, __sz);
    v7 = (void **)((char *)this + 80);
    v9 = __p;
    v8 = v15;
    if ((unint64_t)(v15 - (_BYTE *)__p) < 0x3E81)
    {
      v12 = *v7;
      if (*v7)
      {
        *((_QWORD *)this + 11) = v12;
        operator delete(v12);
        *v7 = 0;
        *((_QWORD *)this + 11) = 0;
        *((_QWORD *)this + 12) = 0;
        v9 = __p;
        v8 = v15;
      }
      *((_QWORD *)this + 10) = v9;
      *((_QWORD *)this + 11) = v8;
      *((_QWORD *)this + 12) = v16;
    }
    else
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)v19);
      if (v20 >= 0)
        v11 = v19;
      else
        v11 = *(BOOL **)v19;
      Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v10, v11, 360, (char *)this + 80, v15 - (_BYTE *)__p, 16000);
      if (v20 < 0)
        operator delete(*(void **)v19);
      if (__p)
      {
        v15 = __p;
        operator delete(__p);
      }
    }
  }
  MEMORY[0x212BB9B48](v6, 0x1000C8077774924);
  return v3;
}

void sub_20E2797B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;

  if (*(char *)(v17 - 33) < 0)
    operator delete(*(void **)(v17 - 56));
  if (__p)
    operator delete(__p);
  MEMORY[0x212BB9B48](v16, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_TraceGetConfigRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_TraceGetConfigRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1560510464;
}

AriSdk::MsgBase *AriSdk::ARI_TraceIQStopCompleteInd_SDK::ARI_TraceIQStopCompleteInd_SDK(AriSdk::ARI_TraceIQStopCompleteInd_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x5D800000u, 0);
  *(_QWORD *)result = &off_24C9101E8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x5D800000u, 0);
  *(_QWORD *)result = &off_24C9101E8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_TraceIQStopCompleteInd_SDK::ARI_TraceIQStopCompleteInd_SDK(AriSdk::ARI_TraceIQStopCompleteInd_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C9101E8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C9101E8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_TraceIQStopCompleteInd_SDK::~ARI_TraceIQStopCompleteInd_SDK(AriSdk::ARI_TraceIQStopCompleteInd_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C9101E8;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_TraceIQStopCompleteInd_SDK::~ARI_TraceIQStopCompleteInd_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_TraceIQStopCompleteInd_SDK::pack(AriSdk::ARI_TraceIQStopCompleteInd_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_TraceIQStopCompleteInd_SDK::unpack(AriSdk::ARI_TraceIQStopCompleteInd_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E279A88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_TraceIQStopCompleteInd_SDK::hasDeclaredGmid(AriSdk::ARI_TraceIQStopCompleteInd_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1568669696;
}

AriSdk::MsgBase *AriSdk::ARI_TraceOutputIdleInd_SDK::ARI_TraceOutputIdleInd_SDK(AriSdk::ARI_TraceOutputIdleInd_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x5D808000u, 0);
  *(_QWORD *)result = &off_24C910220;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x5D808000u, 0);
  *(_QWORD *)result = &off_24C910220;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_TraceOutputIdleInd_SDK::ARI_TraceOutputIdleInd_SDK(AriSdk::ARI_TraceOutputIdleInd_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C910220;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C910220;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_TraceOutputIdleInd_SDK::~ARI_TraceOutputIdleInd_SDK(AriSdk::ARI_TraceOutputIdleInd_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C910220;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_TraceOutputIdleInd_SDK::~ARI_TraceOutputIdleInd_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_TraceOutputIdleInd_SDK::pack(AriSdk::ARI_TraceOutputIdleInd_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_TraceOutputIdleInd_SDK::unpack(AriSdk::ARI_TraceOutputIdleInd_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E279D04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_TraceOutputIdleInd_SDK::hasDeclaredGmid(AriSdk::ARI_TraceOutputIdleInd_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1568702464;
}

double AriSdk::ARI_TraceSetConfigReq_SDK::ARI_TraceSetConfigReq_SDK(AriSdk::ARI_TraceSetConfigReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x5C830000u, 0);
  *(_QWORD *)v1 = &off_24C910258;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_QWORD *)v1 + 14) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x5C830000u, 0);
  *(_QWORD *)v1 = &off_24C910258;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_QWORD *)v1 + 14) = 0;
  return result;
}

double AriSdk::ARI_TraceSetConfigReq_SDK::ARI_TraceSetConfigReq_SDK(AriSdk::ARI_TraceSetConfigReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C910258;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_QWORD *)v3 + 14) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C910258;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_QWORD *)v3 + 14) = 0;
  return result;
}

void AriSdk::ARI_TraceSetConfigReq_SDK::~ARI_TraceSetConfigReq_SDK(AriSdk::ARI_TraceSetConfigReq_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_24C910258;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4077774924);
  v4 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4077774924);
  v5 = (void *)*((_QWORD *)this + 9);
  if (v5)
  {
    *((_QWORD *)this + 10) = v5;
    operator delete(v5);
  }
  v6 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_TraceSetConfigReq_SDK::~ARI_TraceSetConfigReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_TraceSetConfigReq_SDK::pack(AriSdk::ARI_TraceSetConfigReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  _BYTE *v6;
  _BYTE *v7;
  BOOL v8;
  const void *v9;
  const void *v10;
  const void *v11;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (_BYTE *)*((_QWORD *)this + 9);
    v7 = (_BYTE *)*((_QWORD *)this + 10);
    v8 = !v6 || v6 == v7;
    if (v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, v7 - v6, 0), !(_DWORD)result))
    {
      v9 = (const void *)*((_QWORD *)this + 12);
      if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v9, 1uLL, 0), !(_DWORD)result))
      {
        v10 = (const void *)*((_QWORD *)this + 13);
        if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v10, 1uLL, 0), !(_DWORD)result))
        {
          v11 = (const void *)*((_QWORD *)this + 14);
          if (!v11 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v11, 4uLL, 0), !(_DWORD)result))
          {
            result = 0;
            *a2 = (AriMsg *)*((_QWORD *)this + 6);
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_TraceSetConfigReq_SDK::unpack(AriSdk::ARI_TraceSetConfigReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  void *v5;
  _BYTE *v6;
  _BYTE *v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  __n128 __p;
  uint64_t v13;
  size_t __sz;
  BOOL v15;

  __p.n128_u8[0] = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = __p.n128_u8[0] == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v15 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v5 = (void *)operator new[]();
  bzero(v5, 0xF00uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 3840, &v15, &__sz);
  if ((_DWORD)v3 || !v15)
  {
    MEMORY[0x212BB9B48](v5, 0x1000C8077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v13 = 0;
    __p = 0uLL;
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&__p, v5, (uint64_t)v5 + __sz, __sz);
    AriSdk::TlvArray<char,3840ul>::operator=((std::vector<int> *)this + 3, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    MEMORY[0x212BB9B48](v5, 0x1000C8077774924);
  }
  __p.n128_u8[0] = 0;
  v6 = (_BYTE *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 12, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4077774924);
  }
  __p.n128_u8[0] = 0;
  v7 = (_BYTE *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v7, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 13, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C4077774924);
  }
  __p.n128_u8[0] = 0;
  v8 = (_DWORD *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v8, 4, (BOOL *)&__p, 0);
  if (!(_DWORD)v3)
  {
    if (__p.n128_u8[0])
    {
      v9 = (_DWORD *)operator new();
      *v9 = *v8;
      v10 = *((_QWORD *)this + 14);
      *((_QWORD *)this + 14) = v9;
      if (v10)
        MEMORY[0x212BB9B60](v10, 0x1000C4052888210);
    }
  }
  MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  return v3;
}

void sub_20E27A364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_TraceSetConfigReq_SDK::hasDeclaredGmid(AriSdk::ARI_TraceSetConfigReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1552089088;
}

AriSdk::MsgBase *AriSdk::ARI_TraceSetConfigRspCb_SDK::ARI_TraceSetConfigRspCb_SDK(AriSdk::ARI_TraceSetConfigRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x5D030000u, 0);
  *(_QWORD *)result = &off_24C910290;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x5D030000u, 0);
  *(_QWORD *)result = &off_24C910290;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_TraceSetConfigRspCb_SDK::ARI_TraceSetConfigRspCb_SDK(AriSdk::ARI_TraceSetConfigRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C910290;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C910290;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_TraceSetConfigRspCb_SDK::~ARI_TraceSetConfigRspCb_SDK(AriSdk::ARI_TraceSetConfigRspCb_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C910290;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_TraceSetConfigRspCb_SDK::~ARI_TraceSetConfigRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_TraceSetConfigRspCb_SDK::pack(AriSdk::ARI_TraceSetConfigRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_TraceSetConfigRspCb_SDK::unpack(AriSdk::ARI_TraceSetConfigRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E27A63C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_TraceSetConfigRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_TraceSetConfigRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 1560477696;
}

uint64_t ARI_CsiIceAudToneConfig_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiIceAudToneConfig_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIpcGetLogBufferReq_SDK::ARI_CsiIpcGetLogBufferReq_SDK(AriSdk::ARI_CsiIpcGetLogBufferReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x88810000, 0);
  *(_QWORD *)result = &off_24C911690;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x88810000, 0);
  *(_QWORD *)result = &off_24C911690;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIpcGetLogBufferReq_SDK::ARI_CsiIpcGetLogBufferReq_SDK(AriSdk::ARI_CsiIpcGetLogBufferReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911690;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911690;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiIpcGetLogBufferReq_SDK::~ARI_CsiIpcGetLogBufferReq_SDK(AriSdk::ARI_CsiIpcGetLogBufferReq_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C911690;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiIpcGetLogBufferReq_SDK::~ARI_CsiIpcGetLogBufferReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiIpcGetLogBufferReq_SDK::pack(AriSdk::ARI_CsiIpcGetLogBufferReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 4uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiIpcGetLogBufferReq_SDK::unpack(AriSdk::ARI_CsiIpcGetLogBufferReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v9, 0);
  if ((_DWORD)v3 || !v9)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v8 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 4, &v8, 0);
  if (!(_DWORD)v3 && v8)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  return v3;
}

void sub_20E27AAA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiIpcGetLogBufferReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiIpcGetLogBufferReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -2004811776;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIpcGetLogBufferRsp_SDK::ARI_CsiIpcGetLogBufferRsp_SDK(AriSdk::ARI_CsiIpcGetLogBufferRsp_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x89010000, 0);
  *(_QWORD *)result = &off_24C9116C8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x89010000, 0);
  *(_QWORD *)result = &off_24C9116C8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIpcGetLogBufferRsp_SDK::ARI_CsiIpcGetLogBufferRsp_SDK(AriSdk::ARI_CsiIpcGetLogBufferRsp_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C9116C8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C9116C8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiIpcGetLogBufferRsp_SDK::~ARI_CsiIpcGetLogBufferRsp_SDK(AriSdk::ARI_CsiIpcGetLogBufferRsp_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C9116C8;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiIpcGetLogBufferRsp_SDK::~ARI_CsiIpcGetLogBufferRsp_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiIpcGetLogBufferRsp_SDK::pack(AriSdk::ARI_CsiIpcGetLogBufferRsp_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiIpcGetLogBufferRsp_SDK::unpack(AriSdk::ARI_CsiIpcGetLogBufferRsp_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E27AD24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiIpcGetLogBufferRsp_SDK::hasDeclaredGmid(AriSdk::ARI_CsiIpcGetLogBufferRsp_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -1996423168;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIpcGetLogBufferListReq_SDK::ARI_CsiIpcGetLogBufferListReq_SDK(AriSdk::ARI_CsiIpcGetLogBufferListReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x88808000, 0);
  *(_QWORD *)result = &off_24C911700;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x88808000, 0);
  *(_QWORD *)result = &off_24C911700;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIpcGetLogBufferListReq_SDK::ARI_CsiIpcGetLogBufferListReq_SDK(AriSdk::ARI_CsiIpcGetLogBufferListReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911700;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911700;
  return result;
}

void AriSdk::ARI_CsiIpcGetLogBufferListReq_SDK::~ARI_CsiIpcGetLogBufferListReq_SDK(AriSdk::ARI_CsiIpcGetLogBufferListReq_SDK *this)
{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiIpcGetLogBufferListReq_SDK::pack(AriSdk::ARI_CsiIpcGetLogBufferListReq_SDK *this, AriMsg **a2)
{
  *a2 = 0;
  *a2 = (AriMsg *)*((_QWORD *)this + 6);
  return 0;
}

uint64_t AriSdk::ARI_CsiIpcGetLogBufferListReq_SDK::unpack(AriSdk::ARI_CsiIpcGetLogBufferListReq_SDK *this)
{
  return 0;
}

BOOL AriSdk::ARI_CsiIpcGetLogBufferListReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiIpcGetLogBufferListReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -2004844544;
}

double AriSdk::ARI_CsiIpcGetLogBufferListRsp_SDK::ARI_CsiIpcGetLogBufferListRsp_SDK(AriSdk::ARI_CsiIpcGetLogBufferListRsp_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x89008000, 0);
  *(_QWORD *)v1 = &off_24C911738;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x89008000, 0);
  *(_QWORD *)v1 = &off_24C911738;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

double AriSdk::ARI_CsiIpcGetLogBufferListRsp_SDK::ARI_CsiIpcGetLogBufferListRsp_SDK(AriSdk::ARI_CsiIpcGetLogBufferListRsp_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C911738;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C911738;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

void AriSdk::ARI_CsiIpcGetLogBufferListRsp_SDK::~ARI_CsiIpcGetLogBufferListRsp_SDK(AriSdk::ARI_CsiIpcGetLogBufferListRsp_SDK *this)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C911738;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiIpcGetLogBufferListRsp_SDK::~ARI_CsiIpcGetLogBufferListRsp_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiIpcGetLogBufferListRsp_SDK::pack(AriSdk::ARI_CsiIpcGetLogBufferListRsp_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  _BYTE *v6;
  _BYTE *v7;
  BOOL v8;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (_BYTE *)*((_QWORD *)this + 9);
    v7 = (_BYTE *)*((_QWORD *)this + 10);
    if (v6)
      v8 = v6 == v7;
    else
      v8 = 1;
    if (v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, v7 - v6, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiIpcGetLogBufferListRsp_SDK::unpack(AriSdk::ARI_CsiIpcGetLogBufferListRsp_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _OWORD *v5;
  __n128 __p;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;

  __p.n128_u8[0] = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = __p.n128_u8[0] == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v10 = 0;
  v9 = 0xAAAAAAAAAAAAAAAALL;
  v5 = (_OWORD *)operator new[]();
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  *((_QWORD *)v5 + 14) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 120, &v10, &v9);
  if (!(_DWORD)v3 && v10)
  {
    v8 = 0;
    __p = 0uLL;
    std::vector<CsiIceIpcLogBufferList>::__init_with_size[abi:ne180100]<CsiIceIpcLogBufferList*,CsiIceIpcLogBufferList*>(&__p, v5, (uint64_t)v5 + 24 * (v9 / 0x18), v9 / 0x18);
    AriSdk::TlvArray<CsiIceIpcLogBufferList,5ul>::operator=((std::vector<int> *)this + 3, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
  }
  MEMORY[0x212BB9B48](v5, 0x1000C80504FFAC1);
  return v3;
}

void sub_20E27B288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x212BB9B48](v11, 0x1000C80504FFAC1);
  _Unwind_Resume(a1);
}

std::vector<int> *AriSdk::TlvArray<CsiIceIpcLogBufferList,5ul>::operator=(std::vector<int> *this, __n128 *__c)
{
  const char *v4;
  void **v5;
  void *__p[2];
  char v8;

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__c->n128_u64[1] - __c->n128_u64[0]) >> 3) < 6)
  {
    std::vector<char>::__move_assign((uint64_t)this, __c);
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v8 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v4, v5, 360, this, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__c->n128_u64[1] - __c->n128_u64[0]) >> 3), 5);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_20E27B3C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL AriSdk::ARI_CsiIpcGetLogBufferListRsp_SDK::hasDeclaredGmid(AriSdk::ARI_CsiIpcGetLogBufferListRsp_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -1996455936;
}

uint64_t ARI_CsiIpcGetLogBufferRsp_Extract(unsigned __int8 *a1, uint64_t a2, char *a3)
{
  __int128 v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10[2];
  unint64_t v11;

  v11 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9 = v4;
  *(_OWORD *)v10 = v4;
  v7 = v4;
  v8 = v4;
  AriMsg::AriMsg((AriMsg *)&v7, a1, a2);
  v5 = HIDWORD(v11);
  if (!HIDWORD(v11))
  {
    if (((DWORD1(v7) << 15) | ((_DWORD)v7 << 26)) == -1996423168)
      v5 = AriMsg::unparam((AriMsg *)&v7, 1, a3, 4uLL);
    else
      v5 = 4294967223;
  }
  v10[0] = 0;
  v8 = 0u;
  v9 = 0u;
  v7 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v10[1]);
  return v5;
}

void sub_20E27B4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiIpcGetLogBufferReq_ENC(int a1, int a2, int a3, uint64_t a4, int **a5, unsigned int *a6)
{
  __int128 v8;
  uint64_t v9;
  int *EncodedBuf;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  void *v15[2];
  unint64_t v16;
  int v17;
  int v18;
  int v19;

  v18 = a2;
  v19 = a1;
  v17 = a3;
  v16 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14 = v8;
  *(_OWORD *)v15 = v8;
  v12 = v8;
  v13 = v8;
  AriMsg::AriMsg((AriMsg *)&v12, 0x88810000);
  v9 = AriMsg::packParam((AriMsg *)&v12, 1, (char *)&v19, 4uLL);
  if (!(_DWORD)v9)
  {
    v9 = AriMsg::packParam((AriMsg *)&v12, 2, (char *)&v18, 4uLL);
    if (!(_DWORD)v9)
    {
      v9 = AriMsg::packParam((AriMsg *)&v12, 3, (char *)&v17, 4uLL);
      if (!(_DWORD)v9)
      {
        if (a5)
        {
          EncodedBuf = AriMsg::getEncodedBuf((AriMsg *)&v12, a6);
          *a5 = EncodedBuf;
          if (EncodedBuf)
            v9 = 0;
          else
            v9 = 0xFFFFFFFFLL;
        }
        else
        {
          v9 = 0xFFFFFFFFLL;
        }
      }
    }
  }
  v15[0] = 0;
  v13 = 0u;
  v14 = 0u;
  v12 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v15[1]);
  return v9;
}

void sub_20E27B5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiIpcGetLogBufferReq_BLK(int a1, int a2, int a3, int *a4, uint64_t a5)
{
  __int128 v7;
  uint64_t Ctx;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void *v13[2];
  unint64_t v14;
  int v15;
  int v16;
  int v17;

  v16 = a2;
  v17 = a1;
  v15 = a3;
  v14 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v12 = v7;
  *(_OWORD *)v13 = v7;
  v10 = v7;
  v11 = v7;
  AriMsg::AriMsg((AriMsg *)&v10, 0x88810000);
  Ctx = AriMsg::packParam((AriMsg *)&v10, 1, (char *)&v17, 4uLL);
  if (!(_DWORD)Ctx)
  {
    Ctx = AriMsg::packParam((AriMsg *)&v10, 2, (char *)&v16, 4uLL);
    if (!(_DWORD)Ctx)
    {
      Ctx = AriMsg::packParam((AriMsg *)&v10, 3, (char *)&v15, 4uLL);
      if (!(_DWORD)Ctx)
      {
        Ctx = AriHost::Send((AriMsg *)&v10, *a4, a5, 0, 20000);
        if (!(_DWORD)Ctx)
          Ctx = AriMsg::extractCtx((AriMsg *)&v10, a4);
      }
    }
  }
  v13[0] = 0;
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v13[1]);
  return Ctx;
}

void sub_20E27B6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiIpcGetLogBufferListRsp_Extract(unsigned __int8 *a1, uint64_t a2, char *a3, char *a4)
{
  __int128 v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12[2];
  unint64_t v13;

  v13 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11 = v6;
  *(_OWORD *)v12 = v6;
  v9 = v6;
  v10 = v6;
  AriMsg::AriMsg((AriMsg *)&v9, a1, a2);
  v7 = HIDWORD(v13);
  if (!HIDWORD(v13))
  {
    if (((DWORD1(v9) << 15) | ((_DWORD)v9 << 26)) == -1996455936)
    {
      v7 = AriMsg::unparam((AriMsg *)&v9, 1, a3, 4uLL);
      if (!(_DWORD)v7)
        v7 = AriMsg::unparam((AriMsg *)&v9, 2, a4, 0x78uLL);
    }
    else
    {
      v7 = 4294967223;
    }
  }
  v12[0] = 0;
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v12[1]);
  return v7;
}

void sub_20E27B7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiIpcGetLogBufferListReq_ENC(uint64_t a1, int **a2, unsigned int *a3)
{
  __int128 v5;
  int *EncodedBuf;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12[2];
  unint64_t v13;

  v13 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11 = v5;
  *(_OWORD *)v12 = v5;
  v9 = v5;
  v10 = v5;
  AriMsg::AriMsg((AriMsg *)&v9, 0x88808000);
  if (a2)
  {
    EncodedBuf = AriMsg::getEncodedBuf((AriMsg *)&v9, a3);
    *a2 = EncodedBuf;
    if (EncodedBuf)
      v7 = 0;
    else
      v7 = 0xFFFFFFFFLL;
  }
  else
  {
    v7 = 0xFFFFFFFFLL;
  }
  v12[0] = 0;
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v12[1]);
  return v7;
}

void sub_20E27B860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiIpcGetLogBufferListReq_BLK(int *a1, uint64_t a2)
{
  __int128 v4;
  uint64_t Ctx;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10[2];
  unint64_t v11;

  v11 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9 = v4;
  *(_OWORD *)v10 = v4;
  v7 = v4;
  v8 = v4;
  AriMsg::AriMsg((AriMsg *)&v7, 0x88808000);
  Ctx = AriHost::Send((AriMsg *)&v7, *a1, a2, 0, 20000);
  if (!(_DWORD)Ctx)
    Ctx = AriMsg::extractCtx((AriMsg *)&v7, a1);
  v10[0] = 0;
  v8 = 0u;
  v9 = 0u;
  v7 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v10[1]);
  return Ctx;
}

void sub_20E27B910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<CsiIceIpcLogBufferList>::__init_with_size[abi:ne180100]<CsiIceIpcLogBufferList*,CsiIceIpcLogBufferList*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<CsiIceIpcLogBufferList>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20E27B988(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

AriSdk::MsgBase *AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK::ARI_IBIMsAccCurrentFreqInfoReq_SDK(AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x24900000u, 0);
  *(_QWORD *)result = &off_24C9117D0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x24900000u, 0);
  *(_QWORD *)result = &off_24C9117D0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK::ARI_IBIMsAccCurrentFreqInfoReq_SDK(AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C9117D0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C9117D0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK::~ARI_IBIMsAccCurrentFreqInfoReq_SDK(AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C9117D0;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK::~ARI_IBIMsAccCurrentFreqInfoReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK::pack(AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK::unpack(AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v9, 0);
  if (!(_DWORD)v3 && v9)
  {
    v6 = (_DWORD *)operator new();
    *v6 = *v5;
    v7 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v6;
    if (v7)
      MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  }
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E27BCE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 613416960;
}

double AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK(AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x25100000u, 0);
  *(_QWORD *)v1 = &off_24C911808;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x25100000u, 0);
  *(_QWORD *)v1 = &off_24C911808;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  return result;
}

double AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK(AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C911808;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C911808;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  return result;
}

void AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::~ARI_IBIMsAccCurrentFreqInfoRspCb_SDK(AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = &off_24C911808;
  v2 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C408D6E4E1BLL);
  v3 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C408D6E4E1BLL);
  v4 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C403C0FF12CLL);
  v5 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40670FB0B0);
  v6 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C40B6FBB774);
  v7 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C400BC65CE5);
  v8 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v8)
    MEMORY[0x212BB9B60](v8, 0x1000C4093615F26);
  v9 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
    MEMORY[0x212BB9B60](v9, 0x1000C40340FE481);
  v10 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v10)
    MEMORY[0x212BB9B60](v10, 0x1000C4052888210);
  v11 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v11)
    MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::~ARI_IBIMsAccCurrentFreqInfoRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::pack(AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v7, 0x34uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v8, 0x1CuLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 7, v9, 0xF4uLL, 0), !(_DWORD)result))
          {
            v10 = (const void *)*((_QWORD *)this + 13);
            if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 8, v10, 0x304uLL, 0), !(_DWORD)result))
            {
              v11 = (const void *)*((_QWORD *)this + 14);
              if (!v11 || (result = AriMsg::pack(*((AriMsg **)this + 6), 9, v11, 0x4B4uLL, 0), !(_DWORD)result))
              {
                v12 = (const void *)*((_QWORD *)this + 15);
                if (!v12 || (result = AriMsg::pack(*((AriMsg **)this + 6), 10, v12, 0x34CuLL, 0), !(_DWORD)result))
                {
                  v13 = (const void *)*((_QWORD *)this + 16);
                  if (!v13 || (result = AriMsg::pack(*((AriMsg **)this + 6), 11, v13, 0x7CuLL, 0), !(_DWORD)result))
                  {
                    v14 = (const void *)*((_QWORD *)this + 17);
                    if (!v14 || (result = AriMsg::pack(*((AriMsg **)this + 6), 12, v14, 0x7CuLL, 0), !(_DWORD)result))
                    {
                      result = 0;
                      *a2 = (AriMsg *)*((_QWORD *)this + 6);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::unpack(AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _OWORD *v6;
  _QWORD *v7;
  _OWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  _OWORD *v12;
  _OWORD *v13;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;

  v24 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v24, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v24;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v23 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v23, 0);
  if ((_DWORD)v3 || !v23)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v22 = 0;
  v6 = (_OWORD *)operator new();
  *v6 = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  *((_DWORD *)v6 + 12) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v6, 52, &v22, 0);
  if ((_DWORD)v3 || !v22)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C40340FE481);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBIAccServingDLFreqBandwidthInfo>::operator=<IBIAccServingDLFreqBandwidthInfo&,void>((uint64_t *)this + 10, (uint64_t)v6);
    MEMORY[0x212BB9B60](v6, 0x1000C40340FE481);
  }
  v21 = 0;
  v7 = (_QWORD *)operator new();
  v7[1] = 0;
  v7[2] = 0;
  *v7 = 0;
  *((_DWORD *)v7 + 6) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v7, 28, &v21, 0);
  if ((_DWORD)v3 || !v21)
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4093615F26);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBIAccServingULFreqBandwidthInfo>::operator=<IBIAccServingULFreqBandwidthInfo&,void>((uint64_t *)this + 11, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C4093615F26);
  }
  v20 = 0;
  v8 = (_OWORD *)operator new();
  *v8 = 0u;
  v8[1] = 0u;
  v8[2] = 0u;
  v8[3] = 0u;
  v8[4] = 0u;
  v8[5] = 0u;
  v8[6] = 0u;
  v8[7] = 0u;
  v8[8] = 0u;
  v8[9] = 0u;
  v8[10] = 0u;
  v8[11] = 0u;
  v8[12] = 0u;
  v8[13] = 0u;
  v8[14] = 0u;
  *((_DWORD *)v8 + 60) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 7, v8, 244, &v20, 0);
  if ((_DWORD)v3 || !v20)
  {
    MEMORY[0x212BB9B60](v8, 0x1000C400BC65CE5);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBIAccSearchFreqBandwidthInfo>::operator=<IBIAccSearchFreqBandwidthInfo&,void>((uint64_t *)this + 12, (uint64_t)v8);
    MEMORY[0x212BB9B60](v8, 0x1000C400BC65CE5);
  }
  v19 = 0;
  v9 = (void *)operator new();
  bzero(v9, 0x304uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 8, v9, 772, &v19, 0);
  if ((_DWORD)v3 || !v19)
  {
    MEMORY[0x212BB9B60](v9, 0x1000C40B6FBB774);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBIAccHoppingFreqBandwidthInfo>::operator=<IBIAccHoppingFreqBandwidthInfo&,void>((uint64_t *)this + 13, v9);
    MEMORY[0x212BB9B60](v9, 0x1000C40B6FBB774);
  }
  v18 = 0;
  v10 = (void *)operator new();
  bzero(v10, 0x4B4uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 9, v10, 1204, &v18, 0);
  if ((_DWORD)v3 || !v18)
  {
    MEMORY[0x212BB9B60](v10, 0x1000C40670FB0B0);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBIAccNeighborFreqBandwidthInfo>::operator=<IBIAccNeighborFreqBandwidthInfo&,void>((uint64_t *)this + 14, v10);
    MEMORY[0x212BB9B60](v10, 0x1000C40670FB0B0);
  }
  v17 = 0;
  v11 = (void *)operator new();
  bzero(v11, 0x34CuLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 10, v11, 844, &v17, 0);
  if ((_DWORD)v3 || !v17)
  {
    MEMORY[0x212BB9B60](v11, 0x1000C403C0FF12CLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBIAccRPLMNFreqBandwidthInfo>::operator=<IBIAccRPLMNFreqBandwidthInfo&,void>((uint64_t *)this + 15, v11);
    MEMORY[0x212BB9B60](v11, 0x1000C403C0FF12CLL);
  }
  v16 = 0;
  v12 = (_OWORD *)operator new();
  *v12 = 0u;
  v12[1] = 0u;
  v12[2] = 0u;
  v12[3] = 0u;
  v12[4] = 0u;
  v12[5] = 0u;
  v12[6] = 0u;
  *(_OWORD *)((char *)v12 + 108) = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 11, v12, 124, &v16, 0);
  if ((_DWORD)v3 || !v16)
  {
    MEMORY[0x212BB9B60](v12, 0x1000C408D6E4E1BLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBIAccServingDLFreqBandwidthInfo_ext>::operator=<IBIAccServingDLFreqBandwidthInfo_ext&,void>((uint64_t *)this + 16, v12);
    MEMORY[0x212BB9B60](v12, 0x1000C408D6E4E1BLL);
  }
  v15 = 0;
  v13 = (_OWORD *)operator new();
  *v13 = 0u;
  v13[1] = 0u;
  v13[2] = 0u;
  v13[3] = 0u;
  v13[4] = 0u;
  v13[5] = 0u;
  v13[6] = 0u;
  *(_OWORD *)((char *)v13 + 108) = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 12, v13, 124, &v15, 0);
  if (!(_DWORD)v3 && v15)
    AriSdk::Tlv<IBIAccServingDLFreqBandwidthInfo_ext>::operator=<IBIAccServingDLFreqBandwidthInfo_ext&,void>((uint64_t *)this + 17, v13);
  MEMORY[0x212BB9B60](v13, 0x1000C408D6E4E1BLL);
  return v3;
}

void sub_20E27C76C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C408D6E4E1BLL);
  _Unwind_Resume(a1);
}

uint64_t *AriSdk::Tlv<IBIAccServingDLFreqBandwidthInfo>::operator=<IBIAccServingDLFreqBandwidthInfo&,void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v4 = operator new();
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a2 + 48);
  v6 = *a1;
  *a1 = v4;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C40340FE481);
  return a1;
}

uint64_t *AriSdk::Tlv<IBIAccServingULFreqBandwidthInfo>::operator=<IBIAccServingULFreqBandwidthInfo&,void>(uint64_t *a1, _OWORD *a2)
{
  _OWORD *v4;
  uint64_t v5;

  v4 = (_OWORD *)operator new();
  *v4 = *a2;
  *(_OWORD *)((char *)v4 + 12) = *(_OWORD *)((char *)a2 + 12);
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4093615F26);
  return a1;
}

uint64_t *AriSdk::Tlv<IBIAccSearchFreqBandwidthInfo>::operator=<IBIAccSearchFreqBandwidthInfo&,void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v4 = operator new();
  v5 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(v4 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(v4 + 208) = v5;
  *(_OWORD *)(v4 + 224) = *(_OWORD *)(a2 + 224);
  *(_DWORD *)(v4 + 240) = *(_DWORD *)(a2 + 240);
  v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v4 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v4 + 144) = v6;
  v7 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(v4 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(v4 + 176) = v7;
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v4 + 80) = v8;
  v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v4 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v4 + 112) = v9;
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v10;
  v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v4 + 48) = v11;
  v12 = *a1;
  *a1 = v4;
  if (v12)
    MEMORY[0x212BB9B60](v12, 0x1000C400BC65CE5);
  return a1;
}

uint64_t *AriSdk::Tlv<IBIAccHoppingFreqBandwidthInfo>::operator=<IBIAccHoppingFreqBandwidthInfo&,void>(uint64_t *a1, const void *a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)operator new();
  memcpy(v4, a2, 0x304uLL);
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40B6FBB774);
  return a1;
}

uint64_t *AriSdk::Tlv<IBIAccNeighborFreqBandwidthInfo>::operator=<IBIAccNeighborFreqBandwidthInfo&,void>(uint64_t *a1, const void *a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)operator new();
  memcpy(v4, a2, 0x4B4uLL);
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40670FB0B0);
  return a1;
}

uint64_t *AriSdk::Tlv<IBIAccRPLMNFreqBandwidthInfo>::operator=<IBIAccRPLMNFreqBandwidthInfo&,void>(uint64_t *a1, const void *a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)operator new();
  memcpy(v4, a2, 0x34CuLL);
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C403C0FF12CLL);
  return a1;
}

uint64_t *AriSdk::Tlv<IBIAccServingDLFreqBandwidthInfo_ext>::operator=<IBIAccServingDLFreqBandwidthInfo_ext&,void>(uint64_t *a1, _OWORD *a2)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v4 = (_OWORD *)operator new();
  v5 = a2[5];
  v4[4] = a2[4];
  v4[5] = v5;
  v4[6] = a2[6];
  *(_OWORD *)((char *)v4 + 108) = *(_OWORD *)((char *)a2 + 108);
  v6 = a2[1];
  *v4 = *a2;
  v4[1] = v6;
  v7 = a2[3];
  v4[2] = a2[2];
  v4[3] = v7;
  v8 = *a1;
  *a1 = (uint64_t)v4;
  if (v8)
    MEMORY[0x212BB9B60](v8, 0x1000C408D6E4E1BLL);
  return a1;
}

BOOL AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 621805568;
}

double AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK(AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x25900000u, 0);
  *(_QWORD *)v1 = &off_24C911840;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x25900000u, 0);
  *(_QWORD *)v1 = &off_24C911840;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  return result;
}

double AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK(AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C911840;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C911840;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  return result;
}

void AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK::~ARI_IBIMsAccCurrentFreqInfoIndCb_SDK(AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = &off_24C911840;
  v2 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C408D6E4E1BLL);
  v3 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C408D6E4E1BLL);
  v4 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C403C0FF12CLL);
  v5 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40670FB0B0);
  v6 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C40B6FBB774);
  v7 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C400BC65CE5);
  v8 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v8)
    MEMORY[0x212BB9B60](v8, 0x1000C4093615F26);
  v9 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
    MEMORY[0x212BB9B60](v9, 0x1000C40340FE481);
  v10 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v10)
    MEMORY[0x212BB9B60](v10, 0x1000C4052888210);
  v11 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v11)
    MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK::~ARI_IBIMsAccCurrentFreqInfoIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK::pack(AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 0x34uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v8, 0x1CuLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v9, 0xF4uLL, 0), !(_DWORD)result))
          {
            v10 = (const void *)*((_QWORD *)this + 13);
            if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 7, v10, 0x304uLL, 0), !(_DWORD)result))
            {
              v11 = (const void *)*((_QWORD *)this + 14);
              if (!v11 || (result = AriMsg::pack(*((AriMsg **)this + 6), 8, v11, 0x4B4uLL, 0), !(_DWORD)result))
              {
                v12 = (const void *)*((_QWORD *)this + 15);
                if (!v12 || (result = AriMsg::pack(*((AriMsg **)this + 6), 9, v12, 0x34CuLL, 0), !(_DWORD)result))
                {
                  v13 = (const void *)*((_QWORD *)this + 16);
                  if (!v13 || (result = AriMsg::pack(*((AriMsg **)this + 6), 10, v13, 0x7CuLL, 0), !(_DWORD)result))
                  {
                    v14 = (const void *)*((_QWORD *)this + 17);
                    if (!v14 || (result = AriMsg::pack(*((AriMsg **)this + 6), 11, v14, 0x7CuLL, 0), !(_DWORD)result))
                    {
                      result = 0;
                      *a2 = (AriMsg *)*((_QWORD *)this + 6);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK::unpack(AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _OWORD *v6;
  _QWORD *v7;
  _OWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  _OWORD *v12;
  _OWORD *v13;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;

  v24 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v24, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v24;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v23 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v23, 0);
  if ((_DWORD)v3 || !v23)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v22 = 0;
  v6 = (_OWORD *)operator new();
  *v6 = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  *((_DWORD *)v6 + 12) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 52, &v22, 0);
  if ((_DWORD)v3 || !v22)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C40340FE481);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBIAccServingDLFreqBandwidthInfo>::operator=<IBIAccServingDLFreqBandwidthInfo&,void>((uint64_t *)this + 10, (uint64_t)v6);
    MEMORY[0x212BB9B60](v6, 0x1000C40340FE481);
  }
  v21 = 0;
  v7 = (_QWORD *)operator new();
  v7[1] = 0;
  v7[2] = 0;
  *v7 = 0;
  *((_DWORD *)v7 + 6) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v7, 28, &v21, 0);
  if ((_DWORD)v3 || !v21)
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4093615F26);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBIAccServingULFreqBandwidthInfo>::operator=<IBIAccServingULFreqBandwidthInfo&,void>((uint64_t *)this + 11, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C4093615F26);
  }
  v20 = 0;
  v8 = (_OWORD *)operator new();
  *v8 = 0u;
  v8[1] = 0u;
  v8[2] = 0u;
  v8[3] = 0u;
  v8[4] = 0u;
  v8[5] = 0u;
  v8[6] = 0u;
  v8[7] = 0u;
  v8[8] = 0u;
  v8[9] = 0u;
  v8[10] = 0u;
  v8[11] = 0u;
  v8[12] = 0u;
  v8[13] = 0u;
  v8[14] = 0u;
  *((_DWORD *)v8 + 60) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v8, 244, &v20, 0);
  if ((_DWORD)v3 || !v20)
  {
    MEMORY[0x212BB9B60](v8, 0x1000C400BC65CE5);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBIAccSearchFreqBandwidthInfo>::operator=<IBIAccSearchFreqBandwidthInfo&,void>((uint64_t *)this + 12, (uint64_t)v8);
    MEMORY[0x212BB9B60](v8, 0x1000C400BC65CE5);
  }
  v19 = 0;
  v9 = (void *)operator new();
  bzero(v9, 0x304uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 7, v9, 772, &v19, 0);
  if ((_DWORD)v3 || !v19)
  {
    MEMORY[0x212BB9B60](v9, 0x1000C40B6FBB774);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBIAccHoppingFreqBandwidthInfo>::operator=<IBIAccHoppingFreqBandwidthInfo&,void>((uint64_t *)this + 13, v9);
    MEMORY[0x212BB9B60](v9, 0x1000C40B6FBB774);
  }
  v18 = 0;
  v10 = (void *)operator new();
  bzero(v10, 0x4B4uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 8, v10, 1204, &v18, 0);
  if ((_DWORD)v3 || !v18)
  {
    MEMORY[0x212BB9B60](v10, 0x1000C40670FB0B0);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBIAccNeighborFreqBandwidthInfo>::operator=<IBIAccNeighborFreqBandwidthInfo&,void>((uint64_t *)this + 14, v10);
    MEMORY[0x212BB9B60](v10, 0x1000C40670FB0B0);
  }
  v17 = 0;
  v11 = (void *)operator new();
  bzero(v11, 0x34CuLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 9, v11, 844, &v17, 0);
  if ((_DWORD)v3 || !v17)
  {
    MEMORY[0x212BB9B60](v11, 0x1000C403C0FF12CLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBIAccRPLMNFreqBandwidthInfo>::operator=<IBIAccRPLMNFreqBandwidthInfo&,void>((uint64_t *)this + 15, v11);
    MEMORY[0x212BB9B60](v11, 0x1000C403C0FF12CLL);
  }
  v16 = 0;
  v12 = (_OWORD *)operator new();
  *v12 = 0u;
  v12[1] = 0u;
  v12[2] = 0u;
  v12[3] = 0u;
  v12[4] = 0u;
  v12[5] = 0u;
  v12[6] = 0u;
  *(_OWORD *)((char *)v12 + 108) = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 10, v12, 124, &v16, 0);
  if ((_DWORD)v3 || !v16)
  {
    MEMORY[0x212BB9B60](v12, 0x1000C408D6E4E1BLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBIAccServingDLFreqBandwidthInfo_ext>::operator=<IBIAccServingDLFreqBandwidthInfo_ext&,void>((uint64_t *)this + 16, v12);
    MEMORY[0x212BB9B60](v12, 0x1000C408D6E4E1BLL);
  }
  v15 = 0;
  v13 = (_OWORD *)operator new();
  *v13 = 0u;
  v13[1] = 0u;
  v13[2] = 0u;
  v13[3] = 0u;
  v13[4] = 0u;
  v13[5] = 0u;
  v13[6] = 0u;
  *(_OWORD *)((char *)v13 + 108) = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 11, v13, 124, &v15, 0);
  if (!(_DWORD)v3 && v15)
    AriSdk::Tlv<IBIAccServingDLFreqBandwidthInfo_ext>::operator=<IBIAccServingDLFreqBandwidthInfo_ext&,void>((uint64_t *)this + 17, v13);
  MEMORY[0x212BB9B60](v13, 0x1000C408D6E4E1BLL);
  return v3;
}

void sub_20E27D61C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C408D6E4E1BLL);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 630194176;
}

AriSdk::MsgBase *AriSdk::ARI_IBIMsNetGetEmergencyCellInfoReq_SDK::ARI_IBIMsNetGetEmergencyCellInfoReq_SDK(AriSdk::ARI_IBIMsNetGetEmergencyCellInfoReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x24938000u, 0);
  *(_QWORD *)result = &off_24C911878;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x24938000u, 0);
  *(_QWORD *)result = &off_24C911878;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIMsNetGetEmergencyCellInfoReq_SDK::ARI_IBIMsNetGetEmergencyCellInfoReq_SDK(AriSdk::ARI_IBIMsNetGetEmergencyCellInfoReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911878;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911878;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIMsNetGetEmergencyCellInfoReq_SDK::~ARI_IBIMsNetGetEmergencyCellInfoReq_SDK(AriSdk::ARI_IBIMsNetGetEmergencyCellInfoReq_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C911878;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIMsNetGetEmergencyCellInfoReq_SDK::~ARI_IBIMsNetGetEmergencyCellInfoReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIMsNetGetEmergencyCellInfoReq_SDK::pack(AriSdk::ARI_IBIMsNetGetEmergencyCellInfoReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_IBIMsNetGetEmergencyCellInfoReq_SDK::unpack(AriSdk::ARI_IBIMsNetGetEmergencyCellInfoReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E27D950(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIMsNetGetEmergencyCellInfoReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIMsNetGetEmergencyCellInfoReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 613646336;
}

double AriSdk::ARI_IBIMsNetGetEmergencyCellInfoRspCb_SDK::ARI_IBIMsNetGetEmergencyCellInfoRspCb_SDK(AriSdk::ARI_IBIMsNetGetEmergencyCellInfoRspCb_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x25138000u, 0);
  *(_QWORD *)v1 = &off_24C9118B0;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x25138000u, 0);
  *(_QWORD *)v1 = &off_24C9118B0;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  return result;
}

double AriSdk::ARI_IBIMsNetGetEmergencyCellInfoRspCb_SDK::ARI_IBIMsNetGetEmergencyCellInfoRspCb_SDK(AriSdk::ARI_IBIMsNetGetEmergencyCellInfoRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C9118B0;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C9118B0;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  return result;
}

void AriSdk::ARI_IBIMsNetGetEmergencyCellInfoRspCb_SDK::~ARI_IBIMsNetGetEmergencyCellInfoRspCb_SDK(AriSdk::ARI_IBIMsNetGetEmergencyCellInfoRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_24C9118B0;
  v2 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  v5 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  v6 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIMsNetGetEmergencyCellInfoRspCb_SDK::~ARI_IBIMsNetGetEmergencyCellInfoRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIMsNetGetEmergencyCellInfoRspCb_SDK::pack(AriSdk::ARI_IBIMsNetGetEmergencyCellInfoRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 4uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v8, 4uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v9, 4uLL, 0), !(_DWORD)result))
          {
            v10 = (const void *)*((_QWORD *)this + 13);
            if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 7, v10, 4uLL, 0), !(_DWORD)result))
            {
              result = 0;
              *a2 = (AriMsg *)*((_QWORD *)this + 6);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIMsNetGetEmergencyCellInfoRspCb_SDK::unpack(AriSdk::ARI_IBIMsNetGetEmergencyCellInfoRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;

  v16 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v16, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v16;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v15 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v15, 0);
  if ((_DWORD)v3 || !v15)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v14 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 4, &v14, 0);
  if ((_DWORD)v3 || !v14)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  }
  v13 = 0;
  v7 = (_DWORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v7, 4, &v13, 0);
  if ((_DWORD)v3 || !v13)
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 11, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  }
  v12 = 0;
  v8 = (_DWORD *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v8, 4, &v12, 0);
  if ((_DWORD)v3 || !v12)
  {
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 12, v8);
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  }
  v11 = 0;
  v9 = (_DWORD *)operator new();
  *v9 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 7, v9, 4, &v11, 0);
  if (!(_DWORD)v3 && v11)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 13, v9);
  MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
  return v3;
}

void sub_20E27E014(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIMsNetGetEmergencyCellInfoRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIMsNetGetEmergencyCellInfoRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 622034944;
}

double AriSdk::ARI_IBINetCaConfigIndCb_SDK::ARI_IBINetCaConfigIndCb_SDK(AriSdk::ARI_IBINetCaConfigIndCb_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x25848000u, 0);
  *(_QWORD *)v1 = &off_24C9118E8;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x25848000u, 0);
  *(_QWORD *)v1 = &off_24C9118E8;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  return result;
}

double AriSdk::ARI_IBINetCaConfigIndCb_SDK::ARI_IBINetCaConfigIndCb_SDK(AriSdk::ARI_IBINetCaConfigIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C9118E8;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C9118E8;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  return result;
}

void AriSdk::ARI_IBINetCaConfigIndCb_SDK::~ARI_IBINetCaConfigIndCb_SDK(AriSdk::ARI_IBINetCaConfigIndCb_SDK *this)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_24C9118E8;
  v2 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4000313F17);
  v3 = (void *)*((_QWORD *)this + 16);
  if (v3)
  {
    *((_QWORD *)this + 17) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 13);
  if (v4)
  {
    *((_QWORD *)this + 14) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 10);
  if (v5)
  {
    *((_QWORD *)this + 11) = v5;
    operator delete(v5);
  }
  v6 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C4077774924);
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetCaConfigIndCb_SDK::~ARI_IBINetCaConfigIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetCaConfigIndCb_SDK::pack(AriSdk::ARI_IBINetCaConfigIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  _BYTE *v7;
  _BYTE *v8;
  BOOL v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  const void *v14;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 1uLL, 0), !(_DWORD)result))
    {
      v7 = (_BYTE *)*((_QWORD *)this + 10);
      v8 = (_BYTE *)*((_QWORD *)this + 11);
      v9 = !v7 || v7 == v8;
      if (v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, v8 - v7, 0), !(_DWORD)result))
      {
        v10 = (_BYTE *)*((_QWORD *)this + 13);
        if (!v10
          || (v11 = (_BYTE *)*((_QWORD *)this + 14), v10 == v11)
          || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v10, v11 - v10, 0), !(_DWORD)result))
        {
          v12 = (_BYTE *)*((_QWORD *)this + 16);
          if (!v12
            || (v13 = (_BYTE *)*((_QWORD *)this + 17), v12 == v13)
            || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v12, v13 - v12, 0), !(_DWORD)result))
          {
            v14 = (const void *)*((_QWORD *)this + 19);
            if (!v14 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v14, 8uLL, 0), !(_DWORD)result))
            {
              result = 0;
              *a2 = (AriMsg *)*((_QWORD *)this + 6);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetCaConfigIndCb_SDK::unpack(AriSdk::ARI_IBINetCaConfigIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _BYTE *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  __n128 __p;
  uint64_t v12;
  size_t __sz;
  BOOL v14;

  __p.n128_u8[0] = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = __p.n128_u8[0] == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  __p.n128_u8[0] = 0;
  v5 = (_BYTE *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4077774924);
  }
  v14 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v6 = (_QWORD *)operator new[]();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 8, &v14, &__sz);
  if ((_DWORD)v3 || !v14)
  {
    MEMORY[0x212BB9B48](v6, 0x1000C8077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v12 = 0;
    __p = 0uLL;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v6, (uint64_t)v6 + __sz, __sz);
    AriSdk::TlvArray<unsigned char,8ul>::operator=((std::vector<int> *)((char *)this + 80), &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    MEMORY[0x212BB9B48](v6, 0x1000C8077774924);
  }
  v14 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v7 = (_QWORD *)operator new[]();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v7, 8, &v14, &__sz);
  if ((_DWORD)v3 || !v14)
  {
    MEMORY[0x212BB9B48](v7, 0x1000C8077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v12 = 0;
    __p = 0uLL;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v7, (uint64_t)v7 + __sz, __sz);
    AriSdk::TlvArray<unsigned char,8ul>::operator=((std::vector<int> *)((char *)this + 104), &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    MEMORY[0x212BB9B48](v7, 0x1000C8077774924);
  }
  v14 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v8 = (_QWORD *)operator new[]();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v8, 8, &v14, &__sz);
  if ((_DWORD)v3 || !v14)
  {
    MEMORY[0x212BB9B48](v8, 0x1000C8077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v12 = 0;
    __p = 0uLL;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v8, (uint64_t)v8 + __sz, __sz);
    AriSdk::TlvArray<unsigned char,8ul>::operator=((std::vector<int> *)((char *)this + 128), &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    MEMORY[0x212BB9B48](v8, 0x1000C8077774924);
  }
  __p.n128_u8[0] = 0;
  v9 = (_QWORD *)operator new();
  *v9 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v9, 8, (BOOL *)&__p, 0);
  if (!(_DWORD)v3 && __p.n128_u8[0])
    AriSdk::Tlv<AriStatusTlv>::operator=<AriStatusTlv&,void>((uint64_t *)this + 19, v9);
  MEMORY[0x212BB9B60](v9, 0x1000C4000313F17);
  return v3;
}

void sub_20E27E79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  MEMORY[0x212BB9B60](v11, 0x1000C4000313F17);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetCaConfigIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetCaConfigIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 629440512;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetCellBBSignatureReq_SDK::ARI_IBINetCellBBSignatureReq_SDK(AriSdk::ARI_IBINetCellBBSignatureReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x24940000u, 0);
  *(_QWORD *)result = &off_24C911920;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x24940000u, 0);
  *(_QWORD *)result = &off_24C911920;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetCellBBSignatureReq_SDK::ARI_IBINetCellBBSignatureReq_SDK(AriSdk::ARI_IBINetCellBBSignatureReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911920;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911920;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBINetCellBBSignatureReq_SDK::~ARI_IBINetCellBBSignatureReq_SDK(AriSdk::ARI_IBINetCellBBSignatureReq_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C911920;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetCellBBSignatureReq_SDK::~ARI_IBINetCellBBSignatureReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetCellBBSignatureReq_SDK::pack(AriSdk::ARI_IBINetCellBBSignatureReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetCellBBSignatureReq_SDK::unpack(AriSdk::ARI_IBINetCellBBSignatureReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E27EA98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetCellBBSignatureReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetCellBBSignatureReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 613679104;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetCellBBSignatureRspCb_SDK::ARI_IBINetCellBBSignatureRspCb_SDK(AriSdk::ARI_IBINetCellBBSignatureRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x25140000u, 0);
  *(_QWORD *)result = &off_24C911958;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x25140000u, 0);
  *(_QWORD *)result = &off_24C911958;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetCellBBSignatureRspCb_SDK::ARI_IBINetCellBBSignatureRspCb_SDK(AriSdk::ARI_IBINetCellBBSignatureRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911958;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911958;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBINetCellBBSignatureRspCb_SDK::~ARI_IBINetCellBBSignatureRspCb_SDK(AriSdk::ARI_IBINetCellBBSignatureRspCb_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C911958;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetCellBBSignatureRspCb_SDK::~ARI_IBINetCellBBSignatureRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetCellBBSignatureRspCb_SDK::pack(AriSdk::ARI_IBINetCellBBSignatureRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetCellBBSignatureRspCb_SDK::unpack(AriSdk::ARI_IBINetCellBBSignatureRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E27ED0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetCellBBSignatureRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetCellBBSignatureRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 622067712;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetCellBBSignatureInd_SDK::ARI_IBINetCellBBSignatureInd_SDK(AriSdk::ARI_IBINetCellBBSignatureInd_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x25880000u, 0);
  *(_QWORD *)result = &off_24C911990;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x25880000u, 0);
  *(_QWORD *)result = &off_24C911990;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetCellBBSignatureInd_SDK::ARI_IBINetCellBBSignatureInd_SDK(AriSdk::ARI_IBINetCellBBSignatureInd_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911990;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911990;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBINetCellBBSignatureInd_SDK::~ARI_IBINetCellBBSignatureInd_SDK(AriSdk::ARI_IBINetCellBBSignatureInd_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C911990;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C40FB23B837);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetCellBBSignatureInd_SDK::~ARI_IBINetCellBBSignatureInd_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetCellBBSignatureInd_SDK::pack(AriSdk::ARI_IBINetCellBBSignatureInd_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 0x2CuLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetCellBBSignatureInd_SDK::unpack(AriSdk::ARI_IBINetCellBBSignatureInd_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  BOOL v10;
  BOOL v11;

  v11 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v11, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v11;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v10 = 0;
  v5 = (_OWORD *)operator new();
  *v5 = 0u;
  v5[1] = 0u;
  *(_OWORD *)((char *)v5 + 28) = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 44, &v10, 0);
  if (!(_DWORD)v3 && v10)
  {
    v6 = (_OWORD *)operator new();
    v7 = v5[1];
    *v6 = *v5;
    v6[1] = v7;
    *(_OWORD *)((char *)v6 + 28) = *(_OWORD *)((char *)v5 + 28);
    v8 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v6;
    if (v8)
      MEMORY[0x212BB9B60](v8, 0x1000C40FB23B837);
  }
  MEMORY[0x212BB9B60](v5, 0x1000C40FB23B837);
  return v3;
}

void sub_20E27F09C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C40FB23B837);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetCellBBSignatureInd_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetCellBBSignatureInd_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 629669888;
}

double AriSdk::ARI_IBINetCellInfoIndCb_SDK::ARI_IBINetCellInfoIndCb_SDK(AriSdk::ARI_IBINetCellInfoIndCb_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x25808000u, 0);
  *(_QWORD *)v1 = &off_24C9119C8;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  *((_OWORD *)v1 + 11) = 0u;
  *((_OWORD *)v1 + 12) = 0u;
  *((_OWORD *)v1 + 13) = 0u;
  *((_OWORD *)v1 + 14) = 0u;
  *((_OWORD *)v1 + 15) = 0u;
  *((_QWORD *)v1 + 32) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x25808000u, 0);
  *(_QWORD *)v1 = &off_24C9119C8;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  *((_OWORD *)v1 + 11) = 0u;
  *((_OWORD *)v1 + 12) = 0u;
  *((_OWORD *)v1 + 13) = 0u;
  *((_OWORD *)v1 + 14) = 0u;
  *((_OWORD *)v1 + 15) = 0u;
  *((_QWORD *)v1 + 32) = 0;
  return result;
}

double AriSdk::ARI_IBINetCellInfoIndCb_SDK::ARI_IBINetCellInfoIndCb_SDK(AriSdk::ARI_IBINetCellInfoIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C9119C8;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 13) = 0u;
  *((_OWORD *)v3 + 14) = 0u;
  *((_OWORD *)v3 + 15) = 0u;
  *((_QWORD *)v3 + 32) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C9119C8;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 13) = 0u;
  *((_OWORD *)v3 + 14) = 0u;
  *((_OWORD *)v3 + 15) = 0u;
  *((_QWORD *)v3 + 32) = 0;
  return result;
}

void AriSdk::ARI_IBINetCellInfoIndCb_SDK::~ARI_IBINetCellInfoIndCb_SDK(AriSdk::ARI_IBINetCellInfoIndCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)this = &off_24C9119C8;
  v2 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4000313F17);
  v5 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  v6 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C40BD32EBF2);
  v7 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C40B2B1FC38);
  v8 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v8)
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  v9 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v9)
    MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
  v10 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v10)
    MEMORY[0x212BB9B60](v10, 0x1000C4052888210);
  v11 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v11)
    MEMORY[0x212BB9B60](v11, 0x1000C40BDFB0063);
  v12 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v12)
    MEMORY[0x212BB9B60](v12, 0x1000C4052888210);
  v13 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v13)
    MEMORY[0x212BB9B60](v13, 0x1000C4052888210);
  v14 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v14)
    MEMORY[0x212BB9B60](v14, 0x1000C4052888210);
  v15 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v15)
    MEMORY[0x212BB9B60](v15, 0x1000C4052888210);
  v16 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v16)
    MEMORY[0x212BB9B60](v16, 0x1000C4052888210);
  v17 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v17)
    MEMORY[0x212BB9B60](v17, 0x1000C4077774924);
  v18 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v18)
    MEMORY[0x212BB9B60](v18, 0x1000C4052888210);
  v19 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v19)
    MEMORY[0x212BB9B60](v19, 0x1000C4052888210);
  v20 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v20)
    MEMORY[0x212BB9B60](v20, 0x1000C4052888210);
  v21 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v21)
    MEMORY[0x212BB9B60](v21, 0x1000C4052888210);
  v22 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v22)
    MEMORY[0x212BB9B60](v22, 0x1000C4052888210);
  v23 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v23)
    MEMORY[0x212BB9B60](v23, 0x1000C40BDFB0063);
  v24 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v24)
    MEMORY[0x212BB9B60](v24, 0x1000C4052888210);
  v25 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v25)
    MEMORY[0x212BB9B60](v25, 0x1000C4000313F17);
  v26 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v26)
    MEMORY[0x212BB9B60](v26, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetCellInfoIndCb_SDK::~ARI_IBINetCellInfoIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetCellInfoIndCb_SDK::pack(AriSdk::ARI_IBINetCellInfoIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 8uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 4uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v8, 2uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v9, 4uLL, 0), !(_DWORD)result))
          {
            v10 = (const void *)*((_QWORD *)this + 13);
            if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v10, 4uLL, 0), !(_DWORD)result))
            {
              v11 = (const void *)*((_QWORD *)this + 14);
              if (!v11 || (result = AriMsg::pack(*((AriMsg **)this + 6), 7, v11, 4uLL, 0), !(_DWORD)result))
              {
                v12 = (const void *)*((_QWORD *)this + 15);
                if (!v12 || (result = AriMsg::pack(*((AriMsg **)this + 6), 8, v12, 4uLL, 0), !(_DWORD)result))
                {
                  v13 = (const void *)*((_QWORD *)this + 16);
                  if (!v13 || (result = AriMsg::pack(*((AriMsg **)this + 6), 9, v13, 4uLL, 0), !(_DWORD)result))
                  {
                    v14 = (const void *)*((_QWORD *)this + 17);
                    if (!v14 || (result = AriMsg::pack(*((AriMsg **)this + 6), 10, v14, 1uLL, 0), !(_DWORD)result))
                    {
                      v15 = (const void *)*((_QWORD *)this + 18);
                      if (!v15 || (result = AriMsg::pack(*((AriMsg **)this + 6), 11, v15, 4uLL, 0), !(_DWORD)result))
                      {
                        v16 = (const void *)*((_QWORD *)this + 19);
                        if (!v16
                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 12, v16, 4uLL, 0), !(_DWORD)result))
                        {
                          v17 = (const void *)*((_QWORD *)this + 20);
                          if (!v17
                            || (result = AriMsg::pack(*((AriMsg **)this + 6), 13, v17, 4uLL, 0), !(_DWORD)result))
                          {
                            v18 = (const void *)*((_QWORD *)this + 21);
                            if (!v18
                              || (result = AriMsg::pack(*((AriMsg **)this + 6), 14, v18, 4uLL, 0), !(_DWORD)result))
                            {
                              v19 = (const void *)*((_QWORD *)this + 22);
                              if (!v19
                                || (result = AriMsg::pack(*((AriMsg **)this + 6), 15, v19, 4uLL, 0), !(_DWORD)result))
                              {
                                v20 = (const void *)*((_QWORD *)this + 23);
                                if (!v20
                                  || (result = AriMsg::pack(*((AriMsg **)this + 6), 16, v20, 2uLL, 0), !(_DWORD)result))
                                {
                                  v21 = (const void *)*((_QWORD *)this + 24);
                                  if (!v21
                                    || (result = AriMsg::pack(*((AriMsg **)this + 6), 17, v21, 4uLL, 0),
                                        !(_DWORD)result))
                                  {
                                    v22 = (const void *)*((_QWORD *)this + 25);
                                    if (!v22
                                      || (result = AriMsg::pack(*((AriMsg **)this + 6), 18, v22, 4uLL, 0),
                                          !(_DWORD)result))
                                    {
                                      v23 = (const void *)*((_QWORD *)this + 26);
                                      if (!v23
                                        || (result = AriMsg::pack(*((AriMsg **)this + 6), 19, v23, 4uLL, 0),
                                            !(_DWORD)result))
                                      {
                                        v24 = (const void *)*((_QWORD *)this + 27);
                                        if (!v24
                                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 20, v24, 0x10uLL, 0),
                                              !(_DWORD)result))
                                        {
                                          v25 = (const void *)*((_QWORD *)this + 28);
                                          if (!v25
                                            || (result = AriMsg::pack(*((AriMsg **)this + 6), 21, v25, 0x18uLL, 0),
                                                !(_DWORD)result))
                                          {
                                            v26 = (const void *)*((_QWORD *)this + 29);
                                            if (!v26
                                              || (result = AriMsg::pack(*((AriMsg **)this + 6), 22, v26, 4uLL, 0),
                                                  !(_DWORD)result))
                                            {
                                              v27 = (const void *)*((_QWORD *)this + 30);
                                              if (!v27
                                                || (result = AriMsg::pack(*((AriMsg **)this + 6), 23, v27, 8uLL, 0),
                                                    !(_DWORD)result))
                                              {
                                                v28 = (const void *)*((_QWORD *)this + 31);
                                                if (!v28
                                                  || (result = AriMsg::pack(*((AriMsg **)this + 6), 24, v28, 4uLL, 0),
                                                      !(_DWORD)result))
                                                {
                                                  v29 = (const void *)*((_QWORD *)this + 32);
                                                  if (!v29
                                                    || (result = AriMsg::pack(*((AriMsg **)this + 6), 25, v29, 4uLL, 0), !(_DWORD)result))
                                                  {
                                                    result = 0;
                                                    *a2 = (AriMsg *)*((_QWORD *)this + 6);
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetCellInfoIndCb_SDK::unpack(AriSdk::ARI_IBINetCellInfoIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _QWORD *v5;
  _DWORD *v6;
  _WORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _BYTE *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _WORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _DWORD *v25;
  _QWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  BOOL v30;

  v30 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v30, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v30;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v30 = 0;
  v5 = (_QWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 8, &v30, 0);
  if ((_DWORD)v3 || !v30)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4000313F17);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<AriStatusTlv>::operator=<AriStatusTlv&,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4000313F17);
  }
  v30 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 4, &v30, 0);
  if ((_DWORD)v3 || !v30)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  }
  v30 = 0;
  v7 = (_WORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v7, 2, &v30, 0);
  if ((_DWORD)v3 || !v30)
  {
    MEMORY[0x212BB9B60](v7, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 11, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C40BDFB0063);
  }
  v30 = 0;
  v8 = (_DWORD *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v8, 4, &v30, 0);
  if ((_DWORD)v3 || !v30)
  {
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 12, v8);
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  }
  v30 = 0;
  v9 = (_DWORD *)operator new();
  *v9 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v9, 4, &v30, 0);
  if ((_DWORD)v3 || !v30)
  {
    MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 13, v9);
    MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
  }
  v30 = 0;
  v10 = (_DWORD *)operator new();
  *v10 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 7, v10, 4, &v30, 0);
  if ((_DWORD)v3 || !v30)
  {
    MEMORY[0x212BB9B60](v10, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 14, v10);
    MEMORY[0x212BB9B60](v10, 0x1000C4052888210);
  }
  v30 = 0;
  v11 = (_DWORD *)operator new();
  *v11 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 8, v11, 4, &v30, 0);
  if ((_DWORD)v3 || !v30)
  {
    MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 15, v11);
    MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
  }
  v30 = 0;
  v12 = (_DWORD *)operator new();
  *v12 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 9, v12, 4, &v30, 0);
  if ((_DWORD)v3 || !v30)
  {
    MEMORY[0x212BB9B60](v12, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 16, v12);
    MEMORY[0x212BB9B60](v12, 0x1000C4052888210);
  }
  v30 = 0;
  v13 = (_BYTE *)operator new();
  *v13 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 10, v13, 1, &v30, 0);
  if ((_DWORD)v3 || !v30)
  {
    MEMORY[0x212BB9B60](v13, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 17, v13);
    MEMORY[0x212BB9B60](v13, 0x1000C4077774924);
  }
  v30 = 0;
  v14 = (_DWORD *)operator new();
  *v14 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 11, v14, 4, &v30, 0);
  if ((_DWORD)v3 || !v30)
  {
    MEMORY[0x212BB9B60](v14, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 18, v14);
    MEMORY[0x212BB9B60](v14, 0x1000C4052888210);
  }
  v30 = 0;
  v15 = (_DWORD *)operator new();
  *v15 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 12, v15, 4, &v30, 0);
  if ((_DWORD)v3 || !v30)
  {
    MEMORY[0x212BB9B60](v15, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 19, v15);
    MEMORY[0x212BB9B60](v15, 0x1000C4052888210);
  }
  v30 = 0;
  v16 = (_DWORD *)operator new();
  *v16 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 13, v16, 4, &v30, 0);
  if ((_DWORD)v3 || !v30)
  {
    MEMORY[0x212BB9B60](v16, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 20, v16);
    MEMORY[0x212BB9B60](v16, 0x1000C4052888210);
  }
  v30 = 0;
  v17 = (_DWORD *)operator new();
  *v17 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 14, v17, 4, &v30, 0);
  if ((_DWORD)v3 || !v30)
  {
    MEMORY[0x212BB9B60](v17, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 21, v17);
    MEMORY[0x212BB9B60](v17, 0x1000C4052888210);
  }
  v30 = 0;
  v18 = (_DWORD *)operator new();
  *v18 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 15, v18, 4, &v30, 0);
  if ((_DWORD)v3 || !v30)
  {
    MEMORY[0x212BB9B60](v18, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 22, v18);
    MEMORY[0x212BB9B60](v18, 0x1000C4052888210);
  }
  v30 = 0;
  v19 = (_WORD *)operator new();
  *v19 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 16, v19, 2, &v30, 0);
  if ((_DWORD)v3 || !v30)
  {
    MEMORY[0x212BB9B60](v19, 0x1000C40BDFB0063);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)this + 23, v19);
    MEMORY[0x212BB9B60](v19, 0x1000C40BDFB0063);
  }
  v30 = 0;
  v20 = (_DWORD *)operator new();
  *v20 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 17, v20, 4, &v30, 0);
  if ((_DWORD)v3 || !v30)
  {
    MEMORY[0x212BB9B60](v20, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 24, v20);
    MEMORY[0x212BB9B60](v20, 0x1000C4052888210);
  }
  v30 = 0;
  v21 = (_DWORD *)operator new();
  *v21 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 18, v21, 4, &v30, 0);
  if ((_DWORD)v3 || !v30)
  {
    MEMORY[0x212BB9B60](v21, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 25, v21);
    MEMORY[0x212BB9B60](v21, 0x1000C4052888210);
  }
  v30 = 0;
  v22 = (_DWORD *)operator new();
  *v22 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 19, v22, 4, &v30, 0);
  if ((_DWORD)v3 || !v30)
  {
    MEMORY[0x212BB9B60](v22, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 26, v22);
    MEMORY[0x212BB9B60](v22, 0x1000C4052888210);
  }
  v30 = 0;
  v23 = (_QWORD *)operator new();
  *v23 = 0;
  v23[1] = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 20, v23, 16, &v30, 0);
  if ((_DWORD)v3 || !v30)
  {
    MEMORY[0x212BB9B60](v23, 0x1000C40B2B1FC38);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBINetCdma1xCellInfoParam>::operator=<IBINetCdma1xCellInfoParam&,void>((uint64_t *)this + 27, v23);
    MEMORY[0x212BB9B60](v23, 0x1000C40B2B1FC38);
  }
  v30 = 0;
  v24 = (_QWORD *)operator new();
  v24[1] = 0;
  v24[2] = 0;
  *v24 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 21, v24, 24, &v30, 0);
  if ((_DWORD)v3 || !v30)
  {
    MEMORY[0x212BB9B60](v24, 0x1000C40BD32EBF2);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBINetCdmaEvdoCellInfoParam>::operator=<IBINetCdmaEvdoCellInfoParam&,void>((uint64_t *)this + 28, (uint64_t)v24);
    MEMORY[0x212BB9B60](v24, 0x1000C40BD32EBF2);
  }
  v30 = 0;
  v25 = (_DWORD *)operator new();
  *v25 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 22, v25, 4, &v30, 0);
  if ((_DWORD)v3 || !v30)
  {
    MEMORY[0x212BB9B60](v25, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 29, v25);
    MEMORY[0x212BB9B60](v25, 0x1000C4052888210);
  }
  v30 = 0;
  v26 = (_QWORD *)operator new();
  *v26 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 23, v26, 8, &v30, 0);
  if ((_DWORD)v3 || !v30)
  {
    MEMORY[0x212BB9B60](v26, 0x1000C4000313F17);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<AriStatusTlv>::operator=<AriStatusTlv&,void>((uint64_t *)this + 30, v26);
    MEMORY[0x212BB9B60](v26, 0x1000C4000313F17);
  }
  v30 = 0;
  v27 = (_DWORD *)operator new();
  *v27 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 24, v27, 4, &v30, 0);
  if ((_DWORD)v3 || !v30)
  {
    MEMORY[0x212BB9B60](v27, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 31, v27);
    MEMORY[0x212BB9B60](v27, 0x1000C4052888210);
  }
  v30 = 0;
  v28 = (_DWORD *)operator new();
  *v28 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 25, v28, 4, &v30, 0);
  if (!(_DWORD)v3 && v30)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 32, v28);
  MEMORY[0x212BB9B60](v28, 0x1000C4052888210);
  return v3;
}

void sub_20E280784(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

uint64_t *AriSdk::Tlv<IBINetCdma1xCellInfoParam>::operator=<IBINetCdma1xCellInfoParam&,void>(uint64_t *a1, _OWORD *a2)
{
  _OWORD *v4;
  uint64_t v5;

  v4 = (_OWORD *)operator new();
  *v4 = *a2;
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40B2B1FC38);
  return a1;
}

uint64_t *AriSdk::Tlv<IBINetCdmaEvdoCellInfoParam>::operator=<IBINetCdmaEvdoCellInfoParam&,void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = operator new();
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *a1;
  *a1 = v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40BD32EBF2);
  return a1;
}

BOOL AriSdk::ARI_IBINetCellInfoIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetCellInfoIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 629178368;
}

double AriSdk::ARI_IBINetCellLteAcBarringStatusIndCb_SDK::ARI_IBINetCellLteAcBarringStatusIndCb_SDK(AriSdk::ARI_IBINetCellLteAcBarringStatusIndCb_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x25928000u, 0);
  *(_QWORD *)v1 = &off_24C911A00;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_QWORD *)v1 + 16) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x25928000u, 0);
  *(_QWORD *)v1 = &off_24C911A00;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_QWORD *)v1 + 16) = 0;
  return result;
}

double AriSdk::ARI_IBINetCellLteAcBarringStatusIndCb_SDK::ARI_IBINetCellLteAcBarringStatusIndCb_SDK(AriSdk::ARI_IBINetCellLteAcBarringStatusIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C911A00;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_QWORD *)v3 + 16) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C911A00;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_QWORD *)v3 + 16) = 0;
  return result;
}

void AriSdk::ARI_IBINetCellLteAcBarringStatusIndCb_SDK::~ARI_IBINetCellLteAcBarringStatusIndCb_SDK(AriSdk::ARI_IBINetCellLteAcBarringStatusIndCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = &off_24C911A00;
  v2 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  v5 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  v6 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C4000313F17);
  v7 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C4000313F17);
  v8 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v8)
    MEMORY[0x212BB9B60](v8, 0x1000C4000313F17);
  v9 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
    MEMORY[0x212BB9B60](v9, 0x1000C4077774924);
  v10 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v10)
    MEMORY[0x212BB9B60](v10, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetCellLteAcBarringStatusIndCb_SDK::~ARI_IBINetCellLteAcBarringStatusIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetCellLteAcBarringStatusIndCb_SDK::pack(AriSdk::ARI_IBINetCellLteAcBarringStatusIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 1uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 8uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v8, 8uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v9, 8uLL, 0), !(_DWORD)result))
          {
            v10 = (const void *)*((_QWORD *)this + 13);
            if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v10, 4uLL, 0), !(_DWORD)result))
            {
              v11 = (const void *)*((_QWORD *)this + 14);
              if (!v11 || (result = AriMsg::pack(*((AriMsg **)this + 6), 7, v11, 4uLL, 0), !(_DWORD)result))
              {
                v12 = (const void *)*((_QWORD *)this + 15);
                if (!v12 || (result = AriMsg::pack(*((AriMsg **)this + 6), 8, v12, 4uLL, 0), !(_DWORD)result))
                {
                  v13 = (const void *)*((_QWORD *)this + 16);
                  if (!v13 || (result = AriMsg::pack(*((AriMsg **)this + 6), 9, v13, 4uLL, 0), !(_DWORD)result))
                  {
                    result = 0;
                    *a2 = (AriMsg *)*((_QWORD *)this + 6);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetCellLteAcBarringStatusIndCb_SDK::unpack(AriSdk::ARI_IBINetCellLteAcBarringStatusIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _BYTE *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;

  v24 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v24, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v24;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v23 = 0;
  v5 = (_BYTE *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 1, &v23, 0);
  if ((_DWORD)v3 || !v23)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4077774924);
  }
  v22 = 0;
  v6 = (_QWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 8, &v22, 0);
  if ((_DWORD)v3 || !v22)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4000313F17);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<AriStatusTlv>::operator=<AriStatusTlv&,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4000313F17);
  }
  v21 = 0;
  v7 = (_QWORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v7, 8, &v21, 0);
  if ((_DWORD)v3 || !v21)
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4000313F17);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<AriStatusTlv>::operator=<AriStatusTlv&,void>((uint64_t *)this + 11, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C4000313F17);
  }
  v20 = 0;
  v8 = (_QWORD *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v8, 8, &v20, 0);
  if ((_DWORD)v3 || !v20)
  {
    MEMORY[0x212BB9B60](v8, 0x1000C4000313F17);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<AriStatusTlv>::operator=<AriStatusTlv&,void>((uint64_t *)this + 12, v8);
    MEMORY[0x212BB9B60](v8, 0x1000C4000313F17);
  }
  v19 = 0;
  v9 = (_DWORD *)operator new();
  *v9 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v9, 4, &v19, 0);
  if ((_DWORD)v3 || !v19)
  {
    MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v10 = (_DWORD *)operator new();
    *v10 = *v9;
    v11 = *((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = v10;
    if (v11)
      MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
    MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
  }
  v18 = 0;
  v12 = (_DWORD *)operator new();
  *v12 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 7, v12, 4, &v18, 0);
  if ((_DWORD)v3 || !v18)
  {
    MEMORY[0x212BB9B60](v12, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 14, v12);
    MEMORY[0x212BB9B60](v12, 0x1000C4052888210);
  }
  v17 = 0;
  v13 = (_DWORD *)operator new();
  *v13 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 8, v13, 4, &v17, 0);
  if ((_DWORD)v3 || !v17)
  {
    MEMORY[0x212BB9B60](v13, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 15, v13);
    MEMORY[0x212BB9B60](v13, 0x1000C4052888210);
  }
  v16 = 0;
  v14 = (_DWORD *)operator new();
  *v14 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 9, v14, 4, &v16, 0);
  if (!(_DWORD)v3 && v16)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 16, v14);
  MEMORY[0x212BB9B60](v14, 0x1000C4052888210);
  return v3;
}

void sub_20E2812F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetCellLteAcBarringStatusIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetCellLteAcBarringStatusIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 630358016;
}

double AriSdk::ARI_IBINetConnectionInfoIndCb_SDK::ARI_IBINetConnectionInfoIndCb_SDK(AriSdk::ARI_IBINetConnectionInfoIndCb_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x25810000u, 0);
  *(_QWORD *)v1 = &off_24C911A38;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x25810000u, 0);
  *(_QWORD *)v1 = &off_24C911A38;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

double AriSdk::ARI_IBINetConnectionInfoIndCb_SDK::ARI_IBINetConnectionInfoIndCb_SDK(AriSdk::ARI_IBINetConnectionInfoIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C911A38;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C911A38;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

void AriSdk::ARI_IBINetConnectionInfoIndCb_SDK::~ARI_IBINetConnectionInfoIndCb_SDK(AriSdk::ARI_IBINetConnectionInfoIndCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C911A38;
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetConnectionInfoIndCb_SDK::~ARI_IBINetConnectionInfoIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetConnectionInfoIndCb_SDK::pack(AriSdk::ARI_IBINetConnectionInfoIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 4uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v8, 4uLL, 0), !(_DWORD)result))
        {
          result = 0;
          *a2 = (AriMsg *)*((_QWORD *)this + 6);
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetConnectionInfoIndCb_SDK::unpack(AriSdk::ARI_IBINetConnectionInfoIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;

  v14 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v14, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v14;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v13 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v13, 0);
  if ((_DWORD)v3 || !v13)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v12 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 4, &v12, 0);
  if ((_DWORD)v3 || !v12)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  }
  v11 = 0;
  v7 = (_DWORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v7, 4, &v11, 0);
  if (!(_DWORD)v3 && v11)
  {
    v8 = (_DWORD *)operator new();
    *v8 = *v7;
    v9 = *((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v8;
    if (v9)
      MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
  }
  MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  return v3;
}

void sub_20E281890(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetConnectionInfoIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetConnectionInfoIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 629211136;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetEmergencyApacsScanFailIndCb_SDK::ARI_IBINetEmergencyApacsScanFailIndCb_SDK(AriSdk::ARI_IBINetEmergencyApacsScanFailIndCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x25950000u, 0);
  *(_QWORD *)result = &off_24C911A70;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x25950000u, 0);
  *(_QWORD *)result = &off_24C911A70;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetEmergencyApacsScanFailIndCb_SDK::ARI_IBINetEmergencyApacsScanFailIndCb_SDK(AriSdk::ARI_IBINetEmergencyApacsScanFailIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911A70;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911A70;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBINetEmergencyApacsScanFailIndCb_SDK::~ARI_IBINetEmergencyApacsScanFailIndCb_SDK(AriSdk::ARI_IBINetEmergencyApacsScanFailIndCb_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C911A70;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetEmergencyApacsScanFailIndCb_SDK::~ARI_IBINetEmergencyApacsScanFailIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetEmergencyApacsScanFailIndCb_SDK::pack(AriSdk::ARI_IBINetEmergencyApacsScanFailIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetEmergencyApacsScanFailIndCb_SDK::unpack(AriSdk::ARI_IBINetEmergencyApacsScanFailIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E281B1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetEmergencyApacsScanFailIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetEmergencyApacsScanFailIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 630521856;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetEmergencyCellEndReq_SDK::ARI_IBINetEmergencyCellEndReq_SDK(AriSdk::ARI_IBINetEmergencyCellEndReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x24910000u, 0);
  *(_QWORD *)result = &off_24C911AA8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x24910000u, 0);
  *(_QWORD *)result = &off_24C911AA8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetEmergencyCellEndReq_SDK::ARI_IBINetEmergencyCellEndReq_SDK(AriSdk::ARI_IBINetEmergencyCellEndReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911AA8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911AA8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBINetEmergencyCellEndReq_SDK::~ARI_IBINetEmergencyCellEndReq_SDK(AriSdk::ARI_IBINetEmergencyCellEndReq_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C911AA8;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetEmergencyCellEndReq_SDK::~ARI_IBINetEmergencyCellEndReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetEmergencyCellEndReq_SDK::pack(AriSdk::ARI_IBINetEmergencyCellEndReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetEmergencyCellEndReq_SDK::unpack(AriSdk::ARI_IBINetEmergencyCellEndReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E281D90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetEmergencyCellEndReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetEmergencyCellEndReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 613482496;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetEmergencyCellEndRspCb_SDK::ARI_IBINetEmergencyCellEndRspCb_SDK(AriSdk::ARI_IBINetEmergencyCellEndRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x25110000u, 0);
  *(_QWORD *)result = &off_24C911AE0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x25110000u, 0);
  *(_QWORD *)result = &off_24C911AE0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetEmergencyCellEndRspCb_SDK::ARI_IBINetEmergencyCellEndRspCb_SDK(AriSdk::ARI_IBINetEmergencyCellEndRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911AE0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911AE0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBINetEmergencyCellEndRspCb_SDK::~ARI_IBINetEmergencyCellEndRspCb_SDK(AriSdk::ARI_IBINetEmergencyCellEndRspCb_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C911AE0;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetEmergencyCellEndRspCb_SDK::~ARI_IBINetEmergencyCellEndRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetEmergencyCellEndRspCb_SDK::pack(AriSdk::ARI_IBINetEmergencyCellEndRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetEmergencyCellEndRspCb_SDK::unpack(AriSdk::ARI_IBINetEmergencyCellEndRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E282004(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetEmergencyCellEndRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetEmergencyCellEndRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 621871104;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetEmergencyCellSearchFailIndCb_SDK::ARI_IBINetEmergencyCellSearchFailIndCb_SDK(AriSdk::ARI_IBINetEmergencyCellSearchFailIndCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x25938000u, 0);
  *(_QWORD *)result = &off_24C911B18;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x25938000u, 0);
  *(_QWORD *)result = &off_24C911B18;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetEmergencyCellSearchFailIndCb_SDK::ARI_IBINetEmergencyCellSearchFailIndCb_SDK(AriSdk::ARI_IBINetEmergencyCellSearchFailIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911B18;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911B18;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBINetEmergencyCellSearchFailIndCb_SDK::~ARI_IBINetEmergencyCellSearchFailIndCb_SDK(AriSdk::ARI_IBINetEmergencyCellSearchFailIndCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C911B18;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetEmergencyCellSearchFailIndCb_SDK::~ARI_IBINetEmergencyCellSearchFailIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetEmergencyCellSearchFailIndCb_SDK::pack(AriSdk::ARI_IBINetEmergencyCellSearchFailIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetEmergencyCellSearchFailIndCb_SDK::unpack(AriSdk::ARI_IBINetEmergencyCellSearchFailIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v9, 0);
  if (!(_DWORD)v3 && v9)
  {
    v6 = (_DWORD *)operator new();
    *v6 = *v5;
    v7 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v6;
    if (v7)
      MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  }
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E28238C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetEmergencyCellSearchFailIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetEmergencyCellSearchFailIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 630423552;
}

double AriSdk::ARI_IBINetEmergencyCellSearchReq_SDK::ARI_IBINetEmergencyCellSearchReq_SDK(AriSdk::ARI_IBINetEmergencyCellSearchReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x24928000u, 0);
  *(_QWORD *)v1 = &off_24C911B50;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_QWORD *)v1 + 12) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x24928000u, 0);
  *(_QWORD *)v1 = &off_24C911B50;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_QWORD *)v1 + 12) = 0;
  return result;
}

double AriSdk::ARI_IBINetEmergencyCellSearchReq_SDK::ARI_IBINetEmergencyCellSearchReq_SDK(AriSdk::ARI_IBINetEmergencyCellSearchReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C911B50;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_QWORD *)v3 + 12) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C911B50;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_QWORD *)v3 + 12) = 0;
  return result;
}

void AriSdk::ARI_IBINetEmergencyCellSearchReq_SDK::~ARI_IBINetEmergencyCellSearchReq_SDK(AriSdk::ARI_IBINetEmergencyCellSearchReq_SDK *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C911B50;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetEmergencyCellSearchReq_SDK::~ARI_IBINetEmergencyCellSearchReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetEmergencyCellSearchReq_SDK::pack(AriSdk::ARI_IBINetEmergencyCellSearchReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  _BYTE *v7;
  _BYTE *v8;
  BOOL v9;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (_BYTE *)*((_QWORD *)this + 10);
      v8 = (_BYTE *)*((_QWORD *)this + 11);
      if (v7)
        v9 = v7 == v8;
      else
        v9 = 1;
      if (v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v7, v8 - v7, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetEmergencyCellSearchReq_SDK::unpack(AriSdk::ARI_IBINetEmergencyCellSearchReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  size_t v11;
  void **v12;
  const char *v13;
  void **v14;
  void *v15;
  unint64_t v17;
  BOOL v18;
  void *__p[2];
  char v20;

  LOBYTE(__p[0]) = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v2, 4, (BOOL *)__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = LOBYTE(__p[0]) == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  LOBYTE(__p[0]) = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v5, 4, (BOOL *)__p, 0);
  if ((_DWORD)v3 || !LOBYTE(__p[0]))
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v18 = 0;
  v17 = 0xAAAAAAAAAAAAAAAALL;
  v6 = (_QWORD *)operator new[]();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v6, 8, &v18, &v17);
  if (!(_DWORD)v3 && v18)
  {
    v7 = v17;
    if (v17 >= 4)
    {
      v11 = v17 & 0xFFFFFFFFFFFFFFFCLL;
      v8 = (char *)operator new(v17 & 0xFFFFFFFFFFFFFFFCLL);
      v10 = &v8[4 * (v7 >> 2)];
      memcpy(v8, v6, v11);
      v9 = &v8[v11];
    }
    else
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
    }
    v12 = (void **)((char *)this + 80);
    if ((unint64_t)(v9 - v8) < 9)
    {
      v15 = *v12;
      if (*v12)
      {
        *((_QWORD *)this + 11) = v15;
        operator delete(v15);
        *v12 = 0;
        *((_QWORD *)this + 11) = 0;
        *((_QWORD *)this + 12) = 0;
      }
      *((_QWORD *)this + 10) = v8;
      *((_QWORD *)this + 11) = v9;
      *((_QWORD *)this + 12) = v10;
    }
    else
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
      if (v20 >= 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v13, v14, 360, v12, (v9 - v8) >> 2, 2);
      if (v20 < 0)
        operator delete(__p[0]);
      if (v8)
        operator delete(v8);
    }
  }
  MEMORY[0x212BB9B48](v6, 0x1000C8052888210);
  return v3;
}

void sub_20E2828C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void *v22;

  if (a21 < 0)
    operator delete(__p);
  if (v22)
    operator delete(v22);
  MEMORY[0x212BB9B48](v21, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetEmergencyCellSearchReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetEmergencyCellSearchReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 613580800;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetEmergencyCellSearchRspCb_SDK::ARI_IBINetEmergencyCellSearchRspCb_SDK(AriSdk::ARI_IBINetEmergencyCellSearchRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x25128000u, 0);
  *(_QWORD *)result = &off_24C911B88;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x25128000u, 0);
  *(_QWORD *)result = &off_24C911B88;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetEmergencyCellSearchRspCb_SDK::ARI_IBINetEmergencyCellSearchRspCb_SDK(AriSdk::ARI_IBINetEmergencyCellSearchRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911B88;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911B88;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBINetEmergencyCellSearchRspCb_SDK::~ARI_IBINetEmergencyCellSearchRspCb_SDK(AriSdk::ARI_IBINetEmergencyCellSearchRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C911B88;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetEmergencyCellSearchRspCb_SDK::~ARI_IBINetEmergencyCellSearchRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetEmergencyCellSearchRspCb_SDK::pack(AriSdk::ARI_IBINetEmergencyCellSearchRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetEmergencyCellSearchRspCb_SDK::unpack(AriSdk::ARI_IBINetEmergencyCellSearchRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E282C74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetEmergencyCellSearchRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetEmergencyCellSearchRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 621969408;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetGetAcBarringInfoReq_SDK::ARI_IBINetGetAcBarringInfoReq_SDK(AriSdk::ARI_IBINetGetAcBarringInfoReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x24920000u, 0);
  *(_QWORD *)result = &off_24C911BC0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x24920000u, 0);
  *(_QWORD *)result = &off_24C911BC0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetGetAcBarringInfoReq_SDK::ARI_IBINetGetAcBarringInfoReq_SDK(AriSdk::ARI_IBINetGetAcBarringInfoReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911BC0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911BC0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBINetGetAcBarringInfoReq_SDK::~ARI_IBINetGetAcBarringInfoReq_SDK(AriSdk::ARI_IBINetGetAcBarringInfoReq_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C911BC0;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetGetAcBarringInfoReq_SDK::~ARI_IBINetGetAcBarringInfoReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetGetAcBarringInfoReq_SDK::pack(AriSdk::ARI_IBINetGetAcBarringInfoReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetGetAcBarringInfoReq_SDK::unpack(AriSdk::ARI_IBINetGetAcBarringInfoReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E282EF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetGetAcBarringInfoReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetGetAcBarringInfoReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 613548032;
}

double AriSdk::ARI_IBINetGetAcBarringInfoRspCb_SDK::ARI_IBINetGetAcBarringInfoRspCb_SDK(AriSdk::ARI_IBINetGetAcBarringInfoRspCb_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x25120000u, 0);
  *(_QWORD *)v1 = &off_24C911BF8;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x25120000u, 0);
  *(_QWORD *)v1 = &off_24C911BF8;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  return result;
}

double AriSdk::ARI_IBINetGetAcBarringInfoRspCb_SDK::ARI_IBINetGetAcBarringInfoRspCb_SDK(AriSdk::ARI_IBINetGetAcBarringInfoRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C911BF8;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C911BF8;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  return result;
}

void AriSdk::ARI_IBINetGetAcBarringInfoRspCb_SDK::~ARI_IBINetGetAcBarringInfoRspCb_SDK(AriSdk::ARI_IBINetGetAcBarringInfoRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_24C911BF8;
  v2 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  v5 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C403E1C8BA9);
  v6 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetGetAcBarringInfoRspCb_SDK::~ARI_IBINetGetAcBarringInfoRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetGetAcBarringInfoRspCb_SDK::pack(AriSdk::ARI_IBINetGetAcBarringInfoRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 0xCuLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v8, 4uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v9, 4uLL, 0), !(_DWORD)result))
          {
            v10 = (const void *)*((_QWORD *)this + 13);
            if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 7, v10, 4uLL, 0), !(_DWORD)result))
            {
              result = 0;
              *a2 = (AriMsg *)*((_QWORD *)this + 6);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetGetAcBarringInfoRspCb_SDK::unpack(AriSdk::ARI_IBINetGetAcBarringInfoRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;

  v18 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v18, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v18;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v17 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v17, 0);
  if ((_DWORD)v3 || !v17)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v16 = 0;
  v6 = (_DWORD *)operator new();
  *(_QWORD *)v6 = 0;
  v6[2] = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 12, &v16, 0);
  if ((_DWORD)v3 || !v16)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C403E1C8BA9);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v7 = operator new();
    *(_QWORD *)v7 = *(_QWORD *)v6;
    *(_DWORD *)(v7 + 8) = v6[2];
    v8 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v7;
    if (v8)
      MEMORY[0x212BB9B60](v8, 0x1000C403E1C8BA9);
    MEMORY[0x212BB9B60](v6, 0x1000C403E1C8BA9);
  }
  v15 = 0;
  v9 = (_DWORD *)operator new();
  *v9 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v9, 4, &v15, 0);
  if ((_DWORD)v3 || !v15)
  {
    MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 11, v9);
    MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
  }
  v14 = 0;
  v10 = (_DWORD *)operator new();
  *v10 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v10, 4, &v14, 0);
  if ((_DWORD)v3 || !v14)
  {
    MEMORY[0x212BB9B60](v10, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 12, v10);
    MEMORY[0x212BB9B60](v10, 0x1000C4052888210);
  }
  v13 = 0;
  v11 = (_DWORD *)operator new();
  *v11 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 7, v11, 4, &v13, 0);
  if (!(_DWORD)v3 && v13)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 13, v11);
  MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
  return v3;
}

void sub_20E2835F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetGetAcBarringInfoRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetGetAcBarringInfoRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 621936640;
}

AriSdk::ARI_IBINetGetCellInfoIndCb_SDK *AriSdk::ARI_IBINetGetCellInfoIndCb_SDK::ARI_IBINetGetCellInfoIndCb_SDK(AriSdk::ARI_IBINetGetCellInfoIndCb_SDK *this)
{
  AriSdk::MsgBase *v2;

  v2 = AriSdk::MsgBase::MsgBase(this, 0x25838000u, 0);
  *(_QWORD *)v2 = &off_24C911C30;
  bzero((char *)v2 + 64, 0x2F0uLL);
  return this;
}

{
  AriSdk::MsgBase *v2;

  v2 = AriSdk::MsgBase::MsgBase(this, 0x25838000u, 0);
  *(_QWORD *)v2 = &off_24C911C30;
  bzero((char *)v2 + 64, 0x2F0uLL);
  return this;
}

AriSdk::ARI_IBINetGetCellInfoIndCb_SDK *AriSdk::ARI_IBINetGetCellInfoIndCb_SDK::ARI_IBINetGetCellInfoIndCb_SDK(AriSdk::ARI_IBINetGetCellInfoIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v4;

  v4 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v4 = &off_24C911C30;
  bzero((char *)v4 + 64, 0x2F0uLL);
  return this;
}

{
  AriSdk::MsgBase *v4;

  v4 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v4 = &off_24C911C30;
  bzero((char *)v4 + 64, 0x2F0uLL);
  return this;
}

void AriSdk::ARI_IBINetGetCellInfoIndCb_SDK::~ARI_IBINetGetCellInfoIndCb_SDK(AriSdk::ARI_IBINetGetCellInfoIndCb_SDK *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  *(_QWORD *)this = &off_24C911C30;
  v2 = (void *)*((_QWORD *)this + 99);
  if (v2)
  {
    *((_QWORD *)this + 100) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 96);
  if (v3)
  {
    *((_QWORD *)this + 97) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 93);
  if (v4)
  {
    *((_QWORD *)this + 94) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 90);
  if (v5)
  {
    *((_QWORD *)this + 91) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 87);
  if (v6)
  {
    *((_QWORD *)this + 88) = v6;
    operator delete(v6);
  }
  v7 = *((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  v8 = (void *)*((_QWORD *)this + 83);
  if (v8)
  {
    *((_QWORD *)this + 84) = v8;
    operator delete(v8);
  }
  v9 = *((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v9)
    MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
  v10 = (void *)*((_QWORD *)this + 79);
  if (v10)
  {
    *((_QWORD *)this + 80) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 76);
  if (v11)
  {
    *((_QWORD *)this + 77) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 73);
  if (v12)
  {
    *((_QWORD *)this + 74) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 70);
  if (v13)
  {
    *((_QWORD *)this + 71) = v13;
    operator delete(v13);
  }
  v14 = *((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = 0;
  if (v14)
    MEMORY[0x212BB9B60](v14, 0x1000C4052888210);
  v15 = *((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = 0;
  if (v15)
    MEMORY[0x212BB9B60](v15, 0x1000C4077774924);
  v16 = (void *)*((_QWORD *)this + 65);
  if (v16)
  {
    *((_QWORD *)this + 66) = v16;
    operator delete(v16);
  }
  v17 = *((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v17)
    MEMORY[0x212BB9B60](v17, 0x1000C4052888210);
  v18 = *((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = 0;
  if (v18)
    MEMORY[0x212BB9B60](v18, 0x1000C4077774924);
  v19 = (void *)*((_QWORD *)this + 60);
  if (v19)
  {
    *((_QWORD *)this + 61) = v19;
    operator delete(v19);
  }
  v20 = *((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v20)
    MEMORY[0x212BB9B60](v20, 0x1000C4052888210);
  v21 = *((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v21)
    MEMORY[0x212BB9B60](v21, 0x1000C4077774924);
  v22 = (void *)*((_QWORD *)this + 55);
  if (v22)
  {
    *((_QWORD *)this + 56) = v22;
    operator delete(v22);
  }
  v23 = *((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v23)
    MEMORY[0x212BB9B60](v23, 0x1000C4052888210);
  v24 = *((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v24)
    MEMORY[0x212BB9B60](v24, 0x1000C4077774924);
  v25 = (void *)*((_QWORD *)this + 50);
  if (v25)
  {
    *((_QWORD *)this + 51) = v25;
    operator delete(v25);
  }
  v26 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v26)
    MEMORY[0x212BB9B60](v26, 0x1000C4052888210);
  v27 = *((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v27)
    MEMORY[0x212BB9B60](v27, 0x1000C4077774924);
  v28 = (void *)*((_QWORD *)this + 45);
  if (v28)
  {
    *((_QWORD *)this + 46) = v28;
    operator delete(v28);
  }
  v29 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v29)
    MEMORY[0x212BB9B60](v29, 0x1000C4052888210);
  v30 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v30)
    MEMORY[0x212BB9B60](v30, 0x1000C4077774924);
  v31 = (void *)*((_QWORD *)this + 40);
  if (v31)
  {
    *((_QWORD *)this + 41) = v31;
    operator delete(v31);
  }
  v32 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v32)
    MEMORY[0x212BB9B60](v32, 0x1000C4052888210);
  v33 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v33)
    MEMORY[0x212BB9B60](v33, 0x1000C4077774924);
  v34 = (void *)*((_QWORD *)this + 35);
  if (v34)
  {
    *((_QWORD *)this + 36) = v34;
    operator delete(v34);
  }
  v35 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v35)
    MEMORY[0x212BB9B60](v35, 0x1000C4052888210);
  v36 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v36)
    MEMORY[0x212BB9B60](v36, 0x1000C4077774924);
  v37 = (void *)*((_QWORD *)this + 30);
  if (v37)
  {
    *((_QWORD *)this + 31) = v37;
    operator delete(v37);
  }
  v38 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v38)
    MEMORY[0x212BB9B60](v38, 0x1000C4052888210);
  v39 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v39)
    MEMORY[0x212BB9B60](v39, 0x1000C4077774924);
  v40 = (void *)*((_QWORD *)this + 25);
  if (v40)
  {
    *((_QWORD *)this + 26) = v40;
    operator delete(v40);
  }
  v41 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v41)
    MEMORY[0x212BB9B60](v41, 0x1000C4052888210);
  v42 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v42)
    MEMORY[0x212BB9B60](v42, 0x1000C4077774924);
  v43 = (void *)*((_QWORD *)this + 20);
  if (v43)
  {
    *((_QWORD *)this + 21) = v43;
    operator delete(v43);
  }
  v44 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v44)
    MEMORY[0x212BB9B60](v44, 0x1000C4052888210);
  v45 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v45)
    MEMORY[0x212BB9B60](v45, 0x1000C4077774924);
  v46 = (void *)*((_QWORD *)this + 15);
  if (v46)
  {
    *((_QWORD *)this + 16) = v46;
    operator delete(v46);
  }
  v47 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v47)
    MEMORY[0x212BB9B60](v47, 0x1000C4052888210);
  v48 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v48)
    MEMORY[0x212BB9B60](v48, 0x1000C4077774924);
  v49 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v49)
    MEMORY[0x212BB9B60](v49, 0x1000C4052888210);
  v50 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v50)
    MEMORY[0x212BB9B60](v50, 0x1000C4077774924);
  v51 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v51)
    MEMORY[0x212BB9B60](v51, 0x1000C4077774924);
  v52 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v52)
    MEMORY[0x212BB9B60](v52, 0x1000C4077774924);
  v53 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v53)
    MEMORY[0x212BB9B60](v53, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetGetCellInfoIndCb_SDK::~ARI_IBINetGetCellInfoIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetGetCellInfoIndCb_SDK::pack(AriSdk::ARI_IBINetGetCellInfoIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  _BYTE *v12;
  _BYTE *v13;
  const void *v14;
  const void *v15;
  _BYTE *v16;
  _BYTE *v17;
  const void *v18;
  const void *v19;
  _BYTE *v20;
  _BYTE *v21;
  const void *v22;
  const void *v23;
  _BYTE *v24;
  _BYTE *v25;
  const void *v26;
  const void *v27;
  _BYTE *v28;
  _BYTE *v29;
  const void *v30;
  const void *v31;
  _BYTE *v32;
  _BYTE *v33;
  const void *v34;
  const void *v35;
  _BYTE *v36;
  _BYTE *v37;
  const void *v38;
  const void *v39;
  _BYTE *v40;
  _BYTE *v41;
  const void *v42;
  const void *v43;
  _BYTE *v44;
  _BYTE *v45;
  const void *v46;
  const void *v47;
  _BYTE *v48;
  _BYTE *v49;
  const void *v50;
  const void *v51;
  _BYTE *v52;
  _BYTE *v53;
  const void *v54;
  const void *v55;
  _BYTE *v56;
  _BYTE *v57;
  _BYTE *v58;
  _BYTE *v59;
  _BYTE *v60;
  _BYTE *v61;
  _BYTE *v62;
  _BYTE *v63;
  const void *v64;
  _BYTE *v65;
  _BYTE *v66;
  const void *v67;
  _BYTE *v68;
  _BYTE *v69;
  _BYTE *v70;
  _BYTE *v71;
  _BYTE *v72;
  _BYTE *v73;
  _BYTE *v74;
  _BYTE *v75;
  _BYTE *v76;
  _BYTE *v77;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 1uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 1uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v8, 1uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v9, 4uLL, 0), !(_DWORD)result))
          {
            v10 = (const void *)*((_QWORD *)this + 13);
            if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v10, 1uLL, 0), !(_DWORD)result))
            {
              v11 = (const void *)*((_QWORD *)this + 14);
              if (!v11 || (result = AriMsg::pack(*((AriMsg **)this + 6), 7, v11, 4uLL, 0), !(_DWORD)result))
              {
                v12 = (_BYTE *)*((_QWORD *)this + 15);
                if (!v12
                  || (v13 = (_BYTE *)*((_QWORD *)this + 16), v12 == v13)
                  || (result = AriMsg::pack(*((AriMsg **)this + 6), 8, v12, v13 - v12, 0), !(_DWORD)result))
                {
                  v14 = (const void *)*((_QWORD *)this + 18);
                  if (!v14 || (result = AriMsg::pack(*((AriMsg **)this + 6), 9, v14, 1uLL, 0), !(_DWORD)result))
                  {
                    v15 = (const void *)*((_QWORD *)this + 19);
                    if (!v15 || (result = AriMsg::pack(*((AriMsg **)this + 6), 10, v15, 4uLL, 0), !(_DWORD)result))
                    {
                      v16 = (_BYTE *)*((_QWORD *)this + 20);
                      if (!v16
                        || (v17 = (_BYTE *)*((_QWORD *)this + 21), v16 == v17)
                        || (result = AriMsg::pack(*((AriMsg **)this + 6), 11, v16, v17 - v16, 0), !(_DWORD)result))
                      {
                        v18 = (const void *)*((_QWORD *)this + 23);
                        if (!v18
                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 12, v18, 1uLL, 0), !(_DWORD)result))
                        {
                          v19 = (const void *)*((_QWORD *)this + 24);
                          if (!v19
                            || (result = AriMsg::pack(*((AriMsg **)this + 6), 13, v19, 4uLL, 0), !(_DWORD)result))
                          {
                            v20 = (_BYTE *)*((_QWORD *)this + 25);
                            if (!v20
                              || (v21 = (_BYTE *)*((_QWORD *)this + 26), v20 == v21)
                              || (result = AriMsg::pack(*((AriMsg **)this + 6), 14, v20, v21 - v20, 0), !(_DWORD)result))
                            {
                              v22 = (const void *)*((_QWORD *)this + 28);
                              if (!v22
                                || (result = AriMsg::pack(*((AriMsg **)this + 6), 15, v22, 1uLL, 0), !(_DWORD)result))
                              {
                                v23 = (const void *)*((_QWORD *)this + 29);
                                if (!v23
                                  || (result = AriMsg::pack(*((AriMsg **)this + 6), 16, v23, 4uLL, 0), !(_DWORD)result))
                                {
                                  v24 = (_BYTE *)*((_QWORD *)this + 30);
                                  if (!v24
                                    || (v25 = (_BYTE *)*((_QWORD *)this + 31), v24 == v25)
                                    || (result = AriMsg::pack(*((AriMsg **)this + 6), 17, v24, v25 - v24, 0),
                                        !(_DWORD)result))
                                  {
                                    v26 = (const void *)*((_QWORD *)this + 33);
                                    if (!v26
                                      || (result = AriMsg::pack(*((AriMsg **)this + 6), 18, v26, 1uLL, 0),
                                          !(_DWORD)result))
                                    {
                                      v27 = (const void *)*((_QWORD *)this + 34);
                                      if (!v27
                                        || (result = AriMsg::pack(*((AriMsg **)this + 6), 19, v27, 4uLL, 0),
                                            !(_DWORD)result))
                                      {
                                        v28 = (_BYTE *)*((_QWORD *)this + 35);
                                        if (!v28
                                          || (v29 = (_BYTE *)*((_QWORD *)this + 36), v28 == v29)
                                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 20, v28, v29 - v28, 0),
                                              !(_DWORD)result))
                                        {
                                          v30 = (const void *)*((_QWORD *)this + 38);
                                          if (!v30
                                            || (result = AriMsg::pack(*((AriMsg **)this + 6), 21, v30, 1uLL, 0),
                                                !(_DWORD)result))
                                          {
                                            v31 = (const void *)*((_QWORD *)this + 39);
                                            if (!v31
                                              || (result = AriMsg::pack(*((AriMsg **)this + 6), 22, v31, 4uLL, 0),
                                                  !(_DWORD)result))
                                            {
                                              v32 = (_BYTE *)*((_QWORD *)this + 40);
                                              if (!v32
                                                || (v33 = (_BYTE *)*((_QWORD *)this + 41), v32 == v33)
                                                || (result = AriMsg::pack(*((AriMsg **)this + 6), 23, v32, v33 - v32, 0), !(_DWORD)result))
                                              {
                                                v34 = (const void *)*((_QWORD *)this + 43);
                                                if (!v34
                                                  || (result = AriMsg::pack(*((AriMsg **)this + 6), 24, v34, 1uLL, 0),
                                                      !(_DWORD)result))
                                                {
                                                  v35 = (const void *)*((_QWORD *)this + 44);
                                                  if (!v35
                                                    || (result = AriMsg::pack(*((AriMsg **)this + 6), 25, v35, 4uLL, 0), !(_DWORD)result))
                                                  {
                                                    v36 = (_BYTE *)*((_QWORD *)this + 45);
                                                    if (!v36
                                                      || (v37 = (_BYTE *)*((_QWORD *)this + 46), v36 == v37)
                                                      || (result = AriMsg::pack(*((AriMsg **)this + 6), 26, v36, v37 - v36, 0), !(_DWORD)result))
                                                    {
                                                      v38 = (const void *)*((_QWORD *)this + 48);
                                                      if (!v38
                                                        || (result = AriMsg::pack(*((AriMsg **)this + 6), 27, v38, 1uLL, 0), !(_DWORD)result))
                                                      {
                                                        v39 = (const void *)*((_QWORD *)this + 49);
                                                        if (!v39
                                                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 28, v39, 4uLL, 0), !(_DWORD)result))
                                                        {
                                                          v40 = (_BYTE *)*((_QWORD *)this + 50);
                                                          if (!v40
                                                            || (v41 = (_BYTE *)*((_QWORD *)this + 51), v40 == v41)
                                                            || (result = AriMsg::pack(*((AriMsg **)this + 6), 29, v40, v41 - v40, 0), !(_DWORD)result))
                                                          {
                                                            v42 = (const void *)*((_QWORD *)this + 53);
                                                            if (!v42
                                                              || (result = AriMsg::pack(*((AriMsg **)this + 6), 30, v42, 1uLL, 0), !(_DWORD)result))
                                                            {
                                                              v43 = (const void *)*((_QWORD *)this + 54);
                                                              if (!v43
                                                                || (result = AriMsg::pack(*((AriMsg **)this + 6), 31, v43, 4uLL, 0), !(_DWORD)result))
                                                              {
                                                                v44 = (_BYTE *)*((_QWORD *)this + 55);
                                                                if (!v44
                                                                  || (v45 = (_BYTE *)*((_QWORD *)this + 56), v44 == v45)
                                                                  || (result = AriMsg::pack(*((AriMsg **)this + 6), 32, v44, v45 - v44, 0), !(_DWORD)result))
                                                                {
                                                                  v46 = (const void *)*((_QWORD *)this + 58);
                                                                  if (!v46
                                                                    || (result = AriMsg::pack(*((AriMsg **)this + 6), 33, v46, 1uLL, 0), !(_DWORD)result))
                                                                  {
                                                                    v47 = (const void *)*((_QWORD *)this + 59);
                                                                    if (!v47
                                                                      || (result = AriMsg::pack(*((AriMsg **)this + 6), 34, v47, 4uLL, 0), !(_DWORD)result))
                                                                    {
                                                                      v48 = (_BYTE *)*((_QWORD *)this + 60);
                                                                      if (!v48
                                                                        || (v49 = (_BYTE *)*((_QWORD *)this + 61),
                                                                            v48 == v49)
                                                                        || (result = AriMsg::pack(*((AriMsg **)this + 6), 35, v48, v49 - v48, 0), !(_DWORD)result))
                                                                      {
                                                                        v50 = (const void *)*((_QWORD *)this + 63);
                                                                        if (!v50
                                                                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 36, v50, 1uLL, 0), !(_DWORD)result))
                                                                        {
                                                                          v51 = (const void *)*((_QWORD *)this + 64);
                                                                          if (!v51
                                                                            || (result = AriMsg::pack(*((AriMsg **)this + 6), 37, v51, 4uLL, 0), !(_DWORD)result))
                                                                          {
                                                                            v52 = (_BYTE *)*((_QWORD *)this + 65);
                                                                            if (!v52
                                                                              || (v53 = (_BYTE *)*((_QWORD *)this + 66),
                                                                                  v52 == v53)
                                                                              || (result = AriMsg::pack(*((AriMsg **)this + 6), 38, v52, v53 - v52, 0), !(_DWORD)result))
                                                                            {
                                                                              v54 = (const void *)*((_QWORD *)this + 68);
                                                                              if (!v54
                                                                                || (result = AriMsg::pack(*((AriMsg **)this + 6), 39, v54, 1uLL, 0), !(_DWORD)result))
                                                                              {
                                                                                v55 = (const void *)*((_QWORD *)this + 69);
                                                                                if (!v55
                                                                                  || (result = AriMsg::pack(*((AriMsg **)this + 6), 40, v55, 4uLL, 0), !(_DWORD)result))
                                                                                {
                                                                                  v56 = (_BYTE *)*((_QWORD *)this + 70);
                                                                                  if (!v56
                                                                                    || (v57 = (_BYTE *)*((_QWORD *)this + 71),
                                                                                        v56 == v57)
                                                                                    || (result = AriMsg::pack(*((AriMsg **)this + 6), 41, v56, v57 - v56, 0), !(_DWORD)result))
                                                                                  {
                                                                                    v58 = (_BYTE *)*((_QWORD *)this + 73);
                                                                                    if (!v58
                                                                                      || (v59 = (_BYTE *)*((_QWORD *)this + 74),
                                                                                          v58 == v59)
                                                                                      || (result = AriMsg::pack(*((AriMsg **)this + 6), 42, v58, v59 - v58, 0), !(_DWORD)result))
                                                                                    {
                                                                                      v60 = (_BYTE *)*((_QWORD *)this + 76);
                                                                                      if (!v60
                                                                                        || (v61 = (_BYTE *)*((_QWORD *)this + 77),
                                                                                            v60 == v61)
                                                                                        || (result = AriMsg::pack(*((AriMsg **)this + 6), 43, v60, v61 - v60, 0),
                                                                                            !(_DWORD)result))
                                                                                      {
                                                                                        v62 = (_BYTE *)*((_QWORD *)this + 79);
                                                                                        if (!v62
                                                                                          || (v63 = (_BYTE *)*((_QWORD *)this + 80),
                                                                                              v62 == v63)
                                                                                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 44, v62, v63 - v62, 0),
                                                                                              !(_DWORD)result))
                                                                                        {
                                                                                          v64 = (const void *)*((_QWORD *)this + 82);
                                                                                          if (!v64
                                                                                            || (result = AriMsg::pack(*((AriMsg **)this + 6), 45, v64, 4uLL, 0),
                                                                                                !(_DWORD)result))
                                                                                          {
                                                                                            v65 = (_BYTE *)*((_QWORD *)this + 83);
                                                                                            if (!v65
                                                                                              || (v66 = (_BYTE *)*((_QWORD *)this + 84),
                                                                                                  v65 == v66)
                                                                                              || (result = AriMsg::pack(*((AriMsg **)this + 6), 46, v65, v66 - v65, 0),
                                                                                                  !(_DWORD)result))
                                                                                            {
                                                                                              v67 = (const void *)*((_QWORD *)this + 86);
                                                                                              if (!v67
                                                                                                || (result = AriMsg::pack(*((AriMsg **)this + 6), 47, v67, 4uLL, 0),
                                                                                                    !(_DWORD)result))
                                                                                              {
                                                                                                v68 = (_BYTE *)*((_QWORD *)this + 87);
                                                                                                if (!v68 || (v69 = (_BYTE *)*((_QWORD *)this + 88), v68 == v69) || (result = AriMsg::pack(*((AriMsg **)this + 6), 48, v68, v69 - v68, 0), !(_DWORD)result))
                                                                                                {
                                                                                                  v70 = (_BYTE *)*((_QWORD *)this + 90);
                                                                                                  if (!v70 || (v71 = (_BYTE *)*((_QWORD *)this + 91), v70 == v71) || (result = AriMsg::pack(*((AriMsg **)this + 6), 49, v70, v71 - v70, 0), !(_DWORD)result))
                                                                                                  {
                                                                                                    v72 = (_BYTE *)*((_QWORD *)this + 93);
                                                                                                    if (!v72 || (v73 = (_BYTE *)*((_QWORD *)this + 94), v72 == v73) || (result = AriMsg::pack(*((AriMsg **)this + 6), 50, v72, v73 - v72, 0), !(_DWORD)result))
                                                                                                    {
                                                                                                      v74 = (_BYTE *)*((_QWORD *)this + 96);
                                                                                                      if (!v74 || (v75 = (_BYTE *)*((_QWORD *)this + 97), v74 == v75) || (result = AriMsg::pack(*((AriMsg **)this + 6), 51, v74, v75 - v74, 0), !(_DWORD)result))
                                                                                                      {
                                                                                                        v76 = (_BYTE *)*((_QWORD *)this + 99);
                                                                                                        if (!v76 || (v77 = (_BYTE *)*((_QWORD *)this + 100), v76 == v77) || (result = AriMsg::pack(*((AriMsg **)this + 6), 52, v76, v77 - v76, 0), !(_DWORD)result))
                                                                                                        {
                                                                                                          result = 0;
                                                                                                          *a2 = (AriMsg *)*((_QWORD *)this + 6);
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetGetCellInfoIndCb_SDK::unpack(AriSdk::ARI_IBINetGetCellInfoIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  _DWORD *v8;
  _BYTE *v9;
  _DWORD *v10;
  _QWORD *v11;
  _BYTE *v12;
  _DWORD *v13;
  _QWORD *v14;
  _BYTE *v15;
  _DWORD *v16;
  _OWORD *v17;
  _BYTE *v18;
  _DWORD *v19;
  _OWORD *v20;
  _BYTE *v21;
  _DWORD *v22;
  _OWORD *v23;
  _BYTE *v24;
  _DWORD *v25;
  _OWORD *v26;
  _BYTE *v27;
  _DWORD *v28;
  _QWORD *v29;
  _BYTE *v30;
  _DWORD *v31;
  _OWORD *v32;
  _BYTE *v33;
  _DWORD *v34;
  _OWORD *v35;
  _BYTE *v36;
  _DWORD *v37;
  _OWORD *v38;
  _BYTE *v39;
  _DWORD *v40;
  _OWORD *v41;
  _BYTE *v42;
  _DWORD *v43;
  _OWORD *v44;
  _OWORD *v45;
  _OWORD *v46;
  _OWORD *v47;
  _DWORD *v48;
  _OWORD *v49;
  _DWORD *v50;
  void *v51;
  _OWORD *v52;
  void *v53;
  _OWORD *v54;
  void *v55;
  void *__p;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  BOOL v61;

  LOBYTE(__p) = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = __p == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  LOBYTE(__p) = 0;
  v5 = (_BYTE *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v6 = (_BYTE *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v7 = (_BYTE *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v7, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 11, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v8 = (_DWORD *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v8, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 12, v8);
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  }
  LOBYTE(__p) = 0;
  v9 = (_BYTE *)operator new();
  *v9 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v9, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v9, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 13, v9);
    MEMORY[0x212BB9B60](v9, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v10 = (_DWORD *)operator new();
  *v10 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 7, v10, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v10, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 14, v10);
    MEMORY[0x212BB9B60](v10, 0x1000C4052888210);
  }
  v61 = 0;
  v60 = 0xAAAAAAAAAAAAAAAALL;
  v11 = (_QWORD *)operator new[]();
  v11[1] = 0;
  v11[2] = 0;
  *v11 = 0;
  *((_DWORD *)v11 + 6) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 8, v11, 28, &v61, &v60);
  if ((_DWORD)v3 || !v61)
  {
    MEMORY[0x212BB9B48](v11, 0x1000C8053384F6BLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v58 = 0;
    v59 = 0;
    __p = 0;
    std::vector<IBIUmtsCellInfoT>::__init_with_size[abi:ne180100]<IBIUmtsCellInfoT*,IBIUmtsCellInfoT*>(&__p, v11, (uint64_t)v11 + 28 * (v60 / 0x1C), v60 / 0x1C);
    AriSdk::TlvArray<IBIUmtsCellInfoT,1ul>::operator=((uint64_t)this + 120, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v11, 0x1000C8053384F6BLL);
  }
  LOBYTE(__p) = 0;
  v12 = (_BYTE *)operator new();
  *v12 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 9, v12, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v12, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 18, v12);
    MEMORY[0x212BB9B60](v12, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v13 = (_DWORD *)operator new();
  *v13 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 10, v13, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v13, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 19, v13);
    MEMORY[0x212BB9B60](v13, 0x1000C4052888210);
  }
  v61 = 0;
  v60 = 0xAAAAAAAAAAAAAAAALL;
  v14 = (_QWORD *)operator new[]();
  v14[1] = 0;
  v14[2] = 0;
  *v14 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 11, v14, 24, &v61, &v60);
  if ((_DWORD)v3 || !v61)
  {
    MEMORY[0x212BB9B48](v14, 0x1000C800618A0D7);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v58 = 0;
    v59 = 0;
    __p = 0;
    std::vector<IBIGsmCellInfoT>::__init_with_size[abi:ne180100]<IBIGsmCellInfoT*,IBIGsmCellInfoT*>(&__p, v14, (uint64_t)&v14[3 * (v60 / 0x18)], v60 / 0x18);
    AriSdk::TlvArray<IBIGsmCellInfoT,1ul>::operator=((uint64_t)this + 160, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v14, 0x1000C800618A0D7);
  }
  LOBYTE(__p) = 0;
  v15 = (_BYTE *)operator new();
  *v15 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 12, v15, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v15, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 23, v15);
    MEMORY[0x212BB9B60](v15, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v16 = (_DWORD *)operator new();
  *v16 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 13, v16, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v16, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 24, v16);
    MEMORY[0x212BB9B60](v16, 0x1000C4052888210);
  }
  v61 = 0;
  v60 = 0xAAAAAAAAAAAAAAAALL;
  v17 = (_OWORD *)operator new[]();
  *v17 = 0u;
  v17[1] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 14, v17, 32, &v61, &v60);
  if ((_DWORD)v3 || !v61)
  {
    MEMORY[0x212BB9B48](v17, 0x1000C8011F4EB07);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v58 = 0;
    v59 = 0;
    __p = 0;
    std::vector<IBILteCellInfoT>::__init_with_size[abi:ne180100]<IBILteCellInfoT*,IBILteCellInfoT*>(&__p, v17, (uint64_t)&v17[2 * (v60 >> 5)], v60 >> 5);
    AriSdk::TlvArray<IBILteCellInfoT,1ul>::operator=((uint64_t)this + 200, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v17, 0x1000C8011F4EB07);
  }
  LOBYTE(__p) = 0;
  v18 = (_BYTE *)operator new();
  *v18 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 15, v18, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v18, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 28, v18);
    MEMORY[0x212BB9B60](v18, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v19 = (_DWORD *)operator new();
  *v19 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 16, v19, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v19, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 29, v19);
    MEMORY[0x212BB9B60](v19, 0x1000C4052888210);
  }
  v61 = 0;
  v60 = 0xAAAAAAAAAAAAAAAALL;
  v20 = (_OWORD *)operator new[]();
  *v20 = 0u;
  v20[1] = 0u;
  v20[2] = 0u;
  v20[3] = 0u;
  v20[4] = 0u;
  v20[5] = 0u;
  v20[6] = 0u;
  v20[7] = 0u;
  v20[8] = 0u;
  v20[9] = 0u;
  v20[10] = 0u;
  v20[11] = 0u;
  v20[12] = 0u;
  v20[13] = 0u;
  v20[14] = 0u;
  v20[15] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 17, v20, 256, &v61, &v60);
  if ((_DWORD)v3 || !v61)
  {
    MEMORY[0x212BB9B48](v20, 0x1000C8000313F17);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v58 = 0;
    v59 = 0;
    __p = 0;
    std::vector<IBIUmtsNeighborCellInfoT>::__init_with_size[abi:ne180100]<IBIUmtsNeighborCellInfoT*,IBIUmtsNeighborCellInfoT*>(&__p, v20, (uint64_t)v20 + 8 * (v60 >> 3), v60 >> 3);
    AriSdk::TlvArray<IBIUmtsNeighborCellInfoT,32ul>::operator=((uint64_t)this + 240, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v20, 0x1000C8000313F17);
  }
  LOBYTE(__p) = 0;
  v21 = (_BYTE *)operator new();
  *v21 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 18, v21, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v21, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 33, v21);
    MEMORY[0x212BB9B60](v21, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v22 = (_DWORD *)operator new();
  *v22 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 19, v22, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v22, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 34, v22);
    MEMORY[0x212BB9B60](v22, 0x1000C4052888210);
  }
  v61 = 0;
  v60 = 0xAAAAAAAAAAAAAAAALL;
  v23 = (_OWORD *)operator new[]();
  *v23 = 0u;
  v23[1] = 0u;
  v23[2] = 0u;
  v23[3] = 0u;
  v23[4] = 0u;
  v23[5] = 0u;
  v23[6] = 0u;
  v23[7] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 20, v23, 128, &v61, &v60);
  if ((_DWORD)v3 || !v61)
  {
    MEMORY[0x212BB9B48](v23, 0x1000C8052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v58 = 0;
    v59 = 0;
    __p = 0;
    std::vector<IBIGsmNeighborCellInfoT>::__init_with_size[abi:ne180100]<IBIGsmNeighborCellInfoT*,IBIGsmNeighborCellInfoT*>(&__p, v23, (uint64_t)v23 + 4 * (v60 >> 2), v60 >> 2);
    AriSdk::TlvArray<IBIGsmNeighborCellInfoT,32ul>::operator=((uint64_t)this + 280, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v23, 0x1000C8052888210);
  }
  LOBYTE(__p) = 0;
  v24 = (_BYTE *)operator new();
  *v24 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 21, v24, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v24, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 38, v24);
    MEMORY[0x212BB9B60](v24, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v25 = (_DWORD *)operator new();
  *v25 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 22, v25, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v25, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 39, v25);
    MEMORY[0x212BB9B60](v25, 0x1000C4052888210);
  }
  v61 = 0;
  v60 = 0xAAAAAAAAAAAAAAAALL;
  v26 = (_OWORD *)operator new[]();
  *v26 = 0u;
  v26[1] = 0u;
  v26[2] = 0u;
  v26[3] = 0u;
  v26[4] = 0u;
  v26[5] = 0u;
  v26[6] = 0u;
  v26[7] = 0u;
  v26[8] = 0u;
  v26[9] = 0u;
  v26[10] = 0u;
  v26[11] = 0u;
  v26[12] = 0u;
  v26[13] = 0u;
  v26[14] = 0u;
  v26[15] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 23, v26, 256, &v61, &v60);
  if ((_DWORD)v3 || !v61)
  {
    MEMORY[0x212BB9B48](v26, 0x1000C8000313F17);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v58 = 0;
    v59 = 0;
    __p = 0;
    std::vector<IBILteNeighborCellInfoT>::__init_with_size[abi:ne180100]<IBILteNeighborCellInfoT*,IBILteNeighborCellInfoT*>(&__p, v26, (uint64_t)v26 + 8 * (v60 >> 3), v60 >> 3);
    AriSdk::TlvArray<IBILteNeighborCellInfoT,32ul>::operator=((uint64_t)this + 320, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v26, 0x1000C8000313F17);
  }
  LOBYTE(__p) = 0;
  v27 = (_BYTE *)operator new();
  *v27 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 24, v27, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v27, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 43, v27);
    MEMORY[0x212BB9B60](v27, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v28 = (_DWORD *)operator new();
  *v28 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 25, v28, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v28, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 44, v28);
    MEMORY[0x212BB9B60](v28, 0x1000C4052888210);
  }
  v61 = 0;
  v60 = 0xAAAAAAAAAAAAAAAALL;
  v29 = (_QWORD *)operator new[]();
  v29[1] = 0;
  v29[2] = 0;
  *v29 = 0;
  *((_DWORD *)v29 + 6) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 26, v29, 28, &v61, &v60);
  if ((_DWORD)v3 || !v61)
  {
    MEMORY[0x212BB9B48](v29, 0x1000C8053384F6BLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v58 = 0;
    v59 = 0;
    __p = 0;
    std::vector<IBITdsCellInfoT>::__init_with_size[abi:ne180100]<IBITdsCellInfoT*,IBITdsCellInfoT*>(&__p, v29, (uint64_t)v29 + 28 * (v60 / 0x1C), v60 / 0x1C);
    AriSdk::TlvArray<IBITdsCellInfoT,1ul>::operator=((uint64_t)this + 360, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v29, 0x1000C8053384F6BLL);
  }
  LOBYTE(__p) = 0;
  v30 = (_BYTE *)operator new();
  *v30 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 27, v30, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v30, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 48, v30);
    MEMORY[0x212BB9B60](v30, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v31 = (_DWORD *)operator new();
  *v31 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 28, v31, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v31, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 49, v31);
    MEMORY[0x212BB9B60](v31, 0x1000C4052888210);
  }
  v61 = 0;
  v60 = 0xAAAAAAAAAAAAAAAALL;
  v32 = (_OWORD *)operator new[]();
  *v32 = 0u;
  v32[1] = 0u;
  v32[2] = 0u;
  v32[3] = 0u;
  v32[4] = 0u;
  v32[5] = 0u;
  v32[6] = 0u;
  v32[7] = 0u;
  v32[8] = 0u;
  v32[9] = 0u;
  v32[10] = 0u;
  v32[11] = 0u;
  v32[12] = 0u;
  v32[13] = 0u;
  v32[14] = 0u;
  v32[15] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 29, v32, 256, &v61, &v60);
  if ((_DWORD)v3 || !v61)
  {
    MEMORY[0x212BB9B48](v32, 0x1000C8000313F17);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v58 = 0;
    v59 = 0;
    __p = 0;
    std::vector<IBITdsNeighborCellInfoT>::__init_with_size[abi:ne180100]<IBITdsNeighborCellInfoT*,IBITdsNeighborCellInfoT*>(&__p, v32, (uint64_t)v32 + 8 * (v60 >> 3), v60 >> 3);
    AriSdk::TlvArray<IBITdsNeighborCellInfoT,32ul>::operator=((uint64_t)this + 400, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v32, 0x1000C8000313F17);
  }
  LOBYTE(__p) = 0;
  v33 = (_BYTE *)operator new();
  *v33 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 30, v33, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v33, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 53, v33);
    MEMORY[0x212BB9B60](v33, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v34 = (_DWORD *)operator new();
  *v34 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 31, v34, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v34, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 54, v34);
    MEMORY[0x212BB9B60](v34, 0x1000C4052888210);
  }
  v61 = 0;
  v60 = 0xAAAAAAAAAAAAAAAALL;
  v35 = (_OWORD *)operator new[]();
  *v35 = 0u;
  v35[1] = 0u;
  v35[2] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 32, v35, 48, &v61, &v60);
  if ((_DWORD)v3 || !v61)
  {
    MEMORY[0x212BB9B48](v35, 0x1000C803DD497D7);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v58 = 0;
    v59 = 0;
    __p = 0;
    std::vector<IBINetCdma1xCellInfo>::__init_with_size[abi:ne180100]<IBINetCdma1xCellInfo*,IBINetCdma1xCellInfo*>(&__p, v35, (uint64_t)&v35[3 * (v60 / 0x30)], v60 / 0x30);
    AriSdk::TlvArray<IBINetCdma1xCellInfo,1ul>::operator=((uint64_t)this + 440, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v35, 0x1000C803DD497D7);
  }
  LOBYTE(__p) = 0;
  v36 = (_BYTE *)operator new();
  *v36 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 33, v36, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v36, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 58, v36);
    MEMORY[0x212BB9B60](v36, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v37 = (_DWORD *)operator new();
  *v37 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 34, v37, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v37, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 59, v37);
    MEMORY[0x212BB9B60](v37, 0x1000C4052888210);
  }
  v61 = 0;
  v60 = 0xAAAAAAAAAAAAAAAALL;
  v38 = (_OWORD *)operator new[]();
  *v38 = 0u;
  v38[1] = 0u;
  v38[2] = 0u;
  *((_DWORD *)v38 + 12) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 35, v38, 52, &v61, &v60);
  if ((_DWORD)v3 || !v61)
  {
    MEMORY[0x212BB9B48](v38, 0x1000C8043B73165);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v58 = 0;
    v59 = 0;
    __p = 0;
    std::vector<IBINetCdmaEvdoCellInfo>::__init_with_size[abi:ne180100]<IBINetCdmaEvdoCellInfo*,IBINetCdmaEvdoCellInfo*>(&__p, v38, (uint64_t)v38 + 52 * (v60 / 0x34), v60 / 0x34);
    AriSdk::TlvArray<IBINetCdmaEvdoCellInfo,1ul>::operator=((uint64_t)this + 480, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v38, 0x1000C8043B73165);
  }
  LOBYTE(__p) = 0;
  v39 = (_BYTE *)operator new();
  *v39 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 36, v39, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v39, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 63, v39);
    MEMORY[0x212BB9B60](v39, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v40 = (_DWORD *)operator new();
  *v40 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 37, v40, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v40, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 64, v40);
    MEMORY[0x212BB9B60](v40, 0x1000C4052888210);
  }
  v61 = 0;
  v60 = 0xAAAAAAAAAAAAAAAALL;
  v41 = (_OWORD *)operator new[]();
  *v41 = 0u;
  v41[1] = 0u;
  v41[2] = 0u;
  v41[3] = 0u;
  v41[4] = 0u;
  v41[5] = 0u;
  v41[6] = 0u;
  v41[7] = 0u;
  v41[8] = 0u;
  v41[9] = 0u;
  v41[10] = 0u;
  v41[11] = 0u;
  v41[12] = 0u;
  v41[13] = 0u;
  v41[14] = 0u;
  v41[15] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 38, v41, 256, &v61, &v60);
  if ((_DWORD)v3 || !v61)
  {
    MEMORY[0x212BB9B48](v41, 0x1000C805D3D83E9);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v58 = 0;
    v59 = 0;
    __p = 0;
    std::vector<IBICdma1xNeighborCellInfo>::__init_with_size[abi:ne180100]<IBICdma1xNeighborCellInfo*,IBICdma1xNeighborCellInfo*>(&__p, v41, (uint64_t)v41 + 8 * (v60 >> 3), v60 >> 3);
    AriSdk::TlvArray<IBICdma1xNeighborCellInfo,32ul>::operator=((uint64_t)this + 520, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v41, 0x1000C805D3D83E9);
  }
  LOBYTE(__p) = 0;
  v42 = (_BYTE *)operator new();
  *v42 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 39, v42, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v42, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 68, v42);
    MEMORY[0x212BB9B60](v42, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v43 = (_DWORD *)operator new();
  *v43 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 40, v43, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v43, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 69, v43);
    MEMORY[0x212BB9B60](v43, 0x1000C4052888210);
  }
  v61 = 0;
  v60 = 0xAAAAAAAAAAAAAAAALL;
  v44 = (_OWORD *)operator new[]();
  *v44 = 0u;
  v44[1] = 0u;
  v44[2] = 0u;
  v44[3] = 0u;
  v44[4] = 0u;
  v44[5] = 0u;
  v44[6] = 0u;
  v44[7] = 0u;
  v44[8] = 0u;
  v44[9] = 0u;
  v44[10] = 0u;
  v44[11] = 0u;
  v44[12] = 0u;
  v44[13] = 0u;
  v44[14] = 0u;
  v44[15] = 0u;
  v44[16] = 0u;
  v44[17] = 0u;
  v44[18] = 0u;
  v44[19] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 41, v44, 320, &v61, &v60);
  if ((_DWORD)v3 || !v61)
  {
    MEMORY[0x212BB9B48](v44, 0x1000C808AB07045);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v58 = 0;
    v59 = 0;
    __p = 0;
    std::vector<IBICdmaEvdoNeighborCellInfo>::__init_with_size[abi:ne180100]<IBICdmaEvdoNeighborCellInfo*,IBICdmaEvdoNeighborCellInfo*>(&__p, v44, (uint64_t)v44 + 10 * (v60 / 0xA), v60 / 0xA);
    AriSdk::TlvArray<IBICdmaEvdoNeighborCellInfo,32ul>::operator=((uint64_t)this + 560, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v44, 0x1000C808AB07045);
  }
  v61 = 0;
  v60 = 0xAAAAAAAAAAAAAAAALL;
  v45 = (_OWORD *)operator new[]();
  *v45 = 0u;
  v45[1] = 0u;
  *((_DWORD *)v45 + 8) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 42, v45, 36, &v61, &v60);
  if ((_DWORD)v3 || !v61)
  {
    MEMORY[0x212BB9B48](v45, 0x1000C80240F695FLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v58 = 0;
    v59 = 0;
    __p = 0;
    std::vector<IBILteCellInfoV1T>::__init_with_size[abi:ne180100]<IBILteCellInfoV1T*,IBILteCellInfoV1T*>(&__p, v45, (uint64_t)v45 + 36 * (v60 / 0x24), v60 / 0x24);
    AriSdk::TlvArray<IBILteCellInfoV1T,1ul>::operator=((uint64_t)this + 584, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v45, 0x1000C80240F695FLL);
  }
  v61 = 0;
  v60 = 0xAAAAAAAAAAAAAAAALL;
  v46 = (_OWORD *)operator new[]();
  *v46 = 0u;
  v46[1] = 0u;
  v46[2] = 0u;
  v46[3] = 0u;
  v46[4] = 0u;
  v46[5] = 0u;
  v46[6] = 0u;
  v46[7] = 0u;
  v46[8] = 0u;
  v46[9] = 0u;
  v46[10] = 0u;
  v46[11] = 0u;
  v46[12] = 0u;
  v46[13] = 0u;
  v46[14] = 0u;
  v46[15] = 0u;
  v46[16] = 0u;
  v46[17] = 0u;
  v46[18] = 0u;
  v46[19] = 0u;
  v46[20] = 0u;
  v46[21] = 0u;
  v46[22] = 0u;
  v46[23] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 43, v46, 384, &v61, &v60);
  if ((_DWORD)v3 || !v61)
  {
    MEMORY[0x212BB9B48](v46, 0x1000C80CBA68D63);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v58 = 0;
    v59 = 0;
    __p = 0;
    std::vector<IBILteNeighborCellInfoV1T>::__init_with_size[abi:ne180100]<IBILteNeighborCellInfoV1T*,IBILteNeighborCellInfoV1T*>(&__p, v46, (uint64_t)v46 + 12 * (v60 / 0xC), v60 / 0xC);
    AriSdk::TlvArray<IBILteNeighborCellInfoV1T,32ul>::operator=((uint64_t)this + 608, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v46, 0x1000C80CBA68D63);
  }
  v61 = 0;
  v60 = 0xAAAAAAAAAAAAAAAALL;
  v47 = (_OWORD *)operator new[]();
  *v47 = 0u;
  v47[1] = 0u;
  *((_DWORD *)v47 + 8) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 44, v47, 36, &v61, &v60);
  if ((_DWORD)v3 || !v61)
  {
    MEMORY[0x212BB9B48](v47, 0x1000C804B291A13);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v58 = 0;
    v59 = 0;
    __p = 0;
    std::vector<IBILteCellInfoR15>::__init_with_size[abi:ne180100]<IBILteCellInfoR15*,IBILteCellInfoR15*>(&__p, v47, (uint64_t)v47 + 36 * (v60 / 0x24), v60 / 0x24);
    AriSdk::TlvArray<IBILteCellInfoR15,1ul>::operator=((uint64_t)this + 632, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v47, 0x1000C804B291A13);
  }
  LOBYTE(__p) = 0;
  v48 = (_DWORD *)operator new();
  *v48 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 45, v48, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v48, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 82, v48);
    MEMORY[0x212BB9B60](v48, 0x1000C4052888210);
  }
  v61 = 0;
  v60 = 0xAAAAAAAAAAAAAAAALL;
  v49 = (_OWORD *)operator new[]();
  *v49 = 0u;
  v49[1] = 0u;
  v49[2] = 0u;
  v49[3] = 0u;
  v49[4] = 0u;
  v49[5] = 0u;
  *((_QWORD *)v49 + 12) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 46, v49, 104, &v61, &v60);
  if ((_DWORD)v3 || !v61)
  {
    MEMORY[0x212BB9B48](v49, 0x1000C80D9E6B487);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v58 = 0;
    v59 = 0;
    __p = 0;
    std::vector<IBINrCellInfoT>::__init_with_size[abi:ne180100]<IBINrCellInfoT*,IBINrCellInfoT*>(&__p, v49, (uint64_t)v49 + 52 * (v60 / 0x34), v60 / 0x34);
    AriSdk::TlvArray<IBINrCellInfoT,2ul>::operator=((uint64_t)this + 664, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v49, 0x1000C80D9E6B487);
  }
  LOBYTE(__p) = 0;
  v50 = (_DWORD *)operator new();
  *v50 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 47, v50, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v50, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 86, v50);
    MEMORY[0x212BB9B60](v50, 0x1000C4052888210);
  }
  v61 = 0;
  v60 = 0xAAAAAAAAAAAAAAAALL;
  v51 = (void *)operator new[]();
  bzero(v51, 0x300uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 48, v51, 768, &v61, &v60);
  if ((_DWORD)v3 || !v61)
  {
    MEMORY[0x212BB9B48](v51, 0x1000C80E0DB01C6);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v58 = 0;
    v59 = 0;
    __p = 0;
    std::vector<IBINrNeighborCellInfoT>::__init_with_size[abi:ne180100]<IBINrNeighborCellInfoT*,IBINrNeighborCellInfoT*>(&__p, v51, (uint64_t)v51 + 24 * (v60 / 0x18), v60 / 0x18);
    AriSdk::TlvArray<IBINrNeighborCellInfoT,32ul>::operator=((uint64_t)this + 696, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v51, 0x1000C80E0DB01C6);
  }
  v61 = 0;
  v60 = 0xAAAAAAAAAAAAAAAALL;
  v52 = (_OWORD *)operator new[]();
  *v52 = 0u;
  v52[1] = 0u;
  v52[2] = 0u;
  *((_DWORD *)v52 + 12) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 49, v52, 52, &v61, &v60);
  if ((_DWORD)v3 || !v61)
  {
    MEMORY[0x212BB9B48](v52, 0x1000C80952E2C4ALL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v58 = 0;
    v59 = 0;
    __p = 0;
    std::vector<IBILteCellInfoR15_V2>::__init_with_size[abi:ne180100]<IBILteCellInfoR15_V2*,IBILteCellInfoR15_V2*>(&__p, v52, (uint64_t)v52 + 52 * (v60 / 0x34), v60 / 0x34);
    AriSdk::TlvArray<IBILteCellInfoR15_V2,1ul>::operator=((uint64_t)this + 720, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v52, 0x1000C80952E2C4ALL);
  }
  v61 = 0;
  v60 = 0xAAAAAAAAAAAAAAAALL;
  v53 = (void *)operator new[]();
  bzero(v53, 0x300uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 50, v53, 768, &v61, &v60);
  if ((_DWORD)v3 || !v61)
  {
    MEMORY[0x212BB9B48](v53, 0x1000C80977131E8);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v58 = 0;
    v59 = 0;
    __p = 0;
    std::vector<IBILteNeighborCellInfoV2T>::__init_with_size[abi:ne180100]<IBILteNeighborCellInfoV2T*,IBILteNeighborCellInfoV2T*>(&__p, v53, (uint64_t)v53 + 24 * (v60 / 0x18), v60 / 0x18);
    AriSdk::TlvArray<IBILteNeighborCellInfoV2T,32ul>::operator=((uint64_t)this + 744, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v53, 0x1000C80977131E8);
  }
  v61 = 0;
  v60 = 0xAAAAAAAAAAAAAAAALL;
  v54 = (_OWORD *)operator new[]();
  *v54 = 0u;
  v54[1] = 0u;
  v54[2] = 0u;
  v54[3] = 0u;
  v54[4] = 0u;
  v54[5] = 0u;
  v54[6] = 0u;
  *((_QWORD *)v54 + 14) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 51, v54, 120, &v61, &v60);
  if ((_DWORD)v3 || !v61)
  {
    MEMORY[0x212BB9B48](v54, 0x1000C800CD45A9DLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v58 = 0;
    v59 = 0;
    __p = 0;
    std::vector<IBINrCellInfoT_V2>::__init_with_size[abi:ne180100]<IBINrCellInfoT_V2*,IBINrCellInfoT_V2*>(&__p, v54, (uint64_t)v54 + 60 * (v60 / 0x3C), v60 / 0x3C);
    AriSdk::TlvArray<IBINrCellInfoT_V2,2ul>::operator=((uint64_t)this + 768, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v54, 0x1000C800CD45A9DLL);
  }
  v61 = 0;
  v60 = 0xAAAAAAAAAAAAAAAALL;
  v55 = (void *)operator new[]();
  bzero(v55, 0x400uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 52, v55, 1024, &v61, &v60);
  if (!(_DWORD)v3 && v61)
  {
    v58 = 0;
    v59 = 0;
    __p = 0;
    std::vector<IBINrNeighborCellInfoT_V2>::__init_with_size[abi:ne180100]<IBINrNeighborCellInfoT_V2*,IBINrNeighborCellInfoT_V2*>(&__p, v55, (uint64_t)v55 + 32 * (v60 >> 5), v60 >> 5);
    AriSdk::TlvArray<IBINrNeighborCellInfoT_V2,32ul>::operator=((uint64_t)this + 792, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
  }
  MEMORY[0x212BB9B48](v55, 0x1000C80B4E26277);
  return v3;
}

void sub_20E2869A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  uint64_t v10;

  if (__p)
    operator delete(__p);
  MEMORY[0x212BB9B48](v10, 0x1000C80B4E26277);
  _Unwind_Resume(a1);
}

uint64_t AriSdk::TlvArray<IBIUmtsCellInfoT,1ul>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void **v7;
  void *v8;
  void *__p[2];
  char v11;

  v5 = *a2;
  v4 = a2[1];
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v4 - *a2) >> 2)) < 2)
  {
    v8 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v8);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v5 = *a2;
      v4 = a2[1];
    }
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v11 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v6, v7, 360, a1, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 2), 1);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_20E286F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriSdk::TlvArray<IBIGsmCellInfoT,1ul>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void **v7;
  void *v8;
  void *__p[2];
  char v11;

  v5 = *a2;
  v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3) < 2)
  {
    v8 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v8);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v5 = *a2;
      v4 = a2[1];
    }
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v11 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v6, v7, 360, a1, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3), 1);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_20E287024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriSdk::TlvArray<IBILteCellInfoT,1ul>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void **v7;
  void *v8;
  void *__p[2];
  char v11;

  v5 = *a2;
  v4 = a2[1];
  if ((unint64_t)(v4 - *a2) < 0x21)
  {
    v8 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v8);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v5 = *a2;
      v4 = a2[1];
    }
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v11 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v6, v7, 360, a1, (a2[1] - *a2) >> 5, 1);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_20E287124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriSdk::TlvArray<IBIUmtsNeighborCellInfoT,32ul>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void **v7;
  void *v8;
  void *__p[2];
  char v11;

  v5 = *a2;
  v4 = a2[1];
  if ((unint64_t)(v4 - *a2) < 0x101)
  {
    v8 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v8);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v5 = *a2;
      v4 = a2[1];
    }
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v11 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v6, v7, 360, a1, (a2[1] - *a2) >> 3, 32);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_20E287224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriSdk::TlvArray<IBIGsmNeighborCellInfoT,32ul>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void **v7;
  void *v8;
  void *__p[2];
  char v11;

  v5 = *a2;
  v4 = a2[1];
  if ((unint64_t)(v4 - *a2) < 0x81)
  {
    v8 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v8);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v5 = *a2;
      v4 = a2[1];
    }
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v11 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v6, v7, 360, a1, (a2[1] - *a2) >> 2, 32);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_20E287324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriSdk::TlvArray<IBILteNeighborCellInfoT,32ul>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void **v7;
  void *v8;
  void *__p[2];
  char v11;

  v5 = *a2;
  v4 = a2[1];
  if ((unint64_t)(v4 - *a2) < 0x101)
  {
    v8 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v8);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v5 = *a2;
      v4 = a2[1];
    }
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v11 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v6, v7, 360, a1, (a2[1] - *a2) >> 3, 32);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_20E287424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriSdk::TlvArray<IBITdsCellInfoT,1ul>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void **v7;
  void *v8;
  void *__p[2];
  char v11;

  v5 = *a2;
  v4 = a2[1];
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v4 - *a2) >> 2)) < 2)
  {
    v8 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v8);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v5 = *a2;
      v4 = a2[1];
    }
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v11 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v6, v7, 360, a1, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 2), 1);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_20E287540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriSdk::TlvArray<IBITdsNeighborCellInfoT,32ul>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void **v7;
  void *v8;
  void *__p[2];
  char v11;

  v5 = *a2;
  v4 = a2[1];
  if ((unint64_t)(v4 - *a2) < 0x101)
  {
    v8 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v8);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v5 = *a2;
      v4 = a2[1];
    }
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v11 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v6, v7, 360, a1, (a2[1] - *a2) >> 3, 32);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_20E287640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriSdk::TlvArray<IBINetCdma1xCellInfo,1ul>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void **v7;
  void *v8;
  void *__p[2];
  char v11;

  v5 = *a2;
  v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 4) < 2)
  {
    v8 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v8);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v5 = *a2;
      v4 = a2[1];
    }
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v11 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v6, v7, 360, a1, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4), 1);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_20E287754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriSdk::TlvArray<IBINetCdmaEvdoCellInfo,1ul>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void **v7;
  void *v8;
  void *__p[2];
  char v11;

  v5 = *a2;
  v4 = a2[1];
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v4 - *a2) >> 2)) < 2)
  {
    v8 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v8);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v5 = *a2;
      v4 = a2[1];
    }
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v11 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v6, v7, 360, a1, 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 2), 1);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_20E287870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriSdk::TlvArray<IBICdma1xNeighborCellInfo,32ul>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void **v7;
  void *v8;
  void *__p[2];
  char v11;

  v5 = *a2;
  v4 = a2[1];
  if ((unint64_t)(v4 - *a2) < 0x101)
  {
    v8 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v8);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v5 = *a2;
      v4 = a2[1];
    }
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v11 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v6, v7, 360, a1, (a2[1] - *a2) >> 3, 32);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_20E287970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriSdk::TlvArray<IBICdmaEvdoNeighborCellInfo,32ul>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void **v7;
  void *v8;
  void *__p[2];
  char v11;

  v5 = *a2;
  v4 = a2[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a2) >> 1) < 0x21)
  {
    v8 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v8);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v5 = *a2;
      v4 = a2[1];
    }
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v11 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v6, v7, 360, a1, 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 1), 32);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_20E287A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriSdk::TlvArray<IBILteCellInfoV1T,1ul>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void **v7;
  void *v8;
  void *__p[2];
  char v11;

  v5 = *a2;
  v4 = a2[1];
  if (0x8E38E38E38E38E39 * ((v4 - *a2) >> 2) < 2)
  {
    v8 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v8);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v5 = *a2;
      v4 = a2[1];
    }
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v11 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v6, v7, 360, a1, 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 2), 1);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_20E287BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriSdk::TlvArray<IBILteNeighborCellInfoV1T,32ul>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void **v7;
  void *v8;
  void *__p[2];
  char v11;

  v5 = *a2;
  v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 2) < 0x21)
  {
    v8 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v8);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v5 = *a2;
      v4 = a2[1];
    }
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v11 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v6, v7, 360, a1, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2), 32);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_20E287CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriSdk::TlvArray<IBILteCellInfoR15,1ul>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void **v7;
  void *v8;
  void *__p[2];
  char v11;

  v5 = *a2;
  v4 = a2[1];
  if (0x8E38E38E38E38E39 * ((v4 - *a2) >> 2) < 2)
  {
    v8 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v8);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v5 = *a2;
      v4 = a2[1];
    }
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v11 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v6, v7, 360, a1, 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 2), 1);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_20E287DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriSdk::TlvArray<IBINrCellInfoT,2ul>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void **v7;
  void *v8;
  void *__p[2];
  char v11;

  v5 = *a2;
  v4 = a2[1];
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v4 - *a2) >> 2)) < 3)
  {
    v8 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v8);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v5 = *a2;
      v4 = a2[1];
    }
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v11 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v6, v7, 360, a1, 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 2), 2);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_20E287EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriSdk::TlvArray<IBINrNeighborCellInfoT,32ul>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void **v7;
  void *v8;
  void *__p[2];
  char v11;

  v5 = *a2;
  v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3) < 0x21)
  {
    v8 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v8);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v5 = *a2;
      v4 = a2[1];
    }
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v11 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v6, v7, 360, a1, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3), 32);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_20E288000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriSdk::TlvArray<IBILteCellInfoR15_V2,1ul>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void **v7;
  void *v8;
  void *__p[2];
  char v11;

  v5 = *a2;
  v4 = a2[1];
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v4 - *a2) >> 2)) < 2)
  {
    v8 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v8);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v5 = *a2;
      v4 = a2[1];
    }
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v11 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v6, v7, 360, a1, 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 2), 1);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_20E28811C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriSdk::TlvArray<IBILteNeighborCellInfoV2T,32ul>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void **v7;
  void *v8;
  void *__p[2];
  char v11;

  v5 = *a2;
  v4 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3) < 0x21)
  {
    v8 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v8);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v5 = *a2;
      v4 = a2[1];
    }
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v11 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v6, v7, 360, a1, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3), 32);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_20E288230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriSdk::TlvArray<IBINrCellInfoT_V2,2ul>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void **v7;
  void *v8;
  void *__p[2];
  char v11;

  v5 = *a2;
  v4 = a2[1];
  if (0xEEEEEEEEEEEEEEEFLL * ((v4 - *a2) >> 2) < 3)
  {
    v8 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v8);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v5 = *a2;
      v4 = a2[1];
    }
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v11 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v6, v7, 360, a1, 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 2), 2);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_20E288344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AriSdk::TlvArray<IBINrNeighborCellInfoT_V2,32ul>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void **v7;
  void *v8;
  void *__p[2];
  char v11;

  v5 = *a2;
  v4 = a2[1];
  if ((unint64_t)(v4 - *a2) < 0x401)
  {
    v8 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v8);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v5 = *a2;
      v4 = a2[1];
    }
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)__p);
    if (v11 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v6, v7, 360, a1, (a2[1] - *a2) >> 5, 32);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_20E288444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL AriSdk::ARI_IBINetGetCellInfoIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetGetCellInfoIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 629374976;
}

double AriSdk::ARI_IBINetGetCellInfoIndCbV1_SDK::ARI_IBINetGetCellInfoIndCbV1_SDK(AriSdk::ARI_IBINetGetCellInfoIndCbV1_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x25840000u, 0);
  *(_QWORD *)v1 = &off_24C911C68;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  *((_OWORD *)v1 + 11) = 0u;
  *((_OWORD *)v1 + 12) = 0u;
  *((_OWORD *)v1 + 13) = 0u;
  *((_OWORD *)v1 + 14) = 0u;
  *((_OWORD *)v1 + 15) = 0u;
  *((_OWORD *)v1 + 16) = 0u;
  *((_OWORD *)v1 + 17) = 0u;
  *((_OWORD *)v1 + 18) = 0u;
  *((_OWORD *)v1 + 19) = 0u;
  *((_OWORD *)v1 + 20) = 0u;
  *((_OWORD *)v1 + 21) = 0u;
  *((_OWORD *)v1 + 22) = 0u;
  *((_OWORD *)v1 + 23) = 0u;
  *((_OWORD *)v1 + 24) = 0u;
  *((_OWORD *)v1 + 25) = 0u;
  *((_OWORD *)v1 + 26) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x25840000u, 0);
  *(_QWORD *)v1 = &off_24C911C68;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  *((_OWORD *)v1 + 11) = 0u;
  *((_OWORD *)v1 + 12) = 0u;
  *((_OWORD *)v1 + 13) = 0u;
  *((_OWORD *)v1 + 14) = 0u;
  *((_OWORD *)v1 + 15) = 0u;
  *((_OWORD *)v1 + 16) = 0u;
  *((_OWORD *)v1 + 17) = 0u;
  *((_OWORD *)v1 + 18) = 0u;
  *((_OWORD *)v1 + 19) = 0u;
  *((_OWORD *)v1 + 20) = 0u;
  *((_OWORD *)v1 + 21) = 0u;
  *((_OWORD *)v1 + 22) = 0u;
  *((_OWORD *)v1 + 23) = 0u;
  *((_OWORD *)v1 + 24) = 0u;
  *((_OWORD *)v1 + 25) = 0u;
  *((_OWORD *)v1 + 26) = 0u;
  return result;
}

double AriSdk::ARI_IBINetGetCellInfoIndCbV1_SDK::ARI_IBINetGetCellInfoIndCbV1_SDK(AriSdk::ARI_IBINetGetCellInfoIndCbV1_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C911C68;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 13) = 0u;
  *((_OWORD *)v3 + 14) = 0u;
  *((_OWORD *)v3 + 15) = 0u;
  *((_OWORD *)v3 + 16) = 0u;
  *((_OWORD *)v3 + 17) = 0u;
  *((_OWORD *)v3 + 18) = 0u;
  *((_OWORD *)v3 + 19) = 0u;
  *((_OWORD *)v3 + 20) = 0u;
  *((_OWORD *)v3 + 21) = 0u;
  *((_OWORD *)v3 + 22) = 0u;
  *((_OWORD *)v3 + 23) = 0u;
  *((_OWORD *)v3 + 24) = 0u;
  *((_OWORD *)v3 + 25) = 0u;
  *((_OWORD *)v3 + 26) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C911C68;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 13) = 0u;
  *((_OWORD *)v3 + 14) = 0u;
  *((_OWORD *)v3 + 15) = 0u;
  *((_OWORD *)v3 + 16) = 0u;
  *((_OWORD *)v3 + 17) = 0u;
  *((_OWORD *)v3 + 18) = 0u;
  *((_OWORD *)v3 + 19) = 0u;
  *((_OWORD *)v3 + 20) = 0u;
  *((_OWORD *)v3 + 21) = 0u;
  *((_OWORD *)v3 + 22) = 0u;
  *((_OWORD *)v3 + 23) = 0u;
  *((_OWORD *)v3 + 24) = 0u;
  *((_OWORD *)v3 + 25) = 0u;
  *((_OWORD *)v3 + 26) = 0u;
  return result;
}

void AriSdk::ARI_IBINetGetCellInfoIndCbV1_SDK::~ARI_IBINetGetCellInfoIndCbV1_SDK(AriSdk::ARI_IBINetGetCellInfoIndCbV1_SDK *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  *(_QWORD *)this = &off_24C911C68;
  v2 = (void *)*((_QWORD *)this + 51);
  if (v2)
  {
    *((_QWORD *)this + 52) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 48);
  if (v3)
  {
    *((_QWORD *)this + 49) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 45);
  if (v4)
  {
    *((_QWORD *)this + 46) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 42);
  if (v5)
  {
    *((_QWORD *)this + 43) = v5;
    operator delete(v5);
  }
  v6 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  v7 = (void *)*((_QWORD *)this + 38);
  if (v7)
  {
    *((_QWORD *)this + 39) = v7;
    operator delete(v7);
  }
  v8 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v8)
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  v9 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v9)
    MEMORY[0x212BB9B60](v9, 0x1000C4043B73165);
  v10 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v10)
    MEMORY[0x212BB9B60](v10, 0x1000C403DD497D7);
  v11 = (void *)*((_QWORD *)this + 32);
  if (v11)
  {
    *((_QWORD *)this + 33) = v11;
    operator delete(v11);
  }
  v12 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v12)
    MEMORY[0x212BB9B60](v12, 0x1000C4052888210);
  v13 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v13)
    MEMORY[0x212BB9B60](v13, 0x1000C4053384F6BLL);
  v14 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v14)
    MEMORY[0x212BB9B60](v14, 0x1000C4052888210);
  v15 = (void *)*((_QWORD *)this + 26);
  if (v15)
  {
    *((_QWORD *)this + 27) = v15;
    operator delete(v15);
  }
  v16 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v16)
    MEMORY[0x212BB9B60](v16, 0x1000C4052888210);
  v17 = (void *)*((_QWORD *)this + 22);
  if (v17)
  {
    *((_QWORD *)this + 23) = v17;
    operator delete(v17);
  }
  v18 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v18)
    MEMORY[0x212BB9B60](v18, 0x1000C4052888210);
  v19 = (void *)*((_QWORD *)this + 18);
  if (v19)
  {
    *((_QWORD *)this + 19) = v19;
    operator delete(v19);
  }
  v20 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v20)
    MEMORY[0x212BB9B60](v20, 0x1000C4052888210);
  v21 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v21)
    MEMORY[0x212BB9B60](v21, 0x1000C4011F4EB07);
  v22 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v22)
    MEMORY[0x212BB9B60](v22, 0x1000C4052888210);
  v23 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v23)
    MEMORY[0x212BB9B60](v23, 0x1000C400618A0D7);
  v24 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v24)
    MEMORY[0x212BB9B60](v24, 0x1000C4052888210);
  v25 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v25)
    MEMORY[0x212BB9B60](v25, 0x1000C4053384F6BLL);
  v26 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v26)
    MEMORY[0x212BB9B60](v26, 0x1000C4052888210);
  v27 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v27)
    MEMORY[0x212BB9B60](v27, 0x1000C4052888210);
  v28 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v28)
    MEMORY[0x212BB9B60](v28, 0x1000C4077774924);
  v29 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v29)
    MEMORY[0x212BB9B60](v29, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetGetCellInfoIndCbV1_SDK::~ARI_IBINetGetCellInfoIndCbV1_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetGetCellInfoIndCbV1_SDK::pack(AriSdk::ARI_IBINetGetCellInfoIndCbV1_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  _BYTE *v15;
  _BYTE *v16;
  const void *v17;
  _BYTE *v18;
  _BYTE *v19;
  const void *v20;
  _BYTE *v21;
  _BYTE *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  _BYTE *v26;
  _BYTE *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  _BYTE *v31;
  _BYTE *v32;
  const void *v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  _BYTE *v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 1uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 4uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v8, 4uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v9, 0x1CuLL, 0), !(_DWORD)result))
          {
            v10 = (const void *)*((_QWORD *)this + 13);
            if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v10, 4uLL, 0), !(_DWORD)result))
            {
              v11 = (const void *)*((_QWORD *)this + 14);
              if (!v11 || (result = AriMsg::pack(*((AriMsg **)this + 6), 7, v11, 0x18uLL, 0), !(_DWORD)result))
              {
                v12 = (const void *)*((_QWORD *)this + 15);
                if (!v12 || (result = AriMsg::pack(*((AriMsg **)this + 6), 8, v12, 4uLL, 0), !(_DWORD)result))
                {
                  v13 = (const void *)*((_QWORD *)this + 16);
                  if (!v13 || (result = AriMsg::pack(*((AriMsg **)this + 6), 9, v13, 0x20uLL, 0), !(_DWORD)result))
                  {
                    v14 = (const void *)*((_QWORD *)this + 17);
                    if (!v14 || (result = AriMsg::pack(*((AriMsg **)this + 6), 10, v14, 4uLL, 0), !(_DWORD)result))
                    {
                      v15 = (_BYTE *)*((_QWORD *)this + 18);
                      if (!v15
                        || (v16 = (_BYTE *)*((_QWORD *)this + 19), v15 == v16)
                        || (result = AriMsg::pack(*((AriMsg **)this + 6), 11, v15, v16 - v15, 0), !(_DWORD)result))
                      {
                        v17 = (const void *)*((_QWORD *)this + 21);
                        if (!v17
                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 12, v17, 4uLL, 0), !(_DWORD)result))
                        {
                          v18 = (_BYTE *)*((_QWORD *)this + 22);
                          if (!v18
                            || (v19 = (_BYTE *)*((_QWORD *)this + 23), v18 == v19)
                            || (result = AriMsg::pack(*((AriMsg **)this + 6), 13, v18, v19 - v18, 0), !(_DWORD)result))
                          {
                            v20 = (const void *)*((_QWORD *)this + 25);
                            if (!v20
                              || (result = AriMsg::pack(*((AriMsg **)this + 6), 14, v20, 4uLL, 0), !(_DWORD)result))
                            {
                              v21 = (_BYTE *)*((_QWORD *)this + 26);
                              if (!v21
                                || (v22 = (_BYTE *)*((_QWORD *)this + 27), v21 == v22)
                                || (result = AriMsg::pack(*((AriMsg **)this + 6), 15, v21, v22 - v21, 0),
                                    !(_DWORD)result))
                              {
                                v23 = (const void *)*((_QWORD *)this + 29);
                                if (!v23
                                  || (result = AriMsg::pack(*((AriMsg **)this + 6), 16, v23, 4uLL, 0), !(_DWORD)result))
                                {
                                  v24 = (const void *)*((_QWORD *)this + 30);
                                  if (!v24
                                    || (result = AriMsg::pack(*((AriMsg **)this + 6), 17, v24, 0x1CuLL, 0),
                                        !(_DWORD)result))
                                  {
                                    v25 = (const void *)*((_QWORD *)this + 31);
                                    if (!v25
                                      || (result = AriMsg::pack(*((AriMsg **)this + 6), 18, v25, 4uLL, 0),
                                          !(_DWORD)result))
                                    {
                                      v26 = (_BYTE *)*((_QWORD *)this + 32);
                                      if (!v26
                                        || (v27 = (_BYTE *)*((_QWORD *)this + 33), v26 == v27)
                                        || (result = AriMsg::pack(*((AriMsg **)this + 6), 19, v26, v27 - v26, 0),
                                            !(_DWORD)result))
                                      {
                                        v28 = (const void *)*((_QWORD *)this + 35);
                                        if (!v28
                                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 20, v28, 0x30uLL, 0),
                                              !(_DWORD)result))
                                        {
                                          v29 = (const void *)*((_QWORD *)this + 36);
                                          if (!v29
                                            || (result = AriMsg::pack(*((AriMsg **)this + 6), 21, v29, 0x34uLL, 0),
                                                !(_DWORD)result))
                                          {
                                            v30 = (const void *)*((_QWORD *)this + 37);
                                            if (!v30
                                              || (result = AriMsg::pack(*((AriMsg **)this + 6), 22, v30, 4uLL, 0),
                                                  !(_DWORD)result))
                                            {
                                              v31 = (_BYTE *)*((_QWORD *)this + 38);
                                              if (!v31
                                                || (v32 = (_BYTE *)*((_QWORD *)this + 39), v31 == v32)
                                                || (result = AriMsg::pack(*((AriMsg **)this + 6), 23, v31, v32 - v31, 0), !(_DWORD)result))
                                              {
                                                v33 = (const void *)*((_QWORD *)this + 41);
                                                if (!v33
                                                  || (result = AriMsg::pack(*((AriMsg **)this + 6), 24, v33, 4uLL, 0),
                                                      !(_DWORD)result))
                                                {
                                                  v34 = (_BYTE *)*((_QWORD *)this + 42);
                                                  if (!v34
                                                    || (v35 = (_BYTE *)*((_QWORD *)this + 43), v34 == v35)
                                                    || (result = AriMsg::pack(*((AriMsg **)this + 6), 25, v34, v35 - v34, 0), !(_DWORD)result))
                                                  {
                                                    v36 = (_BYTE *)*((_QWORD *)this + 45);
                                                    if (!v36
                                                      || (v37 = (_BYTE *)*((_QWORD *)this + 46), v36 == v37)
                                                      || (result = AriMsg::pack(*((AriMsg **)this + 6), 26, v36, v37 - v36, 0), !(_DWORD)result))
                                                    {
                                                      v38 = (_BYTE *)*((_QWORD *)this + 48);
                                                      if (!v38
                                                        || (v39 = (_BYTE *)*((_QWORD *)this + 49), v38 == v39)
                                                        || (result = AriMsg::pack(*((AriMsg **)this + 6), 27, v38, v39 - v38, 0), !(_DWORD)result))
                                                      {
                                                        v40 = (_BYTE *)*((_QWORD *)this + 51);
                                                        if (!v40
                                                          || (v41 = (_BYTE *)*((_QWORD *)this + 52), v40 == v41)
                                                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 28, v40, v41 - v40, 0), !(_DWORD)result))
                                                        {
                                                          result = 0;
                                                          *a2 = (AriMsg *)*((_QWORD *)this + 6);
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetGetCellInfoIndCbV1_SDK::unpack(AriSdk::ARI_IBINetGetCellInfoIndCbV1_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _BYTE *v5;
  _DWORD *v6;
  _DWORD *v7;
  _QWORD *v8;
  _DWORD *v9;
  _QWORD *v10;
  _DWORD *v11;
  _OWORD *v12;
  _DWORD *v13;
  _OWORD *v14;
  _DWORD *v15;
  _OWORD *v16;
  _DWORD *v17;
  _OWORD *v18;
  _DWORD *v19;
  _QWORD *v20;
  _DWORD *v21;
  _OWORD *v22;
  _OWORD *v23;
  _OWORD *v24;
  _DWORD *v25;
  _OWORD *v26;
  _DWORD *v27;
  _OWORD *v28;
  _OWORD *v29;
  _OWORD *v30;
  void *v31;
  void *__p;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;

  LOBYTE(__p) = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = __p == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  LOBYTE(__p) = 0;
  v5 = (_BYTE *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  }
  LOBYTE(__p) = 0;
  v7 = (_DWORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v7, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 11, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  }
  LOBYTE(__p) = 0;
  v8 = (_QWORD *)operator new();
  v8[1] = 0;
  v8[2] = 0;
  *v8 = 0;
  *((_DWORD *)v8 + 6) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v8, 28, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v8, 0x1000C4053384F6BLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBIUmtsCellInfoT>::operator=<IBIUmtsCellInfoT&,void>((uint64_t *)this + 12, v8);
    MEMORY[0x212BB9B60](v8, 0x1000C4053384F6BLL);
  }
  LOBYTE(__p) = 0;
  v9 = (_DWORD *)operator new();
  *v9 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v9, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 13, v9);
    MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
  }
  LOBYTE(__p) = 0;
  v10 = (_QWORD *)operator new();
  v10[1] = 0;
  v10[2] = 0;
  *v10 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 7, v10, 24, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v10, 0x1000C400618A0D7);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBIGsmCellInfoT>::operator=<IBIGsmCellInfoT&,void>((uint64_t *)this + 14, (uint64_t)v10);
    MEMORY[0x212BB9B60](v10, 0x1000C400618A0D7);
  }
  LOBYTE(__p) = 0;
  v11 = (_DWORD *)operator new();
  *v11 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 8, v11, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 15, v11);
    MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
  }
  LOBYTE(__p) = 0;
  v12 = (_OWORD *)operator new();
  *v12 = 0u;
  v12[1] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 9, v12, 32, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v12, 0x1000C4011F4EB07);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBILteCellInfoT>::operator=<IBILteCellInfoT&,void>((uint64_t *)this + 16, v12);
    MEMORY[0x212BB9B60](v12, 0x1000C4011F4EB07);
  }
  LOBYTE(__p) = 0;
  v13 = (_DWORD *)operator new();
  *v13 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 10, v13, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v13, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 17, v13);
    MEMORY[0x212BB9B60](v13, 0x1000C4052888210);
  }
  v37 = 0;
  v36 = 0xAAAAAAAAAAAAAAAALL;
  v14 = (_OWORD *)operator new[]();
  *v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 11, v14, 256, &v37, &v36);
  if ((_DWORD)v3 || !v37)
  {
    MEMORY[0x212BB9B48](v14, 0x1000C8000313F17);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v34 = 0;
    v35 = 0;
    __p = 0;
    std::vector<IBIUmtsNeighborCellInfoT>::__init_with_size[abi:ne180100]<IBIUmtsNeighborCellInfoT*,IBIUmtsNeighborCellInfoT*>(&__p, v14, (uint64_t)v14 + 8 * (v36 >> 3), v36 >> 3);
    AriSdk::TlvArray<IBIUmtsNeighborCellInfoT,32ul>::operator=((uint64_t)this + 144, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v14, 0x1000C8000313F17);
  }
  LOBYTE(__p) = 0;
  v15 = (_DWORD *)operator new();
  *v15 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 12, v15, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v15, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 21, v15);
    MEMORY[0x212BB9B60](v15, 0x1000C4052888210);
  }
  v37 = 0;
  v36 = 0xAAAAAAAAAAAAAAAALL;
  v16 = (_OWORD *)operator new[]();
  *v16 = 0u;
  v16[1] = 0u;
  v16[2] = 0u;
  v16[3] = 0u;
  v16[4] = 0u;
  v16[5] = 0u;
  v16[6] = 0u;
  v16[7] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 13, v16, 128, &v37, &v36);
  if ((_DWORD)v3 || !v37)
  {
    MEMORY[0x212BB9B48](v16, 0x1000C8052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v34 = 0;
    v35 = 0;
    __p = 0;
    std::vector<IBIGsmNeighborCellInfoT>::__init_with_size[abi:ne180100]<IBIGsmNeighborCellInfoT*,IBIGsmNeighborCellInfoT*>(&__p, v16, (uint64_t)v16 + 4 * (v36 >> 2), v36 >> 2);
    AriSdk::TlvArray<IBIGsmNeighborCellInfoT,32ul>::operator=((uint64_t)this + 176, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v16, 0x1000C8052888210);
  }
  LOBYTE(__p) = 0;
  v17 = (_DWORD *)operator new();
  *v17 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 14, v17, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v17, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 25, v17);
    MEMORY[0x212BB9B60](v17, 0x1000C4052888210);
  }
  v37 = 0;
  v36 = 0xAAAAAAAAAAAAAAAALL;
  v18 = (_OWORD *)operator new[]();
  *v18 = 0u;
  v18[1] = 0u;
  v18[2] = 0u;
  v18[3] = 0u;
  v18[4] = 0u;
  v18[5] = 0u;
  v18[6] = 0u;
  v18[7] = 0u;
  v18[8] = 0u;
  v18[9] = 0u;
  v18[10] = 0u;
  v18[11] = 0u;
  v18[12] = 0u;
  v18[13] = 0u;
  v18[14] = 0u;
  v18[15] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 15, v18, 256, &v37, &v36);
  if ((_DWORD)v3 || !v37)
  {
    MEMORY[0x212BB9B48](v18, 0x1000C8000313F17);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v34 = 0;
    v35 = 0;
    __p = 0;
    std::vector<IBILteNeighborCellInfoT>::__init_with_size[abi:ne180100]<IBILteNeighborCellInfoT*,IBILteNeighborCellInfoT*>(&__p, v18, (uint64_t)v18 + 8 * (v36 >> 3), v36 >> 3);
    AriSdk::TlvArray<IBILteNeighborCellInfoT,32ul>::operator=((uint64_t)this + 208, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v18, 0x1000C8000313F17);
  }
  LOBYTE(__p) = 0;
  v19 = (_DWORD *)operator new();
  *v19 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 16, v19, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v19, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 29, v19);
    MEMORY[0x212BB9B60](v19, 0x1000C4052888210);
  }
  LOBYTE(__p) = 0;
  v20 = (_QWORD *)operator new();
  v20[1] = 0;
  v20[2] = 0;
  *v20 = 0;
  *((_DWORD *)v20 + 6) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 17, v20, 28, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v20, 0x1000C4053384F6BLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBIUmtsCellInfoT>::operator=<IBIUmtsCellInfoT&,void>((uint64_t *)this + 30, v20);
    MEMORY[0x212BB9B60](v20, 0x1000C4053384F6BLL);
  }
  LOBYTE(__p) = 0;
  v21 = (_DWORD *)operator new();
  *v21 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 18, v21, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v21, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 31, v21);
    MEMORY[0x212BB9B60](v21, 0x1000C4052888210);
  }
  v37 = 0;
  v36 = 0xAAAAAAAAAAAAAAAALL;
  v22 = (_OWORD *)operator new[]();
  *v22 = 0u;
  v22[1] = 0u;
  v22[2] = 0u;
  v22[3] = 0u;
  v22[4] = 0u;
  v22[5] = 0u;
  v22[6] = 0u;
  v22[7] = 0u;
  v22[8] = 0u;
  v22[9] = 0u;
  v22[10] = 0u;
  v22[11] = 0u;
  v22[12] = 0u;
  v22[13] = 0u;
  v22[14] = 0u;
  v22[15] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 19, v22, 256, &v37, &v36);
  if ((_DWORD)v3 || !v37)
  {
    MEMORY[0x212BB9B48](v22, 0x1000C8000313F17);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v34 = 0;
    v35 = 0;
    __p = 0;
    std::vector<IBITdsNeighborCellInfoT>::__init_with_size[abi:ne180100]<IBITdsNeighborCellInfoT*,IBITdsNeighborCellInfoT*>(&__p, v22, (uint64_t)v22 + 8 * (v36 >> 3), v36 >> 3);
    AriSdk::TlvArray<IBITdsNeighborCellInfoT,32ul>::operator=((uint64_t)this + 256, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v22, 0x1000C8000313F17);
  }
  LOBYTE(__p) = 0;
  v23 = (_OWORD *)operator new();
  *v23 = 0u;
  v23[1] = 0u;
  v23[2] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 20, v23, 48, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v23, 0x1000C403DD497D7);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBINetCdma1xCellInfo>::operator=<IBINetCdma1xCellInfo&,void>((uint64_t *)this + 35, v23);
    MEMORY[0x212BB9B60](v23, 0x1000C403DD497D7);
  }
  LOBYTE(__p) = 0;
  v24 = (_OWORD *)operator new();
  *v24 = 0u;
  v24[1] = 0u;
  v24[2] = 0u;
  *((_DWORD *)v24 + 12) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 21, v24, 52, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v24, 0x1000C4043B73165);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBINetCdmaEvdoCellInfo>::operator=<IBINetCdmaEvdoCellInfo&,void>((uint64_t *)this + 36, (uint64_t)v24);
    MEMORY[0x212BB9B60](v24, 0x1000C4043B73165);
  }
  LOBYTE(__p) = 0;
  v25 = (_DWORD *)operator new();
  *v25 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 22, v25, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v25, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 37, v25);
    MEMORY[0x212BB9B60](v25, 0x1000C4052888210);
  }
  v37 = 0;
  v36 = 0xAAAAAAAAAAAAAAAALL;
  v26 = (_OWORD *)operator new[]();
  *v26 = 0u;
  v26[1] = 0u;
  v26[2] = 0u;
  v26[3] = 0u;
  v26[4] = 0u;
  v26[5] = 0u;
  v26[6] = 0u;
  v26[7] = 0u;
  v26[8] = 0u;
  v26[9] = 0u;
  v26[10] = 0u;
  v26[11] = 0u;
  v26[12] = 0u;
  v26[13] = 0u;
  v26[14] = 0u;
  v26[15] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 23, v26, 256, &v37, &v36);
  if ((_DWORD)v3 || !v37)
  {
    MEMORY[0x212BB9B48](v26, 0x1000C805D3D83E9);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v34 = 0;
    v35 = 0;
    __p = 0;
    std::vector<IBICdma1xNeighborCellInfo>::__init_with_size[abi:ne180100]<IBICdma1xNeighborCellInfo*,IBICdma1xNeighborCellInfo*>(&__p, v26, (uint64_t)v26 + 8 * (v36 >> 3), v36 >> 3);
    AriSdk::TlvArray<IBICdma1xNeighborCellInfo,32ul>::operator=((uint64_t)this + 304, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v26, 0x1000C805D3D83E9);
  }
  LOBYTE(__p) = 0;
  v27 = (_DWORD *)operator new();
  *v27 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 24, v27, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v27, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 41, v27);
    MEMORY[0x212BB9B60](v27, 0x1000C4052888210);
  }
  v37 = 0;
  v36 = 0xAAAAAAAAAAAAAAAALL;
  v28 = (_OWORD *)operator new[]();
  *v28 = 0u;
  v28[1] = 0u;
  v28[2] = 0u;
  v28[3] = 0u;
  v28[4] = 0u;
  v28[5] = 0u;
  v28[6] = 0u;
  v28[7] = 0u;
  v28[8] = 0u;
  v28[9] = 0u;
  v28[10] = 0u;
  v28[11] = 0u;
  v28[12] = 0u;
  v28[13] = 0u;
  v28[14] = 0u;
  v28[15] = 0u;
  v28[16] = 0u;
  v28[17] = 0u;
  v28[18] = 0u;
  v28[19] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 25, v28, 320, &v37, &v36);
  if ((_DWORD)v3 || !v37)
  {
    MEMORY[0x212BB9B48](v28, 0x1000C808AB07045);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v34 = 0;
    v35 = 0;
    __p = 0;
    std::vector<IBICdmaEvdoNeighborCellInfo>::__init_with_size[abi:ne180100]<IBICdmaEvdoNeighborCellInfo*,IBICdmaEvdoNeighborCellInfo*>(&__p, v28, (uint64_t)v28 + 10 * (v36 / 0xA), v36 / 0xA);
    AriSdk::TlvArray<IBICdmaEvdoNeighborCellInfo,32ul>::operator=((uint64_t)this + 336, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v28, 0x1000C808AB07045);
  }
  v37 = 0;
  v36 = 0xAAAAAAAAAAAAAAAALL;
  v29 = (_OWORD *)operator new[]();
  *v29 = 0u;
  v29[1] = 0u;
  *((_DWORD *)v29 + 8) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 26, v29, 36, &v37, &v36);
  if ((_DWORD)v3 || !v37)
  {
    MEMORY[0x212BB9B48](v29, 0x1000C80240F695FLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v34 = 0;
    v35 = 0;
    __p = 0;
    std::vector<IBILteCellInfoV1T>::__init_with_size[abi:ne180100]<IBILteCellInfoV1T*,IBILteCellInfoV1T*>(&__p, v29, (uint64_t)v29 + 36 * (v36 / 0x24), v36 / 0x24);
    AriSdk::TlvArray<IBILteCellInfoV1T,1ul>::operator=((uint64_t)this + 360, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v29, 0x1000C80240F695FLL);
  }
  v37 = 0;
  v36 = 0xAAAAAAAAAAAAAAAALL;
  v30 = (_OWORD *)operator new[]();
  *v30 = 0u;
  v30[1] = 0u;
  v30[2] = 0u;
  v30[3] = 0u;
  v30[4] = 0u;
  v30[5] = 0u;
  v30[6] = 0u;
  v30[7] = 0u;
  v30[8] = 0u;
  v30[9] = 0u;
  v30[10] = 0u;
  v30[11] = 0u;
  v30[12] = 0u;
  v30[13] = 0u;
  v30[14] = 0u;
  v30[15] = 0u;
  v30[16] = 0u;
  v30[17] = 0u;
  v30[18] = 0u;
  v30[19] = 0u;
  v30[20] = 0u;
  v30[21] = 0u;
  v30[22] = 0u;
  v30[23] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 27, v30, 384, &v37, &v36);
  if ((_DWORD)v3 || !v37)
  {
    MEMORY[0x212BB9B48](v30, 0x1000C80CBA68D63);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v34 = 0;
    v35 = 0;
    __p = 0;
    std::vector<IBILteNeighborCellInfoV1T>::__init_with_size[abi:ne180100]<IBILteNeighborCellInfoV1T*,IBILteNeighborCellInfoV1T*>(&__p, v30, (uint64_t)v30 + 12 * (v36 / 0xC), v36 / 0xC);
    AriSdk::TlvArray<IBILteNeighborCellInfoV1T,32ul>::operator=((uint64_t)this + 384, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v30, 0x1000C80CBA68D63);
  }
  v37 = 0;
  v36 = 0xAAAAAAAAAAAAAAAALL;
  v31 = (void *)operator new[]();
  bzero(v31, 0x300uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 28, v31, 768, &v37, &v36);
  if (!(_DWORD)v3 && v37)
  {
    v34 = 0;
    v35 = 0;
    __p = 0;
    std::vector<IBILteNeighborCellInfoV2T>::__init_with_size[abi:ne180100]<IBILteNeighborCellInfoV2T*,IBILteNeighborCellInfoV2T*>(&__p, v31, (uint64_t)v31 + 24 * (v36 / 0x18), v36 / 0x18);
    AriSdk::TlvArray<IBILteNeighborCellInfoV2T,32ul>::operator=((uint64_t)this + 408, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
  }
  MEMORY[0x212BB9B48](v31, 0x1000C80977131E8);
  return v3;
}

void sub_20E28A0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  uint64_t v10;

  if (__p)
    operator delete(__p);
  MEMORY[0x212BB9B48](v10, 0x1000C80977131E8);
  _Unwind_Resume(a1);
}

uint64_t *AriSdk::Tlv<IBIUmtsCellInfoT>::operator=<IBIUmtsCellInfoT&,void>(uint64_t *a1, _OWORD *a2)
{
  _OWORD *v4;
  uint64_t v5;

  v4 = (_OWORD *)operator new();
  *v4 = *a2;
  *(_OWORD *)((char *)v4 + 12) = *(_OWORD *)((char *)a2 + 12);
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4053384F6BLL);
  return a1;
}

uint64_t *AriSdk::Tlv<IBIGsmCellInfoT>::operator=<IBIGsmCellInfoT&,void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = operator new();
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 16);
  v5 = *a1;
  *a1 = v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C400618A0D7);
  return a1;
}

uint64_t *AriSdk::Tlv<IBILteCellInfoT>::operator=<IBILteCellInfoT&,void>(uint64_t *a1, _OWORD *a2)
{
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;

  v4 = (_OWORD *)operator new();
  v5 = a2[1];
  *v4 = *a2;
  v4[1] = v5;
  v6 = *a1;
  *a1 = (uint64_t)v4;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C4011F4EB07);
  return a1;
}

uint64_t *AriSdk::Tlv<IBINetCdma1xCellInfo>::operator=<IBINetCdma1xCellInfo&,void>(uint64_t *a1, _OWORD *a2)
{
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;

  v4 = (_OWORD *)operator new();
  v5 = a2[1];
  *v4 = *a2;
  v4[1] = v5;
  v4[2] = a2[2];
  v6 = *a1;
  *a1 = (uint64_t)v4;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C403DD497D7);
  return a1;
}

uint64_t *AriSdk::Tlv<IBINetCdmaEvdoCellInfo>::operator=<IBINetCdmaEvdoCellInfo&,void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v4 = operator new();
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a2 + 48);
  v6 = *a1;
  *a1 = v4;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C4043B73165);
  return a1;
}

BOOL AriSdk::ARI_IBINetGetCellInfoIndCbV1_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetGetCellInfoIndCbV1_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 629407744;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetGetCellInfoReq_SDK::ARI_IBINetGetCellInfoReq_SDK(AriSdk::ARI_IBINetGetCellInfoReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x24838000u, 0);
  *(_QWORD *)result = &off_24C911CA0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x24838000u, 0);
  *(_QWORD *)result = &off_24C911CA0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetGetCellInfoReq_SDK::ARI_IBINetGetCellInfoReq_SDK(AriSdk::ARI_IBINetGetCellInfoReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911CA0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911CA0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBINetGetCellInfoReq_SDK::~ARI_IBINetGetCellInfoReq_SDK(AriSdk::ARI_IBINetGetCellInfoReq_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C911CA0;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetGetCellInfoReq_SDK::~ARI_IBINetGetCellInfoReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetGetCellInfoReq_SDK::pack(AriSdk::ARI_IBINetGetCellInfoReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetGetCellInfoReq_SDK::unpack(AriSdk::ARI_IBINetGetCellInfoReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E28A7D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetGetCellInfoReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetGetCellInfoReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 612597760;
}

AriSdk::ARI_IBINetGetCellInfoRespCb_SDK *AriSdk::ARI_IBINetGetCellInfoRespCb_SDK::ARI_IBINetGetCellInfoRespCb_SDK(AriSdk::ARI_IBINetGetCellInfoRespCb_SDK *this)
{
  AriSdk::MsgBase *v2;

  v2 = AriSdk::MsgBase::MsgBase(this, 0x25038000u, 0);
  *(_QWORD *)v2 = &off_24C911CD8;
  bzero((char *)v2 + 64, 0x2F8uLL);
  return this;
}

{
  AriSdk::MsgBase *v2;

  v2 = AriSdk::MsgBase::MsgBase(this, 0x25038000u, 0);
  *(_QWORD *)v2 = &off_24C911CD8;
  bzero((char *)v2 + 64, 0x2F8uLL);
  return this;
}

AriSdk::ARI_IBINetGetCellInfoRespCb_SDK *AriSdk::ARI_IBINetGetCellInfoRespCb_SDK::ARI_IBINetGetCellInfoRespCb_SDK(AriSdk::ARI_IBINetGetCellInfoRespCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v4;

  v4 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v4 = &off_24C911CD8;
  bzero((char *)v4 + 64, 0x2F8uLL);
  return this;
}

{
  AriSdk::MsgBase *v4;

  v4 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v4 = &off_24C911CD8;
  bzero((char *)v4 + 64, 0x2F8uLL);
  return this;
}

void AriSdk::ARI_IBINetGetCellInfoRespCb_SDK::~ARI_IBINetGetCellInfoRespCb_SDK(AriSdk::ARI_IBINetGetCellInfoRespCb_SDK *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  *(_QWORD *)this = &off_24C911CD8;
  v2 = (void *)*((_QWORD *)this + 100);
  if (v2)
  {
    *((_QWORD *)this + 101) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 97);
  if (v3)
  {
    *((_QWORD *)this + 98) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 94);
  if (v4)
  {
    *((_QWORD *)this + 95) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 91);
  if (v5)
  {
    *((_QWORD *)this + 92) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 88);
  if (v6)
  {
    *((_QWORD *)this + 89) = v6;
    operator delete(v6);
  }
  v7 = *((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  v8 = (void *)*((_QWORD *)this + 84);
  if (v8)
  {
    *((_QWORD *)this + 85) = v8;
    operator delete(v8);
  }
  v9 = *((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v9)
    MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
  v10 = (void *)*((_QWORD *)this + 80);
  if (v10)
  {
    *((_QWORD *)this + 81) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 77);
  if (v11)
  {
    *((_QWORD *)this + 78) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 74);
  if (v12)
  {
    *((_QWORD *)this + 75) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 71);
  if (v13)
  {
    *((_QWORD *)this + 72) = v13;
    operator delete(v13);
  }
  v14 = *((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v14)
    MEMORY[0x212BB9B60](v14, 0x1000C4052888210);
  v15 = *((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = 0;
  if (v15)
    MEMORY[0x212BB9B60](v15, 0x1000C4077774924);
  v16 = (void *)*((_QWORD *)this + 66);
  if (v16)
  {
    *((_QWORD *)this + 67) = v16;
    operator delete(v16);
  }
  v17 = *((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v17)
    MEMORY[0x212BB9B60](v17, 0x1000C4052888210);
  v18 = *((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v18)
    MEMORY[0x212BB9B60](v18, 0x1000C4077774924);
  v19 = (void *)*((_QWORD *)this + 61);
  if (v19)
  {
    *((_QWORD *)this + 62) = v19;
    operator delete(v19);
  }
  v20 = *((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v20)
    MEMORY[0x212BB9B60](v20, 0x1000C4052888210);
  v21 = *((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v21)
    MEMORY[0x212BB9B60](v21, 0x1000C4077774924);
  v22 = (void *)*((_QWORD *)this + 56);
  if (v22)
  {
    *((_QWORD *)this + 57) = v22;
    operator delete(v22);
  }
  v23 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v23)
    MEMORY[0x212BB9B60](v23, 0x1000C4052888210);
  v24 = *((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v24)
    MEMORY[0x212BB9B60](v24, 0x1000C4077774924);
  v25 = (void *)*((_QWORD *)this + 51);
  if (v25)
  {
    *((_QWORD *)this + 52) = v25;
    operator delete(v25);
  }
  v26 = *((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v26)
    MEMORY[0x212BB9B60](v26, 0x1000C4052888210);
  v27 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v27)
    MEMORY[0x212BB9B60](v27, 0x1000C4077774924);
  v28 = (void *)*((_QWORD *)this + 46);
  if (v28)
  {
    *((_QWORD *)this + 47) = v28;
    operator delete(v28);
  }
  v29 = *((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v29)
    MEMORY[0x212BB9B60](v29, 0x1000C4052888210);
  v30 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v30)
    MEMORY[0x212BB9B60](v30, 0x1000C4077774924);
  v31 = (void *)*((_QWORD *)this + 41);
  if (v31)
  {
    *((_QWORD *)this + 42) = v31;
    operator delete(v31);
  }
  v32 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v32)
    MEMORY[0x212BB9B60](v32, 0x1000C4052888210);
  v33 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v33)
    MEMORY[0x212BB9B60](v33, 0x1000C4077774924);
  v34 = (void *)*((_QWORD *)this + 36);
  if (v34)
  {
    *((_QWORD *)this + 37) = v34;
    operator delete(v34);
  }
  v35 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v35)
    MEMORY[0x212BB9B60](v35, 0x1000C4052888210);
  v36 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v36)
    MEMORY[0x212BB9B60](v36, 0x1000C4077774924);
  v37 = (void *)*((_QWORD *)this + 31);
  if (v37)
  {
    *((_QWORD *)this + 32) = v37;
    operator delete(v37);
  }
  v38 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v38)
    MEMORY[0x212BB9B60](v38, 0x1000C4052888210);
  v39 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v39)
    MEMORY[0x212BB9B60](v39, 0x1000C4077774924);
  v40 = (void *)*((_QWORD *)this + 26);
  if (v40)
  {
    *((_QWORD *)this + 27) = v40;
    operator delete(v40);
  }
  v41 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v41)
    MEMORY[0x212BB9B60](v41, 0x1000C4052888210);
  v42 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v42)
    MEMORY[0x212BB9B60](v42, 0x1000C4077774924);
  v43 = (void *)*((_QWORD *)this + 21);
  if (v43)
  {
    *((_QWORD *)this + 22) = v43;
    operator delete(v43);
  }
  v44 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v44)
    MEMORY[0x212BB9B60](v44, 0x1000C4052888210);
  v45 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v45)
    MEMORY[0x212BB9B60](v45, 0x1000C4077774924);
  v46 = (void *)*((_QWORD *)this + 16);
  if (v46)
  {
    *((_QWORD *)this + 17) = v46;
    operator delete(v46);
  }
  v47 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v47)
    MEMORY[0x212BB9B60](v47, 0x1000C4052888210);
  v48 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v48)
    MEMORY[0x212BB9B60](v48, 0x1000C4077774924);
  v49 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v49)
    MEMORY[0x212BB9B60](v49, 0x1000C4052888210);
  v50 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v50)
    MEMORY[0x212BB9B60](v50, 0x1000C4077774924);
  v51 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v51)
    MEMORY[0x212BB9B60](v51, 0x1000C4077774924);
  v52 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v52)
    MEMORY[0x212BB9B60](v52, 0x1000C4077774924);
  v53 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v53)
    MEMORY[0x212BB9B60](v53, 0x1000C4000313F17);
  v54 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v54)
    MEMORY[0x212BB9B60](v54, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetGetCellInfoRespCb_SDK::~ARI_IBINetGetCellInfoRespCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetGetCellInfoRespCb_SDK::pack(AriSdk::ARI_IBINetGetCellInfoRespCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  _BYTE *v13;
  _BYTE *v14;
  const void *v15;
  const void *v16;
  _BYTE *v17;
  _BYTE *v18;
  const void *v19;
  const void *v20;
  _BYTE *v21;
  _BYTE *v22;
  const void *v23;
  const void *v24;
  _BYTE *v25;
  _BYTE *v26;
  const void *v27;
  const void *v28;
  _BYTE *v29;
  _BYTE *v30;
  const void *v31;
  const void *v32;
  _BYTE *v33;
  _BYTE *v34;
  const void *v35;
  const void *v36;
  _BYTE *v37;
  _BYTE *v38;
  const void *v39;
  const void *v40;
  _BYTE *v41;
  _BYTE *v42;
  const void *v43;
  const void *v44;
  _BYTE *v45;
  _BYTE *v46;
  const void *v47;
  const void *v48;
  _BYTE *v49;
  _BYTE *v50;
  const void *v51;
  const void *v52;
  _BYTE *v53;
  _BYTE *v54;
  const void *v55;
  const void *v56;
  _BYTE *v57;
  _BYTE *v58;
  _BYTE *v59;
  _BYTE *v60;
  _BYTE *v61;
  _BYTE *v62;
  _BYTE *v63;
  _BYTE *v64;
  const void *v65;
  _BYTE *v66;
  _BYTE *v67;
  const void *v68;
  _BYTE *v69;
  _BYTE *v70;
  _BYTE *v71;
  _BYTE *v72;
  _BYTE *v73;
  _BYTE *v74;
  _BYTE *v75;
  _BYTE *v76;
  _BYTE *v77;
  _BYTE *v78;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 8uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 1uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v8, 1uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v9, 1uLL, 0), !(_DWORD)result))
          {
            v10 = (const void *)*((_QWORD *)this + 13);
            if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 7, v10, 4uLL, 0), !(_DWORD)result))
            {
              v11 = (const void *)*((_QWORD *)this + 14);
              if (!v11 || (result = AriMsg::pack(*((AriMsg **)this + 6), 8, v11, 1uLL, 0), !(_DWORD)result))
              {
                v12 = (const void *)*((_QWORD *)this + 15);
                if (!v12 || (result = AriMsg::pack(*((AriMsg **)this + 6), 9, v12, 4uLL, 0), !(_DWORD)result))
                {
                  v13 = (_BYTE *)*((_QWORD *)this + 16);
                  if (!v13
                    || (v14 = (_BYTE *)*((_QWORD *)this + 17), v13 == v14)
                    || (result = AriMsg::pack(*((AriMsg **)this + 6), 10, v13, v14 - v13, 0), !(_DWORD)result))
                  {
                    v15 = (const void *)*((_QWORD *)this + 19);
                    if (!v15 || (result = AriMsg::pack(*((AriMsg **)this + 6), 11, v15, 1uLL, 0), !(_DWORD)result))
                    {
                      v16 = (const void *)*((_QWORD *)this + 20);
                      if (!v16 || (result = AriMsg::pack(*((AriMsg **)this + 6), 12, v16, 4uLL, 0), !(_DWORD)result))
                      {
                        v17 = (_BYTE *)*((_QWORD *)this + 21);
                        if (!v17
                          || (v18 = (_BYTE *)*((_QWORD *)this + 22), v17 == v18)
                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 13, v17, v18 - v17, 0), !(_DWORD)result))
                        {
                          v19 = (const void *)*((_QWORD *)this + 24);
                          if (!v19
                            || (result = AriMsg::pack(*((AriMsg **)this + 6), 14, v19, 1uLL, 0), !(_DWORD)result))
                          {
                            v20 = (const void *)*((_QWORD *)this + 25);
                            if (!v20
                              || (result = AriMsg::pack(*((AriMsg **)this + 6), 15, v20, 4uLL, 0), !(_DWORD)result))
                            {
                              v21 = (_BYTE *)*((_QWORD *)this + 26);
                              if (!v21
                                || (v22 = (_BYTE *)*((_QWORD *)this + 27), v21 == v22)
                                || (result = AriMsg::pack(*((AriMsg **)this + 6), 16, v21, v22 - v21, 0),
                                    !(_DWORD)result))
                              {
                                v23 = (const void *)*((_QWORD *)this + 29);
                                if (!v23
                                  || (result = AriMsg::pack(*((AriMsg **)this + 6), 17, v23, 1uLL, 0), !(_DWORD)result))
                                {
                                  v24 = (const void *)*((_QWORD *)this + 30);
                                  if (!v24
                                    || (result = AriMsg::pack(*((AriMsg **)this + 6), 18, v24, 4uLL, 0),
                                        !(_DWORD)result))
                                  {
                                    v25 = (_BYTE *)*((_QWORD *)this + 31);
                                    if (!v25
                                      || (v26 = (_BYTE *)*((_QWORD *)this + 32), v25 == v26)
                                      || (result = AriMsg::pack(*((AriMsg **)this + 6), 19, v25, v26 - v25, 0),
                                          !(_DWORD)result))
                                    {
                                      v27 = (const void *)*((_QWORD *)this + 34);
                                      if (!v27
                                        || (result = AriMsg::pack(*((AriMsg **)this + 6), 20, v27, 1uLL, 0),
                                            !(_DWORD)result))
                                      {
                                        v28 = (const void *)*((_QWORD *)this + 35);
                                        if (!v28
                                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 21, v28, 4uLL, 0),
                                              !(_DWORD)result))
                                        {
                                          v29 = (_BYTE *)*((_QWORD *)this + 36);
                                          if (!v29
                                            || (v30 = (_BYTE *)*((_QWORD *)this + 37), v29 == v30)
                                            || (result = AriMsg::pack(*((AriMsg **)this + 6), 22, v29, v30 - v29, 0),
                                                !(_DWORD)result))
                                          {
                                            v31 = (const void *)*((_QWORD *)this + 39);
                                            if (!v31
                                              || (result = AriMsg::pack(*((AriMsg **)this + 6), 23, v31, 1uLL, 0),
                                                  !(_DWORD)result))
                                            {
                                              v32 = (const void *)*((_QWORD *)this + 40);
                                              if (!v32
                                                || (result = AriMsg::pack(*((AriMsg **)this + 6), 24, v32, 4uLL, 0),
                                                    !(_DWORD)result))
                                              {
                                                v33 = (_BYTE *)*((_QWORD *)this + 41);
                                                if (!v33
                                                  || (v34 = (_BYTE *)*((_QWORD *)this + 42), v33 == v34)
                                                  || (result = AriMsg::pack(*((AriMsg **)this + 6), 25, v33, v34 - v33, 0), !(_DWORD)result))
                                                {
                                                  v35 = (const void *)*((_QWORD *)this + 44);
                                                  if (!v35
                                                    || (result = AriMsg::pack(*((AriMsg **)this + 6), 26, v35, 1uLL, 0), !(_DWORD)result))
                                                  {
                                                    v36 = (const void *)*((_QWORD *)this + 45);
                                                    if (!v36
                                                      || (result = AriMsg::pack(*((AriMsg **)this + 6), 27, v36, 4uLL, 0), !(_DWORD)result))
                                                    {
                                                      v37 = (_BYTE *)*((_QWORD *)this + 46);
                                                      if (!v37
                                                        || (v38 = (_BYTE *)*((_QWORD *)this + 47), v37 == v38)
                                                        || (result = AriMsg::pack(*((AriMsg **)this + 6), 28, v37, v38 - v37, 0), !(_DWORD)result))
                                                      {
                                                        v39 = (const void *)*((_QWORD *)this + 49);
                                                        if (!v39
                                                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 29, v39, 1uLL, 0), !(_DWORD)result))
                                                        {
                                                          v40 = (const void *)*((_QWORD *)this + 50);
                                                          if (!v40
                                                            || (result = AriMsg::pack(*((AriMsg **)this + 6), 30, v40, 4uLL, 0), !(_DWORD)result))
                                                          {
                                                            v41 = (_BYTE *)*((_QWORD *)this + 51);
                                                            if (!v41
                                                              || (v42 = (_BYTE *)*((_QWORD *)this + 52), v41 == v42)
                                                              || (result = AriMsg::pack(*((AriMsg **)this + 6), 31, v41, v42 - v41, 0), !(_DWORD)result))
                                                            {
                                                              v43 = (const void *)*((_QWORD *)this + 54);
                                                              if (!v43
                                                                || (result = AriMsg::pack(*((AriMsg **)this + 6), 32, v43, 1uLL, 0), !(_DWORD)result))
                                                              {
                                                                v44 = (const void *)*((_QWORD *)this + 55);
                                                                if (!v44
                                                                  || (result = AriMsg::pack(*((AriMsg **)this + 6), 33, v44, 4uLL, 0), !(_DWORD)result))
                                                                {
                                                                  v45 = (_BYTE *)*((_QWORD *)this + 56);
                                                                  if (!v45
                                                                    || (v46 = (_BYTE *)*((_QWORD *)this + 57), v45 == v46)
                                                                    || (result = AriMsg::pack(*((AriMsg **)this + 6), 34, v45, v46 - v45, 0), !(_DWORD)result))
                                                                  {
                                                                    v47 = (const void *)*((_QWORD *)this + 59);
                                                                    if (!v47
                                                                      || (result = AriMsg::pack(*((AriMsg **)this + 6), 35, v47, 1uLL, 0), !(_DWORD)result))
                                                                    {
                                                                      v48 = (const void *)*((_QWORD *)this + 60);
                                                                      if (!v48
                                                                        || (result = AriMsg::pack(*((AriMsg **)this + 6), 36, v48, 4uLL, 0), !(_DWORD)result))
                                                                      {
                                                                        v49 = (_BYTE *)*((_QWORD *)this + 61);
                                                                        if (!v49
                                                                          || (v50 = (_BYTE *)*((_QWORD *)this + 62),
                                                                              v49 == v50)
                                                                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 37, v49, v50 - v49, 0), !(_DWORD)result))
                                                                        {
                                                                          v51 = (const void *)*((_QWORD *)this + 64);
                                                                          if (!v51
                                                                            || (result = AriMsg::pack(*((AriMsg **)this + 6), 38, v51, 1uLL, 0), !(_DWORD)result))
                                                                          {
                                                                            v52 = (const void *)*((_QWORD *)this + 65);
                                                                            if (!v52
                                                                              || (result = AriMsg::pack(*((AriMsg **)this + 6), 39, v52, 4uLL, 0), !(_DWORD)result))
                                                                            {
                                                                              v53 = (_BYTE *)*((_QWORD *)this + 66);
                                                                              if (!v53
                                                                                || (v54 = (_BYTE *)*((_QWORD *)this + 67),
                                                                                    v53 == v54)
                                                                                || (result = AriMsg::pack(*((AriMsg **)this + 6), 40, v53, v54 - v53, 0), !(_DWORD)result))
                                                                              {
                                                                                v55 = (const void *)*((_QWORD *)this + 69);
                                                                                if (!v55
                                                                                  || (result = AriMsg::pack(*((AriMsg **)this + 6), 41, v55, 1uLL, 0), !(_DWORD)result))
                                                                                {
                                                                                  v56 = (const void *)*((_QWORD *)this + 70);
                                                                                  if (!v56
                                                                                    || (result = AriMsg::pack(*((AriMsg **)this + 6), 48, v56, 4uLL, 0), !(_DWORD)result))
                                                                                  {
                                                                                    v57 = (_BYTE *)*((_QWORD *)this + 71);
                                                                                    if (!v57
                                                                                      || (v58 = (_BYTE *)*((_QWORD *)this + 72),
                                                                                          v57 == v58)
                                                                                      || (result = AriMsg::pack(*((AriMsg **)this + 6), 49, v57, v58 - v57, 0), !(_DWORD)result))
                                                                                    {
                                                                                      v59 = (_BYTE *)*((_QWORD *)this + 74);
                                                                                      if (!v59
                                                                                        || (v60 = (_BYTE *)*((_QWORD *)this + 75),
                                                                                            v59 == v60)
                                                                                        || (result = AriMsg::pack(*((AriMsg **)this + 6), 50, v59, v60 - v59, 0),
                                                                                            !(_DWORD)result))
                                                                                      {
                                                                                        v61 = (_BYTE *)*((_QWORD *)this + 77);
                                                                                        if (!v61
                                                                                          || (v62 = (_BYTE *)*((_QWORD *)this + 78),
                                                                                              v61 == v62)
                                                                                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 51, v61, v62 - v61, 0),
                                                                                              !(_DWORD)result))
                                                                                        {
                                                                                          v63 = (_BYTE *)*((_QWORD *)this + 80);
                                                                                          if (!v63
                                                                                            || (v64 = (_BYTE *)*((_QWORD *)this + 81),
                                                                                                v63 == v64)
                                                                                            || (result = AriMsg::pack(*((AriMsg **)this + 6), 52, v63, v64 - v63, 0),
                                                                                                !(_DWORD)result))
                                                                                          {
                                                                                            v65 = (const void *)*((_QWORD *)this + 83);
                                                                                            if (!v65
                                                                                              || (result = AriMsg::pack(*((AriMsg **)this + 6), 53, v65, 4uLL, 0),
                                                                                                  !(_DWORD)result))
                                                                                            {
                                                                                              v66 = (_BYTE *)*((_QWORD *)this + 84);
                                                                                              if (!v66
                                                                                                || (v67 = (_BYTE *)*((_QWORD *)this + 85),
                                                                                                    v66 == v67)
                                                                                                || (result = AriMsg::pack(*((AriMsg **)this + 6), 54, v66, v67 - v66, 0),
                                                                                                    !(_DWORD)result))
                                                                                              {
                                                                                                v68 = (const void *)*((_QWORD *)this + 87);
                                                                                                if (!v68 || (result = AriMsg::pack(*((AriMsg **)this + 6), 55, v68, 4uLL, 0), !(_DWORD)result))
                                                                                                {
                                                                                                  v69 = (_BYTE *)*((_QWORD *)this + 88);
                                                                                                  if (!v69 || (v70 = (_BYTE *)*((_QWORD *)this + 89), v69 == v70) || (result = AriMsg::pack(*((AriMsg **)this + 6), 56, v69, v70 - v69, 0), !(_DWORD)result))
                                                                                                  {
                                                                                                    v71 = (_BYTE *)*((_QWORD *)this + 91);
                                                                                                    if (!v71 || (v72 = (_BYTE *)*((_QWORD *)this + 92), v71 == v72) || (result = AriMsg::pack(*((AriMsg **)this + 6), 57, v71, v72 - v71, 0), !(_DWORD)result))
                                                                                                    {
                                                                                                      v73 = (_BYTE *)*((_QWORD *)this + 94);
                                                                                                      if (!v73 || (v74 = (_BYTE *)*((_QWORD *)this + 95), v73 == v74) || (result = AriMsg::pack(*((AriMsg **)this + 6), 58, v73, v74 - v73, 0), !(_DWORD)result))
                                                                                                      {
                                                                                                        v75 = (_BYTE *)*((_QWORD *)this + 97);
                                                                                                        if (!v75 || (v76 = (_BYTE *)*((_QWORD *)this + 98), v75 == v76) || (result = AriMsg::pack(*((AriMsg **)this + 6), 59, v75, v76 - v75, 0), !(_DWORD)result))
                                                                                                        {
                                                                                                          v77 = (_BYTE *)*((_QWORD *)this + 100);
                                                                                                          if (!v77 || (v78 = (_BYTE *)*((_QWORD *)this + 101), v77 == v78) || (result = AriMsg::pack(*((AriMsg **)this + 6), 60, v77, v78 - v77, 0), !(_DWORD)result))
                                                                                                          {
                                                                                                            result = 0;
                                                                                                            *a2 = (AriMsg *)*((_QWORD *)this + 6);
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetGetCellInfoRespCb_SDK::unpack(AriSdk::ARI_IBINetGetCellInfoRespCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _QWORD *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  _DWORD *v9;
  _BYTE *v10;
  _DWORD *v11;
  _QWORD *v12;
  _BYTE *v13;
  _DWORD *v14;
  _QWORD *v15;
  _BYTE *v16;
  _DWORD *v17;
  _OWORD *v18;
  _BYTE *v19;
  _DWORD *v20;
  _OWORD *v21;
  _BYTE *v22;
  _DWORD *v23;
  _OWORD *v24;
  _BYTE *v25;
  _DWORD *v26;
  _OWORD *v27;
  _BYTE *v28;
  _DWORD *v29;
  _QWORD *v30;
  _BYTE *v31;
  _DWORD *v32;
  _OWORD *v33;
  _BYTE *v34;
  _DWORD *v35;
  _OWORD *v36;
  _BYTE *v37;
  _DWORD *v38;
  _OWORD *v39;
  _BYTE *v40;
  _DWORD *v41;
  _OWORD *v42;
  _BYTE *v43;
  _DWORD *v44;
  _OWORD *v45;
  _OWORD *v46;
  _OWORD *v47;
  _OWORD *v48;
  _DWORD *v49;
  _OWORD *v50;
  _DWORD *v51;
  void *v52;
  _OWORD *v53;
  void *v54;
  _OWORD *v55;
  void *v56;
  void *__p;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  BOOL v62;

  LOBYTE(__p) = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = __p == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  LOBYTE(__p) = 0;
  v5 = (_QWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 8, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4000313F17);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<AriStatusTlv>::operator=<AriStatusTlv&,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4000313F17);
  }
  LOBYTE(__p) = 0;
  v6 = (_BYTE *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v7 = (_BYTE *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v7, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 11, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v8 = (_BYTE *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v8, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v8, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 12, v8);
    MEMORY[0x212BB9B60](v8, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v9 = (_DWORD *)operator new();
  *v9 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 7, v9, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 13, v9);
    MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
  }
  LOBYTE(__p) = 0;
  v10 = (_BYTE *)operator new();
  *v10 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 8, v10, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v10, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 14, v10);
    MEMORY[0x212BB9B60](v10, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v11 = (_DWORD *)operator new();
  *v11 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 9, v11, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 15, v11);
    MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
  }
  v62 = 0;
  v61 = 0xAAAAAAAAAAAAAAAALL;
  v12 = (_QWORD *)operator new[]();
  v12[1] = 0;
  v12[2] = 0;
  *v12 = 0;
  *((_DWORD *)v12 + 6) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 10, v12, 28, &v62, &v61);
  if ((_DWORD)v3 || !v62)
  {
    MEMORY[0x212BB9B48](v12, 0x1000C8053384F6BLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v59 = 0;
    v60 = 0;
    __p = 0;
    std::vector<IBIUmtsCellInfoT>::__init_with_size[abi:ne180100]<IBIUmtsCellInfoT*,IBIUmtsCellInfoT*>(&__p, v12, (uint64_t)v12 + 28 * (v61 / 0x1C), v61 / 0x1C);
    AriSdk::TlvArray<IBIUmtsCellInfoT,1ul>::operator=((uint64_t)this + 128, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v12, 0x1000C8053384F6BLL);
  }
  LOBYTE(__p) = 0;
  v13 = (_BYTE *)operator new();
  *v13 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 11, v13, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v13, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 19, v13);
    MEMORY[0x212BB9B60](v13, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v14 = (_DWORD *)operator new();
  *v14 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 12, v14, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v14, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 20, v14);
    MEMORY[0x212BB9B60](v14, 0x1000C4052888210);
  }
  v62 = 0;
  v61 = 0xAAAAAAAAAAAAAAAALL;
  v15 = (_QWORD *)operator new[]();
  v15[1] = 0;
  v15[2] = 0;
  *v15 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 13, v15, 24, &v62, &v61);
  if ((_DWORD)v3 || !v62)
  {
    MEMORY[0x212BB9B48](v15, 0x1000C800618A0D7);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v59 = 0;
    v60 = 0;
    __p = 0;
    std::vector<IBIGsmCellInfoT>::__init_with_size[abi:ne180100]<IBIGsmCellInfoT*,IBIGsmCellInfoT*>(&__p, v15, (uint64_t)&v15[3 * (v61 / 0x18)], v61 / 0x18);
    AriSdk::TlvArray<IBIGsmCellInfoT,1ul>::operator=((uint64_t)this + 168, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v15, 0x1000C800618A0D7);
  }
  LOBYTE(__p) = 0;
  v16 = (_BYTE *)operator new();
  *v16 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 14, v16, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v16, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 24, v16);
    MEMORY[0x212BB9B60](v16, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v17 = (_DWORD *)operator new();
  *v17 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 15, v17, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v17, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 25, v17);
    MEMORY[0x212BB9B60](v17, 0x1000C4052888210);
  }
  v62 = 0;
  v61 = 0xAAAAAAAAAAAAAAAALL;
  v18 = (_OWORD *)operator new[]();
  *v18 = 0u;
  v18[1] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 16, v18, 32, &v62, &v61);
  if ((_DWORD)v3 || !v62)
  {
    MEMORY[0x212BB9B48](v18, 0x1000C8011F4EB07);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v59 = 0;
    v60 = 0;
    __p = 0;
    std::vector<IBILteCellInfoT>::__init_with_size[abi:ne180100]<IBILteCellInfoT*,IBILteCellInfoT*>(&__p, v18, (uint64_t)&v18[2 * (v61 >> 5)], v61 >> 5);
    AriSdk::TlvArray<IBILteCellInfoT,1ul>::operator=((uint64_t)this + 208, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v18, 0x1000C8011F4EB07);
  }
  LOBYTE(__p) = 0;
  v19 = (_BYTE *)operator new();
  *v19 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 17, v19, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v19, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 29, v19);
    MEMORY[0x212BB9B60](v19, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v20 = (_DWORD *)operator new();
  *v20 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 18, v20, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v20, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 30, v20);
    MEMORY[0x212BB9B60](v20, 0x1000C4052888210);
  }
  v62 = 0;
  v61 = 0xAAAAAAAAAAAAAAAALL;
  v21 = (_OWORD *)operator new[]();
  *v21 = 0u;
  v21[1] = 0u;
  v21[2] = 0u;
  v21[3] = 0u;
  v21[4] = 0u;
  v21[5] = 0u;
  v21[6] = 0u;
  v21[7] = 0u;
  v21[8] = 0u;
  v21[9] = 0u;
  v21[10] = 0u;
  v21[11] = 0u;
  v21[12] = 0u;
  v21[13] = 0u;
  v21[14] = 0u;
  v21[15] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 19, v21, 256, &v62, &v61);
  if ((_DWORD)v3 || !v62)
  {
    MEMORY[0x212BB9B48](v21, 0x1000C8000313F17);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v59 = 0;
    v60 = 0;
    __p = 0;
    std::vector<IBIUmtsNeighborCellInfoT>::__init_with_size[abi:ne180100]<IBIUmtsNeighborCellInfoT*,IBIUmtsNeighborCellInfoT*>(&__p, v21, (uint64_t)v21 + 8 * (v61 >> 3), v61 >> 3);
    AriSdk::TlvArray<IBIUmtsNeighborCellInfoT,32ul>::operator=((uint64_t)this + 248, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v21, 0x1000C8000313F17);
  }
  LOBYTE(__p) = 0;
  v22 = (_BYTE *)operator new();
  *v22 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 20, v22, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v22, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 34, v22);
    MEMORY[0x212BB9B60](v22, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v23 = (_DWORD *)operator new();
  *v23 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 21, v23, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v23, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 35, v23);
    MEMORY[0x212BB9B60](v23, 0x1000C4052888210);
  }
  v62 = 0;
  v61 = 0xAAAAAAAAAAAAAAAALL;
  v24 = (_OWORD *)operator new[]();
  *v24 = 0u;
  v24[1] = 0u;
  v24[2] = 0u;
  v24[3] = 0u;
  v24[4] = 0u;
  v24[5] = 0u;
  v24[6] = 0u;
  v24[7] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 22, v24, 128, &v62, &v61);
  if ((_DWORD)v3 || !v62)
  {
    MEMORY[0x212BB9B48](v24, 0x1000C8052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v59 = 0;
    v60 = 0;
    __p = 0;
    std::vector<IBIGsmNeighborCellInfoT>::__init_with_size[abi:ne180100]<IBIGsmNeighborCellInfoT*,IBIGsmNeighborCellInfoT*>(&__p, v24, (uint64_t)v24 + 4 * (v61 >> 2), v61 >> 2);
    AriSdk::TlvArray<IBIGsmNeighborCellInfoT,32ul>::operator=((uint64_t)this + 288, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v24, 0x1000C8052888210);
  }
  LOBYTE(__p) = 0;
  v25 = (_BYTE *)operator new();
  *v25 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 23, v25, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v25, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 39, v25);
    MEMORY[0x212BB9B60](v25, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v26 = (_DWORD *)operator new();
  *v26 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 24, v26, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v26, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 40, v26);
    MEMORY[0x212BB9B60](v26, 0x1000C4052888210);
  }
  v62 = 0;
  v61 = 0xAAAAAAAAAAAAAAAALL;
  v27 = (_OWORD *)operator new[]();
  *v27 = 0u;
  v27[1] = 0u;
  v27[2] = 0u;
  v27[3] = 0u;
  v27[4] = 0u;
  v27[5] = 0u;
  v27[6] = 0u;
  v27[7] = 0u;
  v27[8] = 0u;
  v27[9] = 0u;
  v27[10] = 0u;
  v27[11] = 0u;
  v27[12] = 0u;
  v27[13] = 0u;
  v27[14] = 0u;
  v27[15] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 25, v27, 256, &v62, &v61);
  if ((_DWORD)v3 || !v62)
  {
    MEMORY[0x212BB9B48](v27, 0x1000C8000313F17);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v59 = 0;
    v60 = 0;
    __p = 0;
    std::vector<IBILteNeighborCellInfoT>::__init_with_size[abi:ne180100]<IBILteNeighborCellInfoT*,IBILteNeighborCellInfoT*>(&__p, v27, (uint64_t)v27 + 8 * (v61 >> 3), v61 >> 3);
    AriSdk::TlvArray<IBILteNeighborCellInfoT,32ul>::operator=((uint64_t)this + 328, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v27, 0x1000C8000313F17);
  }
  LOBYTE(__p) = 0;
  v28 = (_BYTE *)operator new();
  *v28 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 26, v28, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v28, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 44, v28);
    MEMORY[0x212BB9B60](v28, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v29 = (_DWORD *)operator new();
  *v29 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 27, v29, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v29, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 45, v29);
    MEMORY[0x212BB9B60](v29, 0x1000C4052888210);
  }
  v62 = 0;
  v61 = 0xAAAAAAAAAAAAAAAALL;
  v30 = (_QWORD *)operator new[]();
  v30[1] = 0;
  v30[2] = 0;
  *v30 = 0;
  *((_DWORD *)v30 + 6) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 28, v30, 28, &v62, &v61);
  if ((_DWORD)v3 || !v62)
  {
    MEMORY[0x212BB9B48](v30, 0x1000C8053384F6BLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v59 = 0;
    v60 = 0;
    __p = 0;
    std::vector<IBITdsCellInfoT>::__init_with_size[abi:ne180100]<IBITdsCellInfoT*,IBITdsCellInfoT*>(&__p, v30, (uint64_t)v30 + 28 * (v61 / 0x1C), v61 / 0x1C);
    AriSdk::TlvArray<IBITdsCellInfoT,1ul>::operator=((uint64_t)this + 368, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v30, 0x1000C8053384F6BLL);
  }
  LOBYTE(__p) = 0;
  v31 = (_BYTE *)operator new();
  *v31 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 29, v31, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v31, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 49, v31);
    MEMORY[0x212BB9B60](v31, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v32 = (_DWORD *)operator new();
  *v32 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 30, v32, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v32, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 50, v32);
    MEMORY[0x212BB9B60](v32, 0x1000C4052888210);
  }
  v62 = 0;
  v61 = 0xAAAAAAAAAAAAAAAALL;
  v33 = (_OWORD *)operator new[]();
  *v33 = 0u;
  v33[1] = 0u;
  v33[2] = 0u;
  v33[3] = 0u;
  v33[4] = 0u;
  v33[5] = 0u;
  v33[6] = 0u;
  v33[7] = 0u;
  v33[8] = 0u;
  v33[9] = 0u;
  v33[10] = 0u;
  v33[11] = 0u;
  v33[12] = 0u;
  v33[13] = 0u;
  v33[14] = 0u;
  v33[15] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 31, v33, 256, &v62, &v61);
  if ((_DWORD)v3 || !v62)
  {
    MEMORY[0x212BB9B48](v33, 0x1000C8000313F17);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v59 = 0;
    v60 = 0;
    __p = 0;
    std::vector<IBITdsNeighborCellInfoT>::__init_with_size[abi:ne180100]<IBITdsNeighborCellInfoT*,IBITdsNeighborCellInfoT*>(&__p, v33, (uint64_t)v33 + 8 * (v61 >> 3), v61 >> 3);
    AriSdk::TlvArray<IBITdsNeighborCellInfoT,32ul>::operator=((uint64_t)this + 408, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v33, 0x1000C8000313F17);
  }
  LOBYTE(__p) = 0;
  v34 = (_BYTE *)operator new();
  *v34 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 32, v34, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v34, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 54, v34);
    MEMORY[0x212BB9B60](v34, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v35 = (_DWORD *)operator new();
  *v35 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 33, v35, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v35, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 55, v35);
    MEMORY[0x212BB9B60](v35, 0x1000C4052888210);
  }
  v62 = 0;
  v61 = 0xAAAAAAAAAAAAAAAALL;
  v36 = (_OWORD *)operator new[]();
  *v36 = 0u;
  v36[1] = 0u;
  v36[2] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 34, v36, 48, &v62, &v61);
  if ((_DWORD)v3 || !v62)
  {
    MEMORY[0x212BB9B48](v36, 0x1000C803DD497D7);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v59 = 0;
    v60 = 0;
    __p = 0;
    std::vector<IBINetCdma1xCellInfo>::__init_with_size[abi:ne180100]<IBINetCdma1xCellInfo*,IBINetCdma1xCellInfo*>(&__p, v36, (uint64_t)&v36[3 * (v61 / 0x30)], v61 / 0x30);
    AriSdk::TlvArray<IBINetCdma1xCellInfo,1ul>::operator=((uint64_t)this + 448, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v36, 0x1000C803DD497D7);
  }
  LOBYTE(__p) = 0;
  v37 = (_BYTE *)operator new();
  *v37 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 35, v37, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v37, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 59, v37);
    MEMORY[0x212BB9B60](v37, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v38 = (_DWORD *)operator new();
  *v38 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 36, v38, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v38, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 60, v38);
    MEMORY[0x212BB9B60](v38, 0x1000C4052888210);
  }
  v62 = 0;
  v61 = 0xAAAAAAAAAAAAAAAALL;
  v39 = (_OWORD *)operator new[]();
  *v39 = 0u;
  v39[1] = 0u;
  v39[2] = 0u;
  *((_DWORD *)v39 + 12) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 37, v39, 52, &v62, &v61);
  if ((_DWORD)v3 || !v62)
  {
    MEMORY[0x212BB9B48](v39, 0x1000C8043B73165);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v59 = 0;
    v60 = 0;
    __p = 0;
    std::vector<IBINetCdmaEvdoCellInfo>::__init_with_size[abi:ne180100]<IBINetCdmaEvdoCellInfo*,IBINetCdmaEvdoCellInfo*>(&__p, v39, (uint64_t)v39 + 52 * (v61 / 0x34), v61 / 0x34);
    AriSdk::TlvArray<IBINetCdmaEvdoCellInfo,1ul>::operator=((uint64_t)this + 488, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v39, 0x1000C8043B73165);
  }
  LOBYTE(__p) = 0;
  v40 = (_BYTE *)operator new();
  *v40 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 38, v40, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v40, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 64, v40);
    MEMORY[0x212BB9B60](v40, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v41 = (_DWORD *)operator new();
  *v41 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 39, v41, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v41, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 65, v41);
    MEMORY[0x212BB9B60](v41, 0x1000C4052888210);
  }
  v62 = 0;
  v61 = 0xAAAAAAAAAAAAAAAALL;
  v42 = (_OWORD *)operator new[]();
  *v42 = 0u;
  v42[1] = 0u;
  v42[2] = 0u;
  v42[3] = 0u;
  v42[4] = 0u;
  v42[5] = 0u;
  v42[6] = 0u;
  v42[7] = 0u;
  v42[8] = 0u;
  v42[9] = 0u;
  v42[10] = 0u;
  v42[11] = 0u;
  v42[12] = 0u;
  v42[13] = 0u;
  v42[14] = 0u;
  v42[15] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 40, v42, 256, &v62, &v61);
  if ((_DWORD)v3 || !v62)
  {
    MEMORY[0x212BB9B48](v42, 0x1000C805D3D83E9);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v59 = 0;
    v60 = 0;
    __p = 0;
    std::vector<IBICdma1xNeighborCellInfo>::__init_with_size[abi:ne180100]<IBICdma1xNeighborCellInfo*,IBICdma1xNeighborCellInfo*>(&__p, v42, (uint64_t)v42 + 8 * (v61 >> 3), v61 >> 3);
    AriSdk::TlvArray<IBICdma1xNeighborCellInfo,32ul>::operator=((uint64_t)this + 528, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v42, 0x1000C805D3D83E9);
  }
  LOBYTE(__p) = 0;
  v43 = (_BYTE *)operator new();
  *v43 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 41, v43, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v43, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 69, v43);
    MEMORY[0x212BB9B60](v43, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v44 = (_DWORD *)operator new();
  *v44 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 48, v44, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v44, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 70, v44);
    MEMORY[0x212BB9B60](v44, 0x1000C4052888210);
  }
  v62 = 0;
  v61 = 0xAAAAAAAAAAAAAAAALL;
  v45 = (_OWORD *)operator new[]();
  *v45 = 0u;
  v45[1] = 0u;
  v45[2] = 0u;
  v45[3] = 0u;
  v45[4] = 0u;
  v45[5] = 0u;
  v45[6] = 0u;
  v45[7] = 0u;
  v45[8] = 0u;
  v45[9] = 0u;
  v45[10] = 0u;
  v45[11] = 0u;
  v45[12] = 0u;
  v45[13] = 0u;
  v45[14] = 0u;
  v45[15] = 0u;
  v45[16] = 0u;
  v45[17] = 0u;
  v45[18] = 0u;
  v45[19] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 49, v45, 320, &v62, &v61);
  if ((_DWORD)v3 || !v62)
  {
    MEMORY[0x212BB9B48](v45, 0x1000C808AB07045);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v59 = 0;
    v60 = 0;
    __p = 0;
    std::vector<IBICdmaEvdoNeighborCellInfo>::__init_with_size[abi:ne180100]<IBICdmaEvdoNeighborCellInfo*,IBICdmaEvdoNeighborCellInfo*>(&__p, v45, (uint64_t)v45 + 10 * (v61 / 0xA), v61 / 0xA);
    AriSdk::TlvArray<IBICdmaEvdoNeighborCellInfo,32ul>::operator=((uint64_t)this + 568, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v45, 0x1000C808AB07045);
  }
  v62 = 0;
  v61 = 0xAAAAAAAAAAAAAAAALL;
  v46 = (_OWORD *)operator new[]();
  *v46 = 0u;
  v46[1] = 0u;
  *((_DWORD *)v46 + 8) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 50, v46, 36, &v62, &v61);
  if ((_DWORD)v3 || !v62)
  {
    MEMORY[0x212BB9B48](v46, 0x1000C80240F695FLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v59 = 0;
    v60 = 0;
    __p = 0;
    std::vector<IBILteCellInfoV1T>::__init_with_size[abi:ne180100]<IBILteCellInfoV1T*,IBILteCellInfoV1T*>(&__p, v46, (uint64_t)v46 + 36 * (v61 / 0x24), v61 / 0x24);
    AriSdk::TlvArray<IBILteCellInfoV1T,1ul>::operator=((uint64_t)this + 592, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v46, 0x1000C80240F695FLL);
  }
  v62 = 0;
  v61 = 0xAAAAAAAAAAAAAAAALL;
  v47 = (_OWORD *)operator new[]();
  *v47 = 0u;
  v47[1] = 0u;
  v47[2] = 0u;
  v47[3] = 0u;
  v47[4] = 0u;
  v47[5] = 0u;
  v47[6] = 0u;
  v47[7] = 0u;
  v47[8] = 0u;
  v47[9] = 0u;
  v47[10] = 0u;
  v47[11] = 0u;
  v47[12] = 0u;
  v47[13] = 0u;
  v47[14] = 0u;
  v47[15] = 0u;
  v47[16] = 0u;
  v47[17] = 0u;
  v47[18] = 0u;
  v47[19] = 0u;
  v47[20] = 0u;
  v47[21] = 0u;
  v47[22] = 0u;
  v47[23] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 51, v47, 384, &v62, &v61);
  if ((_DWORD)v3 || !v62)
  {
    MEMORY[0x212BB9B48](v47, 0x1000C80CBA68D63);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v59 = 0;
    v60 = 0;
    __p = 0;
    std::vector<IBILteNeighborCellInfoV1T>::__init_with_size[abi:ne180100]<IBILteNeighborCellInfoV1T*,IBILteNeighborCellInfoV1T*>(&__p, v47, (uint64_t)v47 + 12 * (v61 / 0xC), v61 / 0xC);
    AriSdk::TlvArray<IBILteNeighborCellInfoV1T,32ul>::operator=((uint64_t)this + 616, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v47, 0x1000C80CBA68D63);
  }
  v62 = 0;
  v61 = 0xAAAAAAAAAAAAAAAALL;
  v48 = (_OWORD *)operator new[]();
  *v48 = 0u;
  v48[1] = 0u;
  *((_DWORD *)v48 + 8) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 52, v48, 36, &v62, &v61);
  if ((_DWORD)v3 || !v62)
  {
    MEMORY[0x212BB9B48](v48, 0x1000C804B291A13);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v59 = 0;
    v60 = 0;
    __p = 0;
    std::vector<IBILteCellInfoR15>::__init_with_size[abi:ne180100]<IBILteCellInfoR15*,IBILteCellInfoR15*>(&__p, v48, (uint64_t)v48 + 36 * (v61 / 0x24), v61 / 0x24);
    AriSdk::TlvArray<IBILteCellInfoR15,1ul>::operator=((uint64_t)this + 640, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v48, 0x1000C804B291A13);
  }
  LOBYTE(__p) = 0;
  v49 = (_DWORD *)operator new();
  *v49 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 53, v49, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v49, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 83, v49);
    MEMORY[0x212BB9B60](v49, 0x1000C4052888210);
  }
  v62 = 0;
  v61 = 0xAAAAAAAAAAAAAAAALL;
  v50 = (_OWORD *)operator new[]();
  *v50 = 0u;
  v50[1] = 0u;
  v50[2] = 0u;
  v50[3] = 0u;
  v50[4] = 0u;
  v50[5] = 0u;
  *((_QWORD *)v50 + 12) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 54, v50, 104, &v62, &v61);
  if ((_DWORD)v3 || !v62)
  {
    MEMORY[0x212BB9B48](v50, 0x1000C80D9E6B487);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v59 = 0;
    v60 = 0;
    __p = 0;
    std::vector<IBINrCellInfoT>::__init_with_size[abi:ne180100]<IBINrCellInfoT*,IBINrCellInfoT*>(&__p, v50, (uint64_t)v50 + 52 * (v61 / 0x34), v61 / 0x34);
    AriSdk::TlvArray<IBINrCellInfoT,2ul>::operator=((uint64_t)this + 672, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v50, 0x1000C80D9E6B487);
  }
  LOBYTE(__p) = 0;
  v51 = (_DWORD *)operator new();
  *v51 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 55, v51, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v51, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 87, v51);
    MEMORY[0x212BB9B60](v51, 0x1000C4052888210);
  }
  v62 = 0;
  v61 = 0xAAAAAAAAAAAAAAAALL;
  v52 = (void *)operator new[]();
  bzero(v52, 0x300uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 56, v52, 768, &v62, &v61);
  if ((_DWORD)v3 || !v62)
  {
    MEMORY[0x212BB9B48](v52, 0x1000C80E0DB01C6);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v59 = 0;
    v60 = 0;
    __p = 0;
    std::vector<IBINrNeighborCellInfoT>::__init_with_size[abi:ne180100]<IBINrNeighborCellInfoT*,IBINrNeighborCellInfoT*>(&__p, v52, (uint64_t)v52 + 24 * (v61 / 0x18), v61 / 0x18);
    AriSdk::TlvArray<IBINrNeighborCellInfoT,32ul>::operator=((uint64_t)this + 704, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v52, 0x1000C80E0DB01C6);
  }
  v62 = 0;
  v61 = 0xAAAAAAAAAAAAAAAALL;
  v53 = (_OWORD *)operator new[]();
  *v53 = 0u;
  v53[1] = 0u;
  v53[2] = 0u;
  *((_DWORD *)v53 + 12) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 57, v53, 52, &v62, &v61);
  if ((_DWORD)v3 || !v62)
  {
    MEMORY[0x212BB9B48](v53, 0x1000C80952E2C4ALL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v59 = 0;
    v60 = 0;
    __p = 0;
    std::vector<IBILteCellInfoR15_V2>::__init_with_size[abi:ne180100]<IBILteCellInfoR15_V2*,IBILteCellInfoR15_V2*>(&__p, v53, (uint64_t)v53 + 52 * (v61 / 0x34), v61 / 0x34);
    AriSdk::TlvArray<IBILteCellInfoR15_V2,1ul>::operator=((uint64_t)this + 728, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v53, 0x1000C80952E2C4ALL);
  }
  v62 = 0;
  v61 = 0xAAAAAAAAAAAAAAAALL;
  v54 = (void *)operator new[]();
  bzero(v54, 0x300uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 58, v54, 768, &v62, &v61);
  if ((_DWORD)v3 || !v62)
  {
    MEMORY[0x212BB9B48](v54, 0x1000C80977131E8);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v59 = 0;
    v60 = 0;
    __p = 0;
    std::vector<IBILteNeighborCellInfoV2T>::__init_with_size[abi:ne180100]<IBILteNeighborCellInfoV2T*,IBILteNeighborCellInfoV2T*>(&__p, v54, (uint64_t)v54 + 24 * (v61 / 0x18), v61 / 0x18);
    AriSdk::TlvArray<IBILteNeighborCellInfoV2T,32ul>::operator=((uint64_t)this + 752, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v54, 0x1000C80977131E8);
  }
  v62 = 0;
  v61 = 0xAAAAAAAAAAAAAAAALL;
  v55 = (_OWORD *)operator new[]();
  *v55 = 0u;
  v55[1] = 0u;
  v55[2] = 0u;
  v55[3] = 0u;
  v55[4] = 0u;
  v55[5] = 0u;
  v55[6] = 0u;
  *((_QWORD *)v55 + 14) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 59, v55, 120, &v62, &v61);
  if ((_DWORD)v3 || !v62)
  {
    MEMORY[0x212BB9B48](v55, 0x1000C800CD45A9DLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v59 = 0;
    v60 = 0;
    __p = 0;
    std::vector<IBINrCellInfoT_V2>::__init_with_size[abi:ne180100]<IBINrCellInfoT_V2*,IBINrCellInfoT_V2*>(&__p, v55, (uint64_t)v55 + 60 * (v61 / 0x3C), v61 / 0x3C);
    AriSdk::TlvArray<IBINrCellInfoT_V2,2ul>::operator=((uint64_t)this + 776, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v55, 0x1000C800CD45A9DLL);
  }
  v62 = 0;
  v61 = 0xAAAAAAAAAAAAAAAALL;
  v56 = (void *)operator new[]();
  bzero(v56, 0x400uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 60, v56, 1024, &v62, &v61);
  if (!(_DWORD)v3 && v62)
  {
    v59 = 0;
    v60 = 0;
    __p = 0;
    std::vector<IBINrNeighborCellInfoT_V2>::__init_with_size[abi:ne180100]<IBINrNeighborCellInfoT_V2*,IBINrNeighborCellInfoT_V2*>(&__p, v56, (uint64_t)v56 + 32 * (v61 >> 5), v61 >> 5);
    AriSdk::TlvArray<IBINrNeighborCellInfoT_V2,32ul>::operator=((uint64_t)this + 800, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
  }
  MEMORY[0x212BB9B48](v56, 0x1000C80B4E26277);
  return v3;
}

void sub_20E28DC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  uint64_t v10;

  if (__p)
    operator delete(__p);
  MEMORY[0x212BB9B48](v10, 0x1000C80B4E26277);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetGetCellInfoRespCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetGetCellInfoRespCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 620986368;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetGetCellInfoReqV1_SDK::ARI_IBINetGetCellInfoReqV1_SDK(AriSdk::ARI_IBINetGetCellInfoReqV1_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x24848000u, 0);
  *(_QWORD *)result = &off_24C911D10;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x24848000u, 0);
  *(_QWORD *)result = &off_24C911D10;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetGetCellInfoReqV1_SDK::ARI_IBINetGetCellInfoReqV1_SDK(AriSdk::ARI_IBINetGetCellInfoReqV1_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911D10;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911D10;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBINetGetCellInfoReqV1_SDK::~ARI_IBINetGetCellInfoReqV1_SDK(AriSdk::ARI_IBINetGetCellInfoReqV1_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C911D10;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetGetCellInfoReqV1_SDK::~ARI_IBINetGetCellInfoReqV1_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetGetCellInfoReqV1_SDK::pack(AriSdk::ARI_IBINetGetCellInfoReqV1_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetGetCellInfoReqV1_SDK::unpack(AriSdk::ARI_IBINetGetCellInfoReqV1_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E28E308(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetGetCellInfoReqV1_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetGetCellInfoReqV1_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 612663296;
}

double AriSdk::ARI_IBINetGetCellInfoRespCbV1_SDK::ARI_IBINetGetCellInfoRespCbV1_SDK(AriSdk::ARI_IBINetGetCellInfoRespCbV1_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x25048000u, 0);
  *(_QWORD *)v1 = &off_24C911D48;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  *((_OWORD *)v1 + 11) = 0u;
  *((_OWORD *)v1 + 12) = 0u;
  *((_OWORD *)v1 + 13) = 0u;
  *((_OWORD *)v1 + 14) = 0u;
  *((_OWORD *)v1 + 15) = 0u;
  *((_OWORD *)v1 + 16) = 0u;
  *((_OWORD *)v1 + 17) = 0u;
  *((_OWORD *)v1 + 18) = 0u;
  *((_OWORD *)v1 + 19) = 0u;
  *((_OWORD *)v1 + 20) = 0u;
  *((_OWORD *)v1 + 21) = 0u;
  *((_OWORD *)v1 + 22) = 0u;
  *((_OWORD *)v1 + 23) = 0u;
  *((_OWORD *)v1 + 24) = 0u;
  *((_OWORD *)v1 + 25) = 0u;
  *((_OWORD *)v1 + 26) = 0u;
  *((_QWORD *)v1 + 54) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x25048000u, 0);
  *(_QWORD *)v1 = &off_24C911D48;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  *((_OWORD *)v1 + 11) = 0u;
  *((_OWORD *)v1 + 12) = 0u;
  *((_OWORD *)v1 + 13) = 0u;
  *((_OWORD *)v1 + 14) = 0u;
  *((_OWORD *)v1 + 15) = 0u;
  *((_OWORD *)v1 + 16) = 0u;
  *((_OWORD *)v1 + 17) = 0u;
  *((_OWORD *)v1 + 18) = 0u;
  *((_OWORD *)v1 + 19) = 0u;
  *((_OWORD *)v1 + 20) = 0u;
  *((_OWORD *)v1 + 21) = 0u;
  *((_OWORD *)v1 + 22) = 0u;
  *((_OWORD *)v1 + 23) = 0u;
  *((_OWORD *)v1 + 24) = 0u;
  *((_OWORD *)v1 + 25) = 0u;
  *((_OWORD *)v1 + 26) = 0u;
  *((_QWORD *)v1 + 54) = 0;
  return result;
}

double AriSdk::ARI_IBINetGetCellInfoRespCbV1_SDK::ARI_IBINetGetCellInfoRespCbV1_SDK(AriSdk::ARI_IBINetGetCellInfoRespCbV1_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C911D48;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 13) = 0u;
  *((_OWORD *)v3 + 14) = 0u;
  *((_OWORD *)v3 + 15) = 0u;
  *((_OWORD *)v3 + 16) = 0u;
  *((_OWORD *)v3 + 17) = 0u;
  *((_OWORD *)v3 + 18) = 0u;
  *((_OWORD *)v3 + 19) = 0u;
  *((_OWORD *)v3 + 20) = 0u;
  *((_OWORD *)v3 + 21) = 0u;
  *((_OWORD *)v3 + 22) = 0u;
  *((_OWORD *)v3 + 23) = 0u;
  *((_OWORD *)v3 + 24) = 0u;
  *((_OWORD *)v3 + 25) = 0u;
  *((_OWORD *)v3 + 26) = 0u;
  *((_QWORD *)v3 + 54) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C911D48;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 13) = 0u;
  *((_OWORD *)v3 + 14) = 0u;
  *((_OWORD *)v3 + 15) = 0u;
  *((_OWORD *)v3 + 16) = 0u;
  *((_OWORD *)v3 + 17) = 0u;
  *((_OWORD *)v3 + 18) = 0u;
  *((_OWORD *)v3 + 19) = 0u;
  *((_OWORD *)v3 + 20) = 0u;
  *((_OWORD *)v3 + 21) = 0u;
  *((_OWORD *)v3 + 22) = 0u;
  *((_OWORD *)v3 + 23) = 0u;
  *((_OWORD *)v3 + 24) = 0u;
  *((_OWORD *)v3 + 25) = 0u;
  *((_OWORD *)v3 + 26) = 0u;
  *((_QWORD *)v3 + 54) = 0;
  return result;
}

void AriSdk::ARI_IBINetGetCellInfoRespCbV1_SDK::~ARI_IBINetGetCellInfoRespCbV1_SDK(AriSdk::ARI_IBINetGetCellInfoRespCbV1_SDK *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)this = &off_24C911D48;
  v2 = (void *)*((_QWORD *)this + 52);
  if (v2)
  {
    *((_QWORD *)this + 53) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 49);
  if (v3)
  {
    *((_QWORD *)this + 50) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 46);
  if (v4)
  {
    *((_QWORD *)this + 47) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 43);
  if (v5)
  {
    *((_QWORD *)this + 44) = v5;
    operator delete(v5);
  }
  v6 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  v7 = (void *)*((_QWORD *)this + 39);
  if (v7)
  {
    *((_QWORD *)this + 40) = v7;
    operator delete(v7);
  }
  v8 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v8)
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  v9 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v9)
    MEMORY[0x212BB9B60](v9, 0x1000C4043B73165);
  v10 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v10)
    MEMORY[0x212BB9B60](v10, 0x1000C403DD497D7);
  v11 = (void *)*((_QWORD *)this + 33);
  if (v11)
  {
    *((_QWORD *)this + 34) = v11;
    operator delete(v11);
  }
  v12 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v12)
    MEMORY[0x212BB9B60](v12, 0x1000C4052888210);
  v13 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v13)
    MEMORY[0x212BB9B60](v13, 0x1000C4053384F6BLL);
  v14 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v14)
    MEMORY[0x212BB9B60](v14, 0x1000C4052888210);
  v15 = (void *)*((_QWORD *)this + 27);
  if (v15)
  {
    *((_QWORD *)this + 28) = v15;
    operator delete(v15);
  }
  v16 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v16)
    MEMORY[0x212BB9B60](v16, 0x1000C4052888210);
  v17 = (void *)*((_QWORD *)this + 23);
  if (v17)
  {
    *((_QWORD *)this + 24) = v17;
    operator delete(v17);
  }
  v18 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v18)
    MEMORY[0x212BB9B60](v18, 0x1000C4052888210);
  v19 = (void *)*((_QWORD *)this + 19);
  if (v19)
  {
    *((_QWORD *)this + 20) = v19;
    operator delete(v19);
  }
  v20 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v20)
    MEMORY[0x212BB9B60](v20, 0x1000C4052888210);
  v21 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v21)
    MEMORY[0x212BB9B60](v21, 0x1000C4011F4EB07);
  v22 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v22)
    MEMORY[0x212BB9B60](v22, 0x1000C4052888210);
  v23 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v23)
    MEMORY[0x212BB9B60](v23, 0x1000C400618A0D7);
  v24 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v24)
    MEMORY[0x212BB9B60](v24, 0x1000C4052888210);
  v25 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v25)
    MEMORY[0x212BB9B60](v25, 0x1000C4053384F6BLL);
  v26 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v26)
    MEMORY[0x212BB9B60](v26, 0x1000C4052888210);
  v27 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v27)
    MEMORY[0x212BB9B60](v27, 0x1000C4052888210);
  v28 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v28)
    MEMORY[0x212BB9B60](v28, 0x1000C4077774924);
  v29 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v29)
    MEMORY[0x212BB9B60](v29, 0x1000C4000313F17);
  v30 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v30)
    MEMORY[0x212BB9B60](v30, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetGetCellInfoRespCbV1_SDK::~ARI_IBINetGetCellInfoRespCbV1_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetGetCellInfoRespCbV1_SDK::pack(AriSdk::ARI_IBINetGetCellInfoRespCbV1_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  _BYTE *v16;
  _BYTE *v17;
  const void *v18;
  _BYTE *v19;
  _BYTE *v20;
  const void *v21;
  _BYTE *v22;
  _BYTE *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  _BYTE *v27;
  _BYTE *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  _BYTE *v32;
  _BYTE *v33;
  const void *v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  _BYTE *v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 8uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 1uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v8, 4uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v9, 4uLL, 0), !(_DWORD)result))
          {
            v10 = (const void *)*((_QWORD *)this + 13);
            if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 7, v10, 0x1CuLL, 0), !(_DWORD)result))
            {
              v11 = (const void *)*((_QWORD *)this + 14);
              if (!v11 || (result = AriMsg::pack(*((AriMsg **)this + 6), 8, v11, 4uLL, 0), !(_DWORD)result))
              {
                v12 = (const void *)*((_QWORD *)this + 15);
                if (!v12 || (result = AriMsg::pack(*((AriMsg **)this + 6), 9, v12, 0x18uLL, 0), !(_DWORD)result))
                {
                  v13 = (const void *)*((_QWORD *)this + 16);
                  if (!v13 || (result = AriMsg::pack(*((AriMsg **)this + 6), 10, v13, 4uLL, 0), !(_DWORD)result))
                  {
                    v14 = (const void *)*((_QWORD *)this + 17);
                    if (!v14 || (result = AriMsg::pack(*((AriMsg **)this + 6), 11, v14, 0x20uLL, 0), !(_DWORD)result))
                    {
                      v15 = (const void *)*((_QWORD *)this + 18);
                      if (!v15 || (result = AriMsg::pack(*((AriMsg **)this + 6), 12, v15, 4uLL, 0), !(_DWORD)result))
                      {
                        v16 = (_BYTE *)*((_QWORD *)this + 19);
                        if (!v16
                          || (v17 = (_BYTE *)*((_QWORD *)this + 20), v16 == v17)
                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 13, v16, v17 - v16, 0), !(_DWORD)result))
                        {
                          v18 = (const void *)*((_QWORD *)this + 22);
                          if (!v18
                            || (result = AriMsg::pack(*((AriMsg **)this + 6), 14, v18, 4uLL, 0), !(_DWORD)result))
                          {
                            v19 = (_BYTE *)*((_QWORD *)this + 23);
                            if (!v19
                              || (v20 = (_BYTE *)*((_QWORD *)this + 24), v19 == v20)
                              || (result = AriMsg::pack(*((AriMsg **)this + 6), 15, v19, v20 - v19, 0), !(_DWORD)result))
                            {
                              v21 = (const void *)*((_QWORD *)this + 26);
                              if (!v21
                                || (result = AriMsg::pack(*((AriMsg **)this + 6), 16, v21, 4uLL, 0), !(_DWORD)result))
                              {
                                v22 = (_BYTE *)*((_QWORD *)this + 27);
                                if (!v22
                                  || (v23 = (_BYTE *)*((_QWORD *)this + 28), v22 == v23)
                                  || (result = AriMsg::pack(*((AriMsg **)this + 6), 17, v22, v23 - v22, 0),
                                      !(_DWORD)result))
                                {
                                  v24 = (const void *)*((_QWORD *)this + 30);
                                  if (!v24
                                    || (result = AriMsg::pack(*((AriMsg **)this + 6), 18, v24, 4uLL, 0),
                                        !(_DWORD)result))
                                  {
                                    v25 = (const void *)*((_QWORD *)this + 31);
                                    if (!v25
                                      || (result = AriMsg::pack(*((AriMsg **)this + 6), 19, v25, 0x1CuLL, 0),
                                          !(_DWORD)result))
                                    {
                                      v26 = (const void *)*((_QWORD *)this + 32);
                                      if (!v26
                                        || (result = AriMsg::pack(*((AriMsg **)this + 6), 20, v26, 4uLL, 0),
                                            !(_DWORD)result))
                                      {
                                        v27 = (_BYTE *)*((_QWORD *)this + 33);
                                        if (!v27
                                          || (v28 = (_BYTE *)*((_QWORD *)this + 34), v27 == v28)
                                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 21, v27, v28 - v27, 0),
                                              !(_DWORD)result))
                                        {
                                          v29 = (const void *)*((_QWORD *)this + 36);
                                          if (!v29
                                            || (result = AriMsg::pack(*((AriMsg **)this + 6), 22, v29, 0x30uLL, 0),
                                                !(_DWORD)result))
                                          {
                                            v30 = (const void *)*((_QWORD *)this + 37);
                                            if (!v30
                                              || (result = AriMsg::pack(*((AriMsg **)this + 6), 23, v30, 0x34uLL, 0),
                                                  !(_DWORD)result))
                                            {
                                              v31 = (const void *)*((_QWORD *)this + 38);
                                              if (!v31
                                                || (result = AriMsg::pack(*((AriMsg **)this + 6), 24, v31, 4uLL, 0),
                                                    !(_DWORD)result))
                                              {
                                                v32 = (_BYTE *)*((_QWORD *)this + 39);
                                                if (!v32
                                                  || (v33 = (_BYTE *)*((_QWORD *)this + 40), v32 == v33)
                                                  || (result = AriMsg::pack(*((AriMsg **)this + 6), 25, v32, v33 - v32, 0), !(_DWORD)result))
                                                {
                                                  v34 = (const void *)*((_QWORD *)this + 42);
                                                  if (!v34
                                                    || (result = AriMsg::pack(*((AriMsg **)this + 6), 26, v34, 4uLL, 0), !(_DWORD)result))
                                                  {
                                                    v35 = (_BYTE *)*((_QWORD *)this + 43);
                                                    if (!v35
                                                      || (v36 = (_BYTE *)*((_QWORD *)this + 44), v35 == v36)
                                                      || (result = AriMsg::pack(*((AriMsg **)this + 6), 27, v35, v36 - v35, 0), !(_DWORD)result))
                                                    {
                                                      v37 = (_BYTE *)*((_QWORD *)this + 46);
                                                      if (!v37
                                                        || (v38 = (_BYTE *)*((_QWORD *)this + 47), v37 == v38)
                                                        || (result = AriMsg::pack(*((AriMsg **)this + 6), 28, v37, v38 - v37, 0), !(_DWORD)result))
                                                      {
                                                        v39 = (_BYTE *)*((_QWORD *)this + 49);
                                                        if (!v39
                                                          || (v40 = (_BYTE *)*((_QWORD *)this + 50), v39 == v40)
                                                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 29, v39, v40 - v39, 0), !(_DWORD)result))
                                                        {
                                                          v41 = (_BYTE *)*((_QWORD *)this + 52);
                                                          if (!v41
                                                            || (v42 = (_BYTE *)*((_QWORD *)this + 53), v41 == v42)
                                                            || (result = AriMsg::pack(*((AriMsg **)this + 6), 30, v41, v42 - v41, 0), !(_DWORD)result))
                                                          {
                                                            result = 0;
                                                            *a2 = (AriMsg *)*((_QWORD *)this + 6);
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetGetCellInfoRespCbV1_SDK::unpack(AriSdk::ARI_IBINetGetCellInfoRespCbV1_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _QWORD *v5;
  _BYTE *v6;
  _DWORD *v7;
  _DWORD *v8;
  _QWORD *v9;
  _DWORD *v10;
  _QWORD *v11;
  _DWORD *v12;
  _OWORD *v13;
  _DWORD *v14;
  _OWORD *v15;
  _DWORD *v16;
  _OWORD *v17;
  _DWORD *v18;
  _OWORD *v19;
  _DWORD *v20;
  _QWORD *v21;
  _DWORD *v22;
  _OWORD *v23;
  _OWORD *v24;
  _OWORD *v25;
  _DWORD *v26;
  _OWORD *v27;
  _DWORD *v28;
  _OWORD *v29;
  _OWORD *v30;
  _OWORD *v31;
  void *v32;
  void *__p;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;

  LOBYTE(__p) = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = __p == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  LOBYTE(__p) = 0;
  v5 = (_QWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 8, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4000313F17);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<AriStatusTlv>::operator=<AriStatusTlv&,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4000313F17);
  }
  LOBYTE(__p) = 0;
  v6 = (_BYTE *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 1, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4077774924);
  }
  LOBYTE(__p) = 0;
  v7 = (_DWORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v7, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 11, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  }
  LOBYTE(__p) = 0;
  v8 = (_DWORD *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v8, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 12, v8);
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  }
  LOBYTE(__p) = 0;
  v9 = (_QWORD *)operator new();
  v9[1] = 0;
  v9[2] = 0;
  *v9 = 0;
  *((_DWORD *)v9 + 6) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 7, v9, 28, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v9, 0x1000C4053384F6BLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBIUmtsCellInfoT>::operator=<IBIUmtsCellInfoT&,void>((uint64_t *)this + 13, v9);
    MEMORY[0x212BB9B60](v9, 0x1000C4053384F6BLL);
  }
  LOBYTE(__p) = 0;
  v10 = (_DWORD *)operator new();
  *v10 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 8, v10, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v10, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 14, v10);
    MEMORY[0x212BB9B60](v10, 0x1000C4052888210);
  }
  LOBYTE(__p) = 0;
  v11 = (_QWORD *)operator new();
  v11[1] = 0;
  v11[2] = 0;
  *v11 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 9, v11, 24, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v11, 0x1000C400618A0D7);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBIGsmCellInfoT>::operator=<IBIGsmCellInfoT&,void>((uint64_t *)this + 15, (uint64_t)v11);
    MEMORY[0x212BB9B60](v11, 0x1000C400618A0D7);
  }
  LOBYTE(__p) = 0;
  v12 = (_DWORD *)operator new();
  *v12 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 10, v12, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v12, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 16, v12);
    MEMORY[0x212BB9B60](v12, 0x1000C4052888210);
  }
  LOBYTE(__p) = 0;
  v13 = (_OWORD *)operator new();
  *v13 = 0u;
  v13[1] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 11, v13, 32, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v13, 0x1000C4011F4EB07);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBILteCellInfoT>::operator=<IBILteCellInfoT&,void>((uint64_t *)this + 17, v13);
    MEMORY[0x212BB9B60](v13, 0x1000C4011F4EB07);
  }
  LOBYTE(__p) = 0;
  v14 = (_DWORD *)operator new();
  *v14 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 12, v14, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v14, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 18, v14);
    MEMORY[0x212BB9B60](v14, 0x1000C4052888210);
  }
  v38 = 0;
  v37 = 0xAAAAAAAAAAAAAAAALL;
  v15 = (_OWORD *)operator new[]();
  *v15 = 0u;
  v15[1] = 0u;
  v15[2] = 0u;
  v15[3] = 0u;
  v15[4] = 0u;
  v15[5] = 0u;
  v15[6] = 0u;
  v15[7] = 0u;
  v15[8] = 0u;
  v15[9] = 0u;
  v15[10] = 0u;
  v15[11] = 0u;
  v15[12] = 0u;
  v15[13] = 0u;
  v15[14] = 0u;
  v15[15] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 13, v15, 256, &v38, &v37);
  if ((_DWORD)v3 || !v38)
  {
    MEMORY[0x212BB9B48](v15, 0x1000C8000313F17);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v35 = 0;
    v36 = 0;
    __p = 0;
    std::vector<IBIUmtsNeighborCellInfoT>::__init_with_size[abi:ne180100]<IBIUmtsNeighborCellInfoT*,IBIUmtsNeighborCellInfoT*>(&__p, v15, (uint64_t)v15 + 8 * (v37 >> 3), v37 >> 3);
    AriSdk::TlvArray<IBIUmtsNeighborCellInfoT,32ul>::operator=((uint64_t)this + 152, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v15, 0x1000C8000313F17);
  }
  LOBYTE(__p) = 0;
  v16 = (_DWORD *)operator new();
  *v16 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 14, v16, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v16, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 22, v16);
    MEMORY[0x212BB9B60](v16, 0x1000C4052888210);
  }
  v38 = 0;
  v37 = 0xAAAAAAAAAAAAAAAALL;
  v17 = (_OWORD *)operator new[]();
  *v17 = 0u;
  v17[1] = 0u;
  v17[2] = 0u;
  v17[3] = 0u;
  v17[4] = 0u;
  v17[5] = 0u;
  v17[6] = 0u;
  v17[7] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 15, v17, 128, &v38, &v37);
  if ((_DWORD)v3 || !v38)
  {
    MEMORY[0x212BB9B48](v17, 0x1000C8052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v35 = 0;
    v36 = 0;
    __p = 0;
    std::vector<IBIGsmNeighborCellInfoT>::__init_with_size[abi:ne180100]<IBIGsmNeighborCellInfoT*,IBIGsmNeighborCellInfoT*>(&__p, v17, (uint64_t)v17 + 4 * (v37 >> 2), v37 >> 2);
    AriSdk::TlvArray<IBIGsmNeighborCellInfoT,32ul>::operator=((uint64_t)this + 184, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v17, 0x1000C8052888210);
  }
  LOBYTE(__p) = 0;
  v18 = (_DWORD *)operator new();
  *v18 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 16, v18, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v18, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 26, v18);
    MEMORY[0x212BB9B60](v18, 0x1000C4052888210);
  }
  v38 = 0;
  v37 = 0xAAAAAAAAAAAAAAAALL;
  v19 = (_OWORD *)operator new[]();
  *v19 = 0u;
  v19[1] = 0u;
  v19[2] = 0u;
  v19[3] = 0u;
  v19[4] = 0u;
  v19[5] = 0u;
  v19[6] = 0u;
  v19[7] = 0u;
  v19[8] = 0u;
  v19[9] = 0u;
  v19[10] = 0u;
  v19[11] = 0u;
  v19[12] = 0u;
  v19[13] = 0u;
  v19[14] = 0u;
  v19[15] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 17, v19, 256, &v38, &v37);
  if ((_DWORD)v3 || !v38)
  {
    MEMORY[0x212BB9B48](v19, 0x1000C8000313F17);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v35 = 0;
    v36 = 0;
    __p = 0;
    std::vector<IBILteNeighborCellInfoT>::__init_with_size[abi:ne180100]<IBILteNeighborCellInfoT*,IBILteNeighborCellInfoT*>(&__p, v19, (uint64_t)v19 + 8 * (v37 >> 3), v37 >> 3);
    AriSdk::TlvArray<IBILteNeighborCellInfoT,32ul>::operator=((uint64_t)this + 216, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v19, 0x1000C8000313F17);
  }
  LOBYTE(__p) = 0;
  v20 = (_DWORD *)operator new();
  *v20 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 18, v20, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v20, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 30, v20);
    MEMORY[0x212BB9B60](v20, 0x1000C4052888210);
  }
  LOBYTE(__p) = 0;
  v21 = (_QWORD *)operator new();
  v21[1] = 0;
  v21[2] = 0;
  *v21 = 0;
  *((_DWORD *)v21 + 6) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 19, v21, 28, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v21, 0x1000C4053384F6BLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBIUmtsCellInfoT>::operator=<IBIUmtsCellInfoT&,void>((uint64_t *)this + 31, v21);
    MEMORY[0x212BB9B60](v21, 0x1000C4053384F6BLL);
  }
  LOBYTE(__p) = 0;
  v22 = (_DWORD *)operator new();
  *v22 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 20, v22, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v22, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 32, v22);
    MEMORY[0x212BB9B60](v22, 0x1000C4052888210);
  }
  v38 = 0;
  v37 = 0xAAAAAAAAAAAAAAAALL;
  v23 = (_OWORD *)operator new[]();
  *v23 = 0u;
  v23[1] = 0u;
  v23[2] = 0u;
  v23[3] = 0u;
  v23[4] = 0u;
  v23[5] = 0u;
  v23[6] = 0u;
  v23[7] = 0u;
  v23[8] = 0u;
  v23[9] = 0u;
  v23[10] = 0u;
  v23[11] = 0u;
  v23[12] = 0u;
  v23[13] = 0u;
  v23[14] = 0u;
  v23[15] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 21, v23, 256, &v38, &v37);
  if ((_DWORD)v3 || !v38)
  {
    MEMORY[0x212BB9B48](v23, 0x1000C8000313F17);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v35 = 0;
    v36 = 0;
    __p = 0;
    std::vector<IBITdsNeighborCellInfoT>::__init_with_size[abi:ne180100]<IBITdsNeighborCellInfoT*,IBITdsNeighborCellInfoT*>(&__p, v23, (uint64_t)v23 + 8 * (v37 >> 3), v37 >> 3);
    AriSdk::TlvArray<IBITdsNeighborCellInfoT,32ul>::operator=((uint64_t)this + 264, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v23, 0x1000C8000313F17);
  }
  LOBYTE(__p) = 0;
  v24 = (_OWORD *)operator new();
  *v24 = 0u;
  v24[1] = 0u;
  v24[2] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 22, v24, 48, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v24, 0x1000C403DD497D7);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBINetCdma1xCellInfo>::operator=<IBINetCdma1xCellInfo&,void>((uint64_t *)this + 36, v24);
    MEMORY[0x212BB9B60](v24, 0x1000C403DD497D7);
  }
  LOBYTE(__p) = 0;
  v25 = (_OWORD *)operator new();
  *v25 = 0u;
  v25[1] = 0u;
  v25[2] = 0u;
  *((_DWORD *)v25 + 12) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 23, v25, 52, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v25, 0x1000C4043B73165);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBINetCdmaEvdoCellInfo>::operator=<IBINetCdmaEvdoCellInfo&,void>((uint64_t *)this + 37, (uint64_t)v25);
    MEMORY[0x212BB9B60](v25, 0x1000C4043B73165);
  }
  LOBYTE(__p) = 0;
  v26 = (_DWORD *)operator new();
  *v26 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 24, v26, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v26, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 38, v26);
    MEMORY[0x212BB9B60](v26, 0x1000C4052888210);
  }
  v38 = 0;
  v37 = 0xAAAAAAAAAAAAAAAALL;
  v27 = (_OWORD *)operator new[]();
  *v27 = 0u;
  v27[1] = 0u;
  v27[2] = 0u;
  v27[3] = 0u;
  v27[4] = 0u;
  v27[5] = 0u;
  v27[6] = 0u;
  v27[7] = 0u;
  v27[8] = 0u;
  v27[9] = 0u;
  v27[10] = 0u;
  v27[11] = 0u;
  v27[12] = 0u;
  v27[13] = 0u;
  v27[14] = 0u;
  v27[15] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 25, v27, 256, &v38, &v37);
  if ((_DWORD)v3 || !v38)
  {
    MEMORY[0x212BB9B48](v27, 0x1000C805D3D83E9);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v35 = 0;
    v36 = 0;
    __p = 0;
    std::vector<IBICdma1xNeighborCellInfo>::__init_with_size[abi:ne180100]<IBICdma1xNeighborCellInfo*,IBICdma1xNeighborCellInfo*>(&__p, v27, (uint64_t)v27 + 8 * (v37 >> 3), v37 >> 3);
    AriSdk::TlvArray<IBICdma1xNeighborCellInfo,32ul>::operator=((uint64_t)this + 312, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v27, 0x1000C805D3D83E9);
  }
  LOBYTE(__p) = 0;
  v28 = (_DWORD *)operator new();
  *v28 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 26, v28, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !(_BYTE)__p)
  {
    MEMORY[0x212BB9B60](v28, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 42, v28);
    MEMORY[0x212BB9B60](v28, 0x1000C4052888210);
  }
  v38 = 0;
  v37 = 0xAAAAAAAAAAAAAAAALL;
  v29 = (_OWORD *)operator new[]();
  *v29 = 0u;
  v29[1] = 0u;
  v29[2] = 0u;
  v29[3] = 0u;
  v29[4] = 0u;
  v29[5] = 0u;
  v29[6] = 0u;
  v29[7] = 0u;
  v29[8] = 0u;
  v29[9] = 0u;
  v29[10] = 0u;
  v29[11] = 0u;
  v29[12] = 0u;
  v29[13] = 0u;
  v29[14] = 0u;
  v29[15] = 0u;
  v29[16] = 0u;
  v29[17] = 0u;
  v29[18] = 0u;
  v29[19] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 27, v29, 320, &v38, &v37);
  if ((_DWORD)v3 || !v38)
  {
    MEMORY[0x212BB9B48](v29, 0x1000C808AB07045);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v35 = 0;
    v36 = 0;
    __p = 0;
    std::vector<IBICdmaEvdoNeighborCellInfo>::__init_with_size[abi:ne180100]<IBICdmaEvdoNeighborCellInfo*,IBICdmaEvdoNeighborCellInfo*>(&__p, v29, (uint64_t)v29 + 10 * (v37 / 0xA), v37 / 0xA);
    AriSdk::TlvArray<IBICdmaEvdoNeighborCellInfo,32ul>::operator=((uint64_t)this + 344, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v29, 0x1000C808AB07045);
  }
  v38 = 0;
  v37 = 0xAAAAAAAAAAAAAAAALL;
  v30 = (_OWORD *)operator new[]();
  *v30 = 0u;
  v30[1] = 0u;
  *((_DWORD *)v30 + 8) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 28, v30, 36, &v38, &v37);
  if ((_DWORD)v3 || !v38)
  {
    MEMORY[0x212BB9B48](v30, 0x1000C80240F695FLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v35 = 0;
    v36 = 0;
    __p = 0;
    std::vector<IBILteCellInfoV1T>::__init_with_size[abi:ne180100]<IBILteCellInfoV1T*,IBILteCellInfoV1T*>(&__p, v30, (uint64_t)v30 + 36 * (v37 / 0x24), v37 / 0x24);
    AriSdk::TlvArray<IBILteCellInfoV1T,1ul>::operator=((uint64_t)this + 368, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v30, 0x1000C80240F695FLL);
  }
  v38 = 0;
  v37 = 0xAAAAAAAAAAAAAAAALL;
  v31 = (_OWORD *)operator new[]();
  *v31 = 0u;
  v31[1] = 0u;
  v31[2] = 0u;
  v31[3] = 0u;
  v31[4] = 0u;
  v31[5] = 0u;
  v31[6] = 0u;
  v31[7] = 0u;
  v31[8] = 0u;
  v31[9] = 0u;
  v31[10] = 0u;
  v31[11] = 0u;
  v31[12] = 0u;
  v31[13] = 0u;
  v31[14] = 0u;
  v31[15] = 0u;
  v31[16] = 0u;
  v31[17] = 0u;
  v31[18] = 0u;
  v31[19] = 0u;
  v31[20] = 0u;
  v31[21] = 0u;
  v31[22] = 0u;
  v31[23] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 29, v31, 384, &v38, &v37);
  if ((_DWORD)v3 || !v38)
  {
    MEMORY[0x212BB9B48](v31, 0x1000C80CBA68D63);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v35 = 0;
    v36 = 0;
    __p = 0;
    std::vector<IBILteNeighborCellInfoV1T>::__init_with_size[abi:ne180100]<IBILteNeighborCellInfoV1T*,IBILteNeighborCellInfoV1T*>(&__p, v31, (uint64_t)v31 + 12 * (v37 / 0xC), v37 / 0xC);
    AriSdk::TlvArray<IBILteNeighborCellInfoV1T,32ul>::operator=((uint64_t)this + 392, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
    MEMORY[0x212BB9B48](v31, 0x1000C80CBA68D63);
  }
  v38 = 0;
  v37 = 0xAAAAAAAAAAAAAAAALL;
  v32 = (void *)operator new[]();
  bzero(v32, 0x300uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 30, v32, 768, &v38, &v37);
  if (!(_DWORD)v3 && v38)
  {
    v35 = 0;
    v36 = 0;
    __p = 0;
    std::vector<IBILteNeighborCellInfoV2T>::__init_with_size[abi:ne180100]<IBILteNeighborCellInfoV2T*,IBILteNeighborCellInfoV2T*>(&__p, v32, (uint64_t)v32 + 24 * (v37 / 0x18), v37 / 0x18);
    AriSdk::TlvArray<IBILteNeighborCellInfoV2T,32ul>::operator=((uint64_t)this + 416, (uint64_t *)&__p);
    if (__p)
      operator delete(__p);
  }
  MEMORY[0x212BB9B48](v32, 0x1000C80977131E8);
  return v3;
}

void sub_20E2900A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  uint64_t v10;

  if (__p)
    operator delete(__p);
  MEMORY[0x212BB9B48](v10, 0x1000C80977131E8);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetGetCellInfoRespCbV1_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetGetCellInfoRespCbV1_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 621051904;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetGetCurrCellInfoReq_SDK::ARI_IBINetGetCurrCellInfoReq_SDK(AriSdk::ARI_IBINetGetCurrCellInfoReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x24840000u, 0);
  *(_QWORD *)result = &off_24C911D80;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x24840000u, 0);
  *(_QWORD *)result = &off_24C911D80;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetGetCurrCellInfoReq_SDK::ARI_IBINetGetCurrCellInfoReq_SDK(AriSdk::ARI_IBINetGetCurrCellInfoReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911D80;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911D80;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBINetGetCurrCellInfoReq_SDK::~ARI_IBINetGetCurrCellInfoReq_SDK(AriSdk::ARI_IBINetGetCurrCellInfoReq_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C911D80;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetGetCurrCellInfoReq_SDK::~ARI_IBINetGetCurrCellInfoReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetGetCurrCellInfoReq_SDK::pack(AriSdk::ARI_IBINetGetCurrCellInfoReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetGetCurrCellInfoReq_SDK::unpack(AriSdk::ARI_IBINetGetCurrCellInfoReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E290578(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetGetCurrCellInfoReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetGetCurrCellInfoReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 612630528;
}

double AriSdk::ARI_IBINetGetCurrCellInfoRspCb_SDK::ARI_IBINetGetCurrCellInfoRspCb_SDK(AriSdk::ARI_IBINetGetCurrCellInfoRspCb_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x25040000u, 0);
  *(_QWORD *)v1 = &off_24C911DB8;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_QWORD *)v1 + 20) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x25040000u, 0);
  *(_QWORD *)v1 = &off_24C911DB8;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_QWORD *)v1 + 20) = 0;
  return result;
}

double AriSdk::ARI_IBINetGetCurrCellInfoRspCb_SDK::ARI_IBINetGetCurrCellInfoRspCb_SDK(AriSdk::ARI_IBINetGetCurrCellInfoRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C911DB8;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_QWORD *)v3 + 20) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C911DB8;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_QWORD *)v3 + 20) = 0;
  return result;
}

void AriSdk::ARI_IBINetGetCurrCellInfoRspCb_SDK::~ARI_IBINetGetCurrCellInfoRspCb_SDK(AriSdk::ARI_IBINetGetCurrCellInfoRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = &off_24C911DB8;
  v2 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4000313F17);
  v5 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  v6 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C40BD32EBF2);
  v7 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C40B2B1FC38);
  v8 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v8)
    MEMORY[0x212BB9B60](v8, 0x1000C4000313F17);
  v9 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v9)
    MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
  v10 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v10)
    MEMORY[0x212BB9B60](v10, 0x1000C4052888210);
  v11 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v11)
    MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
  v12 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v12)
    MEMORY[0x212BB9B60](v12, 0x1000C40471BE06ALL);
  v13 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v13)
    MEMORY[0x212BB9B60](v13, 0x1000C4052888210);
  v14 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v14)
    MEMORY[0x212BB9B60](v14, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetGetCurrCellInfoRspCb_SDK::~ARI_IBINetGetCurrCellInfoRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetGetCurrCellInfoRspCb_SDK::pack(AriSdk::ARI_IBINetGetCurrCellInfoRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 0x44uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v8, 4uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v9, 4uLL, 0), !(_DWORD)result))
          {
            v10 = (const void *)*((_QWORD *)this + 13);
            if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 7, v10, 4uLL, 0), !(_DWORD)result))
            {
              v11 = (const void *)*((_QWORD *)this + 14);
              if (!v11 || (result = AriMsg::pack(*((AriMsg **)this + 6), 8, v11, 8uLL, 0), !(_DWORD)result))
              {
                v12 = (const void *)*((_QWORD *)this + 15);
                if (!v12 || (result = AriMsg::pack(*((AriMsg **)this + 6), 9, v12, 0x10uLL, 0), !(_DWORD)result))
                {
                  v13 = (const void *)*((_QWORD *)this + 16);
                  if (!v13 || (result = AriMsg::pack(*((AriMsg **)this + 6), 16, v13, 0x18uLL, 0), !(_DWORD)result))
                  {
                    v14 = (const void *)*((_QWORD *)this + 17);
                    if (!v14 || (result = AriMsg::pack(*((AriMsg **)this + 6), 17, v14, 4uLL, 0), !(_DWORD)result))
                    {
                      v15 = (const void *)*((_QWORD *)this + 18);
                      if (!v15 || (result = AriMsg::pack(*((AriMsg **)this + 6), 18, v15, 8uLL, 0), !(_DWORD)result))
                      {
                        v16 = (const void *)*((_QWORD *)this + 19);
                        if (!v16
                          || (result = AriMsg::pack(*((AriMsg **)this + 6), 19, v16, 4uLL, 0), !(_DWORD)result))
                        {
                          v17 = (const void *)*((_QWORD *)this + 20);
                          if (!v17
                            || (result = AriMsg::pack(*((AriMsg **)this + 6), 20, v17, 4uLL, 0), !(_DWORD)result))
                          {
                            result = 0;
                            *a2 = (AriMsg *)*((_QWORD *)this + 6);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetGetCurrCellInfoRspCb_SDK::unpack(AriSdk::ARI_IBINetGetCurrCellInfoRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _DWORD *v17;
  _QWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;

  v34 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v34, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v34;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v33 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v33, 0);
  if ((_DWORD)v3 || !v33)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v32 = 0;
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_DWORD *)(v6 + 64) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, (void *)v6, 68, &v32, 0);
  if ((_DWORD)v3 || !v32)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C40471BE06ALL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v7 = operator new();
    v8 = *(_OWORD *)(v6 + 48);
    *(_OWORD *)(v7 + 32) = *(_OWORD *)(v6 + 32);
    *(_OWORD *)(v7 + 48) = v8;
    *(_DWORD *)(v7 + 64) = *(_DWORD *)(v6 + 64);
    v9 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)v7 = *(_OWORD *)v6;
    *(_OWORD *)(v7 + 16) = v9;
    v10 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v7;
    if (v10)
      MEMORY[0x212BB9B60](v10, 0x1000C40471BE06ALL);
    MEMORY[0x212BB9B60](v6, 0x1000C40471BE06ALL);
  }
  v31 = 0;
  v11 = (_DWORD *)operator new();
  *v11 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v11, 4, &v31, 0);
  if ((_DWORD)v3 || !v31)
  {
    MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 11, v11);
    MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
  }
  v30 = 0;
  v12 = (_DWORD *)operator new();
  *v12 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v12, 4, &v30, 0);
  if ((_DWORD)v3 || !v30)
  {
    MEMORY[0x212BB9B60](v12, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 12, v12);
    MEMORY[0x212BB9B60](v12, 0x1000C4052888210);
  }
  v29 = 0;
  v13 = (_DWORD *)operator new();
  *v13 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 7, v13, 4, &v29, 0);
  if ((_DWORD)v3 || !v29)
  {
    MEMORY[0x212BB9B60](v13, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 13, v13);
    MEMORY[0x212BB9B60](v13, 0x1000C4052888210);
  }
  v28 = 0;
  v14 = (_QWORD *)operator new();
  *v14 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 8, v14, 8, &v28, 0);
  if ((_DWORD)v3 || !v28)
  {
    MEMORY[0x212BB9B60](v14, 0x1000C4000313F17);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<AriStatusTlv>::operator=<AriStatusTlv&,void>((uint64_t *)this + 14, v14);
    MEMORY[0x212BB9B60](v14, 0x1000C4000313F17);
  }
  v27 = 0;
  v15 = (_QWORD *)operator new();
  *v15 = 0;
  v15[1] = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 9, v15, 16, &v27, 0);
  if ((_DWORD)v3 || !v27)
  {
    MEMORY[0x212BB9B60](v15, 0x1000C40B2B1FC38);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBINetCdma1xCellInfoParam>::operator=<IBINetCdma1xCellInfoParam&,void>((uint64_t *)this + 15, v15);
    MEMORY[0x212BB9B60](v15, 0x1000C40B2B1FC38);
  }
  v26 = 0;
  v16 = (_QWORD *)operator new();
  v16[1] = 0;
  v16[2] = 0;
  *v16 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 16, v16, 24, &v26, 0);
  if ((_DWORD)v3 || !v26)
  {
    MEMORY[0x212BB9B60](v16, 0x1000C40BD32EBF2);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBINetCdmaEvdoCellInfoParam>::operator=<IBINetCdmaEvdoCellInfoParam&,void>((uint64_t *)this + 16, (uint64_t)v16);
    MEMORY[0x212BB9B60](v16, 0x1000C40BD32EBF2);
  }
  v25 = 0;
  v17 = (_DWORD *)operator new();
  *v17 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 17, v17, 4, &v25, 0);
  if ((_DWORD)v3 || !v25)
  {
    MEMORY[0x212BB9B60](v17, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 17, v17);
    MEMORY[0x212BB9B60](v17, 0x1000C4052888210);
  }
  v24 = 0;
  v18 = (_QWORD *)operator new();
  *v18 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 18, v18, 8, &v24, 0);
  if ((_DWORD)v3 || !v24)
  {
    MEMORY[0x212BB9B60](v18, 0x1000C4000313F17);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<AriStatusTlv>::operator=<AriStatusTlv&,void>((uint64_t *)this + 18, v18);
    MEMORY[0x212BB9B60](v18, 0x1000C4000313F17);
  }
  v23 = 0;
  v19 = (_DWORD *)operator new();
  *v19 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 19, v19, 4, &v23, 0);
  if ((_DWORD)v3 || !v23)
  {
    MEMORY[0x212BB9B60](v19, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 19, v19);
    MEMORY[0x212BB9B60](v19, 0x1000C4052888210);
  }
  v22 = 0;
  v20 = (_DWORD *)operator new();
  *v20 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 20, v20, 4, &v22, 0);
  if (!(_DWORD)v3 && v22)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 20, v20);
  MEMORY[0x212BB9B60](v20, 0x1000C4052888210);
  return v3;
}

void sub_20E291274(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetGetCurrCellInfoRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetGetCurrCellInfoRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 621019136;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetGetEmergencyCellReq_SDK::ARI_IBINetGetEmergencyCellReq_SDK(AriSdk::ARI_IBINetGetEmergencyCellReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x24918000u, 0);
  *(_QWORD *)result = &off_24C911DF0;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x24918000u, 0);
  *(_QWORD *)result = &off_24C911DF0;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetGetEmergencyCellReq_SDK::ARI_IBINetGetEmergencyCellReq_SDK(AriSdk::ARI_IBINetGetEmergencyCellReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911DF0;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911DF0;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBINetGetEmergencyCellReq_SDK::~ARI_IBINetGetEmergencyCellReq_SDK(AriSdk::ARI_IBINetGetEmergencyCellReq_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C911DF0;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C40D567C9E3);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetGetEmergencyCellReq_SDK::~ARI_IBINetGetEmergencyCellReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetGetEmergencyCellReq_SDK::pack(AriSdk::ARI_IBINetGetEmergencyCellReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 0x2CuLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetGetEmergencyCellReq_SDK::unpack(AriSdk::ARI_IBINetGetEmergencyCellReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  __int128 v8;
  uint64_t v9;
  BOOL v11;
  BOOL v12;
  BOOL v13;

  v13 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v13, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v13;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v12 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v12, 0);
  if ((_DWORD)v3 || !v12)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v11 = 0;
  v6 = (_OWORD *)operator new();
  *v6 = 0u;
  v6[1] = 0u;
  *(_OWORD *)((char *)v6 + 28) = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v6, 44, &v11, 0);
  if (!(_DWORD)v3 && v11)
  {
    v7 = (_OWORD *)operator new();
    v8 = v6[1];
    *v7 = *v6;
    v7[1] = v8;
    *(_OWORD *)((char *)v7 + 28) = *(_OWORD *)((char *)v6 + 28);
    v9 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v7;
    if (v9)
      MEMORY[0x212BB9B60](v9, 0x1000C40D567C9E3);
  }
  MEMORY[0x212BB9B60](v6, 0x1000C40D567C9E3);
  return v3;
}

void sub_20E291790(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C40D567C9E3);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetGetEmergencyCellReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetGetEmergencyCellReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 613515264;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetGetEmergencyCellRspCb_SDK::ARI_IBINetGetEmergencyCellRspCb_SDK(AriSdk::ARI_IBINetGetEmergencyCellRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x25118000u, 0);
  *(_QWORD *)result = &off_24C911E28;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x25118000u, 0);
  *(_QWORD *)result = &off_24C911E28;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetGetEmergencyCellRspCb_SDK::ARI_IBINetGetEmergencyCellRspCb_SDK(AriSdk::ARI_IBINetGetEmergencyCellRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911E28;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911E28;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBINetGetEmergencyCellRspCb_SDK::~ARI_IBINetGetEmergencyCellRspCb_SDK(AriSdk::ARI_IBINetGetEmergencyCellRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C911E28;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetGetEmergencyCellRspCb_SDK::~ARI_IBINetGetEmergencyCellRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetGetEmergencyCellRspCb_SDK::pack(AriSdk::ARI_IBINetGetEmergencyCellRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetGetEmergencyCellRspCb_SDK::unpack(AriSdk::ARI_IBINetGetEmergencyCellRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E291B04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetGetEmergencyCellRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetGetEmergencyCellRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 621903872;
}

double AriSdk::ARI_IBINetGetEmergencyCellIndCb_SDK::ARI_IBINetGetEmergencyCellIndCb_SDK(AriSdk::ARI_IBINetGetEmergencyCellIndCb_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x25918000u, 0);
  *(_QWORD *)v1 = &off_24C911E60;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x25918000u, 0);
  *(_QWORD *)v1 = &off_24C911E60;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  return result;
}

double AriSdk::ARI_IBINetGetEmergencyCellIndCb_SDK::ARI_IBINetGetEmergencyCellIndCb_SDK(AriSdk::ARI_IBINetGetEmergencyCellIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C911E60;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C911E60;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  return result;
}

void AriSdk::ARI_IBINetGetEmergencyCellIndCb_SDK::~ARI_IBINetGetEmergencyCellIndCb_SDK(AriSdk::ARI_IBINetGetEmergencyCellIndCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_24C911E60;
  v2 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  v5 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  v6 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetGetEmergencyCellIndCb_SDK::~ARI_IBINetGetEmergencyCellIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetGetEmergencyCellIndCb_SDK::pack(AriSdk::ARI_IBINetGetEmergencyCellIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 4uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v8, 4uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v9, 4uLL, 0), !(_DWORD)result))
          {
            v10 = (const void *)*((_QWORD *)this + 13);
            if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v10, 4uLL, 0), !(_DWORD)result))
            {
              result = 0;
              *a2 = (AriMsg *)*((_QWORD *)this + 6);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetGetEmergencyCellIndCb_SDK::unpack(AriSdk::ARI_IBINetGetEmergencyCellIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;

  v16 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v16, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v16;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v15 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v15, 0);
  if ((_DWORD)v3 || !v15)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v14 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 4, &v14, 0);
  if ((_DWORD)v3 || !v14)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  }
  v13 = 0;
  v7 = (_DWORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v7, 4, &v13, 0);
  if ((_DWORD)v3 || !v13)
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 11, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  }
  v12 = 0;
  v8 = (_DWORD *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v8, 4, &v12, 0);
  if ((_DWORD)v3 || !v12)
  {
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 12, v8);
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  }
  v11 = 0;
  v9 = (_DWORD *)operator new();
  *v9 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v9, 4, &v11, 0);
  if (!(_DWORD)v3 && v11)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 13, v9);
  MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
  return v3;
}

void sub_20E2921D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetGetEmergencyCellIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetGetEmergencyCellIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 630292480;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetNasProcFailedImsRejectIndCb_SDK::ARI_IBINetNasProcFailedImsRejectIndCb_SDK(AriSdk::ARI_IBINetNasProcFailedImsRejectIndCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x25888000u, 0);
  *(_QWORD *)result = &off_24C911E98;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x25888000u, 0);
  *(_QWORD *)result = &off_24C911E98;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetNasProcFailedImsRejectIndCb_SDK::ARI_IBINetNasProcFailedImsRejectIndCb_SDK(AriSdk::ARI_IBINetNasProcFailedImsRejectIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911E98;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911E98;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBINetNasProcFailedImsRejectIndCb_SDK::~ARI_IBINetNasProcFailedImsRejectIndCb_SDK(AriSdk::ARI_IBINetNasProcFailedImsRejectIndCb_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C911E98;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetNasProcFailedImsRejectIndCb_SDK::~ARI_IBINetNasProcFailedImsRejectIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetNasProcFailedImsRejectIndCb_SDK::pack(AriSdk::ARI_IBINetNasProcFailedImsRejectIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetNasProcFailedImsRejectIndCb_SDK::unpack(AriSdk::ARI_IBINetNasProcFailedImsRejectIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E292478(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetNasProcFailedImsRejectIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetNasProcFailedImsRejectIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 629702656;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetRadioConnectionStateReq_SDK::ARI_IBINetRadioConnectionStateReq_SDK(AriSdk::ARI_IBINetRadioConnectionStateReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x24948000u, 0);
  *(_QWORD *)result = &off_24C911ED0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x24948000u, 0);
  *(_QWORD *)result = &off_24C911ED0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetRadioConnectionStateReq_SDK::ARI_IBINetRadioConnectionStateReq_SDK(AriSdk::ARI_IBINetRadioConnectionStateReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911ED0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911ED0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBINetRadioConnectionStateReq_SDK::~ARI_IBINetRadioConnectionStateReq_SDK(AriSdk::ARI_IBINetRadioConnectionStateReq_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C911ED0;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetRadioConnectionStateReq_SDK::~ARI_IBINetRadioConnectionStateReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetRadioConnectionStateReq_SDK::pack(AriSdk::ARI_IBINetRadioConnectionStateReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetRadioConnectionStateReq_SDK::unpack(AriSdk::ARI_IBINetRadioConnectionStateReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E2926F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetRadioConnectionStateReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetRadioConnectionStateReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 613711872;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetRadioConnectionStateRespCb_SDK::ARI_IBINetRadioConnectionStateRespCb_SDK(AriSdk::ARI_IBINetRadioConnectionStateRespCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x25148000u, 0);
  *(_QWORD *)result = &off_24C911F08;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x25148000u, 0);
  *(_QWORD *)result = &off_24C911F08;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetRadioConnectionStateRespCb_SDK::ARI_IBINetRadioConnectionStateRespCb_SDK(AriSdk::ARI_IBINetRadioConnectionStateRespCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911F08;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911F08;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBINetRadioConnectionStateRespCb_SDK::~ARI_IBINetRadioConnectionStateRespCb_SDK(AriSdk::ARI_IBINetRadioConnectionStateRespCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C911F08;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetRadioConnectionStateRespCb_SDK::~ARI_IBINetRadioConnectionStateRespCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetRadioConnectionStateRespCb_SDK::pack(AriSdk::ARI_IBINetRadioConnectionStateRespCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetRadioConnectionStateRespCb_SDK::unpack(AriSdk::ARI_IBINetRadioConnectionStateRespCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E292A4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetRadioConnectionStateRespCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetRadioConnectionStateRespCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 622100480;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetRadioConnectionStateIndCb_SDK::ARI_IBINetRadioConnectionStateIndCb_SDK(AriSdk::ARI_IBINetRadioConnectionStateIndCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x25948000u, 0);
  *(_QWORD *)result = &off_24C911F40;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x25948000u, 0);
  *(_QWORD *)result = &off_24C911F40;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetRadioConnectionStateIndCb_SDK::ARI_IBINetRadioConnectionStateIndCb_SDK(AriSdk::ARI_IBINetRadioConnectionStateIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911F40;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911F40;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBINetRadioConnectionStateIndCb_SDK::~ARI_IBINetRadioConnectionStateIndCb_SDK(AriSdk::ARI_IBINetRadioConnectionStateIndCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C911F40;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetRadioConnectionStateIndCb_SDK::~ARI_IBINetRadioConnectionStateIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetRadioConnectionStateIndCb_SDK::pack(AriSdk::ARI_IBINetRadioConnectionStateIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 4uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetRadioConnectionStateIndCb_SDK::unpack(AriSdk::ARI_IBINetRadioConnectionStateIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v9, 0);
  if ((_DWORD)v3 || !v9)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v8 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 4, &v8, 0);
  if (!(_DWORD)v3 && v8)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  return v3;
}

void sub_20E292E8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetRadioConnectionStateIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetRadioConnectionStateIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 630489088;
}

double AriSdk::ARI_IBINetRadioSignalIndCb_SDK::ARI_IBINetRadioSignalIndCb_SDK(AriSdk::ARI_IBINetRadioSignalIndCb_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x25820000u, 0);
  *(_QWORD *)v1 = &off_24C911F78;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x25820000u, 0);
  *(_QWORD *)v1 = &off_24C911F78;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  return result;
}

double AriSdk::ARI_IBINetRadioSignalIndCb_SDK::ARI_IBINetRadioSignalIndCb_SDK(AriSdk::ARI_IBINetRadioSignalIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C911F78;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C911F78;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  return result;
}

void AriSdk::ARI_IBINetRadioSignalIndCb_SDK::~ARI_IBINetRadioSignalIndCb_SDK(AriSdk::ARI_IBINetRadioSignalIndCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = &off_24C911F78;
  v2 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C403A177FC2);
  v3 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C402750FA65);
  v5 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40B7066DD3);
  v6 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  v7 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  v8 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v8)
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  v9 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
    MEMORY[0x212BB9B60](v9, 0x1000C4077774924);
  v10 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v10)
    MEMORY[0x212BB9B60](v10, 0x1000C4077774924);
  v11 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v11)
    MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetRadioSignalIndCb_SDK::~ARI_IBINetRadioSignalIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetRadioSignalIndCb_SDK::pack(AriSdk::ARI_IBINetRadioSignalIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 1uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 1uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v8, 4uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v9, 4uLL, 0), !(_DWORD)result))
          {
            v10 = (const void *)*((_QWORD *)this + 13);
            if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v10, 4uLL, 0), !(_DWORD)result))
            {
              v11 = (const void *)*((_QWORD *)this + 14);
              if (!v11 || (result = AriMsg::pack(*((AriMsg **)this + 6), 8, v11, 0x34uLL, 0), !(_DWORD)result))
              {
                v12 = (const void *)*((_QWORD *)this + 15);
                if (!v12 || (result = AriMsg::pack(*((AriMsg **)this + 6), 9, v12, 0x48uLL, 0), !(_DWORD)result))
                {
                  v13 = (const void *)*((_QWORD *)this + 16);
                  if (!v13 || (result = AriMsg::pack(*((AriMsg **)this + 6), 10, v13, 4uLL, 0), !(_DWORD)result))
                  {
                    v14 = (const void *)*((_QWORD *)this + 17);
                    if (!v14 || (result = AriMsg::pack(*((AriMsg **)this + 6), 11, v14, 0x34uLL, 0), !(_DWORD)result))
                    {
                      result = 0;
                      *a2 = (AriMsg *)*((_QWORD *)this + 6);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetRadioSignalIndCb_SDK::unpack(AriSdk::ARI_IBINetRadioSignalIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _BYTE *v5;
  _BYTE *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _DWORD *v23;
  _OWORD *v24;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;

  v35 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v35, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v35;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v34 = 0;
  v5 = (_BYTE *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 1, &v34, 0);
  if ((_DWORD)v3 || !v34)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4077774924);
  }
  v33 = 0;
  v6 = (_BYTE *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 1, &v33, 0);
  if ((_DWORD)v3 || !v33)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4077774924);
  }
  v32 = 0;
  v7 = (_DWORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v7, 4, &v32, 0);
  if ((_DWORD)v3 || !v32)
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v8 = (_DWORD *)operator new();
    *v8 = *v7;
    v9 = *((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v8;
    if (v9)
      MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  }
  v31 = 0;
  v10 = (_DWORD *)operator new();
  *v10 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v10, 4, &v31, 0);
  if ((_DWORD)v3 || !v31)
  {
    MEMORY[0x212BB9B60](v10, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v11 = (_DWORD *)operator new();
    *v11 = *v10;
    v12 = *((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = v11;
    if (v12)
      MEMORY[0x212BB9B60](v12, 0x1000C4052888210);
    MEMORY[0x212BB9B60](v10, 0x1000C4052888210);
  }
  v30 = 0;
  v13 = (_DWORD *)operator new();
  *v13 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v13, 4, &v30, 0);
  if ((_DWORD)v3 || !v30)
  {
    MEMORY[0x212BB9B60](v13, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 13, v13);
    MEMORY[0x212BB9B60](v13, 0x1000C4052888210);
  }
  v29 = 0;
  v14 = operator new();
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_DWORD *)(v14 + 48) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 8, (void *)v14, 52, &v29, 0);
  if ((_DWORD)v3 || !v29)
  {
    MEMORY[0x212BB9B60](v14, 0x1000C40B7066DD3);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v15 = operator new();
    v16 = *(_OWORD *)(v14 + 16);
    *(_OWORD *)v15 = *(_OWORD *)v14;
    *(_OWORD *)(v15 + 16) = v16;
    *(_OWORD *)(v15 + 32) = *(_OWORD *)(v14 + 32);
    *(_DWORD *)(v15 + 48) = *(_DWORD *)(v14 + 48);
    v17 = *((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = v15;
    if (v17)
      MEMORY[0x212BB9B60](v17, 0x1000C40B7066DD3);
    MEMORY[0x212BB9B60](v14, 0x1000C40B7066DD3);
  }
  v28 = 0;
  v18 = operator new();
  *(_OWORD *)v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_QWORD *)(v18 + 64) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 9, (void *)v18, 72, &v28, 0);
  if ((_DWORD)v3 || !v28)
  {
    MEMORY[0x212BB9B60](v18, 0x1000C402750FA65);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v19 = operator new();
    v20 = *(_OWORD *)(v18 + 48);
    *(_OWORD *)(v19 + 32) = *(_OWORD *)(v18 + 32);
    *(_OWORD *)(v19 + 48) = v20;
    *(_QWORD *)(v19 + 64) = *(_QWORD *)(v18 + 64);
    v21 = *(_OWORD *)(v18 + 16);
    *(_OWORD *)v19 = *(_OWORD *)v18;
    *(_OWORD *)(v19 + 16) = v21;
    v22 = *((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = v19;
    if (v22)
      MEMORY[0x212BB9B60](v22, 0x1000C402750FA65);
    MEMORY[0x212BB9B60](v18, 0x1000C402750FA65);
  }
  v27 = 0;
  v23 = (_DWORD *)operator new();
  *v23 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 10, v23, 4, &v27, 0);
  if ((_DWORD)v3 || !v27)
  {
    MEMORY[0x212BB9B60](v23, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 16, v23);
    MEMORY[0x212BB9B60](v23, 0x1000C4052888210);
  }
  v26 = 0;
  v24 = (_OWORD *)operator new();
  *v24 = 0u;
  v24[1] = 0u;
  v24[2] = 0u;
  *((_DWORD *)v24 + 12) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 11, v24, 52, &v26, 0);
  if (!(_DWORD)v3 && v26)
    AriSdk::Tlv<IBINetRadioSignalSecondaryRatInfo>::operator=<IBINetRadioSignalSecondaryRatInfo&,void>((uint64_t *)this + 17, (uint64_t)v24);
  MEMORY[0x212BB9B60](v24, 0x1000C403A177FC2);
  return v3;
}

void sub_20E2939DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C403A177FC2);
  _Unwind_Resume(a1);
}

uint64_t *AriSdk::Tlv<IBINetRadioSignalSecondaryRatInfo>::operator=<IBINetRadioSignalSecondaryRatInfo&,void>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v4 = operator new();
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(v4 + 48) = *(_DWORD *)(a2 + 48);
  v6 = *a1;
  *a1 = v4;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C403A177FC2);
  return a1;
}

BOOL AriSdk::ARI_IBINetRadioSignalIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetRadioSignalIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 629276672;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetRrcConnectionRejectIndCb_SDK::ARI_IBINetRrcConnectionRejectIndCb_SDK(AriSdk::ARI_IBINetRrcConnectionRejectIndCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x25940000u, 0);
  *(_QWORD *)result = &off_24C911FB0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x25940000u, 0);
  *(_QWORD *)result = &off_24C911FB0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetRrcConnectionRejectIndCb_SDK::ARI_IBINetRrcConnectionRejectIndCb_SDK(AriSdk::ARI_IBINetRrcConnectionRejectIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911FB0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911FB0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBINetRrcConnectionRejectIndCb_SDK::~ARI_IBINetRrcConnectionRejectIndCb_SDK(AriSdk::ARI_IBINetRrcConnectionRejectIndCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C911FB0;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetRrcConnectionRejectIndCb_SDK::~ARI_IBINetRrcConnectionRejectIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetRrcConnectionRejectIndCb_SDK::pack(AriSdk::ARI_IBINetRrcConnectionRejectIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetRrcConnectionRejectIndCb_SDK::unpack(AriSdk::ARI_IBINetRrcConnectionRejectIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E293E24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetRrcConnectionRejectIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetRrcConnectionRejectIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 630456320;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetSetRadioSignalReporting_SDK::ARI_IBINetSetRadioSignalReporting_SDK(AriSdk::ARI_IBINetSetRadioSignalReporting_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x24810000u, 1);
  *(_QWORD *)result = &off_24C911FE8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x24810000u, 1);
  *(_QWORD *)result = &off_24C911FE8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetSetRadioSignalReporting_SDK::ARI_IBINetSetRadioSignalReporting_SDK(AriSdk::ARI_IBINetSetRadioSignalReporting_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911FE8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C911FE8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBINetSetRadioSignalReporting_SDK::~ARI_IBINetSetRadioSignalReporting_SDK(AriSdk::ARI_IBINetSetRadioSignalReporting_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C911FE8;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetSetRadioSignalReporting_SDK::~ARI_IBINetSetRadioSignalReporting_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetSetRadioSignalReporting_SDK::pack(AriSdk::ARI_IBINetSetRadioSignalReporting_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetSetRadioSignalReporting_SDK::unpack(AriSdk::ARI_IBINetSetRadioSignalReporting_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E294174(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetSetRadioSignalReporting_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetSetRadioSignalReporting_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 612433920;
}

double AriSdk::ARI_IBINetSetRadioSignalReportingConfiguration_SDK::ARI_IBINetSetRadioSignalReportingConfiguration_SDK(AriSdk::ARI_IBINetSetRadioSignalReportingConfiguration_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x24808000u, 1);
  *(_QWORD *)v1 = &off_24C912020;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x24808000u, 1);
  *(_QWORD *)v1 = &off_24C912020;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  return result;
}

double AriSdk::ARI_IBINetSetRadioSignalReportingConfiguration_SDK::ARI_IBINetSetRadioSignalReportingConfiguration_SDK(AriSdk::ARI_IBINetSetRadioSignalReportingConfiguration_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C912020;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C912020;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  return result;
}

void AriSdk::ARI_IBINetSetRadioSignalReportingConfiguration_SDK::~ARI_IBINetSetRadioSignalReportingConfiguration_SDK(AriSdk::ARI_IBINetSetRadioSignalReportingConfiguration_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = &off_24C912020;
  v2 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C40B6B52C08);
  v3 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C40B888B256);
  v4 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C40B888B256);
  v5 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40B6B52C08);
  v6 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C4045C79CCFLL);
  v7 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C40EF768F96);
  v8 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v8)
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v9)
    MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetSetRadioSignalReportingConfiguration_SDK::~ARI_IBINetSetRadioSignalReportingConfiguration_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetSetRadioSignalReportingConfiguration_SDK::pack(AriSdk::ARI_IBINetSetRadioSignalReportingConfiguration_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 0x14uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v8, 0x20uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v9, 0x2CuLL, 0), !(_DWORD)result))
          {
            v10 = (const void *)*((_QWORD *)this + 13);
            if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v10, 0x2CuLL, 0), !(_DWORD)result))
            {
              v11 = (const void *)*((_QWORD *)this + 14);
              if (!v11 || (result = AriMsg::pack(*((AriMsg **)this + 6), 7, v11, 0x2CuLL, 0), !(_DWORD)result))
              {
                v12 = (const void *)*((_QWORD *)this + 15);
                if (!v12 || (result = AriMsg::pack(*((AriMsg **)this + 6), 8, v12, 0x2CuLL, 0), !(_DWORD)result))
                {
                  result = 0;
                  *a2 = (AriMsg *)*((_QWORD *)this + 6);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetSetRadioSignalReportingConfiguration_SDK::unpack(AriSdk::ARI_IBINetSetRadioSignalReportingConfiguration_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  __int128 v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  __int128 v27;
  uint64_t v28;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;

  v37 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v37, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v37;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v36 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v36, 0);
  if ((_DWORD)v3 || !v36)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v35 = 0;
  v6 = (_DWORD *)operator new();
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v6[4] = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 20, &v35, 0);
  if ((_DWORD)v3 || !v35)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C40EF768F96);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v7 = operator new();
    *(_OWORD *)v7 = *(_OWORD *)v6;
    *(_DWORD *)(v7 + 16) = v6[4];
    v8 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v7;
    if (v8)
      MEMORY[0x212BB9B60](v8, 0x1000C40EF768F96);
    MEMORY[0x212BB9B60](v6, 0x1000C40EF768F96);
  }
  v34 = 0;
  v9 = (_OWORD *)operator new();
  *v9 = 0u;
  v9[1] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v9, 32, &v34, 0);
  if ((_DWORD)v3 || !v34)
  {
    MEMORY[0x212BB9B60](v9, 0x1000C4045C79CCFLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v10 = (_OWORD *)operator new();
    v11 = v9[1];
    *v10 = *v9;
    v10[1] = v11;
    v12 = *((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v10;
    if (v12)
      MEMORY[0x212BB9B60](v12, 0x1000C4045C79CCFLL);
    MEMORY[0x212BB9B60](v9, 0x1000C4045C79CCFLL);
  }
  v33 = 0;
  v13 = (_OWORD *)operator new();
  *v13 = 0u;
  v13[1] = 0u;
  *(_OWORD *)((char *)v13 + 28) = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v13, 44, &v33, 0);
  if ((_DWORD)v3 || !v33)
  {
    MEMORY[0x212BB9B60](v13, 0x1000C40B6B52C08);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v14 = (_OWORD *)operator new();
    v15 = v13[1];
    *v14 = *v13;
    v14[1] = v15;
    *(_OWORD *)((char *)v14 + 28) = *(_OWORD *)((char *)v13 + 28);
    v16 = *((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = v14;
    if (v16)
      MEMORY[0x212BB9B60](v16, 0x1000C40B6B52C08);
    MEMORY[0x212BB9B60](v13, 0x1000C40B6B52C08);
  }
  v32 = 0;
  v17 = (_OWORD *)operator new();
  *v17 = 0u;
  v17[1] = 0u;
  *(_OWORD *)((char *)v17 + 28) = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, v17, 44, &v32, 0);
  if ((_DWORD)v3 || !v32)
  {
    MEMORY[0x212BB9B60](v17, 0x1000C40B888B256);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v18 = (_OWORD *)operator new();
    v19 = v17[1];
    *v18 = *v17;
    v18[1] = v19;
    *(_OWORD *)((char *)v18 + 28) = *(_OWORD *)((char *)v17 + 28);
    v20 = *((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = v18;
    if (v20)
      MEMORY[0x212BB9B60](v20, 0x1000C40B888B256);
    MEMORY[0x212BB9B60](v17, 0x1000C40B888B256);
  }
  v31 = 0;
  v21 = (_OWORD *)operator new();
  *v21 = 0u;
  v21[1] = 0u;
  *(_OWORD *)((char *)v21 + 28) = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 7, v21, 44, &v31, 0);
  if ((_DWORD)v3 || !v31)
  {
    MEMORY[0x212BB9B60](v21, 0x1000C40B888B256);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v22 = (_OWORD *)operator new();
    v23 = v21[1];
    *v22 = *v21;
    v22[1] = v23;
    *(_OWORD *)((char *)v22 + 28) = *(_OWORD *)((char *)v21 + 28);
    v24 = *((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = v22;
    if (v24)
      MEMORY[0x212BB9B60](v24, 0x1000C40B888B256);
    MEMORY[0x212BB9B60](v21, 0x1000C40B888B256);
  }
  v30 = 0;
  v25 = (_OWORD *)operator new();
  *v25 = 0u;
  v25[1] = 0u;
  *(_OWORD *)((char *)v25 + 28) = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 8, v25, 44, &v30, 0);
  if (!(_DWORD)v3 && v30)
  {
    v26 = (_OWORD *)operator new();
    v27 = v25[1];
    *v26 = *v25;
    v26[1] = v27;
    *(_OWORD *)((char *)v26 + 28) = *(_OWORD *)((char *)v25 + 28);
    v28 = *((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = v26;
    if (v28)
      MEMORY[0x212BB9B60](v28, 0x1000C40B6B52C08);
  }
  MEMORY[0x212BB9B60](v25, 0x1000C40B6B52C08);
  return v3;
}

void sub_20E294B84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C40B6B52C08);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetSetRadioSignalReportingConfiguration_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetSetRadioSignalReportingConfiguration_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 612401152;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetSingleShotRadioSignalReportingReq_SDK::ARI_IBINetSingleShotRadioSignalReportingReq_SDK(AriSdk::ARI_IBINetSingleShotRadioSignalReportingReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x24818000u, 0);
  *(_QWORD *)result = &off_24C912058;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x24818000u, 0);
  *(_QWORD *)result = &off_24C912058;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetSingleShotRadioSignalReportingReq_SDK::ARI_IBINetSingleShotRadioSignalReportingReq_SDK(AriSdk::ARI_IBINetSingleShotRadioSignalReportingReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C912058;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C912058;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBINetSingleShotRadioSignalReportingReq_SDK::~ARI_IBINetSingleShotRadioSignalReportingReq_SDK(AriSdk::ARI_IBINetSingleShotRadioSignalReportingReq_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C912058;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetSingleShotRadioSignalReportingReq_SDK::~ARI_IBINetSingleShotRadioSignalReportingReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetSingleShotRadioSignalReportingReq_SDK::pack(AriSdk::ARI_IBINetSingleShotRadioSignalReportingReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetSingleShotRadioSignalReportingReq_SDK::unpack(AriSdk::ARI_IBINetSingleShotRadioSignalReportingReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v9, 0);
  if (!(_DWORD)v3 && v9)
  {
    v6 = (_DWORD *)operator new();
    *v6 = *v5;
    v7 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v6;
    if (v7)
      MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  }
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E294F88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetSingleShotRadioSignalReportingReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetSingleShotRadioSignalReportingReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 612466688;
}

double AriSdk::ARI_IBINetSingleShotRadioSignalReportingRspCb_SDK::ARI_IBINetSingleShotRadioSignalReportingRspCb_SDK(AriSdk::ARI_IBINetSingleShotRadioSignalReportingRspCb_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x25018000u, 0);
  *(_QWORD *)v1 = &off_24C912090;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x25018000u, 0);
  *(_QWORD *)v1 = &off_24C912090;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  return result;
}

double AriSdk::ARI_IBINetSingleShotRadioSignalReportingRspCb_SDK::ARI_IBINetSingleShotRadioSignalReportingRspCb_SDK(AriSdk::ARI_IBINetSingleShotRadioSignalReportingRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C912090;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C912090;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  return result;
}

void AriSdk::ARI_IBINetSingleShotRadioSignalReportingRspCb_SDK::~ARI_IBINetSingleShotRadioSignalReportingRspCb_SDK(AriSdk::ARI_IBINetSingleShotRadioSignalReportingRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = &off_24C912090;
  v2 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C403207AF5FLL);
  v3 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4094AF71AFLL);
  v4 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C40B454D1E3);
  v5 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C407686E5EELL);
  v6 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C40EC481F20);
  v7 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C4077F4DC47);
  v8 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v8)
    MEMORY[0x212BB9B60](v8, 0x1000C4054B1E74FLL);
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v9)
    MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetSingleShotRadioSignalReportingRspCb_SDK::~ARI_IBINetSingleShotRadioSignalReportingRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetSingleShotRadioSignalReportingRspCb_SDK::pack(AriSdk::ARI_IBINetSingleShotRadioSignalReportingRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, 0x244uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v7, 0x484uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v8, 0x604uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 6, v9, 0x34uLL, 0), !(_DWORD)result))
          {
            v10 = (const void *)*((_QWORD *)this + 13);
            if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 7, v10, 0x38uLL, 0), !(_DWORD)result))
            {
              v11 = (const void *)*((_QWORD *)this + 14);
              if (!v11 || (result = AriMsg::pack(*((AriMsg **)this + 6), 8, v11, 0x584uLL, 0), !(_DWORD)result))
              {
                v12 = (const void *)*((_QWORD *)this + 15);
                if (!v12 || (result = AriMsg::pack(*((AriMsg **)this + 6), 9, v12, 0x604uLL, 0), !(_DWORD)result))
                {
                  result = 0;
                  *a2 = (AriMsg *)*((_QWORD *)this + 6);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetSingleShotRadioSignalReportingRspCb_SDK::unpack(AriSdk::ARI_IBINetSingleShotRadioSignalReportingRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;

  v36 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v36, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v36;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v35 = 0;
  v5 = (void *)operator new();
  bzero(v5, 0x244uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 580, &v35, 0);
  if ((_DWORD)v3 || !v35)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4054B1E74FLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v6 = (void *)operator new();
    memcpy(v6, v5, 0x244uLL);
    v7 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v6;
    if (v7)
      MEMORY[0x212BB9B60](v7, 0x1000C4054B1E74FLL);
    MEMORY[0x212BB9B60](v5, 0x1000C4054B1E74FLL);
  }
  v34 = 0;
  v8 = (void *)operator new();
  bzero(v8, 0x484uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v8, 1156, &v34, 0);
  if ((_DWORD)v3 || !v34)
  {
    MEMORY[0x212BB9B60](v8, 0x1000C4077F4DC47);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v9 = (void *)operator new();
    memcpy(v9, v8, 0x484uLL);
    v10 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v9;
    if (v10)
      MEMORY[0x212BB9B60](v10, 0x1000C4077F4DC47);
    MEMORY[0x212BB9B60](v8, 0x1000C4077F4DC47);
  }
  v33 = 0;
  v11 = (void *)operator new();
  bzero(v11, 0x604uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v11, 1540, &v33, 0);
  if ((_DWORD)v3 || !v33)
  {
    MEMORY[0x212BB9B60](v11, 0x1000C40EC481F20);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v12 = (void *)operator new();
    memcpy(v12, v11, 0x604uLL);
    v13 = *((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v12;
    if (v13)
      MEMORY[0x212BB9B60](v13, 0x1000C40EC481F20);
    MEMORY[0x212BB9B60](v11, 0x1000C40EC481F20);
  }
  v32 = 0;
  v14 = operator new();
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_DWORD *)(v14 + 48) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 6, (void *)v14, 52, &v32, 0);
  if ((_DWORD)v3 || !v32)
  {
    MEMORY[0x212BB9B60](v14, 0x1000C407686E5EELL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v15 = operator new();
    v16 = *(_OWORD *)(v14 + 16);
    *(_OWORD *)v15 = *(_OWORD *)v14;
    *(_OWORD *)(v15 + 16) = v16;
    *(_OWORD *)(v15 + 32) = *(_OWORD *)(v14 + 32);
    *(_DWORD *)(v15 + 48) = *(_DWORD *)(v14 + 48);
    v17 = *((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = v15;
    if (v17)
      MEMORY[0x212BB9B60](v17, 0x1000C407686E5EELL);
    MEMORY[0x212BB9B60](v14, 0x1000C407686E5EELL);
  }
  v31 = 0;
  v18 = operator new();
  *(_OWORD *)v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_QWORD *)(v18 + 48) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 7, (void *)v18, 56, &v31, 0);
  if ((_DWORD)v3 || !v31)
  {
    MEMORY[0x212BB9B60](v18, 0x1000C40B454D1E3);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v19 = operator new();
    v20 = *(_OWORD *)(v18 + 16);
    *(_OWORD *)v19 = *(_OWORD *)v18;
    *(_OWORD *)(v19 + 16) = v20;
    *(_OWORD *)(v19 + 32) = *(_OWORD *)(v18 + 32);
    *(_QWORD *)(v19 + 48) = *(_QWORD *)(v18 + 48);
    v21 = *((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = v19;
    if (v21)
      MEMORY[0x212BB9B60](v21, 0x1000C40B454D1E3);
    MEMORY[0x212BB9B60](v18, 0x1000C40B454D1E3);
  }
  v30 = 0;
  v22 = (void *)operator new();
  bzero(v22, 0x584uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 8, v22, 1412, &v30, 0);
  if ((_DWORD)v3 || !v30)
  {
    MEMORY[0x212BB9B60](v22, 0x1000C4094AF71AFLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v23 = (void *)operator new();
    memcpy(v23, v22, 0x584uLL);
    v24 = *((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = v23;
    if (v24)
      MEMORY[0x212BB9B60](v24, 0x1000C4094AF71AFLL);
    MEMORY[0x212BB9B60](v22, 0x1000C4094AF71AFLL);
  }
  v29 = 0;
  v25 = (void *)operator new();
  bzero(v25, 0x604uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 9, v25, 1540, &v29, 0);
  if (!(_DWORD)v3 && v29)
  {
    v26 = (void *)operator new();
    memcpy(v26, v25, 0x604uLL);
    v27 = *((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = v26;
    if (v27)
      MEMORY[0x212BB9B60](v27, 0x1000C403207AF5FLL);
  }
  MEMORY[0x212BB9B60](v25, 0x1000C403207AF5FLL);
  return v3;
}

void sub_20E2959E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C403207AF5FLL);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetSingleShotRadioSignalReportingRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetSingleShotRadioSignalReportingRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 620855296;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetTimerInfoIndCb_SDK::ARI_IBINetTimerInfoIndCb_SDK(AriSdk::ARI_IBINetTimerInfoIndCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x25930000u, 0);
  *(_QWORD *)result = &off_24C9120C8;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x25930000u, 0);
  *(_QWORD *)result = &off_24C9120C8;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBINetTimerInfoIndCb_SDK::ARI_IBINetTimerInfoIndCb_SDK(AriSdk::ARI_IBINetTimerInfoIndCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C9120C8;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C9120C8;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBINetTimerInfoIndCb_SDK::~ARI_IBINetTimerInfoIndCb_SDK(AriSdk::ARI_IBINetTimerInfoIndCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C9120C8;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINetTimerInfoIndCb_SDK::~ARI_IBINetTimerInfoIndCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINetTimerInfoIndCb_SDK::pack(AriSdk::ARI_IBINetTimerInfoIndCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 4uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBINetTimerInfoIndCb_SDK::unpack(AriSdk::ARI_IBINetTimerInfoIndCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  BOOL v10;
  BOOL v11;
  BOOL v12;

  v12 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v12, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v12;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v11 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v11, 0);
  if ((_DWORD)v3 || !v11)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v6 = (_DWORD *)operator new();
    *v6 = *v5;
    v7 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v6;
    if (v7)
      MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v10 = 0;
  v8 = (_DWORD *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v8, 4, &v10, 0);
  if (!(_DWORD)v3 && v10)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v8);
  MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  return v3;
}

void sub_20E295EF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINetTimerInfoIndCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBINetTimerInfoIndCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 630390784;
}

double AriSdk::ARI_IBISetDeviceRegionCodeReq_SDK::ARI_IBISetDeviceRegionCodeReq_SDK(AriSdk::ARI_IBISetDeviceRegionCodeReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x24930000u, 0);
  *(_QWORD *)v1 = &off_24C912100;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0x24930000u, 0);
  *(_QWORD *)v1 = &off_24C912100;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

double AriSdk::ARI_IBISetDeviceRegionCodeReq_SDK::ARI_IBISetDeviceRegionCodeReq_SDK(AriSdk::ARI_IBISetDeviceRegionCodeReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C912100;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C912100;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

void AriSdk::ARI_IBISetDeviceRegionCodeReq_SDK::~ARI_IBISetDeviceRegionCodeReq_SDK(AriSdk::ARI_IBISetDeviceRegionCodeReq_SDK *this)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C912100;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4077774924);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBISetDeviceRegionCodeReq_SDK::~ARI_IBISetDeviceRegionCodeReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBISetDeviceRegionCodeReq_SDK::pack(AriSdk::ARI_IBISetDeviceRegionCodeReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  _BYTE *v6;
  _BYTE *v7;
  BOOL v8;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v4, 1uLL, 0), !(_DWORD)result))
  {
    v6 = (_BYTE *)*((_QWORD *)this + 9);
    v7 = (_BYTE *)*((_QWORD *)this + 10);
    if (v6)
      v8 = v6 == v7;
    else
      v8 = 1;
    if (v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v6, v7 - v6, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBISetDeviceRegionCodeReq_SDK::unpack(AriSdk::ARI_IBISetDeviceRegionCodeReq_SDK *this)
{
  _BYTE *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  void **v6;
  _BYTE *v7;
  void *v8;
  const char *v9;
  BOOL *v10;
  void *v11;
  void *__p;
  _BYTE *v14;
  uint64_t v15;
  size_t __sz;
  BOOL v17;
  BOOL v18[8];
  char v19;

  v18[0] = 0;
  v2 = (_BYTE *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v2, 1, v18, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v18[0];
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4077774924);
  }
  v17 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v5 = (_DWORD *)operator new[]();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v5, 4, &v17, &__sz);
  if (!(_DWORD)v3 && v17)
  {
    v14 = 0;
    v15 = 0;
    __p = 0;
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&__p, v5, (uint64_t)v5 + __sz, __sz);
    v6 = (void **)((char *)this + 72);
    v8 = __p;
    v7 = v14;
    if ((unint64_t)(v14 - (_BYTE *)__p) < 5)
    {
      v11 = *v6;
      if (*v6)
      {
        *((_QWORD *)this + 10) = v11;
        operator delete(v11);
        *v6 = 0;
        *((_QWORD *)this + 10) = 0;
        *((_QWORD *)this + 11) = 0;
        v8 = __p;
        v7 = v14;
      }
      *((_QWORD *)this + 9) = v8;
      *((_QWORD *)this + 10) = v7;
      *((_QWORD *)this + 11) = v15;
    }
    else
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)v18);
      if (v19 >= 0)
        v10 = v18;
      else
        v10 = *(BOOL **)v18;
      Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v9, v10, 360, (char *)this + 72, v14 - (_BYTE *)__p, 4);
      if (v19 < 0)
        operator delete(*(void **)v18);
      if (__p)
      {
        v14 = __p;
        operator delete(__p);
      }
    }
  }
  MEMORY[0x212BB9B48](v5, 0x1000C8077774924);
  return v3;
}

void sub_20E296324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;

  if (*(char *)(v17 - 33) < 0)
    operator delete(*(void **)(v17 - 56));
  if (__p)
    operator delete(__p);
  MEMORY[0x212BB9B48](v16, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBISetDeviceRegionCodeReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBISetDeviceRegionCodeReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 613613568;
}

AriSdk::MsgBase *AriSdk::ARI_IBISetDeviceRegionCodeRspCb_SDK::ARI_IBISetDeviceRegionCodeRspCb_SDK(AriSdk::ARI_IBISetDeviceRegionCodeRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x25130000u, 0);
  *(_QWORD *)result = &off_24C912138;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0x25130000u, 0);
  *(_QWORD *)result = &off_24C912138;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBISetDeviceRegionCodeRspCb_SDK::ARI_IBISetDeviceRegionCodeRspCb_SDK(AriSdk::ARI_IBISetDeviceRegionCodeRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C912138;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C912138;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBISetDeviceRegionCodeRspCb_SDK::~ARI_IBISetDeviceRegionCodeRspCb_SDK(AriSdk::ARI_IBISetDeviceRegionCodeRspCb_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C912138;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBISetDeviceRegionCodeRspCb_SDK::~ARI_IBISetDeviceRegionCodeRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBISetDeviceRegionCodeRspCb_SDK::pack(AriSdk::ARI_IBISetDeviceRegionCodeRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_IBISetDeviceRegionCodeRspCb_SDK::unpack(AriSdk::ARI_IBISetDeviceRegionCodeRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E2965EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBISetDeviceRegionCodeRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBISetDeviceRegionCodeRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == 622002176;
}

_QWORD *std::vector<IBIUmtsCellInfoT>::__init_with_size[abi:ne180100]<IBIUmtsCellInfoT*,IBIUmtsCellInfoT*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v7 = result;
    result = operator new(28 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + 28 * a4;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_20E2966AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<IBIGsmCellInfoT>::__init_with_size[abi:ne180100]<IBIGsmCellInfoT*,IBIGsmCellInfoT*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v7 = result;
    result = operator new(24 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[3 * a4];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_20E296744(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<IBILteCellInfoT>::__init_with_size[abi:ne180100]<IBILteCellInfoT*,IBILteCellInfoT*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v7 = result;
    result = operator new(32 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[4 * a4];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_20E2967D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<IBIUmtsNeighborCellInfoT>::__init_with_size[abi:ne180100]<IBIUmtsNeighborCellInfoT*,IBIUmtsNeighborCellInfoT*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v7 = result;
    result = operator new(8 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[a4];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_20E296864(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<IBIGsmNeighborCellInfoT>::__init_with_size[abi:ne180100]<IBIGsmNeighborCellInfoT*,IBIGsmNeighborCellInfoT*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v7 = result;
    result = operator new(4 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + 4 * a4;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_20E2968F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<IBILteNeighborCellInfoT>::__init_with_size[abi:ne180100]<IBILteNeighborCellInfoT*,IBILteNeighborCellInfoT*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v7 = result;
    result = operator new(8 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[a4];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_20E296984(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<IBITdsCellInfoT>::__init_with_size[abi:ne180100]<IBITdsCellInfoT*,IBITdsCellInfoT*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v7 = result;
    result = operator new(28 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + 28 * a4;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_20E296A1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<IBITdsNeighborCellInfoT>::__init_with_size[abi:ne180100]<IBITdsNeighborCellInfoT*,IBITdsNeighborCellInfoT*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v7 = result;
    result = operator new(8 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[a4];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_20E296AAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<IBINetCdma1xCellInfo>::__init_with_size[abi:ne180100]<IBINetCdma1xCellInfo*,IBINetCdma1xCellInfo*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v7 = result;
    result = operator new(48 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[6 * a4];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_20E296B44(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<IBINetCdmaEvdoCellInfo>::__init_with_size[abi:ne180100]<IBINetCdmaEvdoCellInfo*,IBINetCdmaEvdoCellInfo*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v7 = result;
    result = operator new(52 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + 52 * a4;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_20E296BDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<IBICdma1xNeighborCellInfo>::__init_with_size[abi:ne180100]<IBICdma1xNeighborCellInfo*,IBICdma1xNeighborCellInfo*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v7 = result;
    result = operator new(8 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[a4];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_20E296C6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<IBICdmaEvdoNeighborCellInfo>::__init_with_size[abi:ne180100]<IBICdmaEvdoNeighborCellInfo*,IBICdmaEvdoNeighborCellInfo*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v7 = result;
    result = operator new(10 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + 10 * a4;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_20E296D04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<IBILteCellInfoV1T>::__init_with_size[abi:ne180100]<IBILteCellInfoV1T*,IBILteCellInfoV1T*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v7 = result;
    result = operator new(36 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + 36 * a4;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_20E296D9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<IBILteNeighborCellInfoV1T>::__init_with_size[abi:ne180100]<IBILteNeighborCellInfoV1T*,IBILteNeighborCellInfoV1T*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v7 = result;
    result = operator new(12 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + 12 * a4;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_20E296E34(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<IBILteCellInfoR15>::__init_with_size[abi:ne180100]<IBILteCellInfoR15*,IBILteCellInfoR15*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v7 = result;
    result = operator new(36 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + 36 * a4;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_20E296ECC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<IBINrCellInfoT>::__init_with_size[abi:ne180100]<IBINrCellInfoT*,IBINrCellInfoT*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v7 = result;
    result = operator new(52 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + 52 * a4;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_20E296F64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<IBINrNeighborCellInfoT>::__init_with_size[abi:ne180100]<IBINrNeighborCellInfoT*,IBINrNeighborCellInfoT*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v7 = result;
    result = operator new(24 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[3 * a4];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_20E296FFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<IBILteCellInfoR15_V2>::__init_with_size[abi:ne180100]<IBILteCellInfoR15_V2*,IBILteCellInfoR15_V2*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v7 = result;
    result = operator new(52 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + 52 * a4;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_20E297094(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<IBILteNeighborCellInfoV2T>::__init_with_size[abi:ne180100]<IBILteNeighborCellInfoV2T*,IBILteNeighborCellInfoV2T*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v7 = result;
    result = operator new(24 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[3 * a4];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_20E29712C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<IBINrCellInfoT_V2>::__init_with_size[abi:ne180100]<IBINrCellInfoT_V2*,IBINrCellInfoT_V2*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v7 = result;
    result = operator new(60 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + 60 * a4;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_20E2971C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<IBINrNeighborCellInfoT_V2>::__init_with_size[abi:ne180100]<IBINrNeighborCellInfoT_V2*,IBINrNeighborCellInfoT_V2*>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    v7 = result;
    result = operator new(32 * a4);
    v8 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[4 * a4];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memcpy(result, a2, v9);
    v7[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_20E297254(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Ari::ClientOutboundMessage::Create(Ari::ClientOutboundMessage *this@<X0>, unsigned __int8 *a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  int v5;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *shared_owners;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v5 = (int)a2;
  v8 = (std::__shared_weak_count *)operator new(0x48uLL);
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24C912590;
  Ari::ClientOutboundMessage::ClientOutboundMessage((Ari::ClientOutboundMessage *)&v8[1], (unsigned __int8 *)this, v5, a3);
  shared_owners = (std::__shared_weak_count *)v8[1].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      goto LABEL_14;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)&v8[1];
    v8[1].__shared_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v15 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)&v8[1];
    v8[1].__shared_owners_ = (uint64_t)v8;
  }
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_14:
  *a4 = v8 + 1;
  a4[1] = v8;
}

void sub_20E297390(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

Ari::ClientOutboundMessage *Ari::ClientOutboundMessage::ClientOutboundMessage(Ari::ClientOutboundMessage *this, unsigned __int8 *a2, int a3, int a4)
{
  AriMsg *BufHeader;
  unint64_t v7;
  AriMsg *v8;
  int v9;
  unsigned __int8 *v11;
  const void *v12;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)this + 3) = 0xAAAAAAAAAAAAAAAALL;
  v11 = &a2[a3];
  v12 = a2;
  std::allocate_shared[abi:ne180100]<std::vector<unsigned char>,std::allocator<std::vector<unsigned char>>,unsigned char const*&,unsigned char const*,void>(&v12, (uint64_t *)&v11, (_QWORD *)this + 2);
  *((_DWORD *)this + 10) = a4;
  BufHeader = AriMsg::GetBufHeader(**((AriMsg ***)this + 2), (const unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) - **((_QWORD **)this + 2)));
  if (BufHeader)
    v7 = (unint64_t)*((unsigned int *)BufHeader + 2) >> 17;
  else
    LODWORD(v7) = 0x8000;
  *((_DWORD *)this + 8) = v7;
  v8 = AriMsg::GetBufHeader(**((AriMsg ***)this + 2), (const unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) - **((_QWORD **)this + 2)));
  if (v8)
    v9 = (*(_DWORD *)((_BYTE *)v8 + 3) & 0x1F800 | ((unsigned __int16)*((_DWORD *)v8 + 2) >> 6)) << 15;
  else
    v9 = 0;
  *((_DWORD *)this + 9) = v9;
  return this;
}

void sub_20E297468(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void Ari::ClientOutboundMessage::~ClientOutboundMessage(Ari::ClientOutboundMessage *this)
{
  std::__shared_weak_count *v2;

  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

uint64_t Ari::ClientOutboundMessage::flush(Ari::ClientOutboundMessage *this)
{
  uint64_t Instance;

  Instance = AriHost::GetInstance(this);
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(Instance + 608) + 40))(*(_QWORD *)(Instance + 608), **((_QWORD **)this + 2), *(_DWORD *)(*((_QWORD *)this + 2) + 8) - **((_QWORD **)this + 2), *((unsigned int *)this + 10));
}

uint64_t Ari::ClientOutboundMessage::getContextId(Ari::ClientOutboundMessage *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t Ari::ClientOutboundMessage::getGmid(Ari::ClientOutboundMessage *this)
{
  return *((unsigned int *)this + 9);
}

void Ari::ClientOutboundMessage::asString(AriMsg ***this@<X0>, uint64_t a2@<X8>)
{
  GetBufDigest(*this[2], 0, (const unsigned __int8 *)(this[2][1] - *this[2]), a2);
}

BOOL Ari::ClientOutboundMessage::isAllowedDuringStall(Ari::ClientOutboundMessage *this)
{
  unsigned int v2;

  v2 = *((_DWORD *)this + 9);
  return std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::find<unsigned int>(ARIHOST_GMID_DISALLOWED_DURING_STALL, &v2) == 0;
}

BOOL Ari::ClientOutboundMessage::isLowPriority(Ari::ClientOutboundMessage *this)
{
  unsigned int v1;
  int v2;
  uint64_t v3;
  int *v5;
  int v6;

  v1 = *((_DWORD *)this + 9);
  if (v1 >> 26 != 51)
    return 0;
  v2 = (v1 >> 15) & 0x3FF;
  if (v2 == 401)
  {
    v3 = 0;
  }
  else
  {
    v3 = 0;
    v5 = &dword_24C909274;
    do
    {
      ++v3;
      v6 = *v5;
      v5 += 14;
    }
    while (v6 != v2);
  }
  return ARIMSGDEF_GROUP51_ice_awds[56 * v3 + 8] == 0;
}

uint64_t Ari::ClientOutboundMessage::cancel(Ari::ClientOutboundMessage *this)
{
  return AriHost::CancelTrx((AriHost *)*((unsigned int *)this + 8), *((_DWORD *)this + 9), -85);
}

uint64_t Ari::ClientWorkQueue::ClientWorkQueue(uint64_t a1, __int128 *a2, char a3)
{
  std::string *v4;
  __int128 v5;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 48) = a3;
  v4 = (std::string *)(a1 + 56);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_20E297638(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<std::shared_ptr<Ari::ClientOutboundMessage>>::~deque[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Ari::ClientWorkQueue::~ClientWorkQueue(Ari::ClientWorkQueue *this)
{
  const char *v2;
  void **v3;
  _QWORD *v4;
  const char *v5;
  void *__p[2];
  char v7;

  if (*((_QWORD *)this + 5))
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host_queue.cpp", "~ClientWorkQueue", (uint64_t)__p);
    if (v7 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    v4 = (_QWORD *)((char *)this + 56);
    if (*((char *)this + 79) < 0)
      v4 = (_QWORD *)*v4;
    v5 = "stalled";
    if (!*((_BYTE *)this + 48))
      v5 = "not stalled";
    Ari::Log((Ari *)8, "(%s:%d) Destroying non-empty AriHost [%s] (%s)! %u items remain", v2, v3, 104, v4, v5, *((_QWORD *)this + 5));
    if (v7 < 0)
      operator delete(__p[0]);
  }
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  std::deque<std::shared_ptr<Ari::ClientOutboundMessage>>::~deque[abi:ne180100]((uint64_t)this);
}

uint64_t Ari::ClientWorkQueue::add(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  void **v5;
  const char *v6;
  void **v7;
  _QWORD *v8;
  uint64_t Instance;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void *v57;
  __int128 v58;
  unint64_t *v59;
  unint64_t v60;
  void **v61;
  const char *v62;
  void **v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  void *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  int64_t v86;
  void *v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t i;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  void *v119;
  void *__p[2];
  char v121;
  void *v122[2];
  char v123;

  v2 = *a2;
  if (!*(_BYTE *)(a1 + 48))
  {
    Instance = AriHost::GetInstance((AriHost *)a1);
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(Instance + 608) + 40))(*(_QWORD *)(Instance + 608), **(_QWORD **)(v2 + 16), *(_DWORD *)(*(_QWORD *)(v2 + 16) + 8) - **(_QWORD **)(v2 + 16), *(unsigned int *)(v2 + 40));
  }
  LODWORD(v122[0]) = *(_DWORD *)(v2 + 36);
  v5 = v122;
  if (std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::find<unsigned int>(ARIHOST_GMID_DISALLOWED_DURING_STALL, (unsigned int *)v122))
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host_queue.cpp", "add", (uint64_t)v122);
    if (v123 < 0)
      v5 = (void **)v122[0];
    GetBufDigest(**(AriMsg ***)(*a2 + 16), 0, (const unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*a2 + 16) + 8) - **(_QWORD **)(*a2 + 16)), (uint64_t)__p);
    if (v121 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    v8 = (_QWORD *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0)
      v8 = (_QWORD *)*v8;
    Ari::Log((Ari *)0x10, "(%s:%d) REQ(%s) not allowed during stall [%s]", v6, v5, 120, v7, v8);
    if (v121 < 0)
      operator delete(__p[0]);
    if (v123 < 0)
      operator delete(v122[0]);
    return 0xFFFFFFFFLL;
  }
  v11 = *(char **)(a1 + 16);
  v12 = *(char **)(a1 + 8);
  v13 = v11 - v12;
  if (v11 == v12)
    v14 = 0;
  else
    v14 = 32 * (v11 - v12) - 1;
  v16 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  v17 = v15 + v16;
  if (v14 == v15 + v16)
  {
    if (v16 < 0x100)
    {
      v31 = v13 >> 3;
      v32 = *(char **)(a1 + 24);
      v33 = *(char **)a1;
      v34 = (uint64_t)&v32[-*(_QWORD *)a1];
      if (v13 >> 3 >= (unint64_t)(v34 >> 3))
      {
        v37 = v34 >> 2;
        if (v32 == v33)
          v38 = 1;
        else
          v38 = v37;
        v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Ari::ClientOutboundMessage> *>>(v38);
        v41 = v40;
        v42 = operator new(0x1000uLL);
        v43 = &v39[8 * v31];
        v44 = &v39[8 * v41];
        if (v31 == v41)
        {
          v45 = 8 * v31;
          if (v13 < 1)
          {
            v87 = v42;
            v88 = v45 >> 2;
            if (v11 == v12)
              v89 = 1;
            else
              v89 = v88;
            v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Ari::ClientOutboundMessage> *>>(v89);
            v43 = &v90[8 * (v89 >> 2)];
            v44 = &v90[8 * v91];
            if (v39)
              operator delete(v39);
            v39 = v90;
            v42 = v87;
          }
          else
          {
            v46 = v45 >> 3;
            if (v46 >= -1)
              v47 = v46 + 1;
            else
              v47 = v46 + 2;
            v43 -= 8 * (v47 >> 1);
          }
        }
        *(_QWORD *)v43 = v42;
        v92 = v43 + 8;
        for (i = *(_QWORD *)(a1 + 16); i != *(_QWORD *)(a1 + 8); i -= 8)
        {
          if (v43 == v39)
          {
            if (v92 >= v44)
            {
              if (v44 == v39)
                v98 = 1;
              else
                v98 = (v44 - v39) >> 2;
              v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Ari::ClientOutboundMessage> *>>(v98);
              v101 = v99;
              v43 = &v99[(2 * v98 + 6) & 0xFFFFFFFFFFFFFFF8];
              v103 = v92 - v39;
              v102 = v92 == v39;
              v92 = v43;
              if (!v102)
              {
                v92 = &v43[v103 & 0xFFFFFFFFFFFFFFF8];
                v104 = 8 * (v103 >> 3);
                v105 = v43;
                v106 = (uint64_t *)v39;
                do
                {
                  v107 = *v106++;
                  *(_QWORD *)v105 = v107;
                  v105 += 8;
                  v104 -= 8;
                }
                while (v104);
              }
              v44 = &v99[8 * v100];
              if (v39)
                operator delete(v39);
              v39 = v101;
            }
            else
            {
              v94 = (v44 - v92) >> 3;
              if (v94 >= -1)
                v95 = v94 + 1;
              else
                v95 = v94 + 2;
              v96 = v95 >> 1;
              v43 = &v39[8 * (v95 >> 1)];
              v97 = v39;
              if (v92 != v39)
              {
                memmove(v43, v39, v92 - v39);
                v97 = v92;
              }
              v92 = &v97[8 * v96];
            }
          }
          v108 = *(_QWORD *)(i - 8);
          *((_QWORD *)v43 - 1) = v108;
          v43 -= 8;
        }
        v109 = *(void **)a1;
        *(_QWORD *)a1 = v39;
        *(_QWORD *)(a1 + 8) = v43;
        *(_QWORD *)(a1 + 16) = v92;
        *(_QWORD *)(a1 + 24) = v44;
        if (v109)
          operator delete(v109);
        goto LABEL_51;
      }
      v35 = operator new(0x1000uLL);
      v36 = v35;
      if (v32 == v11)
      {
        if (v12 == v33)
        {
          if (v11 == v12)
            v65 = 1;
          else
            v65 = (v32 - v12) >> 2;
          v66 = 2 * v65;
          v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Ari::ClientOutboundMessage> *>>(v65);
          v12 = &v67[(v66 + 6) & 0xFFFFFFFFFFFFFFF8];
          v69 = *(uint64_t **)(a1 + 8);
          v70 = v12;
          v71 = *(_QWORD *)(a1 + 16) - (_QWORD)v69;
          if (v71)
          {
            v70 = &v12[v71 & 0xFFFFFFFFFFFFFFF8];
            v72 = 8 * (v71 >> 3);
            v73 = &v67[(v66 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              v74 = *v69++;
              *(_QWORD *)v73 = v74;
              v73 += 8;
              v72 -= 8;
            }
            while (v72);
          }
          v75 = *(void **)a1;
          *(_QWORD *)a1 = v67;
          *(_QWORD *)(a1 + 8) = v12;
          *(_QWORD *)(a1 + 16) = v70;
          *(_QWORD *)(a1 + 24) = &v67[8 * v68];
          if (v75)
          {
            operator delete(v75);
            v12 = *(char **)(a1 + 8);
          }
        }
        *((_QWORD *)v12 - 1) = v36;
        v76 = *(char **)(a1 + 8);
        v77 = *(char **)(a1 + 16);
        *(_QWORD *)(a1 + 8) = v76 - 8;
        v78 = *((_QWORD *)v76 - 1);
        *(_QWORD *)(a1 + 8) = v76;
        if (v77 == *(char **)(a1 + 24))
        {
          v79 = (uint64_t)&v76[-*(_QWORD *)a1];
          if ((unint64_t)v76 <= *(_QWORD *)a1)
          {
            if (v77 == *(char **)a1)
              v110 = 1;
            else
              v110 = (uint64_t)&v77[-*(_QWORD *)a1] >> 2;
            v111 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Ari::ClientOutboundMessage> *>>(v110);
            v113 = &v111[8 * (v110 >> 2)];
            v114 = *(uint64_t **)(a1 + 8);
            v77 = v113;
            v115 = *(_QWORD *)(a1 + 16) - (_QWORD)v114;
            if (v115)
            {
              v77 = &v113[v115 & 0xFFFFFFFFFFFFFFF8];
              v116 = 8 * (v115 >> 3);
              v117 = &v111[8 * (v110 >> 2)];
              do
              {
                v118 = *v114++;
                *(_QWORD *)v117 = v118;
                v117 += 8;
                v116 -= 8;
              }
              while (v116);
            }
            v119 = *(void **)a1;
            *(_QWORD *)a1 = v111;
            *(_QWORD *)(a1 + 8) = v113;
            *(_QWORD *)(a1 + 16) = v77;
            *(_QWORD *)(a1 + 24) = &v111[8 * v112];
            if (v119)
            {
              operator delete(v119);
              v77 = *(char **)(a1 + 16);
            }
          }
          else
          {
            v80 = v79 >> 3;
            v23 = v79 >> 3 < -1;
            v81 = (v79 >> 3) + 2;
            if (v23)
              v82 = v81;
            else
              v82 = v80 + 1;
            v83 = -(v82 >> 1);
            v84 = v82 >> 1;
            v85 = &v76[-8 * v84];
            v86 = v77 - v76;
            if (v77 != v76)
            {
              memmove(&v76[-8 * v84], v76, v77 - v76);
              v76 = *(char **)(a1 + 8);
            }
            v77 = &v85[v86];
            *(_QWORD *)(a1 + 8) = &v76[8 * v83];
            *(_QWORD *)(a1 + 16) = &v85[v86];
          }
        }
        *(_QWORD *)v77 = v78;
      }
      else
      {
        *(_QWORD *)v11 = v35;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v16 - 256;
      v20 = *(_QWORD *)v12;
      v18 = v12 + 8;
      v19 = v20;
      *(_QWORD *)(a1 + 8) = v18;
      if (v11 == *(char **)(a1 + 24))
      {
        v21 = (uint64_t)&v18[-*(_QWORD *)a1];
        if ((unint64_t)v18 <= *(_QWORD *)a1)
        {
          if (v11 == *(char **)a1)
            v48 = 1;
          else
            v48 = (uint64_t)&v11[-*(_QWORD *)a1] >> 2;
          v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Ari::ClientOutboundMessage> *>>(v48);
          v51 = &v49[8 * (v48 >> 2)];
          v52 = *(uint64_t **)(a1 + 8);
          v11 = v51;
          v53 = *(_QWORD *)(a1 + 16) - (_QWORD)v52;
          if (v53)
          {
            v11 = &v51[v53 & 0xFFFFFFFFFFFFFFF8];
            v54 = 8 * (v53 >> 3);
            v55 = &v49[8 * (v48 >> 2)];
            do
            {
              v56 = *v52++;
              *(_QWORD *)v55 = v56;
              v55 += 8;
              v54 -= 8;
            }
            while (v54);
          }
          v57 = *(void **)a1;
          *(_QWORD *)a1 = v49;
          *(_QWORD *)(a1 + 8) = v51;
          *(_QWORD *)(a1 + 16) = v11;
          *(_QWORD *)(a1 + 24) = &v49[8 * v50];
          if (v57)
          {
            operator delete(v57);
            v11 = *(char **)(a1 + 16);
          }
        }
        else
        {
          v22 = v21 >> 3;
          v23 = v21 >> 3 < -1;
          v24 = (v21 >> 3) + 2;
          if (v23)
            v25 = v24;
          else
            v25 = v22 + 1;
          v26 = -(v25 >> 1);
          v27 = v25 >> 1;
          v28 = &v18[-8 * v27];
          v29 = v11 - v18;
          if (v11 != v18)
          {
            memmove(&v18[-8 * v27], v18, v11 - v18);
            v11 = *(char **)(a1 + 8);
          }
          v30 = &v11[8 * v26];
          v11 = &v28[v29];
          *(_QWORD *)(a1 + 8) = v30;
          *(_QWORD *)(a1 + 16) = &v28[v29];
        }
      }
      *(_QWORD *)v11 = v19;
    }
    *(_QWORD *)(a1 + 16) += 8;
LABEL_51:
    v12 = *(char **)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 40);
    v17 = v15 + *(_QWORD *)(a1 + 32);
  }
  v58 = *(_OWORD *)a2;
  *(_OWORD *)(*(_QWORD *)&v12[(v17 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v17) = *(_OWORD *)a2;
  if (*((_QWORD *)&v58 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
    v15 = *(_QWORD *)(a1 + 40);
  }
  *(_QWORD *)(a1 + 40) = v15 + 1;
  v61 = v122;
  AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host_queue.cpp", "add", (uint64_t)v122);
  if (v123 < 0)
    v61 = (void **)v122[0];
  GetBufDigest(**(AriMsg ***)(*a2 + 16), 0, (const unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*a2 + 16) + 8) - **(_QWORD **)(*a2 + 16)), (uint64_t)__p);
  if (v121 >= 0)
    v63 = __p;
  else
    v63 = (void **)__p[0];
  v64 = (_QWORD *)(a1 + 56);
  if (*(char *)(a1 + 79) < 0)
    v64 = (_QWORD *)*v64;
  Ari::Log((Ari *)0x20, "(%s:%d) REQ(%s) added in [%s]", v62, v61, 115, v63, v64);
  if (v121 < 0)
    operator delete(__p[0]);
  if (v123 < 0)
    operator delete(v122[0]);
  return 0;
}

void sub_20E297DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v25;

  operator delete(v25);
  if (v24)
    operator delete(v24);
  _Unwind_Resume(a1);
}

uint64_t Ari::ClientWorkQueue::stall(Ari::ClientWorkQueue *this)
{
  *((_BYTE *)this + 48) = 1;
  return 0;
}

uint64_t Ari::ClientWorkQueue::flush(Ari::ClientWorkQueue *this)
{
  uint64_t v2;
  const char *v3;
  void **v4;
  _QWORD *v5;
  AriHost *v6;
  void **v7;
  void **v8;
  unint64_t v9;
  void **v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Instance;
  char *v15;
  unint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *__p[2];
  char v26;

  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host_queue.cpp", "flush", (uint64_t)__p);
    if (v26 >= 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    v5 = (_QWORD *)((char *)this + 56);
    if (*((char *)this + 79) < 0)
      v5 = (_QWORD *)*v5;
    Ari::Log((Ari *)0x20, "(%s:%d) flushing %zu items [%s]", v3, v4, 139, v2, v5);
    if (v26 < 0)
      operator delete(__p[0]);
    v7 = (void **)*((_QWORD *)this + 1);
    v8 = (void **)*((_QWORD *)this + 2);
    if (v8 == v7)
    {
      v8 = (void **)*((_QWORD *)this + 1);
    }
    else
    {
      v9 = *((_QWORD *)this + 4);
      v10 = &v7[v9 >> 8];
      v11 = (char *)*v10 + 16 * v9;
      v12 = *(uint64_t *)((char *)v7 + (((*((_QWORD *)this + 5) + v9) >> 5) & 0x7FFFFFFFFFFFFF8))
          + 16 * (*((_BYTE *)this + 40) + v9);
      if (v11 != (char *)v12)
      {
        do
        {
          v13 = *(_QWORD *)v11;
          v11 += 16;
          Instance = AriHost::GetInstance(v6);
          v6 = (AriHost *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(Instance + 608)
                                                                                    + 40))(*(_QWORD *)(Instance + 608), **(_QWORD **)(v13 + 16), *(_DWORD *)(*(_QWORD *)(v13 + 16) + 8) - **(_QWORD **)(v13 + 16), *(unsigned int *)(v13 + 40));
          if (v11 - (_BYTE *)*v10 == 4096)
          {
            v15 = (char *)v10[1];
            ++v10;
            v11 = v15;
          }
        }
        while (v11 != (char *)v12);
        v7 = (void **)*((_QWORD *)this + 1);
        v8 = (void **)*((_QWORD *)this + 2);
      }
      if (v8 == v7)
      {
        v7 = v8;
      }
      else
      {
        v16 = *((_QWORD *)this + 4);
        v17 = &v7[v16 >> 8];
        v18 = (uint64_t)*v17 + 16 * v16;
        v19 = *(uint64_t *)((char *)v7 + (((*((_QWORD *)this + 5) + v16) >> 5) & 0x7FFFFFFFFFFFFF8))
            + 16 * (*((_BYTE *)this + 40) + v16);
        if (v18 != v19)
        {
          do
          {
            v18 = std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v18) + 16;
            if (v18 - (_QWORD)*v17 == 4096)
            {
              v20 = (uint64_t)v17[1];
              ++v17;
              v18 = v20;
            }
          }
          while (v18 != v19);
          v7 = (void **)*((_QWORD *)this + 1);
          v8 = (void **)*((_QWORD *)this + 2);
        }
      }
    }
    *((_QWORD *)this + 5) = 0;
    v21 = (char *)v8 - (char *)v7;
    if (v21 >= 0x11)
    {
      do
      {
        operator delete(*v7);
        v22 = *((_QWORD *)this + 2);
        v7 = (void **)(*((_QWORD *)this + 1) + 8);
        *((_QWORD *)this + 1) = v7;
        v21 = v22 - (_QWORD)v7;
      }
      while (v21 > 0x10);
    }
    if (v21 >> 3 == 1)
    {
      v23 = 128;
      goto LABEL_29;
    }
    if (v21 >> 3 == 2)
    {
      v23 = 256;
LABEL_29:
      *((_QWORD *)this + 4) = v23;
    }
  }
  *((_BYTE *)this + 48) = 0;
  return 0;
}

void sub_20E298048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Ari::ClientWorkQueue::cancel(Ari::ClientWorkQueue *this)
{
  uint64_t v2;
  const char *v3;
  void **v4;
  _QWORD *v5;
  void **v6;
  void **v7;
  unint64_t v8;
  void **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *__p[2];
  char v24;

  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host_queue.cpp", "cancel", (uint64_t)__p);
    if (v24 >= 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    v5 = (_QWORD *)((char *)this + 56);
    if (*((char *)this + 79) < 0)
      v5 = (_QWORD *)*v5;
    Ari::Log((Ari *)0x20, "(%s:%d) cancelling %zu items [%s]", v3, v4, 154, v2, v5);
    if (v24 < 0)
      operator delete(__p[0]);
    v6 = (void **)*((_QWORD *)this + 1);
    v7 = (void **)*((_QWORD *)this + 2);
    if (v7 == v6)
    {
      v7 = (void **)*((_QWORD *)this + 1);
    }
    else
    {
      v8 = *((_QWORD *)this + 4);
      v9 = &v6[v8 >> 8];
      v10 = (char *)*v9 + 16 * v8;
      v11 = *(uint64_t *)((char *)v6 + (((*((_QWORD *)this + 5) + v8) >> 5) & 0x7FFFFFFFFFFFFF8))
          + 16 * (*((_BYTE *)this + 40) + v8);
      if (v10 != (char *)v11)
      {
        do
        {
          v12 = *(_QWORD *)v10;
          v10 += 16;
          AriHost::CancelTrx((AriHost *)*(unsigned int *)(v12 + 32), *(_DWORD *)(v12 + 36), -85);
          if (v10 - (_BYTE *)*v9 == 4096)
          {
            v13 = (char *)v9[1];
            ++v9;
            v10 = v13;
          }
        }
        while (v10 != (char *)v11);
        v6 = (void **)*((_QWORD *)this + 1);
        v7 = (void **)*((_QWORD *)this + 2);
      }
      if (v7 == v6)
      {
        v6 = v7;
      }
      else
      {
        v14 = *((_QWORD *)this + 4);
        v15 = &v6[v14 >> 8];
        v16 = (uint64_t)*v15 + 16 * v14;
        v17 = *(uint64_t *)((char *)v6 + (((*((_QWORD *)this + 5) + v14) >> 5) & 0x7FFFFFFFFFFFFF8))
            + 16 * (*((_BYTE *)this + 40) + v14);
        if (v16 != v17)
        {
          do
          {
            v16 = std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v16) + 16;
            if (v16 - (_QWORD)*v15 == 4096)
            {
              v18 = (uint64_t)v15[1];
              ++v15;
              v16 = v18;
            }
          }
          while (v16 != v17);
          v6 = (void **)*((_QWORD *)this + 1);
          v7 = (void **)*((_QWORD *)this + 2);
        }
      }
    }
    *((_QWORD *)this + 5) = 0;
    v19 = (char *)v7 - (char *)v6;
    if (v19 >= 0x11)
    {
      do
      {
        operator delete(*v6);
        v20 = *((_QWORD *)this + 2);
        v6 = (void **)(*((_QWORD *)this + 1) + 8);
        *((_QWORD *)this + 1) = v6;
        v19 = v20 - (_QWORD)v6;
      }
      while (v19 > 0x10);
    }
    if (v19 >> 3 == 1)
    {
      v21 = 128;
      goto LABEL_29;
    }
    if (v19 >> 3 == 2)
    {
      v21 = 256;
LABEL_29:
      *((_QWORD *)this + 4) = v21;
    }
  }
  *((_BYTE *)this + 48) = 1;
  return 0;
}

void sub_20E29823C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Ari::ClientWorkQueue::abort(int64x2_t *this, int a2)
{
  unint64_t v4;
  void **v5;
  void **v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void **v13;
  const char *v14;
  void **v15;
  void **v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int8 v32;
  __int128 **v33;
  uint64_t *v34;
  void *v35;
  unint64_t v36;
  __int128 *v37;
  unint64_t v38;
  __int128 **v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 *v46;
  uint64_t *v47;
  void *v48;
  __int128 **v49;
  __int128 *v50;
  __int128 *v51;
  int64x2_t v52;
  uint64_t v53;
  void **v54;
  uint64_t v55;
  uint64_t v56;
  void **v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  void **v61;
  uint64_t *v62;
  uint64_t v64;
  uint64_t v65;
  void *__p[2];
  char v67;
  void *v68[3];

  if (this[2].i64[1])
  {
    v65 = this[2].i64[1];
    v4 = this[2].u64[0];
    v5 = (void **)this->i64[1];
    v6 = (void **)this[1].i64[0];
    v7 = (char *)&v5[v4 >> 8];
    if (v6 == v5)
      v8 = 0;
    else
      v8 = *(_QWORD *)v7 + 16 * v4;
LABEL_5:
    v9 = -v8;
    while (1)
    {
      v10 = v6 == v5
          ? 0
          : (uint64_t)(*(char **)((char *)v5 + (((this[2].i64[1] + v4) >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * (this[2].i8[8] + v4));
      if (v8 == v10)
        break;
      if (((*(_DWORD *)(*(_QWORD *)v8 + 32) >> 8) & 0x7F) == a2)
      {
        AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host_queue.cpp", "abort", (uint64_t)v68);
        v12 = SHIBYTE(v68[2]);
        v13 = (void **)v68[0];
        GetBufDigest(**(AriMsg ***)(*(_QWORD *)v8 + 16), 0, (const unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 16) + 8)- **(_QWORD **)(*(_QWORD *)v8 + 16)), (uint64_t)__p);
        v15 = v68;
        if (v12 < 0)
          v15 = v13;
        if (v67 >= 0)
          v16 = __p;
        else
          v16 = (void **)__p[0];
        Ari::Log((Ari *)0x20, "(%s:%d) aborting %s", v14, v15, 177, v16);
        if (v67 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v68[2]) < 0)
          operator delete(v68[0]);
        AriHost::CancelTrx((AriHost *)*(unsigned int *)(*(_QWORD *)v8 + 32), *(_DWORD *)(*(_QWORD *)v8 + 36), -85);
        v17 = this[2].u64[0];
        v18 = this->i64[1];
        v19 = (char *)(v18 + 8 * (v17 >> 8));
        v64 = this[1].i64[0];
        if (v64 == v18)
          v20 = 0;
        else
          v20 = *(_QWORD *)v19 + 16 * v17;
        if (v8 == v20)
          v21 = 0;
        else
          v21 = ((-v9 - *(_QWORD *)v7) >> 4) + 32 * (v7 - v19) - ((v20 - *(_QWORD *)v19) >> 4);
        v22 = v20;
        v23 = std::__deque_iterator<std::shared_ptr<Ari::ClientOutboundMessage>,std::shared_ptr<Ari::ClientOutboundMessage>*,std::shared_ptr<Ari::ClientOutboundMessage>&,std::shared_ptr<Ari::ClientOutboundMessage>**,long,256l>::operator+[abi:ne180100]((_QWORD *)(v18 + 8 * (v17 >> 8)), v20, v21);
        v24 = v23;
        v26 = v25;
        v27 = this[2].i64[1];
        v28 = *v23;
        v29 = v26 - *v23;
        v30 = v29 >> 4;
        if (v21 <= (unint64_t)(v27 - 1) >> 1)
        {
          if (v29 < -15)
          {
            v34 = &v23[-((unint64_t)(254 - v30) >> 8)];
            v35 = (void *)(*v34 + 16 * ~(-2 - v30));
          }
          else
          {
            v34 = &v23[(unint64_t)(v30 + 1) >> 8];
            v35 = (void *)(*v34 + 16 * (v30 + 1));
          }
          v41 = v21;
          if (v19 == (char *)v23)
          {
            v45 = v22;
            v44 = v26;
          }
          else
          {
            memset(v68, 170, sizeof(v68));
            std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<Ari::ClientOutboundMessage> *,std::__deque_iterator<std::shared_ptr<Ari::ClientOutboundMessage>,std::shared_ptr<Ari::ClientOutboundMessage> *,std::shared_ptr<Ari::ClientOutboundMessage>&,std::shared_ptr<Ari::ClientOutboundMessage> **,long,256l>,0>((uint64_t)v68, v28, v26, v34, (uint64_t)v35);
            v34 = (uint64_t *)v68[1];
            v35 = v68[2];
            v42 = v24 - 1;
            while (v42 != (uint64_t *)v19)
            {
              v43 = *v42--;
              memset(v68, 170, sizeof(v68));
              std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<Ari::ClientOutboundMessage> *,std::__deque_iterator<std::shared_ptr<Ari::ClientOutboundMessage>,std::shared_ptr<Ari::ClientOutboundMessage> *,std::shared_ptr<Ari::ClientOutboundMessage>&,std::shared_ptr<Ari::ClientOutboundMessage> **,long,256l>,0>((uint64_t)v68, v43, v43 + 4096, v34, (uint64_t)v35);
              v34 = (uint64_t *)v68[1];
              v35 = v68[2];
            }
            v44 = *(_QWORD *)v19 + 4096;
            v45 = v22;
          }
          std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<Ari::ClientOutboundMessage> *,std::__deque_iterator<std::shared_ptr<Ari::ClientOutboundMessage>,std::shared_ptr<Ari::ClientOutboundMessage> *,std::shared_ptr<Ari::ClientOutboundMessage>&,std::shared_ptr<Ari::ClientOutboundMessage> **,long,256l>,0>((uint64_t)v68, v45, v44, v34, (uint64_t)v35);
          std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v22);
          v52 = vaddq_s64(this[2], (int64x2_t)xmmword_20E317690);
          this[2] = v52;
          v4 = v52.i64[0];
          v5 = (void **)this->i64[1];
          if (v52.i64[0] >= 0x200uLL)
          {
            operator delete(*v5);
            v5 = (void **)(this->i64[1] + 8);
            this->i64[1] = (uint64_t)v5;
            v4 = this[2].i64[0] - 256;
            this[2].i64[0] = v4;
          }
          v53 = v41;
        }
        else
        {
          v31 = v21;
          if (v29 < -15)
          {
            v36 = 254 - v30;
            v32 = ~(_BYTE)v36;
            v33 = (__int128 **)&v23[-(v36 >> 8)];
          }
          else
          {
            v32 = v30 + 1;
            v33 = (__int128 **)&v23[(unint64_t)(v30 + 1) >> 8];
          }
          v37 = &(*v33)[v32];
          v38 = v27 + v17;
          v39 = (__int128 **)(v18 + 8 * (v38 >> 8));
          if (v64 == v18)
            v40 = 0;
          else
            v40 = (uint64_t)&(*v39)[v38];
          if (v33 == v39)
          {
            memset(v68, 170, sizeof(v68));
            v51 = (__int128 *)v40;
            v47 = v23;
            v48 = (void *)v26;
          }
          else
          {
            v46 = *v33 + 256;
            memset(v68, 170, sizeof(v68));
            std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<Ari::ClientOutboundMessage> *,std::__deque_iterator<std::shared_ptr<Ari::ClientOutboundMessage>,std::shared_ptr<Ari::ClientOutboundMessage> *,std::shared_ptr<Ari::ClientOutboundMessage>&,std::shared_ptr<Ari::ClientOutboundMessage> **,long,256l>,0>((uint64_t)v68, v37, v46, v23, v26);
            v47 = (uint64_t *)v68[1];
            v48 = v68[2];
            v49 = v33 + 1;
            while (v49 != v39)
            {
              v50 = *v49++;
              memset(v68, 170, sizeof(v68));
              std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<Ari::ClientOutboundMessage> *,std::__deque_iterator<std::shared_ptr<Ari::ClientOutboundMessage>,std::shared_ptr<Ari::ClientOutboundMessage> *,std::shared_ptr<Ari::ClientOutboundMessage>&,std::shared_ptr<Ari::ClientOutboundMessage> **,long,256l>,0>((uint64_t)v68, v50, v50 + 256, v47, (uint64_t)v48);
              v47 = (uint64_t *)v68[1];
              v48 = v68[2];
            }
            v37 = *v39;
            memset(v68, 170, sizeof(v68));
            v51 = (__int128 *)v40;
          }
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<Ari::ClientOutboundMessage> *,std::__deque_iterator<std::shared_ptr<Ari::ClientOutboundMessage>,std::shared_ptr<Ari::ClientOutboundMessage> *,std::shared_ptr<Ari::ClientOutboundMessage>&,std::shared_ptr<Ari::ClientOutboundMessage> **,long,256l>,0>((uint64_t)v68, v37, v51, v47, (uint64_t)v48);
          std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v68[2]);
          v5 = (void **)this->i64[1];
          v54 = (void **)this[1].i64[0];
          v4 = this[2].u64[0];
          v55 = this[2].i64[1];
          this[2].i64[1] = v55 - 1;
          v56 = 32 * ((char *)v54 - (char *)v5) - 1;
          if (v54 == v5)
            v56 = 0;
          v53 = v31;
          if (v56 - (v55 + v4) - 511 <= 0xFFFFFFFFFFFFFDFFLL)
          {
            operator delete(*(v54 - 1));
            v5 = (void **)this->i64[1];
            this[1].i64[0] -= 8;
            v4 = this[2].u64[0];
          }
        }
        v57 = &v5[v4 >> 8];
        v6 = (void **)this[1].i64[0];
        if (v6 == v5)
          v58 = 0;
        else
          v58 = (uint64_t)*v57 + 16 * v4;
        v7 = (char *)std::__deque_iterator<std::shared_ptr<Ari::ClientOutboundMessage>,std::shared_ptr<Ari::ClientOutboundMessage>*,std::shared_ptr<Ari::ClientOutboundMessage>&,std::shared_ptr<Ari::ClientOutboundMessage>**,long,256l>::operator+[abi:ne180100](v57, v58, v53);
        v8 = v59;
        goto LABEL_5;
      }
      v8 += 16;
      v9 -= 16;
      if (-4096 - *(_QWORD *)v7 == v9)
      {
        v11 = *((_QWORD *)v7 + 1);
        v7 += 8;
        v8 = v11;
        goto LABEL_5;
      }
    }
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host_queue.cpp", "abort", (uint64_t)v68);
    if (SHIBYTE(v68[2]) >= 0)
      v61 = v68;
    else
      v61 = (void **)v68[0];
    v62 = &this[3].i64[1];
    if (this[4].i8[15] < 0)
      v62 = (uint64_t *)*v62;
    Ari::Log((Ari *)0x20, "(%s:%d) aborted %zu items [%s]", v60, v61, 186, v65 - this[2].i64[1], v62);
    if (SHIBYTE(v68[2]) < 0)
      operator delete(v68[0]);
  }
  return 0;
}

void sub_20E298790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

BOOL Ari::ClientWorkQueue::containsCtx(Ari::ClientWorkQueue *this, uint64_t a2)
{
  const char *v4;
  void **v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t *v18;
  void *__p[2];
  char v21;

  if (!*((_BYTE *)this + 48))
  {
    AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/ari_host/src/ari_host_queue.cpp", "containsCtx", (uint64_t)__p);
    if (v21 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    v6 = (_QWORD *)((char *)this + 56);
    if (*((char *)this + 79) < 0)
      v6 = (_QWORD *)*v6;
    Ari::Log((Ari *)8, "(%s:%d) Checking for item 0x%x in queue when not stalled! [%s]", v4, v5, 194, a2, v6);
    if (v21 < 0)
      operator delete(__p[0]);
  }
  v7 = *((_QWORD *)this + 1);
  if (*((_QWORD *)this + 2) == v7)
  {
    v9 = 0;
    v11 = 0;
  }
  else
  {
    v8 = *((_QWORD *)this + 4);
    v9 = *(_QWORD *)(v7 + (((*((_QWORD *)this + 5) + v8) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((_BYTE *)this + 40) + v8);
    v10 = (_QWORD *)(v7 + 8 * (v8 >> 8));
    v11 = (uint64_t *)(*v10 + 16 * v8);
    while (v11 != (uint64_t *)v9)
    {
      v12 = *v11;
      v13 = (std::__shared_weak_count *)v11[1];
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        v16 = *(_DWORD *)(v12 + 32);
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        if (v16 == (_DWORD)a2)
          return v9 != (_QWORD)v11;
      }
      else if (*(_DWORD *)(v12 + 32) == (_DWORD)a2)
      {
        return v9 != (_QWORD)v11;
      }
      v11 += 2;
      if ((uint64_t *)((char *)v11 - *v10) == (uint64_t *)4096)
      {
        v18 = (uint64_t *)v10[1];
        ++v10;
        v11 = v18;
      }
    }
    v11 = (uint64_t *)v9;
  }
  return v9 != (_QWORD)v11;
}

void sub_20E298944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Ari::ClientWorkQueue::isStalled(Ari::ClientWorkQueue *this)
{
  return *((unsigned __int8 *)this + 48);
}

uint64_t Ari::ClientWorkQueue::getName(Ari::ClientWorkQueue *this)
{
  return (uint64_t)this + 56;
}

void std::__shared_ptr_emplace<Ari::ClientOutboundMessage::Create(unsigned char *,unsigned int,unsigned int)::ClientOutBoundMessageNoPrivate,std::allocator<Ari::ClientOutboundMessage::Create(unsigned char *,unsigned int,unsigned int)::ClientOutBoundMessageNoPrivate>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C912590;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Ari::ClientOutboundMessage::Create(unsigned char *,unsigned int,unsigned int)::ClientOutBoundMessageNoPrivate,std::allocator<Ari::ClientOutboundMessage::Create(unsigned char *,unsigned int,unsigned int)::ClientOutBoundMessageNoPrivate>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C912590;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BB9B60);
}

void std::__shared_ptr_emplace<Ari::ClientOutboundMessage::Create(unsigned char *,unsigned int,unsigned int)::ClientOutBoundMessageNoPrivate,std::allocator<Ari::ClientOutboundMessage::Create(unsigned char *,unsigned int,unsigned int)::ClientOutBoundMessageNoPrivate>>::__on_zero_shared(uint64_t a1)
{
  Ari::ClientOutboundMessage::~ClientOutboundMessage((Ari::ClientOutboundMessage *)(a1 + 24));
}

uint64_t std::deque<std::shared_ptr<Ari::ClientOutboundMessage>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 >> 8];
    v7 = (uint64_t)*v6 + 16 * v5;
    v8 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(_BYTE *)(a1 + 40) + v5);
    if (v7 != v8)
    {
      do
      {
        v7 = std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100](v7) + 16;
        if (v7 - (_QWORD)*v6 == 4096)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 128;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    v12 = 256;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 != v15)
      *(_QWORD *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Ari::ClientOutboundMessage> *>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

_QWORD *std::__deque_iterator<std::shared_ptr<Ari::ClientOutboundMessage>,std::shared_ptr<Ari::ClientOutboundMessage>*,std::shared_ptr<Ari::ClientOutboundMessage>&,std::shared_ptr<Ari::ClientOutboundMessage>**,long,256l>::operator+[abi:ne180100](_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a3)
  {
    v3 = a3 + ((a2 - *result) >> 4);
    if (v3 < 1)
      result -= (unint64_t)(255 - v3) >> 8;
    else
      result += (unint64_t)v3 >> 8;
  }
  return result;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<Ari::ClientOutboundMessage> *,std::__deque_iterator<std::shared_ptr<Ari::ClientOutboundMessage>,std::shared_ptr<Ari::ClientOutboundMessage> *,std::shared_ptr<Ari::ClientOutboundMessage>&,std::shared_ptr<Ari::ClientOutboundMessage> **,long,256l>,0>(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = a4;
  v8 = (_QWORD *)result;
  if (a2 == a3)
  {
    v9 = a2;
  }
  else
  {
    v9 = a3;
    v10 = *a4;
    v11 = a3;
    while (1)
    {
      v12 = a5 - v10;
      if ((v11 - a2) >> 4 >= v12 >> 4)
        v13 = v12 >> 4;
      else
        v13 = (v11 - a2) >> 4;
      if (v13)
      {
        v14 = -16 * v13;
        v15 = (__int128 *)(v11 - 16);
        do
        {
          a5 -= 16;
          result = std::shared_ptr<std::vector<unsigned char>>::operator=[abi:ne180100](a5, v15--);
          v14 += 16;
        }
        while (v14);
      }
      v11 -= 16 * v13;
      if (v11 == a2)
        break;
      v16 = *--v6;
      v10 = v16;
      a5 = v16 + 4096;
    }
    if (*v6 + 4096 == a5)
    {
      v17 = v6[1];
      ++v6;
      a5 = v17;
    }
  }
  *v8 = v9;
  v8[1] = v6;
  v8[2] = a5;
  return result;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<Ari::ClientOutboundMessage> *,std::__deque_iterator<std::shared_ptr<Ari::ClientOutboundMessage>,std::shared_ptr<Ari::ClientOutboundMessage> *,std::shared_ptr<Ari::ClientOutboundMessage>&,std::shared_ptr<Ari::ClientOutboundMessage> **,long,256l>,0>(uint64_t result, __int128 *a2, __int128 *a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v6;
  __int128 *v7;
  _QWORD *v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a4;
  v7 = a2;
  v8 = (_QWORD *)result;
  if (a2 == a3)
  {
    v9 = a2;
  }
  else
  {
    v9 = a3;
    v10 = *a4;
    while (1)
    {
      v11 = v10 - a5 + 4096;
      if (v9 - v7 >= v11 >> 4)
        v12 = v11 >> 4;
      else
        v12 = v9 - v7;
      if (v12)
      {
        v13 = 16 * v12;
        v14 = &v7[v12];
        do
        {
          result = std::shared_ptr<std::vector<unsigned char>>::operator=[abi:ne180100](a5, v7++);
          a5 += 16;
          v13 -= 16;
        }
        while (v13);
        v7 = v14;
      }
      if (v7 == v9)
        break;
      v15 = v6[1];
      ++v6;
      v10 = v15;
      a5 = v15;
    }
    if (*v6 + 4096 == a5)
    {
      v16 = v6[1];
      ++v6;
      a5 = v16;
    }
  }
  *v8 = v9;
  v8[1] = v6;
  v8[2] = a5;
  return result;
}

uint64_t ARI_IBISsAddressData_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISsAddressData_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISsAddressType_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISsAddressType_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISsBasicServiceGroup_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISsBasicServiceGroup_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISsCallBarringFeatureStruct_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISsCallBarringFeatureStruct_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISsCallForwardingFeatureExtStruct_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISsCallForwardingFeatureExtStruct_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISsCallWaitingFeatureStruct_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISsCallWaitingFeatureStruct_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISsClirOption_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISsClirOption_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISsOperationCode_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISsOperationCode_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISsOperationResponse_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISsOperationResponse_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISsServiceCode_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISsServiceCode_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISsStatus_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISsStatus_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISsUssdSendMode_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISsUssdSendMode_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISsUssdType_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBISsUssdType_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIEmbmsGetSAIType_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIEmbmsGetSAIType_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIEmbmsInterFreqInfo_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIEmbmsInterFreqInfo_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIEmbmsIntraFreqInfo_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIEmbmsIntraFreqInfo_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIEmbmsMBSFNAreaAvailability_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIEmbmsMBSFNAreaAvailability_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIEmbmsRejectCause_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIEmbmsRejectCause_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIEmbmsServiceInfo_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIEmbmsServiceInfo_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIEmbmsServiceLossCause_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIEmbmsServiceLossCause_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIEmbmsServiceSupport_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIEmbmsServiceSupport_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIEmbmsServiceType_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIEmbmsServiceType_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIEmbmsTMGIInfoParam_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIEmbmsTMGIInfoParam_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsAlertingPattern_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsAlertingPattern_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsAudioControl_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsAudioControl_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsAutoAnswerSetting_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsAutoAnswerSetting_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsBurstDtmfEvent_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsBurstDtmfEvent_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsBurstDtmfInterval_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsBurstDtmfInterval_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsBurstDtmfWidth_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsBurstDtmfWidth_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsCdmaVerifySpcCodeResult_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsCdmaVerifySpcCodeResult_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsChannelMode_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsChannelMode_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsClirCause_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsClirCause_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsClirMode_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsClirMode_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsCmd_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsCmd_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsCrssGroup_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsCrssGroup_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsDualServiceMode_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsDualServiceMode_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsEccListParam_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsEccListParam_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsEmergencyCallIntermediateStatus_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsEmergencyCallIntermediateStatus_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsEmergencyNumber_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsEmergencyNumber_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsErrorCause_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsErrorCause_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsExtEmergencyListValidity_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsExtEmergencyListValidity_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsExtEmergencyNumber_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsExtEmergencyNumber_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsFeat_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsFeat_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsGroup_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsGroup_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsLineControl_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsLineControl_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsLine_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsLine_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsResult_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsResult_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsSignalInfo_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsSignalInfo_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsStatus_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsStatus_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsTtyDeviceMode_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsTtyDeviceMode_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsWaitingIndicator_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBICallCsWaitingIndicator_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIOtaspStatus_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBIOtaspStatus_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CSI_ICE_IPC_MEM_HOST_WAKE_REASON_INFO_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CSI_ICE_IPC_MEM_HOST_WAKE_REASON_INFO_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiPowSleepBlockingState_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_CsiPowSleepBlockingState_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBI_CPMS_POWER_BUDGET_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_IBI_CPMS_POWER_BUDGET_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_eCSI_ICE_ARTD_ONOFF_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_eCSI_ICE_ARTD_ONOFF_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_eCSI_ICE_BSP_ENABLE_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_eCSI_ICE_BSP_ENABLE_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_eCSI_ICE_GRIP_STATE_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_eCSI_ICE_GRIP_STATE_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_eCSI_ICE_PS_STATE_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_eCSI_ICE_PS_STATE_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_eCSI_ICE_RAT_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_eCSI_ICE_RAT_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_eCSI_ICE_RX_DIVERSITY_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_eCSI_ICE_RX_DIVERSITY_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_eCSI_ICE_SPEAKER_STATE_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_eCSI_ICE_SPEAKER_STATE_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_eCSI_ICE_STATE_ONOFF_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_eCSI_ICE_STATE_ONOFF_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_eCSI_ICE_TS_ANTENNA_STATE_ENC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

uint64_t ARI_eCSI_ICE_TS_ANTENNA_STATE_DEC_F(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  memcpy(a1, a2, a4 * a3);
  return 0;
}

AriSdk::MsgBase *AriSdk::ARI_CsiBspGetCalibrationStatusReq_SDK::ARI_CsiBspGetCalibrationStatusReq_SDK(AriSdk::ARI_CsiBspGetCalibrationStatusReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8810000, 0);
  *(_QWORD *)result = &off_24C91A7D8;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8810000, 0);
  *(_QWORD *)result = &off_24C91A7D8;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiBspGetCalibrationStatusReq_SDK::ARI_CsiBspGetCalibrationStatusReq_SDK(AriSdk::ARI_CsiBspGetCalibrationStatusReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91A7D8;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91A7D8;
  return result;
}

void AriSdk::ARI_CsiBspGetCalibrationStatusReq_SDK::~ARI_CsiBspGetCalibrationStatusReq_SDK(AriSdk::ARI_CsiBspGetCalibrationStatusReq_SDK *this)
{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiBspGetCalibrationStatusReq_SDK::pack(AriSdk::ARI_CsiBspGetCalibrationStatusReq_SDK *this, AriMsg **a2)
{
  *a2 = 0;
  *a2 = (AriMsg *)*((_QWORD *)this + 6);
  return 0;
}

uint64_t AriSdk::ARI_CsiBspGetCalibrationStatusReq_SDK::unpack(AriSdk::ARI_CsiBspGetCalibrationStatusReq_SDK *this)
{
  return 0;
}

BOOL AriSdk::ARI_CsiBspGetCalibrationStatusReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiBspGetCalibrationStatusReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -125763584;
}

AriSdk::MsgBase *AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK::ARI_CsiBspGetCalibrationStatusRspCb_SDK(AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9010000, 0);
  *(_QWORD *)result = &off_24C91A810;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9010000, 0);
  *(_QWORD *)result = &off_24C91A810;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK::ARI_CsiBspGetCalibrationStatusRspCb_SDK(AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91A810;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91A810;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK::~ARI_CsiBspGetCalibrationStatusRspCb_SDK(AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C91A810;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK::~ARI_CsiBspGetCalibrationStatusRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK::pack(AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK::unpack(AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E299FCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -117374976;
}

AriSdk::MsgBase *AriSdk::ARI_CsiBspNvmGroupEnumListReq_SDK::ARI_CsiBspNvmGroupEnumListReq_SDK(AriSdk::ARI_CsiBspNvmGroupEnumListReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF88C8000, 0);
  *(_QWORD *)result = &off_24C91A848;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF88C8000, 0);
  *(_QWORD *)result = &off_24C91A848;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiBspNvmGroupEnumListReq_SDK::ARI_CsiBspNvmGroupEnumListReq_SDK(AriSdk::ARI_CsiBspNvmGroupEnumListReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91A848;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91A848;
  return result;
}

void AriSdk::ARI_CsiBspNvmGroupEnumListReq_SDK::~ARI_CsiBspNvmGroupEnumListReq_SDK(AriSdk::ARI_CsiBspNvmGroupEnumListReq_SDK *this)
{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiBspNvmGroupEnumListReq_SDK::pack(AriSdk::ARI_CsiBspNvmGroupEnumListReq_SDK *this, AriMsg **a2)
{
  *a2 = 0;
  *a2 = (AriMsg *)*((_QWORD *)this + 6);
  return 0;
}

uint64_t AriSdk::ARI_CsiBspNvmGroupEnumListReq_SDK::unpack(AriSdk::ARI_CsiBspNvmGroupEnumListReq_SDK *this)
{
  return 0;
}

BOOL AriSdk::ARI_CsiBspNvmGroupEnumListReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiBspNvmGroupEnumListReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -125009920;
}

AriSdk::MsgBase *AriSdk::ARI_CsiBspNvmGroupEnumListRespCb_SDK::ARI_CsiBspNvmGroupEnumListRespCb_SDK(AriSdk::ARI_CsiBspNvmGroupEnumListRespCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF90C8000, 0);
  *(_QWORD *)result = &off_24C91A880;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF90C8000, 0);
  *(_QWORD *)result = &off_24C91A880;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiBspNvmGroupEnumListRespCb_SDK::ARI_CsiBspNvmGroupEnumListRespCb_SDK(AriSdk::ARI_CsiBspNvmGroupEnumListRespCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91A880;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91A880;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_CsiBspNvmGroupEnumListRespCb_SDK::~ARI_CsiBspNvmGroupEnumListRespCb_SDK(AriSdk::ARI_CsiBspNvmGroupEnumListRespCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C91A880;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C40DA9895E1);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiBspNvmGroupEnumListRespCb_SDK::~ARI_CsiBspNvmGroupEnumListRespCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiBspNvmGroupEnumListRespCb_SDK::pack(AriSdk::ARI_CsiBspNvmGroupEnumListRespCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 0xDB0uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiBspNvmGroupEnumListRespCb_SDK::unpack(AriSdk::ARI_CsiBspNvmGroupEnumListRespCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  void *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (void *)operator new();
  bzero(v5, 0xDB0uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 3504, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<CsiBspNvmGroupDataType>::operator=<CsiBspNvmGroupDataType&,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C40DA9895E1);
  return v3;
}

void sub_20E29A4D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C40DA9895E1);
  _Unwind_Resume(a1);
}

uint64_t *AriSdk::Tlv<CsiBspNvmGroupDataType>::operator=<CsiBspNvmGroupDataType&,void>(uint64_t *a1, const void *a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)operator new();
  memcpy(v4, a2, 0xDB0uLL);
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40DA9895E1);
  return a1;
}

BOOL AriSdk::ARI_CsiBspNvmGroupEnumListRespCb_SDK::hasDeclaredGmid(AriSdk::ARI_CsiBspNvmGroupEnumListRespCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -116621312;
}

AriSdk::MsgBase *AriSdk::ARI_CsiBspNvmReadGroupReq_SDK::ARI_CsiBspNvmReadGroupReq_SDK(AriSdk::ARI_CsiBspNvmReadGroupReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF88D0000, 0);
  *(_QWORD *)result = &off_24C91A8B8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF88D0000, 0);
  *(_QWORD *)result = &off_24C91A8B8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiBspNvmReadGroupReq_SDK::ARI_CsiBspNvmReadGroupReq_SDK(AriSdk::ARI_CsiBspNvmReadGroupReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91A8B8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91A8B8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiBspNvmReadGroupReq_SDK::~ARI_CsiBspNvmReadGroupReq_SDK(AriSdk::ARI_CsiBspNvmReadGroupReq_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C91A8B8;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiBspNvmReadGroupReq_SDK::~ARI_CsiBspNvmReadGroupReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiBspNvmReadGroupReq_SDK::pack(AriSdk::ARI_CsiBspNvmReadGroupReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiBspNvmReadGroupReq_SDK::unpack(AriSdk::ARI_CsiBspNvmReadGroupReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E29A7DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiBspNvmReadGroupReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiBspNvmReadGroupReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -124977152;
}

AriSdk::MsgBase *AriSdk::ARI_CsiBspNvmReadGroupRespCb_SDK::ARI_CsiBspNvmReadGroupRespCb_SDK(AriSdk::ARI_CsiBspNvmReadGroupRespCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF90D0000, 0);
  *(_QWORD *)result = &off_24C91A8F0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF90D0000, 0);
  *(_QWORD *)result = &off_24C91A8F0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiBspNvmReadGroupRespCb_SDK::ARI_CsiBspNvmReadGroupRespCb_SDK(AriSdk::ARI_CsiBspNvmReadGroupRespCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91A8F0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91A8F0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiBspNvmReadGroupRespCb_SDK::~ARI_CsiBspNvmReadGroupRespCb_SDK(AriSdk::ARI_CsiBspNvmReadGroupRespCb_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C91A8F0;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiBspNvmReadGroupRespCb_SDK::~ARI_CsiBspNvmReadGroupRespCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiBspNvmReadGroupRespCb_SDK::pack(AriSdk::ARI_CsiBspNvmReadGroupRespCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiBspNvmReadGroupRespCb_SDK::unpack(AriSdk::ARI_CsiBspNvmReadGroupRespCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E29AA50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiBspNvmReadGroupRespCb_SDK::hasDeclaredGmid(AriSdk::ARI_CsiBspNvmReadGroupRespCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -116588544;
}

AriSdk::MsgBase *AriSdk::ARI_CsiBspNvmReadGroupBlockReq_SDK::ARI_CsiBspNvmReadGroupBlockReq_SDK(AriSdk::ARI_CsiBspNvmReadGroupBlockReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF88D8000, 0);
  *(_QWORD *)result = &off_24C91A928;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF88D8000, 0);
  *(_QWORD *)result = &off_24C91A928;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiBspNvmReadGroupBlockReq_SDK::ARI_CsiBspNvmReadGroupBlockReq_SDK(AriSdk::ARI_CsiBspNvmReadGroupBlockReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91A928;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91A928;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiBspNvmReadGroupBlockReq_SDK::~ARI_CsiBspNvmReadGroupBlockReq_SDK(AriSdk::ARI_CsiBspNvmReadGroupBlockReq_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C91A928;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiBspNvmReadGroupBlockReq_SDK::~ARI_CsiBspNvmReadGroupBlockReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiBspNvmReadGroupBlockReq_SDK::pack(AriSdk::ARI_CsiBspNvmReadGroupBlockReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiBspNvmReadGroupBlockReq_SDK::unpack(AriSdk::ARI_CsiBspNvmReadGroupBlockReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E29ACCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiBspNvmReadGroupBlockReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiBspNvmReadGroupBlockReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -124944384;
}

AriSdk::MsgBase *AriSdk::ARI_CsiBspNvmReadGroupBlockRespCb_SDK::ARI_CsiBspNvmReadGroupBlockRespCb_SDK(AriSdk::ARI_CsiBspNvmReadGroupBlockRespCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF90D8000, 0);
  *(_QWORD *)result = &off_24C91A960;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF90D8000, 0);
  *(_QWORD *)result = &off_24C91A960;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiBspNvmReadGroupBlockRespCb_SDK::ARI_CsiBspNvmReadGroupBlockRespCb_SDK(AriSdk::ARI_CsiBspNvmReadGroupBlockRespCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91A960;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91A960;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_CsiBspNvmReadGroupBlockRespCb_SDK::~ARI_CsiBspNvmReadGroupBlockRespCb_SDK(AriSdk::ARI_CsiBspNvmReadGroupBlockRespCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C91A960;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C40DA9895E1);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiBspNvmReadGroupBlockRespCb_SDK::~ARI_CsiBspNvmReadGroupBlockRespCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiBspNvmReadGroupBlockRespCb_SDK::pack(AriSdk::ARI_CsiBspNvmReadGroupBlockRespCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 0xDB0uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiBspNvmReadGroupBlockRespCb_SDK::unpack(AriSdk::ARI_CsiBspNvmReadGroupBlockRespCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  void *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (void *)operator new();
  bzero(v5, 0xDB0uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 3504, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<CsiBspNvmGroupDataType>::operator=<CsiBspNvmGroupDataType&,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C40DA9895E1);
  return v3;
}

void sub_20E29B024(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C40DA9895E1);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiBspNvmReadGroupBlockRespCb_SDK::hasDeclaredGmid(AriSdk::ARI_CsiBspNvmReadGroupBlockRespCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -116555776;
}

AriSdk::MsgBase *AriSdk::ARI_CsiBspSetNvItemsToStateReq_SDK::ARI_CsiBspSetNvItemsToStateReq_SDK(AriSdk::ARI_CsiBspSetNvItemsToStateReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8808000, 0);
  *(_QWORD *)result = &off_24C91A998;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8808000, 0);
  *(_QWORD *)result = &off_24C91A998;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiBspSetNvItemsToStateReq_SDK::ARI_CsiBspSetNvItemsToStateReq_SDK(AriSdk::ARI_CsiBspSetNvItemsToStateReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91A998;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91A998;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiBspSetNvItemsToStateReq_SDK::~ARI_CsiBspSetNvItemsToStateReq_SDK(AriSdk::ARI_CsiBspSetNvItemsToStateReq_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C91A998;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiBspSetNvItemsToStateReq_SDK::~ARI_CsiBspSetNvItemsToStateReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiBspSetNvItemsToStateReq_SDK::pack(AriSdk::ARI_CsiBspSetNvItemsToStateReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiBspSetNvItemsToStateReq_SDK::unpack(AriSdk::ARI_CsiBspSetNvItemsToStateReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E29B2BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiBspSetNvItemsToStateReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiBspSetNvItemsToStateReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -125796352;
}

AriSdk::MsgBase *AriSdk::ARI_CsiBspSetNvItemsToStateRspCb_SDK::ARI_CsiBspSetNvItemsToStateRspCb_SDK(AriSdk::ARI_CsiBspSetNvItemsToStateRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9008000, 0);
  *(_QWORD *)result = &off_24C91A9D0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9008000, 0);
  *(_QWORD *)result = &off_24C91A9D0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiBspSetNvItemsToStateRspCb_SDK::ARI_CsiBspSetNvItemsToStateRspCb_SDK(AriSdk::ARI_CsiBspSetNvItemsToStateRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91A9D0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91A9D0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiBspSetNvItemsToStateRspCb_SDK::~ARI_CsiBspSetNvItemsToStateRspCb_SDK(AriSdk::ARI_CsiBspSetNvItemsToStateRspCb_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C91A9D0;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiBspSetNvItemsToStateRspCb_SDK::~ARI_CsiBspSetNvItemsToStateRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiBspSetNvItemsToStateRspCb_SDK::pack(AriSdk::ARI_CsiBspSetNvItemsToStateRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiBspSetNvItemsToStateRspCb_SDK::unpack(AriSdk::ARI_CsiBspSetNvItemsToStateRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E29B53C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiBspSetNvItemsToStateRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_CsiBspSetNvItemsToStateRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -117407744;
}

AriSdk::MsgBase *AriSdk::ARI_CsiBspShutdownReq_SDK::ARI_CsiBspShutdownReq_SDK(AriSdk::ARI_CsiBspShutdownReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8868000, 0);
  *(_QWORD *)result = &off_24C91AA08;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8868000, 0);
  *(_QWORD *)result = &off_24C91AA08;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiBspShutdownReq_SDK::ARI_CsiBspShutdownReq_SDK(AriSdk::ARI_CsiBspShutdownReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AA08;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AA08;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiBspShutdownReq_SDK::~ARI_CsiBspShutdownReq_SDK(AriSdk::ARI_CsiBspShutdownReq_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C91AA08;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiBspShutdownReq_SDK::~ARI_CsiBspShutdownReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiBspShutdownReq_SDK::pack(AriSdk::ARI_CsiBspShutdownReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiBspShutdownReq_SDK::unpack(AriSdk::ARI_CsiBspShutdownReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E29B7BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiBspShutdownReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiBspShutdownReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -125403136;
}

AriSdk::MsgBase *AriSdk::ARI_CsiBspShutdownRspCb_SDK::ARI_CsiBspShutdownRspCb_SDK(AriSdk::ARI_CsiBspShutdownRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9068000, 0);
  *(_QWORD *)result = &off_24C91AA40;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9068000, 0);
  *(_QWORD *)result = &off_24C91AA40;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiBspShutdownRspCb_SDK::ARI_CsiBspShutdownRspCb_SDK(AriSdk::ARI_CsiBspShutdownRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AA40;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AA40;
  return result;
}

void AriSdk::ARI_CsiBspShutdownRspCb_SDK::~ARI_CsiBspShutdownRspCb_SDK(AriSdk::ARI_CsiBspShutdownRspCb_SDK *this)
{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiBspShutdownRspCb_SDK::pack(AriSdk::ARI_CsiBspShutdownRspCb_SDK *this, AriMsg **a2)
{
  *a2 = 0;
  *a2 = (AriMsg *)*((_QWORD *)this + 6);
  return 0;
}

uint64_t AriSdk::ARI_CsiBspShutdownRspCb_SDK::unpack(AriSdk::ARI_CsiBspShutdownRspCb_SDK *this)
{
  return 0;
}

BOOL AriSdk::ARI_CsiBspShutdownRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_CsiBspShutdownRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -117014528;
}

AriSdk::MsgBase *AriSdk::ARI_CsiBspSwTrapReq_SDK::ARI_CsiBspSwTrapReq_SDK(AriSdk::ARI_CsiBspSwTrapReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8870000, 0);
  *(_QWORD *)result = &off_24C91AA78;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8870000, 0);
  *(_QWORD *)result = &off_24C91AA78;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiBspSwTrapReq_SDK::ARI_CsiBspSwTrapReq_SDK(AriSdk::ARI_CsiBspSwTrapReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AA78;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AA78;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiBspSwTrapReq_SDK::~ARI_CsiBspSwTrapReq_SDK(AriSdk::ARI_CsiBspSwTrapReq_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C91AA78;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiBspSwTrapReq_SDK::~ARI_CsiBspSwTrapReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiBspSwTrapReq_SDK::pack(AriSdk::ARI_CsiBspSwTrapReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiBspSwTrapReq_SDK::unpack(AriSdk::ARI_CsiBspSwTrapReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E29BBE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiBspSwTrapReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiBspSwTrapReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -125370368;
}

AriSdk::MsgBase *AriSdk::ARI_CsiBspSwTrapRspCb_SDK::ARI_CsiBspSwTrapRspCb_SDK(AriSdk::ARI_CsiBspSwTrapRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9070000, 0);
  *(_QWORD *)result = &off_24C91AAB0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9070000, 0);
  *(_QWORD *)result = &off_24C91AAB0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiBspSwTrapRspCb_SDK::ARI_CsiBspSwTrapRspCb_SDK(AriSdk::ARI_CsiBspSwTrapRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AAB0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AAB0;
  return result;
}

void AriSdk::ARI_CsiBspSwTrapRspCb_SDK::~ARI_CsiBspSwTrapRspCb_SDK(AriSdk::ARI_CsiBspSwTrapRspCb_SDK *this)
{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiBspSwTrapRspCb_SDK::pack(AriSdk::ARI_CsiBspSwTrapRspCb_SDK *this, AriMsg **a2)
{
  *a2 = 0;
  *a2 = (AriMsg *)*((_QWORD *)this + 6);
  return 0;
}

uint64_t AriSdk::ARI_CsiBspSwTrapRspCb_SDK::unpack(AriSdk::ARI_CsiBspSwTrapRspCb_SDK *this)
{
  return 0;
}

BOOL AriSdk::ARI_CsiBspSwTrapRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_CsiBspSwTrapRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -116981760;
}

double AriSdk::ARI_CsiBspSwTrapReq_v2_SDK::ARI_CsiBspSwTrapReq_v2_SDK(AriSdk::ARI_CsiBspSwTrapReq_v2_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0xF88E0000, 0);
  *(_QWORD *)v1 = &off_24C91AAE8;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0xF88E0000, 0);
  *(_QWORD *)v1 = &off_24C91AAE8;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

double AriSdk::ARI_CsiBspSwTrapReq_v2_SDK::ARI_CsiBspSwTrapReq_v2_SDK(AriSdk::ARI_CsiBspSwTrapReq_v2_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C91AAE8;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C91AAE8;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

void AriSdk::ARI_CsiBspSwTrapReq_v2_SDK::~ARI_CsiBspSwTrapReq_v2_SDK(AriSdk::ARI_CsiBspSwTrapReq_v2_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C91AAE8;
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4077774924);
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiBspSwTrapReq_v2_SDK::~ARI_CsiBspSwTrapReq_v2_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiBspSwTrapReq_v2_SDK::pack(AriSdk::ARI_CsiBspSwTrapReq_v2_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 1uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v8, 4uLL, 0), !(_DWORD)result))
        {
          result = 0;
          *a2 = (AriMsg *)*((_QWORD *)this + 6);
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiBspSwTrapReq_v2_SDK::unpack(AriSdk::ARI_CsiBspSwTrapReq_v2_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _BYTE *v6;
  _DWORD *v7;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;

  v12 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v12, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v12;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v11 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v11, 0);
  if ((_DWORD)v3 || !v11)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v10 = 0;
  v6 = (_BYTE *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 1, &v10, 0);
  if ((_DWORD)v3 || !v10)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<unsigned char>::operator=<unsigned char &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4077774924);
  }
  v9 = 0;
  v7 = (_DWORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v7, 4, &v9, 0);
  if (!(_DWORD)v3 && v9)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 11, v7);
  MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  return v3;
}

void sub_20E29C288(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiBspSwTrapReq_v2_SDK::hasDeclaredGmid(AriSdk::ARI_CsiBspSwTrapReq_v2_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -124911616;
}

AriSdk::MsgBase *AriSdk::ARI_CsiBspSwTrapRspCb_v2_SDK::ARI_CsiBspSwTrapRspCb_v2_SDK(AriSdk::ARI_CsiBspSwTrapRspCb_v2_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF90E0000, 0);
  *(_QWORD *)result = &off_24C91AB20;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF90E0000, 0);
  *(_QWORD *)result = &off_24C91AB20;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiBspSwTrapRspCb_v2_SDK::ARI_CsiBspSwTrapRspCb_v2_SDK(AriSdk::ARI_CsiBspSwTrapRspCb_v2_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AB20;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AB20;
  return result;
}

void AriSdk::ARI_CsiBspSwTrapRspCb_v2_SDK::~ARI_CsiBspSwTrapRspCb_v2_SDK(AriSdk::ARI_CsiBspSwTrapRspCb_v2_SDK *this)
{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiBspSwTrapRspCb_v2_SDK::pack(AriSdk::ARI_CsiBspSwTrapRspCb_v2_SDK *this, AriMsg **a2)
{
  *a2 = 0;
  *a2 = (AriMsg *)*((_QWORD *)this + 6);
  return 0;
}

uint64_t AriSdk::ARI_CsiBspSwTrapRspCb_v2_SDK::unpack(AriSdk::ARI_CsiBspSwTrapRspCb_v2_SDK *this)
{
  return 0;
}

BOOL AriSdk::ARI_CsiBspSwTrapRspCb_v2_SDK::hasDeclaredGmid(AriSdk::ARI_CsiBspSwTrapRspCb_v2_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -116523008;
}

double AriSdk::ARI_CsiBspSwTrapReq_v3_SDK::ARI_CsiBspSwTrapReq_v3_SDK(AriSdk::ARI_CsiBspSwTrapReq_v3_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0xF88E8000, 1);
  *(_QWORD *)v1 = &off_24C91AB58;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0xF88E8000, 1);
  *(_QWORD *)v1 = &off_24C91AB58;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  return result;
}

double AriSdk::ARI_CsiBspSwTrapReq_v3_SDK::ARI_CsiBspSwTrapReq_v3_SDK(AriSdk::ARI_CsiBspSwTrapReq_v3_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C91AB58;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C91AB58;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  return result;
}

void AriSdk::ARI_CsiBspSwTrapReq_v3_SDK::~ARI_CsiBspSwTrapReq_v3_SDK(AriSdk::ARI_CsiBspSwTrapReq_v3_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C91AB58;
  v2 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = (void *)*((_QWORD *)this + 9);
  if (v4)
  {
    *((_QWORD *)this + 10) = v4;
    operator delete(v4);
  }
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4000313F17);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiBspSwTrapReq_v3_SDK::~ARI_CsiBspSwTrapReq_v3_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiBspSwTrapReq_v3_SDK::pack(AriSdk::ARI_CsiBspSwTrapReq_v3_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  _BYTE *v6;
  _BYTE *v7;
  BOOL v8;
  const void *v9;
  const void *v10;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 8uLL, 0), !(_DWORD)result))
  {
    v6 = (_BYTE *)*((_QWORD *)this + 9);
    v7 = (_BYTE *)*((_QWORD *)this + 10);
    v8 = !v6 || v6 == v7;
    if (v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, v7 - v6, 0), !(_DWORD)result))
    {
      v9 = (const void *)*((_QWORD *)this + 12);
      if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v9, 4uLL, 0), !(_DWORD)result))
      {
        v10 = (const void *)*((_QWORD *)this + 13);
        if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v10, 4uLL, 0), !(_DWORD)result))
        {
          result = 0;
          *a2 = (AriMsg *)*((_QWORD *)this + 6);
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiBspSwTrapReq_v3_SDK::unpack(AriSdk::ARI_CsiBspSwTrapReq_v3_SDK *this)
{
  _QWORD *v2;
  uint64_t v3;
  BOOL v4;
  _OWORD *v5;
  void **v6;
  _BYTE *v7;
  void *v8;
  const char *v9;
  BOOL *v10;
  void *v11;
  _DWORD *v12;
  _DWORD *v13;
  void *__p;
  _BYTE *v16;
  uint64_t v17;
  size_t __sz;
  BOOL v19;
  BOOL v20[8];
  char v21;

  v20[0] = 0;
  v2 = (_QWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 8, v20, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v20[0];
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4000313F17);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<AriStatusTlv>::operator=<AriStatusTlv&,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4000313F17);
  }
  v19 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v5 = (_OWORD *)operator new[]();
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[16] = 0u;
  v5[17] = 0u;
  v5[18] = 0u;
  v5[19] = 0u;
  v5[20] = 0u;
  v5[21] = 0u;
  v5[22] = 0u;
  v5[23] = 0u;
  v5[24] = 0u;
  v5[25] = 0u;
  v5[26] = 0u;
  v5[27] = 0u;
  v5[28] = 0u;
  v5[29] = 0u;
  v5[30] = 0u;
  v5[31] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 512, &v19, &__sz);
  if ((_DWORD)v3 || !v19)
  {
    MEMORY[0x212BB9B48](v5, 0x1000C8077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v16 = 0;
    v17 = 0;
    __p = 0;
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&__p, v5, (uint64_t)v5 + __sz, __sz);
    v6 = (void **)((char *)this + 72);
    v8 = __p;
    v7 = v16;
    if ((unint64_t)(v16 - (_BYTE *)__p) < 0x201)
    {
      v11 = *v6;
      if (*v6)
      {
        *((_QWORD *)this + 10) = v11;
        operator delete(v11);
        *v6 = 0;
        *((_QWORD *)this + 10) = 0;
        *((_QWORD *)this + 11) = 0;
        v8 = __p;
        v7 = v16;
      }
      *((_QWORD *)this + 9) = v8;
      *((_QWORD *)this + 10) = v7;
      *((_QWORD *)this + 11) = v17;
    }
    else
    {
      AriOsa::LogSrcInfo((AriOsa *)"/Library/Caches/com.apple.xbs/Sources/AppleRemoteInvocation/common/inc/ari_sdk_msg.h", "operator=", (uint64_t)v20);
      if (v21 >= 0)
        v10 = v20;
      else
        v10 = *(BOOL **)v20;
      Ari::Log((Ari *)8, "(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v9, v10, 360, (char *)this + 72, v16 - (_BYTE *)__p, 512);
      if (v21 < 0)
        operator delete(*(void **)v20);
      if (__p)
      {
        v16 = __p;
        operator delete(__p);
      }
    }
    MEMORY[0x212BB9B48](v5, 0x1000C8077774924);
  }
  v20[0] = 0;
  v12 = (_DWORD *)operator new();
  *v12 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v12, 4, v20, 0);
  if ((_DWORD)v3 || !v20[0])
  {
    MEMORY[0x212BB9B60](v12, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 12, v12);
    MEMORY[0x212BB9B60](v12, 0x1000C4052888210);
  }
  v20[0] = 0;
  v13 = (_DWORD *)operator new();
  *v13 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v13, 4, v20, 0);
  if (!(_DWORD)v3 && v20[0])
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 13, v13);
  MEMORY[0x212BB9B60](v13, 0x1000C4052888210);
  return v3;
}

void sub_20E29CA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  MEMORY[0x212BB9B60](v16, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiBspSwTrapReq_v3_SDK::hasDeclaredGmid(AriSdk::ARI_CsiBspSwTrapReq_v3_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -124878848;
}

AriSdk::MsgBase *AriSdk::ARI_CsiCddGetDebugLogReq_SDK::ARI_CsiCddGetDebugLogReq_SDK(AriSdk::ARI_CsiCddGetDebugLogReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8880000, 0);
  *(_QWORD *)result = &off_24C91AB90;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8880000, 0);
  *(_QWORD *)result = &off_24C91AB90;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiCddGetDebugLogReq_SDK::ARI_CsiCddGetDebugLogReq_SDK(AriSdk::ARI_CsiCddGetDebugLogReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AB90;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AB90;
  return result;
}

void AriSdk::ARI_CsiCddGetDebugLogReq_SDK::~ARI_CsiCddGetDebugLogReq_SDK(AriSdk::ARI_CsiCddGetDebugLogReq_SDK *this)
{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiCddGetDebugLogReq_SDK::pack(AriSdk::ARI_CsiCddGetDebugLogReq_SDK *this, AriMsg **a2)
{
  *a2 = 0;
  *a2 = (AriMsg *)*((_QWORD *)this + 6);
  return 0;
}

uint64_t AriSdk::ARI_CsiCddGetDebugLogReq_SDK::unpack(AriSdk::ARI_CsiCddGetDebugLogReq_SDK *this)
{
  return 0;
}

BOOL AriSdk::ARI_CsiCddGetDebugLogReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiCddGetDebugLogReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -125304832;
}

AriSdk::MsgBase *AriSdk::ARI_CsiCddGetDebugLogRspCb_SDK::ARI_CsiCddGetDebugLogRspCb_SDK(AriSdk::ARI_CsiCddGetDebugLogRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9080000, 0);
  *(_QWORD *)result = &off_24C91ABC8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9080000, 0);
  *(_QWORD *)result = &off_24C91ABC8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiCddGetDebugLogRspCb_SDK::ARI_CsiCddGetDebugLogRspCb_SDK(AriSdk::ARI_CsiCddGetDebugLogRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91ABC8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91ABC8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiCddGetDebugLogRspCb_SDK::~ARI_CsiCddGetDebugLogRspCb_SDK(AriSdk::ARI_CsiCddGetDebugLogRspCb_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C91ABC8;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4000313F17);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiCddGetDebugLogRspCb_SDK::~ARI_CsiCddGetDebugLogRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiCddGetDebugLogRspCb_SDK::pack(AriSdk::ARI_CsiCddGetDebugLogRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 8uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiCddGetDebugLogRspCb_SDK::unpack(AriSdk::ARI_CsiCddGetDebugLogRspCb_SDK *this)
{
  _QWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_QWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 8, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<AriStatusTlv>::operator=<AriStatusTlv&,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4000313F17);
  return v3;
}

void sub_20E29CF04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4000313F17);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiCddGetDebugLogRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_CsiCddGetDebugLogRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -116916224;
}

AriSdk::MsgBase *AriSdk::ARI_CsiCddGetParamDumpReq_SDK::ARI_CsiCddGetParamDumpReq_SDK(AriSdk::ARI_CsiCddGetParamDumpReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8888000, 0);
  *(_QWORD *)result = &off_24C91AC00;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8888000, 0);
  *(_QWORD *)result = &off_24C91AC00;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiCddGetParamDumpReq_SDK::ARI_CsiCddGetParamDumpReq_SDK(AriSdk::ARI_CsiCddGetParamDumpReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AC00;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AC00;
  return result;
}

void AriSdk::ARI_CsiCddGetParamDumpReq_SDK::~ARI_CsiCddGetParamDumpReq_SDK(AriSdk::ARI_CsiCddGetParamDumpReq_SDK *this)
{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiCddGetParamDumpReq_SDK::pack(AriSdk::ARI_CsiCddGetParamDumpReq_SDK *this, AriMsg **a2)
{
  *a2 = 0;
  *a2 = (AriMsg *)*((_QWORD *)this + 6);
  return 0;
}

uint64_t AriSdk::ARI_CsiCddGetParamDumpReq_SDK::unpack(AriSdk::ARI_CsiCddGetParamDumpReq_SDK *this)
{
  return 0;
}

BOOL AriSdk::ARI_CsiCddGetParamDumpReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiCddGetParamDumpReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -125272064;
}

AriSdk::MsgBase *AriSdk::ARI_CsiCddGetParamDumpRspCb_SDK::ARI_CsiCddGetParamDumpRspCb_SDK(AriSdk::ARI_CsiCddGetParamDumpRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9088000, 0);
  *(_QWORD *)result = &off_24C91AC38;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9088000, 0);
  *(_QWORD *)result = &off_24C91AC38;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiCddGetParamDumpRspCb_SDK::ARI_CsiCddGetParamDumpRspCb_SDK(AriSdk::ARI_CsiCddGetParamDumpRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AC38;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AC38;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiCddGetParamDumpRspCb_SDK::~ARI_CsiCddGetParamDumpRspCb_SDK(AriSdk::ARI_CsiCddGetParamDumpRspCb_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C91AC38;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4000313F17);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiCddGetParamDumpRspCb_SDK::~ARI_CsiCddGetParamDumpRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiCddGetParamDumpRspCb_SDK::pack(AriSdk::ARI_CsiCddGetParamDumpRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 8uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiCddGetParamDumpRspCb_SDK::unpack(AriSdk::ARI_CsiCddGetParamDumpRspCb_SDK *this)
{
  _QWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_QWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 8, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<AriStatusTlv>::operator=<AriStatusTlv&,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4000313F17);
  return v3;
}

void sub_20E29D330(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4000313F17);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiCddGetParamDumpRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_CsiCddGetParamDumpRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -116883456;
}

AriSdk::MsgBase *AriSdk::ARI_CsiFactGetTestReadyStateReq_SDK::ARI_CsiFactGetTestReadyStateReq_SDK(AriSdk::ARI_CsiFactGetTestReadyStateReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF88C0000, 0);
  *(_QWORD *)result = &off_24C91AC70;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF88C0000, 0);
  *(_QWORD *)result = &off_24C91AC70;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiFactGetTestReadyStateReq_SDK::ARI_CsiFactGetTestReadyStateReq_SDK(AriSdk::ARI_CsiFactGetTestReadyStateReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AC70;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AC70;
  return result;
}

void AriSdk::ARI_CsiFactGetTestReadyStateReq_SDK::~ARI_CsiFactGetTestReadyStateReq_SDK(AriSdk::ARI_CsiFactGetTestReadyStateReq_SDK *this)
{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiFactGetTestReadyStateReq_SDK::pack(AriSdk::ARI_CsiFactGetTestReadyStateReq_SDK *this, AriMsg **a2)
{
  *a2 = 0;
  *a2 = (AriMsg *)*((_QWORD *)this + 6);
  return 0;
}

uint64_t AriSdk::ARI_CsiFactGetTestReadyStateReq_SDK::unpack(AriSdk::ARI_CsiFactGetTestReadyStateReq_SDK *this)
{
  return 0;
}

BOOL AriSdk::ARI_CsiFactGetTestReadyStateReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiFactGetTestReadyStateReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -125042688;
}

AriSdk::MsgBase *AriSdk::ARI_CsiFactGetTestReadyStateRspCb_SDK::ARI_CsiFactGetTestReadyStateRspCb_SDK(AriSdk::ARI_CsiFactGetTestReadyStateRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF90C0000, 0);
  *(_QWORD *)result = &off_24C91ACA8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF90C0000, 0);
  *(_QWORD *)result = &off_24C91ACA8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiFactGetTestReadyStateRspCb_SDK::ARI_CsiFactGetTestReadyStateRspCb_SDK(AriSdk::ARI_CsiFactGetTestReadyStateRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91ACA8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91ACA8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_CsiFactGetTestReadyStateRspCb_SDK::~ARI_CsiFactGetTestReadyStateRspCb_SDK(AriSdk::ARI_CsiFactGetTestReadyStateRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C91ACA8;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiFactGetTestReadyStateRspCb_SDK::~ARI_CsiFactGetTestReadyStateRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiFactGetTestReadyStateRspCb_SDK::pack(AriSdk::ARI_CsiFactGetTestReadyStateRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiFactGetTestReadyStateRspCb_SDK::unpack(AriSdk::ARI_CsiFactGetTestReadyStateRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E29D820(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiFactGetTestReadyStateRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_CsiFactGetTestReadyStateRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -116654080;
}

AriSdk::MsgBase *AriSdk::ARI_CsiFpGetStatus_SDK::ARI_CsiFpGetStatus_SDK(AriSdk::ARI_CsiFpGetStatus_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8850000, 0);
  *(_QWORD *)result = &off_24C91ACE0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8850000, 0);
  *(_QWORD *)result = &off_24C91ACE0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiFpGetStatus_SDK::ARI_CsiFpGetStatus_SDK(AriSdk::ARI_CsiFpGetStatus_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91ACE0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91ACE0;
  return result;
}

void AriSdk::ARI_CsiFpGetStatus_SDK::~ARI_CsiFpGetStatus_SDK(AriSdk::ARI_CsiFpGetStatus_SDK *this)
{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiFpGetStatus_SDK::pack(AriSdk::ARI_CsiFpGetStatus_SDK *this, AriMsg **a2)
{
  *a2 = 0;
  *a2 = (AriMsg *)*((_QWORD *)this + 6);
  return 0;
}

uint64_t AriSdk::ARI_CsiFpGetStatus_SDK::unpack(AriSdk::ARI_CsiFpGetStatus_SDK *this)
{
  return 0;
}

BOOL AriSdk::ARI_CsiFpGetStatus_SDK::hasDeclaredGmid(AriSdk::ARI_CsiFpGetStatus_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -125501440;
}

AriSdk::MsgBase *AriSdk::ARI_CsiFpGetStatusRsp_SDK::ARI_CsiFpGetStatusRsp_SDK(AriSdk::ARI_CsiFpGetStatusRsp_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9050000, 0);
  *(_QWORD *)result = &off_24C91AD18;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9050000, 0);
  *(_QWORD *)result = &off_24C91AD18;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiFpGetStatusRsp_SDK::ARI_CsiFpGetStatusRsp_SDK(AriSdk::ARI_CsiFpGetStatusRsp_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AD18;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AD18;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_CsiFpGetStatusRsp_SDK::~ARI_CsiFpGetStatusRsp_SDK(AriSdk::ARI_CsiFpGetStatusRsp_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C91AD18;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C40FF89C88ELL);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiFpGetStatusRsp_SDK::~ARI_CsiFpGetStatusRsp_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiFpGetStatusRsp_SDK::pack(AriSdk::ARI_CsiFpGetStatusRsp_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 0x48uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiFpGetStatusRsp_SDK::unpack(AriSdk::ARI_CsiFpGetStatusRsp_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v11;
  BOOL v12;

  v12 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v12, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v12;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v11 = 0;
  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_QWORD *)(v5 + 64) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, (void *)v5, 72, &v11, 0);
  if (!(_DWORD)v3 && v11)
  {
    v6 = operator new();
    v7 = *(_OWORD *)(v5 + 48);
    *(_OWORD *)(v6 + 32) = *(_OWORD *)(v5 + 32);
    *(_OWORD *)(v6 + 48) = v7;
    *(_QWORD *)(v6 + 64) = *(_QWORD *)(v5 + 64);
    v8 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)v6 = *(_OWORD *)v5;
    *(_OWORD *)(v6 + 16) = v8;
    v9 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v6;
    if (v9)
      MEMORY[0x212BB9B60](v9, 0x1000C40FF89C88ELL);
  }
  MEMORY[0x212BB9B60](v5, 0x1000C40FF89C88ELL);
  return v3;
}

void sub_20E29DD68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C40FF89C88ELL);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiFpGetStatusRsp_SDK::hasDeclaredGmid(AriSdk::ARI_CsiFpGetStatusRsp_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -117112832;
}

AriSdk::MsgBase *AriSdk::ARI_CsiFpGetStatusV2_SDK::ARI_CsiFpGetStatusV2_SDK(AriSdk::ARI_CsiFpGetStatusV2_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8878000, 0);
  *(_QWORD *)result = &off_24C91AD50;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8878000, 0);
  *(_QWORD *)result = &off_24C91AD50;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiFpGetStatusV2_SDK::ARI_CsiFpGetStatusV2_SDK(AriSdk::ARI_CsiFpGetStatusV2_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AD50;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AD50;
  return result;
}

void AriSdk::ARI_CsiFpGetStatusV2_SDK::~ARI_CsiFpGetStatusV2_SDK(AriSdk::ARI_CsiFpGetStatusV2_SDK *this)
{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiFpGetStatusV2_SDK::pack(AriSdk::ARI_CsiFpGetStatusV2_SDK *this, AriMsg **a2)
{
  *a2 = 0;
  *a2 = (AriMsg *)*((_QWORD *)this + 6);
  return 0;
}

uint64_t AriSdk::ARI_CsiFpGetStatusV2_SDK::unpack(AriSdk::ARI_CsiFpGetStatusV2_SDK *this)
{
  return 0;
}

BOOL AriSdk::ARI_CsiFpGetStatusV2_SDK::hasDeclaredGmid(AriSdk::ARI_CsiFpGetStatusV2_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -125337600;
}

AriSdk::MsgBase *AriSdk::ARI_CsiFpGetStatusRspV2_SDK::ARI_CsiFpGetStatusRspV2_SDK(AriSdk::ARI_CsiFpGetStatusRspV2_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9078000, 0);
  *(_QWORD *)result = &off_24C91AD88;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9078000, 0);
  *(_QWORD *)result = &off_24C91AD88;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiFpGetStatusRspV2_SDK::ARI_CsiFpGetStatusRspV2_SDK(AriSdk::ARI_CsiFpGetStatusRspV2_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AD88;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AD88;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_CsiFpGetStatusRspV2_SDK::~ARI_CsiFpGetStatusRspV2_SDK(AriSdk::ARI_CsiFpGetStatusRspV2_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C91AD88;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C40FF89C88ELL);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiFpGetStatusRspV2_SDK::~ARI_CsiFpGetStatusRspV2_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiFpGetStatusRspV2_SDK::pack(AriSdk::ARI_CsiFpGetStatusRspV2_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 0x48uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiFpGetStatusRspV2_SDK::unpack(AriSdk::ARI_CsiFpGetStatusRspV2_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v11;
  BOOL v12;

  v12 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v12, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v12;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v11 = 0;
  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_QWORD *)(v5 + 64) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, (void *)v5, 72, &v11, 0);
  if (!(_DWORD)v3 && v11)
  {
    v6 = operator new();
    v7 = *(_OWORD *)(v5 + 48);
    *(_OWORD *)(v6 + 32) = *(_OWORD *)(v5 + 32);
    *(_OWORD *)(v6 + 48) = v7;
    *(_QWORD *)(v6 + 64) = *(_QWORD *)(v5 + 64);
    v8 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)v6 = *(_OWORD *)v5;
    *(_OWORD *)(v6 + 16) = v8;
    v9 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v6;
    if (v9)
      MEMORY[0x212BB9B60](v9, 0x1000C40FF89C88ELL);
  }
  MEMORY[0x212BB9B60](v5, 0x1000C40FF89C88ELL);
  return v3;
}

void sub_20E29E2D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C40FF89C88ELL);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiFpGetStatusRspV2_SDK::hasDeclaredGmid(AriSdk::ARI_CsiFpGetStatusRspV2_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -116948992;
}

AriSdk::MsgBase *AriSdk::ARI_CsiFpPrioSyncReqInd_SDK::ARI_CsiFpPrioSyncReqInd_SDK(AriSdk::ARI_CsiFpPrioSyncReqInd_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF98C0000, 0);
  *(_QWORD *)result = &off_24C91ADC0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF98C0000, 0);
  *(_QWORD *)result = &off_24C91ADC0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiFpPrioSyncReqInd_SDK::ARI_CsiFpPrioSyncReqInd_SDK(AriSdk::ARI_CsiFpPrioSyncReqInd_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91ADC0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91ADC0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_CsiFpPrioSyncReqInd_SDK::~ARI_CsiFpPrioSyncReqInd_SDK(AriSdk::ARI_CsiFpPrioSyncReqInd_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C91ADC0;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiFpPrioSyncReqInd_SDK::~ARI_CsiFpPrioSyncReqInd_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiFpPrioSyncReqInd_SDK::pack(AriSdk::ARI_CsiFpPrioSyncReqInd_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiFpPrioSyncReqInd_SDK::unpack(AriSdk::ARI_CsiFpPrioSyncReqInd_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E29E638(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiFpPrioSyncReqInd_SDK::hasDeclaredGmid(AriSdk::ARI_CsiFpPrioSyncReqInd_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -108265472;
}

AriSdk::MsgBase *AriSdk::ARI_CsiFpRegister_SDK::ARI_CsiFpRegister_SDK(AriSdk::ARI_CsiFpRegister_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8830000, 0);
  *(_QWORD *)result = &off_24C91ADF8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8830000, 0);
  *(_QWORD *)result = &off_24C91ADF8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiFpRegister_SDK::ARI_CsiFpRegister_SDK(AriSdk::ARI_CsiFpRegister_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91ADF8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91ADF8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiFpRegister_SDK::~ARI_CsiFpRegister_SDK(AriSdk::ARI_CsiFpRegister_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C91ADF8;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiFpRegister_SDK::~ARI_CsiFpRegister_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiFpRegister_SDK::pack(AriSdk::ARI_CsiFpRegister_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiFpRegister_SDK::unpack(AriSdk::ARI_CsiFpRegister_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E29E8B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiFpRegister_SDK::hasDeclaredGmid(AriSdk::ARI_CsiFpRegister_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -125632512;
}

AriSdk::MsgBase *AriSdk::ARI_CsiFpRegisterRsp_SDK::ARI_CsiFpRegisterRsp_SDK(AriSdk::ARI_CsiFpRegisterRsp_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9030000, 0);
  *(_QWORD *)result = &off_24C91AE30;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9030000, 0);
  *(_QWORD *)result = &off_24C91AE30;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiFpRegisterRsp_SDK::ARI_CsiFpRegisterRsp_SDK(AriSdk::ARI_CsiFpRegisterRsp_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AE30;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AE30;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiFpRegisterRsp_SDK::~ARI_CsiFpRegisterRsp_SDK(AriSdk::ARI_CsiFpRegisterRsp_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C91AE30;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiFpRegisterRsp_SDK::~ARI_CsiFpRegisterRsp_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiFpRegisterRsp_SDK::pack(AriSdk::ARI_CsiFpRegisterRsp_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiFpRegisterRsp_SDK::unpack(AriSdk::ARI_CsiFpRegisterRsp_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E29EB28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiFpRegisterRsp_SDK::hasDeclaredGmid(AriSdk::ARI_CsiFpRegisterRsp_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -117243904;
}

double AriSdk::ARI_CsiFpSnapshot_SDK::ARI_CsiFpSnapshot_SDK(AriSdk::ARI_CsiFpSnapshot_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0xF8838000, 0);
  *(_QWORD *)v1 = &off_24C91AE68;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0xF8838000, 0);
  *(_QWORD *)v1 = &off_24C91AE68;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

double AriSdk::ARI_CsiFpSnapshot_SDK::ARI_CsiFpSnapshot_SDK(AriSdk::ARI_CsiFpSnapshot_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C91AE68;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C91AE68;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

void AriSdk::ARI_CsiFpSnapshot_SDK::~ARI_CsiFpSnapshot_SDK(AriSdk::ARI_CsiFpSnapshot_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C91AE68;
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiFpSnapshot_SDK::~ARI_CsiFpSnapshot_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiFpSnapshot_SDK::pack(AriSdk::ARI_CsiFpSnapshot_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 4uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v8, 4uLL, 0), !(_DWORD)result))
        {
          result = 0;
          *a2 = (AriMsg *)*((_QWORD *)this + 6);
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiFpSnapshot_SDK::unpack(AriSdk::ARI_CsiFpSnapshot_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;

  v14 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v14, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v14;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v5 = (_DWORD *)operator new();
    *v5 = *v2;
    v6 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v5;
    if (v6)
      MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v13 = 0;
  v7 = (_DWORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v7, 4, &v13, 0);
  if ((_DWORD)v3 || !v13)
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  }
  v12 = 0;
  v8 = (_DWORD *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v8, 4, &v12, 0);
  if ((_DWORD)v3 || !v12)
  {
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v8);
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  }
  v11 = 0;
  v9 = (_DWORD *)operator new();
  *v9 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v9, 4, &v11, 0);
  if (!(_DWORD)v3 && v11)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 11, v9);
  MEMORY[0x212BB9B60](v9, 0x1000C4052888210);
  return v3;
}

void sub_20E29F068(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiFpSnapshot_SDK::hasDeclaredGmid(AriSdk::ARI_CsiFpSnapshot_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -125599744;
}

AriSdk::MsgBase *AriSdk::ARI_CsiFpSnapshotRsp_SDK::ARI_CsiFpSnapshotRsp_SDK(AriSdk::ARI_CsiFpSnapshotRsp_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9038000, 0);
  *(_QWORD *)result = &off_24C91AEA0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9038000, 0);
  *(_QWORD *)result = &off_24C91AEA0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiFpSnapshotRsp_SDK::ARI_CsiFpSnapshotRsp_SDK(AriSdk::ARI_CsiFpSnapshotRsp_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AEA0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AEA0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_CsiFpSnapshotRsp_SDK::~ARI_CsiFpSnapshotRsp_SDK(AriSdk::ARI_CsiFpSnapshotRsp_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C91AEA0;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiFpSnapshotRsp_SDK::~ARI_CsiFpSnapshotRsp_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiFpSnapshotRsp_SDK::pack(AriSdk::ARI_CsiFpSnapshotRsp_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiFpSnapshotRsp_SDK::unpack(AriSdk::ARI_CsiFpSnapshotRsp_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E29F3D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiFpSnapshotRsp_SDK::hasDeclaredGmid(AriSdk::ARI_CsiFpSnapshotRsp_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -117211136;
}

AriSdk::MsgBase *AriSdk::ARI_CsiFpUpdateAck_SDK::ARI_CsiFpUpdateAck_SDK(AriSdk::ARI_CsiFpUpdateAck_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8840000, 0);
  *(_QWORD *)result = &off_24C91AED8;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8840000, 0);
  *(_QWORD *)result = &off_24C91AED8;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiFpUpdateAck_SDK::ARI_CsiFpUpdateAck_SDK(AriSdk::ARI_CsiFpUpdateAck_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AED8;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AED8;
  return result;
}

void AriSdk::ARI_CsiFpUpdateAck_SDK::~ARI_CsiFpUpdateAck_SDK(AriSdk::ARI_CsiFpUpdateAck_SDK *this)
{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiFpUpdateAck_SDK::pack(AriSdk::ARI_CsiFpUpdateAck_SDK *this, AriMsg **a2)
{
  *a2 = 0;
  *a2 = (AriMsg *)*((_QWORD *)this + 6);
  return 0;
}

uint64_t AriSdk::ARI_CsiFpUpdateAck_SDK::unpack(AriSdk::ARI_CsiFpUpdateAck_SDK *this)
{
  return 0;
}

BOOL AriSdk::ARI_CsiFpUpdateAck_SDK::hasDeclaredGmid(AriSdk::ARI_CsiFpUpdateAck_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -125566976;
}

AriSdk::MsgBase *AriSdk::ARI_CsiFpUpdateAckRsp_SDK::ARI_CsiFpUpdateAckRsp_SDK(AriSdk::ARI_CsiFpUpdateAckRsp_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9040000, 0);
  *(_QWORD *)result = &off_24C91AF10;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9040000, 0);
  *(_QWORD *)result = &off_24C91AF10;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiFpUpdateAckRsp_SDK::ARI_CsiFpUpdateAckRsp_SDK(AriSdk::ARI_CsiFpUpdateAckRsp_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AF10;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AF10;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_CsiFpUpdateAckRsp_SDK::~ARI_CsiFpUpdateAckRsp_SDK(AriSdk::ARI_CsiFpUpdateAckRsp_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C91AF10;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiFpUpdateAckRsp_SDK::~ARI_CsiFpUpdateAckRsp_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiFpUpdateAckRsp_SDK::pack(AriSdk::ARI_CsiFpUpdateAckRsp_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiFpUpdateAckRsp_SDK::unpack(AriSdk::ARI_CsiFpUpdateAckRsp_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E29F8CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiFpUpdateAckRsp_SDK::hasDeclaredGmid(AriSdk::ARI_CsiFpUpdateAckRsp_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -117178368;
}

AriSdk::MsgBase *AriSdk::ARI_CsiFpUpdateHeader_SDK::ARI_CsiFpUpdateHeader_SDK(AriSdk::ARI_CsiFpUpdateHeader_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8848000, 0);
  *(_QWORD *)result = &off_24C91AF48;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8848000, 0);
  *(_QWORD *)result = &off_24C91AF48;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiFpUpdateHeader_SDK::ARI_CsiFpUpdateHeader_SDK(AriSdk::ARI_CsiFpUpdateHeader_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AF48;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AF48;
  return result;
}

void AriSdk::ARI_CsiFpUpdateHeader_SDK::~ARI_CsiFpUpdateHeader_SDK(AriSdk::ARI_CsiFpUpdateHeader_SDK *this)
{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiFpUpdateHeader_SDK::pack(AriSdk::ARI_CsiFpUpdateHeader_SDK *this, AriMsg **a2)
{
  *a2 = 0;
  *a2 = (AriMsg *)*((_QWORD *)this + 6);
  return 0;
}

uint64_t AriSdk::ARI_CsiFpUpdateHeader_SDK::unpack(AriSdk::ARI_CsiFpUpdateHeader_SDK *this)
{
  return 0;
}

BOOL AriSdk::ARI_CsiFpUpdateHeader_SDK::hasDeclaredGmid(AriSdk::ARI_CsiFpUpdateHeader_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -125534208;
}

AriSdk::MsgBase *AriSdk::ARI_CsiFpUpdateHeaderData_SDK::ARI_CsiFpUpdateHeaderData_SDK(AriSdk::ARI_CsiFpUpdateHeaderData_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9048000, 0);
  *(_QWORD *)result = &off_24C91AF80;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9048000, 0);
  *(_QWORD *)result = &off_24C91AF80;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiFpUpdateHeaderData_SDK::ARI_CsiFpUpdateHeaderData_SDK(AriSdk::ARI_CsiFpUpdateHeaderData_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AF80;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AF80;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiFpUpdateHeaderData_SDK::~ARI_CsiFpUpdateHeaderData_SDK(AriSdk::ARI_CsiFpUpdateHeaderData_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C91AF80;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C404247E4FDLL);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiFpUpdateHeaderData_SDK::~ARI_CsiFpUpdateHeaderData_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiFpUpdateHeaderData_SDK::pack(AriSdk::ARI_CsiFpUpdateHeaderData_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 0x50uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 4uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiFpUpdateHeaderData_SDK::unpack(AriSdk::ARI_CsiFpUpdateHeaderData_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _OWORD *v5;
  _DWORD *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_OWORD *)operator new();
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 80, &v9, 0);
  if ((_DWORD)v3 || !v9)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C404247E4FDLL);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<CsiFlashPluginHeader>::operator=<CsiFlashPluginHeader&,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C404247E4FDLL);
  }
  v8 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 4, &v8, 0);
  if (!(_DWORD)v3 && v8)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  return v3;
}

void sub_20E29FEC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

uint64_t *AriSdk::Tlv<CsiFlashPluginHeader>::operator=<CsiFlashPluginHeader&,void>(uint64_t *a1, _OWORD *a2)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v4 = (_OWORD *)operator new();
  v5 = a2[3];
  v4[2] = a2[2];
  v4[3] = v5;
  v4[4] = a2[4];
  v6 = a2[1];
  *v4 = *a2;
  v4[1] = v6;
  v7 = *a1;
  *a1 = (uint64_t)v4;
  if (v7)
    MEMORY[0x212BB9B60](v7, 0x1000C404247E4FDLL);
  return a1;
}

BOOL AriSdk::ARI_CsiFpUpdateHeaderData_SDK::hasDeclaredGmid(AriSdk::ARI_CsiFpUpdateHeaderData_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -117145600;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIceAtReq_SDK::ARI_CsiIceAtReq_SDK(AriSdk::ARI_CsiIceAtReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8858000, 0);
  *(_QWORD *)result = &off_24C91AFB8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8858000, 0);
  *(_QWORD *)result = &off_24C91AFB8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIceAtReq_SDK::ARI_CsiIceAtReq_SDK(AriSdk::ARI_CsiIceAtReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AFB8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AFB8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiIceAtReq_SDK::~ARI_CsiIceAtReq_SDK(AriSdk::ARI_CsiIceAtReq_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C91AFB8;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C402633B4A5);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiIceAtReq_SDK::~ARI_CsiIceAtReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiIceAtReq_SDK::pack(AriSdk::ARI_CsiIceAtReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 0xC04uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiIceAtReq_SDK::unpack(AriSdk::ARI_CsiIceAtReq_SDK *this)
{
  void *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (void *)operator new();
  bzero(v2, 0xC04uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 3076, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<CsiIceAtStringPayload>::operator=<CsiIceAtStringPayload&,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C402633B4A5);
  return v3;
}

void sub_20E2A01E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C402633B4A5);
  _Unwind_Resume(a1);
}

uint64_t *AriSdk::Tlv<CsiIceAtStringPayload>::operator=<CsiIceAtStringPayload&,void>(uint64_t *a1, const void *a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)operator new();
  memcpy(v4, a2, 0xC04uLL);
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C402633B4A5);
  return a1;
}

BOOL AriSdk::ARI_CsiIceAtReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiIceAtReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -125468672;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIceAtRsp_SDK::ARI_CsiIceAtRsp_SDK(AriSdk::ARI_CsiIceAtRsp_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9058000, 0);
  *(_QWORD *)result = &off_24C91AFF0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9058000, 0);
  *(_QWORD *)result = &off_24C91AFF0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIceAtRsp_SDK::ARI_CsiIceAtRsp_SDK(AriSdk::ARI_CsiIceAtRsp_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AFF0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91AFF0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_CsiIceAtRsp_SDK::~ARI_CsiIceAtRsp_SDK(AriSdk::ARI_CsiIceAtRsp_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C91AFF0;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C402633B4A5);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiIceAtRsp_SDK::~ARI_CsiIceAtRsp_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiIceAtRsp_SDK::pack(AriSdk::ARI_CsiIceAtRsp_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 0xC04uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiIceAtRsp_SDK::unpack(AriSdk::ARI_CsiIceAtRsp_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  void *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (void *)operator new();
  bzero(v5, 0xC04uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 3076, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<CsiIceAtStringPayload>::operator=<CsiIceAtStringPayload&,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C402633B4A5);
  return v3;
}

void sub_20E2A05AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C402633B4A5);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiIceAtRsp_SDK::hasDeclaredGmid(AriSdk::ARI_CsiIceAtRsp_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -117080064;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIceAtExtReq_SDK::ARI_CsiIceAtExtReq_SDK(AriSdk::ARI_CsiIceAtExtReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF88A8000, 0);
  *(_QWORD *)result = &off_24C91B028;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF88A8000, 0);
  *(_QWORD *)result = &off_24C91B028;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIceAtExtReq_SDK::ARI_CsiIceAtExtReq_SDK(AriSdk::ARI_CsiIceAtExtReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B028;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B028;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiIceAtExtReq_SDK::~ARI_CsiIceAtExtReq_SDK(AriSdk::ARI_CsiIceAtExtReq_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C91B028;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4026944624);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiIceAtExtReq_SDK::~ARI_CsiIceAtExtReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiIceAtExtReq_SDK::pack(AriSdk::ARI_CsiIceAtExtReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 0xC0CuLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiIceAtExtReq_SDK::unpack(AriSdk::ARI_CsiIceAtExtReq_SDK *this)
{
  void *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (void *)operator new();
  bzero(v2, 0xC0CuLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 3084, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<CsiIceAtExtStringPayload>::operator=<CsiIceAtExtStringPayload&,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4026944624);
  return v3;
}

void sub_20E2A0848(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4026944624);
  _Unwind_Resume(a1);
}

uint64_t *AriSdk::Tlv<CsiIceAtExtStringPayload>::operator=<CsiIceAtExtStringPayload&,void>(uint64_t *a1, const void *a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)operator new();
  memcpy(v4, a2, 0xC0CuLL);
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4026944624);
  return a1;
}

BOOL AriSdk::ARI_CsiIceAtExtReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiIceAtExtReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -125140992;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIceAtExtRsp_SDK::ARI_CsiIceAtExtRsp_SDK(AriSdk::ARI_CsiIceAtExtRsp_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF90A8000, 0);
  *(_QWORD *)result = &off_24C91B060;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF90A8000, 0);
  *(_QWORD *)result = &off_24C91B060;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIceAtExtRsp_SDK::ARI_CsiIceAtExtRsp_SDK(AriSdk::ARI_CsiIceAtExtRsp_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B060;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B060;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_CsiIceAtExtRsp_SDK::~ARI_CsiIceAtExtRsp_SDK(AriSdk::ARI_CsiIceAtExtRsp_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C91B060;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4026944624);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiIceAtExtRsp_SDK::~ARI_CsiIceAtExtRsp_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiIceAtExtRsp_SDK::pack(AriSdk::ARI_CsiIceAtExtRsp_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 0xC0CuLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiIceAtExtRsp_SDK::unpack(AriSdk::ARI_CsiIceAtExtRsp_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  void *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (void *)operator new();
  bzero(v5, 0xC0CuLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 3084, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<CsiIceAtExtStringPayload>::operator=<CsiIceAtExtStringPayload&,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4026944624);
  return v3;
}

void sub_20E2A0C14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4026944624);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiIceAtExtRsp_SDK::hasDeclaredGmid(AriSdk::ARI_CsiIceAtExtRsp_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -116752384;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIceAtExtInd_SDK::ARI_CsiIceAtExtInd_SDK(AriSdk::ARI_CsiIceAtExtInd_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF98A8000, 0);
  *(_QWORD *)result = &off_24C91B098;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF98A8000, 0);
  *(_QWORD *)result = &off_24C91B098;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIceAtExtInd_SDK::ARI_CsiIceAtExtInd_SDK(AriSdk::ARI_CsiIceAtExtInd_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B098;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B098;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiIceAtExtInd_SDK::~ARI_CsiIceAtExtInd_SDK(AriSdk::ARI_CsiIceAtExtInd_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C91B098;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4026944624);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiIceAtExtInd_SDK::~ARI_CsiIceAtExtInd_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiIceAtExtInd_SDK::pack(AriSdk::ARI_CsiIceAtExtInd_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 0xC0CuLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiIceAtExtInd_SDK::unpack(AriSdk::ARI_CsiIceAtExtInd_SDK *this)
{
  void *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (void *)operator new();
  bzero(v2, 0xC0CuLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 3084, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<CsiIceAtExtStringPayload>::operator=<CsiIceAtExtStringPayload&,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4026944624);
  return v3;
}

void sub_20E2A0EB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4026944624);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiIceAtExtInd_SDK::hasDeclaredGmid(AriSdk::ARI_CsiIceAtExtInd_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -108363776;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIceBspSetApWakeIntervalReq_SDK::ARI_CsiIceBspSetApWakeIntervalReq_SDK(AriSdk::ARI_CsiIceBspSetApWakeIntervalReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF88B0000, 0);
  *(_QWORD *)result = &off_24C91B0D0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF88B0000, 0);
  *(_QWORD *)result = &off_24C91B0D0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIceBspSetApWakeIntervalReq_SDK::ARI_CsiIceBspSetApWakeIntervalReq_SDK(AriSdk::ARI_CsiIceBspSetApWakeIntervalReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B0D0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B0D0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_CsiIceBspSetApWakeIntervalReq_SDK::~ARI_CsiIceBspSetApWakeIntervalReq_SDK(AriSdk::ARI_CsiIceBspSetApWakeIntervalReq_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C91B0D0;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiIceBspSetApWakeIntervalReq_SDK::~ARI_CsiIceBspSetApWakeIntervalReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiIceBspSetApWakeIntervalReq_SDK::pack(AriSdk::ARI_CsiIceBspSetApWakeIntervalReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiIceBspSetApWakeIntervalReq_SDK::unpack(AriSdk::ARI_CsiIceBspSetApWakeIntervalReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E2A11FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiIceBspSetApWakeIntervalReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiIceBspSetApWakeIntervalReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -125108224;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIceBspSetApWakeIntervalRspCb_SDK::ARI_CsiIceBspSetApWakeIntervalRspCb_SDK(AriSdk::ARI_CsiIceBspSetApWakeIntervalRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF90B0000, 0);
  *(_QWORD *)result = &off_24C91B108;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF90B0000, 0);
  *(_QWORD *)result = &off_24C91B108;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIceBspSetApWakeIntervalRspCb_SDK::ARI_CsiIceBspSetApWakeIntervalRspCb_SDK(AriSdk::ARI_CsiIceBspSetApWakeIntervalRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B108;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B108;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiIceBspSetApWakeIntervalRspCb_SDK::~ARI_CsiIceBspSetApWakeIntervalRspCb_SDK(AriSdk::ARI_CsiIceBspSetApWakeIntervalRspCb_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C91B108;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiIceBspSetApWakeIntervalRspCb_SDK::~ARI_CsiIceBspSetApWakeIntervalRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiIceBspSetApWakeIntervalRspCb_SDK::pack(AriSdk::ARI_CsiIceBspSetApWakeIntervalRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiIceBspSetApWakeIntervalRspCb_SDK::unpack(AriSdk::ARI_CsiIceBspSetApWakeIntervalRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E2A1478(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiIceBspSetApWakeIntervalRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_CsiIceBspSetApWakeIntervalRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -116719616;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIceBspShutdownInd_SDK::ARI_CsiIceBspShutdownInd_SDK(AriSdk::ARI_CsiIceBspShutdownInd_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF98C8000, 0);
  *(_QWORD *)result = &off_24C91B140;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF98C8000, 0);
  *(_QWORD *)result = &off_24C91B140;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIceBspShutdownInd_SDK::ARI_CsiIceBspShutdownInd_SDK(AriSdk::ARI_CsiIceBspShutdownInd_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B140;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B140;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiIceBspShutdownInd_SDK::~ARI_CsiIceBspShutdownInd_SDK(AriSdk::ARI_CsiIceBspShutdownInd_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C91B140;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiIceBspShutdownInd_SDK::~ARI_CsiIceBspShutdownInd_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiIceBspShutdownInd_SDK::pack(AriSdk::ARI_CsiIceBspShutdownInd_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiIceBspShutdownInd_SDK::unpack(AriSdk::ARI_CsiIceBspShutdownInd_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E2A16F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiIceBspShutdownInd_SDK::hasDeclaredGmid(AriSdk::ARI_CsiIceBspShutdownInd_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -108232704;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIceBspWakeInd_SDK::ARI_CsiIceBspWakeInd_SDK(AriSdk::ARI_CsiIceBspWakeInd_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF98B8000, 0);
  *(_QWORD *)result = &off_24C91B178;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF98B8000, 0);
  *(_QWORD *)result = &off_24C91B178;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIceBspWakeInd_SDK::ARI_CsiIceBspWakeInd_SDK(AriSdk::ARI_CsiIceBspWakeInd_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B178;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B178;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiIceBspWakeInd_SDK::~ARI_CsiIceBspWakeInd_SDK(AriSdk::ARI_CsiIceBspWakeInd_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C91B178;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiIceBspWakeInd_SDK::~ARI_CsiIceBspWakeInd_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiIceBspWakeInd_SDK::pack(AriSdk::ARI_CsiIceBspWakeInd_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiIceBspWakeInd_SDK::unpack(AriSdk::ARI_CsiIceBspWakeInd_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E2A1974(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiIceBspWakeInd_SDK::hasDeclaredGmid(AriSdk::ARI_CsiIceBspWakeInd_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -108298240;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIceFilerReadReq_SDK::ARI_CsiIceFilerReadReq_SDK(AriSdk::ARI_CsiIceFilerReadReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8820000, 0);
  *(_QWORD *)result = &off_24C91B1B0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8820000, 0);
  *(_QWORD *)result = &off_24C91B1B0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIceFilerReadReq_SDK::ARI_CsiIceFilerReadReq_SDK(AriSdk::ARI_CsiIceFilerReadReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B1B0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B1B0;
  return result;
}

void AriSdk::ARI_CsiIceFilerReadReq_SDK::~ARI_CsiIceFilerReadReq_SDK(AriSdk::ARI_CsiIceFilerReadReq_SDK *this)
{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiIceFilerReadReq_SDK::pack(AriSdk::ARI_CsiIceFilerReadReq_SDK *this, AriMsg **a2)
{
  *a2 = 0;
  *a2 = (AriMsg *)*((_QWORD *)this + 6);
  return 0;
}

uint64_t AriSdk::ARI_CsiIceFilerReadReq_SDK::unpack(AriSdk::ARI_CsiIceFilerReadReq_SDK *this)
{
  return 0;
}

BOOL AriSdk::ARI_CsiIceFilerReadReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiIceFilerReadReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -125698048;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIceFilerReadRspCb_SDK::ARI_CsiIceFilerReadRspCb_SDK(AriSdk::ARI_CsiIceFilerReadRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9020000, 0);
  *(_QWORD *)result = &off_24C91B1E8;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9020000, 0);
  *(_QWORD *)result = &off_24C91B1E8;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIceFilerReadRspCb_SDK::ARI_CsiIceFilerReadRspCb_SDK(AriSdk::ARI_CsiIceFilerReadRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B1E8;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B1E8;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiIceFilerReadRspCb_SDK::~ARI_CsiIceFilerReadRspCb_SDK(AriSdk::ARI_CsiIceFilerReadRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C91B1E8;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C40BD1F2613);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiIceFilerReadRspCb_SDK::~ARI_CsiIceFilerReadRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiIceFilerReadRspCb_SDK::pack(AriSdk::ARI_CsiIceFilerReadRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 0xC00uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiIceFilerReadRspCb_SDK::unpack(AriSdk::ARI_CsiIceFilerReadRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  void *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v9, 0);
  if ((_DWORD)v3 || !v9)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v8 = 0;
  v6 = (void *)operator new();
  bzero(v6, 0xC00uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 3072, &v8, 0);
  if (!(_DWORD)v3 && v8)
    AriSdk::Tlv<CsiIceFilerDataParam>::operator=<CsiIceFilerDataParam&,void>((uint64_t *)this + 10, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C40BD1F2613);
  return v3;
}

void sub_20E2A1F4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C40BD1F2613);
  _Unwind_Resume(a1);
}

uint64_t *AriSdk::Tlv<CsiIceFilerDataParam>::operator=<CsiIceFilerDataParam&,void>(uint64_t *a1, const void *a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)operator new();
  memcpy(v4, a2, 0xC00uLL);
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40BD1F2613);
  return a1;
}

BOOL AriSdk::ARI_CsiIceFilerReadRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_CsiIceFilerReadRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -117309440;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIceFilerWriteReq_SDK::ARI_CsiIceFilerWriteReq_SDK(AriSdk::ARI_CsiIceFilerWriteReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8828000, 0);
  *(_QWORD *)result = &off_24C91B220;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8828000, 0);
  *(_QWORD *)result = &off_24C91B220;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIceFilerWriteReq_SDK::ARI_CsiIceFilerWriteReq_SDK(AriSdk::ARI_CsiIceFilerWriteReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B220;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B220;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_CsiIceFilerWriteReq_SDK::~ARI_CsiIceFilerWriteReq_SDK(AriSdk::ARI_CsiIceFilerWriteReq_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C91B220;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C40BD1F2613);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiIceFilerWriteReq_SDK::~ARI_CsiIceFilerWriteReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiIceFilerWriteReq_SDK::pack(AriSdk::ARI_CsiIceFilerWriteReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 0xC00uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiIceFilerWriteReq_SDK::unpack(AriSdk::ARI_CsiIceFilerWriteReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  void *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (void *)operator new();
  bzero(v5, 0xC00uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 3072, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<CsiIceFilerDataParam>::operator=<CsiIceFilerDataParam&,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C40BD1F2613);
  return v3;
}

void sub_20E2A2334(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C40BD1F2613);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiIceFilerWriteReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiIceFilerWriteReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -125665280;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIceFilerWriteRspCb_SDK::ARI_CsiIceFilerWriteRspCb_SDK(AriSdk::ARI_CsiIceFilerWriteRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9028000, 0);
  *(_QWORD *)result = &off_24C91B258;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9028000, 0);
  *(_QWORD *)result = &off_24C91B258;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiIceFilerWriteRspCb_SDK::ARI_CsiIceFilerWriteRspCb_SDK(AriSdk::ARI_CsiIceFilerWriteRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B258;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B258;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiIceFilerWriteRspCb_SDK::~ARI_CsiIceFilerWriteRspCb_SDK(AriSdk::ARI_CsiIceFilerWriteRspCb_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C91B258;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiIceFilerWriteRspCb_SDK::~ARI_CsiIceFilerWriteRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiIceFilerWriteRspCb_SDK::pack(AriSdk::ARI_CsiIceFilerWriteRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiIceFilerWriteRspCb_SDK::unpack(AriSdk::ARI_CsiIceFilerWriteRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E2A25CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiIceFilerWriteRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_CsiIceFilerWriteRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -117276672;
}

AriSdk::MsgBase *AriSdk::ARI_CsiMonMemoryStatusReq_SDK::ARI_CsiMonMemoryStatusReq_SDK(AriSdk::ARI_CsiMonMemoryStatusReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8860000, 0);
  *(_QWORD *)result = &off_24C91B290;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8860000, 0);
  *(_QWORD *)result = &off_24C91B290;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiMonMemoryStatusReq_SDK::ARI_CsiMonMemoryStatusReq_SDK(AriSdk::ARI_CsiMonMemoryStatusReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B290;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B290;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiMonMemoryStatusReq_SDK::~ARI_CsiMonMemoryStatusReq_SDK(AriSdk::ARI_CsiMonMemoryStatusReq_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C91B290;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiMonMemoryStatusReq_SDK::~ARI_CsiMonMemoryStatusReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiMonMemoryStatusReq_SDK::pack(AriSdk::ARI_CsiMonMemoryStatusReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiMonMemoryStatusReq_SDK::unpack(AriSdk::ARI_CsiMonMemoryStatusReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E2A2844(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiMonMemoryStatusReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiMonMemoryStatusReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -125435904;
}

AriSdk::MsgBase *AriSdk::ARI_CsiMonMemoryStatusRspCb_SDK::ARI_CsiMonMemoryStatusRspCb_SDK(AriSdk::ARI_CsiMonMemoryStatusRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9060000, 0);
  *(_QWORD *)result = &off_24C91B2C8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9060000, 0);
  *(_QWORD *)result = &off_24C91B2C8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiMonMemoryStatusRspCb_SDK::ARI_CsiMonMemoryStatusRspCb_SDK(AriSdk::ARI_CsiMonMemoryStatusRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B2C8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B2C8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_CsiMonMemoryStatusRspCb_SDK::~ARI_CsiMonMemoryStatusRspCb_SDK(AriSdk::ARI_CsiMonMemoryStatusRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C91B2C8;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C40504FFAC1);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiMonMemoryStatusRspCb_SDK::~ARI_CsiMonMemoryStatusRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiMonMemoryStatusRspCb_SDK::pack(AriSdk::ARI_CsiMonMemoryStatusRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 0x18uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_CsiMonMemoryStatusRspCb_SDK::unpack(AriSdk::ARI_CsiMonMemoryStatusRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_QWORD *)operator new();
  v5[1] = 0;
  v5[2] = 0;
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 24, &v9, 0);
  if (!(_DWORD)v3 && v9)
  {
    v6 = operator new();
    *(_OWORD *)v6 = *(_OWORD *)v5;
    *(_QWORD *)(v6 + 16) = v5[2];
    v7 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v6;
    if (v7)
      MEMORY[0x212BB9B60](v7, 0x1000C40504FFAC1);
  }
  MEMORY[0x212BB9B60](v5, 0x1000C40504FFAC1);
  return v3;
}

void sub_20E2A2BD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C40504FFAC1);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiMonMemoryStatusRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_CsiMonMemoryStatusRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -117047296;
}

AriSdk::MsgBase *AriSdk::ARI_CsiSahClearExceptionStoreReq_SDK::ARI_CsiSahClearExceptionStoreReq_SDK(AriSdk::ARI_CsiSahClearExceptionStoreReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8898000, 0);
  *(_QWORD *)result = &off_24C91B300;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8898000, 0);
  *(_QWORD *)result = &off_24C91B300;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiSahClearExceptionStoreReq_SDK::ARI_CsiSahClearExceptionStoreReq_SDK(AriSdk::ARI_CsiSahClearExceptionStoreReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B300;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B300;
  return result;
}

void AriSdk::ARI_CsiSahClearExceptionStoreReq_SDK::~ARI_CsiSahClearExceptionStoreReq_SDK(AriSdk::ARI_CsiSahClearExceptionStoreReq_SDK *this)
{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiSahClearExceptionStoreReq_SDK::pack(AriSdk::ARI_CsiSahClearExceptionStoreReq_SDK *this, AriMsg **a2)
{
  *a2 = 0;
  *a2 = (AriMsg *)*((_QWORD *)this + 6);
  return 0;
}

uint64_t AriSdk::ARI_CsiSahClearExceptionStoreReq_SDK::unpack(AriSdk::ARI_CsiSahClearExceptionStoreReq_SDK *this)
{
  return 0;
}

BOOL AriSdk::ARI_CsiSahClearExceptionStoreReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiSahClearExceptionStoreReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -125206528;
}

AriSdk::MsgBase *AriSdk::ARI_CsiSahClearCrashResportRspCb_SDK::ARI_CsiSahClearCrashResportRspCb_SDK(AriSdk::ARI_CsiSahClearCrashResportRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9098000, 0);
  *(_QWORD *)result = &off_24C91B338;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9098000, 0);
  *(_QWORD *)result = &off_24C91B338;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiSahClearCrashResportRspCb_SDK::ARI_CsiSahClearCrashResportRspCb_SDK(AriSdk::ARI_CsiSahClearCrashResportRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B338;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B338;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiSahClearCrashResportRspCb_SDK::~ARI_CsiSahClearCrashResportRspCb_SDK(AriSdk::ARI_CsiSahClearCrashResportRspCb_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C91B338;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiSahClearCrashResportRspCb_SDK::~ARI_CsiSahClearCrashResportRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiSahClearCrashResportRspCb_SDK::pack(AriSdk::ARI_CsiSahClearCrashResportRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiSahClearCrashResportRspCb_SDK::unpack(AriSdk::ARI_CsiSahClearCrashResportRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E2A3014(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiSahClearCrashResportRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_CsiSahClearCrashResportRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -116817920;
}

AriSdk::MsgBase *AriSdk::ARI_CsiSahGetCrashReportReq_SDK::ARI_CsiSahGetCrashReportReq_SDK(AriSdk::ARI_CsiSahGetCrashReportReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8890000, 0);
  *(_QWORD *)result = &off_24C91B370;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8890000, 0);
  *(_QWORD *)result = &off_24C91B370;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiSahGetCrashReportReq_SDK::ARI_CsiSahGetCrashReportReq_SDK(AriSdk::ARI_CsiSahGetCrashReportReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B370;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B370;
  return result;
}

void AriSdk::ARI_CsiSahGetCrashReportReq_SDK::~ARI_CsiSahGetCrashReportReq_SDK(AriSdk::ARI_CsiSahGetCrashReportReq_SDK *this)
{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiSahGetCrashReportReq_SDK::pack(AriSdk::ARI_CsiSahGetCrashReportReq_SDK *this, AriMsg **a2)
{
  *a2 = 0;
  *a2 = (AriMsg *)*((_QWORD *)this + 6);
  return 0;
}

uint64_t AriSdk::ARI_CsiSahGetCrashReportReq_SDK::unpack(AriSdk::ARI_CsiSahGetCrashReportReq_SDK *this)
{
  return 0;
}

BOOL AriSdk::ARI_CsiSahGetCrashReportReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiSahGetCrashReportReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -125239296;
}

AriSdk::MsgBase *AriSdk::ARI_CsiSahGetCrashReportRspCb_SDK::ARI_CsiSahGetCrashReportRspCb_SDK(AriSdk::ARI_CsiSahGetCrashReportRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9090000, 0);
  *(_QWORD *)result = &off_24C91B3A8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9090000, 0);
  *(_QWORD *)result = &off_24C91B3A8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiSahGetCrashReportRspCb_SDK::ARI_CsiSahGetCrashReportRspCb_SDK(AriSdk::ARI_CsiSahGetCrashReportRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B3A8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B3A8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiSahGetCrashReportRspCb_SDK::~ARI_CsiSahGetCrashReportRspCb_SDK(AriSdk::ARI_CsiSahGetCrashReportRspCb_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C91B3A8;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4000313F17);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiSahGetCrashReportRspCb_SDK::~ARI_CsiSahGetCrashReportRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiSahGetCrashReportRspCb_SDK::pack(AriSdk::ARI_CsiSahGetCrashReportRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 8uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiSahGetCrashReportRspCb_SDK::unpack(AriSdk::ARI_CsiSahGetCrashReportRspCb_SDK *this)
{
  _QWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_QWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 8, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<AriStatusTlv>::operator=<AriStatusTlv&,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4000313F17);
  return v3;
}

void sub_20E2A3430(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4000313F17);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiSahGetCrashReportRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_CsiSahGetCrashReportRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -116850688;
}

AriSdk::MsgBase *AriSdk::ARI_CsiSahGetDebugLogReq_SDK::ARI_CsiSahGetDebugLogReq_SDK(AriSdk::ARI_CsiSahGetDebugLogReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF88A0000, 0);
  *(_QWORD *)result = &off_24C91B3E0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF88A0000, 0);
  *(_QWORD *)result = &off_24C91B3E0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiSahGetDebugLogReq_SDK::ARI_CsiSahGetDebugLogReq_SDK(AriSdk::ARI_CsiSahGetDebugLogReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B3E0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B3E0;
  return result;
}

void AriSdk::ARI_CsiSahGetDebugLogReq_SDK::~ARI_CsiSahGetDebugLogReq_SDK(AriSdk::ARI_CsiSahGetDebugLogReq_SDK *this)
{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiSahGetDebugLogReq_SDK::pack(AriSdk::ARI_CsiSahGetDebugLogReq_SDK *this, AriMsg **a2)
{
  *a2 = 0;
  *a2 = (AriMsg *)*((_QWORD *)this + 6);
  return 0;
}

uint64_t AriSdk::ARI_CsiSahGetDebugLogReq_SDK::unpack(AriSdk::ARI_CsiSahGetDebugLogReq_SDK *this)
{
  return 0;
}

BOOL AriSdk::ARI_CsiSahGetDebugLogReq_SDK::hasDeclaredGmid(AriSdk::ARI_CsiSahGetDebugLogReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -125173760;
}

AriSdk::MsgBase *AriSdk::ARI_CsiSahGetDebugLogRspCb_SDK::ARI_CsiSahGetDebugLogRspCb_SDK(AriSdk::ARI_CsiSahGetDebugLogRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF90A0000, 0);
  *(_QWORD *)result = &off_24C91B418;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF90A0000, 0);
  *(_QWORD *)result = &off_24C91B418;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_CsiSahGetDebugLogRspCb_SDK::ARI_CsiSahGetDebugLogRspCb_SDK(AriSdk::ARI_CsiSahGetDebugLogRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B418;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B418;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_CsiSahGetDebugLogRspCb_SDK::~ARI_CsiSahGetDebugLogRspCb_SDK(AriSdk::ARI_CsiSahGetDebugLogRspCb_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C91B418;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C40B74A6528);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_CsiSahGetDebugLogRspCb_SDK::~ARI_CsiSahGetDebugLogRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_CsiSahGetDebugLogRspCb_SDK::pack(AriSdk::ARI_CsiSahGetDebugLogRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 0x1008uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_CsiSahGetDebugLogRspCb_SDK::unpack(AriMsg **this)
{
  void *v2;
  uint64_t v3;
  BOOL v4;
  void *v5;
  AriMsg *v6;
  BOOL v8;

  v8 = 0;
  v2 = (void *)operator new();
  bzero(v2, 0x1008uLL);
  v3 = AriMsg::unpack(this[6], 1, v2, 4104, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (!v4)
  {
    v5 = (void *)operator new();
    memcpy(v5, v2, 0x1008uLL);
    v6 = this[8];
    this[8] = (AriMsg *)v5;
    if (v6)
      MEMORY[0x212BB9B60](v6, 0x1000C40B74A6528);
  }
  MEMORY[0x212BB9B60](v2, 0x1000C40B74A6528);
  return v3;
}

void sub_20E2A3888(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C40B74A6528);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_CsiSahGetDebugLogRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_CsiSahGetDebugLogRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -116785152;
}

AriSdk::MsgBase *AriSdk::ARI_FactoryGetNvItemsSettingReq_SDK::ARI_FactoryGetNvItemsSettingReq_SDK(AriSdk::ARI_FactoryGetNvItemsSettingReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8818000, 0);
  *(_QWORD *)result = &off_24C91B450;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8818000, 0);
  *(_QWORD *)result = &off_24C91B450;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_FactoryGetNvItemsSettingReq_SDK::ARI_FactoryGetNvItemsSettingReq_SDK(AriSdk::ARI_FactoryGetNvItemsSettingReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B450;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B450;
  return result;
}

void AriSdk::ARI_FactoryGetNvItemsSettingReq_SDK::~ARI_FactoryGetNvItemsSettingReq_SDK(AriSdk::ARI_FactoryGetNvItemsSettingReq_SDK *this)
{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &unk_24C8DB478;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_FactoryGetNvItemsSettingReq_SDK::pack(AriSdk::ARI_FactoryGetNvItemsSettingReq_SDK *this, AriMsg **a2)
{
  *a2 = 0;
  *a2 = (AriMsg *)*((_QWORD *)this + 6);
  return 0;
}

uint64_t AriSdk::ARI_FactoryGetNvItemsSettingReq_SDK::unpack(AriSdk::ARI_FactoryGetNvItemsSettingReq_SDK *this)
{
  return 0;
}

BOOL AriSdk::ARI_FactoryGetNvItemsSettingReq_SDK::hasDeclaredGmid(AriSdk::ARI_FactoryGetNvItemsSettingReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -125730816;
}

AriSdk::MsgBase *AriSdk::ARI_FactoryGetNvItemsSettingRspCb_SDK::ARI_FactoryGetNvItemsSettingRspCb_SDK(AriSdk::ARI_FactoryGetNvItemsSettingRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9018000, 0);
  *(_QWORD *)result = &off_24C91B488;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9018000, 0);
  *(_QWORD *)result = &off_24C91B488;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_FactoryGetNvItemsSettingRspCb_SDK::ARI_FactoryGetNvItemsSettingRspCb_SDK(AriSdk::ARI_FactoryGetNvItemsSettingRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B488;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B488;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_FactoryGetNvItemsSettingRspCb_SDK::~ARI_FactoryGetNvItemsSettingRspCb_SDK(AriSdk::ARI_FactoryGetNvItemsSettingRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C91B488;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_FactoryGetNvItemsSettingRspCb_SDK::~ARI_FactoryGetNvItemsSettingRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_FactoryGetNvItemsSettingRspCb_SDK::pack(AriSdk::ARI_FactoryGetNvItemsSettingRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 4uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_FactoryGetNvItemsSettingRspCb_SDK::unpack(AriSdk::ARI_FactoryGetNvItemsSettingRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v9, 0);
  if ((_DWORD)v3 || !v9)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v8 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 4, &v8, 0);
  if (!(_DWORD)v3 && v8)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  return v3;
}

void sub_20E2A3E6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_FactoryGetNvItemsSettingRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_FactoryGetNvItemsSettingRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -117342208;
}

AriSdk::MsgBase *AriSdk::ARI_FactorySetNvItemsSettingReq_SDK::ARI_FactorySetNvItemsSettingReq_SDK(AriSdk::ARI_FactorySetNvItemsSettingReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF88B8000, 0);
  *(_QWORD *)result = &off_24C91B4C0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF88B8000, 0);
  *(_QWORD *)result = &off_24C91B4C0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_FactorySetNvItemsSettingReq_SDK::ARI_FactorySetNvItemsSettingReq_SDK(AriSdk::ARI_FactorySetNvItemsSettingReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B4C0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B4C0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_FactorySetNvItemsSettingReq_SDK::~ARI_FactorySetNvItemsSettingReq_SDK(AriSdk::ARI_FactorySetNvItemsSettingReq_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C91B4C0;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_FactorySetNvItemsSettingReq_SDK::~ARI_FactorySetNvItemsSettingReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_FactorySetNvItemsSettingReq_SDK::pack(AriSdk::ARI_FactorySetNvItemsSettingReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_FactorySetNvItemsSettingReq_SDK::unpack(AriSdk::ARI_FactorySetNvItemsSettingReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E2A40FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_FactorySetNvItemsSettingReq_SDK::hasDeclaredGmid(AriSdk::ARI_FactorySetNvItemsSettingReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -125075456;
}

AriSdk::MsgBase *AriSdk::ARI_FactorySetNvItemsSettingRspCb_SDK::ARI_FactorySetNvItemsSettingRspCb_SDK(AriSdk::ARI_FactorySetNvItemsSettingRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF90B8000, 0);
  *(_QWORD *)result = &off_24C91B4F8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF90B8000, 0);
  *(_QWORD *)result = &off_24C91B4F8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_FactorySetNvItemsSettingRspCb_SDK::ARI_FactorySetNvItemsSettingRspCb_SDK(AriSdk::ARI_FactorySetNvItemsSettingRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B4F8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B4F8;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_FactorySetNvItemsSettingRspCb_SDK::~ARI_FactorySetNvItemsSettingRspCb_SDK(AriSdk::ARI_FactorySetNvItemsSettingRspCb_SDK *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C91B4F8;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_FactorySetNvItemsSettingRspCb_SDK::~ARI_FactorySetNvItemsSettingRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_FactorySetNvItemsSettingRspCb_SDK::pack(AriSdk::ARI_FactorySetNvItemsSettingRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_FactorySetNvItemsSettingRspCb_SDK::unpack(AriSdk::ARI_FactorySetNvItemsSettingRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;

  v6 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v6, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v6;
  if (!v4)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
  MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  return v3;
}

void sub_20E2A437C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_FactorySetNvItemsSettingRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_FactorySetNvItemsSettingRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -116686848;
}

double AriSdk::ARI_IBIFilerHSClientReportInd_SDK::ARI_IBIFilerHSClientReportInd_SDK(AriSdk::ARI_IBIFilerHSClientReportInd_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0xF98D0000, 0);
  *(_QWORD *)v1 = &off_24C91B530;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_QWORD *)v1 + 12) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0xF98D0000, 0);
  *(_QWORD *)v1 = &off_24C91B530;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_QWORD *)v1 + 12) = 0;
  return result;
}

double AriSdk::ARI_IBIFilerHSClientReportInd_SDK::ARI_IBIFilerHSClientReportInd_SDK(AriSdk::ARI_IBIFilerHSClientReportInd_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C91B530;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_QWORD *)v3 + 12) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C91B530;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_QWORD *)v3 + 12) = 0;
  return result;
}

void AriSdk::ARI_IBIFilerHSClientReportInd_SDK::~ARI_IBIFilerHSClientReportInd_SDK(AriSdk::ARI_IBIFilerHSClientReportInd_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_24C91B530;
  v2 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  v5 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  v6 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIFilerHSClientReportInd_SDK::~ARI_IBIFilerHSClientReportInd_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIFilerHSClientReportInd_SDK::pack(AriSdk::ARI_IBIFilerHSClientReportInd_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 4uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v8, 4uLL, 0), !(_DWORD)result))
        {
          v9 = (const void *)*((_QWORD *)this + 12);
          if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v9, 4uLL, 0), !(_DWORD)result))
          {
            result = 0;
            *a2 = (AriMsg *)*((_QWORD *)this + 6);
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIFilerHSClientReportInd_SDK::unpack(AriSdk::ARI_IBIFilerHSClientReportInd_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;

  v14 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v14, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v14;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v13 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v13, 0);
  if ((_DWORD)v3 || !v13)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v12 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 4, &v12, 0);
  if ((_DWORD)v3 || !v12)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  }
  v11 = 0;
  v7 = (_DWORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v7, 4, &v11, 0);
  if ((_DWORD)v3 || !v11)
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 11, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  }
  v10 = 0;
  v8 = (_DWORD *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v8, 4, &v10, 0);
  if (!(_DWORD)v3 && v10)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 12, v8);
  MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  return v3;
}

void sub_20E2A4964(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIFilerHSClientReportInd_SDK::hasDeclaredGmid(AriSdk::ARI_IBIFilerHSClientReportInd_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -108199936;
}

AriSdk::MsgBase *AriSdk::ARI_IBIFilerHSEndBBSessionReq_SDK::ARI_IBIFilerHSEndBBSessionReq_SDK(AriSdk::ARI_IBIFilerHSEndBBSessionReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8918000, 0);
  *(_QWORD *)result = &off_24C91B568;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8918000, 0);
  *(_QWORD *)result = &off_24C91B568;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIFilerHSEndBBSessionReq_SDK::ARI_IBIFilerHSEndBBSessionReq_SDK(AriSdk::ARI_IBIFilerHSEndBBSessionReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B568;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B568;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIFilerHSEndBBSessionReq_SDK::~ARI_IBIFilerHSEndBBSessionReq_SDK(AriSdk::ARI_IBIFilerHSEndBBSessionReq_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C91B568;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C40A82D5742);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIFilerHSEndBBSessionReq_SDK::~ARI_IBIFilerHSEndBBSessionReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIFilerHSEndBBSessionReq_SDK::pack(AriSdk::ARI_IBIFilerHSEndBBSessionReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 0xBBAuLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 4uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIFilerHSEndBBSessionReq_SDK::unpack(AriSdk::ARI_IBIFilerHSEndBBSessionReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  void *v5;
  _DWORD *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (void *)operator new();
  bzero(v5, 0xBBAuLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 3002, &v9, 0);
  if ((_DWORD)v3 || !v9)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C40A82D5742);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBIFilerHSSessionFiles>::operator=<IBIFilerHSSessionFiles&,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C40A82D5742);
  }
  v8 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 4, &v8, 0);
  if (!(_DWORD)v3 && v8)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  return v3;
}

void sub_20E2A4DBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

uint64_t *AriSdk::Tlv<IBIFilerHSSessionFiles>::operator=<IBIFilerHSSessionFiles&,void>(uint64_t *a1, const void *a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)operator new();
  memcpy(v4, a2, 0xBBAuLL);
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C40A82D5742);
  return a1;
}

BOOL AriSdk::ARI_IBIFilerHSEndBBSessionReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIFilerHSEndBBSessionReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -124682240;
}

AriSdk::MsgBase *AriSdk::ARI_IBIFilerHSEndBBSessionRspCb_SDK::ARI_IBIFilerHSEndBBSessionRspCb_SDK(AriSdk::ARI_IBIFilerHSEndBBSessionRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9118000, 0);
  *(_QWORD *)result = &off_24C91B5A0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9118000, 0);
  *(_QWORD *)result = &off_24C91B5A0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIFilerHSEndBBSessionRspCb_SDK::ARI_IBIFilerHSEndBBSessionRspCb_SDK(AriSdk::ARI_IBIFilerHSEndBBSessionRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B5A0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B5A0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBIFilerHSEndBBSessionRspCb_SDK::~ARI_IBIFilerHSEndBBSessionRspCb_SDK(AriSdk::ARI_IBIFilerHSEndBBSessionRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C91B5A0;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIFilerHSEndBBSessionRspCb_SDK::~ARI_IBIFilerHSEndBBSessionRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIFilerHSEndBBSessionRspCb_SDK::pack(AriSdk::ARI_IBIFilerHSEndBBSessionRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIFilerHSEndBBSessionRspCb_SDK::unpack(AriSdk::ARI_IBIFilerHSEndBBSessionRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E2A51A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIFilerHSEndBBSessionRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIFilerHSEndBBSessionRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -116293632;
}

AriSdk::MsgBase *AriSdk::ARI_IBIFilerHSGetClientReportReq_SDK::ARI_IBIFilerHSGetClientReportReq_SDK(AriSdk::ARI_IBIFilerHSGetClientReportReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8928000, 0);
  *(_QWORD *)result = &off_24C91B5D8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8928000, 0);
  *(_QWORD *)result = &off_24C91B5D8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIFilerHSGetClientReportReq_SDK::ARI_IBIFilerHSGetClientReportReq_SDK(AriSdk::ARI_IBIFilerHSGetClientReportReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B5D8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B5D8;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBIFilerHSGetClientReportReq_SDK::~ARI_IBIFilerHSGetClientReportReq_SDK(AriSdk::ARI_IBIFilerHSGetClientReportReq_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C91B5D8;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIFilerHSGetClientReportReq_SDK::~ARI_IBIFilerHSGetClientReportReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIFilerHSGetClientReportReq_SDK::pack(AriSdk::ARI_IBIFilerHSGetClientReportReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIFilerHSGetClientReportReq_SDK::unpack(AriSdk::ARI_IBIFilerHSGetClientReportReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E2A5500(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIFilerHSGetClientReportReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIFilerHSGetClientReportReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -124616704;
}

double AriSdk::ARI_IBIFilerHSGetClientReportRspCb_SDK::ARI_IBIFilerHSGetClientReportRspCb_SDK(AriSdk::ARI_IBIFilerHSGetClientReportRspCb_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0xF9128000, 0);
  *(_QWORD *)v1 = &off_24C91B610;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0xF9128000, 0);
  *(_QWORD *)v1 = &off_24C91B610;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

double AriSdk::ARI_IBIFilerHSGetClientReportRspCb_SDK::ARI_IBIFilerHSGetClientReportRspCb_SDK(AriSdk::ARI_IBIFilerHSGetClientReportRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C91B610;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C91B610;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

void AriSdk::ARI_IBIFilerHSGetClientReportRspCb_SDK::~ARI_IBIFilerHSGetClientReportRspCb_SDK(AriSdk::ARI_IBIFilerHSGetClientReportRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C91B610;
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIFilerHSGetClientReportRspCb_SDK::~ARI_IBIFilerHSGetClientReportRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIFilerHSGetClientReportRspCb_SDK::pack(AriSdk::ARI_IBIFilerHSGetClientReportRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 4uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v8, 4uLL, 0), !(_DWORD)result))
        {
          result = 0;
          *a2 = (AriMsg *)*((_QWORD *)this + 6);
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIFilerHSGetClientReportRspCb_SDK::unpack(AriSdk::ARI_IBIFilerHSGetClientReportRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;

  v12 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v12, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v12;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v11 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v11, 0);
  if ((_DWORD)v3 || !v11)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v10 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 4, &v10, 0);
  if ((_DWORD)v3 || !v10)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  }
  v9 = 0;
  v7 = (_DWORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v7, 4, &v9, 0);
  if (!(_DWORD)v3 && v9)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 11, v7);
  MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  return v3;
}

void sub_20E2A5A14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIFilerHSGetClientReportRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIFilerHSGetClientReportRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -116228096;
}

double AriSdk::ARI_IBIFilerHSReadBBReq_SDK::ARI_IBIFilerHSReadBBReq_SDK(AriSdk::ARI_IBIFilerHSReadBBReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0xF8900000, 0);
  *(_QWORD *)v1 = &off_24C91B648;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0xF8900000, 0);
  *(_QWORD *)v1 = &off_24C91B648;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  return result;
}

double AriSdk::ARI_IBIFilerHSReadBBReq_SDK::ARI_IBIFilerHSReadBBReq_SDK(AriSdk::ARI_IBIFilerHSReadBBReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C91B648;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C91B648;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  return result;
}

void AriSdk::ARI_IBIFilerHSReadBBReq_SDK::~ARI_IBIFilerHSReadBBReq_SDK(AriSdk::ARI_IBIFilerHSReadBBReq_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C91B648;
  v2 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4000313F17);
  v4 = (void *)*((_QWORD *)this + 9);
  if (v4)
  {
    *((_QWORD *)this + 10) = v4;
    operator delete(v4);
  }
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIFilerHSReadBBReq_SDK::~ARI_IBIFilerHSReadBBReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIFilerHSReadBBReq_SDK::pack(AriSdk::ARI_IBIFilerHSReadBBReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  _BYTE *v6;
  _BYTE *v7;
  BOOL v8;
  const void *v9;
  const void *v10;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (_BYTE *)*((_QWORD *)this + 9);
    v7 = (_BYTE *)*((_QWORD *)this + 10);
    v8 = !v6 || v6 == v7;
    if (v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, v7 - v6, 0), !(_DWORD)result))
    {
      v9 = (const void *)*((_QWORD *)this + 12);
      if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v9, 8uLL, 0), !(_DWORD)result))
      {
        v10 = (const void *)*((_QWORD *)this + 13);
        if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v10, 4uLL, 0), !(_DWORD)result))
        {
          result = 0;
          *a2 = (AriMsg *)*((_QWORD *)this + 6);
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIFilerHSReadBBReq_SDK::unpack(AriSdk::ARI_IBIFilerHSReadBBReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _OWORD *v5;
  _QWORD *v6;
  _DWORD *v7;
  __n128 __p;
  uint64_t v10;
  size_t __sz;
  BOOL v12;

  __p.n128_u8[0] = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = __p.n128_u8[0] == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v12 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v5 = (_OWORD *)operator new[]();
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  *((_DWORD *)v5 + 24) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 100, &v12, &__sz);
  if ((_DWORD)v3 || !v12)
  {
    MEMORY[0x212BB9B48](v5, 0x1000C8077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v10 = 0;
    __p = 0uLL;
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&__p, v5, (uint64_t)v5 + __sz, __sz);
    AriSdk::TlvArray<char,100ul>::operator=((std::vector<int> *)this + 3, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    MEMORY[0x212BB9B48](v5, 0x1000C8077774924);
  }
  __p.n128_u8[0] = 0;
  v6 = (_QWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 8, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4000313F17);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<AriStatusTlv>::operator=<AriStatusTlv&,void>((uint64_t *)this + 12, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4000313F17);
  }
  __p.n128_u8[0] = 0;
  v7 = (_DWORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v7, 4, (BOOL *)&__p, 0);
  if (!(_DWORD)v3 && __p.n128_u8[0])
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 13, v7);
  MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  return v3;
}

void sub_20E2A5F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIFilerHSReadBBReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIFilerHSReadBBReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -124780544;
}

AriSdk::MsgBase *AriSdk::ARI_IBIFilerHSReadBBRspCb_SDK::ARI_IBIFilerHSReadBBRspCb_SDK(AriSdk::ARI_IBIFilerHSReadBBRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9100000, 0);
  *(_QWORD *)result = &off_24C91B680;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9100000, 0);
  *(_QWORD *)result = &off_24C91B680;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIFilerHSReadBBRspCb_SDK::ARI_IBIFilerHSReadBBRspCb_SDK(AriSdk::ARI_IBIFilerHSReadBBRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B680;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B680;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIFilerHSReadBBRspCb_SDK::~ARI_IBIFilerHSReadBBRspCb_SDK(AriSdk::ARI_IBIFilerHSReadBBRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C91B680;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4000313F17);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIFilerHSReadBBRspCb_SDK::~ARI_IBIFilerHSReadBBRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIFilerHSReadBBRspCb_SDK::pack(AriSdk::ARI_IBIFilerHSReadBBRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 8uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIFilerHSReadBBRspCb_SDK::unpack(AriSdk::ARI_IBIFilerHSReadBBRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _QWORD *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v9, 0);
  if ((_DWORD)v3 || !v9)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v8 = 0;
  v6 = (_QWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 8, &v8, 0);
  if (!(_DWORD)v3 && v8)
    AriSdk::Tlv<AriStatusTlv>::operator=<AriStatusTlv&,void>((uint64_t *)this + 10, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C4000313F17);
  return v3;
}

void sub_20E2A6404(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4000313F17);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIFilerHSReadBBRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIFilerHSReadBBRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -116391936;
}

double AriSdk::ARI_IBIFilerHSReadBBGetSizeReq_SDK::ARI_IBIFilerHSReadBBGetSizeReq_SDK(AriSdk::ARI_IBIFilerHSReadBBGetSizeReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0xF88F8000, 0);
  *(_QWORD *)v1 = &off_24C91B6B8;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_QWORD *)v1 + 12) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0xF88F8000, 0);
  *(_QWORD *)v1 = &off_24C91B6B8;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_QWORD *)v1 + 12) = 0;
  return result;
}

double AriSdk::ARI_IBIFilerHSReadBBGetSizeReq_SDK::ARI_IBIFilerHSReadBBGetSizeReq_SDK(AriSdk::ARI_IBIFilerHSReadBBGetSizeReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C91B6B8;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_QWORD *)v3 + 12) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C91B6B8;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_QWORD *)v3 + 12) = 0;
  return result;
}

void AriSdk::ARI_IBIFilerHSReadBBGetSizeReq_SDK::~ARI_IBIFilerHSReadBBGetSizeReq_SDK(AriSdk::ARI_IBIFilerHSReadBBGetSizeReq_SDK *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C91B6B8;
  v2 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 10) = v3;
    operator delete(v3);
  }
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIFilerHSReadBBGetSizeReq_SDK::~ARI_IBIFilerHSReadBBGetSizeReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIFilerHSReadBBGetSizeReq_SDK::pack(AriSdk::ARI_IBIFilerHSReadBBGetSizeReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  _BYTE *v6;
  _BYTE *v7;
  BOOL v8;
  const void *v9;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (_BYTE *)*((_QWORD *)this + 9);
    v7 = (_BYTE *)*((_QWORD *)this + 10);
    v8 = !v6 || v6 == v7;
    if (v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, v7 - v6, 0), !(_DWORD)result))
    {
      v9 = (const void *)*((_QWORD *)this + 12);
      if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v9, 4uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIFilerHSReadBBGetSizeReq_SDK::unpack(AriSdk::ARI_IBIFilerHSReadBBGetSizeReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _OWORD *v5;
  _DWORD *v6;
  __n128 __p;
  uint64_t v9;
  size_t __sz;
  BOOL v11;

  __p.n128_u8[0] = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = __p.n128_u8[0] == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v11 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v5 = (_OWORD *)operator new[]();
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  *((_DWORD *)v5 + 24) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 100, &v11, &__sz);
  if ((_DWORD)v3 || !v11)
  {
    MEMORY[0x212BB9B48](v5, 0x1000C8077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v9 = 0;
    __p = 0uLL;
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&__p, v5, (uint64_t)v5 + __sz, __sz);
    AriSdk::TlvArray<char,100ul>::operator=((std::vector<int> *)this + 3, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    MEMORY[0x212BB9B48](v5, 0x1000C8077774924);
  }
  __p.n128_u8[0] = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 4, (BOOL *)&__p, 0);
  if (!(_DWORD)v3 && __p.n128_u8[0])
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 12, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  return v3;
}

void sub_20E2A68A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIFilerHSReadBBGetSizeReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIFilerHSReadBBGetSizeReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -124813312;
}

AriSdk::MsgBase *AriSdk::ARI_IBIFilerHSReadBBGetSizeRspCb_SDK::ARI_IBIFilerHSReadBBGetSizeRspCb_SDK(AriSdk::ARI_IBIFilerHSReadBBGetSizeRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF90F8000, 0);
  *(_QWORD *)result = &off_24C91B6F0;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF90F8000, 0);
  *(_QWORD *)result = &off_24C91B6F0;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIFilerHSReadBBGetSizeRspCb_SDK::ARI_IBIFilerHSReadBBGetSizeRspCb_SDK(AriSdk::ARI_IBIFilerHSReadBBGetSizeRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B6F0;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B6F0;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBIFilerHSReadBBGetSizeRspCb_SDK::~ARI_IBIFilerHSReadBBGetSizeRspCb_SDK(AriSdk::ARI_IBIFilerHSReadBBGetSizeRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C91B6F0;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4000313F17);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIFilerHSReadBBGetSizeRspCb_SDK::~ARI_IBIFilerHSReadBBGetSizeRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIFilerHSReadBBGetSizeRspCb_SDK::pack(AriSdk::ARI_IBIFilerHSReadBBGetSizeRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 8uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIFilerHSReadBBGetSizeRspCb_SDK::unpack(AriSdk::ARI_IBIFilerHSReadBBGetSizeRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _QWORD *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v9, 0);
  if ((_DWORD)v3 || !v9)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v8 = 0;
  v6 = (_QWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 8, &v8, 0);
  if (!(_DWORD)v3 && v8)
    AriSdk::Tlv<AriStatusTlv>::operator=<AriStatusTlv&,void>((uint64_t *)this + 10, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C4000313F17);
  return v3;
}

void sub_20E2A6D20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4000313F17);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIFilerHSReadBBGetSizeRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIFilerHSReadBBGetSizeRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -116424704;
}

double AriSdk::ARI_IBIFilerHSStartReadBBSessionReq_SDK::ARI_IBIFilerHSStartReadBBSessionReq_SDK(AriSdk::ARI_IBIFilerHSStartReadBBSessionReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0xF88F0000, 0);
  *(_QWORD *)v1 = &off_24C91B728;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0xF88F0000, 0);
  *(_QWORD *)v1 = &off_24C91B728;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

double AriSdk::ARI_IBIFilerHSStartReadBBSessionReq_SDK::ARI_IBIFilerHSStartReadBBSessionReq_SDK(AriSdk::ARI_IBIFilerHSStartReadBBSessionReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C91B728;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C91B728;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

void AriSdk::ARI_IBIFilerHSStartReadBBSessionReq_SDK::~ARI_IBIFilerHSStartReadBBSessionReq_SDK(AriSdk::ARI_IBIFilerHSStartReadBBSessionReq_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C91B728;
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C40A82D5742);
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIFilerHSStartReadBBSessionReq_SDK::~ARI_IBIFilerHSStartReadBBSessionReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIFilerHSStartReadBBSessionReq_SDK::pack(AriSdk::ARI_IBIFilerHSStartReadBBSessionReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 0xBBAuLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 4uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v8, 4uLL, 0), !(_DWORD)result))
        {
          result = 0;
          *a2 = (AriMsg *)*((_QWORD *)this + 6);
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIFilerHSStartReadBBSessionReq_SDK::unpack(AriSdk::ARI_IBIFilerHSStartReadBBSessionReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  void *v5;
  _DWORD *v6;
  _DWORD *v7;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;

  v12 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v12, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v12;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v11 = 0;
  v5 = (void *)operator new();
  bzero(v5, 0xBBAuLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 3002, &v11, 0);
  if ((_DWORD)v3 || !v11)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C40A82D5742);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBIFilerHSSessionFiles>::operator=<IBIFilerHSSessionFiles&,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C40A82D5742);
  }
  v10 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 4, &v10, 0);
  if ((_DWORD)v3 || !v10)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  }
  v9 = 0;
  v7 = (_DWORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v7, 4, &v9, 0);
  if (!(_DWORD)v3 && v9)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 11, v7);
  MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  return v3;
}

void sub_20E2A7248(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIFilerHSStartReadBBSessionReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIFilerHSStartReadBBSessionReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -124846080;
}

AriSdk::MsgBase *AriSdk::ARI_IBIFilerHSStartReadBBSessionRspCb_SDK::ARI_IBIFilerHSStartReadBBSessionRspCb_SDK(AriSdk::ARI_IBIFilerHSStartReadBBSessionRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF90F0000, 0);
  *(_QWORD *)result = &off_24C91B760;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF90F0000, 0);
  *(_QWORD *)result = &off_24C91B760;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIFilerHSStartReadBBSessionRspCb_SDK::ARI_IBIFilerHSStartReadBBSessionRspCb_SDK(AriSdk::ARI_IBIFilerHSStartReadBBSessionRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B760;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B760;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBIFilerHSStartReadBBSessionRspCb_SDK::~ARI_IBIFilerHSStartReadBBSessionRspCb_SDK(AriSdk::ARI_IBIFilerHSStartReadBBSessionRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C91B760;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIFilerHSStartReadBBSessionRspCb_SDK::~ARI_IBIFilerHSStartReadBBSessionRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIFilerHSStartReadBBSessionRspCb_SDK::pack(AriSdk::ARI_IBIFilerHSStartReadBBSessionRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIFilerHSStartReadBBSessionRspCb_SDK::unpack(AriSdk::ARI_IBIFilerHSStartReadBBSessionRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E2A75B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIFilerHSStartReadBBSessionRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIFilerHSStartReadBBSessionRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -116457472;
}

double AriSdk::ARI_IBIFilerHSStartWriteBBSessionReq_SDK::ARI_IBIFilerHSStartWriteBBSessionReq_SDK(AriSdk::ARI_IBIFilerHSStartWriteBBSessionReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0xF8908000, 0);
  *(_QWORD *)v1 = &off_24C91B798;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0xF8908000, 0);
  *(_QWORD *)v1 = &off_24C91B798;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

double AriSdk::ARI_IBIFilerHSStartWriteBBSessionReq_SDK::ARI_IBIFilerHSStartWriteBBSessionReq_SDK(AriSdk::ARI_IBIFilerHSStartWriteBBSessionReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C91B798;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C91B798;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

void AriSdk::ARI_IBIFilerHSStartWriteBBSessionReq_SDK::~ARI_IBIFilerHSStartWriteBBSessionReq_SDK(AriSdk::ARI_IBIFilerHSStartWriteBBSessionReq_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C91B798;
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C40A82D5742);
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIFilerHSStartWriteBBSessionReq_SDK::~ARI_IBIFilerHSStartWriteBBSessionReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIFilerHSStartWriteBBSessionReq_SDK::pack(AriSdk::ARI_IBIFilerHSStartWriteBBSessionReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 0xBBAuLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 4uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v8, 4uLL, 0), !(_DWORD)result))
        {
          result = 0;
          *a2 = (AriMsg *)*((_QWORD *)this + 6);
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIFilerHSStartWriteBBSessionReq_SDK::unpack(AriSdk::ARI_IBIFilerHSStartWriteBBSessionReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  void *v5;
  _DWORD *v6;
  _DWORD *v7;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;

  v12 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v12, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v12;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v11 = 0;
  v5 = (void *)operator new();
  bzero(v5, 0xBBAuLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 3002, &v11, 0);
  if ((_DWORD)v3 || !v11)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C40A82D5742);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<IBIFilerHSSessionFiles>::operator=<IBIFilerHSSessionFiles&,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C40A82D5742);
  }
  v10 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 4, &v10, 0);
  if ((_DWORD)v3 || !v10)
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  }
  v9 = 0;
  v7 = (_DWORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v7, 4, &v9, 0);
  if (!(_DWORD)v3 && v9)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 11, v7);
  MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
  return v3;
}

void sub_20E2A7ACC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIFilerHSStartWriteBBSessionReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIFilerHSStartWriteBBSessionReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -124747776;
}

AriSdk::MsgBase *AriSdk::ARI_IBIFilerHSStartWriteBBSessionRspCb_SDK::ARI_IBIFilerHSStartWriteBBSessionRspCb_SDK(AriSdk::ARI_IBIFilerHSStartWriteBBSessionRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9108000, 0);
  *(_QWORD *)result = &off_24C91B7D0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9108000, 0);
  *(_QWORD *)result = &off_24C91B7D0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIFilerHSStartWriteBBSessionRspCb_SDK::ARI_IBIFilerHSStartWriteBBSessionRspCb_SDK(AriSdk::ARI_IBIFilerHSStartWriteBBSessionRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B7D0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B7D0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBIFilerHSStartWriteBBSessionRspCb_SDK::~ARI_IBIFilerHSStartWriteBBSessionRspCb_SDK(AriSdk::ARI_IBIFilerHSStartWriteBBSessionRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C91B7D0;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIFilerHSStartWriteBBSessionRspCb_SDK::~ARI_IBIFilerHSStartWriteBBSessionRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIFilerHSStartWriteBBSessionRspCb_SDK::pack(AriSdk::ARI_IBIFilerHSStartWriteBBSessionRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIFilerHSStartWriteBBSessionRspCb_SDK::unpack(AriSdk::ARI_IBIFilerHSStartWriteBBSessionRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E2A7E48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIFilerHSStartWriteBBSessionRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIFilerHSStartWriteBBSessionRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -116359168;
}

double AriSdk::ARI_IBIFilerHSWriteBBReq_SDK::ARI_IBIFilerHSWriteBBReq_SDK(AriSdk::ARI_IBIFilerHSWriteBBReq_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0xF8910000, 0);
  *(_QWORD *)v1 = &off_24C91B808;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_QWORD *)v1 + 14) = 0;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0xF8910000, 0);
  *(_QWORD *)v1 = &off_24C91B808;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_QWORD *)v1 + 14) = 0;
  return result;
}

double AriSdk::ARI_IBIFilerHSWriteBBReq_SDK::ARI_IBIFilerHSWriteBBReq_SDK(AriSdk::ARI_IBIFilerHSWriteBBReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C91B808;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_QWORD *)v3 + 14) = 0;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C91B808;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_QWORD *)v3 + 14) = 0;
  return result;
}

void AriSdk::ARI_IBIFilerHSWriteBBReq_SDK::~ARI_IBIFilerHSWriteBBReq_SDK(AriSdk::ARI_IBIFilerHSWriteBBReq_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_24C91B808;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4000313F17);
  v4 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4000313F17);
  v5 = (void *)*((_QWORD *)this + 9);
  if (v5)
  {
    *((_QWORD *)this + 10) = v5;
    operator delete(v5);
  }
  v6 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v6)
    MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIFilerHSWriteBBReq_SDK::~ARI_IBIFilerHSWriteBBReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIFilerHSWriteBBReq_SDK::pack(AriSdk::ARI_IBIFilerHSWriteBBReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  _BYTE *v6;
  _BYTE *v7;
  BOOL v8;
  const void *v9;
  const void *v10;
  const void *v11;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (_BYTE *)*((_QWORD *)this + 9);
    v7 = (_BYTE *)*((_QWORD *)this + 10);
    v8 = !v6 || v6 == v7;
    if (v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, v7 - v6, 0), !(_DWORD)result))
    {
      v9 = (const void *)*((_QWORD *)this + 12);
      if (!v9 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v9, 8uLL, 0), !(_DWORD)result))
      {
        v10 = (const void *)*((_QWORD *)this + 13);
        if (!v10 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v10, 8uLL, 0), !(_DWORD)result))
        {
          v11 = (const void *)*((_QWORD *)this + 14);
          if (!v11 || (result = AriMsg::pack(*((AriMsg **)this + 6), 5, v11, 4uLL, 0), !(_DWORD)result))
          {
            result = 0;
            *a2 = (AriMsg *)*((_QWORD *)this + 6);
          }
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIFilerHSWriteBBReq_SDK::unpack(AriSdk::ARI_IBIFilerHSWriteBBReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _OWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _DWORD *v8;
  __n128 __p;
  uint64_t v11;
  size_t __sz;
  BOOL v13;

  __p.n128_u8[0] = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, (BOOL *)&__p, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = __p.n128_u8[0] == 0;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v13 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v5 = (_OWORD *)operator new[]();
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  *((_DWORD *)v5 + 24) = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 100, &v13, &__sz);
  if ((_DWORD)v3 || !v13)
  {
    MEMORY[0x212BB9B48](v5, 0x1000C8077774924);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v11 = 0;
    __p = 0uLL;
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&__p, v5, (uint64_t)v5 + __sz, __sz);
    AriSdk::TlvArray<char,100ul>::operator=((std::vector<int> *)this + 3, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    MEMORY[0x212BB9B48](v5, 0x1000C8077774924);
  }
  __p.n128_u8[0] = 0;
  v6 = (_QWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 8, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v6, 0x1000C4000313F17);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<AriStatusTlv>::operator=<AriStatusTlv&,void>((uint64_t *)this + 12, v6);
    MEMORY[0x212BB9B60](v6, 0x1000C4000313F17);
  }
  __p.n128_u8[0] = 0;
  v7 = (_QWORD *)operator new();
  *v7 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v7, 8, (BOOL *)&__p, 0);
  if ((_DWORD)v3 || !__p.n128_u8[0])
  {
    MEMORY[0x212BB9B60](v7, 0x1000C4000313F17);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<AriStatusTlv>::operator=<AriStatusTlv&,void>((uint64_t *)this + 13, v7);
    MEMORY[0x212BB9B60](v7, 0x1000C4000313F17);
  }
  __p.n128_u8[0] = 0;
  v8 = (_DWORD *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 5, v8, 4, (BOOL *)&__p, 0);
  if (!(_DWORD)v3 && __p.n128_u8[0])
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 14, v8);
  MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  return v3;
}

void sub_20E2A8484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  MEMORY[0x212BB9B60](v11, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIFilerHSWriteBBReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBIFilerHSWriteBBReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -124715008;
}

AriSdk::MsgBase *AriSdk::ARI_IBIFilerHSWriteBBRspCb_SDK::ARI_IBIFilerHSWriteBBRspCb_SDK(AriSdk::ARI_IBIFilerHSWriteBBRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9110000, 0);
  *(_QWORD *)result = &off_24C91B840;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9110000, 0);
  *(_QWORD *)result = &off_24C91B840;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBIFilerHSWriteBBRspCb_SDK::ARI_IBIFilerHSWriteBBRspCb_SDK(AriSdk::ARI_IBIFilerHSWriteBBRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B840;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B840;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBIFilerHSWriteBBRspCb_SDK::~ARI_IBIFilerHSWriteBBRspCb_SDK(AriSdk::ARI_IBIFilerHSWriteBBRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C91B840;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBIFilerHSWriteBBRspCb_SDK::~ARI_IBIFilerHSWriteBBRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBIFilerHSWriteBBRspCb_SDK::pack(AriSdk::ARI_IBIFilerHSWriteBBRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBIFilerHSWriteBBRspCb_SDK::unpack(AriSdk::ARI_IBIFilerHSWriteBBRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E2A8830(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBIFilerHSWriteBBRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBIFilerHSWriteBBRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -116326400;
}

AriSdk::MsgBase *AriSdk::ARI_IBINvmSnapshotReq_SDK::ARI_IBINvmSnapshotReq_SDK(AriSdk::ARI_IBINvmSnapshotReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8920000, 0);
  *(_QWORD *)result = &off_24C91B878;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8920000, 0);
  *(_QWORD *)result = &off_24C91B878;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBINvmSnapshotReq_SDK::ARI_IBINvmSnapshotReq_SDK(AriSdk::ARI_IBINvmSnapshotReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B878;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B878;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_IBINvmSnapshotReq_SDK::~ARI_IBINvmSnapshotReq_SDK(AriSdk::ARI_IBINvmSnapshotReq_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C91B878;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINvmSnapshotReq_SDK::~ARI_IBINvmSnapshotReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINvmSnapshotReq_SDK::pack(AriSdk::ARI_IBINvmSnapshotReq_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 4uLL, 0), !(_DWORD)result))
      {
        result = 0;
        *a2 = (AriMsg *)*((_QWORD *)this + 6);
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBINvmSnapshotReq_SDK::unpack(AriSdk::ARI_IBINvmSnapshotReq_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v10 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v10, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v10;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v9 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v9, 0);
  if ((_DWORD)v3 || !v9)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v8 = 0;
  v6 = (_DWORD *)operator new();
  *v6 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v6, 4, &v8, 0);
  if (!(_DWORD)v3 && v8)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v6);
  MEMORY[0x212BB9B60](v6, 0x1000C4052888210);
  return v3;
}

void sub_20E2A8C64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINvmSnapshotReq_SDK::hasDeclaredGmid(AriSdk::ARI_IBINvmSnapshotReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -124649472;
}

AriSdk::MsgBase *AriSdk::ARI_IBINvmSnapshotRspCb_SDK::ARI_IBINvmSnapshotRspCb_SDK(AriSdk::ARI_IBINvmSnapshotRspCb_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9120000, 0);
  *(_QWORD *)result = &off_24C91B8B0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF9120000, 0);
  *(_QWORD *)result = &off_24C91B8B0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_IBINvmSnapshotRspCb_SDK::ARI_IBINvmSnapshotRspCb_SDK(AriSdk::ARI_IBINvmSnapshotRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B8B0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B8B0;
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  return result;
}

void AriSdk::ARI_IBINvmSnapshotRspCb_SDK::~ARI_IBINvmSnapshotRspCb_SDK(AriSdk::ARI_IBINvmSnapshotRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C91B8B0;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_IBINvmSnapshotRspCb_SDK::~ARI_IBINvmSnapshotRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_IBINvmSnapshotRspCb_SDK::pack(AriSdk::ARI_IBINvmSnapshotRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      result = 0;
      *a2 = (AriMsg *)*((_QWORD *)this + 6);
    }
  }
  return result;
}

uint64_t AriSdk::ARI_IBINvmSnapshotRspCb_SDK::unpack(AriSdk::ARI_IBINvmSnapshotRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  BOOL v7;
  BOOL v8;

  v8 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v8, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v8;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v7 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v7, 0);
  if (!(_DWORD)v3 && v7)
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 9, v5);
  MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  return v3;
}

void sub_20E2A8FBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_IBINvmSnapshotRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_IBINvmSnapshotRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -116260864;
}

AriSdk::MsgBase *AriSdk::ARI_OdttRunReq_SDK::ARI_OdttRunReq_SDK(AriSdk::ARI_OdttRunReq_SDK *this)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8930000, 0);
  *(_QWORD *)result = &off_24C91B8E8;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, 0xF8930000, 0);
  *(_QWORD *)result = &off_24C91B8E8;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

AriSdk::MsgBase *AriSdk::ARI_OdttRunReq_SDK::ARI_OdttRunReq_SDK(AriSdk::ARI_OdttRunReq_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B8E8;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

{
  AriSdk::MsgBase *result;

  result = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)result = &off_24C91B8E8;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 8) = 0;
  return result;
}

void AriSdk::ARI_OdttRunReq_SDK::~ARI_OdttRunReq_SDK(AriSdk::ARI_OdttRunReq_SDK *this)
{
  void *v2;

  *(_QWORD *)this = &off_24C91B8E8;
  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)
  {
    *((_QWORD *)this + 9) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_OdttRunReq_SDK::~ARI_OdttRunReq_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_OdttRunReq_SDK::pack(AriSdk::ARI_OdttRunReq_SDK *this, AriMsg **a2)
{
  _BYTE *v4;
  _BYTE *v5;
  BOOL v6;
  uint64_t result;

  *a2 = 0;
  v4 = (_BYTE *)*((_QWORD *)this + 8);
  v5 = (_BYTE *)*((_QWORD *)this + 9);
  if (v4)
    v6 = v4 == v5;
  else
    v6 = 1;
  if (v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v4, v5 - v4, 0), !(_DWORD)result))
  {
    result = 0;
    *a2 = (AriMsg *)*((_QWORD *)this + 6);
  }
  return result;
}

uint64_t AriSdk::ARI_OdttRunReq_SDK::unpack(AriSdk::ARI_OdttRunReq_SDK *this)
{
  void *v2;
  uint64_t v3;
  BOOL v4;
  __n128 __p;
  uint64_t v7;
  size_t __sz;
  BOOL v9;

  v9 = 0;
  __sz = 0xAAAAAAAAAAAAAAAALL;
  v2 = (void *)operator new[]();
  bzero(v2, 0x400uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v2, 1024, &v9, &__sz);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v9;
  if (!v4)
  {
    v7 = 0;
    __p = 0uLL;
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&__p, v2, (uint64_t)v2 + __sz, __sz);
    AriSdk::TlvArray<char,1024ul>::operator=((std::vector<int> *)((char *)this + 64), &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
  }
  MEMORY[0x212BB9B48](v2, 0x1000C8077774924);
  return v3;
}

void sub_20E2A9278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x212BB9B48](v11, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_OdttRunReq_SDK::hasDeclaredGmid(AriSdk::ARI_OdttRunReq_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -124583936;
}

double AriSdk::ARI_OdttRunRspCb_SDK::ARI_OdttRunRspCb_SDK(AriSdk::ARI_OdttRunRspCb_SDK *this)
{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0xF9130000, 0);
  *(_QWORD *)v1 = &off_24C91B920;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v1;
  double result;

  v1 = AriSdk::MsgBase::MsgBase(this, 0xF9130000, 0);
  *(_QWORD *)v1 = &off_24C91B920;
  result = 0.0;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  return result;
}

double AriSdk::ARI_OdttRunRspCb_SDK::ARI_OdttRunRspCb_SDK(AriSdk::ARI_OdttRunRspCb_SDK *this, unsigned __int8 *a2, uint64_t a3)
{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C91B920;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

{
  AriSdk::MsgBase *v3;
  double result;

  v3 = AriSdk::MsgBase::MsgBase(this, a2, a3);
  *(_QWORD *)v3 = &off_24C91B920;
  result = 0.0;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  return result;
}

void AriSdk::ARI_OdttRunRspCb_SDK::~ARI_OdttRunRspCb_SDK(AriSdk::ARI_OdttRunRspCb_SDK *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C91B920;
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    MEMORY[0x212BB9B60](v2, 0x1000C40AEDA1DADLL);
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    MEMORY[0x212BB9B60](v3, 0x1000C4052888210);
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    MEMORY[0x212BB9B60](v4, 0x1000C4052888210);
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  *(_QWORD *)this = &unk_24C8DB478;
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<std::vector<unsigned char> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  AriSdk::ARI_OdttRunRspCb_SDK::~ARI_OdttRunRspCb_SDK(this);
  JUMPOUT(0x212BB9B60);
}

uint64_t AriSdk::ARI_OdttRunRspCb_SDK::pack(AriSdk::ARI_OdttRunRspCb_SDK *this, AriMsg **a2)
{
  const void *v4;
  uint64_t result;
  const void *v6;
  const void *v7;
  const void *v8;

  *a2 = 0;
  v4 = (const void *)*((_QWORD *)this + 8);
  if (!v4 || (result = AriMsg::pack(*((AriMsg **)this + 6), 1, v4, 4uLL, 0), !(_DWORD)result))
  {
    v6 = (const void *)*((_QWORD *)this + 9);
    if (!v6 || (result = AriMsg::pack(*((AriMsg **)this + 6), 2, v6, 4uLL, 0), !(_DWORD)result))
    {
      v7 = (const void *)*((_QWORD *)this + 10);
      if (!v7 || (result = AriMsg::pack(*((AriMsg **)this + 6), 3, v7, 4uLL, 0), !(_DWORD)result))
      {
        v8 = (const void *)*((_QWORD *)this + 11);
        if (!v8 || (result = AriMsg::pack(*((AriMsg **)this + 6), 4, v8, 0xB78uLL, 0), !(_DWORD)result))
        {
          result = 0;
          *a2 = (AriMsg *)*((_QWORD *)this + 6);
        }
      }
    }
  }
  return result;
}

uint64_t AriSdk::ARI_OdttRunRspCb_SDK::unpack(AriSdk::ARI_OdttRunRspCb_SDK *this)
{
  _DWORD *v2;
  uint64_t v3;
  BOOL v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;

  v16 = 0;
  v2 = (_DWORD *)operator new();
  *v2 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 1, v2, 4, &v16, 0);
  if ((_DWORD)v3)
    v4 = 1;
  else
    v4 = !v16;
  if (v4)
  {
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 8, v2);
    MEMORY[0x212BB9B60](v2, 0x1000C4052888210);
  }
  v15 = 0;
  v5 = (_DWORD *)operator new();
  *v5 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 2, v5, 4, &v15, 0);
  if ((_DWORD)v3 || !v15)
  {
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    v6 = (_DWORD *)operator new();
    *v6 = *v5;
    v7 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v6;
    if (v7)
      MEMORY[0x212BB9B60](v7, 0x1000C4052888210);
    MEMORY[0x212BB9B60](v5, 0x1000C4052888210);
  }
  v14 = 0;
  v8 = (_DWORD *)operator new();
  *v8 = 0;
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 3, v8, 4, &v14, 0);
  if ((_DWORD)v3 || !v14)
  {
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
    AriSdk::Tlv<int>::operator=<int &,void>((uint64_t *)this + 10, v8);
    MEMORY[0x212BB9B60](v8, 0x1000C4052888210);
  }
  v13 = 0;
  v9 = (void *)operator new();
  bzero(v9, 0xB78uLL);
  v3 = AriMsg::unpack(*((AriMsg **)this + 6), 4, v9, 2936, &v13, 0);
  if (!(_DWORD)v3 && v13)
  {
    v10 = (void *)operator new();
    memcpy(v10, v9, 0xB78uLL);
    v11 = *((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v10;
    if (v11)
      MEMORY[0x212BB9B60](v11, 0x1000C40AEDA1DADLL);
  }
  MEMORY[0x212BB9B60](v9, 0x1000C40AEDA1DADLL);
  return v3;
}

void sub_20E2A9808(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BB9B60](v1, 0x1000C40AEDA1DADLL);
  _Unwind_Resume(a1);
}

BOOL AriSdk::ARI_OdttRunRspCb_SDK::hasDeclaredGmid(AriSdk::ARI_OdttRunRspCb_SDK *this)
{
  return ((*((_DWORD *)this + 9) << 15) | (*((_DWORD *)this + 10) << 26)) == -116195328;
}

uint64_t ARI_CsiBspGetCalibrationStatusRspCb_Extract(unsigned __int8 *a1, uint64_t a2, char *a3, char *a4)
{
  __int128 v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12[2];
  unint64_t v13;

  v13 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11 = v6;
  *(_OWORD *)v12 = v6;
  v9 = v6;
  v10 = v6;
  AriMsg::AriMsg((AriMsg *)&v9, a1, a2);
  v7 = HIDWORD(v13);
  if (!HIDWORD(v13))
  {
    if (((DWORD1(v9) << 15) | ((_DWORD)v9 << 26)) == -117374976)
    {
      v7 = AriMsg::unparam((AriMsg *)&v9, 1, a3, 4uLL);
      if (!(_DWORD)v7)
        v7 = AriMsg::unparam((AriMsg *)&v9, 2, a4, 4uLL);
    }
    else
    {
      v7 = 4294967223;
    }
  }
  v12[0] = 0;
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v12[1]);
  return v7;
}

void sub_20E2A9940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiBspGetCalibrationStatusReq_ENC(uint64_t a1, int **a2, unsigned int *a3)
{
  __int128 v5;
  int *EncodedBuf;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12[2];
  unint64_t v13;

  v13 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11 = v5;
  *(_OWORD *)v12 = v5;
  v9 = v5;
  v10 = v5;
  AriMsg::AriMsg((AriMsg *)&v9, 0xF8810000);
  if (a2)
  {
    EncodedBuf = AriMsg::getEncodedBuf((AriMsg *)&v9, a3);
    *a2 = EncodedBuf;
    if (EncodedBuf)
      v7 = 0;
    else
      v7 = 0xFFFFFFFFLL;
  }
  else
  {
    v7 = 0xFFFFFFFFLL;
  }
  v12[0] = 0;
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v12[1]);
  return v7;
}

void sub_20E2A99E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiBspGetCalibrationStatusReq_BLK(int *a1, uint64_t a2)
{
  __int128 v4;
  uint64_t Ctx;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10[2];
  unint64_t v11;

  v11 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9 = v4;
  *(_OWORD *)v10 = v4;
  v7 = v4;
  v8 = v4;
  AriMsg::AriMsg((AriMsg *)&v7, 0xF8810000);
  Ctx = AriHost::Send((AriMsg *)&v7, *a1, a2, 0, 20000);
  if (!(_DWORD)Ctx)
    Ctx = AriMsg::extractCtx((AriMsg *)&v7, a1);
  v10[0] = 0;
  v8 = 0u;
  v9 = 0u;
  v7 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v10[1]);
  return Ctx;
}

void sub_20E2A9A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiBspNvmGroupEnumListRespCb_Extract(unsigned __int8 *a1, uint64_t a2, char *a3, char *a4)
{
  __int128 v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12[2];
  unint64_t v13;

  v13 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11 = v6;
  *(_OWORD *)v12 = v6;
  v9 = v6;
  v10 = v6;
  AriMsg::AriMsg((AriMsg *)&v9, a1, a2);
  v7 = HIDWORD(v13);
  if (!HIDWORD(v13))
  {
    if (((DWORD1(v9) << 15) | ((_DWORD)v9 << 26)) == -116621312)
    {
      v7 = AriMsg::unparam((AriMsg *)&v9, 1, a3, 4uLL);
      if (!(_DWORD)v7)
        v7 = AriMsg::unparam((AriMsg *)&v9, 2, a4, 0xDB0uLL);
    }
    else
    {
      v7 = 4294967223;
    }
  }
  v12[0] = 0;
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v12[1]);
  return v7;
}

void sub_20E2A9B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiBspNvmGroupEnumListReq_ENC(uint64_t a1, int **a2, unsigned int *a3)
{
  __int128 v5;
  int *EncodedBuf;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12[2];
  unint64_t v13;

  v13 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11 = v5;
  *(_OWORD *)v12 = v5;
  v9 = v5;
  v10 = v5;
  AriMsg::AriMsg((AriMsg *)&v9, 0xF88C8000);
  if (a2)
  {
    EncodedBuf = AriMsg::getEncodedBuf((AriMsg *)&v9, a3);
    *a2 = EncodedBuf;
    if (EncodedBuf)
      v7 = 0;
    else
      v7 = 0xFFFFFFFFLL;
  }
  else
  {
    v7 = 0xFFFFFFFFLL;
  }
  v12[0] = 0;
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v12[1]);
  return v7;
}

void sub_20E2A9C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiBspNvmGroupEnumListReq_BLK(int *a1, uint64_t a2)
{
  __int128 v4;
  uint64_t Ctx;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10[2];
  unint64_t v11;

  v11 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9 = v4;
  *(_OWORD *)v10 = v4;
  v7 = v4;
  v8 = v4;
  AriMsg::AriMsg((AriMsg *)&v7, 0xF88C8000);
  Ctx = AriHost::Send((AriMsg *)&v7, *a1, a2, 0, 20000);
  if (!(_DWORD)Ctx)
    Ctx = AriMsg::extractCtx((AriMsg *)&v7, a1);
  v10[0] = 0;
  v8 = 0u;
  v9 = 0u;
  v7 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v10[1]);
  return Ctx;
}

void sub_20E2A9CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiBspNvmReadGroupRespCb_Extract(unsigned __int8 *a1, uint64_t a2, char *a3)
{
  __int128 v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10[2];
  unint64_t v11;

  v11 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9 = v4;
  *(_OWORD *)v10 = v4;
  v7 = v4;
  v8 = v4;
  AriMsg::AriMsg((AriMsg *)&v7, a1, a2);
  v5 = HIDWORD(v11);
  if (!HIDWORD(v11))
  {
    if (((DWORD1(v7) << 15) | ((_DWORD)v7 << 26)) == -116588544)
      v5 = AriMsg::unparam((AriMsg *)&v7, 1, a3, 4uLL);
    else
      v5 = 4294967223;
  }
  v10[0] = 0;
  v8 = 0u;
  v9 = 0u;
  v7 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v10[1]);
  return v5;
}

void sub_20E2A9D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiBspNvmReadGroupReq_ENC(int a1, uint64_t a2, int **a3, unsigned int *a4)
{
  __int128 v6;
  uint64_t v7;
  int *EncodedBuf;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void *v13[2];
  unint64_t v14;
  int v15;

  v15 = a1;
  v14 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v12 = v6;
  *(_OWORD *)v13 = v6;
  v10 = v6;
  v11 = v6;
  AriMsg::AriMsg((AriMsg *)&v10, 0xF88D0000);
  v7 = AriMsg::packParam((AriMsg *)&v10, 1, (char *)&v15, 4uLL);
  if (!(_DWORD)v7)
  {
    if (a3)
    {
      EncodedBuf = AriMsg::getEncodedBuf((AriMsg *)&v10, a4);
      *a3 = EncodedBuf;
      if (EncodedBuf)
        v7 = 0;
      else
        v7 = 0xFFFFFFFFLL;
    }
    else
    {
      v7 = 0xFFFFFFFFLL;
    }
  }
  v13[0] = 0;
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v13[1]);
  return v7;
}

void sub_20E2A9E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiBspNvmReadGroupReq_BLK(int a1, int *a2, uint64_t a3)
{
  __int128 v5;
  uint64_t Ctx;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void *v11[2];
  unint64_t v12;
  int v13;

  v13 = a1;
  v12 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10 = v5;
  *(_OWORD *)v11 = v5;
  v8 = v5;
  v9 = v5;
  AriMsg::AriMsg((AriMsg *)&v8, 0xF88D0000);
  Ctx = AriMsg::packParam((AriMsg *)&v8, 1, (char *)&v13, 4uLL);
  if (!(_DWORD)Ctx)
  {
    Ctx = AriHost::Send((AriMsg *)&v8, *a2, a3, 0, 20000);
    if (!(_DWORD)Ctx)
      Ctx = AriMsg::extractCtx((AriMsg *)&v8, a2);
  }
  v11[0] = 0;
  v9 = 0u;
  v10 = 0u;
  v8 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v11[1]);
  return Ctx;
}

void sub_20E2A9F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiBspNvmReadGroupBlockRespCb_Extract(unsigned __int8 *a1, uint64_t a2, char *a3, char *a4)
{
  __int128 v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12[2];
  unint64_t v13;

  v13 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11 = v6;
  *(_OWORD *)v12 = v6;
  v9 = v6;
  v10 = v6;
  AriMsg::AriMsg((AriMsg *)&v9, a1, a2);
  v7 = HIDWORD(v13);
  if (!HIDWORD(v13))
  {
    if (((DWORD1(v9) << 15) | ((_DWORD)v9 << 26)) == -116555776)
    {
      v7 = AriMsg::unparam((AriMsg *)&v9, 1, a3, 4uLL);
      if (!(_DWORD)v7)
        v7 = AriMsg::unparam((AriMsg *)&v9, 2, a4, 0xDB0uLL);
    }
    else
    {
      v7 = 4294967223;
    }
  }
  v12[0] = 0;
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v12[1]);
  return v7;
}

void sub_20E2AA024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiBspNvmReadGroupBlockReq_ENC(int a1, uint64_t a2, int **a3, unsigned int *a4)
{
  __int128 v6;
  uint64_t v7;
  int *EncodedBuf;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void *v13[2];
  unint64_t v14;
  int v15;

  v15 = a1;
  v14 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v12 = v6;
  *(_OWORD *)v13 = v6;
  v10 = v6;
  v11 = v6;
  AriMsg::AriMsg((AriMsg *)&v10, 0xF88D8000);
  v7 = AriMsg::packParam((AriMsg *)&v10, 1, (char *)&v15, 4uLL);
  if (!(_DWORD)v7)
  {
    if (a3)
    {
      EncodedBuf = AriMsg::getEncodedBuf((AriMsg *)&v10, a4);
      *a3 = EncodedBuf;
      if (EncodedBuf)
        v7 = 0;
      else
        v7 = 0xFFFFFFFFLL;
    }
    else
    {
      v7 = 0xFFFFFFFFLL;
    }
  }
  v13[0] = 0;
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v13[1]);
  return v7;
}

void sub_20E2AA0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiBspNvmReadGroupBlockReq_BLK(int a1, int *a2, uint64_t a3)
{
  __int128 v5;
  uint64_t Ctx;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void *v11[2];
  unint64_t v12;
  int v13;

  v13 = a1;
  v12 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10 = v5;
  *(_OWORD *)v11 = v5;
  v8 = v5;
  v9 = v5;
  AriMsg::AriMsg((AriMsg *)&v8, 0xF88D8000);
  Ctx = AriMsg::packParam((AriMsg *)&v8, 1, (char *)&v13, 4uLL);
  if (!(_DWORD)Ctx)
  {
    Ctx = AriHost::Send((AriMsg *)&v8, *a2, a3, 0, 20000);
    if (!(_DWORD)Ctx)
      Ctx = AriMsg::extractCtx((AriMsg *)&v8, a2);
  }
  v11[0] = 0;
  v9 = 0u;
  v10 = 0u;
  v8 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v11[1]);
  return Ctx;
}

void sub_20E2AA1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiBspSetNvItemsToStateRspCb_Extract(unsigned __int8 *a1, uint64_t a2, char *a3)
{
  __int128 v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10[2];
  unint64_t v11;

  v11 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9 = v4;
  *(_OWORD *)v10 = v4;
  v7 = v4;
  v8 = v4;
  AriMsg::AriMsg((AriMsg *)&v7, a1, a2);
  v5 = HIDWORD(v11);
  if (!HIDWORD(v11))
  {
    if (((DWORD1(v7) << 15) | ((_DWORD)v7 << 26)) == -117407744)
      v5 = AriMsg::unparam((AriMsg *)&v7, 1, a3, 4uLL);
    else
      v5 = 4294967223;
  }
  v10[0] = 0;
  v8 = 0u;
  v9 = 0u;
  v7 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v10[1]);
  return v5;
}

void sub_20E2AA298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiBspSetNvItemsToStateReq_ENC(int a1, uint64_t a2, int **a3, unsigned int *a4)
{
  __int128 v6;
  uint64_t v7;
  int *EncodedBuf;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void *v13[2];
  unint64_t v14;
  int v15;

  v15 = a1;
  v14 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v12 = v6;
  *(_OWORD *)v13 = v6;
  v10 = v6;
  v11 = v6;
  AriMsg::AriMsg((AriMsg *)&v10, 0xF8808000);
  v7 = AriMsg::packParam((AriMsg *)&v10, 1, (char *)&v15, 4uLL);
  if (!(_DWORD)v7)
  {
    if (a3)
    {
      EncodedBuf = AriMsg::getEncodedBuf((AriMsg *)&v10, a4);
      *a3 = EncodedBuf;
      if (EncodedBuf)
        v7 = 0;
      else
        v7 = 0xFFFFFFFFLL;
    }
    else
    {
      v7 = 0xFFFFFFFFLL;
    }
  }
  v13[0] = 0;
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v13[1]);
  return v7;
}

void sub_20E2AA364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiBspSetNvItemsToStateReq_BLK(int a1, int *a2, uint64_t a3)
{
  __int128 v5;
  uint64_t Ctx;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void *v11[2];
  unint64_t v12;
  int v13;

  v13 = a1;
  v12 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10 = v5;
  *(_OWORD *)v11 = v5;
  v8 = v5;
  v9 = v5;
  AriMsg::AriMsg((AriMsg *)&v8, 0xF8808000);
  Ctx = AriMsg::packParam((AriMsg *)&v8, 1, (char *)&v13, 4uLL);
  if (!(_DWORD)Ctx)
  {
    Ctx = AriHost::Send((AriMsg *)&v8, *a2, a3, 0, 20000);
    if (!(_DWORD)Ctx)
      Ctx = AriMsg::extractCtx((AriMsg *)&v8, a2);
  }
  v11[0] = 0;
  v9 = 0u;
  v10 = 0u;
  v8 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v11[1]);
  return Ctx;
}

void sub_20E2AA440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiBspShutdownRspCb_Extract(unsigned __int8 *a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void *v8[2];
  unint64_t v9;

  v9 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v7 = v2;
  *(_OWORD *)v8 = v2;
  v5 = v2;
  v6 = v2;
  AriMsg::AriMsg((AriMsg *)&v5, a1, a2);
  v3 = HIDWORD(v9);
  if (!HIDWORD(v9))
  {
    if (((DWORD1(v5) << 15) | ((_DWORD)v5 << 26)) == -117014528)
      v3 = 0;
    else
      v3 = 4294967223;
  }
  v8[0] = 0;
  v6 = 0u;
  v7 = 0u;
  v5 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v8[1]);
  return v3;
}

uint64_t ARI_CsiBspShutdownReq_ENC(int a1, uint64_t a2, int **a3, unsigned int *a4)
{
  __int128 v6;
  uint64_t v7;
  int *EncodedBuf;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void *v13[2];
  unint64_t v14;
  int v15;

  v15 = a1;
  v14 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v12 = v6;
  *(_OWORD *)v13 = v6;
  v10 = v6;
  v11 = v6;
  AriMsg::AriMsg((AriMsg *)&v10, 0xF8868000);
  v7 = AriMsg::packParam((AriMsg *)&v10, 1, (char *)&v15, 4uLL);
  if (!(_DWORD)v7)
  {
    if (a3)
    {
      EncodedBuf = AriMsg::getEncodedBuf((AriMsg *)&v10, a4);
      *a3 = EncodedBuf;
      if (EncodedBuf)
        v7 = 0;
      else
        v7 = 0xFFFFFFFFLL;
    }
    else
    {
      v7 = 0xFFFFFFFFLL;
    }
  }
  v13[0] = 0;
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v13[1]);
  return v7;
}

void sub_20E2AA5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiBspShutdownReq_BLK(int a1, int *a2, uint64_t a3)
{
  __int128 v5;
  uint64_t Ctx;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void *v11[2];
  unint64_t v12;
  int v13;

  v13 = a1;
  v12 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10 = v5;
  *(_OWORD *)v11 = v5;
  v8 = v5;
  v9 = v5;
  AriMsg::AriMsg((AriMsg *)&v8, 0xF8868000);
  Ctx = AriMsg::packParam((AriMsg *)&v8, 1, (char *)&v13, 4uLL);
  if (!(_DWORD)Ctx)
  {
    Ctx = AriHost::Send((AriMsg *)&v8, *a2, a3, 0, 20000);
    if (!(_DWORD)Ctx)
      Ctx = AriMsg::extractCtx((AriMsg *)&v8, a2);
  }
  v11[0] = 0;
  v9 = 0u;
  v10 = 0u;
  v8 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v11[1]);
  return Ctx;
}

void sub_20E2AA67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiBspSwTrapRspCb_Extract(unsigned __int8 *a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  void *v8[2];
  unint64_t v9;

  v9 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v7 = v2;
  *(_OWORD *)v8 = v2;
  v5 = v2;
  v6 = v2;
  AriMsg::AriMsg((AriMsg *)&v5, a1, a2);
  v3 = HIDWORD(v9);
  if (!HIDWORD(v9))
  {
    if (((DWORD1(v5) << 15) | ((_DWORD)v5 << 26)) == -116981760)
      v3 = 0;
    else
      v3 = 4294967223;
  }
  v8[0] = 0;
  v6 = 0u;
  v7 = 0u;
  v5 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v8[1]);
  return v3;
}

uint64_t ARI_CsiBspSwTrapReq_ENC(int a1, uint64_t a2, int **a3, unsigned int *a4)
{
  __int128 v6;
  uint64_t v7;
  int *EncodedBuf;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void *v13[2];
  unint64_t v14;
  int v15;

  v15 = a1;
  v14 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v12 = v6;
  *(_OWORD *)v13 = v6;
  v10 = v6;
  v11 = v6;
  AriMsg::AriMsg((AriMsg *)&v10, 0xF8870000);
  v7 = AriMsg::packParam((AriMsg *)&v10, 1, (char *)&v15, 4uLL);
  if (!(_DWORD)v7)
  {
    if (a3)
    {
      EncodedBuf = AriMsg::getEncodedBuf((AriMsg *)&v10, a4);
      *a3 = EncodedBuf;
      if (EncodedBuf)
        v7 = 0;
      else
        v7 = 0xFFFFFFFFLL;
    }
    else
    {
      v7 = 0xFFFFFFFFLL;
    }
  }
  v13[0] = 0;
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v13[1]);
  return v7;
}

void sub_20E2AA7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiBspSwTrapReq_BLK(int a1, int *a2, uint64_t a3)
{
  __int128 v5;
  uint64_t Ctx;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void *v11[2];
  unint64_t v12;
  int v13;

  v13 = a1;
  v12 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10 = v5;
  *(_OWORD *)v11 = v5;
  v8 = v5;
  v9 = v5;
  AriMsg::AriMsg((AriMsg *)&v8, 0xF8870000);
  Ctx = AriMsg::packParam((AriMsg *)&v8, 1, (char *)&v13, 4uLL);
  if (!(_DWORD)Ctx)
  {
    Ctx = AriHost::Send((AriMsg *)&v8, *a2, a3, 0, 20000);
    if (!(_DWORD)Ctx)
      Ctx = AriMsg::extractCtx((AriMsg *)&v8, a2);
  }
  v11[0] = 0;
  v9 = 0u;
  v10 = 0u;
  v8 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v11[1]);
  return Ctx;
}

void sub_20E2AA8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiCddGetDebugLogRspCb_Extract(unsigned __int8 *a1, uint64_t a2, char *a3)
{
  __int128 v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10[2];
  unint64_t v11;

  v11 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9 = v4;
  *(_OWORD *)v10 = v4;
  v7 = v4;
  v8 = v4;
  AriMsg::AriMsg((AriMsg *)&v7, a1, a2);
  v5 = HIDWORD(v11);
  if (!HIDWORD(v11))
  {
    if (((DWORD1(v7) << 15) | ((_DWORD)v7 << 26)) == -116916224)
      v5 = AriMsg::unparam((AriMsg *)&v7, 1, a3, 8uLL);
    else
      v5 = 4294967223;
  }
  v10[0] = 0;
  v8 = 0u;
  v9 = 0u;
  v7 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v10[1]);
  return v5;
}

void sub_20E2AA970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiCddGetDebugLogReq_ENC(uint64_t a1, int **a2, unsigned int *a3)
{
  __int128 v5;
  int *EncodedBuf;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12[2];
  unint64_t v13;

  v13 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11 = v5;
  *(_OWORD *)v12 = v5;
  v9 = v5;
  v10 = v5;
  AriMsg::AriMsg((AriMsg *)&v9, 0xF8880000);
  if (a2)
  {
    EncodedBuf = AriMsg::getEncodedBuf((AriMsg *)&v9, a3);
    *a2 = EncodedBuf;
    if (EncodedBuf)
      v7 = 0;
    else
      v7 = 0xFFFFFFFFLL;
  }
  else
  {
    v7 = 0xFFFFFFFFLL;
  }
  v12[0] = 0;
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v12[1]);
  return v7;
}

void sub_20E2AAA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiCddGetDebugLogReq_BLK(int *a1, uint64_t a2)
{
  __int128 v4;
  uint64_t Ctx;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10[2];
  unint64_t v11;

  v11 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9 = v4;
  *(_OWORD *)v10 = v4;
  v7 = v4;
  v8 = v4;
  AriMsg::AriMsg((AriMsg *)&v7, 0xF8880000);
  Ctx = AriHost::Send((AriMsg *)&v7, *a1, a2, 0, 20000);
  if (!(_DWORD)Ctx)
    Ctx = AriMsg::extractCtx((AriMsg *)&v7, a1);
  v10[0] = 0;
  v8 = 0u;
  v9 = 0u;
  v7 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v10[1]);
  return Ctx;
}

void sub_20E2AAABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiCddGetParamDumpRspCb_Extract(unsigned __int8 *a1, uint64_t a2, char *a3)
{
  __int128 v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10[2];
  unint64_t v11;

  v11 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9 = v4;
  *(_OWORD *)v10 = v4;
  v7 = v4;
  v8 = v4;
  AriMsg::AriMsg((AriMsg *)&v7, a1, a2);
  v5 = HIDWORD(v11);
  if (!HIDWORD(v11))
  {
    if (((DWORD1(v7) << 15) | ((_DWORD)v7 << 26)) == -116883456)
      v5 = AriMsg::unparam((AriMsg *)&v7, 1, a3, 8uLL);
    else
      v5 = 4294967223;
  }
  v10[0] = 0;
  v8 = 0u;
  v9 = 0u;
  v7 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v10[1]);
  return v5;
}

void sub_20E2AAB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiCddGetParamDumpReq_ENC(uint64_t a1, int **a2, unsigned int *a3)
{
  __int128 v5;
  int *EncodedBuf;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12[2];
  unint64_t v13;

  v13 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11 = v5;
  *(_OWORD *)v12 = v5;
  v9 = v5;
  v10 = v5;
  AriMsg::AriMsg((AriMsg *)&v9, 0xF8888000);
  if (a2)
  {
    EncodedBuf = AriMsg::getEncodedBuf((AriMsg *)&v9, a3);
    *a2 = EncodedBuf;
    if (EncodedBuf)
      v7 = 0;
    else
      v7 = 0xFFFFFFFFLL;
  }
  else
  {
    v7 = 0xFFFFFFFFLL;
  }
  v12[0] = 0;
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v12[1]);
  return v7;
}

void sub_20E2AAC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiCddGetParamDumpReq_BLK(int *a1, uint64_t a2)
{
  __int128 v4;
  uint64_t Ctx;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10[2];
  unint64_t v11;

  v11 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9 = v4;
  *(_OWORD *)v10 = v4;
  v7 = v4;
  v8 = v4;
  AriMsg::AriMsg((AriMsg *)&v7, 0xF8888000);
  Ctx = AriHost::Send((AriMsg *)&v7, *a1, a2, 0, 20000);
  if (!(_DWORD)Ctx)
    Ctx = AriMsg::extractCtx((AriMsg *)&v7, a1);
  v10[0] = 0;
  v8 = 0u;
  v9 = 0u;
  v7 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v10[1]);
  return Ctx;
}

void sub_20E2AACD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiFpGetStatusRsp_Extract(unsigned __int8 *a1, uint64_t a2, char *a3, char *a4)
{
  __int128 v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12[2];
  unint64_t v13;

  v13 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11 = v6;
  *(_OWORD *)v12 = v6;
  v9 = v6;
  v10 = v6;
  AriMsg::AriMsg((AriMsg *)&v9, a1, a2);
  v7 = HIDWORD(v13);
  if (!HIDWORD(v13))
  {
    if (((DWORD1(v9) << 15) | ((_DWORD)v9 << 26)) == -117112832)
    {
      v7 = AriMsg::unparam((AriMsg *)&v9, 1, a3, 4uLL);
      if (!(_DWORD)v7)
        v7 = AriMsg::unparam((AriMsg *)&v9, 2, a4, 0x48uLL);
    }
    else
    {
      v7 = 4294967223;
    }
  }
  v12[0] = 0;
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v12[1]);
  return v7;
}

void sub_20E2AADBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiFpGetStatus_ENC(uint64_t a1, int **a2, unsigned int *a3)
{
  __int128 v5;
  int *EncodedBuf;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12[2];
  unint64_t v13;

  v13 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11 = v5;
  *(_OWORD *)v12 = v5;
  v9 = v5;
  v10 = v5;
  AriMsg::AriMsg((AriMsg *)&v9, 0xF8850000);
  if (a2)
  {
    EncodedBuf = AriMsg::getEncodedBuf((AriMsg *)&v9, a3);
    *a2 = EncodedBuf;
    if (EncodedBuf)
      v7 = 0;
    else
      v7 = 0xFFFFFFFFLL;
  }
  else
  {
    v7 = 0xFFFFFFFFLL;
  }
  v12[0] = 0;
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v12[1]);
  return v7;
}

void sub_20E2AAE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiFpGetStatus_BLK(int *a1, uint64_t a2)
{
  __int128 v4;
  uint64_t Ctx;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10[2];
  unint64_t v11;

  v11 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9 = v4;
  *(_OWORD *)v10 = v4;
  v7 = v4;
  v8 = v4;
  AriMsg::AriMsg((AriMsg *)&v7, 0xF8850000);
  Ctx = AriHost::Send((AriMsg *)&v7, *a1, a2, 0, 20000);
  if (!(_DWORD)Ctx)
    Ctx = AriMsg::extractCtx((AriMsg *)&v7, a1);
  v10[0] = 0;
  v8 = 0u;
  v9 = 0u;
  v7 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v10[1]);
  return Ctx;
}

void sub_20E2AAF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiFpRegisterRsp_Extract(unsigned __int8 *a1, uint64_t a2, char *a3)
{
  __int128 v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10[2];
  unint64_t v11;

  v11 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9 = v4;
  *(_OWORD *)v10 = v4;
  v7 = v4;
  v8 = v4;
  AriMsg::AriMsg((AriMsg *)&v7, a1, a2);
  v5 = HIDWORD(v11);
  if (!HIDWORD(v11))
  {
    if (((DWORD1(v7) << 15) | ((_DWORD)v7 << 26)) == -117243904)
      v5 = AriMsg::unparam((AriMsg *)&v7, 1, a3, 4uLL);
    else
      v5 = 4294967223;
  }
  v10[0] = 0;
  v8 = 0u;
  v9 = 0u;
  v7 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v10[1]);
  return v5;
}

void sub_20E2AAFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiFpRegister_ENC(int a1, uint64_t a2, int **a3, unsigned int *a4)
{
  __int128 v6;
  uint64_t v7;
  int *EncodedBuf;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void *v13[2];
  unint64_t v14;
  int v15;

  v15 = a1;
  v14 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v12 = v6;
  *(_OWORD *)v13 = v6;
  v10 = v6;
  v11 = v6;
  AriMsg::AriMsg((AriMsg *)&v10, 0xF8830000);
  v7 = AriMsg::packParam((AriMsg *)&v10, 1, (char *)&v15, 4uLL);
  if (!(_DWORD)v7)
  {
    if (a3)
    {
      EncodedBuf = AriMsg::getEncodedBuf((AriMsg *)&v10, a4);
      *a3 = EncodedBuf;
      if (EncodedBuf)
        v7 = 0;
      else
        v7 = 0xFFFFFFFFLL;
    }
    else
    {
      v7 = 0xFFFFFFFFLL;
    }
  }
  v13[0] = 0;
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v13[1]);
  return v7;
}

void sub_20E2AB094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiFpRegister_BLK(int a1, int *a2, uint64_t a3)
{
  __int128 v5;
  uint64_t Ctx;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void *v11[2];
  unint64_t v12;
  int v13;

  v13 = a1;
  v12 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10 = v5;
  *(_OWORD *)v11 = v5;
  v8 = v5;
  v9 = v5;
  AriMsg::AriMsg((AriMsg *)&v8, 0xF8830000);
  Ctx = AriMsg::packParam((AriMsg *)&v8, 1, (char *)&v13, 4uLL);
  if (!(_DWORD)Ctx)
  {
    Ctx = AriHost::Send((AriMsg *)&v8, *a2, a3, 0, 20000);
    if (!(_DWORD)Ctx)
      Ctx = AriMsg::extractCtx((AriMsg *)&v8, a2);
  }
  v11[0] = 0;
  v9 = 0u;
  v10 = 0u;
  v8 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v11[1]);
  return Ctx;
}

void sub_20E2AB16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiFpSnapshotRsp_Extract(unsigned __int8 *a1, uint64_t a2, char *a3, char *a4)
{
  __int128 v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12[2];
  unint64_t v13;

  v13 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11 = v6;
  *(_OWORD *)v12 = v6;
  v9 = v6;
  v10 = v6;
  AriMsg::AriMsg((AriMsg *)&v9, a1, a2);
  v7 = HIDWORD(v13);
  if (!HIDWORD(v13))
  {
    if (((DWORD1(v9) << 15) | ((_DWORD)v9 << 26)) == -117211136)
    {
      v7 = AriMsg::unparam((AriMsg *)&v9, 1, a3, 4uLL);
      if (!(_DWORD)v7)
        v7 = AriMsg::unparam((AriMsg *)&v9, 2, a4, 4uLL);
    }
    else
    {
      v7 = 4294967223;
    }
  }
  v12[0] = 0;
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v12[1]);
  return v7;
}

void sub_20E2AB25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiFpSnapshot_ENC(int a1, int a2, int a3, int a4, uint64_t a5, int **a6, unsigned int *a7)
{
  __int128 v9;
  uint64_t v10;
  int *EncodedBuf;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  void *v16[2];
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;

  v20 = a2;
  v21 = a1;
  v18 = a4;
  v19 = a3;
  v17 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15 = v9;
  *(_OWORD *)v16 = v9;
  v13 = v9;
  v14 = v9;
  AriMsg::AriMsg((AriMsg *)&v13, 0xF8838000);
  v10 = AriMsg::packParam((AriMsg *)&v13, 1, (char *)&v21, 4uLL);
  if (!(_DWORD)v10)
  {
    v10 = AriMsg::packParam((AriMsg *)&v13, 2, (char *)&v20, 4uLL);
    if (!(_DWORD)v10)
    {
      v10 = AriMsg::packParam((AriMsg *)&v13, 3, (char *)&v19, 4uLL);
      if (!(_DWORD)v10)
      {
        v10 = AriMsg::packParam((AriMsg *)&v13, 4, (char *)&v18, 4uLL);
        if (!(_DWORD)v10)
        {
          if (a6)
          {
            EncodedBuf = AriMsg::getEncodedBuf((AriMsg *)&v13, a7);
            *a6 = EncodedBuf;
            if (EncodedBuf)
              v10 = 0;
            else
              v10 = 0xFFFFFFFFLL;
          }
          else
          {
            v10 = 0xFFFFFFFFLL;
          }
        }
      }
    }
  }
  v16[0] = 0;
  v14 = 0u;
  v15 = 0u;
  v13 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v16[1]);
  return v10;
}

void sub_20E2AB384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiFpSnapshot_BLK(int a1, int a2, int a3, int a4, int *a5, uint64_t a6)
{
  __int128 v8;
  uint64_t Ctx;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void *v14[2];
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;

  v18 = a2;
  v19 = a1;
  v16 = a4;
  v17 = a3;
  v15 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v13 = v8;
  *(_OWORD *)v14 = v8;
  v11 = v8;
  v12 = v8;
  AriMsg::AriMsg((AriMsg *)&v11, 0xF8838000);
  Ctx = AriMsg::packParam((AriMsg *)&v11, 1, (char *)&v19, 4uLL);
  if (!(_DWORD)Ctx)
  {
    Ctx = AriMsg::packParam((AriMsg *)&v11, 2, (char *)&v18, 4uLL);
    if (!(_DWORD)Ctx)
    {
      Ctx = AriMsg::packParam((AriMsg *)&v11, 3, (char *)&v17, 4uLL);
      if (!(_DWORD)Ctx)
      {
        Ctx = AriMsg::packParam((AriMsg *)&v11, 4, (char *)&v16, 4uLL);
        if (!(_DWORD)Ctx)
        {
          Ctx = AriHost::Send((AriMsg *)&v11, *a5, a6, 0, 20000);
          if (!(_DWORD)Ctx)
            Ctx = AriMsg::extractCtx((AriMsg *)&v11, a5);
        }
      }
    }
  }
  v14[0] = 0;
  v12 = 0u;
  v13 = 0u;
  v11 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v14[1]);
  return Ctx;
}

void sub_20E2AB4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiFpUpdateAckRsp_Extract(unsigned __int8 *a1, uint64_t a2, char *a3, char *a4)
{
  __int128 v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12[2];
  unint64_t v13;

  v13 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11 = v6;
  *(_OWORD *)v12 = v6;
  v9 = v6;
  v10 = v6;
  AriMsg::AriMsg((AriMsg *)&v9, a1, a2);
  v7 = HIDWORD(v13);
  if (!HIDWORD(v13))
  {
    if (((DWORD1(v9) << 15) | ((_DWORD)v9 << 26)) == -117178368)
    {
      v7 = AriMsg::unparam((AriMsg *)&v9, 1, a3, 4uLL);
      if (!(_DWORD)v7)
        v7 = AriMsg::unparam((AriMsg *)&v9, 2, a4, 4uLL);
    }
    else
    {
      v7 = 4294967223;
    }
  }
  v12[0] = 0;
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v12[1]);
  return v7;
}

void sub_20E2AB5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiFpUpdateAck_ENC(uint64_t a1, int **a2, unsigned int *a3)
{
  __int128 v5;
  int *EncodedBuf;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12[2];
  unint64_t v13;

  v13 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11 = v5;
  *(_OWORD *)v12 = v5;
  v9 = v5;
  v10 = v5;
  AriMsg::AriMsg((AriMsg *)&v9, 0xF8840000);
  if (a2)
  {
    EncodedBuf = AriMsg::getEncodedBuf((AriMsg *)&v9, a3);
    *a2 = EncodedBuf;
    if (EncodedBuf)
      v7 = 0;
    else
      v7 = 0xFFFFFFFFLL;
  }
  else
  {
    v7 = 0xFFFFFFFFLL;
  }
  v12[0] = 0;
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v12[1]);
  return v7;
}

void sub_20E2AB660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiFpUpdateAck_BLK(int *a1, uint64_t a2)
{
  __int128 v4;
  uint64_t Ctx;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10[2];
  unint64_t v11;

  v11 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9 = v4;
  *(_OWORD *)v10 = v4;
  v7 = v4;
  v8 = v4;
  AriMsg::AriMsg((AriMsg *)&v7, 0xF8840000);
  Ctx = AriHost::Send((AriMsg *)&v7, *a1, a2, 0, 20000);
  if (!(_DWORD)Ctx)
    Ctx = AriMsg::extractCtx((AriMsg *)&v7, a1);
  v10[0] = 0;
  v8 = 0u;
  v9 = 0u;
  v7 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v10[1]);
  return Ctx;
}

void sub_20E2AB70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiFpUpdateHeaderData_Extract(unsigned __int8 *a1, uint64_t a2, char *a3, char *a4, char *a5)
{
  __int128 v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void *v14[2];
  unint64_t v15;

  v15 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v13 = v8;
  *(_OWORD *)v14 = v8;
  v11 = v8;
  v12 = v8;
  AriMsg::AriMsg((AriMsg *)&v11, a1, a2);
  v9 = HIDWORD(v15);
  if (!HIDWORD(v15))
  {
    if (((DWORD1(v11) << 15) | ((_DWORD)v11 << 26)) == -117145600)
    {
      v9 = AriMsg::unparam((AriMsg *)&v11, 1, a3, 4uLL);
      if (!(_DWORD)v9)
      {
        v9 = AriMsg::unparam((AriMsg *)&v11, 2, a4, 0x50uLL);
        if (!(_DWORD)v9)
          v9 = AriMsg::unparam((AriMsg *)&v11, 3, a5, 4uLL);
      }
    }
    else
    {
      v9 = 4294967223;
    }
  }
  v14[0] = 0;
  v12 = 0u;
  v13 = 0u;
  v11 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v14[1]);
  return v9;
}

void sub_20E2AB818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiFpUpdateHeader_ENC(uint64_t a1, int **a2, unsigned int *a3)
{
  __int128 v5;
  int *EncodedBuf;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12[2];
  unint64_t v13;

  v13 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11 = v5;
  *(_OWORD *)v12 = v5;
  v9 = v5;
  v10 = v5;
  AriMsg::AriMsg((AriMsg *)&v9, 0xF8848000);
  if (a2)
  {
    EncodedBuf = AriMsg::getEncodedBuf((AriMsg *)&v9, a3);
    *a2 = EncodedBuf;
    if (EncodedBuf)
      v7 = 0;
    else
      v7 = 0xFFFFFFFFLL;
  }
  else
  {
    v7 = 0xFFFFFFFFLL;
  }
  v12[0] = 0;
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v12[1]);
  return v7;
}

void sub_20E2AB8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiFpUpdateHeader_BLK(int *a1, uint64_t a2)
{
  __int128 v4;
  uint64_t Ctx;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10[2];
  unint64_t v11;

  v11 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9 = v4;
  *(_OWORD *)v10 = v4;
  v7 = v4;
  v8 = v4;
  AriMsg::AriMsg((AriMsg *)&v7, 0xF8848000);
  Ctx = AriHost::Send((AriMsg *)&v7, *a1, a2, 0, 20000);
  if (!(_DWORD)Ctx)
    Ctx = AriMsg::extractCtx((AriMsg *)&v7, a1);
  v10[0] = 0;
  v8 = 0u;
  v9 = 0u;
  v7 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v10[1]);
  return Ctx;
}

void sub_20E2AB974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiIceAtExtRsp_Extract(unsigned __int8 *a1, uint64_t a2, char *a3, char *a4)
{
  __int128 v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12[2];
  unint64_t v13;

  v13 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11 = v6;
  *(_OWORD *)v12 = v6;
  v9 = v6;
  v10 = v6;
  AriMsg::AriMsg((AriMsg *)&v9, a1, a2);
  v7 = HIDWORD(v13);
  if (!HIDWORD(v13))
  {
    if (((DWORD1(v9) << 15) | ((_DWORD)v9 << 26)) == -116752384)
    {
      v7 = AriMsg::unparam((AriMsg *)&v9, 1, a3, 4uLL);
      if (!(_DWORD)v7)
        v7 = AriMsg::unparam((AriMsg *)&v9, 2, a4, 0xC0CuLL);
    }
    else
    {
      v7 = 4294967223;
    }
  }
  v12[0] = 0;
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v12[1]);
  return v7;
}

void sub_20E2ABA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiIceAtExtReq_ENC(char *a1, uint64_t a2, int **a3, unsigned int *a4)
{
  __int128 v7;
  uint64_t v8;
  int *EncodedBuf;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void *v14[2];
  unint64_t v15;

  v15 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v13 = v7;
  *(_OWORD *)v14 = v7;
  v11 = v7;
  v12 = v7;
  AriMsg::AriMsg((AriMsg *)&v11, 0xF88A8000);
  v8 = AriMsg::packParam((AriMsg *)&v11, 1, a1, 0xC0CuLL);
  if (!(_DWORD)v8)
  {
    if (a3)
    {
      EncodedBuf = AriMsg::getEncodedBuf((AriMsg *)&v11, a4);
      *a3 = EncodedBuf;
      if (EncodedBuf)
        v8 = 0;
      else
        v8 = 0xFFFFFFFFLL;
    }
    else
    {
      v8 = 0xFFFFFFFFLL;
    }
  }
  v14[0] = 0;
  v12 = 0u;
  v13 = 0u;
  v11 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v14[1]);
  return v8;
}

void sub_20E2ABB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiIceAtExtReq_BLK(char *a1, int *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t Ctx;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12[2];
  unint64_t v13;

  v13 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11 = v6;
  *(_OWORD *)v12 = v6;
  v9 = v6;
  v10 = v6;
  AriMsg::AriMsg((AriMsg *)&v9, 0xF88A8000);
  Ctx = AriMsg::packParam((AriMsg *)&v9, 1, a1, 0xC0CuLL);
  if (!(_DWORD)Ctx)
  {
    Ctx = AriHost::Send((AriMsg *)&v9, *a2, a3, 0, 20000);
    if (!(_DWORD)Ctx)
      Ctx = AriMsg::extractCtx((AriMsg *)&v9, a2);
  }
  v12[0] = 0;
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v12[1]);
  return Ctx;
}

void sub_20E2ABC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiIceBspSetApWakeIntervalRspCb_Extract(unsigned __int8 *a1, uint64_t a2, char *a3)
{
  __int128 v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10[2];
  unint64_t v11;

  v11 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9 = v4;
  *(_OWORD *)v10 = v4;
  v7 = v4;
  v8 = v4;
  AriMsg::AriMsg((AriMsg *)&v7, a1, a2);
  v5 = HIDWORD(v11);
  if (!HIDWORD(v11))
  {
    if (((DWORD1(v7) << 15) | ((_DWORD)v7 << 26)) == -116719616)
      v5 = AriMsg::unparam((AriMsg *)&v7, 1, a3, 4uLL);
    else
      v5 = 4294967223;
  }
  v10[0] = 0;
  v8 = 0u;
  v9 = 0u;
  v7 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v10[1]);
  return v5;
}

void sub_20E2ABCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiIceBspSetApWakeIntervalReq_ENC(int a1, int a2, uint64_t a3, int **a4, unsigned int *a5)
{
  __int128 v7;
  uint64_t v8;
  int *EncodedBuf;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void *v14[2];
  unint64_t v15;
  int v16;
  int v17;

  v16 = a2;
  v17 = a1;
  v15 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v13 = v7;
  *(_OWORD *)v14 = v7;
  v11 = v7;
  v12 = v7;
  AriMsg::AriMsg((AriMsg *)&v11, 0xF88B0000);
  v8 = AriMsg::packParam((AriMsg *)&v11, 1, (char *)&v17, 4uLL);
  if (!(_DWORD)v8)
  {
    v8 = AriMsg::packParam((AriMsg *)&v11, 2, (char *)&v16, 4uLL);
    if (!(_DWORD)v8)
    {
      if (a4)
      {
        EncodedBuf = AriMsg::getEncodedBuf((AriMsg *)&v11, a5);
        *a4 = EncodedBuf;
        if (EncodedBuf)
          v8 = 0;
        else
          v8 = 0xFFFFFFFFLL;
      }
      else
      {
        v8 = 0xFFFFFFFFLL;
      }
    }
  }
  v14[0] = 0;
  v12 = 0u;
  v13 = 0u;
  v11 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v14[1]);
  return v8;
}

void sub_20E2ABDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiIceBspSetApWakeIntervalReq_BLK(int a1, int a2, int *a3, uint64_t a4)
{
  __int128 v6;
  uint64_t Ctx;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12[2];
  unint64_t v13;
  int v14;
  int v15;

  v14 = a2;
  v15 = a1;
  v13 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11 = v6;
  *(_OWORD *)v12 = v6;
  v9 = v6;
  v10 = v6;
  AriMsg::AriMsg((AriMsg *)&v9, 0xF88B0000);
  Ctx = AriMsg::packParam((AriMsg *)&v9, 1, (char *)&v15, 4uLL);
  if (!(_DWORD)Ctx)
  {
    Ctx = AriMsg::packParam((AriMsg *)&v9, 2, (char *)&v14, 4uLL);
    if (!(_DWORD)Ctx)
    {
      Ctx = AriHost::Send((AriMsg *)&v9, *a3, a4, 0, 20000);
      if (!(_DWORD)Ctx)
        Ctx = AriMsg::extractCtx((AriMsg *)&v9, a3);
    }
  }
  v12[0] = 0;
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v12[1]);
  return Ctx;
}

void sub_20E2ABEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiIceFilerReadRspCb_Extract(unsigned __int8 *a1, uint64_t a2, char *a3, char *a4, char *a5)
{
  __int128 v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void *v14[2];
  unint64_t v15;

  v15 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v13 = v8;
  *(_OWORD *)v14 = v8;
  v11 = v8;
  v12 = v8;
  AriMsg::AriMsg((AriMsg *)&v11, a1, a2);
  v9 = HIDWORD(v15);
  if (!HIDWORD(v15))
  {
    if (((DWORD1(v11) << 15) | ((_DWORD)v11 << 26)) == -117309440)
    {
      v9 = AriMsg::unparam((AriMsg *)&v11, 1, a3, 4uLL);
      if (!(_DWORD)v9)
      {
        v9 = AriMsg::unparam((AriMsg *)&v11, 2, a4, 4uLL);
        if (!(_DWORD)v9)
          v9 = AriMsg::unparam((AriMsg *)&v11, 3, a5, 0xC00uLL);
      }
    }
    else
    {
      v9 = 4294967223;
    }
  }
  v14[0] = 0;
  v12 = 0u;
  v13 = 0u;
  v11 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v14[1]);
  return v9;
}

void sub_20E2ABFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiIceFilerReadReq_ENC(uint64_t a1, int **a2, unsigned int *a3)
{
  __int128 v5;
  int *EncodedBuf;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12[2];
  unint64_t v13;

  v13 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11 = v5;
  *(_OWORD *)v12 = v5;
  v9 = v5;
  v10 = v5;
  AriMsg::AriMsg((AriMsg *)&v9, 0xF8820000);
  if (a2)
  {
    EncodedBuf = AriMsg::getEncodedBuf((AriMsg *)&v9, a3);
    *a2 = EncodedBuf;
    if (EncodedBuf)
      v7 = 0;
    else
      v7 = 0xFFFFFFFFLL;
  }
  else
  {
    v7 = 0xFFFFFFFFLL;
  }
  v12[0] = 0;
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v12[1]);
  return v7;
}

void sub_20E2AC064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiIceFilerReadReq_BLK(int *a1, uint64_t a2)
{
  __int128 v4;
  uint64_t Ctx;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10[2];
  unint64_t v11;

  v11 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9 = v4;
  *(_OWORD *)v10 = v4;
  v7 = v4;
  v8 = v4;
  AriMsg::AriMsg((AriMsg *)&v7, 0xF8820000);
  Ctx = AriHost::Send((AriMsg *)&v7, *a1, a2, 0, 20000);
  if (!(_DWORD)Ctx)
    Ctx = AriMsg::extractCtx((AriMsg *)&v7, a1);
  v10[0] = 0;
  v8 = 0u;
  v9 = 0u;
  v7 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v10[1]);
  return Ctx;
}

void sub_20E2AC110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiIceFilerWriteRspCb_Extract(unsigned __int8 *a1, uint64_t a2, char *a3)
{
  __int128 v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10[2];
  unint64_t v11;

  v11 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9 = v4;
  *(_OWORD *)v10 = v4;
  v7 = v4;
  v8 = v4;
  AriMsg::AriMsg((AriMsg *)&v7, a1, a2);
  v5 = HIDWORD(v11);
  if (!HIDWORD(v11))
  {
    if (((DWORD1(v7) << 15) | ((_DWORD)v7 << 26)) == -117276672)
      v5 = AriMsg::unparam((AriMsg *)&v7, 1, a3, 4uLL);
    else
      v5 = 4294967223;
  }
  v10[0] = 0;
  v8 = 0u;
  v9 = 0u;
  v7 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v10[1]);
  return v5;
}

void sub_20E2AC1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiIceFilerWriteReq_ENC(int a1, char *a2, uint64_t a3, int **a4, unsigned int *a5)
{
  __int128 v8;
  uint64_t v9;
  int *EncodedBuf;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  void *v15[2];
  unint64_t v16;
  int v17;

  v17 = a1;
  v16 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14 = v8;
  *(_OWORD *)v15 = v8;
  v12 = v8;
  v13 = v8;
  AriMsg::AriMsg((AriMsg *)&v12, 0xF8828000);
  v9 = AriMsg::packParam((AriMsg *)&v12, 1, (char *)&v17, 4uLL);
  if (!(_DWORD)v9)
  {
    v9 = AriMsg::packParam((AriMsg *)&v12, 2, a2, 0xC00uLL);
    if (!(_DWORD)v9)
    {
      if (a4)
      {
        EncodedBuf = AriMsg::getEncodedBuf((AriMsg *)&v12, a5);
        *a4 = EncodedBuf;
        if (EncodedBuf)
          v9 = 0;
        else
          v9 = 0xFFFFFFFFLL;
      }
      else
      {
        v9 = 0xFFFFFFFFLL;
      }
    }
  }
  v15[0] = 0;
  v13 = 0u;
  v14 = 0u;
  v12 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v15[1]);
  return v9;
}

void sub_20E2AC2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiIceFilerWriteReq_BLK(int a1, char *a2, int *a3, uint64_t a4)
{
  __int128 v7;
  uint64_t Ctx;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void *v13[2];
  unint64_t v14;
  int v15;

  v15 = a1;
  v14 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v12 = v7;
  *(_OWORD *)v13 = v7;
  v10 = v7;
  v11 = v7;
  AriMsg::AriMsg((AriMsg *)&v10, 0xF8828000);
  Ctx = AriMsg::packParam((AriMsg *)&v10, 1, (char *)&v15, 4uLL);
  if (!(_DWORD)Ctx)
  {
    Ctx = AriMsg::packParam((AriMsg *)&v10, 2, a2, 0xC00uLL);
    if (!(_DWORD)Ctx)
    {
      Ctx = AriHost::Send((AriMsg *)&v10, *a3, a4, 0, 20000);
      if (!(_DWORD)Ctx)
        Ctx = AriMsg::extractCtx((AriMsg *)&v10, a3);
    }
  }
  v13[0] = 0;
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v13[1]);
  return Ctx;
}

void sub_20E2AC3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiMonMemoryStatusRspCb_Extract(unsigned __int8 *a1, uint64_t a2, char *a3, char *a4)
{
  __int128 v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12[2];
  unint64_t v13;

  v13 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11 = v6;
  *(_OWORD *)v12 = v6;
  v9 = v6;
  v10 = v6;
  AriMsg::AriMsg((AriMsg *)&v9, a1, a2);
  v7 = HIDWORD(v13);
  if (!HIDWORD(v13))
  {
    if (((DWORD1(v9) << 15) | ((_DWORD)v9 << 26)) == -117047296)
    {
      v7 = AriMsg::unparam((AriMsg *)&v9, 1, a3, 4uLL);
      if (!(_DWORD)v7)
        v7 = AriMsg::unparam((AriMsg *)&v9, 2, a4, 0x18uLL);
    }
    else
    {
      v7 = 4294967223;
    }
  }
  v12[0] = 0;
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v12[1]);
  return v7;
}

void sub_20E2AC4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiMonMemoryStatusReq_ENC(int a1, uint64_t a2, int **a3, unsigned int *a4)
{
  __int128 v6;
  uint64_t v7;
  int *EncodedBuf;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void *v13[2];
  unint64_t v14;
  int v15;

  v15 = a1;
  v14 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v12 = v6;
  *(_OWORD *)v13 = v6;
  v10 = v6;
  v11 = v6;
  AriMsg::AriMsg((AriMsg *)&v10, 0xF8860000);
  v7 = AriMsg::packParam((AriMsg *)&v10, 1, (char *)&v15, 4uLL);
  if (!(_DWORD)v7)
  {
    if (a3)
    {
      EncodedBuf = AriMsg::getEncodedBuf((AriMsg *)&v10, a4);
      *a3 = EncodedBuf;
      if (EncodedBuf)
        v7 = 0;
      else
        v7 = 0xFFFFFFFFLL;
    }
    else
    {
      v7 = 0xFFFFFFFFLL;
    }
  }
  v13[0] = 0;
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v13[1]);
  return v7;
}

void sub_20E2AC57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiMonMemoryStatusReq_BLK(int a1, int *a2, uint64_t a3)
{
  __int128 v5;
  uint64_t Ctx;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void *v11[2];
  unint64_t v12;
  int v13;

  v13 = a1;
  v12 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10 = v5;
  *(_OWORD *)v11 = v5;
  v8 = v5;
  v9 = v5;
  AriMsg::AriMsg((AriMsg *)&v8, 0xF8860000);
  Ctx = AriMsg::packParam((AriMsg *)&v8, 1, (char *)&v13, 4uLL);
  if (!(_DWORD)Ctx)
  {
    Ctx = AriHost::Send((AriMsg *)&v8, *a2, a3, 0, 20000);
    if (!(_DWORD)Ctx)
      Ctx = AriMsg::extractCtx((AriMsg *)&v8, a2);
  }
  v11[0] = 0;
  v9 = 0u;
  v10 = 0u;
  v8 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v11[1]);
  return Ctx;
}

void sub_20E2AC654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiSahGetCrashReportRspCb_Extract(unsigned __int8 *a1, uint64_t a2, char *a3)
{
  __int128 v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10[2];
  unint64_t v11;

  v11 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9 = v4;
  *(_OWORD *)v10 = v4;
  v7 = v4;
  v8 = v4;
  AriMsg::AriMsg((AriMsg *)&v7, a1, a2);
  v5 = HIDWORD(v11);
  if (!HIDWORD(v11))
  {
    if (((DWORD1(v7) << 15) | ((_DWORD)v7 << 26)) == -116850688)
      v5 = AriMsg::unparam((AriMsg *)&v7, 1, a3, 8uLL);
    else
      v5 = 4294967223;
  }
  v10[0] = 0;
  v8 = 0u;
  v9 = 0u;
  v7 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v10[1]);
  return v5;
}

void sub_20E2AC718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiSahGetCrashReportReq_ENC(uint64_t a1, int **a2, unsigned int *a3)
{
  __int128 v5;
  int *EncodedBuf;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12[2];
  unint64_t v13;

  v13 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11 = v5;
  *(_OWORD *)v12 = v5;
  v9 = v5;
  v10 = v5;
  AriMsg::AriMsg((AriMsg *)&v9, 0xF8890000);
  if (a2)
  {
    EncodedBuf = AriMsg::getEncodedBuf((AriMsg *)&v9, a3);
    *a2 = EncodedBuf;
    if (EncodedBuf)
      v7 = 0;
    else
      v7 = 0xFFFFFFFFLL;
  }
  else
  {
    v7 = 0xFFFFFFFFLL;
  }
  v12[0] = 0;
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v12[1]);
  return v7;
}

void sub_20E2AC7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AriMsg::~AriMsg((AriMsg *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ARI_CsiSahGetCrashReportReq_BLK(int *a1, uint64_t a2)
{
  __int128 v4;
  uint64_t Ctx;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10[2];
  unint64_t v11;

  v11 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9 = v4;
  *(_OWORD *)v10 = v4;
  v7 = v4;
  v8 = v4;
  AriMsg::AriMsg((AriMsg *)&v7, 0xF8890000);
  Ctx = AriHost::Send((AriMsg *)&v7, *a1, a2, 0, 20000);
  if (!(_DWORD)Ctx)
    Ctx = AriMsg::extractCtx((AriMsg *)&v7, a1);
  v10[0] = 0;
  v8 = 0u;
  v9 = 0u;
  v7 = 0u;
  AriMsg::FreeTlvList((_QWORD *)v10[1]);
  return Ctx;
}

